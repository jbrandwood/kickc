const nomodify byte* CH = (byte*) 764
const word* COLCRS = (word*) 85
const nomodify byte* COLOR1 = (byte*) 709
const nomodify byte* COLOR2 = (byte*) 710
const nomodify byte* COLOR4 = (byte*) 712
const nomodify byte* CRSINH = (byte*) 752
const nomodify byte DARK_ORANGE = $30
const byte* DIGITS[]  = "0123456789abcdef"atz
const nomodify byte MEDIUM_BLUE = $80
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const nomodify byte** OLDADR = (byte**) 94
const nomodify byte* OLDCHR = (byte*) 93
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
const byte* ROWCRS = (byte*) 84
const nomodify byte** SAVMSC = (byte**) 88
const byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
const nomodify byte WHITE = $fe
void __start()
byte bgcolor(byte bgcolor::color)
byte bgcolor::color
byte bgcolor::old
byte bgcolor::return
byte bordercolor(byte bordercolor::color)
byte bordercolor::color
byte bordercolor::old
byte bordercolor::return
void clrscr()
byte conio_display_cursor loadstore zp[1]:136 6.733333340333332E8
byte conio_reverse_value loadstore zp[1]:135 9803923.578431373
byte conio_scroll_enable loadstore zp[1]:137 8547009.435897436
void cputc(volatile byte cputc::c)
volatile byte cputc::c loadstore zp[1]:138 7.750250125E7
byte cputc::convertToScreenCode1_return
byte cputc::convertToScreenCode1_return#0 reg byte x 1.833333336666667E8
byte* cputc::convertToScreenCode1_v
const byte* cputc::convertToScreenCode1_v#0 convertToScreenCode1_v = &cputc::c
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 1.0000001E7
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 s zp[2]:132 5000000.5
to_nomodify byte* cputs::s#10 s zp[2]:132 1.5050002E7
to_nomodify byte* cputs::s#11 s zp[2]:132 100001.0
void cputsxy(byte cputsxy::x , byte cputsxy::y , to_nomodify byte* cputsxy::s)
to_nomodify byte* cputsxy::s
byte cputsxy::x
const byte cputsxy::x#0 x = 0
byte cputsxy::y
const byte cputsxy::y#0 y = 1
byte cursor(byte cursor::onoff)
byte cursor::oldValue
byte cursor::onoff
const byte cursor::onoff#0 onoff = 0
byte cursor::return
byte* cursorLocation()
word~ cursorLocation::$0 zp[2]:139 2.000000000002E12
byte*~ cursorLocation::$1 zp[2]:139 2.000000000002E12
word~ cursorLocation::$3 zp[2]:139 1.5000000000015E12
word~ cursorLocation::$4 zp[2]:143 2.000000000002E12
word~ cursorLocation::$5 zp[2]:139 2.000000000002E12
byte* cursorLocation::return
byte* cursorLocation::return#0 return zp[2]:139 2.000000002E9
byte* cursorLocation::return#1 return zp[2]:139 2.7525000000075E11
byte* cursorLocation::return#3 return zp[2]:139 2.00000000002E11
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte gotoxy::x
byte gotoxy::x#4 reg byte a 1.0000000001E10
byte gotoxy::y
byte gotoxy::y#4 reg byte x 5.0000000005E9
byte kbhit()
byte kbhit::return
byte kbhit::return#2 reg byte a 333.6666666666667
byte kbhit::return#3 reg byte a 2002.0
void main()
signed word main::i
signed word main::i#1 i zp[2]:128 151.5
signed word main::i#2 i zp[2]:128 50.5
signed word main::i1
signed word main::i1#1 i1 zp[2]:130 151.5
signed word main::i1#2 i1 zp[2]:130 50.5
const byte* main::name = "Mark"at
const byte* main::s[$f]  = "Hello, World!
"at
const byte* main::s1[8]  = "Hello, "at
const byte* main::s2[$11]  = " - press a key!
"at
const byte* main::s3[$15]  = "Scrolling lines ... "at
const byte* main::s4[2]  = "
"at
const byte* main::s5[$19]  = "Some wrapping lines ... "at
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#0 destination zp[2]:143 3.333333336666667E8
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:143 1.0000000000001E13
byte* memcpy::dst#2 dst zp[2]:143 1.0003333333334666E13
byte* memcpy::dst#4 dst zp[2]:143 2.0000000002E10
word memcpy::num
const word memcpy::num#0 num = (word)$28*$17
void* memcpy::return
void* memcpy::source
byte* memcpy::source#0 source zp[2]:139 3.333333336666667E8
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:139 2.0000000000002E13
byte* memcpy::src#2 src zp[2]:139 1.000250000000125E13
byte* memcpy::src#4 src zp[2]:139 1.0000000001E10
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:145 1.25125000000025E12
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 dst zp[2]:141 2.0000000000002E13
byte* memset::dst#2 dst zp[2]:141 1.3336666666668332E13
byte* memset::dst#4 dst zp[2]:141 2.0000000002E10
byte* memset::end
byte* memset::end#0 end zp[2]:139 1.6683333333336665E12
word memset::num
word memset::num#2 num zp[2]:139 1.0000000001E10
void* memset::return
void* memset::str
byte* memset::str#0 str zp[2]:141 1.000000001E9
void* memset::str#3 str zp[2]:141 3.333333673333334E8
void* memset::str#7 str zp[2]:141 202.0
void* memset::str#8 str zp[2]:141 2.000000002E9
void newline()
byte* newline::start
byte* newline::start#0 start zp[2]:141 7.5000000075E8
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
const byte* printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 reg byte a 7001.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_sint(signed word printf_sint::value , byte printf_sint::format_min_length , byte printf_sint::format_justify_left , byte printf_sint::format_sign_always , byte printf_sint::format_zero_padding , byte printf_sint::format_upper_case , byte printf_sint::format_radix)
struct printf_format_number printf_sint::format
byte printf_sint::format_justify_left
byte printf_sint::format_min_length
byte printf_sint::format_radix
byte printf_sint::format_sign_always
byte printf_sint::format_upper_case
byte printf_sint::format_zero_padding
word printf_sint::uvalue
signed word printf_sint::value
signed word printf_sint::value#0 value zp[2]:132 1001.0
signed word printf_sint::value#1 value zp[2]:132 202.0
signed word printf_sint::value#2 value zp[2]:132 202.0
signed word printf_sint::value#3 value zp[2]:132 1068.3333333333335
signed word printf_sint::value#5 value zp[2]:132 2002.0
void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
struct printf_format_string printf_string::format
byte printf_string::format_justify_left
byte printf_string::format_min_length
signed byte printf_string::len
signed byte printf_string::padding
byte* printf_string::str
void putchar(byte putchar::code)
byte putchar::code
byte* putchar::loc
byte* putchar::loc#0 loc zp[2]:139 1.000000001E9
byte putchar::newChar
byte putchar::newChar#0 reg byte a 1.5000000015E9
const byte* rawmap[$100]  = kickasm {{ .var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}
 }}
byte revers(byte revers::onoff)
byte revers::old
byte revers::onoff
byte revers::onoff#2 reg byte a 101.0
byte revers::return
byte scroll(byte scroll::onoff)
byte scroll::old
byte scroll::onoff
const byte scroll::onoff#0 onoff = 0
byte scroll::return
void setcursor()
byte setcursor::c
byte setcursor::c#0 reg byte x 6.6666666667333336E10
byte setcursor::c#1 reg byte x 2.00000000002E11
byte setcursor::c#3 reg byte x 3.00000000003E11
byte* setcursor::loc
byte* setcursor::loc#0 loc zp[2]:139 1.00000000001E11
byte textcolor(byte textcolor::color)
byte textcolor::color
byte textcolor::old
byte textcolor::return
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 2000002.0
byte~ utoa::$11 reg byte a 20002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:139 287143.2857142857
byte* utoa::buffer#14 buffer zp[2]:139 1500001.5
byte* utoa::buffer#3 buffer zp[2]:139 20002.0
byte* utoa::buffer#4 buffer zp[2]:139 2000002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:134 2000002.0
byte utoa::digit#2 digit zp[1]:134 285714.5714285714
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:141 600000.6000000001
word* utoa::digit_values
byte utoa::max_digits
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 500000.5
byte utoa::started#4 reg byte x 1000001.0
word utoa::value
word utoa::value#0 value zp[2]:132 1000001.0
word utoa::value#1 value zp[2]:132 5501.0
word utoa::value#2 value zp[2]:132 572857.857142857
word utoa::value#6 value zp[2]:132 1500001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:139 1375000.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.0000000001E10
byte utoa_append::digit#2 reg byte x 1.00050000015E10
word utoa_append::return
word utoa_append::return#0 return zp[2]:132 2000002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:141 3.3335000005E9
word utoa_append::value
word utoa_append::value#0 value zp[2]:132 3666667.333333333
word utoa_append::value#1 value zp[2]:132 2.0000000002E10
word utoa_append::value#2 value zp[2]:132 5.001833334166666E9
void waitkey()
byte~ waitkey::$1 reg byte a 2002.0

zp[2]:128 [ main::i#2 main::i#1 ]
zp[2]:130 [ main::i1#2 main::i1#1 ]
reg byte a [ gotoxy::x#4 ]
reg byte x [ gotoxy::y#4 ]
reg byte a [ revers::onoff#2 ]
zp[2]:132 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 cputs::s#10 cputs::s#11 cputs::s#0 ]
reg byte x [ setcursor::c#3 setcursor::c#0 setcursor::c#1 ]
reg byte a [ kbhit::return#2 ]
zp[1]:134 [ utoa::digit#2 utoa::digit#1 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:135 [ conio_reverse_value ]
zp[1]:136 [ conio_display_cursor ]
zp[1]:137 [ conio_scroll_enable ]
reg byte a [ cputs::c#1 ]
zp[1]:138 [ cputc::c ]
reg byte a [ kbhit::return#3 ]
reg byte a [ waitkey::$1 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
zp[2]:139 [ cursorLocation::return#3 setcursor::loc#0 cursorLocation::return#1 cursorLocation::$0 cursorLocation::$1 cursorLocation::return#0 putchar::loc#0 cursorLocation::$3 cursorLocation::$5 memcpy::src#2 memcpy::src#4 memcpy::src#1 memcpy::source#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 memset::num#2 memset::end#0 ]
reg byte x [ cputc::convertToScreenCode1_return#0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:141 [ utoa::digit_value#0 utoa_append::sub#0 memset::str#3 memset::str#7 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 newline::start#0 ]
zp[2]:143 [ cursorLocation::$4 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memcpy::destination#0 ]
reg byte a [ putchar::newChar#0 ]
zp[2]:145 [ memcpy::src_end#0 ]
mem[12] [ printf_buffer ]
