
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  *((const nomodify byte*) main::SCREEN + (number) 0) ← (const byte) main::t_c1_center_x
  *((const nomodify byte*) main::SCREEN + (number) 1) ← (const byte) main::t_c1_center_y
  *((const nomodify byte*) main::SCREEN + (number) 2) ← (const byte) main::t_c1_radius
  *((const nomodify byte*) main::SCREEN + (number) 3) ← (const byte) main::t_c2_center_x
  *((const nomodify byte*) main::SCREEN + (number) 4) ← (const byte) main::t_c2_center_y
  *((const nomodify byte*) main::SCREEN + (number) 5) ← (const byte) main::t_c2_radius
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(struct Point) Circle::center
(byte) Circle::radius
(byte) Point::x
(byte) Point::y
(struct Circle) TwoCircles::c1
(struct Circle) TwoCircles::c2
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(struct Circle) main::t_c1
(struct Point) main::t_c1_center
(const byte) main::t_c1_center_x = (byte) 1
(const byte) main::t_c1_center_y = (byte) 2
(const byte) main::t_c1_radius = (byte) 3
(struct Circle) main::t_c2
(struct Point) main::t_c2_center
(const byte) main::t_c2_center_x = (byte) 4
(const byte) main::t_c2_center_y = (byte) 5
(const byte) main::t_c2_radius = (byte) 6

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) main::SCREEN + (number) 0) ← (const byte) main::t_c1_center_x
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) main::SCREEN + (number) 1) ← (const byte) main::t_c1_center_y
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) main::SCREEN + (number) 2) ← (const byte) main::t_c1_radius
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) main::SCREEN + (number) 3) ← (const byte) main::t_c2_center_x
Adding number conversion cast (unumber) 4 in *((const nomodify byte*) main::SCREEN + (number) 4) ← (const byte) main::t_c2_center_y
Adding number conversion cast (unumber) 5 in *((const nomodify byte*) main::SCREEN + (number) 5) ← (const byte) main::t_c2_radius
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero main::SCREEN in [0] *((const nomodify byte*) main::SCREEN + (byte) 0) ← (const byte) main::t_c1_center_x
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::SCREEN+2)
Consolidated array index constant in *(main::SCREEN+3)
Consolidated array index constant in *(main::SCREEN+4)
Consolidated array index constant in *(main::SCREEN+5)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::t_c1_center_x
  [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::t_c1_center_y
  [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::t_c1_radius
  [3] *((const nomodify byte*) main::SCREEN+(byte) 3) ← (const byte) main::t_c2_center_x
  [4] *((const nomodify byte*) main::SCREEN+(byte) 4) ← (const byte) main::t_c2_center_y
  [5] *((const nomodify byte*) main::SCREEN+(byte) 5) ← (const byte) main::t_c2_radius
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(struct Point) Circle::center
(byte) Circle::radius
(byte) Point::x
(byte) Point::y
(struct Circle) TwoCircles::c1
(struct Circle) TwoCircles::c2
(void()) main()
(struct Circle) main::t_c1
(struct Point) main::t_c1_center
(struct Circle) main::t_c2
(struct Point) main::t_c2_center

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct - nesting structs 3 levels
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const t_c1_radius = 3
    .const t_c2_radius = 6
    .const t_c1_center_x = 1
    .const t_c1_center_y = 2
    .const t_c2_center_x = 4
    .const t_c2_center_y = 5
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::t_c1_center_x -- _deref_pbuc1=vbuc2 
    lda #t_c1_center_x
    sta SCREEN
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::t_c1_center_y -- _deref_pbuc1=vbuc2 
    lda #t_c1_center_y
    sta SCREEN+1
    // [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::t_c1_radius -- _deref_pbuc1=vbuc2 
    lda #t_c1_radius
    sta SCREEN+2
    // [3] *((const nomodify byte*) main::SCREEN+(byte) 3) ← (const byte) main::t_c2_center_x -- _deref_pbuc1=vbuc2 
    lda #t_c2_center_x
    sta SCREEN+3
    // [4] *((const nomodify byte*) main::SCREEN+(byte) 4) ← (const byte) main::t_c2_center_y -- _deref_pbuc1=vbuc2 
    lda #t_c2_center_y
    sta SCREEN+4
    // [5] *((const nomodify byte*) main::SCREEN+(byte) 5) ← (const byte) main::t_c2_radius -- _deref_pbuc1=vbuc2 
    lda #t_c2_radius
    sta SCREEN+5
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::t_c1_center_x [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::t_c1_center_y [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::t_c1_radius [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) main::SCREEN+(byte) 3) ← (const byte) main::t_c2_center_x [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify byte*) main::SCREEN+(byte) 4) ← (const byte) main::t_c2_center_y [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) main::SCREEN+(byte) 5) ← (const byte) main::t_c2_radius [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [Circle] 
Uplift Scope [TwoCircles] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [Point] best 45 combination 
Uplifting [Circle] best 45 combination 
Uplifting [TwoCircles] best 45 combination 
Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct - nesting structs 3 levels
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const t_c1_radius = 3
    .const t_c2_radius = 6
    .const t_c1_center_x = 1
    .const t_c1_center_y = 2
    .const t_c2_center_x = 4
    .const t_c2_center_y = 5
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::t_c1_center_x -- _deref_pbuc1=vbuc2 
    lda #t_c1_center_x
    sta SCREEN
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::t_c1_center_y -- _deref_pbuc1=vbuc2 
    lda #t_c1_center_y
    sta SCREEN+1
    // [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::t_c1_radius -- _deref_pbuc1=vbuc2 
    lda #t_c1_radius
    sta SCREEN+2
    // [3] *((const nomodify byte*) main::SCREEN+(byte) 3) ← (const byte) main::t_c2_center_x -- _deref_pbuc1=vbuc2 
    lda #t_c2_center_x
    sta SCREEN+3
    // [4] *((const nomodify byte*) main::SCREEN+(byte) 4) ← (const byte) main::t_c2_center_y -- _deref_pbuc1=vbuc2 
    lda #t_c2_center_y
    sta SCREEN+4
    // [5] *((const nomodify byte*) main::SCREEN+(byte) 5) ← (const byte) main::t_c2_radius -- _deref_pbuc1=vbuc2 
    lda #t_c2_radius
    sta SCREEN+5
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(struct Point) Circle::center
(byte) Circle::radius
(byte) Point::x
(byte) Point::y
(struct Circle) TwoCircles::c1
(struct Circle) TwoCircles::c2
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(struct Circle) main::t_c1
(struct Point) main::t_c1_center
(const byte) main::t_c1_center_x = (byte) 1
(const byte) main::t_c1_center_y = (byte) 2
(const byte) main::t_c1_radius = (byte) 3
(struct Circle) main::t_c2
(struct Point) main::t_c2_center
(const byte) main::t_c2_center_x = (byte) 4
(const byte) main::t_c2_center_y = (byte) 5
(const byte) main::t_c2_radius = (byte) 6



FINAL ASSEMBLER
Score: 42

  // File Comments
// Minimal struct - nesting structs 3 levels
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const t_c1_radius = 3
    .const t_c2_radius = 6
    .const t_c1_center_x = 1
    .const t_c1_center_y = 2
    .const t_c2_center_x = 4
    .const t_c2_center_y = 5
    .label SCREEN = $400
    // SCREEN[0] = t.c1.center.x
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::t_c1_center_x -- _deref_pbuc1=vbuc2 
    lda #t_c1_center_x
    sta SCREEN
    // SCREEN[1] = t.c1.center.y
    // [1] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) main::t_c1_center_y -- _deref_pbuc1=vbuc2 
    lda #t_c1_center_y
    sta SCREEN+1
    // SCREEN[2] = t.c1.radius
    // [2] *((const nomodify byte*) main::SCREEN+(byte) 2) ← (const byte) main::t_c1_radius -- _deref_pbuc1=vbuc2 
    lda #t_c1_radius
    sta SCREEN+2
    // SCREEN[3] = t.c2.center.x
    // [3] *((const nomodify byte*) main::SCREEN+(byte) 3) ← (const byte) main::t_c2_center_x -- _deref_pbuc1=vbuc2 
    lda #t_c2_center_x
    sta SCREEN+3
    // SCREEN[4] = t.c2.center.y
    // [4] *((const nomodify byte*) main::SCREEN+(byte) 4) ← (const byte) main::t_c2_center_y -- _deref_pbuc1=vbuc2 
    lda #t_c2_center_y
    sta SCREEN+4
    // SCREEN[5] = t.c2.radius
    // [5] *((const nomodify byte*) main::SCREEN+(byte) 5) ← (const byte) main::t_c2_radius -- _deref_pbuc1=vbuc2 
    lda #t_c2_radius
    sta SCREEN+5
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

