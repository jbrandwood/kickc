
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2 main::@3
  main::i#2 = phi( main/main::i#0, main::@2/main::i#3, main::@3/main::i#4 )
  main::i#1 = ++ main::i#2
  main::$0 = main::i#1 < $28*6
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#1 )
  main::$1 = SCREEN[main::i#3] == ' '
  main::$2 = ! main::$1
  if(main::$2) goto main::@3
  to:main::@1
main::@3: scope:[main]  from main::@2
  main::i#4 = phi( main::@2/main::i#3 )
  SCREEN[main::i#4] = ++ SCREEN[main::i#4]
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const SCREEN = (char *)$400
void __start()
void main()
bool main::$0
bool main::$1
bool main::$2
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4

Adding number conversion cast (unumber) $28*6 in main::$0 = main::i#1 < $28*6
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Inversing boolean not [7] main::$2 = SCREEN[main::i#3] != ' ' from [6] main::$1 = SCREEN[main::i#3] == ' '
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::i#1 = main::i#3 main::i#4 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [4] if(main::i#1<(char)$28*6) goto main::@2
Simple Condition main::$2 [6] if(SCREEN[main::i#1]!=' ') goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [6] if(SCREEN[main::i#1]==' ') goto main::@1
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast $28*6
Successful SSA optimization PassNCastSimplification
Added new block during phi lifting main::@4(between main::@2 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::i#6 = main::i#1
Coalesced (already) [8] main::i#5 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@4
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2 main::@3
  [1] main::i#2 = phi( main/0, main::@2/main::i#1, main::@3/main::i#1 )
  [2] main::i#1 = ++ main::i#2
  [3] if(main::i#1<$28*6) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [5] if(SCREEN[main::i#1]==' ') goto main::@1
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] SCREEN[main::i#1] = ++ SCREEN[main::i#1]
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
char main::i
char main::i#1 // 109.25
char main::i#2 // 213.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] if(SCREEN[main::i#1]==' ') goto main::@1 [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [5] if(SCREEN[main::i#1]==' ') goto main::@1 [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 322.25: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 3056 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 3056 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests break statement in a simple loop
  // Upstart
  // Commodore 64 PRG executable file
.file [name="loop-while-continue.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@2 main::@3 to main::@1 [phi:main::@2/main::@3->main::@1]
  __b1_from___b2:
  __b1_from___b3:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2/main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [3] if(main::i#1<$28*6) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28*6
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // main::@2
  __b2:
    // [5] if(SCREEN[main::i#1]==' ') goto main::@1 -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda SCREEN,x
    cmp #' '
    beq __b1_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [6] SCREEN[main::i#1] = ++ SCREEN[main::i#1] -- pbuc1_derefidx_vbuxx=_inc_pbuc1_derefidx_vbuxx 
    inc SCREEN,x
    jmp __b1_from___b3
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char * const SCREEN = (char *) 1024
void main()
char main::i
char main::i#1 // reg byte x 109.25
char main::i#2 // reg byte x 213.0

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 1856

  // File Comments
// Tests break statement in a simple loop
  // Upstart
  // Commodore 64 PRG executable file
.file [name="loop-while-continue.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@2 main::@3 to main::@1 [phi:main::@2/main::@3->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2/main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // while(++i<40*6)
    // [2] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [3] if(main::i#1<$28*6) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28*6
    bcc __b2
    // main::@return
    // }
    // [4] return 
    rts
    // main::@2
  __b2:
    // if(SCREEN[i]==' ')
    // [5] if(SCREEN[main::i#1]==' ') goto main::@1 -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda SCREEN,x
    cmp #' '
    beq __b1
    // main::@3
    // SCREEN[i]++;
    // [6] SCREEN[main::i#1] = ++ SCREEN[main::i#1] -- pbuc1_derefidx_vbuxx=_inc_pbuc1_derefidx_vbuxx 
    inc SCREEN,x
    jmp __b1
}
  // File Data

