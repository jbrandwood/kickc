(label) @1
(label) @begin
(label) @end
(const byte*) COLORS = (byte*) 55296
(const byte*) COLS[]  = { (byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 7 }
(const byte) FILL = (byte) $e6
(const byte*) SCREEN = (byte*) 1024
(const byte*) XPOS[]  = { (byte) 5, (byte) $f, (byte) 6, (byte) $22, (byte) $15, (byte) $1f }
(const byte*) YPOS[]  = { (byte) 5, (byte) 8, (byte) $e, (byte) 2, (byte) $11, (byte) $16 }
(void()) animate()
(byte~) animate::$0 reg byte x 2002.0
(byte~) animate::$12 reg byte x 2002.0
(byte~) animate::$15 reg byte a 2002.0
(byte~) animate::$18 reg byte a 2002.0
(byte~) animate::$3 reg byte x 2002.0
(byte~) animate::$6 reg byte a 2002.0
(byte~) animate::$9 reg byte a 2002.0
(label) animate::@1
(label) animate::@10
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$11 reg byte a 2.00000000002E11
(byte~) findcol::$9 reg byte a 2.00000000002E11
(label) findcol::@1
(label) findcol::@10
(label) findcol::@11
(label) findcol::@12
(label) findcol::@13
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#1 reg byte y 2.00000000002E11
(byte) findcol::diff#2 reg byte y 2.00000000002E11
(byte) findcol::diff#3 reg byte a 2.00000000002E11
(byte) findcol::diff#4 reg byte a 2.00000000002E11
(byte) findcol::diff#5 reg byte y 1.00000000001E11
(byte) findcol::diff#7 reg byte a 1.3333333333466667E11
(byte) findcol::i
(byte) findcol::i#1 i zp[1]:4 1.00000000001E11
(byte) findcol::i#10 i zp[1]:4 3.00000000003E10
(byte) findcol::mincol
(byte) findcol::mincol#1 reg byte x 2.00000000002E11
(byte) findcol::mincol#10 reg byte x 1.6666666666833332E10
(byte) findcol::mincol#4 reg byte x 1.00000000001E11
(byte) findcol::mindiff
(byte) findcol::mindiff#10 mindiff zp[1]:5 1.7647058823705883E10
(byte) findcol::mindiff#12 reg byte a 1.500000000015E11
(byte) findcol::mindiff#13 mindiff zp[1]:5 2.00000000002E11
(byte) findcol::mindiff#15 reg byte a 2.00000000002E11
(byte) findcol::return
(byte) findcol::return#0 reg byte a 2000002.0
(byte) findcol::return#3 reg byte x 3.3333666667333336E10
(byte) findcol::x
(byte) findcol::x#0 x zp[1]:8 1.60000400002E10
(byte) findcol::xp
(byte) findcol::xp#0 xp zp[1]:10 1.00000000001E11
(byte) findcol::y
(byte) findcol::y#0 y zp[1]:9 1.6666708333541668E10
(byte) findcol::yp
(byte) findcol::yp#0 yp zp[1]:11 6.2500000000625E10
(void()) initscreen()
(label) initscreen::@1
(label) initscreen::@2
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#1 screen zp[2]:6 2002.0
(byte*) initscreen::screen#2 screen zp[2]:6 1334.6666666666667
(void()) main()
(label) main::@1
(label) main::@2
(const byte) numpoints = (byte) 6
(void()) render()
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@4
(label) render::@return
(byte) render::col
(byte) render::col#0 reg byte a 2000002.0
(byte*) render::colline
(byte*) render::colline#1 colline zp[2]:6 66667.33333333333
(byte*) render::colline#5 colline zp[2]:6 120000.30000000002
(byte) render::x
(byte) render::x#1 x zp[1]:3 1500001.5
(byte) render::x#2 x zp[1]:3 571429.1428571428
(byte) render::y
(byte) render::y#1 y zp[1]:2 150001.5
(byte) render::y#4 y zp[1]:2 109091.18181818182

zp[1]:2 [ render::y#4 render::y#1 ]
zp[1]:3 [ render::x#2 render::x#1 ]
zp[1]:4 [ findcol::i#10 findcol::i#1 ]
zp[1]:5 [ findcol::mindiff#10 findcol::mindiff#13 ]
reg byte x [ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ]
reg byte y [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
reg byte a [ findcol::mindiff#12 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
zp[2]:6 [ initscreen::screen#2 initscreen::screen#1 render::colline#5 render::colline#1 ]
reg byte x [ animate::$0 ]
reg byte x [ animate::$3 ]
reg byte a [ animate::$6 ]
reg byte a [ animate::$9 ]
reg byte x [ animate::$12 ]
reg byte a [ animate::$15 ]
reg byte a [ animate::$18 ]
zp[1]:8 [ findcol::x#0 ]
zp[1]:9 [ findcol::y#0 ]
reg byte a [ findcol::return#0 ]
reg byte a [ render::col#0 ]
zp[1]:10 [ findcol::xp#0 ]
zp[1]:11 [ findcol::yp#0 ]
reg byte a [ findcol::$9 ]
reg byte a [ findcol::$11 ]
