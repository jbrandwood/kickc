@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) idx#23 ← phi( main/(byte) 0 main::@2/(byte) idx#10 )
  [5] (byte) main::c#2 ← phi( main/(byte) 0 main::@2/(byte) main::c#1 )
  [6] (byte) outsw::c#0 ← (byte) main::c#2
  [7] call outsw 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (byte) main::c#1 ← ++ (byte) main::c#2
  [9] if((byte) main::c#1!=(byte) $28) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) outsw((byte) outsw::c)
outsw: scope:[outsw]  from main::@1
  [11] phi()
  [12] call out 
  to:outsw::@1
outsw::@1: scope:[outsw]  from outsw
  [13] (byte) outw::c#0 ← (byte) outsw::c#0
  [14] call outw 
  to:outsw::@return
outsw::@return: scope:[outsw]  from outsw::@1
  [15] return 
  to:@return

(void()) outw((byte) outw::c)
outw: scope:[outw]  from outsw::@1
  [16] (byte) out::c#1 ← (byte) outw::c#0 << (byte) 4
  [17] call out 
  to:outw::@1
outw::@1: scope:[outw]  from outw
  [18] (byte) out::c#2 ← (byte) outw::c#0 & (byte) $f
  [19] call out 
  to:outw::@return
outw::@return: scope:[outw]  from outw::@1
  [20] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from outsw outw outw::@1
  [21] (byte) out::c#3 ← phi( outsw/(byte) '-' outw/(byte) out::c#1 outw::@1/(byte) out::c#2 )
  [21] (byte) idx#20 ← phi( outsw/(byte) idx#23 outw/(byte) idx#10 outw::@1/(byte) idx#10 )
  [22] (byte) idx#10 ← ++ (byte) idx#20
  [23] *((const nomodify byte*) SCREEN + (byte) idx#10) ← (byte) out::c#3
  to:out::@return
out::@return: scope:[out]  from out
  [24] return 
  to:@return
