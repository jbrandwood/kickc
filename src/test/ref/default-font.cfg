
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call memset 
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [2] (byte) main::x#4 ← phi( main::@3/(byte) main::x#1 main/(byte) 0 )
  [2] (byte*) main::screen#5 ← phi( main::@3/(byte*) main::screen#2 main/(const byte*) SCREEN+(byte) $28+(byte) 1 )
  [2] (byte) main::ch#3 ← phi( main::@3/(byte) main::ch#1 main/(byte) 0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [3] (byte) main::y#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::y#1 )
  [3] (byte*) main::screen#3 ← phi( main::@1/(byte*) main::screen#5 main::@2/(byte*) main::screen#1 )
  [3] (byte) main::ch#2 ← phi( main::@1/(byte) main::ch#3 main::@2/(byte) main::ch#1 )
  [4] *((byte*) main::screen#3) ← (byte) main::ch#2
  [5] (byte*) main::screen#1 ← ++ (byte*) main::screen#3
  [6] (byte) main::ch#1 ← ++ (byte) main::ch#2
  [7] (byte) main::y#1 ← ++ (byte) main::y#2
  [8] if((byte) main::y#1!=(byte) $10) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [9] (byte*) main::screen#2 ← (byte*) main::screen#1 + (byte)(number) $28-(number) $10
  [10] (byte) main::x#1 ← ++ (byte) main::x#4
  [11] if((byte) main::x#1!=(byte) $10) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [12] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main
  [13] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [14] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [15] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [16] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [17] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [18] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
