@begin: scope:[]  from
  [0] (byte) val ← (byte) 0
  to:@1
@1: scope:[]  from @begin
  [1] callprepare main 
  [2] callexecute main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

__stackcall (void()) printother()
printother: scope:[printother]  from
  [4] (byte) printother::i ← (byte) 0
  to:printother::@1
printother::@1: scope:[printother]  from printother printother::@1
  [5] *((const byte*) SCREEN+(byte) $28 + (byte) printother::i) ← ++ *((const byte*) SCREEN+(byte) $28 + (byte) printother::i)
  [6] (byte) printother::i ← ++ (byte) printother::i
  [7] if((byte) printother::i!=(byte) 6) goto printother::@1
  to:printother::@return
printother::@return: scope:[printother]  from printother::@1
  [8] return 
  to:@return

__stackcall (void()) incval()
incval: scope:[incval]  from
  [9] (byte) val ← ++ (byte) val
  to:incval::@return
incval::@return: scope:[incval]  from incval
  [10] return 
  to:@return

__stackcall (void()) printval()
printval: scope:[printval]  from
  [11] *((const byte*) SCREEN) ← (byte) val
  to:printval::@return
printval::@return: scope:[printval]  from printval
  [12] return 
  to:@return

__stackcall (void()) ival()
ival: scope:[ival]  from
  [13] callprepare incval 
  [14] callexecute incval 
  to:ival::@return
ival::@return: scope:[ival]  from ival
  [15] return 
  to:@return

__stackcall (void()) pval()
pval: scope:[pval]  from
  [16] callprepare printval 
  [17] callexecute printval 
  to:pval::@return
pval::@return: scope:[pval]  from pval
  [18] return 
  to:@return

__stackcall (void()) main()
main: scope:[main]  from
  [19] (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [20] callprepare pval 
  [21] callexecute pval 
  [22] callprepare printother 
  [23] callexecute printother 
  [24] callprepare ival 
  [25] callexecute ival 
  [26] (byte) main::i ← ++ (byte) main::i
  [27] if((byte) main::i!=(byte) 6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [28] return 
  to:@return
