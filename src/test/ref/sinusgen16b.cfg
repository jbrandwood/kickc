
void main()
main: scope:[main]  from
  [0] phi()
  [1] call sin16s_gen 
  to:main::@4
main::@4: scope:[main]  from main
  [2] phi()
  [3] call sin16s_genb 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@5 main::@7
  [6] main::i#2 = phi( main::@5/0, main::@7/main::i#1 )
  [6] print_char_cursor#55 = phi( main::@5/print_screen#0, main::@7/print_char_cursor#1 )
  [6] main::st2#2 = phi( main::@5/main::sintab2, main::@7/main::st2#1 )
  [6] main::st1#2 = phi( main::@5/main::sintab1, main::@7/main::st1#1 )
  [7] main::sw#0 = *main::st1#2 - *main::st2#2
  [8] if(main::sw#0<0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [9] phi()
  [10] call print_str 
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [11] print_char_cursor#54 = phi( main::@1/print_char_cursor#55, main::@3/print_char_cursor#1 )
  [12] print_sint::w#1 = main::sw#0
  [13] call print_sint 
  to:main::@6
main::@6: scope:[main]  from main::@2
  [14] phi()
  [15] call print_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [16] main::st1#1 = main::st1#2 + SIZEOF_SIGNED_WORD
  [17] main::st2#1 = main::st2#2 + SIZEOF_SIGNED_WORD
  [18] main::i#1 = ++ main::i#2
  [19] if(main::i#1!=$78) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  [20] return 
  to:@return

void sin16s_gen(signed word* sin16s_gen::sintab , word sin16s_gen::wavelength)
sin16s_gen: scope:[sin16s_gen]  from main
  [21] phi()
  [22] call div32u16u 
  [23] div32u16u::return#0 = div32u16u::return#1
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  [24] sin16s_gen::step#0 = div32u16u::return#0
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  [25] sin16s_gen::sintab#2 = phi( sin16s_gen::@3/main::sintab1, sin16s_gen::@4/sin16s_gen::sintab#0 )
  [25] sin16s_gen::x#2 = phi( sin16s_gen::@3/0, sin16s_gen::@4/sin16s_gen::x#1 )
  [25] sin16s_gen::i#2 = phi( sin16s_gen::@3/0, sin16s_gen::@4/sin16s_gen::i#1 )
  [26] if(sin16s_gen::i#2<main::wavelength) goto sin16s_gen::@2
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@1
  [27] return 
  to:@return
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen::@1
  [28] sin16s::x#0 = sin16s_gen::x#2
  [29] call sin16s 
  [30] sin16s::return#0 = sin16s::return#1
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@2
  [31] sin16s_gen::$2 = sin16s::return#0
  [32] *sin16s_gen::sintab#2 = sin16s_gen::$2
  [33] sin16s_gen::sintab#0 = sin16s_gen::sintab#2 + SIZEOF_SIGNED_WORD
  [34] sin16s_gen::x#1 = sin16s_gen::x#2 + sin16s_gen::step#0
  [35] sin16s_gen::i#1 = ++ sin16s_gen::i#2
  to:sin16s_gen::@1

void sin16s_genb(signed word* sin16s_genb::sintab , word sin16s_genb::wavelength)
sin16s_genb: scope:[sin16s_genb]  from main::@4
  [36] phi()
  [37] call div32u16u 
  [38] div32u16u::return#3 = div32u16u::return#1
  to:sin16s_genb::@3
sin16s_genb::@3: scope:[sin16s_genb]  from sin16s_genb
  [39] sin16s_genb::step#0 = div32u16u::return#3
  to:sin16s_genb::@1
sin16s_genb::@1: scope:[sin16s_genb]  from sin16s_genb::@3 sin16s_genb::@4
  [40] sin16s_genb::sintab#2 = phi( sin16s_genb::@3/main::sintab2, sin16s_genb::@4/sin16s_genb::sintab#0 )
  [40] sin16s_genb::x#2 = phi( sin16s_genb::@3/0, sin16s_genb::@4/sin16s_genb::x#1 )
  [40] sin16s_genb::i#2 = phi( sin16s_genb::@3/0, sin16s_genb::@4/sin16s_genb::i#1 )
  [41] if(sin16s_genb::i#2<main::wavelength) goto sin16s_genb::@2
  to:sin16s_genb::@return
sin16s_genb::@return: scope:[sin16s_genb]  from sin16s_genb::@1
  [42] return 
  to:@return
sin16s_genb::@2: scope:[sin16s_genb]  from sin16s_genb::@1
  [43] sin16sb::x#0 = > sin16s_genb::x#2
  [44] call sin16sb 
  [45] sin16sb::return#0 = sin16sb::return#1
  to:sin16s_genb::@4
sin16s_genb::@4: scope:[sin16s_genb]  from sin16s_genb::@2
  [46] sin16s_genb::$3 = sin16sb::return#0
  [47] *sin16s_genb::sintab#2 = sin16s_genb::$3
  [48] sin16s_genb::sintab#0 = sin16s_genb::sintab#2 + SIZEOF_SIGNED_WORD
  [49] sin16s_genb::x#1 = sin16s_genb::x#2 + sin16s_genb::step#0
  [50] sin16s_genb::i#1 = ++ sin16s_genb::i#2
  to:sin16s_genb::@1

void print_cls()
print_cls: scope:[print_cls]  from main::@5
  [51] phi()
  [52] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [53] return 
  to:@return

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from main::@3 main::@6
  [54] print_char_cursor#57 = phi( main::@3/print_char_cursor#55, main::@6/print_char_cursor#12 )
  [54] print_str::str#6 = phi( main::@3/main::str1, main::@6/main::str )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [55] print_char_cursor#1 = phi( print_str/print_char_cursor#57, print_str::@3/print_char_cursor#12 )
  [55] print_str::str#3 = phi( print_str/print_str::str#6, print_str::@3/print_str::str#0 )
  [56] if(0!=*print_str::str#3) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [57] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [58] print_char::ch#0 = *print_str::str#3
  [59] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [60] print_str::str#0 = ++ print_str::str#3
  to:print_str::@1

void print_sint(signed word print_sint::w)
print_sint: scope:[print_sint]  from main::@2
  [61] if(print_sint::w#1<0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [62] phi()
  [63] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [64] print_sint::w#4 = phi( print_sint::@4/print_sint::w#0, print_sint::@3/print_sint::w#1 )
  [65] print_uint::w#0 = (word)print_sint::w#4
  [66] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [67] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [68] phi()
  [69] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [70] print_sint::w#0 = - print_sint::w#1
  to:print_sint::@2

dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen sin16s_genb
  [71] phi()
  [72] call divr16u 
  [73] divr16u::return#2 = divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [74] div32u16u::quotient_hi#0 = divr16u::return#2
  [75] divr16u::rem#4 = rem16u#17
  [76] call divr16u 
  [77] divr16u::return#3 = divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [78] div32u16u::quotient_lo#0 = divr16u::return#3
  [79] div32u16u::return#1 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [80] return 
  to:@return

signed word sin16s(dword sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen::@2
  [81] if(sin16s::x#0<PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [82] sin16s::x#1 = sin16s::x#0 - PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [83] sin16s::isUpper#2 = phi( sin16s/0, sin16s::@4/1 )
  [83] sin16s::x#4 = phi( sin16s/sin16s::x#0, sin16s::@4/sin16s::x#1 )
  [84] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [85] sin16s::x#2 = PI_u4f28 - sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [86] sin16s::x#6 = phi( sin16s::@1/sin16s::x#4, sin16s::@5/sin16s::x#2 )
  [87] sin16s::$4 = sin16s::x#6 << 3
  [88] sin16s::x1#0 = > sin16s::$4
  [89] mulu16_sel::v1#0 = sin16s::x1#0
  [90] mulu16_sel::v2#0 = sin16s::x1#0
  [91] call mulu16_sel 
  [92] mulu16_sel::return#0 = mulu16_sel::return#17
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [93] sin16s::x2#0 = mulu16_sel::return#0
  [94] mulu16_sel::v1#1 = sin16s::x2#0
  [95] mulu16_sel::v2#1 = sin16s::x1#0
  [96] call mulu16_sel 
  [97] mulu16_sel::return#1 = mulu16_sel::return#17
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [98] sin16s::x3#0 = mulu16_sel::return#1
  [99] mulu16_sel::v1#2 = sin16s::x3#0
  [100] call mulu16_sel 
  [101] mulu16_sel::return#14 = mulu16_sel::return#17
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [102] sin16s::x3_6#0 = mulu16_sel::return#14
  [103] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0
  [104] mulu16_sel::v1#3 = sin16s::x3#0
  [105] mulu16_sel::v2#3 = sin16s::x1#0
  [106] call mulu16_sel 
  [107] mulu16_sel::return#15 = mulu16_sel::return#17
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [108] sin16s::x4#0 = mulu16_sel::return#15
  [109] mulu16_sel::v1#4 = sin16s::x4#0
  [110] mulu16_sel::v2#4 = sin16s::x1#0
  [111] call mulu16_sel 
  [112] mulu16_sel::return#16 = mulu16_sel::return#17
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [113] sin16s::x5#0 = mulu16_sel::return#16
  [114] sin16s::x5_128#0 = sin16s::x5#0 >> 4
  [115] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0
  [116] if(sin16s::isUpper#2==0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [117] sin16s::sinx#1 = - (signed word)sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [118] sin16s::return#1 = phi( sin16s::@12/sin16s::return#5, sin16s::@6/sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [119] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [120] sin16s::return#5 = (signed word)sin16s::usinx#1
  to:sin16s::@3

signed word sin16sb(word sin16sb::x)
sin16sb: scope:[sin16sb]  from sin16s_genb::@2
  [121] if(sin16sb::x#0<PI_u4f12) goto sin16sb::@1
  to:sin16sb::@4
sin16sb::@4: scope:[sin16sb]  from sin16sb
  [122] sin16sb::x#1 = sin16sb::x#0 - PI_u4f12
  to:sin16sb::@1
sin16sb::@1: scope:[sin16sb]  from sin16sb sin16sb::@4
  [123] sin16sb::isUpper#2 = phi( sin16sb/0, sin16sb::@4/1 )
  [123] sin16sb::x#4 = phi( sin16sb/sin16sb::x#0, sin16sb::@4/sin16sb::x#1 )
  [124] if(sin16sb::x#4<PI_HALF_u4f12) goto sin16sb::@2
  to:sin16sb::@5
sin16sb::@5: scope:[sin16sb]  from sin16sb::@1
  [125] sin16sb::x#2 = PI_u4f12 - sin16sb::x#4
  to:sin16sb::@2
sin16sb::@2: scope:[sin16sb]  from sin16sb::@1 sin16sb::@5
  [126] sin16sb::x#6 = phi( sin16sb::@1/sin16sb::x#4, sin16sb::@5/sin16sb::x#2 )
  [127] sin16sb::x1#0 = sin16sb::x#6 << 3
  [128] mulu16_sel::v1#5 = sin16sb::x1#0
  [129] mulu16_sel::v2#5 = sin16sb::x1#0
  [130] call mulu16_sel 
  [131] mulu16_sel::return#18 = mulu16_sel::return#17
  to:sin16sb::@7
sin16sb::@7: scope:[sin16sb]  from sin16sb::@2
  [132] sin16sb::x2#0 = mulu16_sel::return#18
  [133] mulu16_sel::v1#6 = sin16sb::x2#0
  [134] mulu16_sel::v2#6 = sin16sb::x1#0
  [135] call mulu16_sel 
  [136] mulu16_sel::return#19 = mulu16_sel::return#17
  to:sin16sb::@8
sin16sb::@8: scope:[sin16sb]  from sin16sb::@7
  [137] sin16sb::x3#0 = mulu16_sel::return#19
  [138] mulu16_sel::v1#7 = sin16sb::x3#0
  [139] call mulu16_sel 
  [140] mulu16_sel::return#20 = mulu16_sel::return#17
  to:sin16sb::@9
sin16sb::@9: scope:[sin16sb]  from sin16sb::@8
  [141] sin16sb::x3_6#0 = mulu16_sel::return#20
  [142] sin16sb::usinx#0 = sin16sb::x1#0 - sin16sb::x3_6#0
  [143] mulu16_sel::v1#8 = sin16sb::x3#0
  [144] mulu16_sel::v2#8 = sin16sb::x1#0
  [145] call mulu16_sel 
  [146] mulu16_sel::return#10 = mulu16_sel::return#17
  to:sin16sb::@10
sin16sb::@10: scope:[sin16sb]  from sin16sb::@9
  [147] sin16sb::x4#0 = mulu16_sel::return#10
  [148] mulu16_sel::v1#9 = sin16sb::x4#0
  [149] mulu16_sel::v2#9 = sin16sb::x1#0
  [150] call mulu16_sel 
  [151] mulu16_sel::return#11 = mulu16_sel::return#17
  to:sin16sb::@11
sin16sb::@11: scope:[sin16sb]  from sin16sb::@10
  [152] sin16sb::x5#0 = mulu16_sel::return#11
  [153] sin16sb::x5_128#0 = sin16sb::x5#0 >> 4
  [154] sin16sb::usinx#1 = sin16sb::usinx#0 + sin16sb::x5_128#0
  [155] if(sin16sb::isUpper#2==0) goto sin16sb::@12
  to:sin16sb::@6
sin16sb::@6: scope:[sin16sb]  from sin16sb::@11
  [156] sin16sb::sinx#1 = - (signed word)sin16sb::usinx#1
  to:sin16sb::@3
sin16sb::@3: scope:[sin16sb]  from sin16sb::@12 sin16sb::@6
  [157] sin16sb::return#1 = phi( sin16sb::@12/sin16sb::return#5, sin16sb::@6/sin16sb::sinx#1 )
  to:sin16sb::@return
sin16sb::@return: scope:[sin16sb]  from sin16sb::@3
  [158] return 
  to:@return
sin16sb::@12: scope:[sin16sb]  from sin16sb::@11
  [159] sin16sb::return#5 = (signed word)sin16sb::usinx#1
  to:sin16sb::@3

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  [160] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [161] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [162] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [163] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [164] *memset::dst#2 = memset::c#0
  [165] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  [166] print_char_cursor#36 = phi( print_sint::@1/print_char_cursor#54, print_sint::@3/print_char_cursor#54, print_str::@2/print_char_cursor#1, print_uchar/print_char_cursor#12, print_uchar::@1/print_char_cursor#12 )
  [166] print_char::ch#5 = phi( print_sint::@1/'-', print_sint::@3/' ', print_str::@2/print_char::ch#0, print_uchar/print_char::ch#3, print_uchar::@1/print_char::ch#4 )
  [167] *print_char_cursor#36 = print_char::ch#5
  [168] print_char_cursor#12 = ++ print_char_cursor#36
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [169] return 
  to:@return

void print_uint(word print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2
  [170] print_uchar::b#0 = > print_uint::w#0
  [171] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [172] print_uchar::b#1 = < print_uint::w#0
  [173] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [174] return 
  to:@return

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [175] divr16u::dividend#5 = phi( div32u16u/>PI2_u4f28, div32u16u::@1/<PI2_u4f28 )
  [175] divr16u::rem#10 = phi( div32u16u/0, div32u16u::@1/divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [176] divr16u::i#2 = phi( divr16u/0, divr16u::@3/divr16u::i#1 )
  [176] divr16u::quotient#3 = phi( divr16u/0, divr16u::@3/divr16u::return#0 )
  [176] divr16u::dividend#3 = phi( divr16u/divr16u::dividend#5, divr16u::@3/divr16u::dividend#0 )
  [176] divr16u::rem#5 = phi( divr16u/divr16u::rem#10, divr16u::@3/divr16u::rem#11 )
  [177] divr16u::rem#0 = divr16u::rem#5 << 1
  [178] divr16u::$1 = > divr16u::dividend#3
  [179] divr16u::$2 = divr16u::$1 & $80
  [180] if(divr16u::$2==0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [181] divr16u::rem#1 = divr16u::rem#0 | 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [182] divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  [183] divr16u::dividend#0 = divr16u::dividend#3 << 1
  [184] divr16u::quotient#1 = divr16u::quotient#3 << 1
  [185] if(divr16u::rem#6<main::wavelength) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [186] divr16u::quotient#2 = ++ divr16u::quotient#1
  [187] divr16u::rem#2 = divr16u::rem#6 - main::wavelength
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [188] divr16u::return#0 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  [188] divr16u::rem#11 = phi( divr16u::@2/divr16u::rem#6, divr16u::@5/divr16u::rem#2 )
  [189] divr16u::i#1 = ++ divr16u::i#2
  [190] if(divr16u::i#1!=$10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [191] rem16u#17 = divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [192] return 
  to:@return

word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9 sin16sb::@10 sin16sb::@2 sin16sb::@7 sin16sb::@8 sin16sb::@9
  [193] mulu16_sel::select#10 = phi( sin16s::@10/0, sin16s::@2/0, sin16s::@7/1, sin16s::@8/1, sin16s::@9/0, sin16sb::@10/0, sin16sb::@2/0, sin16sb::@7/1, sin16sb::@8/1, sin16sb::@9/0 )
  [193] mulu16_sel::v2#10 = phi( sin16s::@10/mulu16_sel::v2#4, sin16s::@2/mulu16_sel::v2#0, sin16s::@7/mulu16_sel::v2#1, sin16s::@8/(word)$10000/6, sin16s::@9/mulu16_sel::v2#3, sin16sb::@10/mulu16_sel::v2#9, sin16sb::@2/mulu16_sel::v2#5, sin16sb::@7/mulu16_sel::v2#6, sin16sb::@8/(word)$10000/6, sin16sb::@9/mulu16_sel::v2#8 )
  [193] mulu16_sel::v1#10 = phi( sin16s::@10/mulu16_sel::v1#4, sin16s::@2/mulu16_sel::v1#0, sin16s::@7/mulu16_sel::v1#1, sin16s::@8/mulu16_sel::v1#2, sin16s::@9/mulu16_sel::v1#3, sin16sb::@10/mulu16_sel::v1#9, sin16sb::@2/mulu16_sel::v1#5, sin16sb::@7/mulu16_sel::v1#6, sin16sb::@8/mulu16_sel::v1#7, sin16sb::@9/mulu16_sel::v1#8 )
  [194] mul16u::a#0 = mulu16_sel::v1#10
  [195] mul16u::b#0 = mulu16_sel::v2#10
  [196] call mul16u 
  [197] mul16u::return#0 = mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [198] mulu16_sel::$0 = mul16u::return#0
  [199] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#10
  [200] mulu16_sel::return#17 = > mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [201] return 
  to:@return

void print_uchar(byte print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [202] print_uchar::b#2 = phi( print_uint/print_uchar::b#0, print_uint::@1/print_uchar::b#1 )
  [203] print_uchar::$0 = print_uchar::b#2 >> 4
  [204] print_char::ch#3 = print_hextab[print_uchar::$0]
  [205] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [206] print_uchar::$2 = print_uchar::b#2 & $f
  [207] print_char::ch#4 = print_hextab[print_uchar::$2]
  [208] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [209] return 
  to:@return

dword mul16u(word mul16u::a , word mul16u::b)
mul16u: scope:[mul16u]  from mulu16_sel
  [210] mul16u::mb#0 = (dword)mul16u::b#0
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [211] mul16u::mb#2 = phi( mul16u/mul16u::mb#0, mul16u::@3/mul16u::mb#1 )
  [211] mul16u::res#2 = phi( mul16u/0, mul16u::@3/mul16u::res#6 )
  [211] mul16u::a#2 = phi( mul16u/mul16u::a#0, mul16u::@3/mul16u::a#1 )
  [212] if(mul16u::a#2!=0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [213] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [214] mul16u::$1 = mul16u::a#2 & 1
  [215] if(mul16u::$1==0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [216] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [217] mul16u::res#6 = phi( mul16u::@2/mul16u::res#2, mul16u::@4/mul16u::res#1 )
  [218] mul16u::a#1 = mul16u::a#2 >> 1
  [219] mul16u::mb#1 = mul16u::mb#2 << 1
  to:mul16u::@1
