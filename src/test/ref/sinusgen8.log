Fixing pointer increment (signed word*) sin16s_gen::sintab ← ++ (signed word*) sin16s_gen::sintab
Fixing pointer increment (signed word*) sin16s_gen2::sintab ← ++ (signed word*) sin16s_gen2::sintab
Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_lines::str)
Warning! Adding boolean cast to non-boolean condition (byte) print_str_lines::ch
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_at::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte) print_str_lines::ch
Identified constant variable (byte*) HEAP_TOP
Identified constant variable (word) main::wavelength
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) divr16u::@7
Culled Empty Block (label) @3
Culled Empty Block (label) div16u::@1
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) mul8u::@5
Culled Empty Block (label) mul8u::@6
Culled Empty Block (label) mul8u::@8
Culled Empty Block (label) mul8u::@9
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) sin8s_gen::@4
Culled Empty Block (label) sin8s_gen::@3
Culled Empty Block (label) sin8s_gen::@5
Culled Empty Block (label) sin8s_gen::@6
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) sin8s::@9
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) mulu8_sel::@1
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) @38
Culled Empty Block (label) print_sbyte::@4
Culled Empty Block (label) @39
Culled Empty Block (label) @40
Culled Empty Block (label) @41
Culled Empty Block (label) @42
Culled Empty Block (label) @43
Culled Empty Block (label) @44
Culled Empty Block (label) @45
Culled Empty Block (label) @46
Culled Empty Block (label) @47
Culled Empty Block (label) @48
Culled Empty Block (label) @50
Culled Empty Block (label) @51
Culled Empty Block (label) @52
Culled Empty Block (label) @53
Culled Empty Block (label) @54
Culled Empty Block (label) @55
Culled Empty Block (label) @56
Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@13

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u
  (word) divr16u::divisor#5 ← phi( div16u/(word) divr16u::divisor#0 )
  (word) divr16u::dividend#4 ← phi( div16u/(word) divr16u::dividend#1 )
  (word) divr16u::rem#8 ← phi( div16u/(word) divr16u::rem#3 )
  (word) divr16u::quotient#0 ← (number) 0
  (byte) divr16u::i#0 ← (byte) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#3 ← phi( divr16u/(word) divr16u::divisor#5 divr16u::@3/(word) divr16u::divisor#6 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#4 divr16u::@3/(word) divr16u::dividend#5 )
  (word) divr16u::rem#4 ← phi( divr16u/(word) divr16u::rem#8 divr16u::@3/(word) divr16u::rem#9 )
  (word~) divr16u::$0 ← (word) divr16u::rem#4 << (number) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
  (bool~) divr16u::$3 ← (number~) divr16u::$2 != (number) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#1 ← phi( divr16u::@1/(word) divr16u::divisor#3 divr16u::@4/(word) divr16u::divisor#4 )
  (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#3 ← phi( divr16u::@1/(word) divr16u::dividend#2 divr16u::@4/(word) divr16u::dividend#6 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (number) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#4 ← phi( divr16u::@1/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#6 ← phi( divr16u::@1/(word) divr16u::dividend#2 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (number~) divr16u::$5 ← (word) divr16u::rem#6 | (number) 1
  (word) divr16u::rem#1 ← (number~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#6 ← phi( divr16u::@2/(word) divr16u::divisor#1 divr16u::@5/(word) divr16u::divisor#2 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#5 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#7 )
  (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#7 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#2 ← phi( divr16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::rem#7 ← phi( divr16u::@2/(word) divr16u::rem#5 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#7 - (word) divr16u::divisor#2
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) divr16u::return#3 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#3
  return 
  to:@return

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from sin8s_gen
  (word) div16u::divisor#1 ← phi( sin8s_gen/(word) div16u::divisor#0 )
  (word) div16u::dividend#1 ← phi( sin8s_gen/(word) div16u::dividend#0 )
  (word) divr16u::dividend#1 ← (word) div16u::dividend#1
  (word) divr16u::divisor#0 ← (word) div16u::divisor#1
  (word) divr16u::rem#3 ← (number) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  (word) divr16u::return#4 ← phi( div16u/(word) divr16u::return#2 )
  (word~) div16u::$0 ← (word) divr16u::return#4
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  (word) div16u::return#3 ← phi( div16u::@2/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#3
  return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mulu8_sel
  (byte) mul8u::a#5 ← phi( mulu8_sel/(byte) mul8u::a#1 )
  (byte) mul8u::b#1 ← phi( mulu8_sel/(byte) mul8u::b#0 )
  (word) mul8u::res#0 ← (number) 0
  (word) mul8u::mb#0 ← (byte) mul8u::b#1
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#5 mul8u::@4/(byte) mul8u::a#0 )
  (bool~) mul8u::$0 ← (byte) mul8u::a#2 != (number) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#3 ← phi( mul8u::@1/(byte) mul8u::a#2 )
  (number~) mul8u::$1 ← (byte) mul8u::a#3 & (number) 1
  (bool~) mul8u::$2 ← (number~) mul8u::$1 != (number) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@7
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@7
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@7/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@7/(word) mul8u::mb#3 )
  (byte) mul8u::a#4 ← phi( mul8u::@2/(byte) mul8u::a#3 mul8u::@7/(byte) mul8u::a#6 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#4 >> (number) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@7: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#6 ← phi( mul8u::@2/(byte) mul8u::a#3 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#3 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#3
  return 
  to:@return
@13: scope:[]  from @begin
  (word) PI2_u4f12 ← (number) $6488
  (word) PI_u4f12 ← (number) $3244
  (word) PI_HALF_u4f12 ← (number) $1922
  to:@32

(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
sin8s_gen: scope:[sin8s_gen]  from main
  (signed byte*) sin8s_gen::sintab#6 ← phi( main/(signed byte*) sin8s_gen::sintab#1 )
  (word) sin8s_gen::wavelength#1 ← phi( main/(word) sin8s_gen::wavelength#0 )
  (word) div16u::dividend#0 ← (word) PI2_u4f12
  (word) div16u::divisor#0 ← (word) sin8s_gen::wavelength#1
  call div16u 
  (word) div16u::return#2 ← (word) div16u::return#1
  to:sin8s_gen::@7
sin8s_gen::@7: scope:[sin8s_gen]  from sin8s_gen
  (signed byte*) sin8s_gen::sintab#5 ← phi( sin8s_gen/(signed byte*) sin8s_gen::sintab#6 )
  (word) sin8s_gen::wavelength#3 ← phi( sin8s_gen/(word) sin8s_gen::wavelength#1 )
  (word) div16u::return#4 ← phi( sin8s_gen/(word) div16u::return#2 )
  (word~) sin8s_gen::$0 ← (word) div16u::return#4
  (word) sin8s_gen::step#0 ← (word~) sin8s_gen::$0
  (word) sin8s_gen::x#0 ← (number) 0
  (word) sin8s_gen::i#0 ← (number) 0
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@7 sin8s_gen::@8
  (word) sin8s_gen::step#3 ← phi( sin8s_gen::@7/(word) sin8s_gen::step#0 sin8s_gen::@8/(word) sin8s_gen::step#1 )
  (signed byte*) sin8s_gen::sintab#4 ← phi( sin8s_gen::@7/(signed byte*) sin8s_gen::sintab#5 sin8s_gen::@8/(signed byte*) sin8s_gen::sintab#0 )
  (word) sin8s_gen::x#4 ← phi( sin8s_gen::@7/(word) sin8s_gen::x#0 sin8s_gen::@8/(word) sin8s_gen::x#1 )
  (word) sin8s_gen::wavelength#2 ← phi( sin8s_gen::@7/(word) sin8s_gen::wavelength#3 sin8s_gen::@8/(word) sin8s_gen::wavelength#4 )
  (word) sin8s_gen::i#2 ← phi( sin8s_gen::@7/(word) sin8s_gen::i#0 sin8s_gen::@8/(word) sin8s_gen::i#1 )
  (bool~) sin8s_gen::$1 ← (word) sin8s_gen::i#2 < (word) sin8s_gen::wavelength#2
  if((bool~) sin8s_gen::$1) goto sin8s_gen::@2
  to:sin8s_gen::@return
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  (word) sin8s_gen::wavelength#5 ← phi( sin8s_gen::@1/(word) sin8s_gen::wavelength#2 )
  (word) sin8s_gen::i#4 ← phi( sin8s_gen::@1/(word) sin8s_gen::i#2 )
  (word) sin8s_gen::step#2 ← phi( sin8s_gen::@1/(word) sin8s_gen::step#3 )
  (signed byte*) sin8s_gen::sintab#3 ← phi( sin8s_gen::@1/(signed byte*) sin8s_gen::sintab#4 )
  (word) sin8s_gen::x#2 ← phi( sin8s_gen::@1/(word) sin8s_gen::x#4 )
  (word) sin8s::x#0 ← (word) sin8s_gen::x#2
  call sin8s 
  (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#2
  to:sin8s_gen::@8
sin8s_gen::@8: scope:[sin8s_gen]  from sin8s_gen::@2
  (word) sin8s_gen::wavelength#4 ← phi( sin8s_gen::@2/(word) sin8s_gen::wavelength#5 )
  (word) sin8s_gen::i#3 ← phi( sin8s_gen::@2/(word) sin8s_gen::i#4 )
  (word) sin8s_gen::step#1 ← phi( sin8s_gen::@2/(word) sin8s_gen::step#2 )
  (word) sin8s_gen::x#3 ← phi( sin8s_gen::@2/(word) sin8s_gen::x#2 )
  (signed byte*) sin8s_gen::sintab#2 ← phi( sin8s_gen::@2/(signed byte*) sin8s_gen::sintab#3 )
  (signed byte) sin8s::return#3 ← phi( sin8s_gen::@2/(signed byte) sin8s::return#0 )
  (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#3
  *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2
  (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2
  (word~) sin8s_gen::$3 ← (word) sin8s_gen::x#3 + (word) sin8s_gen::step#1
  (word) sin8s_gen::x#1 ← (word~) sin8s_gen::$3
  (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#3
  to:sin8s_gen::@1
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@1
  return 
  to:@return

(signed byte()) sin8s((word) sin8s::x)
sin8s: scope:[sin8s]  from sin8s_gen::@2
  (word) sin8s::x#3 ← phi( sin8s_gen::@2/(word) sin8s::x#0 )
  (byte) sin8s::isUpper#0 ← (number) 0
  (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (word) PI_u4f12
  (bool~) sin8s::$1 ← ! (bool~) sin8s::$0
  if((bool~) sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) sin8s::isUpper#0 sin8s::@5/(byte) sin8s::isUpper#1 )
  (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#3 sin8s::@5/(word) sin8s::x#1 )
  (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (word) PI_HALF_u4f12
  (bool~) sin8s::$3 ← ! (bool~) sin8s::$2
  if((bool~) sin8s::$3) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  (word) sin8s::x#5 ← phi( sin8s/(word) sin8s::x#3 )
  (word~) sin8s::$19 ← (word) sin8s::x#5 - (word) PI_u4f12
  (word) sin8s::x#1 ← (word~) sin8s::$19
  (byte) sin8s::isUpper#1 ← (number) 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  (byte) sin8s::isUpper#9 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 sin8s::@6/(byte) sin8s::isUpper#11 )
  (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#2 )
  (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
  (byte~) sin8s::$5 ← > (word~) sin8s::$4
  (byte) sin8s::x1#0 ← (byte~) sin8s::$5
  (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::select#0 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#6
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@2
  (byte) sin8s::isUpper#8 ← phi( sin8s::@2/(byte) sin8s::isUpper#9 )
  (byte) sin8s::x1#1 ← phi( sin8s::@2/(byte) sin8s::x1#0 )
  (byte) mulu8_sel::return#7 ← phi( sin8s::@2/(byte) mulu8_sel::return#0 )
  (byte~) sin8s::$6 ← (byte) mulu8_sel::return#7
  (byte) sin8s::x2#0 ← (byte~) sin8s::$6
  (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#1
  (byte) mulu8_sel::select#1 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#6
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  (byte) sin8s::isUpper#7 ← phi( sin8s::@10/(byte) sin8s::isUpper#8 )
  (byte) sin8s::x1#4 ← phi( sin8s::@10/(byte) sin8s::x1#1 )
  (byte) mulu8_sel::return#8 ← phi( sin8s::@10/(byte) mulu8_sel::return#1 )
  (byte~) sin8s::$7 ← (byte) mulu8_sel::return#8
  (byte) sin8s::x3#0 ← (byte~) sin8s::$7
  (byte) sin8s::DIV_6 ← (number) $2b
  (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  (byte) mulu8_sel::v2#2 ← (byte) sin8s::DIV_6
  (byte) mulu8_sel::select#2 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#6
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  (byte) sin8s::isUpper#6 ← phi( sin8s::@11/(byte) sin8s::isUpper#7 )
  (byte) sin8s::x3#1 ← phi( sin8s::@11/(byte) sin8s::x3#0 )
  (byte) sin8s::x1#2 ← phi( sin8s::@11/(byte) sin8s::x1#4 )
  (byte) mulu8_sel::return#9 ← phi( sin8s::@11/(byte) mulu8_sel::return#2 )
  (byte~) sin8s::$8 ← (byte) mulu8_sel::return#9
  (byte) sin8s::x3_6#0 ← (byte~) sin8s::$8
  (byte~) sin8s::$9 ← (byte) sin8s::x1#2 - (byte) sin8s::x3_6#0
  (byte) sin8s::usinx#0 ← (byte~) sin8s::$9
  (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#1
  (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#2
  (byte) mulu8_sel::select#3 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#3 ← (byte) mulu8_sel::return#6
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  (byte) sin8s::isUpper#5 ← phi( sin8s::@12/(byte) sin8s::isUpper#6 )
  (byte) sin8s::usinx#7 ← phi( sin8s::@12/(byte) sin8s::usinx#0 )
  (byte) sin8s::x1#3 ← phi( sin8s::@12/(byte) sin8s::x1#2 )
  (byte) mulu8_sel::return#10 ← phi( sin8s::@12/(byte) mulu8_sel::return#3 )
  (byte~) sin8s::$10 ← (byte) mulu8_sel::return#10
  (byte) sin8s::x4#0 ← (byte~) sin8s::$10
  (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#3
  (byte) mulu8_sel::select#4 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#4 ← (byte) mulu8_sel::return#6
  to:sin8s::@14
sin8s::@14: scope:[sin8s]  from sin8s::@13
  (byte) sin8s::isUpper#3 ← phi( sin8s::@13/(byte) sin8s::isUpper#5 )
  (byte) sin8s::usinx#3 ← phi( sin8s::@13/(byte) sin8s::usinx#7 )
  (byte) mulu8_sel::return#11 ← phi( sin8s::@13/(byte) mulu8_sel::return#4 )
  (byte~) sin8s::$11 ← (byte) mulu8_sel::return#11
  (byte) sin8s::x5#0 ← (byte~) sin8s::$11
  (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
  (byte) sin8s::x5_128#0 ← (byte~) sin8s::$12
  (byte~) sin8s::$13 ← (byte) sin8s::usinx#3 + (byte) sin8s::x5_128#0
  (byte) sin8s::usinx#1 ← (byte~) sin8s::$13
  (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
  (bool~) sin8s::$15 ← ! (bool~) sin8s::$14
  if((bool~) sin8s::$15) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  (byte) sin8s::isUpper#11 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 )
  (word) sin8s::x#7 ← phi( sin8s::@1/(word) sin8s::x#4 )
  (word~) sin8s::$20 ← (word) PI_u4f12 - (word) sin8s::x#7
  (word) sin8s::x#2 ← (word~) sin8s::$20
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@14 sin8s::@7
  (byte) sin8s::isUpper#2 ← phi( sin8s::@14/(byte) sin8s::isUpper#3 sin8s::@7/(byte) sin8s::isUpper#4 )
  (byte) sin8s::usinx#4 ← phi( sin8s::@14/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  (signed byte~) sin8s::$16 ← ((signed byte)) (byte) sin8s::usinx#4
  (signed byte) sin8s::sinx#0 ← (signed byte~) sin8s::$16
  (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (number) 0
  (bool~) sin8s::$18 ← ! (bool~) sin8s::$17
  if((bool~) sin8s::$18) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@14
  (byte) sin8s::isUpper#4 ← phi( sin8s::@14/(byte) sin8s::isUpper#3 )
  (byte) sin8s::usinx#5 ← phi( sin8s::@14/(byte) sin8s::usinx#1 )
  (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#5
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  (signed byte) sin8s::sinx#2 ← phi( sin8s::@3/(signed byte) sin8s::sinx#0 sin8s::@8/(signed byte) sin8s::sinx#1 )
  (signed byte) sin8s::return#1 ← (signed byte) sin8s::sinx#2
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  (byte) sin8s::usinx#6 ← phi( sin8s::@3/(byte) sin8s::usinx#4 )
  (signed byte~) sin8s::$21 ← ((signed byte)) (byte) sin8s::usinx#6
  (signed byte~) sin8s::$22 ← - (signed byte~) sin8s::$21
  (signed byte) sin8s::sinx#1 ← (signed byte~) sin8s::$22
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4
  (signed byte) sin8s::return#4 ← phi( sin8s::@4/(signed byte) sin8s::return#1 )
  (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#4
  return 
  to:@return

(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@13 sin8s::@2
  (byte) mulu8_sel::select#6 ← phi( sin8s::@10/(byte) mulu8_sel::select#1 sin8s::@11/(byte) mulu8_sel::select#2 sin8s::@12/(byte) mulu8_sel::select#3 sin8s::@13/(byte) mulu8_sel::select#4 sin8s::@2/(byte) mulu8_sel::select#0 )
  (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(byte) mulu8_sel::v2#1 sin8s::@11/(byte) mulu8_sel::v2#2 sin8s::@12/(byte) mulu8_sel::v2#3 sin8s::@13/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#1 sin8s::@11/(byte) mulu8_sel::v1#2 sin8s::@12/(byte) mulu8_sel::v1#3 sin8s::@13/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
  (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5
  call mul8u 
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:mulu8_sel::@2
mulu8_sel::@2: scope:[mulu8_sel]  from mulu8_sel
  (byte) mulu8_sel::select#5 ← phi( mulu8_sel/(byte) mulu8_sel::select#6 )
  (word) mul8u::return#4 ← phi( mulu8_sel/(word) mul8u::return#2 )
  (word~) mulu8_sel::$0 ← (word) mul8u::return#4
  (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  (byte~) mulu8_sel::$2 ← > (word~) mulu8_sel::$1
  (byte) mulu8_sel::return#5 ← (byte~) mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@2
  (byte) mulu8_sel::return#12 ← phi( mulu8_sel::@2/(byte) mulu8_sel::return#5 )
  (byte) mulu8_sel::return#6 ← (byte) mulu8_sel::return#12
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@4/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#2
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@5/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@5/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$4 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#5 ← phi( memset::@4/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@32: scope:[]  from @13
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@49

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@3 main::@7
  (byte*) print_char_cursor#47 ← phi( main::@3/(byte*) print_char_cursor#45 main::@7/(byte*) print_char_cursor#15 )
  (byte*) print_str::str#5 ← phi( main::@3/(byte*) print_str::str#2 main::@7/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#38 ← phi( print_str/(byte*) print_char_cursor#47 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#5 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← (number) 0 != *((byte*) print_str::str#3)
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#20 ← phi( print_str::@1/(byte*) print_char_cursor#38 )
  (byte*) print_str::str#4 ← phi( print_str::@1/(byte*) print_str::str#3 )
  *((byte*) print_char_cursor#20) ← *((byte*) print_str::str#4)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#21 ← phi( print_str::@1/(byte*) print_char_cursor#38 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#21
  return 
  to:@return

(void()) print_sbyte((signed byte) print_sbyte::b)
print_sbyte: scope:[print_sbyte]  from main::@2
  (byte*) print_char_cursor#48 ← phi( main::@2/(byte*) print_char_cursor#44 )
  (signed byte) print_sbyte::b#2 ← phi( main::@2/(signed byte) print_sbyte::b#1 )
  (bool~) print_sbyte::$0 ← (signed byte) print_sbyte::b#2 < (number) 0
  if((bool~) print_sbyte::$0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#5 ← phi( print_sbyte/(signed byte) print_sbyte::b#2 )
  (byte*) print_char_cursor#39 ← phi( print_sbyte/(byte*) print_char_cursor#48 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sbyte::@5
print_sbyte::@5: scope:[print_sbyte]  from print_sbyte::@1
  (signed byte) print_sbyte::b#3 ← phi( print_sbyte::@1/(signed byte) print_sbyte::b#5 )
  (byte*) print_char_cursor#22 ← phi( print_sbyte::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#22
  (signed byte~) print_sbyte::$5 ← - (signed byte) print_sbyte::b#3
  (signed byte) print_sbyte::b#0 ← (signed byte~) print_sbyte::$5
  to:print_sbyte::@2
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#7 ← phi( print_sbyte/(signed byte) print_sbyte::b#2 )
  (byte*) print_char_cursor#40 ← phi( print_sbyte/(byte*) print_char_cursor#48 )
  (byte) print_char::ch#1 ← (byte) ' '
  call print_char 
  to:print_sbyte::@6
print_sbyte::@6: scope:[print_sbyte]  from print_sbyte::@3
  (signed byte) print_sbyte::b#6 ← phi( print_sbyte::@3/(signed byte) print_sbyte::b#7 )
  (byte*) print_char_cursor#23 ← phi( print_sbyte::@3/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#23
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@5 print_sbyte::@6
  (byte*) print_char_cursor#41 ← phi( print_sbyte::@5/(byte*) print_char_cursor#3 print_sbyte::@6/(byte*) print_char_cursor#4 )
  (signed byte) print_sbyte::b#4 ← phi( print_sbyte::@5/(signed byte) print_sbyte::b#0 print_sbyte::@6/(signed byte) print_sbyte::b#6 )
  (byte~) print_sbyte::$1 ← ((byte)) (signed byte) print_sbyte::b#4
  (byte) print_byte::b#0 ← (byte~) print_sbyte::$1
  call print_byte 
  to:print_sbyte::@7
print_sbyte::@7: scope:[print_sbyte]  from print_sbyte::@2
  (byte*) print_char_cursor#24 ← phi( print_sbyte::@2/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#24
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@7
  (byte*) print_char_cursor#25 ← phi( print_sbyte::@7/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#25
  return 
  to:@return
@49: scope:[]  from @32
  (byte*) print_screen#6 ← phi( @32/(byte*) print_screen#0 )
  (byte*) print_char_cursor#51 ← phi( @32/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#15 ← phi( @32/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab ← (const string) $0
  to:@57

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_sbyte::@2
  (byte*) print_char_cursor#42 ← phi( print_sbyte::@2/(byte*) print_char_cursor#41 )
  (byte) print_byte::b#1 ← phi( print_sbyte::@2/(byte) print_byte::b#0 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#1 >> (number) 4
  (byte) print_char::ch#2 ← *((byte[]) print_hextab + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#2 ← phi( print_byte/(byte) print_byte::b#1 )
  (byte*) print_char_cursor#26 ← phi( print_byte/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#26
  (number~) print_byte::$2 ← (byte) print_byte::b#2 & (number) $f
  (byte) print_char::ch#3 ← *((byte[]) print_hextab + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#27 ← phi( print_byte::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#27
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#28 ← phi( print_byte::@2/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#28
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3
  (byte*) print_char_cursor#29 ← phi( print_byte/(byte*) print_char_cursor#42 print_byte::@1/(byte*) print_char_cursor#7 print_sbyte::@1/(byte*) print_char_cursor#39 print_sbyte::@3/(byte*) print_char_cursor#40 )
  (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sbyte::@1/(byte) print_char::ch#0 print_sbyte::@3/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#29) ← (byte) print_char::ch#4
  (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#30 ← phi( print_char/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#30
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main::@5
  (byte*) print_screen#1 ← phi( main::@5/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#1 ← (byte*) print_screen#2
  (byte*) print_char_cursor#12 ← (byte*) print_line_cursor#1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#31 ← phi( print_cls::@1/(byte*) print_char_cursor#12 )
  (byte*) print_line_cursor#6 ← phi( print_cls::@1/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#6
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#31
  return 
  to:@return

(void()) main()
main: scope:[main]  from @57
  (byte*) print_char_cursor#49 ← phi( @57/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#13 ← phi( @57/(byte*) print_line_cursor#12 )
  (byte*) print_screen#4 ← phi( @57/(byte*) print_screen#5 )
  (word) main::wavelength#0 ← (number) $c0
  (signed byte[$c0]) main::sintab2 ← { fill( $c0, 0) }
  (byte[]) main::sintabref ← { (number) 0, (number) 4, (number) 8, (number) $c, (number) $11, (number) $15, (number) $19, (number) $1d, (number) $21, (number) $25, (number) $29, (number) $2d, (number) $31, (number) $35, (number) $38, (number) $3c, (number) $40, (number) $43, (number) $47, (number) $4a, (number) $4e, (number) $51, (number) $54, (number) $57, (number) $5a, (number) $5d, (number) $60, (number) $63, (number) $65, (number) $68, (number) $6a, (number) $6c, (number) $6e, (number) $70, (number) $72, (number) $74, (number) $76, (number) $77, (number) $79, (number) $7a, (number) $7b, (number) $7c, (number) $7d, (number) $7e, (number) $7e, (number) $7f, (number) $7f, (number) $7f, (number) $80, (number) $7f, (number) $7f, (number) $7f, (number) $7e, (number) $7e, (number) $7d, (number) $7c, (number) $7b, (number) $7a, (number) $79, (number) $77, (number) $76, (number) $74, (number) $72, (number) $70, (number) $6e, (number) $6c, (number) $6a, (number) $68, (number) $65, (number) $63, (number) $60, (number) $5d, (number) $5a, (number) $57, (number) $54, (number) $51, (number) $4e, (number) $4a, (number) $47, (number) $43, (number) $40, (number) $3c, (number) $38, (number) $35, (number) $31, (number) $2d, (number) $29, (number) $25, (number) $21, (number) $1d, (number) $19, (number) $15, (number) $11, (number) $c, (number) 8, (number) 4, (number) 0, (number) $fc, (number) $f8, (number) $f4, (number) $ef, (number) $eb, (number) $e7, (number) $e3, (number) $df, (number) $db, (number) $d7, (number) $d3, (number) $cf, (number) $cb, (number) $c8, (number) $c4, (number) $c0, (number) $bd, (number) $b9, (number) $b6, (number) $b2, (number) $af, (number) $ac, (number) $a9, (number) $a6, (number) $a3, (number) $a0, (number) $9d, (number) $9b, (number) $98, (number) $96, (number) $94, (number) $92, (number) $90, (number) $8e, (number) $8c, (number) $8a, (number) $89, (number) $87, (number) $86, (number) $85, (number) $84, (number) $83, (number) $82, (number) $82, (number) $81, (number) $81, (number) $81, (number) $81, (number) $81, (number) $81, (number) $81, (number) $82, (number) $82, (number) $83, (number) $84, (number) $85, (number) $86, (number) $87, (number) $89, (number) $8a, (number) $8c, (number) $8e, (number) $90, (number) $92, (number) $94, (number) $96, (number) $98, (number) $9b, (number) $9d, (number) $a0, (number) $a3, (number) $a6, (number) $a9, (number) $ac, (number) $af, (number) $b2, (number) $b6, (number) $b9, (number) $bd, (number) $c0, (number) $c4, (number) $c8, (number) $cb, (number) $cf, (number) $d3, (number) $d7, (number) $db, (number) $df, (number) $e3, (number) $e7, (number) $eb, (number) $ef, (number) $f4, (number) $f8, (number) $fc }
  (signed byte*) sin8s_gen::sintab#1 ← (signed byte[$c0]) main::sintab2
  (word) sin8s_gen::wavelength#0 ← (word) main::wavelength#0
  call sin8s_gen 
  to:main::@5
main::@5: scope:[main]  from main
  (byte*) print_char_cursor#43 ← phi( main/(byte*) print_char_cursor#49 )
  (byte*) print_line_cursor#10 ← phi( main/(byte*) print_line_cursor#13 )
  (byte*) print_screen#3 ← phi( main/(byte*) print_screen#4 )
  call print_cls 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) print_char_cursor#32 ← phi( main::@5/(byte*) print_char_cursor#13 )
  (byte*) print_line_cursor#7 ← phi( main::@5/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#7
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#32
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@6 main::@8
  (byte*) print_line_cursor#17 ← phi( main::@6/(byte*) print_line_cursor#3 main::@8/(byte*) print_line_cursor#11 )
  (byte*) print_char_cursor#50 ← phi( main::@6/(byte*) print_char_cursor#14 main::@8/(byte*) print_char_cursor#16 )
  (byte) main::i#2 ← phi( main::@6/(byte) main::i#0 main::@8/(byte) main::i#1 )
  (signed byte~) main::$2 ← ((signed byte)) *((byte[]) main::sintabref + (byte) main::i#2)
  (signed byte~) main::$3 ← *((signed byte[$c0]) main::sintab2 + (byte) main::i#2) - (signed byte~) main::$2
  (signed byte) main::sb#0 ← (signed byte~) main::$3
  (bool~) main::$4 ← (signed byte) main::sb#0 >= (number) 0
  (bool~) main::$5 ← ! (bool~) main::$4
  if((bool~) main::$5) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@9
  (byte*) print_line_cursor#16 ← phi( main::@1/(byte*) print_line_cursor#17 main::@9/(byte*) print_line_cursor#18 )
  (byte) main::i#5 ← phi( main::@1/(byte) main::i#2 main::@9/(byte) main::i#6 )
  (byte*) print_char_cursor#44 ← phi( main::@1/(byte*) print_char_cursor#50 main::@9/(byte*) print_char_cursor#17 )
  (signed byte) main::sb#1 ← phi( main::@1/(signed byte) main::sb#0 main::@9/(signed byte) main::sb#2 )
  (signed byte) print_sbyte::b#1 ← (signed byte) main::sb#1
  call print_sbyte 
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte*) print_line_cursor#14 ← phi( main::@2/(byte*) print_line_cursor#16 )
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#5 )
  (byte*) print_char_cursor#33 ← phi( main::@2/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#33
  (byte*) print_str::str#1 ← (const string) main::str
  call print_str 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte*) print_line_cursor#11 ← phi( main::@7/(byte*) print_line_cursor#14 )
  (byte) main::i#3 ← phi( main::@7/(byte) main::i#4 )
  (byte*) print_char_cursor#34 ← phi( main::@7/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#34
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,$bf)
  (bool~) main::$9 ← (byte) main::i#1 != rangelast(0,$bf)
  if((bool~) main::$9) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) print_line_cursor#19 ← phi( main::@1/(byte*) print_line_cursor#17 )
  (byte) main::i#7 ← phi( main::@1/(byte) main::i#2 )
  (signed byte) main::sb#3 ← phi( main::@1/(signed byte) main::sb#0 )
  (byte*) print_char_cursor#45 ← phi( main::@1/(byte*) print_char_cursor#50 )
  (byte*) print_str::str#2 ← (const string) main::str1
  call print_str 
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte*) print_line_cursor#18 ← phi( main::@3/(byte*) print_line_cursor#19 )
  (byte) main::i#6 ← phi( main::@3/(byte) main::i#7 )
  (signed byte) main::sb#2 ← phi( main::@3/(signed byte) main::sb#3 )
  (byte*) print_char_cursor#35 ← phi( main::@3/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#35
  to:main::@2
main::@return: scope:[main]  from main::@8
  (byte*) print_char_cursor#36 ← phi( main::@8/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#8 ← phi( main::@8/(byte*) print_line_cursor#11 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#8
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#36
  return 
  to:@return
@57: scope:[]  from @49
  (byte*) print_screen#5 ← phi( @49/(byte*) print_screen#6 )
  (byte*) print_char_cursor#46 ← phi( @49/(byte*) print_char_cursor#51 )
  (byte*) print_line_cursor#12 ← phi( @49/(byte*) print_line_cursor#15 )
  call main 
  to:@58
@58: scope:[]  from @57
  (byte*) print_char_cursor#37 ← phi( @57/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#9 ← phi( @57/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#37
  to:@end
@end: scope:[]  from @58

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"z
(label) @13
(label) @32
(label) @49
(label) @57
(label) @58
(label) @begin
(label) @end
(word) PI2_u4f12
(word) PI_HALF_u4f12
(word) PI_u4f12
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(number~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(number~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(void()) main()
(signed byte~) main::$2
(signed byte~) main::$3
(bool~) main::$4
(bool~) main::$5
(bool~) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(signed byte) main::sb
(signed byte) main::sb#0
(signed byte) main::sb#1
(signed byte) main::sb#2
(signed byte) main::sb#3
(signed byte[$c0]) main::sintab2
(byte[]) main::sintabref
(const string) main::str = (string) "  "
(const string) main::str1 = (string) " "
(word) main::wavelength
(word) main::wavelength#0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(number~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@7
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0
(word~) mulu8_sel::$1
(byte~) mulu8_sel::$2
(label) mulu8_sel::@2
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0
(byte) mulu8_sel::return#1
(byte) mulu8_sel::return#10
(byte) mulu8_sel::return#11
(byte) mulu8_sel::return#12
(byte) mulu8_sel::return#2
(byte) mulu8_sel::return#3
(byte) mulu8_sel::return#4
(byte) mulu8_sel::return#5
(byte) mulu8_sel::return#6
(byte) mulu8_sel::return#7
(byte) mulu8_sel::return#8
(byte) mulu8_sel::return#9
(byte) mulu8_sel::select
(byte) mulu8_sel::select#0
(byte) mulu8_sel::select#1
(byte) mulu8_sel::select#2
(byte) mulu8_sel::select#3
(byte) mulu8_sel::select#4
(byte) mulu8_sel::select#5
(byte) mulu8_sel::select#6
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0
(byte) mulu8_sel::v1#1
(byte) mulu8_sel::v1#2
(byte) mulu8_sel::v1#3
(byte) mulu8_sel::v1#4
(byte) mulu8_sel::v1#5
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0
(byte) mulu8_sel::v2#1
(byte) mulu8_sel::v2#2
(byte) mulu8_sel::v2#3
(byte) mulu8_sel::v2#4
(byte) mulu8_sel::v2#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_sbyte((signed byte) print_sbyte::b)
(bool~) print_sbyte::$0
(byte~) print_sbyte::$1
(signed byte~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@5
(label) print_sbyte::@6
(label) print_sbyte::@7
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0
(signed byte) print_sbyte::b#1
(signed byte) print_sbyte::b#2
(signed byte) print_sbyte::b#3
(signed byte) print_sbyte::b#4
(signed byte) print_sbyte::b#5
(signed byte) print_sbyte::b#6
(signed byte) print_sbyte::b#7
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(signed byte()) sin8s((word) sin8s::x)
(bool~) sin8s::$0
(bool~) sin8s::$1
(byte~) sin8s::$10
(byte~) sin8s::$11
(byte~) sin8s::$12
(byte~) sin8s::$13
(bool~) sin8s::$14
(bool~) sin8s::$15
(signed byte~) sin8s::$16
(bool~) sin8s::$17
(bool~) sin8s::$18
(word~) sin8s::$19
(bool~) sin8s::$2
(word~) sin8s::$20
(signed byte~) sin8s::$21
(signed byte~) sin8s::$22
(bool~) sin8s::$3
(word~) sin8s::$4
(byte~) sin8s::$5
(byte~) sin8s::$6
(byte~) sin8s::$7
(byte~) sin8s::$8
(byte~) sin8s::$9
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@return
(byte) sin8s::DIV_6
(byte) sin8s::isUpper
(byte) sin8s::isUpper#0
(byte) sin8s::isUpper#1
(byte) sin8s::isUpper#10
(byte) sin8s::isUpper#11
(byte) sin8s::isUpper#2
(byte) sin8s::isUpper#3
(byte) sin8s::isUpper#4
(byte) sin8s::isUpper#5
(byte) sin8s::isUpper#6
(byte) sin8s::isUpper#7
(byte) sin8s::isUpper#8
(byte) sin8s::isUpper#9
(signed byte) sin8s::return
(signed byte) sin8s::return#0
(signed byte) sin8s::return#1
(signed byte) sin8s::return#2
(signed byte) sin8s::return#3
(signed byte) sin8s::return#4
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#0
(signed byte) sin8s::sinx#1
(signed byte) sin8s::sinx#2
(byte) sin8s::usinx
(byte) sin8s::usinx#0
(byte) sin8s::usinx#1
(byte) sin8s::usinx#2
(byte) sin8s::usinx#3
(byte) sin8s::usinx#4
(byte) sin8s::usinx#5
(byte) sin8s::usinx#6
(byte) sin8s::usinx#7
(word) sin8s::x
(word) sin8s::x#0
(word) sin8s::x#1
(word) sin8s::x#2
(word) sin8s::x#3
(word) sin8s::x#4
(word) sin8s::x#5
(word) sin8s::x#6
(word) sin8s::x#7
(byte) sin8s::x1
(byte) sin8s::x1#0
(byte) sin8s::x1#1
(byte) sin8s::x1#2
(byte) sin8s::x1#3
(byte) sin8s::x1#4
(byte) sin8s::x2
(byte) sin8s::x2#0
(byte) sin8s::x3
(byte) sin8s::x3#0
(byte) sin8s::x3#1
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0
(byte) sin8s::x4
(byte) sin8s::x4#0
(byte) sin8s::x5
(byte) sin8s::x5#0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(word~) sin8s_gen::$0
(bool~) sin8s_gen::$1
(signed byte~) sin8s_gen::$2
(word~) sin8s_gen::$3
(label) sin8s_gen::@1
(label) sin8s_gen::@2
(label) sin8s_gen::@7
(label) sin8s_gen::@8
(label) sin8s_gen::@return
(word) sin8s_gen::i
(word) sin8s_gen::i#0
(word) sin8s_gen::i#1
(word) sin8s_gen::i#2
(word) sin8s_gen::i#3
(word) sin8s_gen::i#4
(signed byte*) sin8s_gen::sintab
(signed byte*) sin8s_gen::sintab#0
(signed byte*) sin8s_gen::sintab#1
(signed byte*) sin8s_gen::sintab#2
(signed byte*) sin8s_gen::sintab#3
(signed byte*) sin8s_gen::sintab#4
(signed byte*) sin8s_gen::sintab#5
(signed byte*) sin8s_gen::sintab#6
(word) sin8s_gen::step
(word) sin8s_gen::step#0
(word) sin8s_gen::step#1
(word) sin8s_gen::step#2
(word) sin8s_gen::step#3
(word) sin8s_gen::wavelength
(word) sin8s_gen::wavelength#0
(word) sin8s_gen::wavelength#1
(word) sin8s_gen::wavelength#2
(word) sin8s_gen::wavelength#3
(word) sin8s_gen::wavelength#4
(word) sin8s_gen::wavelength#5
(word) sin8s_gen::x
(word) sin8s_gen::x#0
(word) sin8s_gen::x#1
(word) sin8s_gen::x#2
(word) sin8s_gen::x#3
(word) sin8s_gen::x#4

Adding number conversion cast (unumber) 0 in (word) divr16u::quotient#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$0 ← (word) divr16u::rem#4 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
Adding number conversion cast (unumber) divr16u::$2 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr16u::$3 ← (unumber~) divr16u::$2 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr16u::$5 ← (word) divr16u::rem#6 | (number) 1
Adding number conversion cast (unumber) divr16u::$5 in (number~) divr16u::$5 ← (word) divr16u::rem#6 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) mul8u::res#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$0 ← (byte) mul8u::a#2 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul8u::$1 ← (byte) mul8u::a#3 & (number) 1
Adding number conversion cast (unumber) mul8u::$1 in (number~) mul8u::$1 ← (byte) mul8u::a#3 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$2 ← (unumber~) mul8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) mul8u::$5 ← (byte) mul8u::a#4 >> (number) 1
Adding number conversion cast (unumber) 1 in (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
Adding number conversion cast (unumber) $6488 in (word) PI2_u4f12 ← (number) $6488
Adding number conversion cast (unumber) $3244 in (word) PI_u4f12 ← (number) $3244
Adding number conversion cast (unumber) $1922 in (word) PI_HALF_u4f12 ← (number) $1922
Adding number conversion cast (unumber) 0 in (word) sin8s_gen::x#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) sin8s_gen::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) sin8s::isUpper#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) sin8s::isUpper#1 ← (number) 1
Adding number conversion cast (unumber) 3 in (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#1 ← (number) 1
Adding number conversion cast (unumber) $2b in (byte) sin8s::DIV_6 ← (number) $2b
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#2 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#4 ← (number) 0
Adding number conversion cast (unumber) 4 in (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
Adding number conversion cast (unumber) $80 in (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
Adding number conversion cast (unumber) 0 in (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$0 ← (number) 0 != *((byte*) print_str::str#3)
Adding number conversion cast (snumber) 0 in (bool~) print_sbyte::$0 ← (signed byte) print_sbyte::b#2 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#1 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#2 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#2 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) $c0 in (word) main::wavelength#0 ← (number) $c0
Adding number conversion cast (snumber) 0 in (bool~) main::$4 ← (signed byte) main::sb#0 >= (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Added casts to value list in (byte[]) main::sintabref ← (byte[]){ (byte)(number) 0, (byte)(number) 4, (byte)(number) 8, (byte)(number) $c, (byte)(number) $11, (byte)(number) $15, (byte)(number) $19, (byte)(number) $1d, (byte)(number) $21, (byte)(number) $25, (byte)(number) $29, (byte)(number) $2d, (byte)(number) $31, (byte)(number) $35, (byte)(number) $38, (byte)(number) $3c, (byte)(number) $40, (byte)(number) $43, (byte)(number) $47, (byte)(number) $4a, (byte)(number) $4e, (byte)(number) $51, (byte)(number) $54, (byte)(number) $57, (byte)(number) $5a, (byte)(number) $5d, (byte)(number) $60, (byte)(number) $63, (byte)(number) $65, (byte)(number) $68, (byte)(number) $6a, (byte)(number) $6c, (byte)(number) $6e, (byte)(number) $70, (byte)(number) $72, (byte)(number) $74, (byte)(number) $76, (byte)(number) $77, (byte)(number) $79, (byte)(number) $7a, (byte)(number) $7b, (byte)(number) $7c, (byte)(number) $7d, (byte)(number) $7e, (byte)(number) $7e, (byte)(number) $7f, (byte)(number) $7f, (byte)(number) $7f, (byte)(number) $80, (byte)(number) $7f, (byte)(number) $7f, (byte)(number) $7f, (byte)(number) $7e, (byte)(number) $7e, (byte)(number) $7d, (byte)(number) $7c, (byte)(number) $7b, (byte)(number) $7a, (byte)(number) $79, (byte)(number) $77, (byte)(number) $76, (byte)(number) $74, (byte)(number) $72, (byte)(number) $70, (byte)(number) $6e, (byte)(number) $6c, (byte)(number) $6a, (byte)(number) $68, (byte)(number) $65, (byte)(number) $63, (byte)(number) $60, (byte)(number) $5d, (byte)(number) $5a, (byte)(number) $57, (byte)(number) $54, (byte)(number) $51, (byte)(number) $4e, (byte)(number) $4a, (byte)(number) $47, (byte)(number) $43, (byte)(number) $40, (byte)(number) $3c, (byte)(number) $38, (byte)(number) $35, (byte)(number) $31, (byte)(number) $2d, (byte)(number) $29, (byte)(number) $25, (byte)(number) $21, (byte)(number) $1d, (byte)(number) $19, (byte)(number) $15, (byte)(number) $11, (byte)(number) $c, (byte)(number) 8, (byte)(number) 4, (byte)(number) 0, (byte)(number) $fc, (byte)(number) $f8, (byte)(number) $f4, (byte)(number) $ef, (byte)(number) $eb, (byte)(number) $e7, (byte)(number) $e3, (byte)(number) $df, (byte)(number) $db, (byte)(number) $d7, (byte)(number) $d3, (byte)(number) $cf, (byte)(number) $cb, (byte)(number) $c8, (byte)(number) $c4, (byte)(number) $c0, (byte)(number) $bd, (byte)(number) $b9, (byte)(number) $b6, (byte)(number) $b2, (byte)(number) $af, (byte)(number) $ac, (byte)(number) $a9, (byte)(number) $a6, (byte)(number) $a3, (byte)(number) $a0, (byte)(number) $9d, (byte)(number) $9b, (byte)(number) $98, (byte)(number) $96, (byte)(number) $94, (byte)(number) $92, (byte)(number) $90, (byte)(number) $8e, (byte)(number) $8c, (byte)(number) $8a, (byte)(number) $89, (byte)(number) $87, (byte)(number) $86, (byte)(number) $85, (byte)(number) $84, (byte)(number) $83, (byte)(number) $82, (byte)(number) $82, (byte)(number) $81, (byte)(number) $81, (byte)(number) $81, (byte)(number) $81, (byte)(number) $81, (byte)(number) $81, (byte)(number) $81, (byte)(number) $82, (byte)(number) $82, (byte)(number) $83, (byte)(number) $84, (byte)(number) $85, (byte)(number) $86, (byte)(number) $87, (byte)(number) $89, (byte)(number) $8a, (byte)(number) $8c, (byte)(number) $8e, (byte)(number) $90, (byte)(number) $92, (byte)(number) $94, (byte)(number) $96, (byte)(number) $98, (byte)(number) $9b, (byte)(number) $9d, (byte)(number) $a0, (byte)(number) $a3, (byte)(number) $a6, (byte)(number) $a9, (byte)(number) $ac, (byte)(number) $af, (byte)(number) $b2, (byte)(number) $b6, (byte)(number) $b9, (byte)(number) $bd, (byte)(number) $c0, (byte)(number) $c4, (byte)(number) $c8, (byte)(number) $cb, (byte)(number) $cf, (byte)(number) $d3, (byte)(number) $d7, (byte)(number) $db, (byte)(number) $df, (byte)(number) $e3, (byte)(number) $e7, (byte)(number) $eb, (byte)(number) $ef, (byte)(number) $f4, (byte)(number) $f8, (byte)(number) $fc }
Successful SSA optimization PassNAddInitializerValueListTypeCasts
Inlining cast (word) divr16u::quotient#0 ← (unumber)(number) 0
Inlining cast (word) divr16u::rem#3 ← (unumber)(number) 0
Inlining cast (word) mul8u::res#0 ← (unumber)(number) 0
Inlining cast (word) PI2_u4f12 ← (unumber)(number) $6488
Inlining cast (word) PI_u4f12 ← (unumber)(number) $3244
Inlining cast (word) PI_HALF_u4f12 ← (unumber)(number) $1922
Inlining cast (word) sin8s_gen::x#0 ← (unumber)(number) 0
Inlining cast (word) sin8s_gen::i#0 ← (unumber)(number) 0
Inlining cast (byte) sin8s::isUpper#0 ← (unumber)(number) 0
Inlining cast (byte) sin8s::isUpper#1 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#0 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#1 ← (unumber)(number) 1
Inlining cast (byte) sin8s::DIV_6 ← (unumber)(number) $2b
Inlining cast (byte) mulu8_sel::select#2 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#3 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#4 ← (unumber)(number) 0
Inlining cast (signed byte~) sin8s::$16 ← (signed byte)(byte) sin8s::usinx#4
Inlining cast (signed byte~) sin8s::$21 ← (signed byte)(byte) sin8s::usinx#6
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (byte~) print_sbyte::$1 ← (byte)(signed byte) print_sbyte::b#4
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (word) main::wavelength#0 ← (unumber)(number) $c0
Inlining cast (signed byte~) main::$2 ← (signed byte)*((byte[]) main::sintabref + (byte) main::i#2)
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $6488
Simplifying constant integer cast $3244
Simplifying constant integer cast $1922
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $2b
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $c0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast $c
Simplifying constant integer cast $11
Simplifying constant integer cast $15
Simplifying constant integer cast $19
Simplifying constant integer cast $1d
Simplifying constant integer cast $21
Simplifying constant integer cast $25
Simplifying constant integer cast $29
Simplifying constant integer cast $2d
Simplifying constant integer cast $31
Simplifying constant integer cast $35
Simplifying constant integer cast $38
Simplifying constant integer cast $3c
Simplifying constant integer cast $40
Simplifying constant integer cast $43
Simplifying constant integer cast $47
Simplifying constant integer cast $4a
Simplifying constant integer cast $4e
Simplifying constant integer cast $51
Simplifying constant integer cast $54
Simplifying constant integer cast $57
Simplifying constant integer cast $5a
Simplifying constant integer cast $5d
Simplifying constant integer cast $60
Simplifying constant integer cast $63
Simplifying constant integer cast $65
Simplifying constant integer cast $68
Simplifying constant integer cast $6a
Simplifying constant integer cast $6c
Simplifying constant integer cast $6e
Simplifying constant integer cast $70
Simplifying constant integer cast $72
Simplifying constant integer cast $74
Simplifying constant integer cast $76
Simplifying constant integer cast $77
Simplifying constant integer cast $79
Simplifying constant integer cast $7a
Simplifying constant integer cast $7b
Simplifying constant integer cast $7c
Simplifying constant integer cast $7d
Simplifying constant integer cast $7e
Simplifying constant integer cast $7e
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $80
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $7e
Simplifying constant integer cast $7e
Simplifying constant integer cast $7d
Simplifying constant integer cast $7c
Simplifying constant integer cast $7b
Simplifying constant integer cast $7a
Simplifying constant integer cast $79
Simplifying constant integer cast $77
Simplifying constant integer cast $76
Simplifying constant integer cast $74
Simplifying constant integer cast $72
Simplifying constant integer cast $70
Simplifying constant integer cast $6e
Simplifying constant integer cast $6c
Simplifying constant integer cast $6a
Simplifying constant integer cast $68
Simplifying constant integer cast $65
Simplifying constant integer cast $63
Simplifying constant integer cast $60
Simplifying constant integer cast $5d
Simplifying constant integer cast $5a
Simplifying constant integer cast $57
Simplifying constant integer cast $54
Simplifying constant integer cast $51
Simplifying constant integer cast $4e
Simplifying constant integer cast $4a
Simplifying constant integer cast $47
Simplifying constant integer cast $43
Simplifying constant integer cast $40
Simplifying constant integer cast $3c
Simplifying constant integer cast $38
Simplifying constant integer cast $35
Simplifying constant integer cast $31
Simplifying constant integer cast $2d
Simplifying constant integer cast $29
Simplifying constant integer cast $25
Simplifying constant integer cast $21
Simplifying constant integer cast $1d
Simplifying constant integer cast $19
Simplifying constant integer cast $15
Simplifying constant integer cast $11
Simplifying constant integer cast $c
Simplifying constant integer cast 8
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $fc
Simplifying constant integer cast $f8
Simplifying constant integer cast $f4
Simplifying constant integer cast $ef
Simplifying constant integer cast $eb
Simplifying constant integer cast $e7
Simplifying constant integer cast $e3
Simplifying constant integer cast $df
Simplifying constant integer cast $db
Simplifying constant integer cast $d7
Simplifying constant integer cast $d3
Simplifying constant integer cast $cf
Simplifying constant integer cast $cb
Simplifying constant integer cast $c8
Simplifying constant integer cast $c4
Simplifying constant integer cast $c0
Simplifying constant integer cast $bd
Simplifying constant integer cast $b9
Simplifying constant integer cast $b6
Simplifying constant integer cast $b2
Simplifying constant integer cast $af
Simplifying constant integer cast $ac
Simplifying constant integer cast $a9
Simplifying constant integer cast $a6
Simplifying constant integer cast $a3
Simplifying constant integer cast $a0
Simplifying constant integer cast $9d
Simplifying constant integer cast $9b
Simplifying constant integer cast $98
Simplifying constant integer cast $96
Simplifying constant integer cast $94
Simplifying constant integer cast $92
Simplifying constant integer cast $90
Simplifying constant integer cast $8e
Simplifying constant integer cast $8c
Simplifying constant integer cast $8a
Simplifying constant integer cast $89
Simplifying constant integer cast $87
Simplifying constant integer cast $86
Simplifying constant integer cast $85
Simplifying constant integer cast $84
Simplifying constant integer cast $83
Simplifying constant integer cast $82
Simplifying constant integer cast $82
Simplifying constant integer cast $81
Simplifying constant integer cast $81
Simplifying constant integer cast $81
Simplifying constant integer cast $81
Simplifying constant integer cast $81
Simplifying constant integer cast $81
Simplifying constant integer cast $81
Simplifying constant integer cast $82
Simplifying constant integer cast $82
Simplifying constant integer cast $83
Simplifying constant integer cast $84
Simplifying constant integer cast $85
Simplifying constant integer cast $86
Simplifying constant integer cast $87
Simplifying constant integer cast $89
Simplifying constant integer cast $8a
Simplifying constant integer cast $8c
Simplifying constant integer cast $8e
Simplifying constant integer cast $90
Simplifying constant integer cast $92
Simplifying constant integer cast $94
Simplifying constant integer cast $96
Simplifying constant integer cast $98
Simplifying constant integer cast $9b
Simplifying constant integer cast $9d
Simplifying constant integer cast $a0
Simplifying constant integer cast $a3
Simplifying constant integer cast $a6
Simplifying constant integer cast $a9
Simplifying constant integer cast $ac
Simplifying constant integer cast $af
Simplifying constant integer cast $b2
Simplifying constant integer cast $b6
Simplifying constant integer cast $b9
Simplifying constant integer cast $bd
Simplifying constant integer cast $c0
Simplifying constant integer cast $c4
Simplifying constant integer cast $c8
Simplifying constant integer cast $cb
Simplifying constant integer cast $cf
Simplifying constant integer cast $d3
Simplifying constant integer cast $d7
Simplifying constant integer cast $db
Simplifying constant integer cast $df
Simplifying constant integer cast $e3
Simplifying constant integer cast $e7
Simplifying constant integer cast $eb
Simplifying constant integer cast $ef
Simplifying constant integer cast $f4
Simplifying constant integer cast $f8
Simplifying constant integer cast $fc
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $6488
Finalized unsigned number type (word) $3244
Finalized unsigned number type (word) $1922
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $2b
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $c0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
Inferred type updated to word in (unumber~) divr16u::$5 ← (word) divr16u::rem#6 | (byte) 1
Inferred type updated to byte in (unumber~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
Inversing boolean not [9] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte) 0 from [8] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte) 0
Inversing boolean not [17] (bool~) divr16u::$9 ← (word) divr16u::rem#5 < (word) divr16u::divisor#1 from [16] (bool~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
Inversing boolean not [56] (bool~) mul8u::$3 ← (byte~) mul8u::$1 == (byte) 0 from [55] (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte) 0
Inversing boolean not [102] (bool~) sin8s::$1 ← (word) sin8s::x#3 < (word) PI_u4f12 from [101] (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (word) PI_u4f12
Inversing boolean not [106] (bool~) sin8s::$3 ← (word) sin8s::x#4 < (word) PI_HALF_u4f12 from [105] (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (word) PI_HALF_u4f12
Inversing boolean not [164] (bool~) sin8s::$15 ← (byte) sin8s::usinx#1 < (byte) $80 from [163] (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (byte) $80
Inversing boolean not [173] (bool~) sin8s::$18 ← (byte) sin8s::isUpper#2 == (byte) 0 from [172] (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (byte) 0
Inversing boolean not [201] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [200] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [310] (bool~) main::$5 ← (signed byte) main::sb#0 < (signed byte) 0 from [309] (bool~) main::$4 ← (signed byte) main::sb#0 >= (signed byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#6 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#6 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#3 = (word) divr16u::divisor#4 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word~) divr16u::$5 
Alias (word) divr16u::rem#5 = (word) divr16u::rem#7 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#2 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#3 (word) divr16u::return#1 
Alias (word) divr16u::return#2 = (word) divr16u::return#4 
Alias (word) div16u::return#0 = (word~) div16u::$0 (word) div16u::return#3 (word) div16u::return#1 
Alias (word) mul8u::mb#0 = (byte) mul8u::b#1 
Alias (byte) mul8u::a#2 = (byte) mul8u::a#3 (byte) mul8u::a#6 
Alias (word) mul8u::mb#3 = (word) mul8u::mb#4 (word) mul8u::mb#5 
Alias (word) mul8u::res#2 = (word) mul8u::res#5 (word) mul8u::res#4 (word) mul8u::return#0 (word) mul8u::res#3 (word) mul8u::return#3 (word) mul8u::return#1 
Alias (byte) mul8u::a#0 = (byte~) mul8u::$5 
Alias (word) mul8u::mb#1 = (word~) mul8u::$6 
Alias (word) mul8u::res#1 = (word~) mul8u::$4 
Alias (word) div16u::return#2 = (word) div16u::return#4 
Alias (word) sin8s_gen::wavelength#1 = (word) sin8s_gen::wavelength#3 
Alias (signed byte*) sin8s_gen::sintab#5 = (signed byte*) sin8s_gen::sintab#6 
Alias (word) sin8s_gen::step#0 = (word~) sin8s_gen::$0 
Alias (word) sin8s_gen::x#2 = (word) sin8s_gen::x#4 (word) sin8s_gen::x#3 
Alias (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#3 (signed byte*) sin8s_gen::sintab#4 
Alias (word) sin8s_gen::step#1 = (word) sin8s_gen::step#2 (word) sin8s_gen::step#3 
Alias (word) sin8s_gen::i#2 = (word) sin8s_gen::i#4 (word) sin8s_gen::i#3 
Alias (word) sin8s_gen::wavelength#2 = (word) sin8s_gen::wavelength#5 (word) sin8s_gen::wavelength#4 
Alias (signed byte) sin8s::return#0 = (signed byte) sin8s::return#3 
Alias (word) sin8s_gen::x#1 = (word~) sin8s_gen::$3 
Alias (word) sin8s::x#3 = (word) sin8s::x#5 
Alias (word) sin8s::x#1 = (word~) sin8s::$19 
Alias (byte) sin8s::x1#0 = (byte~) sin8s::$5 (byte) sin8s::x1#1 (byte) sin8s::x1#4 (byte) sin8s::x1#2 (byte) sin8s::x1#3 
Alias (byte) mulu8_sel::return#0 = (byte) mulu8_sel::return#7 
Alias (byte) sin8s::isUpper#3 = (byte) sin8s::isUpper#8 (byte) sin8s::isUpper#9 (byte) sin8s::isUpper#7 (byte) sin8s::isUpper#6 (byte) sin8s::isUpper#5 (byte) sin8s::isUpper#4 
Alias (byte) sin8s::x2#0 = (byte~) sin8s::$6 
Alias (byte) mulu8_sel::return#1 = (byte) mulu8_sel::return#8 
Alias (byte) sin8s::x3#0 = (byte~) sin8s::$7 (byte) sin8s::x3#1 
Alias (byte) mulu8_sel::return#2 = (byte) mulu8_sel::return#9 
Alias (byte) sin8s::x3_6#0 = (byte~) sin8s::$8 
Alias (byte) sin8s::usinx#0 = (byte~) sin8s::$9 (byte) sin8s::usinx#7 (byte) sin8s::usinx#3 
Alias (byte) mulu8_sel::return#10 = (byte) mulu8_sel::return#3 
Alias (byte) sin8s::x4#0 = (byte~) sin8s::$10 
Alias (byte) mulu8_sel::return#11 = (byte) mulu8_sel::return#4 
Alias (byte) sin8s::x5#0 = (byte~) sin8s::$11 
Alias (byte) sin8s::x5_128#0 = (byte~) sin8s::$12 
Alias (byte) sin8s::usinx#1 = (byte~) sin8s::$13 (byte) sin8s::usinx#5 
Alias (word) sin8s::x#4 = (word) sin8s::x#7 
Alias (byte) sin8s::isUpper#10 = (byte) sin8s::isUpper#11 
Alias (word) sin8s::x#2 = (word~) sin8s::$20 
Alias (signed byte) sin8s::sinx#0 = (signed byte~) sin8s::$16 
Alias (signed byte) sin8s::return#1 = (signed byte) sin8s::sinx#2 (signed byte) sin8s::return#4 (signed byte) sin8s::return#2 
Alias (byte) sin8s::usinx#4 = (byte) sin8s::usinx#6 
Alias (signed byte) sin8s::sinx#1 = (signed byte~) sin8s::$22 
Alias (word) mul8u::return#2 = (word) mul8u::return#4 
Alias (byte) mulu8_sel::select#5 = (byte) mulu8_sel::select#6 
Alias (byte) mulu8_sel::return#12 = (byte) mulu8_sel::return#5 (byte~) mulu8_sel::$2 (byte) mulu8_sel::return#6 
Alias (void*) memset::return#0 = (void*) memset::str#1 (void*) memset::return#3 (void*) memset::return#1 
Alias (void*) memset::str#2 = (void*) memset::str#3 
Alias (word) memset::num#1 = (word) memset::num#2 
Alias (byte) memset::c#3 = (byte) memset::c#4 
Alias (byte*) memset::end#0 = (byte*~) memset::$3 
Alias (byte) memset::c#1 = (byte) memset::c#2 
Alias (byte*) memset::dst#2 = (byte*) memset::dst#3 
Alias (byte*) memset::end#1 = (byte*) memset::end#2 
Alias (void*) memset::str#4 = (void*) memset::str#5 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#15 (byte*) print_char_cursor#51 (byte*) print_screen#6 (byte*) print_line_cursor#12 (byte*) print_char_cursor#46 (byte*) print_screen#5 
Alias (byte*) print_str::str#3 = (byte*) print_str::str#4 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#20 (byte*) print_char_cursor#38 (byte*) print_char_cursor#21 
Alias (byte*) print_char_cursor#39 = (byte*) print_char_cursor#48 (byte*) print_char_cursor#40 
Alias (signed byte) print_sbyte::b#2 = (signed byte) print_sbyte::b#5 (signed byte) print_sbyte::b#3 (signed byte) print_sbyte::b#7 (signed byte) print_sbyte::b#6 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#3 
Alias (signed byte) print_sbyte::b#0 = (signed byte~) print_sbyte::$5 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#4 
Alias (byte) print_byte::b#0 = (byte~) print_sbyte::$1 
Alias (byte*) print_char_cursor#24 = (byte*) print_char_cursor#5 (byte*) print_char_cursor#25 (byte*) print_char_cursor#6 
Alias (byte) print_byte::b#1 = (byte) print_byte::b#2 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#7 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#8 (byte*) print_char_cursor#28 (byte*) print_char_cursor#9 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#30 (byte*) print_char_cursor#11 
Alias (byte*) print_line_cursor#1 = (byte*) print_screen#2 (byte*) print_screen#1 (byte*) print_char_cursor#12 (byte*) print_line_cursor#6 (byte*) print_char_cursor#31 (byte*) print_line_cursor#2 (byte*) print_char_cursor#13 
Alias (byte*) print_screen#3 = (byte*) print_screen#4 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#13 
Alias (byte*) print_char_cursor#43 = (byte*) print_char_cursor#49 
Alias (byte*) print_line_cursor#3 = (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#32 
Alias (signed byte) main::sb#0 = (signed byte~) main::$3 (signed byte) main::sb#3 (signed byte) main::sb#2 
Alias (byte) main::i#3 = (byte) main::i#4 (byte) main::i#5 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#14 (byte*) print_line_cursor#16 (byte*) print_line_cursor#8 (byte*) print_line_cursor#4 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#33 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#34 (byte*) print_char_cursor#36 (byte*) print_char_cursor#18 
Alias (byte*) print_char_cursor#45 = (byte*) print_char_cursor#50 
Alias (byte) main::i#2 = (byte) main::i#7 (byte) main::i#6 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#19 (byte*) print_line_cursor#18 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#35 
Alias (byte*) print_line_cursor#5 = (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#37 
Successful SSA optimization Pass2AliasElimination
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#3 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#3 (word) divr16u::divisor#6 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#5 
Alias (byte) mul8u::a#2 = (byte) mul8u::a#4 
Alias (word) mul8u::mb#2 = (word) mul8u::mb#3 
Alias (byte) sin8s::isUpper#10 = (byte) sin8s::isUpper#3 (byte) sin8s::isUpper#2 
Alias (signed byte) main::sb#0 = (signed byte) main::sb#1 
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#17 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) divr16u::rem#8 (word) divr16u::rem#3
Identical Phi Values (word) divr16u::dividend#4 (word) divr16u::dividend#1
Identical Phi Values (word) divr16u::divisor#5 (word) divr16u::divisor#0
Identical Phi Values (word) divr16u::divisor#1 (word) divr16u::divisor#5
Identical Phi Values (word) div16u::dividend#1 (word) div16u::dividend#0
Identical Phi Values (word) div16u::divisor#1 (word) div16u::divisor#0
Identical Phi Values (word) mul8u::mb#0 (byte) mul8u::b#0
Identical Phi Values (byte) mul8u::a#5 (byte) mul8u::a#1
Identical Phi Values (word) sin8s_gen::wavelength#1 (word) sin8s_gen::wavelength#0
Identical Phi Values (signed byte*) sin8s_gen::sintab#5 (signed byte*) sin8s_gen::sintab#1
Identical Phi Values (word) sin8s_gen::wavelength#2 (word) sin8s_gen::wavelength#1
Identical Phi Values (word) sin8s_gen::step#1 (word) sin8s_gen::step#0
Identical Phi Values (word) sin8s::x#3 (word) sin8s::x#0
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (signed byte) print_sbyte::b#2 (signed byte) print_sbyte::b#1
Identical Phi Values (byte*) print_char_cursor#39 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#27
Identical Phi Values (byte) print_byte::b#1 (byte) print_byte::b#0
Identical Phi Values (byte*) print_char_cursor#42 (byte*) print_char_cursor#41
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_line_cursor#1 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#3 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#3
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_line_cursor#5 (byte*) print_line_cursor#11
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#16
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#41 (byte*) print_char_cursor#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) divr16u::$4 [10] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [18] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [25] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) mul8u::$0 [52] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
Simple Condition (bool~) mul8u::$3 [57] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@4
Simple Condition (bool~) sin8s_gen::$1 [86] if((word) sin8s_gen::i#2<(word) sin8s_gen::wavelength#0) goto sin8s_gen::@2
Simple Condition (bool~) sin8s::$1 [103] if((word) sin8s::x#0<(word) PI_u4f12) goto sin8s::@1
Simple Condition (bool~) sin8s::$3 [107] if((word) sin8s::x#4<(word) PI_HALF_u4f12) goto sin8s::@2
Simple Condition (bool~) sin8s::$15 [165] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
Simple Condition (bool~) sin8s::$18 [174] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@4
Simple Condition (bool~) memset::$1 [202] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [212] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) print_str::$0 [225] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2
Simple Condition (bool~) print_sbyte::$0 [235] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1
Simple Condition (bool~) main::$5 [311] if((signed byte) main::sb#0<(signed byte) 0) goto main::@2
Simple Condition (bool~) main::$9 [323] if((byte) main::i#1!=rangelast(0,$bf)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [294] (signed byte[$c0]) main::sintab2 ← { fill( $c0, 0) }
Successful SSA optimization Pass2ConstantRValueConsolidation
Identified constant from value list (byte[]) { (byte) 0, (byte) 4, (byte) 8, (byte) $c, (byte) $11, (byte) $15, (byte) $19, (byte) $1d, (byte) $21, (byte) $25, (byte) $29, (byte) $2d, (byte) $31, (byte) $35, (byte) $38, (byte) $3c, (byte) $40, (byte) $43, (byte) $47, (byte) $4a, (byte) $4e, (byte) $51, (byte) $54, (byte) $57, (byte) $5a, (byte) $5d, (byte) $60, (byte) $63, (byte) $65, (byte) $68, (byte) $6a, (byte) $6c, (byte) $6e, (byte) $70, (byte) $72, (byte) $74, (byte) $76, (byte) $77, (byte) $79, (byte) $7a, (byte) $7b, (byte) $7c, (byte) $7d, (byte) $7e, (byte) $7e, (byte) $7f, (byte) $7f, (byte) $7f, (byte) $80, (byte) $7f, (byte) $7f, (byte) $7f, (byte) $7e, (byte) $7e, (byte) $7d, (byte) $7c, (byte) $7b, (byte) $7a, (byte) $79, (byte) $77, (byte) $76, (byte) $74, (byte) $72, (byte) $70, (byte) $6e, (byte) $6c, (byte) $6a, (byte) $68, (byte) $65, (byte) $63, (byte) $60, (byte) $5d, (byte) $5a, (byte) $57, (byte) $54, (byte) $51, (byte) $4e, (byte) $4a, (byte) $47, (byte) $43, (byte) $40, (byte) $3c, (byte) $38, (byte) $35, (byte) $31, (byte) $2d, (byte) $29, (byte) $25, (byte) $21, (byte) $1d, (byte) $19, (byte) $15, (byte) $11, (byte) $c, (byte) 8, (byte) 4, (byte) 0, (byte) $fc, (byte) $f8, (byte) $f4, (byte) $ef, (byte) $eb, (byte) $e7, (byte) $e3, (byte) $df, (byte) $db, (byte) $d7, (byte) $d3, (byte) $cf, (byte) $cb, (byte) $c8, (byte) $c4, (byte) $c0, (byte) $bd, (byte) $b9, (byte) $b6, (byte) $b2, (byte) $af, (byte) $ac, (byte) $a9, (byte) $a6, (byte) $a3, (byte) $a0, (byte) $9d, (byte) $9b, (byte) $98, (byte) $96, (byte) $94, (byte) $92, (byte) $90, (byte) $8e, (byte) $8c, (byte) $8a, (byte) $89, (byte) $87, (byte) $86, (byte) $85, (byte) $84, (byte) $83, (byte) $82, (byte) $82, (byte) $81, (byte) $81, (byte) $81, (byte) $81, (byte) $81, (byte) $81, (byte) $81, (byte) $82, (byte) $82, (byte) $83, (byte) $84, (byte) $85, (byte) $86, (byte) $87, (byte) $89, (byte) $8a, (byte) $8c, (byte) $8e, (byte) $90, (byte) $92, (byte) $94, (byte) $96, (byte) $98, (byte) $9b, (byte) $9d, (byte) $a0, (byte) $a3, (byte) $a6, (byte) $a9, (byte) $ac, (byte) $af, (byte) $b2, (byte) $b6, (byte) $b9, (byte) $bd, (byte) $c0, (byte) $c4, (byte) $c8, (byte) $cb, (byte) $cf, (byte) $d3, (byte) $d7, (byte) $db, (byte) $df, (byte) $e3, (byte) $e7, (byte) $eb, (byte) $ef, (byte) $f4, (byte) $f8, (byte) $fc }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const word) mul8u::res#0 = 0
Constant (const word) PI2_u4f12 = $6488
Constant (const word) PI_u4f12 = $3244
Constant (const word) PI_HALF_u4f12 = $1922
Constant (const word) sin8s_gen::x#0 = 0
Constant (const word) sin8s_gen::i#0 = 0
Constant (const byte) sin8s::isUpper#0 = 0
Constant (const byte) sin8s::isUpper#1 = 1
Constant (const byte) mulu8_sel::select#0 = 0
Constant (const byte) mulu8_sel::select#1 = 1
Constant (const byte) sin8s::DIV_6 = $2b
Constant (const byte) mulu8_sel::select#2 = 1
Constant (const byte) mulu8_sel::select#3 = 0
Constant (const byte) mulu8_sel::select#4 = 0
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = ' '
Constant (const byte[]) print_hextab = $0
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const word) main::wavelength#0 = $c0
Constant (const signed byte[$c0]) main::sintab2 = { fill( $c0, 0) }
Constant (const byte[]) main::sintabref = { 0, 4, 8, $c, $11, $15, $19, $1d, $21, $25, $29, $2d, $31, $35, $38, $3c, $40, $43, $47, $4a, $4e, $51, $54, $57, $5a, $5d, $60, $63, $65, $68, $6a, $6c, $6e, $70, $72, $74, $76, $77, $79, $7a, $7b, $7c, $7d, $7e, $7e, $7f, $7f, $7f, $80, $7f, $7f, $7f, $7e, $7e, $7d, $7c, $7b, $7a, $79, $77, $76, $74, $72, $70, $6e, $6c, $6a, $68, $65, $63, $60, $5d, $5a, $57, $54, $51, $4e, $4a, $47, $43, $40, $3c, $38, $35, $31, $2d, $29, $25, $21, $1d, $19, $15, $11, $c, 8, 4, 0, $fc, $f8, $f4, $ef, $eb, $e7, $e3, $df, $db, $d7, $d3, $cf, $cb, $c8, $c4, $c0, $bd, $b9, $b6, $b2, $af, $ac, $a9, $a6, $a3, $a0, $9d, $9b, $98, $96, $94, $92, $90, $8e, $8c, $8a, $89, $87, $86, $85, $84, $83, $82, $82, $81, $81, $81, $81, $81, $81, $81, $82, $82, $83, $84, $85, $86, $87, $89, $8a, $8c, $8e, $90, $92, $94, $96, $98, $9b, $9d, $a0, $a3, $a6, $a9, $ac, $af, $b2, $b6, $b9, $bd, $c0, $c4, $c8, $cb, $cf, $d3, $d7, $db, $df, $e3, $e7, $eb, $ef, $f4, $f8, $fc }
Constant (const byte) main::i#0 = 0
Constant (const byte*) print_str::str#1 = main::str
Constant (const byte*) print_str::str#2 = main::str1
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) div16u::dividend#0 = PI2_u4f12
Constant (const byte) mulu8_sel::v2#2 = sin8s::DIV_6
Constant (const signed byte*) sin8s_gen::sintab#1 = main::sintab2
Constant (const word) sin8s_gen::wavelength#0 = main::wavelength#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::dividend#1 = div16u::dividend#0
Constant (const word) div16u::divisor#0 = sin8s_gen::wavelength#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::divisor#0 = div16u::divisor#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (void*)print_line_cursor#0 in [280] (void*) memset::str#0 ← (void*)(const byte*) print_line_cursor#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [202] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [23] divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value [25] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (number) $10
Resolved ranged next value [321] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [323] if(main::i#1!=rangelast(0,$bf)) goto main::@1 to (number) $c0
Eliminating unused variable (void*) memset::return#2 and assignment [132] (void*) memset::return#2 ← (void*) memset::str#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) $10 in if((byte) divr16u::i#1!=(number) $10) goto divr16u::@1
Adding number conversion cast (unumber) $c0 in if((byte) main::i#1!=(number) $c0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Simplifying constant integer cast $c0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $c0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)memset::str#0 in [96] (byte*~) memset::$2 ← (byte*)(const void*) memset::str#0
Constant value identified (byte*)memset::str#0 in [98] (byte*) memset::dst#0 ← (byte*)(const void*) memset::str#0
Successful SSA optimization Pass2ConstantValues
Constant (const byte*) memset::$2 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [96] (byte*) memset::end#0 ← (const byte*) memset::$2 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$2+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [80] (signed byte) sin8s::sinx#0 ← (signed byte)(byte) sin8s::usinx#4 keeping sin8s::usinx#4
Inlining Noop Cast [84] (signed byte~) sin8s::$21 ← (signed byte)(byte) sin8s::usinx#4 keeping sin8s::usinx#4
Inlining Noop Cast [132] (signed byte~) main::$2 ← (signed byte)*((const byte[]) main::sintabref + (byte) main::i#2) keeping *(main::sintabref + main::i#2)
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const word) sin8s_gen::x#0
Inlining constant with var siblings (const word) sin8s_gen::i#0
Inlining constant with var siblings (const signed byte*) sin8s_gen::sintab#1
Inlining constant with var siblings (const byte) sin8s::isUpper#0
Inlining constant with var siblings (const byte) sin8s::isUpper#1
Inlining constant with var siblings (const byte) mulu8_sel::select#0
Inlining constant with var siblings (const byte) mulu8_sel::select#1
Inlining constant with var siblings (const byte) mulu8_sel::select#2
Inlining constant with var siblings (const byte) mulu8_sel::select#3
Inlining constant with var siblings (const byte) mulu8_sel::select#4
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) main::i#0
Constant inlined divr16u::rem#3 = (byte) 0
Constant inlined divr16u::i#0 = (byte) 0
Constant inlined $0 = (const byte[]) print_hextab
Constant inlined sin8s::isUpper#1 = (byte) 1
Constant inlined sin8s::isUpper#0 = (byte) 0
Constant inlined sin8s_gen::x#0 = (byte) 0
Constant inlined memset::$2 = (byte*)(const void*) memset::str#0
Constant inlined divr16u::quotient#0 = (byte) 0
Constant inlined div16u::divisor#0 = (const word) main::wavelength#0
Constant inlined main::i#0 = (byte) 0
Constant inlined mulu8_sel::select#0 = (byte) 0
Constant inlined div16u::dividend#0 = (const word) PI2_u4f12
Constant inlined mulu8_sel::select#2 = (byte) 1
Constant inlined divr16u::divisor#0 = (const word) main::wavelength#0
Constant inlined mulu8_sel::select#1 = (byte) 1
Constant inlined mulu8_sel::select#4 = (byte) 0
Constant inlined mulu8_sel::select#3 = (byte) 0
Constant inlined divr16u::dividend#1 = (const word) PI2_u4f12
Constant inlined mulu8_sel::v2#2 = (const byte) sin8s::DIV_6
Constant inlined mul8u::res#0 = (byte) 0
Constant inlined print_char::ch#1 = (byte) ' '
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined sin8s_gen::sintab#1 = (const signed byte[$c0]) main::sintab2
Constant inlined sin8s_gen::wavelength#0 = (const word) main::wavelength#0
Constant inlined print_str::str#2 = (const string) main::str1
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined print_str::str#1 = (const string) main::str
Constant inlined sin8s_gen::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul8u::@10(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting sin8s::@15(between sin8s and sin8s::@1)
Fixing phi predecessor for sin8s::isUpper#10 to new block ( sin8s -> sin8s::@15 ) during phi lifting.
Added new block during phi lifting sin8s::@16(between sin8s::@1 and sin8s::@2)
Added new block during phi lifting sin8s::@17(between sin8s::@14 and sin8s::@3)
Added new block during phi lifting sin8s::@18(between sin8s::@3 and sin8s::@4)
Added new block during phi lifting main::@10(between main::@8 and main::@1)
Added new block during phi lifting main::@11(between main::@1 and main::@2)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @13
Adding NOP phi() at start of @32
Adding NOP phi() at start of @49
Adding NOP phi() at start of @57
Adding NOP phi() at start of @58
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of print_sbyte::@7
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of sin8s_gen
Adding NOP phi() at start of mul8u::@3
Adding NOP phi() at start of div16u
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of divr16u::@6
CALL GRAPH
Calls in [] to main:5 
Calls in [main] to sin8s_gen:9 print_cls:11 print_str:17 print_sbyte:21 print_str:23 
Calls in [print_sbyte] to print_char:43 print_byte:47 print_char:51 
Calls in [print_byte] to print_char:62 print_char:67 
Calls in [print_cls] to memset:71 
Calls in [sin8s_gen] to div16u:84 sin8s:91 
Calls in [sin8s] to mulu8_sel:115 mulu8_sel:122 mulu8_sel:127 mulu8_sel:135 mulu8_sel:142 
Calls in [mulu8_sel] to mul8u:163 
Calls in [div16u] to divr16u:187 

Created 33 initial phi equivalence classes
Coalesced [16] print_char_cursor#52 ← print_char_cursor#45
Coalesced [18] print_char_cursor#62 ← print_char_cursor#2
Coalesced [22] print_char_cursor#53 ← print_char_cursor#10
Coalesced [27] main::i#8 ← main::i#1
Coalesced [28] print_char_cursor#60 ← print_char_cursor#2
Coalesced (already) [29] print_char_cursor#61 ← print_char_cursor#45
Coalesced [31] print_str::str#6 ← print_str::str#5
Coalesced (already) [32] print_char_cursor#54 ← print_char_cursor#47
Coalesced [39] print_str::str#7 ← print_str::str#0
Coalesced [40] print_char_cursor#55 ← print_char_cursor#1
Coalesced [42] print_char_cursor#59 ← print_char_cursor#44
Coalesced [44] print_sbyte::b#9 ← print_sbyte::b#1
Coalesced (already) [50] print_char_cursor#58 ← print_char_cursor#44
Coalesced [53] print_sbyte::b#8 ← print_sbyte::b#0
Coalesced [60] print_char::ch#5 ← print_char::ch#2
Coalesced (already) [61] print_char_cursor#56 ← print_char_cursor#10
Coalesced [65] print_char::ch#6 ← print_char::ch#3
Coalesced (already) [66] print_char_cursor#57 ← print_char_cursor#10
Coalesced [82] memset::dst#4 ← memset::dst#1
Coalesced [98] sin8s_gen::i#5 ← sin8s_gen::i#1
Coalesced [99] sin8s_gen::x#5 ← sin8s_gen::x#1
Coalesced [100] sin8s_gen::sintab#7 ← sin8s_gen::sintab#0
Coalesced [103] sin8s::x#9 ← sin8s::x#1
Coalesced [107] sin8s::x#11 ← sin8s::x#2
Coalesced [113] mulu8_sel::v1#10 ← mulu8_sel::v1#0
Coalesced [114] mulu8_sel::v2#9 ← mulu8_sel::v2#0
Coalesced [120] mulu8_sel::v1#6 ← mulu8_sel::v1#1
Coalesced [121] mulu8_sel::v2#6 ← mulu8_sel::v2#1
Coalesced [126] mulu8_sel::v1#7 ← mulu8_sel::v1#2
Coalesced [133] mulu8_sel::v1#8 ← mulu8_sel::v1#3
Coalesced [134] mulu8_sel::v2#7 ← mulu8_sel::v2#3
Coalesced [140] mulu8_sel::v1#9 ← mulu8_sel::v1#4
Coalesced [141] mulu8_sel::v2#8 ← mulu8_sel::v2#4
Coalesced [149] sin8s::usinx#9 ← sin8s::usinx#2
Coalesced [153] sin8s::return#6 ← sin8s::sinx#1
Coalesced [157] sin8s::usinx#8 ← sin8s::usinx#1
Coalesced [158] sin8s::x#10 ← sin8s::x#4
Coalesced [159] sin8s::x#8 ← sin8s::x#0
Coalesced [169] mul8u::a#7 ← mul8u::a#1
Coalesced [170] mul8u::mb#6 ← mul8u::b#0
Coalesced [178] mul8u::res#9 ← mul8u::res#1
Coalesced [182] mul8u::a#8 ← mul8u::a#0
Coalesced [183] mul8u::res#7 ← mul8u::res#6
Coalesced [184] mul8u::mb#7 ← mul8u::mb#1
Coalesced (already) [185] mul8u::res#8 ← mul8u::res#2
Coalesced [198] divr16u::rem#12 ← divr16u::rem#1
Coalesced [205] divr16u::rem#14 ← divr16u::rem#2
Coalesced [206] divr16u::return#6 ← divr16u::quotient#2
Coalesced [212] divr16u::rem#10 ← divr16u::rem#9
Coalesced [213] divr16u::dividend#8 ← divr16u::dividend#0
Coalesced [214] divr16u::quotient#9 ← divr16u::return#0
Coalesced [215] divr16u::i#7 ← divr16u::i#1
Coalesced [216] divr16u::rem#13 ← divr16u::rem#5
Coalesced [217] divr16u::return#5 ← divr16u::quotient#1
Coalesced [218] divr16u::rem#11 ← divr16u::rem#0
Coalesced down to 23 phi equivalence classes
Culled Empty Block (label) @13
Culled Empty Block (label) @32
Culled Empty Block (label) @49
Culled Empty Block (label) @58
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@11
Culled Empty Block (label) print_sbyte::@6
Culled Empty Block (label) print_sbyte::@7
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Culled Empty Block (label) sin8s::@17
Culled Empty Block (label) sin8s::@16
Culled Empty Block (label) sin8s::@15
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) mul8u::@10
Culled Empty Block (label) divr16u::@6
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Renumbering block @57 to @1
Renumbering block div16u::@2 to div16u::@1
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@7 to mul8u::@4
Renumbering block sin8s_gen::@7 to sin8s_gen::@3
Renumbering block sin8s_gen::@8 to sin8s_gen::@4
Renumbering block sin8s::@10 to sin8s::@9
Renumbering block sin8s::@11 to sin8s::@10
Renumbering block sin8s::@12 to sin8s::@11
Renumbering block sin8s::@13 to sin8s::@12
Renumbering block sin8s::@14 to sin8s::@13
Renumbering block sin8s::@18 to sin8s::@14
Renumbering block mulu8_sel::@2 to mulu8_sel::@1
Renumbering block memset::@4 to memset::@1
Renumbering block memset::@5 to memset::@2
Renumbering block print_sbyte::@5 to print_sbyte::@4
Renumbering block main::@5 to main::@4
Renumbering block main::@7 to main::@5
Renumbering block main::@8 to main::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of print_sbyte::@3
Adding NOP phi() at start of print_sbyte::@1
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset
Adding NOP phi() at start of sin8s_gen
Adding NOP phi() at start of mul8u
Adding NOP phi() at start of div16u
Adding NOP phi() at start of divr16u

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call sin8s_gen 
  to:main::@4
main::@4: scope:[main]  from main
  [6] phi()
  [7] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@6
  [8] (byte*) print_char_cursor#45 ← phi( main::@4/(const byte*) print_line_cursor#0 main::@6/(byte*) print_char_cursor#2 )
  [8] (byte) main::i#2 ← phi( main::@4/(byte) 0 main::@6/(byte) main::i#1 )
  [9] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintab2 + (byte) main::i#2) - (signed byte)*((const byte[]) main::sintabref + (byte) main::i#2)
  [10] if((signed byte) main::sb#0<(signed byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [11] phi()
  [12] call print_str 
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [13] (byte*) print_char_cursor#44 ← phi( main::@1/(byte*) print_char_cursor#45 main::@3/(byte*) print_char_cursor#2 )
  [14] (signed byte) print_sbyte::b#1 ← (signed byte) main::sb#0
  [15] call print_sbyte 
  to:main::@5
main::@5: scope:[main]  from main::@2
  [16] phi()
  [17] call print_str 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [18] (byte) main::i#1 ← ++ (byte) main::i#2
  [19] if((byte) main::i#1!=(byte) $c0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@6
  [20] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@3 main::@5
  [21] (byte*) print_char_cursor#47 ← phi( main::@3/(byte*) print_char_cursor#45 main::@5/(byte*) print_char_cursor#10 )
  [21] (byte*) print_str::str#5 ← phi( main::@3/(const string) main::str1 main::@5/(const string) main::str )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [22] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#47 print_str::@2/(byte*) print_char_cursor#1 )
  [22] (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#5 print_str::@2/(byte*) print_str::str#0 )
  [23] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [24] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [25] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3)
  [26] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1

(void()) print_sbyte((signed byte) print_sbyte::b)
print_sbyte: scope:[print_sbyte]  from main::@2
  [28] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  [29] phi()
  [30] call print_char 
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@3 print_sbyte::@4
  [31] (signed byte) print_sbyte::b#4 ← phi( print_sbyte::@4/(signed byte) print_sbyte::b#0 print_sbyte::@3/(signed byte) print_sbyte::b#1 )
  [32] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4
  [33] call print_byte 
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@2
  [34] return 
  to:@return
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  [35] phi()
  [36] call print_char 
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@1
  [37] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1
  to:print_sbyte::@2

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3
  [38] (byte*) print_char_cursor#29 ← phi( print_byte/(byte*) print_char_cursor#10 print_byte::@1/(byte*) print_char_cursor#10 print_sbyte::@1/(byte*) print_char_cursor#44 print_sbyte::@3/(byte*) print_char_cursor#44 )
  [38] (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sbyte::@1/(byte) '-' print_sbyte::@3/(byte) ' ' )
  [39] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#4
  [40] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [41] return 
  to:@return

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_sbyte::@2
  [42] (byte~) print_byte::$0 ← (byte) print_byte::b#0 >> (byte) 4
  [43] (byte) print_char::ch#2 ← *((const byte[]) print_hextab + (byte~) print_byte::$0)
  [44] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [45] (byte~) print_byte::$2 ← (byte) print_byte::b#0 & (byte) $f
  [46] (byte) print_char::ch#3 ← *((const byte[]) print_hextab + (byte~) print_byte::$2)
  [47] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [48] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main::@4
  [49] phi()
  [50] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [51] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [52] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [53] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [55] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [57] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
sin8s_gen: scope:[sin8s_gen]  from main
  [58] phi()
  [59] call div16u 
  [60] (word) div16u::return#2 ← (word) div16u::return#0
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen
  [61] (word) sin8s_gen::step#0 ← (word) div16u::return#2
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@3 sin8s_gen::@4
  [62] (signed byte*) sin8s_gen::sintab#2 ← phi( sin8s_gen::@3/(const signed byte[$c0]) main::sintab2 sin8s_gen::@4/(signed byte*) sin8s_gen::sintab#0 )
  [62] (word) sin8s_gen::x#2 ← phi( sin8s_gen::@3/(byte) 0 sin8s_gen::@4/(word) sin8s_gen::x#1 )
  [62] (word) sin8s_gen::i#2 ← phi( sin8s_gen::@3/(byte) 0 sin8s_gen::@4/(word) sin8s_gen::i#1 )
  [63] if((word) sin8s_gen::i#2<(const word) main::wavelength#0) goto sin8s_gen::@2
  to:sin8s_gen::@return
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@1
  [64] return 
  to:@return
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  [65] (word) sin8s::x#0 ← (word) sin8s_gen::x#2
  [66] call sin8s 
  [67] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
  to:sin8s_gen::@4
sin8s_gen::@4: scope:[sin8s_gen]  from sin8s_gen::@2
  [68] (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#0
  [69] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2
  [70] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2
  [71] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0
  [72] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2
  to:sin8s_gen::@1

(signed byte()) sin8s((word) sin8s::x)
sin8s: scope:[sin8s]  from sin8s_gen::@2
  [73] if((word) sin8s::x#0<(const word) PI_u4f12) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [74] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [75] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) 0 sin8s::@5/(byte) 1 )
  [75] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#0 sin8s::@5/(word) sin8s::x#1 )
  [76] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [77] (word) sin8s::x#2 ← (const word) PI_u4f12 - (word) sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [78] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#2 )
  [79] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3
  [80] (byte) sin8s::x1#0 ← > (word~) sin8s::$4
  [81] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  [82] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  [83] call mulu8_sel 
  [84] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [85] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  [86] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  [87] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0
  [88] call mulu8_sel 
  [89] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [90] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1
  [91] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  [92] call mulu8_sel 
  [93] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [94] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  [95] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0
  [96] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0
  [97] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0
  [98] call mulu8_sel 
  [99] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [100] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  [101] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  [102] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0
  [103] call mulu8_sel 
  [104] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [105] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  [106] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4
  [107] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0
  [108] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [109] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [110] (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  [111] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [112] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [113] (signed byte) sin8s::return#1 ← phi( sin8s::@14/(signed byte~) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [114] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [115] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4

(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [116] (byte) mulu8_sel::select#5 ← phi( sin8s::@9/(byte) 1 sin8s::@10/(byte) 1 sin8s::@11/(byte) 0 sin8s::@12/(byte) 0 sin8s::@2/(byte) 0 )
  [116] (byte) mulu8_sel::v2#5 ← phi( sin8s::@9/(byte) mulu8_sel::v2#1 sin8s::@10/(const byte) sin8s::DIV_6 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  [116] (byte) mulu8_sel::v1#5 ← phi( sin8s::@9/(byte) mulu8_sel::v1#1 sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  [117] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
  [118] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5
  [119] call mul8u 
  [120] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [121] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
  [122] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  [123] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [124] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mulu8_sel
  [125] phi()
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [126] (word) mul8u::mb#2 ← phi( mul8u/(byte) mul8u::b#0 mul8u::@3/(word) mul8u::mb#1 )
  [126] (word) mul8u::res#2 ← phi( mul8u/(byte) 0 mul8u::@3/(word) mul8u::res#6 )
  [126] (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#1 mul8u::@3/(byte) mul8u::a#0 )
  [127] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [128] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [129] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1
  [130] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [131] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [132] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [133] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1
  [134] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from sin8s_gen
  [135] phi()
  [136] call divr16u 
  [137] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [138] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [139] return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u
  [140] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [141] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [141] (word) divr16u::quotient#3 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::return#0 )
  [141] (word) divr16u::dividend#2 ← phi( divr16u/(const word) PI2_u4f12 divr16u::@3/(word) divr16u::dividend#0 )
  [141] (word) divr16u::rem#4 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::rem#9 )
  [142] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1
  [143] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [144] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [145] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [146] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [147] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [148] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1
  [149] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [150] if((word) divr16u::rem#5<(const word) main::wavelength#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [151] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [152] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::wavelength#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [153] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [153] (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [154] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [155] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [156] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 1.3333333333333333
(word) div16u::return#2 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 22.0
(byte~) divr16u::$2 22.0
(word) divr16u::dividend
(word) divr16u::dividend#0 2.75
(word) divr16u::dividend#2 4.714285714285714
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 16.5
(byte) divr16u::i#2 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 16.5
(word) divr16u::quotient#2 11.0
(word) divr16u::quotient#3 2.75
(word) divr16u::rem
(word) divr16u::rem#0 8.25
(word) divr16u::rem#1 22.0
(word) divr16u::rem#2 22.0
(word) divr16u::rem#4 22.0
(word) divr16u::rem#5 11.0
(word) divr16u::rem#9 11.0
(word) divr16u::return
(word) divr16u::return#0 7.000000000000001
(word) divr16u::return#2 4.0
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 3.3000000000000003
(signed byte) main::sb
(signed byte) main::sb#0 6.6000000000000005
(word) main::wavelength
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 22.0
(byte*) memset::dst#2 14.666666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 202.0
(byte) mul8u::a
(byte) mul8u::a#0 101.0
(byte) mul8u::a#1 1.3333333333333333
(byte) mul8u::a#2 67.66666666666666
(byte) mul8u::b
(byte) mul8u::b#0 2.0
(word) mul8u::mb
(word) mul8u::mb#1 202.0
(word) mul8u::mb#2 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 202.0
(word) mul8u::res#2 50.83333333333333
(word) mul8u::res#6 101.0
(word) mul8u::return
(word) mul8u::return#2 4.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 4.0
(word~) mulu8_sel::$1 4.0
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 4.0
(byte) mulu8_sel::return#1 4.0
(byte) mulu8_sel::return#10 4.0
(byte) mulu8_sel::return#11 4.0
(byte) mulu8_sel::return#12 1.714285714285714
(byte) mulu8_sel::return#2 4.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 0.3333333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 2.0
(byte) mulu8_sel::v1#1 2.0
(byte) mulu8_sel::v1#2 4.0
(byte) mulu8_sel::v1#3 2.0
(byte) mulu8_sel::v1#4 2.0
(byte) mulu8_sel::v1#5 12.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 4.0
(byte) mulu8_sel::v2#1 4.0
(byte) mulu8_sel::v2#3 4.0
(byte) mulu8_sel::v2#4 4.0
(byte) mulu8_sel::v2#5 5.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 1.5
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#2 4.0
(byte) print_char::ch#3 4.0
(byte) print_char::ch#4 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*) print_char_cursor#10 0.9444444444444446
(byte*) print_char_cursor#2 40.875
(byte*) print_char_cursor#29 6.0
(byte*) print_char_cursor#44 5.200000000000001
(byte*) print_char_cursor#45 8.25
(byte*) print_char_cursor#47 24.0
(void()) print_cls()
(byte*) print_line_cursor
(void()) print_sbyte((signed byte) print_sbyte::b)
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 4.0
(signed byte) print_sbyte::b#1 2.8333333333333335
(signed byte) print_sbyte::b#4 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#3 101.5
(byte*) print_str::str#5 2.0
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 4.0
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 0.05555555555555555
(signed byte) sin8s::return
(signed byte) sin8s::return#0 22.0
(signed byte) sin8s::return#1 5.0
(signed byte~) sin8s::return#5 4.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 4.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 0.3333333333333333
(byte) sin8s::usinx#1 4.0
(byte) sin8s::usinx#2 4.0
(byte) sin8s::usinx#4 2.0
(word) sin8s::x
(word) sin8s::x#0 8.5
(word) sin8s::x#1 4.0
(word) sin8s::x#2 4.0
(word) sin8s::x#4 5.0
(word) sin8s::x#6 6.0
(byte) sin8s::x1
(byte) sin8s::x1#0 0.6363636363636365
(byte) sin8s::x2
(byte) sin8s::x2#0 4.0
(byte) sin8s::x3
(byte) sin8s::x3#0 1.0
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 4.0
(byte) sin8s::x4
(byte) sin8s::x4#0 4.0
(byte) sin8s::x5
(byte) sin8s::x5#0 4.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 4.0
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(signed byte~) sin8s_gen::$2 22.0
(word) sin8s_gen::i
(word) sin8s_gen::i#1 22.0
(word) sin8s_gen::i#2 3.666666666666667
(signed byte*) sin8s_gen::sintab
(signed byte*) sin8s_gen::sintab#0 7.333333333333333
(signed byte*) sin8s_gen::sintab#2 4.714285714285714
(word) sin8s_gen::step
(word) sin8s_gen::step#0 1.1818181818181819
(word) sin8s_gen::wavelength
(word) sin8s_gen::x
(word) sin8s_gen::x#1 11.0
(word) sin8s_gen::x#2 4.125

Not consolidating phi with different size mul8u::mb#2 mul8u::b#0
Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ print_str::str#3 print_str::str#5 print_str::str#0 ]
[ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#29 print_char_cursor#47 print_char_cursor#44 print_char_cursor#45 print_char_cursor#2 print_char_cursor#10 print_char_cursor#1 ]
[ memset::dst#2 memset::dst#1 ]
[ sin8s_gen::i#2 sin8s_gen::i#1 ]
[ sin8s_gen::x#2 sin8s_gen::x#1 ]
[ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
[ mulu8_sel::select#5 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#1 ]
[ mul8u::b#0 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
Added variable main::sb#0 to zero page equivalence class [ main::sb#0 ]
Added variable print_byte::b#0 to zero page equivalence class [ print_byte::b#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable div16u::return#2 to zero page equivalence class [ div16u::return#2 ]
Added variable sin8s_gen::step#0 to zero page equivalence class [ sin8s_gen::step#0 ]
Added variable sin8s::return#0 to zero page equivalence class [ sin8s::return#0 ]
Added variable sin8s_gen::$2 to zero page equivalence class [ sin8s_gen::$2 ]
Added variable sin8s::$4 to zero page equivalence class [ sin8s::$4 ]
Added variable sin8s::x1#0 to zero page equivalence class [ sin8s::x1#0 ]
Added variable mulu8_sel::return#0 to zero page equivalence class [ mulu8_sel::return#0 ]
Added variable sin8s::x2#0 to zero page equivalence class [ sin8s::x2#0 ]
Added variable mulu8_sel::return#1 to zero page equivalence class [ mulu8_sel::return#1 ]
Added variable sin8s::x3#0 to zero page equivalence class [ sin8s::x3#0 ]
Added variable mulu8_sel::return#2 to zero page equivalence class [ mulu8_sel::return#2 ]
Added variable sin8s::x3_6#0 to zero page equivalence class [ sin8s::x3_6#0 ]
Added variable sin8s::usinx#0 to zero page equivalence class [ sin8s::usinx#0 ]
Added variable mulu8_sel::return#10 to zero page equivalence class [ mulu8_sel::return#10 ]
Added variable sin8s::x4#0 to zero page equivalence class [ sin8s::x4#0 ]
Added variable mulu8_sel::return#11 to zero page equivalence class [ mulu8_sel::return#11 ]
Added variable sin8s::x5#0 to zero page equivalence class [ sin8s::x5#0 ]
Added variable sin8s::x5_128#0 to zero page equivalence class [ sin8s::x5_128#0 ]
Added variable mul8u::return#2 to zero page equivalence class [ mul8u::return#2 ]
Added variable mulu8_sel::$0 to zero page equivalence class [ mulu8_sel::$0 ]
Added variable mulu8_sel::$1 to zero page equivalence class [ mulu8_sel::$1 ]
Added variable mulu8_sel::return#12 to zero page equivalence class [ mulu8_sel::return#12 ]
Added variable mul8u::$1 to zero page equivalence class [ mul8u::$1 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to zero page equivalence class [ div16u::return#0 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ print_str::str#3 print_str::str#5 print_str::str#0 ]
[ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#29 print_char_cursor#47 print_char_cursor#44 print_char_cursor#45 print_char_cursor#2 print_char_cursor#10 print_char_cursor#1 ]
[ memset::dst#2 memset::dst#1 ]
[ sin8s_gen::i#2 sin8s_gen::i#1 ]
[ sin8s_gen::x#2 sin8s_gen::x#1 ]
[ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
[ mulu8_sel::select#5 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#1 ]
[ mul8u::b#0 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ main::sb#0 ]
[ print_byte::b#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ div16u::return#2 ]
[ sin8s_gen::step#0 ]
[ sin8s::return#0 ]
[ sin8s_gen::$2 ]
[ sin8s::$4 ]
[ sin8s::x1#0 ]
[ mulu8_sel::return#0 ]
[ sin8s::x2#0 ]
[ mulu8_sel::return#1 ]
[ sin8s::x3#0 ]
[ mulu8_sel::return#2 ]
[ sin8s::x3_6#0 ]
[ sin8s::usinx#0 ]
[ mulu8_sel::return#10 ]
[ sin8s::x4#0 ]
[ mulu8_sel::return#11 ]
[ sin8s::x5#0 ]
[ sin8s::x5_128#0 ]
[ mul8u::return#2 ]
[ mulu8_sel::$0 ]
[ mulu8_sel::$1 ]
[ mulu8_sel::return#12 ]
[ mul8u::$1 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:3 [ print_str::str#3 print_str::str#5 print_str::str#0 ]
Allocated zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Allocated zp ZP_BYTE:6 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
Allocated zp ZP_WORD:7 [ print_char_cursor#29 print_char_cursor#47 print_char_cursor#44 print_char_cursor#45 print_char_cursor#2 print_char_cursor#10 print_char_cursor#1 ]
Allocated zp ZP_WORD:9 [ memset::dst#2 memset::dst#1 ]
Allocated zp ZP_WORD:11 [ sin8s_gen::i#2 sin8s_gen::i#1 ]
Allocated zp ZP_WORD:13 [ sin8s_gen::x#2 sin8s_gen::x#1 ]
Allocated zp ZP_WORD:15 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
Allocated zp ZP_BYTE:17 [ sin8s::isUpper#10 ]
Allocated zp ZP_WORD:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
Allocated zp ZP_BYTE:20 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
Allocated zp ZP_BYTE:21 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
Allocated zp ZP_BYTE:22 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
Allocated zp ZP_BYTE:23 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
Allocated zp ZP_BYTE:24 [ mulu8_sel::select#5 ]
Allocated zp ZP_BYTE:25 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Allocated zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp ZP_WORD:28 [ mul8u::mb#2 mul8u::mb#1 ]
Allocated zp ZP_BYTE:30 [ mul8u::b#0 ]
Allocated zp ZP_WORD:31 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp ZP_WORD:33 [ divr16u::dividend#2 divr16u::dividend#0 ]
Allocated zp ZP_WORD:35 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:37 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_BYTE:38 [ main::sb#0 ]
Allocated zp ZP_BYTE:39 [ print_byte::b#0 ]
Allocated zp ZP_BYTE:40 [ print_byte::$0 ]
Allocated zp ZP_BYTE:41 [ print_byte::$2 ]
Allocated zp ZP_WORD:42 [ div16u::return#2 ]
Allocated zp ZP_WORD:44 [ sin8s_gen::step#0 ]
Allocated zp ZP_BYTE:46 [ sin8s::return#0 ]
Allocated zp ZP_BYTE:47 [ sin8s_gen::$2 ]
Allocated zp ZP_WORD:48 [ sin8s::$4 ]
Allocated zp ZP_BYTE:50 [ sin8s::x1#0 ]
Allocated zp ZP_BYTE:51 [ mulu8_sel::return#0 ]
Allocated zp ZP_BYTE:52 [ sin8s::x2#0 ]
Allocated zp ZP_BYTE:53 [ mulu8_sel::return#1 ]
Allocated zp ZP_BYTE:54 [ sin8s::x3#0 ]
Allocated zp ZP_BYTE:55 [ mulu8_sel::return#2 ]
Allocated zp ZP_BYTE:56 [ sin8s::x3_6#0 ]
Allocated zp ZP_BYTE:57 [ sin8s::usinx#0 ]
Allocated zp ZP_BYTE:58 [ mulu8_sel::return#10 ]
Allocated zp ZP_BYTE:59 [ sin8s::x4#0 ]
Allocated zp ZP_BYTE:60 [ mulu8_sel::return#11 ]
Allocated zp ZP_BYTE:61 [ sin8s::x5#0 ]
Allocated zp ZP_BYTE:62 [ sin8s::x5_128#0 ]
Allocated zp ZP_WORD:63 [ mul8u::return#2 ]
Allocated zp ZP_WORD:65 [ mulu8_sel::$0 ]
Allocated zp ZP_WORD:67 [ mulu8_sel::$1 ]
Allocated zp ZP_BYTE:69 [ mulu8_sel::return#12 ]
Allocated zp ZP_BYTE:70 [ mul8u::$1 ]
Allocated zp ZP_WORD:71 [ divr16u::return#2 ]
Allocated zp ZP_WORD:73 [ div16u::return#0 ]
Allocated zp ZP_BYTE:75 [ divr16u::$1 ]
Allocated zp ZP_BYTE:76 [ divr16u::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_line_cursor = $400
  .label print_char_cursor = 7
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label wavelength = $c0
    .label sb = $26
    .label i = 2
    // [5] call sin8s_gen 
    // [58] phi from main to sin8s_gen [phi:main->sin8s_gen]
  sin8s_gen_from_main:
    jsr sin8s_gen
    // [6] phi from main to main::@4 [phi:main->main::@4]
  b4_from_main:
    jmp b4
    // main::@4
  b4:
    // [7] call print_cls 
    // [49] phi from main::@4 to print_cls [phi:main::@4->print_cls]
  print_cls_from_b4:
    jsr print_cls
    // [8] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
    // [8] phi (byte*) print_char_cursor#45 = (const byte*) print_line_cursor#0 [phi:main::@4->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta.z print_char_cursor
    lda #>print_line_cursor
    sta.z print_char_cursor+1
    // [8] phi (byte) main::i#2 = (byte) 0 [phi:main::@4->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [8] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
    // [8] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#2 [phi:main::@6->main::@1#0] -- register_copy 
    // [8] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#1] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [9] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintab2 + (byte) main::i#2) - (signed byte)*((const byte[]) main::sintabref + (byte) main::i#2) -- vbsz1=pbsc1_derefidx_vbuz2_minus_pbsc2_derefidx_vbuz2 
    ldy.z i
    lda sintab2,y
    sec
    sbc sintabref,y
    sta.z sb
    // [10] if((signed byte) main::sb#0<(signed byte) 0) goto main::@2 -- vbsz1_lt_0_then_la1 
    lda.z sb
    bmi b2_from_b1
    // [11] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
    jmp b3
    // main::@3
  b3:
    // [12] call print_str 
    // [21] phi from main::@3 to print_str [phi:main::@3->print_str]
  print_str_from_b3:
    // [21] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#45 [phi:main::@3->print_str#0] -- register_copy 
    // [21] phi (byte*) print_str::str#5 = (const string) main::str1 [phi:main::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [13] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
    // [13] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#45 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [14] (signed byte) print_sbyte::b#1 ← (signed byte) main::sb#0 -- vbsz1=vbsz2 
    lda.z sb
    sta.z print_sbyte.b
    // [15] call print_sbyte 
    jsr print_sbyte
    // [16] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  b5_from_b2:
    jmp b5
    // main::@5
  b5:
    // [17] call print_str 
    // [21] phi from main::@5 to print_str [phi:main::@5->print_str]
  print_str_from_b5:
    // [21] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#10 [phi:main::@5->print_str#0] -- register_copy 
    // [21] phi (byte*) print_str::str#5 = (const string) main::str [phi:main::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp b6
    // main::@6
  b6:
    // [18] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [19] if((byte) main::i#1!=(byte) $c0) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c0
    cmp.z i
    bne b1_from_b6
    jmp breturn
    // main::@return
  breturn:
    // [20] return 
    rts
    str: .text "  "
    .byte 0
    str1: .text " "
    .byte 0
    sintab2: .fill $c0, 0
    // .fill $c0, round(127.5*sin(i*2*PI/$c0))
    sintabref: .byte 0, 4, 8, $c, $11, $15, $19, $1d, $21, $25, $29, $2d, $31, $35, $38, $3c, $40, $43, $47, $4a, $4e, $51, $54, $57, $5a, $5d, $60, $63, $65, $68, $6a, $6c, $6e, $70, $72, $74, $76, $77, $79, $7a, $7b, $7c, $7d, $7e, $7e, $7f, $7f, $7f, $80, $7f, $7f, $7f, $7e, $7e, $7d, $7c, $7b, $7a, $79, $77, $76, $74, $72, $70, $6e, $6c, $6a, $68, $65, $63, $60, $5d, $5a, $57, $54, $51, $4e, $4a, $47, $43, $40, $3c, $38, $35, $31, $2d, $29, $25, $21, $1d, $19, $15, $11, $c, 8, 4, 0, $fc, $f8, $f4, $ef, $eb, $e7, $e3, $df, $db, $d7, $d3, $cf, $cb, $c8, $c4, $c0, $bd, $b9, $b6, $b2, $af, $ac, $a9, $a6, $a3, $a0, $9d, $9b, $98, $96, $94, $92, $90, $8e, $8c, $8a, $89, $87, $86, $85, $84, $83, $82, $82, $81, $81, $81, $81, $81, $81, $81, $82, $82, $83, $84, $85, $86, $87, $89, $8a, $8c, $8e, $90, $92, $94, $96, $98, $9b, $9d, $a0, $a3, $a6, $a9, $ac, $af, $b2, $b6, $b9, $bd, $c0, $c4, $c8, $cb, $cf, $d3, $d7, $db, $df, $e3, $e7, $eb, $ef, $f4, $f8, $fc
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zeropage(3) str)
print_str: {
    .label str = 3
    // [22] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
    // [22] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#47 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [22] phi (byte*) print_str::str#3 = (byte*) print_str::str#5 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
    // print_str::@1
  b1:
    // [23] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne b2
    jmp breturn
    // print_str::@return
  breturn:
    // [24] return 
    rts
    // print_str::@2
  b2:
    // [25] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
    // [26] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp b1_from_b2
}
  // print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage(5) b)
print_sbyte: {
    .label b = 5
    // [28] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi b1_from_print_sbyte
    // [29] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  b3_from_print_sbyte:
    jmp b3
    // print_sbyte::@3
  b3:
    // [30] call print_char 
    // [38] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  print_char_from_b3:
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#44 [phi:print_sbyte::@3->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [31] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  b2_from_b3:
  b2_from_b4:
    // [31] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    jmp b2
    // print_sbyte::@2
  b2:
    // [32] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_byte.b
    // [33] call print_byte 
    jsr print_byte
    jmp breturn
    // print_sbyte::@return
  breturn:
    // [34] return 
    rts
    // [35] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  b1_from_print_sbyte:
    jmp b1
    // print_sbyte::@1
  b1:
    // [36] call print_char 
    // [38] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  print_char_from_b1:
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#44 [phi:print_sbyte::@1->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp b4
    // print_sbyte::@4
  b4:
    // [37] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp b2_from_b4
}
  // print_char
// Print a single char
// print_char(byte zeropage(6) ch)
print_char: {
    .label ch = 6
    // [39] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [40] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp breturn
    // print_char::@return
  breturn:
    // [41] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage($27) b)
print_byte: {
    .label _0 = $28
    .label _2 = $29
    .label b = $27
    // [42] (byte~) print_byte::$0 ← (byte) print_byte::b#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z _0
    // [43] (byte) print_char::ch#2 ← *((const byte[]) print_hextab + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z _0
    lda print_hextab,y
    sta.z print_char.ch
    // [44] call print_char 
    // [38] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_byte->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
    // print_byte::@1
  b1:
    // [45] (byte~) print_byte::$2 ← (byte) print_byte::b#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z _2
    // [46] (byte) print_char::ch#3 ← *((const byte[]) print_hextab + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z _2
    lda print_hextab,y
    sta.z print_char.ch
    // [47] call print_char 
    // [38] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
    // print_byte::@return
  breturn:
    // [48] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [50] call memset 
    // [52] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp breturn
    // print_cls::@return
  breturn:
    // [51] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_line_cursor
    .label end = str+num
    .label dst = 9
    // [53] phi from memset to memset::@1 [phi:memset->memset::@1]
  b1_from_memset:
    // [53] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp b1
    // memset::@1
  b1:
    // [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne b2
    lda.z dst
    cmp #<end
    bne b2
    jmp breturn
    // memset::@return
  breturn:
    // [55] return 
    rts
    // memset::@2
  b2:
    // [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [57] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [53] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  b1_from_b2:
    // [53] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp b1
}
  // sin8s_gen
// Generate signed byte sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin8s_gen(signed byte* zeropage($f) sintab)
sin8s_gen: {
    .label _2 = $2f
    .label step = $2c
    .label sintab = $f
    .label x = $d
    .label i = $b
    // [59] call div16u 
    // [135] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
  div16u_from_sin8s_gen:
    jsr div16u
    // [60] (word) div16u::return#2 ← (word) div16u::return#0 -- vwuz1=vwuz2 
    lda.z div16u.return
    sta.z div16u.return_2
    lda.z div16u.return+1
    sta.z div16u.return_2+1
    jmp b3
    // sin8s_gen::@3
  b3:
    // [61] (word) sin8s_gen::step#0 ← (word) div16u::return#2 -- vwuz1=vwuz2 
    lda.z div16u.return_2
    sta.z step
    lda.z div16u.return_2+1
    sta.z step+1
    // [62] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
  b1_from_b3:
    // [62] phi (signed byte*) sin8s_gen::sintab#2 = (const signed byte[$c0]) main::sintab2 [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- pbsz1=pbsc1 
    lda #<main.sintab2
    sta.z sintab
    lda #>main.sintab2
    sta.z sintab+1
    // [62] phi (word) sin8s_gen::x#2 = (byte) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [62] phi (word) sin8s_gen::i#2 = (byte) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- vwuz1=vbuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp b1
  // u[4.12]
    // sin8s_gen::@1
  b1:
    // [63] if((word) sin8s_gen::i#2<(const word) main::wavelength#0) goto sin8s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc b2
  !:
    jmp breturn
    // sin8s_gen::@return
  breturn:
    // [64] return 
    rts
    // sin8s_gen::@2
  b2:
    // [65] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [66] call sin8s 
    jsr sin8s
    // [67] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1 -- vbsz1=vbsz2 
    lda.z sin8s.return_1
    sta.z sin8s.return
    jmp b4
    // sin8s_gen::@4
  b4:
    // [68] (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#0 -- vbsz1=vbsz2 
    lda.z sin8s.return
    sta.z _2
    // [69] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2 -- _deref_pbsz1=vbsz2 
    lda.z _2
    ldy #0
    sta (sintab),y
    // [70] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [71] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [72] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [62] phi from sin8s_gen::@4 to sin8s_gen::@1 [phi:sin8s_gen::@4->sin8s_gen::@1]
  b1_from_b4:
    // [62] phi (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#0 [phi:sin8s_gen::@4->sin8s_gen::@1#0] -- register_copy 
    // [62] phi (word) sin8s_gen::x#2 = (word) sin8s_gen::x#1 [phi:sin8s_gen::@4->sin8s_gen::@1#1] -- register_copy 
    // [62] phi (word) sin8s_gen::i#2 = (word) sin8s_gen::i#1 [phi:sin8s_gen::@4->sin8s_gen::@1#2] -- register_copy 
    jmp b1
}
  // sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage($12) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label _4 = $30
    .label x = $12
    .label return = $2e
    .label x1 = $32
    .label x2 = $34
    .label x3 = $36
    .label x3_6 = $38
    .label usinx = $39
    .label x4 = $3b
    .label x5 = $3d
    .label x5_128 = $3e
    .label usinx_1 = $14
    .label usinx_2 = $14
    .label return_1 = $15
    .label sinx = $15
    .label usinx_4 = $14
    .label isUpper = $11
    .label return_5 = $15
    // [73] if((word) sin8s::x#0<(const word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc b1_from_sin8s
  !:
    jmp b5
    // sin8s::@5
  b5:
    // [74] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [75] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  b1_from_b5:
    // [75] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [75] phi (word) sin8s::x#4 = (word) sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
    // [75] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b1_from_sin8s:
    // [75] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [75] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp b1
    // sin8s::@1
  b1:
    // [76] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc b2_from_b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc b2_from_b1
  !:
    jmp b6
    // sin8s::@6
  b6:
    // [77] (word) sin8s::x#2 ← (const word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [78] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  b2_from_b1:
  b2_from_b6:
    // [78] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp b2
    // sin8s::@2
  b2:
    // [79] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z x
    asl
    sta.z _4
    lda.z x+1
    rol
    sta.z _4+1
    asl.z _4
    rol.z _4+1
    asl.z _4
    rol.z _4+1
    // [80] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z _4+1
    sta.z x1
    // [81] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v1
    // [82] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [83] call mulu8_sel 
    // [116] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from_b2:
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [84] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_12
    sta.z mulu8_sel.return
    jmp b9
    // sin8s::@9
  b9:
    // [85] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return
    sta.z x2
    // [86] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuz1=vbuz2 
    lda.z x2
    sta.z mulu8_sel.v1
    // [87] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [88] call mulu8_sel 
    // [116] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from_b9:
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [89] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_12
    sta.z mulu8_sel.return_1
    jmp b10
    // sin8s::@10
  b10:
    // [90] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_1
    sta.z x3
    // [91] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda.z x3
    sta.z mulu8_sel.v1
    // [92] call mulu8_sel 
    // [116] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from_b10:
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuz1=vbuc1 
    lda #DIV_6
    sta.z mulu8_sel.v2
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [93] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_12
    sta.z mulu8_sel.return_2
    jmp b11
    // sin8s::@11
  b11:
    // [94] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_2
    sta.z x3_6
    // [95] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    // [96] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda.z x3
    sta.z mulu8_sel.v1
    // [97] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [98] call mulu8_sel 
    // [116] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from_b11:
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [99] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_12
    sta.z mulu8_sel.return_10
    jmp b12
    // sin8s::@12
  b12:
    // [100] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_10
    sta.z x4
    // [101] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuz1=vbuz2 
    lda.z x4
    sta.z mulu8_sel.v1
    // [102] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z mulu8_sel.v2
    // [103] call mulu8_sel 
    // [116] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from_b12:
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [104] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_12
    sta.z mulu8_sel.return_11
    jmp b13
    // sin8s::@13
  b13:
    // [105] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11 -- vbuz1=vbuz2 
    lda.z mulu8_sel.return_11
    sta.z x5
    // [106] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z x5
    lsr
    lsr
    lsr
    lsr
    sta.z x5_128
    // [107] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx_1
    // [108] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z usinx_1
    cmp #$80
    bcc b3_from_b13
    jmp b7
    // sin8s::@7
  b7:
    // [109] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuz1=_dec_vbuz1 
    dec.z usinx_2
    // [110] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  b3_from_b13:
  b3_from_b7:
    // [110] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp b3
    // sin8s::@3
  b3:
    // [111] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq b14
    jmp b8
    // sin8s::@8
  b8:
    // [112] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsz1=_neg_vbsz2 
    lda.z usinx_4
    eor #$ff
    clc
    adc #1
    sta.z sinx
    // [113] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  b4_from_b14:
  b4_from_b8:
    // [113] phi (signed byte) sin8s::return#1 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp b4
    // sin8s::@4
  b4:
    jmp breturn
    // sin8s::@return
  breturn:
    // [114] return 
    rts
    // sin8s::@14
  b14:
    // [115] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsz1=vbsz2 
    lda.z usinx_4
    sta.z return_5
    jmp b4_from_b14
}
  // mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte zeropage($16) v1, byte zeropage($17) v2, byte zeropage($18) select)
mulu8_sel: {
    .label _0 = $41
    .label _1 = $43
    .label v1 = $16
    .label v2 = $17
    .label return = $33
    .label return_1 = $35
    .label return_2 = $37
    .label return_10 = $3a
    .label return_11 = $3c
    .label select = $18
    .label return_12 = $45
    // [117] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5 -- vbuz1=vbuz2 
    lda.z v1
    sta.z mul8u.a
    // [118] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5 -- vbuz1=vbuz2 
    lda.z v2
    sta.z mul8u.b
    // [119] call mul8u 
    // [125] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
    jsr mul8u
    // [120] (word) mul8u::return#2 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda.z mul8u.res
    sta.z mul8u.return
    lda.z mul8u.res+1
    sta.z mul8u.return+1
    jmp b1
    // mulu8_sel::@1
  b1:
    // [121] (word~) mulu8_sel::$0 ← (word) mul8u::return#2 -- vwuz1=vwuz2 
    lda.z mul8u.return
    sta.z _0
    lda.z mul8u.return+1
    sta.z _0+1
    // [122] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz2_rol_vbuz3 
    lda.z _0
    sta.z _1
    lda.z _0+1
    sta.z _1+1
    ldy.z select
    beq !e+
  !:
    asl.z _1
    rol.z _1+1
    dey
    bne !-
  !e:
    // [123] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuz1=_hi_vwuz2 
    lda.z _1+1
    sta.z return_12
    jmp breturn
    // mulu8_sel::@return
  breturn:
    // [124] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte zeropage($19) a, byte zeropage($1e) b)
mul8u: {
    .label _1 = $46
    .label a = $19
    .label mb = $1c
    .label res = $1a
    .label b = $1e
    .label return = $3f
    // [126] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  b1_from_mul8u:
    // [126] phi (word) mul8u::mb#2 = (byte) mul8u::b#0 [phi:mul8u->mul8u::@1#0] -- vwuz1=vbuz2 
    lda.z b
    sta.z mb
    lda #0
    sta.z mb+1
    // [126] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [126] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp b1
    // mul8u::@1
  b1:
    // [127] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuz1_neq_0_then_la1 
    lda.z a
    cmp #0
    bne b2
    jmp breturn
    // mul8u::@return
  breturn:
    // [128] return 
    rts
    // mul8u::@2
  b2:
    // [129] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z a
    sta.z _1
    // [130] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuz1_eq_0_then_la1 
    lda.z _1
    cmp #0
    beq b3_from_b2
    jmp b4
    // mul8u::@4
  b4:
    // [131] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [132] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  b3_from_b2:
  b3_from_b4:
    // [132] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp b3
    // mul8u::@3
  b3:
    // [133] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z a
    // [134] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [126] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  b1_from_b3:
    // [126] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [126] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [126] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
  // div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $49
    .label return_2 = $2a
    // [136] call divr16u 
    // [140] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
    // [137] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z divr16u.return_2
    lda.z divr16u.return+1
    sta.z divr16u.return_2+1
    jmp b1
    // div16u::@1
  b1:
    // [138] (word) div16u::return#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return_2
    sta.z return
    lda.z divr16u.return_2+1
    sta.z return+1
    jmp breturn
    // div16u::@return
  breturn:
    // [139] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($21) dividend, word zeropage($1f) rem)
divr16u: {
    .label _1 = $4b
    .label _2 = $4c
    .label rem = $1f
    .label dividend = $21
    .label quotient = $23
    .label i = $25
    .label return = $23
    .label return_2 = $47
    // [141] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
    // [141] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [141] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [141] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [141] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp b1
    // [141] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
    // [141] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [141] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [141] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [141] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
    // divr16u::@1
  b1:
    // [142] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [143] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuz1=_hi_vwuz2 
    lda.z dividend+1
    sta.z _1
    // [144] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z _1
    sta.z _2
    // [145] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda.z _2
    cmp #0
    beq b2_from_b1
    jmp b4
    // divr16u::@4
  b4:
    // [146] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [147] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
    // [147] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
    // divr16u::@2
  b2:
    // [148] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [149] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [150] if((word) divr16u::rem#5<(const word) main::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.wavelength
    bcc b3_from_b2
    bne !+
    lda.z rem
    cmp #<main.wavelength
    bcc b3_from_b2
  !:
    jmp b5
    // divr16u::@5
  b5:
    // [151] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [152] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.wavelength
    sta.z rem
    lda.z rem+1
    sbc #>main.wavelength
    sta.z rem+1
    // [153] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
    // [153] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [153] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
    // divr16u::@3
  b3:
    // [154] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [155] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z i
    bne b1_from_b3
    jmp breturn
    // divr16u::@return
  breturn:
    // [156] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintab2 + (byte) main::i#2) - (signed byte)*((const byte[]) main::sintabref + (byte) main::i#2) [ main::i#2 print_char_cursor#45 main::sb#0 ] ( main:2 [ main::i#2 print_char_cursor#45 main::sb#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [23] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2 [ print_char_cursor#2 print_str::str#3 ] ( main:2::print_str:12 [ main::i#2 main::sb#0 print_char_cursor#2 print_str::str#3 ] main:2::print_str:17 [ main::i#2 print_char_cursor#2 print_str::str#3 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:38 [ main::sb#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:38 [ main::sb#0 ]
Statement [25] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3) [ print_char_cursor#2 print_str::str#3 ] ( main:2::print_str:12 [ main::i#2 main::sb#0 print_char_cursor#2 print_str::str#3 ] main:2::print_str:17 [ main::i#2 print_char_cursor#2 print_str::str#3 ] ) always clobbers reg byte a reg byte y 
Statement [37] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 [ print_char_cursor#10 print_sbyte::b#0 ] ( main:2::print_sbyte:15 [ main::i#2 print_char_cursor#10 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [39] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#4 [ print_char_cursor#29 ] ( main:2::print_sbyte:15::print_char:30 [ main::i#2 print_sbyte::b#1 print_char_cursor#29 ] main:2::print_sbyte:15::print_char:36 [ main::i#2 print_sbyte::b#1 print_char_cursor#29 ] main:2::print_sbyte:15::print_byte:33::print_char:44 [ main::i#2 print_byte::b#0 print_char_cursor#29 ] main:2::print_sbyte:15::print_byte:33::print_char:47 [ main::i#2 print_char_cursor#29 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:39 [ print_byte::b#0 ]
Statement [42] (byte~) print_byte::$0 ← (byte) print_byte::b#0 >> (byte) 4 [ print_char_cursor#10 print_byte::b#0 print_byte::$0 ] ( main:2::print_sbyte:15::print_byte:33 [ main::i#2 print_char_cursor#10 print_byte::b#0 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:39 [ print_byte::b#0 ]
Statement [45] (byte~) print_byte::$2 ← (byte) print_byte::b#0 & (byte) $f [ print_char_cursor#10 print_byte::$2 ] ( main:2::print_sbyte:15::print_byte:33 [ main::i#2 print_char_cursor#10 print_byte::$2 ] ) always clobbers reg byte a 
Statement [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:7::memset:50 [ memset::dst#2 ] ) always clobbers reg byte a 
Statement [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:7::memset:50 [ memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [60] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8s_gen:5 [ div16u::return#2 ] ) always clobbers reg byte a 
Statement [61] (word) sin8s_gen::step#0 ← (word) div16u::return#2 [ sin8s_gen::step#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 ] ) always clobbers reg byte a 
Statement [63] if((word) sin8s_gen::i#2<(const word) main::wavelength#0) goto sin8s_gen::@2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ) always clobbers reg byte a 
Statement [65] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [69] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ) always clobbers reg byte y 
Statement [71] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [73] if((word) sin8s::x#0<(const word) PI_u4f12) goto sin8s::@1 [ sin8s::x#0 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [74] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12 [ sin8s::x#1 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#1 ] ) always clobbers reg byte a 
Statement [76] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#4 sin8s::isUpper#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ sin8s::isUpper#10 ]
Statement [77] (word) sin8s::x#2 ← (const word) PI_u4f12 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#2 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x#2 ] ) always clobbers reg byte a 
Statement [79] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::$4 ] ) always clobbers reg byte a 
Statement [80] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 ] ) always clobbers reg byte a 
Statement [95] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:50 [ sin8s::x1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:54 [ sin8s::x3#0 ]
Statement [106] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:57 [ sin8s::usinx#0 ]
Statement [107] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#1 ] ) always clobbers reg byte a 
Statement [112] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::sinx#1 ] ) always clobbers reg byte a 
Statement [120] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#2 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ mulu8_sel::select#5 ]
Statement [121] (word~) mulu8_sel::$0 ← (word) mul8u::return#2 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) always clobbers reg byte a 
Statement [122] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) always clobbers reg byte a 
Statement [123] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) always clobbers reg byte a 
Statement [131] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Statement [137] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8s_gen:5::div16u:59 [ divr16u::return#2 ] ) always clobbers reg byte a 
Statement [138] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8s_gen:5::div16u:59 [ div16u::return#0 ] ) always clobbers reg byte a 
Statement [143] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8s_gen:5::div16u:59::divr16u:136 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:37 [ divr16u::i#2 divr16u::i#1 ]
Statement [146] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8s_gen:5::div16u:59::divr16u:136 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [150] if((word) divr16u::rem#5<(const word) main::wavelength#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8s_gen:5::div16u:59::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [152] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::wavelength#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8s_gen:5::div16u:59::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [9] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintab2 + (byte) main::i#2) - (signed byte)*((const byte[]) main::sintabref + (byte) main::i#2) [ main::i#2 print_char_cursor#45 main::sb#0 ] ( main:2 [ main::i#2 print_char_cursor#45 main::sb#0 ] ) always clobbers reg byte a 
Statement [23] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2 [ print_char_cursor#2 print_str::str#3 ] ( main:2::print_str:12 [ main::i#2 main::sb#0 print_char_cursor#2 print_str::str#3 ] main:2::print_str:17 [ main::i#2 print_char_cursor#2 print_str::str#3 ] ) always clobbers reg byte a reg byte y 
Statement [25] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3) [ print_char_cursor#2 print_str::str#3 ] ( main:2::print_str:12 [ main::i#2 main::sb#0 print_char_cursor#2 print_str::str#3 ] main:2::print_str:17 [ main::i#2 print_char_cursor#2 print_str::str#3 ] ) always clobbers reg byte a reg byte y 
Statement [37] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 [ print_char_cursor#10 print_sbyte::b#0 ] ( main:2::print_sbyte:15 [ main::i#2 print_char_cursor#10 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [39] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#4 [ print_char_cursor#29 ] ( main:2::print_sbyte:15::print_char:30 [ main::i#2 print_sbyte::b#1 print_char_cursor#29 ] main:2::print_sbyte:15::print_char:36 [ main::i#2 print_sbyte::b#1 print_char_cursor#29 ] main:2::print_sbyte:15::print_byte:33::print_char:44 [ main::i#2 print_byte::b#0 print_char_cursor#29 ] main:2::print_sbyte:15::print_byte:33::print_char:47 [ main::i#2 print_char_cursor#29 ] ) always clobbers reg byte y 
Statement [42] (byte~) print_byte::$0 ← (byte) print_byte::b#0 >> (byte) 4 [ print_char_cursor#10 print_byte::b#0 print_byte::$0 ] ( main:2::print_sbyte:15::print_byte:33 [ main::i#2 print_char_cursor#10 print_byte::b#0 print_byte::$0 ] ) always clobbers reg byte a 
Statement [45] (byte~) print_byte::$2 ← (byte) print_byte::b#0 & (byte) $f [ print_char_cursor#10 print_byte::$2 ] ( main:2::print_sbyte:15::print_byte:33 [ main::i#2 print_char_cursor#10 print_byte::$2 ] ) always clobbers reg byte a 
Statement [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:7::memset:50 [ memset::dst#2 ] ) always clobbers reg byte a 
Statement [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:7::memset:50 [ memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [60] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8s_gen:5 [ div16u::return#2 ] ) always clobbers reg byte a 
Statement [61] (word) sin8s_gen::step#0 ← (word) div16u::return#2 [ sin8s_gen::step#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 ] ) always clobbers reg byte a 
Statement [63] if((word) sin8s_gen::i#2<(const word) main::wavelength#0) goto sin8s_gen::@2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ) always clobbers reg byte a 
Statement [65] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [69] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ) always clobbers reg byte y 
Statement [71] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [73] if((word) sin8s::x#0<(const word) PI_u4f12) goto sin8s::@1 [ sin8s::x#0 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [74] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12 [ sin8s::x#1 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#1 ] ) always clobbers reg byte a 
Statement [76] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#4 sin8s::isUpper#10 ] ) always clobbers reg byte a 
Statement [77] (word) sin8s::x#2 ← (const word) PI_u4f12 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#2 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x#2 ] ) always clobbers reg byte a 
Statement [79] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::$4 ] ) always clobbers reg byte a 
Statement [80] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 ] ) always clobbers reg byte a 
Statement [95] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) always clobbers reg byte a 
Statement [106] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) always clobbers reg byte a 
Statement [107] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#1 ] ) always clobbers reg byte a 
Statement [112] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8s_gen:5::sin8s:66 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::sinx#1 ] ) always clobbers reg byte a 
Statement [120] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#2 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] ) always clobbers reg byte a 
Statement [121] (word~) mulu8_sel::$0 ← (word) mul8u::return#2 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) always clobbers reg byte a 
Statement [122] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) always clobbers reg byte a 
Statement [123] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) always clobbers reg byte a 
Statement [129] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ) always clobbers reg byte a 
Statement [131] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8s_gen:5::sin8s:66::mulu8_sel:83::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:88::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:92::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:98::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:66::mulu8_sel:103::mul8u:119 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Statement [137] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8s_gen:5::div16u:59 [ divr16u::return#2 ] ) always clobbers reg byte a 
Statement [138] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8s_gen:5::div16u:59 [ div16u::return#0 ] ) always clobbers reg byte a 
Statement [143] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8s_gen:5::div16u:59::divr16u:136 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [146] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8s_gen:5::div16u:59::divr16u:136 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [150] if((word) divr16u::rem#5<(const word) main::wavelength#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8s_gen:5::div16u:59::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [152] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::wavelength#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8s_gen:5::div16u:59::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ print_str::str#3 print_str::str#5 print_str::str#0 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:6 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:7 [ print_char_cursor#29 print_char_cursor#47 print_char_cursor#44 print_char_cursor#45 print_char_cursor#2 print_char_cursor#10 print_char_cursor#1 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ memset::dst#2 memset::dst#1 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_WORD:11 [ sin8s_gen::i#2 sin8s_gen::i#1 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_WORD:13 [ sin8s_gen::x#2 sin8s_gen::x#1 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_BYTE:17 [ sin8s::isUpper#10 ] : zp ZP_BYTE:17 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_BYTE:20 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ mulu8_sel::select#5 ] : zp ZP_BYTE:24 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] : zp ZP_BYTE:25 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp ZP_WORD:26 , 
Potential registers zp ZP_WORD:28 [ mul8u::mb#2 mul8u::mb#1 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_BYTE:30 [ mul8u::b#0 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:31 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp ZP_WORD:31 , 
Potential registers zp ZP_WORD:33 [ divr16u::dividend#2 divr16u::dividend#0 ] : zp ZP_WORD:33 , 
Potential registers zp ZP_WORD:35 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:35 , 
Potential registers zp ZP_BYTE:37 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:37 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ main::sb#0 ] : zp ZP_BYTE:38 , reg byte x , 
Potential registers zp ZP_BYTE:39 [ print_byte::b#0 ] : zp ZP_BYTE:39 , reg byte x , 
Potential registers zp ZP_BYTE:40 [ print_byte::$0 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:41 [ print_byte::$2 ] : zp ZP_BYTE:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:42 [ div16u::return#2 ] : zp ZP_WORD:42 , 
Potential registers zp ZP_WORD:44 [ sin8s_gen::step#0 ] : zp ZP_WORD:44 , 
Potential registers zp ZP_BYTE:46 [ sin8s::return#0 ] : zp ZP_BYTE:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ sin8s_gen::$2 ] : zp ZP_BYTE:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:48 [ sin8s::$4 ] : zp ZP_WORD:48 , 
Potential registers zp ZP_BYTE:50 [ sin8s::x1#0 ] : zp ZP_BYTE:50 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ mulu8_sel::return#0 ] : zp ZP_BYTE:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:52 [ sin8s::x2#0 ] : zp ZP_BYTE:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:53 [ mulu8_sel::return#1 ] : zp ZP_BYTE:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:54 [ sin8s::x3#0 ] : zp ZP_BYTE:54 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:55 [ mulu8_sel::return#2 ] : zp ZP_BYTE:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ sin8s::x3_6#0 ] : zp ZP_BYTE:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:57 [ sin8s::usinx#0 ] : zp ZP_BYTE:57 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:58 [ mulu8_sel::return#10 ] : zp ZP_BYTE:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:59 [ sin8s::x4#0 ] : zp ZP_BYTE:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ mulu8_sel::return#11 ] : zp ZP_BYTE:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:61 [ sin8s::x5#0 ] : zp ZP_BYTE:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:62 [ sin8s::x5_128#0 ] : zp ZP_BYTE:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:63 [ mul8u::return#2 ] : zp ZP_WORD:63 , 
Potential registers zp ZP_WORD:65 [ mulu8_sel::$0 ] : zp ZP_WORD:65 , 
Potential registers zp ZP_WORD:67 [ mulu8_sel::$1 ] : zp ZP_WORD:67 , 
Potential registers zp ZP_BYTE:69 [ mulu8_sel::return#12 ] : zp ZP_BYTE:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ mul8u::$1 ] : zp ZP_BYTE:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:71 [ divr16u::return#2 ] : zp ZP_WORD:71 , 
Potential registers zp ZP_WORD:73 [ div16u::return#0 ] : zp ZP_WORD:73 , 
Potential registers zp ZP_BYTE:75 [ divr16u::$1 ] : zp ZP_BYTE:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:76 [ divr16u::$2 ] : zp ZP_BYTE:76 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 353.83: zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 245.57: zp ZP_WORD:28 [ mul8u::mb#2 mul8u::mb#1 ] 202: zp ZP_BYTE:70 [ mul8u::$1 ] 170: zp ZP_BYTE:25 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] 4: zp ZP_WORD:63 [ mul8u::return#2 ] 2: zp ZP_BYTE:30 [ mul8u::b#0 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:3 [ print_str::str#3 print_str::str#5 print_str::str#0 ] 
Uplift Scope [divr16u] 96.25: zp ZP_WORD:31 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 37.25: zp ZP_WORD:35 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 22: zp ZP_BYTE:75 [ divr16u::$1 ] 22: zp ZP_BYTE:76 [ divr16u::$2 ] 18.19: zp ZP_BYTE:37 [ divr16u::i#2 divr16u::i#1 ] 7.46: zp ZP_WORD:33 [ divr16u::dividend#2 divr16u::dividend#0 ] 4: zp ZP_WORD:71 [ divr16u::return#2 ] 
Uplift Scope [] 186.27: zp ZP_WORD:7 [ print_char_cursor#29 print_char_cursor#47 print_char_cursor#44 print_char_cursor#45 print_char_cursor#2 print_char_cursor#10 print_char_cursor#1 ] 
Uplift Scope [sin8s] 27.5: zp ZP_WORD:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] 22: zp ZP_BYTE:46 [ sin8s::return#0 ] 13: zp ZP_BYTE:21 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] 10: zp ZP_BYTE:20 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] 4: zp ZP_WORD:48 [ sin8s::$4 ] 4: zp ZP_BYTE:52 [ sin8s::x2#0 ] 4: zp ZP_BYTE:56 [ sin8s::x3_6#0 ] 4: zp ZP_BYTE:59 [ sin8s::x4#0 ] 4: zp ZP_BYTE:61 [ sin8s::x5#0 ] 4: zp ZP_BYTE:62 [ sin8s::x5_128#0 ] 1: zp ZP_BYTE:54 [ sin8s::x3#0 ] 0.64: zp ZP_BYTE:50 [ sin8s::x1#0 ] 0.33: zp ZP_BYTE:57 [ sin8s::usinx#0 ] 0.06: zp ZP_BYTE:17 [ sin8s::isUpper#10 ] 
Uplift Scope [sin8s_gen] 25.67: zp ZP_WORD:11 [ sin8s_gen::i#2 sin8s_gen::i#1 ] 22: zp ZP_BYTE:47 [ sin8s_gen::$2 ] 15.12: zp ZP_WORD:13 [ sin8s_gen::x#2 sin8s_gen::x#1 ] 12.05: zp ZP_WORD:15 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] 1.18: zp ZP_WORD:44 [ sin8s_gen::step#0 ] 
Uplift Scope [mulu8_sel] 24: zp ZP_BYTE:22 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] 21: zp ZP_BYTE:23 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] 4: zp ZP_BYTE:51 [ mulu8_sel::return#0 ] 4: zp ZP_BYTE:53 [ mulu8_sel::return#1 ] 4: zp ZP_BYTE:55 [ mulu8_sel::return#2 ] 4: zp ZP_BYTE:58 [ mulu8_sel::return#10 ] 4: zp ZP_BYTE:60 [ mulu8_sel::return#11 ] 4: zp ZP_WORD:65 [ mulu8_sel::$0 ] 4: zp ZP_WORD:67 [ mulu8_sel::$1 ] 1.71: zp ZP_BYTE:69 [ mulu8_sel::return#12 ] 0.33: zp ZP_BYTE:24 [ mulu8_sel::select#5 ] 
Uplift Scope [memset] 36.67: zp ZP_WORD:9 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [main] 19.8: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 6.6: zp ZP_BYTE:38 [ main::sb#0 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:6 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplift Scope [print_sbyte] 10.83: zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Uplift Scope [print_byte] 4: zp ZP_BYTE:40 [ print_byte::$0 ] 4: zp ZP_BYTE:41 [ print_byte::$2 ] 1.5: zp ZP_BYTE:39 [ print_byte::b#0 ] 
Uplift Scope [div16u] 4: zp ZP_WORD:42 [ div16u::return#2 ] 1.33: zp ZP_WORD:73 [ div16u::return#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_cls] 

Uplifting [mul8u] best 19827 combination zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp ZP_WORD:28 [ mul8u::mb#2 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] zp ZP_WORD:63 [ mul8u::return#2 ] reg byte a [ mul8u::b#0 ] 
Uplifting [print_str] best 19827 combination zp ZP_WORD:3 [ print_str::str#3 print_str::str#5 print_str::str#0 ] 
Uplifting [divr16u] best 19617 combination zp ZP_WORD:31 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp ZP_WORD:35 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:33 [ divr16u::dividend#2 divr16u::dividend#0 ] zp ZP_WORD:71 [ divr16u::return#2 ] 
Uplifting [] best 19617 combination zp ZP_WORD:7 [ print_char_cursor#29 print_char_cursor#47 print_char_cursor#44 print_char_cursor#45 print_char_cursor#2 print_char_cursor#10 print_char_cursor#1 ] 
Uplifting [sin8s] best 19512 combination zp ZP_WORD:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] reg byte a [ sin8s::return#0 ] reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] zp ZP_WORD:48 [ sin8s::$4 ] zp ZP_BYTE:52 [ sin8s::x2#0 ] zp ZP_BYTE:56 [ sin8s::x3_6#0 ] zp ZP_BYTE:59 [ sin8s::x4#0 ] zp ZP_BYTE:61 [ sin8s::x5#0 ] zp ZP_BYTE:62 [ sin8s::x5_128#0 ] zp ZP_BYTE:54 [ sin8s::x3#0 ] zp ZP_BYTE:50 [ sin8s::x1#0 ] zp ZP_BYTE:57 [ sin8s::usinx#0 ] zp ZP_BYTE:17 [ sin8s::isUpper#10 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [sin8s_gen] best 19452 combination zp ZP_WORD:11 [ sin8s_gen::i#2 sin8s_gen::i#1 ] reg byte a [ sin8s_gen::$2 ] zp ZP_WORD:13 [ sin8s_gen::x#2 sin8s_gen::x#1 ] zp ZP_WORD:15 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] zp ZP_WORD:44 [ sin8s_gen::step#0 ] 
Uplifting [mulu8_sel] best 19406 combination reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] reg byte a [ mulu8_sel::return#0 ] reg byte a [ mulu8_sel::return#1 ] zp ZP_BYTE:55 [ mulu8_sel::return#2 ] zp ZP_BYTE:58 [ mulu8_sel::return#10 ] zp ZP_BYTE:60 [ mulu8_sel::return#11 ] zp ZP_WORD:65 [ mulu8_sel::$0 ] zp ZP_WORD:67 [ mulu8_sel::$1 ] zp ZP_BYTE:69 [ mulu8_sel::return#12 ] zp ZP_BYTE:24 [ mulu8_sel::select#5 ] 
Limited combination testing to 100 combinations of 196608 possible.
Uplifting [memset] best 19406 combination zp ZP_WORD:9 [ memset::dst#2 memset::dst#1 ] 
Uplifting [main] best 19286 combination reg byte x [ main::i#2 main::i#1 ] zp ZP_BYTE:38 [ main::sb#0 ] 
Uplifting [print_char] best 19271 combination reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplifting [print_sbyte] best 19271 combination zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Uplifting [print_byte] best 19263 combination reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] zp ZP_BYTE:39 [ print_byte::b#0 ] 
Uplifting [div16u] best 19263 combination zp ZP_WORD:42 [ div16u::return#2 ] zp ZP_WORD:73 [ div16u::return#0 ] 
Uplifting [RADIX] best 19263 combination 
Uplifting [print_cls] best 19263 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Uplifting [print_sbyte] best 19263 combination zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:38 [ main::sb#0 ]
Uplifting [main] best 19263 combination zp ZP_BYTE:38 [ main::sb#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:52 [ sin8s::x2#0 ]
Uplifting [sin8s] best 19259 combination reg byte a [ sin8s::x2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:55 [ mulu8_sel::return#2 ]
Uplifting [mulu8_sel] best 19253 combination reg byte a [ mulu8_sel::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:56 [ sin8s::x3_6#0 ]
Uplifting [sin8s] best 19249 combination reg byte a [ sin8s::x3_6#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:58 [ mulu8_sel::return#10 ]
Uplifting [mulu8_sel] best 19243 combination reg byte a [ mulu8_sel::return#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:59 [ sin8s::x4#0 ]
Uplifting [sin8s] best 19239 combination reg byte a [ sin8s::x4#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:60 [ mulu8_sel::return#11 ]
Uplifting [mulu8_sel] best 19233 combination reg byte a [ mulu8_sel::return#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:61 [ sin8s::x5#0 ]
Uplifting [sin8s] best 19227 combination reg byte a [ sin8s::x5#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:62 [ sin8s::x5_128#0 ]
Uplifting [sin8s] best 19221 combination reg byte a [ sin8s::x5_128#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:69 [ mulu8_sel::return#12 ]
Uplifting [mulu8_sel] best 19203 combination reg byte a [ mulu8_sel::return#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:39 [ print_byte::b#0 ]
Uplifting [print_byte] best 19203 combination zp ZP_BYTE:39 [ print_byte::b#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:54 [ sin8s::x3#0 ]
Uplifting [sin8s] best 19203 combination zp ZP_BYTE:54 [ sin8s::x3#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ sin8s::x1#0 ]
Uplifting [sin8s] best 19203 combination zp ZP_BYTE:50 [ sin8s::x1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ mulu8_sel::select#5 ]
Uplifting [mulu8_sel] best 19203 combination zp ZP_BYTE:24 [ mulu8_sel::select#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:57 [ sin8s::usinx#0 ]
Uplifting [sin8s] best 19203 combination zp ZP_BYTE:57 [ sin8s::usinx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ sin8s::isUpper#10 ]
Uplifting [sin8s] best 19203 combination zp ZP_BYTE:17 [ sin8s::isUpper#10 ] 
Coalescing zero page register [ zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] ] with [ zp ZP_BYTE:38 [ main::sb#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 main::sb#0 ] ] with [ zp ZP_BYTE:39 [ print_byte::b#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] ] with [ zp ZP_WORD:48 [ sin8s::$4 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp ZP_WORD:63 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:35 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:71 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:42 [ div16u::return#2 ] ] with [ zp ZP_WORD:44 [ sin8s_gen::step#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:42 [ div16u::return#2 sin8s_gen::step#0 ] ] with [ zp ZP_WORD:73 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:65 [ mulu8_sel::$0 ] ] with [ zp ZP_WORD:67 [ mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 ] ] with [ zp ZP_WORD:65 [ mulu8_sel::$0 mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:35 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp ZP_WORD:42 [ div16u::return#2 sin8s_gen::step#0 div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:9 [ memset::dst#2 memset::dst#1 ] ] with [ zp ZP_WORD:3 [ print_str::str#3 print_str::str#5 print_str::str#0 ] ]
Coalescing zero page register [ zp ZP_WORD:11 [ sin8s_gen::i#2 sin8s_gen::i#1 ] ] with [ zp ZP_WORD:7 [ print_char_cursor#29 print_char_cursor#47 print_char_cursor#44 print_char_cursor#45 print_char_cursor#2 print_char_cursor#10 print_char_cursor#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ sin8s::isUpper#10 ] ] with [ zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 main::sb#0 print_byte::b#0 ] ]
Coalescing zero page register [ zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 ] ] with [ zp ZP_WORD:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ] ]
Coalescing zero page register [ zp ZP_WORD:31 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp ZP_WORD:13 [ sin8s_gen::x#2 sin8s_gen::x#1 ] ]
Coalescing zero page register [ zp ZP_WORD:33 [ divr16u::dividend#2 divr16u::dividend#0 ] ] with [ zp ZP_WORD:15 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] ]
Coalescing zero page register [ zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ] ] with [ zp ZP_WORD:9 [ memset::dst#2 memset::dst#1 print_str::str#3 print_str::str#5 print_str::str#0 ] ]
Allocated (was zp ZP_WORD:11) zp ZP_WORD:2 [ sin8s_gen::i#2 sin8s_gen::i#1 print_char_cursor#29 print_char_cursor#47 print_char_cursor#44 print_char_cursor#45 print_char_cursor#2 print_char_cursor#10 print_char_cursor#1 ]
Allocated (was zp ZP_BYTE:17) zp ZP_BYTE:4 [ sin8s::isUpper#10 print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 main::sb#0 print_byte::b#0 ]
Allocated (was zp ZP_BYTE:24) zp ZP_BYTE:5 [ mulu8_sel::select#5 ]
Allocated (was zp ZP_WORD:26) zp ZP_WORD:6 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 memset::dst#2 memset::dst#1 print_str::str#3 print_str::str#5 print_str::str#0 ]
Allocated (was zp ZP_WORD:28) zp ZP_WORD:8 [ mul8u::mb#2 mul8u::mb#1 ]
Allocated (was zp ZP_WORD:31) zp ZP_WORD:10 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 sin8s_gen::x#2 sin8s_gen::x#1 ]
Allocated (was zp ZP_WORD:33) zp ZP_WORD:12 [ divr16u::dividend#2 divr16u::dividend#0 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
Allocated (was zp ZP_WORD:35) zp ZP_WORD:14 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8s_gen::step#0 div16u::return#0 ]
Allocated (was zp ZP_BYTE:50) zp ZP_BYTE:16 [ sin8s::x1#0 ]
Allocated (was zp ZP_BYTE:54) zp ZP_BYTE:17 [ sin8s::x3#0 ]
Allocated (was zp ZP_BYTE:57) zp ZP_BYTE:18 [ sin8s::usinx#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_line_cursor = $400
  .label print_char_cursor = 2
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label wavelength = $c0
    .label sb = 4
    // [5] call sin8s_gen 
    // [58] phi from main to sin8s_gen [phi:main->sin8s_gen]
  sin8s_gen_from_main:
    jsr sin8s_gen
    // [6] phi from main to main::@4 [phi:main->main::@4]
  b4_from_main:
    jmp b4
    // main::@4
  b4:
    // [7] call print_cls 
    // [49] phi from main::@4 to print_cls [phi:main::@4->print_cls]
  print_cls_from_b4:
    jsr print_cls
    // [8] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
    // [8] phi (byte*) print_char_cursor#45 = (const byte*) print_line_cursor#0 [phi:main::@4->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta.z print_char_cursor
    lda #>print_line_cursor
    sta.z print_char_cursor+1
    // [8] phi (byte) main::i#2 = (byte) 0 [phi:main::@4->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [8] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
    // [8] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#2 [phi:main::@6->main::@1#0] -- register_copy 
    // [8] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#1] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [9] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintab2 + (byte) main::i#2) - (signed byte)*((const byte[]) main::sintabref + (byte) main::i#2) -- vbsz1=pbsc1_derefidx_vbuxx_minus_pbsc2_derefidx_vbuxx 
    lda sintab2,x
    sec
    sbc sintabref,x
    sta.z sb
    // [10] if((signed byte) main::sb#0<(signed byte) 0) goto main::@2 -- vbsz1_lt_0_then_la1 
    lda.z sb
    bmi b2_from_b1
    // [11] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
    jmp b3
    // main::@3
  b3:
    // [12] call print_str 
    // [21] phi from main::@3 to print_str [phi:main::@3->print_str]
  print_str_from_b3:
    // [21] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#45 [phi:main::@3->print_str#0] -- register_copy 
    // [21] phi (byte*) print_str::str#5 = (const string) main::str1 [phi:main::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [13] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
    // [13] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#45 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [14] (signed byte) print_sbyte::b#1 ← (signed byte) main::sb#0
    // [15] call print_sbyte 
    jsr print_sbyte
    // [16] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  b5_from_b2:
    jmp b5
    // main::@5
  b5:
    // [17] call print_str 
    // [21] phi from main::@5 to print_str [phi:main::@5->print_str]
  print_str_from_b5:
    // [21] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#10 [phi:main::@5->print_str#0] -- register_copy 
    // [21] phi (byte*) print_str::str#5 = (const string) main::str [phi:main::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp b6
    // main::@6
  b6:
    // [18] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [19] if((byte) main::i#1!=(byte) $c0) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c0
    bne b1_from_b6
    jmp breturn
    // main::@return
  breturn:
    // [20] return 
    rts
    str: .text "  "
    .byte 0
    str1: .text " "
    .byte 0
    sintab2: .fill $c0, 0
    // .fill $c0, round(127.5*sin(i*2*PI/$c0))
    sintabref: .byte 0, 4, 8, $c, $11, $15, $19, $1d, $21, $25, $29, $2d, $31, $35, $38, $3c, $40, $43, $47, $4a, $4e, $51, $54, $57, $5a, $5d, $60, $63, $65, $68, $6a, $6c, $6e, $70, $72, $74, $76, $77, $79, $7a, $7b, $7c, $7d, $7e, $7e, $7f, $7f, $7f, $80, $7f, $7f, $7f, $7e, $7e, $7d, $7c, $7b, $7a, $79, $77, $76, $74, $72, $70, $6e, $6c, $6a, $68, $65, $63, $60, $5d, $5a, $57, $54, $51, $4e, $4a, $47, $43, $40, $3c, $38, $35, $31, $2d, $29, $25, $21, $1d, $19, $15, $11, $c, 8, 4, 0, $fc, $f8, $f4, $ef, $eb, $e7, $e3, $df, $db, $d7, $d3, $cf, $cb, $c8, $c4, $c0, $bd, $b9, $b6, $b2, $af, $ac, $a9, $a6, $a3, $a0, $9d, $9b, $98, $96, $94, $92, $90, $8e, $8c, $8a, $89, $87, $86, $85, $84, $83, $82, $82, $81, $81, $81, $81, $81, $81, $81, $82, $82, $83, $84, $85, $86, $87, $89, $8a, $8c, $8e, $90, $92, $94, $96, $98, $9b, $9d, $a0, $a3, $a6, $a9, $ac, $af, $b2, $b6, $b9, $bd, $c0, $c4, $c8, $cb, $cf, $d3, $d7, $db, $df, $e3, $e7, $eb, $ef, $f4, $f8, $fc
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zeropage(6) str)
print_str: {
    .label str = 6
    // [22] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
    // [22] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#47 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [22] phi (byte*) print_str::str#3 = (byte*) print_str::str#5 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
    // print_str::@1
  b1:
    // [23] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne b2
    jmp breturn
    // print_str::@return
  breturn:
    // [24] return 
    rts
    // print_str::@2
  b2:
    // [25] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
    // [26] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp b1_from_b2
}
  // print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage(4) b)
print_sbyte: {
    .label b = 4
    // [28] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi b1_from_print_sbyte
    // [29] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  b3_from_print_sbyte:
    jmp b3
    // print_sbyte::@3
  b3:
    // [30] call print_char 
    // [38] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  print_char_from_b3:
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#44 [phi:print_sbyte::@3->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [31] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  b2_from_b3:
  b2_from_b4:
    // [31] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    jmp b2
    // print_sbyte::@2
  b2:
    // [32] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4
    // [33] call print_byte 
    jsr print_byte
    jmp breturn
    // print_sbyte::@return
  breturn:
    // [34] return 
    rts
    // [35] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  b1_from_print_sbyte:
    jmp b1
    // print_sbyte::@1
  b1:
    // [36] call print_char 
    // [38] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  print_char_from_b1:
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#44 [phi:print_sbyte::@1->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
    // print_sbyte::@4
  b4:
    // [37] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp b2_from_b4
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [39] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [40] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp breturn
    // print_char::@return
  breturn:
    // [41] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage(4) b)
print_byte: {
    .label b = 4
    // [42] (byte~) print_byte::$0 ← (byte) print_byte::b#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // [43] (byte) print_char::ch#2 ← *((const byte[]) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [44] call print_char 
    // [38] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_byte->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
    // print_byte::@1
  b1:
    // [45] (byte~) print_byte::$2 ← (byte) print_byte::b#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // [46] (byte) print_char::ch#3 ← *((const byte[]) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [47] call print_char 
    // [38] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
    // print_byte::@return
  breturn:
    // [48] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [50] call memset 
    // [52] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp breturn
    // print_cls::@return
  breturn:
    // [51] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_line_cursor
    .label end = str+num
    .label dst = 6
    // [53] phi from memset to memset::@1 [phi:memset->memset::@1]
  b1_from_memset:
    // [53] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp b1
    // memset::@1
  b1:
    // [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne b2
    lda.z dst
    cmp #<end
    bne b2
    jmp breturn
    // memset::@return
  breturn:
    // [55] return 
    rts
    // memset::@2
  b2:
    // [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [57] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [53] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  b1_from_b2:
    // [53] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp b1
}
  // sin8s_gen
// Generate signed byte sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin8s_gen(signed byte* zeropage($c) sintab)
sin8s_gen: {
    .label step = $e
    .label sintab = $c
    .label x = $a
    .label i = 2
    // [59] call div16u 
    // [135] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
  div16u_from_sin8s_gen:
    jsr div16u
    // [60] (word) div16u::return#2 ← (word) div16u::return#0
    jmp b3
    // sin8s_gen::@3
  b3:
    // [61] (word) sin8s_gen::step#0 ← (word) div16u::return#2
    // [62] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
  b1_from_b3:
    // [62] phi (signed byte*) sin8s_gen::sintab#2 = (const signed byte[$c0]) main::sintab2 [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- pbsz1=pbsc1 
    lda #<main.sintab2
    sta.z sintab
    lda #>main.sintab2
    sta.z sintab+1
    // [62] phi (word) sin8s_gen::x#2 = (byte) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [62] phi (word) sin8s_gen::i#2 = (byte) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- vwuz1=vbuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp b1
  // u[4.12]
    // sin8s_gen::@1
  b1:
    // [63] if((word) sin8s_gen::i#2<(const word) main::wavelength#0) goto sin8s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc b2
  !:
    jmp breturn
    // sin8s_gen::@return
  breturn:
    // [64] return 
    rts
    // sin8s_gen::@2
  b2:
    // [65] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [66] call sin8s 
    jsr sin8s
    // [67] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
    jmp b4
    // sin8s_gen::@4
  b4:
    // [68] (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#0
    // [69] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2 -- _deref_pbsz1=vbsaa 
    ldy #0
    sta (sintab),y
    // [70] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [71] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [72] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [62] phi from sin8s_gen::@4 to sin8s_gen::@1 [phi:sin8s_gen::@4->sin8s_gen::@1]
  b1_from_b4:
    // [62] phi (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#0 [phi:sin8s_gen::@4->sin8s_gen::@1#0] -- register_copy 
    // [62] phi (word) sin8s_gen::x#2 = (word) sin8s_gen::x#1 [phi:sin8s_gen::@4->sin8s_gen::@1#1] -- register_copy 
    // [62] phi (word) sin8s_gen::i#2 = (word) sin8s_gen::i#1 [phi:sin8s_gen::@4->sin8s_gen::@1#2] -- register_copy 
    jmp b1
}
  // sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage(6) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label _4 = 6
    .label x = 6
    .label x1 = $10
    .label x3 = $11
    .label usinx = $12
    .label isUpper = 4
    // [73] if((word) sin8s::x#0<(const word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc b1_from_sin8s
  !:
    jmp b5
    // sin8s::@5
  b5:
    // [74] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [75] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  b1_from_b5:
    // [75] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [75] phi (word) sin8s::x#4 = (word) sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
    // [75] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b1_from_sin8s:
    // [75] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [75] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp b1
    // sin8s::@1
  b1:
    // [76] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc b2_from_b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc b2_from_b1
  !:
    jmp b6
    // sin8s::@6
  b6:
    // [77] (word) sin8s::x#2 ← (const word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [78] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  b2_from_b1:
  b2_from_b6:
    // [78] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp b2
    // sin8s::@2
  b2:
    // [79] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z _4
    rol.z _4+1
    asl.z _4
    rol.z _4+1
    asl.z _4
    rol.z _4+1
    // [80] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z _4+1
    sta.z x1
    // [81] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [82] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [83] call mulu8_sel 
    // [116] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from_b2:
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [84] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
    jmp b9
    // sin8s::@9
  b9:
    // [85] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
    // [86] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [87] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [88] call mulu8_sel 
    // [116] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from_b9:
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [89] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
    jmp b10
    // sin8s::@10
  b10:
    // [90] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // [91] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [92] call mulu8_sel 
    // [116] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from_b10:
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [93] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
    jmp b11
    // sin8s::@11
  b11:
    // [94] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
    // [95] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // [96] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [97] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [98] call mulu8_sel 
    // [116] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from_b11:
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [99] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
    jmp b12
    // sin8s::@12
  b12:
    // [100] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
    // [101] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [102] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [103] call mulu8_sel 
    // [116] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from_b12:
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [104] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
    jmp b13
    // sin8s::@13
  b13:
    // [105] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
    // [106] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [107] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // [108] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc b3_from_b13
    jmp b7
    // sin8s::@7
  b7:
    // [109] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [110] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  b3_from_b13:
  b3_from_b7:
    // [110] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp b3
    // sin8s::@3
  b3:
    // [111] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq b14
    jmp b8
    // sin8s::@8
  b8:
    // [112] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [113] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  b4_from_b14:
  b4_from_b8:
    // [113] phi (signed byte) sin8s::return#1 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp b4
    // sin8s::@4
  b4:
    jmp breturn
    // sin8s::@return
  breturn:
    // [114] return 
    rts
    // sin8s::@14
  b14:
    // [115] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    jmp b4_from_b14
}
  // mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zeropage(5) select)
mulu8_sel: {
    .label _0 = 6
    .label _1 = 6
    .label select = 5
    // [117] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
    // [118] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [119] call mul8u 
    // [125] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
    jsr mul8u
    // [120] (word) mul8u::return#2 ← (word) mul8u::res#2
    jmp b1
    // mulu8_sel::@1
  b1:
    // [121] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
    // [122] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z _1
    rol.z _1+1
    dey
    bne !-
  !e:
    // [123] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda.z _1+1
    jmp breturn
    // mulu8_sel::@return
  breturn:
    // [124] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = 8
    .label res = 6
    .label return = 6
    // [126] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  b1_from_mul8u:
    // [126] phi (word) mul8u::mb#2 = (byte) mul8u::b#0 [phi:mul8u->mul8u::@1#0] -- vwuz1=vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [126] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [126] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp b1
    // mul8u::@1
  b1:
    // [127] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b2
    jmp breturn
    // mul8u::@return
  breturn:
    // [128] return 
    rts
    // mul8u::@2
  b2:
    // [129] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [130] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3_from_b2
    jmp b4
    // mul8u::@4
  b4:
    // [131] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [132] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  b3_from_b2:
  b3_from_b4:
    // [132] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp b3
    // mul8u::@3
  b3:
    // [133] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [134] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [126] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  b1_from_b3:
    // [126] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [126] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [126] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
  // div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $e
    // [136] call divr16u 
    // [140] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
    // [137] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp b1
    // div16u::@1
  b1:
    // [138] (word) div16u::return#0 ← (word) divr16u::return#2
    jmp breturn
    // div16u::@return
  breturn:
    // [139] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($c) dividend, word zeropage($a) rem)
divr16u: {
    .label rem = $a
    .label dividend = $c
    .label quotient = $e
    .label return = $e
    // [141] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
    // [141] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [141] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [141] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [141] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp b1
    // [141] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
    // [141] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [141] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [141] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [141] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
    // divr16u::@1
  b1:
    // [142] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [143] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // [144] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [145] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
    // divr16u::@4
  b4:
    // [146] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [147] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
    // [147] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
    // divr16u::@2
  b2:
    // [148] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [149] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [150] if((word) divr16u::rem#5<(const word) main::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.wavelength
    bcc b3_from_b2
    bne !+
    lda.z rem
    cmp #<main.wavelength
    bcc b3_from_b2
  !:
    jmp b5
    // divr16u::@5
  b5:
    // [151] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [152] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.wavelength
    sta.z rem
    lda.z rem+1
    sbc #>main.wavelength
    sta.z rem+1
    // [153] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
    // [153] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [153] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
    // divr16u::@3
  b3:
    // [154] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [155] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp breturn
    // divr16u::@return
  breturn:
    // [156] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b8
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z sb
Removing instruction ldy #0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Replacing instruction ldx.z x1 with TAX
Replacing instruction ldy.z x1 with TAY
Replacing instruction ldx.z x3 with TAX
Removing instruction lda #<0
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b2_from_b1 with b2
Replacing label b1_from_b6 with b1
Replacing label b1_from_b2 with b1
Replacing label b1_from_print_sbyte with b1
Replacing label b2_from_b4 with b2
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b13 with b3
Replacing label b4_from_b14 with b4
Replacing label b3_from_b2 with b3
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b4_from_main:
Removing instruction print_cls_from_b4:
Removing instruction b1_from_b6:
Removing instruction b3_from_b1:
Removing instruction print_str_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b5_from_b2:
Removing instruction print_str_from_b5:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b3_from_print_sbyte:
Removing instruction print_char_from_b3:
Removing instruction b2_from_b3:
Removing instruction b2_from_b4:
Removing instruction b1_from_print_sbyte:
Removing instruction print_char_from_b1:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b6:
Removing instruction b3_from_b13:
Removing instruction b3_from_b7:
Removing instruction b4_from_b14:
Removing instruction b4_from_b8:
Removing instruction breturn:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction breturn:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction sin8s_gen_from_main:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction b3:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b4:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction memset_from_print_cls:
Removing instruction breturn:
Removing instruction b1_from_memset:
Removing instruction breturn:
Removing instruction b1_from_b2:
Removing instruction div16u_from_sin8s_gen:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction b5:
Removing instruction b1_from_b5:
Removing instruction b6:
Removing instruction mulu8_sel_from_b2:
Removing instruction b9:
Removing instruction mulu8_sel_from_b9:
Removing instruction b10:
Removing instruction mulu8_sel_from_b10:
Removing instruction b11:
Removing instruction mulu8_sel_from_b11:
Removing instruction b12:
Removing instruction mulu8_sel_from_b12:
Removing instruction b13:
Removing instruction b7:
Removing instruction b8:
Removing instruction mul8u_from_mulu8_sel:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1_from_mul8u:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b3:
Removing instruction divr16u_from_div16u:
Removing instruction b1:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp b4
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b1_from_sin8s to b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b4:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const word) PI2_u4f12 PI2_u4f12 = (word) $6488
(const word) PI_HALF_u4f12 PI_HALF_u4f12 = (word) $1922
(const word) PI_u4f12 PI_u4f12 = (word) $3244
(const byte) RADIX::BINARY BINARY = (number) 2
(const byte) RADIX::DECIMAL DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL OCTAL = (number) 8
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 return zp ZP_WORD:14 1.3333333333333333
(word) div16u::return#2 return zp ZP_WORD:14 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:12 2.75
(word) divr16u::dividend#2 dividend zp ZP_WORD:12 4.714285714285714
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:14 16.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:14 11.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:14 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:10 8.25
(word) divr16u::rem#1 rem zp ZP_WORD:10 22.0
(word) divr16u::rem#2 rem zp ZP_WORD:10 22.0
(word) divr16u::rem#4 rem zp ZP_WORD:10 22.0
(word) divr16u::rem#5 rem zp ZP_WORD:10 11.0
(word) divr16u::rem#9 rem zp ZP_WORD:10 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:14 7.000000000000001
(word) divr16u::return#2 return zp ZP_WORD:14 4.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 3.3000000000000003
(signed byte) main::sb
(signed byte) main::sb#0 sb zp ZP_BYTE:4 6.6000000000000005
(const signed byte[$c0]) main::sintab2 sintab2 = { fill( $c0, 0) }
(const byte[]) main::sintabref sintabref = { (byte) 0, (byte) 4, (byte) 8, (byte) $c, (byte) $11, (byte) $15, (byte) $19, (byte) $1d, (byte) $21, (byte) $25, (byte) $29, (byte) $2d, (byte) $31, (byte) $35, (byte) $38, (byte) $3c, (byte) $40, (byte) $43, (byte) $47, (byte) $4a, (byte) $4e, (byte) $51, (byte) $54, (byte) $57, (byte) $5a, (byte) $5d, (byte) $60, (byte) $63, (byte) $65, (byte) $68, (byte) $6a, (byte) $6c, (byte) $6e, (byte) $70, (byte) $72, (byte) $74, (byte) $76, (byte) $77, (byte) $79, (byte) $7a, (byte) $7b, (byte) $7c, (byte) $7d, (byte) $7e, (byte) $7e, (byte) $7f, (byte) $7f, (byte) $7f, (byte) $80, (byte) $7f, (byte) $7f, (byte) $7f, (byte) $7e, (byte) $7e, (byte) $7d, (byte) $7c, (byte) $7b, (byte) $7a, (byte) $79, (byte) $77, (byte) $76, (byte) $74, (byte) $72, (byte) $70, (byte) $6e, (byte) $6c, (byte) $6a, (byte) $68, (byte) $65, (byte) $63, (byte) $60, (byte) $5d, (byte) $5a, (byte) $57, (byte) $54, (byte) $51, (byte) $4e, (byte) $4a, (byte) $47, (byte) $43, (byte) $40, (byte) $3c, (byte) $38, (byte) $35, (byte) $31, (byte) $2d, (byte) $29, (byte) $25, (byte) $21, (byte) $1d, (byte) $19, (byte) $15, (byte) $11, (byte) $c, (byte) 8, (byte) 4, (byte) 0, (byte) $fc, (byte) $f8, (byte) $f4, (byte) $ef, (byte) $eb, (byte) $e7, (byte) $e3, (byte) $df, (byte) $db, (byte) $d7, (byte) $d3, (byte) $cf, (byte) $cb, (byte) $c8, (byte) $c4, (byte) $c0, (byte) $bd, (byte) $b9, (byte) $b6, (byte) $b2, (byte) $af, (byte) $ac, (byte) $a9, (byte) $a6, (byte) $a3, (byte) $a0, (byte) $9d, (byte) $9b, (byte) $98, (byte) $96, (byte) $94, (byte) $92, (byte) $90, (byte) $8e, (byte) $8c, (byte) $8a, (byte) $89, (byte) $87, (byte) $86, (byte) $85, (byte) $84, (byte) $83, (byte) $82, (byte) $82, (byte) $81, (byte) $81, (byte) $81, (byte) $81, (byte) $81, (byte) $81, (byte) $81, (byte) $82, (byte) $82, (byte) $83, (byte) $84, (byte) $85, (byte) $86, (byte) $87, (byte) $89, (byte) $8a, (byte) $8c, (byte) $8e, (byte) $90, (byte) $92, (byte) $94, (byte) $96, (byte) $98, (byte) $9b, (byte) $9d, (byte) $a0, (byte) $a3, (byte) $a6, (byte) $a9, (byte) $ac, (byte) $af, (byte) $b2, (byte) $b6, (byte) $b9, (byte) $bd, (byte) $c0, (byte) $c4, (byte) $c8, (byte) $cb, (byte) $cf, (byte) $d3, (byte) $d7, (byte) $db, (byte) $df, (byte) $e3, (byte) $e7, (byte) $eb, (byte) $ef, (byte) $f4, (byte) $f8, (byte) $fc }
(const string) main::str str = (string) "  "
(const string) main::str1 str1 = (string) " "
(word) main::wavelength
(const word) main::wavelength#0 wavelength = (byte) $c0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp ZP_WORD:6 22.0
(byte*) memset::dst#2 dst zp ZP_WORD:6 14.666666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_line_cursor#0
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 202.0
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 101.0
(byte) mul8u::a#1 reg byte x 1.3333333333333333
(byte) mul8u::a#2 reg byte x 67.66666666666666
(byte) mul8u::b
(byte) mul8u::b#0 reg byte a 2.0
(word) mul8u::mb
(word) mul8u::mb#1 mb zp ZP_WORD:8 202.0
(word) mul8u::mb#2 mb zp ZP_WORD:8 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 res zp ZP_WORD:6 202.0
(word) mul8u::res#2 res zp ZP_WORD:6 50.83333333333333
(word) mul8u::res#6 res zp ZP_WORD:6 101.0
(word) mul8u::return
(word) mul8u::return#2 return zp ZP_WORD:6 4.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 $0 zp ZP_WORD:6 4.0
(word~) mulu8_sel::$1 $1 zp ZP_WORD:6 4.0
(label) mulu8_sel::@1
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 reg byte a 4.0
(byte) mulu8_sel::return#1 reg byte a 4.0
(byte) mulu8_sel::return#10 reg byte a 4.0
(byte) mulu8_sel::return#11 reg byte a 4.0
(byte) mulu8_sel::return#12 reg byte a 1.714285714285714
(byte) mulu8_sel::return#2 reg byte a 4.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 select zp ZP_BYTE:5 0.3333333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 reg byte x 2.0
(byte) mulu8_sel::v1#1 reg byte x 2.0
(byte) mulu8_sel::v1#2 reg byte x 4.0
(byte) mulu8_sel::v1#3 reg byte x 2.0
(byte) mulu8_sel::v1#4 reg byte x 2.0
(byte) mulu8_sel::v1#5 reg byte x 12.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 reg byte y 4.0
(byte) mulu8_sel::v2#1 reg byte y 4.0
(byte) mulu8_sel::v2#3 reg byte y 4.0
(byte) mulu8_sel::v2#4 reg byte y 4.0
(byte) mulu8_sel::v2#5 reg byte y 5.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp ZP_BYTE:4 1.5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:2 101.0
(byte*) print_char_cursor#10 print_char_cursor zp ZP_WORD:2 0.9444444444444446
(byte*) print_char_cursor#2 print_char_cursor zp ZP_WORD:2 40.875
(byte*) print_char_cursor#29 print_char_cursor zp ZP_WORD:2 6.0
(byte*) print_char_cursor#44 print_char_cursor zp ZP_WORD:2 5.200000000000001
(byte*) print_char_cursor#45 print_char_cursor zp ZP_WORD:2 8.25
(byte*) print_char_cursor#47 print_char_cursor zp ZP_WORD:2 24.0
(void()) print_cls()
(label) print_cls::@return
(const byte[]) print_hextab print_hextab = (string) "0123456789abcdef"z
(byte*) print_line_cursor
(const byte*) print_line_cursor#0 print_line_cursor = (byte*) 1024
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp ZP_BYTE:4 4.0
(signed byte) print_sbyte::b#1 b zp ZP_BYTE:4 2.8333333333333335
(signed byte) print_sbyte::b#4 b zp ZP_BYTE:4 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:6 202.0
(byte*) print_str::str#3 str zp ZP_WORD:6 101.5
(byte*) print_str::str#5 str zp ZP_WORD:6 2.0
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 $4 zp ZP_WORD:6 4.0
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@9
(label) sin8s::@return
(const byte) sin8s::DIV_6 DIV_6 = (byte) $2b
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 isUpper zp ZP_BYTE:4 0.05555555555555555
(signed byte) sin8s::return
(signed byte) sin8s::return#0 reg byte a 22.0
(signed byte) sin8s::return#1 reg byte a 5.0
(signed byte~) sin8s::return#5 reg byte a 4.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 reg byte a 4.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 usinx zp ZP_BYTE:18 0.3333333333333333
(byte) sin8s::usinx#1 reg byte x 4.0
(byte) sin8s::usinx#2 reg byte x 4.0
(byte) sin8s::usinx#4 reg byte x 2.0
(word) sin8s::x
(word) sin8s::x#0 x zp ZP_WORD:6 8.5
(word) sin8s::x#1 x zp ZP_WORD:6 4.0
(word) sin8s::x#2 x zp ZP_WORD:6 4.0
(word) sin8s::x#4 x zp ZP_WORD:6 5.0
(word) sin8s::x#6 x zp ZP_WORD:6 6.0
(byte) sin8s::x1
(byte) sin8s::x1#0 x1 zp ZP_BYTE:16 0.6363636363636365
(byte) sin8s::x2
(byte) sin8s::x2#0 reg byte a 4.0
(byte) sin8s::x3
(byte) sin8s::x3#0 x3 zp ZP_BYTE:17 1.0
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 reg byte a 4.0
(byte) sin8s::x4
(byte) sin8s::x4#0 reg byte a 4.0
(byte) sin8s::x5
(byte) sin8s::x5#0 reg byte a 4.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 reg byte a 4.0
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(signed byte~) sin8s_gen::$2 reg byte a 22.0
(label) sin8s_gen::@1
(label) sin8s_gen::@2
(label) sin8s_gen::@3
(label) sin8s_gen::@4
(label) sin8s_gen::@return
(word) sin8s_gen::i
(word) sin8s_gen::i#1 i zp ZP_WORD:2 22.0
(word) sin8s_gen::i#2 i zp ZP_WORD:2 3.666666666666667
(signed byte*) sin8s_gen::sintab
(signed byte*) sin8s_gen::sintab#0 sintab zp ZP_WORD:12 7.333333333333333
(signed byte*) sin8s_gen::sintab#2 sintab zp ZP_WORD:12 4.714285714285714
(word) sin8s_gen::step
(word) sin8s_gen::step#0 step zp ZP_WORD:14 1.1818181818181819
(word) sin8s_gen::wavelength
(word) sin8s_gen::x
(word) sin8s_gen::x#1 x zp ZP_WORD:10 11.0
(word) sin8s_gen::x#2 x zp ZP_WORD:10 4.125

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp ZP_WORD:2 [ sin8s_gen::i#2 sin8s_gen::i#1 print_char_cursor#29 print_char_cursor#47 print_char_cursor#44 print_char_cursor#45 print_char_cursor#2 print_char_cursor#10 print_char_cursor#1 ]
zp ZP_BYTE:4 [ sin8s::isUpper#10 print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 main::sb#0 print_byte::b#0 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
zp ZP_BYTE:5 [ mulu8_sel::select#5 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp ZP_WORD:6 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 memset::dst#2 memset::dst#1 print_str::str#3 print_str::str#5 print_str::str#0 ]
zp ZP_WORD:8 [ mul8u::mb#2 mul8u::mb#1 ]
reg byte a [ mul8u::b#0 ]
zp ZP_WORD:10 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 sin8s_gen::x#2 sin8s_gen::x#1 ]
zp ZP_WORD:12 [ divr16u::dividend#2 divr16u::dividend#0 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
zp ZP_WORD:14 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8s_gen::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ sin8s::return#0 ]
reg byte a [ sin8s_gen::$2 ]
zp ZP_BYTE:16 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp ZP_BYTE:17 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp ZP_BYTE:18 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]


FINAL ASSEMBLER
Score: 15848

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_line_cursor = $400
  .label print_char_cursor = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label wavelength = $c0
    .label sb = 4
    // sin8s_gen(sintab2, wavelength)
    // [5] call sin8s_gen 
    // [58] phi from main to sin8s_gen [phi:main->sin8s_gen]
    jsr sin8s_gen
    // [6] phi from main to main::@4 [phi:main->main::@4]
    // main::@4
    // print_cls()
    // [7] call print_cls 
    // [49] phi from main::@4 to print_cls [phi:main::@4->print_cls]
    jsr print_cls
    // [8] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [8] phi (byte*) print_char_cursor#45 = (const byte*) print_line_cursor#0 [phi:main::@4->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta.z print_char_cursor
    lda #>print_line_cursor
    sta.z print_char_cursor+1
    // [8] phi (byte) main::i#2 = (byte) 0 [phi:main::@4->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [8] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [8] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#2 [phi:main::@6->main::@1#0] -- register_copy 
    // [8] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#1] -- register_copy 
    // main::@1
  b1:
    // sb = sintab2[i]-(signed byte)sintabref[i]
    // [9] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintab2 + (byte) main::i#2) - (signed byte)*((const byte[]) main::sintabref + (byte) main::i#2) -- vbsz1=pbsc1_derefidx_vbuxx_minus_pbsc2_derefidx_vbuxx 
    lda sintab2,x
    sec
    sbc sintabref,x
    sta.z sb
    // if(sb>=0)
    // [10] if((signed byte) main::sb#0<(signed byte) 0) goto main::@2 -- vbsz1_lt_0_then_la1 
    bmi b2
    // [11] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // print_str(" ")
    // [12] call print_str 
    // [21] phi from main::@3 to print_str [phi:main::@3->print_str]
    // [21] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#45 [phi:main::@3->print_str#0] -- register_copy 
    // [21] phi (byte*) print_str::str#5 = (const string) main::str1 [phi:main::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [13] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
    // [13] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#45 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    // main::@2
  b2:
    // print_sbyte(sb)
    // [14] (signed byte) print_sbyte::b#1 ← (signed byte) main::sb#0
    // [15] call print_sbyte 
    jsr print_sbyte
    // [16] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
    // main::@5
    // print_str("  ")
    // [17] call print_str 
    // [21] phi from main::@5 to print_str [phi:main::@5->print_str]
    // [21] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#10 [phi:main::@5->print_str#0] -- register_copy 
    // [21] phi (byte*) print_str::str#5 = (const string) main::str [phi:main::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // main::@6
    // for(byte i: 0..191)
    // [18] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [19] if((byte) main::i#1!=(byte) $c0) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c0
    bne b1
    // main::@return
    // }
    // [20] return 
    rts
    str: .text "  "
    .byte 0
    str1: .text " "
    .byte 0
    sintab2: .fill $c0, 0
    // .fill $c0, round(127.5*sin(i*2*PI/$c0))
    sintabref: .byte 0, 4, 8, $c, $11, $15, $19, $1d, $21, $25, $29, $2d, $31, $35, $38, $3c, $40, $43, $47, $4a, $4e, $51, $54, $57, $5a, $5d, $60, $63, $65, $68, $6a, $6c, $6e, $70, $72, $74, $76, $77, $79, $7a, $7b, $7c, $7d, $7e, $7e, $7f, $7f, $7f, $80, $7f, $7f, $7f, $7e, $7e, $7d, $7c, $7b, $7a, $79, $77, $76, $74, $72, $70, $6e, $6c, $6a, $68, $65, $63, $60, $5d, $5a, $57, $54, $51, $4e, $4a, $47, $43, $40, $3c, $38, $35, $31, $2d, $29, $25, $21, $1d, $19, $15, $11, $c, 8, 4, 0, $fc, $f8, $f4, $ef, $eb, $e7, $e3, $df, $db, $d7, $d3, $cf, $cb, $c8, $c4, $c0, $bd, $b9, $b6, $b2, $af, $ac, $a9, $a6, $a3, $a0, $9d, $9b, $98, $96, $94, $92, $90, $8e, $8c, $8a, $89, $87, $86, $85, $84, $83, $82, $82, $81, $81, $81, $81, $81, $81, $81, $82, $82, $83, $84, $85, $86, $87, $89, $8a, $8c, $8e, $90, $92, $94, $96, $98, $9b, $9d, $a0, $a3, $a6, $a9, $ac, $af, $b2, $b6, $b9, $bd, $c0, $c4, $c8, $cb, $cf, $d3, $d7, $db, $df, $e3, $e7, $eb, $ef, $f4, $f8, $fc
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zeropage(6) str)
print_str: {
    .label str = 6
    // [22] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
    // [22] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#47 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [22] phi (byte*) print_str::str#3 = (byte*) print_str::str#5 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    // print_str::@1
  b1:
    // while(*str)
    // [23] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne b2
    // print_str::@return
    // }
    // [24] return 
    rts
    // print_str::@2
  b2:
    // *(print_char_cursor++) = *(str++)
    // [25] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
    // *(print_char_cursor++) = *(str++);
    // [26] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp b1
}
  // print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage(4) b)
print_sbyte: {
    .label b = 4
    // if(b<0)
    // [28] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi b1
    // [29] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
    // print_sbyte::@3
    // print_char(' ')
    // [30] call print_char 
    // [38] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#44 [phi:print_sbyte::@3->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [31] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
    // [31] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    // print_sbyte::@2
  b2:
    // print_byte((byte)b)
    // [32] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4
    // [33] call print_byte 
    jsr print_byte
    // print_sbyte::@return
    // }
    // [34] return 
    rts
    // [35] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
    // print_sbyte::@1
  b1:
    // print_char('-')
    // [36] call print_char 
    // [38] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#44 [phi:print_sbyte::@1->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sbyte::@4
    // b = -b
    // [37] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp b2
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [39] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [40] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [41] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage(4) b)
print_byte: {
    .label b = 4
    // b>>4
    // [42] (byte~) print_byte::$0 ← (byte) print_byte::b#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [43] (byte) print_char::ch#2 ← *((const byte[]) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [44] call print_char 
    // [38] phi from print_byte to print_char [phi:print_byte->print_char]
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_byte->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@1
    // b&$f
    // [45] (byte~) print_byte::$2 ← (byte) print_byte::b#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // print_char(print_hextab[b&$f])
    // [46] (byte) print_char::ch#3 ← *((const byte[]) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [47] call print_char 
    // [38] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
    // [38] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [38] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@return
    // }
    // [48] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [50] call memset 
    // [52] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [51] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_line_cursor
    .label end = str+num
    .label dst = 6
    // [53] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [53] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  b1:
    // for(char* dst = str; dst!=end; dst++)
    // [54] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne b2
    lda.z dst
    cmp #<end
    bne b2
    // memset::@return
    // }
    // [55] return 
    rts
    // memset::@2
  b2:
    // *dst = c
    // [56] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [57] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [53] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [53] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp b1
}
  // sin8s_gen
// Generate signed byte sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin8s_gen(signed byte* zeropage($c) sintab)
sin8s_gen: {
    .label step = $e
    .label sintab = $c
    .label x = $a
    .label i = 2
    // div16u(PI2_u4f12, wavelength)
    // [59] call div16u 
    // [135] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
    jsr div16u
    // div16u(PI2_u4f12, wavelength)
    // [60] (word) div16u::return#2 ← (word) div16u::return#0
    // sin8s_gen::@3
    // step = div16u(PI2_u4f12, wavelength)
    // [61] (word) sin8s_gen::step#0 ← (word) div16u::return#2
    // [62] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
    // [62] phi (signed byte*) sin8s_gen::sintab#2 = (const signed byte[$c0]) main::sintab2 [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- pbsz1=pbsc1 
    lda #<main.sintab2
    sta.z sintab
    lda #>main.sintab2
    sta.z sintab+1
    // [62] phi (word) sin8s_gen::x#2 = (byte) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [62] phi (word) sin8s_gen::i#2 = (byte) 0 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- vwuz1=vbuc1 
    sta.z i
    sta.z i+1
  // u[4.12]
    // sin8s_gen::@1
  b1:
    // for( word i=0; i<wavelength; i++)
    // [63] if((word) sin8s_gen::i#2<(const word) main::wavelength#0) goto sin8s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc b2
  !:
    // sin8s_gen::@return
    // }
    // [64] return 
    rts
    // sin8s_gen::@2
  b2:
    // sin8s(x)
    // [65] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [66] call sin8s 
    jsr sin8s
    // [67] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
    // sin8s_gen::@4
    // [68] (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#0
    // *sintab++ = sin8s(x)
    // [69] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2 -- _deref_pbsz1=vbsaa 
    ldy #0
    sta (sintab),y
    // *sintab++ = sin8s(x);
    // [70] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // x = x + step
    // [71] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // for( word i=0; i<wavelength; i++)
    // [72] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [62] phi from sin8s_gen::@4 to sin8s_gen::@1 [phi:sin8s_gen::@4->sin8s_gen::@1]
    // [62] phi (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#0 [phi:sin8s_gen::@4->sin8s_gen::@1#0] -- register_copy 
    // [62] phi (word) sin8s_gen::x#2 = (word) sin8s_gen::x#1 [phi:sin8s_gen::@4->sin8s_gen::@1#1] -- register_copy 
    // [62] phi (word) sin8s_gen::i#2 = (word) sin8s_gen::i#1 [phi:sin8s_gen::@4->sin8s_gen::@1#2] -- register_copy 
    jmp b1
}
  // sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage(6) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label _4 = 6
    .label x = 6
    .label x1 = $10
    .label x3 = $11
    .label usinx = $12
    .label isUpper = 4
    // if(x >= PI_u4f12 )
    // [73] if((word) sin8s::x#0<(const word) PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc b5
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc b5
  !:
    // sin8s::@5
    // x = x - PI_u4f12
    // [74] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [75] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
    // [75] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [75] phi (word) sin8s::x#4 = (word) sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
    // [75] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b5:
    // [75] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [75] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    // sin8s::@1
  b1:
    // if(x >= PI_HALF_u4f12 )
    // [76] if((word) sin8s::x#4<(const word) PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc b2
  !:
    // sin8s::@6
    // x = PI_u4f12 - x
    // [77] (word) sin8s::x#2 ← (const word) PI_u4f12 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [78] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
    // [78] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    // sin8s::@2
  b2:
    // x<<3
    // [79] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z _4
    rol.z _4+1
    asl.z _4
    rol.z _4+1
    asl.z _4
    rol.z _4+1
    // x1 = >x<<3
    // [80] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z _4+1
    sta.z x1
    // mulu8_sel(x1, x1, 0)
    // [81] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    tax
    // [82] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    tay
    // [83] call mulu8_sel 
    // [116] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x1, x1, 0)
    // [84] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
    // sin8s::@9
    // x2 = mulu8_sel(x1, x1, 0)
    // [85] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
    // mulu8_sel(x2, x1, 1)
    // [86] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [87] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [88] call mulu8_sel 
    // [116] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x2, x1, 1)
    // [89] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
    // sin8s::@10
    // x3 = mulu8_sel(x2, x1, 1)
    // [90] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // mulu8_sel(x3, DIV_6, 1)
    // [91] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    tax
    // [92] call mulu8_sel 
    // [116] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, DIV_6, 1)
    // [93] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
    // sin8s::@11
    // x3_6 = mulu8_sel(x3, DIV_6, 1)
    // [94] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
    // usinx = x1 - x3_6
    // [95] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // mulu8_sel(x3, x1, 0)
    // [96] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [97] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [98] call mulu8_sel 
    // [116] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, x1, 0)
    // [99] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
    // sin8s::@12
    // x4 = mulu8_sel(x3, x1, 0)
    // [100] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
    // mulu8_sel(x4, x1, 0)
    // [101] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [102] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [103] call mulu8_sel 
    // [116] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
    // [116] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [116] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [116] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x4, x1, 0)
    // [104] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
    // sin8s::@13
    // x5 = mulu8_sel(x4, x1, 0)
    // [105] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
    // x5_128 = x5>>4
    // [106] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // usinx = usinx + x5_128
    // [107] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // if(usinx>=128)
    // [108] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc b3
    // sin8s::@7
    // usinx--;
    // [109] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [110] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
    // [110] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    // sin8s::@3
  b3:
    // if(isUpper!=0)
    // [111] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq b14
    // sin8s::@8
    // sinx = -(signed byte)usinx
    // [112] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [113] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
    // [113] phi (signed byte) sin8s::return#1 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    // sin8s::@4
    // sin8s::@return
    // }
    // [114] return 
    rts
    // sin8s::@14
  b14:
    // [115] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    rts
}
  // mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zeropage(5) select)
mulu8_sel: {
    .label _0 = 6
    .label _1 = 6
    .label select = 5
    // mul8u(v1, v2)
    // [117] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
    // [118] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [119] call mul8u 
    // [125] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
    jsr mul8u
    // mul8u(v1, v2)
    // [120] (word) mul8u::return#2 ← (word) mul8u::res#2
    // mulu8_sel::@1
    // [121] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
    // mul8u(v1, v2)<<select
    // [122] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z _1
    rol.z _1+1
    dey
    bne !-
  !e:
    // >mul8u(v1, v2)<<select
    // [123] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda.z _1+1
    // mulu8_sel::@return
    // }
    // [124] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = 8
    .label res = 6
    .label return = 6
    // [126] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [126] phi (word) mul8u::mb#2 = (byte) mul8u::b#0 [phi:mul8u->mul8u::@1#0] -- vwuz1=vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [126] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    sta.z res
    sta.z res+1
    // [126] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  b1:
    // while(a!=0)
    // [127] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b2
    // mul8u::@return
    // }
    // [128] return 
    rts
    // mul8u::@2
  b2:
    // a&1
    // [129] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [130] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
    // mul8u::@4
    // res = res + mb
    // [131] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [132] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [132] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  b3:
    // a = a>>1
    // [133] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [134] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [126] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [126] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [126] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [126] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
  // div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $e
    // divr16u(dividend, divisor, 0)
    // [136] call divr16u 
    // [140] phi from div16u to divr16u [phi:div16u->divr16u]
    jsr divr16u
    // divr16u(dividend, divisor, 0)
    // [137] (word) divr16u::return#2 ← (word) divr16u::return#0
    // div16u::@1
    // [138] (word) div16u::return#0 ← (word) divr16u::return#2
    // div16u::@return
    // }
    // [139] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($c) dividend, word zeropage($a) rem)
divr16u: {
    .label rem = $a
    .label dividend = $c
    .label quotient = $e
    .label return = $e
    // [141] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [141] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [141] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [141] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [141] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    txa
    sta.z rem
    sta.z rem+1
    // [141] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [141] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [141] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [141] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [141] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  b1:
    // rem = rem << 1
    // [142] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // >dividend
    // [143] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // >dividend & $80
    // [144] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (>dividend & $80) != 0 )
    // [145] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
    // divr16u::@4
    // rem = rem | 1
    // [146] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [147] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [147] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  b2:
    // dividend = dividend << 1
    // [148] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [149] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [150] if((word) divr16u::rem#5<(const word) main::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.wavelength
    bcc b3
    bne !+
    lda.z rem
    cmp #<main.wavelength
    bcc b3
  !:
    // divr16u::@5
    // quotient++;
    // [151] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [152] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.wavelength
    sta.z rem
    lda.z rem+1
    sbc #>main.wavelength
    sta.z rem+1
    // [153] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [153] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [153] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  b3:
    // for( byte i : 0..15)
    // [154] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [155] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
    // divr16u::@return
    // }
    // [156] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

