Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call (byte~) main::$1 ← call wherey 
Inlined call call _init 

CONTROL FLOW GRAPH SSA

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from main::@2
  (byte) toupper::ch#1 ← phi( main::@2/(byte) toupper::ch#0 )
  (bool~) toupper::$0 ← (byte) toupper::ch#1 >= (byte) 'a'
  (bool~) toupper::$1 ← (byte) toupper::ch#1 <= (byte) 'z'
  (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
  if((bool~) toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  (byte) toupper::ch#2 ← phi( toupper/(byte) toupper::ch#1 )
  (byte~) toupper::$3 ← (byte) toupper::ch#2 + (byte) 'A'-(byte) 'a'
  (byte) toupper::return#0 ← (byte~) toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  (byte) toupper::ch#3 ← phi( toupper/(byte) toupper::ch#1 )
  (byte) toupper::return#1 ← (byte) toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  (byte) toupper::return#4 ← phi( toupper::@1/(byte) toupper::return#0 toupper::@2/(byte) toupper::return#1 )
  (byte) toupper::return#2 ← (byte) toupper::return#4
  return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  (word) memcpy::num#2 ← phi( cscroll::@3/(word) memcpy::num#0 cscroll::@4/(word) memcpy::num#1 )
  (void*) memcpy::destination#2 ← phi( cscroll::@3/(void*) memcpy::destination#0 cscroll::@4/(void*) memcpy::destination#1 )
  (void*) memcpy::source#2 ← phi( cscroll::@3/(void*) memcpy::source#0 cscroll::@4/(void*) memcpy::source#1 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#2
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#2
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#2
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#4 ← phi( memcpy/(void*) memcpy::destination#2 memcpy::@2/(void*) memcpy::destination#5 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#5 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#3 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#4 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#4
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  (byte) memset::c#5 ← phi( cscroll::@5/(byte) memset::c#0 cscroll::@6/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( cscroll::@5/(void*) memset::str#0 cscroll::@6/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( cscroll::@5/(word) memset::num#0 cscroll::@6/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  (byte*) clrscr::line_text#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) clrscr::line_cols#0 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) clrscr::l#0 ← (byte) 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@6
  (byte*) clrscr::line_cols#6 ← phi( clrscr/(byte*) clrscr::line_cols#0 clrscr::@6/(byte*) clrscr::line_cols#1 )
  (byte*) clrscr::line_text#6 ← phi( clrscr/(byte*) clrscr::line_text#0 clrscr::@6/(byte*) clrscr::line_text#1 )
  (byte) clrscr::l#2 ← phi( clrscr/(byte) clrscr::l#0 clrscr::@6/(byte) clrscr::l#1 )
  (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (number) $19
  if((bool~) clrscr::$0) goto clrscr::@2
  to:clrscr::@3
clrscr::@2: scope:[clrscr]  from clrscr::@1
  (byte) clrscr::l#5 ← phi( clrscr::@1/(byte) clrscr::l#2 )
  (byte*) clrscr::line_cols#5 ← phi( clrscr::@1/(byte*) clrscr::line_cols#6 )
  (byte*) clrscr::line_text#5 ← phi( clrscr::@1/(byte*) clrscr::line_text#6 )
  (byte) clrscr::c#0 ← (byte) 0
  to:clrscr::@4
clrscr::@3: scope:[clrscr]  from clrscr::@1
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← (number) 0
  (byte*) conio_line_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_line_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@4: scope:[clrscr]  from clrscr::@2 clrscr::@5
  (byte) clrscr::l#4 ← phi( clrscr::@2/(byte) clrscr::l#5 clrscr::@5/(byte) clrscr::l#6 )
  (byte*) clrscr::line_cols#4 ← phi( clrscr::@2/(byte*) clrscr::line_cols#5 clrscr::@5/(byte*) clrscr::line_cols#2 )
  (byte*) clrscr::line_text#4 ← phi( clrscr::@2/(byte*) clrscr::line_text#5 clrscr::@5/(byte*) clrscr::line_text#2 )
  (byte) clrscr::c#2 ← phi( clrscr::@2/(byte) clrscr::c#0 clrscr::@5/(byte) clrscr::c#1 )
  (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (number) $28
  if((bool~) clrscr::$1) goto clrscr::@5
  to:clrscr::@6
clrscr::@5: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#6 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#2 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte) clrscr::c#3 ← phi( clrscr::@4/(byte) clrscr::c#2 )
  (byte*) clrscr::line_text#2 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  *((byte*) clrscr::line_text#2 + (byte) clrscr::c#3) ← (byte) ' '
  *((byte*) clrscr::line_cols#2 + (byte) clrscr::c#3) ← (byte) conio_textcolor
  (byte) clrscr::c#1 ← ++ (byte) clrscr::c#3
  to:clrscr::@4
clrscr::@6: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#3 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#3 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte*) clrscr::line_text#3 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (number) $28
  (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (number) $28
  (byte) clrscr::l#1 ← ++ (byte) clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@3
  return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2 main::@3
  (byte) gotoxy::x#5 ← phi( cscroll::@2/(byte) gotoxy::x#1 main::@3/(byte) gotoxy::x#2 )
  (byte) gotoxy::y#3 ← phi( cscroll::@2/(byte) gotoxy::y#1 main::@3/(byte) gotoxy::y#2 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (number) $19
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::y#5 ← phi( gotoxy/(byte) gotoxy::y#3 gotoxy::@3/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#3 ← phi( gotoxy/(byte) gotoxy::x#5 gotoxy::@3/(byte) gotoxy::x#6 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (number) $28
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::x#6 ← phi( gotoxy/(byte) gotoxy::x#5 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#4 ← phi( gotoxy::@1/(byte) gotoxy::y#5 gotoxy::@4/(byte) gotoxy::y#6 )
  (byte) gotoxy::x#4 ← phi( gotoxy::@1/(byte) gotoxy::x#3 gotoxy::@4/(byte) gotoxy::x#0 )
  (byte) conio_cursor_x ← (byte) gotoxy::x#4
  (byte) conio_cursor_y ← (byte) gotoxy::y#4
  (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#4
  (number~) gotoxy::$4 ← (word~) gotoxy::$7 * (number) $28
  (word) gotoxy::line_offset#0 ← (number~) gotoxy::$4
  (byte*~) gotoxy::$5 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::line_offset#0
  (byte*) conio_line_text ← (byte*~) gotoxy::$5
  (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::line_offset#0
  (byte*) conio_line_color ← (byte*~) gotoxy::$6
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::y#6 ← phi( gotoxy::@1/(byte) gotoxy::y#5 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from main::@1 main::@7
  (byte) cputc::c#2 ← phi( main::@1/(byte) cputc::c#0 main::@7/(byte) cputc::c#1 )
  (bool~) cputc::$0 ← (byte) cputc::c#2 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  (byte) cputc::c#3 ← phi( cputc/(byte) cputc::c#2 )
  *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3
  *((byte*) conio_line_color + (byte) conio_cursor_x) ← (byte) conio_textcolor
  (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
  (bool~) cputc::$2 ← ! (bool~) cputc::$1
  if((bool~) cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  call cputln 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  (byte*) conio_line_text ← (byte*) conio_line_text + (number) $28
  (byte*) conio_line_color ← (byte*) conio_line_color + (number) $28
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
  (bool~) cscroll::$1 ← ! (bool~) cscroll::$0
  if((bool~) cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  (bool~) cscroll::$7 ← (number) 0 != (byte) conio_scroll_enable
  if((bool~) cscroll::$7) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  (void*) memcpy::destination#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
  (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
  (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  (void*) memcpy::destination#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
  (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
  (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#3 ← (void*) memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
  (byte) memset::c#1 ← (byte) conio_textcolor
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  (byte*) conio_line_text ← (byte*) conio_line_text - (number) $28
  (byte*) conio_line_color ← (byte*) conio_line_color - (number) $28
  (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number) 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  *((byte*)(number) $d018) ← (number) $17
  call clrscr 
  to:main::@4
main::@4: scope:[main]  from main
  (byte) main::c#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#0 main::@5/(byte) main::c#1 )
  (byte) cputc::c#0 ← (byte) main::c#2
  call cputc 
  to:main::@5
main::@5: scope:[main]  from main::@1
  (byte) main::c#3 ← phi( main::@1/(byte) main::c#2 )
  (byte) main::c#1 ← (byte) main::c#3 + rangenext(0,$ff)
  (bool~) main::$5 ← (byte) main::c#1 != rangelast(0,$ff)
  if((bool~) main::$5) goto main::@1
  to:main::wherey1
main::wherey1: scope:[main]  from main::@5
  (byte) main::wherey1_return#0 ← (byte) conio_cursor_y
  to:main::wherey1_@return
main::wherey1_@return: scope:[main]  from main::wherey1
  (byte) main::wherey1_return#2 ← phi( main::wherey1/(byte) main::wherey1_return#0 )
  (byte) main::wherey1_return#1 ← (byte) main::wherey1_return#2
  to:main::@3
main::@3: scope:[main]  from main::wherey1_@return
  (byte) main::wherey1_return#3 ← phi( main::wherey1_@return/(byte) main::wherey1_return#1 )
  (byte~) main::$1 ← (byte) main::wherey1_return#3
  (number~) main::$2 ← (byte~) main::$1 + (number) 2
  (byte) gotoxy::x#2 ← (number) 0
  (byte) gotoxy::y#2 ← (number~) main::$2
  call gotoxy 
  to:main::@6
main::@6: scope:[main]  from main::@3
  (byte) main::c1#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@6 main::@8
  (byte) main::c1#2 ← phi( main::@6/(byte) main::c1#0 main::@8/(byte) main::c1#1 )
  (byte) toupper::ch#0 ← (byte) main::c1#2
  call toupper 
  (byte) toupper::return#3 ← (byte) toupper::return#2
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte) main::c1#4 ← phi( main::@2/(byte) main::c1#2 )
  (byte) toupper::return#5 ← phi( main::@2/(byte) toupper::return#3 )
  (byte~) main::$6 ← (byte) toupper::return#5
  (byte) cputc::c#1 ← (byte~) main::$6
  call cputc 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) main::c1#3 ← phi( main::@7/(byte) main::c1#4 )
  (byte) main::c1#1 ← (byte) main::c1#3 + rangenext(0,$ff)
  (bool~) main::$8 ← (byte) main::c1#1 != rangelast(0,$ff)
  if((bool~) main::$8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@8
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte) conio_cursor_x ← (byte) 0
  (byte) conio_cursor_y ← (byte) 0
  (byte*) conio_line_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_line_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  (byte) conio_scroll_enable ← (byte) 1
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) COLORRAM = (byte*)(number) $d800
(const nomodify byte*) CONIO_SCREEN_COLORS = (const nomodify byte*) COLORRAM
(const nomodify byte*) CONIO_SCREEN_TEXT = (const nomodify byte*) DEFAULT_SCREEN
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (const nomodify byte) LIGHT_BLUE
(const nomodify byte*) DEFAULT_SCREEN = (byte*)(number) $400
(const nomodify byte) LIGHT_BLUE = (byte) $e
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) clrscr()
(bool~) clrscr::$0
(bool~) clrscr::$1
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@6
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#0
(byte) clrscr::c#1
(byte) clrscr::c#2
(byte) clrscr::c#3
(byte) clrscr::l
(byte) clrscr::l#0
(byte) clrscr::l#1
(byte) clrscr::l#2
(byte) clrscr::l#3
(byte) clrscr::l#4
(byte) clrscr::l#5
(byte) clrscr::l#6
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#0
(byte*) clrscr::line_cols#1
(byte*) clrscr::line_cols#2
(byte*) clrscr::line_cols#3
(byte*) clrscr::line_cols#4
(byte*) clrscr::line_cols#5
(byte*) clrscr::line_cols#6
(byte*) clrscr::line_text
(byte*) clrscr::line_text#0
(byte*) clrscr::line_text#1
(byte*) clrscr::line_text#2
(byte*) clrscr::line_text#3
(byte*) clrscr::line_text#4
(byte*) clrscr::line_text#5
(byte*) clrscr::line_text#6
(byte) conio_cursor_x loadstore
(byte) conio_cursor_y loadstore
(byte*) conio_line_color loadstore
(byte*) conio_line_text loadstore
(byte) conio_scroll_enable loadstore
(byte) conio_textcolor loadstore
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(bool~) cputc::$1
(bool~) cputc::$2
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(byte) cputc::c#3
(void()) cputln()
(label) cputln::@1
(label) cputln::@return
(void()) cscroll()
(bool~) cscroll::$0
(bool~) cscroll::$1
(bool~) cscroll::$7
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@return
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(number~) gotoxy::$4
(byte*~) gotoxy::$5
(byte*~) gotoxy::$6
(word~) gotoxy::$7
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::line_offset
(word) gotoxy::line_offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::x#6
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(byte) gotoxy::y#6
(void()) main()
(byte~) main::$1
(number~) main::$2
(bool~) main::$5
(byte~) main::$6
(bool~) main::$8
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(byte) main::c1
(byte) main::c1#0
(byte) main::c1#1
(byte) main::c1#2
(byte) main::c1#3
(byte) main::c1#4
(label) main::wherey1
(label) main::wherey1_@return
(byte) main::wherey1_return
(byte) main::wherey1_return#0
(byte) main::wherey1_return#1
(byte) main::wherey1_return#2
(byte) main::wherey1_return#3
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(void*) memcpy::destination#5
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(word) memcpy::num#2
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::return#4
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(byte()) toupper((byte) toupper::ch)
(bool~) toupper::$0
(bool~) toupper::$1
(bool~) toupper::$2
(byte~) toupper::$3
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0
(byte) toupper::ch#1
(byte) toupper::ch#2
(byte) toupper::ch#3
(byte) toupper::return
(byte) toupper::return#0
(byte) toupper::return#1
(byte) toupper::return#2
(byte) toupper::return#3
(byte) toupper::return#4
(byte) toupper::return#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) $19 in (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (number) $19
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_y ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (number) $28
Adding number conversion cast (unumber) $28 in (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (number) $28
Adding number conversion cast (unumber) $19 in (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (number) $19
Adding number conversion cast (unumber) $28 in (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) gotoxy::$4 ← (word~) gotoxy::$7 * (number) $28
Adding number conversion cast (unumber) gotoxy::$4 in (number~) gotoxy::$4 ← (word~) gotoxy::$7 * (unumber)(number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_text ← (byte*) conio_line_text + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_color ← (byte*) conio_line_color + (number) $28
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
Adding number conversion cast (unumber) 0 in (bool~) cscroll::$7 ← (number) 0 != (byte) conio_scroll_enable
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#0 ← (number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_text ← (byte*) conio_line_text - (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_color ← (byte*) conio_line_color - (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#1 ← (number) 0
Adding number conversion cast (unumber) $17 in *((byte*)(number) $d018) ← (number) $17
Adding number conversion cast (unumber) 2 in (number~) main::$2 ← (byte~) main::$1 + (number) 2
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (byte~) main::$1 + (unumber)(number) 2
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#2 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_y ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memset::num#0 ← (unumber)(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#1 ← (unumber)(number) 0
Inlining cast *((byte*)(number) $d018) ← (unumber)(number) $17
Inlining cast (byte) gotoxy::x#2 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $17
Simplifying constant pointer cast (byte*) 53272
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in (unumber~) gotoxy::$4 ← (word~) gotoxy::$7 * (byte) $28
Inferred type updated to byte in (unumber~) main::$2 ← (byte~) main::$1 + (byte) 2
Inversing boolean not [33] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [32] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [77] (bool~) gotoxy::$1 ← (byte) gotoxy::y#3 <= (byte) $19 from [76] (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (byte) $19
Inversing boolean not [81] (bool~) gotoxy::$3 ← (byte) gotoxy::x#3 < (byte) $28 from [80] (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (byte) $28
Inversing boolean not [107] (bool~) cputc::$2 ← (byte) conio_cursor_x != (byte) $28 from [106] (bool~) cputc::$1 ← (byte) conio_cursor_x == (byte) $28
Inversing boolean not [118] (bool~) cscroll::$1 ← (byte) conio_cursor_y != (byte) $19 from [117] (bool~) cscroll::$0 ← (byte) conio_cursor_y == (byte) $19
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias gotoxy::x#5 = gotoxy::x#6 
Alias gotoxy::line_offset#0 = gotoxy::$4 
Alias gotoxy::y#5 = gotoxy::y#6 
Alias cputc::c#2 = cputc::c#3 
Alias main::c#2 = main::c#3 
Alias main::wherey1_return#0 = main::wherey1_return#2 main::wherey1_return#1 main::wherey1_return#3 main::$1 
Alias gotoxy::y#2 = main::$2 
Alias toupper::return#3 = toupper::return#5 
Alias main::c1#2 = main::c1#4 main::c1#3 
Alias cputc::c#1 = main::$6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias gotoxy::x#3 = gotoxy::x#5 
Alias gotoxy::y#4 = gotoxy::y#5 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values (byte) toupper::ch#1 (byte) toupper::ch#0
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#3 (void*) memcpy::destination#2
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) clrscr::line_text#2 (byte*) clrscr::line_text#5
Identical Phi Values (byte*) clrscr::line_cols#2 (byte*) clrscr::line_cols#5
Identical Phi Values (byte) clrscr::l#3 (byte) clrscr::l#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [15] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [22] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [29] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) clrscr::$0 [38] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@2
Simple Condition (bool~) clrscr::$1 [46] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@5
Simple Condition (bool~) gotoxy::$1 [56] if((byte) gotoxy::y#3<=(byte) $19) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [59] if((byte) gotoxy::x#3<(byte) $28) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [74] if((byte) cputc::c#2==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$2 [80] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
Simple Condition (bool~) cscroll::$1 [90] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
Simple Condition (bool~) cscroll::$7 [92] if((byte) 0!=(byte) conio_scroll_enable) goto cscroll::@3
Simple Condition (bool~) main::$5 [128] if((byte) main::c#1!=rangelast(0,$ff)) goto main::@1
Simple Condition (bool~) main::$8 [142] if((byte) main::c1#1!=rangelast(0,$ff)) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant right-side identified [95] (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Constant right-side identified [100] (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) clrscr::line_text#0 = CONIO_SCREEN_TEXT
Constant (const byte*) clrscr::line_cols#0 = CONIO_SCREEN_COLORS
Constant (const byte) clrscr::l#0 = 0
Constant (const byte) clrscr::c#0 = 0
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#0 = 0
Constant (const void*) memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant (const void*) memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant (const word) memcpy::num#0 = (unumber)$19*$28-$28
Constant (const void*) memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant (const void*) memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant (const word) memcpy::num#1 = (unumber)$19*$28-$28
Constant (const void*) memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $28
Constant (const void*) memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant (const word) memset::num#1 = $28
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) gotoxy::y#1 = 0
Constant (const byte) main::c#0 = 0
Constant (const byte) gotoxy::x#2 = 0
Constant (const byte) main::c1#0 = 0
Constant (const byte) conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant (const byte) conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) memset::c#1 = conio_textcolor
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [92] if((byte) 0!=(const byte) conio_scroll_enable) goto cscroll::@3
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [126] main::c#1 ← ++ main::c#2 to ++
Resolved ranged comparison value [128] if(main::c#1!=rangelast(0,$ff)) goto main::@1 to (number) 0
Resolved ranged next value [140] main::c1#1 ← ++ main::c1#2 to ++
Resolved ranged comparison value [142] if(main::c1#1!=rangelast(0,$ff)) goto main::@2 to (number) 0
Rewriting conditional comparison [56] if((byte) gotoxy::y#3<=(byte) $19) goto gotoxy::@1
Eliminating unused variable (void*) memcpy::return#2 and assignment [73] (void*) memcpy::return#2 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memcpy::return#3 and assignment [75] (void*) memcpy::return#3 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memset::return#2 and assignment [77] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [79] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused constant (const byte) conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $19+1 in if((byte) gotoxy::y#3<(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if((byte) gotoxy::y#3<(unumber)(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 0 in if((byte) main::c#1!=(number) 0) goto main::@1
Adding number conversion cast (unumber) 0 in if((byte) main::c1#1!=(number) 0) goto main::@2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (byte) $19+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values (byte) gotoxy::y#3 (byte) gotoxy::y#2
Identical Phi Values (byte) gotoxy::x#3 (const byte) gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) toupper::$0 [2] if((byte) toupper::ch#0>=(byte) 'a') goto toupper::@3
Simple Condition (bool~) toupper::$1 [105] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [2] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@2
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
if() condition always true - replacing block destination [45] if((const byte) gotoxy::x#2<(byte) $28) goto gotoxy::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) gotoxy::x#1
Eliminating unused constant (const byte) gotoxy::y#1
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (gotoxy::@4) in block gotoxy::@2
Removing unused block gotoxy::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values (byte) gotoxy::x#4 (const byte) gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Eliminating unused constant (const byte) gotoxy::x#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Inlining Noop Cast [5] (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [6] (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [7] (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [17] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [19] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift and addition[45] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$7 * (byte) $28
Inlining constant with var siblings (const void*) memcpy::destination#0
Inlining constant with var siblings (const void*) memcpy::source#0
Inlining constant with var siblings (const word) memcpy::num#0
Inlining constant with var siblings (const void*) memcpy::destination#1
Inlining constant with var siblings (const void*) memcpy::source#1
Inlining constant with var siblings (const word) memcpy::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const byte*) clrscr::line_text#0
Inlining constant with var siblings (const byte*) clrscr::line_cols#0
Inlining constant with var siblings (const byte) clrscr::l#0
Inlining constant with var siblings (const byte) clrscr::c#0
Inlining constant with var siblings (const byte) gotoxy::y#0
Inlining constant with var siblings (const byte) main::c#0
Inlining constant with var siblings (const byte) main::c1#0
Constant inlined main::c1#0 = (byte) 0
Constant inlined memset::str#1 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28
Constant inlined memset::str#0 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28
Constant inlined CONIO_SCREEN_COLORS = (const nomodify byte*) COLORRAM
Constant inlined clrscr::line_text#0 = (const nomodify byte*) DEFAULT_SCREEN
Constant inlined conio_textcolor = (const nomodify byte) LIGHT_BLUE
Constant inlined memcpy::destination#0 = (void*)(const nomodify byte*) DEFAULT_SCREEN
Constant inlined memset::num#1 = (byte) $28
Constant inlined memcpy::destination#1 = (void*)(const nomodify byte*) COLORRAM
Constant inlined memset::num#0 = (byte) $28
Constant inlined memcpy::source#0 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28
Constant inlined clrscr::l#0 = (byte) 0
Constant inlined memcpy::num#1 = (word)(number) $19*(number) $28-(number) $28
Constant inlined memcpy::num#0 = (word)(number) $19*(number) $28-(number) $28
Constant inlined main::c#0 = (byte) 0
Constant inlined memcpy::source#1 = (void*)(const nomodify byte*) COLORRAM+(byte) $28
Constant inlined gotoxy::y#0 = (byte) 0
Constant inlined CONIO_SCREEN_TEXT = (const nomodify byte*) DEFAULT_SCREEN
Constant inlined memset::c#0 = (byte) ' '
Constant inlined memset::c#1 = (const nomodify byte) LIGHT_BLUE
Constant inlined clrscr::c#0 = (byte) 0
Constant inlined clrscr::line_cols#0 = (const nomodify byte*) COLORRAM
Constant inlined CONIO_TEXTCOLOR_DEFAULT = (const nomodify byte) LIGHT_BLUE
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias gotoxy::line_offset#0 = gotoxy::$10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values (word) memcpy::num#2 (word)(number) $19*(number) $28-(number) $28
Identical Phi Values (word) memset::num#2 (byte) $28
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always false - eliminating [13] if((byte) $28<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Added new block during phi lifting gotoxy::@5(between gotoxy and gotoxy::@1)
Added new block during phi lifting main::@9(between main::@5 and main::@1)
Added new block during phi lifting main::@10(between main::@8 and main::@2)
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of _start::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::wherey1_@return
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@2
CALL GRAPH
Calls in [_start] to main:6 
Calls in [main] to clrscr:10 cputc:15 gotoxy:21 toupper:25 cputc:29 
Calls in [cputc] to cputln:42 cputln:46 
Calls in [cputln] to cscroll:52 
Calls in [cscroll] to memcpy:58 memcpy:60 memset:62 memset:64 

Created 16 initial phi equivalence classes
Coalesced [14] cputc::c#4 ← cputc::c#0
Coalesced [28] cputc::c#5 ← cputc::c#1
Coalesced [33] main::c1#5 ← main::c1#1
Coalesced [34] main::c#4 ← main::c#1
Coalesced [78] memset::dst#5 ← memset::dst#1
Coalesced [90] memcpy::src#5 ← memcpy::src#1
Coalesced [91] memcpy::dst#5 ← memcpy::dst#1
Coalesced [94] toupper::return#7 ← toupper::ch#0
Coalesced [98] toupper::return#6 ← toupper::return#0
Coalesced [113] gotoxy::y#7 ← gotoxy::y#2
Coalesced [128] clrscr::l#7 ← clrscr::l#1
Coalesced [129] clrscr::line_text#7 ← clrscr::line_text#1
Coalesced [130] clrscr::line_cols#7 ← clrscr::line_cols#1
Coalesced [134] clrscr::c#4 ← clrscr::c#1
Coalesced down to 16 phi equivalence classes
Culled Empty Block (label) _start::@2
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::wherey1_@return
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@9
Culled Empty Block (label) cputc::@5
Culled Empty Block (label) cputc::@4
Culled Empty Block (label) cputln::@1
Culled Empty Block (label) cscroll::@1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) toupper::@2
Culled Empty Block (label) gotoxy::@3
Culled Empty Block (label) clrscr::@2
Renumbering block toupper::@3 to toupper::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block clrscr::@3 to clrscr::@2
Renumbering block clrscr::@4 to clrscr::@3
Renumbering block clrscr::@5 to clrscr::@4
Renumbering block clrscr::@6 to clrscr::@5
Renumbering block gotoxy::@5 to gotoxy::@3
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block main::@5 to main::@4
Renumbering block main::@7 to main::@5
Renumbering block main::@8 to main::@6
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of clrscr

FINAL CONTROL FLOW GRAPH

(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [5] phi()
  [6] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [7] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [8] *((byte*) 53272) ← (byte) $17
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [10] (byte) main::c#2 ← phi( main/(byte) 0 main::@4/(byte) main::c#1 )
  [11] (byte) cputc::c#0 ← (byte) main::c#2
  [12] call cputc 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [13] (byte) main::c#1 ← ++ (byte) main::c#2
  [14] if((byte) main::c#1!=(byte) 0) goto main::@1
  to:main::wherey1
main::wherey1: scope:[main]  from main::@4
  [15] (byte) main::wherey1_return#0 ← (byte) conio_cursor_y
  to:main::@3
main::@3: scope:[main]  from main::wherey1
  [16] (byte) gotoxy::y#2 ← (byte) main::wherey1_return#0 + (byte) 2
  [17] call gotoxy 
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  [18] (byte) main::c1#2 ← phi( main::@3/(byte) 0 main::@6/(byte) main::c1#1 )
  [19] (byte) toupper::ch#0 ← (byte) main::c1#2
  [20] call toupper 
  [21] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:main::@5
main::@5: scope:[main]  from main::@2
  [22] (byte) cputc::c#1 ← (byte) toupper::return#3
  [23] call cputc 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [24] (byte) main::c1#1 ← ++ (byte) main::c1#2
  [25] if((byte) main::c1#1!=(byte) 0) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@6
  [26] return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from main::@1 main::@5
  [27] (byte) cputc::c#2 ← phi( main::@1/(byte) cputc::c#0 main::@5/(byte) cputc::c#1 )
  [28] if((byte) cputc::c#2==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [29] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#2
  [30] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE
  [31] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [32] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [33] phi()
  [34] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [35] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [36] phi()
  [37] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [38] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28
  [39] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28
  [40] (byte) conio_cursor_x ← (byte) 0
  [41] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [42] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [43] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [44] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [45] phi()
  [46] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [47] phi()
  [48] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [49] phi()
  [50] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [51] phi()
  [52] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [53] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28
  [54] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28
  [55] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [56] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [57] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) LIGHT_BLUE )
  [57] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [58] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [59] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [60] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [61] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [62] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [63] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [64] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [65] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN cscroll::@2/(void*)(const nomodify byte*) COLORRAM )
  [65] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) COLORRAM+(byte) $28 )
  [66] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [67] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [68] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [69] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [69] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [70] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [71] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [72] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [73] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [74] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from main::@2
  [75] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [76] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [77] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [78] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [79] return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@3
  [80] if((byte) gotoxy::y#2<(byte) $19+(byte) 1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [81] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [82] (byte) gotoxy::y#4 ← phi( gotoxy::@3/(byte) gotoxy::y#2 gotoxy/(byte) 0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [83] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [84] (byte) conio_cursor_y ← (byte) gotoxy::y#4
  [85] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#4
  [86] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2
  [87] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7
  [88] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3
  [89] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0
  [90] (byte*) conio_line_text ← (byte*~) gotoxy::$5
  [91] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0
  [92] (byte*) conio_line_color ← (byte*~) gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [93] return 
  to:@return

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [94] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [95] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) COLORRAM clrscr::@5/(byte*) clrscr::line_cols#1 )
  [95] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) DEFAULT_SCREEN clrscr::@5/(byte*) clrscr::line_text#1 )
  [95] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [96] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [97] (byte) conio_cursor_x ← (byte) 0
  [98] (byte) conio_cursor_y ← (byte) 0
  [99] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [100] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [101] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [102] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [103] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [104] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [105] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [106] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [107] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [108] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE
  [109] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) _start()
(void()) clrscr()
(byte) clrscr::c
(byte) clrscr::c#1 20002.0
(byte) clrscr::c#2 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 2002.0
(byte) clrscr::l#2 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 1001.0
(byte*) clrscr::line_cols#5 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 667.3333333333334
(byte*) clrscr::line_text#5 1714.7142857142858
(byte) conio_cursor_x loadstore 345.6818181818182
(byte) conio_cursor_y loadstore 5427.457627118643
(byte*) conio_line_color loadstore 4514.469387755102
(byte*) conio_line_text loadstore 4254.0192307692305
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 202.0
(byte) cputc::c#1 202.0
(byte) cputc::c#2 1102.0
(void()) cputln()
(void()) cscroll()
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(byte*~) gotoxy::$5 202.0
(byte*~) gotoxy::$6 202.0
(word~) gotoxy::$7 151.5
(word~) gotoxy::$8 202.0
(word~) gotoxy::$9 202.0
(word) gotoxy::line_offset
(word) gotoxy::line_offset#0 101.0
(byte) gotoxy::x
(byte) gotoxy::y
(byte) gotoxy::y#2 71.0
(byte) gotoxy::y#4 67.33333333333333
(void()) main()
(byte) main::c
(byte) main::c#1 151.5
(byte) main::c#2 101.0
(byte) main::c1
(byte) main::c1#1 151.5
(byte) main::c1#2 50.5
(byte) main::wherey1_return
(byte) main::wherey1_return#0 22.0
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(void*) memcpy::destination#2
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.00000001E8
(byte*) memcpy::dst#2 1.0033333466666667E8
(byte*) memcpy::dst#4 2000002.0
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#1 2.00000002E8
(byte*) memcpy::src#2 1.0025000125E8
(byte*) memcpy::src#4 1000001.0
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 1.262500025E7
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1.428571442857143E7
(byte*) memset::dst
(byte*) memset::dst#1 2.00000002E8
(byte*) memset::dst#2 1.3366666833333334E8
(byte*) memset::dst#4 2000002.0
(byte*) memset::end
(byte*) memset::end#0 1.6833333666666668E7
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(byte()) toupper((byte) toupper::ch)
(byte) toupper::ch
(byte) toupper::ch#0 1702.0000000000002
(byte) toupper::return
(byte) toupper::return#0 2002.0
(byte) toupper::return#2 1034.6666666666667
(byte) toupper::return#3 202.0

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
[ main::c1#2 main::c1#1 ]
[ cputc::c#2 cputc::c#0 cputc::c#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ gotoxy::y#4 gotoxy::y#2 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_line_text to live range equivalence class [ conio_line_text ]
Added variable conio_line_color to live range equivalence class [ conio_line_color ]
Added variable main::wherey1_return#0 to live range equivalence class [ main::wherey1_return#0 ]
Added variable toupper::return#3 to live range equivalence class [ toupper::return#3 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable gotoxy::$7 to live range equivalence class [ gotoxy::$7 ]
Added variable gotoxy::$8 to live range equivalence class [ gotoxy::$8 ]
Added variable gotoxy::$9 to live range equivalence class [ gotoxy::$9 ]
Added variable gotoxy::line_offset#0 to live range equivalence class [ gotoxy::line_offset#0 ]
Added variable gotoxy::$5 to live range equivalence class [ gotoxy::$5 ]
Added variable gotoxy::$6 to live range equivalence class [ gotoxy::$6 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ main::c1#2 main::c1#1 ]
[ cputc::c#2 cputc::c#0 cputc::c#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ gotoxy::y#4 gotoxy::y#2 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_line_text ]
[ conio_line_color ]
[ main::wherey1_return#0 ]
[ toupper::return#3 ]
[ memset::end#0 ]
[ memcpy::src_end#0 ]
[ gotoxy::$7 ]
[ gotoxy::$8 ]
[ gotoxy::$9 ]
[ gotoxy::line_offset#0 ]
[ gotoxy::$5 ]
[ gotoxy::$6 ]
Allocated zp[1]:2 [ main::c#2 main::c#1 ]
Allocated zp[1]:3 [ main::c1#2 main::c1#1 ]
Allocated zp[1]:4 [ cputc::c#2 cputc::c#0 cputc::c#1 ]
Allocated zp[2]:5 [ memset::str#3 ]
Allocated zp[1]:7 [ memset::c#4 ]
Allocated zp[2]:8 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:10 [ memcpy::source#2 ]
Allocated zp[2]:12 [ memcpy::destination#2 ]
Allocated zp[2]:14 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:16 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[1]:18 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Allocated zp[1]:19 [ gotoxy::y#4 gotoxy::y#2 ]
Allocated zp[1]:20 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[2]:21 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[2]:23 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[1]:25 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[1]:26 [ conio_cursor_x ]
Allocated zp[1]:27 [ conio_cursor_y ]
Allocated zp[2]:28 [ conio_line_text ]
Allocated zp[2]:30 [ conio_line_color ]
Allocated zp[1]:32 [ main::wherey1_return#0 ]
Allocated zp[1]:33 [ toupper::return#3 ]
Allocated zp[2]:34 [ memset::end#0 ]
Allocated zp[2]:36 [ memcpy::src_end#0 ]
Allocated zp[2]:38 [ gotoxy::$7 ]
Allocated zp[2]:40 [ gotoxy::$8 ]
Allocated zp[2]:42 [ gotoxy::$9 ]
Allocated zp[2]:44 [ gotoxy::line_offset#0 ]
Allocated zp[2]:46 [ gotoxy::$5 ]
Allocated zp[2]:48 [ gotoxy::$6 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test toupper()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = $1a
  // The current cursor y-position
  .label conio_cursor_y = $1b
  // The current text cursor line start
  .label conio_line_text = $1c
  // The current color cursor line start
  .label conio_line_color = $1e
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [6] call main 
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [7] return 
    rts
}
  // main
main: {
    .label c = 2
    .label wherey1_return = $20
    .label c1 = 3
    // [8] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [9] call clrscr 
  // Clear screen
    // [94] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [10] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
  // Output un-modified chars
    // [10] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [10] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [11] (byte) cputc::c#0 ← (byte) main::c#2 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [12] call cputc 
    // [27] phi from main::@1 to cputc [phi:main::@1->cputc]
  cputc_from___b1:
    // [27] phi (byte) cputc::c#2 = (byte) cputc::c#0 [phi:main::@1->cputc#0] -- register_copy 
    jsr cputc
    jmp __b4
    // main::@4
  __b4:
    // [13] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [14] if((byte) main::c#1!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1_from___b4
    jmp wherey1
    // main::wherey1
  wherey1:
    // [15] (byte) main::wherey1_return#0 ← (byte) conio_cursor_y -- vbuz1=vbuz2 
    lda.z conio_cursor_y
    sta.z wherey1_return
    jmp __b3
    // main::@3
  __b3:
    // [16] (byte) gotoxy::y#2 ← (byte) main::wherey1_return#0 + (byte) 2 -- vbuz1=vbuz2_plus_2 
    lda.z wherey1_return
    clc
    adc #2
    sta.z gotoxy.y
    // [17] call gotoxy 
    jsr gotoxy
    // [18] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [18] phi (byte) main::c1#2 = (byte) 0 [phi:main::@3->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c1
    jmp __b2
  // Output toupper-chars chars
    // [18] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [18] phi (byte) main::c1#2 = (byte) main::c1#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [19] (byte) toupper::ch#0 ← (byte) main::c1#2 -- vbuz1=vbuz2 
    lda.z c1
    sta.z toupper.ch
    // [20] call toupper 
    jsr toupper
    // [21] (byte) toupper::return#3 ← (byte) toupper::return#2 -- vbuz1=vbuz2 
    lda.z toupper.return
    sta.z toupper.return_1
    jmp __b5
    // main::@5
  __b5:
    // [22] (byte) cputc::c#1 ← (byte) toupper::return#3 -- vbuz1=vbuz2 
    lda.z toupper.return_1
    sta.z cputc.c
    // [23] call cputc 
    // [27] phi from main::@5 to cputc [phi:main::@5->cputc]
  cputc_from___b5:
    // [27] phi (byte) cputc::c#2 = (byte) cputc::c#1 [phi:main::@5->cputc#0] -- register_copy 
    jsr cputc
    jmp __b6
    // main::@6
  __b6:
    // [24] (byte) main::c1#1 ← ++ (byte) main::c1#2 -- vbuz1=_inc_vbuz1 
    inc.z c1
    // [25] if((byte) main::c1#1!=(byte) 0) goto main::@2 -- vbuz1_neq_0_then_la1 
    lda.z c1
    cmp #0
    bne __b2_from___b6
    jmp __breturn
    // main::@return
  __breturn:
    // [26] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp(4) c)
cputc: {
    .label c = 4
    // [28] if((byte) cputc::c#2==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [29] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#2 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z c
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [30] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [31] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [32] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [33] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [34] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [35] return 
    rts
    // [36] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [37] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    // [38] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [39] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [40] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [41] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [42] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [43] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [44] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [45] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [46] call memcpy 
    // [65] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [65] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [65] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [47] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [48] call memcpy 
    // [65] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [65] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [65] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) COLORRAM+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [49] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [50] call memset 
    // [57] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [57] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [57] phi (void*) memset::str#3 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [51] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [52] call memset 
    // [57] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [57] phi (byte) memset::c#4 = (const nomodify byte) LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuz1=vbuc1 
    lda #LIGHT_BLUE
    sta.z memset.c
    // [57] phi (void*) memset::str#3 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [53] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [54] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [55] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [56] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(5) str, byte zp(7) c)
memset: {
    .label end = $22
    .label dst = 8
    .label str = 5
    .label c = 7
    jmp __b1
    // memset::@1
  __b1:
    // [58] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [59] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [60] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [60] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [61] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [62] return 
    rts
    // memset::@3
  __b3:
    // [63] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [64] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($c) destination, void* zp($a) source)
memcpy: {
    .label src_end = $24
    .label dst = $10
    .label src = $e
    .label source = $a
    .label destination = $c
    // [66] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [67] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 -- pbuz1=pbuz2 
    lda.z source
    sta.z src
    lda.z source+1
    sta.z src+1
    // [68] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 -- pbuz1=pbuz2 
    lda.z destination
    sta.z dst
    lda.z destination+1
    sta.z dst+1
    // [69] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [69] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [69] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [70] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [71] return 
    rts
    // memcpy::@2
  __b2:
    // [72] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [73] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [74] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp($12) ch)
toupper: {
    .label return = $12
    .label ch = $12
    .label return_1 = $21
    // [75] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [76] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [78] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [78] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [77] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [79] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte zp($13) y)
gotoxy: {
    .const x = 0
    .label __5 = $2e
    .label __6 = $30
    .label __7 = $26
    .label line_offset = $2c
    .label y = $13
    .label __8 = $28
    .label __9 = $2a
    // [80] if((byte) gotoxy::y#2<(byte) $19+(byte) 1) goto gotoxy::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$19+1
    bcc __b3_from_gotoxy
    // [82] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    // [82] phi (byte) gotoxy::y#4 = (byte) 0 [phi:gotoxy->gotoxy::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b1
    // [81] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
  __b3_from_gotoxy:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [82] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
  __b1_from___b3:
    // [82] phi (byte) gotoxy::y#4 = (byte) gotoxy::y#2 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    jmp __b1
    // gotoxy::@1
  __b1:
    jmp __b2
    // gotoxy::@2
  __b2:
    // [83] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [84] (byte) conio_cursor_y ← (byte) gotoxy::y#4 -- vbuz1=vbuz2 
    lda.z y
    sta.z conio_cursor_y
    // [85] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#4 -- vwuz1=_word_vbuz2 
    lda.z y
    sta.z __7
    lda #0
    sta.z __7+1
    // [86] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [87] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz3 
    lda.z __8
    clc
    adc.z __7
    sta.z __9
    lda.z __8+1
    adc.z __7+1
    sta.z __9+1
    // [88] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z __9
    asl
    sta.z line_offset
    lda.z __9+1
    rol
    sta.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // [89] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // [90] (byte*) conio_line_text ← (byte*~) gotoxy::$5 -- pbuz1=pbuz2 
    lda.z __5
    sta.z conio_line_text
    lda.z __5+1
    sta.z conio_line_text+1
    // [91] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<COLORRAM
    sta.z __6
    lda.z line_offset+1
    adc #>COLORRAM
    sta.z __6+1
    // [92] (byte*) conio_line_color ← (byte*~) gotoxy::$6 -- pbuz1=pbuz2 
    lda.z __6
    sta.z conio_line_color
    lda.z __6+1
    sta.z conio_line_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [93] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label c = $19
    .label line_text = $15
    .label line_cols = $17
    .label l = $14
    // [95] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [95] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [95] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [95] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // clrscr::@1
  __b1:
    // [96] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [97] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [98] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [99] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [100] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [101] return 
    rts
    // [102] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [102] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b3
    // clrscr::@3
  __b3:
    // [103] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [104] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [105] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [106] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [95] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [95] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [95] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [95] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [107] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z c
    sta (line_text),y
    // [108] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z c
    sta (line_cols),y
    // [109] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [102] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [102] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*) 53272) ← (byte) $17 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [29] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::c#2 main::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::c1#2 main::c1#1 ]
Statement [30] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::c#2 main::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::c1#2 main::c1#1 ]
Statement [32] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [38] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [39] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [40] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [44] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [53] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [54] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [58] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputc:12::cputln:34::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ memset::c#4 ]
Statement [59] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputc:12::cputln:34::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [61] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputc:12::cputln:34::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [63] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputc:12::cputln:34::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:7 [ memset::c#4 ]
Statement [66] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputc:12::cputln:34::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [67] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputc:12::cputln:34::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [68] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputc:12::cputln:34::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [70] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputc:12::cputln:34::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [72] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputc:12::cputln:34::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [77] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:6::toupper:20 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::c1#2 toupper::return#0 ] { { toupper::ch#0 = main::c1#2 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [83] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 [ conio_cursor_x gotoxy::y#4 ] ( main:6::gotoxy:17 [ conio_cursor_x gotoxy::y#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ gotoxy::y#4 gotoxy::y#2 ]
Statement [85] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#4 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  ) always clobbers reg byte a 
Statement [86] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  ) always clobbers reg byte a 
Statement [87] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  ) always clobbers reg byte a 
Statement [88] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [89] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  ) always clobbers reg byte a 
Statement [90] (byte*) conio_line_text ← (byte*~) gotoxy::$5 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [91] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  ) always clobbers reg byte a 
Statement [92] (byte*) conio_line_color ← (byte*~) gotoxy::$6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [97] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( main:6::clrscr:9 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [98] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [99] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [100] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [104] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ clrscr::l#2 clrscr::l#1 ]
Statement [105] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [107] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ clrscr::c#2 clrscr::c#1 ]
Statement [108] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*) 53272) ← (byte) $17 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [29] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte y 
Statement [30] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [32] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [38] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [39] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [40] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [44] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [53] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [54] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:34::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [58] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputc:12::cputln:34::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [59] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputc:12::cputln:34::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [61] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputc:12::cputln:34::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [63] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputc:12::cputln:34::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memset:52 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memset:52 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [66] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputc:12::cputln:34::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [67] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputc:12::cputln:34::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [68] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputc:12::cputln:34::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [70] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputc:12::cputln:34::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [72] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputc:12::cputln:34::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:46 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:46 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:34::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:34::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:37::cscroll:42::memcpy:48 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:37::cscroll:42::memcpy:48 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [77] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:6::toupper:20 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::c1#2 toupper::return#0 ] { { toupper::ch#0 = main::c1#2 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [83] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 [ conio_cursor_x gotoxy::y#4 ] ( main:6::gotoxy:17 [ conio_cursor_x gotoxy::y#4 ] { }  ) always clobbers reg byte a 
Statement [85] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#4 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  ) always clobbers reg byte a 
Statement [86] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  ) always clobbers reg byte a 
Statement [87] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  ) always clobbers reg byte a 
Statement [88] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [89] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  ) always clobbers reg byte a 
Statement [90] (byte*) conio_line_text ← (byte*~) gotoxy::$5 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [91] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  ) always clobbers reg byte a 
Statement [92] (byte*) conio_line_color ← (byte*~) gotoxy::$6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [97] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( main:6::clrscr:9 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [98] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [99] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [100] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [104] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [105] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [107] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [108] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::c#2 main::c#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::c1#2 main::c1#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ cputc::c#2 cputc::c#0 cputc::c#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ memset::str#3 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ memset::c#4 ] : zp[1]:7 , reg byte x , 
Potential registers zp[2]:8 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ memcpy::source#2 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ memcpy::destination#2 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ gotoxy::y#4 gotoxy::y#2 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ conio_cursor_x ] : zp[1]:26 , 
Potential registers zp[1]:27 [ conio_cursor_y ] : zp[1]:27 , 
Potential registers zp[2]:28 [ conio_line_text ] : zp[2]:28 , 
Potential registers zp[2]:30 [ conio_line_color ] : zp[2]:30 , 
Potential registers zp[1]:32 [ main::wherey1_return#0 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ toupper::return#3 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:34 [ memset::end#0 ] : zp[2]:34 , 
Potential registers zp[2]:36 [ memcpy::src_end#0 ] : zp[2]:36 , 
Potential registers zp[2]:38 [ gotoxy::$7 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ gotoxy::$8 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ gotoxy::$9 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ gotoxy::line_offset#0 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ gotoxy::$5 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ gotoxy::$6 ] : zp[2]:48 , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 301,250,004.25: zp[2]:14 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 202,333,337.67: zp[2]:16 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 12,625,000.25: zp[2]:36 [ memcpy::src_end#0 ] 0: zp[2]:10 [ memcpy::source#2 ] 0: zp[2]:12 [ memcpy::destination#2 ] 
Uplift Scope [memset] 335,666,672.33: zp[2]:8 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 16,833,333.67: zp[2]:34 [ memset::end#0 ] 14,285,714.43: zp[1]:7 [ memset::c#4 ] 0: zp[2]:5 [ memset::str#3 ] 
Uplift Scope [clrscr] 32,503.25: zp[1]:25 [ clrscr::c#2 clrscr::c#1 ] 2,501.38: zp[2]:23 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 2,382.05: zp[2]:21 [ clrscr::line_text#5 clrscr::line_text#1 ] 2,335.67: zp[1]:20 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [] 5,427.46: zp[1]:27 [ conio_cursor_y ] 4,514.47: zp[2]:30 [ conio_line_color ] 4,254.02: zp[2]:28 [ conio_line_text ] 345.68: zp[1]:26 [ conio_cursor_x ] 
Uplift Scope [toupper] 4,738.67: zp[1]:18 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] 202: zp[1]:33 [ toupper::return#3 ] 
Uplift Scope [cputc] 1,506: zp[1]:4 [ cputc::c#2 cputc::c#0 cputc::c#1 ] 
Uplift Scope [gotoxy] 202: zp[2]:40 [ gotoxy::$8 ] 202: zp[2]:42 [ gotoxy::$9 ] 202: zp[2]:46 [ gotoxy::$5 ] 202: zp[2]:48 [ gotoxy::$6 ] 151.5: zp[2]:38 [ gotoxy::$7 ] 138.33: zp[1]:19 [ gotoxy::y#4 gotoxy::y#2 ] 101: zp[2]:44 [ gotoxy::line_offset#0 ] 
Uplift Scope [main] 252.5: zp[1]:2 [ main::c#2 main::c#1 ] 202: zp[1]:3 [ main::c1#2 main::c1#1 ] 22: zp[1]:32 [ main::wherey1_return#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [cputln] 
Uplift Scope [cscroll] 
Uplift Scope [_start] 

Uplifting [memcpy] best 18978 combination zp[2]:14 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:16 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:36 [ memcpy::src_end#0 ] zp[2]:10 [ memcpy::source#2 ] zp[2]:12 [ memcpy::destination#2 ] 
Uplifting [memset] best 18872 combination zp[2]:8 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:34 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:5 [ memset::str#3 ] 
Uplifting [clrscr] best 17282 combination reg byte y [ clrscr::c#2 clrscr::c#1 ] zp[2]:23 [ clrscr::line_cols#5 clrscr::line_cols#1 ] zp[2]:21 [ clrscr::line_text#5 clrscr::line_text#1 ] reg byte x [ clrscr::l#2 clrscr::l#1 ] 
Uplifting [] best 17282 combination zp[1]:27 [ conio_cursor_y ] zp[2]:30 [ conio_line_color ] zp[2]:28 [ conio_line_text ] zp[1]:26 [ conio_cursor_x ] 
Uplifting [toupper] best 17155 combination reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ] reg byte a [ toupper::return#3 ] 
Uplifting [cputc] best 17089 combination reg byte a [ cputc::c#2 cputc::c#0 cputc::c#1 ] 
Uplifting [gotoxy] best 17076 combination zp[2]:40 [ gotoxy::$8 ] zp[2]:42 [ gotoxy::$9 ] zp[2]:46 [ gotoxy::$5 ] zp[2]:48 [ gotoxy::$6 ] zp[2]:38 [ gotoxy::$7 ] reg byte x [ gotoxy::y#4 gotoxy::y#2 ] zp[2]:44 [ gotoxy::line_offset#0 ] 
Uplifting [main] best 17070 combination zp[1]:2 [ main::c#2 main::c#1 ] zp[1]:3 [ main::c1#2 main::c1#1 ] reg byte x [ main::wherey1_return#0 ] 
Uplifting [MOS6526_CIA] best 17070 combination 
Uplifting [MOS6569_VICII] best 17070 combination 
Uplifting [MOS6581_SID] best 17070 combination 
Uplifting [cputln] best 17070 combination 
Uplifting [cscroll] best 17070 combination 
Uplifting [_start] best 17070 combination 
Attempting to uplift remaining variables inzp[1]:27 [ conio_cursor_y ]
Uplifting [] best 17070 combination zp[1]:27 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:26 [ conio_cursor_x ]
Uplifting [] best 17070 combination zp[1]:26 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::c#2 main::c#1 ]
Uplifting [main] best 17070 combination zp[1]:2 [ main::c#2 main::c#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::c1#2 main::c1#1 ]
Uplifting [main] best 17070 combination zp[1]:3 [ main::c1#2 main::c1#1 ] 
Coalescing zero page register [ zp[2]:5 [ memset::str#3 ] ] with [ zp[2]:8 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ memcpy::source#2 ] ] with [ zp[2]:14 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ memcpy::destination#2 ] ] with [ zp[2]:16 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ conio_line_text ] ] with [ zp[2]:46 [ gotoxy::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ conio_line_color ] ] with [ zp[2]:48 [ gotoxy::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:38 [ gotoxy::$7 ] ] with [ zp[2]:42 [ gotoxy::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ conio_line_color gotoxy::$6 ] ] with [ zp[2]:44 [ gotoxy::line_offset#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 ] ] with [ zp[2]:38 [ gotoxy::$7 gotoxy::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:5 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:21 [ clrscr::line_text#5 clrscr::line_text#1 ] ] with [ zp[2]:12 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[2]:28 [ conio_line_text gotoxy::$5 ] ] with [ zp[2]:23 [ clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[2]:36 [ memcpy::src_end#0 ] ] with [ zp[2]:34 [ memset::end#0 ] ]
Coalescing zero page register [ zp[2]:40 [ gotoxy::$8 ] ] with [ zp[2]:10 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Allocated (was zp[2]:21) zp[2]:4 [ clrscr::line_text#5 clrscr::line_text#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated (was zp[1]:26) zp[1]:6 [ conio_cursor_x ]
Allocated (was zp[1]:27) zp[1]:7 [ conio_cursor_y ]
Allocated (was zp[2]:28) zp[2]:8 [ conio_line_text gotoxy::$5 clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated (was zp[2]:30) zp[2]:10 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 gotoxy::$7 gotoxy::$9 ]
Allocated (was zp[2]:36) zp[2]:12 [ memcpy::src_end#0 memset::end#0 ]
Allocated (was zp[2]:40) zp[2]:14 [ gotoxy::$8 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test toupper()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = 6
  // The current cursor y-position
  .label conio_cursor_y = 7
  // The current text cursor line start
  .label conio_line_text = 8
  // The current color cursor line start
  .label conio_line_color = $a
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [6] call main 
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [7] return 
    rts
}
  // main
main: {
    .label c = 2
    .label c1 = 3
    // [8] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [9] call clrscr 
  // Clear screen
    // [94] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [10] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
  // Output un-modified chars
    // [10] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [10] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [11] (byte) cputc::c#0 ← (byte) main::c#2 -- vbuaa=vbuz1 
    lda.z c
    // [12] call cputc 
    // [27] phi from main::@1 to cputc [phi:main::@1->cputc]
  cputc_from___b1:
    // [27] phi (byte) cputc::c#2 = (byte) cputc::c#0 [phi:main::@1->cputc#0] -- register_copy 
    jsr cputc
    jmp __b4
    // main::@4
  __b4:
    // [13] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [14] if((byte) main::c#1!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1_from___b4
    jmp wherey1
    // main::wherey1
  wherey1:
    // [15] (byte) main::wherey1_return#0 ← (byte) conio_cursor_y -- vbuxx=vbuz1 
    ldx.z conio_cursor_y
    jmp __b3
    // main::@3
  __b3:
    // [16] (byte) gotoxy::y#2 ← (byte) main::wherey1_return#0 + (byte) 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [17] call gotoxy 
    jsr gotoxy
    // [18] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [18] phi (byte) main::c1#2 = (byte) 0 [phi:main::@3->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c1
    jmp __b2
  // Output toupper-chars chars
    // [18] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [18] phi (byte) main::c1#2 = (byte) main::c1#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [19] (byte) toupper::ch#0 ← (byte) main::c1#2 -- vbuaa=vbuz1 
    lda.z c1
    // [20] call toupper 
    jsr toupper
    // [21] (byte) toupper::return#3 ← (byte) toupper::return#2
    jmp __b5
    // main::@5
  __b5:
    // [22] (byte) cputc::c#1 ← (byte) toupper::return#3
    // [23] call cputc 
    // [27] phi from main::@5 to cputc [phi:main::@5->cputc]
  cputc_from___b5:
    // [27] phi (byte) cputc::c#2 = (byte) cputc::c#1 [phi:main::@5->cputc#0] -- register_copy 
    jsr cputc
    jmp __b6
    // main::@6
  __b6:
    // [24] (byte) main::c1#1 ← ++ (byte) main::c1#2 -- vbuz1=_inc_vbuz1 
    inc.z c1
    // [25] if((byte) main::c1#1!=(byte) 0) goto main::@2 -- vbuz1_neq_0_then_la1 
    lda.z c1
    cmp #0
    bne __b2_from___b6
    jmp __breturn
    // main::@return
  __breturn:
    // [26] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [28] if((byte) cputc::c#2==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [29] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#2 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [30] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [31] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [32] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [33] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [34] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [35] return 
    rts
    // [36] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [37] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    // [38] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [39] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [40] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [41] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [42] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [43] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [44] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [45] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [46] call memcpy 
    // [65] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [65] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [65] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [47] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [48] call memcpy 
    // [65] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [65] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [65] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) COLORRAM+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [49] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [50] call memset 
    // [57] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [57] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [57] phi (void*) memset::str#3 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [51] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [52] call memset 
    // [57] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [57] phi (byte) memset::c#4 = (const nomodify byte) LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [57] phi (void*) memset::str#3 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [53] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [54] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [55] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [56] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($e) str, byte register(X) c)
memset: {
    .label end = $c
    .label dst = $e
    .label str = $e
    jmp __b1
    // memset::@1
  __b1:
    // [58] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [59] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [60] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [60] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [61] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [62] return 
    rts
    // memset::@3
  __b3:
    // [63] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [64] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(4) destination, void* zp($e) source)
memcpy: {
    .label src_end = $c
    .label dst = 4
    .label src = $e
    .label source = $e
    .label destination = 4
    // [66] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [67] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [68] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [69] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [69] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [69] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [70] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [71] return 
    rts
    // memcpy::@2
  __b2:
    // [72] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [73] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [74] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // [75] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [76] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [78] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [78] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [77] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [79] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) y)
gotoxy: {
    .const x = 0
    .label __5 = 8
    .label __6 = $a
    .label __7 = $a
    .label line_offset = $a
    .label __8 = $e
    .label __9 = $a
    // [80] if((byte) gotoxy::y#2<(byte) $19+(byte) 1) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19+1
    bcc __b3_from_gotoxy
    // [82] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    // [82] phi (byte) gotoxy::y#4 = (byte) 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [81] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
  __b3_from_gotoxy:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [82] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
  __b1_from___b3:
    // [82] phi (byte) gotoxy::y#4 = (byte) gotoxy::y#2 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    jmp __b1
    // gotoxy::@1
  __b1:
    jmp __b2
    // gotoxy::@2
  __b2:
    // [83] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [84] (byte) conio_cursor_y ← (byte) gotoxy::y#4 -- vbuz1=vbuxx 
    stx.z conio_cursor_y
    // [85] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#4 -- vwuz1=_word_vbuxx 
    txa
    sta.z __7
    lda #0
    sta.z __7+1
    // [86] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [87] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [88] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // [89] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // [90] (byte*) conio_line_text ← (byte*~) gotoxy::$5
    // [91] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // [92] (byte*) conio_line_color ← (byte*~) gotoxy::$6
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [93] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 4
    .label line_cols = 8
    // [95] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [95] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [95] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [95] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // clrscr::@1
  __b1:
    // [96] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [97] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [98] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [99] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [100] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [101] return 
    rts
    // [102] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [102] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // clrscr::@3
  __b3:
    // [103] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [104] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [105] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [106] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [95] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [95] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [95] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [95] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [107] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // [108] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #LIGHT_BLUE
    sta (line_cols),y
    // [109] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [102] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [102] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp _init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp wherey1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy.z conio_cursor_x
Removing instruction ldy #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b2_from___b6 with __b2
Replacing label __b1_from_cputc with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __breturn_from_toupper with __breturn_from___b2
Replacing label __breturn_from___b1 with __breturn_from___b2
Replacing label __b3_from_gotoxy with __b2
Replacing label __b1 with __b2
Removing instruction __b1_from__init1:
Removing instruction __b1_from___b4:
Removing instruction __b2_from___b6:
Removing instruction cputc_from___b5:
Removing instruction __b3_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __breturn_from_toupper:
Removing instruction __breturn_from___b1:
Removing instruction __b3_from_gotoxy:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction _init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction clrscr_from_main:
Removing instruction __b1_from_main:
Removing instruction cputc_from___b1:
Removing instruction __b4:
Removing instruction wherey1:
Removing instruction __b3:
Removing instruction __b2_from___b3:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b1_from_gotoxy:
Removing instruction __breturn:
Removing instruction __b1_from_clrscr:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in bcc __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b2
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __breturn_from___b2 to __b2
Relabelling long label __b3_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) COLORRAM = (byte*) 55296
(const nomodify byte*) DEFAULT_SCREEN = (byte*) 1024
(const nomodify byte) LIGHT_BLUE = (byte) $e
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) _start()
(label) _start::@1
(label) _start::@return
(label) _start::_init1
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#1 reg byte y 20002.0
(byte) clrscr::c#2 reg byte y 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 reg byte x 2002.0
(byte) clrscr::l#2 reg byte x 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 line_cols zp[2]:8 1001.0
(byte*) clrscr::line_cols#5 line_cols zp[2]:8 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 line_text zp[2]:4 667.3333333333334
(byte*) clrscr::line_text#5 line_text zp[2]:4 1714.7142857142858
(byte) conio_cursor_x loadstore zp[1]:6 345.6818181818182
(byte) conio_cursor_y loadstore zp[1]:7 5427.457627118643
(byte*) conio_line_color loadstore zp[2]:10 4514.469387755102
(byte*) conio_line_text loadstore zp[2]:8 4254.0192307692305
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte a 202.0
(byte) cputc::c#1 reg byte a 202.0
(byte) cputc::c#2 reg byte a 1102.0
(void()) cputln()
(label) cputln::@return
(void()) cscroll()
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@return
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(byte*~) gotoxy::$5 zp[2]:8 202.0
(byte*~) gotoxy::$6 zp[2]:10 202.0
(word~) gotoxy::$7 zp[2]:10 151.5
(word~) gotoxy::$8 zp[2]:14 202.0
(word~) gotoxy::$9 zp[2]:10 202.0
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@return
(word) gotoxy::line_offset
(word) gotoxy::line_offset#0 line_offset zp[2]:10 101.0
(byte) gotoxy::x
(const byte) gotoxy::x#2 x = (byte) 0
(byte) gotoxy::y
(byte) gotoxy::y#2 reg byte x 71.0
(byte) gotoxy::y#4 reg byte x 67.33333333333333
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::c
(byte) main::c#1 c zp[1]:2 151.5
(byte) main::c#2 c zp[1]:2 101.0
(byte) main::c1
(byte) main::c1#1 c1 zp[1]:3 151.5
(byte) main::c1#2 c1 zp[1]:3 50.5
(label) main::wherey1
(byte) main::wherey1_return
(byte) main::wherey1_return#0 reg byte x 22.0
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#2 destination zp[2]:4
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:4 1.00000001E8
(byte*) memcpy::dst#2 dst zp[2]:4 1.0033333466666667E8
(byte*) memcpy::dst#4 dst zp[2]:4 2000002.0
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2 source zp[2]:14
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:14 2.00000002E8
(byte*) memcpy::src#2 src zp[2]:14 1.0025000125E8
(byte*) memcpy::src#4 src zp[2]:14 1000001.0
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 src_end zp[2]:12 1.262500025E7
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1.428571442857143E7
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:14 2.00000002E8
(byte*) memset::dst#2 dst zp[2]:14 1.3366666833333334E8
(byte*) memset::dst#4 dst zp[2]:14 2000002.0
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:12 1.6833333666666668E7
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:14
(byte()) toupper((byte) toupper::ch)
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0 reg byte a 1702.0000000000002
(byte) toupper::return
(byte) toupper::return#0 reg byte a 2002.0
(byte) toupper::return#2 reg byte a 1034.6666666666667
(byte) toupper::return#3 reg byte a 202.0

zp[1]:2 [ main::c#2 main::c#1 ]
zp[1]:3 [ main::c1#2 main::c1#1 ]
reg byte a [ cputc::c#2 cputc::c#0 cputc::c#1 ]
reg byte x [ memset::c#4 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
zp[2]:4 [ clrscr::line_text#5 clrscr::line_text#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[1]:6 [ conio_cursor_x ]
zp[1]:7 [ conio_cursor_y ]
zp[2]:8 [ conio_line_text gotoxy::$5 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[2]:10 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 gotoxy::$7 gotoxy::$9 ]
reg byte x [ main::wherey1_return#0 ]
reg byte a [ toupper::return#3 ]
zp[2]:12 [ memcpy::src_end#0 memset::end#0 ]
zp[2]:14 [ gotoxy::$8 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]


FINAL ASSEMBLER
Score: 14574

  // File Comments
// Test toupper()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = 6
  // The current cursor y-position
  .label conio_cursor_y = 7
  // The current text cursor line start
  .label conio_line_text = 8
  // The current color cursor line start
  .label conio_line_color = $a
  // _start
_start: {
    // _start::_init1
    // conio_cursor_x = 0
    // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
    // _start::@1
    // [6] call main 
    jsr main
    // _start::@return
    // [7] return 
    rts
}
  // main
main: {
    .label c = 2
    .label c1 = 3
    // *((char*)0xd018) = 0x17
    // [8] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // clrscr()
    // [9] call clrscr 
  // Clear screen
    // [94] phi from main to clrscr [phi:main->clrscr]
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
    // [10] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
  // Output un-modified chars
    // [10] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [10] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@4->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // cputc(c)
    // [11] (byte) cputc::c#0 ← (byte) main::c#2 -- vbuaa=vbuz1 
    lda.z c
    // [12] call cputc 
    // [27] phi from main::@1 to cputc [phi:main::@1->cputc]
    // [27] phi (byte) cputc::c#2 = (byte) cputc::c#0 [phi:main::@1->cputc#0] -- register_copy 
    jsr cputc
    // main::@4
    // for(char c:0..0xff)
    // [13] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [14] if((byte) main::c#1!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1
    // main::wherey1
    // return conio_cursor_y;
    // [15] (byte) main::wherey1_return#0 ← (byte) conio_cursor_y -- vbuxx=vbuz1 
    ldx.z conio_cursor_y
    // main::@3
    // gotoxy(0, wherey()+2)
    // [16] (byte) gotoxy::y#2 ← (byte) main::wherey1_return#0 + (byte) 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [17] call gotoxy 
    jsr gotoxy
    // [18] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [18] phi (byte) main::c1#2 = (byte) 0 [phi:main::@3->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c1
  // Output toupper-chars chars
    // [18] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
    // [18] phi (byte) main::c1#2 = (byte) main::c1#1 [phi:main::@6->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // toupper(c)
    // [19] (byte) toupper::ch#0 ← (byte) main::c1#2 -- vbuaa=vbuz1 
    lda.z c1
    // [20] call toupper 
    jsr toupper
    // [21] (byte) toupper::return#3 ← (byte) toupper::return#2
    // main::@5
    // cputc(toupper(c))
    // [22] (byte) cputc::c#1 ← (byte) toupper::return#3
    // [23] call cputc 
    // [27] phi from main::@5 to cputc [phi:main::@5->cputc]
    // [27] phi (byte) cputc::c#2 = (byte) cputc::c#1 [phi:main::@5->cputc#0] -- register_copy 
    jsr cputc
    // main::@6
    // for(char c:0..0xff)
    // [24] (byte) main::c1#1 ← ++ (byte) main::c1#2 -- vbuz1=_inc_vbuz1 
    inc.z c1
    // [25] if((byte) main::c1#1!=(byte) 0) goto main::@2 -- vbuz1_neq_0_then_la1 
    lda.z c1
    cmp #0
    bne __b2
    // main::@return
    // }
    // [26] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [28] if((byte) cputc::c#2==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // conio_line_text[conio_cursor_x] = c
    // [29] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#2 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // conio_line_color[conio_cursor_x] = conio_textcolor
    // [30] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    sta (conio_line_color),y
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [31] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [32] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [33] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
    // cputc::@3
    // cputln()
    // [34] call cputln 
    jsr cputln
    // cputc::@return
  __breturn:
    // }
    // [35] return 
    rts
    // [36] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [37] call cputln 
    jsr cputln
    rts
}
  // cputln
// Print a newline
cputln: {
    // conio_line_text +=  CONIO_WIDTH
    // [38] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // conio_line_color += CONIO_WIDTH
    // [39] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // conio_cursor_x = 0
    // [40] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [41] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [42] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [43] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [44] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [45] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [46] call memcpy 
    // [65] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [65] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [65] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [47] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [48] call memcpy 
    // [65] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [65] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [65] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) COLORRAM+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [49] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [50] call memset 
    // [57] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [57] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [57] phi (void*) memset::str#3 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [51] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [52] call memset 
    // [57] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [57] phi (byte) memset::c#4 = (const nomodify byte) LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [57] phi (void*) memset::str#3 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_line_text -= CONIO_WIDTH
    // [53] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // conio_line_color -= CONIO_WIDTH
    // [54] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // conio_cursor_y--;
    // [55] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [56] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($e) str, byte register(X) c)
memset: {
    .label end = $c
    .label dst = $e
    .label str = $e
    // memset::@1
    // end = (char*)str + num
    // [58] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [59] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [60] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [60] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [61] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [62] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [63] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [64] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(4) destination, void* zp($e) source)
memcpy: {
    .label src_end = $c
    .label dst = 4
    .label src = $e
    .label source = $e
    .label destination = 4
    // src_end = (char*)source+num
    // [66] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [67] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [68] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [69] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [69] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [69] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [70] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [71] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [72] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [73] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [74] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // if(ch>='a' && ch<='z')
    // [75] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn
    // toupper::@2
    // [76] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [78] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
    // [78] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    rts
    // toupper::@1
  __b1:
    // return ch + ('A'-'a');
    // [77] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    // toupper::@return
  __breturn:
    // }
    // [79] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) y)
gotoxy: {
    .const x = 0
    .label __5 = 8
    .label __6 = $a
    .label __7 = $a
    .label line_offset = $a
    .label __8 = $e
    .label __9 = $a
    // if(y>CONIO_HEIGHT)
    // [80] if((byte) gotoxy::y#2<(byte) $19+(byte) 1) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19+1
    bcc __b2
    // [82] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
    // [82] phi (byte) gotoxy::y#4 = (byte) 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [81] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
    // gotoxy::@3
    // [82] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
    // [82] phi (byte) gotoxy::y#4 = (byte) gotoxy::y#2 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    // gotoxy::@1
    // gotoxy::@2
  __b2:
    // conio_cursor_x = x
    // [83] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // conio_cursor_y = y
    // [84] (byte) conio_cursor_y ← (byte) gotoxy::y#4 -- vbuz1=vbuxx 
    stx.z conio_cursor_y
    // (unsigned int)y*CONIO_WIDTH
    // [85] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#4 -- vwuz1=_word_vbuxx 
    txa
    sta.z __7
    lda #0
    sta.z __7+1
    // line_offset = (unsigned int)y*CONIO_WIDTH
    // [86] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [87] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [88] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // CONIO_SCREEN_TEXT + line_offset
    // [89] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // conio_line_text = CONIO_SCREEN_TEXT + line_offset
    // [90] (byte*) conio_line_text ← (byte*~) gotoxy::$5
    // CONIO_SCREEN_COLORS + line_offset
    // [91] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // conio_line_color = CONIO_SCREEN_COLORS + line_offset
    // [92] (byte*) conio_line_color ← (byte*~) gotoxy::$6
    // gotoxy::@return
    // }
    // [93] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 4
    .label line_cols = 8
    // [95] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [95] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [95] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [95] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [96] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b2
    // clrscr::@2
    // conio_cursor_x = 0
    // [97] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [98] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [99] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [100] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // clrscr::@return
    // }
    // [101] return 
    rts
    // [102] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b2:
    // [102] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // clrscr::@3
  __b3:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [103] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    // clrscr::@5
    // line_text += CONIO_WIDTH
    // [104] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [105] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [106] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [95] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
    // [95] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [95] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [95] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // line_text[c] = ' '
    // [107] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [108] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #LIGHT_BLUE
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [109] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [102] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
    // [102] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data

