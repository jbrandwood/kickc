
void main()
main: scope:[main]  from
  [0] phi()
  [1] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main main::@12 main::@22 main::@24 main::@25 main::@32 main::@33
  [2] main::total#10 = phi( main::@12/main::total#1, main::@22/main::total#10, main::@24/main::total#10, main::@25/main::total#10, main/0 )
  [2] main::valid#10 = phi( main::@12/main::valid#8, main::@22/main::valid#10, main::@24/main::valid#10, main::@25/main::valid#10, main/0 )
  [2] main::pass#10 = phi( main::@12/main::pass#3, main::@22/main::pass#14, main::@24/main::pass#1, main::@25/main::pass#11, main/passports )
  [3] if(0!=*main::pass#10) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [4] phi()
  [5] call cputs 
  to:main::@28
main::@28: scope:[main]  from main::@3
  [6] printf_uint::uvalue#0 = main::valid#10
  [7] call printf_uint 
  to:main::@29
main::@29: scope:[main]  from main::@28
  [8] phi()
  [9] call cputs 
  to:main::@30
main::@30: scope:[main]  from main::@29
  [10] printf_uint::uvalue#1 = main::total#10
  [11] call printf_uint 
  to:main::@31
main::@31: scope:[main]  from main::@30
  [12] phi()
  [13] call cputs 
  to:main::@27
main::@27: scope:[main]  from main::@27 main::@31
  [14] phi()
  to:main::@27
main::@2: scope:[main]  from main::@1
  [15] if(*main::pass#10!=' 'at) goto main::@4
  to:main::@24
main::@24: scope:[main]  from main::@2
  [16] main::pass#1 = ++ main::pass#10
  to:main::@1
main::@4: scope:[main]  from main::@2
  [17] if(*main::pass#10!='
'at) goto main::@13
  to:main::@25
main::@25: scope:[main]  from main::@4
  [18] main::pass#11 = ++ main::pass#10
  [19] if(*main::pass#11!='
'at) goto main::@1
  to:main::@26
main::@26: scope:[main]  from main::@25
  [20] main::pass#3 = ++ main::pass#11
  to:main::@5
main::@5: scope:[main]  from main::@26 main::@8
  [21] main::num_found#2 = phi( main::@26/0, main::@8/main::num_found#6 )
  [21] main::i#2 = phi( main::@26/0, main::@8/main::i#1 )
  [22] if(main::i#2<7) goto main::@6
  to:main::@7
main::@7: scope:[main]  from main::@5
  [23] if(main::num_found#2==7) goto main::@11
  to:main::@10
main::@10: scope:[main]  from main::@7
  [24] phi()
  [25] call cputs 
  to:main::@12
main::@12: scope:[main]  from main::@10 main::@11
  [26] main::valid#8 = phi( main::@11/main::valid#1, main::@10/main::valid#10 )
  [27] main::total#1 = ++ main::total#10
  to:main::@1
main::@11: scope:[main]  from main::@7
  [28] main::valid#1 = ++ main::valid#10
  [29] call cputs 
  to:main::@12
main::@6: scope:[main]  from main::@5
  [30] if(0==main::tags_found[main::i#2]) goto main::@8
  to:main::@9
main::@9: scope:[main]  from main::@6
  [31] main::num_found#1 = ++ main::num_found#2
  to:main::@8
main::@8: scope:[main]  from main::@6 main::@9
  [32] main::num_found#6 = phi( main::@9/main::num_found#1, main::@6/main::num_found#2 )
  [33] main::tags_found[main::i#2] = 0
  [34] main::i#1 = ++ main::i#2
  to:main::@5
main::@13: scope:[main]  from main::@20 main::@4
  [35] main::required_tag#6 = phi( main::@20/main::required_tag#1, main::@4/required_tags )
  [35] main::tag_idx#2 = phi( main::@20/main::tag_idx#1, main::@4/0 )
  [36] if(main::tag_idx#2<7) goto main::@14
  to:main::@21
main::@21: scope:[main]  from main::@13 main::@19
  [37] main::pass#4 = main::pass#10 + 3
  to:main::@22
main::@22: scope:[main]  from main::@21 main::@23
  [38] main::pass#14 = phi( main::@21/main::pass#4, main::@23/main::pass#5 )
  [39] if(0==*main::pass#14) goto main::@1
  to:main::@33
main::@33: scope:[main]  from main::@22
  [40] if(*main::pass#14==' 'at) goto main::@1
  to:main::@32
main::@32: scope:[main]  from main::@33
  [41] if(*main::pass#14!='
'at) goto main::@23
  to:main::@1
main::@23: scope:[main]  from main::@32
  [42] main::pass#5 = ++ main::pass#14
  to:main::@22
main::@14: scope:[main]  from main::@13 main::@17
  [43] main::match#2 = phi( main::@13/0, main::@17/main::match#6 )
  [43] main::i1#2 = phi( main::@13/0, main::@17/main::i1#1 )
  [44] if(main::i1#2<3) goto main::@15
  to:main::@16
main::@16: scope:[main]  from main::@14
  [45] if(main::match#2!=3) goto main::@20
  to:main::@19
main::@19: scope:[main]  from main::@16
  [46] main::tags_found[main::tag_idx#2] = 1
  to:main::@21
main::@20: scope:[main]  from main::@16
  [47] main::required_tag#1 = main::required_tag#6 + 3
  [48] main::tag_idx#1 = ++ main::tag_idx#2
  to:main::@13
main::@15: scope:[main]  from main::@14
  [49] if(main::required_tag#6[main::i1#2]!=main::pass#10[main::i1#2]) goto main::@17
  to:main::@18
main::@18: scope:[main]  from main::@15
  [50] main::match#1 = ++ main::match#2
  to:main::@17
main::@17: scope:[main]  from main::@15 main::@18
  [51] main::match#6 = phi( main::@15/main::match#2, main::@18/main::match#1 )
  [52] main::i1#1 = ++ main::i1#2
  to:main::@14

void clrscr()
clrscr: scope:[clrscr]  from main
  [53] memset::str#7 = (void*)*SAVMSC
  [54] call memset 
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr
  [55] *OLDCHR = 0
  [56] call gotoxy 
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@1
  [57] return 
  to:@return

void cputs(const byte* cputs::s)
cputs: scope:[cputs]  from main::@10 main::@11 main::@29 main::@3 main::@31 printf_number_buffer::@2
  [58] cputs::s#8 = phi( main::@10/main::s4, main::@11/main::s3, main::@3/main::s, main::@29/main::s1, main::@31/main::s2, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [59] cputs::s#7 = phi( cputs/cputs::s#8, cputs::@2/cputs::s#0 )
  [60] cputs::c#1 = *cputs::s#7
  [61] cputs::s#0 = ++ cputs::s#7
  [62] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [63] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [64] cputc::c = cputs::c#1
  [65] call cputc 
  to:cputs::@1

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@28 main::@30
  [66] printf_uint::uvalue#2 = phi( main::@28/printf_uint::uvalue#0, main::@30/printf_uint::uvalue#1 )
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [67] *((byte*)&printf_buffer) = 0
  [68] utoa::value#1 = printf_uint::uvalue#2
  [69] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [70] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [71] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [72] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from clrscr newline::@4
  [73] memset::str#3 = phi( clrscr/memset::str#7, newline::@4/memset::str#8 )
  [73] memset::num#2 = phi( clrscr/(word)$28*$18, newline::@4/$28 )
  [74] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [75] memset::end#0 = (byte*)memset::str#3 + memset::num#2
  [76] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [77] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [78] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [79] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [80] *memset::dst#2 = 0
  [81] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from clrscr::@1
  [82] *COLCRS = gotoxy::x#0
  [83] *ROWCRS = gotoxy::y#0
  [84] call setcursor 
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy
  [85] return 
  to:@return

void cputc(volatile byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [86] if(cputc::c==''at) goto cputc::@1
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc
  [87] if(cputc::c=='
'at) goto cputc::@2
  to:cputc::@8
cputc::@8: scope:[cputc]  from cputc::@3
  [88] if(cputc::c==$9b) goto cputc::@2
  to:cputc::convertToScreenCode1
cputc::convertToScreenCode1: scope:[cputc]  from cputc::@8
  [89] cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#0]
  to:cputc::@6
cputc::@6: scope:[cputc]  from cputc::convertToScreenCode1
  [90] phi()
  [91] call putchar 
  to:cputc::@7
cputc::@7: scope:[cputc]  from cputc::@6
  [92] *COLCRS = ++ *COLCRS
  [93] if(*COLCRS==$28) goto cputc::@5
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@7
  [94] phi()
  [95] call setcursor 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@4 cputc::@5
  [96] return 
  to:@return
cputc::@5: scope:[cputc]  from cputc::@7
  [97] *COLCRS = 0
  [98] call newline 
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc::@3 cputc::@8
  [99] *COLCRS = 0
  [100] call newline 
  to:cputc::@return
cputc::@1: scope:[cputc]  from cputc
  [101] *COLCRS = 0
  [102] call setcursor 
  to:cputc::@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [103] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [104] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [104] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [104] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [104] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [105] if(utoa::digit#2<5-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [106] utoa::$11 = (byte)utoa::value#2
  [107] *utoa::buffer#11 = DIGITS[utoa::$11]
  [108] utoa::buffer#3 = ++ utoa::buffer#11
  [109] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [110] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [111] utoa::$10 = utoa::digit#2 << 1
  [112] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [113] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [114] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [115] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [115] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [115] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [116] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [117] utoa_append::buffer#0 = utoa::buffer#11
  [118] utoa_append::value#0 = utoa::value#2
  [119] utoa_append::sub#0 = utoa::digit_value#0
  [120] call utoa_append 
  [121] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [122] utoa::value#0 = utoa_append::return#0
  [123] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [124] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [125] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [126] cputc::c = printf_number_buffer::buffer_sign#0
  [127] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [128] phi()
  [129] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [130] return 
  to:@return

void setcursor()
setcursor: scope:[setcursor]  from cputc::@1 cputc::@4 gotoxy newline::@1 putchar::@1
  [131] *(*OLDADR) = *OLDCHR
  [132] call cursorLocation 
  [133] cursorLocation::return#3 = cursorLocation::return#1
  to:setcursor::@3
setcursor::@3: scope:[setcursor]  from setcursor
  [134] setcursor::loc#0 = cursorLocation::return#3
  [135] setcursor::c#0 = *setcursor::loc#0
  [136] *OLDCHR = setcursor::c#0
  [137] *OLDADR = setcursor::loc#0
  to:setcursor::@2
setcursor::@2: scope:[setcursor]  from setcursor::@3
  [138] *CRSINH = 0
  [139] setcursor::c#1 = setcursor::c#0 ^ $80
  to:setcursor::@1
setcursor::@1: scope:[setcursor]  from setcursor::@2
  [140] *(*OLDADR) = setcursor::c#1
  to:setcursor::@return
setcursor::@return: scope:[setcursor]  from setcursor::@1
  [141] return 
  to:@return

void putchar(byte putchar::code)
putchar: scope:[putchar]  from cputc::@6
  [142] *(*OLDADR) = *OLDCHR
  [143] call cursorLocation 
  [144] cursorLocation::return#0 = cursorLocation::return#1
  to:putchar::@1
putchar::@1: scope:[putchar]  from putchar
  [145] putchar::loc#0 = cursorLocation::return#0
  [146] putchar::newChar#0 = cputc::convertToScreenCode1_return#0
  [147] *putchar::loc#0 = putchar::newChar#0
  [148] *OLDCHR = putchar::newChar#0
  [149] call setcursor 
  to:putchar::@return
putchar::@return: scope:[putchar]  from putchar::@1
  [150] return 
  to:@return

void newline()
newline: scope:[newline]  from cputc::@2 cputc::@5
  [151] *ROWCRS = ++ *ROWCRS
  [152] if(*ROWCRS!=$18) goto newline::@1
  to:newline::@3
newline::@3: scope:[newline]  from newline
  [153] *(*OLDADR) = *(*OLDADR) ^ $80
  to:newline::@2
newline::@2: scope:[newline]  from newline::@3
  [154] newline::start#0 = *SAVMSC
  [155] memcpy::source#0 = newline::start#0 + $28
  [156] memcpy::destination#0 = (void*)newline::start#0
  [157] call memcpy 
  to:newline::@4
newline::@4: scope:[newline]  from newline::@2
  [158] memset::str#1 = newline::start#0 + (word)$28*$17
  [159] memset::str#8 = (void*)memset::str#1
  [160] call memset 
  to:newline::@5
newline::@5: scope:[newline]  from newline::@4
  [161] *ROWCRS = $18-1
  to:newline::@1
newline::@1: scope:[newline]  from newline newline::@5
  [162] phi()
  [163] call setcursor 
  to:newline::@return
newline::@return: scope:[newline]  from newline::@1
  [164] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [165] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [166] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [166] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [167] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [168] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [169] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [170] utoa_append::digit#1 = ++ utoa_append::digit#2
  [171] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

byte* cursorLocation()
cursorLocation: scope:[cursorLocation]  from putchar setcursor
  [172] cursorLocation::$3 = (word)*ROWCRS
  [173] cursorLocation::$4 = cursorLocation::$3 << 2
  [174] cursorLocation::$5 = cursorLocation::$4 + cursorLocation::$3
  [175] cursorLocation::$0 = cursorLocation::$5 << 3
  [176] cursorLocation::$1 = *SAVMSC + cursorLocation::$0
  [177] cursorLocation::return#1 = cursorLocation::$1 + *COLCRS
  to:cursorLocation::@return
cursorLocation::@return: scope:[cursorLocation]  from cursorLocation
  [178] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from newline::@2
  [179] memcpy::src_end#0 = (byte*)(void*)memcpy::source#0 + memcpy::num#0
  [180] memcpy::src#4 = (byte*)(void*)memcpy::source#0
  [181] memcpy::dst#4 = (byte*)memcpy::destination#0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [182] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [182] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [183] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [184] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [185] *memcpy::dst#2 = *memcpy::src#2
  [186] memcpy::dst#1 = ++ memcpy::dst#2
  [187] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1
