
(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::sei1
main::sei1: scope:[main]  from main
  asm { sei  }
  to:main::@30
main::@30: scope:[main]  from main::sei1
  [2] phi()
  [3] call memset 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@30
  [4] phi()
  to:main::@31
main::@31: scope:[main]  from main::toD0181
  [5] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) main::toD0181_return#0
  [6] call next_position 
  to:main::@1
main::@1: scope:[main]  from main::@26 main::@31
  [7] (byte) screen#12 ← phi( main::@26/(byte) screen#28 main::@31/(byte) 0 )
  [8] (word) main::x_pos_coarse_old#0 ← (word) x_pos_coarse#17
  [9] (word) main::y_pos_coarse_old#0 ← (word) y_pos_coarse#16
  [10] call next_position 
  to:main::@34
main::@34: scope:[main]  from main::@1
  [11] (word~) main::$5 ← (word) main::y_pos_coarse_old#0 - (word) y_pos_coarse#16
  [12] (signed byte) main::y_movement#0 ← (signed byte)(word~) main::$5
  [13] if((signed byte) main::y_movement#0==(signed byte) 1) goto main::@2
  to:main::@27
main::@27: scope:[main]  from main::@34
  [14] if((signed byte) main::y_movement#0!=(signed byte) -1) goto main::@2
  to:main::@28
main::@28: scope:[main]  from main::@27
  [15] phi()
  to:main::@2
main::@2: scope:[main]  from main::@27 main::@28 main::@34
  [16] (signed byte) main::movement#4 ← phi( main::@34/(signed byte) -$28 main::@27/(signed byte) 0 main::@28/(signed byte) $28 )
  [17] (word~) main::$9 ← (word) main::x_pos_coarse_old#0 - (word) x_pos_coarse#17
  [18] (signed byte) main::x_movement#0 ← (signed byte)(word~) main::$9
  [19] (signed byte) main::movement#3 ← (signed byte) main::movement#4 - (signed byte) main::x_movement#0
  [20] if((signed byte) 0==(signed byte) main::movement#3) goto main::@23
  to:main::@29
main::@29: scope:[main]  from main::@2
  [21] if((byte) 0!=(byte) screen#12) goto main::@3
  to:main::@4
main::@3: scope:[main]  from main::@29
  [22] phi()
  to:main::@4
main::@4: scope:[main]  from main::@29 main::@3
  [23] (byte*~) main::$13 ← phi( main::@3/(const nomodify byte*) MAIN_SCREEN1 main::@29/(const nomodify byte*) MAIN_SCREEN0 )
  [24] (byte*) main::screen_active#0 ← (byte*~) main::$13 + (signed byte) main::movement#3
  [25] if((byte) 0!=(byte) screen#12) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  [26] phi()
  to:main::@6
main::@6: scope:[main]  from main::@4 main::@5
  [27] (byte*) main::screen_hidden#0 ← phi( main::@5/(const nomodify byte*) MAIN_SCREEN0 main::@4/(const nomodify byte*) MAIN_SCREEN1 )
  [28] (byte*) screencpy::dst#0 ← (byte*) main::screen_hidden#0
  [29] (byte*) screencpy::src#0 ← (byte*) main::screen_active#0
  [30] call screencpy 
  to:main::@35
main::@35: scope:[main]  from main::@6
  [31] if((signed byte) main::y_movement#0==(signed byte) -1) goto main::@7
  to:main::@19
main::@19: scope:[main]  from main::@35
  [32] if((signed byte) main::y_movement#0!=(signed byte) 1) goto main::@10
  to:main::@20
main::@20: scope:[main]  from main::@19
  [33] (word) petscii_ptr::row_x#1 ← (word) x_pos_coarse#17 - (byte) $14
  [34] (word) petscii_ptr::row_y#1 ← (word) y_pos_coarse#16 - (byte) $c
  [35] call petscii_ptr 
  [36] (byte*) petscii_ptr::return#1 ← (byte*) petscii_ptr::return#10
  to:main::@37
main::@37: scope:[main]  from main::@20
  [37] (byte*) main::petscii#0 ← (byte*) petscii_ptr::return#1
  to:main::@8
main::@8: scope:[main]  from main::@37 main::@9
  [38] (byte) main::i#2 ← phi( main::@9/(byte) main::i#1 main::@37/(byte) 0 )
  [39] if((byte) main::i#2<(byte) $28) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@11 main::@19 main::@8
  [40] if((signed byte) main::x_movement#0==(signed byte) -1) goto main::@13
  to:main::@21
main::@21: scope:[main]  from main::@10
  [41] if((signed byte) main::x_movement#0!=(signed byte) 1) goto main::@16
  to:main::@22
main::@22: scope:[main]  from main::@21
  [42] (word) petscii_ptr::row_x#3 ← (word) x_pos_coarse#17 - (byte) $14
  [43] (word) petscii_ptr::row_y#3 ← (word) y_pos_coarse#16 - (byte) $c
  [44] call petscii_ptr 
  [45] (byte*) petscii_ptr::return#3 ← (byte*) petscii_ptr::return#10
  to:main::@39
main::@39: scope:[main]  from main::@22
  [46] (byte*) main::petscii2#0 ← (byte*) petscii_ptr::return#3
  to:main::@14
main::@14: scope:[main]  from main::@15 main::@39
  [47] (byte*) main::scrn2#2 ← phi( main::@15/(byte*) main::scrn2#1 main::@39/(byte*) main::screen_hidden#0 )
  [47] (byte*) main::petscii2#2 ← phi( main::@15/(byte*) main::petscii2#1 main::@39/(byte*) main::petscii2#0 )
  [47] (byte) main::i2#2 ← phi( main::@15/(byte) main::i2#1 main::@39/(byte) 0 )
  [48] if((byte) main::i2#2<(byte) $19) goto main::@15
  to:main::@16
main::@16: scope:[main]  from main::@14 main::@17 main::@21
  [49] (byte) screen#0 ← (byte) screen#12 ^ (byte) 1
  to:main::@23
main::@23: scope:[main]  from main::@16 main::@2 main::@23
  [50] (byte) screen#28 ← phi( main::@16/(byte) screen#0 main::@23/(byte) screen#28 main::@2/(byte) screen#12 )
  [51] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fe) goto main::@23
  to:main::@24
main::@24: scope:[main]  from main::@23 main::@24
  [52] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto main::@24
  to:main::@25
main::@25: scope:[main]  from main::@24
  [53] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE
  [54] (byte~) main::$45 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $f0
  [55] (byte~) main::$46 ← (byte) 7 - (byte) y_pos_fine#12
  [56] (byte~) main::$47 ← (byte~) main::$45 | (byte~) main::$46
  [57] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← (byte~) main::$47
  [58] (byte~) main::$48 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) & (byte) $f0
  [59] (byte~) main::$49 ← (byte) 7 - (byte) x_pos_fine#12
  [60] (byte~) main::$50 ← (byte~) main::$48 | (byte~) main::$49
  [61] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (byte~) main::$50
  [62] if((byte) 0!=(byte) screen#28) goto main::toD0182
  to:main::toD0183
main::toD0183: scope:[main]  from main::@25
  [63] phi()
  to:main::@33
main::@33: scope:[main]  from main::toD0183
  [64] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) main::toD0183_return#0
  to:main::@26
main::@26: scope:[main]  from main::@32 main::@33
  [65] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  to:main::@1
main::toD0182: scope:[main]  from main::@25
  [66] phi()
  to:main::@32
main::@32: scope:[main]  from main::toD0182
  [67] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) main::toD0182_return#0
  to:main::@26
main::@15: scope:[main]  from main::@14
  [68] *((byte*) main::scrn2#2) ← *((byte*) main::petscii2#2)
  [69] (byte*) main::scrn2#1 ← (byte*) main::scrn2#2 + (byte) $28
  [70] (byte*) main::petscii2#1 ← (byte*) main::petscii2#2 + (byte) $8c
  [71] (byte) main::i2#1 ← ++ (byte) main::i2#2
  to:main::@14
main::@13: scope:[main]  from main::@10
  [72] (word) petscii_ptr::row_x#2 ← (word) x_pos_coarse#17 + (byte) $13
  [73] (word) petscii_ptr::row_y#2 ← (word) y_pos_coarse#16 - (byte) $c
  [74] call petscii_ptr 
  [75] (byte*) petscii_ptr::return#2 ← (byte*) petscii_ptr::return#10
  to:main::@38
main::@38: scope:[main]  from main::@13
  [76] (byte*) main::petscii3#0 ← (byte*) petscii_ptr::return#2
  [77] (byte*) main::scrn3#0 ← (byte*) main::screen_hidden#0 + (byte) $27
  to:main::@17
main::@17: scope:[main]  from main::@18 main::@38
  [78] (byte*) main::scrn3#2 ← phi( main::@18/(byte*) main::scrn3#1 main::@38/(byte*) main::scrn3#0 )
  [78] (byte*) main::petscii3#2 ← phi( main::@18/(byte*) main::petscii3#1 main::@38/(byte*) main::petscii3#0 )
  [78] (byte) main::i3#2 ← phi( main::@18/(byte) main::i3#1 main::@38/(byte) 0 )
  [79] if((byte) main::i3#2<(byte) $19) goto main::@18
  to:main::@16
main::@18: scope:[main]  from main::@17
  [80] *((byte*) main::scrn3#2) ← *((byte*) main::petscii3#2)
  [81] (byte*) main::scrn3#1 ← (byte*) main::scrn3#2 + (byte) $28
  [82] (byte*) main::petscii3#1 ← (byte*) main::petscii3#2 + (byte) $8c
  [83] (byte) main::i3#1 ← ++ (byte) main::i3#2
  to:main::@17
main::@9: scope:[main]  from main::@8
  [84] *((byte*) main::screen_hidden#0 + (byte) main::i#2) ← *((byte*) main::petscii#0 + (byte) main::i#2)
  [85] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@8
main::@7: scope:[main]  from main::@35
  [86] (word) petscii_ptr::row_x#0 ← (word) x_pos_coarse#17 - (byte) $14
  [87] (word) petscii_ptr::row_y#0 ← (word) y_pos_coarse#16 + (byte) $c
  [88] call petscii_ptr 
  [89] (byte*) petscii_ptr::return#0 ← (byte*) petscii_ptr::return#10
  to:main::@36
main::@36: scope:[main]  from main::@7
  [90] (byte*) main::petscii1#0 ← (byte*) petscii_ptr::return#0
  [91] (byte*) main::scrn1#0 ← (byte*) main::screen_hidden#0 + (word)(number) $18*(number) $28
  to:main::@11
main::@11: scope:[main]  from main::@12 main::@36
  [92] (byte) main::i1#2 ← phi( main::@12/(byte) main::i1#1 main::@36/(byte) 0 )
  [93] if((byte) main::i1#2<(byte) $28) goto main::@12
  to:main::@10
main::@12: scope:[main]  from main::@11
  [94] *((byte*) main::scrn1#0 + (byte) main::i1#2) ← *((byte*) main::petscii1#0 + (byte) main::i1#2)
  [95] (byte) main::i1#1 ← ++ (byte) main::i1#2
  to:main::@11

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main::@30
  [96] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [97] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [98] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [99] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [100] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [101] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) next_position()
next_position: scope:[next_position]  from main::@1 main::@31
  [102] (word) y_sin_idx#12 ← phi( main::@1/(word) y_sin_idx#13 main::@31/(const nomodify word) SINSIZE/(byte) 4 )
  [102] (word) x_sin_idx#12 ← phi( main::@1/(word) x_sin_idx#14 main::@31/(word) 0 )
  [103] (word) x_sin_idx#13 ← ++ (word) x_sin_idx#12
  [104] if((word) x_sin_idx#13<(const nomodify word) SINSIZE) goto next_position::@1
  to:next_position::@3
next_position::@3: scope:[next_position]  from next_position
  [105] (word) x_sin_idx#4 ← (word) x_sin_idx#13 - (const nomodify word) SINSIZE
  to:next_position::@1
next_position::@1: scope:[next_position]  from next_position next_position::@3
  [106] (word) x_sin_idx#14 ← phi( next_position/(word) x_sin_idx#13 next_position::@3/(word) x_sin_idx#4 )
  [107] (word) y_sin_idx#14 ← ++ (word) y_sin_idx#12
  [108] if((word) y_sin_idx#14<(const nomodify word) SINSIZE) goto next_position::@2
  to:next_position::@4
next_position::@4: scope:[next_position]  from next_position::@1
  [109] (word) y_sin_idx#4 ← (word) y_sin_idx#14 - (const nomodify word) SINSIZE
  to:next_position::@2
next_position::@2: scope:[next_position]  from next_position::@1 next_position::@4
  [110] (word) y_sin_idx#13 ← phi( next_position::@1/(word) y_sin_idx#14 next_position::@4/(word) y_sin_idx#4 )
  [111] (word~) next_position::$12 ← (word) x_sin_idx#14 << (byte) 1
  [112] (signed word*~) next_position::$18 ← (const signed word*) SINTAB + (word~) next_position::$12
  [113] (signed word) x_pos#11 ← *((signed word*~) next_position::$18)
  [114] (word~) next_position::$13 ← (word) y_sin_idx#13 << (byte) 1
  [115] (signed word*~) next_position::$19 ← (const signed word*) SINTAB + (word~) next_position::$13
  [116] (signed word) y_pos#11 ← *((signed word*~) next_position::$19)
  [117] (word~) next_position::$4 ← (word)(signed word) x_pos#11
  [118] (word) next_position::x_pos_u#0 ← (word~) next_position::$4 + (word) $190+(byte)(number) $14*(number) 8
  [119] (byte~) next_position::$15 ← (byte)(word) next_position::x_pos_u#0
  [120] (byte) x_pos_fine#12 ← (byte~) next_position::$15 & (byte) 7
  [121] (word) x_pos_coarse#17 ← (word) next_position::x_pos_u#0 >> (byte) 3
  [122] (word~) next_position::$8 ← (word)(signed word) y_pos#11
  [123] (word) next_position::y_pos_u#0 ← (word~) next_position::$8 + (word) $190+(byte)(number) $c*(number) 8
  [124] (byte~) next_position::$17 ← (byte)(word) next_position::y_pos_u#0
  [125] (byte) y_pos_fine#12 ← (byte~) next_position::$17 & (byte) 7
  [126] (word) y_pos_coarse#16 ← (word) next_position::y_pos_u#0 >> (byte) 3
  to:next_position::@return
next_position::@return: scope:[next_position]  from next_position::@2
  [127] return 
  to:@return

(void()) screencpy((byte*) screencpy::dst , (byte*) screencpy::src)
screencpy: scope:[screencpy]  from main::@6
  [128] (byte*) screencpy::src_250#0 ← (byte*) screencpy::src#0 + (byte) $fa
  [129] (byte*) screencpy::dst_250#0 ← (byte*) screencpy::dst#0 + (byte) $fa
  [130] (byte*) screencpy::src_500#0 ← (byte*) screencpy::src#0 + (word) $1f4
  [131] (byte*) screencpy::dst_500#0 ← (byte*) screencpy::dst#0 + (word) $1f4
  [132] (byte*) screencpy::src_750#0 ← (byte*) screencpy::src#0 + (word) $2ee
  [133] (byte*) screencpy::dst_750#0 ← (byte*) screencpy::dst#0 + (word) $2ee
  to:screencpy::@1
screencpy::@1: scope:[screencpy]  from screencpy screencpy::@2
  [134] (byte) screencpy::i#2 ← phi( screencpy/(byte) 0 screencpy::@2/(byte) screencpy::i#1 )
  [135] if((byte) screencpy::i#2<(byte) $fa) goto screencpy::@2
  to:screencpy::@return
screencpy::@return: scope:[screencpy]  from screencpy::@1
  [136] return 
  to:@return
screencpy::@2: scope:[screencpy]  from screencpy::@1
  [137] *((byte*) screencpy::dst#0 + (byte) screencpy::i#2) ← *((byte*) screencpy::src#0 + (byte) screencpy::i#2)
  [138] *((byte*) screencpy::dst_250#0 + (byte) screencpy::i#2) ← *((byte*) screencpy::src_250#0 + (byte) screencpy::i#2)
  [139] *((byte*) screencpy::dst_500#0 + (byte) screencpy::i#2) ← *((byte*) screencpy::src_500#0 + (byte) screencpy::i#2)
  [140] *((byte*) screencpy::dst_750#0 + (byte) screencpy::i#2) ← *((byte*) screencpy::src_750#0 + (byte) screencpy::i#2)
  [141] (byte) screencpy::i#1 ← ++ (byte) screencpy::i#2
  to:screencpy::@1

(byte*()) petscii_ptr((word) petscii_ptr::row_x , (word) petscii_ptr::row_y)
petscii_ptr: scope:[petscii_ptr]  from main::@13 main::@20 main::@22 main::@7
  [142] (word) petscii_ptr::row_x#4 ← phi( main::@7/(word) petscii_ptr::row_x#0 main::@13/(word) petscii_ptr::row_x#2 main::@20/(word) petscii_ptr::row_x#1 main::@22/(word) petscii_ptr::row_x#3 )
  [142] (word) petscii_ptr::row_y#4 ← phi( main::@7/(word) petscii_ptr::row_y#0 main::@13/(word) petscii_ptr::row_y#2 main::@20/(word) petscii_ptr::row_y#1 main::@22/(word) petscii_ptr::row_y#3 )
  [143] (word~) petscii_ptr::$3 ← (word) petscii_ptr::row_y#4 << (byte) 4
  [144] (word~) petscii_ptr::$4 ← (word~) petscii_ptr::$3 + (word) petscii_ptr::row_y#4
  [145] (word~) petscii_ptr::$5 ← (word~) petscii_ptr::$4 << (byte) 1
  [146] (word~) petscii_ptr::$6 ← (word~) petscii_ptr::$5 + (word) petscii_ptr::row_y#4
  [147] (word~) petscii_ptr::$0 ← (word~) petscii_ptr::$6 << (byte) 2
  [148] (byte*~) petscii_ptr::$1 ← (const byte*) PETSCII_ART + (word~) petscii_ptr::$0
  [149] (byte*) petscii_ptr::return#10 ← (byte*~) petscii_ptr::$1 + (word) petscii_ptr::row_x#4
  to:petscii_ptr::@return
petscii_ptr::@return: scope:[petscii_ptr]  from petscii_ptr
  [150] return 
  to:@return
