@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [5] (byte*) main::cursor#3 ← phi( main/(byte*) 1024 main::@6/(byte*) main::cursor#6 )
  [5] (byte*) main::line#2 ← phi( main/(byte*) 1024 main::@6/(byte*) main::line#5 )
  [5] (byte*) main::msg#2 ← phi( main/(const byte*) MESSAGE main::@6/(byte*) main::msg#1 )
  [6] if((byte) 0!=*((byte*) main::msg#2)) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [7] *((const byte*) SCREEN+(byte) $50) ← (const byte) CH
  to:main::@return
main::@return: scope:[main]  from main::@3
  [8] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [9] if(*((byte*) main::msg#2)==(byte) '
'pm) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@2
  [10] (byte~) main::$0 ← *((byte*) main::msg#2) & (byte) $3f
  [11] *((byte*) main::cursor#3) ← (byte~) main::$0
  [12] (byte*) main::cursor#2 ← ++ (byte*) main::cursor#3
  to:main::@6
main::@6: scope:[main]  from main::@4 main::@5
  [13] (byte*) main::cursor#6 ← phi( main::@4/(byte*) main::cursor#1 main::@5/(byte*) main::cursor#2 )
  [13] (byte*) main::line#5 ← phi( main::@4/(byte*) main::line#8 main::@5/(byte*) main::line#2 )
  [14] (byte*) main::msg#1 ← ++ (byte*) main::msg#2
  to:main::@1
main::@4: scope:[main]  from main::@2
  [15] (byte*) main::cursor#1 ← (byte*) main::line#2 + (byte) $28
  [16] (byte*) main::line#8 ← (byte*) main::cursor#1
  to:main::@6
