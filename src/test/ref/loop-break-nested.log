
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::line#0 = (byte*)$400
  to:main::@1
main::@1: scope:[main]  from main main::@6
  main::line#2 = phi( main/main::line#0, main::@6/main::line#1 )
  main::$0 = main::line#2 < $400+$28*$19
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::line#3 = phi( main::@1/main::line#2 )
  main::$1 = *main::line#3 == 'a'
  main::$2 = ! main::$1
  if(main::$2) goto main::@3
  to:main::@return
main::@3: scope:[main]  from main::@2
  main::line#7 = phi( main::@2/main::line#3 )
  main::i#0 = 0
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  main::i#2 = phi( main::@3/main::i#0, main::@5/main::i#1 )
  main::line#4 = phi( main::@3/main::line#7, main::@5/main::line#5 )
  main::$3 = main::line#4[main::i#2] == 'a'
  main::$4 = ! main::$3
  if(main::$4) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  main::i#3 = phi( main::@4/main::i#2 )
  main::line#5 = phi( main::@4/main::line#4 )
  main::line#5[main::i#3] = 'a'
  main::i#1 = main::i#3 + rangenext(0,$27)
  main::$5 = main::i#1 != rangelast(0,$27)
  if(main::$5) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4 main::@5
  main::line#6 = phi( main::@4/main::line#4, main::@5/main::line#5 )
  main::line#1 = main::line#6 + $28
  to:main::@1
main::@return: scope:[main]  from main::@1 main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
label __start::@1
label __start::@return
void main()
bool~ main::$0
bool~ main::$1
bool~ main::$2
bool~ main::$3
bool~ main::$4
bool~ main::$5
label main::@1
label main::@2
label main::@3
label main::@4
label main::@5
label main::@6
label main::@return
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte* main::line
byte* main::line#0
byte* main::line#1
byte* main::line#2
byte* main::line#3
byte* main::line#4
byte* main::line#5
byte* main::line#6
byte* main::line#7

Adding number conversion cast (unumber) $400+$28*$19 in main::$0 = main::line#2 < $400+$28*$19
Adding number conversion cast (unumber) $28 in main::line#1 = main::line#6 + $28
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [6] main::$2 = *main::line#3 != 'a' from [5] main::$1 = *main::line#3 == 'a'
Inversing boolean not [12] main::$4 = main::line#4[main::i#2] != 'a' from [11] main::$3 = main::line#4[main::i#2] == 'a'
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::line#2 = main::line#3 main::line#7 
Alias main::line#4 = main::line#5 
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Alias main::line#4 = main::line#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values main::line#4 main::line#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$0 [3] if(main::line#2<(word)$400+$28*$19) goto main::@2
Simple Condition main::$2 [5] if(*main::line#2!='a') goto main::@3
Simple Condition main::$4 [9] if(main::line#2[main::i#2]!='a') goto main::@5
Simple Condition main::$5 [13] if(main::i#1!=rangelast(0,$27)) goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [3] if(main::line#2>=(word)$400+$28*$19) goto main::@return
Negating conditional jump and destination [9] if(main::line#2[main::i#2]=='a') goto main::@6
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant main::line#0 = (byte*) 1024
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [11] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [13] if(main::i#1!=rangelast(0,$27)) goto main::@4 to $28
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $28 in [7] if(main::i#1!=$28) goto main::@4
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::line#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::line#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@7(between main::@5 and main::@4)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [12] main::line#8 = main::line#1
Coalesced [13] main::i#4 = main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label main::@7
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [1] main::line#2 = phi( main/(byte*) 1024, main::@5/main::line#1 )
  [2] if(main::line#2>=(word)$400+$28*$19) goto main::@return
  to:main::@2
main::@2: scope:[main]  from main::@1
  [3] if(*main::line#2!='a') goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  [4] return 
  to:@return
main::@3: scope:[main]  from main::@2 main::@4
  [5] main::i#2 = phi( main::@2/0, main::@4/main::i#1 )
  [6] if(main::line#2[main::i#2]=='a') goto main::@5
  to:main::@4
main::@4: scope:[main]  from main::@3
  [7] main::line#2[main::i#2] = 'a'
  [8] main::i#1 = ++ main::i#2
  [9] if(main::i#1!=$28) goto main::@3
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@4
  [10] main::line#1 = main::line#2 + $28
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 151.5
byte main::i#2 134.66666666666666
byte* main::line
byte* main::line#1 22.0
byte* main::line#2 30.75

Initial phi equivalence classes
[ main::line#2 main::line#1 ]
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::line#2 main::line#1 ]
[ main::i#2 main::i#1 ]
Allocated zp[2]:2 [ main::line#2 main::line#1 ]
Allocated zp[1]:4 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(main::line#2>=(word)$400+$28*$19) goto main::@return [ main::line#2 ] (  [ main::line#2 ] { }  ) always clobbers reg byte a 
Statement [3] if(*main::line#2!='a') goto main::@3 [ main::line#2 ] (  [ main::line#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [6] if(main::line#2[main::i#2]=='a') goto main::@5 [ main::line#2 main::i#2 ] (  [ main::line#2 main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::i#2 main::i#1 ]
Statement [7] main::line#2[main::i#2] = 'a' [ main::line#2 main::i#2 ] (  [ main::line#2 main::i#2 ] { }  ) always clobbers reg byte a 
Statement [10] main::line#1 = main::line#2 + $28 [ main::line#1 ] (  [ main::line#1 ] { }  ) always clobbers reg byte a 
Statement [2] if(main::line#2>=(word)$400+$28*$19) goto main::@return [ main::line#2 ] (  [ main::line#2 ] { }  ) always clobbers reg byte a 
Statement [3] if(*main::line#2!='a') goto main::@3 [ main::line#2 ] (  [ main::line#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [6] if(main::line#2[main::i#2]=='a') goto main::@5 [ main::line#2 main::i#2 ] (  [ main::line#2 main::i#2 ] { }  ) always clobbers reg byte a 
Statement [7] main::line#2[main::i#2] = 'a' [ main::line#2 main::i#2 ] (  [ main::line#2 main::i#2 ] { }  ) always clobbers reg byte a 
Statement [10] main::line#1 = main::line#2 + $28 [ main::line#1 ] (  [ main::line#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::line#2 main::line#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ main::i#2 main::i#1 ] : zp[1]:4 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 286.17: zp[1]:4 [ main::i#2 main::i#1 ] 52.75: zp[2]:2 [ main::line#2 main::line#1 ] 
Uplift Scope [] 

Uplifting [main] best 4546 combination reg byte y [ main::i#2 main::i#1 ] zp[2]:2 [ main::line#2 main::line#1 ] 
Uplifting [] best 4546 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label line = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::line#2 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z line
    lda #>$400
    sta.z line+1
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::line#2>=(word)$400+$28*$19) goto main::@return -- pbuz1_ge_vwuc1_then_la1 
    lda.z line+1
    cmp #>$400+$28*$19
    bcc !+
    bne __breturn
    lda.z line
    cmp #<$400+$28*$19
    bcs __breturn
  !:
    jmp __b2
    // main::@2
  __b2:
    // [3] if(*main::line#2!='a') goto main::@3 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (line),y
    cmp #'a'
    bne __b3_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // [5] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [5] phi main::i#2 = 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // [5] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [5] phi main::i#2 = main::i#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [6] if(main::line#2[main::i#2]=='a') goto main::@5 -- pbuz1_derefidx_vbuyy_eq_vbuc1_then_la1 
    lda #'a'
    cmp (line),y
    beq __b5
    jmp __b4
    // main::@4
  __b4:
    // [7] main::line#2[main::i#2] = 'a' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #'a'
    sta (line),y
    // [8] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if(main::i#1!=$28) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne __b3_from___b4
    jmp __b5
    // main::@5
  __b5:
    // [10] main::line#1 = main::line#2 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [1] phi main::line#2 = main::line#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b4 with __b3
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __b4:
Removing instruction __b1_from___b5:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b3_from___b2 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #'a'
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
void main()
label main::@1
label main::@2
label main::@3
label main::@4
label main::@5
label main::@return
byte main::i
byte main::i#1 reg byte y 151.5
byte main::i#2 reg byte y 134.66666666666666
byte* main::line
byte* main::line#1 line zp[2]:2 22.0
byte* main::line#2 line zp[2]:2 30.75

zp[2]:2 [ main::line#2 main::line#1 ]
reg byte y [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 3056

  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label line = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::line#2 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z line
    lda #>$400
    sta.z line+1
    // main::@1
  __b1:
    // for(byte* line = $400; line<$400+40*25;line+=40 )
    // [2] if(main::line#2>=(word)$400+$28*$19) goto main::@return -- pbuz1_ge_vwuc1_then_la1 
    lda.z line+1
    cmp #>$400+$28*$19
    bcc !+
    bne __breturn
    lda.z line
    cmp #<$400+$28*$19
    bcs __breturn
  !:
    // main::@2
    // if(*line=='a')
    // [3] if(*main::line#2!='a') goto main::@3 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (line),y
    cmp #'a'
    bne __b2
    // main::@return
  __breturn:
    // }
    // [4] return 
    rts
    // [5] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b2:
    // [5] phi main::i#2 = 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [5] phi main::i#2 = main::i#1 [phi:main::@4->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // if(line[i]=='a')
    // [6] if(main::line#2[main::i#2]=='a') goto main::@5 -- pbuz1_derefidx_vbuyy_eq_vbuc1_then_la1 
    lda #'a'
    cmp (line),y
    beq __b5
    // main::@4
    // line[i] = 'a'
    // [7] main::line#2[main::i#2] = 'a' -- pbuz1_derefidx_vbuyy=vbuc1 
    sta (line),y
    // for( byte i: 0..39)
    // [8] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if(main::i#1!=$28) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne __b3
    // main::@5
  __b5:
    // line+=40
    // [10] main::line#1 = main::line#2 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [1] phi main::line#2 = main::line#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

