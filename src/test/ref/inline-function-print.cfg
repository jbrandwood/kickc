@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::print1
main::print1: scope:[main]  from main
  [5] phi()
  to:main::print1_@1
main::print1_@1: scope:[main]  from main::print1 main::print1_@2
  [6] (byte) main::print1_j#2 ← phi( main::print1/(byte) 0 main::print1_@2/(byte) main::print1_j#1 )
  [6] (byte) main::print1_i#2 ← phi( main::print1/(byte) 0 main::print1_@2/(byte) main::print1_i#1 )
  [7] if((byte) 0!=*((const byte*) main::hello + (byte) main::print1_i#2)) goto main::print1_@2
  to:main::print2
main::print2: scope:[main]  from main::print1_@1
  [8] phi()
  to:main::print2_@1
main::print2_@1: scope:[main]  from main::print2 main::print2_@2
  [9] (byte) main::print2_j#2 ← phi( main::print2/(byte) 0 main::print2_@2/(byte) main::print2_j#1 )
  [9] (byte) main::print2_i#2 ← phi( main::print2/(byte) 0 main::print2_@2/(byte) main::print2_i#1 )
  [10] if((byte) 0!=*((const byte*) main::hello + (byte) main::print2_i#2)) goto main::print2_@2
  to:main::@return
main::@return: scope:[main]  from main::print2_@1
  [11] return 
  to:@return
main::print2_@2: scope:[main]  from main::print2_@1
  [12] *((const byte*) main::print2_at#0 + (byte) main::print2_j#2) ← *((const byte*) main::hello + (byte) main::print2_i#2)
  [13] (byte) main::print2_j#1 ← (byte) main::print2_j#2 + (byte) 2
  [14] (byte) main::print2_i#1 ← ++ (byte) main::print2_i#2
  to:main::print2_@1
main::print1_@2: scope:[main]  from main::print1_@1
  [15] *((const byte*) screen + (byte) main::print1_j#2) ← *((const byte*) main::hello + (byte) main::print1_i#2)
  [16] (byte) main::print1_j#1 ← (byte) main::print1_j#2 + (byte) 2
  [17] (byte) main::print1_i#1 ← ++ (byte) main::print1_i#2
  to:main::print1_@1
