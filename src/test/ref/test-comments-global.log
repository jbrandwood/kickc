Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  *((byte*) screen) ← (byte) 'a'
  (byte*) screen ← ++ (byte*) screen
  *((byte*) screen) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte*) screen ← (byte*)(number) $400
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) main()
(label) main::@return
(byte*) screen loadstore

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of _start::@2
CALL GRAPH
Calls in [_start] to main:3 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) _start::@2
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1

FINAL CONTROL FLOW GRAPH

(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (byte*) screen ← (byte*) 1024
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [2] phi()
  [3] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [4] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [5] *((byte*) screen) ← (byte) 'a'
  [6] (byte*) screen ← ++ (byte*) screen
  [7] *((byte*) screen) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) _start()
(void()) main()
(byte*) screen loadstore 11.5

Initial phi equivalence classes
Added variable screen to live range equivalence class [ screen ]
Complete equivalence classes
[ screen ]
Allocated zp[2]:2 [ screen ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests that global variables with initializer gets their comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  // The screen (should become a var-comment in ASM)
  .label screen = 2
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (byte*) screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
// The program entry point
main: {
    // [5] *((byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    // Put 'a' in screen
    lda #'a'
    ldy #0
    sta (screen),y
    // [6] (byte*) screen ← ++ (byte*) screen -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [7] *((byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    // Put another 'a' in screen
    lda #'a'
    ldy #0
    sta (screen),y
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte*) screen ← (byte*) 1024 [ screen ] (  [ screen ] { }  ) always clobbers reg byte a 
Statement [5] *((byte*) screen) ← (byte) 'a' [ screen ] ( main:3 [ screen ] { }  ) always clobbers reg byte a reg byte y 
Statement [7] *((byte*) screen) ← (byte) 'a' [ ] ( main:3 [ ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ screen ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 11.5: zp[2]:2 [ screen ] 
Uplift Scope [main] 
Uplift Scope [_start] 

Uplifting [] best 99 combination zp[2]:2 [ screen ] 
Uplifting [main] best 99 combination 
Uplifting [_start] best 99 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that global variables with initializer gets their comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  // The screen (should become a var-comment in ASM)
  .label screen = 2
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (byte*) screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
// The program entry point
main: {
    // [5] *((byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    // Put 'a' in screen
    lda #'a'
    ldy #0
    sta (screen),y
    // [6] (byte*) screen ← ++ (byte*) screen -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [7] *((byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    // Put another 'a' in screen
    lda #'a'
    ldy #0
    sta (screen),y
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp _init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from__init1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction _init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) _start()
(label) _start::@1
(label) _start::@return
(label) _start::_init1
(void()) main()
(label) main::@return
(byte*) screen loadstore zp[2]:2 11.5

zp[2]:2 [ screen ]


FINAL ASSEMBLER
Score: 60

  // File Comments
// Tests that global variables with initializer gets their comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  // The screen (should become a var-comment in ASM)
  .label screen = 2
  // _start
_start: {
    // _start::_init1
    // screen = 0x0400
    // [1] (byte*) screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
    // _start::@1
    // [3] call main 
    jsr main
    // _start::@return
    // [4] return 
    rts
}
  // main
// The program entry point
main: {
    // *screen = 'a'
    // [5] *((byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    // Put 'a' in screen
    lda #'a'
    ldy #0
    sta (screen),y
    // screen++;
    // [6] (byte*) screen ← ++ (byte*) screen -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *screen = 'a'
    // [7] *((byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    // Put another 'a' in screen
    lda #'a'
    ldy #0
    sta (screen),y
    // main::@return
    // }
    // [8] return 
    rts
}
  // File Data

