Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$0 = main::i#2 < $fa
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  SCREEN[main::i#3] = ' '
  main::$1 = SCREEN + $fa
  main::$1[main::i#3] = ' '
  main::$2 = SCREEN + $1f4
  main::$2[main::i#3] = ' '
  main::$3 = SCREEN + $2ee
  main::$3[main::i#3] = ' '
  main::i#1 = ++ main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte* SCREEN = (byte*)$400
void __start()
void main()
bool~ main::$0
byte*~ main::$1
byte*~ main::$2
byte*~ main::$3
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3

Adding number conversion cast (unumber) $fa in main::$0 = main::i#2 < $fa
Adding number conversion cast (unumber) $fa in main::$1 = SCREEN + $fa
Adding number conversion cast (unumber) $1f4 in main::$2 = SCREEN + $1f4
Adding number conversion cast (unumber) $2ee in main::$3 = SCREEN + $2ee
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $1f4
Simplifying constant integer cast $2ee
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $fa
Finalized unsigned number type $fa
Finalized unsigned number type $1f4
Finalized unsigned number type $2ee
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [3] if(main::i#2<$fa) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [5] main::$1 = SCREEN + $fa
Constant right-side identified [7] main::$2 = SCREEN + $1f4
Constant right-side identified [9] main::$3 = SCREEN + $2ee
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant main::$1 = SCREEN+$fa
Constant main::$2 = SCREEN+$1f4
Constant main::$3 = SCREEN+$2ee
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::$3 = SCREEN+$2ee
Constant inlined main::$1 = SCREEN+$fa
Constant inlined main::$2 = SCREEN+$1f4
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [9] main::i#4 = main::i#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] if(main::i#2<$fa) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] SCREEN[main::i#2] = ' '
  [5] (SCREEN+$fa)[main::i#2] = ' '
  [6] (SCREEN+$1f4)[main::i#2] = ' '
  [7] (SCREEN+$2ee)[main::i#2] = ' '
  [8] main::i#1 = ++ main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 22.0
byte main::i#2 12.833333333333334

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] SCREEN[main::i#2] = ' ' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [5] (SCREEN+$fa)[main::i#2] = ' ' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [6] (SCREEN+$1f4)[main::i#2] = ' ' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [7] (SCREEN+$2ee)[main::i#2] = ' ' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] SCREEN[main::i#2] = ' ' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] (SCREEN+$fa)[main::i#2] = ' ' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [6] (SCREEN+$1f4)[main::i#2] = ' ' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [7] (SCREEN+$2ee)[main::i#2] = ' ' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 34.83: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 461 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 461 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Fill screen using an efficient char-based index
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#2<$fa) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$fa
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] SCREEN[main::i#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [5] (SCREEN+$fa)[main::i#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN+$fa,x
    // [6] (SCREEN+$1f4)[main::i#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN+$1f4,x
    // [7] (SCREEN+$2ee)[main::i#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN+$2ee,x
    // [8] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #' '
Removing instruction lda #' '
Removing instruction lda #' '
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte* SCREEN = (byte*) 1024
void main()
byte main::i
byte main::i#1 reg byte x 22.0
byte main::i#2 reg byte x 12.833333333333334

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 341

  // File Comments
// Fill screen using an efficient char-based index
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // for(char i=0;i<250;i++)
    // [2] if(main::i#2<$fa) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$fa
    bcc __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // SCREEN[i] = ' '
    // [4] SCREEN[main::i#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // (SCREEN+250)[i] = ' '
    // [5] (SCREEN+$fa)[main::i#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    sta SCREEN+$fa,x
    // (SCREEN+500)[i] = ' '
    // [6] (SCREEN+$1f4)[main::i#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    sta SCREEN+$1f4,x
    // (SCREEN+750)[i] = ' '
    // [7] (SCREEN+$2ee)[main::i#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    sta SCREEN+$2ee,x
    // for(char i=0;i<250;i++)
    // [8] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

