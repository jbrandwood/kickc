byte STAR = 81;
byte[40*25] SCREEN = $0400;

main();

void main() {
  byte x0 = 4;
  byte y0 = 4;
  byte x1 = 39;
  byte y1 = 24;
  byte xd = x1-x0;
  byte yd = y1-y0;
  byte x = x0;
  byte y = y0;
  byte e = yd/2;
  byte *cursor = SCREEN+y*40+x;
  do  {
      *cursor = STAR;
      x = x + 1;
      cursor = cursor + 1;
      e = e+yd;
      if(xd<e) {
          y = y+1;
          cursor = cursor + 40;
          e = e - xd;
      }
  } while (x<(x1+1))
}
PROGRAM
  (byte) STAR ← (byte) 81
  (byte[1000]) SCREEN ← (word) 1024
  (void~) $0 ← call main 
proc (void()) main()
  (byte) main::x0 ← (byte) 4
  (byte) main::y0 ← (byte) 4
  (byte) main::x1 ← (byte) 39
  (byte) main::y1 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1 - (byte) main::x0
  (byte) main::xd ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1 - (byte) main::y0
  (byte) main::yd ← (byte~) main::$1
  (byte) main::x ← (byte) main::x0
  (byte) main::y ← (byte) main::y0
  (byte~) main::$2 ← (byte) main::yd / (byte) 2
  (byte) main::e ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN + (byte~) main::$3
  (byte*~) main::$5 ← (byte*~) main::$4 + (byte) main::x
  (byte*) main::cursor ← (byte*~) main::$5
main::@1:
  *((byte*) main::cursor) ← (byte) STAR
  (byte~) main::$6 ← (byte) main::x + (byte) 1
  (byte) main::x ← (byte~) main::$6
  (byte*~) main::$7 ← (byte*) main::cursor + (byte) 1
  (byte*) main::cursor ← (byte*~) main::$7
  (byte~) main::$8 ← (byte) main::e + (byte) main::yd
  (byte) main::e ← (byte~) main::$8
  (boolean~) main::$9 ← (byte) main::xd < (byte) main::e
  (boolean~) main::$10 ← ! (boolean~) main::$9
  if((boolean~) main::$10) goto main::@2
  (byte~) main::$11 ← (byte) main::y + (byte) 1
  (byte) main::y ← (byte~) main::$11
  (byte*~) main::$12 ← (byte*) main::cursor + (byte) 40
  (byte*) main::cursor ← (byte*~) main::$12
  (byte~) main::$13 ← (byte) main::e - (byte) main::xd
  (byte) main::e ← (byte~) main::$13
main::@2:
  (byte~) main::$14 ← (byte) main::x1 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
main::@return:
  return 
endproc // main()

SYMBOLS
(void~) $0
(byte[1000]) SCREEN
(byte) STAR
(void()) main()
(byte~) main::$0
(byte~) main::$1
(boolean~) main::$10
(byte~) main::$11
(byte*~) main::$12
(byte~) main::$13
(byte~) main::$14
(boolean~) main::$15
(byte~) main::$2
(byte~) main::$3
(byte*~) main::$4
(byte*~) main::$5
(byte~) main::$6
(byte*~) main::$7
(byte~) main::$8
(boolean~) main::$9
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::cursor
(byte) main::e
(byte) main::x
(byte) main::x0
(byte) main::x1
(byte) main::xd
(byte) main::y
(byte) main::y0
(byte) main::y1
(byte) main::yd

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) STAR ← (byte) 81
  (byte[1000]) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  (byte) main::x0 ← (byte) 4
  (byte) main::y0 ← (byte) 4
  (byte) main::x1 ← (byte) 39
  (byte) main::y1 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1 - (byte) main::x0
  (byte) main::xd ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1 - (byte) main::y0
  (byte) main::yd ← (byte~) main::$1
  (byte) main::x ← (byte) main::x0
  (byte) main::y ← (byte) main::y0
  (byte~) main::$2 ← (byte) main::yd / (byte) 2
  (byte) main::e ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN + (byte~) main::$3
  (byte*~) main::$5 ← (byte*~) main::$4 + (byte) main::x
  (byte*) main::cursor ← (byte*~) main::$5
  to:main::@1
main::@1: scope:[main]  from main main::@2
  *((byte*) main::cursor) ← (byte) STAR
  (byte~) main::$6 ← (byte) main::x + (byte) 1
  (byte) main::x ← (byte~) main::$6
  (byte*~) main::$7 ← (byte*) main::cursor + (byte) 1
  (byte*) main::cursor ← (byte*~) main::$7
  (byte~) main::$8 ← (byte) main::e + (byte) main::yd
  (byte) main::e ← (byte~) main::$8
  (boolean~) main::$9 ← (byte) main::xd < (byte) main::e
  (boolean~) main::$10 ← ! (boolean~) main::$9
  if((boolean~) main::$10) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte~) main::$14 ← (byte) main::x1 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  (byte~) main::$11 ← (byte) main::y + (byte) 1
  (byte) main::y ← (byte~) main::$11
  (byte*~) main::$12 ← (byte*) main::cursor + (byte) 40
  (byte*) main::cursor ← (byte*~) main::$12
  (byte~) main::$13 ← (byte) main::e - (byte) main::xd
  (byte) main::e ← (byte~) main::$13
  to:main::@2
main::@4: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
Removing empty block @1
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) STAR ← (byte) 81
  (byte[1000]) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  (byte) main::x0 ← (byte) 4
  (byte) main::y0 ← (byte) 4
  (byte) main::x1 ← (byte) 39
  (byte) main::y1 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1 - (byte) main::x0
  (byte) main::xd ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1 - (byte) main::y0
  (byte) main::yd ← (byte~) main::$1
  (byte) main::x ← (byte) main::x0
  (byte) main::y ← (byte) main::y0
  (byte~) main::$2 ← (byte) main::yd / (byte) 2
  (byte) main::e ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN + (byte~) main::$3
  (byte*~) main::$5 ← (byte*~) main::$4 + (byte) main::x
  (byte*) main::cursor ← (byte*~) main::$5
  to:main::@1
main::@1: scope:[main]  from main main::@2
  *((byte*) main::cursor) ← (byte) STAR
  (byte~) main::$6 ← (byte) main::x + (byte) 1
  (byte) main::x ← (byte~) main::$6
  (byte*~) main::$7 ← (byte*) main::cursor + (byte) 1
  (byte*) main::cursor ← (byte*~) main::$7
  (byte~) main::$8 ← (byte) main::e + (byte) main::yd
  (byte) main::e ← (byte~) main::$8
  (boolean~) main::$9 ← (byte) main::xd < (byte) main::e
  (boolean~) main::$10 ← ! (boolean~) main::$9
  if((boolean~) main::$10) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte~) main::$14 ← (byte) main::x1 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte~) main::$11 ← (byte) main::y + (byte) 1
  (byte) main::y ← (byte~) main::$11
  (byte*~) main::$12 ← (byte*) main::cursor + (byte) 40
  (byte*) main::cursor ← (byte*~) main::$12
  (byte~) main::$13 ← (byte) main::e - (byte) main::xd
  (byte) main::e ← (byte~) main::$13
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte) STAR ← (byte) 81
  (byte[1000]) SCREEN ← (word) 1024
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) main::x0 ← (byte) 4
  (byte) main::y0 ← (byte) 4
  (byte) main::x1 ← (byte) 39
  (byte) main::y1 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1 - (byte) main::x0
  (byte) main::xd ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1 - (byte) main::y0
  (byte) main::yd ← (byte~) main::$1
  (byte) main::x ← (byte) main::x0
  (byte) main::y ← (byte) main::y0
  (byte~) main::$2 ← (byte) main::yd / (byte) 2
  (byte) main::e ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN + (byte~) main::$3
  (byte*~) main::$5 ← (byte*~) main::$4 + (byte) main::x
  (byte*) main::cursor ← (byte*~) main::$5
  to:main::@1
main::@1: scope:[main]  from main main::@2
  *((byte*) main::cursor) ← (byte) STAR
  (byte~) main::$6 ← (byte) main::x + (byte) 1
  (byte) main::x ← (byte~) main::$6
  (byte*~) main::$7 ← (byte*) main::cursor + (byte) 1
  (byte*) main::cursor ← (byte*~) main::$7
  (byte~) main::$8 ← (byte) main::e + (byte) main::yd
  (byte) main::e ← (byte~) main::$8
  (boolean~) main::$9 ← (byte) main::xd < (byte) main::e
  (boolean~) main::$10 ← ! (boolean~) main::$9
  if((boolean~) main::$10) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte~) main::$14 ← (byte) main::x1 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte~) main::$11 ← (byte) main::y + (byte) 1
  (byte) main::y ← (byte~) main::$11
  (byte*~) main::$12 ← (byte*) main::cursor + (byte) 40
  (byte*) main::cursor ← (byte*~) main::$12
  (byte~) main::$13 ← (byte) main::e - (byte) main::xd
  (byte) main::e ← (byte~) main::$13
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) STAR#0 ← (byte) 81
  (byte[1000]) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) STAR#2 ← phi( @begin/(byte) STAR#0 )
  (byte[1000]) SCREEN#1 ← phi( @begin/(byte[1000]) SCREEN#0 )
  (byte) main::x0#0 ← (byte) 4
  (byte) main::y0#0 ← (byte) 4
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1#0 - (byte) main::x0#0
  (byte) main::xd#0 ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1#0 - (byte) main::y0#0
  (byte) main::yd#0 ← (byte~) main::$1
  (byte) main::x#0 ← (byte) main::x0#0
  (byte) main::y#0 ← (byte) main::y0#0
  (byte~) main::$2 ← (byte) main::yd#0 / (byte) 2
  (byte) main::e#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN#1 + (byte~) main::$3
  (byte*~) main::$5 ← (byte*~) main::$4 + (byte) main::x#0
  (byte*) main::cursor#0 ← (byte*~) main::$5
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#3 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  (byte) STAR#1 ← phi( main/(byte) STAR#2 main::@2/(byte) STAR#3 )
  *((byte*) main::cursor#3) ← (byte) STAR#1
  (byte~) main::$6 ← (byte) main::x#2 + (byte) 1
  (byte) main::x#1 ← (byte~) main::$6
  (byte*~) main::$7 ← (byte*) main::cursor#3 + (byte) 1
  (byte*) main::cursor#1 ← (byte*~) main::$7
  (byte~) main::$8 ← (byte) main::e#3 + (byte) main::yd#1
  (byte) main::e#1 ← (byte~) main::$8
  (boolean~) main::$9 ← (byte) main::xd#1 < (byte) main::e#1
  (boolean~) main::$10 ← ! (boolean~) main::$9
  if((boolean~) main::$10) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#3 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#2 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#3 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  (byte) STAR#3 ← phi( main::@1/(byte) STAR#1 main::@3/(byte) STAR#4 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#4 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#3 )
  (byte~) main::$14 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x#3 < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::yd#3 ← phi( main::@1/(byte) main::yd#1 )
  (byte) STAR#4 ← phi( main::@1/(byte) STAR#1 )
  (byte) main::x#4 ← phi( main::@1/(byte) main::x#1 )
  (byte) main::x1#3 ← phi( main::@1/(byte) main::x1#2 )
  (byte) main::xd#2 ← phi( main::@1/(byte) main::xd#1 )
  (byte) main::e#4 ← phi( main::@1/(byte) main::e#1 )
  (byte*) main::cursor#4 ← phi( main::@1/(byte*) main::cursor#1 )
  (byte) main::y#2 ← phi( main::@1/(byte) main::y#3 )
  (byte~) main::$11 ← (byte) main::y#2 + (byte) 1
  (byte) main::y#1 ← (byte~) main::$11
  (byte*~) main::$12 ← (byte*) main::cursor#4 + (byte) 40
  (byte*) main::cursor#2 ← (byte*~) main::$12
  (byte~) main::$13 ← (byte) main::e#4 - (byte) main::xd#2
  (byte) main::e#2 ← (byte~) main::$13
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte) STAR#0 ← (byte) 81
  (byte[1000]) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) STAR#2 ← phi( @begin/(byte) STAR#0 )
  (byte[1000]) SCREEN#1 ← phi( @begin/(byte[1000]) SCREEN#0 )
  (byte) main::x0#0 ← (byte) 4
  (byte) main::y0#0 ← (byte) 4
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1#0 - (byte) main::x0#0
  (byte) main::xd#0 ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1#0 - (byte) main::y0#0
  (byte) main::yd#0 ← (byte~) main::$1
  (byte) main::x#0 ← (byte) main::x0#0
  (byte) main::y#0 ← (byte) main::y0#0
  (byte~) main::$2 ← (byte) main::yd#0 / (byte) 2
  (byte) main::e#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN#1 + (byte~) main::$3
  (byte*~) main::$5 ← (byte*~) main::$4 + (byte) main::x#0
  (byte*) main::cursor#0 ← (byte*~) main::$5
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#3 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  (byte) STAR#1 ← phi( main/(byte) STAR#2 main::@2/(byte) STAR#3 )
  *((byte*) main::cursor#3) ← (byte) STAR#1
  (byte~) main::$6 ← (byte) main::x#2 + (byte) 1
  (byte) main::x#1 ← (byte~) main::$6
  (byte*~) main::$7 ← (byte*) main::cursor#3 + (byte) 1
  (byte*) main::cursor#1 ← (byte*~) main::$7
  (byte~) main::$8 ← (byte) main::e#3 + (byte) main::yd#1
  (byte) main::e#1 ← (byte~) main::$8
  (boolean~) main::$9 ← (byte) main::xd#1 < (byte) main::e#1
  (boolean~) main::$10 ← ! (boolean~) main::$9
  if((boolean~) main::$10) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#3 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#2 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#3 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  (byte) STAR#3 ← phi( main::@1/(byte) STAR#1 main::@3/(byte) STAR#4 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#4 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#3 )
  (byte~) main::$14 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x#3 < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::yd#3 ← phi( main::@1/(byte) main::yd#1 )
  (byte) STAR#4 ← phi( main::@1/(byte) STAR#1 )
  (byte) main::x#4 ← phi( main::@1/(byte) main::x#1 )
  (byte) main::x1#3 ← phi( main::@1/(byte) main::x1#2 )
  (byte) main::xd#2 ← phi( main::@1/(byte) main::xd#1 )
  (byte) main::e#4 ← phi( main::@1/(byte) main::e#1 )
  (byte*) main::cursor#4 ← phi( main::@1/(byte*) main::cursor#1 )
  (byte) main::y#2 ← phi( main::@1/(byte) main::y#3 )
  (byte~) main::$11 ← (byte) main::y#2 + (byte) 1
  (byte) main::y#1 ← (byte~) main::$11
  (byte*~) main::$12 ← (byte*) main::cursor#4 + (byte) 40
  (byte*) main::cursor#2 ← (byte*~) main::$12
  (byte~) main::$13 ← (byte) main::e#4 - (byte) main::xd#2
  (byte) main::e#2 ← (byte~) main::$13
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte[1000]) SCREEN
(byte[1000]) SCREEN#0
(byte[1000]) SCREEN#1
(byte) STAR
(byte) STAR#0
(byte) STAR#1
(byte) STAR#2
(byte) STAR#3
(byte) STAR#4
(void()) main()
(byte~) main::$0
(byte~) main::$1
(boolean~) main::$10
(byte~) main::$11
(byte*~) main::$12
(byte~) main::$13
(byte~) main::$14
(boolean~) main::$15
(byte~) main::$2
(byte~) main::$3
(byte*~) main::$4
(byte*~) main::$5
(byte~) main::$6
(byte*~) main::$7
(byte~) main::$8
(boolean~) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::cursor
(byte*) main::cursor#0
(byte*) main::cursor#1
(byte*) main::cursor#2
(byte*) main::cursor#3
(byte*) main::cursor#4
(byte*) main::cursor#5
(byte) main::e
(byte) main::e#0
(byte) main::e#1
(byte) main::e#2
(byte) main::e#3
(byte) main::e#4
(byte) main::e#5
(byte) main::x
(byte) main::x#0
(byte) main::x#1
(byte) main::x#2
(byte) main::x#3
(byte) main::x#4
(byte) main::x0
(byte) main::x0#0
(byte) main::x1
(byte) main::x1#0
(byte) main::x1#1
(byte) main::x1#2
(byte) main::x1#3
(byte) main::xd
(byte) main::xd#0
(byte) main::xd#1
(byte) main::xd#2
(byte) main::xd#3
(byte) main::y
(byte) main::y#0
(byte) main::y#1
(byte) main::y#2
(byte) main::y#3
(byte) main::y#4
(byte) main::y0
(byte) main::y0#0
(byte) main::y1
(byte) main::y1#0
(byte) main::yd
(byte) main::yd#0
(byte) main::yd#1
(byte) main::yd#2
(byte) main::yd#3

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) STAR#0 ← (byte) 81
  (byte[1000]) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) STAR#2 ← phi( @begin/(byte) STAR#0 )
  (byte[1000]) SCREEN#1 ← phi( @begin/(byte[1000]) SCREEN#0 )
  (byte) main::x0#0 ← (byte) 4
  (byte) main::y0#0 ← (byte) 4
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1#0 - (byte) main::x0#0
  (byte) main::xd#0 ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1#0 - (byte) main::y0#0
  (byte) main::yd#0 ← (byte~) main::$1
  (byte) main::x#0 ← (byte) main::x0#0
  (byte) main::y#0 ← (byte) main::y0#0
  (byte~) main::$2 ← (byte) main::yd#0 / (byte) 2
  (byte) main::e#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN#1 + (byte~) main::$3
  (byte*~) main::$5 ← (byte*~) main::$4 + (byte) main::x#0
  (byte*) main::cursor#0 ← (byte*~) main::$5
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#3 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  (byte) STAR#1 ← phi( main/(byte) STAR#2 main::@2/(byte) STAR#3 )
  *((byte*) main::cursor#3) ← (byte) STAR#1
  (byte~) main::$6 ← (byte) main::x#2 + (byte) 1
  (byte) main::x#1 ← (byte~) main::$6
  (byte*~) main::$7 ← (byte*) main::cursor#3 + (byte) 1
  (byte*) main::cursor#1 ← (byte*~) main::$7
  (byte~) main::$8 ← (byte) main::e#3 + (byte) main::yd#1
  (byte) main::e#1 ← (byte~) main::$8
  (boolean~) main::$9 ← (byte) main::xd#1 < (byte) main::e#1
  (boolean~) main::$10 ← ! (boolean~) main::$9
  if((boolean~) main::$10) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#3 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#2 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#3 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  (byte) STAR#3 ← phi( main::@1/(byte) STAR#1 main::@3/(byte) STAR#4 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#4 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#3 )
  (byte~) main::$14 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x#3 < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::yd#3 ← phi( main::@1/(byte) main::yd#1 )
  (byte) STAR#4 ← phi( main::@1/(byte) STAR#1 )
  (byte) main::x#4 ← phi( main::@1/(byte) main::x#1 )
  (byte) main::x1#3 ← phi( main::@1/(byte) main::x1#2 )
  (byte) main::xd#2 ← phi( main::@1/(byte) main::xd#1 )
  (byte) main::e#4 ← phi( main::@1/(byte) main::e#1 )
  (byte*) main::cursor#4 ← phi( main::@1/(byte*) main::cursor#1 )
  (byte) main::y#2 ← phi( main::@1/(byte) main::y#3 )
  (byte~) main::$11 ← (byte) main::y#2 + (byte) 1
  (byte) main::y#1 ← (byte~) main::$11
  (byte*~) main::$12 ← (byte*) main::cursor#4 + (byte) 40
  (byte*) main::cursor#2 ← (byte*~) main::$12
  (byte~) main::$13 ← (byte) main::e#4 - (byte) main::xd#2
  (byte) main::e#2 ← (byte~) main::$13
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Inversing boolean not (boolean~) main::$10 ← (byte) main::xd#1 >= (byte) main::e#1 from (boolean~) main::$9 ← (byte) main::xd#1 < (byte) main::e#1
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) STAR#0 ← (byte) 81
  (byte[1000]) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) STAR#2 ← phi( @begin/(byte) STAR#0 )
  (byte[1000]) SCREEN#1 ← phi( @begin/(byte[1000]) SCREEN#0 )
  (byte) main::x0#0 ← (byte) 4
  (byte) main::y0#0 ← (byte) 4
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1#0 - (byte) main::x0#0
  (byte) main::xd#0 ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1#0 - (byte) main::y0#0
  (byte) main::yd#0 ← (byte~) main::$1
  (byte) main::x#0 ← (byte) main::x0#0
  (byte) main::y#0 ← (byte) main::y0#0
  (byte~) main::$2 ← (byte) main::yd#0 / (byte) 2
  (byte) main::e#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN#1 + (byte~) main::$3
  (byte*~) main::$5 ← (byte*~) main::$4 + (byte) main::x#0
  (byte*) main::cursor#0 ← (byte*~) main::$5
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#3 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  (byte) STAR#1 ← phi( main/(byte) STAR#2 main::@2/(byte) STAR#3 )
  *((byte*) main::cursor#3) ← (byte) STAR#1
  (byte~) main::$6 ← (byte) main::x#2 + (byte) 1
  (byte) main::x#1 ← (byte~) main::$6
  (byte*~) main::$7 ← (byte*) main::cursor#3 + (byte) 1
  (byte*) main::cursor#1 ← (byte*~) main::$7
  (byte~) main::$8 ← (byte) main::e#3 + (byte) main::yd#1
  (byte) main::e#1 ← (byte~) main::$8
  (boolean~) main::$10 ← (byte) main::xd#1 >= (byte) main::e#1
  if((boolean~) main::$10) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#3 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#2 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#3 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  (byte) STAR#3 ← phi( main::@1/(byte) STAR#1 main::@3/(byte) STAR#4 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#4 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#3 )
  (byte~) main::$14 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x#3 < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::yd#3 ← phi( main::@1/(byte) main::yd#1 )
  (byte) STAR#4 ← phi( main::@1/(byte) STAR#1 )
  (byte) main::x#4 ← phi( main::@1/(byte) main::x#1 )
  (byte) main::x1#3 ← phi( main::@1/(byte) main::x1#2 )
  (byte) main::xd#2 ← phi( main::@1/(byte) main::xd#1 )
  (byte) main::e#4 ← phi( main::@1/(byte) main::e#1 )
  (byte*) main::cursor#4 ← phi( main::@1/(byte*) main::cursor#1 )
  (byte) main::y#2 ← phi( main::@1/(byte) main::y#3 )
  (byte~) main::$11 ← (byte) main::y#2 + (byte) 1
  (byte) main::y#1 ← (byte~) main::$11
  (byte*~) main::$12 ← (byte*) main::cursor#4 + (byte) 40
  (byte*) main::cursor#2 ← (byte*~) main::$12
  (byte~) main::$13 ← (byte) main::e#4 - (byte) main::xd#2
  (byte) main::e#2 ← (byte~) main::$13
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Alias (byte[1000]) SCREEN#0 = (byte[1000]) SCREEN#1 
Alias (byte) STAR#0 = (byte) STAR#2 
Alias (byte) main::xd#0 = (byte~) main::$0 
Alias (byte) main::yd#0 = (byte~) main::$1 
Alias (byte) main::x#0 = (byte) main::x0#0 
Alias (byte) main::y#0 = (byte) main::y0#0 
Alias (byte) main::e#0 = (byte~) main::$2 
Alias (byte*) main::cursor#0 = (byte*~) main::$5 
Alias (byte) main::x#1 = (byte~) main::$6 (byte) main::x#4 
Alias (byte*) main::cursor#1 = (byte*~) main::$7 (byte*) main::cursor#4 
Alias (byte) main::e#1 = (byte~) main::$8 (byte) main::e#4 
Alias (byte) main::y#2 = (byte) main::y#3 
Alias (byte) main::xd#1 = (byte) main::xd#2 
Alias (byte) main::x1#2 = (byte) main::x1#3 
Alias (byte) STAR#1 = (byte) STAR#4 
Alias (byte) main::yd#1 = (byte) main::yd#3 
Alias (byte) main::y#1 = (byte~) main::$11 
Alias (byte*) main::cursor#2 = (byte*~) main::$12 
Alias (byte) main::e#2 = (byte~) main::$13 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) STAR#0 ← (byte) 81
  (byte[1000]) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::x#0 ← (byte) 4
  (byte) main::y#0 ← (byte) 4
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte) main::xd#0 ← (byte) main::x1#0 - (byte) main::x#0
  (byte) main::yd#0 ← (byte) main::y1#0 - (byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN#0 + (byte~) main::$3
  (byte*) main::cursor#0 ← (byte*~) main::$4 + (byte) main::x#0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  (byte) STAR#1 ← phi( main/(byte) STAR#0 main::@2/(byte) STAR#3 )
  *((byte*) main::cursor#3) ← (byte) STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#1
  (boolean~) main::$10 ← (byte) main::xd#1 >= (byte) main::e#1
  if((boolean~) main::$10) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#1 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  (byte) STAR#3 ← phi( main::@1/(byte) STAR#1 main::@3/(byte) STAR#1 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#1 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#2 )
  (byte~) main::$14 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x#3 < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Redundant Phi (byte) main::x1#1 (byte) main::x1#2
Redundant Phi (byte) main::x#3 (byte) main::x#1
Redundant Phi (byte) STAR#3 (byte) STAR#1
Redundant Phi (byte) main::yd#2 (byte) main::yd#1
Redundant Phi (byte) main::xd#3 (byte) main::xd#1
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) STAR#0 ← (byte) 81
  (byte[1000]) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::x#0 ← (byte) 4
  (byte) main::y#0 ← (byte) 4
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte) main::xd#0 ← (byte) main::x1#0 - (byte) main::x#0
  (byte) main::yd#0 ← (byte) main::y1#0 - (byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN#0 + (byte~) main::$3
  (byte*) main::cursor#0 ← (byte*~) main::$4 + (byte) main::x#0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#2 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#1 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#1 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#1 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  (byte) STAR#1 ← phi( main/(byte) STAR#0 main::@2/(byte) STAR#1 )
  *((byte*) main::cursor#3) ← (byte) STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#1
  (boolean~) main::$10 ← (byte) main::xd#1 >= (byte) main::e#1
  if((boolean~) main::$10) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  (byte~) main::$14 ← (byte) main::x1#2 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x#1 < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Self Phi Eliminated (byte) STAR#1
Self Phi Eliminated (byte) main::yd#1
Self Phi Eliminated (byte) main::xd#1
Self Phi Eliminated (byte) main::x1#2
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) STAR#0 ← (byte) 81
  (byte[1000]) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::x#0 ← (byte) 4
  (byte) main::y#0 ← (byte) 4
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte) main::xd#0 ← (byte) main::x1#0 - (byte) main::x#0
  (byte) main::yd#0 ← (byte) main::y1#0 - (byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN#0 + (byte~) main::$3
  (byte*) main::cursor#0 ← (byte*~) main::$4 + (byte) main::x#0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#1 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  (byte) STAR#1 ← phi( main/(byte) STAR#0 )
  *((byte*) main::cursor#3) ← (byte) STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#1
  (boolean~) main::$10 ← (byte) main::xd#1 >= (byte) main::e#1
  if((boolean~) main::$10) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  (byte~) main::$14 ← (byte) main::x1#2 + (byte) 1
  (boolean~) main::$15 ← (byte) main::x#1 < (byte~) main::$14
  if((boolean~) main::$15) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Simple Condition (boolean~) main::$10 if((byte) main::xd#1>=(byte) main::e#1) goto main::@2
Simple Condition (boolean~) main::$15 if((byte) main::x#1<(byte~) main::$14) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) STAR#0 ← (byte) 81
  (byte[1000]) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::x#0 ← (byte) 4
  (byte) main::y#0 ← (byte) 4
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte) main::xd#0 ← (byte) main::x1#0 - (byte) main::x#0
  (byte) main::yd#0 ← (byte) main::y1#0 - (byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte*~) main::$4 ← (byte[1000]) SCREEN#0 + (byte~) main::$3
  (byte*) main::cursor#0 ← (byte*~) main::$4 + (byte) main::x#0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#1 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  (byte) STAR#1 ← phi( main/(byte) STAR#0 )
  *((byte*) main::cursor#3) ← (byte) STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#1
  if((byte) main::xd#1>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  (byte~) main::$14 ← (byte) main::x1#2 + (byte) 1
  if((byte) main::x#1<(byte~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Constant (const byte) STAR#0 = 81
Constant (const byte[1000]) SCREEN#0 = 1024
Constant (const byte) main::x#0 = 4
Constant (const byte) main::y#0 = 4
Constant (const byte) main::x1#0 = 39
Constant (const byte) main::y1#0 = 24
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::xd#0 ← (const byte) main::x1#0 - (const byte) main::x#0
  (byte) main::yd#0 ← (const byte) main::y1#0 - (const byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (const byte) main::y#0 * (byte) 40
  (byte*~) main::$4 ← (const byte[1000]) SCREEN#0 + (byte~) main::$3
  (byte*) main::cursor#0 ← (byte*~) main::$4 + (const byte) main::x#0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(const byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(const byte) main::x1#0 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(const byte) main::x#0 main::@2/(byte) main::x#1 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  (byte) STAR#1 ← phi( main/(const byte) STAR#0 )
  *((byte*) main::cursor#3) ← (byte) STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#1
  if((byte) main::xd#1>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  (byte~) main::$14 ← (byte) main::x1#2 + (byte) 1
  if((byte) main::x#1<(byte~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Constant (const byte) main::xd#0 = main::x1#0-main::x#0
Constant (const byte) main::yd#0 = main::y1#0-main::y#0
Constant (const byte) main::$3 = main::y#0*40
Constant (const byte) STAR#1 = STAR#0
Constant (const byte) main::x1#2 = main::x1#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::e#0 ← (const byte) main::yd#0 / (byte) 2
  (byte*~) main::$4 ← (const byte[1000]) SCREEN#0 + (const byte) main::$3
  (byte*) main::cursor#0 ← (byte*~) main::$4 + (const byte) main::x#0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(const byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::xd#1 ← phi( main/(const byte) main::xd#0 )
  (byte) main::yd#1 ← phi( main/(const byte) main::yd#0 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(const byte) main::x#0 main::@2/(byte) main::x#1 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  *((byte*) main::cursor#3) ← (const byte) STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#1
  if((byte) main::xd#1>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  (byte~) main::$14 ← (const byte) main::x1#2 + (byte) 1
  if((byte) main::x#1<(byte~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Constant (const byte) main::e#0 = main::yd#0/2
Constant (const byte*) main::$4 = SCREEN#0+main::$3
Constant (const byte) main::yd#1 = main::yd#0
Constant (const byte) main::xd#1 = main::xd#0
Constant (const byte) main::$14 = main::x1#2+1
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) main::cursor#0 ← (const byte*) main::$4 + (const byte) main::x#0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(const byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::e#3 ← phi( main/(const byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(const byte) main::x#0 main::@2/(byte) main::x#1 )
  (byte*) main::cursor#3 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  *((byte*) main::cursor#3) ← (const byte) STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#1
  if((const byte) main::xd#1>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  if((byte) main::x#1<(const byte) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Constant (const byte*) main::cursor#0 = main::$4+main::x#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(const byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::e#3 ← phi( main/(const byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(const byte) main::x#0 main::@2/(byte) main::x#1 )
  (byte*) main::cursor#3 ← phi( main/(const byte*) main::cursor#0 main::@2/(byte*) main::cursor#5 )
  *((byte*) main::cursor#3) ← (const byte) STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#1
  if((const byte) main::xd#1>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  if((byte) main::x#1<(const byte) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) main::y#2
Multiple usages for variable. Not optimizing sub-constant (byte*) main::cursor#1
Multiple usages for variable. Not optimizing sub-constant (byte) main::y#2
Multiple usages for variable. Not optimizing sub-constant (byte*) main::cursor#1
Constant inlined main::$3 = (byte) 4*(byte) 40
Constant inlined main::$4 = (const byte[1000]) SCREEN#0+(byte) 4*(byte) 40
Constant inlined main::xd#1 = (const byte) main::xd#0
Constant inlined main::x#0 = (byte) 4
Constant inlined STAR#1 = (const byte) STAR#0
Constant inlined main::x1#2 = (const byte) main::x1#0
Constant inlined main::cursor#0 = (const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4
Constant inlined main::$14 = (const byte) main::x1#0+(byte) 1
Constant inlined main::y#0 = (byte) 4
Constant inlined main::e#0 = (const byte) main::yd#0/(byte) 2
Constant inlined main::yd#1 = (const byte) main::yd#0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) 4 main::@2/(byte) main::y#4 )
  (byte) main::e#3 ← phi( main/(const byte) main::yd#0/(byte) 2 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) 4 main::@2/(byte) main::x#1 )
  (byte*) main::cursor#3 ← phi( main/(const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4 main::@2/(byte*) main::cursor#5 )
  *((byte*) main::cursor#3) ← (const byte) STAR#0
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0
  if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 )
  if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte[1000]) SCREEN
(const byte[1000]) SCREEN#0 = (word) 1024
(byte) STAR
(const byte) STAR#0 = (byte) 81
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::cursor
(byte*) main::cursor#1
(byte*) main::cursor#2
(byte*) main::cursor#3
(byte*) main::cursor#5
(byte) main::e
(byte) main::e#1
(byte) main::e#2
(byte) main::e#3
(byte) main::e#5
(byte) main::x
(byte) main::x#1
(byte) main::x#2
(byte) main::x0
(byte) main::x1
(const byte) main::x1#0 = (byte) 39
(byte) main::xd
(const byte) main::xd#0 = (const byte) main::x1#0-(byte) 4
(byte) main::y
(byte) main::y#1
(byte) main::y#2
(byte) main::y#4
(byte) main::y0
(byte) main::y1
(const byte) main::y1#0 = (byte) 24
(byte) main::yd
(const byte) main::yd#0 = (const byte) main::y1#0-(byte) 4

Block Sequence Planned @begin @end main main::@1 main::@3 main::@2 main::@return 
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Added new block during phi lifting main::@6(between main::@1 and main::@2)
Block Sequence Planned @begin @end main main::@1 main::@3 main::@2 main::@return main::@5 main::@6 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::y#2 ← phi( main/(byte) 4 main::@5/(byte~) main::y#5 )
  (byte) main::e#3 ← phi( main/(const byte) main::yd#0/(byte) 2 main::@5/(byte~) main::e#6 )
  (byte) main::x#2 ← phi( main/(byte) 4 main::@5/(byte~) main::x#5 )
  (byte*) main::cursor#3 ← phi( main/(const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4 main::@5/(byte*~) main::cursor#6 )
  *((byte*) main::cursor#3) ← (const byte) STAR#0
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0
  if((const byte) main::xd#0>=(byte) main::e#1) goto main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0
  (byte*~) main::cursor#8 ← (byte*) main::cursor#2
  (byte~) main::e#8 ← (byte) main::e#2
  (byte~) main::y#7 ← (byte) main::y#1
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  (byte) main::y#4 ← phi( main::@6/(byte~) main::y#6 main::@3/(byte~) main::y#7 )
  (byte) main::e#5 ← phi( main::@6/(byte~) main::e#7 main::@3/(byte~) main::e#8 )
  (byte*) main::cursor#5 ← phi( main::@6/(byte*~) main::cursor#7 main::@3/(byte*~) main::cursor#8 )
  if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@5
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
main::@5: scope:[main]  from main::@2
  (byte*~) main::cursor#6 ← (byte*) main::cursor#5
  (byte~) main::x#5 ← (byte) main::x#1
  (byte~) main::e#6 ← (byte) main::e#5
  (byte~) main::y#5 ← (byte) main::y#4
  to:main::@1
main::@6: scope:[main]  from main::@1
  (byte*~) main::cursor#7 ← (byte*) main::cursor#1
  (byte~) main::e#7 ← (byte) main::e#1
  (byte~) main::y#6 ← (byte) main::y#2
  to:main::@2

Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to 0:main 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [2] (byte) main::y#2 ← phi( main/(byte) 4 main::@5/(byte~) main::y#5 ) [ main::cursor#3 main::x#2 main::e#3 main::y#2 ]
  [2] (byte) main::e#3 ← phi( main/(const byte) main::yd#0/(byte) 2 main::@5/(byte~) main::e#6 ) [ main::cursor#3 main::x#2 main::e#3 main::y#2 ]
  [2] (byte) main::x#2 ← phi( main/(byte) 4 main::@5/(byte~) main::x#5 ) [ main::cursor#3 main::x#2 main::e#3 main::y#2 ]
  [2] (byte*) main::cursor#3 ← phi( main/(const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4 main::@5/(byte*~) main::cursor#6 ) [ main::cursor#3 main::x#2 main::e#3 main::y#2 ]
  [3] *((byte*) main::cursor#3) ← (const byte) STAR#0 [ main::cursor#3 main::x#2 main::e#3 main::y#2 ]
  [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::cursor#3 main::e#3 main::y#2 main::x#1 ]
  [5] (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::cursor#1 ]
  [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ]
  [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@6 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::cursor#1 main::e#1 main::y#1 ]
  [9] (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::cursor#2 ]
  [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::cursor#2 main::e#2 ]
  [11] (byte*~) main::cursor#8 ← (byte*) main::cursor#2 [ main::x#1 main::y#1 main::e#2 main::cursor#8 ]
  [12] (byte~) main::e#8 ← (byte) main::e#2 [ main::x#1 main::y#1 main::cursor#8 main::e#8 ]
  [13] (byte~) main::y#7 ← (byte) main::y#1 [ main::x#1 main::cursor#8 main::e#8 main::y#7 ]
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  [14] (byte) main::y#4 ← phi( main::@6/(byte~) main::y#6 main::@3/(byte~) main::y#7 ) [ main::x#1 main::cursor#5 main::e#5 main::y#4 ]
  [14] (byte) main::e#5 ← phi( main::@6/(byte~) main::e#7 main::@3/(byte~) main::e#8 ) [ main::x#1 main::cursor#5 main::e#5 main::y#4 ]
  [14] (byte*) main::cursor#5 ← phi( main::@6/(byte*~) main::cursor#7 main::@3/(byte*~) main::cursor#8 ) [ main::x#1 main::cursor#5 main::e#5 main::y#4 ]
  [15] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@5 [ main::x#1 main::cursor#5 main::e#5 main::y#4 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [16] return  [ ]
  to:@return
main::@5: scope:[main]  from main::@2
  [17] (byte*~) main::cursor#6 ← (byte*) main::cursor#5 [ main::cursor#6 main::x#1 main::e#5 main::y#4 ]
  [18] (byte~) main::x#5 ← (byte) main::x#1 [ main::cursor#6 main::x#5 main::e#5 main::y#4 ]
  [19] (byte~) main::e#6 ← (byte) main::e#5 [ main::cursor#6 main::x#5 main::e#6 main::y#4 ]
  [20] (byte~) main::y#5 ← (byte) main::y#4 [ main::cursor#6 main::x#5 main::e#6 main::y#5 ]
  to:main::@1
main::@6: scope:[main]  from main::@1
  [21] (byte*~) main::cursor#7 ← (byte*) main::cursor#1 [ main::y#2 main::x#1 main::e#1 main::cursor#7 ]
  [22] (byte~) main::e#7 ← (byte) main::e#1 [ main::y#2 main::x#1 main::cursor#7 main::e#7 ]
  [23] (byte~) main::y#6 ← (byte) main::y#2 [ main::x#1 main::cursor#7 main::e#7 main::y#6 ]
  to:main::@2

Created 7 initial phi equivalence classes
Coalesced [11] main::cursor#8 ← main::cursor#2
Coalesced [12] main::e#8 ← main::e#2
Coalesced [13] main::y#7 ← main::y#1
Coalesced [17] main::cursor#6 ← main::cursor#5
Coalesced [18] main::x#5 ← main::x#1
Coalesced [19] main::e#6 ← main::e#5
Coalesced [20] main::y#5 ← main::y#4
Coalesced [21] main::cursor#7 ← main::cursor#1
Coalesced [22] main::e#7 ← main::e#1
Coalesced (already) [23] main::y#6 ← main::y#2
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Block Sequence Planned @begin @end main main::@1 main::@3 main::@2 main::@return 
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] (byte) main::y#2 ← phi( main/(byte) 4 main::@2/(byte) main::y#4 ) [ main::cursor#3 main::x#2 main::e#3 main::y#2 ]
  [2] (byte) main::e#3 ← phi( main/(const byte) main::yd#0/(byte) 2 main::@2/(byte) main::e#5 ) [ main::cursor#3 main::x#2 main::e#3 main::y#2 ]
  [2] (byte) main::x#2 ← phi( main/(byte) 4 main::@2/(byte) main::x#1 ) [ main::cursor#3 main::x#2 main::e#3 main::y#2 ]
  [2] (byte*) main::cursor#3 ← phi( main/(const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4 main::@2/(byte*) main::cursor#5 ) [ main::cursor#3 main::x#2 main::e#3 main::y#2 ]
  [3] *((byte*) main::cursor#3) ← (const byte) STAR#0 [ main::cursor#3 main::x#2 main::e#3 main::y#2 ]
  [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::cursor#3 main::e#3 main::y#2 main::x#1 ]
  [5] (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::cursor#1 ]
  [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ]
  [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::cursor#1 main::e#1 main::y#1 ]
  [9] (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::cursor#2 ]
  [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::cursor#2 main::e#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [11] (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 ) [ main::cursor#5 main::x#1 main::e#5 main::y#4 ]
  [11] (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 ) [ main::cursor#5 main::x#1 main::e#5 main::y#4 ]
  [11] (byte*) main::cursor#5 ← phi( main::@1/(byte*) main::cursor#1 main::@3/(byte*) main::cursor#2 ) [ main::cursor#5 main::x#1 main::e#5 main::y#4 ]
  [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::cursor#5 main::x#1 main::e#5 main::y#4 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [13] return  [ ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@1 dominated by  @begin main::@1 main 
main::@3 dominated by  @begin main::@1 main::@3 main 
main::@2 dominated by  @begin main::@2 main::@1 main 
main::@return dominated by  main::@return @begin main::@2 main::@1 main 

Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3  depth: 1


VARIABLE REGISTER WEIGHTS
(byte[1000]) SCREEN
(byte) STAR
(void()) main()
(byte*) main::cursor
(byte*) main::cursor#1 8.25
(byte*) main::cursor#2 11.0
(byte*) main::cursor#3 11.0
(byte*) main::cursor#5 16.5
(byte) main::e
(byte) main::e#1 11.0
(byte) main::e#2 22.0
(byte) main::e#3 5.5
(byte) main::e#5 16.5
(byte) main::x
(byte) main::x#1 3.666666666666667
(byte) main::x#2 11.0
(byte) main::x0
(byte) main::x1
(byte) main::xd
(byte) main::y
(byte) main::y#1 7.333333333333333
(byte) main::y#2 5.5
(byte) main::y#4 16.5
(byte) main::y0
(byte) main::y1
(byte) main::yd

Initial phi equivalence classes
[ main::cursor#3 main::cursor#5 main::cursor#1 main::cursor#2 ]
[ main::x#2 main::x#1 ]
[ main::e#3 main::e#5 main::e#1 main::e#2 ]
[ main::y#2 main::y#4 main::y#1 ]
Complete equivalence classes
[ main::cursor#3 main::cursor#5 main::cursor#1 main::cursor#2 ]
[ main::x#2 main::x#1 ]
[ main::e#3 main::e#5 main::e#1 main::e#2 ]
[ main::y#2 main::y#4 main::y#1 ]
Allocated zp ZP_PTR_BYTE:2 [ main::cursor#3 main::cursor#5 main::cursor#1 main::cursor#2 ]
Allocated zp ZP_BYTE:4 [ main::x#2 main::x#1 ]
Allocated zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Allocated zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ]
INITIAL ASM
//SEG0 Global Constants & labels
  .const STAR = $51
  .const SCREEN = $400
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
main_from_bbegin:
  jsr main
  jmp bend
//SEG4 @end
bend:
//SEG5 main
main: {
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-4
    .const yd = y1-4
    .label x = 4
    .label cursor = 2
    .label e = 5
    .label y = 6
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG7 [2] phi (byte) main::y#2 = (byte) 4 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #4
    sta y
  //SEG8 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- zpby1=coby1 
    lda #yd/2
    sta e
  //SEG9 [2] phi (byte) main::x#2 = (byte) 4 [phi:main->main::@1#2] -- zpby1=coby1 
    lda #4
    sta x
  //SEG10 [2] phi (byte*) main::cursor#3 = (const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4 [phi:main->main::@1#3] -- zpptrby1=cowo1 
    lda #<SCREEN+4*$28+4
    sta cursor
    lda #>SCREEN+4*$28+4
    sta cursor+1
    jmp b1
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG12 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG15 [2] phi (byte*) main::cursor#3 = (byte*) main::cursor#5 [phi:main::@2->main::@1#3] -- register_copy 
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [3] *((byte*) main::cursor#3) ← (const byte) STAR#0 [ main::cursor#3 main::x#2 main::e#3 main::y#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #STAR
    sta (cursor),y
  //SEG18 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::cursor#3 main::e#3 main::y#2 main::x#1 ] -- zpby1=zpby1_plus_1 
    inc x
  //SEG19 [5] (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::cursor#1 ] -- zpptrby1=zpptrby1_plus_1 
    inc cursor
    bne !+
    inc cursor+1
  !:
  //SEG20 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- zpby1=zpby1_plus_coby1 
    lda e
    clc
    adc #yd
    sta e
  //SEG21 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- coby1_ge_zpby1_then_la1 
    lda #xd
    cmp e
    bcs b2_from_b1
    jmp b3
  //SEG22 main::@3
  b3:
  //SEG23 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::cursor#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG24 [9] (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::cursor#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda cursor
    clc
    adc #$28
    sta cursor
    bcc !+
    inc cursor+1
  !:
  //SEG25 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::cursor#2 main::e#2 ] -- zpby1=zpby1_minus_coby1 
    sec
    sbc #xd
    sta e
  //SEG26 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG27 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG28 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG29 [11] phi (byte*) main::cursor#5 = (byte*) main::cursor#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
    jmp b2
  //SEG30 main::@2
  b2:
  //SEG31 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::cursor#5 main::x#1 main::e#5 main::y#4 ] -- zpby1_lt_coby1_then_la1 
    lda x
    cmp #x1+1
    bcc b1_from_b2
    jmp breturn
  //SEG32 main::@return
  breturn:
  //SEG33 [13] return  [ ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] *((byte*) main::cursor#3) ← (const byte) STAR#0 [ main::cursor#3 main::x#2 main::e#3 main::y#2 ] always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:4 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ]
Statement [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] always clobbers reg byte a 
Statement [9] (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::cursor#2 ] always clobbers reg byte a 
Statement [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::cursor#2 main::e#2 ] always clobbers reg byte a 
Statement [3] *((byte*) main::cursor#3) ← (const byte) STAR#0 [ main::cursor#3 main::x#2 main::e#3 main::y#2 ] always clobbers reg byte a reg byte y 
Statement [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] always clobbers reg byte a 
Statement [9] (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::cursor#2 ] always clobbers reg byte a 
Statement [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::cursor#2 main::e#2 ] always clobbers reg byte a 
Potential registers zp ZP_PTR_BYTE:2 [ main::cursor#3 main::cursor#5 main::cursor#1 main::cursor#2 ] : zp ZP_PTR_BYTE:2 , 
Potential registers zp ZP_BYTE:4 [ main::x#2 main::x#1 ] : zp ZP_BYTE:4 , reg byte x , 
Potential registers zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ] : zp ZP_BYTE:5 , reg byte x , 
Potential registers zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] : zp ZP_BYTE:6 , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 55: zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ] 46.75: zp ZP_PTR_BYTE:2 [ main::cursor#3 main::cursor#5 main::cursor#1 main::cursor#2 ] 29.33: zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] 14.67: zp ZP_BYTE:4 [ main::x#2 main::x#1 ] 
Uplift Scope [] 

Uplifting [main] best 1145 combination zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ] zp ZP_PTR_BYTE:2 [ main::cursor#3 main::cursor#5 main::cursor#1 main::cursor#2 ] zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] reg byte x [ main::x#2 main::x#1 ] 
Uplifting [] best 1145 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Uplifting [main] best 1145 combination zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ]
Uplifting [main] best 1145 combination zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] 
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:4 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Allocated (was zp ZP_BYTE:6) zp ZP_BYTE:5 [ main::y#2 main::y#4 main::y#1 ]
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const STAR = $51
  .const SCREEN = $400
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
main_from_bbegin:
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-4
    .const yd = y1-4
    .label cursor = 2
    .label e = 4
    .label y = 5
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG7 [2] phi (byte) main::y#2 = (byte) 4 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #4
    sta y
  //SEG8 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- zpby1=coby1 
    lda #yd/2
    sta e
  //SEG9 [2] phi (byte) main::x#2 = (byte) 4 [phi:main->main::@1#2] -- xby=coby1 
    ldx #4
  //SEG10 [2] phi (byte*) main::cursor#3 = (const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4 [phi:main->main::@1#3] -- zpptrby1=cowo1 
    lda #<SCREEN+4*$28+4
    sta cursor
    lda #>SCREEN+4*$28+4
    sta cursor+1
    jmp b1
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG12 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG15 [2] phi (byte*) main::cursor#3 = (byte*) main::cursor#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [3] *((byte*) main::cursor#3) ← (const byte) STAR#0 [ main::cursor#3 main::x#2 main::e#3 main::y#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #STAR
    sta (cursor),y
  //SEG18 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::cursor#3 main::e#3 main::y#2 main::x#1 ] -- xby=xby_plus_1 
    inx
  //SEG19 [5] (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::cursor#1 ] -- zpptrby1=zpptrby1_plus_1 
    inc cursor
    bne !+
    inc cursor+1
  !:
  //SEG20 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- zpby1=zpby1_plus_coby1 
    lda e
    clc
    adc #yd
    sta e
  //SEG21 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- coby1_ge_zpby1_then_la1 
    lda #xd
    cmp e
    bcs b2_from_b1
  //SEG22 main::@3
  b3:
  //SEG23 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::cursor#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG24 [9] (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::cursor#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda cursor
    clc
    adc #$28
    sta cursor
    bcc !+
    inc cursor+1
  !:
  //SEG25 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::cursor#2 main::e#2 ] -- zpby1=zpby1_minus_coby1 
    sec
    sbc #xd
    sta e
  //SEG26 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG27 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG28 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG29 [11] phi (byte*) main::cursor#5 = (byte*) main::cursor#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG30 main::@2
  b2:
  //SEG31 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::cursor#5 main::x#1 main::e#5 main::y#4 ] -- xby_lt_coby1_then_la1 
    cpx #x1+1
    bcc b1_from_b2
  //SEG32 main::@return
  breturn:
  //SEG33 [13] return  [ ]
    rts
}

Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Removing instruction main_from_bbegin:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const STAR = $51
  .const SCREEN = $400
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-4
    .const yd = y1-4
    .label cursor = 2
    .label e = 4
    .label y = 5
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG7 [2] phi (byte) main::y#2 = (byte) 4 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #4
    sta y
  //SEG8 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- zpby1=coby1 
    lda #yd/2
    sta e
  //SEG9 [2] phi (byte) main::x#2 = (byte) 4 [phi:main->main::@1#2] -- xby=coby1 
    ldx #4
  //SEG10 [2] phi (byte*) main::cursor#3 = (const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4 [phi:main->main::@1#3] -- zpptrby1=cowo1 
    lda #<SCREEN+4*$28+4
    sta cursor
    lda #>SCREEN+4*$28+4
    sta cursor+1
    jmp b1
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG12 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG15 [2] phi (byte*) main::cursor#3 = (byte*) main::cursor#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [3] *((byte*) main::cursor#3) ← (const byte) STAR#0 [ main::cursor#3 main::x#2 main::e#3 main::y#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #STAR
    sta (cursor),y
  //SEG18 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::cursor#3 main::e#3 main::y#2 main::x#1 ] -- xby=xby_plus_1 
    inx
  //SEG19 [5] (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::cursor#1 ] -- zpptrby1=zpptrby1_plus_1 
    inc cursor
    bne !+
    inc cursor+1
  !:
  //SEG20 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- zpby1=zpby1_plus_coby1 
    lda e
    clc
    adc #yd
    sta e
  //SEG21 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- coby1_ge_zpby1_then_la1 
    lda #xd
    cmp e
    bcs b2
  //SEG22 main::@3
  b3:
  //SEG23 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::cursor#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG24 [9] (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::cursor#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda cursor
    clc
    adc #$28
    sta cursor
    bcc !+
    inc cursor+1
  !:
  //SEG25 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::cursor#2 main::e#2 ] -- zpby1=zpby1_minus_coby1 
    sec
    sbc #xd
    sta e
  //SEG26 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG27 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG28 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG29 [11] phi (byte*) main::cursor#5 = (byte*) main::cursor#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG30 main::@2
  b2:
  //SEG31 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::cursor#5 main::x#1 main::e#5 main::y#4 ] -- xby_lt_coby1_then_la1 
    cpx #x1+1
    bcc b1
  //SEG32 main::@return
  breturn:
  //SEG33 [13] return  [ ]
    rts
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const STAR = $51
  .const SCREEN = $400
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
//SEG5 main
main: {
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-4
    .const yd = y1-4
    .label cursor = 2
    .label e = 4
    .label y = 5
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG7 [2] phi (byte) main::y#2 = (byte) 4 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #4
    sta y
  //SEG8 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- zpby1=coby1 
    lda #yd/2
    sta e
  //SEG9 [2] phi (byte) main::x#2 = (byte) 4 [phi:main->main::@1#2] -- xby=coby1 
    ldx #4
  //SEG10 [2] phi (byte*) main::cursor#3 = (const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4 [phi:main->main::@1#3] -- zpptrby1=cowo1 
    lda #<SCREEN+4*$28+4
    sta cursor
    lda #>SCREEN+4*$28+4
    sta cursor+1
    jmp b1
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG12 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG15 [2] phi (byte*) main::cursor#3 = (byte*) main::cursor#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [3] *((byte*) main::cursor#3) ← (const byte) STAR#0 [ main::cursor#3 main::x#2 main::e#3 main::y#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #STAR
    sta (cursor),y
  //SEG18 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::cursor#3 main::e#3 main::y#2 main::x#1 ] -- xby=xby_plus_1 
    inx
  //SEG19 [5] (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::cursor#1 ] -- zpptrby1=zpptrby1_plus_1 
    inc cursor
    bne !+
    inc cursor+1
  !:
  //SEG20 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- zpby1=zpby1_plus_coby1 
    lda e
    clc
    adc #yd
    sta e
  //SEG21 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- coby1_ge_zpby1_then_la1 
    lda #xd
    cmp e
    bcs b2
  //SEG22 main::@3
  //SEG23 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::cursor#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG24 [9] (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::cursor#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda cursor
    clc
    adc #$28
    sta cursor
    bcc !+
    inc cursor+1
  !:
  //SEG25 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::cursor#2 main::e#2 ] -- zpby1=zpby1_minus_coby1 
    sec
    sbc #xd
    sta e
  //SEG26 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG27 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG28 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG29 [11] phi (byte*) main::cursor#5 = (byte*) main::cursor#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG30 main::@2
  b2:
  //SEG31 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::cursor#5 main::x#1 main::e#5 main::y#4 ] -- xby_lt_coby1_then_la1 
    cpx #x1+1
    bcc b1
  //SEG32 main::@return
  //SEG33 [13] return  [ ]
    rts
}

Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const STAR = $51
  .const SCREEN = $400
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
//SEG5 main
main: {
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-4
    .const yd = y1-4
    .label cursor = 2
    .label e = 4
    .label y = 5
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG7 [2] phi (byte) main::y#2 = (byte) 4 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #4
    sta y
  //SEG8 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- zpby1=coby1 
    lda #yd/2
    sta e
  //SEG9 [2] phi (byte) main::x#2 = (byte) 4 [phi:main->main::@1#2] -- xby=coby1 
    ldx #4
  //SEG10 [2] phi (byte*) main::cursor#3 = (const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4 [phi:main->main::@1#3] -- zpptrby1=cowo1 
    lda #<SCREEN+4*$28+4
    sta cursor
    lda #>SCREEN+4*$28+4
    sta cursor+1
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG12 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG15 [2] phi (byte*) main::cursor#3 = (byte*) main::cursor#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [3] *((byte*) main::cursor#3) ← (const byte) STAR#0 [ main::cursor#3 main::x#2 main::e#3 main::y#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #STAR
    sta (cursor),y
  //SEG18 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::cursor#3 main::e#3 main::y#2 main::x#1 ] -- xby=xby_plus_1 
    inx
  //SEG19 [5] (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::cursor#1 ] -- zpptrby1=zpptrby1_plus_1 
    inc cursor
    bne !+
    inc cursor+1
  !:
  //SEG20 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- zpby1=zpby1_plus_coby1 
    lda e
    clc
    adc #yd
    sta e
  //SEG21 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- coby1_ge_zpby1_then_la1 
    lda #xd
    cmp e
    bcs b2
  //SEG22 main::@3
  //SEG23 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::cursor#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG24 [9] (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::cursor#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda cursor
    clc
    adc #$28
    sta cursor
    bcc !+
    inc cursor+1
  !:
  //SEG25 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::cursor#2 main::e#2 ] -- zpby1=zpby1_minus_coby1 
    sec
    sbc #xd
    sta e
  //SEG26 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG27 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG28 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG29 [11] phi (byte*) main::cursor#5 = (byte*) main::cursor#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG30 main::@2
  b2:
  //SEG31 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::cursor#5 main::x#1 main::e#5 main::y#4 ] -- xby_lt_coby1_then_la1 
    cpx #x1+1
    bcc b1
  //SEG32 main::@return
  //SEG33 [13] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte[1000]) SCREEN
(const byte[1000]) SCREEN#0 SCREEN = (word) 1024
(byte) STAR
(const byte) STAR#0 STAR = (byte) 81
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::cursor
(byte*) main::cursor#1 cursor zp ZP_PTR_BYTE:2 8.25
(byte*) main::cursor#2 cursor zp ZP_PTR_BYTE:2 11.0
(byte*) main::cursor#3 cursor zp ZP_PTR_BYTE:2 11.0
(byte*) main::cursor#5 cursor zp ZP_PTR_BYTE:2 16.5
(byte) main::e
(byte) main::e#1 e zp ZP_BYTE:4 11.0
(byte) main::e#2 e zp ZP_BYTE:4 22.0
(byte) main::e#3 e zp ZP_BYTE:4 5.5
(byte) main::e#5 e zp ZP_BYTE:4 16.5
(byte) main::x
(byte) main::x#1 reg byte x 3.666666666666667
(byte) main::x#2 reg byte x 11.0
(byte) main::x0
(byte) main::x1
(const byte) main::x1#0 x1 = (byte) 39
(byte) main::xd
(const byte) main::xd#0 xd = (const byte) main::x1#0-(byte) 4
(byte) main::y
(byte) main::y#1 y zp ZP_BYTE:5 7.333333333333333
(byte) main::y#2 y zp ZP_BYTE:5 5.5
(byte) main::y#4 y zp ZP_BYTE:5 16.5
(byte) main::y0
(byte) main::y1
(const byte) main::y1#0 y1 = (byte) 24
(byte) main::yd
(const byte) main::yd#0 yd = (const byte) main::y1#0-(byte) 4

zp ZP_PTR_BYTE:2 [ main::cursor#3 main::cursor#5 main::cursor#1 main::cursor#2 ]
reg byte x [ main::x#2 main::x#1 ]
zp ZP_BYTE:4 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
zp ZP_BYTE:5 [ main::y#2 main::y#4 main::y#1 ]

FINAL CODE
//SEG0 Global Constants & labels
  .const STAR = $51
  .const SCREEN = $400
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
//SEG5 main
main: {
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-4
    .const yd = y1-4
    .label cursor = 2
    .label e = 4
    .label y = 5
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG7 [2] phi (byte) main::y#2 = (byte) 4 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #4
    sta y
  //SEG8 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- zpby1=coby1 
    lda #yd/2
    sta e
  //SEG9 [2] phi (byte) main::x#2 = (byte) 4 [phi:main->main::@1#2] -- xby=coby1 
    ldx #4
  //SEG10 [2] phi (byte*) main::cursor#3 = (const byte[1000]) SCREEN#0+(byte) 4*(byte) 40+(byte) 4 [phi:main->main::@1#3] -- zpptrby1=cowo1 
    lda #<SCREEN+4*$28+4
    sta cursor
    lda #>SCREEN+4*$28+4
    sta cursor+1
  //SEG11 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG12 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG13 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG14 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG15 [2] phi (byte*) main::cursor#3 = (byte*) main::cursor#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [3] *((byte*) main::cursor#3) ← (const byte) STAR#0 [ main::cursor#3 main::x#2 main::e#3 main::y#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #STAR
    sta (cursor),y
  //SEG18 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::cursor#3 main::e#3 main::y#2 main::x#1 ] -- xby=xby_plus_1 
    inx
  //SEG19 [5] (byte*) main::cursor#1 ← (byte*) main::cursor#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::cursor#1 ] -- zpptrby1=zpptrby1_plus_1 
    inc cursor
    bne !+
    inc cursor+1
  !:
  //SEG20 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- zpby1=zpby1_plus_coby1 
    lda e
    clc
    adc #yd
    sta e
  //SEG21 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::cursor#1 main::e#1 ] -- coby1_ge_zpby1_then_la1 
    lda #xd
    cmp e
    bcs b2
  //SEG22 main::@3
  //SEG23 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::cursor#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG24 [9] (byte*) main::cursor#2 ← (byte*) main::cursor#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::cursor#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda cursor
    clc
    adc #$28
    sta cursor
    bcc !+
    inc cursor+1
  !:
  //SEG25 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::cursor#2 main::e#2 ] -- zpby1=zpby1_minus_coby1 
    sec
    sbc #xd
    sta e
  //SEG26 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG27 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG28 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG29 [11] phi (byte*) main::cursor#5 = (byte*) main::cursor#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG30 main::@2
  b2:
  //SEG31 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::cursor#5 main::x#1 main::e#5 main::y#4 ] -- xby_lt_coby1_then_la1 
    cpx #x1+1
    bcc b1
  //SEG32 main::@return
  //SEG33 [13] return  [ ]
    rts
}

