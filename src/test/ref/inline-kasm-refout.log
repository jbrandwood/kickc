
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  kickasm( uses main::SCREEN uses table) {{ ldx #0
        !:
        lda table,x
        sta SCREEN+1,x
        inx
        cpx #4
        bne !-
     }}
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
label __start::@1
label __start::@return
void main()
label main::@return
const nomodify byte* main::SCREEN = (byte*)$400
const byte* table[]  = "cml!"z

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  kickasm( uses main::SCREEN uses table) {{ ldx #0
        !:
        lda table,x
        sta SCREEN+1,x
        inx
        cpx #4
        bne !-
     }}
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 265 combination 
Uplifting [] best 265 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates how inline kickassembler can reference data from the outside program
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // kickasm( uses main::SCREEN uses table) {{ ldx #0         !:         lda table,x         sta SCREEN+1,x         inx         cpx #4         bne !-      }}
    ldx #0
        !:
        lda table,x
        sta SCREEN+1,x
        inx
        cpx #4
        bne !-
    
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data
  table: .text "cml!"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
label main::@return
const nomodify byte* main::SCREEN = (byte*) 1024
const byte* table[]  = "cml!"z



FINAL ASSEMBLER
Score: 262

  // File Comments
// Illustrates how inline kickassembler can reference data from the outside program
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // kickasm
    // kickasm( uses main::SCREEN uses table) {{ ldx #0         !:         lda table,x         sta SCREEN+1,x         inx         cpx #4         bne !-      }}
    ldx #0
        !:
        lda table,x
        sta SCREEN+1,x
        inx
        cpx #4
        bne !-
    
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data
  table: .text "cml!"

