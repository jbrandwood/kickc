Resolved forward reference fn1 to void fn1()
Setting inferred volatile on symbol affected by address-of: enableDLI::dliptr in asm { ldadliptr stadlivec ldadliptr+1 stadlivec+1 jmp!+ dlivec: .byte0,0 !:  }
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  enableDLI::dliptr = (void*)&fn1
  call enableDLI 
  to:main::@1
main::@1: scope:[main]  from main
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void fn1()
fn1: scope:[fn1]  from
  *r = 1
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  return 
  to:@return

void enableDLI(volatile void* enableDLI::dliptr)
enableDLI: scope:[enableDLI]  from main
  asm { ldadliptr stadlivec ldadliptr+1 stadlivec+1 jmp!+ dlivec: .byte0,0 !:  }
  to:enableDLI::@return
enableDLI::@return: scope:[enableDLI]  from enableDLI
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void enableDLI(volatile void* enableDLI::dliptr)
volatile void* enableDLI::dliptr loadstore
void fn1()
void main()
const to_nomodify byte* r = (byte*)$8000

Adding number conversion cast (unumber) 1 in *r = 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *r = (unumber)1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 32768
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [main] to enableDLI:3 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block label main::@1

FINAL CONTROL FLOW GRAPH

void fn1()
fn1: scope:[fn1]  from
  [0] *r = 1
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [1] return 
  to:@return

void main()
main: scope:[main]  from
  [2] enableDLI::dliptr = (void*)&fn1
  [3] call enableDLI 
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return

void enableDLI(volatile void* enableDLI::dliptr)
enableDLI: scope:[enableDLI]  from main
  asm { ldadliptr stadlivec ldadliptr+1 stadlivec+1 jmp!+ dlivec: .byte0,0 !:  }
  to:enableDLI::@return
enableDLI::@return: scope:[enableDLI]  from enableDLI
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void enableDLI(volatile void* enableDLI::dliptr)
volatile void* enableDLI::dliptr loadstore 2.0
void fn1()
void main()

Initial phi equivalence classes
Added variable enableDLI::dliptr to live range equivalence class [ enableDLI::dliptr ]
Complete equivalence classes
[ enableDLI::dliptr ]
Allocated zp[2]:2 [ enableDLI::dliptr ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *r = 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] enableDLI::dliptr = (void*)&fn1 [ enableDLI::dliptr ] (  [ enableDLI::dliptr ] { }  ) always clobbers reg byte a 
Statement asm { ldadliptr stadlivec ldadliptr+1 stadlivec+1 jmp!+ dlivec: .byte0,0 !:  } always clobbers reg byte a 
Potential registers zp[2]:2 [ enableDLI::dliptr ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [enableDLI] 2: zp[2]:2 [ enableDLI::dliptr ] 
Uplift Scope [main] 
Uplift Scope [fn1] 
Uplift Scope [] 

Uplifting [enableDLI] best 68 combination zp[2]:2 [ enableDLI::dliptr ] 
Uplifting [main] best 68 combination 
Uplifting [fn1] best 68 combination 
Uplifting [] best 68 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// The following casuses an exception in pass 2
// https://gitlab.com/camelot/kickc/-/issues/561
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label r = $8000
  // fn1
fn1: {
    // [0] *r = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta r
    jmp __breturn
    // fn1::@return
  __breturn:
    // [1] return 
    rts
}
  // main
main: {
    // [2] enableDLI::dliptr = (void*)&fn1 -- pvoz1=pvoc1 
    lda #<fn1
    sta.z enableDLI.dliptr
    lda #>fn1
    sta.z enableDLI.dliptr+1
    // [3] call enableDLI 
    jsr enableDLI
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // enableDLI
// enableDLI(void* zp(2) dliptr)
enableDLI: {
    .label dliptr = 2
    // asm { ldadliptr stadlivec ldadliptr+1 stadlivec+1 jmp!+ dlivec: .byte0,0 !:  }
    lda dliptr
    sta dlivec
    lda dliptr+1
    sta dlivec+1
    jmp !+
  dlivec:
    .byte 0, 0
  !:
    jmp __breturn
    // enableDLI::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void enableDLI(volatile void* enableDLI::dliptr)
volatile void* enableDLI::dliptr loadstore zp[2]:2 2.0
void fn1()
void main()
const to_nomodify byte* r = (byte*) 32768

zp[2]:2 [ enableDLI::dliptr ]


FINAL ASSEMBLER
Score: 59

  // File Comments
// The following casuses an exception in pass 2
// https://gitlab.com/camelot/kickc/-/issues/561
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label r = $8000
  // fn1
fn1: {
    // *r = 1
    // [0] *r = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta r
    // fn1::@return
    // }
    // [1] return 
    rts
}
  // main
main: {
    // enableDLI(&fn1)
    // [2] enableDLI::dliptr = (void*)&fn1 -- pvoz1=pvoc1 
    lda #<fn1
    sta.z enableDLI.dliptr
    lda #>fn1
    sta.z enableDLI.dliptr+1
    // [3] call enableDLI 
    jsr enableDLI
    // main::@return
    // }
    // [4] return 
    rts
}
  // enableDLI
// enableDLI(void* zp(2) dliptr)
enableDLI: {
    .label dliptr = 2
    // asm
    // asm { ldadliptr stadlivec ldadliptr+1 stadlivec+1 jmp!+ dlivec: .byte0,0 !:  }
    lda dliptr
    sta dlivec
    lda dliptr+1
    sta dlivec+1
    jmp !+
  dlivec:
    .byte 0, 0
  !:
    // enableDLI::@return
    // }
    // [6] return 
    rts
}
  // File Data

