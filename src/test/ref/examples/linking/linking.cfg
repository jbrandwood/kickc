@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] *((const byte[$100]) base#0 + (byte) main::i#2) ← (byte) main::i#2
  [7] (byte) main::i#1 ← ++ (byte) main::i#2
  [8] if((byte) main::i#1!=(byte) 0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [9] (byte) fillscreen::c#0 ← *((const byte*) BGCOL#0)
  [10] call fillscreen 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [11] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0)
  to:main::@2
fillscreen: scope:[fillscreen]  from main::@2
  [12] phi()
  to:fillscreen::@2
fillscreen::@2: scope:[fillscreen]  from fillscreen fillscreen::@1
  [13] (byte) fillscreen::i#4 ← phi( fillscreen::@1/(byte) fillscreen::i#1 fillscreen/(byte) 0 )
  [13] (byte*) fillscreen::screen#4 ← phi( fillscreen::@1/(byte*) fillscreen::screen#1 fillscreen/(const byte*) SCREEN#0 )
  [14] (byte~) fillscreen::$2 ← (byte) fillscreen::c#0 + *((const byte[$100]) base#0 + (byte) fillscreen::i#4)
  [15] *((byte*) fillscreen::screen#4) ← (byte~) fillscreen::$2
  [16] (byte) fillscreen::i#1 ← ++ (byte) fillscreen::i#4
  [17] (byte*) fillscreen::screen#1 ← ++ (byte*) fillscreen::screen#4
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen::@2
  [18] if((byte*) fillscreen::screen#1<(const byte*) SCREEN#0+(word) $3e8) goto fillscreen::@2
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  [19] return 
  to:@return
