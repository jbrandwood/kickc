Identified constant variable (byte*) main::screen
Culled Empty Block (label) @1
Culled Empty Block (label) sum::@1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2

(void()) main()
main: scope:[main]  from @2
  (byte*) main::screen#0 ← ((byte*)) (number) $400
  (byte) main::reverse ← (number) $80
  (byte) sum::a#0 ← (byte) main::reverse
  (byte) sum::b#0 ← (byte) 'c'
  call sum 
  (byte) sum::return#0 ← (byte) sum::return#4
  to:main::@1
main::@1: scope:[main]  from main
  (byte) sum::return#5 ← phi( main/(byte) sum::return#0 )
  (byte~) main::$0 ← (byte) sum::return#5
  *((byte*) main::screen#0 + (number) 0) ← (byte~) main::$0
  (byte) sum::a#1 ← (byte) main::reverse
  (byte) sum::b#1 ← (byte) 'm'
  call sum 
  (byte) sum::return#1 ← (byte) sum::return#4
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) sum::return#6 ← phi( main::@1/(byte) sum::return#1 )
  (byte~) main::$1 ← (byte) sum::return#6
  *((byte*) main::screen#0 + (number) 1) ← (byte~) main::$1
  (byte) sum::a#2 ← (byte) main::reverse
  (byte) sum::b#2 ← (byte) 'l'
  call sum 
  (byte) sum::return#2 ← (byte) sum::return#4
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) sum::return#7 ← phi( main::@2/(byte) sum::return#2 )
  (byte~) main::$2 ← (byte) sum::return#7
  *((byte*) main::screen#0 + (number) 2) ← (byte~) main::$2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

(byte()) sum((byte) sum::a , (byte) sum::b)
sum: scope:[sum]  from main main::@1 main::@2
  (byte) sum::b#3 ← phi( main/(byte) sum::b#0 main::@1/(byte) sum::b#1 main::@2/(byte) sum::b#2 )
  (byte) sum::a#3 ← phi( main/(byte) sum::a#0 main::@1/(byte) sum::a#1 main::@2/(byte) sum::a#2 )
  (byte~) sum::$0 ← (byte) sum::a#3 + (byte) sum::b#3
  (byte) sum::return#3 ← (byte~) sum::$0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return#8 ← phi( sum/(byte) sum::return#3 )
  (byte) sum::return#4 ← (byte) sum::return#8
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::reverse
(byte*) main::screen
(byte*) main::screen#0
(byte()) sum((byte) sum::a , (byte) sum::b)
(byte~) sum::$0
(label) sum::@return
(byte) sum::a
(byte) sum::a#0
(byte) sum::a#1
(byte) sum::a#2
(byte) sum::a#3
(byte) sum::b
(byte) sum::b#0
(byte) sum::b#1
(byte) sum::b#2
(byte) sum::b#3
(byte) sum::return
(byte) sum::return#0
(byte) sum::return#1
(byte) sum::return#2
(byte) sum::return#3
(byte) sum::return#4
(byte) sum::return#5
(byte) sum::return#6
(byte) sum::return#7
(byte) sum::return#8

Adding number conversion cast (unumber) $80 in (byte) main::reverse ← (number) $80
Adding number conversion cast (unumber) 0 in *((byte*) main::screen#0 + (number) 0) ← (byte~) main::$0
Adding number conversion cast (unumber) 1 in *((byte*) main::screen#0 + (number) 1) ← (byte~) main::$1
Adding number conversion cast (unumber) 2 in *((byte*) main::screen#0 + (number) 2) ← (byte~) main::$2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::screen#0 ← (byte*)(number) $400
Inlining cast (byte) main::reverse ← (unumber)(number) $80
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte) sum::return#0 = (byte) sum::return#5 
Alias (byte) sum::return#1 = (byte) sum::return#6 
Alias (byte) sum::return#2 = (byte) sum::return#7 
Alias (byte) sum::return#3 = (byte~) sum::$0 (byte) sum::return#8 (byte) sum::return#4 
Successful SSA optimization Pass2AliasElimination
Constant (const byte*) main::screen#0 = (byte*) 1024
Constant (const byte) main::reverse = $80
Constant (const byte) sum::b#0 = 'c'
Constant (const byte) sum::b#1 = 'm'
Constant (const byte) sum::b#2 = 'l'
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) sum::a#0 = main::reverse
Constant (const byte) sum::a#1 = main::reverse
Constant (const byte) sum::a#2 = main::reverse
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::screen#0 in [8] *((const byte*) main::screen#0 + (byte) 0) ← (byte~) main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Inlining constant with var siblings (const byte) sum::b#0
Inlining constant with var siblings (const byte) sum::b#1
Inlining constant with var siblings (const byte) sum::b#2
Inlining constant with var siblings (const byte) sum::a#0
Inlining constant with var siblings (const byte) sum::a#1
Inlining constant with var siblings (const byte) sum::a#2
Constant inlined sum::a#2 = (const byte) main::reverse
Constant inlined sum::b#1 = (byte) 'm'
Constant inlined sum::a#1 = (const byte) main::reverse
Constant inlined sum::b#0 = (byte) 'c'
Constant inlined sum::b#2 = (byte) 'l'
Constant inlined sum::a#0 = (const byte) main::reverse
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::screen#0+1)
Consolidated array index constant in *(main::screen#0+2)
Successful SSA optimization Pass2ConstantAdditionElimination
Identical Phi Values (byte) sum::a#3 (const byte) main::reverse
Successful SSA optimization Pass2IdenticalPhiElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to sum:6 sum:10 sum:14 

Created 1 initial phi equivalence classes
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @3
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call sum 
  [6] (byte) sum::return#0 ← (byte) sum::return#3
  to:main::@1
main::@1: scope:[main]  from main
  [7] (byte~) main::$0 ← (byte) sum::return#0
  [8] *((const byte*) main::screen#0) ← (byte~) main::$0
  [9] call sum 
  [10] (byte) sum::return#1 ← (byte) sum::return#3
  to:main::@2
main::@2: scope:[main]  from main::@1
  [11] (byte~) main::$1 ← (byte) sum::return#1
  [12] *((const byte*) main::screen#0+(byte) 1) ← (byte~) main::$1
  [13] call sum 
  [14] (byte) sum::return#2 ← (byte) sum::return#3
  to:main::@3
main::@3: scope:[main]  from main::@2
  [15] (byte~) main::$2 ← (byte) sum::return#2
  [16] *((const byte*) main::screen#0+(byte) 2) ← (byte~) main::$2
  to:main::@return
main::@return: scope:[main]  from main::@3
  [17] return 
  to:@return

(byte()) sum((byte) sum::a , (byte) sum::b)
sum: scope:[sum]  from main main::@1 main::@2
  [18] (byte) sum::b#3 ← phi( main/(byte) 'c' main::@1/(byte) 'm' main::@2/(byte) 'l' )
  [19] (byte) sum::return#3 ← (const byte) main::reverse + (byte) sum::b#3
  to:sum::@return
sum::@return: scope:[sum]  from sum
  [20] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$0 4.0
(byte~) main::$1 4.0
(byte~) main::$2 4.0
(byte*) main::screen
(byte()) sum((byte) sum::a , (byte) sum::b)
(byte) sum::a
(byte) sum::b
(byte) sum::b#3 2.0
(byte) sum::return
(byte) sum::return#0 4.0
(byte) sum::return#1 4.0
(byte) sum::return#2 4.0
(byte) sum::return#3 1.6

Initial phi equivalence classes
[ sum::b#3 ]
Added variable sum::return#0 to zero page equivalence class [ sum::return#0 ]
Added variable main::$0 to zero page equivalence class [ main::$0 ]
Added variable sum::return#1 to zero page equivalence class [ sum::return#1 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable sum::return#2 to zero page equivalence class [ sum::return#2 ]
Added variable main::$2 to zero page equivalence class [ main::$2 ]
Added variable sum::return#3 to zero page equivalence class [ sum::return#3 ]
Complete equivalence classes
[ sum::b#3 ]
[ sum::return#0 ]
[ main::$0 ]
[ sum::return#1 ]
[ main::$1 ]
[ sum::return#2 ]
[ main::$2 ]
[ sum::return#3 ]
Allocated zp ZP_BYTE:2 [ sum::b#3 ]
Allocated zp ZP_BYTE:3 [ sum::return#0 ]
Allocated zp ZP_BYTE:4 [ main::$0 ]
Allocated zp ZP_BYTE:5 [ sum::return#1 ]
Allocated zp ZP_BYTE:6 [ main::$1 ]
Allocated zp ZP_BYTE:7 [ sum::return#2 ]
Allocated zp ZP_BYTE:8 [ main::$2 ]
Allocated zp ZP_BYTE:9 [ sum::return#3 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test that the compiler optimizes when the same parameter value is passed into a function in all calls
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label screen = $400
    .label reverse = $80
    .label _0 = 4
    .label _1 = 6
    .label _2 = 8
    // [5] call sum 
    // [18] phi from main to sum [phi:main->sum]
  sum_from_main:
    // [18] phi (byte) sum::b#3 = (byte) 'c' [phi:main->sum#0] -- vbuz1=vbuc1 
    lda #'c'
    sta.z sum.b
    jsr sum
    // [6] (byte) sum::return#0 ← (byte) sum::return#3 -- vbuz1=vbuz2 
    lda.z sum.return_3
    sta.z sum.return
    jmp b1
    // main::@1
  b1:
    // [7] (byte~) main::$0 ← (byte) sum::return#0 -- vbuz1=vbuz2 
    lda.z sum.return
    sta.z _0
    // [8] *((const byte*) main::screen#0) ← (byte~) main::$0 -- _deref_pbuc1=vbuz1 
    lda.z _0
    sta screen
    // [9] call sum 
    // [18] phi from main::@1 to sum [phi:main::@1->sum]
  sum_from_b1:
    // [18] phi (byte) sum::b#3 = (byte) 'm' [phi:main::@1->sum#0] -- vbuz1=vbuc1 
    lda #'m'
    sta.z sum.b
    jsr sum
    // [10] (byte) sum::return#1 ← (byte) sum::return#3 -- vbuz1=vbuz2 
    lda.z sum.return_3
    sta.z sum.return_1
    jmp b2
    // main::@2
  b2:
    // [11] (byte~) main::$1 ← (byte) sum::return#1 -- vbuz1=vbuz2 
    lda.z sum.return_1
    sta.z _1
    // [12] *((const byte*) main::screen#0+(byte) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuz1 
    lda.z _1
    sta screen+1
    // [13] call sum 
    // [18] phi from main::@2 to sum [phi:main::@2->sum]
  sum_from_b2:
    // [18] phi (byte) sum::b#3 = (byte) 'l' [phi:main::@2->sum#0] -- vbuz1=vbuc1 
    lda #'l'
    sta.z sum.b
    jsr sum
    // [14] (byte) sum::return#2 ← (byte) sum::return#3 -- vbuz1=vbuz2 
    lda.z sum.return_3
    sta.z sum.return_2
    jmp b3
    // main::@3
  b3:
    // [15] (byte~) main::$2 ← (byte) sum::return#2 -- vbuz1=vbuz2 
    lda.z sum.return_2
    sta.z _2
    // [16] *((const byte*) main::screen#0+(byte) 2) ← (byte~) main::$2 -- _deref_pbuc1=vbuz1 
    lda.z _2
    sta screen+2
    jmp breturn
    // main::@return
  breturn:
    // [17] return 
    rts
}
  // sum
// sum(byte zeropage(2) b)
sum: {
    .label return = 3
    .label return_1 = 5
    .label return_2 = 7
    .label return_3 = 9
    .label b = 2
    // [19] (byte) sum::return#3 ← (const byte) main::reverse + (byte) sum::b#3 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z b
    axs #-[main.reverse]
    stx.z return_3
    jmp breturn
    // sum::@return
  breturn:
    // [20] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ sum::b#3 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ sum::return#0 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$0 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ sum::return#1 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::$1 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ sum::return#2 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ main::$2 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ sum::return#3 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [sum] 4: zp ZP_BYTE:3 [ sum::return#0 ] 4: zp ZP_BYTE:5 [ sum::return#1 ] 4: zp ZP_BYTE:7 [ sum::return#2 ] 2: zp ZP_BYTE:2 [ sum::b#3 ] 1.6: zp ZP_BYTE:9 [ sum::return#3 ] 
Uplift Scope [main] 4: zp ZP_BYTE:4 [ main::$0 ] 4: zp ZP_BYTE:6 [ main::$1 ] 4: zp ZP_BYTE:8 [ main::$2 ] 
Uplift Scope [] 

Uplifting [sum] best 109 combination reg byte a [ sum::return#0 ] reg byte a [ sum::return#1 ] reg byte a [ sum::return#2 ] reg byte a [ sum::b#3 ] zp ZP_BYTE:9 [ sum::return#3 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [main] best 91 combination reg byte a [ main::$0 ] reg byte a [ main::$1 ] reg byte a [ main::$2 ] 
Uplifting [] best 91 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ sum::return#3 ]
Uplifting [sum] best 79 combination reg byte a [ sum::return#3 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test that the compiler optimizes when the same parameter value is passed into a function in all calls
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label screen = $400
    .label reverse = $80
    // [5] call sum 
    // [18] phi from main to sum [phi:main->sum]
  sum_from_main:
    // [18] phi (byte) sum::b#3 = (byte) 'c' [phi:main->sum#0] -- vbuaa=vbuc1 
    lda #'c'
    jsr sum
    // [6] (byte) sum::return#0 ← (byte) sum::return#3
    jmp b1
    // main::@1
  b1:
    // [7] (byte~) main::$0 ← (byte) sum::return#0
    // [8] *((const byte*) main::screen#0) ← (byte~) main::$0 -- _deref_pbuc1=vbuaa 
    sta screen
    // [9] call sum 
    // [18] phi from main::@1 to sum [phi:main::@1->sum]
  sum_from_b1:
    // [18] phi (byte) sum::b#3 = (byte) 'm' [phi:main::@1->sum#0] -- vbuaa=vbuc1 
    lda #'m'
    jsr sum
    // [10] (byte) sum::return#1 ← (byte) sum::return#3
    jmp b2
    // main::@2
  b2:
    // [11] (byte~) main::$1 ← (byte) sum::return#1
    // [12] *((const byte*) main::screen#0+(byte) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta screen+1
    // [13] call sum 
    // [18] phi from main::@2 to sum [phi:main::@2->sum]
  sum_from_b2:
    // [18] phi (byte) sum::b#3 = (byte) 'l' [phi:main::@2->sum#0] -- vbuaa=vbuc1 
    lda #'l'
    jsr sum
    // [14] (byte) sum::return#2 ← (byte) sum::return#3
    jmp b3
    // main::@3
  b3:
    // [15] (byte~) main::$2 ← (byte) sum::return#2
    // [16] *((const byte*) main::screen#0+(byte) 2) ← (byte~) main::$2 -- _deref_pbuc1=vbuaa 
    sta screen+2
    jmp breturn
    // main::@return
  breturn:
    // [17] return 
    rts
}
  // sum
// sum(byte register(A) b)
sum: {
    // [19] (byte) sum::return#3 ← (const byte) main::reverse + (byte) sum::b#3 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #main.reverse
    jmp breturn
    // sum::@return
  breturn:
    // [20] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction sum_from_main:
Removing instruction b1:
Removing instruction sum_from_b1:
Removing instruction b2:
Removing instruction sum_from_b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0 reg byte a 4.0
(byte~) main::$1 reg byte a 4.0
(byte~) main::$2 reg byte a 4.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const byte) main::reverse reverse = (byte) $80
(byte*) main::screen
(const byte*) main::screen#0 screen = (byte*) 1024
(byte()) sum((byte) sum::a , (byte) sum::b)
(label) sum::@return
(byte) sum::a
(byte) sum::b
(byte) sum::b#3 reg byte a 2.0
(byte) sum::return
(byte) sum::return#0 reg byte a 4.0
(byte) sum::return#1 reg byte a 4.0
(byte) sum::return#2 reg byte a 4.0
(byte) sum::return#3 reg byte a 1.6

reg byte a [ sum::b#3 ]
reg byte a [ sum::return#0 ]
reg byte a [ main::$0 ]
reg byte a [ sum::return#1 ]
reg byte a [ main::$1 ]
reg byte a [ sum::return#2 ]
reg byte a [ main::$2 ]
reg byte a [ sum::return#3 ]


FINAL ASSEMBLER
Score: 52

  // File Comments
// Test that the compiler optimizes when the same parameter value is passed into a function in all calls
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label screen = $400
    .label reverse = $80
    // sum(reverse, 'c')
    // [5] call sum 
    // [18] phi from main to sum [phi:main->sum]
    // [18] phi (byte) sum::b#3 = (byte) 'c' [phi:main->sum#0] -- vbuaa=vbuc1 
    lda #'c'
    jsr sum
    // sum(reverse, 'c')
    // [6] (byte) sum::return#0 ← (byte) sum::return#3
    // main::@1
    // [7] (byte~) main::$0 ← (byte) sum::return#0
    // screen[0] = sum(reverse, 'c')
    // [8] *((const byte*) main::screen#0) ← (byte~) main::$0 -- _deref_pbuc1=vbuaa 
    sta screen
    // sum(reverse, 'm')
    // [9] call sum 
    // [18] phi from main::@1 to sum [phi:main::@1->sum]
    // [18] phi (byte) sum::b#3 = (byte) 'm' [phi:main::@1->sum#0] -- vbuaa=vbuc1 
    lda #'m'
    jsr sum
    // sum(reverse, 'm')
    // [10] (byte) sum::return#1 ← (byte) sum::return#3
    // main::@2
    // [11] (byte~) main::$1 ← (byte) sum::return#1
    // screen[1] = sum(reverse, 'm')
    // [12] *((const byte*) main::screen#0+(byte) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta screen+1
    // sum(reverse, 'l')
    // [13] call sum 
    // [18] phi from main::@2 to sum [phi:main::@2->sum]
    // [18] phi (byte) sum::b#3 = (byte) 'l' [phi:main::@2->sum#0] -- vbuaa=vbuc1 
    lda #'l'
    jsr sum
    // sum(reverse, 'l')
    // [14] (byte) sum::return#2 ← (byte) sum::return#3
    // main::@3
    // [15] (byte~) main::$2 ← (byte) sum::return#2
    // screen[2] = sum(reverse, 'l')
    // [16] *((const byte*) main::screen#0+(byte) 2) ← (byte~) main::$2 -- _deref_pbuc1=vbuaa 
    sta screen+2
    // main::@return
    // }
    // [17] return 
    rts
}
  // sum
// sum(byte register(A) b)
sum: {
    // a+b
    // [19] (byte) sum::return#3 ← (const byte) main::reverse + (byte) sum::b#3 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #main.reverse
    // sum::@return
    // }
    // [20] return 
    rts
}
  // File Data

