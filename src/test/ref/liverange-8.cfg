@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) idx#17 ← phi( main/(byte) 0 main::@2/(byte) idx#15 )
  [5] (byte) main::c#2 ← phi( main/(byte) 0 main::@2/(byte) main::c#1 )
  [6] (byte) out2::c#0 ← (byte) main::c#2
  [7] call out2 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (byte) main::c#1 ← ++ (byte) main::c#2
  [9] if((byte) main::c#1!=(byte) $28) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) out2((byte) out2::c)
out2: scope:[out2]  from main::@1
  [11] (byte) out::c#0 ← (byte) out2::c#0
  [12] call out 
  to:out2::@1
out2::@1: scope:[out2]  from out2
  [13] (byte) out::c#1 ← (byte) out2::c#0
  [14] call out 
  to:out2::@return
out2::@return: scope:[out2]  from out2::@1
  [15] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from out2 out2::@1
  [16] (byte) out::c#2 ← phi( out2/(byte) out::c#0 out2::@1/(byte) out::c#1 )
  [16] (byte) idx#14 ← phi( out2/(byte) idx#17 out2::@1/(byte) idx#15 )
  [17] (byte) idx#15 ← ++ (byte) idx#14
  [18] *((const byte*) SCREEN + (byte) idx#15) ← (byte) out::c#2
  to:out::@return
out::@return: scope:[out]  from out
  [19] return 
  to:@return
