
(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (volatile byte) render_screen_showing ← (byte) 0
  [2] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST
  [3] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $15
  to:_start::_init1_toSpritePtr1
_start::_init1_toSpritePtr1: scope:[_start]  from _start::_init1
  [4] phi()
  to:_start::_init1_@1
_start::_init1_@1: scope:[_start]  from _start::_init1_toSpritePtr1
  [5] (volatile byte) irq_sprite_ptr ← (const byte) _start::_init1_toSpritePtr1_return#0+(byte) 3
  [6] (volatile byte) irq_cnt ← (byte) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1_@1
  [7] phi()
  [8] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [9] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [10] phi()
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [11] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [12] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [13] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [14] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [15] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [16] call sprites_init 
  to:main::@5
main::@5: scope:[main]  from main::@3
  [17] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $ff
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  [18] (byte) main::ypos#2 ← phi( main::@4/(byte) main::ypos#1 main::@5/(byte) $32 )
  [18] (byte) main::xpos#2 ← phi( main::@4/(byte) main::xpos#1 main::@5/(byte) $18 )
  [18] (byte) main::s#2 ← phi( main::@4/(byte) main::s#1 main::@5/(byte) 4 )
  [19] (byte) main::s2#0 ← (byte) main::s#2 << (byte) 1
  [20] *((const nomodify byte*) SPRITES_XPOS + (byte) main::s2#0) ← (byte) main::xpos#2
  [21] *((const nomodify byte*) SPRITES_YPOS + (byte) main::s2#0) ← (byte) main::ypos#2
  [22] (byte~) main::$6 ← (byte) main::s#2 - (byte) 3
  [23] *((const nomodify byte*) SPRITES_COLOR + (byte) main::s#2) ← (byte~) main::$6
  to:main::toSpritePtr1
main::toSpritePtr1: scope:[main]  from main::@1
  [24] phi()
  to:main::@4
main::@4: scope:[main]  from main::toSpritePtr1
  [25] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1 + (byte) main::s#2) ← (const byte) main::toSpritePtr1_return#0
  [26] (byte) main::xpos#1 ← (byte) main::xpos#2 + (byte) $18
  [27] (byte) main::ypos#1 ← (byte) main::ypos#2 + (byte) $18
  [28] (byte) main::s#1 ← ++ (byte) main::s#2
  [29] if((byte) main::s#1!=(byte) 8) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@4
  [30] phi()
  [31] call sprites_irq_init 
  to:main::@6
main::@6: scope:[main]  from main::@2
  [32] phi()
  [33] call loop 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [34] return 
  to:@return

(void()) loop()
loop: scope:[loop]  from main::@6
  [35] phi()
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@5
  [36] (byte) sin_idx#11 ← phi( loop/(byte) 0 loop::@5/(byte) sin_idx#2 )
  to:loop::@2
loop::@2: scope:[loop]  from loop::@1 loop::@2
  [37] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  [38] (byte) loop::idx#0 ← (byte) sin_idx#11
  to:loop::@4
loop::@4: scope:[loop]  from loop::@3 loop::@4
  [39] (byte) loop::idx#2 ← phi( loop::@3/(byte) loop::idx#0 loop::@4/(byte) loop::idx#1 )
  [39] (byte) loop::s#2 ← phi( loop::@3/(byte) 4 loop::@4/(byte) loop::s#1 )
  [40] (byte~) loop::$1 ← (byte) loop::s#2 << (byte) 1
  [41] *((const nomodify byte*) SPRITES_YPOS + (byte~) loop::$1) ← *((const byte*) SIN + (byte) loop::idx#2)
  [42] (byte) loop::idx#1 ← (byte) loop::idx#2 + (byte) $a
  [43] (byte) loop::s#1 ← ++ (byte) loop::s#2
  [44] if((byte) loop::s#1!=(byte) 8) goto loop::@4
  to:loop::@5
loop::@5: scope:[loop]  from loop::@4
  [45] (byte) sin_idx#2 ← ++ (byte) sin_idx#11
  to:loop::@1

(void()) sprites_irq_init()
sprites_irq_init: scope:[sprites_irq_init]  from main::@2
  asm { sei  }
  [47] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  asm { ldaCIA1_INTERRUPT  }
  [49] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  [50] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [51] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [52] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f
  [53] *((const nomodify byte*) RASTER) ← (const nomodify byte) IRQ_RASTER_FIRST
  [54] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [55] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  [57] return 
  to:@return

(void()) sprites_init()
sprites_init: scope:[sprites_init]  from main::@3
  [58] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $f
  [59] *((const nomodify byte*) SPRITES_MC) ← (byte) 0
  [60] *((const nomodify byte*) SPRITES_EXPAND_Y) ← *((const nomodify byte*) SPRITES_MC)
  [61] *((const nomodify byte*) SPRITES_EXPAND_X) ← *((const nomodify byte*) SPRITES_EXPAND_Y)
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [62] (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte)(number) $18+(number) $f*(number) 8 sprites_init::@1/(byte) sprites_init::xpos#1 )
  [62] (byte) sprites_init::s#2 ← phi( sprites_init/(byte) 0 sprites_init::@1/(byte) sprites_init::s#1 )
  [63] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1
  [64] *((const nomodify byte*) SPRITES_XPOS + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  [65] *((const nomodify byte*) SPRITES_COLOR + (byte) sprites_init::s#2) ← (const nomodify byte) BLACK
  [66] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18
  [67] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2
  [68] if((byte) sprites_init::s#1!=(byte) 4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [69] return 
  to:@return

interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
sprites_irq: scope:[sprites_irq]  from
  asm { cld  }
  [71] (byte) sprites_irq::ypos#0 ← (volatile byte) irq_sprite_ypos
  [72] *((const nomodify byte*) SPRITES_YPOS) ← (byte) sprites_irq::ypos#0
  [73] *((const nomodify byte*) SPRITES_YPOS+(byte) 2) ← (byte) sprites_irq::ypos#0
  [74] *((const nomodify byte*) SPRITES_YPOS+(byte) 4) ← (byte) sprites_irq::ypos#0
  [75] *((const nomodify byte*) SPRITES_YPOS+(byte) 6) ← (byte) sprites_irq::ypos#0
  [76] (byte~) sprites_irq::$0 ← (volatile byte) irq_raster_next + (byte) 1
  [77] (volatile byte) sprites_irq::raster_sprite_gfx_modify ← (byte~) sprites_irq::$0
  to:sprites_irq::@8
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq sprites_irq::@8
  [78] if(*((const nomodify byte*) RASTER)<(volatile byte) sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8
  to:sprites_irq::@9
sprites_irq::@9: scope:[sprites_irq]  from sprites_irq::@8
  [79] (byte) sprites_irq::ptr#0 ← (volatile byte) irq_sprite_ptr
  [80] if((volatile byte) render_screen_showing==(byte) 0) goto sprites_irq::@1
  to:sprites_irq::@10
sprites_irq::@10: scope:[sprites_irq]  from sprites_irq::@9
  [81] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2) ← (byte) sprites_irq::ptr#0
  [82] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0
  [83] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 1) ← (byte) sprites_irq::ptr#3
  [84] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 2) ← (byte) sprites_irq::ptr#3
  [85] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3
  [86] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 3) ← (byte) sprites_irq::ptr#4
  to:sprites_irq::@2
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@1 sprites_irq::@10
  [87] (volatile byte) irq_cnt ← ++ (volatile byte) irq_cnt
  [88] if((volatile byte) irq_cnt==(byte) 9) goto sprites_irq::@3
  to:sprites_irq::@6
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@2
  [89] if((volatile byte) irq_cnt==(byte) $a) goto sprites_irq::@4
  to:sprites_irq::@7
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@6
  [90] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $14
  [91] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15
  [92] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3
  to:sprites_irq::@5
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7
  [93] *((const nomodify byte*) RASTER) ← (volatile byte) irq_raster_next
  [94] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@5
  [95] return 
  to:@return
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@6
  [96] (volatile byte) irq_cnt ← (byte) 0
  [97] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST
  [98] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15
  [99] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3
  to:sprites_irq::@5
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2
  [100] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $15
  [101] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS
  to:sprites_irq::toSpritePtr1
sprites_irq::toSpritePtr1: scope:[sprites_irq]  from sprites_irq::@3
  [102] phi()
  to:sprites_irq::@11
sprites_irq::@11: scope:[sprites_irq]  from sprites_irq::toSpritePtr1
  [103] (volatile byte) irq_sprite_ptr ← (const byte) sprites_irq::toSpritePtr1_return#0
  to:sprites_irq::@5
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq::@9
  [104] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1) ← (byte) sprites_irq::ptr#0
  [105] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0
  [106] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 1) ← (byte) sprites_irq::ptr#1
  [107] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 2) ← (byte) sprites_irq::ptr#1
  [108] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1
  [109] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 3) ← (byte) sprites_irq::ptr#2
  to:sprites_irq::@2
