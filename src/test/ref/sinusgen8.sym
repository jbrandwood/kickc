__constant const unsigned int PI2_u4f12 = $6488
__constant const unsigned int PI_HALF_u4f12 = $1922
__constant const unsigned int PI_u4f12 = $3244
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
unsigned int div16u(unsigned int dividend , unsigned int divisor)
unsigned int div16u::dividend
unsigned int div16u::divisor
unsigned int div16u::return
unsigned int div16u::return#0 // return zp[2]:12 22.0
unsigned int div16u::return#1 // return zp[2]:12 37.33333333333333
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // reg byte a 20002.0
char divr16u::$2 // reg byte a 20002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // dividend zp[2]:15 2500.25
unsigned int divr16u::dividend#2 // dividend zp[2]:15 4286.142857142857
unsigned int divr16u::divisor
char divr16u::i
char divr16u::i#1 // reg byte x 15001.5
char divr16u::i#2 // reg byte x 1538.6153846153845
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // quotient zp[2]:12 15001.5
unsigned int divr16u::quotient#2 // quotient zp[2]:12 10001.0
unsigned int divr16u::quotient#3 // quotient zp[2]:12 2500.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // rem zp[2]:10 7500.75
unsigned int divr16u::rem#1 // rem zp[2]:10 20002.0
unsigned int divr16u::rem#2 // rem zp[2]:10 20002.0
unsigned int divr16u::rem#4 // rem zp[2]:10 20002.0
unsigned int divr16u::rem#5 // rem zp[2]:10 10001.0
unsigned int divr16u::rem#9 // rem zp[2]:10 10001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // return zp[2]:12 6020.8
unsigned int divr16u::return#2 // return zp[2]:12 202.0
void main()
char main::i
char main::i#1 // i zp[1]:2 16.5
char main::i#2 // i zp[1]:2 5.5
signed char main::sb
signed char main::sb#0 // reg byte a 22.0
__constant char main::str[3] = "  "
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:6 2002.0
char *memset::dst#2 // dst zp[2]:6 1334.6666666666667
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
unsigned int mul8u(char a , char b)
char mul8u::$1 // reg byte a 2.0000002E7
char mul8u::a
char mul8u::a#0 // reg byte x 36667.33333333333
char mul8u::a#1 // reg byte x 1.0000001E7
char mul8u::a#2 // reg byte x 6683334.166666666
char mul8u::b
char mul8u::b#0 // reg byte a 10001.0
unsigned int mul8u::mb
unsigned int mul8u::mb#0 // mb zp[2]:17 200002.0
unsigned int mul8u::mb#1 // mb zp[2]:17 2.0000002E7
unsigned int mul8u::mb#2 // mb zp[2]:17 4300000.571428571
unsigned int mul8u::res
unsigned int mul8u::res#1 // res zp[2]:15 2.0000002E7
unsigned int mul8u::res#2 // res zp[2]:15 5001667.333333333
unsigned int mul8u::res#6 // res zp[2]:15 1.0000001E7
unsigned int mul8u::return
unsigned int mul8u::return#0 // return zp[2]:15 20002.0
char mulu8_sel(char v1 , char v2 , char select)
unsigned int mulu8_sel::$0 // zp[2]:15 20002.0
unsigned int mulu8_sel::$1 // zp[2]:15 20002.0
char mulu8_sel::return
char mulu8_sel::return#0 // reg byte a 2002.0
char mulu8_sel::return#1 // reg byte a 2002.0
char mulu8_sel::return#10 // reg byte a 2002.0
char mulu8_sel::return#11 // reg byte a 2002.0
char mulu8_sel::return#12 // reg byte a 2143.714285714286
char mulu8_sel::return#2 // reg byte a 2002.0
char mulu8_sel::select
char mulu8_sel::select#5 // select zp[1]:14 1666.8333333333333
char mulu8_sel::v1
char mulu8_sel::v1#0 // reg byte x 1001.0
char mulu8_sel::v1#1 // reg byte x 1001.0
char mulu8_sel::v1#2 // reg byte x 2002.0
char mulu8_sel::v1#3 // reg byte x 1001.0
char mulu8_sel::v1#4 // reg byte x 1001.0
char mulu8_sel::v1#5 // reg byte x 15006.0
char mulu8_sel::v2
char mulu8_sel::v2#0 // reg byte y 2002.0
char mulu8_sel::v2#1 // reg byte y 2002.0
char mulu8_sel::v2#3 // reg byte y 2002.0
char mulu8_sel::v2#4 // reg byte y 2002.0
char mulu8_sel::v2#5 // reg byte y 7002.5
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 20002.0
char print_char::ch#3 // reg byte a 2002.0
char print_char::ch#4 // reg byte a 2002.0
char print_char::ch#5 // reg byte a 112004.0
char *print_char_cursor
char *print_char_cursor#10 // print_char_cursor zp[2]:8 4000.535714285714
char *print_char_cursor#29 // print_char_cursor zp[2]:8 106103.5
char *print_char_cursor#45 // print_char_cursor zp[2]:8 35.5
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
void print_schar(signed char b)
signed char print_schar::b
signed char print_schar::b#0 // reg byte x 202.0
signed char print_schar::b#1 // reg byte x 52.33333333333333
signed char print_schar::b#4 // reg byte x 202.0
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // str zp[2]:3 20002.0
char *print_str::str#2 // str zp[2]:3 10001.0
void print_uchar(char b)
char print_uchar::$0 // reg byte a 2002.0
char print_uchar::$2 // reg byte x 2002.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 525.75
signed char sin8s(unsigned int x)
unsigned int sin8s::$4 // zp[2]:10 2002.0
__constant const char sin8s::DIV_6 = $2b
char sin8s::isUpper
char sin8s::isUpper#10 // isUpper zp[1]:5 27.805555555555557
signed char sin8s::return
signed char sin8s::return#0 // reg byte a 202.0
signed char sin8s::return#1 // reg byte a 701.0
signed char sin8s::return#5 // reg byte a 2002.0
signed char sin8s::sinx
signed char sin8s::sinx#1 // reg byte a 2002.0
char sin8s::usinx
char sin8s::usinx#0 // usinx zp[1]:21 166.83333333333334
char sin8s::usinx#1 // reg byte x 2002.0
char sin8s::usinx#2 // reg byte x 2002.0
char sin8s::usinx#4 // reg byte x 1001.0
unsigned int sin8s::x
unsigned int sin8s::x#0 // x zp[2]:10 1552.0
unsigned int sin8s::x#1 // x zp[2]:10 2002.0
unsigned int sin8s::x#2 // x zp[2]:10 2002.0
unsigned int sin8s::x#4 // x zp[2]:10 2502.5
unsigned int sin8s::x#6 // x zp[2]:10 3003.0
char sin8s::x1
char sin8s::x1#0 // x1 zp[1]:19 318.5
char sin8s::x2
char sin8s::x2#0 // reg byte a 2002.0
char sin8s::x3
char sin8s::x3#0 // x3 zp[1]:20 500.5
char sin8s::x3_6
char sin8s::x3_6#0 // reg byte a 2002.0
char sin8s::x4
char sin8s::x4#0 // reg byte a 2002.0
char sin8s::x5
char sin8s::x5#0 // reg byte a 2002.0
char sin8s::x5_128
char sin8s::x5_128#0 // reg byte a 2002.0
void sin8s_gen(signed char *sintab , unsigned int wavelength)
signed char sin8s_gen::$2 // reg byte a 202.0
unsigned int sin8s_gen::i
unsigned int sin8s_gen::i#1 // i zp[2]:3 202.0
unsigned int sin8s_gen::i#2 // i zp[2]:3 33.666666666666664
signed char *sin8s_gen::sintab
signed char *sin8s_gen::sintab#0 // sintab zp[2]:8 67.33333333333333
signed char *sin8s_gen::sintab#2 // sintab zp[2]:8 43.285714285714285
unsigned int sin8s_gen::step
unsigned int sin8s_gen::step#0 // step zp[2]:12 10.181818181818182
unsigned int sin8s_gen::wavelength
unsigned int sin8s_gen::x
unsigned int sin8s_gen::x#1 // x zp[2]:6 101.0
unsigned int sin8s_gen::x#2 // x zp[2]:6 37.875
__constant signed char sintab2[$c0] = { fill( $c0, 0) }
__constant char sintabref[] = { 0, 4, 8, $c, $11, $15, $19, $1d, $21, $25, $29, $2d, $31, $35, $38, $3c, $40, $43, $47, $4a, $4e, $51, $54, $57, $5a, $5d, $60, $63, $65, $68, $6a, $6c, $6e, $70, $72, $74, $76, $77, $79, $7a, $7b, $7c, $7d, $7e, $7e, $7f, $7f, $7f, $80, $7f, $7f, $7f, $7e, $7e, $7d, $7c, $7b, $7a, $79, $77, $76, $74, $72, $70, $6e, $6c, $6a, $68, $65, $63, $60, $5d, $5a, $57, $54, $51, $4e, $4a, $47, $43, $40, $3c, $38, $35, $31, $2d, $29, $25, $21, $1d, $19, $15, $11, $c, 8, 4, 0, $fc, $f8, $f4, $ef, $eb, $e7, $e3, $df, $db, $d7, $d3, $cf, $cb, $c8, $c4, $c0, $bd, $b9, $b6, $b2, $af, $ac, $a9, $a6, $a3, $a0, $9d, $9b, $98, $96, $94, $92, $90, $8e, $8c, $8a, $89, $87, $86, $85, $84, $83, $82, $82, $81, $81, $81, $81, $81, $81, $81, $82, $82, $83, $84, $85, $86, $87, $89, $8a, $8c, $8e, $90, $92, $94, $96, $98, $9b, $9d, $a0, $a3, $a6, $a9, $ac, $af, $b2, $b6, $b9, $bd, $c0, $c4, $c8, $cb, $cf, $d3, $d7, $db, $df, $e3, $e7, $eb, $ef, $f4, $f8, $fc }
__constant unsigned int wavelength = $c0

zp[1]:2 [ main::i#2 main::i#1 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
zp[2]:3 [ print_str::str#2 print_str::str#0 sin8s_gen::i#2 sin8s_gen::i#1 ]
zp[1]:5 [ sin8s::isUpper#10 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
zp[2]:6 [ memset::dst#2 memset::dst#1 sin8s_gen::x#2 sin8s_gen::x#1 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:8 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
zp[2]:10 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
zp[2]:12 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#0 sin8s_gen::step#0 div16u::return#1 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
zp[1]:14 [ mulu8_sel::select#5 ]
reg byte x [ mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
zp[2]:15 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 mulu8_sel::$0 mulu8_sel::$1 divr16u::dividend#2 divr16u::dividend#0 ]
zp[2]:17 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
reg byte a [ main::sb#0 ]
reg byte a [ sin8s::return#0 ]
reg byte a [ sin8s_gen::$2 ]
reg byte x [ print_uchar::b#0 ]
zp[1]:19 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:20 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:21 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mul8u::b#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]
