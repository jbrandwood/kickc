Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  screen#19 = phi( __start::@1/screen#22 )
  print_msg::idx#0 = 1
  call print_msg
  to:main::@1
main::@1: scope:[main]  from main
  screen#10 = phi( main/screen#4 )
  screen#0 = screen#10
  print_msg::idx#1 = 2
  call print_msg
  to:main::@2
main::@2: scope:[main]  from main::@1
  screen#11 = phi( main::@1/screen#4 )
  screen#1 = screen#11
  to:main::@return
main::@return: scope:[main]  from main::@2
  screen#12 = phi( main::@2/screen#1 )
  screen#2 = screen#12
  return 
  to:@return

void print_msg(char idx)
print_msg: scope:[print_msg]  from main main::@1
  screen#26 = phi( main/screen#19, main::@1/screen#0 )
  print_msg::idx#2 = phi( main/print_msg::idx#0, main::@1/print_msg::idx#1 )
  print_msg::msg#0 = (char *) 0
  print_msg::$0 = print_msg::idx#2 == 1
  if(print_msg::$0) goto print_msg::@1
  to:print_msg::@3
print_msg::@1: scope:[print_msg]  from print_msg
  screen#23 = phi( print_msg/screen#26 )
  print_msg::msg#1 = print_msg::$2
  to:print_msg::@2
print_msg::@3: scope:[print_msg]  from print_msg
  screen#24 = phi( print_msg/screen#26 )
  print_msg::msg#2 = print_msg::$3
  to:print_msg::@2
print_msg::@2: scope:[print_msg]  from print_msg::@1 print_msg::@3
  screen#20 = phi( print_msg::@1/screen#23, print_msg::@3/screen#24 )
  print_msg::msg#3 = phi( print_msg::@1/print_msg::msg#1, print_msg::@3/print_msg::msg#2 )
  print::msg#0 = print_msg::msg#3
  call print
  to:print_msg::@4
print_msg::@4: scope:[print_msg]  from print_msg::@2
  screen#13 = phi( print_msg::@2/screen#6 )
  screen#3 = screen#13
  to:print_msg::@return
print_msg::@return: scope:[print_msg]  from print_msg::@4
  screen#14 = phi( print_msg::@4/screen#3 )
  screen#4 = screen#14
  return 
  to:@return

void print(char *msg)
print: scope:[print]  from print_msg::@2
  screen#25 = phi( print_msg::@2/screen#20 )
  print::msg#4 = phi( print_msg::@2/print::msg#0 )
  to:print::@1
print::@1: scope:[print]  from print print::@2
  screen#21 = phi( print/screen#25, print::@2/screen#5 )
  print::msg#2 = phi( print/print::msg#4, print::@2/print::msg#1 )
  print::$0 = 0 != *print::msg#2
  if(print::$0) goto print::@2
  to:print::@return
print::@2: scope:[print]  from print::@1
  screen#15 = phi( print::@1/screen#21 )
  print::msg#3 = phi( print::@1/print::msg#2 )
  *screen#15 = *print::msg#3
  screen#5 = ++ screen#15
  print::msg#1 = ++ print::msg#3
  to:print::@1
print::@return: scope:[print]  from print::@1
  screen#16 = phi( print::@1/screen#21 )
  screen#6 = screen#16
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  screen#7 = (char *)$400
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  screen#22 = phi( __start::__init1/screen#7 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  screen#17 = phi( __start::@1/screen#2 )
  screen#8 = screen#17
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  screen#18 = phi( __start::@2/screen#8 )
  screen#9 = screen#18
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
void print(char *msg)
bool print::$0
char *print::msg
char *print::msg#0
char *print::msg#1
char *print::msg#2
char *print::msg#3
char *print::msg#4
void print_msg(char idx)
bool print_msg::$0
__constant char print_msg::$2[7] = "Hello "
__constant char print_msg::$3[7] = "World!"
char print_msg::idx
char print_msg::idx#0
char print_msg::idx#1
char print_msg::idx#2
char *print_msg::msg
char *print_msg::msg#0
char *print_msg::msg#1
char *print_msg::msg#2
char *print_msg::msg#3
char *screen
char *screen#0
char *screen#1
char *screen#10
char *screen#11
char *screen#12
char *screen#13
char *screen#14
char *screen#15
char *screen#16
char *screen#17
char *screen#18
char *screen#19
char *screen#2
char *screen#20
char *screen#21
char *screen#22
char *screen#23
char *screen#24
char *screen#25
char *screen#26
char *screen#3
char *screen#4
char *screen#5
char *screen#6
char *screen#7
char *screen#8
char *screen#9

Adding number conversion cast (unumber) 1 in print_msg::idx#0 = 1
Adding number conversion cast (unumber) 2 in print_msg::idx#1 = 2
Adding number conversion cast (unumber) 1 in print_msg::$0 = print_msg::idx#2 == 1
Adding number conversion cast (unumber) 0 in print::$0 = 0 != *print::msg#2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast print_msg::idx#0 = (unumber)1
Inlining cast print_msg::idx#1 = (unumber)2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias screen#0 = screen#10 
Alias screen#1 = screen#11 screen#12 screen#2 
Alias screen#23 = screen#26 screen#24 
Alias screen#13 = screen#3 screen#14 screen#4 
Alias print::msg#2 = print::msg#3 
Alias screen#15 = screen#21 screen#16 screen#6 
Alias screen#22 = screen#7 
Alias screen#17 = screen#8 screen#18 screen#9 
Successful SSA optimization Pass2AliasElimination
Alias screen#20 = screen#23 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values screen#19 screen#22
Identical Phi Values screen#0 screen#13
Identical Phi Values screen#1 screen#13
Identical Phi Values screen#13 screen#15
Identical Phi Values print::msg#4 print::msg#0
Identical Phi Values screen#25 screen#20
Identical Phi Values screen#17 screen#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition print_msg::$0 [11] if(print_msg::idx#2==1) goto print_msg::@1
Simple Condition print::$0 [22] if(0!=*print::msg#2) goto print::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant print_msg::idx#0 = 1
Constant print_msg::idx#1 = 2
Constant print_msg::msg#0 = (char *) 0
Constant print_msg::msg#1 = print_msg::$2
Constant print_msg::msg#2 = print_msg::$3
Constant screen#22 = (char *) 1024
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant print_msg::msg#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings print_msg::idx#0
Inlining constant with var siblings print_msg::idx#1
Inlining constant with var siblings print_msg::msg#1
Inlining constant with var siblings print_msg::msg#2
Inlining constant with var siblings screen#22
Constant inlined print_msg::idx#1 = 2
Constant inlined screen#22 = (char *) 1024
Constant inlined print_msg::idx#0 = 1
Constant inlined print_msg::$3 = print_msg::msg#2
Constant inlined print_msg::$2 = print_msg::msg#1
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings print_msg::msg#1
Inlining constant with var siblings print_msg::msg#2
Inlining constant with var siblings print_msg::msg#1
Inlining constant with var siblings print_msg::msg#2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of print_msg::@3
Adding NOP phi() at start of print_msg::@4
Adding NOP phi() at start of print_msg::@1
CALL GRAPH
Calls in [main] to print_msg:1 print_msg:3 
Calls in [print_msg] to print:11 

Created 5 initial phi equivalence classes
Coalesced [2] screen#27 = screen#15
Coalesced [15] print::msg#5 = print::msg#0
Coalesced (already) [16] screen#28 = screen#20
Coalesced [23] print::msg#6 = print::msg#1
Coalesced [24] screen#29 = screen#5
Coalesced down to 4 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label print_msg::@3
Culled Empty Block label print_msg::@4
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of print_msg::@1
Adding NOP phi() at start of print

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print_msg
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print_msg
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

void print_msg(char idx)
print_msg: scope:[print_msg]  from main main::@1
  [5] screen#20 = phi( main/(char *) 1024, main::@1/screen#15 )
  [5] print_msg::idx#2 = phi( main/1, main::@1/2 )
  [6] if(print_msg::idx#2==1) goto print_msg::@1
  to:print_msg::@2
print_msg::@1: scope:[print_msg]  from print_msg
  [7] phi()
  to:print_msg::@2
print_msg::@2: scope:[print_msg]  from print_msg print_msg::@1
  [8] print_msg::msg#3 = phi( print_msg::@1/print_msg::msg#1, print_msg/print_msg::msg#2 )
  [9] print::msg#0 = print_msg::msg#3
  [10] call print
  to:print_msg::@return
print_msg::@return: scope:[print_msg]  from print_msg::@2
  [11] return 
  to:@return

void print(char *msg)
print: scope:[print]  from print_msg::@2
  [12] phi()
  to:print::@1
print::@1: scope:[print]  from print print::@2
  [13] screen#15 = phi( print/screen#20, print::@2/screen#5 )
  [13] print::msg#2 = phi( print/print::msg#0, print::@2/print::msg#1 )
  [14] if(0!=*print::msg#2) goto print::@2
  to:print::@return
print::@return: scope:[print]  from print::@1
  [15] return 
  to:@return
print::@2: scope:[print]  from print::@1
  [16] *screen#15 = *print::msg#2
  [17] screen#5 = ++ screen#15
  [18] print::msg#1 = ++ print::msg#2
  to:print::@1


VARIABLE REGISTER WEIGHTS
void main()
void print(char *msg)
char *print::msg
char *print::msg#0 // 56.0
char *print::msg#1 // 2002.0
char *print::msg#2 // 1026.25
void print_msg(char idx)
char print_msg::idx
char print_msg::idx#2 // 11.0
char *print_msg::msg
char *print_msg::msg#3 // 11.0
char *screen
char *screen#15 // 388.25
char *screen#20 // 17.166666666666664
char *screen#5 // 1001.0

Initial phi equivalence classes
[ print_msg::idx#2 ]
[ screen#20 screen#15 screen#5 ]
[ print_msg::msg#3 ]
[ print::msg#2 print::msg#0 print::msg#1 ]
Complete equivalence classes
[ print_msg::idx#2 ]
[ screen#20 screen#15 screen#5 ]
[ print_msg::msg#3 ]
[ print::msg#2 print::msg#0 print::msg#1 ]
Allocated zp[2]:2 [ print::msg#2 print::msg#0 print::msg#1 ]
Allocated zp[2]:4 [ screen#20 screen#15 screen#5 ]
Allocated zp[1]:6 [ print_msg::idx#2 ]
Allocated zp[2]:7 [ print_msg::msg#3 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] print::msg#0 = print_msg::msg#3 [ screen#20 print::msg#0 ] ( print_msg:1 [ screen#20 print::msg#0 ] { { print::msg#0 = print_msg::msg#3 } }  print_msg:3 [ screen#20 print::msg#0 ] { { screen#15 = screen#20 } { print::msg#0 = print_msg::msg#3 } }  ) always clobbers reg byte a 
Statement [14] if(0!=*print::msg#2) goto print::@2 [ screen#15 print::msg#2 ] ( print_msg:1::print:10 [ screen#15 print::msg#2 ] { { print::msg#0 = print_msg::msg#3 } }  print_msg:3::print:10 [ screen#15 print::msg#2 ] { { screen#15 = screen#20 } { print::msg#0 = print_msg::msg#3 } }  ) always clobbers reg byte a reg byte y 
Statement [16] *screen#15 = *print::msg#2 [ screen#15 print::msg#2 ] ( print_msg:1::print:10 [ screen#15 print::msg#2 ] { { print::msg#0 = print_msg::msg#3 } }  print_msg:3::print:10 [ screen#15 print::msg#2 ] { { screen#15 = screen#20 } { print::msg#0 = print_msg::msg#3 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:6 [ print_msg::idx#2 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:4 [ screen#20 screen#15 screen#5 ] : zp[2]:4 , 
Potential registers zp[2]:7 [ print_msg::msg#3 ] : zp[2]:7 , 
Potential registers zp[2]:2 [ print::msg#2 print::msg#0 print::msg#1 ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 3,084.25: zp[2]:2 [ print::msg#2 print::msg#0 print::msg#1 ] 
Uplift Scope [] 1,406.42: zp[2]:4 [ screen#20 screen#15 screen#5 ] 
Uplift Scope [print_msg] 11: zp[1]:6 [ print_msg::idx#2 ] 11: zp[2]:7 [ print_msg::msg#3 ] 
Uplift Scope [main] 

Uplifting [print] best 728 combination zp[2]:2 [ print::msg#2 print::msg#0 print::msg#1 ] 
Uplifting [] best 728 combination zp[2]:4 [ screen#20 screen#15 screen#5 ] 
Uplifting [print_msg] best 719 combination reg byte x [ print_msg::idx#2 ] zp[2]:7 [ print_msg::msg#3 ] 
Uplifting [main] best 719 combination 
Coalescing zero page register [ zp[2]:7 [ print_msg::msg#3 ] ] with [ zp[2]:2 [ print::msg#2 print::msg#0 print::msg#1 ] ] - score: 1
Allocated (was zp[2]:7) zp[2]:2 [ print_msg::msg#3 print::msg#2 print::msg#0 print::msg#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Inline Strings in assignments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-string-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label screen = 4
.segment Code
  // main
main: {
    // [1] call print_msg
    // [5] phi from main to print_msg [phi:main->print_msg]
  print_msg_from_main:
    // [5] phi screen#20 = (char *) 1024 [phi:main->print_msg#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [5] phi print_msg::idx#2 = 1 [phi:main->print_msg#1] -- vbuxx=vbuc1 
    ldx #1
    jsr print_msg
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print_msg
    // [5] phi from main::@1 to print_msg [phi:main::@1->print_msg]
  print_msg_from___b1:
    // [5] phi screen#20 = screen#15 [phi:main::@1->print_msg#0] -- register_copy 
    // [5] phi print_msg::idx#2 = 2 [phi:main::@1->print_msg#1] -- vbuxx=vbuc1 
    ldx #2
    jsr print_msg
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print_msg
// void print_msg(__register(X) char idx)
print_msg: {
    .label msg = 2
    // [6] if(print_msg::idx#2==1) goto print_msg::@1 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq __b1_from_print_msg
    // [8] phi from print_msg to print_msg::@2 [phi:print_msg->print_msg::@2]
  __b2_from_print_msg:
    // [8] phi print_msg::msg#3 = print_msg::msg#2 [phi:print_msg->print_msg::@2#0] -- pbuz1=pbuc1 
    lda #<msg_2
    sta.z msg
    lda #>msg_2
    sta.z msg+1
    jmp __b2
    // [7] phi from print_msg to print_msg::@1 [phi:print_msg->print_msg::@1]
  __b1_from_print_msg:
    jmp __b1
    // print_msg::@1
  __b1:
    // [8] phi from print_msg::@1 to print_msg::@2 [phi:print_msg::@1->print_msg::@2]
  __b2_from___b1:
    // [8] phi print_msg::msg#3 = print_msg::msg#1 [phi:print_msg::@1->print_msg::@2#0] -- pbuz1=pbuc1 
    lda #<msg_1
    sta.z msg
    lda #>msg_1
    sta.z msg+1
    jmp __b2
    // print_msg::@2
  __b2:
    // [9] print::msg#0 = print_msg::msg#3
    // [10] call print
    // [12] phi from print_msg::@2 to print [phi:print_msg::@2->print]
  print_from___b2:
    jsr print
    jmp __breturn
    // print_msg::@return
  __breturn:
    // [11] return 
    rts
  .segment Data
    msg_1: .text "Hello "
    .byte 0
    msg_2: .text "World!"
    .byte 0
}
.segment Code
  // print
// void print(__zp(2) char *msg)
print: {
    .label msg = 2
    // [13] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
  __b1_from_print:
  __b1_from___b2:
    // [13] phi screen#15 = screen#20 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [13] phi print::msg#2 = print::msg#0 [phi:print/print::@2->print::@1#1] -- register_copy 
    jmp __b1
    // print::@1
  __b1:
    // [14] if(0!=*print::msg#2) goto print::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    jmp __breturn
    // print::@return
  __breturn:
    // [15] return 
    rts
    // print::@2
  __b2:
    // [16] *screen#15 = *print::msg#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    ldy #0
    sta (screen),y
    // [17] screen#5 = ++ screen#15 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [18] print::msg#1 = ++ print::msg#2 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1_from___b2
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from_print_msg with __b1
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from_main:
Removing instruction print_msg_from___b1:
Removing instruction __b1_from_print_msg:
Removing instruction __b2_from___b1:
Removing instruction print_from___b2:
Removing instruction __b1_from_print:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_msg_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b2_from_print_msg:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
void print(char *msg)
char *print::msg
char *print::msg#0 // msg zp[2]:2 56.0
char *print::msg#1 // msg zp[2]:2 2002.0
char *print::msg#2 // msg zp[2]:2 1026.25
void print_msg(char idx)
char print_msg::idx
char print_msg::idx#2 // reg byte x 11.0
char *print_msg::msg
__constant char *print_msg::msg#1 = "Hello " // msg_1
__constant char *print_msg::msg#2 = "World!" // msg_2
char *print_msg::msg#3 // msg zp[2]:2 11.0
char *screen
char *screen#15 // screen zp[2]:4 388.25
char *screen#20 // screen zp[2]:4 17.166666666666664
char *screen#5 // screen zp[2]:4 1001.0

reg byte x [ print_msg::idx#2 ]
zp[2]:4 [ screen#20 screen#15 screen#5 ]
zp[2]:2 [ print_msg::msg#3 print::msg#2 print::msg#0 print::msg#1 ]


FINAL ASSEMBLER
Score: 612

  // File Comments
// Inline Strings in assignments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-string-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label screen = 4
.segment Code
  // main
main: {
    // print_msg(1)
    // [1] call print_msg
    // [5] phi from main to print_msg [phi:main->print_msg]
    // [5] phi screen#20 = (char *) 1024 [phi:main->print_msg#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [5] phi print_msg::idx#2 = 1 [phi:main->print_msg#1] -- vbuxx=vbuc1 
    ldx #1
    jsr print_msg
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print_msg(2)
    // [3] call print_msg
    // [5] phi from main::@1 to print_msg [phi:main::@1->print_msg]
    // [5] phi screen#20 = screen#15 [phi:main::@1->print_msg#0] -- register_copy 
    // [5] phi print_msg::idx#2 = 2 [phi:main::@1->print_msg#1] -- vbuxx=vbuc1 
    ldx #2
    jsr print_msg
    // main::@return
    // }
    // [4] return 
    rts
}
  // print_msg
// void print_msg(__register(X) char idx)
print_msg: {
    .label msg = 2
    // if(idx==1)
    // [6] if(print_msg::idx#2==1) goto print_msg::@1 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq __b1
    // [8] phi from print_msg to print_msg::@2 [phi:print_msg->print_msg::@2]
    // [8] phi print_msg::msg#3 = print_msg::msg#2 [phi:print_msg->print_msg::@2#0] -- pbuz1=pbuc1 
    lda #<msg_2
    sta.z msg
    lda #>msg_2
    sta.z msg+1
    jmp __b2
    // [7] phi from print_msg to print_msg::@1 [phi:print_msg->print_msg::@1]
    // print_msg::@1
  __b1:
    // [8] phi from print_msg::@1 to print_msg::@2 [phi:print_msg::@1->print_msg::@2]
    // [8] phi print_msg::msg#3 = print_msg::msg#1 [phi:print_msg::@1->print_msg::@2#0] -- pbuz1=pbuc1 
    lda #<msg_1
    sta.z msg
    lda #>msg_1
    sta.z msg+1
    // print_msg::@2
  __b2:
    // print(msg)
    // [9] print::msg#0 = print_msg::msg#3
    // [10] call print
    // [12] phi from print_msg::@2 to print [phi:print_msg::@2->print]
    jsr print
    // print_msg::@return
    // }
    // [11] return 
    rts
  .segment Data
    msg_1: .text "Hello "
    .byte 0
    msg_2: .text "World!"
    .byte 0
}
.segment Code
  // print
// void print(__zp(2) char *msg)
print: {
    .label msg = 2
    // [13] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
    // [13] phi screen#15 = screen#20 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [13] phi print::msg#2 = print::msg#0 [phi:print/print::@2->print::@1#1] -- register_copy 
    // print::@1
  __b1:
    // while(*msg)
    // [14] if(0!=*print::msg#2) goto print::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    // print::@return
    // }
    // [15] return 
    rts
    // print::@2
  __b2:
    // *(screen++) = *(msg++)
    // [16] *screen#15 = *print::msg#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    sta (screen),y
    // *(screen++) = *(msg++);
    // [17] screen#5 = ++ screen#15 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [18] print::msg#1 = ++ print::msg#2 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1
}
  // File Data

