@begin: scope:[]  from
  [0] phi()
  to:@4
@4: scope:[]  from @begin
  kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  to:@5
@5: scope:[]  from @4
  [2] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0
  [3] (byte) irq_sprite_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @5
  [4] phi()
  to:@9
@9: scope:[]  from toSpritePtr1
  [5] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0
  [6] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@8
@8: scope:[]  from @9
  [7] phi()
  [8] call main 
  to:@end
@end: scope:[]  from @8
  [9] phi()
main: scope:[main]  from @8
  [10] phi()
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [11] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [12] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [13] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [14] phi()
  to:main::@8
main::@8: scope:[main]  from main::toD0181
  [15] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [16] call sprites_init 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [17] phi()
  [18] call sprites_irq_init 
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@9
  [19] *((const byte*) PLAYFIELD_SCREEN_1#0) ← ++ *((const byte*) PLAYFIELD_SCREEN_1#0)
  to:main::@2
sprites_irq_init: scope:[sprites_irq_init]  from main::@9
  asm { sei  }
  [21] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  asm { ldaCIA1_INTERRUPT  }
  [23] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [24] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [25] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [26] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127
  [27] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0
  [28] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [29] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) irq()
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  [31] return 
  to:@return
sprites_init: scope:[sprites_init]  from main::@8
  [32] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  [33] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [34] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0)
  [35] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0)
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [36] (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 15*(byte/signed byte/word/signed word/dword/signed dword) 8 sprites_init::@1/(byte) sprites_init::xpos#1 )
  [36] (byte) sprites_init::s#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 0 sprites_init::@1/(byte) sprites_init::s#1 )
  [37] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [38] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  [39] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0
  [40] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24
  [41] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2
  [42] if((byte) sprites_init::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [43] return 
  to:@return
irq: scope:[irq]  from
  [44] *((const byte*) BORDERCOL#0) ← (const byte) DARK_GREY#0
  [45] (byte) irq::ypos#0 ← (byte) irq_sprite_ypos#0
  [46] *((const byte*) SPRITES_YPOS#0) ← (byte) irq::ypos#0
  [47] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ypos#0
  [48] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) irq::ypos#0
  [49] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) irq::ypos#0
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@1
  [50] if(*((const byte*) RASTER#0)!=(byte) irq_sprite_ypos#0) goto irq::@1
  to:irq::@5
irq::@5: scope:[irq]  from irq::@1
  [51] (byte) irq::ptr#0 ← (byte) irq_sprite_ptr#0
  [52] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) irq::ptr#0
  [53] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) irq::ptr#0
  [54] (byte) irq::ptr#1 ← ++ (byte) irq::ptr#0
  [55] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) irq::ptr#1
  [56] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) irq::ptr#1
  [57] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ptr#1
  [58] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ptr#1
  [59] (byte) irq::ptr#2 ← ++ (byte) irq::ptr#1
  [60] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) irq::ptr#2
  [61] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) irq::ptr#2
  [62] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0
  [63] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto irq::@2
  to:irq::@6
irq::@6: scope:[irq]  from irq::@5
  [64] (byte) irq_raster_next#2 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [65] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [66] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:irq::@3
irq::@3: scope:[irq]  from irq::@6 irq::@9
  [67] (byte) irq_raster_next#12 ← phi( irq::@6/(byte) irq_raster_next#2 irq::@9/(byte) irq_raster_next#1 )
  [68] (byte) irq::raster_next#0 ← (byte) irq_raster_next#12
  [69] (byte~) irq::$3 ← (byte) irq::raster_next#0 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [70] if((byte~) irq::$3!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto irq::@4
  to:irq::@8
irq::@8: scope:[irq]  from irq::@3
  [71] (byte) irq::raster_next#1 ← (byte) irq::raster_next#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  to:irq::@4
irq::@4: scope:[irq]  from irq::@3 irq::@8
  [72] (byte) irq::raster_next#2 ← phi( irq::@3/(byte) irq::raster_next#0 irq::@8/(byte) irq::raster_next#1 )
  [73] *((const byte*) RASTER#0) ← (byte) irq::raster_next#2
  [74] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  [75] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0
  to:irq::@return
irq::@return: scope:[irq]  from irq::@4
  [76] return 
  to:@return
irq::@2: scope:[irq]  from irq::@5
  [77] (byte) irq_cnt#13 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [78] (byte) irq_raster_next#1 ← (const byte) IRQ_RASTER_FIRST#0
  [79] (byte) irq_sprite_ypos#1 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:irq::toSpritePtr2
irq::toSpritePtr2: scope:[irq]  from irq::@2
  [80] phi()
  to:irq::@9
irq::@9: scope:[irq]  from irq::toSpritePtr2
  [81] (byte) irq_sprite_ptr#1 ← (const byte) irq::toSpritePtr2_return#0
  to:irq::@3
