
(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  [2] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [3] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [4] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [5] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [7] phi()
  to:main::@4
main::@4: scope:[main]  from main::toD0181
  [8] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [9] call bitmap_init 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] phi()
  [11] call bitmap_clear 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [12] phi()
  [13] call screen_fill 
  to:main::@1
main::@1: scope:[main]  from main::@6 main::@8
  [14] (byte) main::i#2 ← phi( main::@8/(byte) main::i#1 main::@6/(byte) 0 )
  [15] (byte) point_init::point_idx#0 ← (byte) main::i#2
  [16] call point_init 
  to:main::@7
main::@7: scope:[main]  from main::@1
  [17] (byte~) main::$10 ← (byte) main::i#2 << (byte) 1
  [18] (word) bitmap_plot::x#0 ← *((const word*) x_start + (byte~) main::$10)
  [19] (byte) bitmap_plot::y#0 ← *((const byte*) y_start + (byte) main::i#2)
  [20] call bitmap_plot 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [21] (byte) main::i#1 ← ++ (byte) main::i#2
  [22] if((byte) main::i#1!=(const nomodify byte) SIZE-(byte) 1+(byte) 1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@3 main::@8
  [23] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [24] *((const nomodify byte*) BORDER_COLOR) ← ++ *((const nomodify byte*) BORDER_COLOR)
  to:main::@2

(void()) bitmap_init((byte*) bitmap_init::bitmap)
bitmap_init: scope:[bitmap_init]  from main::@4
  [25] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [26] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [26] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [27] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [28] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1
  [29] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [30] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [31] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@6/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte) $80 )
  [32] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [33] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [34] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@2/(const byte*) BITMAP bitmap_init::@4/(byte*) bitmap_init::yoffs#4 )
  [34] (byte) bitmap_init::y#2 ← phi( bitmap_init::@2/(byte) 0 bitmap_init::@4/(byte) bitmap_init::y#1 )
  [35] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
  [36] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  [37] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4
  [38] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5
  [39] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  [40] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  [41] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [42] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [43] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@5/(byte*) bitmap_init::yoffs#1 )
  [44] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [45] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [46] return 
  to:@return

(void()) bitmap_clear()
bitmap_clear: scope:[bitmap_clear]  from main::@5
  [47] (word) bitmap_clear::bitmap#0 ← *((const to_nomodify byte*) bitmap_plot_yhi) w= *((const to_nomodify byte*) bitmap_plot_ylo)
  [48] (byte*) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [49] (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte) 0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  [49] (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*) bitmap_clear::bitmap#5 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#1 )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [50] (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte) 0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  [50] (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  [51] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0
  [52] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  [53] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2
  [54] if((byte) bitmap_clear::x#1!=(byte) $c8) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [55] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4
  [56] if((byte) bitmap_clear::y#1!=(byte) $28) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [57] return 
  to:@return

(void()) screen_fill((byte*) screen_fill::screen , (byte) screen_fill::ch)
screen_fill: scope:[screen_fill]  from main::@6
  [58] phi()
  to:screen_fill::@1
screen_fill::@1: scope:[screen_fill]  from screen_fill screen_fill::@3
  [59] (byte) screen_fill::y#4 ← phi( screen_fill/(byte) 0 screen_fill::@3/(byte) screen_fill::y#1 )
  [59] (byte*) screen_fill::screen#3 ← phi( screen_fill/(const byte*) SCREEN screen_fill::@3/(byte*) screen_fill::screen#1 )
  to:screen_fill::@2
screen_fill::@2: scope:[screen_fill]  from screen_fill::@1 screen_fill::@2
  [60] (byte) screen_fill::x#2 ← phi( screen_fill::@1/(byte) 0 screen_fill::@2/(byte) screen_fill::x#1 )
  [60] (byte*) screen_fill::screen#2 ← phi( screen_fill::@1/(byte*) screen_fill::screen#3 screen_fill::@2/(byte*) screen_fill::screen#1 )
  [61] *((byte*) screen_fill::screen#2) ← (const byte) screen_fill::ch#0
  [62] (byte*) screen_fill::screen#1 ← ++ (byte*) screen_fill::screen#2
  [63] (byte) screen_fill::x#1 ← ++ (byte) screen_fill::x#2
  [64] if((byte) screen_fill::x#1!=(byte) $28) goto screen_fill::@2
  to:screen_fill::@3
screen_fill::@3: scope:[screen_fill]  from screen_fill::@2
  [65] (byte) screen_fill::y#1 ← ++ (byte) screen_fill::y#4
  [66] if((byte) screen_fill::y#1!=(byte) $19) goto screen_fill::@1
  to:screen_fill::@return
screen_fill::@return: scope:[screen_fill]  from screen_fill::@3
  [67] return 
  to:@return

(void()) point_init((byte) point_init::point_idx)
point_init: scope:[point_init]  from main::@1
  [68] (byte~) point_init::$11 ← (byte) point_init::point_idx#0 << (byte) 1
  [69] (signed word) point_init::x_diff#1 ← (signed word)*((const word*) x_end + (byte~) point_init::$11) - (signed word)*((const word*) x_start + (byte~) point_init::$11)
  [70] (signed word~) point_init::$17 ← (signed word)*((const byte*) y_end + (byte) point_init::point_idx#0)
  [71] (signed word~) point_init::$18 ← (signed word)*((const byte*) y_start + (byte) point_init::point_idx#0)
  [72] (signed word) point_init::y_diff#0 ← (signed word~) point_init::$17 - (signed word~) point_init::$18
  to:point_init::abs16s1
point_init::abs16s1: scope:[point_init]  from point_init
  [73] if((signed word) point_init::x_diff#1<(signed byte) 0) goto point_init::abs16s1_@1
  to:point_init::abs16s1_@3
point_init::abs16s1_@3: scope:[point_init]  from point_init::abs16s1
  [74] (word) point_init::abs16s1_return#6 ← (word)(signed word) point_init::x_diff#1
  to:point_init::abs16s1_@return
point_init::abs16s1_@return: scope:[point_init]  from point_init::abs16s1_@1 point_init::abs16s1_@3
  [75] (word) point_init::abs16s1_return#2 ← phi( point_init::abs16s1_@1/(word) point_init::abs16s1_return#5 point_init::abs16s1_@3/(word) point_init::abs16s1_return#6 )
  to:point_init::abs16s2
point_init::abs16s2: scope:[point_init]  from point_init::abs16s1_@return
  [76] if((signed word) point_init::y_diff#0<(signed byte) 0) goto point_init::abs16s2_@1
  to:point_init::abs16s2_@3
point_init::abs16s2_@3: scope:[point_init]  from point_init::abs16s2
  [77] (word) point_init::abs16s2_return#6 ← (word)(signed word) point_init::y_diff#0
  to:point_init::abs16s2_@return
point_init::abs16s2_@return: scope:[point_init]  from point_init::abs16s2_@1 point_init::abs16s2_@3
  [78] (word) point_init::abs16s2_return#2 ← phi( point_init::abs16s2_@1/(word) point_init::abs16s2_return#5 point_init::abs16s2_@3/(word) point_init::abs16s2_return#6 )
  to:point_init::@6
point_init::@6: scope:[point_init]  from point_init::abs16s2_@return
  [79] if((word) point_init::abs16s1_return#2>(word) point_init::abs16s2_return#2) goto point_init::@1
  to:point_init::@2
point_init::@2: scope:[point_init]  from point_init::@6 point_init::@7
  [80] (byte~) point_init::$13 ← (byte) point_init::point_idx#0 << (byte) 1
  [81] (word~) point_init::$5 ← *((const word*) x_start + (byte~) point_init::$13) << (byte) 4
  [82] *((const word*) x_cur + (byte~) point_init::$13) ← (word~) point_init::$5
  [83] (word~) point_init::$19 ← (word)*((const byte*) y_start + (byte) point_init::point_idx#0)
  [84] (word~) point_init::$6 ← (word~) point_init::$19 << (byte) 4
  [85] *((const word*) y_cur + (byte~) point_init::$13) ← (word~) point_init::$6
  [86] *((const byte*) delay + (byte) point_init::point_idx#0) ← (const nomodify byte) DELAY
  to:point_init::@return
point_init::@return: scope:[point_init]  from point_init::@2
  [87] return 
  to:@return
point_init::@1: scope:[point_init]  from point_init::@6
  [88] if((signed word) point_init::x_diff#1<(signed byte) 0) goto point_init::@4
  to:point_init::@3
point_init::@3: scope:[point_init]  from point_init::@1
  [89] *((const signed byte*) x_add + (byte) point_init::point_idx#0) ← (signed byte) $10
  to:point_init::@5
point_init::@5: scope:[point_init]  from point_init::@3 point_init::@4
  [90] (signed word) divr16s::divisor#0 ← (signed word) point_init::x_diff#1
  [91] (signed word) divr16s::rem#0 ← (signed word) point_init::y_diff#0
  [92] call divr16s 
  [93] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
  to:point_init::@7
point_init::@7: scope:[point_init]  from point_init::@5
  [94] (signed word) point_init::x_stepf#0 ← (signed word) divr16s::return#3
  [95] (byte~) point_init::$9 ← > (signed word) point_init::x_stepf#0
  [96] (byte~) point_init::$10 ← (byte~) point_init::$9 >> (byte) 4
  [97] *((const signed byte*) y_add + (byte) point_init::point_idx#0) ← (signed byte)(byte~) point_init::$10
  to:point_init::@2
point_init::@4: scope:[point_init]  from point_init::@1
  [98] *((const signed byte*) x_add + (byte) point_init::point_idx#0) ← (signed byte) -$10
  to:point_init::@5
point_init::abs16s2_@1: scope:[point_init]  from point_init::abs16s2
  [99] (signed word) point_init::abs16s2_return#0 ← - (signed word) point_init::y_diff#0
  [100] (word) point_init::abs16s2_return#5 ← (word)(signed word) point_init::abs16s2_return#0
  to:point_init::abs16s2_@return
point_init::abs16s1_@1: scope:[point_init]  from point_init::abs16s1
  [101] (signed word) point_init::abs16s1_return#0 ← - (signed word) point_init::x_diff#1
  [102] (word) point_init::abs16s1_return#5 ← (word)(signed word) point_init::abs16s1_return#0
  to:point_init::abs16s1_@return

(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from main::@7
  [103] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#0) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#0)
  [104] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#0 & (word) $fff8
  [105] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0
  [106] (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#0
  [107] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [108] return 
  to:@return

(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
divr16s: scope:[divr16s]  from point_init::@5
  [109] phi()
  to:divr16s::@10
divr16s::@10: scope:[divr16s]  from divr16s
  [110] if((signed word) divr16s::rem#0<(signed byte) 0) goto divr16s::@1
  to:divr16s::@6
divr16s::@6: scope:[divr16s]  from divr16s::@10
  [111] (word) divr16s::remu#8 ← (word)(signed word) divr16s::rem#0
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  [112] (word) divr16s::remu#3 ← phi( divr16s::@1/(word) divr16s::remu#7 divr16s::@6/(word) divr16s::remu#8 )
  [112] (byte) divr16s::neg#3 ← phi( divr16s::@1/(byte) 1 divr16s::@6/(byte) 0 )
  [113] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3
  to:divr16s::@7
divr16s::@7: scope:[divr16s]  from divr16s::@2
  [114] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  [115] (byte) divr16s::neg#4 ← phi( divr16s::@3/(byte) divr16s::neg#2 divr16s::@7/(byte) divr16s::neg#3 )
  [115] (word) divr16s::divisoru#3 ← phi( divr16s::@3/(word) divr16s::divisoru#4 divr16s::@7/(word) divr16s::divisoru#5 )
  [116] (word) divr16u::divisor#0 ← (word) divr16s::divisoru#3
  [117] (word) divr16u::rem#3 ← (word) divr16s::remu#3
  [118] call divr16u 
  [119] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  [120] (word) divr16s::resultu#0 ← (word) divr16u::return#2
  [121] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5
  to:divr16s::@8
divr16s::@8: scope:[divr16s]  from divr16s::@9
  [122] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  [123] (signed word) divr16s::return#2 ← phi( divr16s::@5/(signed word) divr16s::return#6 divr16s::@8/(signed word) divr16s::return#1 )
  [124] return 
  to:@return
divr16s::@5: scope:[divr16s]  from divr16s::@9
  [125] (signed word) divr16s::return#6 ← (signed word)(word) divr16s::resultu#0
  to:divr16s::@return
divr16s::@3: scope:[divr16s]  from divr16s::@2
  [126] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0
  [127] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1
  [128] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
  to:divr16s::@4
divr16s::@1: scope:[divr16s]  from divr16s::@10
  [129] (signed word) divr16s::remu#1 ← - (signed word) divr16s::rem#0
  [130] (word) divr16s::remu#7 ← (word)(signed word) divr16s::remu#1
  to:divr16s::@2

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from divr16s::@4
  [131] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [132] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [132] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [132] (word) divr16u::dividend#2 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::dividend#0 )
  [132] (word) divr16u::rem#4 ← phi( divr16u/(word) divr16u::rem#3 divr16u::@3/(word) divr16u::rem#9 )
  [133] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1
  [134] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [135] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [136] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [137] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [138] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [139] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1
  [140] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [141] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [142] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [143] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [144] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [144] (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [145] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [146] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [147] return 
  to:@return
