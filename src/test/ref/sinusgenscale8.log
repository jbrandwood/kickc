Inlined call call __init 

CONTROL FLOW GRAPH SSA

signed byte sin8s(word sin8s::x)
sin8s: scope:[sin8s]  from sin8u_table::@2
  sin8s::x#3 = phi( sin8u_table::@2/sin8s::x#2 )
  sin8s::isUpper#0 = 0
  sin8s::$0 = sin8s::x#3 >= PI_u4f12
  sin8s::$1 = ! sin8s::$0
  if(sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  sin8s::isUpper#10 = phi( sin8s/sin8s::isUpper#0, sin8s::@5/sin8s::isUpper#1 )
  sin8s::x#4 = phi( sin8s/sin8s::x#3, sin8s::@5/sin8s::x#0 )
  sin8s::$2 = sin8s::x#4 >= PI_HALF_u4f12
  sin8s::$3 = ! sin8s::$2
  if(sin8s::$3) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  sin8s::x#5 = phi( sin8s/sin8s::x#3 )
  sin8s::$18 = sin8s::x#5 - PI_u4f12
  sin8s::x#0 = sin8s::$18
  sin8s::isUpper#1 = 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  sin8s::isUpper#9 = phi( sin8s::@1/sin8s::isUpper#10, sin8s::@6/sin8s::isUpper#11 )
  sin8s::x#6 = phi( sin8s::@1/sin8s::x#4, sin8s::@6/sin8s::x#1 )
  sin8s::$4 = sin8s::x#6 << 3
  sin8s::$5 = > sin8s::$4
  sin8s::x1#0 = sin8s::$5
  mulu8_sel::v1#0 = sin8s::x1#0
  mulu8_sel::v2#0 = sin8s::x1#0
  mulu8_sel::select#0 = 0
  call mulu8_sel 
  mulu8_sel::return#0 = mulu8_sel::return#6
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  sin8s::isUpper#8 = phi( sin8s::@2/sin8s::isUpper#9 )
  sin8s::x1#1 = phi( sin8s::@2/sin8s::x1#0 )
  mulu8_sel::return#7 = phi( sin8s::@2/mulu8_sel::return#0 )
  sin8s::$6 = mulu8_sel::return#7
  sin8s::x2#0 = sin8s::$6
  mulu8_sel::v1#1 = sin8s::x2#0
  mulu8_sel::v2#1 = sin8s::x1#1
  mulu8_sel::select#1 = 1
  call mulu8_sel 
  mulu8_sel::return#1 = mulu8_sel::return#6
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  sin8s::isUpper#7 = phi( sin8s::@9/sin8s::isUpper#8 )
  sin8s::x1#4 = phi( sin8s::@9/sin8s::x1#1 )
  mulu8_sel::return#8 = phi( sin8s::@9/mulu8_sel::return#1 )
  sin8s::$7 = mulu8_sel::return#8
  sin8s::x3#0 = sin8s::$7
  mulu8_sel::v1#2 = sin8s::x3#0
  mulu8_sel::v2#2 = sin8s::DIV_6
  mulu8_sel::select#2 = 1
  call mulu8_sel 
  mulu8_sel::return#2 = mulu8_sel::return#6
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  sin8s::isUpper#6 = phi( sin8s::@10/sin8s::isUpper#7 )
  sin8s::x3#1 = phi( sin8s::@10/sin8s::x3#0 )
  sin8s::x1#2 = phi( sin8s::@10/sin8s::x1#4 )
  mulu8_sel::return#9 = phi( sin8s::@10/mulu8_sel::return#2 )
  sin8s::$8 = mulu8_sel::return#9
  sin8s::x3_6#0 = sin8s::$8
  sin8s::$9 = sin8s::x1#2 - sin8s::x3_6#0
  sin8s::usinx#0 = sin8s::$9
  mulu8_sel::v1#3 = sin8s::x3#1
  mulu8_sel::v2#3 = sin8s::x1#2
  mulu8_sel::select#3 = 0
  call mulu8_sel 
  mulu8_sel::return#3 = mulu8_sel::return#6
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  sin8s::isUpper#5 = phi( sin8s::@11/sin8s::isUpper#6 )
  sin8s::usinx#7 = phi( sin8s::@11/sin8s::usinx#0 )
  sin8s::x1#3 = phi( sin8s::@11/sin8s::x1#2 )
  mulu8_sel::return#10 = phi( sin8s::@11/mulu8_sel::return#3 )
  sin8s::$10 = mulu8_sel::return#10
  sin8s::x4#0 = sin8s::$10
  mulu8_sel::v1#4 = sin8s::x4#0
  mulu8_sel::v2#4 = sin8s::x1#3
  mulu8_sel::select#4 = 0
  call mulu8_sel 
  mulu8_sel::return#4 = mulu8_sel::return#6
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  sin8s::isUpper#3 = phi( sin8s::@12/sin8s::isUpper#5 )
  sin8s::usinx#3 = phi( sin8s::@12/sin8s::usinx#7 )
  mulu8_sel::return#11 = phi( sin8s::@12/mulu8_sel::return#4 )
  sin8s::$11 = mulu8_sel::return#11
  sin8s::x5#0 = sin8s::$11
  sin8s::$12 = sin8s::x5#0 >> 4
  sin8s::x5_128#0 = sin8s::$12
  sin8s::$13 = sin8s::usinx#3 + sin8s::x5_128#0
  sin8s::usinx#1 = sin8s::$13
  sin8s::$14 = sin8s::usinx#1 >= $80
  sin8s::$15 = ! sin8s::$14
  if(sin8s::$15) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  sin8s::isUpper#11 = phi( sin8s::@1/sin8s::isUpper#10 )
  sin8s::x#7 = phi( sin8s::@1/sin8s::x#4 )
  sin8s::$19 = PI_u4f12 - sin8s::x#7
  sin8s::x#1 = sin8s::$19
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  sin8s::isUpper#2 = phi( sin8s::@13/sin8s::isUpper#3, sin8s::@7/sin8s::isUpper#4 )
  sin8s::usinx#4 = phi( sin8s::@13/sin8s::usinx#1, sin8s::@7/sin8s::usinx#2 )
  sin8s::sinx#0 = (signed byte)sin8s::usinx#4
  sin8s::$16 = sin8s::isUpper#2 != 0
  sin8s::$17 = ! sin8s::$16
  if(sin8s::$17) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@13
  sin8s::isUpper#4 = phi( sin8s::@13/sin8s::isUpper#3 )
  sin8s::usinx#5 = phi( sin8s::@13/sin8s::usinx#1 )
  sin8s::usinx#2 = -- sin8s::usinx#5
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  sin8s::sinx#2 = phi( sin8s::@3/sin8s::sinx#0, sin8s::@8/sin8s::sinx#1 )
  sin8s::return#0 = sin8s::sinx#2
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  sin8s::usinx#6 = phi( sin8s::@3/sin8s::usinx#4 )
  sin8s::$20 = - (signed byte)sin8s::usinx#6
  sin8s::sinx#1 = sin8s::$20
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4
  sin8s::return#3 = phi( sin8s::@4/sin8s::return#0 )
  sin8s::return#1 = sin8s::return#3
  return 
  to:@return

byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  mulu8_sel::select#6 = phi( sin8s::@10/mulu8_sel::select#2, sin8s::@11/mulu8_sel::select#3, sin8s::@12/mulu8_sel::select#4, sin8s::@2/mulu8_sel::select#0, sin8s::@9/mulu8_sel::select#1 )
  mulu8_sel::v2#5 = phi( sin8s::@10/mulu8_sel::v2#2, sin8s::@11/mulu8_sel::v2#3, sin8s::@12/mulu8_sel::v2#4, sin8s::@2/mulu8_sel::v2#0, sin8s::@9/mulu8_sel::v2#1 )
  mulu8_sel::v1#5 = phi( sin8s::@10/mulu8_sel::v1#2, sin8s::@11/mulu8_sel::v1#3, sin8s::@12/mulu8_sel::v1#4, sin8s::@2/mulu8_sel::v1#0, sin8s::@9/mulu8_sel::v1#1 )
  mul8u::a#0 = mulu8_sel::v1#5
  mul8u::b#0 = mulu8_sel::v2#5
  call mul8u 
  mul8u::return#0 = mul8u::return#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  mulu8_sel::select#5 = phi( mulu8_sel/mulu8_sel::select#6 )
  mul8u::return#4 = phi( mulu8_sel/mul8u::return#0 )
  mulu8_sel::$0 = mul8u::return#4
  mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5
  mulu8_sel::$2 = > mulu8_sel::$1
  mulu8_sel::return#5 = mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  mulu8_sel::return#12 = phi( mulu8_sel::@1/mulu8_sel::return#5 )
  mulu8_sel::return#6 = mulu8_sel::return#12
  return 
  to:@return

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div16u
  divr16u::divisor#5 = phi( div16u/divr16u::divisor#0 )
  divr16u::dividend#4 = phi( div16u/divr16u::dividend#1 )
  divr16u::rem#8 = phi( div16u/divr16u::rem#3 )
  divr16u::quotient#0 = 0
  divr16u::i#0 = 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  divr16u::i#5 = phi( divr16u/divr16u::i#0, divr16u::@3/divr16u::i#1 )
  divr16u::divisor#3 = phi( divr16u/divr16u::divisor#5, divr16u::@3/divr16u::divisor#6 )
  divr16u::quotient#6 = phi( divr16u/divr16u::quotient#0, divr16u::@3/divr16u::quotient#8 )
  divr16u::dividend#2 = phi( divr16u/divr16u::dividend#4, divr16u::@3/divr16u::dividend#5 )
  divr16u::rem#4 = phi( divr16u/divr16u::rem#8, divr16u::@3/divr16u::rem#9 )
  divr16u::$0 = divr16u::rem#4 << 1
  divr16u::rem#0 = divr16u::$0
  divr16u::$1 = > divr16u::dividend#2
  divr16u::$2 = divr16u::$1 & $80
  divr16u::$3 = divr16u::$2 != 0
  divr16u::$4 = ! divr16u::$3
  if(divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  divr16u::i#3 = phi( divr16u::@1/divr16u::i#5, divr16u::@4/divr16u::i#6 )
  divr16u::divisor#1 = phi( divr16u::@1/divr16u::divisor#3, divr16u::@4/divr16u::divisor#4 )
  divr16u::rem#5 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  divr16u::quotient#3 = phi( divr16u::@1/divr16u::quotient#6, divr16u::@4/divr16u::quotient#7 )
  divr16u::dividend#3 = phi( divr16u::@1/divr16u::dividend#2, divr16u::@4/divr16u::dividend#6 )
  divr16u::$6 = divr16u::dividend#3 << 1
  divr16u::dividend#0 = divr16u::$6
  divr16u::$7 = divr16u::quotient#3 << 1
  divr16u::quotient#1 = divr16u::$7
  divr16u::$8 = divr16u::rem#5 >= divr16u::divisor#1
  divr16u::$9 = ! divr16u::$8
  if(divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  divr16u::i#6 = phi( divr16u::@1/divr16u::i#5 )
  divr16u::divisor#4 = phi( divr16u::@1/divr16u::divisor#3 )
  divr16u::quotient#7 = phi( divr16u::@1/divr16u::quotient#6 )
  divr16u::dividend#6 = phi( divr16u::@1/divr16u::dividend#2 )
  divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0 )
  divr16u::$5 = divr16u::rem#6 | 1
  divr16u::rem#1 = divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  divr16u::divisor#6 = phi( divr16u::@2/divr16u::divisor#1, divr16u::@5/divr16u::divisor#2 )
  divr16u::quotient#8 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  divr16u::dividend#5 = phi( divr16u::@2/divr16u::dividend#0, divr16u::@5/divr16u::dividend#7 )
  divr16u::rem#9 = phi( divr16u::@2/divr16u::rem#5, divr16u::@5/divr16u::rem#2 )
  divr16u::i#2 = phi( divr16u::@2/divr16u::i#3, divr16u::@5/divr16u::i#4 )
  divr16u::i#1 = divr16u::i#2 + rangenext(0,$f)
  divr16u::$11 = divr16u::i#1 != rangelast(0,$f)
  if(divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  divr16u::dividend#7 = phi( divr16u::@2/divr16u::dividend#0 )
  divr16u::i#4 = phi( divr16u::@2/divr16u::i#3 )
  divr16u::divisor#2 = phi( divr16u::@2/divr16u::divisor#1 )
  divr16u::rem#7 = phi( divr16u::@2/divr16u::rem#5 )
  divr16u::quotient#4 = phi( divr16u::@2/divr16u::quotient#1 )
  divr16u::quotient#2 = ++ divr16u::quotient#4
  divr16u::$10 = divr16u::rem#7 - divr16u::divisor#2
  divr16u::rem#2 = divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  divr16u::quotient#5 = phi( divr16u::@3/divr16u::quotient#8 )
  divr16u::return#0 = divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  divr16u::return#3 = phi( divr16u::@6/divr16u::return#0 )
  divr16u::return#1 = divr16u::return#3
  return 
  to:@return

word div16u(word div16u::dividend , word div16u::divisor)
div16u: scope:[div16u]  from sin8u_table
  div16u::divisor#1 = phi( sin8u_table/div16u::divisor#0 )
  div16u::dividend#1 = phi( sin8u_table/div16u::dividend#0 )
  divr16u::dividend#1 = div16u::dividend#1
  divr16u::divisor#0 = div16u::divisor#1
  divr16u::rem#3 = 0
  call divr16u 
  divr16u::return#2 = divr16u::return#1
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  divr16u::return#4 = phi( div16u/divr16u::return#2 )
  div16u::$0 = divr16u::return#4
  div16u::return#0 = div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  div16u::return#3 = phi( div16u::@1/div16u::return#0 )
  div16u::return#1 = div16u::return#3
  return 
  to:@return

word mul8u(byte mul8u::a , byte mul8u::b)
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  mul8u::a#6 = phi( mul8su/mul8u::a#2, mulu8_sel/mul8u::a#0 )
  mul8u::b#2 = phi( mul8su/mul8u::b#1, mulu8_sel/mul8u::b#0 )
  mul8u::res#0 = 0
  mul8u::mb#0 = (word)mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  mul8u::mb#5 = phi( mul8u/mul8u::mb#0, mul8u::@4/mul8u::mb#1 )
  mul8u::res#4 = phi( mul8u/mul8u::res#0, mul8u::@4/mul8u::res#6 )
  mul8u::a#3 = phi( mul8u/mul8u::a#6, mul8u::@4/mul8u::a#1 )
  mul8u::$0 = mul8u::a#3 != 0
  if(mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  mul8u::res#5 = phi( mul8u::@1/mul8u::res#4 )
  mul8u::mb#4 = phi( mul8u::@1/mul8u::mb#5 )
  mul8u::a#4 = phi( mul8u::@1/mul8u::a#3 )
  mul8u::$1 = mul8u::a#4 & 1
  mul8u::$2 = mul8u::$1 != 0
  mul8u::$3 = ! mul8u::$2
  if(mul8u::$3) goto mul8u::@4
  to:mul8u::@5
mul8u::@3: scope:[mul8u]  from mul8u::@1
  mul8u::res#2 = phi( mul8u::@1/mul8u::res#4 )
  mul8u::return#1 = mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@5
  mul8u::res#6 = phi( mul8u::@2/mul8u::res#5, mul8u::@5/mul8u::res#1 )
  mul8u::mb#2 = phi( mul8u::@2/mul8u::mb#4, mul8u::@5/mul8u::mb#3 )
  mul8u::a#5 = phi( mul8u::@2/mul8u::a#4, mul8u::@5/mul8u::a#7 )
  mul8u::$5 = mul8u::a#5 >> 1
  mul8u::a#1 = mul8u::$5
  mul8u::$6 = mul8u::mb#2 << 1
  mul8u::mb#1 = mul8u::$6
  to:mul8u::@1
mul8u::@5: scope:[mul8u]  from mul8u::@2
  mul8u::a#7 = phi( mul8u::@2/mul8u::a#4 )
  mul8u::mb#3 = phi( mul8u::@2/mul8u::mb#4 )
  mul8u::res#3 = phi( mul8u::@2/mul8u::res#5 )
  mul8u::$4 = mul8u::res#3 + mul8u::mb#3
  mul8u::res#1 = mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  mul8u::return#5 = phi( mul8u::@3/mul8u::return#1 )
  mul8u::return#2 = mul8u::return#5
  return 
  to:@return

signed word mul8su(signed byte mul8su::a , byte mul8su::b)
mul8su: scope:[mul8su]  from sin8u_table::@15
  mul8su::b#1 = phi( sin8u_table::@15/mul8su::b#0 )
  mul8su::a#1 = phi( sin8u_table::@15/mul8su::a#0 )
  mul8u::a#2 = (byte)mul8su::a#1
  mul8u::b#1 = (byte)mul8su::b#1
  call mul8u 
  mul8u::return#3 = mul8u::return#2
  to:mul8su::@3
mul8su::@3: scope:[mul8su]  from mul8su
  mul8su::b#3 = phi( mul8su/mul8su::b#1 )
  mul8su::a#2 = phi( mul8su/mul8su::a#1 )
  mul8u::return#6 = phi( mul8su/mul8u::return#3 )
  mul8su::$0 = mul8u::return#6
  mul8su::m#0 = mul8su::$0
  mul8su::$1 = mul8su::a#2 < 0
  mul8su::$2 = ! mul8su::$1
  if(mul8su::$2) goto mul8su::@1
  to:mul8su::@2
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@3
  mul8su::m#2 = phi( mul8su::@2/mul8su::m#1, mul8su::@3/mul8su::m#0 )
  mul8su::return#0 = (signed word)mul8su::m#2
  to:mul8su::@return
mul8su::@2: scope:[mul8su]  from mul8su::@3
  mul8su::b#2 = phi( mul8su::@3/mul8su::b#3 )
  mul8su::m#3 = phi( mul8su::@3/mul8su::m#0 )
  mul8su::$4 = > mul8su::m#3
  mul8su::$7 = (byte)mul8su::b#2
  mul8su::$5 = mul8su::$4 - mul8su::$7
  mul8su::$6 = mul8su::$5
  mul8su::m#1 = mul8su::m#3 byte1= mul8su::$6
  to:mul8su::@1
mul8su::@return: scope:[mul8su]  from mul8su::@1
  mul8su::return#3 = phi( mul8su::@1/mul8su::return#0 )
  mul8su::return#1 = mul8su::return#3
  return 
  to:@return

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from sin8u_table::@11 sin8u_table::@16 sin8u_table::@18 sin8u_table::@20 sin8u_table::@22 sin8u_table::@3 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  print_char_cursor#112 = phi( sin8u_table::@11/print_char_cursor#32, sin8u_table::@16/print_char_cursor#109, sin8u_table::@18/print_char_cursor#37, sin8u_table::@20/print_char_cursor#39, sin8u_table::@22/print_char_cursor#41, sin8u_table::@3/print_char_cursor#108, sin8u_table::@5/print_char_cursor#26, sin8u_table::@7/print_char_cursor#28, sin8u_table::@9/print_char_cursor#30 )
  print_str::str#13 = phi( sin8u_table::@11/print_str::str#5, sin8u_table::@16/print_str::str#6, sin8u_table::@18/print_str::str#7, sin8u_table::@20/print_str::str#8, sin8u_table::@22/print_str::str#9, sin8u_table::@3/print_str::str#1, sin8u_table::@5/print_str::str#2, sin8u_table::@7/print_str::str#3, sin8u_table::@9/print_str::str#4 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  print_char_cursor#97 = phi( print_str/print_char_cursor#112, print_str::@3/print_char_cursor#0 )
  print_str::str#10 = phi( print_str/print_str::str#13, print_str::@3/print_str::str#0 )
  print_str::$1 = 0 != *print_str::str#10
  if(print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  print_char_cursor#96 = phi( print_str::@1/print_char_cursor#97 )
  print_str::str#11 = phi( print_str::@1/print_str::str#10 )
  print_char::ch#0 = *print_str::str#11
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  print_str::str#12 = phi( print_str::@2/print_str::str#11 )
  print_char_cursor#49 = phi( print_str::@2/print_char_cursor#19 )
  print_char_cursor#0 = print_char_cursor#49
  print_str::str#0 = ++ print_str::str#12
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  print_char_cursor#50 = phi( print_str::@1/print_char_cursor#97 )
  print_char_cursor#1 = print_char_cursor#50
  return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from sin8u_table::@13 sin8u_table::@24
  print_char_cursor#98 = phi( sin8u_table::@13/print_char_cursor#34, sin8u_table::@24/print_char_cursor#43 )
  print_line_cursor#25 = phi( sin8u_table::@13/print_line_cursor#27, sin8u_table::@24/print_line_cursor#28 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  print_char_cursor#51 = phi( print_ln/print_char_cursor#98, print_ln::@1/print_char_cursor#51 )
  print_line_cursor#13 = phi( print_ln/print_line_cursor#25, print_ln::@1/print_line_cursor#0 )
  print_ln::$0 = print_line_cursor#13 + $28
  print_line_cursor#0 = print_ln::$0
  print_ln::$1 = print_line_cursor#0 < print_char_cursor#51
  if(print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  print_line_cursor#14 = phi( print_ln::@1/print_line_cursor#0 )
  print_char_cursor#2 = print_line_cursor#14
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  print_char_cursor#52 = phi( print_ln::@2/print_char_cursor#2 )
  print_line_cursor#15 = phi( print_ln::@2/print_line_cursor#14 )
  print_line_cursor#1 = print_line_cursor#15
  print_char_cursor#3 = print_char_cursor#52
  return 
  to:@return

void print_sint(signed word print_sint::w)
print_sint: scope:[print_sint]  from sin8u_table::@21
  print_char_cursor#113 = phi( sin8u_table::@21/print_char_cursor#40 )
  print_sint::w#2 = phi( sin8u_table::@21/print_sint::w#1 )
  print_sint::$0 = print_sint::w#2 < 0
  if(print_sint::$0) goto print_sint::@1
  to:print_sint::@3
print_sint::@1: scope:[print_sint]  from print_sint
  print_sint::w#5 = phi( print_sint/print_sint::w#2 )
  print_char_cursor#99 = phi( print_sint/print_char_cursor#113 )
  print_char::ch#1 = '-'
  call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  print_sint::w#3 = phi( print_sint::@1/print_sint::w#5 )
  print_char_cursor#53 = phi( print_sint::@1/print_char_cursor#19 )
  print_char_cursor#4 = print_char_cursor#53
  print_sint::$4 = - print_sint::w#3
  print_sint::w#0 = print_sint::$4
  to:print_sint::@2
print_sint::@3: scope:[print_sint]  from print_sint
  print_sint::w#7 = phi( print_sint/print_sint::w#2 )
  print_char_cursor#100 = phi( print_sint/print_char_cursor#113 )
  print_char::ch#2 = ' '
  call print_char 
  to:print_sint::@5
print_sint::@5: scope:[print_sint]  from print_sint::@3
  print_sint::w#6 = phi( print_sint::@3/print_sint::w#7 )
  print_char_cursor#54 = phi( print_sint::@3/print_char_cursor#19 )
  print_char_cursor#5 = print_char_cursor#54
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@4 print_sint::@5
  print_char_cursor#101 = phi( print_sint::@4/print_char_cursor#4, print_sint::@5/print_char_cursor#5 )
  print_sint::w#4 = phi( print_sint::@4/print_sint::w#0, print_sint::@5/print_sint::w#6 )
  print_uint::w#0 = (word)print_sint::w#4
  call print_uint 
  to:print_sint::@6
print_sint::@6: scope:[print_sint]  from print_sint::@2
  print_char_cursor#55 = phi( print_sint::@2/print_char_cursor#14 )
  print_char_cursor#6 = print_char_cursor#55
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@6
  print_char_cursor#56 = phi( print_sint::@6/print_char_cursor#6 )
  print_char_cursor#7 = print_char_cursor#56
  return 
  to:@return

void print_schar(signed byte print_schar::b)
print_schar: scope:[print_schar]  from sin8u_table::@19
  print_char_cursor#114 = phi( sin8u_table::@19/print_char_cursor#38 )
  print_schar::b#2 = phi( sin8u_table::@19/print_schar::b#1 )
  print_schar::$0 = print_schar::b#2 < 0
  if(print_schar::$0) goto print_schar::@1
  to:print_schar::@3
print_schar::@1: scope:[print_schar]  from print_schar
  print_schar::b#5 = phi( print_schar/print_schar::b#2 )
  print_char_cursor#102 = phi( print_schar/print_char_cursor#114 )
  print_char::ch#3 = '-'
  call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  print_schar::b#3 = phi( print_schar::@1/print_schar::b#5 )
  print_char_cursor#57 = phi( print_schar::@1/print_char_cursor#19 )
  print_char_cursor#8 = print_char_cursor#57
  print_schar::$4 = - print_schar::b#3
  print_schar::b#0 = print_schar::$4
  to:print_schar::@2
print_schar::@3: scope:[print_schar]  from print_schar
  print_schar::b#7 = phi( print_schar/print_schar::b#2 )
  print_char_cursor#103 = phi( print_schar/print_char_cursor#114 )
  print_char::ch#4 = ' '
  call print_char 
  to:print_schar::@5
print_schar::@5: scope:[print_schar]  from print_schar::@3
  print_schar::b#6 = phi( print_schar::@3/print_schar::b#7 )
  print_char_cursor#58 = phi( print_schar::@3/print_char_cursor#19 )
  print_char_cursor#9 = print_char_cursor#58
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@4 print_schar::@5
  print_char_cursor#104 = phi( print_schar::@4/print_char_cursor#8, print_schar::@5/print_char_cursor#9 )
  print_schar::b#4 = phi( print_schar::@4/print_schar::b#0, print_schar::@5/print_schar::b#6 )
  print_uchar::b#0 = (byte)print_schar::b#4
  call print_uchar 
  to:print_schar::@6
print_schar::@6: scope:[print_schar]  from print_schar::@2
  print_char_cursor#59 = phi( print_schar::@2/print_char_cursor#17 )
  print_char_cursor#10 = print_char_cursor#59
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@6
  print_char_cursor#60 = phi( print_schar::@6/print_char_cursor#10 )
  print_char_cursor#11 = print_char_cursor#60
  return 
  to:@return

void print_uint(word print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2 sin8u_table::@17 sin8u_table::@4
  print_char_cursor#105 = phi( print_sint::@2/print_char_cursor#101, sin8u_table::@17/print_char_cursor#36, sin8u_table::@4/print_char_cursor#25 )
  print_uint::w#3 = phi( print_sint::@2/print_uint::w#0, sin8u_table::@17/print_uint::w#2, sin8u_table::@4/print_uint::w#1 )
  print_uint::$0 = > print_uint::w#3
  print_uchar::b#1 = print_uint::$0
  call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  print_uint::w#4 = phi( print_uint/print_uint::w#3 )
  print_char_cursor#61 = phi( print_uint/print_char_cursor#17 )
  print_char_cursor#12 = print_char_cursor#61
  print_uint::$2 = < print_uint::w#4
  print_uchar::b#2 = print_uint::$2
  call print_uchar 
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  print_char_cursor#62 = phi( print_uint::@1/print_char_cursor#17 )
  print_char_cursor#13 = print_char_cursor#62
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  print_char_cursor#63 = phi( print_uint::@2/print_char_cursor#13 )
  print_char_cursor#14 = print_char_cursor#63
  return 
  to:@return

void print_uchar(byte print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2 print_uint print_uint::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@23 sin8u_table::@6 sin8u_table::@8
  print_char_cursor#106 = phi( print_schar::@2/print_char_cursor#104, print_uint/print_char_cursor#105, print_uint::@1/print_char_cursor#12, sin8u_table::@10/print_char_cursor#31, sin8u_table::@12/print_char_cursor#33, sin8u_table::@23/print_char_cursor#42, sin8u_table::@6/print_char_cursor#27, sin8u_table::@8/print_char_cursor#29 )
  print_uchar::b#8 = phi( print_schar::@2/print_uchar::b#0, print_uint/print_uchar::b#1, print_uint::@1/print_uchar::b#2, sin8u_table::@10/print_uchar::b#5, sin8u_table::@12/print_uchar::b#6, sin8u_table::@23/print_uchar::b#7, sin8u_table::@6/print_uchar::b#3, sin8u_table::@8/print_uchar::b#4 )
  print_uchar::$0 = print_uchar::b#8 >> 4
  print_char::ch#5 = print_hextab[print_uchar::$0]
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  print_uchar::b#9 = phi( print_uchar/print_uchar::b#8 )
  print_char_cursor#64 = phi( print_uchar/print_char_cursor#19 )
  print_char_cursor#15 = print_char_cursor#64
  print_uchar::$2 = print_uchar::b#9 & $f
  print_char::ch#6 = print_hextab[print_uchar::$2]
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  print_char_cursor#65 = phi( print_uchar::@1/print_char_cursor#19 )
  print_char_cursor#16 = print_char_cursor#65
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  print_char_cursor#66 = phi( print_uchar::@2/print_char_cursor#16 )
  print_char_cursor#17 = print_char_cursor#66
  return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  print_char_cursor#67 = phi( print_schar::@1/print_char_cursor#102, print_schar::@3/print_char_cursor#103, print_sint::@1/print_char_cursor#99, print_sint::@3/print_char_cursor#100, print_str::@2/print_char_cursor#96, print_uchar/print_char_cursor#106, print_uchar::@1/print_char_cursor#15 )
  print_char::ch#7 = phi( print_schar::@1/print_char::ch#3, print_schar::@3/print_char::ch#4, print_sint::@1/print_char::ch#1, print_sint::@3/print_char::ch#2, print_str::@2/print_char::ch#0, print_uchar/print_char::ch#5, print_uchar::@1/print_char::ch#6 )
  *print_char_cursor#67 = print_char::ch#7
  print_char_cursor#18 = ++ print_char_cursor#67
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#68 = phi( print_char/print_char_cursor#18 )
  print_char_cursor#19 = print_char_cursor#68
  return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from main
  print_screen#2 = phi( main/print_screen#5 )
  memset::str#0 = (void*)print_screen#2
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset 
  memset::return#0 = memset::return#2
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  print_screen#3 = phi( print_cls/print_screen#2 )
  print_line_cursor#2 = print_screen#3
  print_char_cursor#20 = print_line_cursor#2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  print_char_cursor#69 = phi( print_cls::@1/print_char_cursor#20 )
  print_line_cursor#16 = phi( print_cls::@1/print_line_cursor#2 )
  print_line_cursor#3 = print_line_cursor#16
  print_char_cursor#21 = print_char_cursor#69
  return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  memset::c#4 = phi( print_cls/memset::c#0 )
  memset::str#3 = phi( print_cls/memset::str#0 )
  memset::num#1 = phi( print_cls/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#1 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (byte*)memset::str#2
  memset::$2 = memset::$4 + memset::num#2
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#1 )
  memset::return#2 = memset::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  print_char_cursor#107 = phi( __start::@1/print_char_cursor#111 )
  print_line_cursor#26 = phi( __start::@1/print_line_cursor#30 )
  print_screen#5 = phi( __start::@1/print_screen#7 )
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  print_char_cursor#70 = phi( main/print_char_cursor#21 )
  print_line_cursor#17 = phi( main/print_line_cursor#3 )
  print_line_cursor#4 = print_line_cursor#17
  print_char_cursor#22 = print_char_cursor#70
  sin8u_table::sintab#0 = main::sintab
  sin8u_table::tabsize#0 = main::tabsize
  sin8u_table::min#0 = $a
  sin8u_table::max#0 = $ff
  call sin8u_table 
  to:main::@2
main::@2: scope:[main]  from main::@1
  print_line_cursor#18 = phi( main::@1/print_line_cursor#9 )
  print_char_cursor#71 = phi( main::@1/print_char_cursor#45 )
  print_char_cursor#23 = print_char_cursor#71
  print_line_cursor#5 = print_line_cursor#18
  to:main::@return
main::@return: scope:[main]  from main::@2
  print_char_cursor#72 = phi( main::@2/print_char_cursor#23 )
  print_line_cursor#19 = phi( main::@2/print_line_cursor#5 )
  print_line_cursor#6 = print_line_cursor#19
  print_char_cursor#24 = print_char_cursor#72
  return 
  to:@return

void sin8u_table(byte* sin8u_table::sintab , word sin8u_table::tabsize , byte sin8u_table::min , byte sin8u_table::max)
sin8u_table: scope:[sin8u_table]  from main::@1
  sin8u_table::sintab#27 = phi( main::@1/sin8u_table::sintab#0 )
  print_line_cursor#51 = phi( main::@1/print_line_cursor#4 )
  print_char_cursor#115 = phi( main::@1/print_char_cursor#22 )
  sin8u_table::tabsize#1 = phi( main::@1/sin8u_table::tabsize#0 )
  sin8u_table::min#1 = phi( main::@1/sin8u_table::min#0 )
  sin8u_table::max#1 = phi( main::@1/sin8u_table::max#0 )
  sin8u_table::$0 = sin8u_table::max#1 - sin8u_table::min#1
  sin8u_table::amplitude#0 = sin8u_table::$0
  sin8u_table::$32 = (word)sin8u_table::min#1
  sin8u_table::$1 = sin8u_table::$32 + sin8u_table::max#1
  sin8u_table::sum#0 = sin8u_table::$1
  sin8u_table::$2 = sin8u_table::sum#0 / 2
  sin8u_table::$3 = sin8u_table::$2 + 1
  sin8u_table::mid#0 = (byte)sin8u_table::$3
  div16u::dividend#0 = PI2_u4f12
  div16u::divisor#0 = sin8u_table::tabsize#1
  call div16u 
  div16u::return#2 = div16u::return#1
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table
  sin8u_table::sintab#26 = phi( sin8u_table/sin8u_table::sintab#27 )
  sin8u_table::tabsize#25 = phi( sin8u_table/sin8u_table::tabsize#1 )
  print_line_cursor#49 = phi( sin8u_table/print_line_cursor#51 )
  sin8u_table::mid#21 = phi( sin8u_table/sin8u_table::mid#0 )
  sin8u_table::amplitude#19 = phi( sin8u_table/sin8u_table::amplitude#0 )
  sin8u_table::max#7 = phi( sin8u_table/sin8u_table::max#1 )
  sin8u_table::min#5 = phi( sin8u_table/sin8u_table::min#1 )
  print_char_cursor#108 = phi( sin8u_table/print_char_cursor#115 )
  div16u::return#4 = phi( sin8u_table/div16u::return#2 )
  sin8u_table::$4 = div16u::return#4
  sin8u_table::step#0 = sin8u_table::$4
  print_str::str#1 = sin8u_table::str
  call print_str 
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  sin8u_table::sintab#25 = phi( sin8u_table::@3/sin8u_table::sintab#26 )
  sin8u_table::tabsize#23 = phi( sin8u_table::@3/sin8u_table::tabsize#25 )
  print_line_cursor#47 = phi( sin8u_table::@3/print_line_cursor#49 )
  sin8u_table::mid#19 = phi( sin8u_table::@3/sin8u_table::mid#21 )
  sin8u_table::amplitude#16 = phi( sin8u_table::@3/sin8u_table::amplitude#19 )
  sin8u_table::max#6 = phi( sin8u_table::@3/sin8u_table::max#7 )
  sin8u_table::min#4 = phi( sin8u_table::@3/sin8u_table::min#5 )
  sin8u_table::step#1 = phi( sin8u_table::@3/sin8u_table::step#0 )
  print_char_cursor#73 = phi( sin8u_table::@3/print_char_cursor#1 )
  print_char_cursor#25 = print_char_cursor#73
  print_uint::w#1 = sin8u_table::step#1
  call print_uint 
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  sin8u_table::step#24 = phi( sin8u_table::@4/sin8u_table::step#1 )
  sin8u_table::sintab#24 = phi( sin8u_table::@4/sin8u_table::sintab#25 )
  sin8u_table::tabsize#21 = phi( sin8u_table::@4/sin8u_table::tabsize#23 )
  print_line_cursor#45 = phi( sin8u_table::@4/print_line_cursor#47 )
  sin8u_table::mid#17 = phi( sin8u_table::@4/sin8u_table::mid#19 )
  sin8u_table::amplitude#13 = phi( sin8u_table::@4/sin8u_table::amplitude#16 )
  sin8u_table::max#5 = phi( sin8u_table::@4/sin8u_table::max#6 )
  sin8u_table::min#3 = phi( sin8u_table::@4/sin8u_table::min#4 )
  print_char_cursor#74 = phi( sin8u_table::@4/print_char_cursor#14 )
  print_char_cursor#26 = print_char_cursor#74
  print_str::str#2 = sin8u_table::str1
  call print_str 
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  sin8u_table::step#23 = phi( sin8u_table::@5/sin8u_table::step#24 )
  sin8u_table::sintab#22 = phi( sin8u_table::@5/sin8u_table::sintab#24 )
  sin8u_table::tabsize#19 = phi( sin8u_table::@5/sin8u_table::tabsize#21 )
  print_line_cursor#43 = phi( sin8u_table::@5/print_line_cursor#45 )
  sin8u_table::mid#15 = phi( sin8u_table::@5/sin8u_table::mid#17 )
  sin8u_table::amplitude#10 = phi( sin8u_table::@5/sin8u_table::amplitude#13 )
  sin8u_table::max#4 = phi( sin8u_table::@5/sin8u_table::max#5 )
  sin8u_table::min#2 = phi( sin8u_table::@5/sin8u_table::min#3 )
  print_char_cursor#75 = phi( sin8u_table::@5/print_char_cursor#1 )
  print_char_cursor#27 = print_char_cursor#75
  print_uchar::b#3 = sin8u_table::min#2
  call print_uchar 
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  sin8u_table::step#22 = phi( sin8u_table::@6/sin8u_table::step#23 )
  sin8u_table::sintab#20 = phi( sin8u_table::@6/sin8u_table::sintab#22 )
  sin8u_table::tabsize#17 = phi( sin8u_table::@6/sin8u_table::tabsize#19 )
  print_line_cursor#41 = phi( sin8u_table::@6/print_line_cursor#43 )
  sin8u_table::mid#12 = phi( sin8u_table::@6/sin8u_table::mid#15 )
  sin8u_table::amplitude#7 = phi( sin8u_table::@6/sin8u_table::amplitude#10 )
  sin8u_table::max#3 = phi( sin8u_table::@6/sin8u_table::max#4 )
  print_char_cursor#76 = phi( sin8u_table::@6/print_char_cursor#17 )
  print_char_cursor#28 = print_char_cursor#76
  print_str::str#3 = sin8u_table::str2
  call print_str 
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  sin8u_table::step#21 = phi( sin8u_table::@7/sin8u_table::step#22 )
  sin8u_table::sintab#18 = phi( sin8u_table::@7/sin8u_table::sintab#20 )
  sin8u_table::tabsize#15 = phi( sin8u_table::@7/sin8u_table::tabsize#17 )
  print_line_cursor#39 = phi( sin8u_table::@7/print_line_cursor#41 )
  sin8u_table::mid#9 = phi( sin8u_table::@7/sin8u_table::mid#12 )
  sin8u_table::amplitude#5 = phi( sin8u_table::@7/sin8u_table::amplitude#7 )
  sin8u_table::max#2 = phi( sin8u_table::@7/sin8u_table::max#3 )
  print_char_cursor#77 = phi( sin8u_table::@7/print_char_cursor#1 )
  print_char_cursor#29 = print_char_cursor#77
  print_uchar::b#4 = sin8u_table::max#2
  call print_uchar 
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  sin8u_table::step#20 = phi( sin8u_table::@8/sin8u_table::step#21 )
  sin8u_table::sintab#16 = phi( sin8u_table::@8/sin8u_table::sintab#18 )
  sin8u_table::tabsize#13 = phi( sin8u_table::@8/sin8u_table::tabsize#15 )
  print_line_cursor#37 = phi( sin8u_table::@8/print_line_cursor#39 )
  sin8u_table::mid#7 = phi( sin8u_table::@8/sin8u_table::mid#9 )
  sin8u_table::amplitude#3 = phi( sin8u_table::@8/sin8u_table::amplitude#5 )
  print_char_cursor#78 = phi( sin8u_table::@8/print_char_cursor#17 )
  print_char_cursor#30 = print_char_cursor#78
  print_str::str#4 = sin8u_table::str3
  call print_str 
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  sin8u_table::step#19 = phi( sin8u_table::@9/sin8u_table::step#20 )
  sin8u_table::sintab#14 = phi( sin8u_table::@9/sin8u_table::sintab#16 )
  sin8u_table::tabsize#11 = phi( sin8u_table::@9/sin8u_table::tabsize#13 )
  print_line_cursor#35 = phi( sin8u_table::@9/print_line_cursor#37 )
  sin8u_table::mid#5 = phi( sin8u_table::@9/sin8u_table::mid#7 )
  sin8u_table::amplitude#1 = phi( sin8u_table::@9/sin8u_table::amplitude#3 )
  print_char_cursor#79 = phi( sin8u_table::@9/print_char_cursor#1 )
  print_char_cursor#31 = print_char_cursor#79
  print_uchar::b#5 = sin8u_table::amplitude#1
  call print_uchar 
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  sin8u_table::step#18 = phi( sin8u_table::@10/sin8u_table::step#19 )
  sin8u_table::sintab#12 = phi( sin8u_table::@10/sin8u_table::sintab#14 )
  sin8u_table::amplitude#17 = phi( sin8u_table::@10/sin8u_table::amplitude#1 )
  sin8u_table::tabsize#9 = phi( sin8u_table::@10/sin8u_table::tabsize#11 )
  print_line_cursor#33 = phi( sin8u_table::@10/print_line_cursor#35 )
  sin8u_table::mid#3 = phi( sin8u_table::@10/sin8u_table::mid#5 )
  print_char_cursor#80 = phi( sin8u_table::@10/print_char_cursor#17 )
  print_char_cursor#32 = print_char_cursor#80
  print_str::str#5 = sin8u_table::str4
  call print_str 
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  sin8u_table::step#17 = phi( sin8u_table::@11/sin8u_table::step#18 )
  sin8u_table::sintab#10 = phi( sin8u_table::@11/sin8u_table::sintab#12 )
  sin8u_table::amplitude#14 = phi( sin8u_table::@11/sin8u_table::amplitude#17 )
  sin8u_table::tabsize#7 = phi( sin8u_table::@11/sin8u_table::tabsize#9 )
  print_line_cursor#31 = phi( sin8u_table::@11/print_line_cursor#33 )
  sin8u_table::mid#1 = phi( sin8u_table::@11/sin8u_table::mid#3 )
  print_char_cursor#81 = phi( sin8u_table::@11/print_char_cursor#1 )
  print_char_cursor#33 = print_char_cursor#81
  print_uchar::b#6 = sin8u_table::mid#1
  call print_uchar 
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@12
  sin8u_table::step#16 = phi( sin8u_table::@12/sin8u_table::step#17 )
  sin8u_table::sintab#8 = phi( sin8u_table::@12/sin8u_table::sintab#10 )
  sin8u_table::mid#13 = phi( sin8u_table::@12/sin8u_table::mid#1 )
  sin8u_table::amplitude#11 = phi( sin8u_table::@12/sin8u_table::amplitude#14 )
  sin8u_table::tabsize#5 = phi( sin8u_table::@12/sin8u_table::tabsize#7 )
  print_line_cursor#27 = phi( sin8u_table::@12/print_line_cursor#31 )
  print_char_cursor#82 = phi( sin8u_table::@12/print_char_cursor#17 )
  print_char_cursor#34 = print_char_cursor#82
  call print_ln 
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@13
  sin8u_table::step#15 = phi( sin8u_table::@13/sin8u_table::step#16 )
  sin8u_table::sintab#6 = phi( sin8u_table::@13/sin8u_table::sintab#8 )
  sin8u_table::mid#10 = phi( sin8u_table::@13/sin8u_table::mid#13 )
  sin8u_table::amplitude#8 = phi( sin8u_table::@13/sin8u_table::amplitude#11 )
  sin8u_table::tabsize#3 = phi( sin8u_table::@13/sin8u_table::tabsize#5 )
  print_char_cursor#83 = phi( sin8u_table::@13/print_char_cursor#3 )
  print_line_cursor#20 = phi( sin8u_table::@13/print_line_cursor#1 )
  print_line_cursor#7 = print_line_cursor#20
  print_char_cursor#35 = print_char_cursor#83
  sin8u_table::x#0 = 0
  sin8u_table::i#0 = 0
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@14 sin8u_table::@25
  sin8u_table::step#14 = phi( sin8u_table::@14/sin8u_table::step#15, sin8u_table::@25/sin8u_table::step#2 )
  sin8u_table::sintab#5 = phi( sin8u_table::@14/sin8u_table::sintab#6, sin8u_table::@25/sin8u_table::sintab#7 )
  sin8u_table::mid#8 = phi( sin8u_table::@14/sin8u_table::mid#10, sin8u_table::@25/sin8u_table::mid#11 )
  sin8u_table::amplitude#6 = phi( sin8u_table::@14/sin8u_table::amplitude#8, sin8u_table::@25/sin8u_table::amplitude#9 )
  print_line_cursor#29 = phi( sin8u_table::@14/print_line_cursor#7, sin8u_table::@25/print_line_cursor#8 )
  print_char_cursor#110 = phi( sin8u_table::@14/print_char_cursor#35, sin8u_table::@25/print_char_cursor#44 )
  sin8u_table::x#5 = phi( sin8u_table::@14/sin8u_table::x#0, sin8u_table::@25/sin8u_table::x#1 )
  sin8u_table::tabsize#2 = phi( sin8u_table::@14/sin8u_table::tabsize#3, sin8u_table::@25/sin8u_table::tabsize#4 )
  sin8u_table::i#2 = phi( sin8u_table::@14/sin8u_table::i#0, sin8u_table::@25/sin8u_table::i#1 )
  sin8u_table::$16 = sin8u_table::i#2 < sin8u_table::tabsize#2
  if(sin8u_table::$16) goto sin8u_table::@2
  to:sin8u_table::@return
sin8u_table::@2: scope:[sin8u_table]  from sin8u_table::@1
  sin8u_table::tabsize#26 = phi( sin8u_table::@1/sin8u_table::tabsize#2 )
  sin8u_table::i#14 = phi( sin8u_table::@1/sin8u_table::i#2 )
  sin8u_table::step#13 = phi( sin8u_table::@1/sin8u_table::step#14 )
  print_line_cursor#50 = phi( sin8u_table::@1/print_line_cursor#29 )
  print_char_cursor#117 = phi( sin8u_table::@1/print_char_cursor#110 )
  sin8u_table::sintab#4 = phi( sin8u_table::@1/sin8u_table::sintab#5 )
  sin8u_table::mid#6 = phi( sin8u_table::@1/sin8u_table::mid#8 )
  sin8u_table::amplitude#4 = phi( sin8u_table::@1/sin8u_table::amplitude#6 )
  sin8u_table::x#2 = phi( sin8u_table::@1/sin8u_table::x#5 )
  sin8s::x#2 = sin8u_table::x#2
  call sin8s 
  sin8s::return#2 = sin8s::return#1
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@2
  sin8u_table::tabsize#24 = phi( sin8u_table::@2/sin8u_table::tabsize#26 )
  sin8u_table::i#13 = phi( sin8u_table::@2/sin8u_table::i#14 )
  sin8u_table::step#12 = phi( sin8u_table::@2/sin8u_table::step#13 )
  print_line_cursor#48 = phi( sin8u_table::@2/print_line_cursor#50 )
  sin8u_table::x#8 = phi( sin8u_table::@2/sin8u_table::x#2 )
  print_char_cursor#116 = phi( sin8u_table::@2/print_char_cursor#117 )
  sin8u_table::sintab#3 = phi( sin8u_table::@2/sin8u_table::sintab#4 )
  sin8u_table::mid#4 = phi( sin8u_table::@2/sin8u_table::mid#6 )
  sin8u_table::amplitude#2 = phi( sin8u_table::@2/sin8u_table::amplitude#4 )
  sin8s::return#4 = phi( sin8u_table::@2/sin8s::return#2 )
  sin8u_table::$17 = sin8s::return#4
  sin8u_table::sinx#0 = sin8u_table::$17
  sin8u_table::$18 = sin8u_table::amplitude#2 + 1
  mul8su::a#0 = sin8u_table::sinx#0
  mul8su::b#0 = sin8u_table::$18
  call mul8su 
  mul8su::return#2 = mul8su::return#1
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  sin8u_table::amplitude#25 = phi( sin8u_table::@15/sin8u_table::amplitude#2 )
  sin8u_table::tabsize#22 = phi( sin8u_table::@15/sin8u_table::tabsize#24 )
  sin8u_table::i#12 = phi( sin8u_table::@15/sin8u_table::i#13 )
  sin8u_table::step#11 = phi( sin8u_table::@15/sin8u_table::step#12 )
  print_line_cursor#46 = phi( sin8u_table::@15/print_line_cursor#48 )
  sin8u_table::sinx#4 = phi( sin8u_table::@15/sin8u_table::sinx#0 )
  sin8u_table::x#6 = phi( sin8u_table::@15/sin8u_table::x#8 )
  print_char_cursor#109 = phi( sin8u_table::@15/print_char_cursor#116 )
  sin8u_table::sintab#2 = phi( sin8u_table::@15/sin8u_table::sintab#3 )
  sin8u_table::mid#2 = phi( sin8u_table::@15/sin8u_table::mid#4 )
  mul8su::return#4 = phi( sin8u_table::@15/mul8su::return#2 )
  sin8u_table::$19 = mul8su::return#4
  sin8u_table::sinx_sc#0 = sin8u_table::$19
  sin8u_table::$20 = > sin8u_table::sinx_sc#0
  sin8u_table::$21 = sin8u_table::mid#2 + sin8u_table::$20
  sin8u_table::sinx_tr#0 = sin8u_table::$21
  *sin8u_table::sintab#2 = sin8u_table::sinx_tr#0
  sin8u_table::sintab#1 = ++ sin8u_table::sintab#2
  print_str::str#6 = sin8u_table::str5
  call print_str 
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  sin8u_table::sintab#23 = phi( sin8u_table::@16/sin8u_table::sintab#1 )
  sin8u_table::mid#25 = phi( sin8u_table::@16/sin8u_table::mid#2 )
  sin8u_table::amplitude#24 = phi( sin8u_table::@16/sin8u_table::amplitude#25 )
  sin8u_table::tabsize#20 = phi( sin8u_table::@16/sin8u_table::tabsize#22 )
  sin8u_table::i#11 = phi( sin8u_table::@16/sin8u_table::i#12 )
  sin8u_table::step#10 = phi( sin8u_table::@16/sin8u_table::step#11 )
  print_line_cursor#44 = phi( sin8u_table::@16/print_line_cursor#46 )
  sin8u_table::sinx_tr#7 = phi( sin8u_table::@16/sin8u_table::sinx_tr#0 )
  sin8u_table::sinx_sc#5 = phi( sin8u_table::@16/sin8u_table::sinx_sc#0 )
  sin8u_table::sinx#3 = phi( sin8u_table::@16/sin8u_table::sinx#4 )
  sin8u_table::x#3 = phi( sin8u_table::@16/sin8u_table::x#6 )
  print_char_cursor#84 = phi( sin8u_table::@16/print_char_cursor#1 )
  print_char_cursor#36 = print_char_cursor#84
  print_uint::w#2 = sin8u_table::x#3
  call print_uint 
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  sin8u_table::sintab#21 = phi( sin8u_table::@17/sin8u_table::sintab#23 )
  sin8u_table::mid#24 = phi( sin8u_table::@17/sin8u_table::mid#25 )
  sin8u_table::amplitude#23 = phi( sin8u_table::@17/sin8u_table::amplitude#24 )
  sin8u_table::tabsize#18 = phi( sin8u_table::@17/sin8u_table::tabsize#20 )
  sin8u_table::i#10 = phi( sin8u_table::@17/sin8u_table::i#11 )
  sin8u_table::step#9 = phi( sin8u_table::@17/sin8u_table::step#10 )
  sin8u_table::x#14 = phi( sin8u_table::@17/sin8u_table::x#3 )
  print_line_cursor#42 = phi( sin8u_table::@17/print_line_cursor#44 )
  sin8u_table::sinx_tr#6 = phi( sin8u_table::@17/sin8u_table::sinx_tr#7 )
  sin8u_table::sinx_sc#4 = phi( sin8u_table::@17/sin8u_table::sinx_sc#5 )
  sin8u_table::sinx#2 = phi( sin8u_table::@17/sin8u_table::sinx#3 )
  print_char_cursor#85 = phi( sin8u_table::@17/print_char_cursor#14 )
  print_char_cursor#37 = print_char_cursor#85
  print_str::str#7 = sin8u_table::str6
  call print_str 
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  sin8u_table::sintab#19 = phi( sin8u_table::@18/sin8u_table::sintab#21 )
  sin8u_table::mid#23 = phi( sin8u_table::@18/sin8u_table::mid#24 )
  sin8u_table::amplitude#22 = phi( sin8u_table::@18/sin8u_table::amplitude#23 )
  sin8u_table::tabsize#16 = phi( sin8u_table::@18/sin8u_table::tabsize#18 )
  sin8u_table::i#9 = phi( sin8u_table::@18/sin8u_table::i#10 )
  sin8u_table::step#8 = phi( sin8u_table::@18/sin8u_table::step#9 )
  sin8u_table::x#13 = phi( sin8u_table::@18/sin8u_table::x#14 )
  print_line_cursor#40 = phi( sin8u_table::@18/print_line_cursor#42 )
  sin8u_table::sinx_tr#5 = phi( sin8u_table::@18/sin8u_table::sinx_tr#6 )
  sin8u_table::sinx_sc#3 = phi( sin8u_table::@18/sin8u_table::sinx_sc#4 )
  sin8u_table::sinx#1 = phi( sin8u_table::@18/sin8u_table::sinx#2 )
  print_char_cursor#86 = phi( sin8u_table::@18/print_char_cursor#1 )
  print_char_cursor#38 = print_char_cursor#86
  print_schar::b#1 = sin8u_table::sinx#1
  call print_schar 
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  sin8u_table::sintab#17 = phi( sin8u_table::@19/sin8u_table::sintab#19 )
  sin8u_table::mid#22 = phi( sin8u_table::@19/sin8u_table::mid#23 )
  sin8u_table::amplitude#21 = phi( sin8u_table::@19/sin8u_table::amplitude#22 )
  sin8u_table::tabsize#14 = phi( sin8u_table::@19/sin8u_table::tabsize#16 )
  sin8u_table::i#8 = phi( sin8u_table::@19/sin8u_table::i#9 )
  sin8u_table::step#7 = phi( sin8u_table::@19/sin8u_table::step#8 )
  sin8u_table::x#12 = phi( sin8u_table::@19/sin8u_table::x#13 )
  print_line_cursor#38 = phi( sin8u_table::@19/print_line_cursor#40 )
  sin8u_table::sinx_tr#4 = phi( sin8u_table::@19/sin8u_table::sinx_tr#5 )
  sin8u_table::sinx_sc#2 = phi( sin8u_table::@19/sin8u_table::sinx_sc#3 )
  print_char_cursor#87 = phi( sin8u_table::@19/print_char_cursor#11 )
  print_char_cursor#39 = print_char_cursor#87
  print_str::str#8 = sin8u_table::str7
  call print_str 
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  sin8u_table::sintab#15 = phi( sin8u_table::@20/sin8u_table::sintab#17 )
  sin8u_table::mid#20 = phi( sin8u_table::@20/sin8u_table::mid#22 )
  sin8u_table::amplitude#20 = phi( sin8u_table::@20/sin8u_table::amplitude#21 )
  sin8u_table::tabsize#12 = phi( sin8u_table::@20/sin8u_table::tabsize#14 )
  sin8u_table::i#7 = phi( sin8u_table::@20/sin8u_table::i#8 )
  sin8u_table::step#6 = phi( sin8u_table::@20/sin8u_table::step#7 )
  sin8u_table::x#11 = phi( sin8u_table::@20/sin8u_table::x#12 )
  print_line_cursor#36 = phi( sin8u_table::@20/print_line_cursor#38 )
  sin8u_table::sinx_tr#3 = phi( sin8u_table::@20/sin8u_table::sinx_tr#4 )
  sin8u_table::sinx_sc#1 = phi( sin8u_table::@20/sin8u_table::sinx_sc#2 )
  print_char_cursor#88 = phi( sin8u_table::@20/print_char_cursor#1 )
  print_char_cursor#40 = print_char_cursor#88
  print_sint::w#1 = sin8u_table::sinx_sc#1
  call print_sint 
  to:sin8u_table::@22
sin8u_table::@22: scope:[sin8u_table]  from sin8u_table::@21
  sin8u_table::sintab#13 = phi( sin8u_table::@21/sin8u_table::sintab#15 )
  sin8u_table::mid#18 = phi( sin8u_table::@21/sin8u_table::mid#20 )
  sin8u_table::amplitude#18 = phi( sin8u_table::@21/sin8u_table::amplitude#20 )
  sin8u_table::tabsize#10 = phi( sin8u_table::@21/sin8u_table::tabsize#12 )
  sin8u_table::i#6 = phi( sin8u_table::@21/sin8u_table::i#7 )
  sin8u_table::step#5 = phi( sin8u_table::@21/sin8u_table::step#6 )
  sin8u_table::x#10 = phi( sin8u_table::@21/sin8u_table::x#11 )
  print_line_cursor#34 = phi( sin8u_table::@21/print_line_cursor#36 )
  sin8u_table::sinx_tr#2 = phi( sin8u_table::@21/sin8u_table::sinx_tr#3 )
  print_char_cursor#89 = phi( sin8u_table::@21/print_char_cursor#7 )
  print_char_cursor#41 = print_char_cursor#89
  print_str::str#9 = sin8u_table::str8
  call print_str 
  to:sin8u_table::@23
sin8u_table::@23: scope:[sin8u_table]  from sin8u_table::@22
  sin8u_table::sintab#11 = phi( sin8u_table::@22/sin8u_table::sintab#13 )
  sin8u_table::mid#16 = phi( sin8u_table::@22/sin8u_table::mid#18 )
  sin8u_table::amplitude#15 = phi( sin8u_table::@22/sin8u_table::amplitude#18 )
  sin8u_table::tabsize#8 = phi( sin8u_table::@22/sin8u_table::tabsize#10 )
  sin8u_table::i#5 = phi( sin8u_table::@22/sin8u_table::i#6 )
  sin8u_table::step#4 = phi( sin8u_table::@22/sin8u_table::step#5 )
  sin8u_table::x#9 = phi( sin8u_table::@22/sin8u_table::x#10 )
  print_line_cursor#32 = phi( sin8u_table::@22/print_line_cursor#34 )
  sin8u_table::sinx_tr#1 = phi( sin8u_table::@22/sin8u_table::sinx_tr#2 )
  print_char_cursor#90 = phi( sin8u_table::@22/print_char_cursor#1 )
  print_char_cursor#42 = print_char_cursor#90
  print_uchar::b#7 = sin8u_table::sinx_tr#1
  call print_uchar 
  to:sin8u_table::@24
sin8u_table::@24: scope:[sin8u_table]  from sin8u_table::@23
  sin8u_table::sintab#9 = phi( sin8u_table::@23/sin8u_table::sintab#11 )
  sin8u_table::mid#14 = phi( sin8u_table::@23/sin8u_table::mid#16 )
  sin8u_table::amplitude#12 = phi( sin8u_table::@23/sin8u_table::amplitude#15 )
  sin8u_table::tabsize#6 = phi( sin8u_table::@23/sin8u_table::tabsize#8 )
  sin8u_table::i#4 = phi( sin8u_table::@23/sin8u_table::i#5 )
  sin8u_table::step#3 = phi( sin8u_table::@23/sin8u_table::step#4 )
  sin8u_table::x#7 = phi( sin8u_table::@23/sin8u_table::x#9 )
  print_line_cursor#28 = phi( sin8u_table::@23/print_line_cursor#32 )
  print_char_cursor#91 = phi( sin8u_table::@23/print_char_cursor#17 )
  print_char_cursor#43 = print_char_cursor#91
  call print_ln 
  to:sin8u_table::@25
sin8u_table::@25: scope:[sin8u_table]  from sin8u_table::@24
  sin8u_table::sintab#7 = phi( sin8u_table::@24/sin8u_table::sintab#9 )
  sin8u_table::mid#11 = phi( sin8u_table::@24/sin8u_table::mid#14 )
  sin8u_table::amplitude#9 = phi( sin8u_table::@24/sin8u_table::amplitude#12 )
  sin8u_table::tabsize#4 = phi( sin8u_table::@24/sin8u_table::tabsize#6 )
  sin8u_table::i#3 = phi( sin8u_table::@24/sin8u_table::i#4 )
  sin8u_table::step#2 = phi( sin8u_table::@24/sin8u_table::step#3 )
  sin8u_table::x#4 = phi( sin8u_table::@24/sin8u_table::x#7 )
  print_char_cursor#92 = phi( sin8u_table::@24/print_char_cursor#3 )
  print_line_cursor#21 = phi( sin8u_table::@24/print_line_cursor#1 )
  print_line_cursor#8 = print_line_cursor#21
  print_char_cursor#44 = print_char_cursor#92
  sin8u_table::$31 = sin8u_table::x#4 + sin8u_table::step#2
  sin8u_table::x#1 = sin8u_table::$31
  sin8u_table::i#1 = ++ sin8u_table::i#3
  to:sin8u_table::@1
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@1
  print_line_cursor#22 = phi( sin8u_table::@1/print_line_cursor#29 )
  print_char_cursor#93 = phi( sin8u_table::@1/print_char_cursor#110 )
  print_char_cursor#45 = print_char_cursor#93
  print_line_cursor#9 = print_line_cursor#22
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  print_screen#0 = (byte*)$400
  print_line_cursor#10 = print_screen#0
  print_char_cursor#46 = print_line_cursor#10
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  print_screen#7 = phi( __start::__init1/print_screen#0 )
  print_char_cursor#111 = phi( __start::__init1/print_char_cursor#46 )
  print_line_cursor#30 = phi( __start::__init1/print_line_cursor#10 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  print_screen#6 = phi( __start::@1/print_screen#7 )
  print_char_cursor#94 = phi( __start::@1/print_char_cursor#24 )
  print_line_cursor#23 = phi( __start::@1/print_line_cursor#6 )
  print_line_cursor#11 = print_line_cursor#23
  print_char_cursor#47 = print_char_cursor#94
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  print_char_cursor#95 = phi( __start::@2/print_char_cursor#47 )
  print_line_cursor#24 = phi( __start::@2/print_line_cursor#11 )
  print_screen#4 = phi( __start::@2/print_screen#6 )
  print_screen#1 = print_screen#4
  print_line_cursor#12 = print_line_cursor#24
  print_char_cursor#48 = print_char_cursor#95
  return 
  to:@return

SYMBOL TABLE SSA
constant const word PI2_u4f12 = $6488
constant const word PI_HALF_u4f12 = $1922
constant const word PI_u4f12 = $3244
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
void __start()
word div16u(word div16u::dividend , word div16u::divisor)
word~ div16u::$0
word div16u::dividend
word div16u::dividend#0
word div16u::dividend#1
word div16u::divisor
word div16u::divisor#0
word div16u::divisor#1
word div16u::return
word div16u::return#0
word div16u::return#1
word div16u::return#2
word div16u::return#3
word div16u::return#4
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
word~ divr16u::$0
byte~ divr16u::$1
word~ divr16u::$10
bool~ divr16u::$11
number~ divr16u::$2
bool~ divr16u::$3
bool~ divr16u::$4
number~ divr16u::$5
word~ divr16u::$6
word~ divr16u::$7
bool~ divr16u::$8
bool~ divr16u::$9
word divr16u::dividend
word divr16u::dividend#0
word divr16u::dividend#1
word divr16u::dividend#2
word divr16u::dividend#3
word divr16u::dividend#4
word divr16u::dividend#5
word divr16u::dividend#6
word divr16u::dividend#7
word divr16u::divisor
word divr16u::divisor#0
word divr16u::divisor#1
word divr16u::divisor#2
word divr16u::divisor#3
word divr16u::divisor#4
word divr16u::divisor#5
word divr16u::divisor#6
byte divr16u::i
byte divr16u::i#0
byte divr16u::i#1
byte divr16u::i#2
byte divr16u::i#3
byte divr16u::i#4
byte divr16u::i#5
byte divr16u::i#6
word divr16u::quotient
word divr16u::quotient#0
word divr16u::quotient#1
word divr16u::quotient#2
word divr16u::quotient#3
word divr16u::quotient#4
word divr16u::quotient#5
word divr16u::quotient#6
word divr16u::quotient#7
word divr16u::quotient#8
word divr16u::rem
word divr16u::rem#0
word divr16u::rem#1
word divr16u::rem#2
word divr16u::rem#3
word divr16u::rem#4
word divr16u::rem#5
word divr16u::rem#6
word divr16u::rem#7
word divr16u::rem#8
word divr16u::rem#9
word divr16u::return
word divr16u::return#0
word divr16u::return#1
word divr16u::return#2
word divr16u::return#3
word divr16u::return#4
void main()
constant byte* main::sintab[$14]  = { fill( $14, 0) }
constant word main::tabsize = $14
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
signed word mul8su(signed byte mul8su::a , byte mul8su::b)
word~ mul8su::$0
bool~ mul8su::$1
bool~ mul8su::$2
byte~ mul8su::$4
byte~ mul8su::$5
byte~ mul8su::$6
byte~ mul8su::$7
signed byte mul8su::a
signed byte mul8su::a#0
signed byte mul8su::a#1
signed byte mul8su::a#2
byte mul8su::b
byte mul8su::b#0
byte mul8su::b#1
byte mul8su::b#2
byte mul8su::b#3
word mul8su::m
word mul8su::m#0
word mul8su::m#1
word mul8su::m#2
word mul8su::m#3
signed word mul8su::return
signed word mul8su::return#0
signed word mul8su::return#1
signed word mul8su::return#2
signed word mul8su::return#3
signed word mul8su::return#4
word mul8u(byte mul8u::a , byte mul8u::b)
bool~ mul8u::$0
number~ mul8u::$1
bool~ mul8u::$2
bool~ mul8u::$3
word~ mul8u::$4
byte~ mul8u::$5
word~ mul8u::$6
byte mul8u::a
byte mul8u::a#0
byte mul8u::a#1
byte mul8u::a#2
byte mul8u::a#3
byte mul8u::a#4
byte mul8u::a#5
byte mul8u::a#6
byte mul8u::a#7
byte mul8u::b
byte mul8u::b#0
byte mul8u::b#1
byte mul8u::b#2
word mul8u::mb
word mul8u::mb#0
word mul8u::mb#1
word mul8u::mb#2
word mul8u::mb#3
word mul8u::mb#4
word mul8u::mb#5
word mul8u::res
word mul8u::res#0
word mul8u::res#1
word mul8u::res#2
word mul8u::res#3
word mul8u::res#4
word mul8u::res#5
word mul8u::res#6
word mul8u::return
word mul8u::return#0
word mul8u::return#1
word mul8u::return#2
word mul8u::return#3
word mul8u::return#4
word mul8u::return#5
word mul8u::return#6
byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
word~ mulu8_sel::$0
word~ mulu8_sel::$1
byte~ mulu8_sel::$2
byte mulu8_sel::return
byte mulu8_sel::return#0
byte mulu8_sel::return#1
byte mulu8_sel::return#10
byte mulu8_sel::return#11
byte mulu8_sel::return#12
byte mulu8_sel::return#2
byte mulu8_sel::return#3
byte mulu8_sel::return#4
byte mulu8_sel::return#5
byte mulu8_sel::return#6
byte mulu8_sel::return#7
byte mulu8_sel::return#8
byte mulu8_sel::return#9
byte mulu8_sel::select
byte mulu8_sel::select#0
byte mulu8_sel::select#1
byte mulu8_sel::select#2
byte mulu8_sel::select#3
byte mulu8_sel::select#4
byte mulu8_sel::select#5
byte mulu8_sel::select#6
byte mulu8_sel::v1
byte mulu8_sel::v1#0
byte mulu8_sel::v1#1
byte mulu8_sel::v1#2
byte mulu8_sel::v1#3
byte mulu8_sel::v1#4
byte mulu8_sel::v1#5
byte mulu8_sel::v2
byte mulu8_sel::v2#0
byte mulu8_sel::v2#1
byte mulu8_sel::v2#2
byte mulu8_sel::v2#3
byte mulu8_sel::v2#4
byte mulu8_sel::v2#5
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0
byte print_char::ch#1
byte print_char::ch#2
byte print_char::ch#3
byte print_char::ch#4
byte print_char::ch#5
byte print_char::ch#6
byte print_char::ch#7
byte* print_char_cursor
byte* print_char_cursor#0
byte* print_char_cursor#1
byte* print_char_cursor#10
byte* print_char_cursor#100
byte* print_char_cursor#101
byte* print_char_cursor#102
byte* print_char_cursor#103
byte* print_char_cursor#104
byte* print_char_cursor#105
byte* print_char_cursor#106
byte* print_char_cursor#107
byte* print_char_cursor#108
byte* print_char_cursor#109
byte* print_char_cursor#11
byte* print_char_cursor#110
byte* print_char_cursor#111
byte* print_char_cursor#112
byte* print_char_cursor#113
byte* print_char_cursor#114
byte* print_char_cursor#115
byte* print_char_cursor#116
byte* print_char_cursor#117
byte* print_char_cursor#12
byte* print_char_cursor#13
byte* print_char_cursor#14
byte* print_char_cursor#15
byte* print_char_cursor#16
byte* print_char_cursor#17
byte* print_char_cursor#18
byte* print_char_cursor#19
byte* print_char_cursor#2
byte* print_char_cursor#20
byte* print_char_cursor#21
byte* print_char_cursor#22
byte* print_char_cursor#23
byte* print_char_cursor#24
byte* print_char_cursor#25
byte* print_char_cursor#26
byte* print_char_cursor#27
byte* print_char_cursor#28
byte* print_char_cursor#29
byte* print_char_cursor#3
byte* print_char_cursor#30
byte* print_char_cursor#31
byte* print_char_cursor#32
byte* print_char_cursor#33
byte* print_char_cursor#34
byte* print_char_cursor#35
byte* print_char_cursor#36
byte* print_char_cursor#37
byte* print_char_cursor#38
byte* print_char_cursor#39
byte* print_char_cursor#4
byte* print_char_cursor#40
byte* print_char_cursor#41
byte* print_char_cursor#42
byte* print_char_cursor#43
byte* print_char_cursor#44
byte* print_char_cursor#45
byte* print_char_cursor#46
byte* print_char_cursor#47
byte* print_char_cursor#48
byte* print_char_cursor#49
byte* print_char_cursor#5
byte* print_char_cursor#50
byte* print_char_cursor#51
byte* print_char_cursor#52
byte* print_char_cursor#53
byte* print_char_cursor#54
byte* print_char_cursor#55
byte* print_char_cursor#56
byte* print_char_cursor#57
byte* print_char_cursor#58
byte* print_char_cursor#59
byte* print_char_cursor#6
byte* print_char_cursor#60
byte* print_char_cursor#61
byte* print_char_cursor#62
byte* print_char_cursor#63
byte* print_char_cursor#64
byte* print_char_cursor#65
byte* print_char_cursor#66
byte* print_char_cursor#67
byte* print_char_cursor#68
byte* print_char_cursor#69
byte* print_char_cursor#7
byte* print_char_cursor#70
byte* print_char_cursor#71
byte* print_char_cursor#72
byte* print_char_cursor#73
byte* print_char_cursor#74
byte* print_char_cursor#75
byte* print_char_cursor#76
byte* print_char_cursor#77
byte* print_char_cursor#78
byte* print_char_cursor#79
byte* print_char_cursor#8
byte* print_char_cursor#80
byte* print_char_cursor#81
byte* print_char_cursor#82
byte* print_char_cursor#83
byte* print_char_cursor#84
byte* print_char_cursor#85
byte* print_char_cursor#86
byte* print_char_cursor#87
byte* print_char_cursor#88
byte* print_char_cursor#89
byte* print_char_cursor#9
byte* print_char_cursor#90
byte* print_char_cursor#91
byte* print_char_cursor#92
byte* print_char_cursor#93
byte* print_char_cursor#94
byte* print_char_cursor#95
byte* print_char_cursor#96
byte* print_char_cursor#97
byte* print_char_cursor#98
byte* print_char_cursor#99
void print_cls()
constant const byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0
byte* print_line_cursor#1
byte* print_line_cursor#10
byte* print_line_cursor#11
byte* print_line_cursor#12
byte* print_line_cursor#13
byte* print_line_cursor#14
byte* print_line_cursor#15
byte* print_line_cursor#16
byte* print_line_cursor#17
byte* print_line_cursor#18
byte* print_line_cursor#19
byte* print_line_cursor#2
byte* print_line_cursor#20
byte* print_line_cursor#21
byte* print_line_cursor#22
byte* print_line_cursor#23
byte* print_line_cursor#24
byte* print_line_cursor#25
byte* print_line_cursor#26
byte* print_line_cursor#27
byte* print_line_cursor#28
byte* print_line_cursor#29
byte* print_line_cursor#3
byte* print_line_cursor#30
byte* print_line_cursor#31
byte* print_line_cursor#32
byte* print_line_cursor#33
byte* print_line_cursor#34
byte* print_line_cursor#35
byte* print_line_cursor#36
byte* print_line_cursor#37
byte* print_line_cursor#38
byte* print_line_cursor#39
byte* print_line_cursor#4
byte* print_line_cursor#40
byte* print_line_cursor#41
byte* print_line_cursor#42
byte* print_line_cursor#43
byte* print_line_cursor#44
byte* print_line_cursor#45
byte* print_line_cursor#46
byte* print_line_cursor#47
byte* print_line_cursor#48
byte* print_line_cursor#49
byte* print_line_cursor#5
byte* print_line_cursor#50
byte* print_line_cursor#51
byte* print_line_cursor#6
byte* print_line_cursor#7
byte* print_line_cursor#8
byte* print_line_cursor#9
void print_ln()
byte*~ print_ln::$0
bool~ print_ln::$1
void print_schar(signed byte print_schar::b)
bool~ print_schar::$0
signed byte~ print_schar::$4
signed byte print_schar::b
signed byte print_schar::b#0
signed byte print_schar::b#1
signed byte print_schar::b#2
signed byte print_schar::b#3
signed byte print_schar::b#4
signed byte print_schar::b#5
signed byte print_schar::b#6
signed byte print_schar::b#7
byte* print_screen
byte* print_screen#0
byte* print_screen#1
byte* print_screen#2
byte* print_screen#3
byte* print_screen#4
byte* print_screen#5
byte* print_screen#6
byte* print_screen#7
void print_sint(signed word print_sint::w)
bool~ print_sint::$0
signed word~ print_sint::$4
signed word print_sint::w
signed word print_sint::w#0
signed word print_sint::w#1
signed word print_sint::w#2
signed word print_sint::w#3
signed word print_sint::w#4
signed word print_sint::w#5
signed word print_sint::w#6
signed word print_sint::w#7
void print_str(byte* print_str::str)
bool~ print_str::$1
byte* print_str::str
byte* print_str::str#0
byte* print_str::str#1
byte* print_str::str#10
byte* print_str::str#11
byte* print_str::str#12
byte* print_str::str#13
byte* print_str::str#2
byte* print_str::str#3
byte* print_str::str#4
byte* print_str::str#5
byte* print_str::str#6
byte* print_str::str#7
byte* print_str::str#8
byte* print_str::str#9
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0
number~ print_uchar::$2
byte print_uchar::b
byte print_uchar::b#0
byte print_uchar::b#1
byte print_uchar::b#2
byte print_uchar::b#3
byte print_uchar::b#4
byte print_uchar::b#5
byte print_uchar::b#6
byte print_uchar::b#7
byte print_uchar::b#8
byte print_uchar::b#9
void print_uint(word print_uint::w)
byte~ print_uint::$0
byte~ print_uint::$2
word print_uint::w
word print_uint::w#0
word print_uint::w#1
word print_uint::w#2
word print_uint::w#3
word print_uint::w#4
signed byte sin8s(word sin8s::x)
bool~ sin8s::$0
bool~ sin8s::$1
byte~ sin8s::$10
byte~ sin8s::$11
byte~ sin8s::$12
byte~ sin8s::$13
bool~ sin8s::$14
bool~ sin8s::$15
bool~ sin8s::$16
bool~ sin8s::$17
word~ sin8s::$18
word~ sin8s::$19
bool~ sin8s::$2
signed byte~ sin8s::$20
bool~ sin8s::$3
word~ sin8s::$4
byte~ sin8s::$5
byte~ sin8s::$6
byte~ sin8s::$7
byte~ sin8s::$8
byte~ sin8s::$9
constant const byte sin8s::DIV_6 = $2b
byte sin8s::isUpper
byte sin8s::isUpper#0
byte sin8s::isUpper#1
byte sin8s::isUpper#10
byte sin8s::isUpper#11
byte sin8s::isUpper#2
byte sin8s::isUpper#3
byte sin8s::isUpper#4
byte sin8s::isUpper#5
byte sin8s::isUpper#6
byte sin8s::isUpper#7
byte sin8s::isUpper#8
byte sin8s::isUpper#9
signed byte sin8s::return
signed byte sin8s::return#0
signed byte sin8s::return#1
signed byte sin8s::return#2
signed byte sin8s::return#3
signed byte sin8s::return#4
signed byte sin8s::sinx
signed byte sin8s::sinx#0
signed byte sin8s::sinx#1
signed byte sin8s::sinx#2
byte sin8s::usinx
byte sin8s::usinx#0
byte sin8s::usinx#1
byte sin8s::usinx#2
byte sin8s::usinx#3
byte sin8s::usinx#4
byte sin8s::usinx#5
byte sin8s::usinx#6
byte sin8s::usinx#7
word sin8s::x
word sin8s::x#0
word sin8s::x#1
word sin8s::x#2
word sin8s::x#3
word sin8s::x#4
word sin8s::x#5
word sin8s::x#6
word sin8s::x#7
byte sin8s::x1
byte sin8s::x1#0
byte sin8s::x1#1
byte sin8s::x1#2
byte sin8s::x1#3
byte sin8s::x1#4
byte sin8s::x2
byte sin8s::x2#0
byte sin8s::x3
byte sin8s::x3#0
byte sin8s::x3#1
byte sin8s::x3_6
byte sin8s::x3_6#0
byte sin8s::x4
byte sin8s::x4#0
byte sin8s::x5
byte sin8s::x5#0
byte sin8s::x5_128
byte sin8s::x5_128#0
void sin8u_table(byte* sin8u_table::sintab , word sin8u_table::tabsize , byte sin8u_table::min , byte sin8u_table::max)
byte~ sin8u_table::$0
word~ sin8u_table::$1
bool~ sin8u_table::$16
signed byte~ sin8u_table::$17
number~ sin8u_table::$18
signed word~ sin8u_table::$19
number~ sin8u_table::$2
byte~ sin8u_table::$20
byte~ sin8u_table::$21
number~ sin8u_table::$3
word~ sin8u_table::$31
word~ sin8u_table::$32
word~ sin8u_table::$4
byte sin8u_table::amplitude
byte sin8u_table::amplitude#0
byte sin8u_table::amplitude#1
byte sin8u_table::amplitude#10
byte sin8u_table::amplitude#11
byte sin8u_table::amplitude#12
byte sin8u_table::amplitude#13
byte sin8u_table::amplitude#14
byte sin8u_table::amplitude#15
byte sin8u_table::amplitude#16
byte sin8u_table::amplitude#17
byte sin8u_table::amplitude#18
byte sin8u_table::amplitude#19
byte sin8u_table::amplitude#2
byte sin8u_table::amplitude#20
byte sin8u_table::amplitude#21
byte sin8u_table::amplitude#22
byte sin8u_table::amplitude#23
byte sin8u_table::amplitude#24
byte sin8u_table::amplitude#25
byte sin8u_table::amplitude#3
byte sin8u_table::amplitude#4
byte sin8u_table::amplitude#5
byte sin8u_table::amplitude#6
byte sin8u_table::amplitude#7
byte sin8u_table::amplitude#8
byte sin8u_table::amplitude#9
word sin8u_table::i
word sin8u_table::i#0
word sin8u_table::i#1
word sin8u_table::i#10
word sin8u_table::i#11
word sin8u_table::i#12
word sin8u_table::i#13
word sin8u_table::i#14
word sin8u_table::i#2
word sin8u_table::i#3
word sin8u_table::i#4
word sin8u_table::i#5
word sin8u_table::i#6
word sin8u_table::i#7
word sin8u_table::i#8
word sin8u_table::i#9
byte sin8u_table::max
byte sin8u_table::max#0
byte sin8u_table::max#1
byte sin8u_table::max#2
byte sin8u_table::max#3
byte sin8u_table::max#4
byte sin8u_table::max#5
byte sin8u_table::max#6
byte sin8u_table::max#7
byte sin8u_table::mid
byte sin8u_table::mid#0
byte sin8u_table::mid#1
byte sin8u_table::mid#10
byte sin8u_table::mid#11
byte sin8u_table::mid#12
byte sin8u_table::mid#13
byte sin8u_table::mid#14
byte sin8u_table::mid#15
byte sin8u_table::mid#16
byte sin8u_table::mid#17
byte sin8u_table::mid#18
byte sin8u_table::mid#19
byte sin8u_table::mid#2
byte sin8u_table::mid#20
byte sin8u_table::mid#21
byte sin8u_table::mid#22
byte sin8u_table::mid#23
byte sin8u_table::mid#24
byte sin8u_table::mid#25
byte sin8u_table::mid#3
byte sin8u_table::mid#4
byte sin8u_table::mid#5
byte sin8u_table::mid#6
byte sin8u_table::mid#7
byte sin8u_table::mid#8
byte sin8u_table::mid#9
byte sin8u_table::min
byte sin8u_table::min#0
byte sin8u_table::min#1
byte sin8u_table::min#2
byte sin8u_table::min#3
byte sin8u_table::min#4
byte sin8u_table::min#5
byte* sin8u_table::sintab
byte* sin8u_table::sintab#0
byte* sin8u_table::sintab#1
byte* sin8u_table::sintab#10
byte* sin8u_table::sintab#11
byte* sin8u_table::sintab#12
byte* sin8u_table::sintab#13
byte* sin8u_table::sintab#14
byte* sin8u_table::sintab#15
byte* sin8u_table::sintab#16
byte* sin8u_table::sintab#17
byte* sin8u_table::sintab#18
byte* sin8u_table::sintab#19
byte* sin8u_table::sintab#2
byte* sin8u_table::sintab#20
byte* sin8u_table::sintab#21
byte* sin8u_table::sintab#22
byte* sin8u_table::sintab#23
byte* sin8u_table::sintab#24
byte* sin8u_table::sintab#25
byte* sin8u_table::sintab#26
byte* sin8u_table::sintab#27
byte* sin8u_table::sintab#3
byte* sin8u_table::sintab#4
byte* sin8u_table::sintab#5
byte* sin8u_table::sintab#6
byte* sin8u_table::sintab#7
byte* sin8u_table::sintab#8
byte* sin8u_table::sintab#9
signed byte sin8u_table::sinx
signed byte sin8u_table::sinx#0
signed byte sin8u_table::sinx#1
signed byte sin8u_table::sinx#2
signed byte sin8u_table::sinx#3
signed byte sin8u_table::sinx#4
signed word sin8u_table::sinx_sc
signed word sin8u_table::sinx_sc#0
signed word sin8u_table::sinx_sc#1
signed word sin8u_table::sinx_sc#2
signed word sin8u_table::sinx_sc#3
signed word sin8u_table::sinx_sc#4
signed word sin8u_table::sinx_sc#5
byte sin8u_table::sinx_tr
byte sin8u_table::sinx_tr#0
byte sin8u_table::sinx_tr#1
byte sin8u_table::sinx_tr#2
byte sin8u_table::sinx_tr#3
byte sin8u_table::sinx_tr#4
byte sin8u_table::sinx_tr#5
byte sin8u_table::sinx_tr#6
byte sin8u_table::sinx_tr#7
word sin8u_table::step
word sin8u_table::step#0
word sin8u_table::step#1
word sin8u_table::step#10
word sin8u_table::step#11
word sin8u_table::step#12
word sin8u_table::step#13
word sin8u_table::step#14
word sin8u_table::step#15
word sin8u_table::step#16
word sin8u_table::step#17
word sin8u_table::step#18
word sin8u_table::step#19
word sin8u_table::step#2
word sin8u_table::step#20
word sin8u_table::step#21
word sin8u_table::step#22
word sin8u_table::step#23
word sin8u_table::step#24
word sin8u_table::step#3
word sin8u_table::step#4
word sin8u_table::step#5
word sin8u_table::step#6
word sin8u_table::step#7
word sin8u_table::step#8
word sin8u_table::step#9
constant byte* sin8u_table::str[6]  = "step:"
constant byte* sin8u_table::str1[6]  = " min:"
constant byte* sin8u_table::str2[6]  = " max:"
constant byte* sin8u_table::str3[7]  = " ampl:"
constant byte* sin8u_table::str4[6]  = " mid:"
constant byte* sin8u_table::str5[4]  = "x: "
constant byte* sin8u_table::str6[7]  = " sin: "
constant byte* sin8u_table::str7[$a]  = " scaled: "
constant byte* sin8u_table::str8[9]  = " trans: "
word sin8u_table::sum
word sin8u_table::sum#0
word sin8u_table::tabsize
word sin8u_table::tabsize#0
word sin8u_table::tabsize#1
word sin8u_table::tabsize#10
word sin8u_table::tabsize#11
word sin8u_table::tabsize#12
word sin8u_table::tabsize#13
word sin8u_table::tabsize#14
word sin8u_table::tabsize#15
word sin8u_table::tabsize#16
word sin8u_table::tabsize#17
word sin8u_table::tabsize#18
word sin8u_table::tabsize#19
word sin8u_table::tabsize#2
word sin8u_table::tabsize#20
word sin8u_table::tabsize#21
word sin8u_table::tabsize#22
word sin8u_table::tabsize#23
word sin8u_table::tabsize#24
word sin8u_table::tabsize#25
word sin8u_table::tabsize#26
word sin8u_table::tabsize#3
word sin8u_table::tabsize#4
word sin8u_table::tabsize#5
word sin8u_table::tabsize#6
word sin8u_table::tabsize#7
word sin8u_table::tabsize#8
word sin8u_table::tabsize#9
word sin8u_table::x
word sin8u_table::x#0
word sin8u_table::x#1
word sin8u_table::x#10
word sin8u_table::x#11
word sin8u_table::x#12
word sin8u_table::x#13
word sin8u_table::x#14
word sin8u_table::x#2
word sin8u_table::x#3
word sin8u_table::x#4
word sin8u_table::x#5
word sin8u_table::x#6
word sin8u_table::x#7
word sin8u_table::x#8
word sin8u_table::x#9

Adding number conversion cast (unumber) 1 in sin8s::isUpper#1 = 1
Adding number conversion cast (unumber) 3 in sin8s::$4 = sin8s::x#6 << 3
Adding number conversion cast (unumber) 0 in mulu8_sel::select#0 = 0
Adding number conversion cast (unumber) 1 in mulu8_sel::select#1 = 1
Adding number conversion cast (unumber) 1 in mulu8_sel::select#2 = 1
Adding number conversion cast (unumber) 0 in mulu8_sel::select#3 = 0
Adding number conversion cast (unumber) 0 in mulu8_sel::select#4 = 0
Adding number conversion cast (unumber) 4 in sin8s::$12 = sin8s::x5#0 >> 4
Adding number conversion cast (unumber) $80 in sin8s::$14 = sin8s::usinx#1 >= $80
Adding number conversion cast (unumber) 0 in sin8s::$16 = sin8s::isUpper#2 != 0
Adding number conversion cast (unumber) 1 in divr16u::$0 = divr16u::rem#4 << 1
Adding number conversion cast (unumber) $80 in divr16u::$2 = divr16u::$1 & $80
Adding number conversion cast (unumber) divr16u::$2 in divr16u::$2 = divr16u::$1 & (unumber)$80
Adding number conversion cast (unumber) 0 in divr16u::$3 = divr16u::$2 != 0
Adding number conversion cast (unumber) 1 in divr16u::$6 = divr16u::dividend#3 << 1
Adding number conversion cast (unumber) 1 in divr16u::$7 = divr16u::quotient#3 << 1
Adding number conversion cast (unumber) 1 in divr16u::$5 = divr16u::rem#6 | 1
Adding number conversion cast (unumber) divr16u::$5 in divr16u::$5 = divr16u::rem#6 | (unumber)1
Adding number conversion cast (unumber) 0 in divr16u::rem#3 = 0
Adding number conversion cast (unumber) 0 in mul8u::$0 = mul8u::a#3 != 0
Adding number conversion cast (unumber) 1 in mul8u::$1 = mul8u::a#4 & 1
Adding number conversion cast (unumber) mul8u::$1 in mul8u::$1 = mul8u::a#4 & (unumber)1
Adding number conversion cast (unumber) 0 in mul8u::$2 = mul8u::$1 != 0
Adding number conversion cast (unumber) 1 in mul8u::$5 = mul8u::a#5 >> 1
Adding number conversion cast (unumber) 1 in mul8u::$6 = mul8u::mb#2 << 1
Adding number conversion cast (snumber) 0 in mul8su::$1 = mul8su::a#2 < 0
Adding number conversion cast (unumber) 0 in print_str::$1 = 0 != *print_str::str#10
Adding number conversion cast (unumber) $28 in print_ln::$0 = print_line_cursor#13 + $28
Adding number conversion cast (snumber) 0 in print_sint::$0 = print_sint::w#2 < 0
Adding number conversion cast (snumber) 0 in print_schar::$0 = print_schar::b#2 < 0
Adding number conversion cast (unumber) 4 in print_uchar::$0 = print_uchar::b#8 >> 4
Adding number conversion cast (unumber) $f in print_uchar::$2 = print_uchar::b#9 & $f
Adding number conversion cast (unumber) print_uchar::$2 in print_uchar::$2 = print_uchar::b#9 & (unumber)$f
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Adding number conversion cast (unumber) $a in sin8u_table::min#0 = $a
Adding number conversion cast (unumber) $ff in sin8u_table::max#0 = $ff
Adding number conversion cast (unumber) 2 in sin8u_table::$2 = sin8u_table::sum#0 / 2
Adding number conversion cast (unumber) sin8u_table::$2 in sin8u_table::$2 = sin8u_table::sum#0 / (unumber)2
Adding number conversion cast (unumber) 1 in sin8u_table::$3 = sin8u_table::$2 + 1
Adding number conversion cast (unumber) sin8u_table::$3 in sin8u_table::$3 = sin8u_table::$2 + (unumber)1
Adding number conversion cast (unumber) 1 in sin8u_table::$18 = sin8u_table::amplitude#2 + 1
Adding number conversion cast (unumber) sin8u_table::$18 in sin8u_table::$18 = sin8u_table::amplitude#2 + (unumber)1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast sin8s::isUpper#1 = (unumber)1
Inlining cast mulu8_sel::select#0 = (unumber)0
Inlining cast mulu8_sel::select#1 = (unumber)1
Inlining cast mulu8_sel::select#2 = (unumber)1
Inlining cast mulu8_sel::select#3 = (unumber)0
Inlining cast mulu8_sel::select#4 = (unumber)0
Inlining cast divr16u::rem#3 = (unumber)0
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast memset::dst#0 = (byte*)memset::str#2
Inlining cast sin8u_table::min#0 = (unumber)$a
Inlining cast sin8u_table::max#0 = (unumber)$ff
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast mul8su::b#1
Simplifying constant integer cast 0
Simplifying constant integer cast mul8su::b#2
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in divr16u::$2 = divr16u::$1 & $80
Inferred type updated to word in divr16u::$5 = divr16u::rem#6 | 1
Inferred type updated to byte in mul8u::$1 = mul8u::a#4 & 1
Inferred type updated to byte in print_uchar::$2 = print_uchar::b#9 & $f
Inferred type updated to word in sin8u_table::$2 = sin8u_table::sum#0 / 2
Inferred type updated to word in sin8u_table::$3 = sin8u_table::$2 + 1
Inferred type updated to byte in sin8u_table::$18 = sin8u_table::amplitude#2 + 1
Inversing boolean not [3] sin8s::$1 = sin8s::x#3 < PI_u4f12 from [2] sin8s::$0 = sin8s::x#3 >= PI_u4f12
Inversing boolean not [7] sin8s::$3 = sin8s::x#4 < PI_HALF_u4f12 from [6] sin8s::$2 = sin8s::x#4 >= PI_HALF_u4f12
Inversing boolean not [64] sin8s::$15 = sin8s::usinx#1 < $80 from [63] sin8s::$14 = sin8s::usinx#1 >= $80
Inversing boolean not [72] sin8s::$17 = sin8s::isUpper#2 == 0 from [71] sin8s::$16 = sin8s::isUpper#2 != 0
Inversing boolean not [106] divr16u::$4 = divr16u::$2 == 0 from [105] divr16u::$3 = divr16u::$2 != 0
Inversing boolean not [114] divr16u::$9 = divr16u::rem#5 < divr16u::divisor#1 from [113] divr16u::$8 = divr16u::rem#5 >= divr16u::divisor#1
Inversing boolean not [153] mul8u::$3 = mul8u::$1 == 0 from [152] mul8u::$2 = mul8u::$1 != 0
Inversing boolean not [177] mul8su::$2 = mul8su::a#2 >= 0 from [176] mul8su::$1 = mul8su::a#2 < 0
Inversing boolean not [310] memset::$1 = memset::num#1 <= 0 from [309] memset::$0 = memset::num#1 > 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias sin8s::x#3 = sin8s::x#5 
Alias sin8s::x#0 = sin8s::$18 
Alias sin8s::x1#0 = sin8s::$5 sin8s::x1#1 sin8s::x1#4 sin8s::x1#2 sin8s::x1#3 
Alias mulu8_sel::return#0 = mulu8_sel::return#7 
Alias sin8s::isUpper#3 = sin8s::isUpper#8 sin8s::isUpper#9 sin8s::isUpper#7 sin8s::isUpper#6 sin8s::isUpper#5 sin8s::isUpper#4 
Alias sin8s::x2#0 = sin8s::$6 
Alias mulu8_sel::return#1 = mulu8_sel::return#8 
Alias sin8s::x3#0 = sin8s::$7 sin8s::x3#1 
Alias mulu8_sel::return#2 = mulu8_sel::return#9 
Alias sin8s::x3_6#0 = sin8s::$8 
Alias sin8s::usinx#0 = sin8s::$9 sin8s::usinx#7 sin8s::usinx#3 
Alias mulu8_sel::return#10 = mulu8_sel::return#3 
Alias sin8s::x4#0 = sin8s::$10 
Alias mulu8_sel::return#11 = mulu8_sel::return#4 
Alias sin8s::x5#0 = sin8s::$11 
Alias sin8s::x5_128#0 = sin8s::$12 
Alias sin8s::usinx#1 = sin8s::$13 sin8s::usinx#5 
Alias sin8s::x#4 = sin8s::x#7 
Alias sin8s::isUpper#10 = sin8s::isUpper#11 
Alias sin8s::x#1 = sin8s::$19 
Alias sin8s::return#0 = sin8s::sinx#2 sin8s::return#3 sin8s::return#1 
Alias sin8s::usinx#4 = sin8s::usinx#6 
Alias sin8s::sinx#1 = sin8s::$20 
Alias mul8u::return#0 = mul8u::return#4 
Alias mulu8_sel::select#5 = mulu8_sel::select#6 
Alias mulu8_sel::return#12 = mulu8_sel::return#5 mulu8_sel::$2 mulu8_sel::return#6 
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#6 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#7 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#2 = divr16u::dividend#6 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#3 = divr16u::divisor#4 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#5 = divr16u::rem#7 
Alias divr16u::divisor#1 = divr16u::divisor#2 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#3 divr16u::return#1 
Alias divr16u::return#2 = divr16u::return#4 
Alias div16u::return#0 = div16u::$0 div16u::return#3 div16u::return#1 
Alias mul8u::a#3 = mul8u::a#4 mul8u::a#7 
Alias mul8u::mb#3 = mul8u::mb#4 mul8u::mb#5 
Alias mul8u::res#2 = mul8u::res#5 mul8u::res#4 mul8u::return#1 mul8u::res#3 mul8u::return#5 mul8u::return#2 
Alias mul8u::a#1 = mul8u::$5 
Alias mul8u::mb#1 = mul8u::$6 
Alias mul8u::res#1 = mul8u::$4 
Alias mul8u::return#3 = mul8u::return#6 
Alias mul8su::a#1 = mul8su::a#2 
Alias mul8su::b#1 = mul8su::b#3 mul8su::b#2 mul8su::$7 
Alias mul8su::m#0 = mul8su::$0 mul8su::m#3 
Alias mul8su::$6 = mul8su::$5 
Alias mul8su::return#0 = mul8su::return#3 mul8su::return#1 
Alias print_str::str#10 = print_str::str#11 print_str::str#12 
Alias print_char_cursor#1 = print_char_cursor#96 print_char_cursor#97 print_char_cursor#50 
Alias print_char_cursor#0 = print_char_cursor#49 
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#14 print_char_cursor#2 print_line_cursor#15 print_char_cursor#52 print_line_cursor#1 print_char_cursor#3 
Alias print_char_cursor#100 = print_char_cursor#99 print_char_cursor#113 
Alias print_sint::w#2 = print_sint::w#5 print_sint::w#3 print_sint::w#7 print_sint::w#6 
Alias print_char_cursor#4 = print_char_cursor#53 
Alias print_sint::w#0 = print_sint::$4 
Alias print_char_cursor#5 = print_char_cursor#54 
Alias print_char_cursor#55 = print_char_cursor#6 print_char_cursor#56 print_char_cursor#7 
Alias print_char_cursor#102 = print_char_cursor#114 print_char_cursor#103 
Alias print_schar::b#2 = print_schar::b#5 print_schar::b#3 print_schar::b#7 print_schar::b#6 
Alias print_char_cursor#57 = print_char_cursor#8 
Alias print_schar::b#0 = print_schar::$4 
Alias print_char_cursor#58 = print_char_cursor#9 
Alias print_char_cursor#10 = print_char_cursor#59 print_char_cursor#60 print_char_cursor#11 
Alias print_uchar::b#1 = print_uint::$0 
Alias print_uint::w#3 = print_uint::w#4 
Alias print_char_cursor#12 = print_char_cursor#61 
Alias print_uchar::b#2 = print_uint::$2 
Alias print_char_cursor#13 = print_char_cursor#62 print_char_cursor#63 print_char_cursor#14 
Alias print_uchar::b#8 = print_uchar::b#9 
Alias print_char_cursor#15 = print_char_cursor#64 
Alias print_char_cursor#16 = print_char_cursor#65 print_char_cursor#66 print_char_cursor#17 
Alias print_char_cursor#18 = print_char_cursor#68 print_char_cursor#19 
Alias print_line_cursor#16 = print_screen#3 print_screen#2 print_line_cursor#2 print_char_cursor#20 print_char_cursor#69 print_line_cursor#3 print_char_cursor#21 
Alias memset::return#1 = memset::str#1 memset::return#3 memset::return#2 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_line_cursor#17 = print_line_cursor#4 
Alias print_char_cursor#22 = print_char_cursor#70 
Alias print_char_cursor#23 = print_char_cursor#71 print_char_cursor#72 print_char_cursor#24 
Alias print_line_cursor#18 = print_line_cursor#5 print_line_cursor#19 print_line_cursor#6 
Alias sin8u_table::amplitude#0 = sin8u_table::$0 sin8u_table::amplitude#19 sin8u_table::amplitude#16 sin8u_table::amplitude#13 sin8u_table::amplitude#10 sin8u_table::amplitude#7 sin8u_table::amplitude#5 sin8u_table::amplitude#3 sin8u_table::amplitude#1 sin8u_table::amplitude#17 sin8u_table::amplitude#14 sin8u_table::amplitude#11 sin8u_table::amplitude#8 
Alias sin8u_table::sum#0 = sin8u_table::$1 
Alias div16u::return#2 = div16u::return#4 
Alias print_char_cursor#108 = print_char_cursor#115 
Alias sin8u_table::min#1 = sin8u_table::min#5 sin8u_table::min#4 sin8u_table::min#3 sin8u_table::min#2 
Alias sin8u_table::max#1 = sin8u_table::max#7 sin8u_table::max#6 sin8u_table::max#5 sin8u_table::max#4 sin8u_table::max#3 sin8u_table::max#2 
Alias sin8u_table::mid#0 = sin8u_table::mid#21 sin8u_table::mid#19 sin8u_table::mid#17 sin8u_table::mid#15 sin8u_table::mid#12 sin8u_table::mid#9 sin8u_table::mid#7 sin8u_table::mid#5 sin8u_table::mid#3 sin8u_table::mid#1 sin8u_table::mid#13 sin8u_table::mid#10 
Alias print_line_cursor#27 = print_line_cursor#49 print_line_cursor#51 print_line_cursor#47 print_line_cursor#45 print_line_cursor#43 print_line_cursor#41 print_line_cursor#39 print_line_cursor#37 print_line_cursor#35 print_line_cursor#33 print_line_cursor#31 
Alias sin8u_table::tabsize#1 = sin8u_table::tabsize#25 sin8u_table::tabsize#23 sin8u_table::tabsize#21 sin8u_table::tabsize#19 sin8u_table::tabsize#17 sin8u_table::tabsize#15 sin8u_table::tabsize#13 sin8u_table::tabsize#11 sin8u_table::tabsize#9 sin8u_table::tabsize#7 sin8u_table::tabsize#5 sin8u_table::tabsize#3 
Alias sin8u_table::sintab#10 = sin8u_table::sintab#26 sin8u_table::sintab#27 sin8u_table::sintab#25 sin8u_table::sintab#24 sin8u_table::sintab#22 sin8u_table::sintab#20 sin8u_table::sintab#18 sin8u_table::sintab#16 sin8u_table::sintab#14 sin8u_table::sintab#12 sin8u_table::sintab#8 sin8u_table::sintab#6 
Alias sin8u_table::step#0 = sin8u_table::$4 sin8u_table::step#1 sin8u_table::step#24 sin8u_table::step#23 sin8u_table::step#22 sin8u_table::step#21 sin8u_table::step#20 sin8u_table::step#19 sin8u_table::step#18 sin8u_table::step#17 sin8u_table::step#16 sin8u_table::step#15 
Alias print_char_cursor#25 = print_char_cursor#73 
Alias print_char_cursor#26 = print_char_cursor#74 
Alias print_char_cursor#27 = print_char_cursor#75 
Alias print_char_cursor#28 = print_char_cursor#76 
Alias print_char_cursor#29 = print_char_cursor#77 
Alias print_char_cursor#30 = print_char_cursor#78 
Alias print_char_cursor#31 = print_char_cursor#79 
Alias print_char_cursor#32 = print_char_cursor#80 
Alias print_char_cursor#33 = print_char_cursor#81 
Alias print_char_cursor#34 = print_char_cursor#82 
Alias print_line_cursor#20 = print_line_cursor#7 
Alias print_char_cursor#35 = print_char_cursor#83 
Alias sin8u_table::x#10 = sin8u_table::x#2 sin8u_table::x#5 sin8u_table::x#8 sin8u_table::x#6 sin8u_table::x#3 sin8u_table::x#14 sin8u_table::x#13 sin8u_table::x#12 sin8u_table::x#11 sin8u_table::x#9 sin8u_table::x#7 sin8u_table::x#4 
Alias sin8u_table::amplitude#12 = sin8u_table::amplitude#4 sin8u_table::amplitude#6 sin8u_table::amplitude#2 sin8u_table::amplitude#25 sin8u_table::amplitude#24 sin8u_table::amplitude#23 sin8u_table::amplitude#22 sin8u_table::amplitude#21 sin8u_table::amplitude#20 sin8u_table::amplitude#18 sin8u_table::amplitude#15 sin8u_table::amplitude#9 
Alias sin8u_table::mid#11 = sin8u_table::mid#6 sin8u_table::mid#8 sin8u_table::mid#4 sin8u_table::mid#2 sin8u_table::mid#25 sin8u_table::mid#24 sin8u_table::mid#23 sin8u_table::mid#22 sin8u_table::mid#20 sin8u_table::mid#18 sin8u_table::mid#16 sin8u_table::mid#14 
Alias sin8u_table::sintab#2 = sin8u_table::sintab#4 sin8u_table::sintab#5 sin8u_table::sintab#3 
Alias print_char_cursor#109 = print_char_cursor#117 print_char_cursor#110 print_char_cursor#116 print_char_cursor#93 print_char_cursor#45 
Alias print_line_cursor#22 = print_line_cursor#50 print_line_cursor#29 print_line_cursor#48 print_line_cursor#46 print_line_cursor#44 print_line_cursor#42 print_line_cursor#40 print_line_cursor#38 print_line_cursor#36 print_line_cursor#34 print_line_cursor#32 print_line_cursor#28 print_line_cursor#9 
Alias sin8u_table::step#10 = sin8u_table::step#13 sin8u_table::step#14 sin8u_table::step#12 sin8u_table::step#11 sin8u_table::step#9 sin8u_table::step#8 sin8u_table::step#7 sin8u_table::step#6 sin8u_table::step#5 sin8u_table::step#4 sin8u_table::step#3 sin8u_table::step#2 
Alias sin8u_table::i#10 = sin8u_table::i#14 sin8u_table::i#2 sin8u_table::i#13 sin8u_table::i#12 sin8u_table::i#11 sin8u_table::i#9 sin8u_table::i#8 sin8u_table::i#7 sin8u_table::i#6 sin8u_table::i#5 sin8u_table::i#4 sin8u_table::i#3 
Alias sin8u_table::tabsize#10 = sin8u_table::tabsize#26 sin8u_table::tabsize#2 sin8u_table::tabsize#24 sin8u_table::tabsize#22 sin8u_table::tabsize#20 sin8u_table::tabsize#18 sin8u_table::tabsize#16 sin8u_table::tabsize#14 sin8u_table::tabsize#12 sin8u_table::tabsize#8 sin8u_table::tabsize#6 sin8u_table::tabsize#4 
Alias sin8s::return#2 = sin8s::return#4 
Alias sin8u_table::sinx#0 = sin8u_table::$17 sin8u_table::sinx#4 sin8u_table::sinx#3 sin8u_table::sinx#2 sin8u_table::sinx#1 
Alias mul8su::b#0 = sin8u_table::$18 
Alias mul8su::return#2 = mul8su::return#4 
Alias sin8u_table::sinx_sc#0 = sin8u_table::$19 sin8u_table::sinx_sc#5 sin8u_table::sinx_sc#4 sin8u_table::sinx_sc#3 sin8u_table::sinx_sc#2 sin8u_table::sinx_sc#1 
Alias sin8u_table::sinx_tr#0 = sin8u_table::$21 sin8u_table::sinx_tr#7 sin8u_table::sinx_tr#6 sin8u_table::sinx_tr#5 sin8u_table::sinx_tr#4 sin8u_table::sinx_tr#3 sin8u_table::sinx_tr#2 sin8u_table::sinx_tr#1 
Alias sin8u_table::sintab#1 = sin8u_table::sintab#23 sin8u_table::sintab#21 sin8u_table::sintab#19 sin8u_table::sintab#17 sin8u_table::sintab#15 sin8u_table::sintab#13 sin8u_table::sintab#11 sin8u_table::sintab#9 sin8u_table::sintab#7 
Alias print_char_cursor#36 = print_char_cursor#84 
Alias print_char_cursor#37 = print_char_cursor#85 
Alias print_char_cursor#38 = print_char_cursor#86 
Alias print_char_cursor#39 = print_char_cursor#87 
Alias print_char_cursor#40 = print_char_cursor#88 
Alias print_char_cursor#41 = print_char_cursor#89 
Alias print_char_cursor#42 = print_char_cursor#90 
Alias print_char_cursor#43 = print_char_cursor#91 
Alias print_line_cursor#21 = print_line_cursor#8 
Alias print_char_cursor#44 = print_char_cursor#92 
Alias sin8u_table::x#1 = sin8u_table::$31 
Alias print_screen#0 = print_line_cursor#10 print_char_cursor#46 print_line_cursor#30 print_char_cursor#111 print_screen#7 print_screen#6 print_screen#4 print_screen#1 
Alias print_line_cursor#11 = print_line_cursor#23 print_line_cursor#24 print_line_cursor#12 
Alias print_char_cursor#47 = print_char_cursor#94 print_char_cursor#95 print_char_cursor#48 
Successful SSA optimization Pass2AliasElimination
Alias sin8s::isUpper#10 = sin8s::isUpper#3 sin8s::isUpper#2 
Alias divr16u::dividend#2 = divr16u::dividend#3 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#1 = divr16u::divisor#3 divr16u::divisor#6 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#5 
Alias mul8u::a#3 = mul8u::a#5 
Alias mul8u::mb#2 = mul8u::mb#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values sin8s::x#3 sin8s::x#2
Identical Phi Values divr16u::rem#8 divr16u::rem#3
Identical Phi Values divr16u::dividend#4 divr16u::dividend#1
Identical Phi Values divr16u::divisor#5 divr16u::divisor#0
Identical Phi Values divr16u::divisor#1 divr16u::divisor#5
Identical Phi Values div16u::dividend#1 div16u::dividend#0
Identical Phi Values div16u::divisor#1 div16u::divisor#0
Identical Phi Values mul8su::a#1 mul8su::a#0
Identical Phi Values mul8su::b#1 mul8su::b#0
Identical Phi Values print_char_cursor#0 print_char_cursor#18
Identical Phi Values print_char_cursor#51 print_char_cursor#98
Identical Phi Values print_sint::w#2 print_sint::w#1
Identical Phi Values print_char_cursor#100 print_char_cursor#40
Identical Phi Values print_char_cursor#4 print_char_cursor#18
Identical Phi Values print_char_cursor#5 print_char_cursor#18
Identical Phi Values print_char_cursor#55 print_char_cursor#13
Identical Phi Values print_schar::b#2 print_schar::b#1
Identical Phi Values print_char_cursor#102 print_char_cursor#38
Identical Phi Values print_char_cursor#57 print_char_cursor#18
Identical Phi Values print_char_cursor#58 print_char_cursor#18
Identical Phi Values print_char_cursor#10 print_char_cursor#16
Identical Phi Values print_char_cursor#12 print_char_cursor#16
Identical Phi Values print_char_cursor#13 print_char_cursor#16
Identical Phi Values print_char_cursor#15 print_char_cursor#18
Identical Phi Values print_char_cursor#16 print_char_cursor#18
Identical Phi Values print_line_cursor#16 print_screen#5
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values print_screen#5 print_screen#0
Identical Phi Values print_line_cursor#26 print_screen#0
Identical Phi Values print_char_cursor#107 print_screen#0
Identical Phi Values print_line_cursor#17 print_line_cursor#16
Identical Phi Values print_char_cursor#22 print_line_cursor#16
Identical Phi Values print_char_cursor#23 print_char_cursor#109
Identical Phi Values print_line_cursor#18 print_line_cursor#22
Identical Phi Values sin8u_table::max#1 sin8u_table::max#0
Identical Phi Values sin8u_table::min#1 sin8u_table::min#0
Identical Phi Values sin8u_table::tabsize#1 sin8u_table::tabsize#0
Identical Phi Values print_char_cursor#108 print_char_cursor#22
Identical Phi Values print_line_cursor#27 print_line_cursor#17
Identical Phi Values sin8u_table::sintab#10 sin8u_table::sintab#0
Identical Phi Values print_char_cursor#25 print_char_cursor#1
Identical Phi Values print_char_cursor#26 print_char_cursor#13
Identical Phi Values print_char_cursor#27 print_char_cursor#1
Identical Phi Values print_char_cursor#28 print_char_cursor#16
Identical Phi Values print_char_cursor#29 print_char_cursor#1
Identical Phi Values print_char_cursor#30 print_char_cursor#16
Identical Phi Values print_char_cursor#31 print_char_cursor#1
Identical Phi Values print_char_cursor#32 print_char_cursor#16
Identical Phi Values print_char_cursor#33 print_char_cursor#1
Identical Phi Values print_char_cursor#34 print_char_cursor#16
Identical Phi Values print_line_cursor#20 print_line_cursor#0
Identical Phi Values print_char_cursor#35 print_line_cursor#0
Identical Phi Values sin8u_table::tabsize#10 sin8u_table::tabsize#1
Identical Phi Values sin8u_table::amplitude#12 sin8u_table::amplitude#0
Identical Phi Values sin8u_table::mid#11 sin8u_table::mid#0
Identical Phi Values sin8u_table::step#10 sin8u_table::step#0
Identical Phi Values print_char_cursor#36 print_char_cursor#1
Identical Phi Values print_char_cursor#37 print_char_cursor#13
Identical Phi Values print_char_cursor#38 print_char_cursor#1
Identical Phi Values print_char_cursor#39 print_char_cursor#10
Identical Phi Values print_char_cursor#40 print_char_cursor#1
Identical Phi Values print_char_cursor#41 print_char_cursor#55
Identical Phi Values print_char_cursor#42 print_char_cursor#1
Identical Phi Values print_char_cursor#43 print_char_cursor#16
Identical Phi Values print_line_cursor#21 print_line_cursor#0
Identical Phi Values print_char_cursor#44 print_line_cursor#0
Identical Phi Values print_line_cursor#11 print_line_cursor#18
Identical Phi Values print_char_cursor#47 print_char_cursor#23
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values print_char_cursor#98 print_char_cursor#18
Identical Phi Values print_char_cursor#101 print_char_cursor#18
Identical Phi Values print_char_cursor#104 print_char_cursor#18
Identical Phi Values memset::return#1 memset::str#0
Identical Phi Values print_char_cursor#109 print_line_cursor#0
Identical Phi Values print_line_cursor#22 print_line_cursor#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition sin8s::$1 [3] if(sin8s::x#2<PI_u4f12) goto sin8s::@1
Simple Condition sin8s::$3 [6] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2
Simple Condition sin8s::$15 [46] if(sin8s::usinx#1<$80) goto sin8s::@3
Simple Condition sin8s::$17 [51] if(sin8s::isUpper#10==0) goto sin8s::@4
Simple Condition divr16u::$4 [73] if(divr16u::$2==0) goto divr16u::@2
Simple Condition divr16u::$9 [78] if(divr16u::rem#5<divr16u::divisor#0) goto divr16u::@3
Simple Condition divr16u::$11 [83] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition mul8u::$0 [100] if(mul8u::a#3!=0) goto mul8u::@2
Simple Condition mul8u::$3 [103] if(mul8u::$1==0) goto mul8u::@4
Simple Condition mul8su::$2 [116] if(mul8su::a#0>=0) goto mul8su::@1
Simple Condition print_str::$1 [126] if(0!=*print_str::str#10) goto print_str::@2
Simple Condition print_ln::$1 [136] if(print_line_cursor#0<print_char_cursor#18) goto print_ln::@1
Simple Condition print_sint::$0 [140] if(print_sint::w#1<0) goto print_sint::@1
Simple Condition print_schar::$0 [155] if(print_schar::b#1<0) goto print_schar::@1
Simple Condition memset::$1 [199] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [206] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition sin8u_table::$16 [268] if(sin8u_table::i#10<sin8u_table::tabsize#0) goto sin8u_table::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant sin8s::isUpper#0 = 0
Constant sin8s::isUpper#1 = 1
Constant mulu8_sel::select#0 = 0
Constant mulu8_sel::select#1 = 1
Constant mulu8_sel::v2#2 = sin8s::DIV_6
Constant mulu8_sel::select#2 = 1
Constant mulu8_sel::select#3 = 0
Constant mulu8_sel::select#4 = 0
Constant divr16u::quotient#0 = 0
Constant divr16u::i#0 = 0
Constant divr16u::rem#3 = 0
Constant mul8u::res#0 = 0
Constant print_char::ch#1 = '-'
Constant print_char::ch#2 = ' '
Constant print_char::ch#3 = '-'
Constant print_char::ch#4 = ' '
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant sin8u_table::sintab#0 = main::sintab
Constant sin8u_table::tabsize#0 = main::tabsize
Constant sin8u_table::min#0 = $a
Constant sin8u_table::max#0 = $ff
Constant div16u::dividend#0 = PI2_u4f12
Constant print_str::str#1 = sin8u_table::str
Constant print_str::str#2 = sin8u_table::str1
Constant print_str::str#3 = sin8u_table::str2
Constant print_str::str#4 = sin8u_table::str3
Constant print_str::str#5 = sin8u_table::str4
Constant sin8u_table::x#0 = 0
Constant sin8u_table::i#0 = 0
Constant print_str::str#6 = sin8u_table::str5
Constant print_str::str#7 = sin8u_table::str6
Constant print_str::str#8 = sin8u_table::str7
Constant print_str::str#9 = sin8u_table::str8
Constant print_screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant divr16u::dividend#1 = div16u::dividend#0
Constant memset::str#0 = (void*)print_screen#0
Constant sin8u_table::$32 = (word)sin8u_table::min#0
Constant div16u::divisor#0 = sin8u_table::tabsize#0
Constant print_uchar::b#3 = sin8u_table::min#0
Constant print_uchar::b#4 = sin8u_table::max#0
Successful SSA optimization Pass2ConstantIdentification
Constant divr16u::divisor#0 = div16u::divisor#0
Constant memset::return#0 = memset::str#0
Constant memset::$4 = (byte*)memset::str#0
Constant memset::dst#0 = (byte*)memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [199] if(memset::num#0<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [81] divr16u::i#1 = ++ divr16u::i#2 to ++
Resolved ranged comparison value [83] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to $10
Eliminating unused constant memset::return#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $10 in [64] if(divr16u::i#1!=$10) goto divr16u::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [143] memset::end#0 = memset::$4 + memset::num#0
Constant right-side identified [152] sin8u_table::amplitude#0 = sin8u_table::max#0 - sin8u_table::min#0
Constant right-side identified [153] sin8u_table::sum#0 = sin8u_table::$32 + sin8u_table::max#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::end#0 = memset::$4+memset::num#0
Constant sin8u_table::amplitude#0 = sin8u_table::max#0-sin8u_table::min#0
Constant sin8u_table::sum#0 = sin8u_table::$32+sin8u_table::max#0
Successful SSA optimization Pass2ConstantIdentification
Constant print_uchar::b#5 = sin8u_table::amplitude#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [151] sin8u_table::$2 = sin8u_table::sum#0 / 2
Constant right-side identified [176] mul8su::b#0 = sin8u_table::amplitude#0 + 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant sin8u_table::$2 = sin8u_table::sum#0/2
Constant mul8su::b#0 = sin8u_table::amplitude#0+1
Successful SSA optimization Pass2ConstantIdentification
Constant mul8u::b#1 = mul8su::b#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [150] sin8u_table::$3 = sin8u_table::$2 + 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant sin8u_table::$3 = sin8u_table::$2+1
Successful SSA optimization Pass2ConstantIdentification
Constant sin8u_table::mid#0 = (byte)sin8u_table::$3
Successful SSA optimization Pass2ConstantIdentification
Constant print_uchar::b#6 = sin8u_table::mid#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [37] sin8s::sinx#0 = (signed byte)sin8s::usinx#4 keeping sin8s::usinx#4
Inlining Noop Cast [89] mul8su::return#0 = (signed word)mul8su::m#2 keeping mul8su::m#2
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [173] mul8su::return#2 = (signed word)mul8su::m#2 keeping mul8su::m#2
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings sin8s::isUpper#0
Inlining constant with var siblings sin8s::isUpper#1
Inlining constant with var siblings mulu8_sel::select#0
Inlining constant with var siblings mulu8_sel::select#1
Inlining constant with var siblings mulu8_sel::v2#2
Inlining constant with var siblings mulu8_sel::select#2
Inlining constant with var siblings mulu8_sel::select#3
Inlining constant with var siblings mulu8_sel::select#4
Inlining constant with var siblings divr16u::quotient#0
Inlining constant with var siblings divr16u::i#0
Inlining constant with var siblings divr16u::rem#3
Inlining constant with var siblings divr16u::dividend#1
Inlining constant with var siblings mul8u::res#0
Inlining constant with var siblings mul8u::b#1
Inlining constant with var siblings print_str::str#1
Inlining constant with var siblings print_str::str#2
Inlining constant with var siblings print_str::str#3
Inlining constant with var siblings print_str::str#4
Inlining constant with var siblings print_str::str#5
Inlining constant with var siblings print_str::str#6
Inlining constant with var siblings print_str::str#7
Inlining constant with var siblings print_str::str#8
Inlining constant with var siblings print_str::str#9
Inlining constant with var siblings print_uchar::b#3
Inlining constant with var siblings print_uchar::b#4
Inlining constant with var siblings print_uchar::b#5
Inlining constant with var siblings print_uchar::b#6
Inlining constant with var siblings print_char::ch#1
Inlining constant with var siblings print_char::ch#2
Inlining constant with var siblings print_char::ch#3
Inlining constant with var siblings print_char::ch#4
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings sin8u_table::sintab#0
Inlining constant with var siblings sin8u_table::x#0
Inlining constant with var siblings sin8u_table::i#0
Constant inlined print_uchar::b#6 = sin8u_table::mid#0
Constant inlined divr16u::rem#3 = 0
Constant inlined divr16u::i#0 = 0
Constant inlined print_uchar::b#3 = sin8u_table::min#0
Constant inlined print_uchar::b#4 = sin8u_table::max#0
Constant inlined print_uchar::b#5 = sin8u_table::amplitude#0
Constant inlined sin8u_table::i#0 = 0
Constant inlined sin8u_table::sintab#0 = main::sintab
Constant inlined sin8s::isUpper#1 = 1
Constant inlined sin8s::isUpper#0 = 0
Constant inlined divr16u::quotient#0 = 0
Constant inlined memset::$4 = (byte*)memset::str#0
Constant inlined div16u::divisor#0 = main::tabsize
Constant inlined sin8u_table::$2 = sin8u_table::sum#0/2
Constant inlined sin8u_table::$3 = sin8u_table::sum#0/2+1
Constant inlined mulu8_sel::select#0 = 0
Constant inlined div16u::dividend#0 = PI2_u4f12
Constant inlined mulu8_sel::select#2 = 1
Constant inlined divr16u::divisor#0 = main::tabsize
Constant inlined mulu8_sel::select#1 = 1
Constant inlined mulu8_sel::select#4 = 0
Constant inlined mulu8_sel::select#3 = 0
Constant inlined sin8u_table::tabsize#0 = main::tabsize
Constant inlined sin8u_table::$32 = (word)sin8u_table::min#0
Constant inlined divr16u::dividend#1 = PI2_u4f12
Constant inlined print_char::ch#3 = '-'
Constant inlined print_char::ch#2 = ' '
Constant inlined mulu8_sel::v2#2 = sin8s::DIV_6
Constant inlined print_str::str#9 = sin8u_table::str8
Constant inlined mul8u::res#0 = 0
Constant inlined print_char::ch#4 = ' '
Constant inlined mul8u::b#1 = mul8su::b#0
Constant inlined print_char::ch#1 = '-'
Constant inlined print_str::str#4 = sin8u_table::str3
Constant inlined print_str::str#3 = sin8u_table::str2
Constant inlined print_str::str#2 = sin8u_table::str1
Constant inlined memset::dst#0 = (byte*)memset::str#0
Constant inlined print_str::str#1 = sin8u_table::str
Constant inlined sin8u_table::x#0 = 0
Constant inlined print_str::str#8 = sin8u_table::str7
Constant inlined print_str::str#7 = sin8u_table::str6
Constant inlined print_str::str#6 = sin8u_table::str5
Constant inlined print_str::str#5 = sin8u_table::str4
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $14
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting sin8s::@14(between sin8s and sin8s::@1)
Fixing phi predecessor for sin8s::isUpper#10 to new block ( sin8s -> sin8s::@14 ) during phi lifting.
Added new block during phi lifting sin8s::@15(between sin8s::@1 and sin8s::@2)
Added new block during phi lifting sin8s::@16(between sin8s::@13 and sin8s::@3)
Added new block during phi lifting sin8s::@17(between sin8s::@3 and sin8s::@4)
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul8u::@6(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting mul8su::@4(between mul8su::@3 and mul8su::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of sin8u_table
Adding NOP phi() at start of sin8u_table::@13
Adding NOP phi() at start of sin8u_table::@14
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of div16u
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_schar::@6
Adding NOP phi() at start of print_sint::@6
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of divr16u::@6
Adding NOP phi() at start of mul8u::@3
CALL GRAPH
Calls in [main] to print_cls:1 sin8u_table:3 
Calls in [print_cls] to memset:7 
Calls in [sin8u_table] to div16u:11 print_str:14 print_uint:18 print_str:20 print_uchar:22 print_str:24 print_uchar:26 print_str:28 print_uchar:30 print_str:32 print_uchar:34 print_ln:36 sin8s:42 mul8su:46 print_str:53 print_uint:57 print_str:59 print_schar:61 print_str:63 print_sint:65 print_str:67 print_uchar:71 print_ln:73 
Calls in [div16u] to divr16u:89 
Calls in [print_str] to print_char:102 
Calls in [print_uint] to print_uchar:110 print_uchar:114 
Calls in [print_uchar] to print_char:122 print_char:127 
Calls in [sin8s] to mulu8_sel:152 mulu8_sel:159 mulu8_sel:164 mulu8_sel:172 mulu8_sel:179 
Calls in [mul8su] to mul8u:199 
Calls in [print_schar] to print_char:212 print_uchar:218 print_char:222 
Calls in [print_sint] to print_char:227 print_uint:233 print_char:237 
Calls in [mulu8_sel] to mul8u:277 

Created 40 initial phi equivalence classes
Coalesced [16] print_uint::w#7 = print_uint::w#1
Coalesced [17] print_char_cursor#130 = print_char_cursor#1
Coalesced [19] print_char_cursor#123 = print_char_cursor#18
Coalesced [21] print_char_cursor#137 = print_char_cursor#1
Coalesced (already) [23] print_char_cursor#124 = print_char_cursor#18
Coalesced (already) [25] print_char_cursor#138 = print_char_cursor#1
Coalesced (already) [27] print_char_cursor#125 = print_char_cursor#18
Coalesced (already) [29] print_char_cursor#134 = print_char_cursor#1
Coalesced (already) [31] print_char_cursor#118 = print_char_cursor#18
Coalesced (already) [33] print_char_cursor#135 = print_char_cursor#1
Not coalescing [52] print_char_cursor#119 = print_line_cursor#0
Coalesced [55] print_uint::w#6 = print_uint::w#2
Coalesced (already) [56] print_char_cursor#129 = print_char_cursor#1
Coalesced (already) [58] print_char_cursor#120 = print_char_cursor#18
Coalesced (already) [62] print_char_cursor#121 = print_char_cursor#18
Coalesced (already) [66] print_char_cursor#122 = print_char_cursor#18
Coalesced [69] print_uchar::b#13 = print_uchar::b#7
Coalesced (already) [70] print_char_cursor#136 = print_char_cursor#1
Coalesced [72] print_line_cursor#52 = print_line_cursor#0
Coalesced [76] sin8u_table::i#15 = sin8u_table::i#1
Coalesced [77] sin8u_table::x#15 = sin8u_table::x#1
Coalesced [78] sin8u_table::sintab#28 = sin8u_table::sintab#1
Coalesced [87] memset::dst#4 = memset::dst#1
Coalesced [94] print_str::str#14 = print_str::str#13
Coalesced [95] print_char_cursor#126 = print_char_cursor#112
Coalesced [100] print_char::ch#8 = print_char::ch#0
Coalesced [101] print_char_cursor#143 = print_char_cursor#1
Coalesced [104] print_str::str#15 = print_str::str#0
Coalesced (already) [105] print_char_cursor#127 = print_char_cursor#18
Coalesced [108] print_uchar::b#11 = print_uchar::b#1
Coalesced (already) [109] print_char_cursor#132 = print_char_cursor#105
Coalesced [112] print_uchar::b#12 = print_uchar::b#2
Coalesced (already) [113] print_char_cursor#133 = print_char_cursor#18
Coalesced [120] print_char::ch#9 = print_char::ch#5
Coalesced (already) [121] print_char_cursor#144 = print_char_cursor#106
Coalesced [125] print_char::ch#10 = print_char::ch#6
Coalesced (already) [126] print_char_cursor#145 = print_char_cursor#18
Coalesced [131] print_line_cursor#53 = print_line_cursor#25
Coalesced (already) [137] print_line_cursor#54 = print_line_cursor#0
Coalesced [140] sin8s::x#9 = sin8s::x#0
Coalesced [144] sin8s::x#11 = sin8s::x#1
Coalesced [150] mulu8_sel::v1#9 = mulu8_sel::v1#0
Coalesced [151] mulu8_sel::v2#8 = mulu8_sel::v2#0
Coalesced [157] mulu8_sel::v1#10 = mulu8_sel::v1#1
Coalesced [158] mulu8_sel::v2#9 = mulu8_sel::v2#1
Coalesced [163] mulu8_sel::v1#6 = mulu8_sel::v1#2
Coalesced [170] mulu8_sel::v1#7 = mulu8_sel::v1#3
Coalesced [171] mulu8_sel::v2#6 = mulu8_sel::v2#3
Coalesced [177] mulu8_sel::v1#8 = mulu8_sel::v1#4
Coalesced [178] mulu8_sel::v2#7 = mulu8_sel::v2#4
Coalesced [186] sin8s::usinx#9 = sin8s::usinx#2
Coalesced [190] sin8s::return#6 = sin8s::sinx#1
Coalesced [194] sin8s::usinx#8 = sin8s::usinx#1
Coalesced [195] sin8s::x#10 = sin8s::x#4
Coalesced [196] sin8s::x#8 = sin8s::x#2
Coalesced [198] mul8u::a#8 = mul8u::a#2
Coalesced [206] mul8su::m#4 = mul8su::m#1
Coalesced [209] mul8su::m#5 = mul8su::m#0
Coalesced (already) [211] print_char_cursor#140 = print_char_cursor#1
Coalesced [213] print_schar::b#9 = print_schar::b#1
Coalesced [216] print_uchar::b#10 = print_uchar::b#0
Coalesced (already) [217] print_char_cursor#131 = print_char_cursor#18
Coalesced (already) [221] print_char_cursor#139 = print_char_cursor#1
Coalesced [224] print_schar::b#8 = print_schar::b#0
Coalesced (already) [226] print_char_cursor#142 = print_char_cursor#1
Coalesced [228] print_sint::w#9 = print_sint::w#1
Coalesced [231] print_uint::w#5 = print_uint::w#0
Coalesced (already) [232] print_char_cursor#128 = print_char_cursor#18
Coalesced (already) [236] print_char_cursor#141 = print_char_cursor#1
Coalesced [239] print_sint::w#8 = print_sint::w#0
Coalesced [247] divr16u::rem#12 = divr16u::rem#1
Coalesced [254] divr16u::rem#14 = divr16u::rem#2
Coalesced [255] divr16u::return#6 = divr16u::quotient#2
Coalesced [261] divr16u::rem#10 = divr16u::rem#9
Coalesced [262] divr16u::dividend#8 = divr16u::dividend#0
Coalesced [263] divr16u::quotient#9 = divr16u::return#0
Coalesced [264] divr16u::i#7 = divr16u::i#1
Coalesced [265] divr16u::rem#13 = divr16u::rem#5
Coalesced [266] divr16u::return#5 = divr16u::quotient#1
Coalesced [267] divr16u::rem#11 = divr16u::rem#0
Coalesced [275] mul8u::b#3 = mul8u::b#0
Coalesced [276] mul8u::a#9 = mul8u::a#0
Coalesced [285] mul8u::a#10 = mul8u::a#6
Coalesced [286] mul8u::mb#6 = mul8u::mb#0
Coalesced [294] mul8u::res#9 = mul8u::res#1
Coalesced [298] mul8u::a#11 = mul8u::a#1
Coalesced [299] mul8u::res#7 = mul8u::res#6
Coalesced [300] mul8u::mb#7 = mul8u::mb#1
Coalesced (already) [301] mul8u::res#8 = mul8u::res#2
Coalesced down to 28 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label print_cls::@1
Culled Empty Block label sin8u_table::@14
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Culled Empty Block label print_uint::@2
Culled Empty Block label print_uchar::@2
Culled Empty Block label print_ln::@2
Culled Empty Block label print_ln::@3
Culled Empty Block label sin8s::@16
Culled Empty Block label sin8s::@15
Culled Empty Block label sin8s::@14
Culled Empty Block label mul8su::@4
Culled Empty Block label print_schar::@5
Culled Empty Block label print_schar::@6
Culled Empty Block label print_sint::@5
Culled Empty Block label print_sint::@6
Culled Empty Block label divr16u::@6
Culled Empty Block label divr16u::@7
Culled Empty Block label divr16u::@9
Culled Empty Block label divr16u::@8
Culled Empty Block label mul8u::@3
Culled Empty Block label mul8u::@6
Renumbering block sin8s::@17 to sin8s::@14
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@5 to mul8u::@4
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block sin8u_table::@15 to sin8u_table::@14
Renumbering block sin8u_table::@16 to sin8u_table::@15
Renumbering block sin8u_table::@17 to sin8u_table::@16
Renumbering block sin8u_table::@18 to sin8u_table::@17
Renumbering block sin8u_table::@19 to sin8u_table::@18
Renumbering block sin8u_table::@20 to sin8u_table::@19
Renumbering block sin8u_table::@21 to sin8u_table::@20
Renumbering block sin8u_table::@22 to sin8u_table::@21
Renumbering block sin8u_table::@23 to sin8u_table::@22
Renumbering block sin8u_table::@24 to sin8u_table::@23
Renumbering block sin8u_table::@25 to sin8u_table::@24
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of sin8u_table
Adding NOP phi() at start of sin8u_table::@5
Adding NOP phi() at start of sin8u_table::@6
Adding NOP phi() at start of sin8u_table::@7
Adding NOP phi() at start of sin8u_table::@8
Adding NOP phi() at start of sin8u_table::@9
Adding NOP phi() at start of sin8u_table::@10
Adding NOP phi() at start of sin8u_table::@11
Adding NOP phi() at start of sin8u_table::@12
Adding NOP phi() at start of sin8u_table::@13
Adding NOP phi() at start of sin8u_table::@17
Adding NOP phi() at start of sin8u_table::@19
Adding NOP phi() at start of sin8u_table::@21
Adding NOP phi() at start of sin8u_table::@23
Adding NOP phi() at start of memset
Adding NOP phi() at start of div16u
Adding NOP phi() at start of print_schar::@3
Adding NOP phi() at start of print_schar::@1
Adding NOP phi() at start of print_sint::@3
Adding NOP phi() at start of print_sint::@1
Adding NOP phi() at start of divr16u

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call sin8u_table 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from main
  [5] phi()
  [6] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [7] return 
  to:@return

void sin8u_table(byte* sin8u_table::sintab , word sin8u_table::tabsize , byte sin8u_table::min , byte sin8u_table::max)
sin8u_table: scope:[sin8u_table]  from main::@1
  [8] phi()
  [9] call div16u 
  [10] div16u::return#2 = div16u::return#0
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table
  [11] sin8u_table::step#0 = div16u::return#2
  [12] call print_str 
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  [13] print_uint::w#1 = sin8u_table::step#0
  [14] call print_uint 
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  [15] phi()
  [16] call print_str 
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  [17] phi()
  [18] call print_uchar 
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  [19] phi()
  [20] call print_str 
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  [21] phi()
  [22] call print_uchar 
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  [23] phi()
  [24] call print_str 
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  [25] phi()
  [26] call print_uchar 
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  [27] phi()
  [28] call print_str 
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  [29] phi()
  [30] call print_uchar 
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@12
  [31] phi()
  [32] call print_ln 
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@13 sin8u_table::@24
  [33] sin8u_table::sintab#2 = phi( sin8u_table::@13/main::sintab, sin8u_table::@24/sin8u_table::sintab#1 )
  [33] sin8u_table::x#10 = phi( sin8u_table::@13/0, sin8u_table::@24/sin8u_table::x#1 )
  [33] sin8u_table::i#10 = phi( sin8u_table::@13/0, sin8u_table::@24/sin8u_table::i#1 )
  [34] if(sin8u_table::i#10<main::tabsize) goto sin8u_table::@2
  to:sin8u_table::@return
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@1
  [35] return 
  to:@return
sin8u_table::@2: scope:[sin8u_table]  from sin8u_table::@1
  [36] sin8s::x#2 = sin8u_table::x#10
  [37] call sin8s 
  [38] sin8s::return#2 = sin8s::return#0
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@2
  [39] sin8u_table::sinx#0 = sin8s::return#2
  [40] mul8su::a#0 = sin8u_table::sinx#0
  [41] call mul8su 
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@14
  [42] sin8u_table::sinx_sc#0 = (signed word)mul8su::m#2
  [43] sin8u_table::$20 = > sin8u_table::sinx_sc#0
  [44] sin8u_table::sinx_tr#0 = sin8u_table::mid#0 + sin8u_table::$20
  [45] *sin8u_table::sintab#2 = sin8u_table::sinx_tr#0
  [46] sin8u_table::sintab#1 = ++ sin8u_table::sintab#2
  [47] print_char_cursor#119 = print_line_cursor#0
  [48] call print_str 
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  [49] print_uint::w#2 = sin8u_table::x#10
  [50] call print_uint 
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  [51] phi()
  [52] call print_str 
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  [53] print_schar::b#1 = sin8u_table::sinx#0
  [54] call print_schar 
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  [55] phi()
  [56] call print_str 
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  [57] print_sint::w#1 = sin8u_table::sinx_sc#0
  [58] call print_sint 
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  [59] phi()
  [60] call print_str 
  to:sin8u_table::@22
sin8u_table::@22: scope:[sin8u_table]  from sin8u_table::@21
  [61] print_uchar::b#7 = sin8u_table::sinx_tr#0
  [62] call print_uchar 
  to:sin8u_table::@23
sin8u_table::@23: scope:[sin8u_table]  from sin8u_table::@22
  [63] phi()
  [64] call print_ln 
  to:sin8u_table::@24
sin8u_table::@24: scope:[sin8u_table]  from sin8u_table::@23
  [65] sin8u_table::x#1 = sin8u_table::x#10 + sin8u_table::step#0
  [66] sin8u_table::i#1 = ++ sin8u_table::i#10
  to:sin8u_table::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  [67] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [68] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [69] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [70] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [71] *memset::dst#2 = memset::c#0
  [72] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

word div16u(word div16u::dividend , word div16u::divisor)
div16u: scope:[div16u]  from sin8u_table
  [73] phi()
  [74] call divr16u 
  [75] divr16u::return#2 = divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [76] div16u::return#0 = divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [77] return 
  to:@return

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from sin8u_table::@11 sin8u_table::@15 sin8u_table::@17 sin8u_table::@19 sin8u_table::@21 sin8u_table::@3 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  [78] print_char_cursor#112 = phi( sin8u_table::@11/print_char_cursor#18, sin8u_table::@15/print_char_cursor#119, sin8u_table::@17/print_char_cursor#18, sin8u_table::@19/print_char_cursor#18, sin8u_table::@21/print_char_cursor#18, sin8u_table::@3/print_screen#0, sin8u_table::@5/print_char_cursor#18, sin8u_table::@7/print_char_cursor#18, sin8u_table::@9/print_char_cursor#18 )
  [78] print_str::str#13 = phi( sin8u_table::@11/sin8u_table::str4, sin8u_table::@15/sin8u_table::str5, sin8u_table::@17/sin8u_table::str6, sin8u_table::@19/sin8u_table::str7, sin8u_table::@21/sin8u_table::str8, sin8u_table::@3/sin8u_table::str, sin8u_table::@5/sin8u_table::str1, sin8u_table::@7/sin8u_table::str2, sin8u_table::@9/sin8u_table::str3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [79] print_char_cursor#1 = phi( print_str/print_char_cursor#112, print_str::@3/print_char_cursor#18 )
  [79] print_str::str#10 = phi( print_str/print_str::str#13, print_str::@3/print_str::str#0 )
  [80] if(0!=*print_str::str#10) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [81] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [82] print_char::ch#0 = *print_str::str#10
  [83] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [84] print_str::str#0 = ++ print_str::str#10
  to:print_str::@1

void print_uint(word print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2 sin8u_table::@16 sin8u_table::@4
  [85] print_char_cursor#105 = phi( print_sint::@2/print_char_cursor#18, sin8u_table::@16/print_char_cursor#1, sin8u_table::@4/print_char_cursor#1 )
  [85] print_uint::w#3 = phi( print_sint::@2/print_uint::w#0, sin8u_table::@16/print_uint::w#2, sin8u_table::@4/print_uint::w#1 )
  [86] print_uchar::b#1 = > print_uint::w#3
  [87] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [88] print_uchar::b#2 = < print_uint::w#3
  [89] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [90] return 
  to:@return

void print_uchar(byte print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2 print_uint print_uint::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@22 sin8u_table::@6 sin8u_table::@8
  [91] print_char_cursor#106 = phi( print_schar::@2/print_char_cursor#18, print_uint/print_char_cursor#105, print_uint::@1/print_char_cursor#18, sin8u_table::@10/print_char_cursor#1, sin8u_table::@12/print_char_cursor#1, sin8u_table::@22/print_char_cursor#1, sin8u_table::@6/print_char_cursor#1, sin8u_table::@8/print_char_cursor#1 )
  [91] print_uchar::b#8 = phi( print_schar::@2/print_uchar::b#0, print_uint/print_uchar::b#1, print_uint::@1/print_uchar::b#2, sin8u_table::@10/sin8u_table::amplitude#0, sin8u_table::@12/sin8u_table::mid#0, sin8u_table::@22/print_uchar::b#7, sin8u_table::@6/sin8u_table::min#0, sin8u_table::@8/sin8u_table::max#0 )
  [92] print_uchar::$0 = print_uchar::b#8 >> 4
  [93] print_char::ch#5 = print_hextab[print_uchar::$0]
  [94] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [95] print_uchar::$2 = print_uchar::b#8 & $f
  [96] print_char::ch#6 = print_hextab[print_uchar::$2]
  [97] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [98] return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from sin8u_table::@13 sin8u_table::@23
  [99] print_line_cursor#25 = phi( sin8u_table::@13/print_screen#0, sin8u_table::@23/print_line_cursor#0 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [100] print_line_cursor#13 = phi( print_ln/print_line_cursor#25, print_ln::@1/print_line_cursor#0 )
  [101] print_line_cursor#0 = print_line_cursor#13 + $28
  [102] if(print_line_cursor#0<print_char_cursor#18) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [103] return 
  to:@return

signed byte sin8s(word sin8s::x)
sin8s: scope:[sin8s]  from sin8u_table::@2
  [104] if(sin8s::x#2<PI_u4f12) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [105] sin8s::x#0 = sin8s::x#2 - PI_u4f12
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [106] sin8s::isUpper#10 = phi( sin8s/0, sin8s::@5/1 )
  [106] sin8s::x#4 = phi( sin8s/sin8s::x#2, sin8s::@5/sin8s::x#0 )
  [107] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [108] sin8s::x#1 = PI_u4f12 - sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [109] sin8s::x#6 = phi( sin8s::@1/sin8s::x#4, sin8s::@6/sin8s::x#1 )
  [110] sin8s::$4 = sin8s::x#6 << 3
  [111] sin8s::x1#0 = > sin8s::$4
  [112] mulu8_sel::v1#0 = sin8s::x1#0
  [113] mulu8_sel::v2#0 = sin8s::x1#0
  [114] call mulu8_sel 
  [115] mulu8_sel::return#0 = mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [116] sin8s::x2#0 = mulu8_sel::return#0
  [117] mulu8_sel::v1#1 = sin8s::x2#0
  [118] mulu8_sel::v2#1 = sin8s::x1#0
  [119] call mulu8_sel 
  [120] mulu8_sel::return#1 = mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [121] sin8s::x3#0 = mulu8_sel::return#1
  [122] mulu8_sel::v1#2 = sin8s::x3#0
  [123] call mulu8_sel 
  [124] mulu8_sel::return#2 = mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [125] sin8s::x3_6#0 = mulu8_sel::return#2
  [126] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0
  [127] mulu8_sel::v1#3 = sin8s::x3#0
  [128] mulu8_sel::v2#3 = sin8s::x1#0
  [129] call mulu8_sel 
  [130] mulu8_sel::return#10 = mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [131] sin8s::x4#0 = mulu8_sel::return#10
  [132] mulu8_sel::v1#4 = sin8s::x4#0
  [133] mulu8_sel::v2#4 = sin8s::x1#0
  [134] call mulu8_sel 
  [135] mulu8_sel::return#11 = mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [136] sin8s::x5#0 = mulu8_sel::return#11
  [137] sin8s::x5_128#0 = sin8s::x5#0 >> 4
  [138] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0
  [139] if(sin8s::usinx#1<$80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [140] sin8s::usinx#2 = -- sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [141] sin8s::usinx#4 = phi( sin8s::@13/sin8s::usinx#1, sin8s::@7/sin8s::usinx#2 )
  [142] if(sin8s::isUpper#10==0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [143] sin8s::sinx#1 = - (signed byte)sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [144] sin8s::return#0 = phi( sin8s::@14/sin8s::return#5, sin8s::@8/sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [145] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [146] sin8s::return#5 = (signed byte)sin8s::usinx#4
  to:sin8s::@4

signed word mul8su(signed byte mul8su::a , byte mul8su::b)
mul8su: scope:[mul8su]  from sin8u_table::@14
  [147] mul8u::a#2 = (byte)mul8su::a#0
  [148] call mul8u 
  [149] mul8u::return#3 = mul8u::res#2
  to:mul8su::@3
mul8su::@3: scope:[mul8su]  from mul8su
  [150] mul8su::m#0 = mul8u::return#3
  [151] if(mul8su::a#0>=0) goto mul8su::@1
  to:mul8su::@2
mul8su::@2: scope:[mul8su]  from mul8su::@3
  [152] mul8su::$4 = > mul8su::m#0
  [153] mul8su::$6 = mul8su::$4 - mul8su::b#0
  [154] mul8su::m#1 = mul8su::m#0 byte1= mul8su::$6
  to:mul8su::@1
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@3
  [155] mul8su::m#2 = phi( mul8su::@2/mul8su::m#1, mul8su::@3/mul8su::m#0 )
  to:mul8su::@return
mul8su::@return: scope:[mul8su]  from mul8su::@1
  [156] return 
  to:@return

void print_schar(signed byte print_schar::b)
print_schar: scope:[print_schar]  from sin8u_table::@18
  [157] if(print_schar::b#1<0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [158] phi()
  [159] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [160] print_schar::b#4 = phi( print_schar::@4/print_schar::b#0, print_schar::@3/print_schar::b#1 )
  [161] print_uchar::b#0 = (byte)print_schar::b#4
  [162] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [163] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [164] phi()
  [165] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [166] print_schar::b#0 = - print_schar::b#1
  to:print_schar::@2

void print_sint(signed word print_sint::w)
print_sint: scope:[print_sint]  from sin8u_table::@20
  [167] if(print_sint::w#1<0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [168] phi()
  [169] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [170] print_sint::w#4 = phi( print_sint::@4/print_sint::w#0, print_sint::@3/print_sint::w#1 )
  [171] print_uint::w#0 = (word)print_sint::w#4
  [172] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [173] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [174] phi()
  [175] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [176] print_sint::w#0 = - print_sint::w#1
  to:print_sint::@2

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div16u
  [177] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [178] divr16u::i#2 = phi( divr16u/0, divr16u::@3/divr16u::i#1 )
  [178] divr16u::quotient#3 = phi( divr16u/0, divr16u::@3/divr16u::return#0 )
  [178] divr16u::dividend#2 = phi( divr16u/PI2_u4f12, divr16u::@3/divr16u::dividend#0 )
  [178] divr16u::rem#4 = phi( divr16u/0, divr16u::@3/divr16u::rem#9 )
  [179] divr16u::rem#0 = divr16u::rem#4 << 1
  [180] divr16u::$1 = > divr16u::dividend#2
  [181] divr16u::$2 = divr16u::$1 & $80
  [182] if(divr16u::$2==0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [183] divr16u::rem#1 = divr16u::rem#0 | 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [184] divr16u::rem#5 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  [185] divr16u::dividend#0 = divr16u::dividend#2 << 1
  [186] divr16u::quotient#1 = divr16u::quotient#3 << 1
  [187] if(divr16u::rem#5<main::tabsize) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [188] divr16u::quotient#2 = ++ divr16u::quotient#1
  [189] divr16u::rem#2 = divr16u::rem#5 - main::tabsize
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [190] divr16u::return#0 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  [190] divr16u::rem#9 = phi( divr16u::@2/divr16u::rem#5, divr16u::@5/divr16u::rem#2 )
  [191] divr16u::i#1 = ++ divr16u::i#2
  [192] if(divr16u::i#1!=$10) goto divr16u::@1
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [193] return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  [194] print_char_cursor#67 = phi( print_schar::@1/print_char_cursor#1, print_schar::@3/print_char_cursor#1, print_sint::@1/print_char_cursor#1, print_sint::@3/print_char_cursor#1, print_str::@2/print_char_cursor#1, print_uchar/print_char_cursor#106, print_uchar::@1/print_char_cursor#18 )
  [194] print_char::ch#7 = phi( print_schar::@1/'-', print_schar::@3/' ', print_sint::@1/'-', print_sint::@3/' ', print_str::@2/print_char::ch#0, print_uchar/print_char::ch#5, print_uchar::@1/print_char::ch#6 )
  [195] *print_char_cursor#67 = print_char::ch#7
  [196] print_char_cursor#18 = ++ print_char_cursor#67
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [197] return 
  to:@return

byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [198] mulu8_sel::select#5 = phi( sin8s::@10/1, sin8s::@11/0, sin8s::@12/0, sin8s::@2/0, sin8s::@9/1 )
  [198] mulu8_sel::v2#5 = phi( sin8s::@10/sin8s::DIV_6, sin8s::@11/mulu8_sel::v2#3, sin8s::@12/mulu8_sel::v2#4, sin8s::@2/mulu8_sel::v2#0, sin8s::@9/mulu8_sel::v2#1 )
  [198] mulu8_sel::v1#5 = phi( sin8s::@10/mulu8_sel::v1#2, sin8s::@11/mulu8_sel::v1#3, sin8s::@12/mulu8_sel::v1#4, sin8s::@2/mulu8_sel::v1#0, sin8s::@9/mulu8_sel::v1#1 )
  [199] mul8u::a#0 = mulu8_sel::v1#5
  [200] mul8u::b#0 = mulu8_sel::v2#5
  [201] call mul8u 
  [202] mul8u::return#0 = mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [203] mulu8_sel::$0 = mul8u::return#0
  [204] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5
  [205] mulu8_sel::return#12 = > mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [206] return 
  to:@return

word mul8u(byte mul8u::a , byte mul8u::b)
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  [207] mul8u::a#6 = phi( mul8su/mul8u::a#2, mulu8_sel/mul8u::a#0 )
  [207] mul8u::b#2 = phi( mul8su/mul8su::b#0, mulu8_sel/mul8u::b#0 )
  [208] mul8u::mb#0 = (word)mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [209] mul8u::mb#2 = phi( mul8u/mul8u::mb#0, mul8u::@3/mul8u::mb#1 )
  [209] mul8u::res#2 = phi( mul8u/0, mul8u::@3/mul8u::res#6 )
  [209] mul8u::a#3 = phi( mul8u/mul8u::a#6, mul8u::@3/mul8u::a#1 )
  [210] if(mul8u::a#3!=0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [211] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [212] mul8u::$1 = mul8u::a#3 & 1
  [213] if(mul8u::$1==0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [214] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [215] mul8u::res#6 = phi( mul8u::@2/mul8u::res#2, mul8u::@4/mul8u::res#1 )
  [216] mul8u::a#1 = mul8u::a#3 >> 1
  [217] mul8u::mb#1 = mul8u::mb#2 << 1
  to:mul8u::@1


VARIABLE REGISTER WEIGHTS
word div16u(word div16u::dividend , word div16u::divisor)
word div16u::dividend
word div16u::divisor
word div16u::return
word div16u::return#0 37.33333333333333
word div16u::return#2 22.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 20002.0
byte~ divr16u::$2 20002.0
word divr16u::dividend
word divr16u::dividend#0 2500.25
word divr16u::dividend#2 4286.142857142857
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 15001.5
byte divr16u::i#2 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 15001.5
word divr16u::quotient#2 10001.0
word divr16u::quotient#3 2500.25
word divr16u::rem
word divr16u::rem#0 7500.75
word divr16u::rem#1 20002.0
word divr16u::rem#2 20002.0
word divr16u::rem#4 20002.0
word divr16u::rem#5 10001.0
word divr16u::rem#9 10001.0
word divr16u::return
word divr16u::return#0 6020.8
word divr16u::return#2 202.0
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 2002.0
byte* memset::dst#2 1334.6666666666667
byte* memset::end
word memset::num
void* memset::return
void* memset::str
signed word mul8su(signed byte mul8su::a , byte mul8su::b)
byte~ mul8su::$4 2002.0
byte~ mul8su::$6 2002.0
signed byte mul8su::a
signed byte mul8su::a#0 220.39999999999998
byte mul8su::b
word mul8su::m
word mul8su::m#0 1001.0
word mul8su::m#1 2002.0
word mul8su::m#2 667.3333333333334
signed word mul8su::return
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 2.0000002E7
byte mul8u::a
byte mul8u::a#0 10001.0
byte mul8u::a#1 1.0000001E7
byte mul8u::a#2 2002.0
byte mul8u::a#3 6683334.166666666
byte mul8u::a#6 55501.5
byte mul8u::b
byte mul8u::b#0 20002.0
byte mul8u::b#2 10001.0
word mul8u::mb
word mul8u::mb#0 200002.0
word mul8u::mb#1 2.0000002E7
word mul8u::mb#2 4300000.571428571
word mul8u::res
word mul8u::res#1 2.0000002E7
word mul8u::res#2 4287286.428571429
word mul8u::res#6 1.0000001E7
word mul8u::return
word mul8u::return#0 20002.0
word mul8u::return#3 2002.0
byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
word~ mulu8_sel::$0 20002.0
word~ mulu8_sel::$1 20002.0
byte mulu8_sel::return
byte mulu8_sel::return#0 2002.0
byte mulu8_sel::return#1 2002.0
byte mulu8_sel::return#10 2002.0
byte mulu8_sel::return#11 2002.0
byte mulu8_sel::return#12 2143.714285714286
byte mulu8_sel::return#2 2002.0
byte mulu8_sel::select
byte mulu8_sel::select#5 1666.8333333333333
byte mulu8_sel::v1
byte mulu8_sel::v1#0 1001.0
byte mulu8_sel::v1#1 1001.0
byte mulu8_sel::v1#2 2002.0
byte mulu8_sel::v1#3 1001.0
byte mulu8_sel::v1#4 1001.0
byte mulu8_sel::v1#5 15006.0
byte mulu8_sel::v2
byte mulu8_sel::v2#0 2002.0
byte mulu8_sel::v2#1 2002.0
byte mulu8_sel::v2#3 2002.0
byte mulu8_sel::v2#4 2002.0
byte mulu8_sel::v2#5 7002.5
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 200002.0
byte print_char::ch#5 200002.0
byte print_char::ch#6 200002.0
byte print_char::ch#7 1300004.0
byte* print_char_cursor
byte* print_char_cursor#1 7330.857142857143
byte* print_char_cursor#105 5557.0
byte* print_char_cursor#106 40383.0
byte* print_char_cursor#112 1449.0
byte* print_char_cursor#119 202.0
byte* print_char_cursor#18 26782.73469387755
byte* print_char_cursor#67 1152004.5
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#0 8113.648648648648
byte* print_line_cursor#13 201003.0
byte* print_line_cursor#25 1102.0
void print_ln()
void print_schar(signed byte print_schar::b)
signed byte print_schar::b
signed byte print_schar::b#0 2002.0
signed byte print_schar::b#1 517.3333333333334
signed byte print_schar::b#4 2002.0
byte* print_screen
void print_sint(signed word print_sint::w)
signed word print_sint::w
signed word print_sint::w#0 2002.0
signed word print_sint::w#1 517.3333333333334
signed word print_sint::w#4 2002.0
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 200002.0
byte* print_str::str#10 100251.25
byte* print_str::str#13 1001.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 200002.0
byte~ print_uchar::$2 200002.0
byte print_uchar::b
byte print_uchar::b#0 2002.0
byte print_uchar::b#1 20002.0
byte print_uchar::b#2 20002.0
byte print_uchar::b#7 202.0
byte print_uchar::b#8 55276.5
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 2002.0
word print_uint::w#1 22.0
word print_uint::w#2 202.0
word print_uint::w#3 7038.333333333333
signed byte sin8s(word sin8s::x)
word~ sin8s::$4 2002.0
byte sin8s::isUpper
byte sin8s::isUpper#10 27.805555555555557
signed byte sin8s::return
signed byte sin8s::return#0 701.0
signed byte sin8s::return#2 202.0
signed byte sin8s::return#5 2002.0
signed byte sin8s::sinx
signed byte sin8s::sinx#1 2002.0
byte sin8s::usinx
byte sin8s::usinx#0 166.83333333333334
byte sin8s::usinx#1 2002.0
byte sin8s::usinx#2 2002.0
byte sin8s::usinx#4 1001.0
word sin8s::x
word sin8s::x#0 2002.0
word sin8s::x#1 2002.0
word sin8s::x#2 1552.0
word sin8s::x#4 2502.5
word sin8s::x#6 3003.0
byte sin8s::x1
byte sin8s::x1#0 318.5
byte sin8s::x2
byte sin8s::x2#0 2002.0
byte sin8s::x3
byte sin8s::x3#0 500.5
byte sin8s::x3_6
byte sin8s::x3_6#0 2002.0
byte sin8s::x4
byte sin8s::x4#0 2002.0
byte sin8s::x5
byte sin8s::x5#0 2002.0
byte sin8s::x5_128
byte sin8s::x5_128#0 2002.0
void sin8u_table(byte* sin8u_table::sintab , word sin8u_table::tabsize , byte sin8u_table::min , byte sin8u_table::max)
byte~ sin8u_table::$20 202.0
byte sin8u_table::amplitude
word sin8u_table::i
word sin8u_table::i#1 202.0
word sin8u_table::i#10 9.46875
byte sin8u_table::max
byte sin8u_table::mid
byte sin8u_table::min
byte* sin8u_table::sintab
byte* sin8u_table::sintab#1 9.619047619047619
byte* sin8u_table::sintab#2 25.25
signed byte sin8u_table::sinx
signed byte sin8u_table::sinx#0 21.642857142857142
signed word sin8u_table::sinx_sc
signed word sin8u_table::sinx_sc#0 20.2
byte sin8u_table::sinx_tr
byte sin8u_table::sinx_tr#0 17.823529411764707
word sin8u_table::step
word sin8u_table::step#0 2.2363636363636363
word sin8u_table::sum
word sin8u_table::tabsize
word sin8u_table::x
word sin8u_table::x#1 101.0
word sin8u_table::x#10 13.03225806451613

Initial phi equivalence classes
[ sin8u_table::i#10 sin8u_table::i#1 ]
[ sin8u_table::x#10 sin8u_table::x#1 ]
[ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_str::str#10 print_str::str#13 print_str::str#0 ]
[ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ]
[ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
[ print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
[ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
[ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
[ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
[ print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
[ mulu8_sel::select#5 ]
[ mul8u::b#2 mul8u::b#0 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Added variable div16u::return#2 to live range equivalence class [ div16u::return#2 ]
Added variable sin8u_table::step#0 to live range equivalence class [ sin8u_table::step#0 ]
Added variable sin8s::return#2 to live range equivalence class [ sin8s::return#2 ]
Added variable sin8u_table::sinx#0 to live range equivalence class [ sin8u_table::sinx#0 ]
Added variable mul8su::a#0 to live range equivalence class [ mul8su::a#0 ]
Added variable sin8u_table::sinx_sc#0 to live range equivalence class [ sin8u_table::sinx_sc#0 ]
Added variable sin8u_table::$20 to live range equivalence class [ sin8u_table::$20 ]
Added variable sin8u_table::sinx_tr#0 to live range equivalence class [ sin8u_table::sinx_tr#0 ]
Added variable divr16u::return#2 to live range equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to live range equivalence class [ div16u::return#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable sin8s::$4 to live range equivalence class [ sin8s::$4 ]
Added variable sin8s::x1#0 to live range equivalence class [ sin8s::x1#0 ]
Added variable mulu8_sel::return#0 to live range equivalence class [ mulu8_sel::return#0 ]
Added variable sin8s::x2#0 to live range equivalence class [ sin8s::x2#0 ]
Added variable mulu8_sel::return#1 to live range equivalence class [ mulu8_sel::return#1 ]
Added variable sin8s::x3#0 to live range equivalence class [ sin8s::x3#0 ]
Added variable mulu8_sel::return#2 to live range equivalence class [ mulu8_sel::return#2 ]
Added variable sin8s::x3_6#0 to live range equivalence class [ sin8s::x3_6#0 ]
Added variable sin8s::usinx#0 to live range equivalence class [ sin8s::usinx#0 ]
Added variable mulu8_sel::return#10 to live range equivalence class [ mulu8_sel::return#10 ]
Added variable sin8s::x4#0 to live range equivalence class [ sin8s::x4#0 ]
Added variable mulu8_sel::return#11 to live range equivalence class [ mulu8_sel::return#11 ]
Added variable sin8s::x5#0 to live range equivalence class [ sin8s::x5#0 ]
Added variable sin8s::x5_128#0 to live range equivalence class [ sin8s::x5_128#0 ]
Added variable mul8u::return#3 to live range equivalence class [ mul8u::return#3 ]
Added variable mul8su::$4 to live range equivalence class [ mul8su::$4 ]
Added variable mul8su::$6 to live range equivalence class [ mul8su::$6 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Added variable mul8u::return#0 to live range equivalence class [ mul8u::return#0 ]
Added variable mulu8_sel::$0 to live range equivalence class [ mulu8_sel::$0 ]
Added variable mulu8_sel::$1 to live range equivalence class [ mulu8_sel::$1 ]
Added variable mulu8_sel::return#12 to live range equivalence class [ mulu8_sel::return#12 ]
Added variable mul8u::$1 to live range equivalence class [ mul8u::$1 ]
Complete equivalence classes
[ sin8u_table::i#10 sin8u_table::i#1 ]
[ sin8u_table::x#10 sin8u_table::x#1 ]
[ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_str::str#10 print_str::str#13 print_str::str#0 ]
[ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ]
[ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
[ print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
[ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
[ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
[ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
[ print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
[ mulu8_sel::select#5 ]
[ mul8u::b#2 mul8u::b#0 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ div16u::return#2 ]
[ sin8u_table::step#0 ]
[ sin8s::return#2 ]
[ sin8u_table::sinx#0 ]
[ mul8su::a#0 ]
[ sin8u_table::sinx_sc#0 ]
[ sin8u_table::$20 ]
[ sin8u_table::sinx_tr#0 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ sin8s::$4 ]
[ sin8s::x1#0 ]
[ mulu8_sel::return#0 ]
[ sin8s::x2#0 ]
[ mulu8_sel::return#1 ]
[ sin8s::x3#0 ]
[ mulu8_sel::return#2 ]
[ sin8s::x3_6#0 ]
[ sin8s::usinx#0 ]
[ mulu8_sel::return#10 ]
[ sin8s::x4#0 ]
[ mulu8_sel::return#11 ]
[ sin8s::x5#0 ]
[ sin8s::x5_128#0 ]
[ mul8u::return#3 ]
[ mul8su::$4 ]
[ mul8su::$6 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ mul8u::return#0 ]
[ mulu8_sel::$0 ]
[ mulu8_sel::$1 ]
[ mulu8_sel::return#12 ]
[ mul8u::$1 ]
Allocated zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ]
Allocated zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ]
Allocated zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
Allocated zp[2]:8 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:10 [ print_str::str#10 print_str::str#13 print_str::str#0 ]
Allocated zp[2]:12 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ]
Allocated zp[1]:14 [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
Allocated zp[2]:15 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ]
Allocated zp[1]:17 [ sin8s::isUpper#10 ]
Allocated zp[2]:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
Allocated zp[1]:20 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
Allocated zp[1]:21 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
Allocated zp[2]:22 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
Allocated zp[1]:24 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
Allocated zp[2]:25 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
Allocated zp[2]:27 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:29 [ divr16u::dividend#2 divr16u::dividend#0 ]
Allocated zp[2]:31 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[1]:33 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[1]:34 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
Allocated zp[2]:35 [ print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ]
Allocated zp[1]:37 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
Allocated zp[1]:38 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
Allocated zp[1]:39 [ mulu8_sel::select#5 ]
Allocated zp[1]:40 [ mul8u::b#2 mul8u::b#0 ]
Allocated zp[1]:41 [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
Allocated zp[2]:42 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:44 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp[2]:46 [ div16u::return#2 ]
Allocated zp[2]:48 [ sin8u_table::step#0 ]
Allocated zp[1]:50 [ sin8s::return#2 ]
Allocated zp[1]:51 [ sin8u_table::sinx#0 ]
Allocated zp[1]:52 [ mul8su::a#0 ]
Allocated zp[2]:53 [ sin8u_table::sinx_sc#0 ]
Allocated zp[1]:55 [ sin8u_table::$20 ]
Allocated zp[1]:56 [ sin8u_table::sinx_tr#0 ]
Allocated zp[2]:57 [ divr16u::return#2 ]
Allocated zp[2]:59 [ div16u::return#0 ]
Allocated zp[1]:61 [ print_uchar::$0 ]
Allocated zp[1]:62 [ print_uchar::$2 ]
Allocated zp[2]:63 [ sin8s::$4 ]
Allocated zp[1]:65 [ sin8s::x1#0 ]
Allocated zp[1]:66 [ mulu8_sel::return#0 ]
Allocated zp[1]:67 [ sin8s::x2#0 ]
Allocated zp[1]:68 [ mulu8_sel::return#1 ]
Allocated zp[1]:69 [ sin8s::x3#0 ]
Allocated zp[1]:70 [ mulu8_sel::return#2 ]
Allocated zp[1]:71 [ sin8s::x3_6#0 ]
Allocated zp[1]:72 [ sin8s::usinx#0 ]
Allocated zp[1]:73 [ mulu8_sel::return#10 ]
Allocated zp[1]:74 [ sin8s::x4#0 ]
Allocated zp[1]:75 [ mulu8_sel::return#11 ]
Allocated zp[1]:76 [ sin8s::x5#0 ]
Allocated zp[1]:77 [ sin8s::x5_128#0 ]
Allocated zp[2]:78 [ mul8u::return#3 ]
Allocated zp[1]:80 [ mul8su::$4 ]
Allocated zp[1]:81 [ mul8su::$6 ]
Allocated zp[1]:82 [ divr16u::$1 ]
Allocated zp[1]:83 [ divr16u::$2 ]
Allocated zp[2]:84 [ mul8u::return#0 ]
Allocated zp[2]:86 [ mulu8_sel::$0 ]
Allocated zp[2]:88 [ mulu8_sel::$1 ]
Allocated zp[1]:90 [ mulu8_sel::return#12 ]
Allocated zp[1]:91 [ mul8u::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:55 [ sin8u_table::$20 ] has ALU potential.
Statement [10] div16u::return#2 = div16u::return#0 [ div16u::return#2 ] ( sin8u_table:3 [ div16u::return#2 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [11] sin8u_table::step#0 = div16u::return#2 [ sin8u_table::step#0 ] ( sin8u_table:3 [ sin8u_table::step#0 ] { }  ) always clobbers reg byte a 
Statement [13] print_uint::w#1 = sin8u_table::step#0 [ sin8u_table::step#0 print_uint::w#1 print_char_cursor#1 ] ( sin8u_table:3 [ sin8u_table::step#0 print_uint::w#1 print_char_cursor#1 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 } }  ) always clobbers reg byte a 
Statement [34] if(sin8u_table::i#10<main::tabsize) goto sin8u_table::@2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [36] sin8s::x#2 = sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [42] sin8u_table::sinx_sc#0 = (signed word)mul8su::m#2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#0 ] { { print_char_cursor#112 = print_char_cursor#119 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:51 [ sin8u_table::sinx#0 ]
Statement [45] *sin8u_table::sintab#2 = sin8u_table::sinx_tr#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 ] { { print_char_cursor#112 = print_char_cursor#119 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:51 [ sin8u_table::sinx#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:56 [ sin8u_table::sinx_tr#0 ]
Statement [47] print_char_cursor#119 = print_line_cursor#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#119 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#119 print_line_cursor#0 ] { { print_char_cursor#112 = print_char_cursor#119 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:56 [ sin8u_table::sinx_tr#0 ]
Statement [49] print_uint::w#2 = sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#2 print_char_cursor#1 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#2 print_char_cursor#1 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 } }  ) always clobbers reg byte a 
Statement [57] print_sint::w#1 = sin8u_table::sinx_sc#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_sint::w#1 print_char_cursor#1 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_sint::w#1 print_char_cursor#1 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [65] sin8u_table::x#1 = sin8u_table::x#10 + sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [69] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:6 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [71] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:6 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [75] divr16u::return#2 = divr16u::return#0 [ divr16u::return#2 ] ( sin8u_table:3::div16u:9 [ divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [76] div16u::return#0 = divr16u::return#2 [ div16u::return#0 ] ( sin8u_table:3::div16u:9 [ div16u::return#0 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [80] if(0!=*print_str::str#10) goto print_str::@2 [ print_str::str#10 print_char_cursor#1 ] ( sin8u_table:3::print_str:12 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 ] { }  sin8u_table:3::print_str:16 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:20 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:24 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:28 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:48 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#119 } }  sin8u_table:3::print_str:52 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:56 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:60 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  ) always clobbers reg byte a reg byte y 
Statement [82] print_char::ch#0 = *print_str::str#10 [ print_str::str#10 print_char_cursor#1 print_char::ch#0 ] ( sin8u_table:3::print_str:12 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:16 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:20 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:24 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:28 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:48 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#119 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:52 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:56 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:60 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  ) always clobbers reg byte a reg byte y 
Statement [92] print_uchar::$0 = print_uchar::b#8 >> 4 [ print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] ( sin8u_table:3::print_uchar:18 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:22 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:26 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:30 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:62 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:87 [ sin8u_table::step#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:87 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:87 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:89 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:89 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:89 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_schar:54::print_uchar:162 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
Statement [95] print_uchar::$2 = print_uchar::b#8 & $f [ print_char_cursor#18 print_uchar::$2 ] ( sin8u_table:3::print_uchar:18 [ sin8u_table::step#0 print_char_cursor#18 print_uchar::$2 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:22 [ sin8u_table::step#0 print_char_cursor#18 print_uchar::$2 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:26 [ sin8u_table::step#0 print_char_cursor#18 print_uchar::$2 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:30 [ sin8u_table::step#0 print_char_cursor#18 print_uchar::$2 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:62 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uint:14::print_uchar:87 [ sin8u_table::step#0 print_uint::w#3 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uint:50::print_uchar:87 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:87 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:89 [ sin8u_table::step#0 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:89 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:89 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_schar:54::print_uchar:162 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [101] print_line_cursor#0 = print_line_cursor#13 + $28 [ print_line_cursor#0 print_char_cursor#18 ] ( sin8u_table:3::print_ln:32 [ sin8u_table::step#0 print_line_cursor#0 print_char_cursor#18 ] { }  sin8u_table:3::print_ln:64 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [102] if(print_line_cursor#0<print_char_cursor#18) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#18 ] ( sin8u_table:3::print_ln:32 [ sin8u_table::step#0 print_line_cursor#0 print_char_cursor#18 ] { }  sin8u_table:3::print_ln:64 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [104] if(sin8s::x#2<PI_u4f12) goto sin8s::@1 [ sin8s::x#2 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::x#2 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [105] sin8s::x#0 = sin8s::x#2 - PI_u4f12 [ sin8s::x#0 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::x#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [107] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::x#4 sin8s::isUpper#10 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:17 [ sin8s::isUpper#10 ]
Statement [108] sin8s::x#1 = PI_u4f12 - sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [110] sin8s::$4 = sin8s::x#6 << 3 [ sin8s::isUpper#10 sin8s::$4 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::$4 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [126] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:65 [ sin8s::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:69 [ sin8s::x3#0 ]
Statement [137] sin8s::x5_128#0 = sin8s::x5#0 >> 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:72 [ sin8s::usinx#0 ]
Statement [138] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [143] sin8s::sinx#1 = - (signed byte)sin8s::usinx#4 [ sin8s::sinx#1 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::sinx#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [149] mul8u::return#3 = mul8u::res#2 [ mul8su::a#0 mul8u::return#3 ] ( sin8u_table:3::mul8su:41 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#0 mul8su::a#0 mul8u::return#3 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#2 = mul8u::a#6 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:52 [ mul8su::a#0 ]
Statement [150] mul8su::m#0 = mul8u::return#3 [ mul8su::a#0 mul8su::m#0 ] ( sin8u_table:3::mul8su:41 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#0 mul8su::a#0 mul8su::m#0 ] { { mul8su::a#0 = sin8u_table::sinx#0 } }  ) always clobbers reg byte a 
Statement [166] print_schar::b#0 = - print_schar::b#1 [ print_char_cursor#18 print_schar::b#0 ] ( sin8u_table:3::print_schar:54 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#1 = sin8u_table::sinx#0 } }  ) always clobbers reg byte a 
Statement [167] if(print_sint::w#1<0) goto print_sint::@1 [ print_sint::w#1 print_char_cursor#1 ] ( sin8u_table:3::print_sint:58 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_sint::w#1 print_char_cursor#1 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [171] print_uint::w#0 = (word)print_sint::w#4 [ print_char_cursor#18 print_uint::w#0 ] ( sin8u_table:3::print_sint:58 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [176] print_sint::w#0 = - print_sint::w#1 [ print_char_cursor#18 print_sint::w#0 ] ( sin8u_table:3::print_sint:58 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [183] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( sin8u_table:3::div16u:9::divr16u:74 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:33 [ divr16u::i#2 divr16u::i#1 ]
Statement [187] if(divr16u::rem#5<main::tabsize) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( sin8u_table:3::div16u:9::divr16u:74 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [189] divr16u::rem#2 = divr16u::rem#5 - main::tabsize [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( sin8u_table:3::div16u:9::divr16u:74 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [195] *print_char_cursor#67 = print_char::ch#7 [ print_char_cursor#67 ] ( sin8u_table:3::print_str:12::print_char:83 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#67 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:16::print_char:83 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:20::print_char:83 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:24::print_char:83 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:28::print_char:83 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:48::print_char:83 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#119 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:52::print_char:83 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:56::print_char:83 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:60::print_char:83 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:18::print_char:94 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:22::print_char:94 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:26::print_char:94 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:30::print_char:94 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:62::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_uchar::b#8 print_char_cursor#67 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:87::print_char:94 [ sin8u_table::step#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#67 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:87::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#67 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:87::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:89::print_char:94 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#67 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:89::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#67 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:89::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_schar:54::print_uchar:162::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#67 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:18::print_char:97 [ sin8u_table::step#0 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:22::print_char:97 [ sin8u_table::step#0 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:26::print_char:97 [ sin8u_table::step#0 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:30::print_char:97 [ sin8u_table::step#0 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:62::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_char_cursor#67 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uint:14::print_uchar:87::print_char:97 [ sin8u_table::step#0 print_uint::w#3 print_char_cursor#67 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uint:50::print_uchar:87::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_char_cursor#67 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:87::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:89::print_char:97 [ sin8u_table::step#0 print_char_cursor#67 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:89::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#67 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:89::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_schar:54::print_uchar:162::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#67 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_schar:54::print_char:159 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_schar::b#1 print_char_cursor#67 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_schar:54::print_char:165 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_schar::b#1 print_char_cursor#67 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_sint:58::print_char:169 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_sint::w#1 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_sint:58::print_char:175 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_sint::w#1 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_char_cursor#1 = print_char_cursor#67 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:14 [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:24 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
Statement [202] mul8u::return#0 = mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#0 ] ( sin8u_table:3::sin8s:37::mulu8_sel:114 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#0 = mul8u::a#6 mul8u::b#2 mul8u::b#0 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:123 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:134 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:39 [ mulu8_sel::select#5 ]
Statement [203] mulu8_sel::$0 = mul8u::return#0 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( sin8u_table:3::sin8s:37::mulu8_sel:114 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:123 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:134 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [204] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 [ mulu8_sel::$1 ] ( sin8u_table:3::sin8s:37::mulu8_sel:114 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:123 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:134 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [208] mul8u::mb#0 = (word)mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( sin8u_table:3::mul8su:41::mul8u:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#0 mul8su::a#0 mul8u::a#6 mul8u::mb#0 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#2 = mul8u::a#6 } { mul8u::return#3 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:114::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#0 = mul8u::a#6 mul8u::b#2 mul8u::b#0 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:119::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:123::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:134::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:41 [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
Statement [212] mul8u::$1 = mul8u::a#3 & 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( sin8u_table:3::mul8su:41::mul8u:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#0 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#2 = mul8u::a#6 } { mul8u::return#3 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:114::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#0 = mul8u::a#6 mul8u::b#2 mul8u::b#0 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:119::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:123::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:134::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [214] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( sin8u_table:3::mul8su:41::mul8u:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#0 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#2 = mul8u::a#6 } { mul8u::return#3 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:114::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#0 = mul8u::a#6 mul8u::b#2 mul8u::b#0 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:119::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:123::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:134::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [10] div16u::return#2 = div16u::return#0 [ div16u::return#2 ] ( sin8u_table:3 [ div16u::return#2 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [11] sin8u_table::step#0 = div16u::return#2 [ sin8u_table::step#0 ] ( sin8u_table:3 [ sin8u_table::step#0 ] { }  ) always clobbers reg byte a 
Statement [13] print_uint::w#1 = sin8u_table::step#0 [ sin8u_table::step#0 print_uint::w#1 print_char_cursor#1 ] ( sin8u_table:3 [ sin8u_table::step#0 print_uint::w#1 print_char_cursor#1 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 } }  ) always clobbers reg byte a 
Statement [34] if(sin8u_table::i#10<main::tabsize) goto sin8u_table::@2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [36] sin8s::x#2 = sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8s::x#2 print_line_cursor#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [42] sin8u_table::sinx_sc#0 = (signed word)mul8su::m#2 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 print_line_cursor#0 ] { { print_char_cursor#112 = print_char_cursor#119 } }  ) always clobbers reg byte a 
Statement [45] *sin8u_table::sintab#2 = sin8u_table::sinx_tr#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 ] { { print_char_cursor#112 = print_char_cursor#119 } }  ) always clobbers reg byte a reg byte y 
Statement [47] print_char_cursor#119 = print_line_cursor#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#119 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_char_cursor#119 print_line_cursor#0 ] { { print_char_cursor#112 = print_char_cursor#119 } }  ) always clobbers reg byte a 
Statement [49] print_uint::w#2 = sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#2 print_char_cursor#1 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#2 print_char_cursor#1 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 } }  ) always clobbers reg byte a 
Statement [57] print_sint::w#1 = sin8u_table::sinx_sc#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_sint::w#1 print_char_cursor#1 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_sint::w#1 print_char_cursor#1 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [65] sin8u_table::x#1 = sin8u_table::x#10 + sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#0 ] ( sin8u_table:3 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [69] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:6 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [71] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:6 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [75] divr16u::return#2 = divr16u::return#0 [ divr16u::return#2 ] ( sin8u_table:3::div16u:9 [ divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [76] div16u::return#0 = divr16u::return#2 [ div16u::return#0 ] ( sin8u_table:3::div16u:9 [ div16u::return#0 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [80] if(0!=*print_str::str#10) goto print_str::@2 [ print_str::str#10 print_char_cursor#1 ] ( sin8u_table:3::print_str:12 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 ] { }  sin8u_table:3::print_str:16 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:20 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:24 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:28 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:48 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#119 } }  sin8u_table:3::print_str:52 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:56 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  sin8u_table:3::print_str:60 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#112 = print_char_cursor#18 } }  ) always clobbers reg byte a reg byte y 
Statement [82] print_char::ch#0 = *print_str::str#10 [ print_str::str#10 print_char_cursor#1 print_char::ch#0 ] ( sin8u_table:3::print_str:12 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:16 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:20 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:24 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:28 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:48 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#119 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:52 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:56 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:60 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  ) always clobbers reg byte a reg byte y 
Statement [92] print_uchar::$0 = print_uchar::b#8 >> 4 [ print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] ( sin8u_table:3::print_uchar:18 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:22 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:26 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:30 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:62 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:87 [ sin8u_table::step#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:87 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:87 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:89 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:89 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:89 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_schar:54::print_uchar:162 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#106 print_uchar::$0 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [95] print_uchar::$2 = print_uchar::b#8 & $f [ print_char_cursor#18 print_uchar::$2 ] ( sin8u_table:3::print_uchar:18 [ sin8u_table::step#0 print_char_cursor#18 print_uchar::$2 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:22 [ sin8u_table::step#0 print_char_cursor#18 print_uchar::$2 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:26 [ sin8u_table::step#0 print_char_cursor#18 print_uchar::$2 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:30 [ sin8u_table::step#0 print_char_cursor#18 print_uchar::$2 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:62 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uint:14::print_uchar:87 [ sin8u_table::step#0 print_uint::w#3 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uint:50::print_uchar:87 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:87 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:89 [ sin8u_table::step#0 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:89 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:89 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_schar:54::print_uchar:162 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [101] print_line_cursor#0 = print_line_cursor#13 + $28 [ print_line_cursor#0 print_char_cursor#18 ] ( sin8u_table:3::print_ln:32 [ sin8u_table::step#0 print_line_cursor#0 print_char_cursor#18 ] { }  sin8u_table:3::print_ln:64 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [102] if(print_line_cursor#0<print_char_cursor#18) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#18 ] ( sin8u_table:3::print_ln:32 [ sin8u_table::step#0 print_line_cursor#0 print_char_cursor#18 ] { }  sin8u_table:3::print_ln:64 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [104] if(sin8s::x#2<PI_u4f12) goto sin8s::@1 [ sin8s::x#2 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::x#2 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [105] sin8s::x#0 = sin8s::x#2 - PI_u4f12 [ sin8s::x#0 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::x#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [107] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::x#4 sin8s::isUpper#10 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [108] sin8s::x#1 = PI_u4f12 - sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [110] sin8s::$4 = sin8s::x#6 << 3 [ sin8s::isUpper#10 sin8s::$4 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::$4 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [126] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [137] sin8s::x5_128#0 = sin8s::x5#0 >> 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [138] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [143] sin8s::sinx#1 = - (signed byte)sin8s::usinx#4 [ sin8s::sinx#1 ] ( sin8u_table:3::sin8s:37 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::sinx#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } }  ) always clobbers reg byte a 
Statement [149] mul8u::return#3 = mul8u::res#2 [ mul8su::a#0 mul8u::return#3 ] ( sin8u_table:3::mul8su:41 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#0 mul8su::a#0 mul8u::return#3 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#2 = mul8u::a#6 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [150] mul8su::m#0 = mul8u::return#3 [ mul8su::a#0 mul8su::m#0 ] ( sin8u_table:3::mul8su:41 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#0 mul8su::a#0 mul8su::m#0 ] { { mul8su::a#0 = sin8u_table::sinx#0 } }  ) always clobbers reg byte a 
Statement [166] print_schar::b#0 = - print_schar::b#1 [ print_char_cursor#18 print_schar::b#0 ] ( sin8u_table:3::print_schar:54 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#1 = sin8u_table::sinx#0 } }  ) always clobbers reg byte a 
Statement [167] if(print_sint::w#1<0) goto print_sint::@1 [ print_sint::w#1 print_char_cursor#1 ] ( sin8u_table:3::print_sint:58 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_sint::w#1 print_char_cursor#1 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [171] print_uint::w#0 = (word)print_sint::w#4 [ print_char_cursor#18 print_uint::w#0 ] ( sin8u_table:3::print_sint:58 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [176] print_sint::w#0 = - print_sint::w#1 [ print_char_cursor#18 print_sint::w#0 ] ( sin8u_table:3::print_sint:58 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } }  ) always clobbers reg byte a 
Statement [183] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( sin8u_table:3::div16u:9::divr16u:74 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [187] if(divr16u::rem#5<main::tabsize) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( sin8u_table:3::div16u:9::divr16u:74 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [189] divr16u::rem#2 = divr16u::rem#5 - main::tabsize [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( sin8u_table:3::div16u:9::divr16u:74 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [195] *print_char_cursor#67 = print_char::ch#7 [ print_char_cursor#67 ] ( sin8u_table:3::print_str:12::print_char:83 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#67 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:16::print_char:83 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:20::print_char:83 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:24::print_char:83 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:28::print_char:83 [ sin8u_table::step#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:48::print_char:83 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#119 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:52::print_char:83 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:56::print_char:83 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_str:60::print_char:83 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_str::str#10 print_char_cursor#67 ] { { print_char_cursor#112 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:18::print_char:94 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:22::print_char:94 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:26::print_char:94 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:30::print_char:94 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:62::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_uchar::b#8 print_char_cursor#67 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#1 = print_char_cursor#106 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:87::print_char:94 [ sin8u_table::step#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#67 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:87::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#67 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:87::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_uchar::b#8 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:89::print_char:94 [ sin8u_table::step#0 print_uchar::b#8 print_char_cursor#67 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:89::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#67 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:89::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_schar:54::print_uchar:162::print_char:94 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uchar::b#8 print_char_cursor#67 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#5 = print_char::ch#7 } }  sin8u_table:3::print_uchar:18::print_char:97 [ sin8u_table::step#0 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:22::print_char:97 [ sin8u_table::step#0 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:26::print_char:97 [ sin8u_table::step#0 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:30::print_char:97 [ sin8u_table::step#0 print_char_cursor#67 ] { { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uchar:62::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 print_line_cursor#0 print_char_cursor#67 ] { { print_uchar::b#7 = print_uchar::b#8 sin8u_table::sinx_tr#0 } { print_char_cursor#1 = print_char_cursor#106 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uint:14::print_uchar:87::print_char:97 [ sin8u_table::step#0 print_uint::w#3 print_char_cursor#67 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_uint:50::print_uchar:87::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_char_cursor#67 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 print_char_cursor#106 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#67 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:87::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_uint::w#3 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#1 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_uint:14::print_uchar:89::print_char:97 [ sin8u_table::step#0 print_char_cursor#67 ] { { print_uint::w#1 = print_uint::w#3 sin8u_table::step#0 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_uint:50::print_uchar:89::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx#0 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#67 ] { { print_uint::w#2 = print_uint::w#3 sin8u_table::x#10 } { print_char_cursor#1 = print_char_cursor#105 } { print_uchar::b#2 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_sint:58::print_uint:172::print_uchar:89::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_uint::w#0 = print_uint::w#3 } { print_char_cursor#105 = print_char_cursor#18 print_char_cursor#106 print_char_cursor#67 } { print_uchar::b#2 = print_uchar::b#8 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_schar:54::print_uchar:162::print_char:97 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_char_cursor#67 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_uchar::b#0 = print_uchar::b#8 } { print_char_cursor#106 = print_char_cursor#18 print_char_cursor#67 } { print_char::ch#6 = print_char::ch#7 } }  sin8u_table:3::print_schar:54::print_char:159 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_schar::b#1 print_char_cursor#67 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_schar:54::print_char:165 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_sc#0 sin8u_table::sinx_tr#0 print_line_cursor#0 print_schar::b#1 print_char_cursor#67 ] { { print_schar::b#1 = sin8u_table::sinx#0 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_sint:58::print_char:169 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_sint::w#1 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_char_cursor#1 = print_char_cursor#67 } }  sin8u_table:3::print_sint:58::print_char:175 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#0 print_sint::w#1 print_char_cursor#67 ] { { print_sint::w#1 = sin8u_table::sinx_sc#0 } { print_char_cursor#1 = print_char_cursor#67 } }  ) always clobbers reg byte y 
Statement [202] mul8u::return#0 = mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#0 ] ( sin8u_table:3::sin8s:37::mulu8_sel:114 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#0 = mul8u::a#6 mul8u::b#2 mul8u::b#0 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:123 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:134 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [203] mulu8_sel::$0 = mul8u::return#0 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( sin8u_table:3::sin8s:37::mulu8_sel:114 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:123 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:134 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [204] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 [ mulu8_sel::$1 ] ( sin8u_table:3::sin8s:37::mulu8_sel:114 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:119 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:123 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8u_table:3::sin8s:37::mulu8_sel:134 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [208] mul8u::mb#0 = (word)mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( sin8u_table:3::mul8su:41::mul8u:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#0 mul8su::a#0 mul8u::a#6 mul8u::mb#0 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#2 = mul8u::a#6 } { mul8u::return#3 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:114::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#0 = mul8u::a#6 mul8u::b#2 mul8u::b#0 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:119::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:123::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:134::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#6 mul8u::mb#0 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [212] mul8u::$1 = mul8u::a#3 & 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( sin8u_table:3::mul8su:41::mul8u:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#0 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#2 = mul8u::a#6 } { mul8u::return#3 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:114::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#0 = mul8u::a#6 mul8u::b#2 mul8u::b#0 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:119::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:123::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:134::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [214] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( sin8u_table:3::mul8su:41::mul8u:148 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::sinx#0 print_line_cursor#0 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8su::a#0 = sin8u_table::sinx#0 } { mul8u::a#2 = mul8u::a#6 } { mul8u::return#3 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:114::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::a#0 = mul8u::a#6 mul8u::b#2 mul8u::b#0 mulu8_sel::v2#5 mulu8_sel::v2#0 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:119::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#1 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#1 sin8s::x2#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:123::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#2 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:129::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#3 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#3 sin8s::x3#0 } { mul8u::return#0 = mul8u::res#2 } }  sin8u_table:3::sin8s:37::mulu8_sel:134::mul8u:201 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#10 sin8u_table::sintab#2 print_line_cursor#0 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#2 = sin8u_table::x#10 } { sin8s::return#0 = sin8s::return#2 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::b#0 = mul8u::b#2 mulu8_sel::v2#5 mulu8_sel::v2#4 sin8s::x1#0 } { mul8u::a#0 = mul8u::a#6 mulu8_sel::v1#5 mulu8_sel::v1#4 sin8s::x4#0 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ memset::dst#2 memset::dst#1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ print_str::str#10 print_str::str#13 print_str::str#0 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ] : zp[2]:12 , 
Potential registers zp[1]:14 [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ] : zp[1]:14 , reg byte x , 
Potential registers zp[2]:15 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ sin8s::isUpper#10 ] : zp[1]:17 , reg byte x , reg byte y , 
Potential registers zp[2]:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:22 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] : zp[2]:22 , 
Potential registers zp[1]:24 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] : zp[1]:24 , reg byte a , reg byte x , 
Potential registers zp[2]:25 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:27 , 
Potential registers zp[2]:29 [ divr16u::dividend#2 divr16u::dividend#0 ] : zp[2]:29 , 
Potential registers zp[2]:31 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:31 , 
Potential registers zp[1]:33 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:35 [ print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ] : zp[2]:35 , 
Potential registers zp[1]:37 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ mulu8_sel::select#5 ] : zp[1]:39 , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ mul8u::b#2 mul8u::b#0 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#0 mul8u::a#1 ] : zp[1]:41 , reg byte x , reg byte y , 
Potential registers zp[2]:42 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ div16u::return#2 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ sin8u_table::step#0 ] : zp[2]:48 , 
Potential registers zp[1]:50 [ sin8s::return#2 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ sin8u_table::sinx#0 ] : zp[1]:51 , reg byte x , 
Potential registers zp[1]:52 [ mul8su::a#0 ] : zp[1]:52 , reg byte x , reg byte y , 
Potential registers zp[2]:53 [ sin8u_table::sinx_sc#0 ] : zp[2]:53 , 
Potential registers zp[1]:55 [ sin8u_table::$20 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:56 [ sin8u_table::sinx_tr#0 ] : zp[1]:56 , reg byte x , 
Potential registers zp[2]:57 [ divr16u::return#2 ] : zp[2]:57 , 
Potential registers zp[2]:59 [ div16u::return#0 ] : zp[2]:59 , 
Potential registers zp[1]:61 [ print_uchar::$0 ] : zp[1]:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ print_uchar::$2 ] : zp[1]:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:63 [ sin8s::$4 ] : zp[2]:63 , 
Potential registers zp[1]:65 [ sin8s::x1#0 ] : zp[1]:65 , reg byte x , reg byte y , 
Potential registers zp[1]:66 [ mulu8_sel::return#0 ] : zp[1]:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ sin8s::x2#0 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ mulu8_sel::return#1 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ sin8s::x3#0 ] : zp[1]:69 , reg byte x , reg byte y , 
Potential registers zp[1]:70 [ mulu8_sel::return#2 ] : zp[1]:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:71 [ sin8s::x3_6#0 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ sin8s::usinx#0 ] : zp[1]:72 , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ mulu8_sel::return#10 ] : zp[1]:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:74 [ sin8s::x4#0 ] : zp[1]:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:75 [ mulu8_sel::return#11 ] : zp[1]:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:76 [ sin8s::x5#0 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ sin8s::x5_128#0 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:78 [ mul8u::return#3 ] : zp[2]:78 , 
Potential registers zp[1]:80 [ mul8su::$4 ] : zp[1]:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:81 [ mul8su::$6 ] : zp[1]:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:82 [ divr16u::$1 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:83 [ divr16u::$2 ] : zp[1]:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:84 [ mul8u::return#0 ] : zp[2]:84 , 
Potential registers zp[2]:86 [ mulu8_sel::$0 ] : zp[2]:86 , 
Potential registers zp[2]:88 [ mulu8_sel::$1 ] : zp[2]:88 , 
Potential registers zp[1]:90 [ mulu8_sel::return#12 ] : zp[1]:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:91 [ mul8u::$1 ] : zp[1]:91 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 34,287,289.43: zp[2]:42 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 24,500,004.57: zp[2]:44 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 20,000,002: zp[1]:91 [ mul8u::$1 ] 16,750,839.67: zp[1]:41 [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#0 mul8u::a#1 ] 30,003: zp[1]:40 [ mul8u::b#2 mul8u::b#0 ] 20,002: zp[2]:84 [ mul8u::return#0 ] 2,002: zp[2]:78 [ mul8u::return#3 ] 
Uplift Scope [print_char] 1,900,010: zp[1]:34 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] 
Uplift Scope [] 1,233,709.09: zp[2]:35 [ print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ] 210,218.65: zp[2]:15 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ] 
Uplift Scope [print_uchar] 200,002: zp[1]:61 [ print_uchar::$0 ] 200,002: zp[1]:62 [ print_uchar::$2 ] 97,484.5: zp[1]:14 [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ] 
Uplift Scope [print_str] 301,254.25: zp[2]:10 [ print_str::str#10 print_str::str#13 print_str::str#0 ] 
Uplift Scope [divr16u] 87,508.75: zp[2]:27 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 33,523.55: zp[2]:31 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 20,002: zp[1]:82 [ divr16u::$1 ] 20,002: zp[1]:83 [ divr16u::$2 ] 16,540.12: zp[1]:33 [ divr16u::i#2 divr16u::i#1 ] 6,786.39: zp[2]:29 [ divr16u::dividend#2 divr16u::dividend#0 ] 202: zp[2]:57 [ divr16u::return#2 ] 
Uplift Scope [mulu8_sel] 21,012: zp[1]:37 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] 20,002: zp[2]:86 [ mulu8_sel::$0 ] 20,002: zp[2]:88 [ mulu8_sel::$1 ] 15,010.5: zp[1]:38 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] 2,143.71: zp[1]:90 [ mulu8_sel::return#12 ] 2,002: zp[1]:66 [ mulu8_sel::return#0 ] 2,002: zp[1]:68 [ mulu8_sel::return#1 ] 2,002: zp[1]:70 [ mulu8_sel::return#2 ] 2,002: zp[1]:73 [ mulu8_sel::return#10 ] 2,002: zp[1]:75 [ mulu8_sel::return#11 ] 1,666.83: zp[1]:39 [ mulu8_sel::select#5 ] 
Uplift Scope [sin8s] 11,061.5: zp[2]:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] 5,005: zp[1]:20 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] 4,705: zp[1]:21 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] 2,002: zp[2]:63 [ sin8s::$4 ] 2,002: zp[1]:67 [ sin8s::x2#0 ] 2,002: zp[1]:71 [ sin8s::x3_6#0 ] 2,002: zp[1]:74 [ sin8s::x4#0 ] 2,002: zp[1]:76 [ sin8s::x5#0 ] 2,002: zp[1]:77 [ sin8s::x5_128#0 ] 500.5: zp[1]:69 [ sin8s::x3#0 ] 318.5: zp[1]:65 [ sin8s::x1#0 ] 202: zp[1]:50 [ sin8s::return#2 ] 166.83: zp[1]:72 [ sin8s::usinx#0 ] 27.81: zp[1]:17 [ sin8s::isUpper#10 ] 
Uplift Scope [print_uint] 9,264.33: zp[2]:12 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ] 
Uplift Scope [mul8su] 3,670.33: zp[2]:22 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] 2,002: zp[1]:80 [ mul8su::$4 ] 2,002: zp[1]:81 [ mul8su::$6 ] 220.4: zp[1]:52 [ mul8su::a#0 ] 
Uplift Scope [print_sint] 4,521.33: zp[2]:25 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] 
Uplift Scope [print_schar] 4,521.33: zp[1]:24 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] 
Uplift Scope [memset] 3,336.67: zp[2]:8 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [sin8u_table] 211.47: zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] 202: zp[1]:55 [ sin8u_table::$20 ] 114.03: zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ] 34.87: zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] 21.64: zp[1]:51 [ sin8u_table::sinx#0 ] 20.2: zp[2]:53 [ sin8u_table::sinx_sc#0 ] 17.82: zp[1]:56 [ sin8u_table::sinx_tr#0 ] 2.24: zp[2]:48 [ sin8u_table::step#0 ] 
Uplift Scope [div16u] 37.33: zp[2]:59 [ div16u::return#0 ] 22: zp[2]:46 [ div16u::return#2 ] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [RADIX] 
Uplift Scope [main] 

Uplifting [mul8u] best 22389 combination zp[2]:42 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:44 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#0 mul8u::a#1 ] reg byte a [ mul8u::b#2 mul8u::b#0 ] zp[2]:84 [ mul8u::return#0 ] zp[2]:78 [ mul8u::return#3 ] 
Uplifting [print_char] best 22068 combination reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] 
Uplifting [] best 22068 combination zp[2]:35 [ print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ] zp[2]:15 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ] 
Uplifting [print_uchar] best 22005 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ] 
Uplifting [print_str] best 22005 combination zp[2]:10 [ print_str::str#10 print_str::str#13 print_str::str#0 ] 
Uplifting [divr16u] best 21815 combination zp[2]:27 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:31 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:29 [ divr16u::dividend#2 divr16u::dividend#0 ] zp[2]:57 [ divr16u::return#2 ] 
Uplifting [mulu8_sel] best 21757 combination reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] zp[2]:86 [ mulu8_sel::$0 ] zp[2]:88 [ mulu8_sel::$1 ] reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] reg byte a [ mulu8_sel::return#12 ] reg byte a [ mulu8_sel::return#0 ] zp[1]:68 [ mulu8_sel::return#1 ] zp[1]:70 [ mulu8_sel::return#2 ] zp[1]:73 [ mulu8_sel::return#10 ] zp[1]:75 [ mulu8_sel::return#11 ] zp[1]:39 [ mulu8_sel::select#5 ] 
Limited combination testing to 100 combinations of 196608 possible.
Uplifting [sin8s] best 21704 combination zp[2]:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] zp[2]:63 [ sin8s::$4 ] reg byte a [ sin8s::x2#0 ] reg byte a [ sin8s::x3_6#0 ] zp[1]:74 [ sin8s::x4#0 ] zp[1]:76 [ sin8s::x5#0 ] zp[1]:77 [ sin8s::x5_128#0 ] zp[1]:69 [ sin8s::x3#0 ] zp[1]:65 [ sin8s::x1#0 ] zp[1]:50 [ sin8s::return#2 ] zp[1]:72 [ sin8s::usinx#0 ] zp[1]:17 [ sin8s::isUpper#10 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [print_uint] best 21704 combination zp[2]:12 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ] 
Uplifting [mul8su] best 21662 combination zp[2]:22 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] reg byte a [ mul8su::$4 ] reg byte a [ mul8su::$6 ] reg byte y [ mul8su::a#0 ] 
Uplifting [print_sint] best 21662 combination zp[2]:25 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] 
Uplifting [print_schar] best 21626 combination reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] 
Uplifting [memset] best 21626 combination zp[2]:8 [ memset::dst#2 memset::dst#1 ] 
Uplifting [sin8u_table] best 21586 combination zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] reg byte a [ sin8u_table::$20 ] zp[2]:4 [ sin8u_table::x#10 sin8u_table::x#1 ] zp[2]:6 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] zp[1]:51 [ sin8u_table::sinx#0 ] zp[2]:53 [ sin8u_table::sinx_sc#0 ] zp[1]:56 [ sin8u_table::sinx_tr#0 ] zp[2]:48 [ sin8u_table::step#0 ] 
Uplifting [div16u] best 21586 combination zp[2]:59 [ div16u::return#0 ] zp[2]:46 [ div16u::return#2 ] 
Uplifting [print_ln] best 21586 combination 
Uplifting [print_cls] best 21586 combination 
Uplifting [RADIX] best 21586 combination 
Uplifting [main] best 21586 combination 
Attempting to uplift remaining variables inzp[1]:68 [ mulu8_sel::return#1 ]
Uplifting [mulu8_sel] best 21580 combination reg byte a [ mulu8_sel::return#1 ] 
Attempting to uplift remaining variables inzp[1]:70 [ mulu8_sel::return#2 ]
Uplifting [mulu8_sel] best 21574 combination reg byte a [ mulu8_sel::return#2 ] 
Attempting to uplift remaining variables inzp[1]:73 [ mulu8_sel::return#10 ]
Uplifting [mulu8_sel] best 21568 combination reg byte a [ mulu8_sel::return#10 ] 
Attempting to uplift remaining variables inzp[1]:74 [ sin8s::x4#0 ]
Uplifting [sin8s] best 21564 combination reg byte a [ sin8s::x4#0 ] 
Attempting to uplift remaining variables inzp[1]:75 [ mulu8_sel::return#11 ]
Uplifting [mulu8_sel] best 21558 combination reg byte a [ mulu8_sel::return#11 ] 
Attempting to uplift remaining variables inzp[1]:76 [ sin8s::x5#0 ]
Uplifting [sin8s] best 21552 combination reg byte a [ sin8s::x5#0 ] 
Attempting to uplift remaining variables inzp[1]:77 [ sin8s::x5_128#0 ]
Uplifting [sin8s] best 21546 combination reg byte a [ sin8s::x5_128#0 ] 
Attempting to uplift remaining variables inzp[1]:39 [ mulu8_sel::select#5 ]
Uplifting [mulu8_sel] best 21546 combination zp[1]:39 [ mulu8_sel::select#5 ] 
Attempting to uplift remaining variables inzp[1]:69 [ sin8s::x3#0 ]
Uplifting [sin8s] best 21546 combination zp[1]:69 [ sin8s::x3#0 ] 
Attempting to uplift remaining variables inzp[1]:65 [ sin8s::x1#0 ]
Uplifting [sin8s] best 21546 combination zp[1]:65 [ sin8s::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:50 [ sin8s::return#2 ]
Uplifting [sin8s] best 21486 combination reg byte a [ sin8s::return#2 ] 
Attempting to uplift remaining variables inzp[1]:72 [ sin8s::usinx#0 ]
Uplifting [sin8s] best 21486 combination zp[1]:72 [ sin8s::usinx#0 ] 
Attempting to uplift remaining variables inzp[1]:17 [ sin8s::isUpper#10 ]
Uplifting [sin8s] best 21486 combination zp[1]:17 [ sin8s::isUpper#10 ] 
Attempting to uplift remaining variables inzp[1]:51 [ sin8u_table::sinx#0 ]
Uplifting [sin8u_table] best 21486 combination zp[1]:51 [ sin8u_table::sinx#0 ] 
Attempting to uplift remaining variables inzp[1]:56 [ sin8u_table::sinx_tr#0 ]
Uplifting [sin8u_table] best 21486 combination zp[1]:56 [ sin8u_table::sinx_tr#0 ] 
Coalescing zero page register [ zp[2]:12 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 ] ] with [ zp[2]:25 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] ] with [ zp[2]:63 [ sin8s::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] ] with [ zp[2]:53 [ sin8u_table::sinx_sc#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 ] ] with [ zp[2]:78 [ mul8u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:57 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:42 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:84 [ mul8u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:46 [ div16u::return#2 ] ] with [ zp[2]:48 [ sin8u_table::step#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:46 [ div16u::return#2 sin8u_table::step#0 ] ] with [ zp[2]:59 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:86 [ mulu8_sel::$0 ] ] with [ zp[2]:88 [ mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#3 ] ] with [ zp[2]:42 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp[2]:46 [ div16u::return#2 sin8u_table::step#0 div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#3 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 ] ] with [ zp[2]:86 [ mulu8_sel::$0 mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:8 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:2 [ sin8u_table::i#10 sin8u_table::i#1 ] ]
Coalescing zero page register [ zp[2]:12 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 ] ] with [ zp[2]:10 [ print_str::str#10 print_str::str#13 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:27 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp[2]:15 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ] ]
Coalescing zero page register [ zp[2]:29 [ divr16u::dividend#2 divr16u::dividend#0 ] ] with [ zp[2]:18 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 ] ]
Coalescing zero page register [ zp[2]:44 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] ] with [ zp[2]:35 [ print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ] ]
Coalescing zero page register [ zp[1]:51 [ sin8u_table::sinx#0 ] ] with [ zp[1]:17 [ sin8s::isUpper#10 ] ]
Coalescing zero page register [ zp[1]:56 [ sin8u_table::sinx_tr#0 ] ] with [ zp[1]:39 [ mulu8_sel::select#5 ] ]
Coalescing zero page register [ zp[2]:29 [ divr16u::dividend#2 divr16u::dividend#0 sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 ] ] with [ zp[2]:12 [ print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_str::str#10 print_str::str#13 print_str::str#0 ] ]
Allocated (was zp[2]:4) zp[2]:2 [ sin8u_table::x#10 sin8u_table::x#1 ]
Allocated (was zp[2]:6) zp[2]:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
Allocated (was zp[2]:8) zp[2]:6 [ memset::dst#2 memset::dst#1 sin8u_table::i#10 sin8u_table::i#1 ]
Allocated (was zp[2]:22) zp[2]:8 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#3 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 mulu8_sel::$0 mulu8_sel::$1 ]
Allocated (was zp[2]:27) zp[2]:10 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ]
Allocated (was zp[2]:29) zp[2]:12 [ divr16u::dividend#2 divr16u::dividend#0 sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_str::str#10 print_str::str#13 print_str::str#0 ]
Allocated (was zp[2]:31) zp[2]:14 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
Allocated (was zp[2]:44) zp[2]:16 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ]
Allocated (was zp[1]:51) zp[1]:18 [ sin8u_table::sinx#0 sin8s::isUpper#10 ]
Allocated (was zp[1]:56) zp[1]:19 [ sin8u_table::sinx_tr#0 mulu8_sel::select#5 ]
Allocated (was zp[1]:65) zp[1]:20 [ sin8s::x1#0 ]
Allocated (was zp[1]:69) zp[1]:21 [ sin8s::x3#0 ]
Allocated (was zp[1]:72) zp[1]:22 [ sin8s::usinx#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Sine Generator functions using only multiplication, addition and bit shifting
// Uses a single division for converting the wavelength to a reciprocal.
// Generates sine using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
// Uses the approximation sin(x) = x - x^/6 + x^/128
// Optimization possibility: Use symmetries when generating sine tables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sinusgenscale8.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_screen = $400
  .label print_char_cursor = $10
  .label print_line_cursor = $a
.segment Code
  // main
main: {
    .label tabsize = $14
    // [1] call print_cls 
    // [5] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call sin8u_table 
    // [8] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
  sin8u_table_from___b1:
    jsr sin8u_table
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
  .segment Data
    sintab: .fill $14, 0
}
.segment Code
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [6] call memset 
    // [67] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [7] return 
    rts
}
  // sin8u_table
// Generate unsigned byte sine table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sine points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zp(4) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .const sum = min+max
    .const mid = sum/2+1
    .label amplitude = max-min
    .label step = $e
    .label sinx = $12
    .label sinx_sc = 8
    .label sinx_tr = $13
    .label sintab = 4
    // Iterate over the table
    .label x = 2
    .label i = 6
    // [9] call div16u 
    // [73] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
  div16u_from_sin8u_table:
    jsr div16u
    // [10] div16u::return#2 = div16u::return#0
    jmp __b3
    // sin8u_table::@3
  __b3:
    // [11] sin8u_table::step#0 = div16u::return#2
    // [12] call print_str 
  // u[4.12]
    // [78] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
  print_str_from___b3:
    // [78] phi print_char_cursor#112 = print_screen#0 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [78] phi print_str::str#13 = sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // sin8u_table::@4
  __b4:
    // [13] print_uint::w#1 = sin8u_table::step#0 -- vwuz1=vwuz2 
    lda.z step
    sta.z print_uint.w
    lda.z step+1
    sta.z print_uint.w+1
    // [14] call print_uint 
    // [85] phi from sin8u_table::@4 to print_uint [phi:sin8u_table::@4->print_uint]
  print_uint_from___b4:
    // [85] phi print_char_cursor#105 = print_char_cursor#1 [phi:sin8u_table::@4->print_uint#0] -- register_copy 
    // [85] phi print_uint::w#3 = print_uint::w#1 [phi:sin8u_table::@4->print_uint#1] -- register_copy 
    jsr print_uint
    // [15] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  __b5_from___b4:
    jmp __b5
    // sin8u_table::@5
  __b5:
    // [16] call print_str 
    // [78] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
  print_str_from___b5:
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@5->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [17] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  __b6_from___b5:
    jmp __b6
    // sin8u_table::@6
  __b6:
    // [18] call print_uchar 
    // [91] phi from sin8u_table::@6 to print_uchar [phi:sin8u_table::@6->print_uchar]
  print_uchar_from___b6:
    // [91] phi print_char_cursor#106 = print_char_cursor#1 [phi:sin8u_table::@6->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = sin8u_table::min#0 [phi:sin8u_table::@6->print_uchar#1] -- vbuxx=vbuc1 
    ldx #min
    jsr print_uchar
    // [19] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  __b7_from___b6:
    jmp __b7
    // sin8u_table::@7
  __b7:
    // [20] call print_str 
    // [78] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
  print_str_from___b7:
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@7->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [21] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  __b8_from___b7:
    jmp __b8
    // sin8u_table::@8
  __b8:
    // [22] call print_uchar 
    // [91] phi from sin8u_table::@8 to print_uchar [phi:sin8u_table::@8->print_uchar]
  print_uchar_from___b8:
    // [91] phi print_char_cursor#106 = print_char_cursor#1 [phi:sin8u_table::@8->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = sin8u_table::max#0 [phi:sin8u_table::@8->print_uchar#1] -- vbuxx=vbuc1 
    ldx #max
    jsr print_uchar
    // [23] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  __b9_from___b8:
    jmp __b9
    // sin8u_table::@9
  __b9:
    // [24] call print_str 
    // [78] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
  print_str_from___b9:
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@9->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // [25] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  __b10_from___b9:
    jmp __b10
    // sin8u_table::@10
  __b10:
    // [26] call print_uchar 
    // [91] phi from sin8u_table::@10 to print_uchar [phi:sin8u_table::@10->print_uchar]
  print_uchar_from___b10:
    // [91] phi print_char_cursor#106 = print_char_cursor#1 [phi:sin8u_table::@10->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_uchar#1] -- vbuxx=vbuc1 
    ldx #amplitude
    jsr print_uchar
    // [27] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  __b11_from___b10:
    jmp __b11
    // sin8u_table::@11
  __b11:
    // [28] call print_str 
    // [78] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
  print_str_from___b11:
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@11->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // [29] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  __b12_from___b11:
    jmp __b12
    // sin8u_table::@12
  __b12:
    // [30] call print_uchar 
    // [91] phi from sin8u_table::@12 to print_uchar [phi:sin8u_table::@12->print_uchar]
  print_uchar_from___b12:
    // [91] phi print_char_cursor#106 = print_char_cursor#1 [phi:sin8u_table::@12->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = sin8u_table::mid#0 [phi:sin8u_table::@12->print_uchar#1] -- vbuxx=vbuc1 
    ldx #mid
    jsr print_uchar
    // [31] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
  __b13_from___b12:
    jmp __b13
    // sin8u_table::@13
  __b13:
    // [32] call print_ln 
    // [99] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
  print_ln_from___b13:
    // [99] phi print_line_cursor#25 = print_screen#0 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    jsr print_ln
    // [33] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
  __b1_from___b13:
    // [33] phi sin8u_table::sintab#2 = main::sintab [phi:sin8u_table::@13->sin8u_table::@1#0] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta.z sintab
    lda #>main.sintab
    sta.z sintab+1
    // [33] phi sin8u_table::x#10 = 0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [33] phi sin8u_table::i#10 = 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.12]
    // sin8u_table::@1
  __b1:
    // [34] if(sin8u_table::i#10<main::tabsize) goto sin8u_table::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.tabsize
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.tabsize
    bcc __b2
  !:
    jmp __breturn
    // sin8u_table::@return
  __breturn:
    // [35] return 
    rts
    // sin8u_table::@2
  __b2:
    // [36] sin8s::x#2 = sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [37] call sin8s 
    jsr sin8s
    // [38] sin8s::return#2 = sin8s::return#0
    jmp __b14
    // sin8u_table::@14
  __b14:
    // [39] sin8u_table::sinx#0 = sin8s::return#2 -- vbsz1=vbsaa 
    sta.z sinx
    // [40] mul8su::a#0 = sin8u_table::sinx#0 -- vbsyy=vbsz1 
    ldy.z sinx
    // [41] call mul8su 
    jsr mul8su
    jmp __b15
    // sin8u_table::@15
  __b15:
    // [42] sin8u_table::sinx_sc#0 = (signed word)mul8su::m#2
    // [43] sin8u_table::$20 = > sin8u_table::sinx_sc#0 -- vbuaa=_byte1_vwsz1 
    lda.z sinx_sc+1
    // [44] sin8u_table::sinx_tr#0 = sin8u_table::mid#0 + sin8u_table::$20 -- vbuz1=vbuc1_plus_vbuaa 
    clc
    adc #mid
    sta.z sinx_tr
    // [45] *sin8u_table::sintab#2 = sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuz2 
    lda.z sinx_tr
    ldy #0
    sta (sintab),y
    // [46] sin8u_table::sintab#1 = ++ sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [47] print_char_cursor#119 = print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [48] call print_str 
    // [78] phi from sin8u_table::@15 to print_str [phi:sin8u_table::@15->print_str]
  print_str_from___b15:
    // [78] phi print_char_cursor#112 = print_char_cursor#119 [phi:sin8u_table::@15->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str5 [phi:sin8u_table::@15->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str.str
    lda #>str5
    sta.z print_str.str+1
    jsr print_str
    jmp __b16
    // sin8u_table::@16
  __b16:
    // [49] print_uint::w#2 = sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z print_uint.w
    lda.z x+1
    sta.z print_uint.w+1
    // [50] call print_uint 
    // [85] phi from sin8u_table::@16 to print_uint [phi:sin8u_table::@16->print_uint]
  print_uint_from___b16:
    // [85] phi print_char_cursor#105 = print_char_cursor#1 [phi:sin8u_table::@16->print_uint#0] -- register_copy 
    // [85] phi print_uint::w#3 = print_uint::w#2 [phi:sin8u_table::@16->print_uint#1] -- register_copy 
    jsr print_uint
    // [51] phi from sin8u_table::@16 to sin8u_table::@17 [phi:sin8u_table::@16->sin8u_table::@17]
  __b17_from___b16:
    jmp __b17
    // sin8u_table::@17
  __b17:
    // [52] call print_str 
    // [78] phi from sin8u_table::@17 to print_str [phi:sin8u_table::@17->print_str]
  print_str_from___b17:
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@17->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str6 [phi:sin8u_table::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str.str
    lda #>str6
    sta.z print_str.str+1
    jsr print_str
    jmp __b18
    // sin8u_table::@18
  __b18:
    // [53] print_schar::b#1 = sin8u_table::sinx#0 -- vbsxx=vbsz1 
    ldx.z sinx
    // [54] call print_schar 
    jsr print_schar
    // [55] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
  __b19_from___b18:
    jmp __b19
    // sin8u_table::@19
  __b19:
    // [56] call print_str 
    // [78] phi from sin8u_table::@19 to print_str [phi:sin8u_table::@19->print_str]
  print_str_from___b19:
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@19->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str7 [phi:sin8u_table::@19->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str.str
    lda #>str7
    sta.z print_str.str+1
    jsr print_str
    jmp __b20
    // sin8u_table::@20
  __b20:
    // [57] print_sint::w#1 = sin8u_table::sinx_sc#0 -- vwsz1=vwsz2 
    lda.z sinx_sc
    sta.z print_sint.w
    lda.z sinx_sc+1
    sta.z print_sint.w+1
    // [58] call print_sint 
    jsr print_sint
    // [59] phi from sin8u_table::@20 to sin8u_table::@21 [phi:sin8u_table::@20->sin8u_table::@21]
  __b21_from___b20:
    jmp __b21
    // sin8u_table::@21
  __b21:
    // [60] call print_str 
    // [78] phi from sin8u_table::@21 to print_str [phi:sin8u_table::@21->print_str]
  print_str_from___b21:
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@21->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str8 [phi:sin8u_table::@21->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str.str
    lda #>str8
    sta.z print_str.str+1
    jsr print_str
    jmp __b22
    // sin8u_table::@22
  __b22:
    // [61] print_uchar::b#7 = sin8u_table::sinx_tr#0 -- vbuxx=vbuz1 
    ldx.z sinx_tr
    // [62] call print_uchar 
    // [91] phi from sin8u_table::@22 to print_uchar [phi:sin8u_table::@22->print_uchar]
  print_uchar_from___b22:
    // [91] phi print_char_cursor#106 = print_char_cursor#1 [phi:sin8u_table::@22->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = print_uchar::b#7 [phi:sin8u_table::@22->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [63] phi from sin8u_table::@22 to sin8u_table::@23 [phi:sin8u_table::@22->sin8u_table::@23]
  __b23_from___b22:
    jmp __b23
    // sin8u_table::@23
  __b23:
    // [64] call print_ln 
    // [99] phi from sin8u_table::@23 to print_ln [phi:sin8u_table::@23->print_ln]
  print_ln_from___b23:
    // [99] phi print_line_cursor#25 = print_line_cursor#0 [phi:sin8u_table::@23->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b24
    // sin8u_table::@24
  __b24:
    // [65] sin8u_table::x#1 = sin8u_table::x#10 + sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [66] sin8u_table::i#1 = ++ sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [33] phi from sin8u_table::@24 to sin8u_table::@1 [phi:sin8u_table::@24->sin8u_table::@1]
  __b1_from___b24:
    // [33] phi sin8u_table::sintab#2 = sin8u_table::sintab#1 [phi:sin8u_table::@24->sin8u_table::@1#0] -- register_copy 
    // [33] phi sin8u_table::x#10 = sin8u_table::x#1 [phi:sin8u_table::@24->sin8u_table::@1#1] -- register_copy 
    // [33] phi sin8u_table::i#10 = sin8u_table::i#1 [phi:sin8u_table::@24->sin8u_table::@1#2] -- register_copy 
    jmp __b1
  .segment Data
    str: .text "step:"
    .byte 0
    str1: .text " min:"
    .byte 0
    str2: .text " max:"
    .byte 0
    str3: .text " ampl:"
    .byte 0
    str4: .text " mid:"
    .byte 0
    str5: .text "x: "
    .byte 0
    str6: .text " sin: "
    .byte 0
    str7: .text " scaled: "
    .byte 0
    str8: .text " trans: "
    .byte 0
}
.segment Code
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 6
    // [68] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [68] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [69] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [70] return 
    rts
    // memset::@2
  __b2:
    // [71] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [72] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [68] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [68] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $e
    // [74] call divr16u 
    // [177] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
    // [75] divr16u::return#2 = divr16u::return#0
    jmp __b1
    // div16u::@1
  __b1:
    // [76] div16u::return#0 = divr16u::return#2
    jmp __breturn
    // div16u::@return
  __breturn:
    // [77] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($c) str)
print_str: {
    .label str = $c
    // [79] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [79] phi print_char_cursor#1 = print_char_cursor#112 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [79] phi print_str::str#10 = print_str::str#13 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [80] if(0!=*print_str::str#10) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [81] return 
    rts
    // print_str::@2
  __b2:
    // [82] print_char::ch#0 = *print_str::str#10 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [83] call print_char 
    // [194] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [194] phi print_char_cursor#67 = print_char_cursor#1 [phi:print_str::@2->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [84] print_str::str#0 = ++ print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($c) w)
print_uint: {
    .label w = $c
    // [86] print_uchar::b#1 = > print_uint::w#3 -- vbuxx=_byte1_vwuz1 
    ldx.z w+1
    // [87] call print_uchar 
    // [91] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [91] phi print_char_cursor#106 = print_char_cursor#105 [phi:print_uint->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [88] print_uchar::b#2 = < print_uint::w#3 -- vbuxx=_byte0_vwuz1 
    ldx.z w
    // [89] call print_uchar 
    // [91] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [91] phi print_char_cursor#106 = print_char_cursor#18 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [90] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [92] print_uchar::$0 = print_uchar::b#8 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [93] print_char::ch#5 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [94] call print_char 
  // Table of hexadecimal digits
    // [194] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [194] phi print_char_cursor#67 = print_char_cursor#106 [phi:print_uchar->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [95] print_uchar::$2 = print_uchar::b#8 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [96] print_char::ch#6 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [97] call print_char 
    // [194] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [194] phi print_char_cursor#67 = print_char_cursor#18 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [98] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [100] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [100] phi print_line_cursor#13 = print_line_cursor#25 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [101] print_line_cursor#0 = print_line_cursor#13 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [102] if(print_line_cursor#0<print_char_cursor#18) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [103] return 
    rts
}
  // sin8s
// Calculate signed char sine sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zp($c) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $c
    .label x = $c
    .label x1 = $14
    .label x3 = $15
    .label usinx = $16
    // Move x1 into the range 0-PI/2 using sine mirror symmetries
    .label isUpper = $12
    // [104] if(sin8s::x#2<PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b1_from_sin8s
  !:
    jmp __b5
    // sin8s::@5
  __b5:
    // [105] sin8s::x#0 = sin8s::x#2 - PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [106] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  __b1_from___b5:
    // [106] phi sin8s::isUpper#10 = 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [106] phi sin8s::x#4 = sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [106] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b1_from_sin8s:
    // [106] phi sin8s::isUpper#10 = 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [106] phi sin8s::x#4 = sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp __b1
    // sin8s::@1
  __b1:
    // [107] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2_from___b1
  !:
    jmp __b6
    // sin8s::@6
  __b6:
    // [108] sin8s::x#1 = PI_u4f12 - sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [109] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  __b2_from___b1:
  __b2_from___b6:
    // [109] phi sin8s::x#6 = sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp __b2
    // sin8s::@2
  __b2:
    // [110] sin8s::$4 = sin8s::x#6 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // [111] sin8s::x1#0 = > sin8s::$4 -- vbuz1=_byte1_vwuz2 
    lda.z __4+1
    sta.z x1
    // [112] mulu8_sel::v1#0 = sin8s::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [113] mulu8_sel::v2#0 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [114] call mulu8_sel 
    // [198] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from___b2:
    // [198] phi mulu8_sel::select#5 = 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [198] phi mulu8_sel::v2#5 = mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [198] phi mulu8_sel::v1#5 = mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [115] mulu8_sel::return#0 = mulu8_sel::return#12
    jmp __b9
    // sin8s::@9
  __b9:
    // [116] sin8s::x2#0 = mulu8_sel::return#0
    // [117] mulu8_sel::v1#1 = sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [118] mulu8_sel::v2#1 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [119] call mulu8_sel 
    // [198] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from___b9:
    // [198] phi mulu8_sel::select#5 = 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [198] phi mulu8_sel::v2#5 = mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [198] phi mulu8_sel::v1#5 = mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [120] mulu8_sel::return#1 = mulu8_sel::return#12
    jmp __b10
    // sin8s::@10
  __b10:
    // [121] sin8s::x3#0 = mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // [122] mulu8_sel::v1#2 = sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [123] call mulu8_sel 
    // [198] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from___b10:
    // [198] phi mulu8_sel::select#5 = 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [198] phi mulu8_sel::v2#5 = sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [198] phi mulu8_sel::v1#5 = mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [124] mulu8_sel::return#2 = mulu8_sel::return#12
    jmp __b11
    // sin8s::@11
  __b11:
    // [125] sin8s::x3_6#0 = mulu8_sel::return#2
    // [126] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // [127] mulu8_sel::v1#3 = sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [128] mulu8_sel::v2#3 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [129] call mulu8_sel 
    // [198] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from___b11:
    // [198] phi mulu8_sel::select#5 = 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [198] phi mulu8_sel::v2#5 = mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [198] phi mulu8_sel::v1#5 = mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [130] mulu8_sel::return#10 = mulu8_sel::return#12
    jmp __b12
    // sin8s::@12
  __b12:
    // [131] sin8s::x4#0 = mulu8_sel::return#10
    // [132] mulu8_sel::v1#4 = sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [133] mulu8_sel::v2#4 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [134] call mulu8_sel 
    // [198] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from___b12:
    // [198] phi mulu8_sel::select#5 = 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [198] phi mulu8_sel::v2#5 = mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [198] phi mulu8_sel::v1#5 = mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [135] mulu8_sel::return#11 = mulu8_sel::return#12
    jmp __b13
    // sin8s::@13
  __b13:
    // [136] sin8s::x5#0 = mulu8_sel::return#11
    // [137] sin8s::x5_128#0 = sin8s::x5#0 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [138] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // [139] if(sin8s::usinx#1<$80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3_from___b13
    jmp __b7
    // sin8s::@7
  __b7:
    // [140] sin8s::usinx#2 = -- sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [141] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  __b3_from___b13:
  __b3_from___b7:
    // [141] phi sin8s::usinx#4 = sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp __b3
    // sin8s::@3
  __b3:
    // [142] if(sin8s::isUpper#10==0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    beq __b14
    jmp __b8
    // sin8s::@8
  __b8:
    // [143] sin8s::sinx#1 = - (signed byte)sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [144] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  __b4_from___b14:
  __b4_from___b8:
    // [144] phi sin8s::return#0 = sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp __b4
    // sin8s::@4
  __b4:
    jmp __breturn
    // sin8s::@return
  __breturn:
    // [145] return 
    rts
    // sin8s::@14
  __b14:
    // [146] sin8s::return#5 = (signed byte)sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    jmp __b4_from___b14
}
  // mul8su
// Multiply a signed char and an unsigned char (into a signed int)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte register(Y) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label m = 8
    // [147] mul8u::a#2 = (byte)mul8su::a#0 -- vbuxx=vbuyy 
    tya
    tax
    // [148] call mul8u 
    // [207] phi from mul8su to mul8u [phi:mul8su->mul8u]
  mul8u_from_mul8su:
    // [207] phi mul8u::a#6 = mul8u::a#2 [phi:mul8su->mul8u#0] -- register_copy 
    // [207] phi mul8u::b#2 = mul8su::b#0 [phi:mul8su->mul8u#1] -- vbuaa=vbuc1 
    lda #b
    jsr mul8u
    // [149] mul8u::return#3 = mul8u::res#2
    jmp __b3
    // mul8su::@3
  __b3:
    // [150] mul8su::m#0 = mul8u::return#3
    // [151] if(mul8su::a#0>=0) goto mul8su::@1 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b1_from___b3
    jmp __b2
    // mul8su::@2
  __b2:
    // [152] mul8su::$4 = > mul8su::m#0 -- vbuaa=_byte1_vwuz1 
    lda.z m+1
    // [153] mul8su::$6 = mul8su::$4 - mul8su::b#0 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #b
    // [154] mul8su::m#1 = mul8su::m#0 byte1= mul8su::$6 -- vwuz1=vwuz1_setbyte1_vbuaa 
    sta.z m+1
    // [155] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
  __b1_from___b2:
  __b1_from___b3:
    // [155] phi mul8su::m#2 = mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
    jmp __b1
    // mul8su::@1
  __b1:
    jmp __breturn
    // mul8su::@return
  __breturn:
    // [156] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // [157] if(print_schar::b#1<0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1_from_print_schar
    // [158] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [159] call print_char 
    // [194] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [194] phi print_char_cursor#67 = print_char_cursor#1 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [160] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [160] phi print_schar::b#4 = print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [161] print_uchar::b#0 = (byte)print_schar::b#4
    // [162] call print_uchar 
    // [91] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
  print_uchar_from___b2:
    // [91] phi print_char_cursor#106 = print_char_cursor#18 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [163] return 
    rts
    // [164] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [165] call print_char 
    // [194] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [194] phi print_char_cursor#67 = print_char_cursor#1 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [166] print_schar::b#0 = - print_schar::b#1 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2_from___b4
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp($c) w)
print_sint: {
    .label w = $c
    // [167] if(print_sint::w#1<0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [168] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [169] call print_char 
    // [194] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [194] phi print_char_cursor#67 = print_char_cursor#1 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [170] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [170] phi print_sint::w#4 = print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [171] print_uint::w#0 = (word)print_sint::w#4
    // [172] call print_uint 
    // [85] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [85] phi print_char_cursor#105 = print_char_cursor#18 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [85] phi print_uint::w#3 = print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [173] return 
    rts
    // [174] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [175] call print_char 
    // [194] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [194] phi print_char_cursor#67 = print_char_cursor#1 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [176] print_sint::w#0 = - print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($c) dividend, word zp($a) rem)
divr16u: {
    .label rem = $a
    .label dividend = $c
    .label quotient = $e
    .label return = $e
    // [178] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [178] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [178] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [178] phi divr16u::dividend#2 = PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [178] phi divr16u::rem#4 = 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [178] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [178] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [178] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [178] phi divr16u::dividend#2 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [178] phi divr16u::rem#4 = divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [179] divr16u::rem#0 = divr16u::rem#4 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [180] divr16u::$1 = > divr16u::dividend#2 -- vbuaa=_byte1_vwuz1 
    lda.z dividend+1
    // [181] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [182] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [183] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [184] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [184] phi divr16u::rem#5 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [185] divr16u::dividend#0 = divr16u::dividend#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [186] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [187] if(divr16u::rem#5<main::tabsize) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.tabsize
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<main.tabsize
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [188] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [189] divr16u::rem#2 = divr16u::rem#5 - main::tabsize -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.tabsize
    sta.z rem
    lda.z rem+1
    sbc #>main.tabsize
    sta.z rem+1
    // [190] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [190] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [190] phi divr16u::rem#9 = divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [191] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [192] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [193] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [195] *print_char_cursor#67 = print_char::ch#7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [196] print_char_cursor#18 = ++ print_char_cursor#67 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [197] return 
    rts
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zp($13) select)
mulu8_sel: {
    .label __0 = 8
    .label __1 = 8
    .label select = $13
    // [199] mul8u::a#0 = mulu8_sel::v1#5
    // [200] mul8u::b#0 = mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [201] call mul8u 
    // [207] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
    // [207] phi mul8u::a#6 = mul8u::a#0 [phi:mulu8_sel->mul8u#0] -- register_copy 
    // [207] phi mul8u::b#2 = mul8u::b#0 [phi:mulu8_sel->mul8u#1] -- register_copy 
    jsr mul8u
    // [202] mul8u::return#0 = mul8u::res#2
    jmp __b1
    // mulu8_sel::@1
  __b1:
    // [203] mulu8_sel::$0 = mul8u::return#0
    // [204] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // [205] mulu8_sel::return#12 = > mulu8_sel::$1 -- vbuaa=_byte1_vwuz1 
    lda.z __1+1
    jmp __breturn
    // mulu8_sel::@return
  __breturn:
    // [206] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label return = 8
    .label mb = $10
    .label res = 8
    // [208] mul8u::mb#0 = (word)mul8u::b#2 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [209] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [209] phi mul8u::mb#2 = mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [209] phi mul8u::res#2 = 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [209] phi mul8u::a#3 = mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [210] if(mul8u::a#3!=0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [211] return 
    rts
    // mul8u::@2
  __b2:
    // [212] mul8u::$1 = mul8u::a#3 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [213] if(mul8u::$1==0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [214] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [215] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [215] phi mul8u::res#6 = mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [216] mul8u::a#1 = mul8u::a#3 >> 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [217] mul8u::mb#1 = mul8u::mb#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [209] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [209] phi mul8u::mb#2 = mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [209] phi mul8u::res#2 = mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [209] phi mul8u::a#3 = mul8u::a#1 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp __b24
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Replacing instruction ldy.z sinx with TAY
Removing instruction lda.z sinx_tr
Replacing instruction ldx.z x1 with TAX
Replacing instruction ldy.z x1 with TAY
Replacing instruction ldx.z x3 with TAX
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b3 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b13 with __b3
Replacing label __b4_from___b14 with __b4
Replacing label __b1_from___b3 with __b1
Replacing label __b1_from_print_schar with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from_print_sint with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Removing instruction __b1_from_main:
Removing instruction sin8u_table_from___b1:
Removing instruction __b5_from___b4:
Removing instruction print_str_from___b5:
Removing instruction __b6_from___b5:
Removing instruction print_uchar_from___b6:
Removing instruction __b7_from___b6:
Removing instruction print_str_from___b7:
Removing instruction __b8_from___b7:
Removing instruction print_uchar_from___b8:
Removing instruction __b9_from___b8:
Removing instruction print_str_from___b9:
Removing instruction __b10_from___b9:
Removing instruction print_uchar_from___b10:
Removing instruction __b11_from___b10:
Removing instruction print_str_from___b11:
Removing instruction __b12_from___b11:
Removing instruction print_uchar_from___b12:
Removing instruction __b13_from___b12:
Removing instruction print_ln_from___b13:
Removing instruction __b17_from___b16:
Removing instruction print_str_from___b17:
Removing instruction __b19_from___b18:
Removing instruction print_str_from___b19:
Removing instruction __b21_from___b20:
Removing instruction print_str_from___b21:
Removing instruction __b23_from___b22:
Removing instruction print_ln_from___b23:
Removing instruction __breturn:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b13:
Removing instruction __b3_from___b7:
Removing instruction __b4_from___b14:
Removing instruction __b4_from___b8:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b3_from_print_schar:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uchar_from___b2:
Removing instruction __b1_from_print_schar:
Removing instruction print_char_from___b1:
Removing instruction __b3_from_print_sint:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uint_from___b2:
Removing instruction __b1_from_print_sint:
Removing instruction print_char_from___b1:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_cls_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction div16u_from_sin8u_table:
Removing instruction __b3:
Removing instruction print_str_from___b3:
Removing instruction __b4:
Removing instruction print_uint_from___b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b1_from___b13:
Removing instruction __breturn:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction print_str_from___b15:
Removing instruction __b16:
Removing instruction print_uint_from___b16:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction __b21:
Removing instruction __b22:
Removing instruction print_uchar_from___b22:
Removing instruction __b23:
Removing instruction __b24:
Removing instruction __b1_from___b24:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction divr16u_from_div16u:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b6:
Removing instruction mulu8_sel_from___b2:
Removing instruction __b9:
Removing instruction mulu8_sel_from___b9:
Removing instruction __b10:
Removing instruction mulu8_sel_from___b10:
Removing instruction __b11:
Removing instruction mulu8_sel_from___b11:
Removing instruction __b12:
Removing instruction mulu8_sel_from___b12:
Removing instruction __b13:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction mul8u_from_mul8su:
Removing instruction __b3:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction mul8u_from_mulu8_sel:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __b4
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from_sin8s to __b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b4:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant const word PI2_u4f12 = $6488
constant const word PI_HALF_u4f12 = $1922
constant const word PI_u4f12 = $3244
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
word div16u(word div16u::dividend , word div16u::divisor)
word div16u::dividend
word div16u::divisor
word div16u::return
word div16u::return#0 return zp[2]:14 37.33333333333333
word div16u::return#2 return zp[2]:14 22.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 20002.0
byte~ divr16u::$2 reg byte a 20002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:12 2500.25
word divr16u::dividend#2 dividend zp[2]:12 4286.142857142857
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 15001.5
byte divr16u::i#2 reg byte x 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:14 15001.5
word divr16u::quotient#2 quotient zp[2]:14 10001.0
word divr16u::quotient#3 quotient zp[2]:14 2500.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:10 7500.75
word divr16u::rem#1 rem zp[2]:10 20002.0
word divr16u::rem#2 rem zp[2]:10 20002.0
word divr16u::rem#4 rem zp[2]:10 20002.0
word divr16u::rem#5 rem zp[2]:10 10001.0
word divr16u::rem#9 rem zp[2]:10 10001.0
word divr16u::return
word divr16u::return#0 return zp[2]:14 6020.8
word divr16u::return#2 return zp[2]:14 202.0
void main()
constant byte* main::sintab[$14]  = { fill( $14, 0) }
constant word main::tabsize = $14
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
constant byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:6 2002.0
byte* memset::dst#2 dst zp[2]:6 1334.6666666666667
byte* memset::end
constant byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
constant word memset::num#0 num = $3e8
void* memset::return
void* memset::str
constant void* memset::str#0 str = (void*)print_screen#0
signed word mul8su(signed byte mul8su::a , byte mul8su::b)
byte~ mul8su::$4 reg byte a 2002.0
byte~ mul8su::$6 reg byte a 2002.0
signed byte mul8su::a
signed byte mul8su::a#0 reg byte y 220.39999999999998
byte mul8su::b
constant byte mul8su::b#0 b = sin8u_table::amplitude#0+1
word mul8su::m
word mul8su::m#0 m zp[2]:8 1001.0
word mul8su::m#1 m zp[2]:8 2002.0
word mul8su::m#2 m zp[2]:8 667.3333333333334
signed word mul8su::return
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 reg byte a 2.0000002E7
byte mul8u::a
byte mul8u::a#0 reg byte x 10001.0
byte mul8u::a#1 reg byte x 1.0000001E7
byte mul8u::a#2 reg byte x 2002.0
byte mul8u::a#3 reg byte x 6683334.166666666
byte mul8u::a#6 reg byte x 55501.5
byte mul8u::b
byte mul8u::b#0 reg byte a 20002.0
byte mul8u::b#2 reg byte a 10001.0
word mul8u::mb
word mul8u::mb#0 mb zp[2]:16 200002.0
word mul8u::mb#1 mb zp[2]:16 2.0000002E7
word mul8u::mb#2 mb zp[2]:16 4300000.571428571
word mul8u::res
word mul8u::res#1 res zp[2]:8 2.0000002E7
word mul8u::res#2 res zp[2]:8 4287286.428571429
word mul8u::res#6 res zp[2]:8 1.0000001E7
word mul8u::return
word mul8u::return#0 return zp[2]:8 20002.0
word mul8u::return#3 return zp[2]:8 2002.0
byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
word~ mulu8_sel::$0 zp[2]:8 20002.0
word~ mulu8_sel::$1 zp[2]:8 20002.0
byte mulu8_sel::return
byte mulu8_sel::return#0 reg byte a 2002.0
byte mulu8_sel::return#1 reg byte a 2002.0
byte mulu8_sel::return#10 reg byte a 2002.0
byte mulu8_sel::return#11 reg byte a 2002.0
byte mulu8_sel::return#12 reg byte a 2143.714285714286
byte mulu8_sel::return#2 reg byte a 2002.0
byte mulu8_sel::select
byte mulu8_sel::select#5 select zp[1]:19 1666.8333333333333
byte mulu8_sel::v1
byte mulu8_sel::v1#0 reg byte x 1001.0
byte mulu8_sel::v1#1 reg byte x 1001.0
byte mulu8_sel::v1#2 reg byte x 2002.0
byte mulu8_sel::v1#3 reg byte x 1001.0
byte mulu8_sel::v1#4 reg byte x 1001.0
byte mulu8_sel::v1#5 reg byte x 15006.0
byte mulu8_sel::v2
byte mulu8_sel::v2#0 reg byte y 2002.0
byte mulu8_sel::v2#1 reg byte y 2002.0
byte mulu8_sel::v2#3 reg byte y 2002.0
byte mulu8_sel::v2#4 reg byte y 2002.0
byte mulu8_sel::v2#5 reg byte y 7002.5
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 200002.0
byte print_char::ch#5 reg byte a 200002.0
byte print_char::ch#6 reg byte a 200002.0
byte print_char::ch#7 reg byte a 1300004.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:16 7330.857142857143
byte* print_char_cursor#105 print_char_cursor zp[2]:16 5557.0
byte* print_char_cursor#106 print_char_cursor zp[2]:16 40383.0
byte* print_char_cursor#112 print_char_cursor zp[2]:16 1449.0
byte* print_char_cursor#119 print_char_cursor zp[2]:16 202.0
byte* print_char_cursor#18 print_char_cursor zp[2]:16 26782.73469387755
byte* print_char_cursor#67 print_char_cursor zp[2]:16 1152004.5
void print_cls()
constant const byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:10 8113.648648648648
byte* print_line_cursor#13 print_line_cursor zp[2]:10 201003.0
byte* print_line_cursor#25 print_line_cursor zp[2]:10 1102.0
void print_ln()
void print_schar(signed byte print_schar::b)
signed byte print_schar::b
signed byte print_schar::b#0 reg byte x 2002.0
signed byte print_schar::b#1 reg byte x 517.3333333333334
signed byte print_schar::b#4 reg byte x 2002.0
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_sint(signed word print_sint::w)
signed word print_sint::w
signed word print_sint::w#0 w zp[2]:12 2002.0
signed word print_sint::w#1 w zp[2]:12 517.3333333333334
signed word print_sint::w#4 w zp[2]:12 2002.0
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:12 200002.0
byte* print_str::str#10 str zp[2]:12 100251.25
byte* print_str::str#13 str zp[2]:12 1001.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 200002.0
byte~ print_uchar::$2 reg byte x 200002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 2002.0
byte print_uchar::b#1 reg byte x 20002.0
byte print_uchar::b#2 reg byte x 20002.0
byte print_uchar::b#7 reg byte x 202.0
byte print_uchar::b#8 reg byte x 55276.5
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:12 2002.0
word print_uint::w#1 w zp[2]:12 22.0
word print_uint::w#2 w zp[2]:12 202.0
word print_uint::w#3 w zp[2]:12 7038.333333333333
signed byte sin8s(word sin8s::x)
word~ sin8s::$4 zp[2]:12 2002.0
constant const byte sin8s::DIV_6 = $2b
byte sin8s::isUpper
byte sin8s::isUpper#10 isUpper zp[1]:18 27.805555555555557
signed byte sin8s::return
signed byte sin8s::return#0 reg byte a 701.0
signed byte sin8s::return#2 reg byte a 202.0
signed byte sin8s::return#5 reg byte a 2002.0
signed byte sin8s::sinx
signed byte sin8s::sinx#1 reg byte a 2002.0
byte sin8s::usinx
byte sin8s::usinx#0 usinx zp[1]:22 166.83333333333334
byte sin8s::usinx#1 reg byte x 2002.0
byte sin8s::usinx#2 reg byte x 2002.0
byte sin8s::usinx#4 reg byte x 1001.0
word sin8s::x
word sin8s::x#0 x zp[2]:12 2002.0
word sin8s::x#1 x zp[2]:12 2002.0
word sin8s::x#2 x zp[2]:12 1552.0
word sin8s::x#4 x zp[2]:12 2502.5
word sin8s::x#6 x zp[2]:12 3003.0
byte sin8s::x1
byte sin8s::x1#0 x1 zp[1]:20 318.5
byte sin8s::x2
byte sin8s::x2#0 reg byte a 2002.0
byte sin8s::x3
byte sin8s::x3#0 x3 zp[1]:21 500.5
byte sin8s::x3_6
byte sin8s::x3_6#0 reg byte a 2002.0
byte sin8s::x4
byte sin8s::x4#0 reg byte a 2002.0
byte sin8s::x5
byte sin8s::x5#0 reg byte a 2002.0
byte sin8s::x5_128
byte sin8s::x5_128#0 reg byte a 2002.0
void sin8u_table(byte* sin8u_table::sintab , word sin8u_table::tabsize , byte sin8u_table::min , byte sin8u_table::max)
byte~ sin8u_table::$20 reg byte a 202.0
byte sin8u_table::amplitude
constant byte sin8u_table::amplitude#0 amplitude = sin8u_table::max#0-sin8u_table::min#0
word sin8u_table::i
word sin8u_table::i#1 i zp[2]:6 202.0
word sin8u_table::i#10 i zp[2]:6 9.46875
byte sin8u_table::max
constant byte sin8u_table::max#0 max = $ff
byte sin8u_table::mid
constant byte sin8u_table::mid#0 mid = (byte)sin8u_table::sum#0/2+1
byte sin8u_table::min
constant byte sin8u_table::min#0 min = $a
byte* sin8u_table::sintab
byte* sin8u_table::sintab#1 sintab zp[2]:4 9.619047619047619
byte* sin8u_table::sintab#2 sintab zp[2]:4 25.25
signed byte sin8u_table::sinx
signed byte sin8u_table::sinx#0 sinx zp[1]:18 21.642857142857142
signed word sin8u_table::sinx_sc
signed word sin8u_table::sinx_sc#0 sinx_sc zp[2]:8 20.2
byte sin8u_table::sinx_tr
byte sin8u_table::sinx_tr#0 sinx_tr zp[1]:19 17.823529411764707
word sin8u_table::step
word sin8u_table::step#0 step zp[2]:14 2.2363636363636363
constant byte* sin8u_table::str[6]  = "step:"
constant byte* sin8u_table::str1[6]  = " min:"
constant byte* sin8u_table::str2[6]  = " max:"
constant byte* sin8u_table::str3[7]  = " ampl:"
constant byte* sin8u_table::str4[6]  = " mid:"
constant byte* sin8u_table::str5[4]  = "x: "
constant byte* sin8u_table::str6[7]  = " sin: "
constant byte* sin8u_table::str7[$a]  = " scaled: "
constant byte* sin8u_table::str8[9]  = " trans: "
word sin8u_table::sum
constant word sin8u_table::sum#0 sum = (word)sin8u_table::min#0+sin8u_table::max#0
word sin8u_table::tabsize
word sin8u_table::x
word sin8u_table::x#1 x zp[2]:2 101.0
word sin8u_table::x#10 x zp[2]:2 13.03225806451613

zp[2]:2 [ sin8u_table::x#10 sin8u_table::x#1 ]
zp[2]:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
zp[2]:6 [ memset::dst#2 memset::dst#1 sin8u_table::i#10 sin8u_table::i#1 ]
reg byte x [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
zp[2]:8 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#3 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 mulu8_sel::$0 mulu8_sel::$1 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
zp[2]:10 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ]
zp[2]:12 [ divr16u::dividend#2 divr16u::dividend#0 sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_str::str#10 print_str::str#13 print_str::str#0 ]
zp[2]:14 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
reg byte a [ mul8u::b#2 mul8u::b#0 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
zp[2]:16 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ]
reg byte a [ sin8s::return#2 ]
zp[1]:18 [ sin8u_table::sinx#0 sin8s::isUpper#10 ]
reg byte y [ mul8su::a#0 ]
reg byte a [ sin8u_table::$20 ]
zp[1]:19 [ sin8u_table::sinx_tr#0 mulu8_sel::select#5 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
zp[1]:20 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:21 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:22 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mul8su::$4 ]
reg byte a [ mul8su::$6 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]


FINAL ASSEMBLER
Score: 17565

  // File Comments
// Sine Generator functions using only multiplication, addition and bit shifting
// Uses a single division for converting the wavelength to a reciprocal.
// Generates sine using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
// Uses the approximation sin(x) = x - x^/6 + x^/128
// Optimization possibility: Use symmetries when generating sine tables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sinusgenscale8.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_screen = $400
  .label print_char_cursor = $10
  .label print_line_cursor = $a
.segment Code
  // main
main: {
    .label tabsize = $14
    // print_cls()
    // [1] call print_cls 
    // [5] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // sin8u_table(sintab, tabsize, 10, 255)
    // [3] call sin8u_table 
    // [8] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
    jsr sin8u_table
    // main::@return
    // }
    // [4] return 
    rts
  .segment Data
    sintab: .fill $14, 0
}
.segment Code
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [6] call memset 
    // [67] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [7] return 
    rts
}
  // sin8u_table
// Generate unsigned byte sine table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sine points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zp(4) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .const sum = min+max
    .const mid = sum/2+1
    .label amplitude = max-min
    .label step = $e
    .label sinx = $12
    .label sinx_sc = 8
    .label sinx_tr = $13
    .label sintab = 4
    // Iterate over the table
    .label x = 2
    .label i = 6
    // div16u(PI2_u4f12, tabsize)
    // [9] call div16u 
    // [73] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
    jsr div16u
    // div16u(PI2_u4f12, tabsize)
    // [10] div16u::return#2 = div16u::return#0
    // sin8u_table::@3
    // word step = div16u(PI2_u4f12, tabsize)
    // [11] sin8u_table::step#0 = div16u::return#2
    // print_str("step:")
    // [12] call print_str 
  // u[4.12]
    // [78] phi from sin8u_table::@3 to print_str [phi:sin8u_table::@3->print_str]
    // [78] phi print_char_cursor#112 = print_screen#0 [phi:sin8u_table::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [78] phi print_str::str#13 = sin8u_table::str [phi:sin8u_table::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@4
    // print_uint(step)
    // [13] print_uint::w#1 = sin8u_table::step#0 -- vwuz1=vwuz2 
    lda.z step
    sta.z print_uint.w
    lda.z step+1
    sta.z print_uint.w+1
    // [14] call print_uint 
    // [85] phi from sin8u_table::@4 to print_uint [phi:sin8u_table::@4->print_uint]
    // [85] phi print_char_cursor#105 = print_char_cursor#1 [phi:sin8u_table::@4->print_uint#0] -- register_copy 
    // [85] phi print_uint::w#3 = print_uint::w#1 [phi:sin8u_table::@4->print_uint#1] -- register_copy 
    jsr print_uint
    // [15] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
    // sin8u_table::@5
    // print_str(" min:")
    // [16] call print_str 
    // [78] phi from sin8u_table::@5 to print_str [phi:sin8u_table::@5->print_str]
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@5->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str1 [phi:sin8u_table::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [17] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
    // sin8u_table::@6
    // print_uchar(min)
    // [18] call print_uchar 
    // [91] phi from sin8u_table::@6 to print_uchar [phi:sin8u_table::@6->print_uchar]
    // [91] phi print_char_cursor#106 = print_char_cursor#1 [phi:sin8u_table::@6->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = sin8u_table::min#0 [phi:sin8u_table::@6->print_uchar#1] -- vbuxx=vbuc1 
    ldx #min
    jsr print_uchar
    // [19] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
    // sin8u_table::@7
    // print_str(" max:")
    // [20] call print_str 
    // [78] phi from sin8u_table::@7 to print_str [phi:sin8u_table::@7->print_str]
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@7->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str2 [phi:sin8u_table::@7->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // [21] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
    // sin8u_table::@8
    // print_uchar(max)
    // [22] call print_uchar 
    // [91] phi from sin8u_table::@8 to print_uchar [phi:sin8u_table::@8->print_uchar]
    // [91] phi print_char_cursor#106 = print_char_cursor#1 [phi:sin8u_table::@8->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = sin8u_table::max#0 [phi:sin8u_table::@8->print_uchar#1] -- vbuxx=vbuc1 
    ldx #max
    jsr print_uchar
    // [23] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
    // sin8u_table::@9
    // print_str(" ampl:")
    // [24] call print_str 
    // [78] phi from sin8u_table::@9 to print_str [phi:sin8u_table::@9->print_str]
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@9->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str3 [phi:sin8u_table::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // [25] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
    // sin8u_table::@10
    // print_uchar(amplitude)
    // [26] call print_uchar 
    // [91] phi from sin8u_table::@10 to print_uchar [phi:sin8u_table::@10->print_uchar]
    // [91] phi print_char_cursor#106 = print_char_cursor#1 [phi:sin8u_table::@10->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = sin8u_table::amplitude#0 [phi:sin8u_table::@10->print_uchar#1] -- vbuxx=vbuc1 
    ldx #amplitude
    jsr print_uchar
    // [27] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
    // sin8u_table::@11
    // print_str(" mid:")
    // [28] call print_str 
    // [78] phi from sin8u_table::@11 to print_str [phi:sin8u_table::@11->print_str]
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@11->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str4 [phi:sin8u_table::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // [29] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
    // sin8u_table::@12
    // print_uchar(mid)
    // [30] call print_uchar 
    // [91] phi from sin8u_table::@12 to print_uchar [phi:sin8u_table::@12->print_uchar]
    // [91] phi print_char_cursor#106 = print_char_cursor#1 [phi:sin8u_table::@12->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = sin8u_table::mid#0 [phi:sin8u_table::@12->print_uchar#1] -- vbuxx=vbuc1 
    ldx #mid
    jsr print_uchar
    // [31] phi from sin8u_table::@12 to sin8u_table::@13 [phi:sin8u_table::@12->sin8u_table::@13]
    // sin8u_table::@13
    // print_ln()
    // [32] call print_ln 
    // [99] phi from sin8u_table::@13 to print_ln [phi:sin8u_table::@13->print_ln]
    // [99] phi print_line_cursor#25 = print_screen#0 [phi:sin8u_table::@13->print_ln#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    jsr print_ln
    // [33] phi from sin8u_table::@13 to sin8u_table::@1 [phi:sin8u_table::@13->sin8u_table::@1]
    // [33] phi sin8u_table::sintab#2 = main::sintab [phi:sin8u_table::@13->sin8u_table::@1#0] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta.z sintab
    lda #>main.sintab
    sta.z sintab+1
    // [33] phi sin8u_table::x#10 = 0 [phi:sin8u_table::@13->sin8u_table::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [33] phi sin8u_table::i#10 = 0 [phi:sin8u_table::@13->sin8u_table::@1#2] -- vwuz1=vwuc1 
    sta.z i
    sta.z i+1
  // u[4.12]
    // sin8u_table::@1
  __b1:
    // for( word i=0; i<tabsize; i++)
    // [34] if(sin8u_table::i#10<main::tabsize) goto sin8u_table::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.tabsize
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.tabsize
    bcc __b2
  !:
    // sin8u_table::@return
    // }
    // [35] return 
    rts
    // sin8u_table::@2
  __b2:
    // sin8s(x)
    // [36] sin8s::x#2 = sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [37] call sin8s 
    jsr sin8s
    // [38] sin8s::return#2 = sin8s::return#0
    // sin8u_table::@14
    // signed byte sinx = sin8s(x)
    // [39] sin8u_table::sinx#0 = sin8s::return#2 -- vbsz1=vbsaa 
    sta.z sinx
    // mul8su(sinx, amplitude+1)
    // [40] mul8su::a#0 = sin8u_table::sinx#0 -- vbsyy=vbsz1 
    tay
    // [41] call mul8su 
    jsr mul8su
    // sin8u_table::@15
    // signed word sinx_sc = mul8su(sinx, amplitude+1)
    // [42] sin8u_table::sinx_sc#0 = (signed word)mul8su::m#2
    // BYTE1(sinx_sc)
    // [43] sin8u_table::$20 = > sin8u_table::sinx_sc#0 -- vbuaa=_byte1_vwsz1 
    lda.z sinx_sc+1
    // byte sinx_tr = mid+BYTE1(sinx_sc)
    // [44] sin8u_table::sinx_tr#0 = sin8u_table::mid#0 + sin8u_table::$20 -- vbuz1=vbuc1_plus_vbuaa 
    clc
    adc #mid
    sta.z sinx_tr
    // *sintab++ = sinx_tr
    // [45] *sin8u_table::sintab#2 = sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuz2 
    ldy #0
    sta (sintab),y
    // *sintab++ = sinx_tr;
    // [46] sin8u_table::sintab#1 = ++ sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [47] print_char_cursor#119 = print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_str("x: ")
    // [48] call print_str 
    // [78] phi from sin8u_table::@15 to print_str [phi:sin8u_table::@15->print_str]
    // [78] phi print_char_cursor#112 = print_char_cursor#119 [phi:sin8u_table::@15->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str5 [phi:sin8u_table::@15->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str.str
    lda #>str5
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@16
    // print_uint(x)
    // [49] print_uint::w#2 = sin8u_table::x#10 -- vwuz1=vwuz2 
    lda.z x
    sta.z print_uint.w
    lda.z x+1
    sta.z print_uint.w+1
    // [50] call print_uint 
    // [85] phi from sin8u_table::@16 to print_uint [phi:sin8u_table::@16->print_uint]
    // [85] phi print_char_cursor#105 = print_char_cursor#1 [phi:sin8u_table::@16->print_uint#0] -- register_copy 
    // [85] phi print_uint::w#3 = print_uint::w#2 [phi:sin8u_table::@16->print_uint#1] -- register_copy 
    jsr print_uint
    // [51] phi from sin8u_table::@16 to sin8u_table::@17 [phi:sin8u_table::@16->sin8u_table::@17]
    // sin8u_table::@17
    // print_str(" sin: ")
    // [52] call print_str 
    // [78] phi from sin8u_table::@17 to print_str [phi:sin8u_table::@17->print_str]
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@17->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str6 [phi:sin8u_table::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta.z print_str.str
    lda #>str6
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@18
    // print_schar(sinx)
    // [53] print_schar::b#1 = sin8u_table::sinx#0 -- vbsxx=vbsz1 
    ldx.z sinx
    // [54] call print_schar 
    jsr print_schar
    // [55] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
    // sin8u_table::@19
    // print_str(" scaled: ")
    // [56] call print_str 
    // [78] phi from sin8u_table::@19 to print_str [phi:sin8u_table::@19->print_str]
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@19->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str7 [phi:sin8u_table::@19->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta.z print_str.str
    lda #>str7
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@20
    // print_sint(sinx_sc)
    // [57] print_sint::w#1 = sin8u_table::sinx_sc#0 -- vwsz1=vwsz2 
    lda.z sinx_sc
    sta.z print_sint.w
    lda.z sinx_sc+1
    sta.z print_sint.w+1
    // [58] call print_sint 
    jsr print_sint
    // [59] phi from sin8u_table::@20 to sin8u_table::@21 [phi:sin8u_table::@20->sin8u_table::@21]
    // sin8u_table::@21
    // print_str(" trans: ")
    // [60] call print_str 
    // [78] phi from sin8u_table::@21 to print_str [phi:sin8u_table::@21->print_str]
    // [78] phi print_char_cursor#112 = print_char_cursor#18 [phi:sin8u_table::@21->print_str#0] -- register_copy 
    // [78] phi print_str::str#13 = sin8u_table::str8 [phi:sin8u_table::@21->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta.z print_str.str
    lda #>str8
    sta.z print_str.str+1
    jsr print_str
    // sin8u_table::@22
    // print_uchar(sinx_tr)
    // [61] print_uchar::b#7 = sin8u_table::sinx_tr#0 -- vbuxx=vbuz1 
    ldx.z sinx_tr
    // [62] call print_uchar 
    // [91] phi from sin8u_table::@22 to print_uchar [phi:sin8u_table::@22->print_uchar]
    // [91] phi print_char_cursor#106 = print_char_cursor#1 [phi:sin8u_table::@22->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = print_uchar::b#7 [phi:sin8u_table::@22->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [63] phi from sin8u_table::@22 to sin8u_table::@23 [phi:sin8u_table::@22->sin8u_table::@23]
    // sin8u_table::@23
    // print_ln()
    // [64] call print_ln 
    // [99] phi from sin8u_table::@23 to print_ln [phi:sin8u_table::@23->print_ln]
    // [99] phi print_line_cursor#25 = print_line_cursor#0 [phi:sin8u_table::@23->print_ln#0] -- register_copy 
    jsr print_ln
    // sin8u_table::@24
    // x = x + step
    // [65] sin8u_table::x#1 = sin8u_table::x#10 + sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // for( word i=0; i<tabsize; i++)
    // [66] sin8u_table::i#1 = ++ sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [33] phi from sin8u_table::@24 to sin8u_table::@1 [phi:sin8u_table::@24->sin8u_table::@1]
    // [33] phi sin8u_table::sintab#2 = sin8u_table::sintab#1 [phi:sin8u_table::@24->sin8u_table::@1#0] -- register_copy 
    // [33] phi sin8u_table::x#10 = sin8u_table::x#1 [phi:sin8u_table::@24->sin8u_table::@1#1] -- register_copy 
    // [33] phi sin8u_table::i#10 = sin8u_table::i#1 [phi:sin8u_table::@24->sin8u_table::@1#2] -- register_copy 
    jmp __b1
  .segment Data
    str: .text "step:"
    .byte 0
    str1: .text " min:"
    .byte 0
    str2: .text " max:"
    .byte 0
    str3: .text " ampl:"
    .byte 0
    str4: .text " mid:"
    .byte 0
    str5: .text "x: "
    .byte 0
    str6: .text " sin: "
    .byte 0
    str7: .text " scaled: "
    .byte 0
    str8: .text " trans: "
    .byte 0
}
.segment Code
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 6
    // [68] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [68] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [69] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [70] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [71] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [72] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [68] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [68] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $e
    // divr16u(dividend, divisor, 0)
    // [74] call divr16u 
    // [177] phi from div16u to divr16u [phi:div16u->divr16u]
    jsr divr16u
    // divr16u(dividend, divisor, 0)
    // [75] divr16u::return#2 = divr16u::return#0
    // div16u::@1
    // [76] div16u::return#0 = divr16u::return#2
    // div16u::@return
    // }
    // [77] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($c) str)
print_str: {
    .label str = $c
    // [79] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [79] phi print_char_cursor#1 = print_char_cursor#112 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [79] phi print_str::str#10 = print_str::str#13 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [80] if(0!=*print_str::str#10) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [81] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [82] print_char::ch#0 = *print_str::str#10 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [83] call print_char 
    // [194] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [194] phi print_char_cursor#67 = print_char_cursor#1 [phi:print_str::@2->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [84] print_str::str#0 = ++ print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($c) w)
print_uint: {
    .label w = $c
    // print_uchar(BYTE1(w))
    // [86] print_uchar::b#1 = > print_uint::w#3 -- vbuxx=_byte1_vwuz1 
    ldx.z w+1
    // [87] call print_uchar 
    // [91] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [91] phi print_char_cursor#106 = print_char_cursor#105 [phi:print_uint->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(BYTE0(w))
    // [88] print_uchar::b#2 = < print_uint::w#3 -- vbuxx=_byte0_vwuz1 
    ldx.z w
    // [89] call print_uchar 
    // [91] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [91] phi print_char_cursor#106 = print_char_cursor#18 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@return
    // }
    // [90] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [92] print_uchar::$0 = print_uchar::b#8 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [93] print_char::ch#5 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [94] call print_char 
  // Table of hexadecimal digits
    // [194] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [194] phi print_char_cursor#67 = print_char_cursor#106 [phi:print_uchar->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [95] print_uchar::$2 = print_uchar::b#8 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [96] print_char::ch#6 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [97] call print_char 
    // [194] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [194] phi print_char_cursor#67 = print_char_cursor#18 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [98] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [100] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [100] phi print_line_cursor#13 = print_line_cursor#25 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [101] print_line_cursor#0 = print_line_cursor#13 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [102] if(print_line_cursor#0<print_char_cursor#18) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [103] return 
    rts
}
  // sin8s
// Calculate signed char sine sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zp($c) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $c
    .label x = $c
    .label x1 = $14
    .label x3 = $15
    .label usinx = $16
    // Move x1 into the range 0-PI/2 using sine mirror symmetries
    .label isUpper = $12
    // if(x >= PI_u4f12 )
    // [104] if(sin8s::x#2<PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b5
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b5
  !:
    // sin8s::@5
    // x = x - PI_u4f12
    // [105] sin8s::x#0 = sin8s::x#2 - PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [106] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
    // [106] phi sin8s::isUpper#10 = 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [106] phi sin8s::x#4 = sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [106] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b5:
    // [106] phi sin8s::isUpper#10 = 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [106] phi sin8s::x#4 = sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    // sin8s::@1
  __b1:
    // if(x >= PI_HALF_u4f12 )
    // [107] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2
  !:
    // sin8s::@6
    // x = PI_u4f12 - x
    // [108] sin8s::x#1 = PI_u4f12 - sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [109] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
    // [109] phi sin8s::x#6 = sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    // sin8s::@2
  __b2:
    // x<<3
    // [110] sin8s::$4 = sin8s::x#6 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // char x1 = BYTE1(x<<3)
    // [111] sin8s::x1#0 = > sin8s::$4 -- vbuz1=_byte1_vwuz2 
    lda.z __4+1
    sta.z x1
    // mulu8_sel(x1, x1, 0)
    // [112] mulu8_sel::v1#0 = sin8s::x1#0 -- vbuxx=vbuz1 
    tax
    // [113] mulu8_sel::v2#0 = sin8s::x1#0 -- vbuyy=vbuz1 
    tay
    // [114] call mulu8_sel 
    // [198] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
    // [198] phi mulu8_sel::select#5 = 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [198] phi mulu8_sel::v2#5 = mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [198] phi mulu8_sel::v1#5 = mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x1, x1, 0)
    // [115] mulu8_sel::return#0 = mulu8_sel::return#12
    // sin8s::@9
    // char x2 = mulu8_sel(x1, x1, 0)
    // [116] sin8s::x2#0 = mulu8_sel::return#0
    // mulu8_sel(x2, x1, 1)
    // [117] mulu8_sel::v1#1 = sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [118] mulu8_sel::v2#1 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [119] call mulu8_sel 
    // [198] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
    // [198] phi mulu8_sel::select#5 = 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [198] phi mulu8_sel::v2#5 = mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [198] phi mulu8_sel::v1#5 = mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x2, x1, 1)
    // [120] mulu8_sel::return#1 = mulu8_sel::return#12
    // sin8s::@10
    // char x3 = mulu8_sel(x2, x1, 1)
    // [121] sin8s::x3#0 = mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // mulu8_sel(x3, DIV_6, 1)
    // [122] mulu8_sel::v1#2 = sin8s::x3#0 -- vbuxx=vbuz1 
    tax
    // [123] call mulu8_sel 
    // [198] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
    // [198] phi mulu8_sel::select#5 = 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [198] phi mulu8_sel::v2#5 = sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [198] phi mulu8_sel::v1#5 = mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, DIV_6, 1)
    // [124] mulu8_sel::return#2 = mulu8_sel::return#12
    // sin8s::@11
    // char x3_6 = mulu8_sel(x3, DIV_6, 1)
    // [125] sin8s::x3_6#0 = mulu8_sel::return#2
    // char usinx = x1 - x3_6
    // [126] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // mulu8_sel(x3, x1, 0)
    // [127] mulu8_sel::v1#3 = sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [128] mulu8_sel::v2#3 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [129] call mulu8_sel 
    // [198] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
    // [198] phi mulu8_sel::select#5 = 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [198] phi mulu8_sel::v2#5 = mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [198] phi mulu8_sel::v1#5 = mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, x1, 0)
    // [130] mulu8_sel::return#10 = mulu8_sel::return#12
    // sin8s::@12
    // char x4 = mulu8_sel(x3, x1, 0)
    // [131] sin8s::x4#0 = mulu8_sel::return#10
    // mulu8_sel(x4, x1, 0)
    // [132] mulu8_sel::v1#4 = sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [133] mulu8_sel::v2#4 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [134] call mulu8_sel 
    // [198] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
    // [198] phi mulu8_sel::select#5 = 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [198] phi mulu8_sel::v2#5 = mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [198] phi mulu8_sel::v1#5 = mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x4, x1, 0)
    // [135] mulu8_sel::return#11 = mulu8_sel::return#12
    // sin8s::@13
    // char x5 = mulu8_sel(x4, x1, 0)
    // [136] sin8s::x5#0 = mulu8_sel::return#11
    // char x5_128 = x5>>4
    // [137] sin8s::x5_128#0 = sin8s::x5#0 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // usinx = usinx + x5_128
    // [138] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // if(usinx>=128)
    // [139] if(sin8s::usinx#1<$80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3
    // sin8s::@7
    // usinx--;
    // [140] sin8s::usinx#2 = -- sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [141] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
    // [141] phi sin8s::usinx#4 = sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    // sin8s::@3
  __b3:
    // if(isUpper!=0)
    // [142] if(sin8s::isUpper#10==0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    beq __b14
    // sin8s::@8
    // sinx = -(signed char)usinx
    // [143] sin8s::sinx#1 = - (signed byte)sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [144] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
    // [144] phi sin8s::return#0 = sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    // sin8s::@4
    // sin8s::@return
    // }
    // [145] return 
    rts
    // sin8s::@14
  __b14:
    // [146] sin8s::return#5 = (signed byte)sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    rts
}
  // mul8su
// Multiply a signed char and an unsigned char (into a signed int)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte register(Y) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label m = 8
    // mul8u((char)a, (char) b)
    // [147] mul8u::a#2 = (byte)mul8su::a#0 -- vbuxx=vbuyy 
    tya
    tax
    // [148] call mul8u 
    // [207] phi from mul8su to mul8u [phi:mul8su->mul8u]
    // [207] phi mul8u::a#6 = mul8u::a#2 [phi:mul8su->mul8u#0] -- register_copy 
    // [207] phi mul8u::b#2 = mul8su::b#0 [phi:mul8su->mul8u#1] -- vbuaa=vbuc1 
    lda #b
    jsr mul8u
    // mul8u((char)a, (char) b)
    // [149] mul8u::return#3 = mul8u::res#2
    // mul8su::@3
    // unsigned int m = mul8u((char)a, (char) b)
    // [150] mul8su::m#0 = mul8u::return#3
    // if(a<0)
    // [151] if(mul8su::a#0>=0) goto mul8su::@1 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b1
    // mul8su::@2
    // BYTE1(m)
    // [152] mul8su::$4 = > mul8su::m#0 -- vbuaa=_byte1_vwuz1 
    lda.z m+1
    // BYTE1(m) = BYTE1(m)-(char)b
    // [153] mul8su::$6 = mul8su::$4 - mul8su::b#0 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #b
    // [154] mul8su::m#1 = mul8su::m#0 byte1= mul8su::$6 -- vwuz1=vwuz1_setbyte1_vbuaa 
    sta.z m+1
    // [155] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
    // [155] phi mul8su::m#2 = mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
    // mul8su::@1
  __b1:
    // mul8su::@return
    // }
    // [156] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // if(b<0)
    // [157] if(print_schar::b#1<0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    // [158] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
    // print_schar::@3
    // print_char(' ')
    // [159] call print_char 
    // [194] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
    // [194] phi print_char_cursor#67 = print_char_cursor#1 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [160] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
    // [160] phi print_schar::b#4 = print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    // print_schar::@2
  __b2:
    // print_uchar((char)b)
    // [161] print_uchar::b#0 = (byte)print_schar::b#4
    // [162] call print_uchar 
    // [91] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
    // [91] phi print_char_cursor#106 = print_char_cursor#18 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [91] phi print_uchar::b#8 = print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_schar::@return
    // }
    // [163] return 
    rts
    // [164] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
    // print_schar::@1
  __b1:
    // print_char('-')
    // [165] call print_char 
    // [194] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
    // [194] phi print_char_cursor#67 = print_char_cursor#1 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_schar::@4
    // b = -b
    // [166] print_schar::b#0 = - print_schar::b#1 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp($c) w)
print_sint: {
    .label w = $c
    // if(w<0)
    // [167] if(print_sint::w#1<0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [168] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
    // print_sint::@3
    // print_char(' ')
    // [169] call print_char 
    // [194] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
    // [194] phi print_char_cursor#67 = print_char_cursor#1 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [170] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
    // [170] phi print_sint::w#4 = print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    // print_sint::@2
  __b2:
    // print_uint((unsigned int)w)
    // [171] print_uint::w#0 = (word)print_sint::w#4
    // [172] call print_uint 
    // [85] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
    // [85] phi print_char_cursor#105 = print_char_cursor#18 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [85] phi print_uint::w#3 = print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    // print_sint::@return
    // }
    // [173] return 
    rts
    // [174] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
    // print_sint::@1
  __b1:
    // print_char('-')
    // [175] call print_char 
    // [194] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
    // [194] phi print_char_cursor#67 = print_char_cursor#1 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [194] phi print_char::ch#7 = '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sint::@4
    // w = -w
    // [176] print_sint::w#0 = - print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($c) dividend, word zp($a) rem)
divr16u: {
    .label rem = $a
    .label dividend = $c
    .label quotient = $e
    .label return = $e
    // [178] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [178] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [178] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [178] phi divr16u::dividend#2 = PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [178] phi divr16u::rem#4 = 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    txa
    sta.z rem
    sta.z rem+1
    // [178] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [178] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [178] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [178] phi divr16u::dividend#2 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [178] phi divr16u::rem#4 = divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [179] divr16u::rem#0 = divr16u::rem#4 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // BYTE1(dividend)
    // [180] divr16u::$1 = > divr16u::dividend#2 -- vbuaa=_byte1_vwuz1 
    lda.z dividend+1
    // BYTE1(dividend) & $80
    // [181] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (BYTE1(dividend) & $80) != 0 )
    // [182] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [183] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [184] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [184] phi divr16u::rem#5 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [185] divr16u::dividend#0 = divr16u::dividend#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [186] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [187] if(divr16u::rem#5<main::tabsize) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.tabsize
    bcc __b3
    bne !+
    lda.z rem
    cmp #<main.tabsize
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [188] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [189] divr16u::rem#2 = divr16u::rem#5 - main::tabsize -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.tabsize
    sta.z rem
    lda.z rem+1
    sbc #>main.tabsize
    sta.z rem+1
    // [190] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [190] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [190] phi divr16u::rem#9 = divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [191] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [192] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@return
    // }
    // [193] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [195] *print_char_cursor#67 = print_char::ch#7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [196] print_char_cursor#18 = ++ print_char_cursor#67 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [197] return 
    rts
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zp($13) select)
mulu8_sel: {
    .label __0 = 8
    .label __1 = 8
    .label select = $13
    // mul8u(v1, v2)
    // [199] mul8u::a#0 = mulu8_sel::v1#5
    // [200] mul8u::b#0 = mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [201] call mul8u 
    // [207] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
    // [207] phi mul8u::a#6 = mul8u::a#0 [phi:mulu8_sel->mul8u#0] -- register_copy 
    // [207] phi mul8u::b#2 = mul8u::b#0 [phi:mulu8_sel->mul8u#1] -- register_copy 
    jsr mul8u
    // mul8u(v1, v2)
    // [202] mul8u::return#0 = mul8u::res#2
    // mulu8_sel::@1
    // [203] mulu8_sel::$0 = mul8u::return#0
    // mul8u(v1, v2)<<select
    // [204] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // BYTE1(mul8u(v1, v2)<<select)
    // [205] mulu8_sel::return#12 = > mulu8_sel::$1 -- vbuaa=_byte1_vwuz1 
    lda.z __1+1
    // mulu8_sel::@return
    // }
    // [206] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label return = 8
    .label mb = $10
    .label res = 8
    // unsigned int mb = b
    // [208] mul8u::mb#0 = (word)mul8u::b#2 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [209] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [209] phi mul8u::mb#2 = mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [209] phi mul8u::res#2 = 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    sta.z res
    sta.z res+1
    // [209] phi mul8u::a#3 = mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [210] if(mul8u::a#3!=0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [211] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [212] mul8u::$1 = mul8u::a#3 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [213] if(mul8u::$1==0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [214] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [215] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [215] phi mul8u::res#6 = mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [216] mul8u::a#1 = mul8u::a#3 >> 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [217] mul8u::mb#1 = mul8u::mb#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [209] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [209] phi mul8u::mb#2 = mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [209] phi mul8u::res#2 = mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [209] phi mul8u::a#3 = mul8u::a#1 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  print_hextab: .text "0123456789abcdef"

