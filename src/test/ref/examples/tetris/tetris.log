Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) 55296
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56320
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) 56321
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) DARK_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) LIGHT_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 15
  to:@4
fill: scope:[fill]  from render_init render_init::@7
  (byte) fill::val#3 ← phi( render_init/(byte) fill::val#0 render_init::@7/(byte) fill::val#1 )
  (word) fill::size#2 ← phi( render_init/(word) fill::size#0 render_init::@7/(word) fill::size#1 )
  (byte*) fill::start#2 ← phi( render_init/(byte*) fill::start#0 render_init::@7/(byte*) fill::start#1 )
  (byte*~) fill::$0 ← (byte*) fill::start#2 + (word) fill::size#2
  (byte*) fill::end#0 ← (byte*~) fill::$0
  (byte*) fill::addr#0 ← (byte*) fill::start#2
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  (byte*) fill::end#1 ← phi( fill/(byte*) fill::end#0 fill::@1/(byte*) fill::end#1 )
  (byte*) fill::addr#2 ← phi( fill/(byte*) fill::addr#0 fill::@1/(byte*) fill::addr#1 )
  (byte) fill::val#2 ← phi( fill/(byte) fill::val#3 fill::@1/(byte) fill::val#2 )
  *((byte*) fill::addr#2) ← (byte) fill::val#2
  (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  (bool~) fill::$1 ← (byte*) fill::addr#1 != (byte*) fill::end#1
  if((bool~) fill::$1) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  return 
  to:@return
@4: scope:[]  from @begin
  (byte) KEY_Z#0 ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) KEY_LSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) KEY_X#0 ← (byte/signed byte/word/signed word/dword/signed dword) 23
  (byte) KEY_DOT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 44
  (byte) KEY_COMMA#0 ← (byte/signed byte/word/signed word/dword/signed dword) 47
  (byte) KEY_RSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 52
  (byte) KEY_CTRL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 58
  (byte) KEY_SPACE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 60
  (byte) KEY_COMMODORE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 61
  (byte[8]) keyboard_matrix_row_bitmask#0 ← { (byte/word/signed word/dword/signed dword) 254, (byte/word/signed word/dword/signed dword) 253, (byte/word/signed word/dword/signed dword) 251, (byte/word/signed word/dword/signed dword) 247, (byte/word/signed word/dword/signed dword) 239, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 191, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (byte[8]) keyboard_matrix_col_bitmask#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 16, (byte/signed byte/word/signed word/dword/signed dword) 32, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/word/signed word/dword/signed dword) 128 }
  to:@8
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@1
  (byte) keyboard_matrix_read::rowid#1 ← phi( keyboard_event_scan::@1/(byte) keyboard_matrix_read::rowid#0 )
  *((byte*) CIA1_PORT_A#0) ← *((byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#1)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*) CIA1_PORT_B#0)
  (byte) keyboard_matrix_read::row_pressed_bits#0 ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return#0 ← (byte) keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  (byte) keyboard_matrix_read::return#3 ← phi( keyboard_matrix_read/(byte) keyboard_matrix_read::return#0 )
  (byte) keyboard_matrix_read::return#1 ← (byte) keyboard_matrix_read::return#3
  return 
  to:@return
@8: scope:[]  from @4
  (byte[8]) keyboard_events#0 ← { fill( 8, 0) }
  (byte) keyboard_events_size#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) keyboard_modifiers#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) KEY_MODIFIER_LSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) KEY_MODIFIER_RSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) KEY_MODIFIER_CTRL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) KEY_MODIFIER_COMMODORE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte[8]) keyboard_scan_values#0 ← { fill( 8, 0) }
  to:@11
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@9
  (byte) keyboard_events_size#54 ← phi( main::@9/(byte) keyboard_events_size#26 )
  (byte) keyboard_event_scan::keycode#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) keyboard_event_scan::row#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@3
  (byte) keyboard_events_size#45 ← phi( keyboard_event_scan/(byte) keyboard_events_size#54 keyboard_event_scan::@3/(byte) keyboard_events_size#55 )
  (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::keycode#0 keyboard_event_scan::@3/(byte) keyboard_event_scan::keycode#14 )
  (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::row#0 keyboard_event_scan::@3/(byte) keyboard_event_scan::row#1 )
  (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  call keyboard_matrix_read 
  (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#1
  to:keyboard_event_scan::@25
keyboard_event_scan::@25: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  (byte) keyboard_events_size#36 ← phi( keyboard_event_scan::@1/(byte) keyboard_events_size#45 )
  (byte) keyboard_event_scan::keycode#7 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_scan::keycode#11 )
  (byte) keyboard_event_scan::row#3 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_scan::row#2 )
  (byte) keyboard_matrix_read::return#4 ← phi( keyboard_event_scan::@1/(byte) keyboard_matrix_read::return#2 )
  (byte~) keyboard_event_scan::$0 ← (byte) keyboard_matrix_read::return#4
  (byte) keyboard_event_scan::row_scan#0 ← (byte~) keyboard_event_scan::$0
  (bool~) keyboard_event_scan::$1 ← (byte) keyboard_event_scan::row_scan#0 != *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#3)
  if((bool~) keyboard_event_scan::$1) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@13
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  (byte) keyboard_events_size#29 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#36 )
  (byte) keyboard_event_scan::keycode#12 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#7 )
  (byte) keyboard_event_scan::row#8 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::row_scan#4 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row_scan#0 )
  (byte) keyboard_event_scan::col#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:keyboard_event_scan::@4
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  (byte) keyboard_events_size#61 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#36 )
  (byte) keyboard_event_scan::row#7 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::keycode#3 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#7 )
  (byte/signed word/word/dword/signed dword~) keyboard_event_scan::$2 ← (byte) keyboard_event_scan::keycode#3 + (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) keyboard_event_scan::keycode#1 ← (byte/signed word/word/dword/signed dword~) keyboard_event_scan::$2
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@13 keyboard_event_scan::@19
  (byte) keyboard_events_size#55 ← phi( keyboard_event_scan::@13/(byte) keyboard_events_size#61 keyboard_event_scan::@19/(byte) keyboard_events_size#62 )
  (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#1 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#15 )
  (byte) keyboard_event_scan::row#4 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::row#7 keyboard_event_scan::@19/(byte) keyboard_event_scan::row#6 )
  (byte) keyboard_event_scan::row#1 ← (byte) keyboard_event_scan::row#4 + rangenext(0,7)
  (bool~) keyboard_event_scan::$13 ← (byte) keyboard_event_scan::row#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$13) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@20
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@2 keyboard_event_scan::@5
  (byte) keyboard_events_size#21 ← phi( keyboard_event_scan::@2/(byte) keyboard_events_size#29 keyboard_event_scan::@5/(byte) keyboard_events_size#30 )
  (byte) keyboard_event_scan::keycode#8 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_scan::keycode#12 keyboard_event_scan::@5/(byte) keyboard_event_scan::keycode#2 )
  (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_scan::col#0 keyboard_event_scan::@5/(byte) keyboard_event_scan::col#1 )
  (byte) keyboard_event_scan::row#5 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_scan::row#8 keyboard_event_scan::@5/(byte) keyboard_event_scan::row#9 )
  (byte) keyboard_event_scan::row_scan#1 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_scan::row_scan#4 keyboard_event_scan::@5/(byte) keyboard_event_scan::row_scan#5 )
  (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#1 ^ *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#5)
  (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  (bool~) keyboard_event_scan::$5 ← (byte~) keyboard_event_scan::$4 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$6 ← ! (bool~) keyboard_event_scan::$5
  if((bool~) keyboard_event_scan::$6) goto keyboard_event_scan::@5
  to:keyboard_event_scan::@15
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@6 keyboard_event_scan::@7
  (byte) keyboard_events_size#30 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#2 keyboard_event_scan::@4/(byte) keyboard_events_size#21 keyboard_event_scan::@6/(byte) keyboard_events_size#37 keyboard_event_scan::@7/(byte) keyboard_events_size#1 )
  (byte) keyboard_event_scan::row#9 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row#10 keyboard_event_scan::@4/(byte) keyboard_event_scan::row#5 keyboard_event_scan::@6/(byte) keyboard_event_scan::row#11 keyboard_event_scan::@7/(byte) keyboard_event_scan::row#12 )
  (byte) keyboard_event_scan::row_scan#5 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row_scan#7 keyboard_event_scan::@4/(byte) keyboard_event_scan::row_scan#1 keyboard_event_scan::@6/(byte) keyboard_event_scan::row_scan#8 keyboard_event_scan::@7/(byte) keyboard_event_scan::row_scan#9 )
  (byte) keyboard_event_scan::col#3 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::col#5 keyboard_event_scan::@4/(byte) keyboard_event_scan::col#2 keyboard_event_scan::@6/(byte) keyboard_event_scan::col#6 keyboard_event_scan::@7/(byte) keyboard_event_scan::col#7 )
  (byte) keyboard_event_scan::keycode#4 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::keycode#6 keyboard_event_scan::@4/(byte) keyboard_event_scan::keycode#8 keyboard_event_scan::@6/(byte) keyboard_event_scan::keycode#9 keyboard_event_scan::@7/(byte) keyboard_event_scan::keycode#5 )
  (byte) keyboard_event_scan::keycode#2 ← ++ (byte) keyboard_event_scan::keycode#4
  (byte) keyboard_event_scan::col#1 ← (byte) keyboard_event_scan::col#3 + rangenext(0,7)
  (bool~) keyboard_event_scan::$12 ← (byte) keyboard_event_scan::col#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$12) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@19
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@4
  (byte) keyboard_event_scan::row#13 ← phi( keyboard_event_scan::@4/(byte) keyboard_event_scan::row#5 )
  (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@4/(byte) keyboard_event_scan::keycode#8 )
  (byte) keyboard_event_scan::col#8 ← phi( keyboard_event_scan::@4/(byte) keyboard_event_scan::col#2 )
  (byte) keyboard_event_scan::row_scan#6 ← phi( keyboard_event_scan::@4/(byte) keyboard_event_scan::row_scan#1 )
  (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@4/(byte) keyboard_events_size#21 )
  (bool~) keyboard_event_scan::$7 ← (byte) keyboard_events_size#10 != (byte/signed byte/word/signed word/dword/signed dword) 8
  (bool~) keyboard_event_scan::$8 ← ! (bool~) keyboard_event_scan::$7
  if((bool~) keyboard_event_scan::$8) goto keyboard_event_scan::@6
  to:keyboard_event_scan::@16
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@15
  (byte) keyboard_events_size#37 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#10 )
  (byte) keyboard_event_scan::row#11 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#8 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::row_scan#6 )
  (byte) keyboard_event_scan::col#6 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::col#8 )
  (byte) keyboard_event_scan::keycode#9 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#13 )
  to:keyboard_event_scan::@5
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@15
  (byte) keyboard_event_scan::row#14 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_events_size#22 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#10 )
  (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#13 )
  (byte) keyboard_event_scan::col#4 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::col#8 )
  (byte) keyboard_event_scan::row_scan#2 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::row_scan#6 )
  (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_scan::row_scan#2 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#4)
  (byte) keyboard_event_scan::event_type#0 ← (byte~) keyboard_event_scan::$9
  (bool~) keyboard_event_scan::$10 ← (byte) keyboard_event_scan::event_type#0 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) keyboard_event_scan::$10) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  (byte) keyboard_event_scan::row#12 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row#14 )
  (byte) keyboard_event_scan::row_scan#9 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#7 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#11 ← phi( keyboard_event_scan::@16/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_scan::keycode#5 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#10 )
  (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#5 | (byte/signed byte/word/signed word/dword/signed dword) 64
  *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#11) ← (byte/word/dword~) keyboard_event_scan::$11
  (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#11
  to:keyboard_event_scan::@5
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  (byte) keyboard_event_scan::row#10 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row#14 )
  (byte) keyboard_event_scan::row_scan#7 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#5 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#12 ← phi( keyboard_event_scan::@16/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_scan::keycode#6 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#10 )
  *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#12) ← (byte) keyboard_event_scan::keycode#6
  (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#12
  to:keyboard_event_scan::@5
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@5
  (byte) keyboard_events_size#62 ← phi( keyboard_event_scan::@5/(byte) keyboard_events_size#30 )
  (byte) keyboard_event_scan::keycode#15 ← phi( keyboard_event_scan::@5/(byte) keyboard_event_scan::keycode#2 )
  (byte) keyboard_event_scan::row#6 ← phi( keyboard_event_scan::@5/(byte) keyboard_event_scan::row#9 )
  (byte) keyboard_event_scan::row_scan#3 ← phi( keyboard_event_scan::@5/(byte) keyboard_event_scan::row_scan#5 )
  *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#6) ← (byte) keyboard_event_scan::row_scan#3
  to:keyboard_event_scan::@3
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  (byte) keyboard_events_size#71 ← phi( keyboard_event_scan::@3/(byte) keyboard_events_size#55 )
  (byte) keyboard_modifiers#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) keyboard_event_pressed::keycode#0 ← (byte) KEY_LSHIFT#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@26
keyboard_event_scan::@26: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  (byte) keyboard_events_size#69 ← phi( keyboard_event_scan::@20/(byte) keyboard_events_size#71 )
  (byte) keyboard_modifiers#18 ← phi( keyboard_event_scan::@20/(byte) keyboard_modifiers#1 )
  (byte) keyboard_event_pressed::return#7 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_pressed::return#0 )
  (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#7
  (bool~) keyboard_event_scan::$15 ← (byte~) keyboard_event_scan::$14 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$16 ← ! (bool~) keyboard_event_scan::$15
  if((bool~) keyboard_event_scan::$16) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@21
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@26
  (byte) keyboard_events_size#66 ← phi( keyboard_event_scan::@21/(byte) keyboard_events_size#68 keyboard_event_scan::@26/(byte) keyboard_events_size#69 )
  (byte) keyboard_modifiers#26 ← phi( keyboard_event_scan::@21/(byte) keyboard_modifiers#2 keyboard_event_scan::@26/(byte) keyboard_modifiers#18 )
  (byte) keyboard_event_pressed::keycode#1 ← (byte) KEY_RSHIFT#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@27
keyboard_event_scan::@27: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  (byte) keyboard_events_size#64 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#66 )
  (byte) keyboard_modifiers#19 ← phi( keyboard_event_scan::@9/(byte) keyboard_modifiers#26 )
  (byte) keyboard_event_pressed::return#8 ← phi( keyboard_event_scan::@9/(byte) keyboard_event_pressed::return#1 )
  (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#8
  (bool~) keyboard_event_scan::$19 ← (byte~) keyboard_event_scan::$18 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$20 ← ! (bool~) keyboard_event_scan::$19
  if((bool~) keyboard_event_scan::$20) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@22
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@26
  (byte) keyboard_events_size#68 ← phi( keyboard_event_scan::@26/(byte) keyboard_events_size#69 )
  (byte) keyboard_modifiers#10 ← phi( keyboard_event_scan::@26/(byte) keyboard_modifiers#18 )
  (byte~) keyboard_event_scan::$17 ← (byte) keyboard_modifiers#10 | (byte) KEY_MODIFIER_LSHIFT#0
  (byte) keyboard_modifiers#2 ← (byte~) keyboard_event_scan::$17
  to:keyboard_event_scan::@9
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@27
  (byte) keyboard_events_size#56 ← phi( keyboard_event_scan::@22/(byte) keyboard_events_size#63 keyboard_event_scan::@27/(byte) keyboard_events_size#64 )
  (byte) keyboard_modifiers#27 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#3 keyboard_event_scan::@27/(byte) keyboard_modifiers#19 )
  (byte) keyboard_event_pressed::keycode#2 ← (byte) KEY_CTRL#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@28
keyboard_event_scan::@28: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  (byte) keyboard_events_size#47 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#56 )
  (byte) keyboard_modifiers#20 ← phi( keyboard_event_scan::@10/(byte) keyboard_modifiers#27 )
  (byte) keyboard_event_pressed::return#9 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_pressed::return#2 )
  (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#9
  (bool~) keyboard_event_scan::$23 ← (byte~) keyboard_event_scan::$22 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$24 ← ! (bool~) keyboard_event_scan::$23
  if((bool~) keyboard_event_scan::$24) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@23
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@27
  (byte) keyboard_events_size#63 ← phi( keyboard_event_scan::@27/(byte) keyboard_events_size#64 )
  (byte) keyboard_modifiers#11 ← phi( keyboard_event_scan::@27/(byte) keyboard_modifiers#19 )
  (byte~) keyboard_event_scan::$21 ← (byte) keyboard_modifiers#11 | (byte) KEY_MODIFIER_RSHIFT#0
  (byte) keyboard_modifiers#3 ← (byte~) keyboard_event_scan::$21
  to:keyboard_event_scan::@10
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@28
  (byte) keyboard_events_size#38 ← phi( keyboard_event_scan::@23/(byte) keyboard_events_size#46 keyboard_event_scan::@28/(byte) keyboard_events_size#47 )
  (byte) keyboard_modifiers#28 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#4 keyboard_event_scan::@28/(byte) keyboard_modifiers#20 )
  (byte) keyboard_event_pressed::keycode#3 ← (byte) KEY_COMMODORE#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@29
keyboard_event_scan::@29: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  (byte) keyboard_events_size#31 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#38 )
  (byte) keyboard_modifiers#21 ← phi( keyboard_event_scan::@11/(byte) keyboard_modifiers#28 )
  (byte) keyboard_event_pressed::return#10 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_pressed::return#3 )
  (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10
  (bool~) keyboard_event_scan::$27 ← (byte~) keyboard_event_scan::$26 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$28 ← ! (bool~) keyboard_event_scan::$27
  if((bool~) keyboard_event_scan::$28) goto keyboard_event_scan::@12
  to:keyboard_event_scan::@24
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@28
  (byte) keyboard_events_size#46 ← phi( keyboard_event_scan::@28/(byte) keyboard_events_size#47 )
  (byte) keyboard_modifiers#12 ← phi( keyboard_event_scan::@28/(byte) keyboard_modifiers#20 )
  (byte~) keyboard_event_scan::$25 ← (byte) keyboard_modifiers#12 | (byte) KEY_MODIFIER_CTRL#0
  (byte) keyboard_modifiers#4 ← (byte~) keyboard_event_scan::$25
  to:keyboard_event_scan::@11
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  (byte) keyboard_modifiers#22 ← phi( keyboard_event_scan::@29/(byte) keyboard_modifiers#21 )
  (byte) keyboard_events_size#23 ← phi( keyboard_event_scan::@29/(byte) keyboard_events_size#31 )
  to:keyboard_event_scan::@return
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  (byte) keyboard_events_size#24 ← phi( keyboard_event_scan::@29/(byte) keyboard_events_size#31 )
  (byte) keyboard_modifiers#13 ← phi( keyboard_event_scan::@29/(byte) keyboard_modifiers#21 )
  (byte~) keyboard_event_scan::$29 ← (byte) keyboard_modifiers#13 | (byte) KEY_MODIFIER_COMMODORE#0
  (byte) keyboard_modifiers#5 ← (byte~) keyboard_event_scan::$29
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@12 keyboard_event_scan::@24
  (byte) keyboard_modifiers#14 ← phi( keyboard_event_scan::@12/(byte) keyboard_modifiers#22 keyboard_event_scan::@24/(byte) keyboard_modifiers#5 )
  (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@12/(byte) keyboard_events_size#23 keyboard_event_scan::@24/(byte) keyboard_events_size#24 )
  (byte) keyboard_events_size#3 ← (byte) keyboard_events_size#13
  (byte) keyboard_modifiers#6 ← (byte) keyboard_modifiers#14
  return 
  to:@return
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@10 keyboard_event_scan::@11 keyboard_event_scan::@20 keyboard_event_scan::@9 play_move_down::@1
  (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_pressed::keycode#2 keyboard_event_scan::@11/(byte) keyboard_event_pressed::keycode#3 keyboard_event_scan::@20/(byte) keyboard_event_pressed::keycode#0 keyboard_event_scan::@9/(byte) keyboard_event_pressed::keycode#1 play_move_down::@1/(byte) keyboard_event_pressed::keycode#4 )
  (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) keyboard_event_pressed::row_bits#0 ← *((byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) keyboard_event_pressed::$2 ← (byte) keyboard_event_pressed::row_bits#0 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1)
  (byte) keyboard_event_pressed::return#4 ← (byte~) keyboard_event_pressed::$2
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  (byte) keyboard_event_pressed::return#11 ← phi( keyboard_event_pressed/(byte) keyboard_event_pressed::return#4 )
  (byte) keyboard_event_pressed::return#5 ← (byte) keyboard_event_pressed::return#11
  return 
  to:@return
keyboard_event_get: scope:[keyboard_event_get]  from main::@27
  (byte) keyboard_events_size#14 ← phi( main::@27/(byte) keyboard_events_size#6 )
  (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#14 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) keyboard_event_get::$0) goto keyboard_event_get::@1
  to:keyboard_event_get::@3
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#25 ← phi( keyboard_event_get/(byte) keyboard_events_size#14 )
  (byte) keyboard_event_get::return#0 ← (byte/word/signed word/dword/signed dword) 255
  to:keyboard_event_get::@return
keyboard_event_get::@3: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#15 ← phi( keyboard_event_get/(byte) keyboard_events_size#14 )
  (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#15
  (byte) keyboard_event_get::return#1 ← *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get::@1 keyboard_event_get::@3
  (byte) keyboard_events_size#16 ← phi( keyboard_event_get::@1/(byte) keyboard_events_size#25 keyboard_event_get::@3/(byte) keyboard_events_size#4 )
  (byte) keyboard_event_get::return#4 ← phi( keyboard_event_get::@1/(byte) keyboard_event_get::return#0 keyboard_event_get::@3/(byte) keyboard_event_get::return#1 )
  (byte) keyboard_event_get::return#2 ← (byte) keyboard_event_get::return#4
  (byte) keyboard_events_size#5 ← (byte) keyboard_events_size#16
  return 
  to:@return
@11: scope:[]  from @8
  (byte) keyboard_modifiers#45 ← phi( @8/(byte) keyboard_modifiers#0 )
  (byte) keyboard_events_size#57 ← phi( @8/(byte) keyboard_events_size#0 )
  (word*) SID_VOICE3_FREQ#0 ← ((word*)) (word/dword/signed dword) 54286
  (byte*) SID_VOICE3_CONTROL#0 ← ((byte*)) (word/dword/signed dword) 54290
  (byte) SID_CONTROL_NOISE#0 ← (byte/word/signed word/dword/signed dword) 128
  (byte*) SID_VOICE3_OSC#0 ← ((byte*)) (word/dword/signed dword) 54299
  to:@13
sid_rnd_init: scope:[sid_rnd_init]  from main
  *((word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535
  *((byte*) SID_VOICE3_CONTROL#0) ← (byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  return 
  to:@return
sid_rnd: scope:[sid_rnd]  from spawn_current::@2
  (byte) sid_rnd::return#0 ← *((byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  (byte) sid_rnd::return#3 ← phi( sid_rnd/(byte) sid_rnd::return#0 )
  (byte) sid_rnd::return#1 ← (byte) sid_rnd::return#3
  return 
  to:@return
@13: scope:[]  from @11
  (byte) keyboard_modifiers#44 ← phi( @11/(byte) keyboard_modifiers#45 )
  (byte) keyboard_events_size#53 ← phi( @11/(byte) keyboard_events_size#57 )
  (byte/signed byte/word/signed word/dword/signed dword~) $1 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $2 ← (byte/signed byte/word/signed word/dword/signed dword~) $1 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$2]) PIECE_T#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $3 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $4 ← (byte/signed byte/word/signed word/dword/signed dword~) $3 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$4]) PIECE_S#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $5 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $6 ← (byte/signed byte/word/signed word/dword/signed dword~) $5 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$6]) PIECE_Z#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $7 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $8 ← (byte/signed byte/word/signed word/dword/signed dword~) $7 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$8]) PIECE_L#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $9 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $10 ← (byte/signed byte/word/signed word/dword/signed dword~) $9 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$10]) PIECE_J#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $11 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $12 ← (byte/signed byte/word/signed word/dword/signed dword~) $11 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$12]) PIECE_O#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $13 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $14 ← (byte/signed byte/word/signed word/dword/signed dword~) $13 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$14]) PIECE_I#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (word~) $15 ← ((word)) (byte[$2]) PIECE_T#0
  (word~) $16 ← ((word)) (byte[$4]) PIECE_S#0
  (word~) $17 ← ((word)) (byte[$6]) PIECE_Z#0
  (word~) $18 ← ((word)) (byte[$10]) PIECE_J#0
  (word~) $19 ← ((word)) (byte[$12]) PIECE_O#0
  (word~) $20 ← ((word)) (byte[$14]) PIECE_I#0
  (word~) $21 ← ((word)) (byte[$8]) PIECE_L#0
  (word[]) PIECES#0 ← { (word~) $15, (word~) $16, (word~) $17, (word~) $18, (word~) $19, (word~) $20, (word~) $21 }
  (byte[]) PIECES_COLORS#0 ← { (byte) WHITE#0, (byte) LIGHT_GREY#0, (byte) GREEN#0, (byte) LIGHT_GREY#0, (byte) WHITE#0, (byte) WHITE#0, (byte) GREEN#0 }
  (byte) PLAYFIELD_LINES#0 ← (byte/signed byte/word/signed word/dword/signed dword) 22
  (byte) PLAYFIELD_COLS#0 ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte~) $22 ← (byte) PLAYFIELD_LINES#0 * (byte) PLAYFIELD_COLS#0
  (byte[$22]) playfield#0 ← { fill( $22, 0) }
  (byte*[PLAYFIELD_LINES#0]) playfield_lines#0 ← { fill( PLAYFIELD_LINES#0, 0) }
  (byte/signed word/word/dword/signed dword~) $23 ← (byte) PLAYFIELD_LINES#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte[$23]) playfield_lines_idx#0 ← { fill( $23, 0) }
  (byte*) current_piece#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) current_orientation#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) current_piece_gfx#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) current_piece_color#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) current_xpos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) current_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) current_movedown_slow#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  (byte) current_movedown_fast#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) current_movedown_counter#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@17
main: scope:[main]  from @25
  (byte) current_movedown_counter#46 ← phi( @25/(byte) current_movedown_counter#20 )
  (byte) keyboard_modifiers#52 ← phi( @25/(byte) keyboard_modifiers#25 )
  (byte) keyboard_events_size#70 ← phi( @25/(byte) keyboard_events_size#28 )
  (byte) current_piece_color#52 ← phi( @25/(byte) current_piece_color#26 )
  (byte) current_ypos#60 ← phi( @25/(byte) current_ypos#39 )
  (byte) current_xpos#80 ← phi( @25/(byte) current_xpos#47 )
  (byte*) current_piece_gfx#67 ← phi( @25/(byte*) current_piece_gfx#36 )
  (byte) current_orientation#62 ← phi( @25/(byte) current_orientation#40 )
  (byte*) current_piece#54 ← phi( @25/(byte*) current_piece#29 )
  (byte*) SCREEN#3 ← phi( @25/(byte*) SCREEN#4 )
  call sid_rnd_init 
  to:main::@21
main::@21: scope:[main]  from main
  (byte) current_movedown_counter#45 ← phi( main/(byte) current_movedown_counter#46 )
  (byte) keyboard_modifiers#51 ← phi( main/(byte) keyboard_modifiers#52 )
  (byte) keyboard_events_size#67 ← phi( main/(byte) keyboard_events_size#70 )
  (byte) current_piece_color#38 ← phi( main/(byte) current_piece_color#52 )
  (byte) current_ypos#51 ← phi( main/(byte) current_ypos#60 )
  (byte) current_xpos#66 ← phi( main/(byte) current_xpos#80 )
  (byte*) current_piece_gfx#53 ← phi( main/(byte*) current_piece_gfx#67 )
  (byte) current_orientation#51 ← phi( main/(byte) current_orientation#62 )
  (byte*) current_piece#42 ← phi( main/(byte*) current_piece#54 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 )
  asm { sei  }
  call render_init 
  to:main::@22
main::@22: scope:[main]  from main::@21
  (byte) current_movedown_counter#42 ← phi( main::@21/(byte) current_movedown_counter#45 )
  (byte) keyboard_modifiers#49 ← phi( main::@21/(byte) keyboard_modifiers#51 )
  (byte) keyboard_events_size#65 ← phi( main::@21/(byte) keyboard_events_size#67 )
  (byte) current_piece_color#27 ← phi( main::@21/(byte) current_piece_color#38 )
  (byte) current_ypos#40 ← phi( main::@21/(byte) current_ypos#51 )
  (byte) current_xpos#48 ← phi( main::@21/(byte) current_xpos#66 )
  (byte*) current_piece_gfx#37 ← phi( main::@21/(byte*) current_piece_gfx#53 )
  (byte) current_orientation#41 ← phi( main::@21/(byte) current_orientation#51 )
  (byte*) current_piece#30 ← phi( main::@21/(byte*) current_piece#42 )
  call tables_init 
  to:main::@23
main::@23: scope:[main]  from main::@22
  (byte) current_movedown_counter#38 ← phi( main::@22/(byte) current_movedown_counter#42 )
  (byte) keyboard_modifiers#46 ← phi( main::@22/(byte) keyboard_modifiers#49 )
  (byte) keyboard_events_size#58 ← phi( main::@22/(byte) keyboard_events_size#65 )
  (byte) current_piece_color#18 ← phi( main::@22/(byte) current_piece_color#27 )
  (byte) current_ypos#24 ← phi( main::@22/(byte) current_ypos#40 )
  (byte) current_xpos#30 ← phi( main::@22/(byte) current_xpos#48 )
  (byte*) current_piece_gfx#23 ← phi( main::@22/(byte*) current_piece_gfx#37 )
  (byte) current_orientation#26 ← phi( main::@22/(byte) current_orientation#41 )
  (byte*) current_piece#18 ← phi( main::@22/(byte*) current_piece#30 )
  call spawn_current 
  to:main::@24
main::@24: scope:[main]  from main::@23
  (byte) current_movedown_counter#34 ← phi( main::@23/(byte) current_movedown_counter#38 )
  (byte) keyboard_modifiers#39 ← phi( main::@23/(byte) keyboard_modifiers#46 )
  (byte) keyboard_events_size#48 ← phi( main::@23/(byte) keyboard_events_size#58 )
  (byte) current_piece_color#9 ← phi( main::@23/(byte) current_piece_color#7 )
  (byte) current_ypos#10 ← phi( main::@23/(byte) current_ypos#8 )
  (byte) current_xpos#13 ← phi( main::@23/(byte) current_xpos#11 )
  (byte*) current_piece_gfx#12 ← phi( main::@23/(byte*) current_piece_gfx#10 )
  (byte) current_orientation#12 ← phi( main::@23/(byte) current_orientation#10 )
  (byte*) current_piece#9 ← phi( main::@23/(byte*) current_piece#7 )
  (byte*) current_piece#1 ← (byte*) current_piece#9
  (byte) current_orientation#1 ← (byte) current_orientation#12
  (byte*) current_piece_gfx#1 ← (byte*) current_piece_gfx#12
  (byte) current_xpos#1 ← (byte) current_xpos#13
  (byte) current_ypos#1 ← (byte) current_ypos#10
  (byte) current_piece_color#1 ← (byte) current_piece_color#9
  call render_playfield 
  to:main::@25
main::@25: scope:[main]  from main::@24
  (byte) current_movedown_counter#27 ← phi( main::@24/(byte) current_movedown_counter#34 )
  (byte) keyboard_modifiers#33 ← phi( main::@24/(byte) keyboard_modifiers#39 )
  (byte) keyboard_events_size#39 ← phi( main::@24/(byte) keyboard_events_size#48 )
  (byte) current_piece_color#39 ← phi( main::@24/(byte) current_piece_color#1 )
  (byte) current_xpos#67 ← phi( main::@24/(byte) current_xpos#1 )
  (byte*) current_piece_gfx#54 ← phi( main::@24/(byte*) current_piece_gfx#1 )
  (byte) current_orientation#52 ← phi( main::@24/(byte) current_orientation#1 )
  (byte*) current_piece#43 ← phi( main::@24/(byte*) current_piece#1 )
  (byte) current_ypos#37 ← phi( main::@24/(byte) current_ypos#1 )
  call render_current 
  to:main::@26
main::@26: scope:[main]  from main::@25
  (byte) current_movedown_counter#22 ← phi( main::@25/(byte) current_movedown_counter#27 )
  (byte) keyboard_modifiers#30 ← phi( main::@25/(byte) keyboard_modifiers#33 )
  (byte) keyboard_events_size#33 ← phi( main::@25/(byte) keyboard_events_size#39 )
  (byte) current_piece_color#29 ← phi( main::@25/(byte) current_piece_color#39 )
  (byte) current_ypos#42 ← phi( main::@25/(byte) current_ypos#37 )
  (byte) current_xpos#50 ← phi( main::@25/(byte) current_xpos#67 )
  (byte*) current_piece_gfx#39 ← phi( main::@25/(byte*) current_piece_gfx#54 )
  (byte) current_orientation#43 ← phi( main::@25/(byte) current_orientation#52 )
  (byte*) current_piece#32 ← phi( main::@25/(byte*) current_piece#43 )
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@26
  (byte) current_movedown_counter#15 ← phi( main::@10/(byte) current_movedown_counter#21 main::@26/(byte) current_movedown_counter#22 )
  (byte) keyboard_modifiers#24 ← phi( main::@10/(byte) keyboard_modifiers#29 main::@26/(byte) keyboard_modifiers#30 )
  (byte) keyboard_events_size#27 ← phi( main::@10/(byte) keyboard_events_size#32 main::@26/(byte) keyboard_events_size#33 )
  (byte) current_piece_color#20 ← phi( main::@10/(byte) current_piece_color#28 main::@26/(byte) current_piece_color#29 )
  (byte) current_ypos#26 ← phi( main::@10/(byte) current_ypos#41 main::@26/(byte) current_ypos#42 )
  (byte) current_xpos#32 ← phi( main::@10/(byte) current_xpos#49 main::@26/(byte) current_xpos#50 )
  (byte*) current_piece_gfx#26 ← phi( main::@10/(byte*) current_piece_gfx#38 main::@26/(byte*) current_piece_gfx#39 )
  (byte) current_orientation#29 ← phi( main::@10/(byte) current_orientation#42 main::@26/(byte) current_orientation#43 )
  (byte*) current_piece#20 ← phi( main::@10/(byte*) current_piece#31 main::@26/(byte*) current_piece#32 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) current_piece_color#69 ← phi( main::@1/(byte) current_piece_color#20 )
  (byte) current_xpos#93 ← phi( main::@1/(byte) current_xpos#32 )
  (byte*) current_piece_gfx#81 ← phi( main::@1/(byte*) current_piece_gfx#26 )
  (byte) current_orientation#72 ← phi( main::@1/(byte) current_orientation#29 )
  (byte*) current_piece#66 ← phi( main::@1/(byte*) current_piece#20 )
  (byte) current_ypos#68 ← phi( main::@1/(byte) current_ypos#26 )
  (byte) current_movedown_counter#43 ← phi( main::@1/(byte) current_movedown_counter#15 )
  (byte) keyboard_modifiers#40 ← phi( main::@1/(byte) keyboard_modifiers#24 )
  (byte) keyboard_events_size#49 ← phi( main::@1/(byte) keyboard_events_size#27 )
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  (byte) current_piece_color#62 ← phi( main::@2/(byte) current_piece_color#69 main::@5/(byte) current_piece_color#70 )
  (byte) current_xpos#88 ← phi( main::@2/(byte) current_xpos#93 main::@5/(byte) current_xpos#94 )
  (byte*) current_piece_gfx#76 ← phi( main::@2/(byte*) current_piece_gfx#81 main::@5/(byte*) current_piece_gfx#82 )
  (byte) current_orientation#67 ← phi( main::@2/(byte) current_orientation#72 main::@5/(byte) current_orientation#73 )
  (byte*) current_piece#61 ← phi( main::@2/(byte*) current_piece#66 main::@5/(byte*) current_piece#67 )
  (byte) current_ypos#64 ← phi( main::@2/(byte) current_ypos#68 main::@5/(byte) current_ypos#69 )
  (byte) current_movedown_counter#39 ← phi( main::@2/(byte) current_movedown_counter#43 main::@5/(byte) current_movedown_counter#44 )
  (byte) keyboard_modifiers#34 ← phi( main::@2/(byte) keyboard_modifiers#40 main::@5/(byte) keyboard_modifiers#41 )
  (byte) keyboard_events_size#40 ← phi( main::@2/(byte) keyboard_events_size#49 main::@5/(byte) keyboard_events_size#50 )
  (bool~) main::$6 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) 255
  if((bool~) main::$6) goto main::@5
  to:main::@7
main::@5: scope:[main]  from main::@4
  (byte) current_piece_color#70 ← phi( main::@4/(byte) current_piece_color#62 )
  (byte) current_xpos#94 ← phi( main::@4/(byte) current_xpos#88 )
  (byte*) current_piece_gfx#82 ← phi( main::@4/(byte*) current_piece_gfx#76 )
  (byte) current_orientation#73 ← phi( main::@4/(byte) current_orientation#67 )
  (byte*) current_piece#67 ← phi( main::@4/(byte*) current_piece#61 )
  (byte) current_ypos#69 ← phi( main::@4/(byte) current_ypos#64 )
  (byte) current_movedown_counter#44 ← phi( main::@4/(byte) current_movedown_counter#39 )
  (byte) keyboard_modifiers#41 ← phi( main::@4/(byte) keyboard_modifiers#34 )
  (byte) keyboard_events_size#50 ← phi( main::@4/(byte) keyboard_events_size#40 )
  to:main::@4
main::@7: scope:[main]  from main::@4 main::@8
  (byte) current_piece_color#53 ← phi( main::@4/(byte) current_piece_color#62 main::@8/(byte) current_piece_color#63 )
  (byte) current_xpos#81 ← phi( main::@4/(byte) current_xpos#88 main::@8/(byte) current_xpos#89 )
  (byte*) current_piece_gfx#68 ← phi( main::@4/(byte*) current_piece_gfx#76 main::@8/(byte*) current_piece_gfx#77 )
  (byte) current_orientation#63 ← phi( main::@4/(byte) current_orientation#67 main::@8/(byte) current_orientation#68 )
  (byte*) current_piece#55 ← phi( main::@4/(byte*) current_piece#61 main::@8/(byte*) current_piece#62 )
  (byte) current_ypos#61 ← phi( main::@4/(byte) current_ypos#64 main::@8/(byte) current_ypos#65 )
  (byte) current_movedown_counter#35 ← phi( main::@4/(byte) current_movedown_counter#39 main::@8/(byte) current_movedown_counter#40 )
  (byte) keyboard_modifiers#31 ← phi( main::@4/(byte) keyboard_modifiers#34 main::@8/(byte) keyboard_modifiers#35 )
  (byte) keyboard_events_size#34 ← phi( main::@4/(byte) keyboard_events_size#40 main::@8/(byte) keyboard_events_size#41 )
  (bool~) main::$7 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) 254
  if((bool~) main::$7) goto main::@8
  to:main::@9
main::@8: scope:[main]  from main::@7
  (byte) current_piece_color#63 ← phi( main::@7/(byte) current_piece_color#53 )
  (byte) current_xpos#89 ← phi( main::@7/(byte) current_xpos#81 )
  (byte*) current_piece_gfx#77 ← phi( main::@7/(byte*) current_piece_gfx#68 )
  (byte) current_orientation#68 ← phi( main::@7/(byte) current_orientation#63 )
  (byte*) current_piece#62 ← phi( main::@7/(byte*) current_piece#55 )
  (byte) current_ypos#65 ← phi( main::@7/(byte) current_ypos#61 )
  (byte) current_movedown_counter#40 ← phi( main::@7/(byte) current_movedown_counter#35 )
  (byte) keyboard_modifiers#35 ← phi( main::@7/(byte) keyboard_modifiers#31 )
  (byte) keyboard_events_size#41 ← phi( main::@7/(byte) keyboard_events_size#34 )
  to:main::@7
main::@9: scope:[main]  from main::@7
  (byte) current_piece_color#40 ← phi( main::@7/(byte) current_piece_color#53 )
  (byte) current_xpos#68 ← phi( main::@7/(byte) current_xpos#81 )
  (byte*) current_piece_gfx#55 ← phi( main::@7/(byte*) current_piece_gfx#68 )
  (byte) current_orientation#53 ← phi( main::@7/(byte) current_orientation#63 )
  (byte*) current_piece#44 ← phi( main::@7/(byte*) current_piece#55 )
  (byte) current_ypos#52 ← phi( main::@7/(byte) current_ypos#61 )
  (byte) current_movedown_counter#28 ← phi( main::@7/(byte) current_movedown_counter#35 )
  (byte) keyboard_modifiers#23 ← phi( main::@7/(byte) keyboard_modifiers#31 )
  (byte) keyboard_events_size#26 ← phi( main::@7/(byte) keyboard_events_size#34 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  call keyboard_event_scan 
  to:main::@27
main::@27: scope:[main]  from main::@9
  (byte) current_piece_color#30 ← phi( main::@9/(byte) current_piece_color#40 )
  (byte) current_xpos#51 ← phi( main::@9/(byte) current_xpos#68 )
  (byte*) current_piece_gfx#40 ← phi( main::@9/(byte*) current_piece_gfx#55 )
  (byte) current_orientation#44 ← phi( main::@9/(byte) current_orientation#53 )
  (byte*) current_piece#33 ← phi( main::@9/(byte*) current_piece#44 )
  (byte) current_ypos#43 ← phi( main::@9/(byte) current_ypos#52 )
  (byte) current_movedown_counter#23 ← phi( main::@9/(byte) current_movedown_counter#28 )
  (byte) keyboard_modifiers#15 ← phi( main::@9/(byte) keyboard_modifiers#6 )
  (byte) keyboard_events_size#17 ← phi( main::@9/(byte) keyboard_events_size#3 )
  (byte) keyboard_events_size#6 ← (byte) keyboard_events_size#17
  (byte) keyboard_modifiers#7 ← (byte) keyboard_modifiers#15
  call keyboard_event_get 
  (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@28
main::@28: scope:[main]  from main::@27
  (byte) keyboard_modifiers#50 ← phi( main::@27/(byte) keyboard_modifiers#7 )
  (byte) current_piece_color#19 ← phi( main::@27/(byte) current_piece_color#30 )
  (byte) current_xpos#31 ← phi( main::@27/(byte) current_xpos#51 )
  (byte*) current_piece_gfx#24 ← phi( main::@27/(byte*) current_piece_gfx#40 )
  (byte) current_orientation#27 ← phi( main::@27/(byte) current_orientation#44 )
  (byte*) current_piece#19 ← phi( main::@27/(byte*) current_piece#33 )
  (byte) current_ypos#25 ← phi( main::@27/(byte) current_ypos#43 )
  (byte) current_movedown_counter#14 ← phi( main::@27/(byte) current_movedown_counter#23 )
  (byte) keyboard_events_size#18 ← phi( main::@27/(byte) keyboard_events_size#5 )
  (byte) keyboard_event_get::return#5 ← phi( main::@27/(byte) keyboard_event_get::return#3 )
  (byte~) main::$9 ← (byte) keyboard_event_get::return#5
  (byte) keyboard_events_size#7 ← (byte) keyboard_events_size#18
  (byte) main::key_event#0 ← (byte~) main::$9
  (byte) main::render#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) play_move_down::key_event#0 ← (byte) main::key_event#0
  call play_move_down 
  (byte) play_move_down::return#0 ← (byte) play_move_down::return#3
  to:main::@29
main::@29: scope:[main]  from main::@28
  (byte) keyboard_modifiers#47 ← phi( main::@28/(byte) keyboard_modifiers#50 )
  (byte) keyboard_events_size#59 ← phi( main::@28/(byte) keyboard_events_size#7 )
  (byte) main::key_event#1 ← phi( main::@28/(byte) main::key_event#0 )
  (byte) main::render#4 ← phi( main::@28/(byte) main::render#0 )
  (byte) current_piece_color#10 ← phi( main::@28/(byte) current_piece_color#5 )
  (byte) current_xpos#14 ← phi( main::@28/(byte) current_xpos#6 )
  (byte*) current_piece_gfx#13 ← phi( main::@28/(byte*) current_piece_gfx#6 )
  (byte) current_orientation#13 ← phi( main::@28/(byte) current_orientation#6 )
  (byte*) current_piece#10 ← phi( main::@28/(byte*) current_piece#5 )
  (byte) current_ypos#11 ← phi( main::@28/(byte) current_ypos#6 )
  (byte) current_movedown_counter#7 ← phi( main::@28/(byte) current_movedown_counter#5 )
  (byte) play_move_down::return#4 ← phi( main::@28/(byte) play_move_down::return#0 )
  (byte~) main::$10 ← (byte) play_move_down::return#4
  (byte) current_movedown_counter#1 ← (byte) current_movedown_counter#7
  (byte) current_ypos#2 ← (byte) current_ypos#11
  (byte*) current_piece#2 ← (byte*) current_piece#10
  (byte) current_orientation#2 ← (byte) current_orientation#13
  (byte*) current_piece_gfx#2 ← (byte*) current_piece_gfx#13
  (byte) current_xpos#2 ← (byte) current_xpos#14
  (byte) current_piece_color#2 ← (byte) current_piece_color#10
  (byte) main::render#1 ← (byte) main::render#4 + (byte~) main::$10
  (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#1
  call play_move_leftright 
  (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
  to:main::@30
main::@30: scope:[main]  from main::@29
  (byte) current_movedown_counter#36 ← phi( main::@29/(byte) current_movedown_counter#1 )
  (byte) keyboard_modifiers#42 ← phi( main::@29/(byte) keyboard_modifiers#47 )
  (byte) keyboard_events_size#51 ← phi( main::@29/(byte) keyboard_events_size#59 )
  (byte) current_piece_color#54 ← phi( main::@29/(byte) current_piece_color#2 )
  (byte*) current_piece#56 ← phi( main::@29/(byte*) current_piece#2 )
  (byte) current_ypos#58 ← phi( main::@29/(byte) current_ypos#2 )
  (byte*) current_piece_gfx#25 ← phi( main::@29/(byte*) current_piece_gfx#2 )
  (byte) current_orientation#28 ← phi( main::@29/(byte) current_orientation#2 )
  (byte) main::key_event#2 ← phi( main::@29/(byte) main::key_event#1 )
  (byte) main::render#5 ← phi( main::@29/(byte) main::render#1 )
  (byte) current_xpos#15 ← phi( main::@29/(byte) current_xpos#8 )
  (byte) play_move_leftright::return#5 ← phi( main::@29/(byte) play_move_leftright::return#0 )
  (byte~) main::$11 ← (byte) play_move_leftright::return#5
  (byte) current_xpos#3 ← (byte) current_xpos#15
  (byte) main::render#2 ← (byte) main::render#5 + (byte~) main::$11
  (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#2
  call play_move_rotate 
  (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
  to:main::@31
main::@31: scope:[main]  from main::@30
  (byte) current_movedown_counter#29 ← phi( main::@30/(byte) current_movedown_counter#36 )
  (byte) keyboard_modifiers#36 ← phi( main::@30/(byte) keyboard_modifiers#42 )
  (byte) keyboard_events_size#42 ← phi( main::@30/(byte) keyboard_events_size#51 )
  (byte) current_piece_color#41 ← phi( main::@30/(byte) current_piece_color#54 )
  (byte) current_ypos#53 ← phi( main::@30/(byte) current_ypos#58 )
  (byte) current_xpos#69 ← phi( main::@30/(byte) current_xpos#3 )
  (byte*) current_piece#45 ← phi( main::@30/(byte*) current_piece#56 )
  (byte) main::render#6 ← phi( main::@30/(byte) main::render#2 )
  (byte*) current_piece_gfx#14 ← phi( main::@30/(byte*) current_piece_gfx#7 )
  (byte) current_orientation#14 ← phi( main::@30/(byte) current_orientation#7 )
  (byte) play_move_rotate::return#5 ← phi( main::@30/(byte) play_move_rotate::return#0 )
  (byte~) main::$12 ← (byte) play_move_rotate::return#5
  (byte) current_orientation#3 ← (byte) current_orientation#14
  (byte*) current_piece_gfx#3 ← (byte*) current_piece_gfx#14
  (byte) main::render#3 ← (byte) main::render#6 + (byte~) main::$12
  (bool~) main::$13 ← (byte) main::render#3 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) main::$14 ← ! (bool~) main::$13
  if((bool~) main::$14) goto main::@10
  to:main::@19
main::@10: scope:[main]  from main::@31 main::@33
  (byte) current_movedown_counter#21 ← phi( main::@31/(byte) current_movedown_counter#29 main::@33/(byte) current_movedown_counter#30 )
  (byte) keyboard_modifiers#29 ← phi( main::@31/(byte) keyboard_modifiers#36 main::@33/(byte) keyboard_modifiers#37 )
  (byte) keyboard_events_size#32 ← phi( main::@31/(byte) keyboard_events_size#42 main::@33/(byte) keyboard_events_size#43 )
  (byte) current_piece_color#28 ← phi( main::@31/(byte) current_piece_color#41 main::@33/(byte) current_piece_color#42 )
  (byte) current_ypos#41 ← phi( main::@31/(byte) current_ypos#53 main::@33/(byte) current_ypos#54 )
  (byte) current_xpos#49 ← phi( main::@31/(byte) current_xpos#69 main::@33/(byte) current_xpos#70 )
  (byte*) current_piece_gfx#38 ← phi( main::@31/(byte*) current_piece_gfx#3 main::@33/(byte*) current_piece_gfx#56 )
  (byte) current_orientation#42 ← phi( main::@31/(byte) current_orientation#3 main::@33/(byte) current_orientation#54 )
  (byte*) current_piece#31 ← phi( main::@31/(byte*) current_piece#45 main::@33/(byte*) current_piece#46 )
  *((byte*) BORDERCOL#0) ← -- *((byte*) BORDERCOL#0)
  to:main::@1
main::@19: scope:[main]  from main::@31
  (byte) current_movedown_counter#41 ← phi( main::@31/(byte) current_movedown_counter#29 )
  (byte) keyboard_modifiers#48 ← phi( main::@31/(byte) keyboard_modifiers#36 )
  (byte) keyboard_events_size#60 ← phi( main::@31/(byte) keyboard_events_size#42 )
  (byte) current_piece_color#64 ← phi( main::@31/(byte) current_piece_color#41 )
  (byte*) current_piece_gfx#78 ← phi( main::@31/(byte*) current_piece_gfx#3 )
  (byte) current_orientation#69 ← phi( main::@31/(byte) current_orientation#3 )
  (byte*) current_piece#63 ← phi( main::@31/(byte*) current_piece#45 )
  (byte) current_xpos#82 ← phi( main::@31/(byte) current_xpos#69 )
  (byte) current_ypos#44 ← phi( main::@31/(byte) current_ypos#53 )
  call render_playfield 
  to:main::@32
main::@32: scope:[main]  from main::@19
  (byte) current_movedown_counter#37 ← phi( main::@19/(byte) current_movedown_counter#41 )
  (byte) keyboard_modifiers#43 ← phi( main::@19/(byte) keyboard_modifiers#48 )
  (byte) keyboard_events_size#52 ← phi( main::@19/(byte) keyboard_events_size#60 )
  (byte) current_piece_color#55 ← phi( main::@19/(byte) current_piece_color#64 )
  (byte*) current_piece_gfx#69 ← phi( main::@19/(byte*) current_piece_gfx#78 )
  (byte) current_orientation#64 ← phi( main::@19/(byte) current_orientation#69 )
  (byte*) current_piece#57 ← phi( main::@19/(byte*) current_piece#63 )
  (byte) current_xpos#78 ← phi( main::@19/(byte) current_xpos#82 )
  (byte) current_ypos#38 ← phi( main::@19/(byte) current_ypos#44 )
  call render_current 
  to:main::@33
main::@33: scope:[main]  from main::@32
  (byte) current_movedown_counter#30 ← phi( main::@32/(byte) current_movedown_counter#37 )
  (byte) keyboard_modifiers#37 ← phi( main::@32/(byte) keyboard_modifiers#43 )
  (byte) keyboard_events_size#43 ← phi( main::@32/(byte) keyboard_events_size#52 )
  (byte) current_piece_color#42 ← phi( main::@32/(byte) current_piece_color#55 )
  (byte) current_ypos#54 ← phi( main::@32/(byte) current_ypos#38 )
  (byte) current_xpos#70 ← phi( main::@32/(byte) current_xpos#78 )
  (byte*) current_piece_gfx#56 ← phi( main::@32/(byte*) current_piece_gfx#69 )
  (byte) current_orientation#54 ← phi( main::@32/(byte) current_orientation#64 )
  (byte*) current_piece#46 ← phi( main::@32/(byte*) current_piece#57 )
  to:main::@10
main::@return: scope:[main]  from main::@1
  (byte) current_movedown_counter#8 ← phi( main::@1/(byte) current_movedown_counter#15 )
  (byte) keyboard_modifiers#16 ← phi( main::@1/(byte) keyboard_modifiers#24 )
  (byte) keyboard_events_size#19 ← phi( main::@1/(byte) keyboard_events_size#27 )
  (byte) current_piece_color#11 ← phi( main::@1/(byte) current_piece_color#20 )
  (byte) current_ypos#12 ← phi( main::@1/(byte) current_ypos#26 )
  (byte) current_xpos#16 ← phi( main::@1/(byte) current_xpos#32 )
  (byte*) current_piece_gfx#15 ← phi( main::@1/(byte*) current_piece_gfx#26 )
  (byte) current_orientation#15 ← phi( main::@1/(byte) current_orientation#29 )
  (byte*) current_piece#11 ← phi( main::@1/(byte*) current_piece#20 )
  (byte*) current_piece#3 ← (byte*) current_piece#11
  (byte) current_orientation#4 ← (byte) current_orientation#15
  (byte*) current_piece_gfx#4 ← (byte*) current_piece_gfx#15
  (byte) current_xpos#4 ← (byte) current_xpos#16
  (byte) current_ypos#3 ← (byte) current_ypos#12
  (byte) current_piece_color#3 ← (byte) current_piece_color#11
  (byte) keyboard_events_size#8 ← (byte) keyboard_events_size#19
  (byte) keyboard_modifiers#8 ← (byte) keyboard_modifiers#16
  (byte) current_movedown_counter#2 ← (byte) current_movedown_counter#8
  return 
  to:@return
play_move_down: scope:[play_move_down]  from main::@28
  (byte) current_piece_color#71 ← phi( main::@28/(byte) current_piece_color#19 )
  (byte*) current_piece_gfx#83 ← phi( main::@28/(byte*) current_piece_gfx#24 )
  (byte*) current_piece#68 ← phi( main::@28/(byte*) current_piece#19 )
  (byte) current_orientation#70 ← phi( main::@28/(byte) current_orientation#27 )
  (byte) current_xpos#90 ← phi( main::@28/(byte) current_xpos#31 )
  (byte) current_ypos#66 ← phi( main::@28/(byte) current_ypos#25 )
  (byte) play_move_down::key_event#1 ← phi( main::@28/(byte) play_move_down::key_event#0 )
  (byte) current_movedown_counter#9 ← phi( main::@28/(byte) current_movedown_counter#14 )
  (byte) current_movedown_counter#3 ← ++ (byte) current_movedown_counter#9
  (byte) play_move_down::movedown#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_move_down::$0 ← (byte) play_move_down::key_event#1 == (byte) KEY_SPACE#0
  (bool~) play_move_down::$1 ← ! (bool~) play_move_down::$0
  if((bool~) play_move_down::$1) goto play_move_down::@1
  to:play_move_down::@8
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@8
  (byte) current_piece_color#65 ← phi( play_move_down/(byte) current_piece_color#71 play_move_down::@8/(byte) current_piece_color#72 )
  (byte*) current_piece_gfx#79 ← phi( play_move_down/(byte*) current_piece_gfx#83 play_move_down::@8/(byte*) current_piece_gfx#84 )
  (byte*) current_piece#64 ← phi( play_move_down/(byte*) current_piece#68 play_move_down::@8/(byte*) current_piece#69 )
  (byte) current_orientation#65 ← phi( play_move_down/(byte) current_orientation#70 play_move_down::@8/(byte) current_orientation#71 )
  (byte) current_xpos#83 ← phi( play_move_down/(byte) current_xpos#90 play_move_down::@8/(byte) current_xpos#91 )
  (byte) current_ypos#62 ← phi( play_move_down/(byte) current_ypos#66 play_move_down::@8/(byte) current_ypos#67 )
  (byte) play_move_down::movedown#12 ← phi( play_move_down/(byte) play_move_down::movedown#0 play_move_down::@8/(byte) play_move_down::movedown#1 )
  (byte) current_movedown_counter#24 ← phi( play_move_down/(byte) current_movedown_counter#3 play_move_down::@8/(byte) current_movedown_counter#31 )
  (byte) keyboard_event_pressed::keycode#4 ← (byte) KEY_SPACE#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#6 ← (byte) keyboard_event_pressed::return#5
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@1
  (byte) current_piece_color#57 ← phi( play_move_down::@1/(byte) current_piece_color#65 )
  (byte*) current_piece_gfx#71 ← phi( play_move_down::@1/(byte*) current_piece_gfx#79 )
  (byte*) current_piece#59 ← phi( play_move_down::@1/(byte*) current_piece#64 )
  (byte) current_orientation#56 ← phi( play_move_down::@1/(byte) current_orientation#65 )
  (byte) current_xpos#72 ← phi( play_move_down::@1/(byte) current_xpos#83 )
  (byte) current_ypos#56 ← phi( play_move_down::@1/(byte) current_ypos#62 )
  (byte) play_move_down::movedown#10 ← phi( play_move_down::@1/(byte) play_move_down::movedown#12 )
  (byte) current_movedown_counter#17 ← phi( play_move_down::@1/(byte) current_movedown_counter#24 )
  (byte) keyboard_event_pressed::return#12 ← phi( play_move_down::@1/(byte) keyboard_event_pressed::return#6 )
  (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  (bool~) play_move_down::$3 ← (byte~) play_move_down::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_move_down::$4 ← ! (bool~) play_move_down::$3
  if((bool~) play_move_down::$4) goto play_move_down::@2
  to:play_move_down::@9
play_move_down::@8: scope:[play_move_down]  from play_move_down
  (byte) current_piece_color#72 ← phi( play_move_down/(byte) current_piece_color#71 )
  (byte*) current_piece_gfx#84 ← phi( play_move_down/(byte*) current_piece_gfx#83 )
  (byte*) current_piece#69 ← phi( play_move_down/(byte*) current_piece#68 )
  (byte) current_orientation#71 ← phi( play_move_down/(byte) current_orientation#70 )
  (byte) current_xpos#91 ← phi( play_move_down/(byte) current_xpos#90 )
  (byte) current_ypos#67 ← phi( play_move_down/(byte) current_ypos#66 )
  (byte) current_movedown_counter#31 ← phi( play_move_down/(byte) current_movedown_counter#3 )
  (byte) play_move_down::movedown#4 ← phi( play_move_down/(byte) play_move_down::movedown#0 )
  (byte) play_move_down::movedown#1 ← ++ (byte) play_move_down::movedown#4
  to:play_move_down::@1
play_move_down::@2: scope:[play_move_down]  from play_move_down::@10 play_move_down::@17 play_move_down::@3
  (byte) current_piece_color#44 ← phi( play_move_down::@10/(byte) current_piece_color#56 play_move_down::@17/(byte) current_piece_color#57 play_move_down::@3/(byte) current_piece_color#58 )
  (byte*) current_piece_gfx#58 ← phi( play_move_down::@10/(byte*) current_piece_gfx#70 play_move_down::@17/(byte*) current_piece_gfx#71 play_move_down::@3/(byte*) current_piece_gfx#72 )
  (byte*) current_piece#48 ← phi( play_move_down::@10/(byte*) current_piece#58 play_move_down::@17/(byte*) current_piece#59 play_move_down::@3/(byte*) current_piece#60 )
  (byte) current_orientation#46 ← phi( play_move_down::@10/(byte) current_orientation#55 play_move_down::@17/(byte) current_orientation#56 play_move_down::@3/(byte) current_orientation#57 )
  (byte) current_xpos#53 ← phi( play_move_down::@10/(byte) current_xpos#71 play_move_down::@17/(byte) current_xpos#72 play_move_down::@3/(byte) current_xpos#73 )
  (byte) current_ypos#46 ← phi( play_move_down::@10/(byte) current_ypos#55 play_move_down::@17/(byte) current_ypos#56 play_move_down::@3/(byte) current_ypos#57 )
  (byte) play_move_down::movedown#9 ← phi( play_move_down::@10/(byte) play_move_down::movedown#2 play_move_down::@17/(byte) play_move_down::movedown#10 play_move_down::@3/(byte) play_move_down::movedown#11 )
  (byte) current_movedown_counter#10 ← phi( play_move_down::@10/(byte) current_movedown_counter#16 play_move_down::@17/(byte) current_movedown_counter#17 play_move_down::@3/(byte) current_movedown_counter#18 )
  (bool~) play_move_down::$7 ← (byte) current_movedown_counter#10 >= (byte) current_movedown_slow#0
  (bool~) play_move_down::$8 ← ! (bool~) play_move_down::$7
  if((bool~) play_move_down::$8) goto play_move_down::@4
  to:play_move_down::@11
play_move_down::@9: scope:[play_move_down]  from play_move_down::@17
  (byte) current_piece_color#66 ← phi( play_move_down::@17/(byte) current_piece_color#57 )
  (byte*) current_piece_gfx#80 ← phi( play_move_down::@17/(byte*) current_piece_gfx#71 )
  (byte*) current_piece#65 ← phi( play_move_down::@17/(byte*) current_piece#59 )
  (byte) current_orientation#66 ← phi( play_move_down::@17/(byte) current_orientation#56 )
  (byte) current_xpos#84 ← phi( play_move_down::@17/(byte) current_xpos#72 )
  (byte) current_ypos#63 ← phi( play_move_down::@17/(byte) current_ypos#56 )
  (byte) play_move_down::movedown#8 ← phi( play_move_down::@17/(byte) play_move_down::movedown#10 )
  (byte) current_movedown_counter#11 ← phi( play_move_down::@17/(byte) current_movedown_counter#17 )
  (bool~) play_move_down::$5 ← (byte) current_movedown_counter#11 >= (byte) current_movedown_fast#0
  (bool~) play_move_down::$6 ← ! (bool~) play_move_down::$5
  if((bool~) play_move_down::$6) goto play_move_down::@3
  to:play_move_down::@10
play_move_down::@3: scope:[play_move_down]  from play_move_down::@9
  (byte) current_piece_color#58 ← phi( play_move_down::@9/(byte) current_piece_color#66 )
  (byte*) current_piece_gfx#72 ← phi( play_move_down::@9/(byte*) current_piece_gfx#80 )
  (byte*) current_piece#60 ← phi( play_move_down::@9/(byte*) current_piece#65 )
  (byte) current_orientation#57 ← phi( play_move_down::@9/(byte) current_orientation#66 )
  (byte) current_xpos#73 ← phi( play_move_down::@9/(byte) current_xpos#84 )
  (byte) current_ypos#57 ← phi( play_move_down::@9/(byte) current_ypos#63 )
  (byte) play_move_down::movedown#11 ← phi( play_move_down::@9/(byte) play_move_down::movedown#8 )
  (byte) current_movedown_counter#18 ← phi( play_move_down::@9/(byte) current_movedown_counter#11 )
  to:play_move_down::@2
play_move_down::@10: scope:[play_move_down]  from play_move_down::@9
  (byte) current_piece_color#56 ← phi( play_move_down::@9/(byte) current_piece_color#66 )
  (byte*) current_piece_gfx#70 ← phi( play_move_down::@9/(byte*) current_piece_gfx#80 )
  (byte*) current_piece#58 ← phi( play_move_down::@9/(byte*) current_piece#65 )
  (byte) current_orientation#55 ← phi( play_move_down::@9/(byte) current_orientation#66 )
  (byte) current_xpos#71 ← phi( play_move_down::@9/(byte) current_xpos#84 )
  (byte) current_ypos#55 ← phi( play_move_down::@9/(byte) current_ypos#63 )
  (byte) current_movedown_counter#16 ← phi( play_move_down::@9/(byte) current_movedown_counter#11 )
  (byte) play_move_down::movedown#5 ← phi( play_move_down::@9/(byte) play_move_down::movedown#8 )
  (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#5
  to:play_move_down::@2
play_move_down::@4: scope:[play_move_down]  from play_move_down::@11 play_move_down::@2
  (byte) current_piece_color#31 ← phi( play_move_down::@11/(byte) current_piece_color#43 play_move_down::@2/(byte) current_piece_color#44 )
  (byte*) current_piece_gfx#41 ← phi( play_move_down::@11/(byte*) current_piece_gfx#57 play_move_down::@2/(byte*) current_piece_gfx#58 )
  (byte*) current_piece#34 ← phi( play_move_down::@11/(byte*) current_piece#47 play_move_down::@2/(byte*) current_piece#48 )
  (byte) current_movedown_counter#25 ← phi( play_move_down::@11/(byte) current_movedown_counter#32 play_move_down::@2/(byte) current_movedown_counter#10 )
  (byte) current_orientation#30 ← phi( play_move_down::@11/(byte) current_orientation#45 play_move_down::@2/(byte) current_orientation#46 )
  (byte) current_xpos#33 ← phi( play_move_down::@11/(byte) current_xpos#52 play_move_down::@2/(byte) current_xpos#53 )
  (byte) current_ypos#27 ← phi( play_move_down::@11/(byte) current_ypos#45 play_move_down::@2/(byte) current_ypos#46 )
  (byte) play_move_down::movedown#6 ← phi( play_move_down::@11/(byte) play_move_down::movedown#3 play_move_down::@2/(byte) play_move_down::movedown#9 )
  (bool~) play_move_down::$9 ← (byte) play_move_down::movedown#6 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_move_down::$10 ← ! (bool~) play_move_down::$9
  if((bool~) play_move_down::$10) goto play_move_down::@5
  to:play_move_down::@12
play_move_down::@11: scope:[play_move_down]  from play_move_down::@2
  (byte) current_piece_color#43 ← phi( play_move_down::@2/(byte) current_piece_color#44 )
  (byte*) current_piece_gfx#57 ← phi( play_move_down::@2/(byte*) current_piece_gfx#58 )
  (byte*) current_piece#47 ← phi( play_move_down::@2/(byte*) current_piece#48 )
  (byte) current_movedown_counter#32 ← phi( play_move_down::@2/(byte) current_movedown_counter#10 )
  (byte) current_orientation#45 ← phi( play_move_down::@2/(byte) current_orientation#46 )
  (byte) current_xpos#52 ← phi( play_move_down::@2/(byte) current_xpos#53 )
  (byte) current_ypos#45 ← phi( play_move_down::@2/(byte) current_ypos#46 )
  (byte) play_move_down::movedown#7 ← phi( play_move_down::@2/(byte) play_move_down::movedown#9 )
  (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@4
play_move_down::@5: scope:[play_move_down]  from play_move_down::@4
  (byte) current_piece_color#22 ← phi( play_move_down::@4/(byte) current_piece_color#31 )
  (byte) current_xpos#35 ← phi( play_move_down::@4/(byte) current_xpos#33 )
  (byte*) current_piece_gfx#28 ← phi( play_move_down::@4/(byte*) current_piece_gfx#41 )
  (byte) current_orientation#32 ← phi( play_move_down::@4/(byte) current_orientation#30 )
  (byte*) current_piece#22 ← phi( play_move_down::@4/(byte*) current_piece#34 )
  (byte) current_ypos#30 ← phi( play_move_down::@4/(byte) current_ypos#27 )
  (byte) current_movedown_counter#19 ← phi( play_move_down::@4/(byte) current_movedown_counter#25 )
  (byte) play_move_down::return#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_move_down::@return
play_move_down::@12: scope:[play_move_down]  from play_move_down::@4
  (byte) current_piece_color#59 ← phi( play_move_down::@4/(byte) current_piece_color#31 )
  (byte*) current_piece_gfx#73 ← phi( play_move_down::@4/(byte*) current_piece_gfx#41 )
  (byte*) current_piece#25 ← phi( play_move_down::@4/(byte*) current_piece#34 )
  (byte) current_orientation#16 ← phi( play_move_down::@4/(byte) current_orientation#30 )
  (byte) current_xpos#17 ← phi( play_move_down::@4/(byte) current_xpos#33 )
  (byte) current_ypos#13 ← phi( play_move_down::@4/(byte) current_ypos#27 )
  (byte/signed word/word/dword/signed dword~) play_move_down::$11 ← (byte) current_ypos#13 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) collision::xpos#0 ← (byte) current_xpos#17
  (byte) collision::ypos#0 ← (byte/signed word/word/dword/signed dword~) play_move_down::$11
  (byte) collision::orientation#0 ← (byte) current_orientation#16
  call collision 
  (byte) collision::return#0 ← (byte) collision::return#5
  to:play_move_down::@18
play_move_down::@18: scope:[play_move_down]  from play_move_down::@12
  (byte) current_piece_color#45 ← phi( play_move_down::@12/(byte) current_piece_color#59 )
  (byte) current_xpos#74 ← phi( play_move_down::@12/(byte) current_xpos#17 )
  (byte*) current_piece_gfx#59 ← phi( play_move_down::@12/(byte*) current_piece_gfx#73 )
  (byte) current_orientation#58 ← phi( play_move_down::@12/(byte) current_orientation#16 )
  (byte*) current_piece#49 ← phi( play_move_down::@12/(byte*) current_piece#25 )
  (byte) current_ypos#28 ← phi( play_move_down::@12/(byte) current_ypos#13 )
  (byte) collision::return#10 ← phi( play_move_down::@12/(byte) collision::return#0 )
  (byte~) play_move_down::$12 ← (byte) collision::return#10
  (bool~) play_move_down::$13 ← (byte~) play_move_down::$12 == (byte) COLLISION_NONE#0
  if((bool~) play_move_down::$13) goto play_move_down::@6
  to:play_move_down::@13
play_move_down::@6: scope:[play_move_down]  from play_move_down::@18
  (byte) current_piece_color#33 ← phi( play_move_down::@18/(byte) current_piece_color#45 )
  (byte) current_xpos#55 ← phi( play_move_down::@18/(byte) current_xpos#74 )
  (byte*) current_piece_gfx#43 ← phi( play_move_down::@18/(byte*) current_piece_gfx#59 )
  (byte) current_orientation#48 ← phi( play_move_down::@18/(byte) current_orientation#58 )
  (byte*) current_piece#36 ← phi( play_move_down::@18/(byte*) current_piece#49 )
  (byte) current_ypos#14 ← phi( play_move_down::@18/(byte) current_ypos#28 )
  (byte) current_ypos#4 ← ++ (byte) current_ypos#14
  to:play_move_down::@7
play_move_down::@13: scope:[play_move_down]  from play_move_down::@18
  (byte) current_piece_color#46 ← phi( play_move_down::@18/(byte) current_piece_color#45 )
  (byte*) current_piece_gfx#60 ← phi( play_move_down::@18/(byte*) current_piece_gfx#59 )
  (byte) current_orientation#59 ← phi( play_move_down::@18/(byte) current_orientation#58 )
  (byte*) current_piece#50 ← phi( play_move_down::@18/(byte*) current_piece#49 )
  (byte) current_xpos#61 ← phi( play_move_down::@18/(byte) current_xpos#74 )
  (byte) current_ypos#36 ← phi( play_move_down::@18/(byte) current_ypos#28 )
  call lock_current 
  to:play_move_down::@19
play_move_down::@19: scope:[play_move_down]  from play_move_down::@13
  (byte) current_piece_color#32 ← phi( play_move_down::@13/(byte) current_piece_color#46 )
  (byte) current_ypos#47 ← phi( play_move_down::@13/(byte) current_ypos#36 )
  (byte) current_xpos#54 ← phi( play_move_down::@13/(byte) current_xpos#61 )
  (byte*) current_piece_gfx#42 ← phi( play_move_down::@13/(byte*) current_piece_gfx#60 )
  (byte) current_orientation#47 ← phi( play_move_down::@13/(byte) current_orientation#59 )
  (byte*) current_piece#35 ← phi( play_move_down::@13/(byte*) current_piece#50 )
  call remove_lines 
  to:play_move_down::@20
play_move_down::@20: scope:[play_move_down]  from play_move_down::@19
  (byte) current_piece_color#21 ← phi( play_move_down::@19/(byte) current_piece_color#32 )
  (byte) current_ypos#29 ← phi( play_move_down::@19/(byte) current_ypos#47 )
  (byte) current_xpos#34 ← phi( play_move_down::@19/(byte) current_xpos#54 )
  (byte*) current_piece_gfx#27 ← phi( play_move_down::@19/(byte*) current_piece_gfx#42 )
  (byte) current_orientation#31 ← phi( play_move_down::@19/(byte) current_orientation#47 )
  (byte*) current_piece#21 ← phi( play_move_down::@19/(byte*) current_piece#35 )
  call spawn_current 
  to:play_move_down::@21
play_move_down::@21: scope:[play_move_down]  from play_move_down::@20
  (byte) current_piece_color#12 ← phi( play_move_down::@20/(byte) current_piece_color#7 )
  (byte) current_ypos#15 ← phi( play_move_down::@20/(byte) current_ypos#8 )
  (byte) current_xpos#18 ← phi( play_move_down::@20/(byte) current_xpos#11 )
  (byte*) current_piece_gfx#16 ← phi( play_move_down::@20/(byte*) current_piece_gfx#10 )
  (byte) current_orientation#17 ← phi( play_move_down::@20/(byte) current_orientation#10 )
  (byte*) current_piece#12 ← phi( play_move_down::@20/(byte*) current_piece#7 )
  (byte*) current_piece#4 ← (byte*) current_piece#12
  (byte) current_orientation#5 ← (byte) current_orientation#17
  (byte*) current_piece_gfx#5 ← (byte*) current_piece_gfx#16
  (byte) current_xpos#5 ← (byte) current_xpos#18
  (byte) current_ypos#5 ← (byte) current_ypos#15
  (byte) current_piece_color#4 ← (byte) current_piece_color#12
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@21 play_move_down::@6
  (byte) current_piece_color#23 ← phi( play_move_down::@21/(byte) current_piece_color#4 play_move_down::@6/(byte) current_piece_color#33 )
  (byte) current_xpos#36 ← phi( play_move_down::@21/(byte) current_xpos#5 play_move_down::@6/(byte) current_xpos#55 )
  (byte*) current_piece_gfx#29 ← phi( play_move_down::@21/(byte*) current_piece_gfx#5 play_move_down::@6/(byte*) current_piece_gfx#43 )
  (byte) current_orientation#33 ← phi( play_move_down::@21/(byte) current_orientation#5 play_move_down::@6/(byte) current_orientation#48 )
  (byte*) current_piece#23 ← phi( play_move_down::@21/(byte*) current_piece#4 play_move_down::@6/(byte*) current_piece#36 )
  (byte) current_ypos#31 ← phi( play_move_down::@21/(byte) current_ypos#5 play_move_down::@6/(byte) current_ypos#4 )
  (byte) current_movedown_counter#4 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) play_move_down::return#2 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@5 play_move_down::@7
  (byte) current_piece_color#13 ← phi( play_move_down::@5/(byte) current_piece_color#22 play_move_down::@7/(byte) current_piece_color#23 )
  (byte) current_xpos#19 ← phi( play_move_down::@5/(byte) current_xpos#35 play_move_down::@7/(byte) current_xpos#36 )
  (byte*) current_piece_gfx#17 ← phi( play_move_down::@5/(byte*) current_piece_gfx#28 play_move_down::@7/(byte*) current_piece_gfx#29 )
  (byte) current_orientation#18 ← phi( play_move_down::@5/(byte) current_orientation#32 play_move_down::@7/(byte) current_orientation#33 )
  (byte*) current_piece#13 ← phi( play_move_down::@5/(byte*) current_piece#22 play_move_down::@7/(byte*) current_piece#23 )
  (byte) current_ypos#16 ← phi( play_move_down::@5/(byte) current_ypos#30 play_move_down::@7/(byte) current_ypos#31 )
  (byte) current_movedown_counter#12 ← phi( play_move_down::@5/(byte) current_movedown_counter#19 play_move_down::@7/(byte) current_movedown_counter#4 )
  (byte) play_move_down::return#5 ← phi( play_move_down::@5/(byte) play_move_down::return#1 play_move_down::@7/(byte) play_move_down::return#2 )
  (byte) play_move_down::return#3 ← (byte) play_move_down::return#5
  (byte) current_movedown_counter#5 ← (byte) current_movedown_counter#12
  (byte) current_ypos#6 ← (byte) current_ypos#16
  (byte*) current_piece#5 ← (byte*) current_piece#13
  (byte) current_orientation#6 ← (byte) current_orientation#18
  (byte*) current_piece_gfx#6 ← (byte*) current_piece_gfx#17
  (byte) current_xpos#6 ← (byte) current_xpos#19
  (byte) current_piece_color#5 ← (byte) current_piece_color#13
  return 
  to:@return
play_move_leftright: scope:[play_move_leftright]  from main::@29
  (byte*) current_piece#37 ← phi( main::@29/(byte*) current_piece#2 )
  (byte) current_orientation#34 ← phi( main::@29/(byte) current_orientation#2 )
  (byte) current_ypos#32 ← phi( main::@29/(byte) current_ypos#2 )
  (byte) current_xpos#37 ← phi( main::@29/(byte) current_xpos#2 )
  (byte) play_move_leftright::key_event#1 ← phi( main::@29/(byte) play_move_leftright::key_event#0 )
  (bool~) play_move_leftright::$0 ← (byte) play_move_leftright::key_event#1 == (byte) KEY_COMMA#0
  if((bool~) play_move_leftright::$0) goto play_move_leftright::@1
  to:play_move_leftright::@6
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  (byte*) current_piece#26 ← phi( play_move_leftright/(byte*) current_piece#37 )
  (byte) current_orientation#19 ← phi( play_move_leftright/(byte) current_orientation#34 )
  (byte) current_ypos#17 ← phi( play_move_leftright/(byte) current_ypos#32 )
  (byte) current_xpos#20 ← phi( play_move_leftright/(byte) current_xpos#37 )
  (byte/signed word/word/dword/signed dword~) play_move_leftright::$7 ← (byte) current_xpos#20 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) collision::xpos#1 ← (byte/signed word/word/dword/signed dword~) play_move_leftright::$7
  (byte) collision::ypos#1 ← (byte) current_ypos#17
  (byte) collision::orientation#1 ← (byte) current_orientation#19
  call collision 
  (byte) collision::return#1 ← (byte) collision::return#5
  to:play_move_leftright::@14
play_move_leftright::@14: scope:[play_move_leftright]  from play_move_leftright::@1
  (byte) current_xpos#41 ← phi( play_move_leftright::@1/(byte) current_xpos#20 )
  (byte) collision::return#11 ← phi( play_move_leftright::@1/(byte) collision::return#1 )
  (byte~) play_move_leftright::$8 ← (byte) collision::return#11
  (bool~) play_move_leftright::$9 ← (byte~) play_move_leftright::$8 == (byte) COLLISION_NONE#0
  (bool~) play_move_leftright::$10 ← ! (bool~) play_move_leftright::$9
  if((bool~) play_move_leftright::$10) goto play_move_leftright::@5
  to:play_move_leftright::@11
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright
  (byte*) current_piece#38 ← phi( play_move_leftright/(byte*) current_piece#37 )
  (byte) current_orientation#35 ← phi( play_move_leftright/(byte) current_orientation#34 )
  (byte) current_ypos#33 ← phi( play_move_leftright/(byte) current_ypos#32 )
  (byte) current_xpos#38 ← phi( play_move_leftright/(byte) current_xpos#37 )
  (byte) play_move_leftright::key_event#2 ← phi( play_move_leftright/(byte) play_move_leftright::key_event#1 )
  (bool~) play_move_leftright::$1 ← (byte) play_move_leftright::key_event#2 == (byte) KEY_DOT#0
  (bool~) play_move_leftright::$2 ← ! (bool~) play_move_leftright::$1
  if((bool~) play_move_leftright::$2) goto play_move_leftright::@2
  to:play_move_leftright::@7
play_move_leftright::@2: scope:[play_move_leftright]  from play_move_leftright::@6
  (byte) current_xpos#56 ← phi( play_move_leftright::@6/(byte) current_xpos#38 )
  to:play_move_leftright::@4
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@6
  (byte*) current_piece#27 ← phi( play_move_leftright::@6/(byte*) current_piece#38 )
  (byte) current_orientation#20 ← phi( play_move_leftright::@6/(byte) current_orientation#35 )
  (byte) current_ypos#18 ← phi( play_move_leftright::@6/(byte) current_ypos#33 )
  (byte) current_xpos#21 ← phi( play_move_leftright::@6/(byte) current_xpos#38 )
  (byte/signed word/word/dword/signed dword~) play_move_leftright::$3 ← (byte) current_xpos#21 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) collision::xpos#2 ← (byte/signed word/word/dword/signed dword~) play_move_leftright::$3
  (byte) collision::ypos#2 ← (byte) current_ypos#18
  (byte) collision::orientation#2 ← (byte) current_orientation#20
  call collision 
  (byte) collision::return#2 ← (byte) collision::return#5
  to:play_move_leftright::@15
play_move_leftright::@15: scope:[play_move_leftright]  from play_move_leftright::@7
  (byte) current_xpos#39 ← phi( play_move_leftright::@7/(byte) current_xpos#21 )
  (byte) collision::return#12 ← phi( play_move_leftright::@7/(byte) collision::return#2 )
  (byte~) play_move_leftright::$4 ← (byte) collision::return#12
  (bool~) play_move_leftright::$5 ← (byte~) play_move_leftright::$4 == (byte) COLLISION_NONE#0
  (bool~) play_move_leftright::$6 ← ! (bool~) play_move_leftright::$5
  if((bool~) play_move_leftright::$6) goto play_move_leftright::@3
  to:play_move_leftright::@8
play_move_leftright::@3: scope:[play_move_leftright]  from play_move_leftright::@15
  (byte) current_xpos#57 ← phi( play_move_leftright::@15/(byte) current_xpos#39 )
  to:play_move_leftright::@4
play_move_leftright::@8: scope:[play_move_leftright]  from play_move_leftright::@15
  (byte) current_xpos#22 ← phi( play_move_leftright::@15/(byte) current_xpos#39 )
  (byte) current_xpos#7 ← ++ (byte) current_xpos#22
  (byte) play_move_leftright::return#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@11 play_move_leftright::@4 play_move_leftright::@8
  (byte) current_xpos#23 ← phi( play_move_leftright::@11/(byte) current_xpos#9 play_move_leftright::@4/(byte) current_xpos#40 play_move_leftright::@8/(byte) current_xpos#7 )
  (byte) play_move_leftright::return#6 ← phi( play_move_leftright::@11/(byte) play_move_leftright::return#4 play_move_leftright::@4/(byte) play_move_leftright::return#3 play_move_leftright::@8/(byte) play_move_leftright::return#1 )
  (byte) play_move_leftright::return#2 ← (byte) play_move_leftright::return#6
  (byte) current_xpos#8 ← (byte) current_xpos#23
  return 
  to:@return
play_move_leftright::@4: scope:[play_move_leftright]  from play_move_leftright::@2 play_move_leftright::@3 play_move_leftright::@5
  (byte) current_xpos#40 ← phi( play_move_leftright::@2/(byte) current_xpos#56 play_move_leftright::@3/(byte) current_xpos#57 play_move_leftright::@5/(byte) current_xpos#58 )
  (byte) play_move_leftright::return#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_move_leftright::@return
play_move_leftright::@5: scope:[play_move_leftright]  from play_move_leftright::@14
  (byte) current_xpos#58 ← phi( play_move_leftright::@14/(byte) current_xpos#41 )
  to:play_move_leftright::@4
play_move_leftright::@11: scope:[play_move_leftright]  from play_move_leftright::@14
  (byte) current_xpos#24 ← phi( play_move_leftright::@14/(byte) current_xpos#41 )
  (byte) current_xpos#9 ← -- (byte) current_xpos#24
  (byte) play_move_leftright::return#4 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_move_leftright::@return
play_move_rotate: scope:[play_move_rotate]  from main::@30
  (byte*) current_piece_gfx#61 ← phi( main::@30/(byte*) current_piece_gfx#25 )
  (byte*) current_piece#51 ← phi( main::@30/(byte*) current_piece#56 )
  (byte) current_ypos#48 ← phi( main::@30/(byte) current_ypos#58 )
  (byte) current_xpos#59 ← phi( main::@30/(byte) current_xpos#3 )
  (byte) current_orientation#36 ← phi( main::@30/(byte) current_orientation#28 )
  (byte) play_move_rotate::key_event#1 ← phi( main::@30/(byte) play_move_rotate::key_event#0 )
  (byte) play_move_rotate::orientation#0 ← (byte/word/signed word/dword/signed dword) 128
  (bool~) play_move_rotate::$0 ← (byte) play_move_rotate::key_event#1 == (byte) KEY_Z#0
  if((bool~) play_move_rotate::$0) goto play_move_rotate::@1
  to:play_move_rotate::@6
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  (byte*) current_piece_gfx#74 ← phi( play_move_rotate/(byte*) current_piece_gfx#61 )
  (byte*) current_piece#39 ← phi( play_move_rotate/(byte*) current_piece#51 )
  (byte) current_ypos#34 ← phi( play_move_rotate/(byte) current_ypos#48 )
  (byte) current_xpos#42 ← phi( play_move_rotate/(byte) current_xpos#59 )
  (byte) current_orientation#21 ← phi( play_move_rotate/(byte) current_orientation#36 )
  (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#21 - (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte/word/dword~) play_move_rotate::$5 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63
  (byte) play_move_rotate::orientation#1 ← (byte/word/dword~) play_move_rotate::$5
  to:play_move_rotate::@4
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate
  (byte*) current_piece#52 ← phi( play_move_rotate/(byte*) current_piece#51 )
  (byte*) current_piece_gfx#44 ← phi( play_move_rotate/(byte*) current_piece_gfx#61 )
  (byte) current_ypos#49 ← phi( play_move_rotate/(byte) current_ypos#48 )
  (byte) current_xpos#60 ← phi( play_move_rotate/(byte) current_xpos#59 )
  (byte) current_orientation#37 ← phi( play_move_rotate/(byte) current_orientation#36 )
  (byte) play_move_rotate::key_event#2 ← phi( play_move_rotate/(byte) play_move_rotate::key_event#1 )
  (bool~) play_move_rotate::$1 ← (byte) play_move_rotate::key_event#2 == (byte) KEY_X#0
  if((bool~) play_move_rotate::$1) goto play_move_rotate::@2
  to:play_move_rotate::@7
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@6
  (byte*) current_piece_gfx#75 ← phi( play_move_rotate::@6/(byte*) current_piece_gfx#44 )
  (byte*) current_piece#40 ← phi( play_move_rotate::@6/(byte*) current_piece#52 )
  (byte) current_ypos#35 ← phi( play_move_rotate::@6/(byte) current_ypos#49 )
  (byte) current_xpos#43 ← phi( play_move_rotate::@6/(byte) current_xpos#60 )
  (byte) current_orientation#22 ← phi( play_move_rotate::@6/(byte) current_orientation#37 )
  (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#22 + (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte/word/dword~) play_move_rotate::$3 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63
  (byte) play_move_rotate::orientation#2 ← (byte/word/dword~) play_move_rotate::$3
  to:play_move_rotate::@4
play_move_rotate::@7: scope:[play_move_rotate]  from play_move_rotate::@6
  (byte*) current_piece_gfx#31 ← phi( play_move_rotate::@6/(byte*) current_piece_gfx#44 )
  (byte) current_orientation#39 ← phi( play_move_rotate::@6/(byte) current_orientation#37 )
  (byte) play_move_rotate::return#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@11 play_move_rotate::@5 play_move_rotate::@7
  (byte*) current_piece_gfx#18 ← phi( play_move_rotate::@11/(byte*) current_piece_gfx#8 play_move_rotate::@5/(byte*) current_piece_gfx#30 play_move_rotate::@7/(byte*) current_piece_gfx#31 )
  (byte) current_orientation#23 ← phi( play_move_rotate::@11/(byte) current_orientation#8 play_move_rotate::@5/(byte) current_orientation#38 play_move_rotate::@7/(byte) current_orientation#39 )
  (byte) play_move_rotate::return#6 ← phi( play_move_rotate::@11/(byte) play_move_rotate::return#4 play_move_rotate::@5/(byte) play_move_rotate::return#3 play_move_rotate::@7/(byte) play_move_rotate::return#1 )
  (byte) play_move_rotate::return#2 ← (byte) play_move_rotate::return#6
  (byte) current_orientation#7 ← (byte) current_orientation#23
  (byte*) current_piece_gfx#7 ← (byte*) current_piece_gfx#18
  return 
  to:@return
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  (byte*) current_piece_gfx#62 ← phi( play_move_rotate::@1/(byte*) current_piece_gfx#74 play_move_rotate::@2/(byte*) current_piece_gfx#75 )
  (byte) current_orientation#60 ← phi( play_move_rotate::@1/(byte) current_orientation#21 play_move_rotate::@2/(byte) current_orientation#22 )
  (byte*) current_piece#28 ← phi( play_move_rotate::@1/(byte*) current_piece#39 play_move_rotate::@2/(byte*) current_piece#40 )
  (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  (byte) current_ypos#19 ← phi( play_move_rotate::@1/(byte) current_ypos#34 play_move_rotate::@2/(byte) current_ypos#35 )
  (byte) current_xpos#25 ← phi( play_move_rotate::@1/(byte) current_xpos#42 play_move_rotate::@2/(byte) current_xpos#43 )
  (byte) collision::xpos#3 ← (byte) current_xpos#25
  (byte) collision::ypos#3 ← (byte) current_ypos#19
  (byte) collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  call collision 
  (byte) collision::return#3 ← (byte) collision::return#5
  to:play_move_rotate::@14
play_move_rotate::@14: scope:[play_move_rotate]  from play_move_rotate::@4
  (byte*) current_piece_gfx#45 ← phi( play_move_rotate::@4/(byte*) current_piece_gfx#62 )
  (byte) current_orientation#49 ← phi( play_move_rotate::@4/(byte) current_orientation#60 )
  (byte*) current_piece#24 ← phi( play_move_rotate::@4/(byte*) current_piece#28 )
  (byte) play_move_rotate::orientation#5 ← phi( play_move_rotate::@4/(byte) play_move_rotate::orientation#3 )
  (byte) collision::return#13 ← phi( play_move_rotate::@4/(byte) collision::return#3 )
  (byte~) play_move_rotate::$6 ← (byte) collision::return#13
  (bool~) play_move_rotate::$7 ← (byte~) play_move_rotate::$6 == (byte) COLLISION_NONE#0
  (bool~) play_move_rotate::$8 ← ! (bool~) play_move_rotate::$7
  if((bool~) play_move_rotate::$8) goto play_move_rotate::@5
  to:play_move_rotate::@11
play_move_rotate::@5: scope:[play_move_rotate]  from play_move_rotate::@14
  (byte*) current_piece_gfx#30 ← phi( play_move_rotate::@14/(byte*) current_piece_gfx#45 )
  (byte) current_orientation#38 ← phi( play_move_rotate::@14/(byte) current_orientation#49 )
  (byte) play_move_rotate::return#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_move_rotate::@return
play_move_rotate::@11: scope:[play_move_rotate]  from play_move_rotate::@14
  (byte*) current_piece#14 ← phi( play_move_rotate::@14/(byte*) current_piece#24 )
  (byte) play_move_rotate::orientation#4 ← phi( play_move_rotate::@14/(byte) play_move_rotate::orientation#5 )
  (byte) current_orientation#8 ← (byte) play_move_rotate::orientation#4
  (byte*~) play_move_rotate::$9 ← (byte*) current_piece#14 + (byte) current_orientation#8
  (byte*) current_piece_gfx#8 ← (byte*~) play_move_rotate::$9
  (byte) play_move_rotate::return#4 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_move_rotate::@return
@17: scope:[]  from @13
  (byte) current_movedown_counter#33 ← phi( @13/(byte) current_movedown_counter#0 )
  (byte) keyboard_modifiers#38 ← phi( @13/(byte) keyboard_modifiers#44 )
  (byte) keyboard_events_size#44 ← phi( @13/(byte) keyboard_events_size#53 )
  (byte) current_piece_color#49 ← phi( @13/(byte) current_piece_color#0 )
  (byte) current_ypos#59 ← phi( @13/(byte) current_ypos#0 )
  (byte) current_xpos#77 ← phi( @13/(byte) current_xpos#0 )
  (byte*) current_piece_gfx#63 ← phi( @13/(byte*) current_piece_gfx#0 )
  (byte) current_orientation#61 ← phi( @13/(byte) current_orientation#0 )
  (byte*) current_piece#53 ← phi( @13/(byte*) current_piece#0 )
  (byte) COLLISION_NONE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) COLLISION_PLAYFIELD#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) COLLISION_BOTTOM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) COLLISION_LEFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) COLLISION_RIGHT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  to:@22
collision: scope:[collision]  from play_move_down::@12 play_move_leftright::@1 play_move_leftright::@7 play_move_rotate::@4
  (byte) collision::xpos#5 ← phi( play_move_down::@12/(byte) collision::xpos#0 play_move_leftright::@1/(byte) collision::xpos#1 play_move_leftright::@7/(byte) collision::xpos#2 play_move_rotate::@4/(byte) collision::xpos#3 )
  (byte) collision::ypos#4 ← phi( play_move_down::@12/(byte) collision::ypos#0 play_move_leftright::@1/(byte) collision::ypos#1 play_move_leftright::@7/(byte) collision::ypos#2 play_move_rotate::@4/(byte) collision::ypos#3 )
  (byte) collision::orientation#4 ← phi( play_move_down::@12/(byte) collision::orientation#0 play_move_leftright::@1/(byte) collision::orientation#1 play_move_leftright::@7/(byte) collision::orientation#2 play_move_rotate::@4/(byte) collision::orientation#3 )
  (byte*) current_piece#15 ← phi( play_move_down::@12/(byte*) current_piece#25 play_move_leftright::@1/(byte*) current_piece#26 play_move_leftright::@7/(byte*) current_piece#27 play_move_rotate::@4/(byte*) current_piece#28 )
  (byte*~) collision::$0 ← (byte*) current_piece#15 + (byte) collision::orientation#4
  (byte*) collision::piece_gfx#0 ← (byte*~) collision::$0
  (byte) collision::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) collision::$1 ← (byte) collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) collision::ypos2#0 ← (byte~) collision::$1
  (byte) collision::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:collision::@1
collision::@1: scope:[collision]  from collision collision::@17
  (byte) collision::l#6 ← phi( collision/(byte) collision::l#0 collision::@17/(byte) collision::l#1 )
  (byte) collision::i#3 ← phi( collision/(byte) collision::i#0 collision::@17/(byte) collision::i#5 )
  (byte*) collision::piece_gfx#2 ← phi( collision/(byte*) collision::piece_gfx#0 collision::@17/(byte*) collision::piece_gfx#4 )
  (byte) collision::xpos#4 ← phi( collision/(byte) collision::xpos#5 collision::@17/(byte) collision::xpos#6 )
  (byte) collision::ypos2#2 ← phi( collision/(byte) collision::ypos2#0 collision::@17/(byte) collision::ypos2#1 )
  (byte*) collision::playfield_line#0 ← *((byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) collision::ypos2#2)
  (byte) collision::col#0 ← (byte) collision::xpos#4
  (byte) collision::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:collision::@2
collision::@2: scope:[collision]  from collision::@1 collision::@3
  (byte*) collision::playfield_line#5 ← phi( collision::@1/(byte*) collision::playfield_line#0 collision::@3/(byte*) collision::playfield_line#6 )
  (byte) collision::xpos#8 ← phi( collision::@1/(byte) collision::xpos#4 collision::@3/(byte) collision::xpos#7 )
  (byte) collision::l#4 ← phi( collision::@1/(byte) collision::l#6 collision::@3/(byte) collision::l#3 )
  (byte) collision::ypos2#5 ← phi( collision::@1/(byte) collision::ypos2#2 collision::@3/(byte) collision::ypos2#6 )
  (byte) collision::c#3 ← phi( collision::@1/(byte) collision::c#0 collision::@3/(byte) collision::c#1 )
  (byte) collision::col#6 ← phi( collision::@1/(byte) collision::col#0 collision::@3/(byte) collision::col#1 )
  (byte) collision::i#2 ← phi( collision::@1/(byte) collision::i#3 collision::@3/(byte) collision::i#4 )
  (byte*) collision::piece_gfx#1 ← phi( collision::@1/(byte*) collision::piece_gfx#2 collision::@3/(byte*) collision::piece_gfx#3 )
  (bool~) collision::$2 ← *((byte*) collision::piece_gfx#1 + (byte) collision::i#2) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) collision::$3 ← ! (bool~) collision::$2
  (byte) collision::i#1 ← ++ (byte) collision::i#2
  if((bool~) collision::$3) goto collision::@3
  to:collision::@8
collision::@3: scope:[collision]  from collision::@2 collision::@7
  (byte*) collision::playfield_line#6 ← phi( collision::@2/(byte*) collision::playfield_line#5 collision::@7/(byte*) collision::playfield_line#7 )
  (byte) collision::xpos#7 ← phi( collision::@2/(byte) collision::xpos#8 collision::@7/(byte) collision::xpos#9 )
  (byte) collision::l#3 ← phi( collision::@2/(byte) collision::l#4 collision::@7/(byte) collision::l#5 )
  (byte) collision::ypos2#6 ← phi( collision::@2/(byte) collision::ypos2#5 collision::@7/(byte) collision::ypos2#7 )
  (byte) collision::i#4 ← phi( collision::@2/(byte) collision::i#1 collision::@7/(byte) collision::i#6 )
  (byte*) collision::piece_gfx#3 ← phi( collision::@2/(byte*) collision::piece_gfx#1 collision::@7/(byte*) collision::piece_gfx#5 )
  (byte) collision::c#2 ← phi( collision::@2/(byte) collision::c#3 collision::@7/(byte) collision::c#4 )
  (byte) collision::col#2 ← phi( collision::@2/(byte) collision::col#6 collision::@7/(byte) collision::col#7 )
  (byte) collision::col#1 ← ++ (byte) collision::col#2
  (byte) collision::c#1 ← (byte) collision::c#2 + rangenext(0,3)
  (bool~) collision::$14 ← (byte) collision::c#1 != rangelast(0,3)
  if((bool~) collision::$14) goto collision::@2
  to:collision::@17
collision::@8: scope:[collision]  from collision::@2
  (byte) collision::xpos#13 ← phi( collision::@2/(byte) collision::xpos#8 )
  (byte) collision::l#10 ← phi( collision::@2/(byte) collision::l#4 )
  (byte) collision::i#10 ← phi( collision::@2/(byte) collision::i#1 )
  (byte*) collision::piece_gfx#9 ← phi( collision::@2/(byte*) collision::piece_gfx#1 )
  (byte) collision::c#8 ← phi( collision::@2/(byte) collision::c#3 )
  (byte*) collision::playfield_line#4 ← phi( collision::@2/(byte*) collision::playfield_line#5 )
  (byte) collision::col#8 ← phi( collision::@2/(byte) collision::col#6 )
  (byte) collision::ypos2#3 ← phi( collision::@2/(byte) collision::ypos2#5 )
  (byte/signed word/word/dword/signed dword~) collision::$4 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (byte) PLAYFIELD_LINES#0
  (bool~) collision::$5 ← (byte) collision::ypos2#3 >= (byte/signed word/word/dword/signed dword~) collision::$4
  (bool~) collision::$6 ← ! (bool~) collision::$5
  if((bool~) collision::$6) goto collision::@4
  to:collision::@9
collision::@4: scope:[collision]  from collision::@8
  (byte) collision::xpos#12 ← phi( collision::@8/(byte) collision::xpos#13 )
  (byte) collision::l#9 ← phi( collision::@8/(byte) collision::l#10 )
  (byte) collision::ypos2#10 ← phi( collision::@8/(byte) collision::ypos2#3 )
  (byte) collision::i#9 ← phi( collision::@8/(byte) collision::i#10 )
  (byte*) collision::piece_gfx#8 ← phi( collision::@8/(byte*) collision::piece_gfx#9 )
  (byte) collision::c#7 ← phi( collision::@8/(byte) collision::c#8 )
  (byte*) collision::playfield_line#3 ← phi( collision::@8/(byte*) collision::playfield_line#4 )
  (byte) collision::col#3 ← phi( collision::@8/(byte) collision::col#8 )
  (byte~) collision::$7 ← (byte) collision::col#3 & (byte/word/signed word/dword/signed dword) 128
  (bool~) collision::$8 ← (byte~) collision::$7 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) collision::$9 ← ! (bool~) collision::$8
  if((bool~) collision::$9) goto collision::@5
  to:collision::@11
collision::@9: scope:[collision]  from collision::@8
  (byte) collision::return#4 ← (byte) COLLISION_BOTTOM#0
  to:collision::@return
collision::@return: scope:[collision]  from collision::@11 collision::@13 collision::@15 collision::@18 collision::@9
  (byte) collision::return#14 ← phi( collision::@11/(byte) collision::return#6 collision::@13/(byte) collision::return#7 collision::@15/(byte) collision::return#8 collision::@18/(byte) collision::return#9 collision::@9/(byte) collision::return#4 )
  (byte) collision::return#5 ← (byte) collision::return#14
  return 
  to:@return
collision::@5: scope:[collision]  from collision::@4
  (byte) collision::xpos#11 ← phi( collision::@4/(byte) collision::xpos#12 )
  (byte) collision::l#8 ← phi( collision::@4/(byte) collision::l#9 )
  (byte) collision::ypos2#9 ← phi( collision::@4/(byte) collision::ypos2#10 )
  (byte) collision::i#8 ← phi( collision::@4/(byte) collision::i#9 )
  (byte*) collision::piece_gfx#7 ← phi( collision::@4/(byte*) collision::piece_gfx#8 )
  (byte) collision::c#6 ← phi( collision::@4/(byte) collision::c#7 )
  (byte*) collision::playfield_line#2 ← phi( collision::@4/(byte*) collision::playfield_line#3 )
  (byte) collision::col#4 ← phi( collision::@4/(byte) collision::col#3 )
  (bool~) collision::$10 ← (byte) collision::col#4 >= (byte) PLAYFIELD_COLS#0
  (bool~) collision::$11 ← ! (bool~) collision::$10
  if((bool~) collision::$11) goto collision::@6
  to:collision::@13
collision::@11: scope:[collision]  from collision::@4
  (byte) collision::return#6 ← (byte) COLLISION_LEFT#0
  to:collision::@return
collision::@6: scope:[collision]  from collision::@5
  (byte) collision::xpos#10 ← phi( collision::@5/(byte) collision::xpos#11 )
  (byte) collision::l#7 ← phi( collision::@5/(byte) collision::l#8 )
  (byte) collision::ypos2#8 ← phi( collision::@5/(byte) collision::ypos2#9 )
  (byte) collision::i#7 ← phi( collision::@5/(byte) collision::i#8 )
  (byte*) collision::piece_gfx#6 ← phi( collision::@5/(byte*) collision::piece_gfx#7 )
  (byte) collision::c#5 ← phi( collision::@5/(byte) collision::c#6 )
  (byte) collision::col#5 ← phi( collision::@5/(byte) collision::col#4 )
  (byte*) collision::playfield_line#1 ← phi( collision::@5/(byte*) collision::playfield_line#2 )
  (bool~) collision::$12 ← *((byte*) collision::playfield_line#1 + (byte) collision::col#5) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) collision::$13 ← ! (bool~) collision::$12
  if((bool~) collision::$13) goto collision::@7
  to:collision::@15
collision::@13: scope:[collision]  from collision::@5
  (byte) collision::return#7 ← (byte) COLLISION_RIGHT#0
  to:collision::@return
collision::@7: scope:[collision]  from collision::@6
  (byte*) collision::playfield_line#7 ← phi( collision::@6/(byte*) collision::playfield_line#1 )
  (byte) collision::xpos#9 ← phi( collision::@6/(byte) collision::xpos#10 )
  (byte) collision::l#5 ← phi( collision::@6/(byte) collision::l#7 )
  (byte) collision::ypos2#7 ← phi( collision::@6/(byte) collision::ypos2#8 )
  (byte) collision::i#6 ← phi( collision::@6/(byte) collision::i#7 )
  (byte*) collision::piece_gfx#5 ← phi( collision::@6/(byte*) collision::piece_gfx#6 )
  (byte) collision::c#4 ← phi( collision::@6/(byte) collision::c#5 )
  (byte) collision::col#7 ← phi( collision::@6/(byte) collision::col#5 )
  to:collision::@3
collision::@15: scope:[collision]  from collision::@6
  (byte) collision::return#8 ← (byte) COLLISION_PLAYFIELD#0
  to:collision::@return
collision::@17: scope:[collision]  from collision::@3
  (byte) collision::i#5 ← phi( collision::@3/(byte) collision::i#4 )
  (byte*) collision::piece_gfx#4 ← phi( collision::@3/(byte*) collision::piece_gfx#3 )
  (byte) collision::xpos#6 ← phi( collision::@3/(byte) collision::xpos#7 )
  (byte) collision::l#2 ← phi( collision::@3/(byte) collision::l#3 )
  (byte) collision::ypos2#4 ← phi( collision::@3/(byte) collision::ypos2#6 )
  (byte) collision::ypos2#1 ← (byte) collision::ypos2#4 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) collision::l#1 ← (byte) collision::l#2 + rangenext(0,3)
  (bool~) collision::$15 ← (byte) collision::l#1 != rangelast(0,3)
  if((bool~) collision::$15) goto collision::@1
  to:collision::@18
collision::@18: scope:[collision]  from collision::@17
  (byte) collision::return#9 ← (byte) COLLISION_NONE#0
  to:collision::@return
lock_current: scope:[lock_current]  from play_move_down::@13
  (byte) current_piece_color#47 ← phi( play_move_down::@13/(byte) current_piece_color#46 )
  (byte*) current_piece_gfx#46 ← phi( play_move_down::@13/(byte*) current_piece_gfx#60 )
  (byte) current_xpos#44 ← phi( play_move_down::@13/(byte) current_xpos#61 )
  (byte) current_ypos#20 ← phi( play_move_down::@13/(byte) current_ypos#36 )
  (byte) lock_current::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) lock_current::$0 ← (byte) current_ypos#20 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) lock_current::ypos2#0 ← (byte~) lock_current::$0
  (byte) lock_current::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:lock_current::@1
lock_current::@1: scope:[lock_current]  from lock_current lock_current::@5
  (byte) lock_current::l#6 ← phi( lock_current/(byte) lock_current::l#0 lock_current::@5/(byte) lock_current::l#1 )
  (byte) current_piece_color#34 ← phi( lock_current/(byte) current_piece_color#47 lock_current::@5/(byte) current_piece_color#48 )
  (byte) lock_current::i#3 ← phi( lock_current/(byte) lock_current::i#0 lock_current::@5/(byte) lock_current::i#5 )
  (byte*) current_piece_gfx#32 ← phi( lock_current/(byte*) current_piece_gfx#46 lock_current::@5/(byte*) current_piece_gfx#47 )
  (byte) current_xpos#26 ← phi( lock_current/(byte) current_xpos#44 lock_current::@5/(byte) current_xpos#45 )
  (byte) lock_current::ypos2#2 ← phi( lock_current/(byte) lock_current::ypos2#0 lock_current::@5/(byte) lock_current::ypos2#1 )
  (byte*) lock_current::playfield_line#0 ← *((byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) lock_current::ypos2#2)
  (byte) lock_current::col#0 ← (byte) current_xpos#26
  (byte) lock_current::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:lock_current::@2
lock_current::@2: scope:[lock_current]  from lock_current::@1 lock_current::@3
  (byte) current_xpos#75 ← phi( lock_current::@1/(byte) current_xpos#26 lock_current::@3/(byte) current_xpos#62 )
  (byte) lock_current::l#4 ← phi( lock_current::@1/(byte) lock_current::l#6 lock_current::@3/(byte) lock_current::l#3 )
  (byte) lock_current::ypos2#5 ← phi( lock_current::@1/(byte) lock_current::ypos2#2 lock_current::@3/(byte) lock_current::ypos2#4 )
  (byte*) lock_current::playfield_line#2 ← phi( lock_current::@1/(byte*) lock_current::playfield_line#0 lock_current::@3/(byte*) lock_current::playfield_line#3 )
  (byte) current_piece_color#24 ← phi( lock_current::@1/(byte) current_piece_color#34 lock_current::@3/(byte) current_piece_color#35 )
  (byte) lock_current::c#3 ← phi( lock_current::@1/(byte) lock_current::c#0 lock_current::@3/(byte) lock_current::c#1 )
  (byte) lock_current::col#4 ← phi( lock_current::@1/(byte) lock_current::col#0 lock_current::@3/(byte) lock_current::col#1 )
  (byte) lock_current::i#2 ← phi( lock_current::@1/(byte) lock_current::i#3 lock_current::@3/(byte) lock_current::i#4 )
  (byte*) current_piece_gfx#19 ← phi( lock_current::@1/(byte*) current_piece_gfx#32 lock_current::@3/(byte*) current_piece_gfx#33 )
  (bool~) lock_current::$1 ← *((byte*) current_piece_gfx#19 + (byte) lock_current::i#2) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) lock_current::$2 ← ! (bool~) lock_current::$1
  (byte) lock_current::i#1 ← ++ (byte) lock_current::i#2
  if((bool~) lock_current::$2) goto lock_current::@3
  to:lock_current::@4
lock_current::@3: scope:[lock_current]  from lock_current::@2 lock_current::@4
  (byte) current_xpos#62 ← phi( lock_current::@2/(byte) current_xpos#75 lock_current::@4/(byte) current_xpos#76 )
  (byte*) lock_current::playfield_line#3 ← phi( lock_current::@2/(byte*) lock_current::playfield_line#2 lock_current::@4/(byte*) lock_current::playfield_line#1 )
  (byte) current_piece_color#35 ← phi( lock_current::@2/(byte) current_piece_color#24 lock_current::@4/(byte) current_piece_color#14 )
  (byte) lock_current::l#3 ← phi( lock_current::@2/(byte) lock_current::l#4 lock_current::@4/(byte) lock_current::l#5 )
  (byte) lock_current::ypos2#4 ← phi( lock_current::@2/(byte) lock_current::ypos2#5 lock_current::@4/(byte) lock_current::ypos2#6 )
  (byte) lock_current::i#4 ← phi( lock_current::@2/(byte) lock_current::i#1 lock_current::@4/(byte) lock_current::i#6 )
  (byte*) current_piece_gfx#33 ← phi( lock_current::@2/(byte*) current_piece_gfx#19 lock_current::@4/(byte*) current_piece_gfx#48 )
  (byte) lock_current::c#2 ← phi( lock_current::@2/(byte) lock_current::c#3 lock_current::@4/(byte) lock_current::c#4 )
  (byte) lock_current::col#2 ← phi( lock_current::@2/(byte) lock_current::col#4 lock_current::@4/(byte) lock_current::col#3 )
  (byte) lock_current::col#1 ← ++ (byte) lock_current::col#2
  (byte) lock_current::c#1 ← (byte) lock_current::c#2 + rangenext(0,3)
  (bool~) lock_current::$3 ← (byte) lock_current::c#1 != rangelast(0,3)
  if((bool~) lock_current::$3) goto lock_current::@2
  to:lock_current::@5
lock_current::@4: scope:[lock_current]  from lock_current::@2
  (byte) current_xpos#76 ← phi( lock_current::@2/(byte) current_xpos#75 )
  (byte) lock_current::l#5 ← phi( lock_current::@2/(byte) lock_current::l#4 )
  (byte) lock_current::ypos2#6 ← phi( lock_current::@2/(byte) lock_current::ypos2#5 )
  (byte) lock_current::i#6 ← phi( lock_current::@2/(byte) lock_current::i#1 )
  (byte*) current_piece_gfx#48 ← phi( lock_current::@2/(byte*) current_piece_gfx#19 )
  (byte) lock_current::c#4 ← phi( lock_current::@2/(byte) lock_current::c#3 )
  (byte) lock_current::col#3 ← phi( lock_current::@2/(byte) lock_current::col#4 )
  (byte*) lock_current::playfield_line#1 ← phi( lock_current::@2/(byte*) lock_current::playfield_line#2 )
  (byte) current_piece_color#14 ← phi( lock_current::@2/(byte) current_piece_color#24 )
  *((byte*) lock_current::playfield_line#1 + (byte) lock_current::col#3) ← (byte) current_piece_color#14
  to:lock_current::@3
lock_current::@5: scope:[lock_current]  from lock_current::@3
  (byte) current_piece_color#48 ← phi( lock_current::@3/(byte) current_piece_color#35 )
  (byte) lock_current::i#5 ← phi( lock_current::@3/(byte) lock_current::i#4 )
  (byte*) current_piece_gfx#47 ← phi( lock_current::@3/(byte*) current_piece_gfx#33 )
  (byte) current_xpos#45 ← phi( lock_current::@3/(byte) current_xpos#62 )
  (byte) lock_current::l#2 ← phi( lock_current::@3/(byte) lock_current::l#3 )
  (byte) lock_current::ypos2#3 ← phi( lock_current::@3/(byte) lock_current::ypos2#4 )
  (byte) lock_current::ypos2#1 ← (byte) lock_current::ypos2#3 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) lock_current::l#1 ← (byte) lock_current::l#2 + rangenext(0,3)
  (bool~) lock_current::$4 ← (byte) lock_current::l#1 != rangelast(0,3)
  if((bool~) lock_current::$4) goto lock_current::@1
  to:lock_current::@return
lock_current::@return: scope:[lock_current]  from lock_current::@5
  return 
  to:@return
spawn_current: scope:[spawn_current]  from main::@23 play_move_down::@20
  (byte) spawn_current::piece_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  to:spawn_current::@1
spawn_current::@1: scope:[spawn_current]  from spawn_current spawn_current::@7
  (byte) spawn_current::piece_idx#2 ← phi( spawn_current/(byte) spawn_current::piece_idx#0 spawn_current::@7/(byte) spawn_current::piece_idx#1 )
  (bool~) spawn_current::$0 ← (byte) spawn_current::piece_idx#2 == (byte/signed byte/word/signed word/dword/signed dword) 7
  if((bool~) spawn_current::$0) goto spawn_current::@2
  to:spawn_current::@3
spawn_current::@2: scope:[spawn_current]  from spawn_current::@1
  call sid_rnd 
  (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#1
  to:spawn_current::@7
spawn_current::@7: scope:[spawn_current]  from spawn_current::@2
  (byte) sid_rnd::return#4 ← phi( spawn_current::@2/(byte) sid_rnd::return#2 )
  (byte~) spawn_current::$1 ← (byte) sid_rnd::return#4
  (byte~) spawn_current::$2 ← (byte~) spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) spawn_current::piece_idx#1 ← (byte~) spawn_current::$2
  to:spawn_current::@1
spawn_current::@3: scope:[spawn_current]  from spawn_current::@1
  (byte) spawn_current::piece_idx#3 ← phi( spawn_current::@1/(byte) spawn_current::piece_idx#2 )
  (byte~) spawn_current::$3 ← (byte) spawn_current::piece_idx#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) current_piece#6 ← ((byte*)) *((word[]) PIECES#0 + (byte~) spawn_current::$3)
  (byte) current_orientation#9 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*~) spawn_current::$4 ← (byte*) current_piece#6 + (byte) current_orientation#9
  (byte*) current_piece_gfx#9 ← (byte*~) spawn_current::$4
  (byte) current_xpos#10 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) current_ypos#7 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) current_piece_color#6 ← *((byte[]) PIECES_COLORS#0 + (byte) spawn_current::piece_idx#3)
  to:spawn_current::@return
spawn_current::@return: scope:[spawn_current]  from spawn_current::@3
  (byte) current_piece_color#15 ← phi( spawn_current::@3/(byte) current_piece_color#6 )
  (byte) current_ypos#21 ← phi( spawn_current::@3/(byte) current_ypos#7 )
  (byte) current_xpos#27 ← phi( spawn_current::@3/(byte) current_xpos#10 )
  (byte*) current_piece_gfx#20 ← phi( spawn_current::@3/(byte*) current_piece_gfx#9 )
  (byte) current_orientation#24 ← phi( spawn_current::@3/(byte) current_orientation#9 )
  (byte*) current_piece#16 ← phi( spawn_current::@3/(byte*) current_piece#6 )
  (byte*) current_piece#7 ← (byte*) current_piece#16
  (byte) current_orientation#10 ← (byte) current_orientation#24
  (byte*) current_piece_gfx#10 ← (byte*) current_piece_gfx#20
  (byte) current_xpos#11 ← (byte) current_xpos#27
  (byte) current_ypos#8 ← (byte) current_ypos#21
  (byte) current_piece_color#7 ← (byte) current_piece_color#15
  return 
  to:@return
remove_lines: scope:[remove_lines]  from play_move_down::@19
  (byte~) remove_lines::$0 ← (byte) PLAYFIELD_LINES#0 * (byte) PLAYFIELD_COLS#0
  (byte/signed word/word/dword/signed dword~) remove_lines::$1 ← (byte~) remove_lines::$0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) remove_lines::r#0 ← (byte/signed word/word/dword/signed dword~) remove_lines::$1
  (byte~) remove_lines::$2 ← (byte) PLAYFIELD_LINES#0 * (byte) PLAYFIELD_COLS#0
  (byte/signed word/word/dword/signed dword~) remove_lines::$3 ← (byte~) remove_lines::$2 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) remove_lines::w#0 ← (byte/signed word/word/dword/signed dword~) remove_lines::$3
  (byte/signed word/word/dword/signed dword~) remove_lines::$4 ← (byte) PLAYFIELD_LINES#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) remove_lines::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:remove_lines::@1
remove_lines::@1: scope:[remove_lines]  from remove_lines remove_lines::@4
  (byte) remove_lines::y#8 ← phi( remove_lines/(byte) remove_lines::y#0 remove_lines::@4/(byte) remove_lines::y#1 )
  (byte) remove_lines::w#12 ← phi( remove_lines/(byte) remove_lines::w#0 remove_lines::@4/(byte) remove_lines::w#11 )
  (byte) remove_lines::r#3 ← phi( remove_lines/(byte) remove_lines::r#0 remove_lines::@4/(byte) remove_lines::r#5 )
  (byte) remove_lines::full#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte/signed word/word/dword/signed dword~) remove_lines::$5 ← (byte) PLAYFIELD_COLS#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) remove_lines::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:remove_lines::@2
remove_lines::@2: scope:[remove_lines]  from remove_lines::@1 remove_lines::@3
  (byte) remove_lines::y#6 ← phi( remove_lines::@1/(byte) remove_lines::y#8 remove_lines::@3/(byte) remove_lines::y#5 )
  (byte) remove_lines::full#4 ← phi( remove_lines::@1/(byte) remove_lines::full#0 remove_lines::@3/(byte) remove_lines::full#3 )
  (byte) remove_lines::x#3 ← phi( remove_lines::@1/(byte) remove_lines::x#0 remove_lines::@3/(byte) remove_lines::x#1 )
  (byte) remove_lines::w#8 ← phi( remove_lines::@1/(byte) remove_lines::w#12 remove_lines::@3/(byte) remove_lines::w#1 )
  (byte) remove_lines::r#2 ← phi( remove_lines::@1/(byte) remove_lines::r#3 remove_lines::@3/(byte) remove_lines::r#4 )
  (byte) remove_lines::c#0 ← *((byte[$22]) playfield#0 + (byte) remove_lines::r#2)
  (byte) remove_lines::r#1 ← -- (byte) remove_lines::r#2
  (bool~) remove_lines::$6 ← (byte) remove_lines::c#0 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) remove_lines::$7 ← ! (bool~) remove_lines::$6
  if((bool~) remove_lines::$7) goto remove_lines::@3
  to:remove_lines::@8
remove_lines::@3: scope:[remove_lines]  from remove_lines::@2 remove_lines::@8
  (byte) remove_lines::y#5 ← phi( remove_lines::@2/(byte) remove_lines::y#6 remove_lines::@8/(byte) remove_lines::y#7 )
  (byte) remove_lines::full#3 ← phi( remove_lines::@2/(byte) remove_lines::full#4 remove_lines::@8/(byte) remove_lines::full#1 )
  (byte) remove_lines::r#4 ← phi( remove_lines::@2/(byte) remove_lines::r#1 remove_lines::@8/(byte) remove_lines::r#6 )
  (byte) remove_lines::x#2 ← phi( remove_lines::@2/(byte) remove_lines::x#3 remove_lines::@8/(byte) remove_lines::x#4 )
  (byte) remove_lines::w#4 ← phi( remove_lines::@2/(byte) remove_lines::w#8 remove_lines::@8/(byte) remove_lines::w#9 )
  (byte) remove_lines::c#1 ← phi( remove_lines::@2/(byte) remove_lines::c#0 remove_lines::@8/(byte) remove_lines::c#2 )
  *((byte[$22]) playfield#0 + (byte) remove_lines::w#4) ← (byte) remove_lines::c#1
  (byte) remove_lines::w#1 ← -- (byte) remove_lines::w#4
  (byte) remove_lines::x#1 ← (byte) remove_lines::x#2 + rangenext(0,remove_lines::$5)
  (bool~) remove_lines::$8 ← (byte) remove_lines::x#1 != rangelast(0,remove_lines::$5)
  if((bool~) remove_lines::$8) goto remove_lines::@2
  to:remove_lines::@9
remove_lines::@8: scope:[remove_lines]  from remove_lines::@2
  (byte) remove_lines::y#7 ← phi( remove_lines::@2/(byte) remove_lines::y#6 )
  (byte) remove_lines::r#6 ← phi( remove_lines::@2/(byte) remove_lines::r#1 )
  (byte) remove_lines::x#4 ← phi( remove_lines::@2/(byte) remove_lines::x#3 )
  (byte) remove_lines::w#9 ← phi( remove_lines::@2/(byte) remove_lines::w#8 )
  (byte) remove_lines::c#2 ← phi( remove_lines::@2/(byte) remove_lines::c#0 )
  (byte) remove_lines::full#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:remove_lines::@3
remove_lines::@9: scope:[remove_lines]  from remove_lines::@3
  (byte) remove_lines::r#8 ← phi( remove_lines::@3/(byte) remove_lines::r#4 )
  (byte) remove_lines::w#10 ← phi( remove_lines::@3/(byte) remove_lines::w#1 )
  (byte) remove_lines::y#4 ← phi( remove_lines::@3/(byte) remove_lines::y#5 )
  (byte) remove_lines::full#2 ← phi( remove_lines::@3/(byte) remove_lines::full#3 )
  (bool~) remove_lines::$9 ← (byte) remove_lines::full#2 == (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) remove_lines::$10 ← ! (bool~) remove_lines::$9
  if((bool~) remove_lines::$10) goto remove_lines::@4
  to:remove_lines::@10
remove_lines::@4: scope:[remove_lines]  from remove_lines::@10 remove_lines::@9
  (byte) remove_lines::r#5 ← phi( remove_lines::@10/(byte) remove_lines::r#7 remove_lines::@9/(byte) remove_lines::r#8 )
  (byte) remove_lines::w#11 ← phi( remove_lines::@10/(byte) remove_lines::w#2 remove_lines::@9/(byte) remove_lines::w#10 )
  (byte) remove_lines::y#2 ← phi( remove_lines::@10/(byte) remove_lines::y#3 remove_lines::@9/(byte) remove_lines::y#4 )
  (byte) remove_lines::y#1 ← (byte) remove_lines::y#2 + rangenext(0,remove_lines::$4)
  (bool~) remove_lines::$12 ← (byte) remove_lines::y#1 != rangelast(0,remove_lines::$4)
  if((bool~) remove_lines::$12) goto remove_lines::@1
  to:remove_lines::@5
remove_lines::@10: scope:[remove_lines]  from remove_lines::@9
  (byte) remove_lines::r#7 ← phi( remove_lines::@9/(byte) remove_lines::r#8 )
  (byte) remove_lines::y#3 ← phi( remove_lines::@9/(byte) remove_lines::y#4 )
  (byte) remove_lines::w#5 ← phi( remove_lines::@9/(byte) remove_lines::w#10 )
  (byte~) remove_lines::$11 ← (byte) remove_lines::w#5 + (byte) PLAYFIELD_COLS#0
  (byte) remove_lines::w#2 ← (byte~) remove_lines::$11
  to:remove_lines::@4
remove_lines::@5: scope:[remove_lines]  from remove_lines::@4 remove_lines::@6
  (byte) remove_lines::w#6 ← phi( remove_lines::@4/(byte) remove_lines::w#11 remove_lines::@6/(byte) remove_lines::w#3 )
  (bool~) remove_lines::$13 ← (byte) remove_lines::w#6 != (byte/word/signed word/dword/signed dword) 255
  if((bool~) remove_lines::$13) goto remove_lines::@6
  to:remove_lines::@return
remove_lines::@6: scope:[remove_lines]  from remove_lines::@5
  (byte) remove_lines::w#7 ← phi( remove_lines::@5/(byte) remove_lines::w#6 )
  *((byte[$22]) playfield#0 + (byte) remove_lines::w#7) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) remove_lines::w#3 ← -- (byte) remove_lines::w#7
  to:remove_lines::@5
remove_lines::@return: scope:[remove_lines]  from remove_lines::@5
  return 
  to:@return
tables_init: scope:[tables_init]  from main::@22
  (byte) tables_init::idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) tables_init::pli#0 ← (byte[$22]) playfield#0
  (byte/signed word/word/dword/signed dword~) tables_init::$0 ← (byte) PLAYFIELD_LINES#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) tables_init::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:tables_init::@1
tables_init::@1: scope:[tables_init]  from tables_init tables_init::@1
  (byte) tables_init::idx#2 ← phi( tables_init/(byte) tables_init::idx#0 tables_init::@1/(byte) tables_init::idx#1 )
  (byte*) tables_init::pli#2 ← phi( tables_init/(byte*) tables_init::pli#0 tables_init::@1/(byte*) tables_init::pli#1 )
  (byte) tables_init::j#2 ← phi( tables_init/(byte) tables_init::j#0 tables_init::@1/(byte) tables_init::j#1 )
  (byte~) tables_init::$1 ← (byte) tables_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) tables_init::$1) ← (byte*) tables_init::pli#2
  *((byte[$23]) playfield_lines_idx#0 + (byte) tables_init::j#2) ← (byte) tables_init::idx#2
  (byte*) tables_init::pli#1 ← (byte*) tables_init::pli#2 + (byte) PLAYFIELD_COLS#0
  (byte) tables_init::idx#1 ← (byte) tables_init::idx#2 + (byte) PLAYFIELD_COLS#0
  (byte) tables_init::j#1 ← (byte) tables_init::j#2 + rangenext(0,tables_init::$0)
  (bool~) tables_init::$2 ← (byte) tables_init::j#1 != rangelast(0,tables_init::$0)
  if((bool~) tables_init::$2) goto tables_init::@1
  to:tables_init::@2
tables_init::@2: scope:[tables_init]  from tables_init::@1
  (byte~) tables_init::$3 ← (byte) PLAYFIELD_COLS#0 * (byte) PLAYFIELD_LINES#0
  *((byte[$23]) playfield_lines_idx#0 + (byte) PLAYFIELD_LINES#0) ← (byte~) tables_init::$3
  to:tables_init::@return
tables_init::@return: scope:[tables_init]  from tables_init::@2
  return 
  to:@return
@22: scope:[]  from @17
  (byte) current_movedown_counter#26 ← phi( @17/(byte) current_movedown_counter#33 )
  (byte) keyboard_modifiers#32 ← phi( @17/(byte) keyboard_modifiers#38 )
  (byte) keyboard_events_size#35 ← phi( @17/(byte) keyboard_events_size#44 )
  (byte) current_piece_color#37 ← phi( @17/(byte) current_piece_color#49 )
  (byte) current_ypos#50 ← phi( @17/(byte) current_ypos#59 )
  (byte) current_xpos#65 ← phi( @17/(byte) current_xpos#77 )
  (byte*) current_piece_gfx#52 ← phi( @17/(byte*) current_piece_gfx#63 )
  (byte) current_orientation#50 ← phi( @17/(byte) current_orientation#61 )
  (byte*) current_piece#41 ← phi( @17/(byte*) current_piece#53 )
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) CHARSET#0 ← ((byte*)) (word/signed word/dword/signed dword) 8192
  kickasm(location (byte*) CHARSET#0) {{ .var charset = LoadPicture("charset.png", List().add($000000, $ffffff, $523fa0, $77c1c9))
    .for (var c=0; c<16; c++)
        .for (var y=0;y<8; y++)
            .byte charset.getMulticolorByte(c,y)
 }}
  (byte/signed word/word/dword/signed dword~) $24 ← (byte) PLAYFIELD_LINES#0 + (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte*[$24]) screen_lines#0 ← { fill( $24, 0) }
  to:@25
render_init: scope:[render_init]  from main::@21
  (byte*) SCREEN#1 ← phi( main::@21/(byte*) SCREEN#2 )
  (byte*) fill::start#0 ← (byte*) SCREEN#1
  (word) fill::size#0 ← (word/signed word/dword/signed dword) 1000
  (byte) fill::val#0 ← (byte/word/signed word/dword/signed dword) 160
  call fill 
  to:render_init::@7
render_init::@7: scope:[render_init]  from render_init
  (byte*) fill::start#1 ← (byte*) COLS#0
  (word) fill::size#1 ← (word/signed word/dword/signed dword) 1000
  (byte) fill::val#1 ← (byte) BLACK#0
  call fill 
  to:render_init::@8
render_init::@8: scope:[render_init]  from render_init::@7
  (byte*~) render_init::$2 ← (byte*) COLS#0 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*~) render_init::$3 ← (byte*~) render_init::$2 + (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte*) render_init::li#0 ← (byte*~) render_init::$3
  (byte/signed word/word/dword/signed dword~) render_init::$4 ← (byte) PLAYFIELD_LINES#0 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) render_init::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@1 render_init::@8
  (byte*) render_init::li#2 ← phi( render_init::@1/(byte*) render_init::li#1 render_init::@8/(byte*) render_init::li#0 )
  (byte) render_init::i#2 ← phi( render_init::@1/(byte) render_init::i#1 render_init::@8/(byte) render_init::i#0 )
  (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*[$24]) screen_lines#0 + (byte~) render_init::$5) ← (byte*) render_init::li#2
  (byte*) render_init::li#1 ← (byte*) render_init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte) render_init::i#1 ← (byte) render_init::i#2 + rangenext(0,render_init::$4)
  (bool~) render_init::$6 ← (byte) render_init::i#1 != rangelast(0,render_init::$4)
  if((bool~) render_init::$6) goto render_init::@1
  to:render_init::@4
render_init::@4: scope:[render_init]  from render_init::@1
  (byte*~) render_init::$7 ← (byte*) COLS#0 + (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte*) render_init::line#0 ← (byte*~) render_init::$7
  (byte/signed word/word/dword/signed dword~) render_init::$8 ← (byte) PLAYFIELD_LINES#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_init::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::@4 render_init::@5
  (byte) render_init::l#4 ← phi( render_init::@4/(byte) render_init::l#0 render_init::@5/(byte) render_init::l#1 )
  (byte*) render_init::line#4 ← phi( render_init::@4/(byte*) render_init::line#0 render_init::@5/(byte*) render_init::line#1 )
  (byte/signed word/word/dword/signed dword~) render_init::$9 ← (byte) PLAYFIELD_COLS#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_init::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::@2 render_init::@3
  (byte) render_init::l#3 ← phi( render_init::@2/(byte) render_init::l#4 render_init::@3/(byte) render_init::l#3 )
  (byte) render_init::c#2 ← phi( render_init::@2/(byte) render_init::c#0 render_init::@3/(byte) render_init::c#1 )
  (byte*) render_init::line#2 ← phi( render_init::@2/(byte*) render_init::line#4 render_init::@3/(byte*) render_init::line#2 )
  (byte*~) render_init::$10 ← (byte*) render_init::line#2 + (byte) render_init::c#2
  *((byte*~) render_init::$10) ← (byte) DARK_GREY#0
  (byte) render_init::c#1 ← (byte) render_init::c#2 + rangenext(0,render_init::$9)
  (bool~) render_init::$11 ← (byte) render_init::c#1 != rangelast(0,render_init::$9)
  if((bool~) render_init::$11) goto render_init::@3
  to:render_init::@5
render_init::@5: scope:[render_init]  from render_init::@3
  (byte) render_init::l#2 ← phi( render_init::@3/(byte) render_init::l#3 )
  (byte*) render_init::line#3 ← phi( render_init::@3/(byte*) render_init::line#2 )
  (byte*) render_init::line#1 ← (byte*) render_init::line#3 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte) render_init::l#1 ← (byte) render_init::l#2 + rangenext(0,render_init::$8)
  (bool~) render_init::$12 ← (byte) render_init::l#1 != rangelast(0,render_init::$8)
  if((bool~) render_init::$12) goto render_init::@2
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@5
  return 
  to:@return
render_playfield: scope:[render_playfield]  from main::@19 main::@24
  (byte) render_playfield::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte/signed word/word/dword/signed dword~) render_playfield::$0 ← (byte) PLAYFIELD_LINES#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_playfield::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  (byte) render_playfield::i#3 ← phi( render_playfield/(byte) render_playfield::i#0 render_playfield::@3/(byte) render_playfield::i#4 )
  (byte) render_playfield::l#2 ← phi( render_playfield/(byte) render_playfield::l#0 render_playfield::@3/(byte) render_playfield::l#1 )
  (byte~) render_playfield::$1 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) render_playfield::line#0 ← *((byte*[$24]) screen_lines#0 + (byte~) render_playfield::$1)
  (byte/signed word/word/dword/signed dword~) render_playfield::$2 ← (byte) PLAYFIELD_COLS#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_playfield::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  (byte) render_playfield::l#4 ← phi( render_playfield::@1/(byte) render_playfield::l#2 render_playfield::@2/(byte) render_playfield::l#4 )
  (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte) render_playfield::c#0 render_playfield::@2/(byte) render_playfield::c#1 )
  (byte*) render_playfield::line#2 ← phi( render_playfield::@1/(byte*) render_playfield::line#0 render_playfield::@2/(byte*) render_playfield::line#1 )
  (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  *((byte*) render_playfield::line#2) ← *((byte[$22]) playfield#0 + (byte) render_playfield::i#2)
  (byte*) render_playfield::line#1 ← ++ (byte*) render_playfield::line#2
  (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  (byte) render_playfield::c#1 ← (byte) render_playfield::c#2 + rangenext(0,render_playfield::$2)
  (bool~) render_playfield::$3 ← (byte) render_playfield::c#1 != rangelast(0,render_playfield::$2)
  if((bool~) render_playfield::$3) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  (byte) render_playfield::i#4 ← phi( render_playfield::@2/(byte) render_playfield::i#1 )
  (byte) render_playfield::l#3 ← phi( render_playfield::@2/(byte) render_playfield::l#4 )
  (byte) render_playfield::l#1 ← (byte) render_playfield::l#3 + rangenext(0,render_playfield::$0)
  (bool~) render_playfield::$4 ← (byte) render_playfield::l#1 != rangelast(0,render_playfield::$0)
  if((bool~) render_playfield::$4) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  return 
  to:@return
render_current: scope:[render_current]  from main::@25 main::@32
  (byte) current_piece_color#67 ← phi( main::@25/(byte) current_piece_color#39 main::@32/(byte) current_piece_color#55 )
  (byte*) current_piece_gfx#64 ← phi( main::@25/(byte*) current_piece_gfx#54 main::@32/(byte*) current_piece_gfx#69 )
  (byte) current_xpos#63 ← phi( main::@25/(byte) current_xpos#67 main::@32/(byte) current_xpos#78 )
  (byte) current_ypos#22 ← phi( main::@25/(byte) current_ypos#37 main::@32/(byte) current_ypos#38 )
  (byte) render_current::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) render_current::$0 ← (byte) current_ypos#22 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_current::ypos2#0 ← (byte~) render_current::$0
  (byte) render_current::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_current::@1
render_current::@1: scope:[render_current]  from render_current render_current::@2
  (byte) current_piece_color#60 ← phi( render_current/(byte) current_piece_color#67 render_current::@2/(byte) current_piece_color#68 )
  (byte) render_current::i#5 ← phi( render_current/(byte) render_current::i#0 render_current::@2/(byte) render_current::i#8 )
  (byte*) current_piece_gfx#49 ← phi( render_current/(byte*) current_piece_gfx#64 render_current::@2/(byte*) current_piece_gfx#65 )
  (byte) current_xpos#46 ← phi( render_current/(byte) current_xpos#63 render_current::@2/(byte) current_xpos#64 )
  (byte) render_current::l#3 ← phi( render_current/(byte) render_current::l#0 render_current::@2/(byte) render_current::l#1 )
  (byte) render_current::ypos2#2 ← phi( render_current/(byte) render_current::ypos2#0 render_current::@2/(byte) render_current::ypos2#1 )
  (byte/signed word/word/dword/signed dword~) render_current::$1 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (byte) PLAYFIELD_LINES#0
  (bool~) render_current::$2 ← (byte) render_current::ypos2#2 < (byte/signed word/word/dword/signed dword~) render_current::$1
  (bool~) render_current::$3 ← ! (bool~) render_current::$2
  if((bool~) render_current::$3) goto render_current::@2
  to:render_current::@6
render_current::@2: scope:[render_current]  from render_current::@1 render_current::@4
  (byte) current_piece_color#68 ← phi( render_current::@1/(byte) current_piece_color#60 render_current::@4/(byte) current_piece_color#50 )
  (byte) render_current::i#8 ← phi( render_current::@1/(byte) render_current::i#5 render_current::@4/(byte) render_current::i#3 )
  (byte*) current_piece_gfx#65 ← phi( render_current::@1/(byte*) current_piece_gfx#49 render_current::@4/(byte*) current_piece_gfx#34 )
  (byte) current_xpos#64 ← phi( render_current::@1/(byte) current_xpos#46 render_current::@4/(byte) current_xpos#79 )
  (byte) render_current::l#2 ← phi( render_current::@1/(byte) render_current::l#3 render_current::@4/(byte) render_current::l#4 )
  (byte) render_current::ypos2#3 ← phi( render_current::@1/(byte) render_current::ypos2#2 render_current::@4/(byte) render_current::ypos2#5 )
  (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#3 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) render_current::l#1 ← (byte) render_current::l#2 + rangenext(0,3)
  (bool~) render_current::$9 ← (byte) render_current::l#1 != rangelast(0,3)
  if((bool~) render_current::$9) goto render_current::@1
  to:render_current::@return
render_current::@6: scope:[render_current]  from render_current::@1
  (byte) current_piece_color#51 ← phi( render_current::@1/(byte) current_piece_color#60 )
  (byte) render_current::l#8 ← phi( render_current::@1/(byte) render_current::l#3 )
  (byte) render_current::i#4 ← phi( render_current::@1/(byte) render_current::i#5 )
  (byte*) current_piece_gfx#35 ← phi( render_current::@1/(byte*) current_piece_gfx#49 )
  (byte) current_xpos#28 ← phi( render_current::@1/(byte) current_xpos#46 )
  (byte) render_current::ypos2#4 ← phi( render_current::@1/(byte) render_current::ypos2#2 )
  (byte*) render_current::screen_line#0 ← *((byte*[$24]) screen_lines#0 + (byte) render_current::ypos2#4)
  (byte) render_current::xpos#0 ← (byte) current_xpos#28
  (byte) render_current::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_current::@3
render_current::@3: scope:[render_current]  from render_current::@4 render_current::@6
  (byte) current_xpos#85 ← phi( render_current::@4/(byte) current_xpos#79 render_current::@6/(byte) current_xpos#28 )
  (byte*) render_current::screen_line#3 ← phi( render_current::@4/(byte*) render_current::screen_line#4 render_current::@6/(byte*) render_current::screen_line#0 )
  (byte) current_piece_color#36 ← phi( render_current::@4/(byte) current_piece_color#50 render_current::@6/(byte) current_piece_color#51 )
  (byte) render_current::l#5 ← phi( render_current::@4/(byte) render_current::l#4 render_current::@6/(byte) render_current::l#8 )
  (byte) render_current::ypos2#6 ← phi( render_current::@4/(byte) render_current::ypos2#5 render_current::@6/(byte) render_current::ypos2#4 )
  (byte) render_current::c#3 ← phi( render_current::@4/(byte) render_current::c#1 render_current::@6/(byte) render_current::c#0 )
  (byte) render_current::xpos#5 ← phi( render_current::@4/(byte) render_current::xpos#1 render_current::@6/(byte) render_current::xpos#0 )
  (byte) render_current::i#2 ← phi( render_current::@4/(byte) render_current::i#3 render_current::@6/(byte) render_current::i#4 )
  (byte*) current_piece_gfx#21 ← phi( render_current::@4/(byte*) current_piece_gfx#34 render_current::@6/(byte*) current_piece_gfx#35 )
  (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#21 + (byte) render_current::i#2)
  (byte) render_current::i#1 ← ++ (byte) render_current::i#2
  (bool~) render_current::$4 ← (byte) render_current::current_cell#0 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) render_current::$5 ← ! (bool~) render_current::$4
  if((bool~) render_current::$5) goto render_current::@4
  to:render_current::@7
render_current::@4: scope:[render_current]  from render_current::@3 render_current::@5 render_current::@8
  (byte*) render_current::screen_line#4 ← phi( render_current::@3/(byte*) render_current::screen_line#3 render_current::@5/(byte*) render_current::screen_line#5 render_current::@8/(byte*) render_current::screen_line#1 )
  (byte) current_piece_color#50 ← phi( render_current::@3/(byte) current_piece_color#36 render_current::@5/(byte) current_piece_color#61 render_current::@8/(byte) current_piece_color#16 )
  (byte) current_xpos#79 ← phi( render_current::@3/(byte) current_xpos#85 render_current::@5/(byte) current_xpos#86 render_current::@8/(byte) current_xpos#87 )
  (byte) render_current::i#3 ← phi( render_current::@3/(byte) render_current::i#1 render_current::@5/(byte) render_current::i#6 render_current::@8/(byte) render_current::i#7 )
  (byte*) current_piece_gfx#34 ← phi( render_current::@3/(byte*) current_piece_gfx#21 render_current::@5/(byte*) current_piece_gfx#50 render_current::@8/(byte*) current_piece_gfx#51 )
  (byte) render_current::l#4 ← phi( render_current::@3/(byte) render_current::l#5 render_current::@5/(byte) render_current::l#6 render_current::@8/(byte) render_current::l#7 )
  (byte) render_current::ypos2#5 ← phi( render_current::@3/(byte) render_current::ypos2#6 render_current::@5/(byte) render_current::ypos2#7 render_current::@8/(byte) render_current::ypos2#8 )
  (byte) render_current::c#2 ← phi( render_current::@3/(byte) render_current::c#3 render_current::@5/(byte) render_current::c#4 render_current::@8/(byte) render_current::c#5 )
  (byte) render_current::xpos#2 ← phi( render_current::@3/(byte) render_current::xpos#5 render_current::@5/(byte) render_current::xpos#6 render_current::@8/(byte) render_current::xpos#4 )
  (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2
  (byte) render_current::c#1 ← (byte) render_current::c#2 + rangenext(0,3)
  (bool~) render_current::$8 ← (byte) render_current::c#1 != rangelast(0,3)
  if((bool~) render_current::$8) goto render_current::@3
  to:render_current::@2
render_current::@7: scope:[render_current]  from render_current::@3
  (byte) current_xpos#92 ← phi( render_current::@3/(byte) current_xpos#85 )
  (byte) render_current::i#9 ← phi( render_current::@3/(byte) render_current::i#1 )
  (byte*) current_piece_gfx#66 ← phi( render_current::@3/(byte*) current_piece_gfx#21 )
  (byte) render_current::l#9 ← phi( render_current::@3/(byte) render_current::l#5 )
  (byte) render_current::ypos2#9 ← phi( render_current::@3/(byte) render_current::ypos2#6 )
  (byte) render_current::c#6 ← phi( render_current::@3/(byte) render_current::c#3 )
  (byte*) render_current::screen_line#2 ← phi( render_current::@3/(byte*) render_current::screen_line#3 )
  (byte) current_piece_color#25 ← phi( render_current::@3/(byte) current_piece_color#36 )
  (byte) render_current::xpos#3 ← phi( render_current::@3/(byte) render_current::xpos#5 )
  (bool~) render_current::$6 ← (byte) render_current::xpos#3 < (byte) PLAYFIELD_COLS#0
  (bool~) render_current::$7 ← ! (bool~) render_current::$6
  if((bool~) render_current::$7) goto render_current::@5
  to:render_current::@8
render_current::@5: scope:[render_current]  from render_current::@7
  (byte*) render_current::screen_line#5 ← phi( render_current::@7/(byte*) render_current::screen_line#2 )
  (byte) current_piece_color#61 ← phi( render_current::@7/(byte) current_piece_color#25 )
  (byte) current_xpos#86 ← phi( render_current::@7/(byte) current_xpos#92 )
  (byte) render_current::i#6 ← phi( render_current::@7/(byte) render_current::i#9 )
  (byte*) current_piece_gfx#50 ← phi( render_current::@7/(byte*) current_piece_gfx#66 )
  (byte) render_current::l#6 ← phi( render_current::@7/(byte) render_current::l#9 )
  (byte) render_current::ypos2#7 ← phi( render_current::@7/(byte) render_current::ypos2#9 )
  (byte) render_current::c#4 ← phi( render_current::@7/(byte) render_current::c#6 )
  (byte) render_current::xpos#6 ← phi( render_current::@7/(byte) render_current::xpos#3 )
  to:render_current::@4
render_current::@8: scope:[render_current]  from render_current::@7
  (byte) current_xpos#87 ← phi( render_current::@7/(byte) current_xpos#92 )
  (byte) render_current::i#7 ← phi( render_current::@7/(byte) render_current::i#9 )
  (byte*) current_piece_gfx#51 ← phi( render_current::@7/(byte*) current_piece_gfx#66 )
  (byte) render_current::l#7 ← phi( render_current::@7/(byte) render_current::l#9 )
  (byte) render_current::ypos2#8 ← phi( render_current::@7/(byte) render_current::ypos2#9 )
  (byte) render_current::c#5 ← phi( render_current::@7/(byte) render_current::c#6 )
  (byte) render_current::xpos#4 ← phi( render_current::@7/(byte) render_current::xpos#3 )
  (byte*) render_current::screen_line#1 ← phi( render_current::@7/(byte*) render_current::screen_line#2 )
  (byte) current_piece_color#16 ← phi( render_current::@7/(byte) current_piece_color#25 )
  *((byte*) render_current::screen_line#1 + (byte) render_current::xpos#4) ← (byte) current_piece_color#16
  to:render_current::@4
render_current::@return: scope:[render_current]  from render_current::@2
  return 
  to:@return
@25: scope:[]  from @22
  (byte*) SCREEN#4 ← phi( @22/(byte*) SCREEN#0 )
  (byte) current_movedown_counter#20 ← phi( @22/(byte) current_movedown_counter#26 )
  (byte) keyboard_modifiers#25 ← phi( @22/(byte) keyboard_modifiers#32 )
  (byte) keyboard_events_size#28 ← phi( @22/(byte) keyboard_events_size#35 )
  (byte) current_piece_color#26 ← phi( @22/(byte) current_piece_color#37 )
  (byte) current_ypos#39 ← phi( @22/(byte) current_ypos#50 )
  (byte) current_xpos#47 ← phi( @22/(byte) current_xpos#65 )
  (byte*) current_piece_gfx#36 ← phi( @22/(byte*) current_piece_gfx#52 )
  (byte) current_orientation#40 ← phi( @22/(byte) current_orientation#50 )
  (byte*) current_piece#29 ← phi( @22/(byte*) current_piece#41 )
  call main 
  to:@26
@26: scope:[]  from @25
  (byte) current_movedown_counter#13 ← phi( @25/(byte) current_movedown_counter#2 )
  (byte) keyboard_modifiers#17 ← phi( @25/(byte) keyboard_modifiers#8 )
  (byte) keyboard_events_size#20 ← phi( @25/(byte) keyboard_events_size#8 )
  (byte) current_piece_color#17 ← phi( @25/(byte) current_piece_color#3 )
  (byte) current_ypos#23 ← phi( @25/(byte) current_ypos#3 )
  (byte) current_xpos#29 ← phi( @25/(byte) current_xpos#4 )
  (byte*) current_piece_gfx#22 ← phi( @25/(byte*) current_piece_gfx#4 )
  (byte) current_orientation#25 ← phi( @25/(byte) current_orientation#4 )
  (byte*) current_piece#17 ← phi( @25/(byte*) current_piece#3 )
  (byte*) current_piece#8 ← (byte*) current_piece#17
  (byte) current_orientation#11 ← (byte) current_orientation#25
  (byte*) current_piece_gfx#11 ← (byte*) current_piece_gfx#22
  (byte) current_xpos#12 ← (byte) current_xpos#29
  (byte) current_ypos#9 ← (byte) current_ypos#23
  (byte) current_piece_color#8 ← (byte) current_piece_color#17
  (byte) keyboard_events_size#9 ← (byte) keyboard_events_size#20
  (byte) keyboard_modifiers#9 ← (byte) keyboard_modifiers#17
  (byte) current_movedown_counter#6 ← (byte) current_movedown_counter#13
  to:@end
@end: scope:[]  from @26

SYMBOL TABLE SSA
(byte/signed byte/word/signed word/dword/signed dword~) $1
(byte/signed word/word/dword/signed dword/signed byte~) $10
(byte/signed byte/word/signed word/dword/signed dword~) $11
(byte/signed word/word/dword/signed dword/signed byte~) $12
(byte/signed byte/word/signed word/dword/signed dword~) $13
(byte/signed word/word/dword/signed dword/signed byte~) $14
(word~) $15
(word~) $16
(word~) $17
(word~) $18
(word~) $19
(byte/signed word/word/dword/signed dword/signed byte~) $2
(word~) $20
(word~) $21
(byte~) $22
(byte/signed word/word/dword/signed dword~) $23
(byte/signed word/word/dword/signed dword~) $24
(byte/signed byte/word/signed word/dword/signed dword~) $3
(byte/signed word/word/dword/signed dword/signed byte~) $4
(byte/signed byte/word/signed word/dword/signed dword~) $5
(byte/signed word/word/dword/signed dword/signed byte~) $6
(byte/signed byte/word/signed word/dword/signed dword~) $7
(byte/signed word/word/dword/signed dword/signed byte~) $8
(byte/signed byte/word/signed word/dword/signed dword~) $9
(label) @11
(label) @13
(label) @17
(label) @22
(label) @25
(label) @26
(label) @4
(label) @8
(label) @begin
(label) @end
(byte) BLACK
(byte) BLACK#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) CHARSET
(byte*) CHARSET#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte) COLLISION_BOTTOM
(byte) COLLISION_BOTTOM#0
(byte) COLLISION_LEFT
(byte) COLLISION_LEFT#0
(byte) COLLISION_NONE
(byte) COLLISION_NONE#0
(byte) COLLISION_PLAYFIELD
(byte) COLLISION_PLAYFIELD#0
(byte) COLLISION_RIGHT
(byte) COLLISION_RIGHT#0
(byte*) COLS
(byte*) COLS#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) GREEN
(byte) GREEN#0
(byte) KEY_COMMA
(byte) KEY_COMMA#0
(byte) KEY_COMMODORE
(byte) KEY_COMMODORE#0
(byte) KEY_CTRL
(byte) KEY_CTRL#0
(byte) KEY_DOT
(byte) KEY_DOT#0
(byte) KEY_LSHIFT
(byte) KEY_LSHIFT#0
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_COMMODORE#0
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_CTRL#0
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_LSHIFT#0
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_MODIFIER_RSHIFT#0
(byte) KEY_RSHIFT
(byte) KEY_RSHIFT#0
(byte) KEY_SPACE
(byte) KEY_SPACE#0
(byte) KEY_X
(byte) KEY_X#0
(byte) KEY_Z
(byte) KEY_Z#0
(byte) LIGHT_GREY
(byte) LIGHT_GREY#0
(word[]) PIECES
(word[]) PIECES#0
(byte[]) PIECES_COLORS
(byte[]) PIECES_COLORS#0
(byte[$14]) PIECE_I
(byte[$14]) PIECE_I#0
(byte[$10]) PIECE_J
(byte[$10]) PIECE_J#0
(byte[$8]) PIECE_L
(byte[$8]) PIECE_L#0
(byte[$12]) PIECE_O
(byte[$12]) PIECE_O#0
(byte[$4]) PIECE_S
(byte[$4]) PIECE_S#0
(byte[$2]) PIECE_T
(byte[$2]) PIECE_T#0
(byte[$6]) PIECE_Z
(byte[$6]) PIECE_Z#0
(byte) PLAYFIELD_COLS
(byte) PLAYFIELD_COLS#0
(byte) PLAYFIELD_LINES
(byte) PLAYFIELD_LINES#0
(byte*) RASTER
(byte*) RASTER#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte) SID_CONTROL_NOISE
(byte) SID_CONTROL_NOISE#0
(byte*) SID_VOICE3_CONTROL
(byte*) SID_VOICE3_CONTROL#0
(word*) SID_VOICE3_FREQ
(word*) SID_VOICE3_FREQ#0
(byte*) SID_VOICE3_OSC
(byte*) SID_VOICE3_OSC#0
(byte) WHITE
(byte) WHITE#0
(byte()) collision((byte) collision::xpos , (byte) collision::ypos , (byte) collision::orientation)
(byte*~) collision::$0
(byte~) collision::$1
(bool~) collision::$10
(bool~) collision::$11
(bool~) collision::$12
(bool~) collision::$13
(bool~) collision::$14
(bool~) collision::$15
(bool~) collision::$2
(bool~) collision::$3
(byte/signed word/word/dword/signed dword~) collision::$4
(bool~) collision::$5
(bool~) collision::$6
(byte~) collision::$7
(bool~) collision::$8
(bool~) collision::$9
(label) collision::@1
(label) collision::@11
(label) collision::@13
(label) collision::@15
(label) collision::@17
(label) collision::@18
(label) collision::@2
(label) collision::@3
(label) collision::@4
(label) collision::@5
(label) collision::@6
(label) collision::@7
(label) collision::@8
(label) collision::@9
(label) collision::@return
(byte) collision::c
(byte) collision::c#0
(byte) collision::c#1
(byte) collision::c#2
(byte) collision::c#3
(byte) collision::c#4
(byte) collision::c#5
(byte) collision::c#6
(byte) collision::c#7
(byte) collision::c#8
(byte) collision::col
(byte) collision::col#0
(byte) collision::col#1
(byte) collision::col#2
(byte) collision::col#3
(byte) collision::col#4
(byte) collision::col#5
(byte) collision::col#6
(byte) collision::col#7
(byte) collision::col#8
(byte) collision::i
(byte) collision::i#0
(byte) collision::i#1
(byte) collision::i#10
(byte) collision::i#2
(byte) collision::i#3
(byte) collision::i#4
(byte) collision::i#5
(byte) collision::i#6
(byte) collision::i#7
(byte) collision::i#8
(byte) collision::i#9
(byte) collision::l
(byte) collision::l#0
(byte) collision::l#1
(byte) collision::l#10
(byte) collision::l#2
(byte) collision::l#3
(byte) collision::l#4
(byte) collision::l#5
(byte) collision::l#6
(byte) collision::l#7
(byte) collision::l#8
(byte) collision::l#9
(byte) collision::orientation
(byte) collision::orientation#0
(byte) collision::orientation#1
(byte) collision::orientation#2
(byte) collision::orientation#3
(byte) collision::orientation#4
(byte*) collision::piece_gfx
(byte*) collision::piece_gfx#0
(byte*) collision::piece_gfx#1
(byte*) collision::piece_gfx#2
(byte*) collision::piece_gfx#3
(byte*) collision::piece_gfx#4
(byte*) collision::piece_gfx#5
(byte*) collision::piece_gfx#6
(byte*) collision::piece_gfx#7
(byte*) collision::piece_gfx#8
(byte*) collision::piece_gfx#9
(byte*) collision::playfield_line
(byte*) collision::playfield_line#0
(byte*) collision::playfield_line#1
(byte*) collision::playfield_line#2
(byte*) collision::playfield_line#3
(byte*) collision::playfield_line#4
(byte*) collision::playfield_line#5
(byte*) collision::playfield_line#6
(byte*) collision::playfield_line#7
(byte) collision::return
(byte) collision::return#0
(byte) collision::return#1
(byte) collision::return#10
(byte) collision::return#11
(byte) collision::return#12
(byte) collision::return#13
(byte) collision::return#14
(byte) collision::return#2
(byte) collision::return#3
(byte) collision::return#4
(byte) collision::return#5
(byte) collision::return#6
(byte) collision::return#7
(byte) collision::return#8
(byte) collision::return#9
(byte) collision::xpos
(byte) collision::xpos#0
(byte) collision::xpos#1
(byte) collision::xpos#10
(byte) collision::xpos#11
(byte) collision::xpos#12
(byte) collision::xpos#13
(byte) collision::xpos#2
(byte) collision::xpos#3
(byte) collision::xpos#4
(byte) collision::xpos#5
(byte) collision::xpos#6
(byte) collision::xpos#7
(byte) collision::xpos#8
(byte) collision::xpos#9
(byte) collision::ypos
(byte) collision::ypos#0
(byte) collision::ypos#1
(byte) collision::ypos#2
(byte) collision::ypos#3
(byte) collision::ypos#4
(byte) collision::ypos2
(byte) collision::ypos2#0
(byte) collision::ypos2#1
(byte) collision::ypos2#10
(byte) collision::ypos2#2
(byte) collision::ypos2#3
(byte) collision::ypos2#4
(byte) collision::ypos2#5
(byte) collision::ypos2#6
(byte) collision::ypos2#7
(byte) collision::ypos2#8
(byte) collision::ypos2#9
(byte) current_movedown_counter
(byte) current_movedown_counter#0
(byte) current_movedown_counter#1
(byte) current_movedown_counter#10
(byte) current_movedown_counter#11
(byte) current_movedown_counter#12
(byte) current_movedown_counter#13
(byte) current_movedown_counter#14
(byte) current_movedown_counter#15
(byte) current_movedown_counter#16
(byte) current_movedown_counter#17
(byte) current_movedown_counter#18
(byte) current_movedown_counter#19
(byte) current_movedown_counter#2
(byte) current_movedown_counter#20
(byte) current_movedown_counter#21
(byte) current_movedown_counter#22
(byte) current_movedown_counter#23
(byte) current_movedown_counter#24
(byte) current_movedown_counter#25
(byte) current_movedown_counter#26
(byte) current_movedown_counter#27
(byte) current_movedown_counter#28
(byte) current_movedown_counter#29
(byte) current_movedown_counter#3
(byte) current_movedown_counter#30
(byte) current_movedown_counter#31
(byte) current_movedown_counter#32
(byte) current_movedown_counter#33
(byte) current_movedown_counter#34
(byte) current_movedown_counter#35
(byte) current_movedown_counter#36
(byte) current_movedown_counter#37
(byte) current_movedown_counter#38
(byte) current_movedown_counter#39
(byte) current_movedown_counter#4
(byte) current_movedown_counter#40
(byte) current_movedown_counter#41
(byte) current_movedown_counter#42
(byte) current_movedown_counter#43
(byte) current_movedown_counter#44
(byte) current_movedown_counter#45
(byte) current_movedown_counter#46
(byte) current_movedown_counter#5
(byte) current_movedown_counter#6
(byte) current_movedown_counter#7
(byte) current_movedown_counter#8
(byte) current_movedown_counter#9
(byte) current_movedown_fast
(byte) current_movedown_fast#0
(byte) current_movedown_slow
(byte) current_movedown_slow#0
(byte) current_orientation
(byte) current_orientation#0
(byte) current_orientation#1
(byte) current_orientation#10
(byte) current_orientation#11
(byte) current_orientation#12
(byte) current_orientation#13
(byte) current_orientation#14
(byte) current_orientation#15
(byte) current_orientation#16
(byte) current_orientation#17
(byte) current_orientation#18
(byte) current_orientation#19
(byte) current_orientation#2
(byte) current_orientation#20
(byte) current_orientation#21
(byte) current_orientation#22
(byte) current_orientation#23
(byte) current_orientation#24
(byte) current_orientation#25
(byte) current_orientation#26
(byte) current_orientation#27
(byte) current_orientation#28
(byte) current_orientation#29
(byte) current_orientation#3
(byte) current_orientation#30
(byte) current_orientation#31
(byte) current_orientation#32
(byte) current_orientation#33
(byte) current_orientation#34
(byte) current_orientation#35
(byte) current_orientation#36
(byte) current_orientation#37
(byte) current_orientation#38
(byte) current_orientation#39
(byte) current_orientation#4
(byte) current_orientation#40
(byte) current_orientation#41
(byte) current_orientation#42
(byte) current_orientation#43
(byte) current_orientation#44
(byte) current_orientation#45
(byte) current_orientation#46
(byte) current_orientation#47
(byte) current_orientation#48
(byte) current_orientation#49
(byte) current_orientation#5
(byte) current_orientation#50
(byte) current_orientation#51
(byte) current_orientation#52
(byte) current_orientation#53
(byte) current_orientation#54
(byte) current_orientation#55
(byte) current_orientation#56
(byte) current_orientation#57
(byte) current_orientation#58
(byte) current_orientation#59
(byte) current_orientation#6
(byte) current_orientation#60
(byte) current_orientation#61
(byte) current_orientation#62
(byte) current_orientation#63
(byte) current_orientation#64
(byte) current_orientation#65
(byte) current_orientation#66
(byte) current_orientation#67
(byte) current_orientation#68
(byte) current_orientation#69
(byte) current_orientation#7
(byte) current_orientation#70
(byte) current_orientation#71
(byte) current_orientation#72
(byte) current_orientation#73
(byte) current_orientation#8
(byte) current_orientation#9
(byte*) current_piece
(byte*) current_piece#0
(byte*) current_piece#1
(byte*) current_piece#10
(byte*) current_piece#11
(byte*) current_piece#12
(byte*) current_piece#13
(byte*) current_piece#14
(byte*) current_piece#15
(byte*) current_piece#16
(byte*) current_piece#17
(byte*) current_piece#18
(byte*) current_piece#19
(byte*) current_piece#2
(byte*) current_piece#20
(byte*) current_piece#21
(byte*) current_piece#22
(byte*) current_piece#23
(byte*) current_piece#24
(byte*) current_piece#25
(byte*) current_piece#26
(byte*) current_piece#27
(byte*) current_piece#28
(byte*) current_piece#29
(byte*) current_piece#3
(byte*) current_piece#30
(byte*) current_piece#31
(byte*) current_piece#32
(byte*) current_piece#33
(byte*) current_piece#34
(byte*) current_piece#35
(byte*) current_piece#36
(byte*) current_piece#37
(byte*) current_piece#38
(byte*) current_piece#39
(byte*) current_piece#4
(byte*) current_piece#40
(byte*) current_piece#41
(byte*) current_piece#42
(byte*) current_piece#43
(byte*) current_piece#44
(byte*) current_piece#45
(byte*) current_piece#46
(byte*) current_piece#47
(byte*) current_piece#48
(byte*) current_piece#49
(byte*) current_piece#5
(byte*) current_piece#50
(byte*) current_piece#51
(byte*) current_piece#52
(byte*) current_piece#53
(byte*) current_piece#54
(byte*) current_piece#55
(byte*) current_piece#56
(byte*) current_piece#57
(byte*) current_piece#58
(byte*) current_piece#59
(byte*) current_piece#6
(byte*) current_piece#60
(byte*) current_piece#61
(byte*) current_piece#62
(byte*) current_piece#63
(byte*) current_piece#64
(byte*) current_piece#65
(byte*) current_piece#66
(byte*) current_piece#67
(byte*) current_piece#68
(byte*) current_piece#69
(byte*) current_piece#7
(byte*) current_piece#8
(byte*) current_piece#9
(byte) current_piece_color
(byte) current_piece_color#0
(byte) current_piece_color#1
(byte) current_piece_color#10
(byte) current_piece_color#11
(byte) current_piece_color#12
(byte) current_piece_color#13
(byte) current_piece_color#14
(byte) current_piece_color#15
(byte) current_piece_color#16
(byte) current_piece_color#17
(byte) current_piece_color#18
(byte) current_piece_color#19
(byte) current_piece_color#2
(byte) current_piece_color#20
(byte) current_piece_color#21
(byte) current_piece_color#22
(byte) current_piece_color#23
(byte) current_piece_color#24
(byte) current_piece_color#25
(byte) current_piece_color#26
(byte) current_piece_color#27
(byte) current_piece_color#28
(byte) current_piece_color#29
(byte) current_piece_color#3
(byte) current_piece_color#30
(byte) current_piece_color#31
(byte) current_piece_color#32
(byte) current_piece_color#33
(byte) current_piece_color#34
(byte) current_piece_color#35
(byte) current_piece_color#36
(byte) current_piece_color#37
(byte) current_piece_color#38
(byte) current_piece_color#39
(byte) current_piece_color#4
(byte) current_piece_color#40
(byte) current_piece_color#41
(byte) current_piece_color#42
(byte) current_piece_color#43
(byte) current_piece_color#44
(byte) current_piece_color#45
(byte) current_piece_color#46
(byte) current_piece_color#47
(byte) current_piece_color#48
(byte) current_piece_color#49
(byte) current_piece_color#5
(byte) current_piece_color#50
(byte) current_piece_color#51
(byte) current_piece_color#52
(byte) current_piece_color#53
(byte) current_piece_color#54
(byte) current_piece_color#55
(byte) current_piece_color#56
(byte) current_piece_color#57
(byte) current_piece_color#58
(byte) current_piece_color#59
(byte) current_piece_color#6
(byte) current_piece_color#60
(byte) current_piece_color#61
(byte) current_piece_color#62
(byte) current_piece_color#63
(byte) current_piece_color#64
(byte) current_piece_color#65
(byte) current_piece_color#66
(byte) current_piece_color#67
(byte) current_piece_color#68
(byte) current_piece_color#69
(byte) current_piece_color#7
(byte) current_piece_color#70
(byte) current_piece_color#71
(byte) current_piece_color#72
(byte) current_piece_color#8
(byte) current_piece_color#9
(byte*) current_piece_gfx
(byte*) current_piece_gfx#0
(byte*) current_piece_gfx#1
(byte*) current_piece_gfx#10
(byte*) current_piece_gfx#11
(byte*) current_piece_gfx#12
(byte*) current_piece_gfx#13
(byte*) current_piece_gfx#14
(byte*) current_piece_gfx#15
(byte*) current_piece_gfx#16
(byte*) current_piece_gfx#17
(byte*) current_piece_gfx#18
(byte*) current_piece_gfx#19
(byte*) current_piece_gfx#2
(byte*) current_piece_gfx#20
(byte*) current_piece_gfx#21
(byte*) current_piece_gfx#22
(byte*) current_piece_gfx#23
(byte*) current_piece_gfx#24
(byte*) current_piece_gfx#25
(byte*) current_piece_gfx#26
(byte*) current_piece_gfx#27
(byte*) current_piece_gfx#28
(byte*) current_piece_gfx#29
(byte*) current_piece_gfx#3
(byte*) current_piece_gfx#30
(byte*) current_piece_gfx#31
(byte*) current_piece_gfx#32
(byte*) current_piece_gfx#33
(byte*) current_piece_gfx#34
(byte*) current_piece_gfx#35
(byte*) current_piece_gfx#36
(byte*) current_piece_gfx#37
(byte*) current_piece_gfx#38
(byte*) current_piece_gfx#39
(byte*) current_piece_gfx#4
(byte*) current_piece_gfx#40
(byte*) current_piece_gfx#41
(byte*) current_piece_gfx#42
(byte*) current_piece_gfx#43
(byte*) current_piece_gfx#44
(byte*) current_piece_gfx#45
(byte*) current_piece_gfx#46
(byte*) current_piece_gfx#47
(byte*) current_piece_gfx#48
(byte*) current_piece_gfx#49
(byte*) current_piece_gfx#5
(byte*) current_piece_gfx#50
(byte*) current_piece_gfx#51
(byte*) current_piece_gfx#52
(byte*) current_piece_gfx#53
(byte*) current_piece_gfx#54
(byte*) current_piece_gfx#55
(byte*) current_piece_gfx#56
(byte*) current_piece_gfx#57
(byte*) current_piece_gfx#58
(byte*) current_piece_gfx#59
(byte*) current_piece_gfx#6
(byte*) current_piece_gfx#60
(byte*) current_piece_gfx#61
(byte*) current_piece_gfx#62
(byte*) current_piece_gfx#63
(byte*) current_piece_gfx#64
(byte*) current_piece_gfx#65
(byte*) current_piece_gfx#66
(byte*) current_piece_gfx#67
(byte*) current_piece_gfx#68
(byte*) current_piece_gfx#69
(byte*) current_piece_gfx#7
(byte*) current_piece_gfx#70
(byte*) current_piece_gfx#71
(byte*) current_piece_gfx#72
(byte*) current_piece_gfx#73
(byte*) current_piece_gfx#74
(byte*) current_piece_gfx#75
(byte*) current_piece_gfx#76
(byte*) current_piece_gfx#77
(byte*) current_piece_gfx#78
(byte*) current_piece_gfx#79
(byte*) current_piece_gfx#8
(byte*) current_piece_gfx#80
(byte*) current_piece_gfx#81
(byte*) current_piece_gfx#82
(byte*) current_piece_gfx#83
(byte*) current_piece_gfx#84
(byte*) current_piece_gfx#9
(byte) current_xpos
(byte) current_xpos#0
(byte) current_xpos#1
(byte) current_xpos#10
(byte) current_xpos#11
(byte) current_xpos#12
(byte) current_xpos#13
(byte) current_xpos#14
(byte) current_xpos#15
(byte) current_xpos#16
(byte) current_xpos#17
(byte) current_xpos#18
(byte) current_xpos#19
(byte) current_xpos#2
(byte) current_xpos#20
(byte) current_xpos#21
(byte) current_xpos#22
(byte) current_xpos#23
(byte) current_xpos#24
(byte) current_xpos#25
(byte) current_xpos#26
(byte) current_xpos#27
(byte) current_xpos#28
(byte) current_xpos#29
(byte) current_xpos#3
(byte) current_xpos#30
(byte) current_xpos#31
(byte) current_xpos#32
(byte) current_xpos#33
(byte) current_xpos#34
(byte) current_xpos#35
(byte) current_xpos#36
(byte) current_xpos#37
(byte) current_xpos#38
(byte) current_xpos#39
(byte) current_xpos#4
(byte) current_xpos#40
(byte) current_xpos#41
(byte) current_xpos#42
(byte) current_xpos#43
(byte) current_xpos#44
(byte) current_xpos#45
(byte) current_xpos#46
(byte) current_xpos#47
(byte) current_xpos#48
(byte) current_xpos#49
(byte) current_xpos#5
(byte) current_xpos#50
(byte) current_xpos#51
(byte) current_xpos#52
(byte) current_xpos#53
(byte) current_xpos#54
(byte) current_xpos#55
(byte) current_xpos#56
(byte) current_xpos#57
(byte) current_xpos#58
(byte) current_xpos#59
(byte) current_xpos#6
(byte) current_xpos#60
(byte) current_xpos#61
(byte) current_xpos#62
(byte) current_xpos#63
(byte) current_xpos#64
(byte) current_xpos#65
(byte) current_xpos#66
(byte) current_xpos#67
(byte) current_xpos#68
(byte) current_xpos#69
(byte) current_xpos#7
(byte) current_xpos#70
(byte) current_xpos#71
(byte) current_xpos#72
(byte) current_xpos#73
(byte) current_xpos#74
(byte) current_xpos#75
(byte) current_xpos#76
(byte) current_xpos#77
(byte) current_xpos#78
(byte) current_xpos#79
(byte) current_xpos#8
(byte) current_xpos#80
(byte) current_xpos#81
(byte) current_xpos#82
(byte) current_xpos#83
(byte) current_xpos#84
(byte) current_xpos#85
(byte) current_xpos#86
(byte) current_xpos#87
(byte) current_xpos#88
(byte) current_xpos#89
(byte) current_xpos#9
(byte) current_xpos#90
(byte) current_xpos#91
(byte) current_xpos#92
(byte) current_xpos#93
(byte) current_xpos#94
(byte) current_ypos
(byte) current_ypos#0
(byte) current_ypos#1
(byte) current_ypos#10
(byte) current_ypos#11
(byte) current_ypos#12
(byte) current_ypos#13
(byte) current_ypos#14
(byte) current_ypos#15
(byte) current_ypos#16
(byte) current_ypos#17
(byte) current_ypos#18
(byte) current_ypos#19
(byte) current_ypos#2
(byte) current_ypos#20
(byte) current_ypos#21
(byte) current_ypos#22
(byte) current_ypos#23
(byte) current_ypos#24
(byte) current_ypos#25
(byte) current_ypos#26
(byte) current_ypos#27
(byte) current_ypos#28
(byte) current_ypos#29
(byte) current_ypos#3
(byte) current_ypos#30
(byte) current_ypos#31
(byte) current_ypos#32
(byte) current_ypos#33
(byte) current_ypos#34
(byte) current_ypos#35
(byte) current_ypos#36
(byte) current_ypos#37
(byte) current_ypos#38
(byte) current_ypos#39
(byte) current_ypos#4
(byte) current_ypos#40
(byte) current_ypos#41
(byte) current_ypos#42
(byte) current_ypos#43
(byte) current_ypos#44
(byte) current_ypos#45
(byte) current_ypos#46
(byte) current_ypos#47
(byte) current_ypos#48
(byte) current_ypos#49
(byte) current_ypos#5
(byte) current_ypos#50
(byte) current_ypos#51
(byte) current_ypos#52
(byte) current_ypos#53
(byte) current_ypos#54
(byte) current_ypos#55
(byte) current_ypos#56
(byte) current_ypos#57
(byte) current_ypos#58
(byte) current_ypos#59
(byte) current_ypos#6
(byte) current_ypos#60
(byte) current_ypos#61
(byte) current_ypos#62
(byte) current_ypos#63
(byte) current_ypos#64
(byte) current_ypos#65
(byte) current_ypos#66
(byte) current_ypos#67
(byte) current_ypos#68
(byte) current_ypos#69
(byte) current_ypos#7
(byte) current_ypos#8
(byte) current_ypos#9
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(byte*~) fill::$0
(bool~) fill::$1
(label) fill::@1
(label) fill::@return
(byte*) fill::addr
(byte*) fill::addr#0
(byte*) fill::addr#1
(byte*) fill::addr#2
(byte*) fill::end
(byte*) fill::end#0
(byte*) fill::end#1
(word) fill::size
(word) fill::size#0
(word) fill::size#1
(word) fill::size#2
(byte*) fill::start
(byte*) fill::start#0
(byte*) fill::start#1
(byte*) fill::start#2
(byte) fill::val
(byte) fill::val#0
(byte) fill::val#1
(byte) fill::val#2
(byte) fill::val#3
(byte()) keyboard_event_get()
(bool~) keyboard_event_get::$0
(label) keyboard_event_get::@1
(label) keyboard_event_get::@3
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#0
(byte) keyboard_event_get::return#1
(byte) keyboard_event_get::return#2
(byte) keyboard_event_get::return#3
(byte) keyboard_event_get::return#4
(byte) keyboard_event_get::return#5
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0
(byte~) keyboard_event_pressed::$1
(byte~) keyboard_event_pressed::$2
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#0
(byte) keyboard_event_pressed::keycode#1
(byte) keyboard_event_pressed::keycode#2
(byte) keyboard_event_pressed::keycode#3
(byte) keyboard_event_pressed::keycode#4
(byte) keyboard_event_pressed::keycode#5
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0
(byte) keyboard_event_pressed::return#1
(byte) keyboard_event_pressed::return#10
(byte) keyboard_event_pressed::return#11
(byte) keyboard_event_pressed::return#12
(byte) keyboard_event_pressed::return#2
(byte) keyboard_event_pressed::return#3
(byte) keyboard_event_pressed::return#4
(byte) keyboard_event_pressed::return#5
(byte) keyboard_event_pressed::return#6
(byte) keyboard_event_pressed::return#7
(byte) keyboard_event_pressed::return#8
(byte) keyboard_event_pressed::return#9
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0
(bool~) keyboard_event_scan::$1
(bool~) keyboard_event_scan::$10
(byte/word/dword~) keyboard_event_scan::$11
(bool~) keyboard_event_scan::$12
(bool~) keyboard_event_scan::$13
(byte~) keyboard_event_scan::$14
(bool~) keyboard_event_scan::$15
(bool~) keyboard_event_scan::$16
(byte~) keyboard_event_scan::$17
(byte~) keyboard_event_scan::$18
(bool~) keyboard_event_scan::$19
(byte/signed word/word/dword/signed dword~) keyboard_event_scan::$2
(bool~) keyboard_event_scan::$20
(byte~) keyboard_event_scan::$21
(byte~) keyboard_event_scan::$22
(bool~) keyboard_event_scan::$23
(bool~) keyboard_event_scan::$24
(byte~) keyboard_event_scan::$25
(byte~) keyboard_event_scan::$26
(bool~) keyboard_event_scan::$27
(bool~) keyboard_event_scan::$28
(byte~) keyboard_event_scan::$29
(byte~) keyboard_event_scan::$3
(byte~) keyboard_event_scan::$4
(bool~) keyboard_event_scan::$5
(bool~) keyboard_event_scan::$6
(bool~) keyboard_event_scan::$7
(bool~) keyboard_event_scan::$8
(byte~) keyboard_event_scan::$9
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@24
(label) keyboard_event_scan::@25
(label) keyboard_event_scan::@26
(label) keyboard_event_scan::@27
(label) keyboard_event_scan::@28
(label) keyboard_event_scan::@29
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#0
(byte) keyboard_event_scan::col#1
(byte) keyboard_event_scan::col#2
(byte) keyboard_event_scan::col#3
(byte) keyboard_event_scan::col#4
(byte) keyboard_event_scan::col#5
(byte) keyboard_event_scan::col#6
(byte) keyboard_event_scan::col#7
(byte) keyboard_event_scan::col#8
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#0
(byte) keyboard_event_scan::keycode#1
(byte) keyboard_event_scan::keycode#10
(byte) keyboard_event_scan::keycode#11
(byte) keyboard_event_scan::keycode#12
(byte) keyboard_event_scan::keycode#13
(byte) keyboard_event_scan::keycode#14
(byte) keyboard_event_scan::keycode#15
(byte) keyboard_event_scan::keycode#2
(byte) keyboard_event_scan::keycode#3
(byte) keyboard_event_scan::keycode#4
(byte) keyboard_event_scan::keycode#5
(byte) keyboard_event_scan::keycode#6
(byte) keyboard_event_scan::keycode#7
(byte) keyboard_event_scan::keycode#8
(byte) keyboard_event_scan::keycode#9
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#0
(byte) keyboard_event_scan::row#1
(byte) keyboard_event_scan::row#10
(byte) keyboard_event_scan::row#11
(byte) keyboard_event_scan::row#12
(byte) keyboard_event_scan::row#13
(byte) keyboard_event_scan::row#14
(byte) keyboard_event_scan::row#2
(byte) keyboard_event_scan::row#3
(byte) keyboard_event_scan::row#4
(byte) keyboard_event_scan::row#5
(byte) keyboard_event_scan::row#6
(byte) keyboard_event_scan::row#7
(byte) keyboard_event_scan::row#8
(byte) keyboard_event_scan::row#9
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0
(byte) keyboard_event_scan::row_scan#1
(byte) keyboard_event_scan::row_scan#2
(byte) keyboard_event_scan::row_scan#3
(byte) keyboard_event_scan::row_scan#4
(byte) keyboard_event_scan::row_scan#5
(byte) keyboard_event_scan::row_scan#6
(byte) keyboard_event_scan::row_scan#7
(byte) keyboard_event_scan::row_scan#8
(byte) keyboard_event_scan::row_scan#9
(byte[8]) keyboard_events
(byte[8]) keyboard_events#0
(byte) keyboard_events_size
(byte) keyboard_events_size#0
(byte) keyboard_events_size#1
(byte) keyboard_events_size#10
(byte) keyboard_events_size#11
(byte) keyboard_events_size#12
(byte) keyboard_events_size#13
(byte) keyboard_events_size#14
(byte) keyboard_events_size#15
(byte) keyboard_events_size#16
(byte) keyboard_events_size#17
(byte) keyboard_events_size#18
(byte) keyboard_events_size#19
(byte) keyboard_events_size#2
(byte) keyboard_events_size#20
(byte) keyboard_events_size#21
(byte) keyboard_events_size#22
(byte) keyboard_events_size#23
(byte) keyboard_events_size#24
(byte) keyboard_events_size#25
(byte) keyboard_events_size#26
(byte) keyboard_events_size#27
(byte) keyboard_events_size#28
(byte) keyboard_events_size#29
(byte) keyboard_events_size#3
(byte) keyboard_events_size#30
(byte) keyboard_events_size#31
(byte) keyboard_events_size#32
(byte) keyboard_events_size#33
(byte) keyboard_events_size#34
(byte) keyboard_events_size#35
(byte) keyboard_events_size#36
(byte) keyboard_events_size#37
(byte) keyboard_events_size#38
(byte) keyboard_events_size#39
(byte) keyboard_events_size#4
(byte) keyboard_events_size#40
(byte) keyboard_events_size#41
(byte) keyboard_events_size#42
(byte) keyboard_events_size#43
(byte) keyboard_events_size#44
(byte) keyboard_events_size#45
(byte) keyboard_events_size#46
(byte) keyboard_events_size#47
(byte) keyboard_events_size#48
(byte) keyboard_events_size#49
(byte) keyboard_events_size#5
(byte) keyboard_events_size#50
(byte) keyboard_events_size#51
(byte) keyboard_events_size#52
(byte) keyboard_events_size#53
(byte) keyboard_events_size#54
(byte) keyboard_events_size#55
(byte) keyboard_events_size#56
(byte) keyboard_events_size#57
(byte) keyboard_events_size#58
(byte) keyboard_events_size#59
(byte) keyboard_events_size#6
(byte) keyboard_events_size#60
(byte) keyboard_events_size#61
(byte) keyboard_events_size#62
(byte) keyboard_events_size#63
(byte) keyboard_events_size#64
(byte) keyboard_events_size#65
(byte) keyboard_events_size#66
(byte) keyboard_events_size#67
(byte) keyboard_events_size#68
(byte) keyboard_events_size#69
(byte) keyboard_events_size#7
(byte) keyboard_events_size#70
(byte) keyboard_events_size#71
(byte) keyboard_events_size#8
(byte) keyboard_events_size#9
(byte[8]) keyboard_matrix_col_bitmask
(byte[8]) keyboard_matrix_col_bitmask#0
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0
(byte) keyboard_matrix_read::return#1
(byte) keyboard_matrix_read::return#2
(byte) keyboard_matrix_read::return#3
(byte) keyboard_matrix_read::return#4
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::row_pressed_bits#0
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0
(byte) keyboard_matrix_read::rowid#1
(byte[8]) keyboard_matrix_row_bitmask
(byte[8]) keyboard_matrix_row_bitmask#0
(byte) keyboard_modifiers
(byte) keyboard_modifiers#0
(byte) keyboard_modifiers#1
(byte) keyboard_modifiers#10
(byte) keyboard_modifiers#11
(byte) keyboard_modifiers#12
(byte) keyboard_modifiers#13
(byte) keyboard_modifiers#14
(byte) keyboard_modifiers#15
(byte) keyboard_modifiers#16
(byte) keyboard_modifiers#17
(byte) keyboard_modifiers#18
(byte) keyboard_modifiers#19
(byte) keyboard_modifiers#2
(byte) keyboard_modifiers#20
(byte) keyboard_modifiers#21
(byte) keyboard_modifiers#22
(byte) keyboard_modifiers#23
(byte) keyboard_modifiers#24
(byte) keyboard_modifiers#25
(byte) keyboard_modifiers#26
(byte) keyboard_modifiers#27
(byte) keyboard_modifiers#28
(byte) keyboard_modifiers#29
(byte) keyboard_modifiers#3
(byte) keyboard_modifiers#30
(byte) keyboard_modifiers#31
(byte) keyboard_modifiers#32
(byte) keyboard_modifiers#33
(byte) keyboard_modifiers#34
(byte) keyboard_modifiers#35
(byte) keyboard_modifiers#36
(byte) keyboard_modifiers#37
(byte) keyboard_modifiers#38
(byte) keyboard_modifiers#39
(byte) keyboard_modifiers#4
(byte) keyboard_modifiers#40
(byte) keyboard_modifiers#41
(byte) keyboard_modifiers#42
(byte) keyboard_modifiers#43
(byte) keyboard_modifiers#44
(byte) keyboard_modifiers#45
(byte) keyboard_modifiers#46
(byte) keyboard_modifiers#47
(byte) keyboard_modifiers#48
(byte) keyboard_modifiers#49
(byte) keyboard_modifiers#5
(byte) keyboard_modifiers#50
(byte) keyboard_modifiers#51
(byte) keyboard_modifiers#52
(byte) keyboard_modifiers#6
(byte) keyboard_modifiers#7
(byte) keyboard_modifiers#8
(byte) keyboard_modifiers#9
(byte[8]) keyboard_scan_values
(byte[8]) keyboard_scan_values#0
(void()) lock_current()
(byte~) lock_current::$0
(bool~) lock_current::$1
(bool~) lock_current::$2
(bool~) lock_current::$3
(bool~) lock_current::$4
(label) lock_current::@1
(label) lock_current::@2
(label) lock_current::@3
(label) lock_current::@4
(label) lock_current::@5
(label) lock_current::@return
(byte) lock_current::c
(byte) lock_current::c#0
(byte) lock_current::c#1
(byte) lock_current::c#2
(byte) lock_current::c#3
(byte) lock_current::c#4
(byte) lock_current::col
(byte) lock_current::col#0
(byte) lock_current::col#1
(byte) lock_current::col#2
(byte) lock_current::col#3
(byte) lock_current::col#4
(byte) lock_current::i
(byte) lock_current::i#0
(byte) lock_current::i#1
(byte) lock_current::i#2
(byte) lock_current::i#3
(byte) lock_current::i#4
(byte) lock_current::i#5
(byte) lock_current::i#6
(byte) lock_current::l
(byte) lock_current::l#0
(byte) lock_current::l#1
(byte) lock_current::l#2
(byte) lock_current::l#3
(byte) lock_current::l#4
(byte) lock_current::l#5
(byte) lock_current::l#6
(byte*) lock_current::playfield_line
(byte*) lock_current::playfield_line#0
(byte*) lock_current::playfield_line#1
(byte*) lock_current::playfield_line#2
(byte*) lock_current::playfield_line#3
(byte) lock_current::ypos2
(byte) lock_current::ypos2#0
(byte) lock_current::ypos2#1
(byte) lock_current::ypos2#2
(byte) lock_current::ypos2#3
(byte) lock_current::ypos2#4
(byte) lock_current::ypos2#5
(byte) lock_current::ypos2#6
(void()) main()
(byte~) main::$10
(byte~) main::$11
(byte~) main::$12
(bool~) main::$13
(bool~) main::$14
(bool~) main::$6
(bool~) main::$7
(byte~) main::$9
(label) main::@1
(label) main::@10
(label) main::@19
(label) main::@2
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@28
(label) main::@29
(label) main::@30
(label) main::@31
(label) main::@32
(label) main::@33
(label) main::@4
(label) main::@5
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::key_event
(byte) main::key_event#0
(byte) main::key_event#1
(byte) main::key_event#2
(byte) main::render
(byte) main::render#0
(byte) main::render#1
(byte) main::render#2
(byte) main::render#3
(byte) main::render#4
(byte) main::render#5
(byte) main::render#6
(byte()) play_move_down((byte) play_move_down::key_event)
(bool~) play_move_down::$0
(bool~) play_move_down::$1
(bool~) play_move_down::$10
(byte/signed word/word/dword/signed dword~) play_move_down::$11
(byte~) play_move_down::$12
(bool~) play_move_down::$13
(byte~) play_move_down::$2
(bool~) play_move_down::$3
(bool~) play_move_down::$4
(bool~) play_move_down::$5
(bool~) play_move_down::$6
(bool~) play_move_down::$7
(bool~) play_move_down::$8
(bool~) play_move_down::$9
(label) play_move_down::@1
(label) play_move_down::@10
(label) play_move_down::@11
(label) play_move_down::@12
(label) play_move_down::@13
(label) play_move_down::@17
(label) play_move_down::@18
(label) play_move_down::@19
(label) play_move_down::@2
(label) play_move_down::@20
(label) play_move_down::@21
(label) play_move_down::@3
(label) play_move_down::@4
(label) play_move_down::@5
(label) play_move_down::@6
(label) play_move_down::@7
(label) play_move_down::@8
(label) play_move_down::@9
(label) play_move_down::@return
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0
(byte) play_move_down::key_event#1
(byte) play_move_down::movedown
(byte) play_move_down::movedown#0
(byte) play_move_down::movedown#1
(byte) play_move_down::movedown#10
(byte) play_move_down::movedown#11
(byte) play_move_down::movedown#12
(byte) play_move_down::movedown#2
(byte) play_move_down::movedown#3
(byte) play_move_down::movedown#4
(byte) play_move_down::movedown#5
(byte) play_move_down::movedown#6
(byte) play_move_down::movedown#7
(byte) play_move_down::movedown#8
(byte) play_move_down::movedown#9
(byte) play_move_down::return
(byte) play_move_down::return#0
(byte) play_move_down::return#1
(byte) play_move_down::return#2
(byte) play_move_down::return#3
(byte) play_move_down::return#4
(byte) play_move_down::return#5
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(bool~) play_move_leftright::$0
(bool~) play_move_leftright::$1
(bool~) play_move_leftright::$10
(bool~) play_move_leftright::$2
(byte/signed word/word/dword/signed dword~) play_move_leftright::$3
(byte~) play_move_leftright::$4
(bool~) play_move_leftright::$5
(bool~) play_move_leftright::$6
(byte/signed word/word/dword/signed dword~) play_move_leftright::$7
(byte~) play_move_leftright::$8
(bool~) play_move_leftright::$9
(label) play_move_leftright::@1
(label) play_move_leftright::@11
(label) play_move_leftright::@14
(label) play_move_leftright::@15
(label) play_move_leftright::@2
(label) play_move_leftright::@3
(label) play_move_leftright::@4
(label) play_move_leftright::@5
(label) play_move_leftright::@6
(label) play_move_leftright::@7
(label) play_move_leftright::@8
(label) play_move_leftright::@return
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0
(byte) play_move_leftright::key_event#1
(byte) play_move_leftright::key_event#2
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0
(byte) play_move_leftright::return#1
(byte) play_move_leftright::return#2
(byte) play_move_leftright::return#3
(byte) play_move_leftright::return#4
(byte) play_move_leftright::return#5
(byte) play_move_leftright::return#6
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(bool~) play_move_rotate::$0
(bool~) play_move_rotate::$1
(byte/signed word/word/dword/signed dword~) play_move_rotate::$2
(byte/word/dword~) play_move_rotate::$3
(byte/signed word/word/dword/signed dword~) play_move_rotate::$4
(byte/word/dword~) play_move_rotate::$5
(byte~) play_move_rotate::$6
(bool~) play_move_rotate::$7
(bool~) play_move_rotate::$8
(byte*~) play_move_rotate::$9
(label) play_move_rotate::@1
(label) play_move_rotate::@11
(label) play_move_rotate::@14
(label) play_move_rotate::@2
(label) play_move_rotate::@4
(label) play_move_rotate::@5
(label) play_move_rotate::@6
(label) play_move_rotate::@7
(label) play_move_rotate::@return
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0
(byte) play_move_rotate::key_event#1
(byte) play_move_rotate::key_event#2
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#0
(byte) play_move_rotate::orientation#1
(byte) play_move_rotate::orientation#2
(byte) play_move_rotate::orientation#3
(byte) play_move_rotate::orientation#4
(byte) play_move_rotate::orientation#5
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0
(byte) play_move_rotate::return#1
(byte) play_move_rotate::return#2
(byte) play_move_rotate::return#3
(byte) play_move_rotate::return#4
(byte) play_move_rotate::return#5
(byte) play_move_rotate::return#6
(byte[$22]) playfield
(byte[$22]) playfield#0
(byte*[PLAYFIELD_LINES#0]) playfield_lines
(byte*[PLAYFIELD_LINES#0]) playfield_lines#0
(byte[$23]) playfield_lines_idx
(byte[$23]) playfield_lines_idx#0
(void()) remove_lines()
(byte~) remove_lines::$0
(byte/signed word/word/dword/signed dword~) remove_lines::$1
(bool~) remove_lines::$10
(byte~) remove_lines::$11
(bool~) remove_lines::$12
(bool~) remove_lines::$13
(byte~) remove_lines::$2
(byte/signed word/word/dword/signed dword~) remove_lines::$3
(byte/signed word/word/dword/signed dword~) remove_lines::$4
(byte/signed word/word/dword/signed dword~) remove_lines::$5
(bool~) remove_lines::$6
(bool~) remove_lines::$7
(bool~) remove_lines::$8
(bool~) remove_lines::$9
(label) remove_lines::@1
(label) remove_lines::@10
(label) remove_lines::@2
(label) remove_lines::@3
(label) remove_lines::@4
(label) remove_lines::@5
(label) remove_lines::@6
(label) remove_lines::@8
(label) remove_lines::@9
(label) remove_lines::@return
(byte) remove_lines::c
(byte) remove_lines::c#0
(byte) remove_lines::c#1
(byte) remove_lines::c#2
(byte) remove_lines::full
(byte) remove_lines::full#0
(byte) remove_lines::full#1
(byte) remove_lines::full#2
(byte) remove_lines::full#3
(byte) remove_lines::full#4
(byte) remove_lines::r
(byte) remove_lines::r#0
(byte) remove_lines::r#1
(byte) remove_lines::r#2
(byte) remove_lines::r#3
(byte) remove_lines::r#4
(byte) remove_lines::r#5
(byte) remove_lines::r#6
(byte) remove_lines::r#7
(byte) remove_lines::r#8
(byte) remove_lines::w
(byte) remove_lines::w#0
(byte) remove_lines::w#1
(byte) remove_lines::w#10
(byte) remove_lines::w#11
(byte) remove_lines::w#12
(byte) remove_lines::w#2
(byte) remove_lines::w#3
(byte) remove_lines::w#4
(byte) remove_lines::w#5
(byte) remove_lines::w#6
(byte) remove_lines::w#7
(byte) remove_lines::w#8
(byte) remove_lines::w#9
(byte) remove_lines::x
(byte) remove_lines::x#0
(byte) remove_lines::x#1
(byte) remove_lines::x#2
(byte) remove_lines::x#3
(byte) remove_lines::x#4
(byte) remove_lines::y
(byte) remove_lines::y#0
(byte) remove_lines::y#1
(byte) remove_lines::y#2
(byte) remove_lines::y#3
(byte) remove_lines::y#4
(byte) remove_lines::y#5
(byte) remove_lines::y#6
(byte) remove_lines::y#7
(byte) remove_lines::y#8
(void()) render_current()
(byte~) render_current::$0
(byte/signed word/word/dword/signed dword~) render_current::$1
(bool~) render_current::$2
(bool~) render_current::$3
(bool~) render_current::$4
(bool~) render_current::$5
(bool~) render_current::$6
(bool~) render_current::$7
(bool~) render_current::$8
(bool~) render_current::$9
(label) render_current::@1
(label) render_current::@2
(label) render_current::@3
(label) render_current::@4
(label) render_current::@5
(label) render_current::@6
(label) render_current::@7
(label) render_current::@8
(label) render_current::@return
(byte) render_current::c
(byte) render_current::c#0
(byte) render_current::c#1
(byte) render_current::c#2
(byte) render_current::c#3
(byte) render_current::c#4
(byte) render_current::c#5
(byte) render_current::c#6
(byte) render_current::current_cell
(byte) render_current::current_cell#0
(byte) render_current::i
(byte) render_current::i#0
(byte) render_current::i#1
(byte) render_current::i#2
(byte) render_current::i#3
(byte) render_current::i#4
(byte) render_current::i#5
(byte) render_current::i#6
(byte) render_current::i#7
(byte) render_current::i#8
(byte) render_current::i#9
(byte) render_current::l
(byte) render_current::l#0
(byte) render_current::l#1
(byte) render_current::l#2
(byte) render_current::l#3
(byte) render_current::l#4
(byte) render_current::l#5
(byte) render_current::l#6
(byte) render_current::l#7
(byte) render_current::l#8
(byte) render_current::l#9
(byte*) render_current::screen_line
(byte*) render_current::screen_line#0
(byte*) render_current::screen_line#1
(byte*) render_current::screen_line#2
(byte*) render_current::screen_line#3
(byte*) render_current::screen_line#4
(byte*) render_current::screen_line#5
(byte) render_current::xpos
(byte) render_current::xpos#0
(byte) render_current::xpos#1
(byte) render_current::xpos#2
(byte) render_current::xpos#3
(byte) render_current::xpos#4
(byte) render_current::xpos#5
(byte) render_current::xpos#6
(byte) render_current::ypos2
(byte) render_current::ypos2#0
(byte) render_current::ypos2#1
(byte) render_current::ypos2#2
(byte) render_current::ypos2#3
(byte) render_current::ypos2#4
(byte) render_current::ypos2#5
(byte) render_current::ypos2#6
(byte) render_current::ypos2#7
(byte) render_current::ypos2#8
(byte) render_current::ypos2#9
(void()) render_init()
(byte*~) render_init::$10
(bool~) render_init::$11
(bool~) render_init::$12
(byte*~) render_init::$2
(byte*~) render_init::$3
(byte/signed word/word/dword/signed dword~) render_init::$4
(byte~) render_init::$5
(bool~) render_init::$6
(byte*~) render_init::$7
(byte/signed word/word/dword/signed dword~) render_init::$8
(byte/signed word/word/dword/signed dword~) render_init::$9
(label) render_init::@1
(label) render_init::@2
(label) render_init::@3
(label) render_init::@4
(label) render_init::@5
(label) render_init::@7
(label) render_init::@8
(label) render_init::@return
(byte) render_init::c
(byte) render_init::c#0
(byte) render_init::c#1
(byte) render_init::c#2
(byte) render_init::i
(byte) render_init::i#0
(byte) render_init::i#1
(byte) render_init::i#2
(byte) render_init::l
(byte) render_init::l#0
(byte) render_init::l#1
(byte) render_init::l#2
(byte) render_init::l#3
(byte) render_init::l#4
(byte*) render_init::li
(byte*) render_init::li#0
(byte*) render_init::li#1
(byte*) render_init::li#2
(byte*) render_init::line
(byte*) render_init::line#0
(byte*) render_init::line#1
(byte*) render_init::line#2
(byte*) render_init::line#3
(byte*) render_init::line#4
(void()) render_playfield()
(byte/signed word/word/dword/signed dword~) render_playfield::$0
(byte~) render_playfield::$1
(byte/signed word/word/dword/signed dword~) render_playfield::$2
(bool~) render_playfield::$3
(bool~) render_playfield::$4
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#0
(byte) render_playfield::c#1
(byte) render_playfield::c#2
(byte) render_playfield::i
(byte) render_playfield::i#0
(byte) render_playfield::i#1
(byte) render_playfield::i#2
(byte) render_playfield::i#3
(byte) render_playfield::i#4
(byte) render_playfield::l
(byte) render_playfield::l#0
(byte) render_playfield::l#1
(byte) render_playfield::l#2
(byte) render_playfield::l#3
(byte) render_playfield::l#4
(byte*) render_playfield::line
(byte*) render_playfield::line#0
(byte*) render_playfield::line#1
(byte*) render_playfield::line#2
(byte*[$24]) screen_lines
(byte*[$24]) screen_lines#0
(byte()) sid_rnd()
(label) sid_rnd::@return
(byte) sid_rnd::return
(byte) sid_rnd::return#0
(byte) sid_rnd::return#1
(byte) sid_rnd::return#2
(byte) sid_rnd::return#3
(byte) sid_rnd::return#4
(void()) sid_rnd_init()
(label) sid_rnd_init::@return
(void()) spawn_current()
(bool~) spawn_current::$0
(byte~) spawn_current::$1
(byte~) spawn_current::$2
(byte~) spawn_current::$3
(byte*~) spawn_current::$4
(label) spawn_current::@1
(label) spawn_current::@2
(label) spawn_current::@3
(label) spawn_current::@7
(label) spawn_current::@return
(byte) spawn_current::piece_idx
(byte) spawn_current::piece_idx#0
(byte) spawn_current::piece_idx#1
(byte) spawn_current::piece_idx#2
(byte) spawn_current::piece_idx#3
(void()) tables_init()
(byte/signed word/word/dword/signed dword~) tables_init::$0
(byte~) tables_init::$1
(bool~) tables_init::$2
(byte~) tables_init::$3
(label) tables_init::@1
(label) tables_init::@2
(label) tables_init::@return
(byte) tables_init::idx
(byte) tables_init::idx#0
(byte) tables_init::idx#1
(byte) tables_init::idx#2
(byte) tables_init::j
(byte) tables_init::j#0
(byte) tables_init::j#1
(byte) tables_init::j#2
(byte*) tables_init::pli
(byte*) tables_init::pli#0
(byte*) tables_init::pli#1
(byte*) tables_init::pli#2

Inversing boolean not (bool~) keyboard_event_scan::$6 ← (byte~) keyboard_event_scan::$4 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) keyboard_event_scan::$5 ← (byte~) keyboard_event_scan::$4 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) keyboard_event_scan::$8 ← (byte) keyboard_events_size#10 == (byte/signed byte/word/signed word/dword/signed dword) 8 from (bool~) keyboard_event_scan::$7 ← (byte) keyboard_events_size#10 != (byte/signed byte/word/signed word/dword/signed dword) 8
Inversing boolean not (bool~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$14 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) keyboard_event_scan::$15 ← (byte~) keyboard_event_scan::$14 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) keyboard_event_scan::$20 ← (byte~) keyboard_event_scan::$18 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) keyboard_event_scan::$19 ← (byte~) keyboard_event_scan::$18 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) keyboard_event_scan::$24 ← (byte~) keyboard_event_scan::$22 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) keyboard_event_scan::$23 ← (byte~) keyboard_event_scan::$22 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) keyboard_event_scan::$28 ← (byte~) keyboard_event_scan::$26 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) keyboard_event_scan::$27 ← (byte~) keyboard_event_scan::$26 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) main::$14 ← (byte) main::render#3 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) main::$13 ← (byte) main::render#3 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) play_move_down::$1 ← (byte) play_move_down::key_event#1 != (byte) KEY_SPACE#0 from (bool~) play_move_down::$0 ← (byte) play_move_down::key_event#1 == (byte) KEY_SPACE#0
Inversing boolean not (bool~) play_move_down::$4 ← (byte~) play_move_down::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) play_move_down::$3 ← (byte~) play_move_down::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) play_move_down::$8 ← (byte) current_movedown_counter#10 < (byte) current_movedown_slow#0 from (bool~) play_move_down::$7 ← (byte) current_movedown_counter#10 >= (byte) current_movedown_slow#0
Inversing boolean not (bool~) play_move_down::$6 ← (byte) current_movedown_counter#11 < (byte) current_movedown_fast#0 from (bool~) play_move_down::$5 ← (byte) current_movedown_counter#11 >= (byte) current_movedown_fast#0
Inversing boolean not (bool~) play_move_down::$10 ← (byte) play_move_down::movedown#6 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) play_move_down::$9 ← (byte) play_move_down::movedown#6 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) play_move_leftright::$10 ← (byte~) play_move_leftright::$8 != (byte) COLLISION_NONE#0 from (bool~) play_move_leftright::$9 ← (byte~) play_move_leftright::$8 == (byte) COLLISION_NONE#0
Inversing boolean not (bool~) play_move_leftright::$2 ← (byte) play_move_leftright::key_event#2 != (byte) KEY_DOT#0 from (bool~) play_move_leftright::$1 ← (byte) play_move_leftright::key_event#2 == (byte) KEY_DOT#0
Inversing boolean not (bool~) play_move_leftright::$6 ← (byte~) play_move_leftright::$4 != (byte) COLLISION_NONE#0 from (bool~) play_move_leftright::$5 ← (byte~) play_move_leftright::$4 == (byte) COLLISION_NONE#0
Inversing boolean not (bool~) play_move_rotate::$8 ← (byte~) play_move_rotate::$6 != (byte) COLLISION_NONE#0 from (bool~) play_move_rotate::$7 ← (byte~) play_move_rotate::$6 == (byte) COLLISION_NONE#0
Inversing boolean not (bool~) collision::$3 ← *((byte*) collision::piece_gfx#1 + (byte) collision::i#2) == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) collision::$2 ← *((byte*) collision::piece_gfx#1 + (byte) collision::i#2) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) collision::$6 ← (byte) collision::ypos2#3 < (byte/signed word/word/dword/signed dword~) collision::$4 from (bool~) collision::$5 ← (byte) collision::ypos2#3 >= (byte/signed word/word/dword/signed dword~) collision::$4
Inversing boolean not (bool~) collision::$9 ← (byte~) collision::$7 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) collision::$8 ← (byte~) collision::$7 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) collision::$11 ← (byte) collision::col#4 < (byte) PLAYFIELD_COLS#0 from (bool~) collision::$10 ← (byte) collision::col#4 >= (byte) PLAYFIELD_COLS#0
Inversing boolean not (bool~) collision::$13 ← *((byte*) collision::playfield_line#1 + (byte) collision::col#5) == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) collision::$12 ← *((byte*) collision::playfield_line#1 + (byte) collision::col#5) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) lock_current::$2 ← *((byte*) current_piece_gfx#19 + (byte) lock_current::i#2) == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) lock_current::$1 ← *((byte*) current_piece_gfx#19 + (byte) lock_current::i#2) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) remove_lines::$7 ← (byte) remove_lines::c#0 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) remove_lines::$6 ← (byte) remove_lines::c#0 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) remove_lines::$10 ← (byte) remove_lines::full#2 != (byte/signed byte/word/signed word/dword/signed dword) 1 from (bool~) remove_lines::$9 ← (byte) remove_lines::full#2 == (byte/signed byte/word/signed word/dword/signed dword) 1
Inversing boolean not (bool~) render_current::$3 ← (byte) render_current::ypos2#2 >= (byte/signed word/word/dword/signed dword~) render_current::$1 from (bool~) render_current::$2 ← (byte) render_current::ypos2#2 < (byte/signed word/word/dword/signed dword~) render_current::$1
Inversing boolean not (bool~) render_current::$5 ← (byte) render_current::current_cell#0 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) render_current::$4 ← (byte) render_current::current_cell#0 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) render_current::$7 ← (byte) render_current::xpos#3 >= (byte) PLAYFIELD_COLS#0 from (bool~) render_current::$6 ← (byte) render_current::xpos#3 < (byte) PLAYFIELD_COLS#0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) fill::end#0 = (byte*~) fill::$0 
Alias (byte*) fill::addr#0 = (byte*) fill::start#2 
Alias (byte) keyboard_matrix_read::return#0 = (byte) keyboard_matrix_read::row_pressed_bits#0 (byte~) keyboard_matrix_read::$0 (byte) keyboard_matrix_read::return#3 (byte) keyboard_matrix_read::return#1 
Alias (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#4 
Alias (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#3 (byte) keyboard_event_scan::row#8 (byte) keyboard_event_scan::row#7 
Alias (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#7 (byte) keyboard_event_scan::keycode#12 (byte) keyboard_event_scan::keycode#3 
Alias (byte) keyboard_events_size#29 = (byte) keyboard_events_size#36 (byte) keyboard_events_size#45 (byte) keyboard_events_size#61 
Alias (byte) keyboard_event_scan::row_scan#0 = (byte~) keyboard_event_scan::$0 (byte) keyboard_event_scan::row_scan#4 
Alias (byte) keyboard_event_scan::keycode#1 = (byte/signed word/word/dword/signed dword~) keyboard_event_scan::$2 
Alias (byte) keyboard_events_size#10 = (byte) keyboard_events_size#21 (byte) keyboard_events_size#37 (byte) keyboard_events_size#22 (byte) keyboard_events_size#11 (byte) keyboard_events_size#12 
Alias (byte) keyboard_event_scan::row_scan#1 = (byte) keyboard_event_scan::row_scan#6 (byte) keyboard_event_scan::row_scan#8 (byte) keyboard_event_scan::row_scan#2 (byte) keyboard_event_scan::row_scan#9 (byte) keyboard_event_scan::row_scan#7 
Alias (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#8 (byte) keyboard_event_scan::col#6 (byte) keyboard_event_scan::col#4 (byte) keyboard_event_scan::col#7 (byte) keyboard_event_scan::col#5 
Alias (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#13 (byte) keyboard_event_scan::keycode#8 (byte) keyboard_event_scan::keycode#9 (byte) keyboard_event_scan::keycode#5 (byte) keyboard_event_scan::keycode#6 
Alias (byte) keyboard_event_scan::row#10 = (byte) keyboard_event_scan::row#13 (byte) keyboard_event_scan::row#5 (byte) keyboard_event_scan::row#11 (byte) keyboard_event_scan::row#14 (byte) keyboard_event_scan::row#12 
Alias (byte) keyboard_event_scan::event_type#0 = (byte~) keyboard_event_scan::$9 
Alias (byte) keyboard_event_scan::row_scan#3 = (byte) keyboard_event_scan::row_scan#5 
Alias (byte) keyboard_event_scan::row#6 = (byte) keyboard_event_scan::row#9 
Alias (byte) keyboard_event_scan::keycode#15 = (byte) keyboard_event_scan::keycode#2 
Alias (byte) keyboard_events_size#30 = (byte) keyboard_events_size#62 
Alias (byte) keyboard_events_size#55 = (byte) keyboard_events_size#71 (byte) keyboard_events_size#69 (byte) keyboard_events_size#68 
Alias (byte) keyboard_event_pressed::return#0 = (byte) keyboard_event_pressed::return#7 
Alias (byte) keyboard_modifiers#1 = (byte) keyboard_modifiers#18 (byte) keyboard_modifiers#10 
Alias (byte) keyboard_event_pressed::return#1 = (byte) keyboard_event_pressed::return#8 
Alias (byte) keyboard_modifiers#11 = (byte) keyboard_modifiers#19 (byte) keyboard_modifiers#26 
Alias (byte) keyboard_events_size#63 = (byte) keyboard_events_size#64 (byte) keyboard_events_size#66 
Alias (byte) keyboard_modifiers#2 = (byte~) keyboard_event_scan::$17 
Alias (byte) keyboard_event_pressed::return#2 = (byte) keyboard_event_pressed::return#9 
Alias (byte) keyboard_modifiers#12 = (byte) keyboard_modifiers#20 (byte) keyboard_modifiers#27 
Alias (byte) keyboard_events_size#46 = (byte) keyboard_events_size#47 (byte) keyboard_events_size#56 
Alias (byte) keyboard_modifiers#3 = (byte~) keyboard_event_scan::$21 
Alias (byte) keyboard_event_pressed::return#10 = (byte) keyboard_event_pressed::return#3 
Alias (byte) keyboard_modifiers#13 = (byte) keyboard_modifiers#21 (byte) keyboard_modifiers#28 (byte) keyboard_modifiers#22 
Alias (byte) keyboard_events_size#23 = (byte) keyboard_events_size#31 (byte) keyboard_events_size#38 (byte) keyboard_events_size#24 
Alias (byte) keyboard_modifiers#4 = (byte~) keyboard_event_scan::$25 
Alias (byte) keyboard_modifiers#5 = (byte~) keyboard_event_scan::$29 
Alias (byte) keyboard_events_size#13 = (byte) keyboard_events_size#3 
Alias (byte) keyboard_modifiers#14 = (byte) keyboard_modifiers#6 
Alias (byte) keyboard_event_pressed::return#11 = (byte) keyboard_event_pressed::return#4 (byte~) keyboard_event_pressed::$2 (byte) keyboard_event_pressed::return#5 
Alias (byte) keyboard_events_size#14 = (byte) keyboard_events_size#25 (byte) keyboard_events_size#15 
Alias (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#4 
Alias (byte) keyboard_events_size#16 = (byte) keyboard_events_size#5 
Alias (byte) keyboard_events_size#0 = (byte) keyboard_events_size#57 (byte) keyboard_events_size#53 (byte) keyboard_events_size#44 (byte) keyboard_events_size#35 (byte) keyboard_events_size#28 
Alias (byte) keyboard_modifiers#0 = (byte) keyboard_modifiers#45 (byte) keyboard_modifiers#44 (byte) keyboard_modifiers#38 (byte) keyboard_modifiers#32 (byte) keyboard_modifiers#25 
Alias (byte) sid_rnd::return#0 = (byte) sid_rnd::return#3 (byte) sid_rnd::return#1 
Alias (byte*) SCREEN#2 = (byte*) SCREEN#3 
Alias (byte*) current_piece#18 = (byte*) current_piece#42 (byte*) current_piece#54 (byte*) current_piece#30 
Alias (byte) current_orientation#26 = (byte) current_orientation#51 (byte) current_orientation#62 (byte) current_orientation#41 
Alias (byte*) current_piece_gfx#23 = (byte*) current_piece_gfx#53 (byte*) current_piece_gfx#67 (byte*) current_piece_gfx#37 
Alias (byte) current_xpos#30 = (byte) current_xpos#66 (byte) current_xpos#80 (byte) current_xpos#48 
Alias (byte) current_ypos#24 = (byte) current_ypos#51 (byte) current_ypos#60 (byte) current_ypos#40 
Alias (byte) current_piece_color#18 = (byte) current_piece_color#38 (byte) current_piece_color#52 (byte) current_piece_color#27 
Alias (byte) keyboard_events_size#33 = (byte) keyboard_events_size#67 (byte) keyboard_events_size#70 (byte) keyboard_events_size#65 (byte) keyboard_events_size#58 (byte) keyboard_events_size#48 (byte) keyboard_events_size#39 
Alias (byte) keyboard_modifiers#30 = (byte) keyboard_modifiers#51 (byte) keyboard_modifiers#52 (byte) keyboard_modifiers#49 (byte) keyboard_modifiers#46 (byte) keyboard_modifiers#39 (byte) keyboard_modifiers#33 
Alias (byte) current_movedown_counter#22 = (byte) current_movedown_counter#45 (byte) current_movedown_counter#46 (byte) current_movedown_counter#42 (byte) current_movedown_counter#38 (byte) current_movedown_counter#34 (byte) current_movedown_counter#27 
Alias (byte*) current_piece#1 = (byte*) current_piece#9 (byte*) current_piece#43 (byte*) current_piece#32 
Alias (byte) current_orientation#1 = (byte) current_orientation#12 (byte) current_orientation#52 (byte) current_orientation#43 
Alias (byte*) current_piece_gfx#1 = (byte*) current_piece_gfx#12 (byte*) current_piece_gfx#54 (byte*) current_piece_gfx#39 
Alias (byte) current_xpos#1 = (byte) current_xpos#13 (byte) current_xpos#67 (byte) current_xpos#50 
Alias (byte) current_ypos#1 = (byte) current_ypos#10 (byte) current_ypos#37 (byte) current_ypos#42 
Alias (byte) current_piece_color#1 = (byte) current_piece_color#9 (byte) current_piece_color#39 (byte) current_piece_color#29 
Alias (byte) keyboard_events_size#19 = (byte) keyboard_events_size#49 (byte) keyboard_events_size#27 (byte) keyboard_events_size#8 
Alias (byte) keyboard_modifiers#16 = (byte) keyboard_modifiers#40 (byte) keyboard_modifiers#24 (byte) keyboard_modifiers#8 
Alias (byte) current_movedown_counter#15 = (byte) current_movedown_counter#43 (byte) current_movedown_counter#8 (byte) current_movedown_counter#2 
Alias (byte) current_ypos#12 = (byte) current_ypos#68 (byte) current_ypos#26 (byte) current_ypos#3 
Alias (byte*) current_piece#11 = (byte*) current_piece#66 (byte*) current_piece#20 (byte*) current_piece#3 
Alias (byte) current_orientation#15 = (byte) current_orientation#72 (byte) current_orientation#29 (byte) current_orientation#4 
Alias (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#81 (byte*) current_piece_gfx#26 (byte*) current_piece_gfx#4 
Alias (byte) current_xpos#16 = (byte) current_xpos#93 (byte) current_xpos#32 (byte) current_xpos#4 
Alias (byte) current_piece_color#11 = (byte) current_piece_color#69 (byte) current_piece_color#20 (byte) current_piece_color#3 
Alias (byte) keyboard_events_size#40 = (byte) keyboard_events_size#50 
Alias (byte) keyboard_modifiers#34 = (byte) keyboard_modifiers#41 
Alias (byte) current_movedown_counter#39 = (byte) current_movedown_counter#44 
Alias (byte) current_ypos#64 = (byte) current_ypos#69 
Alias (byte*) current_piece#61 = (byte*) current_piece#67 
Alias (byte) current_orientation#67 = (byte) current_orientation#73 
Alias (byte*) current_piece_gfx#76 = (byte*) current_piece_gfx#82 
Alias (byte) current_xpos#88 = (byte) current_xpos#94 
Alias (byte) current_piece_color#62 = (byte) current_piece_color#70 
Alias (byte) keyboard_events_size#26 = (byte) keyboard_events_size#41 (byte) keyboard_events_size#34 
Alias (byte) keyboard_modifiers#23 = (byte) keyboard_modifiers#35 (byte) keyboard_modifiers#31 
Alias (byte) current_movedown_counter#14 = (byte) current_movedown_counter#40 (byte) current_movedown_counter#35 (byte) current_movedown_counter#28 (byte) current_movedown_counter#23 
Alias (byte) current_ypos#25 = (byte) current_ypos#65 (byte) current_ypos#61 (byte) current_ypos#52 (byte) current_ypos#43 
Alias (byte*) current_piece#19 = (byte*) current_piece#62 (byte*) current_piece#55 (byte*) current_piece#44 (byte*) current_piece#33 
Alias (byte) current_orientation#27 = (byte) current_orientation#68 (byte) current_orientation#63 (byte) current_orientation#53 (byte) current_orientation#44 
Alias (byte*) current_piece_gfx#24 = (byte*) current_piece_gfx#77 (byte*) current_piece_gfx#68 (byte*) current_piece_gfx#55 (byte*) current_piece_gfx#40 
Alias (byte) current_xpos#31 = (byte) current_xpos#89 (byte) current_xpos#81 (byte) current_xpos#68 (byte) current_xpos#51 
Alias (byte) current_piece_color#19 = (byte) current_piece_color#63 (byte) current_piece_color#53 (byte) current_piece_color#40 (byte) current_piece_color#30 
Alias (byte) keyboard_events_size#17 = (byte) keyboard_events_size#6 
Alias (byte) keyboard_modifiers#15 = (byte) keyboard_modifiers#7 (byte) keyboard_modifiers#50 (byte) keyboard_modifiers#47 (byte) keyboard_modifiers#42 (byte) keyboard_modifiers#36 (byte) keyboard_modifiers#48 (byte) keyboard_modifiers#43 (byte) keyboard_modifiers#37 
Alias (byte) keyboard_event_get::return#3 = (byte) keyboard_event_get::return#5 
Alias (byte) keyboard_events_size#18 = (byte) keyboard_events_size#7 (byte) keyboard_events_size#59 (byte) keyboard_events_size#51 (byte) keyboard_events_size#42 (byte) keyboard_events_size#60 (byte) keyboard_events_size#52 (byte) keyboard_events_size#43 
Alias (byte) main::key_event#0 = (byte~) main::$9 (byte) main::key_event#1 (byte) main::key_event#2 
Alias (byte) play_move_down::return#0 = (byte) play_move_down::return#4 
Alias (byte) main::render#0 = (byte) main::render#4 
Alias (byte) current_movedown_counter#1 = (byte) current_movedown_counter#7 (byte) current_movedown_counter#36 (byte) current_movedown_counter#29 (byte) current_movedown_counter#41 (byte) current_movedown_counter#37 (byte) current_movedown_counter#30 
Alias (byte) current_ypos#11 = (byte) current_ypos#2 (byte) current_ypos#58 (byte) current_ypos#53 (byte) current_ypos#44 (byte) current_ypos#38 (byte) current_ypos#54 
Alias (byte*) current_piece#10 = (byte*) current_piece#2 (byte*) current_piece#56 (byte*) current_piece#45 (byte*) current_piece#63 (byte*) current_piece#57 (byte*) current_piece#46 
Alias (byte) current_orientation#13 = (byte) current_orientation#2 (byte) current_orientation#28 
Alias (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#2 (byte*) current_piece_gfx#25 
Alias (byte) current_xpos#14 = (byte) current_xpos#2 
Alias (byte) current_piece_color#10 = (byte) current_piece_color#2 (byte) current_piece_color#54 (byte) current_piece_color#41 (byte) current_piece_color#64 (byte) current_piece_color#55 (byte) current_piece_color#42 
Alias (byte) play_move_leftright::return#0 = (byte) play_move_leftright::return#5 
Alias (byte) main::render#1 = (byte) main::render#5 
Alias (byte) current_xpos#15 = (byte) current_xpos#3 (byte) current_xpos#69 (byte) current_xpos#82 (byte) current_xpos#78 (byte) current_xpos#70 
Alias (byte) play_move_rotate::return#0 = (byte) play_move_rotate::return#5 
Alias (byte) main::render#2 = (byte) main::render#6 
Alias (byte) current_orientation#14 = (byte) current_orientation#3 (byte) current_orientation#69 (byte) current_orientation#64 (byte) current_orientation#54 
Alias (byte*) current_piece_gfx#14 = (byte*) current_piece_gfx#3 (byte*) current_piece_gfx#78 (byte*) current_piece_gfx#69 (byte*) current_piece_gfx#56 
Alias (byte) keyboard_event_pressed::return#12 = (byte) keyboard_event_pressed::return#6 
Alias (byte) current_movedown_counter#11 = (byte) current_movedown_counter#17 (byte) current_movedown_counter#24 (byte) current_movedown_counter#18 (byte) current_movedown_counter#16 
Alias (byte) play_move_down::movedown#10 = (byte) play_move_down::movedown#12 (byte) play_move_down::movedown#8 (byte) play_move_down::movedown#11 (byte) play_move_down::movedown#5 
Alias (byte) current_ypos#55 = (byte) current_ypos#56 (byte) current_ypos#62 (byte) current_ypos#63 (byte) current_ypos#57 
Alias (byte) current_xpos#71 = (byte) current_xpos#72 (byte) current_xpos#83 (byte) current_xpos#84 (byte) current_xpos#73 
Alias (byte) current_orientation#55 = (byte) current_orientation#56 (byte) current_orientation#65 (byte) current_orientation#66 (byte) current_orientation#57 
Alias (byte*) current_piece#58 = (byte*) current_piece#59 (byte*) current_piece#64 (byte*) current_piece#65 (byte*) current_piece#60 
Alias (byte*) current_piece_gfx#70 = (byte*) current_piece_gfx#71 (byte*) current_piece_gfx#79 (byte*) current_piece_gfx#80 (byte*) current_piece_gfx#72 
Alias (byte) current_piece_color#56 = (byte) current_piece_color#57 (byte) current_piece_color#65 (byte) current_piece_color#66 (byte) current_piece_color#58 
Alias (byte) play_move_down::movedown#0 = (byte) play_move_down::movedown#4 
Alias (byte) current_movedown_counter#3 = (byte) current_movedown_counter#31 
Alias (byte) current_ypos#66 = (byte) current_ypos#67 
Alias (byte) current_xpos#90 = (byte) current_xpos#91 
Alias (byte) current_orientation#70 = (byte) current_orientation#71 
Alias (byte*) current_piece#68 = (byte*) current_piece#69 
Alias (byte*) current_piece_gfx#83 = (byte*) current_piece_gfx#84 
Alias (byte) current_piece_color#71 = (byte) current_piece_color#72 
Alias (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#9 
Alias (byte) current_ypos#45 = (byte) current_ypos#46 
Alias (byte) current_xpos#52 = (byte) current_xpos#53 
Alias (byte) current_orientation#45 = (byte) current_orientation#46 
Alias (byte) current_movedown_counter#10 = (byte) current_movedown_counter#32 
Alias (byte*) current_piece#47 = (byte*) current_piece#48 
Alias (byte*) current_piece_gfx#57 = (byte*) current_piece_gfx#58 
Alias (byte) current_piece_color#43 = (byte) current_piece_color#44 
Alias (byte) current_movedown_counter#19 = (byte) current_movedown_counter#25 
Alias (byte) current_ypos#13 = (byte) current_ypos#30 (byte) current_ypos#27 (byte) current_ypos#28 (byte) current_ypos#14 (byte) current_ypos#36 (byte) current_ypos#47 (byte) current_ypos#29 
Alias (byte*) current_piece#21 = (byte*) current_piece#22 (byte*) current_piece#34 (byte*) current_piece#25 (byte*) current_piece#49 (byte*) current_piece#36 (byte*) current_piece#50 (byte*) current_piece#35 
Alias (byte) current_orientation#16 = (byte) current_orientation#32 (byte) current_orientation#30 (byte) current_orientation#58 (byte) current_orientation#48 (byte) current_orientation#59 (byte) current_orientation#47 (byte) current_orientation#31 
Alias (byte*) current_piece_gfx#27 = (byte*) current_piece_gfx#28 (byte*) current_piece_gfx#41 (byte*) current_piece_gfx#73 (byte*) current_piece_gfx#59 (byte*) current_piece_gfx#43 (byte*) current_piece_gfx#60 (byte*) current_piece_gfx#42 
Alias (byte) current_xpos#17 = (byte) current_xpos#35 (byte) current_xpos#33 (byte) current_xpos#74 (byte) current_xpos#55 (byte) current_xpos#61 (byte) current_xpos#54 (byte) current_xpos#34 
Alias (byte) current_piece_color#21 = (byte) current_piece_color#22 (byte) current_piece_color#31 (byte) current_piece_color#59 (byte) current_piece_color#45 (byte) current_piece_color#33 (byte) current_piece_color#46 (byte) current_piece_color#32 
Alias (byte) collision::ypos#0 = (byte/signed word/word/dword/signed dword~) play_move_down::$11 
Alias (byte) collision::return#0 = (byte) collision::return#10 
Alias (byte*) current_piece#12 = (byte*) current_piece#4 
Alias (byte) current_orientation#17 = (byte) current_orientation#5 
Alias (byte*) current_piece_gfx#16 = (byte*) current_piece_gfx#5 
Alias (byte) current_xpos#18 = (byte) current_xpos#5 
Alias (byte) current_ypos#15 = (byte) current_ypos#5 
Alias (byte) current_piece_color#12 = (byte) current_piece_color#4 
Alias (byte) play_move_down::return#3 = (byte) play_move_down::return#5 
Alias (byte) current_movedown_counter#12 = (byte) current_movedown_counter#5 
Alias (byte) current_ypos#16 = (byte) current_ypos#6 
Alias (byte*) current_piece#13 = (byte*) current_piece#5 
Alias (byte) current_orientation#18 = (byte) current_orientation#6 
Alias (byte*) current_piece_gfx#17 = (byte*) current_piece_gfx#6 
Alias (byte) current_xpos#19 = (byte) current_xpos#6 
Alias (byte) current_piece_color#13 = (byte) current_piece_color#5 
Alias (byte) current_xpos#20 = (byte) current_xpos#37 (byte) current_xpos#41 (byte) current_xpos#38 (byte) current_xpos#56 (byte) current_xpos#21 (byte) current_xpos#39 (byte) current_xpos#57 (byte) current_xpos#22 (byte) current_xpos#58 (byte) current_xpos#24 
Alias (byte) current_ypos#17 = (byte) current_ypos#32 (byte) current_ypos#33 (byte) current_ypos#18 
Alias (byte) current_orientation#19 = (byte) current_orientation#34 (byte) current_orientation#35 (byte) current_orientation#20 
Alias (byte*) current_piece#26 = (byte*) current_piece#37 (byte*) current_piece#38 (byte*) current_piece#27 
Alias (byte) collision::xpos#1 = (byte/signed word/word/dword/signed dword~) play_move_leftright::$7 
Alias (byte) collision::return#1 = (byte) collision::return#11 
Alias (byte) play_move_leftright::key_event#1 = (byte) play_move_leftright::key_event#2 
Alias (byte) collision::xpos#2 = (byte/signed word/word/dword/signed dword~) play_move_leftright::$3 
Alias (byte) collision::return#12 = (byte) collision::return#2 
Alias (byte) play_move_leftright::return#2 = (byte) play_move_leftright::return#6 
Alias (byte) current_xpos#23 = (byte) current_xpos#8 
Alias (byte) current_orientation#21 = (byte) current_orientation#36 (byte) current_orientation#37 (byte) current_orientation#22 (byte) current_orientation#39 
Alias (byte) current_xpos#42 = (byte) current_xpos#59 (byte) current_xpos#60 (byte) current_xpos#43 
Alias (byte) current_ypos#34 = (byte) current_ypos#48 (byte) current_ypos#49 (byte) current_ypos#35 
Alias (byte*) current_piece#39 = (byte*) current_piece#51 (byte*) current_piece#52 (byte*) current_piece#40 
Alias (byte*) current_piece_gfx#31 = (byte*) current_piece_gfx#74 (byte*) current_piece_gfx#61 (byte*) current_piece_gfx#44 (byte*) current_piece_gfx#75 
Alias (byte) play_move_rotate::orientation#1 = (byte/word/dword~) play_move_rotate::$5 
Alias (byte) play_move_rotate::key_event#1 = (byte) play_move_rotate::key_event#2 
Alias (byte) play_move_rotate::orientation#2 = (byte/word/dword~) play_move_rotate::$3 
Alias (byte) play_move_rotate::return#2 = (byte) play_move_rotate::return#6 
Alias (byte) current_orientation#23 = (byte) current_orientation#7 
Alias (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#7 
Alias (byte) collision::return#13 = (byte) collision::return#3 
Alias (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#5 (byte) play_move_rotate::orientation#4 
Alias (byte*) current_piece#14 = (byte*) current_piece#24 (byte*) current_piece#28 
Alias (byte) current_orientation#38 = (byte) current_orientation#49 (byte) current_orientation#60 
Alias (byte*) current_piece_gfx#30 = (byte*) current_piece_gfx#45 (byte*) current_piece_gfx#62 
Alias (byte*) current_piece_gfx#8 = (byte*~) play_move_rotate::$9 
Alias (byte*) current_piece#0 = (byte*) current_piece#53 (byte*) current_piece#41 (byte*) current_piece#29 
Alias (byte) current_orientation#0 = (byte) current_orientation#61 (byte) current_orientation#50 (byte) current_orientation#40 
Alias (byte*) current_piece_gfx#0 = (byte*) current_piece_gfx#63 (byte*) current_piece_gfx#52 (byte*) current_piece_gfx#36 
Alias (byte) current_xpos#0 = (byte) current_xpos#77 (byte) current_xpos#65 (byte) current_xpos#47 
Alias (byte) current_ypos#0 = (byte) current_ypos#59 (byte) current_ypos#50 (byte) current_ypos#39 
Alias (byte) current_piece_color#0 = (byte) current_piece_color#49 (byte) current_piece_color#37 (byte) current_piece_color#26 
Alias (byte) current_movedown_counter#0 = (byte) current_movedown_counter#33 (byte) current_movedown_counter#26 (byte) current_movedown_counter#20 
Alias (byte*) collision::piece_gfx#0 = (byte*~) collision::$0 
Alias (byte) collision::ypos2#0 = (byte~) collision::$1 
Alias (byte) collision::col#0 = (byte) collision::xpos#4 
Alias (byte) collision::ypos2#10 = (byte) collision::ypos2#3 (byte) collision::ypos2#5 (byte) collision::ypos2#9 (byte) collision::ypos2#8 (byte) collision::ypos2#7 
Alias (byte) collision::col#3 = (byte) collision::col#8 (byte) collision::col#6 (byte) collision::col#4 (byte) collision::col#5 (byte) collision::col#7 
Alias (byte*) collision::playfield_line#1 = (byte*) collision::playfield_line#4 (byte*) collision::playfield_line#5 (byte*) collision::playfield_line#3 (byte*) collision::playfield_line#2 (byte*) collision::playfield_line#7 
Alias (byte) collision::c#3 = (byte) collision::c#8 (byte) collision::c#7 (byte) collision::c#6 (byte) collision::c#5 (byte) collision::c#4 
Alias (byte*) collision::piece_gfx#1 = (byte*) collision::piece_gfx#9 (byte*) collision::piece_gfx#8 (byte*) collision::piece_gfx#7 (byte*) collision::piece_gfx#6 (byte*) collision::piece_gfx#5 
Alias (byte) collision::i#1 = (byte) collision::i#10 (byte) collision::i#9 (byte) collision::i#8 (byte) collision::i#7 (byte) collision::i#6 
Alias (byte) collision::l#10 = (byte) collision::l#4 (byte) collision::l#9 (byte) collision::l#8 (byte) collision::l#7 (byte) collision::l#5 
Alias (byte) collision::xpos#10 = (byte) collision::xpos#13 (byte) collision::xpos#8 (byte) collision::xpos#12 (byte) collision::xpos#11 (byte) collision::xpos#9 
Alias (byte) collision::return#14 = (byte) collision::return#5 
Alias (byte) collision::ypos2#4 = (byte) collision::ypos2#6 
Alias (byte) collision::l#2 = (byte) collision::l#3 
Alias (byte) collision::xpos#6 = (byte) collision::xpos#7 
Alias (byte*) collision::piece_gfx#3 = (byte*) collision::piece_gfx#4 
Alias (byte) collision::i#4 = (byte) collision::i#5 
Alias (byte) lock_current::ypos2#0 = (byte~) lock_current::$0 
Alias (byte) current_piece_color#14 = (byte) current_piece_color#24 
Alias (byte*) lock_current::playfield_line#1 = (byte*) lock_current::playfield_line#2 
Alias (byte) lock_current::col#3 = (byte) lock_current::col#4 
Alias (byte) lock_current::c#3 = (byte) lock_current::c#4 
Alias (byte*) current_piece_gfx#19 = (byte*) current_piece_gfx#48 
Alias (byte) lock_current::i#1 = (byte) lock_current::i#6 
Alias (byte) lock_current::ypos2#5 = (byte) lock_current::ypos2#6 
Alias (byte) lock_current::l#4 = (byte) lock_current::l#5 
Alias (byte) current_xpos#75 = (byte) current_xpos#76 
Alias (byte) lock_current::ypos2#3 = (byte) lock_current::ypos2#4 
Alias (byte) lock_current::l#2 = (byte) lock_current::l#3 
Alias (byte) current_xpos#45 = (byte) current_xpos#62 
Alias (byte*) current_piece_gfx#33 = (byte*) current_piece_gfx#47 
Alias (byte) lock_current::i#4 = (byte) lock_current::i#5 
Alias (byte) current_piece_color#35 = (byte) current_piece_color#48 
Alias (byte) sid_rnd::return#2 = (byte) sid_rnd::return#4 
Alias (byte) spawn_current::piece_idx#1 = (byte~) spawn_current::$2 
Alias (byte) spawn_current::piece_idx#2 = (byte) spawn_current::piece_idx#3 
Alias (byte*) current_piece_gfx#10 = (byte*) current_piece_gfx#9 (byte*~) spawn_current::$4 (byte*) current_piece_gfx#20 
Alias (byte*) current_piece#16 = (byte*) current_piece#6 (byte*) current_piece#7 
Alias (byte) current_orientation#10 = (byte) current_orientation#24 (byte) current_orientation#9 
Alias (byte) current_xpos#10 = (byte) current_xpos#27 (byte) current_xpos#11 
Alias (byte) current_ypos#21 = (byte) current_ypos#7 (byte) current_ypos#8 
Alias (byte) current_piece_color#15 = (byte) current_piece_color#6 (byte) current_piece_color#7 
Alias (byte) remove_lines::r#0 = (byte/signed word/word/dword/signed dword~) remove_lines::$1 
Alias (byte) remove_lines::w#0 = (byte/signed word/word/dword/signed dword~) remove_lines::$3 
Alias (byte) remove_lines::c#0 = (byte) remove_lines::c#2 
Alias (byte) remove_lines::w#8 = (byte) remove_lines::w#9 
Alias (byte) remove_lines::x#3 = (byte) remove_lines::x#4 
Alias (byte) remove_lines::r#1 = (byte) remove_lines::r#6 
Alias (byte) remove_lines::y#6 = (byte) remove_lines::y#7 
Alias (byte) remove_lines::full#2 = (byte) remove_lines::full#3 
Alias (byte) remove_lines::y#3 = (byte) remove_lines::y#4 (byte) remove_lines::y#5 
Alias (byte) remove_lines::w#1 = (byte) remove_lines::w#10 (byte) remove_lines::w#5 
Alias (byte) remove_lines::r#4 = (byte) remove_lines::r#8 (byte) remove_lines::r#7 
Alias (byte) remove_lines::w#2 = (byte~) remove_lines::$11 
Alias (byte) remove_lines::w#6 = (byte) remove_lines::w#7 
Alias (byte*) render_init::li#0 = (byte*~) render_init::$3 
Alias (byte*) render_init::line#0 = (byte*~) render_init::$7 
Alias (byte*) render_init::line#2 = (byte*) render_init::line#3 
Alias (byte) render_init::l#2 = (byte) render_init::l#3 
Alias (byte) render_playfield::l#3 = (byte) render_playfield::l#4 
Alias (byte) render_playfield::i#1 = (byte) render_playfield::i#4 
Alias (byte) render_current::ypos2#0 = (byte~) render_current::$0 
Alias (byte) render_current::ypos2#2 = (byte) render_current::ypos2#4 
Alias (byte) current_xpos#28 = (byte) current_xpos#46 
Alias (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#49 
Alias (byte) render_current::i#4 = (byte) render_current::i#5 
Alias (byte) render_current::l#3 = (byte) render_current::l#8 
Alias (byte) current_piece_color#51 = (byte) current_piece_color#60 
Alias (byte) render_current::xpos#3 = (byte) render_current::xpos#5 (byte) render_current::xpos#6 (byte) render_current::xpos#4 
Alias (byte) current_piece_color#16 = (byte) current_piece_color#25 (byte) current_piece_color#36 (byte) current_piece_color#61 
Alias (byte*) render_current::screen_line#1 = (byte*) render_current::screen_line#2 (byte*) render_current::screen_line#3 (byte*) render_current::screen_line#5 
Alias (byte) render_current::c#3 = (byte) render_current::c#6 (byte) render_current::c#4 (byte) render_current::c#5 
Alias (byte) render_current::ypos2#6 = (byte) render_current::ypos2#9 (byte) render_current::ypos2#7 (byte) render_current::ypos2#8 
Alias (byte) render_current::l#5 = (byte) render_current::l#9 (byte) render_current::l#6 (byte) render_current::l#7 
Alias (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#66 (byte*) current_piece_gfx#50 (byte*) current_piece_gfx#51 
Alias (byte) render_current::i#1 = (byte) render_current::i#9 (byte) render_current::i#6 (byte) render_current::i#7 
Alias (byte) current_xpos#85 = (byte) current_xpos#92 (byte) current_xpos#86 (byte) current_xpos#87 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#4 
Alias (byte*) current_piece#17 = (byte*) current_piece#8 
Alias (byte) current_orientation#11 = (byte) current_orientation#25 
Alias (byte*) current_piece_gfx#11 = (byte*) current_piece_gfx#22 
Alias (byte) current_xpos#12 = (byte) current_xpos#29 
Alias (byte) current_ypos#23 = (byte) current_ypos#9 
Alias (byte) current_piece_color#17 = (byte) current_piece_color#8 
Alias (byte) keyboard_events_size#20 = (byte) keyboard_events_size#9 
Alias (byte) keyboard_modifiers#17 = (byte) keyboard_modifiers#9 
Alias (byte) current_movedown_counter#13 = (byte) current_movedown_counter#6 
Successful SSA optimization Pass2AliasElimination
Alias (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#4 
Alias (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#3 
Alias (byte) keyboard_event_scan::row_scan#1 = (byte) keyboard_event_scan::row_scan#3 
Alias (byte) keyboard_event_scan::row#10 = (byte) keyboard_event_scan::row#6 
Alias (byte) keyboard_events_size#13 = (byte) keyboard_events_size#63 (byte) keyboard_events_size#55 (byte) keyboard_events_size#46 (byte) keyboard_events_size#23 
Alias (byte*) current_piece#10 = (byte*) current_piece#31 
Alias (byte) current_orientation#14 = (byte) current_orientation#42 
Alias (byte*) current_piece_gfx#14 = (byte*) current_piece_gfx#38 
Alias (byte) current_xpos#15 = (byte) current_xpos#49 
Alias (byte) current_ypos#11 = (byte) current_ypos#41 
Alias (byte) current_piece_color#10 = (byte) current_piece_color#28 
Alias (byte) keyboard_events_size#18 = (byte) keyboard_events_size#32 
Alias (byte) keyboard_modifiers#15 = (byte) keyboard_modifiers#29 
Alias (byte) current_movedown_counter#1 = (byte) current_movedown_counter#21 
Alias (byte) current_movedown_counter#10 = (byte) current_movedown_counter#11 (byte) current_movedown_counter#3 (byte) current_movedown_counter#19 
Alias (byte) current_ypos#13 = (byte) current_ypos#55 (byte) current_ypos#66 (byte) current_ypos#45 
Alias (byte) current_xpos#17 = (byte) current_xpos#71 (byte) current_xpos#90 (byte) current_xpos#52 
Alias (byte) current_orientation#16 = (byte) current_orientation#55 (byte) current_orientation#70 (byte) current_orientation#45 
Alias (byte*) current_piece#21 = (byte*) current_piece#58 (byte*) current_piece#68 (byte*) current_piece#47 
Alias (byte*) current_piece_gfx#27 = (byte*) current_piece_gfx#70 (byte*) current_piece_gfx#83 (byte*) current_piece_gfx#57 
Alias (byte) current_piece_color#21 = (byte) current_piece_color#56 (byte) current_piece_color#71 (byte) current_piece_color#43 
Alias (byte) current_xpos#20 = (byte) current_xpos#40 
Alias (byte) current_xpos#25 = (byte) current_xpos#42 
Alias (byte) current_ypos#19 = (byte) current_ypos#34 
Alias (byte*) current_piece#14 = (byte*) current_piece#39 
Alias (byte) current_orientation#21 = (byte) current_orientation#38 
Alias (byte*) current_piece_gfx#30 = (byte*) current_piece_gfx#31 
Alias (byte) collision::col#2 = (byte) collision::col#3 
Alias (byte) collision::c#2 = (byte) collision::c#3 
Alias (byte*) collision::piece_gfx#1 = (byte*) collision::piece_gfx#3 
Alias (byte) collision::i#1 = (byte) collision::i#4 
Alias (byte) collision::ypos2#10 = (byte) collision::ypos2#4 
Alias (byte) collision::l#10 = (byte) collision::l#2 
Alias (byte) collision::xpos#10 = (byte) collision::xpos#6 
Alias (byte*) collision::playfield_line#1 = (byte*) collision::playfield_line#6 
Alias (byte) lock_current::col#2 = (byte) lock_current::col#3 
Alias (byte) lock_current::c#2 = (byte) lock_current::c#3 
Alias (byte*) current_piece_gfx#19 = (byte*) current_piece_gfx#33 
Alias (byte) lock_current::i#1 = (byte) lock_current::i#4 
Alias (byte) lock_current::ypos2#3 = (byte) lock_current::ypos2#5 
Alias (byte) lock_current::l#2 = (byte) lock_current::l#4 
Alias (byte) current_piece_color#14 = (byte) current_piece_color#35 
Alias (byte*) lock_current::playfield_line#1 = (byte*) lock_current::playfield_line#3 
Alias (byte) current_xpos#45 = (byte) current_xpos#75 
Alias (byte) remove_lines::c#0 = (byte) remove_lines::c#1 
Alias (byte) remove_lines::w#4 = (byte) remove_lines::w#8 
Alias (byte) remove_lines::x#2 = (byte) remove_lines::x#3 
Alias (byte) remove_lines::r#1 = (byte) remove_lines::r#4 (byte) remove_lines::r#5 
Alias (byte) remove_lines::y#2 = (byte) remove_lines::y#3 (byte) remove_lines::y#6 
Alias (byte) render_current::xpos#2 = (byte) render_current::xpos#3 
Alias (byte) render_current::c#2 = (byte) render_current::c#3 
Alias (byte) render_current::ypos2#5 = (byte) render_current::ypos2#6 
Alias (byte) render_current::l#4 = (byte) render_current::l#5 
Alias (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#34 
Alias (byte) render_current::i#1 = (byte) render_current::i#3 
Alias (byte) current_xpos#79 = (byte) current_xpos#85 
Alias (byte) current_piece_color#16 = (byte) current_piece_color#50 
Alias (byte*) render_current::screen_line#1 = (byte*) render_current::screen_line#4 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) fill::val#2
Self Phi Eliminated (byte*) fill::end#1
Self Phi Eliminated (byte) keyboard_event_scan::row_scan#1
Self Phi Eliminated (byte) keyboard_event_scan::row#10
Self Phi Eliminated (byte) keyboard_events_size#40
Self Phi Eliminated (byte) keyboard_modifiers#34
Self Phi Eliminated (byte) current_movedown_counter#39
Self Phi Eliminated (byte) current_ypos#64
Self Phi Eliminated (byte*) current_piece#61
Self Phi Eliminated (byte) current_orientation#67
Self Phi Eliminated (byte*) current_piece_gfx#76
Self Phi Eliminated (byte) current_xpos#88
Self Phi Eliminated (byte) current_piece_color#62
Self Phi Eliminated (byte) keyboard_events_size#26
Self Phi Eliminated (byte) keyboard_modifiers#23
Self Phi Eliminated (byte) current_movedown_counter#14
Self Phi Eliminated (byte) current_ypos#25
Self Phi Eliminated (byte*) current_piece#19
Self Phi Eliminated (byte) current_orientation#27
Self Phi Eliminated (byte*) current_piece_gfx#24
Self Phi Eliminated (byte) current_xpos#31
Self Phi Eliminated (byte) current_piece_color#19
Self Phi Eliminated (byte*) collision::piece_gfx#1
Self Phi Eliminated (byte) collision::ypos2#10
Self Phi Eliminated (byte) collision::l#10
Self Phi Eliminated (byte) collision::xpos#10
Self Phi Eliminated (byte*) collision::playfield_line#1
Self Phi Eliminated (byte*) current_piece_gfx#19
Self Phi Eliminated (byte) current_piece_color#14
Self Phi Eliminated (byte*) lock_current::playfield_line#1
Self Phi Eliminated (byte) lock_current::ypos2#3
Self Phi Eliminated (byte) lock_current::l#2
Self Phi Eliminated (byte) current_xpos#45
Self Phi Eliminated (byte) remove_lines::y#2
Self Phi Eliminated (byte*) render_init::line#2
Self Phi Eliminated (byte) render_init::l#2
Self Phi Eliminated (byte) render_playfield::l#3
Self Phi Eliminated (byte*) current_piece_gfx#21
Self Phi Eliminated (byte) render_current::ypos2#5
Self Phi Eliminated (byte) render_current::l#4
Self Phi Eliminated (byte) current_piece_color#16
Self Phi Eliminated (byte*) render_current::screen_line#1
Self Phi Eliminated (byte) current_xpos#79
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) fill::val#2 (byte) fill::val#3
Redundant Phi (byte*) fill::end#1 (byte*) fill::end#0
Redundant Phi (byte) keyboard_matrix_read::rowid#1 (byte) keyboard_matrix_read::rowid#0
Redundant Phi (byte) keyboard_events_size#54 (byte) keyboard_events_size#26
Redundant Phi (byte) keyboard_event_scan::row_scan#1 (byte) keyboard_event_scan::row_scan#0
Redundant Phi (byte) keyboard_event_scan::row#10 (byte) keyboard_event_scan::row#2
Redundant Phi (byte) keyboard_events_size#14 (byte) keyboard_events_size#17
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#0
Redundant Phi (byte*) current_piece#18 (byte*) current_piece#0
Redundant Phi (byte) current_orientation#26 (byte) current_orientation#0
Redundant Phi (byte*) current_piece_gfx#23 (byte*) current_piece_gfx#0
Redundant Phi (byte) current_xpos#30 (byte) current_xpos#0
Redundant Phi (byte) current_ypos#24 (byte) current_ypos#0
Redundant Phi (byte) current_piece_color#18 (byte) current_piece_color#0
Redundant Phi (byte) keyboard_events_size#33 (byte) keyboard_events_size#0
Redundant Phi (byte) keyboard_modifiers#30 (byte) keyboard_modifiers#0
Redundant Phi (byte) current_movedown_counter#22 (byte) current_movedown_counter#0
Redundant Phi (byte*) current_piece#1 (byte*) current_piece#16
Redundant Phi (byte) current_orientation#1 (byte) current_orientation#10
Redundant Phi (byte*) current_piece_gfx#1 (byte*) current_piece_gfx#10
Redundant Phi (byte) current_xpos#1 (byte) current_xpos#10
Redundant Phi (byte) current_ypos#1 (byte) current_ypos#21
Redundant Phi (byte) current_piece_color#1 (byte) current_piece_color#15
Redundant Phi (byte) keyboard_events_size#40 (byte) keyboard_events_size#19
Redundant Phi (byte) keyboard_modifiers#34 (byte) keyboard_modifiers#16
Redundant Phi (byte) current_movedown_counter#39 (byte) current_movedown_counter#15
Redundant Phi (byte) current_ypos#64 (byte) current_ypos#12
Redundant Phi (byte*) current_piece#61 (byte*) current_piece#11
Redundant Phi (byte) current_orientation#67 (byte) current_orientation#15
Redundant Phi (byte*) current_piece_gfx#76 (byte*) current_piece_gfx#15
Redundant Phi (byte) current_xpos#88 (byte) current_xpos#16
Redundant Phi (byte) current_piece_color#62 (byte) current_piece_color#11
Redundant Phi (byte) keyboard_events_size#26 (byte) keyboard_events_size#40
Redundant Phi (byte) keyboard_modifiers#23 (byte) keyboard_modifiers#34
Redundant Phi (byte) current_movedown_counter#14 (byte) current_movedown_counter#39
Redundant Phi (byte) current_ypos#25 (byte) current_ypos#64
Redundant Phi (byte*) current_piece#19 (byte*) current_piece#61
Redundant Phi (byte) current_orientation#27 (byte) current_orientation#67
Redundant Phi (byte*) current_piece_gfx#24 (byte*) current_piece_gfx#76
Redundant Phi (byte) current_xpos#31 (byte) current_xpos#88
Redundant Phi (byte) current_piece_color#19 (byte) current_piece_color#62
Redundant Phi (byte) keyboard_events_size#17 (byte) keyboard_events_size#13
Redundant Phi (byte) keyboard_modifiers#15 (byte) keyboard_modifiers#14
Redundant Phi (byte) keyboard_events_size#18 (byte) keyboard_events_size#16
Redundant Phi (byte) current_movedown_counter#1 (byte) current_movedown_counter#12
Redundant Phi (byte) current_ypos#11 (byte) current_ypos#16
Redundant Phi (byte*) current_piece#10 (byte*) current_piece#13
Redundant Phi (byte) current_orientation#13 (byte) current_orientation#18
Redundant Phi (byte*) current_piece_gfx#13 (byte*) current_piece_gfx#17
Redundant Phi (byte) current_xpos#14 (byte) current_xpos#19
Redundant Phi (byte) current_piece_color#10 (byte) current_piece_color#13
Redundant Phi (byte) current_xpos#15 (byte) current_xpos#23
Redundant Phi (byte) current_orientation#14 (byte) current_orientation#23
Redundant Phi (byte*) current_piece_gfx#14 (byte*) current_piece_gfx#18
Redundant Phi (byte) current_movedown_counter#9 (byte) current_movedown_counter#14
Redundant Phi (byte) play_move_down::key_event#1 (byte) play_move_down::key_event#0
Redundant Phi (byte) current_ypos#13 (byte) current_ypos#25
Redundant Phi (byte) current_xpos#17 (byte) current_xpos#31
Redundant Phi (byte) current_orientation#16 (byte) current_orientation#27
Redundant Phi (byte*) current_piece#21 (byte*) current_piece#19
Redundant Phi (byte*) current_piece_gfx#27 (byte*) current_piece_gfx#24
Redundant Phi (byte) current_piece_color#21 (byte) current_piece_color#19
Redundant Phi (byte*) current_piece#12 (byte*) current_piece#16
Redundant Phi (byte) current_orientation#17 (byte) current_orientation#10
Redundant Phi (byte*) current_piece_gfx#16 (byte*) current_piece_gfx#10
Redundant Phi (byte) current_xpos#18 (byte) current_xpos#10
Redundant Phi (byte) current_ypos#15 (byte) current_ypos#21
Redundant Phi (byte) current_piece_color#12 (byte) current_piece_color#15
Redundant Phi (byte) play_move_leftright::key_event#1 (byte) play_move_leftright::key_event#0
Redundant Phi (byte) current_xpos#20 (byte) current_xpos#14
Redundant Phi (byte) current_ypos#17 (byte) current_ypos#11
Redundant Phi (byte) current_orientation#19 (byte) current_orientation#13
Redundant Phi (byte*) current_piece#26 (byte*) current_piece#10
Redundant Phi (byte) play_move_rotate::key_event#1 (byte) play_move_rotate::key_event#0
Redundant Phi (byte) current_orientation#21 (byte) current_orientation#13
Redundant Phi (byte) current_xpos#25 (byte) current_xpos#15
Redundant Phi (byte) current_ypos#19 (byte) current_ypos#11
Redundant Phi (byte*) current_piece#14 (byte*) current_piece#10
Redundant Phi (byte*) current_piece_gfx#30 (byte*) current_piece_gfx#13
Redundant Phi (byte*) collision::piece_gfx#1 (byte*) collision::piece_gfx#2
Redundant Phi (byte) collision::ypos2#10 (byte) collision::ypos2#2
Redundant Phi (byte) collision::l#10 (byte) collision::l#6
Redundant Phi (byte) collision::xpos#10 (byte) collision::col#0
Redundant Phi (byte*) collision::playfield_line#1 (byte*) collision::playfield_line#0
Redundant Phi (byte) current_ypos#20 (byte) current_ypos#13
Redundant Phi (byte) current_xpos#44 (byte) current_xpos#17
Redundant Phi (byte*) current_piece_gfx#46 (byte*) current_piece_gfx#27
Redundant Phi (byte) current_piece_color#47 (byte) current_piece_color#21
Redundant Phi (byte*) current_piece_gfx#19 (byte*) current_piece_gfx#32
Redundant Phi (byte) current_piece_color#14 (byte) current_piece_color#34
Redundant Phi (byte*) lock_current::playfield_line#1 (byte*) lock_current::playfield_line#0
Redundant Phi (byte) lock_current::ypos2#3 (byte) lock_current::ypos2#2
Redundant Phi (byte) lock_current::l#2 (byte) lock_current::l#6
Redundant Phi (byte) current_xpos#45 (byte) current_xpos#26
Redundant Phi (byte) remove_lines::y#2 (byte) remove_lines::y#8
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#2
Redundant Phi (byte*) render_init::line#2 (byte*) render_init::line#4
Redundant Phi (byte) render_init::l#2 (byte) render_init::l#4
Redundant Phi (byte) render_playfield::l#3 (byte) render_playfield::l#2
Redundant Phi (byte*) current_piece_gfx#21 (byte*) current_piece_gfx#35
Redundant Phi (byte) render_current::ypos2#5 (byte) render_current::ypos2#2
Redundant Phi (byte) render_current::l#4 (byte) render_current::l#3
Redundant Phi (byte) current_piece_color#16 (byte) current_piece_color#51
Redundant Phi (byte*) render_current::screen_line#1 (byte*) render_current::screen_line#0
Redundant Phi (byte) current_xpos#79 (byte) current_xpos#28
Redundant Phi (byte*) current_piece#17 (byte*) current_piece#11
Redundant Phi (byte) current_orientation#11 (byte) current_orientation#15
Redundant Phi (byte*) current_piece_gfx#11 (byte*) current_piece_gfx#15
Redundant Phi (byte) current_xpos#12 (byte) current_xpos#16
Redundant Phi (byte) current_ypos#23 (byte) current_ypos#12
Redundant Phi (byte) current_piece_color#17 (byte) current_piece_color#11
Redundant Phi (byte) keyboard_events_size#20 (byte) keyboard_events_size#19
Redundant Phi (byte) keyboard_modifiers#17 (byte) keyboard_modifiers#16
Redundant Phi (byte) current_movedown_counter#13 (byte) current_movedown_counter#15
Successful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte) keyboard_event_scan::row#4 (byte) keyboard_event_scan::row#2
Redundant Phi (byte) render_current::ypos2#3 (byte) render_current::ypos2#2
Redundant Phi (byte) render_current::l#2 (byte) render_current::l#3
Redundant Phi (byte) current_xpos#64 (byte) current_xpos#28
Redundant Phi (byte*) current_piece_gfx#65 (byte*) current_piece_gfx#35
Redundant Phi (byte) current_piece_color#68 (byte) current_piece_color#51
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) fill::$1 if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1
Simple Condition (bool~) keyboard_event_scan::$1 if((byte) keyboard_event_scan::row_scan#0!=*((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@2
Simple Condition (bool~) keyboard_event_scan::$13 if((byte) keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@1
Simple Condition (bool~) keyboard_event_scan::$6 if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5
Simple Condition (bool~) keyboard_event_scan::$12 if((byte) keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@4
Simple Condition (bool~) keyboard_event_scan::$8 if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@6
Simple Condition (bool~) keyboard_event_scan::$10 if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7
Simple Condition (bool~) keyboard_event_scan::$16 if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9
Simple Condition (bool~) keyboard_event_scan::$20 if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10
Simple Condition (bool~) keyboard_event_scan::$24 if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11
Simple Condition (bool~) keyboard_event_scan::$28 if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@12
Simple Condition (bool~) keyboard_event_get::$0 if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@1
Simple Condition (bool~) main::$6 if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@5
Simple Condition (bool~) main::$7 if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 254) goto main::@8
Simple Condition (bool~) main::$14 if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@10
Simple Condition (bool~) play_move_down::$1 if((byte) play_move_down::key_event#0!=(byte) KEY_SPACE#0) goto play_move_down::@1
Simple Condition (bool~) play_move_down::$4 if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2
Simple Condition (bool~) play_move_down::$8 if((byte) current_movedown_counter#10<(byte) current_movedown_slow#0) goto play_move_down::@4
Simple Condition (bool~) play_move_down::$6 if((byte) current_movedown_counter#10<(byte) current_movedown_fast#0) goto play_move_down::@3
Simple Condition (bool~) play_move_down::$10 if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@5
Simple Condition (bool~) play_move_down::$13 if((byte~) play_move_down::$12==(byte) COLLISION_NONE#0) goto play_move_down::@6
Simple Condition (bool~) play_move_leftright::$0 if((byte) play_move_leftright::key_event#0==(byte) KEY_COMMA#0) goto play_move_leftright::@1
Simple Condition (bool~) play_move_leftright::$10 if((byte~) play_move_leftright::$8!=(byte) COLLISION_NONE#0) goto play_move_leftright::@5
Simple Condition (bool~) play_move_leftright::$2 if((byte) play_move_leftright::key_event#0!=(byte) KEY_DOT#0) goto play_move_leftright::@2
Simple Condition (bool~) play_move_leftright::$6 if((byte~) play_move_leftright::$4!=(byte) COLLISION_NONE#0) goto play_move_leftright::@3
Simple Condition (bool~) play_move_rotate::$0 if((byte) play_move_rotate::key_event#0==(byte) KEY_Z#0) goto play_move_rotate::@1
Simple Condition (bool~) play_move_rotate::$1 if((byte) play_move_rotate::key_event#0==(byte) KEY_X#0) goto play_move_rotate::@2
Simple Condition (bool~) play_move_rotate::$8 if((byte~) play_move_rotate::$6!=(byte) COLLISION_NONE#0) goto play_move_rotate::@5
Simple Condition (bool~) collision::$3 if(*((byte*) collision::piece_gfx#2 + (byte) collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3
Simple Condition (bool~) collision::$14 if((byte) collision::c#1!=rangelast(0,3)) goto collision::@2
Simple Condition (bool~) collision::$6 if((byte) collision::ypos2#2<(byte/signed word/word/dword/signed dword~) collision::$4) goto collision::@4
Simple Condition (bool~) collision::$9 if((byte~) collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@5
Simple Condition (bool~) collision::$11 if((byte) collision::col#2<(byte) PLAYFIELD_COLS#0) goto collision::@6
Simple Condition (bool~) collision::$13 if(*((byte*) collision::playfield_line#0 + (byte) collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@7
Simple Condition (bool~) collision::$15 if((byte) collision::l#1!=rangelast(0,3)) goto collision::@1
Simple Condition (bool~) lock_current::$2 if(*((byte*) current_piece_gfx#32 + (byte) lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto lock_current::@3
Simple Condition (bool~) lock_current::$3 if((byte) lock_current::c#1!=rangelast(0,3)) goto lock_current::@2
Simple Condition (bool~) lock_current::$4 if((byte) lock_current::l#1!=rangelast(0,3)) goto lock_current::@1
Simple Condition (bool~) spawn_current::$0 if((byte) spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto spawn_current::@2
Simple Condition (bool~) remove_lines::$7 if((byte) remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto remove_lines::@3
Simple Condition (bool~) remove_lines::$8 if((byte) remove_lines::x#1!=rangelast(0,remove_lines::$5)) goto remove_lines::@2
Simple Condition (bool~) remove_lines::$10 if((byte) remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@4
Simple Condition (bool~) remove_lines::$12 if((byte) remove_lines::y#1!=rangelast(0,remove_lines::$4)) goto remove_lines::@1
Simple Condition (bool~) remove_lines::$13 if((byte) remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto remove_lines::@6
Simple Condition (bool~) tables_init::$2 if((byte) tables_init::j#1!=rangelast(0,tables_init::$0)) goto tables_init::@1
Simple Condition (bool~) render_init::$6 if((byte) render_init::i#1!=rangelast(0,render_init::$4)) goto render_init::@1
Simple Condition (bool~) render_init::$11 if((byte) render_init::c#1!=rangelast(0,render_init::$9)) goto render_init::@3
Simple Condition (bool~) render_init::$12 if((byte) render_init::l#1!=rangelast(0,render_init::$8)) goto render_init::@2
Simple Condition (bool~) render_playfield::$3 if((byte) render_playfield::c#1!=rangelast(0,render_playfield::$2)) goto render_playfield::@2
Simple Condition (bool~) render_playfield::$4 if((byte) render_playfield::l#1!=rangelast(0,render_playfield::$0)) goto render_playfield::@1
Simple Condition (bool~) render_current::$3 if((byte) render_current::ypos2#2>=(byte/signed word/word/dword/signed dword~) render_current::$1) goto render_current::@2
Simple Condition (bool~) render_current::$9 if((byte) render_current::l#1!=rangelast(0,3)) goto render_current::@1
Simple Condition (bool~) render_current::$5 if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@4
Simple Condition (bool~) render_current::$8 if((byte) render_current::c#1!=rangelast(0,3)) goto render_current::@3
Simple Condition (bool~) render_current::$7 if((byte) render_current::xpos#2>=(byte) PLAYFIELD_COLS#0) goto render_current::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) COLS#0 = ((byte*))55296
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))56320
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))56321
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const byte) GREEN#0 = 5
Constant (const byte) DARK_GREY#0 = 11
Constant (const byte) LIGHT_GREY#0 = 15
Constant (const byte) KEY_Z#0 = 12
Constant (const byte) KEY_LSHIFT#0 = 15
Constant (const byte) KEY_X#0 = 23
Constant (const byte) KEY_DOT#0 = 44
Constant (const byte) KEY_COMMA#0 = 47
Constant (const byte) KEY_RSHIFT#0 = 52
Constant (const byte) KEY_CTRL#0 = 58
Constant (const byte) KEY_SPACE#0 = 60
Constant (const byte) KEY_COMMODORE#0 = 61
Constant (const byte[8]) keyboard_matrix_row_bitmask#0 = { 254, 253, 251, 247, 239, 223, 191, 127 }
Constant (const byte[8]) keyboard_matrix_col_bitmask#0 = { 1, 2, 4, 8, 16, 32, 64, 128 }
Constant (const byte[8]) keyboard_events#0 = { fill( 8, 0) }
Constant (const byte) keyboard_events_size#0 = 0
Constant (const byte) keyboard_modifiers#0 = 0
Constant (const byte) KEY_MODIFIER_LSHIFT#0 = 1
Constant (const byte) KEY_MODIFIER_RSHIFT#0 = 2
Constant (const byte) KEY_MODIFIER_CTRL#0 = 4
Constant (const byte) KEY_MODIFIER_COMMODORE#0 = 8
Constant (const byte[8]) keyboard_scan_values#0 = { fill( 8, 0) }
Constant (const byte) keyboard_event_scan::keycode#0 = 0
Constant (const byte) keyboard_event_scan::row#0 = 0
Constant (const byte) keyboard_event_scan::col#0 = 0
Constant (const byte) keyboard_modifiers#1 = 0
Constant (const byte) keyboard_event_get::return#0 = 255
Constant (const word*) SID_VOICE3_FREQ#0 = ((word*))54286
Constant (const byte*) SID_VOICE3_CONTROL#0 = ((byte*))54290
Constant (const byte) SID_CONTROL_NOISE#0 = 128
Constant (const byte*) SID_VOICE3_OSC#0 = ((byte*))54299
Constant (const byte/signed byte/word/signed word/dword/signed dword) $1 = 4*4
Constant (const byte[$2]) PIECE_T#0 = { 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $3 = 4*4
Constant (const byte[$4]) PIECE_S#0 = { 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $5 = 4*4
Constant (const byte[$6]) PIECE_Z#0 = { 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $7 = 4*4
Constant (const byte[$8]) PIECE_L#0 = { 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $9 = 4*4
Constant (const byte[$10]) PIECE_J#0 = { 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $11 = 4*4
Constant (const byte[$12]) PIECE_O#0 = { 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $13 = 4*4
Constant (const byte[$14]) PIECE_I#0 = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0 }
Constant (const byte) PLAYFIELD_LINES#0 = 22
Constant (const byte) PLAYFIELD_COLS#0 = 10
Constant (const byte*) current_piece#0 = ((byte*))0
Constant (const byte) current_orientation#0 = 0
Constant (const byte*) current_piece_gfx#0 = ((byte*))0
Constant (const byte) current_piece_color#0 = 0
Constant (const byte) current_xpos#0 = 3
Constant (const byte) current_ypos#0 = 0
Constant (const byte) current_movedown_slow#0 = 50
Constant (const byte) current_movedown_fast#0 = 5
Constant (const byte) current_movedown_counter#0 = 0
Constant (const byte) main::render#0 = 0
Constant (const byte) play_move_down::movedown#0 = 0
Constant (const byte) play_move_down::return#1 = 0
Constant (const byte) current_movedown_counter#4 = 0
Constant (const byte) play_move_down::return#2 = 1
Constant (const byte) play_move_leftright::return#1 = 1
Constant (const byte) play_move_leftright::return#3 = 0
Constant (const byte) play_move_leftright::return#4 = 1
Constant (const byte) play_move_rotate::orientation#0 = 128
Constant (const byte) play_move_rotate::return#1 = 0
Constant (const byte) play_move_rotate::return#3 = 0
Constant (const byte) play_move_rotate::return#4 = 1
Constant (const byte) COLLISION_NONE#0 = 0
Constant (const byte) COLLISION_PLAYFIELD#0 = 1
Constant (const byte) COLLISION_BOTTOM#0 = 2
Constant (const byte) COLLISION_LEFT#0 = 4
Constant (const byte) COLLISION_RIGHT#0 = 8
Constant (const byte) collision::i#0 = 0
Constant (const byte) collision::l#0 = 0
Constant (const byte) collision::c#0 = 0
Constant (const byte) lock_current::i#0 = 0
Constant (const byte) lock_current::l#0 = 0
Constant (const byte) lock_current::c#0 = 0
Constant (const byte) spawn_current::piece_idx#0 = 7
Constant (const byte) current_orientation#10 = 0
Constant (const byte) current_xpos#10 = 3
Constant (const byte) current_ypos#21 = 0
Constant (const byte) remove_lines::y#0 = 0
Constant (const byte) remove_lines::full#0 = 1
Constant (const byte) remove_lines::x#0 = 0
Constant (const byte) remove_lines::full#1 = 0
Constant (const byte) tables_init::idx#0 = 0
Constant (const byte) tables_init::j#0 = 0
Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte*) CHARSET#0 = ((byte*))8192
Constant (const word) fill::size#0 = 1000
Constant (const byte) fill::val#0 = 160
Constant (const word) fill::size#1 = 1000
Constant (const byte) render_init::i#0 = 0
Constant (const byte) render_init::l#0 = 0
Constant (const byte) render_init::c#0 = 0
Constant (const byte) render_playfield::i#0 = 0
Constant (const byte) render_playfield::l#0 = 0
Constant (const byte) render_playfield::c#0 = 0
Constant (const byte) render_current::i#0 = 0
Constant (const byte) render_current::l#0 = 0
Constant (const byte) render_current::c#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) keyboard_event_pressed::keycode#0 = KEY_LSHIFT#0
Constant (const byte) keyboard_event_pressed::keycode#1 = KEY_RSHIFT#0
Constant (const byte) keyboard_modifiers#2 = keyboard_modifiers#1|KEY_MODIFIER_LSHIFT#0
Constant (const byte) keyboard_event_pressed::keycode#2 = KEY_CTRL#0
Constant (const byte) keyboard_event_pressed::keycode#3 = KEY_COMMODORE#0
Constant (const byte/signed word/word/dword/signed dword/signed byte) $2 = $1*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $4 = $3*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $6 = $5*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $8 = $7*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $10 = $9*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $12 = $11*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $14 = $13*4
Constant (const word) $15 = ((word))PIECE_T#0
Constant (const word) $16 = ((word))PIECE_S#0
Constant (const word) $17 = ((word))PIECE_Z#0
Constant (const word) $18 = ((word))PIECE_J#0
Constant (const word) $19 = ((word))PIECE_O#0
Constant (const word) $20 = ((word))PIECE_I#0
Constant (const word) $21 = ((word))PIECE_L#0
Constant (const byte[]) PIECES_COLORS#0 = { WHITE#0, LIGHT_GREY#0, GREEN#0, LIGHT_GREY#0, WHITE#0, WHITE#0, GREEN#0 }
Constant (const byte) $22 = PLAYFIELD_LINES#0*PLAYFIELD_COLS#0
Constant (const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 = { fill( PLAYFIELD_LINES#0, 0) }
Constant (const byte/signed word/word/dword/signed dword) $23 = PLAYFIELD_LINES#0+1
Constant (const byte) keyboard_event_pressed::keycode#4 = KEY_SPACE#0
Constant (const byte) play_move_down::movedown#1 = ++play_move_down::movedown#0
Constant (const byte/signed word/word/dword/signed dword) collision::$4 = 2*PLAYFIELD_LINES#0
Constant (const byte) collision::return#4 = COLLISION_BOTTOM#0
Constant (const byte) collision::return#6 = COLLISION_LEFT#0
Constant (const byte) collision::return#7 = COLLISION_RIGHT#0
Constant (const byte) collision::return#8 = COLLISION_PLAYFIELD#0
Constant (const byte) collision::return#9 = COLLISION_NONE#0
Constant (const byte) remove_lines::$0 = PLAYFIELD_LINES#0*PLAYFIELD_COLS#0
Constant (const byte) remove_lines::$2 = PLAYFIELD_LINES#0*PLAYFIELD_COLS#0
Constant (const byte/signed word/word/dword/signed dword) remove_lines::$4 = PLAYFIELD_LINES#0-1
Constant (const byte/signed word/word/dword/signed dword) remove_lines::$5 = PLAYFIELD_COLS#0-1
Constant (const byte/signed word/word/dword/signed dword) tables_init::$0 = PLAYFIELD_LINES#0-1
Constant (const byte) tables_init::$3 = PLAYFIELD_COLS#0*PLAYFIELD_LINES#0
Constant (const byte/signed word/word/dword/signed dword) $24 = PLAYFIELD_LINES#0+3
Constant (const byte*) fill::start#0 = SCREEN#0
Constant (const byte*) fill::start#1 = COLS#0
Constant (const byte) fill::val#1 = BLACK#0
Constant (const byte*) render_init::$2 = COLS#0+40
Constant (const byte/signed word/word/dword/signed dword) render_init::$4 = PLAYFIELD_LINES#0+2
Constant (const byte*) render_init::line#0 = COLS#0+14
Constant (const byte/signed word/word/dword/signed dword) render_init::$8 = PLAYFIELD_LINES#0+1
Constant (const byte/signed word/word/dword/signed dword) render_init::$9 = PLAYFIELD_COLS#0+1
Constant (const byte/signed word/word/dword/signed dword) render_playfield::$0 = PLAYFIELD_LINES#0-1
Constant (const byte/signed word/word/dword/signed dword) render_playfield::$2 = PLAYFIELD_COLS#0-1
Constant (const byte/signed word/word/dword/signed dword) render_current::$1 = 2*PLAYFIELD_LINES#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word[]) PIECES#0 = { $15, $16, $17, $18, $19, $20, $21 }
Constant (const byte[$22]) playfield#0 = { fill( $22, 0) }
Constant (const byte[$23]) playfield_lines_idx#0 = { fill( $23, 0) }
Constant (const byte) remove_lines::r#0 = remove_lines::$0-1
Constant (const byte) remove_lines::w#0 = remove_lines::$2-1
Constant (const byte*[$24]) screen_lines#0 = { fill( $24, 0) }
Constant (const byte*) render_init::li#0 = render_init::$2+15
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) tables_init::pli#0 = playfield#0
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(playfield_lines_idx#0+PLAYFIELD_LINES#0)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (byte*) current_piece#16 ← ((byte*)) *((const word[]) PIECES#0 + (byte~) spawn_current::$3)
Successful SSA optimization Pass2NopCastElimination
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value keyboard_event_scan::row#1 ← ++ keyboard_event_scan::row#2 to ++
Resolved ranged comparison value if(keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@1 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value keyboard_event_scan::col#1 ← ++ keyboard_event_scan::col#2 to ++
Resolved ranged comparison value if(keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@4 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value collision::c#1 ← ++ collision::c#2 to ++
Resolved ranged comparison value if(collision::c#1!=rangelast(0,3)) goto collision::@2 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value collision::l#1 ← ++ collision::l#6 to ++
Resolved ranged comparison value if(collision::l#1!=rangelast(0,3)) goto collision::@1 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value lock_current::c#1 ← ++ lock_current::c#2 to ++
Resolved ranged comparison value if(lock_current::c#1!=rangelast(0,3)) goto lock_current::@2 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value lock_current::l#1 ← ++ lock_current::l#6 to ++
Resolved ranged comparison value if(lock_current::l#1!=rangelast(0,3)) goto lock_current::@1 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value remove_lines::x#1 ← ++ remove_lines::x#2 to ++
Resolved ranged comparison value if(remove_lines::x#1!=rangelast(0,remove_lines::$5)) goto remove_lines::@2 to (const byte/signed word/word/dword/signed dword) remove_lines::$5+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value remove_lines::y#1 ← ++ remove_lines::y#8 to ++
Resolved ranged comparison value if(remove_lines::y#1!=rangelast(0,remove_lines::$4)) goto remove_lines::@1 to (const byte/signed word/word/dword/signed dword) remove_lines::$4+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value tables_init::j#1 ← ++ tables_init::j#2 to ++
Resolved ranged comparison value if(tables_init::j#1!=rangelast(0,tables_init::$0)) goto tables_init::@1 to (const byte/signed word/word/dword/signed dword) tables_init::$0+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_init::i#1 ← ++ render_init::i#2 to ++
Resolved ranged comparison value if(render_init::i#1!=rangelast(0,render_init::$4)) goto render_init::@1 to (const byte/signed word/word/dword/signed dword) render_init::$4+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_init::c#1 ← ++ render_init::c#2 to ++
Resolved ranged comparison value if(render_init::c#1!=rangelast(0,render_init::$9)) goto render_init::@3 to (const byte/signed word/word/dword/signed dword) render_init::$9+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_init::l#1 ← ++ render_init::l#4 to ++
Resolved ranged comparison value if(render_init::l#1!=rangelast(0,render_init::$8)) goto render_init::@2 to (const byte/signed word/word/dword/signed dword) render_init::$8+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_playfield::c#1 ← ++ render_playfield::c#2 to ++
Resolved ranged comparison value if(render_playfield::c#1!=rangelast(0,render_playfield::$2)) goto render_playfield::@2 to (const byte/signed word/word/dword/signed dword) render_playfield::$2+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_playfield::l#1 ← ++ render_playfield::l#2 to ++
Resolved ranged comparison value if(render_playfield::l#1!=rangelast(0,render_playfield::$0)) goto render_playfield::@1 to (const byte/signed word/word/dword/signed dword) render_playfield::$0+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_current::l#1 ← ++ render_current::l#3 to ++
Resolved ranged comparison value if(render_current::l#1!=rangelast(0,3)) goto render_current::@1 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value render_current::c#1 ← ++ render_current::c#2 to ++
Resolved ranged comparison value if(render_current::c#1!=rangelast(0,3)) goto render_current::@3 to (byte/signed byte/word/signed word/dword/signed dword) 4
Culled Empty Block (label) @4
Culled Empty Block (label) @8
Culled Empty Block (label) keyboard_event_scan::@2
Culled Empty Block (label) keyboard_event_scan::@6
Culled Empty Block (label) keyboard_event_scan::@12
Culled Empty Block (label) keyboard_event_get::@1
Culled Empty Block (label) @11
Culled Empty Block (label) @13
Culled Empty Block (label) main::@26
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@33
Culled Empty Block (label) play_move_down::@3
Culled Empty Block (label) play_move_down::@5
Culled Empty Block (label) play_move_down::@21
Culled Empty Block (label) play_move_leftright::@2
Culled Empty Block (label) play_move_leftright::@3
Culled Empty Block (label) play_move_leftright::@4
Culled Empty Block (label) play_move_leftright::@5
Culled Empty Block (label) play_move_rotate::@7
Culled Empty Block (label) play_move_rotate::@5
Culled Empty Block (label) @17
Culled Empty Block (label) collision::@9
Culled Empty Block (label) collision::@11
Culled Empty Block (label) collision::@13
Culled Empty Block (label) collision::@7
Culled Empty Block (label) collision::@15
Culled Empty Block (label) collision::@18
Culled Empty Block (label) render_init::@8
Culled Empty Block (label) render_init::@4
Culled Empty Block (label) render_current::@5
Culled Empty Block (label) @26
Successful SSA optimization Pass2CullEmptyBlocks
Self Phi Eliminated (byte) collision::col#0
Self Phi Eliminated (byte*) collision::piece_gfx#2
Self Phi Eliminated (byte) current_xpos#26
Self Phi Eliminated (byte*) current_piece_gfx#32
Self Phi Eliminated (byte) current_piece_color#34
Self Phi Eliminated (byte) current_xpos#28
Self Phi Eliminated (byte*) current_piece_gfx#35
Self Phi Eliminated (byte) current_piece_color#51
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) collision::col#0 (byte) collision::xpos#5
Redundant Phi (byte*) collision::piece_gfx#2 (byte*) collision::piece_gfx#0
Redundant Phi (byte) current_xpos#26 (byte) current_xpos#16
Redundant Phi (byte*) current_piece_gfx#32 (byte*) current_piece_gfx#15
Redundant Phi (byte) current_piece_color#34 (byte) current_piece_color#11
Redundant Phi (byte) current_xpos#28 (byte) current_xpos#63
Redundant Phi (byte*) current_piece_gfx#35 (byte*) current_piece_gfx#64
Redundant Phi (byte) current_piece_color#51 (byte) current_piece_color#67
Successful SSA optimization Pass2RedundantPhiElimination
Inlining constant with var siblings (const word) fill::size#0
Inlining constant with var siblings (const byte) fill::val#0
Inlining constant with var siblings (const word) fill::size#1
Inlining constant with var siblings (const byte) fill::val#1
Inlining constant with var siblings (const byte) keyboard_event_scan::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_scan::row#0
Inlining constant with var siblings (const byte) keyboard_event_scan::col#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#1
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#2
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#3
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#4
Inlining constant with var siblings (const byte) keyboard_event_get::return#0
Inlining constant with var siblings (const byte) main::render#0
Inlining constant with var siblings (const byte) play_move_down::movedown#0
Inlining constant with var siblings (const byte) play_move_down::return#1
Inlining constant with var siblings (const byte) play_move_down::return#2
Inlining constant with var siblings (const byte) play_move_down::movedown#1
Inlining constant with var siblings (const byte) play_move_leftright::return#1
Inlining constant with var siblings (const byte) play_move_leftright::return#3
Inlining constant with var siblings (const byte) play_move_leftright::return#4
Inlining constant with var siblings (const byte) play_move_rotate::return#1
Inlining constant with var siblings (const byte) play_move_rotate::return#3
Inlining constant with var siblings (const byte) play_move_rotate::return#4
Inlining constant with var siblings (const byte) collision::i#0
Inlining constant with var siblings (const byte) collision::l#0
Inlining constant with var siblings (const byte) collision::c#0
Inlining constant with var siblings (const byte) collision::return#4
Inlining constant with var siblings (const byte) collision::return#6
Inlining constant with var siblings (const byte) collision::return#7
Inlining constant with var siblings (const byte) collision::return#8
Inlining constant with var siblings (const byte) collision::return#9
Inlining constant with var siblings (const byte) lock_current::i#0
Inlining constant with var siblings (const byte) lock_current::l#0
Inlining constant with var siblings (const byte) lock_current::c#0
Inlining constant with var siblings (const byte) spawn_current::piece_idx#0
Inlining constant with var siblings (const byte) remove_lines::y#0
Inlining constant with var siblings (const byte) remove_lines::full#0
Inlining constant with var siblings (const byte) remove_lines::x#0
Inlining constant with var siblings (const byte) remove_lines::full#1
Inlining constant with var siblings (const byte) remove_lines::r#0
Inlining constant with var siblings (const byte) remove_lines::w#0
Inlining constant with var siblings (const byte) tables_init::idx#0
Inlining constant with var siblings (const byte) tables_init::j#0
Inlining constant with var siblings (const byte*) tables_init::pli#0
Inlining constant with var siblings (const byte) render_init::i#0
Inlining constant with var siblings (const byte) render_init::l#0
Inlining constant with var siblings (const byte) render_init::c#0
Inlining constant with var siblings (const byte*) render_init::line#0
Inlining constant with var siblings (const byte*) render_init::li#0
Inlining constant with var siblings (const byte) render_playfield::i#0
Inlining constant with var siblings (const byte) render_playfield::l#0
Inlining constant with var siblings (const byte) render_playfield::c#0
Inlining constant with var siblings (const byte) render_current::i#0
Inlining constant with var siblings (const byte) render_current::l#0
Inlining constant with var siblings (const byte) render_current::c#0
Inlining constant with var siblings (const byte) keyboard_events_size#0
Inlining constant with var siblings (const byte) current_movedown_counter#0
Inlining constant with var siblings (const byte) current_movedown_counter#4
Inlining constant with var siblings (const byte) current_orientation#10
Inlining constant with var siblings (const byte) current_xpos#10
Inlining constant with var siblings (const byte) current_ypos#21
Constant inlined current_xpos#10 = (byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined play_move_rotate::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_move_rotate::return#4 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined play_move_rotate::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_current::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined current_movedown_counter#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined current_movedown_counter#4 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined fill::start#1 = (const byte*) COLS#0
Constant inlined fill::start#0 = (const byte*) SCREEN#0
Constant inlined render_init::li#0 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15
Constant inlined render_playfield::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined remove_lines::full#0 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined fill::size#1 = (word/signed word/dword/signed dword) 1000
Constant inlined remove_lines::full#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined fill::size#0 = (word/signed word/dword/signed dword) 1000
Constant inlined lock_current::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined remove_lines::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_init::$9 = (const byte) PLAYFIELD_COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined remove_lines::$2 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0
Constant inlined collision::return#9 = (const byte) COLLISION_NONE#0
Constant inlined remove_lines::$0 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0
Constant inlined render_init::$8 = (const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined $10 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $11 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $12 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined keyboard_event_scan::col#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_current::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined remove_lines::$5 = (const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined $13 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined remove_lines::$4 = (const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined render_init::$4 = (const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined $14 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $15 = ((word))(const byte[4*4*4]) PIECE_T#0
Constant inlined render_init::$2 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40
Constant inlined $16 = ((word))(const byte[4*4*4]) PIECE_S#0
Constant inlined $17 = ((word))(const byte[4*4*4]) PIECE_Z#0
Constant inlined collision::return#4 = (const byte) COLLISION_BOTTOM#0
Constant inlined $18 = ((word))(const byte[4*4*4]) PIECE_J#0
Constant inlined remove_lines::r#0 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined $19 = ((word))(const byte[4*4*4]) PIECE_O#0
Constant inlined collision::return#6 = (const byte) COLLISION_LEFT#0
Constant inlined collision::return#8 = (const byte) COLLISION_PLAYFIELD#0
Constant inlined collision::return#7 = (const byte) COLLISION_RIGHT#0
Constant inlined tables_init::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined tables_init::$0 = (const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined render_playfield::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined tables_init::$3 = (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0
Constant inlined collision::$4 = (byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0
Constant inlined $20 = ((word))(const byte[4*4*4]) PIECE_I#0
Constant inlined $21 = ((word))(const byte[4*4*4]) PIECE_L#0
Constant inlined keyboard_event_pressed::keycode#4 = (const byte) KEY_SPACE#0
Constant inlined $22 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0
Constant inlined $23 = (const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined $24 = (const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined keyboard_event_pressed::keycode#3 = (const byte) KEY_COMMODORE#0
Constant inlined keyboard_event_pressed::keycode#2 = (const byte) KEY_CTRL#0
Constant inlined render_init::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_event_pressed::keycode#1 = (const byte) KEY_RSHIFT#0
Constant inlined lock_current::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_event_pressed::keycode#0 = (const byte) KEY_LSHIFT#0
Constant inlined render_current::$1 = (byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0
Constant inlined play_move_down::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined play_move_down::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined collision::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined tables_init::idx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_events_size#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined current_ypos#21 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined $1 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $2 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $3 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $4 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined render_init::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined $5 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $6 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $7 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $8 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $9 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined render_playfield::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined spawn_current::piece_idx#0 = (byte/signed byte/word/signed word/dword/signed dword) 7
Constant inlined play_move_leftright::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined play_move_leftright::return#4 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined play_move_leftright::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_event_scan::keycode#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_init::line#0 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14
Constant inlined remove_lines::w#0 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined collision::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined fill::val#0 = (byte/word/signed word/dword/signed dword) 160
Constant inlined play_move_down::movedown#1 = ++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_move_down::movedown#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_current::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined fill::val#1 = (const byte) BLACK#0
Constant inlined keyboard_event_scan::row#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_playfield::$2 = (const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined render_playfield::$0 = (const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined collision::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined current_orientation#10 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::render#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_init::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined tables_init::pli#0 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0
Constant inlined remove_lines::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined lock_current::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_event_get::return#0 = (byte/word/signed word/dword/signed dword) 255
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) fill::size#2 (word/signed word/dword/signed dword) 1000
Successful SSA optimization Pass2IdenticalPhiElimination
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Added new block during phi lifting render_current::@11(between render_current::@2 and render_current::@1)
Added new block during phi lifting render_current::@12(between render_current::@4 and render_current::@3)
Added new block during phi lifting render_current::@13(between render_current::@1 and render_current::@2)
Added new block during phi lifting render_current::@14(between render_current::@4 and render_current::@2)
Added new block during phi lifting render_playfield::@5(between render_playfield::@3 and render_playfield::@1)
Added new block during phi lifting render_playfield::@6(between render_playfield::@2 and render_playfield::@2)
Added new block during phi lifting play_move_rotate::@15(between play_move_rotate::@14 and play_move_rotate::@return)
Added new block during phi lifting play_move_rotate::@16(between play_move_rotate::@6 and play_move_rotate::@return)
Fixing phi predecessor for play_move_rotate::return#2 to new block ( play_move_rotate::@14 -> play_move_rotate::@15 ) during phi lifting.
Fixing phi predecessor for play_move_rotate::return#2 to new block ( play_move_rotate::@6 -> play_move_rotate::@16 ) during phi lifting.
Added new block during phi lifting collision::@20(between collision::@17 and collision::@1)
Added new block during phi lifting collision::@21(between collision::@3 and collision::@2)
Added new block during phi lifting play_move_leftright::@16(between play_move_leftright::@15 and play_move_leftright::@return)
Added new block during phi lifting play_move_leftright::@17(between play_move_leftright::@14 and play_move_leftright::@return)
Added new block during phi lifting play_move_leftright::@18(between play_move_leftright::@6 and play_move_leftright::@return)
Fixing phi predecessor for play_move_leftright::return#2 to new block ( play_move_leftright::@15 -> play_move_leftright::@16 ) during phi lifting.
Fixing phi predecessor for play_move_leftright::return#2 to new block ( play_move_leftright::@14 -> play_move_leftright::@17 ) during phi lifting.
Fixing phi predecessor for play_move_leftright::return#2 to new block ( play_move_leftright::@6 -> play_move_leftright::@18 ) during phi lifting.
Added new block during phi lifting play_move_down::@22(between play_move_down::@17 and play_move_down::@2)
Added new block during phi lifting play_move_down::@23(between play_move_down::@9 and play_move_down::@2)
Added new block during phi lifting play_move_down::@24(between play_move_down::@2 and play_move_down::@4)
Added new block during phi lifting play_move_down::@25(between play_move_down::@4 and play_move_down::@return)
Fixing phi predecessor for play_move_down::return#3 to new block ( play_move_down::@4 -> play_move_down::@25 ) during phi lifting.
Added new block during phi lifting remove_lines::@15(between remove_lines::@4 and remove_lines::@1)
Added new block during phi lifting remove_lines::@16(between remove_lines::@3 and remove_lines::@2)
Added new block during phi lifting remove_lines::@17(between remove_lines::@2 and remove_lines::@3)
Added new block during phi lifting remove_lines::@18(between remove_lines::@9 and remove_lines::@4)
Added new block during phi lifting remove_lines::@19(between remove_lines::@4 and remove_lines::@5)
Added new block during phi lifting lock_current::@7(between lock_current::@5 and lock_current::@1)
Added new block during phi lifting lock_current::@8(between lock_current::@3 and lock_current::@2)
Added new block during phi lifting keyboard_event_get::@7(between keyboard_event_get and keyboard_event_get::@return)
Fixing phi predecessor for keyboard_event_get::return#2 to new block ( keyboard_event_get -> keyboard_event_get::@7 ) during phi lifting.
Added new block during phi lifting keyboard_event_scan::@30(between keyboard_event_scan::@3 and keyboard_event_scan::@1)
Added new block during phi lifting keyboard_event_scan::@31(between keyboard_event_scan::@5 and keyboard_event_scan::@4)
Added new block during phi lifting keyboard_event_scan::@32(between keyboard_event_scan::@25 and keyboard_event_scan::@4)
Fixing phi predecessor for keyboard_event_scan::col#2 to new block ( keyboard_event_scan::@25 -> keyboard_event_scan::@32 ) during phi lifting.
Added new block during phi lifting keyboard_event_scan::@33(between keyboard_event_scan::@4 and keyboard_event_scan::@5)
Added new block during phi lifting keyboard_event_scan::@34(between keyboard_event_scan::@15 and keyboard_event_scan::@5)
Added new block during phi lifting tables_init::@3(between tables_init::@1 and tables_init::@1)
Added new block during phi lifting render_init::@9(between render_init::@1 and render_init::@1)
Added new block during phi lifting render_init::@10(between render_init::@5 and render_init::@2)
Added new block during phi lifting render_init::@11(between render_init::@3 and render_init::@3)
Added new block during phi lifting fill::@3(between fill::@1 and fill::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @25
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@27
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of render_playfield
Adding NOP phi() at start of play_move_down::@8
Adding NOP phi() at start of play_move_down::@13
Adding NOP phi() at start of play_move_down::@19
Adding NOP phi() at start of play_move_down::@20
Adding NOP phi() at start of spawn_current
Adding NOP phi() at start of spawn_current::@2
Adding NOP phi() at start of remove_lines
Adding NOP phi() at start of remove_lines::@8
Adding NOP phi() at start of keyboard_event_scan::@20
Adding NOP phi() at start of keyboard_event_scan::@21
Adding NOP phi() at start of keyboard_event_scan::@9
Adding NOP phi() at start of keyboard_event_scan::@22
Adding NOP phi() at start of keyboard_event_scan::@10
Adding NOP phi() at start of keyboard_event_scan::@23
Adding NOP phi() at start of keyboard_event_scan::@11
Adding NOP phi() at start of keyboard_event_scan::@24
Adding NOP phi() at start of tables_init
Adding NOP phi() at start of render_init
Adding NOP phi() at start of render_init::@7
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to sid_rnd_init:6 render_init:8 tables_init:10 spawn_current:12 render_playfield:14 render_current:17 keyboard_event_scan:25 keyboard_event_get:27 play_move_down:31 play_move_leftright:36 play_move_rotate:41 render_playfield:47 render_current:52 
Calls in [play_move_rotate] to collision:130 
Calls in [play_move_leftright] to collision:182 collision:199 
Calls in [play_move_down] to keyboard_event_pressed:210 collision:230 lock_current:235 remove_lines:237 spawn_current:239 
Calls in [spawn_current] to sid_rnd:277 
Calls in [keyboard_event_scan] to keyboard_matrix_read:361 keyboard_event_pressed:372 keyboard_event_pressed:378 keyboard_event_pressed:384 keyboard_event_pressed:390 
Calls in [render_init] to fill:445 fill:447 

Created 98 initial phi equivalence classes
Not coalescing [15] current_piece_gfx#87 ← current_piece_gfx#10
Not coalescing [16] current_piece_color#75 ← current_piece_color#15
Coalesced [19] current_piece_gfx#86 ← current_piece_gfx#10
Coalesced [20] current_piece_color#74 ← current_piece_color#15
Not coalescing [48] current_ypos#71 ← current_ypos#16
Not coalescing [49] current_xpos#96 ← current_xpos#23
Not coalescing [50] current_piece_gfx#88 ← current_piece_gfx#18
Not coalescing [51] current_piece_color#76 ← current_piece_color#13
Coalesced [54] current_piece#70 ← current_piece#13
Coalesced [55] current_orientation#74 ← current_orientation#23
Coalesced [56] current_piece_gfx#85 ← current_piece_gfx#18
Coalesced [57] current_xpos#95 ← current_xpos#23
Coalesced [58] current_ypos#70 ← current_ypos#16
Coalesced [59] current_piece_color#73 ← current_piece_color#13
Coalesced [60] keyboard_events_size#72 ← keyboard_events_size#16
Coalesced [61] current_movedown_counter#47 ← current_movedown_counter#12
Coalesced [64] render_current::ypos2#10 ← render_current::ypos2#0
Coalesced [69] render_current::i#12 ← render_current::i#4
Coalesced [70] render_current::xpos#8 ← render_current::xpos#0
Coalesced [80] render_current::i#14 ← render_current::i#1
Coalesced [86] render_current::ypos2#11 ← render_current::ypos2#1
Coalesced [87] render_current::l#10 ← render_current::l#1
Coalesced [88] render_current::i#10 ← render_current::i#8
Coalesced (already) [89] render_current::i#11 ← render_current::i#1
Coalesced [90] render_current::xpos#7 ← render_current::xpos#1
Coalesced [91] render_current::c#7 ← render_current::c#1
Coalesced (already) [92] render_current::i#13 ← render_current::i#4
Coalesced [97] render_playfield::i#6 ← render_playfield::i#3
Coalesced [98] render_playfield::line#3 ← render_playfield::line#0
Coalesced [108] render_playfield::l#5 ← render_playfield::l#1
Coalesced [109] render_playfield::i#5 ← render_playfield::i#1
Coalesced (already) [110] render_playfield::i#7 ← render_playfield::i#1
Coalesced [111] render_playfield::line#4 ← render_playfield::line#1
Coalesced [112] render_playfield::c#3 ← render_playfield::c#1
Coalesced [115] current_orientation#77 ← current_orientation#18
Coalesced [116] current_piece_gfx#91 ← current_piece_gfx#17
Coalesced [121] play_move_rotate::orientation#7 ← play_move_rotate::orientation#2
Not coalescing [126] current_piece#75 ← current_piece#13
Coalesced [127] collision::orientation#8 ← collision::orientation#3
Coalesced [128] collision::ypos#8 ← collision::ypos#3
Coalesced [129] collision::xpos#17 ← collision::xpos#3
Coalesced [136] current_orientation#75 ← current_orientation#8
Coalesced [137] current_piece_gfx#89 ← current_piece_gfx#8
Coalesced (already) [138] current_orientation#76 ← current_orientation#18
Coalesced (already) [139] current_piece_gfx#90 ← current_piece_gfx#17
Coalesced [142] play_move_rotate::orientation#6 ← play_move_rotate::orientation#1
Coalesced [146] collision::ypos2#11 ← collision::ypos2#0
Coalesced [149] collision::i#12 ← collision::i#3
Not coalescing [150] collision::col#9 ← collision::xpos#5
Coalesced [167] collision::ypos2#12 ← collision::ypos2#1
Not coalescing [168] collision::i#11 ← collision::i#1
Coalesced [169] collision::l#11 ← collision::l#1
Not coalescing [170] collision::i#13 ← collision::i#1
Coalesced [171] collision::col#10 ← collision::col#1
Coalesced [172] collision::c#9 ← collision::c#1
Not coalescing [178] current_piece#74 ← current_piece#13
Coalesced [179] collision::orientation#7 ← collision::orientation#2
Coalesced [180] collision::ypos#7 ← collision::ypos#2
Coalesced [181] collision::xpos#16 ← collision::xpos#2
Coalesced [187] current_xpos#99 ← current_xpos#7
Coalesced [190] current_xpos#98 ← current_xpos#19
Coalesced (already) [191] current_xpos#101 ← current_xpos#19
Not coalescing [195] current_piece#73 ← current_piece#13
Coalesced [196] collision::orientation#6 ← collision::orientation#1
Coalesced [197] collision::ypos#6 ← collision::ypos#1
Coalesced [198] collision::xpos#15 ← collision::xpos#1
Coalesced [204] current_xpos#97 ← current_xpos#9
Coalesced (already) [205] current_xpos#100 ← current_xpos#19
Coalesced [216] play_move_down::movedown#13 ← play_move_down::movedown#2
Coalesced [220] play_move_down::movedown#16 ← play_move_down::movedown#3
Not coalescing [226] current_piece#72 ← current_piece#11
Coalesced [227] collision::orientation#5 ← collision::orientation#0
Coalesced [228] collision::ypos#5 ← collision::ypos#0
Coalesced [229] collision::xpos#14 ← collision::xpos#0
Coalesced [241] current_piece_gfx#92 ← current_piece_gfx#10
Coalesced [242] current_piece_color#77 ← current_piece_color#15
Coalesced [244] current_ypos#74 ← current_ypos#31
Coalesced [245] current_piece#79 ← current_piece#23
Coalesced [246] current_orientation#80 ← current_orientation#33
Coalesced (already) [247] current_piece_gfx#95 ← current_piece_gfx#29
Coalesced [248] current_xpos#104 ← current_xpos#36
Coalesced (already) [249] current_piece_color#80 ← current_piece_color#23
Coalesced [253] current_ypos#72 ← current_ypos#4
Coalesced (already) [254] current_piece#77 ← current_piece#11
Coalesced (already) [255] current_orientation#78 ← current_orientation#15
Coalesced (already) [256] current_piece_gfx#93 ← current_piece_gfx#15
Coalesced (already) [257] current_xpos#102 ← current_xpos#16
Coalesced (already) [258] current_piece_color#78 ← current_piece_color#11
Coalesced [259] current_movedown_counter#48 ← current_movedown_counter#10
Coalesced (already) [260] current_ypos#73 ← current_ypos#12
Coalesced (already) [261] current_piece#78 ← current_piece#11
Coalesced (already) [262] current_orientation#79 ← current_orientation#15
Coalesced (already) [263] current_piece_gfx#94 ← current_piece_gfx#15
Coalesced (already) [264] current_xpos#103 ← current_xpos#16
Coalesced (already) [265] current_piece_color#79 ← current_piece_color#11
Coalesced [266] play_move_down::movedown#17 ← play_move_down::movedown#7
Coalesced [267] play_move_down::movedown#15 ← play_move_down::movedown#10
Coalesced (already) [268] play_move_down::movedown#14 ← play_move_down::movedown#10
Coalesced [281] spawn_current::piece_idx#4 ← spawn_current::piece_idx#1
Coalesced [286] remove_lines::r#10 ← remove_lines::r#3
Coalesced [287] remove_lines::w#14 ← remove_lines::w#12
Coalesced [300] remove_lines::w#16 ← remove_lines::w#2
Coalesced [304] remove_lines::w#18 ← remove_lines::w#11
Coalesced [310] remove_lines::w#19 ← remove_lines::w#3
Coalesced [311] remove_lines::r#9 ← remove_lines::r#1
Coalesced [312] remove_lines::w#13 ← remove_lines::w#11
Coalesced [313] remove_lines::y#9 ← remove_lines::y#1
Coalesced [314] remove_lines::w#17 ← remove_lines::w#1
Coalesced (already) [315] remove_lines::r#11 ← remove_lines::r#1
Coalesced (already) [316] remove_lines::w#15 ← remove_lines::w#1
Coalesced [317] remove_lines::x#5 ← remove_lines::x#1
Coalesced [318] remove_lines::full#5 ← remove_lines::full#2
Coalesced (already) [319] remove_lines::full#6 ← remove_lines::full#4
Coalesced [321] lock_current::ypos2#7 ← lock_current::ypos2#0
Coalesced [325] lock_current::i#8 ← lock_current::i#3
Coalesced [326] lock_current::col#5 ← lock_current::col#0
Coalesced [338] lock_current::ypos2#8 ← lock_current::ypos2#1
Not coalescing [339] lock_current::i#7 ← lock_current::i#1
Coalesced [340] lock_current::l#7 ← lock_current::l#1
Not coalescing [341] lock_current::i#9 ← lock_current::i#1
Coalesced [342] lock_current::col#6 ← lock_current::col#1
Coalesced [343] lock_current::c#5 ← lock_current::c#1
Coalesced [353] keyboard_event_get::return#6 ← keyboard_event_get::return#1
Coalesced [354] keyboard_events_size#74 ← keyboard_events_size#4
Coalesced [357] keyboard_events_size#73 ← keyboard_events_size#13
Coalesced [358] keyboard_events_size#75 ← keyboard_events_size#19
Coalesced [366] keyboard_event_scan::keycode#17 ← keyboard_event_scan::keycode#1
Coalesced (already) [367] keyboard_events_size#77 ← keyboard_events_size#29
Coalesced [396] keyboard_event_scan::row#15 ← keyboard_event_scan::row#1
Coalesced [397] keyboard_event_scan::keycode#16 ← keyboard_event_scan::keycode#14
Coalesced (already) [398] keyboard_events_size#76 ← keyboard_events_size#13
Coalesced [399] keyboard_event_scan::keycode#19 ← keyboard_event_scan::keycode#11
Coalesced [400] keyboard_events_size#79 ← keyboard_events_size#29
Coalesced [410] keyboard_events_size#81 ← keyboard_events_size#2
Coalesced [416] keyboard_event_scan::keycode#18 ← keyboard_event_scan::keycode#15
Coalesced [417] keyboard_events_size#78 ← keyboard_events_size#30
Coalesced [418] keyboard_event_scan::col#9 ← keyboard_event_scan::col#1
Coalesced (already) [419] keyboard_event_scan::keycode#20 ← keyboard_event_scan::keycode#15
Coalesced (already) [420] keyboard_events_size#80 ← keyboard_events_size#30
Coalesced [424] keyboard_events_size#84 ← keyboard_events_size#1
Coalesced (already) [425] keyboard_events_size#83 ← keyboard_events_size#10
Coalesced (already) [426] keyboard_events_size#82 ← keyboard_events_size#10
Coalesced [441] tables_init::j#3 ← tables_init::j#1
Coalesced [442] tables_init::pli#3 ← tables_init::pli#1
Coalesced [443] tables_init::idx#3 ← tables_init::idx#1
Coalesced [464] render_init::line#5 ← render_init::line#1
Coalesced [465] render_init::l#5 ← render_init::l#1
Coalesced [466] render_init::c#3 ← render_init::c#1
Coalesced [467] render_init::i#3 ← render_init::i#1
Coalesced [468] render_init::li#3 ← render_init::li#1
Coalesced [471] fill::addr#3 ← fill::addr#0
Coalesced [477] fill::addr#4 ← fill::addr#1
Coalesced down to 64 phi equivalence classes
Culled Empty Block (label) render_current::@14
Culled Empty Block (label) render_current::@11
Culled Empty Block (label) render_current::@12
Culled Empty Block (label) render_current::@13
Culled Empty Block (label) render_playfield::@5
Culled Empty Block (label) render_playfield::@6
Culled Empty Block (label) play_move_rotate::@16
Culled Empty Block (label) play_move_rotate::@15
Culled Empty Block (label) play_move_leftright::@16
Culled Empty Block (label) play_move_leftright::@18
Culled Empty Block (label) play_move_leftright::@17
Culled Empty Block (label) play_move_down::@25
Culled Empty Block (label) play_move_down::@24
Culled Empty Block (label) play_move_down::@23
Culled Empty Block (label) play_move_down::@22
Culled Empty Block (label) remove_lines::@8
Culled Empty Block (label) remove_lines::@19
Culled Empty Block (label) remove_lines::@15
Culled Empty Block (label) remove_lines::@18
Culled Empty Block (label) remove_lines::@16
Culled Empty Block (label) keyboard_event_get::@7
Culled Empty Block (label) keyboard_event_scan::@30
Culled Empty Block (label) keyboard_event_scan::@32
Culled Empty Block (label) keyboard_event_scan::@31
Culled Empty Block (label) keyboard_event_scan::@34
Culled Empty Block (label) keyboard_event_scan::@33
Culled Empty Block (label) tables_init::@3
Culled Empty Block (label) render_init::@10
Culled Empty Block (label) render_init::@11
Culled Empty Block (label) render_init::@9
Culled Empty Block (label) fill::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @25
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@27
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of render_playfield
Adding NOP phi() at start of play_move_down::@8
Adding NOP phi() at start of play_move_down::@13
Adding NOP phi() at start of play_move_down::@19
Adding NOP phi() at start of play_move_down::@20
Adding NOP phi() at start of spawn_current
Adding NOP phi() at start of spawn_current::@2
Adding NOP phi() at start of remove_lines
Adding NOP phi() at start of remove_lines::@17
Adding NOP phi() at start of keyboard_event_scan
Adding NOP phi() at start of keyboard_event_scan::@20
Adding NOP phi() at start of keyboard_event_scan::@21
Adding NOP phi() at start of keyboard_event_scan::@9
Adding NOP phi() at start of keyboard_event_scan::@22
Adding NOP phi() at start of keyboard_event_scan::@10
Adding NOP phi() at start of keyboard_event_scan::@23
Adding NOP phi() at start of keyboard_event_scan::@11
Adding NOP phi() at start of keyboard_event_scan::@24
Adding NOP phi() at start of tables_init
Adding NOP phi() at start of render_init
Adding NOP phi() at start of render_init::@7

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@22
@22: scope:[]  from @begin
  kickasm(location (const byte*) CHARSET#0) {{ .var charset = LoadPicture("charset.png", List().add($000000, $ffffff, $523fa0, $77c1c9))
    .for (var c=0; c<16; c++)
        .for (var y=0;y<8; y++)
            .byte charset.getMulticolorByte(c,y)
 }}
  to:@25
@25: scope:[]  from @22
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @25
  [4] phi()
main: scope:[main]  from @25
  [5] phi()
  [6] call sid_rnd_init 
  to:main::@21
main::@21: scope:[main]  from main
  asm { sei  }
  [8] call render_init 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [9] phi()
  [10] call tables_init 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [11] phi()
  [12] call spawn_current 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [13] phi()
  [14] call render_playfield 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [15] (byte*~) current_piece_gfx#87 ← (byte*) current_piece_gfx#10
  [16] (byte~) current_piece_color#75 ← (byte) current_piece_color#15
  [17] call render_current 
  [18] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3)
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@25
  [19] (byte) current_movedown_counter#15 ← phi( main::@10/(byte) current_movedown_counter#12 main::@25/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [19] (byte) keyboard_events_size#19 ← phi( main::@10/(byte) keyboard_events_size#16 main::@25/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [19] (byte) current_piece_color#11 ← phi( main::@10/(byte) current_piece_color#13 main::@25/(byte) current_piece_color#15 )
  [19] (byte) current_ypos#12 ← phi( main::@10/(byte) current_ypos#16 main::@25/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [19] (byte) current_xpos#16 ← phi( main::@10/(byte) current_xpos#23 main::@25/(byte/signed byte/word/signed word/dword/signed dword) 3 )
  [19] (byte*) current_piece_gfx#15 ← phi( main::@10/(byte*) current_piece_gfx#18 main::@25/(byte*) current_piece_gfx#10 )
  [19] (byte) current_orientation#15 ← phi( main::@10/(byte) current_orientation#23 main::@25/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [19] (byte*) current_piece#11 ← phi( main::@10/(byte*) current_piece#13 main::@25/(byte*~) current_piece#71 )
  to:main::@4
main::@4: scope:[main]  from main::@1 main::@4
  [20] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4
  to:main::@7
main::@7: scope:[main]  from main::@4 main::@7
  [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 254) goto main::@7
  to:main::@9
main::@9: scope:[main]  from main::@7
  [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  [23] call keyboard_event_scan 
  to:main::@27
main::@27: scope:[main]  from main::@9
  [24] phi()
  [25] call keyboard_event_get 
  [26] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@28
main::@28: scope:[main]  from main::@27
  [27] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3
  [28] (byte) play_move_down::key_event#0 ← (byte) main::key_event#0
  [29] call play_move_down 
  [30] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3
  to:main::@29
main::@29: scope:[main]  from main::@28
  [31] (byte~) main::$10 ← (byte) play_move_down::return#0
  [32] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$10
  [33] (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#0
  [34] call play_move_leftright 
  [35] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
  to:main::@30
main::@30: scope:[main]  from main::@29
  [36] (byte~) main::$11 ← (byte) play_move_leftright::return#0
  [37] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$11
  [38] (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#0
  [39] call play_move_rotate 
  [40] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
  to:main::@31
main::@31: scope:[main]  from main::@30
  [41] (byte~) main::$12 ← (byte) play_move_rotate::return#0
  [42] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$12
  [43] if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@10
  to:main::@19
main::@19: scope:[main]  from main::@31
  [44] phi()
  [45] call render_playfield 
  to:main::@32
main::@32: scope:[main]  from main::@19
  [46] (byte~) current_ypos#71 ← (byte) current_ypos#16
  [47] (byte~) current_xpos#96 ← (byte) current_xpos#23
  [48] (byte*~) current_piece_gfx#88 ← (byte*) current_piece_gfx#18
  [49] (byte~) current_piece_color#76 ← (byte) current_piece_color#13
  [50] call render_current 
  to:main::@10
main::@10: scope:[main]  from main::@31 main::@32
  [51] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0)
  to:main::@1
render_current: scope:[render_current]  from main::@25 main::@32
  [52] (byte) current_piece_color#67 ← phi( main::@25/(byte~) current_piece_color#75 main::@32/(byte~) current_piece_color#76 )
  [52] (byte*) current_piece_gfx#64 ← phi( main::@25/(byte*~) current_piece_gfx#87 main::@32/(byte*~) current_piece_gfx#88 )
  [52] (byte) current_xpos#63 ← phi( main::@25/(byte/signed byte/word/signed word/dword/signed dword) 3 main::@32/(byte~) current_xpos#96 )
  [52] (byte) current_ypos#22 ← phi( main::@25/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@32/(byte~) current_ypos#71 )
  [53] (byte) render_current::ypos2#0 ← (byte) current_ypos#22 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:render_current::@1
render_current::@1: scope:[render_current]  from render_current render_current::@2
  [54] (byte) render_current::i#4 ← phi( render_current/(byte/signed byte/word/signed word/dword/signed dword) 0 render_current::@2/(byte) render_current::i#8 )
  [54] (byte) render_current::l#3 ← phi( render_current/(byte/signed byte/word/signed word/dword/signed dword) 0 render_current::@2/(byte) render_current::l#1 )
  [54] (byte) render_current::ypos2#2 ← phi( render_current/(byte) render_current::ypos2#0 render_current::@2/(byte) render_current::ypos2#1 )
  [55] if((byte) render_current::ypos2#2>=(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto render_current::@2
  to:render_current::@6
render_current::@6: scope:[render_current]  from render_current::@1
  [56] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte) render_current::ypos2#2)
  [57] (byte) render_current::xpos#0 ← (byte) current_xpos#63
  to:render_current::@3
render_current::@3: scope:[render_current]  from render_current::@4 render_current::@6
  [58] (byte) render_current::c#2 ← phi( render_current::@4/(byte) render_current::c#1 render_current::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [58] (byte) render_current::xpos#2 ← phi( render_current::@4/(byte) render_current::xpos#1 render_current::@6/(byte) render_current::xpos#0 )
  [58] (byte) render_current::i#2 ← phi( render_current::@4/(byte) render_current::i#1 render_current::@6/(byte) render_current::i#4 )
  [59] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_current::i#2)
  [60] (byte) render_current::i#1 ← ++ (byte) render_current::i#2
  [61] if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@4
  to:render_current::@7
render_current::@7: scope:[render_current]  from render_current::@3
  [62] if((byte) render_current::xpos#2>=(const byte) PLAYFIELD_COLS#0) goto render_current::@4
  to:render_current::@8
render_current::@8: scope:[render_current]  from render_current::@7
  [63] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_color#67
  to:render_current::@4
render_current::@4: scope:[render_current]  from render_current::@3 render_current::@7 render_current::@8
  [64] (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2
  [65] (byte) render_current::c#1 ← ++ (byte) render_current::c#2
  [66] if((byte) render_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@3
  to:render_current::@2
render_current::@2: scope:[render_current]  from render_current::@1 render_current::@4
  [67] (byte) render_current::i#8 ← phi( render_current::@1/(byte) render_current::i#4 render_current::@4/(byte) render_current::i#1 )
  [68] (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [69] (byte) render_current::l#1 ← ++ (byte) render_current::l#3
  [70] if((byte) render_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@1
  to:render_current::@return
render_current::@return: scope:[render_current]  from render_current::@2
  [71] return 
  to:@return
render_playfield: scope:[render_playfield]  from main::@19 main::@24
  [72] phi()
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  [73] (byte) render_playfield::i#3 ← phi( render_playfield/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@3/(byte) render_playfield::i#1 )
  [73] (byte) render_playfield::l#2 ← phi( render_playfield/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@3/(byte) render_playfield::l#1 )
  [74] (byte~) render_playfield::$1 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [75] (byte*) render_playfield::line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_playfield::$1)
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  [76] (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@2/(byte) render_playfield::c#1 )
  [76] (byte*) render_playfield::line#2 ← phi( render_playfield::@1/(byte*) render_playfield::line#0 render_playfield::@2/(byte*) render_playfield::line#1 )
  [76] (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  [77] *((byte*) render_playfield::line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2)
  [78] (byte*) render_playfield::line#1 ← ++ (byte*) render_playfield::line#2
  [79] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  [80] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2
  [81] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  [82] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2
  [83] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  [84] return 
  to:@return
play_move_rotate: scope:[play_move_rotate]  from main::@30
  [85] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1
  to:play_move_rotate::@6
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate
  [86] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@11 play_move_rotate::@14 play_move_rotate::@6
  [87] (byte*) current_piece_gfx#18 ← phi( play_move_rotate::@11/(byte*) current_piece_gfx#8 play_move_rotate::@14/(byte*) current_piece_gfx#17 play_move_rotate::@6/(byte*) current_piece_gfx#17 )
  [87] (byte) current_orientation#23 ← phi( play_move_rotate::@11/(byte) current_orientation#8 play_move_rotate::@14/(byte) current_orientation#18 play_move_rotate::@6/(byte) current_orientation#18 )
  [87] (byte) play_move_rotate::return#2 ← phi( play_move_rotate::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_rotate::@14/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_rotate::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [88] return 
  to:@return
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@6
  [89] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#18 + (byte/signed byte/word/signed word/dword/signed dword) 16
  [90] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63
  to:play_move_rotate::@4
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  [91] (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  [92] (byte) collision::xpos#3 ← (byte) current_xpos#23
  [93] (byte) collision::ypos#3 ← (byte) current_ypos#16
  [94] (byte) collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  [95] (byte*~) current_piece#75 ← (byte*) current_piece#13
  [96] call collision 
  [97] (byte) collision::return#13 ← (byte) collision::return#14
  to:play_move_rotate::@14
play_move_rotate::@14: scope:[play_move_rotate]  from play_move_rotate::@4
  [98] (byte~) play_move_rotate::$6 ← (byte) collision::return#13
  [99] if((byte~) play_move_rotate::$6!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return
  to:play_move_rotate::@11
play_move_rotate::@11: scope:[play_move_rotate]  from play_move_rotate::@14
  [100] (byte) current_orientation#8 ← (byte) play_move_rotate::orientation#3
  [101] (byte*) current_piece_gfx#8 ← (byte*) current_piece#13 + (byte) current_orientation#8
  to:play_move_rotate::@return
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  [102] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#18 - (byte/signed byte/word/signed word/dword/signed dword) 16
  [103] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63
  to:play_move_rotate::@4
collision: scope:[collision]  from play_move_down::@12 play_move_leftright::@1 play_move_leftright::@7 play_move_rotate::@4
  [104] (byte) collision::xpos#5 ← phi( play_move_down::@12/(byte) collision::xpos#0 play_move_leftright::@1/(byte) collision::xpos#1 play_move_leftright::@7/(byte) collision::xpos#2 play_move_rotate::@4/(byte) collision::xpos#3 )
  [104] (byte) collision::ypos#4 ← phi( play_move_down::@12/(byte) collision::ypos#0 play_move_leftright::@1/(byte) collision::ypos#1 play_move_leftright::@7/(byte) collision::ypos#2 play_move_rotate::@4/(byte) collision::ypos#3 )
  [104] (byte) collision::orientation#4 ← phi( play_move_down::@12/(byte) collision::orientation#0 play_move_leftright::@1/(byte) collision::orientation#1 play_move_leftright::@7/(byte) collision::orientation#2 play_move_rotate::@4/(byte) collision::orientation#3 )
  [104] (byte*) current_piece#15 ← phi( play_move_down::@12/(byte*~) current_piece#72 play_move_leftright::@1/(byte*~) current_piece#73 play_move_leftright::@7/(byte*~) current_piece#74 play_move_rotate::@4/(byte*~) current_piece#75 )
  [105] (byte*) collision::piece_gfx#0 ← (byte*) current_piece#15 + (byte) collision::orientation#4
  [106] (byte) collision::ypos2#0 ← (byte) collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:collision::@1
collision::@1: scope:[collision]  from collision collision::@20
  [107] (byte) collision::l#6 ← phi( collision/(byte/signed byte/word/signed word/dword/signed dword) 0 collision::@20/(byte) collision::l#1 )
  [107] (byte) collision::i#3 ← phi( collision/(byte/signed byte/word/signed word/dword/signed dword) 0 collision::@20/(byte~) collision::i#11 )
  [107] (byte) collision::ypos2#2 ← phi( collision/(byte) collision::ypos2#0 collision::@20/(byte) collision::ypos2#1 )
  [108] (byte*) collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) collision::ypos2#2)
  [109] (byte~) collision::col#9 ← (byte) collision::xpos#5
  to:collision::@2
collision::@2: scope:[collision]  from collision::@1 collision::@21
  [110] (byte) collision::c#2 ← phi( collision::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 collision::@21/(byte) collision::c#1 )
  [110] (byte) collision::col#2 ← phi( collision::@1/(byte~) collision::col#9 collision::@21/(byte) collision::col#1 )
  [110] (byte) collision::i#2 ← phi( collision::@1/(byte) collision::i#3 collision::@21/(byte~) collision::i#13 )
  [111] (byte) collision::i#1 ← ++ (byte) collision::i#2
  [112] if(*((byte*) collision::piece_gfx#0 + (byte) collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3
  to:collision::@8
collision::@8: scope:[collision]  from collision::@2
  [113] if((byte) collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto collision::@4
  to:collision::@return
collision::@return: scope:[collision]  from collision::@17 collision::@4 collision::@5 collision::@6 collision::@8
  [114] (byte) collision::return#14 ← phi( collision::@4/(const byte) COLLISION_LEFT#0 collision::@5/(const byte) COLLISION_RIGHT#0 collision::@6/(const byte) COLLISION_PLAYFIELD#0 collision::@17/(const byte) COLLISION_NONE#0 collision::@8/(const byte) COLLISION_BOTTOM#0 )
  [115] return 
  to:@return
collision::@4: scope:[collision]  from collision::@8
  [116] (byte~) collision::$7 ← (byte) collision::col#2 & (byte/word/signed word/dword/signed dword) 128
  [117] if((byte~) collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@5
  to:collision::@return
collision::@5: scope:[collision]  from collision::@4
  [118] if((byte) collision::col#2<(const byte) PLAYFIELD_COLS#0) goto collision::@6
  to:collision::@return
collision::@6: scope:[collision]  from collision::@5
  [119] if(*((byte*) collision::playfield_line#0 + (byte) collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3
  to:collision::@return
collision::@3: scope:[collision]  from collision::@2 collision::@6
  [120] (byte) collision::col#1 ← ++ (byte) collision::col#2
  [121] (byte) collision::c#1 ← ++ (byte) collision::c#2
  [122] if((byte) collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto collision::@21
  to:collision::@17
collision::@17: scope:[collision]  from collision::@3
  [123] (byte) collision::ypos2#1 ← (byte) collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [124] (byte) collision::l#1 ← ++ (byte) collision::l#6
  [125] if((byte) collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto collision::@20
  to:collision::@return
collision::@20: scope:[collision]  from collision::@17
  [126] (byte~) collision::i#11 ← (byte) collision::i#1
  to:collision::@1
collision::@21: scope:[collision]  from collision::@3
  [127] (byte~) collision::i#13 ← (byte) collision::i#1
  to:collision::@2
play_move_leftright: scope:[play_move_leftright]  from main::@29
  [128] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1
  to:play_move_leftright::@6
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright
  [129] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return
  to:play_move_leftright::@7
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@6
  [130] (byte) collision::xpos#2 ← (byte) current_xpos#19 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [131] (byte) collision::ypos#2 ← (byte) current_ypos#16
  [132] (byte) collision::orientation#2 ← (byte) current_orientation#18
  [133] (byte*~) current_piece#74 ← (byte*) current_piece#13
  [134] call collision 
  [135] (byte) collision::return#12 ← (byte) collision::return#14
  to:play_move_leftright::@15
play_move_leftright::@15: scope:[play_move_leftright]  from play_move_leftright::@7
  [136] (byte~) play_move_leftright::$4 ← (byte) collision::return#12
  [137] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@8
play_move_leftright::@8: scope:[play_move_leftright]  from play_move_leftright::@15
  [138] (byte) current_xpos#7 ← ++ (byte) current_xpos#19
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@11 play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@6 play_move_leftright::@8
  [139] (byte) current_xpos#23 ← phi( play_move_leftright::@11/(byte) current_xpos#9 play_move_leftright::@15/(byte) current_xpos#19 play_move_leftright::@8/(byte) current_xpos#7 play_move_leftright::@14/(byte) current_xpos#19 play_move_leftright::@6/(byte) current_xpos#19 )
  [139] (byte) play_move_leftright::return#2 ← phi( play_move_leftright::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_leftright::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_leftright::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_leftright::@14/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_leftright::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [140] return 
  to:@return
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  [141] (byte) collision::xpos#1 ← (byte) current_xpos#19 - (byte/signed byte/word/signed word/dword/signed dword) 1
  [142] (byte) collision::ypos#1 ← (byte) current_ypos#16
  [143] (byte) collision::orientation#1 ← (byte) current_orientation#18
  [144] (byte*~) current_piece#73 ← (byte*) current_piece#13
  [145] call collision 
  [146] (byte) collision::return#1 ← (byte) collision::return#14
  to:play_move_leftright::@14
play_move_leftright::@14: scope:[play_move_leftright]  from play_move_leftright::@1
  [147] (byte~) play_move_leftright::$8 ← (byte) collision::return#1
  [148] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@11
play_move_leftright::@11: scope:[play_move_leftright]  from play_move_leftright::@14
  [149] (byte) current_xpos#9 ← -- (byte) current_xpos#19
  to:play_move_leftright::@return
play_move_down: scope:[play_move_down]  from main::@28
  [150] (byte) current_movedown_counter#10 ← ++ (byte) current_movedown_counter#15
  [151] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1
  to:play_move_down::@8
play_move_down::@8: scope:[play_move_down]  from play_move_down
  [152] phi()
  to:play_move_down::@1
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@8
  [153] (byte) play_move_down::movedown#10 ← phi( play_move_down/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [154] call keyboard_event_pressed 
  [155] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@1
  [156] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  [157] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2
  to:play_move_down::@9
play_move_down::@9: scope:[play_move_down]  from play_move_down::@17
  [158] if((byte) current_movedown_counter#10<(const byte) current_movedown_fast#0) goto play_move_down::@2
  to:play_move_down::@10
play_move_down::@10: scope:[play_move_down]  from play_move_down::@9
  [159] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10
  to:play_move_down::@2
play_move_down::@2: scope:[play_move_down]  from play_move_down::@10 play_move_down::@17 play_move_down::@9
  [160] (byte) play_move_down::movedown#7 ← phi( play_move_down::@10/(byte) play_move_down::movedown#2 play_move_down::@17/(byte) play_move_down::movedown#10 play_move_down::@9/(byte) play_move_down::movedown#10 )
  [161] if((byte) current_movedown_counter#10<(const byte) current_movedown_slow#0) goto play_move_down::@4
  to:play_move_down::@11
play_move_down::@11: scope:[play_move_down]  from play_move_down::@2
  [162] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@4
play_move_down::@4: scope:[play_move_down]  from play_move_down::@11 play_move_down::@2
  [163] (byte) play_move_down::movedown#6 ← phi( play_move_down::@11/(byte) play_move_down::movedown#3 play_move_down::@2/(byte) play_move_down::movedown#7 )
  [164] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return
  to:play_move_down::@12
play_move_down::@12: scope:[play_move_down]  from play_move_down::@4
  [165] (byte) collision::ypos#0 ← (byte) current_ypos#12 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [166] (byte) collision::xpos#0 ← (byte) current_xpos#16
  [167] (byte) collision::orientation#0 ← (byte) current_orientation#15
  [168] (byte*~) current_piece#72 ← (byte*) current_piece#11
  [169] call collision 
  [170] (byte) collision::return#0 ← (byte) collision::return#14
  to:play_move_down::@18
play_move_down::@18: scope:[play_move_down]  from play_move_down::@12
  [171] (byte~) play_move_down::$12 ← (byte) collision::return#0
  [172] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@6
  to:play_move_down::@13
play_move_down::@13: scope:[play_move_down]  from play_move_down::@18
  [173] phi()
  [174] call lock_current 
  to:play_move_down::@19
play_move_down::@19: scope:[play_move_down]  from play_move_down::@13
  [175] phi()
  [176] call remove_lines 
  to:play_move_down::@20
play_move_down::@20: scope:[play_move_down]  from play_move_down::@19
  [177] phi()
  [178] call spawn_current 
  [179] (byte*~) current_piece#76 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3)
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@20 play_move_down::@6
  [180] (byte) current_piece_color#23 ← phi( play_move_down::@20/(byte) current_piece_color#15 play_move_down::@6/(byte) current_piece_color#11 )
  [180] (byte) current_xpos#36 ← phi( play_move_down::@20/(byte/signed byte/word/signed word/dword/signed dword) 3 play_move_down::@6/(byte) current_xpos#16 )
  [180] (byte*) current_piece_gfx#29 ← phi( play_move_down::@20/(byte*) current_piece_gfx#10 play_move_down::@6/(byte*) current_piece_gfx#15 )
  [180] (byte) current_orientation#33 ← phi( play_move_down::@20/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@6/(byte) current_orientation#15 )
  [180] (byte*) current_piece#23 ← phi( play_move_down::@20/(byte*~) current_piece#76 play_move_down::@6/(byte*) current_piece#11 )
  [180] (byte) current_ypos#31 ← phi( play_move_down::@20/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@6/(byte) current_ypos#4 )
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@4 play_move_down::@7
  [181] (byte) current_piece_color#13 ← phi( play_move_down::@4/(byte) current_piece_color#11 play_move_down::@7/(byte) current_piece_color#23 )
  [181] (byte) current_xpos#19 ← phi( play_move_down::@4/(byte) current_xpos#16 play_move_down::@7/(byte) current_xpos#36 )
  [181] (byte*) current_piece_gfx#17 ← phi( play_move_down::@4/(byte*) current_piece_gfx#15 play_move_down::@7/(byte*) current_piece_gfx#29 )
  [181] (byte) current_orientation#18 ← phi( play_move_down::@4/(byte) current_orientation#15 play_move_down::@7/(byte) current_orientation#33 )
  [181] (byte*) current_piece#13 ← phi( play_move_down::@4/(byte*) current_piece#11 play_move_down::@7/(byte*) current_piece#23 )
  [181] (byte) current_ypos#16 ← phi( play_move_down::@4/(byte) current_ypos#12 play_move_down::@7/(byte) current_ypos#31 )
  [181] (byte) current_movedown_counter#12 ← phi( play_move_down::@4/(byte) current_movedown_counter#10 play_move_down::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [181] (byte) play_move_down::return#3 ← phi( play_move_down::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [182] return 
  to:@return
play_move_down::@6: scope:[play_move_down]  from play_move_down::@18
  [183] (byte) current_ypos#4 ← ++ (byte) current_ypos#12
  to:play_move_down::@7
spawn_current: scope:[spawn_current]  from main::@23 play_move_down::@20
  [184] phi()
  to:spawn_current::@1
spawn_current::@1: scope:[spawn_current]  from spawn_current spawn_current::@7
  [185] (byte) spawn_current::piece_idx#2 ← phi( spawn_current/(byte/signed byte/word/signed word/dword/signed dword) 7 spawn_current::@7/(byte) spawn_current::piece_idx#1 )
  [186] if((byte) spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto spawn_current::@2
  to:spawn_current::@3
spawn_current::@3: scope:[spawn_current]  from spawn_current::@1
  [187] (byte~) spawn_current::$3 ← (byte) spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [188] (byte*) current_piece_gfx#10 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0
  [189] (byte) current_piece_color#15 ← *((const byte[]) PIECES_COLORS#0 + (byte) spawn_current::piece_idx#2)
  to:spawn_current::@return
spawn_current::@return: scope:[spawn_current]  from spawn_current::@3
  [190] return 
  to:@return
spawn_current::@2: scope:[spawn_current]  from spawn_current::@1
  [191] phi()
  [192] call sid_rnd 
  [193] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
  to:spawn_current::@7
spawn_current::@7: scope:[spawn_current]  from spawn_current::@2
  [194] (byte~) spawn_current::$1 ← (byte) sid_rnd::return#2
  [195] (byte) spawn_current::piece_idx#1 ← (byte~) spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7
  to:spawn_current::@1
sid_rnd: scope:[sid_rnd]  from spawn_current::@2
  [196] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  [197] return 
  to:@return
remove_lines: scope:[remove_lines]  from play_move_down::@19
  [198] phi()
  to:remove_lines::@1
remove_lines::@1: scope:[remove_lines]  from remove_lines remove_lines::@4
  [199] (byte) remove_lines::y#8 ← phi( remove_lines/(byte/signed byte/word/signed word/dword/signed dword) 0 remove_lines::@4/(byte) remove_lines::y#1 )
  [199] (byte) remove_lines::w#12 ← phi( remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 remove_lines::@4/(byte) remove_lines::w#11 )
  [199] (byte) remove_lines::r#3 ← phi( remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 remove_lines::@4/(byte) remove_lines::r#1 )
  to:remove_lines::@2
remove_lines::@2: scope:[remove_lines]  from remove_lines::@1 remove_lines::@3
  [200] (byte) remove_lines::full#4 ← phi( remove_lines::@1/(byte/signed byte/word/signed word/dword/signed dword) 1 remove_lines::@3/(byte) remove_lines::full#2 )
  [200] (byte) remove_lines::x#2 ← phi( remove_lines::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 remove_lines::@3/(byte) remove_lines::x#1 )
  [200] (byte) remove_lines::w#4 ← phi( remove_lines::@1/(byte) remove_lines::w#12 remove_lines::@3/(byte) remove_lines::w#1 )
  [200] (byte) remove_lines::r#2 ← phi( remove_lines::@1/(byte) remove_lines::r#3 remove_lines::@3/(byte) remove_lines::r#1 )
  [201] (byte) remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::r#2)
  [202] (byte) remove_lines::r#1 ← -- (byte) remove_lines::r#2
  [203] if((byte) remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto remove_lines::@17
  to:remove_lines::@3
remove_lines::@3: scope:[remove_lines]  from remove_lines::@17 remove_lines::@2
  [204] (byte) remove_lines::full#2 ← phi( remove_lines::@17/(byte) remove_lines::full#4 remove_lines::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [205] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::w#4) ← (byte) remove_lines::c#0
  [206] (byte) remove_lines::w#1 ← -- (byte) remove_lines::w#4
  [207] (byte) remove_lines::x#1 ← ++ (byte) remove_lines::x#2
  [208] if((byte) remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@2
  to:remove_lines::@9
remove_lines::@9: scope:[remove_lines]  from remove_lines::@3
  [209] if((byte) remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@4
  to:remove_lines::@10
remove_lines::@10: scope:[remove_lines]  from remove_lines::@9
  [210] (byte) remove_lines::w#2 ← (byte) remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0
  to:remove_lines::@4
remove_lines::@4: scope:[remove_lines]  from remove_lines::@10 remove_lines::@9
  [211] (byte) remove_lines::w#11 ← phi( remove_lines::@10/(byte) remove_lines::w#2 remove_lines::@9/(byte) remove_lines::w#1 )
  [212] (byte) remove_lines::y#1 ← ++ (byte) remove_lines::y#8
  [213] if((byte) remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@1
  to:remove_lines::@5
remove_lines::@5: scope:[remove_lines]  from remove_lines::@4 remove_lines::@6
  [214] (byte) remove_lines::w#6 ← phi( remove_lines::@4/(byte) remove_lines::w#11 remove_lines::@6/(byte) remove_lines::w#3 )
  [215] if((byte) remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto remove_lines::@6
  to:remove_lines::@return
remove_lines::@return: scope:[remove_lines]  from remove_lines::@5
  [216] return 
  to:@return
remove_lines::@6: scope:[remove_lines]  from remove_lines::@5
  [217] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [218] (byte) remove_lines::w#3 ← -- (byte) remove_lines::w#6
  to:remove_lines::@5
remove_lines::@17: scope:[remove_lines]  from remove_lines::@2
  [219] phi()
  to:remove_lines::@3
lock_current: scope:[lock_current]  from play_move_down::@13
  [220] (byte) lock_current::ypos2#0 ← (byte) current_ypos#12 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:lock_current::@1
lock_current::@1: scope:[lock_current]  from lock_current lock_current::@7
  [221] (byte) lock_current::l#6 ← phi( lock_current/(byte/signed byte/word/signed word/dword/signed dword) 0 lock_current::@7/(byte) lock_current::l#1 )
  [221] (byte) lock_current::i#3 ← phi( lock_current/(byte/signed byte/word/signed word/dword/signed dword) 0 lock_current::@7/(byte~) lock_current::i#7 )
  [221] (byte) lock_current::ypos2#2 ← phi( lock_current/(byte) lock_current::ypos2#0 lock_current::@7/(byte) lock_current::ypos2#1 )
  [222] (byte*) lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) lock_current::ypos2#2)
  [223] (byte) lock_current::col#0 ← (byte) current_xpos#16
  to:lock_current::@2
lock_current::@2: scope:[lock_current]  from lock_current::@1 lock_current::@8
  [224] (byte) lock_current::c#2 ← phi( lock_current::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 lock_current::@8/(byte) lock_current::c#1 )
  [224] (byte) lock_current::col#2 ← phi( lock_current::@1/(byte) lock_current::col#0 lock_current::@8/(byte) lock_current::col#1 )
  [224] (byte) lock_current::i#2 ← phi( lock_current::@1/(byte) lock_current::i#3 lock_current::@8/(byte~) lock_current::i#9 )
  [225] (byte) lock_current::i#1 ← ++ (byte) lock_current::i#2
  [226] if(*((byte*) current_piece_gfx#15 + (byte) lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto lock_current::@3
  to:lock_current::@4
lock_current::@4: scope:[lock_current]  from lock_current::@2
  [227] *((byte*) lock_current::playfield_line#0 + (byte) lock_current::col#2) ← (byte) current_piece_color#11
  to:lock_current::@3
lock_current::@3: scope:[lock_current]  from lock_current::@2 lock_current::@4
  [228] (byte) lock_current::col#1 ← ++ (byte) lock_current::col#2
  [229] (byte) lock_current::c#1 ← ++ (byte) lock_current::c#2
  [230] if((byte) lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto lock_current::@8
  to:lock_current::@5
lock_current::@5: scope:[lock_current]  from lock_current::@3
  [231] (byte) lock_current::ypos2#1 ← (byte) lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [232] (byte) lock_current::l#1 ← ++ (byte) lock_current::l#6
  [233] if((byte) lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto lock_current::@7
  to:lock_current::@return
lock_current::@return: scope:[lock_current]  from lock_current::@5
  [234] return 
  to:@return
lock_current::@7: scope:[lock_current]  from lock_current::@5
  [235] (byte~) lock_current::i#7 ← (byte) lock_current::i#1
  to:lock_current::@1
lock_current::@8: scope:[lock_current]  from lock_current::@3
  [236] (byte~) lock_current::i#9 ← (byte) lock_current::i#1
  to:lock_current::@2
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@10 keyboard_event_scan::@11 keyboard_event_scan::@20 keyboard_event_scan::@9 play_move_down::@1
  [237] (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@10/(const byte) KEY_CTRL#0 keyboard_event_scan::@11/(const byte) KEY_COMMODORE#0 keyboard_event_scan::@20/(const byte) KEY_LSHIFT#0 keyboard_event_scan::@9/(const byte) KEY_RSHIFT#0 play_move_down::@1/(const byte) KEY_SPACE#0 )
  [238] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  [239] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  [240] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [241] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [242] return 
  to:@return
keyboard_event_get: scope:[keyboard_event_get]  from main::@27
  [243] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@3
keyboard_event_get::@3: scope:[keyboard_event_get]  from keyboard_event_get
  [244] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13
  [245] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@3
  [246] (byte) keyboard_events_size#16 ← phi( keyboard_event_get/(byte) keyboard_events_size#13 keyboard_event_get::@3/(byte) keyboard_events_size#4 )
  [246] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte/word/signed word/dword/signed dword) 255 keyboard_event_get::@3/(byte) keyboard_event_get::return#1 )
  [247] return 
  to:@return
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@9
  [248] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@3
  [249] (byte) keyboard_events_size#29 ← phi( keyboard_event_scan/(byte) keyboard_events_size#19 keyboard_event_scan::@3/(byte) keyboard_events_size#13 )
  [249] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@3/(byte) keyboard_event_scan::keycode#14 )
  [249] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@3/(byte) keyboard_event_scan::row#1 )
  [250] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [251] call keyboard_matrix_read 
  [252] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@25
keyboard_event_scan::@25: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [253] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [254] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  [255] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@13 keyboard_event_scan::@19
  [256] (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@13/(byte) keyboard_events_size#29 keyboard_event_scan::@19/(byte) keyboard_events_size#30 )
  [256] (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#1 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#15 )
  [257] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [258] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [259] phi()
  [260] call keyboard_event_pressed 
  [261] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@26
keyboard_event_scan::@26: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [262] (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#0
  [263] if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@26
  [264] phi()
  to:keyboard_event_scan::@9
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@26
  [265] phi()
  [266] call keyboard_event_pressed 
  [267] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@27
keyboard_event_scan::@27: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [268] (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#1
  [269] if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@27
  [270] phi()
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@27
  [271] phi()
  [272] call keyboard_event_pressed 
  [273] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@28
keyboard_event_scan::@28: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [274] (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#2
  [275] if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@28
  [276] phi()
  to:keyboard_event_scan::@11
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@28
  [277] phi()
  [278] call keyboard_event_pressed 
  [279] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@29
keyboard_event_scan::@29: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  [280] (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10
  [281] if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@24
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  [282] phi()
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@24 keyboard_event_scan::@29
  [283] return 
  to:@return
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@25 keyboard_event_scan::@5
  [284] (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#29 keyboard_event_scan::@5/(byte) keyboard_events_size#30 )
  [284] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#11 keyboard_event_scan::@5/(byte) keyboard_event_scan::keycode#15 )
  [284] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@25/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@5/(byte) keyboard_event_scan::col#1 )
  [285] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)
  [286] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [287] if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@4
  [288] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@5
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@15
  [289] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [290] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  [291] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10
  [292] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@7
  [293] (byte) keyboard_events_size#30 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#2 keyboard_event_scan::@4/(byte) keyboard_events_size#10 keyboard_event_scan::@15/(byte) keyboard_events_size#10 keyboard_event_scan::@7/(byte) keyboard_events_size#1 )
  [294] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10
  [295] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [296] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@5
  [297] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@3
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  [298] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64
  [299] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$11
  [300] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@5
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@1
  [301] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0)
  [302] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [303] return 
  to:@return
tables_init: scope:[tables_init]  from main::@22
  [304] phi()
  to:tables_init::@1
tables_init::@1: scope:[tables_init]  from tables_init tables_init::@1
  [305] (byte) tables_init::idx#2 ← phi( tables_init/(byte/signed byte/word/signed word/dword/signed dword) 0 tables_init::@1/(byte) tables_init::idx#1 )
  [305] (byte*) tables_init::pli#2 ← phi( tables_init/(const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 tables_init::@1/(byte*) tables_init::pli#1 )
  [305] (byte) tables_init::j#2 ← phi( tables_init/(byte/signed byte/word/signed word/dword/signed dword) 0 tables_init::@1/(byte) tables_init::j#1 )
  [306] (byte~) tables_init::$1 ← (byte) tables_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [307] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) tables_init::$1) ← (byte*) tables_init::pli#2
  [308] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) tables_init::j#2) ← (byte) tables_init::idx#2
  [309] (byte*) tables_init::pli#1 ← (byte*) tables_init::pli#2 + (const byte) PLAYFIELD_COLS#0
  [310] (byte) tables_init::idx#1 ← (byte) tables_init::idx#2 + (const byte) PLAYFIELD_COLS#0
  [311] (byte) tables_init::j#1 ← ++ (byte) tables_init::j#2
  [312] if((byte) tables_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto tables_init::@1
  to:tables_init::@2
tables_init::@2: scope:[tables_init]  from tables_init::@1
  [313] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0
  to:tables_init::@return
tables_init::@return: scope:[tables_init]  from tables_init::@2
  [314] return 
  to:@return
render_init: scope:[render_init]  from main::@21
  [315] phi()
  [316] call fill 
  to:render_init::@7
render_init::@7: scope:[render_init]  from render_init
  [317] phi()
  [318] call fill 
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@1 render_init::@7
  [319] (byte*) render_init::li#2 ← phi( render_init::@1/(byte*) render_init::li#1 render_init::@7/(const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15 )
  [319] (byte) render_init::i#2 ← phi( render_init::@1/(byte) render_init::i#1 render_init::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [320] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [321] *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_init::$5) ← (byte*) render_init::li#2
  [322] (byte*) render_init::li#1 ← (byte*) render_init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [323] (byte) render_init::i#1 ← ++ (byte) render_init::i#2
  [324] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::@1 render_init::@5
  [325] (byte) render_init::l#4 ← phi( render_init::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_init::@5/(byte) render_init::l#1 )
  [325] (byte*) render_init::line#4 ← phi( render_init::@1/(const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14 render_init::@5/(byte*) render_init::line#1 )
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::@2 render_init::@3
  [326] (byte) render_init::c#2 ← phi( render_init::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 render_init::@3/(byte) render_init::c#1 )
  [327] (byte*~) render_init::$10 ← (byte*) render_init::line#4 + (byte) render_init::c#2
  [328] *((byte*~) render_init::$10) ← (const byte) DARK_GREY#0
  [329] (byte) render_init::c#1 ← ++ (byte) render_init::c#2
  [330] if((byte) render_init::c#1!=(const byte) PLAYFIELD_COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@3
  to:render_init::@5
render_init::@5: scope:[render_init]  from render_init::@3
  [331] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [332] (byte) render_init::l#1 ← ++ (byte) render_init::l#4
  [333] if((byte) render_init::l#1!=(const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@2
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@5
  [334] return 
  to:@return
fill: scope:[fill]  from render_init render_init::@7
  [335] (byte) fill::val#3 ← phi( render_init/(byte/word/signed word/dword/signed dword) 160 render_init::@7/(const byte) BLACK#0 )
  [335] (byte*) fill::addr#0 ← phi( render_init/(const byte*) SCREEN#0 render_init::@7/(const byte*) COLS#0 )
  [336] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  [337] (byte*) fill::addr#2 ← phi( fill/(byte*) fill::addr#0 fill::@1/(byte*) fill::addr#1 )
  [338] *((byte*) fill::addr#2) ← (byte) fill::val#3
  [339] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  [340] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  [341] return 
  to:@return
sid_rnd_init: scope:[sid_rnd_init]  from main
  [342] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535
  [343] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  [344] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) BLACK
(byte*) BORDERCOL
(byte*) CHARSET
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_B
(byte) COLLISION_BOTTOM
(byte) COLLISION_LEFT
(byte) COLLISION_NONE
(byte) COLLISION_PLAYFIELD
(byte) COLLISION_RIGHT
(byte*) COLS
(byte) DARK_GREY
(byte) GREEN
(byte) KEY_COMMA
(byte) KEY_COMMODORE
(byte) KEY_CTRL
(byte) KEY_DOT
(byte) KEY_LSHIFT
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_RSHIFT
(byte) KEY_SPACE
(byte) KEY_X
(byte) KEY_Z
(byte) LIGHT_GREY
(word[]) PIECES
(byte[]) PIECES_COLORS
(byte[4*4*4]) PIECE_I
(byte[4*4*4]) PIECE_J
(byte[4*4*4]) PIECE_L
(byte[4*4*4]) PIECE_O
(byte[4*4*4]) PIECE_S
(byte[4*4*4]) PIECE_T
(byte[4*4*4]) PIECE_Z
(byte) PLAYFIELD_COLS
(byte) PLAYFIELD_LINES
(byte*) RASTER
(byte*) SCREEN
(byte) SID_CONTROL_NOISE
(byte*) SID_VOICE3_CONTROL
(word*) SID_VOICE3_FREQ
(byte*) SID_VOICE3_OSC
(byte) WHITE
(byte()) collision((byte) collision::xpos , (byte) collision::ypos , (byte) collision::orientation)
(byte~) collision::$7 2002.0
(byte) collision::c
(byte) collision::c#1 1001.0
(byte) collision::c#2 222.44444444444446
(byte) collision::col
(byte) collision::col#1 500.5
(byte) collision::col#2 638.25
(byte~) collision::col#9 202.0
(byte) collision::i
(byte) collision::i#1 161.76923076923077
(byte~) collision::i#11 202.0
(byte~) collision::i#13 2002.0
(byte) collision::i#2 1552.0
(byte) collision::i#3 67.33333333333333
(byte) collision::l
(byte) collision::l#1 101.0
(byte) collision::l#6 12.625
(byte) collision::orientation
(byte) collision::orientation#0 2.0
(byte) collision::orientation#1 2.0
(byte) collision::orientation#2 2.0
(byte) collision::orientation#3 2.0
(byte) collision::orientation#4 10.0
(byte*) collision::piece_gfx
(byte*) collision::piece_gfx#0 47.76190476190476
(byte*) collision::playfield_line
(byte*) collision::playfield_line#0 78.71428571428571
(byte) collision::return
(byte) collision::return#0 4.0
(byte) collision::return#1 4.0
(byte) collision::return#12 4.0
(byte) collision::return#13 4.0
(byte) collision::return#14 1.3333333333333333
(byte) collision::xpos
(byte) collision::xpos#0 1.3333333333333333
(byte) collision::xpos#1 1.0
(byte) collision::xpos#2 1.0
(byte) collision::xpos#3 1.0
(byte) collision::xpos#5 4.954545454545454
(byte) collision::ypos
(byte) collision::ypos#0 1.0
(byte) collision::ypos#1 1.3333333333333333
(byte) collision::ypos#2 1.3333333333333333
(byte) collision::ypos#3 1.3333333333333333
(byte) collision::ypos#4 5.0
(byte) collision::ypos2
(byte) collision::ypos2#0 4.0
(byte) collision::ypos2#1 50.5
(byte) collision::ypos2#2 87.06666666666668
(byte) current_movedown_counter
(byte) current_movedown_counter#10 0.5333333333333333
(byte) current_movedown_counter#12 0.52
(byte) current_movedown_counter#15 1.3
(byte) current_movedown_fast
(byte) current_movedown_slow
(byte) current_orientation
(byte) current_orientation#15 0.5
(byte) current_orientation#18 0.32653061224489793
(byte) current_orientation#23 1.1333333333333333
(byte) current_orientation#33 4.0
(byte) current_orientation#8 3.0
(byte*) current_piece
(byte*) current_piece#11 0.5588235294117647
(byte*) current_piece#13 0.3484848484848484
(byte*) current_piece#15 10.0
(byte*) current_piece#23 6.0
(byte*~) current_piece#71 4.0
(byte*~) current_piece#72 4.0
(byte*~) current_piece#73 4.0
(byte*~) current_piece#74 4.0
(byte*~) current_piece#75 4.0
(byte*~) current_piece#76 4.0
(byte) current_piece_color
(byte) current_piece_color#11 19.96078431372549
(byte) current_piece_color#13 1.04
(byte) current_piece_color#15 0.7272727272727273
(byte) current_piece_color#23 6.0
(byte) current_piece_color#67 53.368421052631575
(byte~) current_piece_color#75 4.0
(byte~) current_piece_color#76 22.0
(byte*) current_piece_gfx
(byte*) current_piece_gfx#10 0.6666666666666666
(byte*) current_piece_gfx#15 19.96078431372549
(byte*) current_piece_gfx#17 0.2962962962962963
(byte*) current_piece_gfx#18 1.8666666666666665
(byte*) current_piece_gfx#29 6.0
(byte*) current_piece_gfx#64 53.368421052631575
(byte*) current_piece_gfx#8 4.0
(byte*~) current_piece_gfx#87 2.0
(byte*~) current_piece_gfx#88 11.0
(byte) current_xpos
(byte) current_xpos#16 2.313725490196078
(byte) current_xpos#19 0.72
(byte) current_xpos#23 0.871794871794872
(byte) current_xpos#36 4.0
(byte) current_xpos#63 5.894736842105264
(byte) current_xpos#7 4.0
(byte) current_xpos#9 4.0
(byte~) current_xpos#96 7.333333333333333
(byte) current_ypos
(byte) current_ypos#12 0.5588235294117647
(byte) current_ypos#16 0.48484848484848475
(byte) current_ypos#22 13.0
(byte) current_ypos#31 4.0
(byte) current_ypos#4 4.0
(byte~) current_ypos#71 5.5
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(byte*) fill::addr
(byte*) fill::addr#0 2.0
(byte*) fill::addr#1 16.5
(byte*) fill::addr#2 17.5
(byte*) fill::end
(byte*) fill::end#0 2.6
(word) fill::size
(byte*) fill::start
(byte) fill::val
(byte) fill::val#3 1.8333333333333333
(byte()) keyboard_event_get()
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 4.0
(byte) keyboard_event_get::return#2 4.333333333333333
(byte) keyboard_event_get::return#3 22.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 4.0
(byte~) keyboard_event_pressed::$1 4.0
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#5 1.3333333333333333
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 4.0
(byte) keyboard_event_pressed::return#1 4.0
(byte) keyboard_event_pressed::return#10 4.0
(byte) keyboard_event_pressed::return#11 1.714285714285714
(byte) keyboard_event_pressed::return#12 4.0
(byte) keyboard_event_pressed::return#2 4.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 2.0
(void()) keyboard_event_scan()
(byte/word/dword~) keyboard_event_scan::$11 2002.0
(byte~) keyboard_event_scan::$14 4.0
(byte~) keyboard_event_scan::$18 4.0
(byte~) keyboard_event_scan::$22 4.0
(byte~) keyboard_event_scan::$26 4.0
(byte~) keyboard_event_scan::$3 2002.0
(byte~) keyboard_event_scan::$4 2002.0
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 1501.5
(byte) keyboard_event_scan::col#2 286.0
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 2002.0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 202.0
(byte) keyboard_event_scan::keycode#10 315.7692307692308
(byte) keyboard_event_scan::keycode#11 50.5
(byte) keyboard_event_scan::keycode#14 101.0
(byte) keyboard_event_scan::keycode#15 525.75
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 151.5
(byte) keyboard_event_scan::row#2 60.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 128.05555555555557
(byte[8]) keyboard_events
(byte) keyboard_events_size
(byte) keyboard_events_size#1 2002.0
(byte) keyboard_events_size#10 810.9000000000001
(byte) keyboard_events_size#13 9.967741935483872
(byte) keyboard_events_size#16 0.5172413793103449
(byte) keyboard_events_size#19 2.6
(byte) keyboard_events_size#2 2002.0
(byte) keyboard_events_size#29 43.57142857142858
(byte) keyboard_events_size#30 1021.2
(byte) keyboard_events_size#4 3.0
(byte[8]) keyboard_matrix_col_bitmask
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 34.33333333333333
(byte) keyboard_matrix_read::return#2 202.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 103.0
(byte[8]) keyboard_matrix_row_bitmask
(byte) keyboard_modifiers
(byte[8]) keyboard_scan_values
(void()) lock_current()
(byte) lock_current::c
(byte) lock_current::c#1 1001.0
(byte) lock_current::c#2 400.4
(byte) lock_current::col
(byte) lock_current::col#0 202.0
(byte) lock_current::col#1 500.5
(byte) lock_current::col#2 776.0
(byte) lock_current::i
(byte) lock_current::i#1 233.66666666666669
(byte) lock_current::i#2 1552.0
(byte) lock_current::i#3 67.33333333333333
(byte~) lock_current::i#7 202.0
(byte~) lock_current::i#9 2002.0
(byte) lock_current::l
(byte) lock_current::l#1 101.0
(byte) lock_current::l#6 16.833333333333332
(byte*) lock_current::playfield_line
(byte*) lock_current::playfield_line#0 110.19999999999999
(byte) lock_current::ypos2
(byte) lock_current::ypos2#0 4.0
(byte) lock_current::ypos2#1 50.5
(byte) lock_current::ypos2#2 27.727272727272727
(void()) main()
(byte~) main::$10 22.0
(byte~) main::$11 22.0
(byte~) main::$12 22.0
(byte) main::key_event
(byte) main::key_event#0 4.0
(byte) main::render
(byte) main::render#1 4.4
(byte) main::render#2 4.4
(byte) main::render#3 22.0
(byte()) play_move_down((byte) play_move_down::key_event)
(byte~) play_move_down::$12 4.0
(byte~) play_move_down::$2 4.0
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0 6.5
(byte) play_move_down::movedown
(byte) play_move_down::movedown#10 1.0
(byte) play_move_down::movedown#2 4.0
(byte) play_move_down::movedown#3 4.0
(byte) play_move_down::movedown#6 6.0
(byte) play_move_down::movedown#7 5.0
(byte) play_move_down::return
(byte) play_move_down::return#0 22.0
(byte) play_move_down::return#3 3.6666666666666665
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(byte~) play_move_leftright::$4 4.0
(byte~) play_move_leftright::$8 4.0
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0 7.5
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0 22.0
(byte) play_move_leftright::return#2 3.6666666666666665
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(byte/signed word/word/dword/signed dword~) play_move_rotate::$2 4.0
(byte/signed word/word/dword/signed dword~) play_move_rotate::$4 4.0
(byte~) play_move_rotate::$6 4.0
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0 7.5
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#1 4.0
(byte) play_move_rotate::orientation#2 4.0
(byte) play_move_rotate::orientation#3 0.8888888888888888
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0 22.0
(byte) play_move_rotate::return#2 3.6666666666666665
(byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield
(byte*[PLAYFIELD_LINES#0]) playfield_lines
(byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx
(void()) remove_lines()
(byte) remove_lines::c
(byte) remove_lines::c#0 600.5999999999999
(byte) remove_lines::full
(byte) remove_lines::full#2 420.59999999999997
(byte) remove_lines::full#4 400.4
(byte) remove_lines::r
(byte) remove_lines::r#1 161.76923076923077
(byte) remove_lines::r#2 1552.0
(byte) remove_lines::r#3 202.0
(byte) remove_lines::w
(byte) remove_lines::w#1 551.0
(byte) remove_lines::w#11 134.66666666666666
(byte) remove_lines::w#12 202.0
(byte) remove_lines::w#2 202.0
(byte) remove_lines::w#3 202.0
(byte) remove_lines::w#4 443.42857142857144
(byte) remove_lines::w#6 168.33333333333331
(byte) remove_lines::x
(byte) remove_lines::x#1 1501.5
(byte) remove_lines::x#2 250.25
(byte) remove_lines::y
(byte) remove_lines::y#1 151.5
(byte) remove_lines::y#8 14.428571428571429
(void()) render_current()
(byte) render_current::c
(byte) render_current::c#1 1501.5
(byte) render_current::c#2 286.0
(byte) render_current::current_cell
(byte) render_current::current_cell#0 1001.0
(byte) render_current::i
(byte) render_current::i#1 429.0
(byte) render_current::i#2 1552.0
(byte) render_current::i#4 75.75
(byte) render_current::i#8 300.75
(byte) render_current::l
(byte) render_current::l#1 151.5
(byte) render_current::l#3 13.466666666666667
(byte*) render_current::screen_line
(byte*) render_current::screen_line#0 100.18181818181819
(byte) render_current::xpos
(byte) render_current::xpos#0 202.0
(byte) render_current::xpos#1 667.3333333333334
(byte) render_current::xpos#2 684.1666666666667
(byte) render_current::ypos2
(byte) render_current::ypos2#0 4.0
(byte) render_current::ypos2#1 67.33333333333333
(byte) render_current::ypos2#2 29.000000000000004
(void()) render_init()
(byte*~) render_init::$10 202.0
(byte~) render_init::$5 22.0
(byte) render_init::c
(byte) render_init::c#1 151.5
(byte) render_init::c#2 101.0
(byte) render_init::i
(byte) render_init::i#1 16.5
(byte) render_init::i#2 8.25
(byte) render_init::l
(byte) render_init::l#1 16.5
(byte) render_init::l#4 3.142857142857143
(byte*) render_init::li
(byte*) render_init::li#1 7.333333333333333
(byte*) render_init::li#2 11.0
(byte*) render_init::line
(byte*) render_init::line#1 7.333333333333333
(byte*) render_init::line#4 20.499999999999996
(void()) render_playfield()
(byte~) render_playfield::$1 202.0
(byte) render_playfield::c
(byte) render_playfield::c#1 1501.5
(byte) render_playfield::c#2 500.5
(byte) render_playfield::i
(byte) render_playfield::i#1 420.59999999999997
(byte) render_playfield::i#2 1034.6666666666667
(byte) render_playfield::i#3 67.33333333333333
(byte) render_playfield::l
(byte) render_playfield::l#1 151.5
(byte) render_playfield::l#2 33.666666666666664
(byte*) render_playfield::line
(byte*) render_playfield::line#0 202.0
(byte*) render_playfield::line#1 500.5
(byte*) render_playfield::line#2 1552.0
(byte*[PLAYFIELD_LINES#0+3]) screen_lines
(byte()) sid_rnd()
(byte) sid_rnd::return
(byte) sid_rnd::return#0 34.33333333333333
(byte) sid_rnd::return#2 202.0
(void()) sid_rnd_init()
(void()) spawn_current()
(byte~) spawn_current::$1 202.0
(byte~) spawn_current::$3 0.18181818181818182
(byte) spawn_current::piece_idx
(byte) spawn_current::piece_idx#1 202.0
(byte) spawn_current::piece_idx#2 51.5
(void()) tables_init()
(byte~) tables_init::$1 22.0
(byte) tables_init::idx
(byte) tables_init::idx#1 7.333333333333333
(byte) tables_init::idx#2 6.6000000000000005
(byte) tables_init::j
(byte) tables_init::j#1 16.5
(byte) tables_init::j#2 7.333333333333333
(byte*) tables_init::pli
(byte*) tables_init::pli#1 5.5
(byte*) tables_init::pli#2 8.25

Initial phi equivalence classes
[ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ]
[ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ]
[ current_ypos#22 current_ypos#71 ]
[ current_xpos#63 current_xpos#96 ]
[ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 ]
[ current_piece_color#67 current_piece_color#75 current_piece_color#76 ]
[ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ]
[ render_current::l#3 render_current::l#1 ]
[ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 ]
[ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 ]
[ render_current::c#2 render_current::c#1 ]
[ render_playfield::l#2 render_playfield::l#1 ]
[ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
[ render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 ]
[ render_playfield::c#2 render_playfield::c#1 ]
[ play_move_rotate::return#2 ]
[ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
[ current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 ]
[ collision::orientation#4 collision::orientation#0 collision::orientation#1 collision::orientation#2 collision::orientation#3 ]
[ collision::ypos#4 collision::ypos#0 collision::ypos#1 collision::ypos#2 collision::ypos#3 ]
[ collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ]
[ collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ]
[ collision::l#6 collision::l#1 ]
[ collision::i#2 collision::i#3 collision::i#11 collision::i#13 ]
[ collision::col#2 collision::col#9 collision::col#1 ]
[ collision::c#2 collision::c#1 ]
[ collision::return#14 ]
[ play_move_leftright::return#2 ]
[ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
[ current_piece#23 current_piece#76 current_piece#11 current_piece#13 current_piece#71 ]
[ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ]
[ current_piece_gfx#29 current_piece_gfx#15 current_piece_gfx#18 current_piece_gfx#10 current_piece_gfx#8 current_piece_gfx#17 ]
[ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ]
[ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ]
[ play_move_down::return#3 ]
[ spawn_current::piece_idx#2 spawn_current::piece_idx#1 ]
[ remove_lines::y#8 remove_lines::y#1 ]
[ remove_lines::r#2 remove_lines::r#3 remove_lines::r#1 ]
[ remove_lines::x#2 remove_lines::x#1 ]
[ remove_lines::full#4 remove_lines::full#2 ]
[ remove_lines::w#6 remove_lines::w#4 remove_lines::w#12 remove_lines::w#11 remove_lines::w#1 remove_lines::w#2 remove_lines::w#3 ]
[ lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ]
[ lock_current::l#6 lock_current::l#1 ]
[ lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ]
[ lock_current::col#2 lock_current::col#0 lock_current::col#1 ]
[ lock_current::c#2 lock_current::c#1 ]
[ keyboard_event_pressed::keycode#5 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ]
[ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
[ tables_init::j#2 tables_init::j#1 ]
[ tables_init::pli#2 tables_init::pli#1 ]
[ tables_init::idx#2 tables_init::idx#1 ]
[ render_init::i#2 render_init::i#1 ]
[ render_init::li#2 render_init::li#1 ]
[ render_init::line#4 render_init::line#1 ]
[ render_init::l#4 render_init::l#1 ]
[ render_init::c#2 render_init::c#1 ]
[ fill::val#3 ]
[ fill::addr#2 fill::addr#0 fill::addr#1 ]
Added variable keyboard_event_get::return#3 to zero page equivalence class [ keyboard_event_get::return#3 ]
Added variable main::key_event#0 to zero page equivalence class [ main::key_event#0 ]
Added variable play_move_down::key_event#0 to zero page equivalence class [ play_move_down::key_event#0 ]
Added variable play_move_down::return#0 to zero page equivalence class [ play_move_down::return#0 ]
Added variable main::$10 to zero page equivalence class [ main::$10 ]
Added variable main::render#1 to zero page equivalence class [ main::render#1 ]
Added variable play_move_leftright::key_event#0 to zero page equivalence class [ play_move_leftright::key_event#0 ]
Added variable play_move_leftright::return#0 to zero page equivalence class [ play_move_leftright::return#0 ]
Added variable main::$11 to zero page equivalence class [ main::$11 ]
Added variable main::render#2 to zero page equivalence class [ main::render#2 ]
Added variable play_move_rotate::key_event#0 to zero page equivalence class [ play_move_rotate::key_event#0 ]
Added variable play_move_rotate::return#0 to zero page equivalence class [ play_move_rotate::return#0 ]
Added variable main::$12 to zero page equivalence class [ main::$12 ]
Added variable main::render#3 to zero page equivalence class [ main::render#3 ]
Added variable render_current::screen_line#0 to zero page equivalence class [ render_current::screen_line#0 ]
Added variable render_current::current_cell#0 to zero page equivalence class [ render_current::current_cell#0 ]
Added variable render_playfield::$1 to zero page equivalence class [ render_playfield::$1 ]
Added variable play_move_rotate::$2 to zero page equivalence class [ play_move_rotate::$2 ]
Added variable collision::return#13 to zero page equivalence class [ collision::return#13 ]
Added variable play_move_rotate::$6 to zero page equivalence class [ play_move_rotate::$6 ]
Added variable play_move_rotate::$4 to zero page equivalence class [ play_move_rotate::$4 ]
Added variable collision::piece_gfx#0 to zero page equivalence class [ collision::piece_gfx#0 ]
Added variable collision::playfield_line#0 to zero page equivalence class [ collision::playfield_line#0 ]
Added variable collision::i#1 to zero page equivalence class [ collision::i#1 ]
Added variable collision::$7 to zero page equivalence class [ collision::$7 ]
Added variable collision::return#12 to zero page equivalence class [ collision::return#12 ]
Added variable play_move_leftright::$4 to zero page equivalence class [ play_move_leftright::$4 ]
Added variable collision::return#1 to zero page equivalence class [ collision::return#1 ]
Added variable play_move_leftright::$8 to zero page equivalence class [ play_move_leftright::$8 ]
Added variable keyboard_event_pressed::return#12 to zero page equivalence class [ keyboard_event_pressed::return#12 ]
Added variable play_move_down::$2 to zero page equivalence class [ play_move_down::$2 ]
Added variable collision::return#0 to zero page equivalence class [ collision::return#0 ]
Added variable play_move_down::$12 to zero page equivalence class [ play_move_down::$12 ]
Added variable spawn_current::$3 to zero page equivalence class [ spawn_current::$3 ]
Added variable sid_rnd::return#2 to zero page equivalence class [ sid_rnd::return#2 ]
Added variable spawn_current::$1 to zero page equivalence class [ spawn_current::$1 ]
Added variable sid_rnd::return#0 to zero page equivalence class [ sid_rnd::return#0 ]
Added variable remove_lines::c#0 to zero page equivalence class [ remove_lines::c#0 ]
Added variable lock_current::playfield_line#0 to zero page equivalence class [ lock_current::playfield_line#0 ]
Added variable lock_current::i#1 to zero page equivalence class [ lock_current::i#1 ]
Added variable keyboard_event_pressed::$0 to zero page equivalence class [ keyboard_event_pressed::$0 ]
Added variable keyboard_event_pressed::row_bits#0 to zero page equivalence class [ keyboard_event_pressed::row_bits#0 ]
Added variable keyboard_event_pressed::$1 to zero page equivalence class [ keyboard_event_pressed::$1 ]
Added variable keyboard_event_pressed::return#11 to zero page equivalence class [ keyboard_event_pressed::return#11 ]
Added variable keyboard_matrix_read::rowid#0 to zero page equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to zero page equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_event_scan::row_scan#0 to zero page equivalence class [ keyboard_event_scan::row_scan#0 ]
Added variable keyboard_event_pressed::return#0 to zero page equivalence class [ keyboard_event_pressed::return#0 ]
Added variable keyboard_event_scan::$14 to zero page equivalence class [ keyboard_event_scan::$14 ]
Added variable keyboard_event_pressed::return#1 to zero page equivalence class [ keyboard_event_pressed::return#1 ]
Added variable keyboard_event_scan::$18 to zero page equivalence class [ keyboard_event_scan::$18 ]
Added variable keyboard_event_pressed::return#2 to zero page equivalence class [ keyboard_event_pressed::return#2 ]
Added variable keyboard_event_scan::$22 to zero page equivalence class [ keyboard_event_scan::$22 ]
Added variable keyboard_event_pressed::return#10 to zero page equivalence class [ keyboard_event_pressed::return#10 ]
Added variable keyboard_event_scan::$26 to zero page equivalence class [ keyboard_event_scan::$26 ]
Added variable keyboard_event_scan::$3 to zero page equivalence class [ keyboard_event_scan::$3 ]
Added variable keyboard_event_scan::$4 to zero page equivalence class [ keyboard_event_scan::$4 ]
Added variable keyboard_event_scan::event_type#0 to zero page equivalence class [ keyboard_event_scan::event_type#0 ]
Added variable keyboard_event_scan::$11 to zero page equivalence class [ keyboard_event_scan::$11 ]
Added variable keyboard_matrix_read::return#0 to zero page equivalence class [ keyboard_matrix_read::return#0 ]
Added variable tables_init::$1 to zero page equivalence class [ tables_init::$1 ]
Added variable render_init::$5 to zero page equivalence class [ render_init::$5 ]
Added variable render_init::$10 to zero page equivalence class [ render_init::$10 ]
Added variable fill::end#0 to zero page equivalence class [ fill::end#0 ]
Complete equivalence classes
[ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ]
[ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ]
[ current_ypos#22 current_ypos#71 ]
[ current_xpos#63 current_xpos#96 ]
[ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 ]
[ current_piece_color#67 current_piece_color#75 current_piece_color#76 ]
[ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ]
[ render_current::l#3 render_current::l#1 ]
[ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 ]
[ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 ]
[ render_current::c#2 render_current::c#1 ]
[ render_playfield::l#2 render_playfield::l#1 ]
[ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
[ render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 ]
[ render_playfield::c#2 render_playfield::c#1 ]
[ play_move_rotate::return#2 ]
[ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
[ current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 ]
[ collision::orientation#4 collision::orientation#0 collision::orientation#1 collision::orientation#2 collision::orientation#3 ]
[ collision::ypos#4 collision::ypos#0 collision::ypos#1 collision::ypos#2 collision::ypos#3 ]
[ collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ]
[ collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ]
[ collision::l#6 collision::l#1 ]
[ collision::i#2 collision::i#3 collision::i#11 collision::i#13 ]
[ collision::col#2 collision::col#9 collision::col#1 ]
[ collision::c#2 collision::c#1 ]
[ collision::return#14 ]
[ play_move_leftright::return#2 ]
[ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
[ current_piece#23 current_piece#76 current_piece#11 current_piece#13 current_piece#71 ]
[ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ]
[ current_piece_gfx#29 current_piece_gfx#15 current_piece_gfx#18 current_piece_gfx#10 current_piece_gfx#8 current_piece_gfx#17 ]
[ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ]
[ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ]
[ play_move_down::return#3 ]
[ spawn_current::piece_idx#2 spawn_current::piece_idx#1 ]
[ remove_lines::y#8 remove_lines::y#1 ]
[ remove_lines::r#2 remove_lines::r#3 remove_lines::r#1 ]
[ remove_lines::x#2 remove_lines::x#1 ]
[ remove_lines::full#4 remove_lines::full#2 ]
[ remove_lines::w#6 remove_lines::w#4 remove_lines::w#12 remove_lines::w#11 remove_lines::w#1 remove_lines::w#2 remove_lines::w#3 ]
[ lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ]
[ lock_current::l#6 lock_current::l#1 ]
[ lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ]
[ lock_current::col#2 lock_current::col#0 lock_current::col#1 ]
[ lock_current::c#2 lock_current::c#1 ]
[ keyboard_event_pressed::keycode#5 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ]
[ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
[ tables_init::j#2 tables_init::j#1 ]
[ tables_init::pli#2 tables_init::pli#1 ]
[ tables_init::idx#2 tables_init::idx#1 ]
[ render_init::i#2 render_init::i#1 ]
[ render_init::li#2 render_init::li#1 ]
[ render_init::line#4 render_init::line#1 ]
[ render_init::l#4 render_init::l#1 ]
[ render_init::c#2 render_init::c#1 ]
[ fill::val#3 ]
[ fill::addr#2 fill::addr#0 fill::addr#1 ]
[ keyboard_event_get::return#3 ]
[ main::key_event#0 ]
[ play_move_down::key_event#0 ]
[ play_move_down::return#0 ]
[ main::$10 ]
[ main::render#1 ]
[ play_move_leftright::key_event#0 ]
[ play_move_leftright::return#0 ]
[ main::$11 ]
[ main::render#2 ]
[ play_move_rotate::key_event#0 ]
[ play_move_rotate::return#0 ]
[ main::$12 ]
[ main::render#3 ]
[ render_current::screen_line#0 ]
[ render_current::current_cell#0 ]
[ render_playfield::$1 ]
[ play_move_rotate::$2 ]
[ collision::return#13 ]
[ play_move_rotate::$6 ]
[ play_move_rotate::$4 ]
[ collision::piece_gfx#0 ]
[ collision::playfield_line#0 ]
[ collision::i#1 ]
[ collision::$7 ]
[ collision::return#12 ]
[ play_move_leftright::$4 ]
[ collision::return#1 ]
[ play_move_leftright::$8 ]
[ keyboard_event_pressed::return#12 ]
[ play_move_down::$2 ]
[ collision::return#0 ]
[ play_move_down::$12 ]
[ spawn_current::$3 ]
[ sid_rnd::return#2 ]
[ spawn_current::$1 ]
[ sid_rnd::return#0 ]
[ remove_lines::c#0 ]
[ lock_current::playfield_line#0 ]
[ lock_current::i#1 ]
[ keyboard_event_pressed::$0 ]
[ keyboard_event_pressed::row_bits#0 ]
[ keyboard_event_pressed::$1 ]
[ keyboard_event_pressed::return#11 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_event_scan::row_scan#0 ]
[ keyboard_event_pressed::return#0 ]
[ keyboard_event_scan::$14 ]
[ keyboard_event_pressed::return#1 ]
[ keyboard_event_scan::$18 ]
[ keyboard_event_pressed::return#2 ]
[ keyboard_event_scan::$22 ]
[ keyboard_event_pressed::return#10 ]
[ keyboard_event_scan::$26 ]
[ keyboard_event_scan::$3 ]
[ keyboard_event_scan::$4 ]
[ keyboard_event_scan::event_type#0 ]
[ keyboard_event_scan::$11 ]
[ keyboard_matrix_read::return#0 ]
[ tables_init::$1 ]
[ render_init::$5 ]
[ render_init::$10 ]
[ fill::end#0 ]
Allocated zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ]
Allocated zp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ]
Allocated zp ZP_BYTE:4 [ current_ypos#22 current_ypos#71 ]
Allocated zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 ]
Allocated zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 ]
Allocated zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 ]
Allocated zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ]
Allocated zp ZP_BYTE:10 [ render_current::l#3 render_current::l#1 ]
Allocated zp ZP_BYTE:11 [ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 ]
Allocated zp ZP_BYTE:12 [ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 ]
Allocated zp ZP_BYTE:13 [ render_current::c#2 render_current::c#1 ]
Allocated zp ZP_BYTE:14 [ render_playfield::l#2 render_playfield::l#1 ]
Allocated zp ZP_BYTE:15 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Allocated zp ZP_WORD:16 [ render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 ]
Allocated zp ZP_BYTE:18 [ render_playfield::c#2 render_playfield::c#1 ]
Allocated zp ZP_BYTE:19 [ play_move_rotate::return#2 ]
Allocated zp ZP_BYTE:20 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Allocated zp ZP_WORD:21 [ current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 ]
Allocated zp ZP_BYTE:23 [ collision::orientation#4 collision::orientation#0 collision::orientation#1 collision::orientation#2 collision::orientation#3 ]
Allocated zp ZP_BYTE:24 [ collision::ypos#4 collision::ypos#0 collision::ypos#1 collision::ypos#2 collision::ypos#3 ]
Allocated zp ZP_BYTE:25 [ collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ]
Allocated zp ZP_BYTE:26 [ collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ]
Allocated zp ZP_BYTE:27 [ collision::l#6 collision::l#1 ]
Allocated zp ZP_BYTE:28 [ collision::i#2 collision::i#3 collision::i#11 collision::i#13 ]
Allocated zp ZP_BYTE:29 [ collision::col#2 collision::col#9 collision::col#1 ]
Allocated zp ZP_BYTE:30 [ collision::c#2 collision::c#1 ]
Allocated zp ZP_BYTE:31 [ collision::return#14 ]
Allocated zp ZP_BYTE:32 [ play_move_leftright::return#2 ]
Allocated zp ZP_BYTE:33 [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
Allocated zp ZP_WORD:34 [ current_piece#23 current_piece#76 current_piece#11 current_piece#13 current_piece#71 ]
Allocated zp ZP_BYTE:36 [ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ]
Allocated zp ZP_WORD:37 [ current_piece_gfx#29 current_piece_gfx#15 current_piece_gfx#18 current_piece_gfx#10 current_piece_gfx#8 current_piece_gfx#17 ]
Allocated zp ZP_BYTE:39 [ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ]
Allocated zp ZP_BYTE:40 [ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ]
Allocated zp ZP_BYTE:41 [ play_move_down::return#3 ]
Allocated zp ZP_BYTE:42 [ spawn_current::piece_idx#2 spawn_current::piece_idx#1 ]
Allocated zp ZP_BYTE:43 [ remove_lines::y#8 remove_lines::y#1 ]
Allocated zp ZP_BYTE:44 [ remove_lines::r#2 remove_lines::r#3 remove_lines::r#1 ]
Allocated zp ZP_BYTE:45 [ remove_lines::x#2 remove_lines::x#1 ]
Allocated zp ZP_BYTE:46 [ remove_lines::full#4 remove_lines::full#2 ]
Allocated zp ZP_BYTE:47 [ remove_lines::w#6 remove_lines::w#4 remove_lines::w#12 remove_lines::w#11 remove_lines::w#1 remove_lines::w#2 remove_lines::w#3 ]
Allocated zp ZP_BYTE:48 [ lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ]
Allocated zp ZP_BYTE:49 [ lock_current::l#6 lock_current::l#1 ]
Allocated zp ZP_BYTE:50 [ lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ]
Allocated zp ZP_BYTE:51 [ lock_current::col#2 lock_current::col#0 lock_current::col#1 ]
Allocated zp ZP_BYTE:52 [ lock_current::c#2 lock_current::c#1 ]
Allocated zp ZP_BYTE:53 [ keyboard_event_pressed::keycode#5 ]
Allocated zp ZP_BYTE:54 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
Allocated zp ZP_BYTE:55 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated zp ZP_BYTE:56 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Allocated zp ZP_BYTE:57 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ]
Allocated zp ZP_BYTE:58 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
Allocated zp ZP_BYTE:59 [ tables_init::j#2 tables_init::j#1 ]
Allocated zp ZP_WORD:60 [ tables_init::pli#2 tables_init::pli#1 ]
Allocated zp ZP_BYTE:62 [ tables_init::idx#2 tables_init::idx#1 ]
Allocated zp ZP_BYTE:63 [ render_init::i#2 render_init::i#1 ]
Allocated zp ZP_WORD:64 [ render_init::li#2 render_init::li#1 ]
Allocated zp ZP_WORD:66 [ render_init::line#4 render_init::line#1 ]
Allocated zp ZP_BYTE:68 [ render_init::l#4 render_init::l#1 ]
Allocated zp ZP_BYTE:69 [ render_init::c#2 render_init::c#1 ]
Allocated zp ZP_BYTE:70 [ fill::val#3 ]
Allocated zp ZP_WORD:71 [ fill::addr#2 fill::addr#0 fill::addr#1 ]
Allocated zp ZP_BYTE:73 [ keyboard_event_get::return#3 ]
Allocated zp ZP_BYTE:74 [ main::key_event#0 ]
Allocated zp ZP_BYTE:75 [ play_move_down::key_event#0 ]
Allocated zp ZP_BYTE:76 [ play_move_down::return#0 ]
Allocated zp ZP_BYTE:77 [ main::$10 ]
Allocated zp ZP_BYTE:78 [ main::render#1 ]
Allocated zp ZP_BYTE:79 [ play_move_leftright::key_event#0 ]
Allocated zp ZP_BYTE:80 [ play_move_leftright::return#0 ]
Allocated zp ZP_BYTE:81 [ main::$11 ]
Allocated zp ZP_BYTE:82 [ main::render#2 ]
Allocated zp ZP_BYTE:83 [ play_move_rotate::key_event#0 ]
Allocated zp ZP_BYTE:84 [ play_move_rotate::return#0 ]
Allocated zp ZP_BYTE:85 [ main::$12 ]
Allocated zp ZP_BYTE:86 [ main::render#3 ]
Allocated zp ZP_WORD:87 [ render_current::screen_line#0 ]
Allocated zp ZP_BYTE:89 [ render_current::current_cell#0 ]
Allocated zp ZP_BYTE:90 [ render_playfield::$1 ]
Allocated zp ZP_BYTE:91 [ play_move_rotate::$2 ]
Allocated zp ZP_BYTE:92 [ collision::return#13 ]
Allocated zp ZP_BYTE:93 [ play_move_rotate::$6 ]
Allocated zp ZP_BYTE:94 [ play_move_rotate::$4 ]
Allocated zp ZP_WORD:95 [ collision::piece_gfx#0 ]
Allocated zp ZP_WORD:97 [ collision::playfield_line#0 ]
Allocated zp ZP_BYTE:99 [ collision::i#1 ]
Allocated zp ZP_BYTE:100 [ collision::$7 ]
Allocated zp ZP_BYTE:101 [ collision::return#12 ]
Allocated zp ZP_BYTE:102 [ play_move_leftright::$4 ]
Allocated zp ZP_BYTE:103 [ collision::return#1 ]
Allocated zp ZP_BYTE:104 [ play_move_leftright::$8 ]
Allocated zp ZP_BYTE:105 [ keyboard_event_pressed::return#12 ]
Allocated zp ZP_BYTE:106 [ play_move_down::$2 ]
Allocated zp ZP_BYTE:107 [ collision::return#0 ]
Allocated zp ZP_BYTE:108 [ play_move_down::$12 ]
Allocated zp ZP_BYTE:109 [ spawn_current::$3 ]
Allocated zp ZP_BYTE:110 [ sid_rnd::return#2 ]
Allocated zp ZP_BYTE:111 [ spawn_current::$1 ]
Allocated zp ZP_BYTE:112 [ sid_rnd::return#0 ]
Allocated zp ZP_BYTE:113 [ remove_lines::c#0 ]
Allocated zp ZP_WORD:114 [ lock_current::playfield_line#0 ]
Allocated zp ZP_BYTE:116 [ lock_current::i#1 ]
Allocated zp ZP_BYTE:117 [ keyboard_event_pressed::$0 ]
Allocated zp ZP_BYTE:118 [ keyboard_event_pressed::row_bits#0 ]
Allocated zp ZP_BYTE:119 [ keyboard_event_pressed::$1 ]
Allocated zp ZP_BYTE:120 [ keyboard_event_pressed::return#11 ]
Allocated zp ZP_BYTE:121 [ keyboard_matrix_read::rowid#0 ]
Allocated zp ZP_BYTE:122 [ keyboard_matrix_read::return#2 ]
Allocated zp ZP_BYTE:123 [ keyboard_event_scan::row_scan#0 ]
Allocated zp ZP_BYTE:124 [ keyboard_event_pressed::return#0 ]
Allocated zp ZP_BYTE:125 [ keyboard_event_scan::$14 ]
Allocated zp ZP_BYTE:126 [ keyboard_event_pressed::return#1 ]
Allocated zp ZP_BYTE:127 [ keyboard_event_scan::$18 ]
Allocated zp ZP_BYTE:128 [ keyboard_event_pressed::return#2 ]
Allocated zp ZP_BYTE:129 [ keyboard_event_scan::$22 ]
Allocated zp ZP_BYTE:130 [ keyboard_event_pressed::return#10 ]
Allocated zp ZP_BYTE:131 [ keyboard_event_scan::$26 ]
Allocated zp ZP_BYTE:132 [ keyboard_event_scan::$3 ]
Allocated zp ZP_BYTE:133 [ keyboard_event_scan::$4 ]
Allocated zp ZP_BYTE:134 [ keyboard_event_scan::event_type#0 ]
Allocated zp ZP_BYTE:135 [ keyboard_event_scan::$11 ]
Allocated zp ZP_BYTE:136 [ keyboard_matrix_read::return#0 ]
Allocated zp ZP_BYTE:137 [ tables_init::$1 ]
Allocated zp ZP_BYTE:138 [ render_init::$5 ]
Allocated zp ZP_WORD:139 [ render_init::$10 ]
Allocated zp ZP_WORD:141 [ fill::end#0 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label COLS = $d800
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .const BLACK = 0
  .const WHITE = 1
  .const GREEN = 5
  .const DARK_GREY = $b
  .const LIGHT_GREY = $f
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  .const current_movedown_slow = $32
  .const current_movedown_fast = 5
  .const COLLISION_NONE = 0
  .const COLLISION_PLAYFIELD = 1
  .const COLLISION_BOTTOM = 2
  .const COLLISION_LEFT = 4
  .const COLLISION_RIGHT = 8
  .label SCREEN = $400
  .label CHARSET = $2000
  .label keyboard_events_size = $3a
  .label current_ypos = 2
  .label current_xpos = $27
  .label current_orientation = $24
  .label current_piece_gfx = $25
  .label current_piece = $22
  .label current_piece_color = $28
  .label current_movedown_counter = 3
  .label current_piece_15 = $15
  .label current_ypos_22 = 4
  .label current_xpos_63 = 5
  .label current_piece_gfx_64 = 6
  .label current_piece_color_67 = 8
  .label current_ypos_71 = 4
  .label current_xpos_96 = 5
  .label current_piece_gfx_87 = 6
  .label current_piece_gfx_88 = 6
  .label current_piece_color_75 = 8
  .label current_piece_color_76 = 8
  .label current_piece_72 = $15
  .label current_piece_73 = $15
  .label current_piece_74 = $15
  .label current_piece_75 = $15
//SEG2 @begin
bbegin:
  jmp b22
//SEG3 @22
b22:
//SEG4 kickasm(location (const byte*) CHARSET#0) {{ .var charset = LoadPicture("charset.png", List().add($000000, $ffffff, $523fa0, $77c1c9))     .for (var c=0; c<16; c++)         .for (var y=0;y<8; y++)             .byte charset.getMulticolorByte(c,y)  }}
//SEG5 [2] phi from @22 to @25 [phi:@22->@25]
b25_from_b22:
  jmp b25
//SEG6 @25
b25:
//SEG7 [3] call main 
//SEG8 [5] phi from @25 to main [phi:@25->main]
main_from_b25:
  jsr main
//SEG9 [4] phi from @25 to @end [phi:@25->@end]
bend_from_b25:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .label _10 = $4d
    .label _11 = $51
    .label _12 = $55
    .label key_event = $4a
    .label render = $4e
    .label render_2 = $52
    .label render_3 = $56
  //SEG12 [6] call sid_rnd_init 
    jsr sid_rnd_init
    jmp b21
  //SEG13 main::@21
  b21:
  //SEG14 asm { sei  }
    sei
  //SEG15 [8] call render_init 
  //SEG16 [315] phi from main::@21 to render_init [phi:main::@21->render_init]
  render_init_from_b21:
    jsr render_init
  //SEG17 [9] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
  b22_from_b21:
    jmp b22
  //SEG18 main::@22
  b22:
  //SEG19 [10] call tables_init 
  //SEG20 [304] phi from main::@22 to tables_init [phi:main::@22->tables_init]
  tables_init_from_b22:
    jsr tables_init
  //SEG21 [11] phi from main::@22 to main::@23 [phi:main::@22->main::@23]
  b23_from_b22:
    jmp b23
  //SEG22 main::@23
  b23:
  //SEG23 [12] call spawn_current 
  //SEG24 [184] phi from main::@23 to spawn_current [phi:main::@23->spawn_current]
  spawn_current_from_b23:
    jsr spawn_current
  //SEG25 [13] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  b24_from_b23:
    jmp b24
  //SEG26 main::@24
  b24:
  //SEG27 [14] call render_playfield 
  //SEG28 [72] phi from main::@24 to render_playfield [phi:main::@24->render_playfield]
  render_playfield_from_b24:
    jsr render_playfield
    jmp b25
  //SEG29 main::@25
  b25:
  //SEG30 [15] (byte*~) current_piece_gfx#87 ← (byte*) current_piece_gfx#10 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_87
    lda current_piece_gfx+1
    sta current_piece_gfx_87+1
  //SEG31 [16] (byte~) current_piece_color#75 ← (byte) current_piece_color#15 -- vbuz1=vbuz2 
    lda current_piece_color
    sta current_piece_color_75
  //SEG32 [17] call render_current 
  //SEG33 [52] phi from main::@25 to render_current [phi:main::@25->render_current]
  render_current_from_b25:
  //SEG34 [52] phi (byte) current_piece_color#67 = (byte~) current_piece_color#75 [phi:main::@25->render_current#0] -- register_copy 
  //SEG35 [52] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#87 [phi:main::@25->render_current#1] -- register_copy 
  //SEG36 [52] phi (byte) current_xpos#63 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main::@25->render_current#2] -- vbuz1=vbuc1 
    lda #3
    sta current_xpos_63
  //SEG37 [52] phi (byte) current_ypos#22 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->render_current#3] -- vbuz1=vbuc1 
    lda #0
    sta current_ypos_22
    jsr render_current
  //SEG38 [18] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG39 [19] phi from main::@25 to main::@1 [phi:main::@25->main::@1]
  b1_from_b25:
  //SEG40 [19] phi (byte) current_movedown_counter#15 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG41 [19] phi (byte) keyboard_events_size#19 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keyboard_events_size
  //SEG42 [19] phi (byte) current_piece_color#11 = (byte) current_piece_color#15 [phi:main::@25->main::@1#2] -- register_copy 
  //SEG43 [19] phi (byte) current_ypos#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta current_ypos
  //SEG44 [19] phi (byte) current_xpos#16 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main::@25->main::@1#4] -- vbuz1=vbuc1 
    lda #3
    sta current_xpos
  //SEG45 [19] phi (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#10 [phi:main::@25->main::@1#5] -- register_copy 
  //SEG46 [19] phi (byte) current_orientation#15 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#6] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG47 [19] phi (byte*) current_piece#11 = (byte*~) current_piece#71 [phi:main::@25->main::@1#7] -- register_copy 
    jmp b1
  //SEG48 main::@1
  b1:
    jmp b4
  //SEG49 main::@4
  b4:
  //SEG50 [20] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b7
  //SEG51 main::@7
  b7:
  //SEG52 [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 254) goto main::@7 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$fe
    bne b7
    jmp b9
  //SEG53 main::@9
  b9:
  //SEG54 [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG55 [23] call keyboard_event_scan 
  //SEG56 [248] phi from main::@9 to keyboard_event_scan [phi:main::@9->keyboard_event_scan]
  keyboard_event_scan_from_b9:
    jsr keyboard_event_scan
  //SEG57 [24] phi from main::@9 to main::@27 [phi:main::@9->main::@27]
  b27_from_b9:
    jmp b27
  //SEG58 main::@27
  b27:
  //SEG59 [25] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG60 [26] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2 -- vbuz1=vbuz2 
    lda keyboard_event_get.return
    sta keyboard_event_get.return_3
    jmp b28
  //SEG61 main::@28
  b28:
  //SEG62 [27] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuz2 
    lda keyboard_event_get.return_3
    sta key_event
  //SEG63 [28] (byte) play_move_down::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuz2 
    lda key_event
    sta play_move_down.key_event
  //SEG64 [29] call play_move_down 
    jsr play_move_down
  //SEG65 [30] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3 -- vbuz1=vbuz2 
    lda play_move_down.return_3
    sta play_move_down.return
    jmp b29
  //SEG66 main::@29
  b29:
  //SEG67 [31] (byte~) main::$10 ← (byte) play_move_down::return#0 -- vbuz1=vbuz2 
    lda play_move_down.return
    sta _10
  //SEG68 [32] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$10 -- vbuz1=vbuc1_plus_vbuz2 
    lda #0
    clc
    adc _10
    sta render
  //SEG69 [33] (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuz2 
    lda key_event
    sta play_move_leftright.key_event
  //SEG70 [34] call play_move_leftright 
    jsr play_move_leftright
  //SEG71 [35] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2 -- vbuz1=vbuz2 
    lda play_move_leftright.return_2
    sta play_move_leftright.return
    jmp b30
  //SEG72 main::@30
  b30:
  //SEG73 [36] (byte~) main::$11 ← (byte) play_move_leftright::return#0 -- vbuz1=vbuz2 
    lda play_move_leftright.return
    sta _11
  //SEG74 [37] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$11 -- vbuz1=vbuz2_plus_vbuz3 
    lda render
    clc
    adc _11
    sta render_2
  //SEG75 [38] (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuz2 
    lda key_event
    sta play_move_rotate.key_event
  //SEG76 [39] call play_move_rotate 
    jsr play_move_rotate
  //SEG77 [40] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2 -- vbuz1=vbuz2 
    lda play_move_rotate.return_2
    sta play_move_rotate.return
    jmp b31
  //SEG78 main::@31
  b31:
  //SEG79 [41] (byte~) main::$12 ← (byte) play_move_rotate::return#0 -- vbuz1=vbuz2 
    lda play_move_rotate.return
    sta _12
  //SEG80 [42] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$12 -- vbuz1=vbuz2_plus_vbuz3 
    lda render_2
    clc
    adc _12
    sta render_3
  //SEG81 [43] if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@10 -- vbuz1_eq_0_then_la1 
    lda render_3
    cmp #0
    beq b10
  //SEG82 [44] phi from main::@31 to main::@19 [phi:main::@31->main::@19]
  b19_from_b31:
    jmp b19
  //SEG83 main::@19
  b19:
  //SEG84 [45] call render_playfield 
  //SEG85 [72] phi from main::@19 to render_playfield [phi:main::@19->render_playfield]
  render_playfield_from_b19:
    jsr render_playfield
    jmp b32
  //SEG86 main::@32
  b32:
  //SEG87 [46] (byte~) current_ypos#71 ← (byte) current_ypos#16 -- vbuz1=vbuz2 
    lda current_ypos
    sta current_ypos_71
  //SEG88 [47] (byte~) current_xpos#96 ← (byte) current_xpos#23 -- vbuz1=vbuz2 
    lda current_xpos
    sta current_xpos_96
  //SEG89 [48] (byte*~) current_piece_gfx#88 ← (byte*) current_piece_gfx#18 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_88
    lda current_piece_gfx+1
    sta current_piece_gfx_88+1
  //SEG90 [49] (byte~) current_piece_color#76 ← (byte) current_piece_color#13 -- vbuz1=vbuz2 
    lda current_piece_color
    sta current_piece_color_76
  //SEG91 [50] call render_current 
  //SEG92 [52] phi from main::@32 to render_current [phi:main::@32->render_current]
  render_current_from_b32:
  //SEG93 [52] phi (byte) current_piece_color#67 = (byte~) current_piece_color#76 [phi:main::@32->render_current#0] -- register_copy 
  //SEG94 [52] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#88 [phi:main::@32->render_current#1] -- register_copy 
  //SEG95 [52] phi (byte) current_xpos#63 = (byte~) current_xpos#96 [phi:main::@32->render_current#2] -- register_copy 
  //SEG96 [52] phi (byte) current_ypos#22 = (byte~) current_ypos#71 [phi:main::@32->render_current#3] -- register_copy 
    jsr render_current
    jmp b10
  //SEG97 main::@10
  b10:
  //SEG98 [51] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
  //SEG99 [19] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
  b1_from_b10:
  //SEG100 [19] phi (byte) current_movedown_counter#15 = (byte) current_movedown_counter#12 [phi:main::@10->main::@1#0] -- register_copy 
  //SEG101 [19] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@10->main::@1#1] -- register_copy 
  //SEG102 [19] phi (byte) current_piece_color#11 = (byte) current_piece_color#13 [phi:main::@10->main::@1#2] -- register_copy 
  //SEG103 [19] phi (byte) current_ypos#12 = (byte) current_ypos#16 [phi:main::@10->main::@1#3] -- register_copy 
  //SEG104 [19] phi (byte) current_xpos#16 = (byte) current_xpos#23 [phi:main::@10->main::@1#4] -- register_copy 
  //SEG105 [19] phi (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#18 [phi:main::@10->main::@1#5] -- register_copy 
  //SEG106 [19] phi (byte) current_orientation#15 = (byte) current_orientation#23 [phi:main::@10->main::@1#6] -- register_copy 
  //SEG107 [19] phi (byte*) current_piece#11 = (byte*) current_piece#13 [phi:main::@10->main::@1#7] -- register_copy 
    jmp b1
}
//SEG108 render_current
render_current: {
    .label ypos2 = 9
    .label l = $a
    .label screen_line = $57
    .label xpos = $c
    .label current_cell = $59
    .label i = $b
    .label c = $d
  //SEG109 [53] (byte) render_current::ypos2#0 ← (byte) current_ypos#22 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda current_ypos_22
    asl
    sta ypos2
  //SEG110 [54] phi from render_current to render_current::@1 [phi:render_current->render_current::@1]
  b1_from_render_current:
  //SEG111 [54] phi (byte) render_current::i#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG112 [54] phi (byte) render_current::l#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG113 [54] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#0 [phi:render_current->render_current::@1#2] -- register_copy 
    jmp b1
  //SEG114 [54] phi from render_current::@2 to render_current::@1 [phi:render_current::@2->render_current::@1]
  b1_from_b2:
  //SEG115 [54] phi (byte) render_current::i#4 = (byte) render_current::i#8 [phi:render_current::@2->render_current::@1#0] -- register_copy 
  //SEG116 [54] phi (byte) render_current::l#3 = (byte) render_current::l#1 [phi:render_current::@2->render_current::@1#1] -- register_copy 
  //SEG117 [54] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#1 [phi:render_current::@2->render_current::@1#2] -- register_copy 
    jmp b1
  //SEG118 render_current::@1
  b1:
  //SEG119 [55] if((byte) render_current::ypos2#2>=(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto render_current::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcs b2_from_b1
    jmp b6
  //SEG120 render_current::@6
  b6:
  //SEG121 [56] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte) render_current::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda screen_lines,y
    sta screen_line
    lda screen_lines+1,y
    sta screen_line+1
  //SEG122 [57] (byte) render_current::xpos#0 ← (byte) current_xpos#63 -- vbuz1=vbuz2 
    lda current_xpos_63
    sta xpos
  //SEG123 [58] phi from render_current::@6 to render_current::@3 [phi:render_current::@6->render_current::@3]
  b3_from_b6:
  //SEG124 [58] phi (byte) render_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current::@6->render_current::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG125 [58] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#0 [phi:render_current::@6->render_current::@3#1] -- register_copy 
  //SEG126 [58] phi (byte) render_current::i#2 = (byte) render_current::i#4 [phi:render_current::@6->render_current::@3#2] -- register_copy 
    jmp b3
  //SEG127 [58] phi from render_current::@4 to render_current::@3 [phi:render_current::@4->render_current::@3]
  b3_from_b4:
  //SEG128 [58] phi (byte) render_current::c#2 = (byte) render_current::c#1 [phi:render_current::@4->render_current::@3#0] -- register_copy 
  //SEG129 [58] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#1 [phi:render_current::@4->render_current::@3#1] -- register_copy 
  //SEG130 [58] phi (byte) render_current::i#2 = (byte) render_current::i#1 [phi:render_current::@4->render_current::@3#2] -- register_copy 
    jmp b3
  //SEG131 render_current::@3
  b3:
  //SEG132 [59] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_current::i#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy i
    lda (current_piece_gfx_64),y
    sta current_cell
  //SEG133 [60] (byte) render_current::i#1 ← ++ (byte) render_current::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG134 [61] if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@4 -- vbuz1_eq_0_then_la1 
    lda current_cell
    cmp #0
    beq b4
    jmp b7
  //SEG135 render_current::@7
  b7:
  //SEG136 [62] if((byte) render_current::xpos#2>=(const byte) PLAYFIELD_COLS#0) goto render_current::@4 -- vbuz1_ge_vbuc1_then_la1 
    lda xpos
    cmp #PLAYFIELD_COLS
    bcs b4
    jmp b8
  //SEG137 render_current::@8
  b8:
  //SEG138 [63] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_color#67 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda current_piece_color_67
    ldy xpos
    sta (screen_line),y
    jmp b4
  //SEG139 render_current::@4
  b4:
  //SEG140 [64] (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2 -- vbuz1=_inc_vbuz1 
    inc xpos
  //SEG141 [65] (byte) render_current::c#1 ← ++ (byte) render_current::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG142 [66] if((byte) render_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #4
    bne b3_from_b4
  //SEG143 [67] phi from render_current::@1 render_current::@4 to render_current::@2 [phi:render_current::@1/render_current::@4->render_current::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG144 [67] phi (byte) render_current::i#8 = (byte) render_current::i#4 [phi:render_current::@1/render_current::@4->render_current::@2#0] -- register_copy 
    jmp b2
  //SEG145 render_current::@2
  b2:
  //SEG146 [68] (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG147 [69] (byte) render_current::l#1 ← ++ (byte) render_current::l#3 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG148 [70] if((byte) render_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b1_from_b2
    jmp breturn
  //SEG149 render_current::@return
  breturn:
  //SEG150 [71] return 
    rts
}
//SEG151 render_playfield
render_playfield: {
    .label _1 = $5a
    .label line = $10
    .label i = $f
    .label c = $12
    .label l = $e
  //SEG152 [73] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  b1_from_render_playfield:
  //SEG153 [73] phi (byte) render_playfield::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG154 [73] phi (byte) render_playfield::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta l
    jmp b1
  //SEG155 [73] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  b1_from_b3:
  //SEG156 [73] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
  //SEG157 [73] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    jmp b1
  //SEG158 render_playfield::@1
  b1:
  //SEG159 [74] (byte~) render_playfield::$1 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda l
    asl
    sta _1
  //SEG160 [75] (byte*) render_playfield::line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_playfield::$1) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy _1
    lda screen_lines,y
    sta line
    lda screen_lines+1,y
    sta line+1
  //SEG161 [76] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  b2_from_b1:
  //SEG162 [76] phi (byte) render_playfield::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG163 [76] phi (byte*) render_playfield::line#2 = (byte*) render_playfield::line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
  //SEG164 [76] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
    jmp b2
  //SEG165 [76] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  b2_from_b2:
  //SEG166 [76] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
  //SEG167 [76] phi (byte*) render_playfield::line#2 = (byte*) render_playfield::line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
  //SEG168 [76] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
    jmp b2
  //SEG169 render_playfield::@2
  b2:
  //SEG170 [77] *((byte*) render_playfield::line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda playfield,y
    ldy #0
    sta (line),y
  //SEG171 [78] (byte*) render_playfield::line#1 ← ++ (byte*) render_playfield::line#2 -- pbuz1=_inc_pbuz1 
    inc line
    bne !+
    inc line+1
  !:
  //SEG172 [79] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG173 [80] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG174 [81] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #PLAYFIELD_COLS-1+1
    bne b2_from_b2
    jmp b3
  //SEG175 render_playfield::@3
  b3:
  //SEG176 [82] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG177 [83] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b3
    jmp breturn
  //SEG178 render_playfield::@return
  breturn:
  //SEG179 [84] return 
    rts
}
//SEG180 play_move_rotate
play_move_rotate: {
    .label _2 = $5b
    .label _4 = $5e
    .label _6 = $5d
    .label key_event = $53
    .label return = $54
    .label orientation = $14
    .label return_2 = $13
  //SEG181 [85] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda key_event
    cmp #KEY_Z
    beq b1
    jmp b6
  //SEG182 play_move_rotate::@6
  b6:
  //SEG183 [86] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda key_event
    cmp #KEY_X
    beq b2
  //SEG184 [87] phi from play_move_rotate::@14 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return]
  breturn_from_b14:
  breturn_from_b6:
  //SEG185 [87] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#17 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
  //SEG186 [87] phi (byte) current_orientation#23 = (byte) current_orientation#18 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
  //SEG187 [87] phi (byte) play_move_rotate::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta return_2
    jmp breturn
  //SEG188 play_move_rotate::@return
  breturn:
  //SEG189 [88] return 
    rts
  //SEG190 play_move_rotate::@2
  b2:
  //SEG191 [89] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#18 + (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuz1=vbuz2_plus_vbuc1 
    lda #$10
    clc
    adc current_orientation
    sta _2
  //SEG192 [90] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuz2_band_vbuc1 
    lda #$3f
    and _2
    sta orientation
  //SEG193 [91] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@4 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4]
  b4_from_b1:
  b4_from_b2:
  //SEG194 [91] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4#0] -- register_copy 
    jmp b4
  //SEG195 play_move_rotate::@4
  b4:
  //SEG196 [92] (byte) collision::xpos#3 ← (byte) current_xpos#23 -- vbuz1=vbuz2 
    lda current_xpos
    sta collision.xpos
  //SEG197 [93] (byte) collision::ypos#3 ← (byte) current_ypos#16 -- vbuz1=vbuz2 
    lda current_ypos
    sta collision.ypos
  //SEG198 [94] (byte) collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda orientation
    sta collision.orientation
  //SEG199 [95] (byte*~) current_piece#75 ← (byte*) current_piece#13 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_75
    lda current_piece+1
    sta current_piece_75+1
  //SEG200 [96] call collision 
  //SEG201 [104] phi from play_move_rotate::@4 to collision [phi:play_move_rotate::@4->collision]
  collision_from_b4:
  //SEG202 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#3 [phi:play_move_rotate::@4->collision#0] -- register_copy 
  //SEG203 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#3 [phi:play_move_rotate::@4->collision#1] -- register_copy 
  //SEG204 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#3 [phi:play_move_rotate::@4->collision#2] -- register_copy 
  //SEG205 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#75 [phi:play_move_rotate::@4->collision#3] -- register_copy 
    jsr collision
  //SEG206 [97] (byte) collision::return#13 ← (byte) collision::return#14 -- vbuz1=vbuz2 
    lda collision.return_14
    sta collision.return_13
    jmp b14
  //SEG207 play_move_rotate::@14
  b14:
  //SEG208 [98] (byte~) play_move_rotate::$6 ← (byte) collision::return#13 -- vbuz1=vbuz2 
    lda collision.return_13
    sta _6
  //SEG209 [99] if((byte~) play_move_rotate::$6!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return -- vbuz1_neq_vbuc1_then_la1 
    lda _6
    cmp #COLLISION_NONE
    bne breturn_from_b14
    jmp b11
  //SEG210 play_move_rotate::@11
  b11:
  //SEG211 [100] (byte) current_orientation#8 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda orientation
    sta current_orientation
  //SEG212 [101] (byte*) current_piece_gfx#8 ← (byte*) current_piece#13 + (byte) current_orientation#8 -- pbuz1=pbuz2_plus_vbuz3 
    lda current_orientation
    clc
    adc current_piece
    sta current_piece_gfx
    lda #0
    adc current_piece+1
    sta current_piece_gfx+1
  //SEG213 [87] phi from play_move_rotate::@11 to play_move_rotate::@return [phi:play_move_rotate::@11->play_move_rotate::@return]
  breturn_from_b11:
  //SEG214 [87] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#8 [phi:play_move_rotate::@11->play_move_rotate::@return#0] -- register_copy 
  //SEG215 [87] phi (byte) current_orientation#23 = (byte) current_orientation#8 [phi:play_move_rotate::@11->play_move_rotate::@return#1] -- register_copy 
  //SEG216 [87] phi (byte) play_move_rotate::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_rotate::@11->play_move_rotate::@return#2] -- vbuz1=vbuc1 
    lda #1
    sta return_2
    jmp breturn
  //SEG217 play_move_rotate::@1
  b1:
  //SEG218 [102] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#18 - (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuz1=vbuz2_minus_vbuc1 
    lda current_orientation
    sec
    sbc #$10
    sta _4
  //SEG219 [103] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuz2_band_vbuc1 
    lda #$3f
    and _4
    sta orientation
    jmp b4_from_b1
}
//SEG220 collision
collision: {
    .label _7 = $64
    .label xpos = $19
    .label ypos = $18
    .label orientation = $17
    .label return = $6b
    .label return_1 = $67
    .label piece_gfx = $5f
    .label ypos2 = $1a
    .label playfield_line = $61
    .label i = $63
    .label col = $1d
    .label c = $1e
    .label l = $1b
    .label return_12 = $65
    .label return_13 = $5c
    .label i_2 = $1c
    .label return_14 = $1f
    .label i_3 = $1c
    .label i_11 = $1c
    .label i_13 = $1c
  //SEG221 [105] (byte*) collision::piece_gfx#0 ← (byte*) current_piece#15 + (byte) collision::orientation#4 -- pbuz1=pbuz2_plus_vbuz3 
    lda orientation
    clc
    adc current_piece_15
    sta piece_gfx
    lda #0
    adc current_piece_15+1
    sta piece_gfx+1
  //SEG222 [106] (byte) collision::ypos2#0 ← (byte) collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda ypos
    asl
    sta ypos2
  //SEG223 [107] phi from collision to collision::@1 [phi:collision->collision::@1]
  b1_from_collision:
  //SEG224 [107] phi (byte) collision::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:collision->collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG225 [107] phi (byte) collision::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:collision->collision::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i_3
  //SEG226 [107] phi (byte) collision::ypos2#2 = (byte) collision::ypos2#0 [phi:collision->collision::@1#2] -- register_copy 
    jmp b1
  //SEG227 collision::@1
  b1:
  //SEG228 [108] (byte*) collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) collision::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG229 [109] (byte~) collision::col#9 ← (byte) collision::xpos#5 -- vbuz1=vbuz2 
    lda xpos
    sta col
  //SEG230 [110] phi from collision::@1 to collision::@2 [phi:collision::@1->collision::@2]
  b2_from_b1:
  //SEG231 [110] phi (byte) collision::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:collision::@1->collision::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG232 [110] phi (byte) collision::col#2 = (byte~) collision::col#9 [phi:collision::@1->collision::@2#1] -- register_copy 
  //SEG233 [110] phi (byte) collision::i#2 = (byte) collision::i#3 [phi:collision::@1->collision::@2#2] -- register_copy 
    jmp b2
  //SEG234 collision::@2
  b2:
  //SEG235 [111] (byte) collision::i#1 ← ++ (byte) collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG236 [112] if(*((byte*) collision::piece_gfx#0 + (byte) collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (piece_gfx),y
    cmp #0
    beq b3
    jmp b8
  //SEG237 collision::@8
  b8:
  //SEG238 [113] if((byte) collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcc b4
  //SEG239 [114] phi from collision::@8 to collision::@return [phi:collision::@8->collision::@return]
  breturn_from_b8:
  //SEG240 [114] phi (byte) collision::return#14 = (const byte) COLLISION_BOTTOM#0 [phi:collision::@8->collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_BOTTOM
    sta return_14
    jmp breturn
  //SEG241 collision::@return
  breturn:
  //SEG242 [115] return 
    rts
  //SEG243 collision::@4
  b4:
  //SEG244 [116] (byte~) collision::$7 ← (byte) collision::col#2 & (byte/word/signed word/dword/signed dword) 128 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and col
    sta _7
  //SEG245 [117] if((byte~) collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@5 -- vbuz1_eq_0_then_la1 
    lda _7
    cmp #0
    beq b5
  //SEG246 [114] phi from collision::@4 to collision::@return [phi:collision::@4->collision::@return]
  breturn_from_b4:
  //SEG247 [114] phi (byte) collision::return#14 = (const byte) COLLISION_LEFT#0 [phi:collision::@4->collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_LEFT
    sta return_14
    jmp breturn
  //SEG248 collision::@5
  b5:
  //SEG249 [118] if((byte) collision::col#2<(const byte) PLAYFIELD_COLS#0) goto collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda col
    cmp #PLAYFIELD_COLS
    bcc b6
  //SEG250 [114] phi from collision::@5 to collision::@return [phi:collision::@5->collision::@return]
  breturn_from_b5:
  //SEG251 [114] phi (byte) collision::return#14 = (const byte) COLLISION_RIGHT#0 [phi:collision::@5->collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_RIGHT
    sta return_14
    jmp breturn
  //SEG252 collision::@6
  b6:
  //SEG253 [119] if(*((byte*) collision::playfield_line#0 + (byte) collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy col
    lda (playfield_line),y
    cmp #0
    beq b3
  //SEG254 [114] phi from collision::@6 to collision::@return [phi:collision::@6->collision::@return]
  breturn_from_b6:
  //SEG255 [114] phi (byte) collision::return#14 = (const byte) COLLISION_PLAYFIELD#0 [phi:collision::@6->collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_PLAYFIELD
    sta return_14
    jmp breturn
  //SEG256 collision::@3
  b3:
  //SEG257 [120] (byte) collision::col#1 ← ++ (byte) collision::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG258 [121] (byte) collision::c#1 ← ++ (byte) collision::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG259 [122] if((byte) collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto collision::@21 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #4
    bne b21
    jmp b17
  //SEG260 collision::@17
  b17:
  //SEG261 [123] (byte) collision::ypos2#1 ← (byte) collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG262 [124] (byte) collision::l#1 ← ++ (byte) collision::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG263 [125] if((byte) collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto collision::@20 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b20
  //SEG264 [114] phi from collision::@17 to collision::@return [phi:collision::@17->collision::@return]
  breturn_from_b17:
  //SEG265 [114] phi (byte) collision::return#14 = (const byte) COLLISION_NONE#0 [phi:collision::@17->collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_NONE
    sta return_14
    jmp breturn
  //SEG266 collision::@20
  b20:
  //SEG267 [126] (byte~) collision::i#11 ← (byte) collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_11
  //SEG268 [107] phi from collision::@20 to collision::@1 [phi:collision::@20->collision::@1]
  b1_from_b20:
  //SEG269 [107] phi (byte) collision::l#6 = (byte) collision::l#1 [phi:collision::@20->collision::@1#0] -- register_copy 
  //SEG270 [107] phi (byte) collision::i#3 = (byte~) collision::i#11 [phi:collision::@20->collision::@1#1] -- register_copy 
  //SEG271 [107] phi (byte) collision::ypos2#2 = (byte) collision::ypos2#1 [phi:collision::@20->collision::@1#2] -- register_copy 
    jmp b1
  //SEG272 collision::@21
  b21:
  //SEG273 [127] (byte~) collision::i#13 ← (byte) collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_13
  //SEG274 [110] phi from collision::@21 to collision::@2 [phi:collision::@21->collision::@2]
  b2_from_b21:
  //SEG275 [110] phi (byte) collision::c#2 = (byte) collision::c#1 [phi:collision::@21->collision::@2#0] -- register_copy 
  //SEG276 [110] phi (byte) collision::col#2 = (byte) collision::col#1 [phi:collision::@21->collision::@2#1] -- register_copy 
  //SEG277 [110] phi (byte) collision::i#2 = (byte~) collision::i#13 [phi:collision::@21->collision::@2#2] -- register_copy 
    jmp b2
}
//SEG278 play_move_leftright
play_move_leftright: {
    .label _4 = $66
    .label _8 = $68
    .label key_event = $4f
    .label return = $50
    .label return_2 = $20
  //SEG279 [128] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda key_event
    cmp #KEY_COMMA
    beq b1
    jmp b6
  //SEG280 play_move_leftright::@6
  b6:
  //SEG281 [129] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda key_event
    cmp #KEY_DOT
    bne breturn_from_b6
    jmp b7
  //SEG282 play_move_leftright::@7
  b7:
  //SEG283 [130] (byte) collision::xpos#2 ← (byte) current_xpos#19 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy current_xpos
    iny
    sty collision.xpos
  //SEG284 [131] (byte) collision::ypos#2 ← (byte) current_ypos#16 -- vbuz1=vbuz2 
    lda current_ypos
    sta collision.ypos
  //SEG285 [132] (byte) collision::orientation#2 ← (byte) current_orientation#18 -- vbuz1=vbuz2 
    lda current_orientation
    sta collision.orientation
  //SEG286 [133] (byte*~) current_piece#74 ← (byte*) current_piece#13 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_74
    lda current_piece+1
    sta current_piece_74+1
  //SEG287 [134] call collision 
  //SEG288 [104] phi from play_move_leftright::@7 to collision [phi:play_move_leftright::@7->collision]
  collision_from_b7:
  //SEG289 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#2 [phi:play_move_leftright::@7->collision#0] -- register_copy 
  //SEG290 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#2 [phi:play_move_leftright::@7->collision#1] -- register_copy 
  //SEG291 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#2 [phi:play_move_leftright::@7->collision#2] -- register_copy 
  //SEG292 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#74 [phi:play_move_leftright::@7->collision#3] -- register_copy 
    jsr collision
  //SEG293 [135] (byte) collision::return#12 ← (byte) collision::return#14 -- vbuz1=vbuz2 
    lda collision.return_14
    sta collision.return_12
    jmp b15
  //SEG294 play_move_leftright::@15
  b15:
  //SEG295 [136] (byte~) play_move_leftright::$4 ← (byte) collision::return#12 -- vbuz1=vbuz2 
    lda collision.return_12
    sta _4
  //SEG296 [137] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda _4
    cmp #COLLISION_NONE
    bne breturn_from_b15
    jmp b8
  //SEG297 play_move_leftright::@8
  b8:
  //SEG298 [138] (byte) current_xpos#7 ← ++ (byte) current_xpos#19 -- vbuz1=_inc_vbuz1 
    inc current_xpos
  //SEG299 [139] phi from play_move_leftright::@11 play_move_leftright::@8 to play_move_leftright::@return [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return]
  breturn_from_b11:
  breturn_from_b8:
  //SEG300 [139] phi (byte) current_xpos#23 = (byte) current_xpos#9 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#0] -- register_copy 
  //SEG301 [139] phi (byte) play_move_leftright::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#1] -- vbuz1=vbuc1 
    lda #1
    sta return_2
    jmp breturn
  //SEG302 [139] phi from play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@6 to play_move_leftright::@return [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return]
  breturn_from_b14:
  breturn_from_b15:
  breturn_from_b6:
  //SEG303 [139] phi (byte) current_xpos#23 = (byte) current_xpos#19 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#0] -- register_copy 
  //SEG304 [139] phi (byte) play_move_leftright::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#1] -- vbuz1=vbuc1 
    lda #0
    sta return_2
    jmp breturn
  //SEG305 play_move_leftright::@return
  breturn:
  //SEG306 [140] return 
    rts
  //SEG307 play_move_leftright::@1
  b1:
  //SEG308 [141] (byte) collision::xpos#1 ← (byte) current_xpos#19 - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_minus_1 
    ldx current_xpos
    dex
    stx collision.xpos
  //SEG309 [142] (byte) collision::ypos#1 ← (byte) current_ypos#16 -- vbuz1=vbuz2 
    lda current_ypos
    sta collision.ypos
  //SEG310 [143] (byte) collision::orientation#1 ← (byte) current_orientation#18 -- vbuz1=vbuz2 
    lda current_orientation
    sta collision.orientation
  //SEG311 [144] (byte*~) current_piece#73 ← (byte*) current_piece#13 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_73
    lda current_piece+1
    sta current_piece_73+1
  //SEG312 [145] call collision 
  //SEG313 [104] phi from play_move_leftright::@1 to collision [phi:play_move_leftright::@1->collision]
  collision_from_b1:
  //SEG314 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#1 [phi:play_move_leftright::@1->collision#0] -- register_copy 
  //SEG315 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#1 [phi:play_move_leftright::@1->collision#1] -- register_copy 
  //SEG316 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#1 [phi:play_move_leftright::@1->collision#2] -- register_copy 
  //SEG317 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#73 [phi:play_move_leftright::@1->collision#3] -- register_copy 
    jsr collision
  //SEG318 [146] (byte) collision::return#1 ← (byte) collision::return#14 -- vbuz1=vbuz2 
    lda collision.return_14
    sta collision.return_1
    jmp b14
  //SEG319 play_move_leftright::@14
  b14:
  //SEG320 [147] (byte~) play_move_leftright::$8 ← (byte) collision::return#1 -- vbuz1=vbuz2 
    lda collision.return_1
    sta _8
  //SEG321 [148] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda _8
    cmp #COLLISION_NONE
    bne breturn_from_b14
    jmp b11
  //SEG322 play_move_leftright::@11
  b11:
  //SEG323 [149] (byte) current_xpos#9 ← -- (byte) current_xpos#19 -- vbuz1=_dec_vbuz1 
    dec current_xpos
    jmp breturn_from_b11
}
//SEG324 play_move_down
play_move_down: {
    .label _2 = $6a
    .label _12 = $6c
    .label key_event = $4b
    .label return = $4c
    .label movedown = $21
    .label return_3 = $29
  //SEG325 [150] (byte) current_movedown_counter#10 ← ++ (byte) current_movedown_counter#15 -- vbuz1=_inc_vbuz1 
    inc current_movedown_counter
  //SEG326 [151] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda key_event
    cmp #KEY_SPACE
    bne b1_from_play_move_down
  //SEG327 [152] phi from play_move_down to play_move_down::@8 [phi:play_move_down->play_move_down::@8]
  b8_from_play_move_down:
    jmp b8
  //SEG328 play_move_down::@8
  b8:
  //SEG329 [153] phi from play_move_down::@8 to play_move_down::@1 [phi:play_move_down::@8->play_move_down::@1]
  b1_from_b8:
  //SEG330 [153] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@8->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta movedown
    jmp b1
  //SEG331 [153] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  b1_from_play_move_down:
  //SEG332 [153] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta movedown
    jmp b1
  //SEG333 play_move_down::@1
  b1:
  //SEG334 [154] call keyboard_event_pressed 
  //SEG335 [237] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
  keyboard_event_pressed_from_b1:
  //SEG336 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_SPACE#0 [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG337 [155] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_11
    sta keyboard_event_pressed.return_12
    jmp b17
  //SEG338 play_move_down::@17
  b17:
  //SEG339 [156] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_12
    sta _2
  //SEG340 [157] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2 -- vbuz1_eq_0_then_la1 
    lda _2
    cmp #0
    beq b2_from_b17
    jmp b9
  //SEG341 play_move_down::@9
  b9:
  //SEG342 [158] if((byte) current_movedown_counter#10<(const byte) current_movedown_fast#0) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_fast
    bcc b2_from_b9
    jmp b10
  //SEG343 play_move_down::@10
  b10:
  //SEG344 [159] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuz1=_inc_vbuz1 
    inc movedown
  //SEG345 [160] phi from play_move_down::@10 play_move_down::@17 play_move_down::@9 to play_move_down::@2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2]
  b2_from_b10:
  b2_from_b17:
  b2_from_b9:
  //SEG346 [160] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2#0] -- register_copy 
    jmp b2
  //SEG347 play_move_down::@2
  b2:
  //SEG348 [161] if((byte) current_movedown_counter#10<(const byte) current_movedown_slow#0) goto play_move_down::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_slow
    bcc b4_from_b2
    jmp b11
  //SEG349 play_move_down::@11
  b11:
  //SEG350 [162] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuz1=_inc_vbuz1 
    inc movedown
  //SEG351 [163] phi from play_move_down::@11 play_move_down::@2 to play_move_down::@4 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4]
  b4_from_b11:
  b4_from_b2:
  //SEG352 [163] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#3 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4#0] -- register_copy 
    jmp b4
  //SEG353 play_move_down::@4
  b4:
  //SEG354 [164] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return -- vbuz1_eq_0_then_la1 
    lda movedown
    cmp #0
    beq breturn_from_b4
    jmp b12
  //SEG355 play_move_down::@12
  b12:
  //SEG356 [165] (byte) collision::ypos#0 ← (byte) current_ypos#12 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy current_ypos
    iny
    sty collision.ypos
  //SEG357 [166] (byte) collision::xpos#0 ← (byte) current_xpos#16 -- vbuz1=vbuz2 
    lda current_xpos
    sta collision.xpos
  //SEG358 [167] (byte) collision::orientation#0 ← (byte) current_orientation#15 -- vbuz1=vbuz2 
    lda current_orientation
    sta collision.orientation
  //SEG359 [168] (byte*~) current_piece#72 ← (byte*) current_piece#11 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_72
    lda current_piece+1
    sta current_piece_72+1
  //SEG360 [169] call collision 
  //SEG361 [104] phi from play_move_down::@12 to collision [phi:play_move_down::@12->collision]
  collision_from_b12:
  //SEG362 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#0 [phi:play_move_down::@12->collision#0] -- register_copy 
  //SEG363 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#0 [phi:play_move_down::@12->collision#1] -- register_copy 
  //SEG364 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#0 [phi:play_move_down::@12->collision#2] -- register_copy 
  //SEG365 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#72 [phi:play_move_down::@12->collision#3] -- register_copy 
    jsr collision
  //SEG366 [170] (byte) collision::return#0 ← (byte) collision::return#14 -- vbuz1=vbuz2 
    lda collision.return_14
    sta collision.return
    jmp b18
  //SEG367 play_move_down::@18
  b18:
  //SEG368 [171] (byte~) play_move_down::$12 ← (byte) collision::return#0 -- vbuz1=vbuz2 
    lda collision.return
    sta _12
  //SEG369 [172] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@6 -- vbuz1_eq_vbuc1_then_la1 
    lda _12
    cmp #COLLISION_NONE
    beq b6
  //SEG370 [173] phi from play_move_down::@18 to play_move_down::@13 [phi:play_move_down::@18->play_move_down::@13]
  b13_from_b18:
    jmp b13
  //SEG371 play_move_down::@13
  b13:
  //SEG372 [174] call lock_current 
    jsr lock_current
  //SEG373 [175] phi from play_move_down::@13 to play_move_down::@19 [phi:play_move_down::@13->play_move_down::@19]
  b19_from_b13:
    jmp b19
  //SEG374 play_move_down::@19
  b19:
  //SEG375 [176] call remove_lines 
  //SEG376 [198] phi from play_move_down::@19 to remove_lines [phi:play_move_down::@19->remove_lines]
  remove_lines_from_b19:
    jsr remove_lines
  //SEG377 [177] phi from play_move_down::@19 to play_move_down::@20 [phi:play_move_down::@19->play_move_down::@20]
  b20_from_b19:
    jmp b20
  //SEG378 play_move_down::@20
  b20:
  //SEG379 [178] call spawn_current 
  //SEG380 [184] phi from play_move_down::@20 to spawn_current [phi:play_move_down::@20->spawn_current]
  spawn_current_from_b20:
    jsr spawn_current
  //SEG381 [179] (byte*~) current_piece#76 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG382 [180] phi from play_move_down::@20 to play_move_down::@7 [phi:play_move_down::@20->play_move_down::@7]
  b7_from_b20:
  //SEG383 [180] phi (byte) current_piece_color#23 = (byte) current_piece_color#15 [phi:play_move_down::@20->play_move_down::@7#0] -- register_copy 
  //SEG384 [180] phi (byte) current_xpos#36 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:play_move_down::@20->play_move_down::@7#1] -- vbuz1=vbuc1 
    lda #3
    sta current_xpos
  //SEG385 [180] phi (byte*) current_piece_gfx#29 = (byte*) current_piece_gfx#10 [phi:play_move_down::@20->play_move_down::@7#2] -- register_copy 
  //SEG386 [180] phi (byte) current_orientation#33 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@20->play_move_down::@7#3] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG387 [180] phi (byte*) current_piece#23 = (byte*~) current_piece#76 [phi:play_move_down::@20->play_move_down::@7#4] -- register_copy 
  //SEG388 [180] phi (byte) current_ypos#31 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@20->play_move_down::@7#5] -- vbuz1=vbuc1 
    lda #0
    sta current_ypos
    jmp b7
  //SEG389 play_move_down::@7
  b7:
  //SEG390 [181] phi from play_move_down::@7 to play_move_down::@return [phi:play_move_down::@7->play_move_down::@return]
  breturn_from_b7:
  //SEG391 [181] phi (byte) current_piece_color#13 = (byte) current_piece_color#23 [phi:play_move_down::@7->play_move_down::@return#0] -- register_copy 
  //SEG392 [181] phi (byte) current_xpos#19 = (byte) current_xpos#36 [phi:play_move_down::@7->play_move_down::@return#1] -- register_copy 
  //SEG393 [181] phi (byte*) current_piece_gfx#17 = (byte*) current_piece_gfx#29 [phi:play_move_down::@7->play_move_down::@return#2] -- register_copy 
  //SEG394 [181] phi (byte) current_orientation#18 = (byte) current_orientation#33 [phi:play_move_down::@7->play_move_down::@return#3] -- register_copy 
  //SEG395 [181] phi (byte*) current_piece#13 = (byte*) current_piece#23 [phi:play_move_down::@7->play_move_down::@return#4] -- register_copy 
  //SEG396 [181] phi (byte) current_ypos#16 = (byte) current_ypos#31 [phi:play_move_down::@7->play_move_down::@return#5] -- register_copy 
  //SEG397 [181] phi (byte) current_movedown_counter#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@7->play_move_down::@return#6] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG398 [181] phi (byte) play_move_down::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@7->play_move_down::@return#7] -- vbuz1=vbuc1 
    lda #1
    sta return_3
    jmp breturn
  //SEG399 [181] phi from play_move_down::@4 to play_move_down::@return [phi:play_move_down::@4->play_move_down::@return]
  breturn_from_b4:
  //SEG400 [181] phi (byte) current_piece_color#13 = (byte) current_piece_color#11 [phi:play_move_down::@4->play_move_down::@return#0] -- register_copy 
  //SEG401 [181] phi (byte) current_xpos#19 = (byte) current_xpos#16 [phi:play_move_down::@4->play_move_down::@return#1] -- register_copy 
  //SEG402 [181] phi (byte*) current_piece_gfx#17 = (byte*) current_piece_gfx#15 [phi:play_move_down::@4->play_move_down::@return#2] -- register_copy 
  //SEG403 [181] phi (byte) current_orientation#18 = (byte) current_orientation#15 [phi:play_move_down::@4->play_move_down::@return#3] -- register_copy 
  //SEG404 [181] phi (byte*) current_piece#13 = (byte*) current_piece#11 [phi:play_move_down::@4->play_move_down::@return#4] -- register_copy 
  //SEG405 [181] phi (byte) current_ypos#16 = (byte) current_ypos#12 [phi:play_move_down::@4->play_move_down::@return#5] -- register_copy 
  //SEG406 [181] phi (byte) current_movedown_counter#12 = (byte) current_movedown_counter#10 [phi:play_move_down::@4->play_move_down::@return#6] -- register_copy 
  //SEG407 [181] phi (byte) play_move_down::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@4->play_move_down::@return#7] -- vbuz1=vbuc1 
    lda #0
    sta return_3
    jmp breturn
  //SEG408 play_move_down::@return
  breturn:
  //SEG409 [182] return 
    rts
  //SEG410 play_move_down::@6
  b6:
  //SEG411 [183] (byte) current_ypos#4 ← ++ (byte) current_ypos#12 -- vbuz1=_inc_vbuz1 
    inc current_ypos
  //SEG412 [180] phi from play_move_down::@6 to play_move_down::@7 [phi:play_move_down::@6->play_move_down::@7]
  b7_from_b6:
  //SEG413 [180] phi (byte) current_piece_color#23 = (byte) current_piece_color#11 [phi:play_move_down::@6->play_move_down::@7#0] -- register_copy 
  //SEG414 [180] phi (byte) current_xpos#36 = (byte) current_xpos#16 [phi:play_move_down::@6->play_move_down::@7#1] -- register_copy 
  //SEG415 [180] phi (byte*) current_piece_gfx#29 = (byte*) current_piece_gfx#15 [phi:play_move_down::@6->play_move_down::@7#2] -- register_copy 
  //SEG416 [180] phi (byte) current_orientation#33 = (byte) current_orientation#15 [phi:play_move_down::@6->play_move_down::@7#3] -- register_copy 
  //SEG417 [180] phi (byte*) current_piece#23 = (byte*) current_piece#11 [phi:play_move_down::@6->play_move_down::@7#4] -- register_copy 
  //SEG418 [180] phi (byte) current_ypos#31 = (byte) current_ypos#4 [phi:play_move_down::@6->play_move_down::@7#5] -- register_copy 
    jmp b7
}
//SEG419 spawn_current
spawn_current: {
    .label _1 = $6f
    .label _3 = $6d
    .label piece_idx = $2a
  //SEG420 [185] phi from spawn_current to spawn_current::@1 [phi:spawn_current->spawn_current::@1]
  b1_from_spawn_current:
  //SEG421 [185] phi (byte) spawn_current::piece_idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 7 [phi:spawn_current->spawn_current::@1#0] -- vbuz1=vbuc1 
    lda #7
    sta piece_idx
    jmp b1
  //SEG422 spawn_current::@1
  b1:
  //SEG423 [186] if((byte) spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto spawn_current::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda piece_idx
    cmp #7
    beq b2_from_b1
    jmp b3
  //SEG424 spawn_current::@3
  b3:
  //SEG425 [187] (byte~) spawn_current::$3 ← (byte) spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda piece_idx
    asl
    sta _3
  //SEG426 [188] (byte*) current_piece_gfx#10 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuz1=pptc1_derefidx_vbuz2_plus_0 
    ldy _3
    lda PIECES,y
    sta current_piece_gfx
    lda PIECES+1,y
    sta current_piece_gfx+1
  //SEG427 [189] (byte) current_piece_color#15 ← *((const byte[]) PIECES_COLORS#0 + (byte) spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy piece_idx
    lda PIECES_COLORS,y
    sta current_piece_color
    jmp breturn
  //SEG428 spawn_current::@return
  breturn:
  //SEG429 [190] return 
    rts
  //SEG430 [191] phi from spawn_current::@1 to spawn_current::@2 [phi:spawn_current::@1->spawn_current::@2]
  b2_from_b1:
    jmp b2
  //SEG431 spawn_current::@2
  b2:
  //SEG432 [192] call sid_rnd 
    jsr sid_rnd
  //SEG433 [193] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0 -- vbuz1=vbuz2 
    lda sid_rnd.return
    sta sid_rnd.return_2
    jmp b7
  //SEG434 spawn_current::@7
  b7:
  //SEG435 [194] (byte~) spawn_current::$1 ← (byte) sid_rnd::return#2 -- vbuz1=vbuz2 
    lda sid_rnd.return_2
    sta _1
  //SEG436 [195] (byte) spawn_current::piece_idx#1 ← (byte~) spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and _1
    sta piece_idx
  //SEG437 [185] phi from spawn_current::@7 to spawn_current::@1 [phi:spawn_current::@7->spawn_current::@1]
  b1_from_b7:
  //SEG438 [185] phi (byte) spawn_current::piece_idx#2 = (byte) spawn_current::piece_idx#1 [phi:spawn_current::@7->spawn_current::@1#0] -- register_copy 
    jmp b1
}
//SEG439 sid_rnd
sid_rnd: {
    .label return = $70
    .label return_2 = $6e
  //SEG440 [196] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuz1=_deref_pbuc1 
    lda SID_VOICE3_OSC
    sta return
    jmp breturn
  //SEG441 sid_rnd::@return
  breturn:
  //SEG442 [197] return 
    rts
}
//SEG443 remove_lines
remove_lines: {
    .label c = $71
    .label r = $2c
    .label w = $2f
    .label x = $2d
    .label y = $2b
    .label full = $2e
  //SEG444 [199] phi from remove_lines to remove_lines::@1 [phi:remove_lines->remove_lines::@1]
  b1_from_remove_lines:
  //SEG445 [199] phi (byte) remove_lines::y#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:remove_lines->remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG446 [199] phi (byte) remove_lines::w#12 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:remove_lines->remove_lines::@1#1] -- vbuz1=vbuc1 
    lda #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    sta w
  //SEG447 [199] phi (byte) remove_lines::r#3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:remove_lines->remove_lines::@1#2] -- vbuz1=vbuc1 
    lda #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    sta r
    jmp b1
  //SEG448 [199] phi from remove_lines::@4 to remove_lines::@1 [phi:remove_lines::@4->remove_lines::@1]
  b1_from_b4:
  //SEG449 [199] phi (byte) remove_lines::y#8 = (byte) remove_lines::y#1 [phi:remove_lines::@4->remove_lines::@1#0] -- register_copy 
  //SEG450 [199] phi (byte) remove_lines::w#12 = (byte) remove_lines::w#11 [phi:remove_lines::@4->remove_lines::@1#1] -- register_copy 
  //SEG451 [199] phi (byte) remove_lines::r#3 = (byte) remove_lines::r#1 [phi:remove_lines::@4->remove_lines::@1#2] -- register_copy 
    jmp b1
  //SEG452 remove_lines::@1
  b1:
  //SEG453 [200] phi from remove_lines::@1 to remove_lines::@2 [phi:remove_lines::@1->remove_lines::@2]
  b2_from_b1:
  //SEG454 [200] phi (byte) remove_lines::full#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:remove_lines::@1->remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta full
  //SEG455 [200] phi (byte) remove_lines::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:remove_lines::@1->remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG456 [200] phi (byte) remove_lines::w#4 = (byte) remove_lines::w#12 [phi:remove_lines::@1->remove_lines::@2#2] -- register_copy 
  //SEG457 [200] phi (byte) remove_lines::r#2 = (byte) remove_lines::r#3 [phi:remove_lines::@1->remove_lines::@2#3] -- register_copy 
    jmp b2
  //SEG458 [200] phi from remove_lines::@3 to remove_lines::@2 [phi:remove_lines::@3->remove_lines::@2]
  b2_from_b3:
  //SEG459 [200] phi (byte) remove_lines::full#4 = (byte) remove_lines::full#2 [phi:remove_lines::@3->remove_lines::@2#0] -- register_copy 
  //SEG460 [200] phi (byte) remove_lines::x#2 = (byte) remove_lines::x#1 [phi:remove_lines::@3->remove_lines::@2#1] -- register_copy 
  //SEG461 [200] phi (byte) remove_lines::w#4 = (byte) remove_lines::w#1 [phi:remove_lines::@3->remove_lines::@2#2] -- register_copy 
  //SEG462 [200] phi (byte) remove_lines::r#2 = (byte) remove_lines::r#1 [phi:remove_lines::@3->remove_lines::@2#3] -- register_copy 
    jmp b2
  //SEG463 remove_lines::@2
  b2:
  //SEG464 [201] (byte) remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy r
    lda playfield,y
    sta c
  //SEG465 [202] (byte) remove_lines::r#1 ← -- (byte) remove_lines::r#2 -- vbuz1=_dec_vbuz1 
    dec r
  //SEG466 [203] if((byte) remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto remove_lines::@17 -- vbuz1_neq_0_then_la1 
    lda c
    cmp #0
    bne b17_from_b2
  //SEG467 [204] phi from remove_lines::@2 to remove_lines::@3 [phi:remove_lines::@2->remove_lines::@3]
  b3_from_b2:
  //SEG468 [204] phi (byte) remove_lines::full#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:remove_lines::@2->remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta full
    jmp b3
  //SEG469 remove_lines::@3
  b3:
  //SEG470 [205] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::w#4) ← (byte) remove_lines::c#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda c
    ldy w
    sta playfield,y
  //SEG471 [206] (byte) remove_lines::w#1 ← -- (byte) remove_lines::w#4 -- vbuz1=_dec_vbuz1 
    dec w
  //SEG472 [207] (byte) remove_lines::x#1 ← ++ (byte) remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG473 [208] if((byte) remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #PLAYFIELD_COLS-1+1
    bne b2_from_b3
    jmp b9
  //SEG474 remove_lines::@9
  b9:
  //SEG475 [209] if((byte) remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda full
    cmp #1
    bne b4_from_b9
    jmp b10
  //SEG476 remove_lines::@10
  b10:
  //SEG477 [210] (byte) remove_lines::w#2 ← (byte) remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc w
    sta w
  //SEG478 [211] phi from remove_lines::@10 remove_lines::@9 to remove_lines::@4 [phi:remove_lines::@10/remove_lines::@9->remove_lines::@4]
  b4_from_b10:
  b4_from_b9:
  //SEG479 [211] phi (byte) remove_lines::w#11 = (byte) remove_lines::w#2 [phi:remove_lines::@10/remove_lines::@9->remove_lines::@4#0] -- register_copy 
    jmp b4
  //SEG480 remove_lines::@4
  b4:
  //SEG481 [212] (byte) remove_lines::y#1 ← ++ (byte) remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG482 [213] if((byte) remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b4
  //SEG483 [214] phi from remove_lines::@4 remove_lines::@6 to remove_lines::@5 [phi:remove_lines::@4/remove_lines::@6->remove_lines::@5]
  b5_from_b4:
  b5_from_b6:
  //SEG484 [214] phi (byte) remove_lines::w#6 = (byte) remove_lines::w#11 [phi:remove_lines::@4/remove_lines::@6->remove_lines::@5#0] -- register_copy 
    jmp b5
  //SEG485 remove_lines::@5
  b5:
  //SEG486 [215] if((byte) remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto remove_lines::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda w
    cmp #$ff
    bne b6
    jmp breturn
  //SEG487 remove_lines::@return
  breturn:
  //SEG488 [216] return 
    rts
  //SEG489 remove_lines::@6
  b6:
  //SEG490 [217] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy w
    lda #0
    sta playfield,y
  //SEG491 [218] (byte) remove_lines::w#3 ← -- (byte) remove_lines::w#6 -- vbuz1=_dec_vbuz1 
    dec w
    jmp b5_from_b6
  //SEG492 [219] phi from remove_lines::@2 to remove_lines::@17 [phi:remove_lines::@2->remove_lines::@17]
  b17_from_b2:
    jmp b17
  //SEG493 remove_lines::@17
  b17:
  //SEG494 [204] phi from remove_lines::@17 to remove_lines::@3 [phi:remove_lines::@17->remove_lines::@3]
  b3_from_b17:
  //SEG495 [204] phi (byte) remove_lines::full#2 = (byte) remove_lines::full#4 [phi:remove_lines::@17->remove_lines::@3#0] -- register_copy 
    jmp b3
}
//SEG496 lock_current
lock_current: {
    .label ypos2 = $30
    .label playfield_line = $72
    .label col = $33
    .label i = $74
    .label c = $34
    .label l = $31
    .label i_2 = $32
    .label i_3 = $32
    .label i_7 = $32
    .label i_9 = $32
  //SEG497 [220] (byte) lock_current::ypos2#0 ← (byte) current_ypos#12 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda current_ypos
    asl
    sta ypos2
  //SEG498 [221] phi from lock_current to lock_current::@1 [phi:lock_current->lock_current::@1]
  b1_from_lock_current:
  //SEG499 [221] phi (byte) lock_current::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lock_current->lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG500 [221] phi (byte) lock_current::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lock_current->lock_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i_3
  //SEG501 [221] phi (byte) lock_current::ypos2#2 = (byte) lock_current::ypos2#0 [phi:lock_current->lock_current::@1#2] -- register_copy 
    jmp b1
  //SEG502 lock_current::@1
  b1:
  //SEG503 [222] (byte*) lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) lock_current::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG504 [223] (byte) lock_current::col#0 ← (byte) current_xpos#16 -- vbuz1=vbuz2 
    lda current_xpos
    sta col
  //SEG505 [224] phi from lock_current::@1 to lock_current::@2 [phi:lock_current::@1->lock_current::@2]
  b2_from_b1:
  //SEG506 [224] phi (byte) lock_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lock_current::@1->lock_current::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG507 [224] phi (byte) lock_current::col#2 = (byte) lock_current::col#0 [phi:lock_current::@1->lock_current::@2#1] -- register_copy 
  //SEG508 [224] phi (byte) lock_current::i#2 = (byte) lock_current::i#3 [phi:lock_current::@1->lock_current::@2#2] -- register_copy 
    jmp b2
  //SEG509 lock_current::@2
  b2:
  //SEG510 [225] (byte) lock_current::i#1 ← ++ (byte) lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG511 [226] if(*((byte*) current_piece_gfx#15 + (byte) lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (current_piece_gfx),y
    cmp #0
    beq b3
    jmp b4
  //SEG512 lock_current::@4
  b4:
  //SEG513 [227] *((byte*) lock_current::playfield_line#0 + (byte) lock_current::col#2) ← (byte) current_piece_color#11 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda current_piece_color
    ldy col
    sta (playfield_line),y
    jmp b3
  //SEG514 lock_current::@3
  b3:
  //SEG515 [228] (byte) lock_current::col#1 ← ++ (byte) lock_current::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG516 [229] (byte) lock_current::c#1 ← ++ (byte) lock_current::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG517 [230] if((byte) lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto lock_current::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #4
    bne b8
    jmp b5
  //SEG518 lock_current::@5
  b5:
  //SEG519 [231] (byte) lock_current::ypos2#1 ← (byte) lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG520 [232] (byte) lock_current::l#1 ← ++ (byte) lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG521 [233] if((byte) lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto lock_current::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b7
    jmp breturn
  //SEG522 lock_current::@return
  breturn:
  //SEG523 [234] return 
    rts
  //SEG524 lock_current::@7
  b7:
  //SEG525 [235] (byte~) lock_current::i#7 ← (byte) lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_7
  //SEG526 [221] phi from lock_current::@7 to lock_current::@1 [phi:lock_current::@7->lock_current::@1]
  b1_from_b7:
  //SEG527 [221] phi (byte) lock_current::l#6 = (byte) lock_current::l#1 [phi:lock_current::@7->lock_current::@1#0] -- register_copy 
  //SEG528 [221] phi (byte) lock_current::i#3 = (byte~) lock_current::i#7 [phi:lock_current::@7->lock_current::@1#1] -- register_copy 
  //SEG529 [221] phi (byte) lock_current::ypos2#2 = (byte) lock_current::ypos2#1 [phi:lock_current::@7->lock_current::@1#2] -- register_copy 
    jmp b1
  //SEG530 lock_current::@8
  b8:
  //SEG531 [236] (byte~) lock_current::i#9 ← (byte) lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_9
  //SEG532 [224] phi from lock_current::@8 to lock_current::@2 [phi:lock_current::@8->lock_current::@2]
  b2_from_b8:
  //SEG533 [224] phi (byte) lock_current::c#2 = (byte) lock_current::c#1 [phi:lock_current::@8->lock_current::@2#0] -- register_copy 
  //SEG534 [224] phi (byte) lock_current::col#2 = (byte) lock_current::col#1 [phi:lock_current::@8->lock_current::@2#1] -- register_copy 
  //SEG535 [224] phi (byte) lock_current::i#2 = (byte~) lock_current::i#9 [phi:lock_current::@8->lock_current::@2#2] -- register_copy 
    jmp b2
}
//SEG536 keyboard_event_pressed
keyboard_event_pressed: {
    .label _0 = $75
    .label _1 = $77
    .label return = $7c
    .label return_1 = $7e
    .label return_2 = $80
    .label row_bits = $76
    .label return_10 = $82
    .label keycode = $35
    .label return_11 = $78
    .label return_12 = $69
  //SEG537 [238] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_ror_3 
    lda keycode
    lsr
    lsr
    lsr
    sta _0
  //SEG538 [239] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda keyboard_scan_values,y
    sta row_bits
  //SEG539 [240] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and keycode
    sta _1
  //SEG540 [241] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda row_bits
    ldy _1
    and keyboard_matrix_col_bitmask,y
    sta return_11
    jmp breturn
  //SEG541 keyboard_event_pressed::@return
  breturn:
  //SEG542 [242] return 
    rts
}
//SEG543 keyboard_event_get
keyboard_event_get: {
    .label return = $36
    .label return_3 = $49
  //SEG544 [243] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda keyboard_events_size
    cmp #0
    beq breturn_from_keyboard_event_get
    jmp b3
  //SEG545 keyboard_event_get::@3
  b3:
  //SEG546 [244] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec keyboard_events_size
  //SEG547 [245] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy keyboard_events_size
    lda keyboard_events,y
    sta return
  //SEG548 [246] phi from keyboard_event_get::@3 to keyboard_event_get::@return [phi:keyboard_event_get::@3->keyboard_event_get::@return]
  breturn_from_b3:
  //SEG549 [246] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@3->keyboard_event_get::@return#0] -- register_copy 
  //SEG550 [246] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@3->keyboard_event_get::@return#1] -- register_copy 
    jmp breturn
  //SEG551 [246] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  breturn_from_keyboard_event_get:
  //SEG552 [246] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
  //SEG553 [246] phi (byte) keyboard_event_get::return#2 = (byte/word/signed word/dword/signed dword) 255 [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuz1=vbuc1 
    lda #$ff
    sta return
    jmp breturn
  //SEG554 keyboard_event_get::@return
  breturn:
  //SEG555 [247] return 
    rts
}
//SEG556 keyboard_event_scan
keyboard_event_scan: {
    .label _3 = $84
    .label _4 = $85
    .label _11 = $87
    .label _14 = $7d
    .label _18 = $7f
    .label _22 = $81
    .label _26 = $83
    .label row_scan = $7b
    .label keycode = $39
    .label row = $37
    .label col = $38
    .label event_type = $86
  //SEG557 [249] phi from keyboard_event_scan to keyboard_event_scan::@1 [phi:keyboard_event_scan->keyboard_event_scan::@1]
  b1_from_keyboard_event_scan:
  //SEG558 [249] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@1#0] -- register_copy 
  //SEG559 [249] phi (byte) keyboard_event_scan::keycode#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keycode
  //SEG560 [249] phi (byte) keyboard_event_scan::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta row
    jmp b1
  //SEG561 [249] phi from keyboard_event_scan::@3 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1]
  b1_from_b3:
  //SEG562 [249] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#0] -- register_copy 
  //SEG563 [249] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#1] -- register_copy 
  //SEG564 [249] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#2] -- register_copy 
    jmp b1
  //SEG565 keyboard_event_scan::@1
  b1:
  //SEG566 [250] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuz1=vbuz2 
    lda row
    sta keyboard_matrix_read.rowid
  //SEG567 [251] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG568 [252] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return
    sta keyboard_matrix_read.return_2
    jmp b25
  //SEG569 keyboard_event_scan::@25
  b25:
  //SEG570 [253] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return_2
    sta row_scan
  //SEG571 [254] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda row_scan
    ldy row
    cmp keyboard_scan_values,y
    bne b4_from_b25
    jmp b13
  //SEG572 keyboard_event_scan::@13
  b13:
  //SEG573 [255] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lda #8
    clc
    adc keycode
    sta keycode
  //SEG574 [256] phi from keyboard_event_scan::@13 keyboard_event_scan::@19 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3]
  b3_from_b13:
  b3_from_b19:
  //SEG575 [256] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#0] -- register_copy 
  //SEG576 [256] phi (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#1 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#1] -- register_copy 
    jmp b3
  //SEG577 keyboard_event_scan::@3
  b3:
  //SEG578 [257] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG579 [258] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda row
    cmp #8
    bne b1_from_b3
  //SEG580 [259] phi from keyboard_event_scan::@3 to keyboard_event_scan::@20 [phi:keyboard_event_scan::@3->keyboard_event_scan::@20]
  b20_from_b3:
    jmp b20
  //SEG581 keyboard_event_scan::@20
  b20:
  //SEG582 [260] call keyboard_event_pressed 
  //SEG583 [237] phi from keyboard_event_scan::@20 to keyboard_event_pressed [phi:keyboard_event_scan::@20->keyboard_event_pressed]
  keyboard_event_pressed_from_b20:
  //SEG584 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@20->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG585 [261] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_11
    sta keyboard_event_pressed.return
    jmp b26
  //SEG586 keyboard_event_scan::@26
  b26:
  //SEG587 [262] (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return
    sta _14
  //SEG588 [263] if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9 -- vbuz1_eq_0_then_la1 
    lda _14
    cmp #0
    beq b9_from_b26
  //SEG589 [264] phi from keyboard_event_scan::@26 to keyboard_event_scan::@21 [phi:keyboard_event_scan::@26->keyboard_event_scan::@21]
  b21_from_b26:
    jmp b21
  //SEG590 keyboard_event_scan::@21
  b21:
  //SEG591 [265] phi from keyboard_event_scan::@21 keyboard_event_scan::@26 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@21/keyboard_event_scan::@26->keyboard_event_scan::@9]
  b9_from_b21:
  b9_from_b26:
    jmp b9
  //SEG592 keyboard_event_scan::@9
  b9:
  //SEG593 [266] call keyboard_event_pressed 
  //SEG594 [237] phi from keyboard_event_scan::@9 to keyboard_event_pressed [phi:keyboard_event_scan::@9->keyboard_event_pressed]
  keyboard_event_pressed_from_b9:
  //SEG595 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@9->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG596 [267] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_11
    sta keyboard_event_pressed.return_1
    jmp b27
  //SEG597 keyboard_event_scan::@27
  b27:
  //SEG598 [268] (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#1 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_1
    sta _18
  //SEG599 [269] if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10 -- vbuz1_eq_0_then_la1 
    lda _18
    cmp #0
    beq b10_from_b27
  //SEG600 [270] phi from keyboard_event_scan::@27 to keyboard_event_scan::@22 [phi:keyboard_event_scan::@27->keyboard_event_scan::@22]
  b22_from_b27:
    jmp b22
  //SEG601 keyboard_event_scan::@22
  b22:
  //SEG602 [271] phi from keyboard_event_scan::@22 keyboard_event_scan::@27 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@22/keyboard_event_scan::@27->keyboard_event_scan::@10]
  b10_from_b22:
  b10_from_b27:
    jmp b10
  //SEG603 keyboard_event_scan::@10
  b10:
  //SEG604 [272] call keyboard_event_pressed 
  //SEG605 [237] phi from keyboard_event_scan::@10 to keyboard_event_pressed [phi:keyboard_event_scan::@10->keyboard_event_pressed]
  keyboard_event_pressed_from_b10:
  //SEG606 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@10->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG607 [273] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_11
    sta keyboard_event_pressed.return_2
    jmp b28
  //SEG608 keyboard_event_scan::@28
  b28:
  //SEG609 [274] (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#2 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_2
    sta _22
  //SEG610 [275] if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11 -- vbuz1_eq_0_then_la1 
    lda _22
    cmp #0
    beq b11_from_b28
  //SEG611 [276] phi from keyboard_event_scan::@28 to keyboard_event_scan::@23 [phi:keyboard_event_scan::@28->keyboard_event_scan::@23]
  b23_from_b28:
    jmp b23
  //SEG612 keyboard_event_scan::@23
  b23:
  //SEG613 [277] phi from keyboard_event_scan::@23 keyboard_event_scan::@28 to keyboard_event_scan::@11 [phi:keyboard_event_scan::@23/keyboard_event_scan::@28->keyboard_event_scan::@11]
  b11_from_b23:
  b11_from_b28:
    jmp b11
  //SEG614 keyboard_event_scan::@11
  b11:
  //SEG615 [278] call keyboard_event_pressed 
  //SEG616 [237] phi from keyboard_event_scan::@11 to keyboard_event_pressed [phi:keyboard_event_scan::@11->keyboard_event_pressed]
  keyboard_event_pressed_from_b11:
  //SEG617 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@11->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG618 [279] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_11
    sta keyboard_event_pressed.return_10
    jmp b29
  //SEG619 keyboard_event_scan::@29
  b29:
  //SEG620 [280] (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_10
    sta _26
  //SEG621 [281] if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return -- vbuz1_eq_0_then_la1 
    lda _26
    cmp #0
    beq breturn
  //SEG622 [282] phi from keyboard_event_scan::@29 to keyboard_event_scan::@24 [phi:keyboard_event_scan::@29->keyboard_event_scan::@24]
  b24_from_b29:
    jmp b24
  //SEG623 keyboard_event_scan::@24
  b24:
    jmp breturn
  //SEG624 keyboard_event_scan::@return
  breturn:
  //SEG625 [283] return 
    rts
  //SEG626 [284] phi from keyboard_event_scan::@25 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4]
  b4_from_b25:
  //SEG627 [284] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#0] -- register_copy 
  //SEG628 [284] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#1] -- register_copy 
  //SEG629 [284] phi (byte) keyboard_event_scan::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#2] -- vbuz1=vbuc1 
    lda #0
    sta col
    jmp b4
  //SEG630 [284] phi from keyboard_event_scan::@5 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4]
  b4_from_b5:
  //SEG631 [284] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#0] -- register_copy 
  //SEG632 [284] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#1] -- register_copy 
  //SEG633 [284] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#2] -- register_copy 
    jmp b4
  //SEG634 keyboard_event_scan::@4
  b4:
  //SEG635 [285] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuz1=vbuz2_bxor_pbuc1_derefidx_vbuz3 
    lda row_scan
    ldy row
    eor keyboard_scan_values,y
    sta _3
  //SEG636 [286] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda _3
    ldy col
    and keyboard_matrix_col_bitmask,y
    sta _4
  //SEG637 [287] if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5 -- vbuz1_eq_0_then_la1 
    lda _4
    cmp #0
    beq b5_from_b4
    jmp b15
  //SEG638 keyboard_event_scan::@15
  b15:
  //SEG639 [288] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda keyboard_events_size
    cmp #8
    beq b5_from_b15
    jmp b16
  //SEG640 keyboard_event_scan::@16
  b16:
  //SEG641 [289] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda row_scan
    ldy col
    and keyboard_matrix_col_bitmask,y
    sta event_type
  //SEG642 [290] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7 -- vbuz1_eq_0_then_la1 
    lda event_type
    cmp #0
    beq b7
    jmp b17
  //SEG643 keyboard_event_scan::@17
  b17:
  //SEG644 [291] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda keycode
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG645 [292] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
  //SEG646 [293] phi from keyboard_event_scan::@15 keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@7 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5]
  b5_from_b15:
  b5_from_b17:
  b5_from_b4:
  b5_from_b7:
  //SEG647 [293] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#10 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5#0] -- register_copy 
    jmp b5
  //SEG648 keyboard_event_scan::@5
  b5:
  //SEG649 [294] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc keycode
  //SEG650 [295] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG651 [296] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda col
    cmp #8
    bne b4_from_b5
    jmp b19
  //SEG652 keyboard_event_scan::@19
  b19:
  //SEG653 [297] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda row_scan
    ldy row
    sta keyboard_scan_values,y
    jmp b3_from_b19
  //SEG654 keyboard_event_scan::@7
  b7:
  //SEG655 [298] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuz1=vbuz2_bor_vbuc1 
    lda #$40
    ora keycode
    sta _11
  //SEG656 [299] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$11 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _11
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG657 [300] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
    jmp b5_from_b7
}
//SEG658 keyboard_matrix_read
keyboard_matrix_read: {
    .label return = $88
    .label rowid = $79
    .label return_2 = $7a
  //SEG659 [301] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy rowid
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
  //SEG660 [302] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuz1=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    sta return
    jmp breturn
  //SEG661 keyboard_matrix_read::@return
  breturn:
  //SEG662 [303] return 
    rts
}
//SEG663 tables_init
tables_init: {
    .label _1 = $89
    .label pli = $3c
    .label idx = $3e
    .label j = $3b
  //SEG664 [305] phi from tables_init to tables_init::@1 [phi:tables_init->tables_init::@1]
  b1_from_tables_init:
  //SEG665 [305] phi (byte) tables_init::idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:tables_init->tables_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta idx
  //SEG666 [305] phi (byte*) tables_init::pli#2 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 [phi:tables_init->tables_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta pli
    lda #>playfield
    sta pli+1
  //SEG667 [305] phi (byte) tables_init::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:tables_init->tables_init::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b1
  //SEG668 [305] phi from tables_init::@1 to tables_init::@1 [phi:tables_init::@1->tables_init::@1]
  b1_from_b1:
  //SEG669 [305] phi (byte) tables_init::idx#2 = (byte) tables_init::idx#1 [phi:tables_init::@1->tables_init::@1#0] -- register_copy 
  //SEG670 [305] phi (byte*) tables_init::pli#2 = (byte*) tables_init::pli#1 [phi:tables_init::@1->tables_init::@1#1] -- register_copy 
  //SEG671 [305] phi (byte) tables_init::j#2 = (byte) tables_init::j#1 [phi:tables_init::@1->tables_init::@1#2] -- register_copy 
    jmp b1
  //SEG672 tables_init::@1
  b1:
  //SEG673 [306] (byte~) tables_init::$1 ← (byte) tables_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda j
    asl
    sta _1
  //SEG674 [307] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) tables_init::$1) ← (byte*) tables_init::pli#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy _1
    lda pli
    sta playfield_lines,y
    lda pli+1
    sta playfield_lines+1,y
  //SEG675 [308] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) tables_init::j#2) ← (byte) tables_init::idx#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda idx
    ldy j
    sta playfield_lines_idx,y
  //SEG676 [309] (byte*) tables_init::pli#1 ← (byte*) tables_init::pli#2 + (const byte) PLAYFIELD_COLS#0 -- pbuz1=pbuz1_plus_vbuc1 
    lda pli
    clc
    adc #PLAYFIELD_COLS
    sta pli
    bcc !+
    inc pli+1
  !:
  //SEG677 [310] (byte) tables_init::idx#1 ← (byte) tables_init::idx#2 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc idx
    sta idx
  //SEG678 [311] (byte) tables_init::j#1 ← ++ (byte) tables_init::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG679 [312] if((byte) tables_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto tables_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b1
    jmp b2
  //SEG680 tables_init::@2
  b2:
  //SEG681 [313] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
    jmp breturn
  //SEG682 tables_init::@return
  breturn:
  //SEG683 [314] return 
    rts
}
//SEG684 render_init
render_init: {
    .label _5 = $8a
    .label _10 = $8b
    .label li = $40
    .label i = $3f
    .label c = $45
    .label line = $42
    .label l = $44
  //SEG685 [316] call fill 
  //SEG686 [335] phi from render_init to fill [phi:render_init->fill]
  fill_from_render_init:
  //SEG687 [335] phi (byte) fill::val#3 = (byte/word/signed word/dword/signed dword) 160 [phi:render_init->fill#0] -- vbuz1=vbuc1 
    lda #$a0
    sta fill.val
  //SEG688 [335] phi (byte*) fill::addr#0 = (const byte*) SCREEN#0 [phi:render_init->fill#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta fill.addr
    lda #>SCREEN
    sta fill.addr+1
    jsr fill
  //SEG689 [317] phi from render_init to render_init::@7 [phi:render_init->render_init::@7]
  b7_from_render_init:
    jmp b7
  //SEG690 render_init::@7
  b7:
  //SEG691 [318] call fill 
  //SEG692 [335] phi from render_init::@7 to fill [phi:render_init::@7->fill]
  fill_from_b7:
  //SEG693 [335] phi (byte) fill::val#3 = (const byte) BLACK#0 [phi:render_init::@7->fill#0] -- vbuz1=vbuc1 
    lda #BLACK
    sta fill.val
  //SEG694 [335] phi (byte*) fill::addr#0 = (const byte*) COLS#0 [phi:render_init::@7->fill#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta fill.addr
    lda #>COLS
    sta fill.addr+1
    jsr fill
  //SEG695 [319] phi from render_init::@7 to render_init::@1 [phi:render_init::@7->render_init::@1]
  b1_from_b7:
  //SEG696 [319] phi (byte*) render_init::li#2 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15 [phi:render_init::@7->render_init::@1#0] -- pbuz1=pbuc1 
    lda #<COLS+$28+$f
    sta li
    lda #>COLS+$28+$f
    sta li+1
  //SEG697 [319] phi (byte) render_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@7->render_init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG698 [319] phi from render_init::@1 to render_init::@1 [phi:render_init::@1->render_init::@1]
  b1_from_b1:
  //SEG699 [319] phi (byte*) render_init::li#2 = (byte*) render_init::li#1 [phi:render_init::@1->render_init::@1#0] -- register_copy 
  //SEG700 [319] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@1->render_init::@1#1] -- register_copy 
    jmp b1
  //SEG701 render_init::@1
  b1:
  //SEG702 [320] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _5
  //SEG703 [321] *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_init::$5) ← (byte*) render_init::li#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy _5
    lda li
    sta screen_lines,y
    lda li+1
    sta screen_lines+1,y
  //SEG704 [322] (byte*) render_init::li#1 ← (byte*) render_init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li
    clc
    adc #$28
    sta li
    bcc !+
    inc li+1
  !:
  //SEG705 [323] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG706 [324] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #PLAYFIELD_LINES+2+1
    bne b1_from_b1
  //SEG707 [325] phi from render_init::@1 to render_init::@2 [phi:render_init::@1->render_init::@2]
  b2_from_b1:
  //SEG708 [325] phi (byte) render_init::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@1->render_init::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG709 [325] phi (byte*) render_init::line#4 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14 [phi:render_init::@1->render_init::@2#1] -- pbuz1=pbuc1 
    lda #<COLS+$e
    sta line
    lda #>COLS+$e
    sta line+1
    jmp b2
  //SEG710 [325] phi from render_init::@5 to render_init::@2 [phi:render_init::@5->render_init::@2]
  b2_from_b5:
  //SEG711 [325] phi (byte) render_init::l#4 = (byte) render_init::l#1 [phi:render_init::@5->render_init::@2#0] -- register_copy 
  //SEG712 [325] phi (byte*) render_init::line#4 = (byte*) render_init::line#1 [phi:render_init::@5->render_init::@2#1] -- register_copy 
    jmp b2
  //SEG713 render_init::@2
  b2:
  //SEG714 [326] phi from render_init::@2 to render_init::@3 [phi:render_init::@2->render_init::@3]
  b3_from_b2:
  //SEG715 [326] phi (byte) render_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@2->render_init::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b3
  //SEG716 [326] phi from render_init::@3 to render_init::@3 [phi:render_init::@3->render_init::@3]
  b3_from_b3:
  //SEG717 [326] phi (byte) render_init::c#2 = (byte) render_init::c#1 [phi:render_init::@3->render_init::@3#0] -- register_copy 
    jmp b3
  //SEG718 render_init::@3
  b3:
  //SEG719 [327] (byte*~) render_init::$10 ← (byte*) render_init::line#4 + (byte) render_init::c#2 -- pbuz1=pbuz2_plus_vbuz3 
    lda c
    clc
    adc line
    sta _10
    lda #0
    adc line+1
    sta _10+1
  //SEG720 [328] *((byte*~) render_init::$10) ← (const byte) DARK_GREY#0 -- _deref_pbuz1=vbuc1 
    lda #DARK_GREY
    ldy #0
    sta (_10),y
  //SEG721 [329] (byte) render_init::c#1 ← ++ (byte) render_init::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG722 [330] if((byte) render_init::c#1!=(const byte) PLAYFIELD_COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #PLAYFIELD_COLS+1+1
    bne b3_from_b3
    jmp b5
  //SEG723 render_init::@5
  b5:
  //SEG724 [331] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG725 [332] (byte) render_init::l#1 ← ++ (byte) render_init::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG726 [333] if((byte) render_init::l#1!=(const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES+1+1
    bne b2_from_b5
    jmp breturn
  //SEG727 render_init::@return
  breturn:
  //SEG728 [334] return 
    rts
}
//SEG729 fill
fill: {
    .label end = $8d
    .label addr = $47
    .label val = $46
  //SEG730 [336] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000 -- pbuz1=pbuz2_plus_vwuc1 
    lda addr
    clc
    adc #<$3e8
    sta end
    lda addr+1
    adc #>$3e8
    sta end+1
  //SEG731 [337] phi from fill fill::@1 to fill::@1 [phi:fill/fill::@1->fill::@1]
  b1_from_fill:
  b1_from_b1:
  //SEG732 [337] phi (byte*) fill::addr#2 = (byte*) fill::addr#0 [phi:fill/fill::@1->fill::@1#0] -- register_copy 
    jmp b1
  //SEG733 fill::@1
  b1:
  //SEG734 [338] *((byte*) fill::addr#2) ← (byte) fill::val#3 -- _deref_pbuz1=vbuz2 
    lda val
    ldy #0
    sta (addr),y
  //SEG735 [339] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG736 [340] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuz2_then_la1 
    lda addr+1
    cmp end+1
    bne b1_from_b1
    lda addr
    cmp end
    bne b1_from_b1
    jmp breturn
  //SEG737 fill::@return
  breturn:
  //SEG738 [341] return 
    rts
}
//SEG739 sid_rnd_init
sid_rnd_init: {
  //SEG740 [342] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535 -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG741 [343] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    jmp breturn
  //SEG742 sid_rnd_init::@return
  breturn:
  //SEG743 [344] return 
    rts
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  keyboard_events: .fill 8, 0
  keyboard_scan_values: .fill 8, 0
  .align $40
  PIECE_T: .byte 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  .align $40
  PIECE_J: .byte 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_O: .byte 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  PIECES_COLORS: .byte WHITE, LIGHT_GREY, GREEN, LIGHT_GREY, WHITE, WHITE, GREEN
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
  screen_lines: .fill 2*(PLAYFIELD_LINES+3), 0
.pc = CHARSET "Inline"
  .var charset = LoadPicture("charset.png", List().add($000000, $ffffff, $523fa0, $77c1c9))
    .for (var c=0; c<16; c++)
        .for (var y=0;y<8; y++)
            .byte charset.getMulticolorByte(c,y)


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [15] (byte*~) current_piece_gfx#87 ← (byte*) current_piece_gfx#10 [ current_piece_gfx#87 current_piece_gfx#10 current_piece_color#15 spawn_current::$3 ] ( main:3 [ current_piece_gfx#87 current_piece_gfx#10 current_piece_color#15 spawn_current::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:109 [ spawn_current::$3 ]
Statement [18] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) [ current_piece_gfx#10 current_piece_color#15 current_piece#71 ] ( main:3 [ current_piece_gfx#10 current_piece_color#15 current_piece#71 ] ) always clobbers reg byte a 
Statement [20] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 keyboard_events_size#19 current_movedown_counter#15 ] ( main:3 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 keyboard_events_size#19 current_movedown_counter#15 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:39 [ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:58 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ]
Statement [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 254) goto main::@7 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 keyboard_events_size#19 current_movedown_counter#15 ] ( main:3 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 keyboard_events_size#19 current_movedown_counter#15 ] ) always clobbers reg byte a 
Statement [32] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$10 [ current_piece#13 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_orientation#18 current_piece_gfx#17 current_xpos#19 ] ( main:3 [ current_piece#13 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_orientation#18 current_piece_gfx#17 current_xpos#19 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:74 [ main::key_event#0 ]
Statement [37] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$11 [ current_piece#13 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#2 current_orientation#18 current_piece_gfx#17 ] ( main:3 [ current_piece#13 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#2 current_orientation#18 current_piece_gfx#17 ] ) always clobbers reg byte a 
Statement [42] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$12 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#3 ] ( main:3 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#3 ] ) always clobbers reg byte a 
Statement [48] (byte*~) current_piece_gfx#88 ← (byte*) current_piece_gfx#18 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_ypos#71 current_xpos#96 current_piece_gfx#88 ] ( main:3 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_ypos#71 current_xpos#96 current_piece_gfx#88 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ current_ypos#22 current_ypos#71 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 ]
Statement [53] (byte) render_current::ypos2#0 ← (byte) current_ypos#22 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#0 ] ( main:3::render_current:17 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#0 ] main:3::render_current:50 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 ]
Statement [56] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte) render_current::ypos2#2) [ current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::i#4 render_current::screen_line#0 ] ( main:3::render_current:17 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::i#4 render_current::screen_line#0 ] main:3::render_current:50 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::i#4 render_current::screen_line#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ render_current::l#3 render_current::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 ]
Statement [59] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_current::i#2) [ current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::i#2 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] ( main:3::render_current:17 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::i#2 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] main:3::render_current:50 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::i#2 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ render_current::c#2 render_current::c#1 ]
Statement [63] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_color#67 [ current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 render_current::i#1 ] ( main:3::render_current:17 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 render_current::i#1 ] main:3::render_current:50 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 render_current::i#1 ] ) always clobbers reg byte a 
Statement [74] (byte~) render_playfield::$1 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_playfield::l#2 render_playfield::i#3 render_playfield::$1 ] ( main:3::render_playfield:14 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 render_playfield::l#2 render_playfield::i#3 render_playfield::$1 ] main:3::render_playfield:45 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 render_playfield::l#2 render_playfield::i#3 render_playfield::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ render_playfield::l#2 render_playfield::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Statement [75] (byte*) render_playfield::line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_playfield::$1) [ render_playfield::l#2 render_playfield::i#3 render_playfield::line#0 ] ( main:3::render_playfield:14 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 render_playfield::l#2 render_playfield::i#3 render_playfield::line#0 ] main:3::render_playfield:45 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 render_playfield::l#2 render_playfield::i#3 render_playfield::line#0 ] ) always clobbers reg byte a 
Statement [77] *((byte*) render_playfield::line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) [ render_playfield::l#2 render_playfield::i#2 render_playfield::line#2 render_playfield::c#2 ] ( main:3::render_playfield:14 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 render_playfield::l#2 render_playfield::i#2 render_playfield::line#2 render_playfield::c#2 ] main:3::render_playfield:45 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 render_playfield::l#2 render_playfield::i#2 render_playfield::line#2 render_playfield::c#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:40 [ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:109 [ spawn_current::$3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:14 [ render_playfield::l#2 render_playfield::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:15 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ render_playfield::c#2 render_playfield::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:18 [ render_playfield::c#2 render_playfield::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:36 [ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:39 [ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:58 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ]
Statement [89] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#18 + (byte/signed byte/word/signed word/dword/signed dword) 16 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::$2 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:82 [ main::render#2 ]
Statement [90] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#2 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#2 ] ) always clobbers reg byte a 
Statement [95] (byte*~) current_piece#75 ← (byte*) current_piece#13 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#3 collision::ypos#3 collision::orientation#3 current_piece#75 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#3 collision::ypos#3 collision::orientation#3 current_piece#75 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ collision::ypos#4 collision::ypos#0 collision::ypos#1 collision::ypos#2 collision::ypos#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:23 [ collision::orientation#4 collision::orientation#0 collision::orientation#1 collision::orientation#2 collision::orientation#3 ]
Statement [101] (byte*) current_piece_gfx#8 ← (byte*) current_piece#13 + (byte) current_orientation#8 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#8 current_piece_gfx#8 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#8 current_piece_gfx#8 ] ) always clobbers reg byte a 
Statement [102] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#18 - (byte/signed byte/word/signed word/dword/signed dword) 16 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::$4 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::$4 ] ) always clobbers reg byte a 
Statement [103] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#1 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#1 ] ) always clobbers reg byte a 
Statement [105] (byte*) collision::piece_gfx#0 ← (byte*) current_piece#15 + (byte) collision::orientation#4 [ collision::ypos#4 collision::xpos#5 collision::piece_gfx#0 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::ypos#4 collision::xpos#5 collision::piece_gfx#0 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::ypos#4 collision::xpos#5 collision::piece_gfx#0 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::ypos#4 collision::xpos#5 collision::piece_gfx#0 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::ypos#4 collision::xpos#5 collision::piece_gfx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:78 [ main::render#1 ]
Statement [106] (byte) collision::ypos2#0 ← (byte) collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ collision::xpos#5 collision::piece_gfx#0 collision::ypos2#0 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#0 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#0 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#0 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#0 ] ) always clobbers reg byte a 
Statement [108] (byte*) collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) collision::ypos2#2) [ collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::i#3 collision::l#6 collision::playfield_line#0 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::i#3 collision::l#6 collision::playfield_line#0 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::i#3 collision::l#6 collision::playfield_line#0 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::i#3 collision::l#6 collision::playfield_line#0 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::i#3 collision::l#6 collision::playfield_line#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:26 [ collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:28 [ collision::i#2 collision::i#3 collision::i#11 collision::i#13 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:27 [ collision::l#6 collision::l#1 ]
Statement [112] if(*((byte*) collision::piece_gfx#0 + (byte) collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3 [ collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:29 [ collision::col#2 collision::col#9 collision::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:30 [ collision::c#2 collision::c#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:99 [ collision::i#1 ]
Statement [116] (byte~) collision::$7 ← (byte) collision::col#2 & (byte/word/signed word/dword/signed dword) 128 [ collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 collision::$7 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 collision::$7 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 collision::$7 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 collision::$7 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 collision::$7 ] ) always clobbers reg byte a 
Statement [119] if(*((byte*) collision::playfield_line#0 + (byte) collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3 [ collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] ) always clobbers reg byte a 
Statement [133] (byte*~) current_piece#74 ← (byte*) current_piece#13 [ current_piece#13 current_ypos#16 current_orientation#18 current_piece#74 collision::orientation#2 collision::ypos#2 collision::xpos#2 current_xpos#19 ] ( main:3::play_move_leftright:34 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_piece#74 collision::orientation#2 collision::ypos#2 collision::xpos#2 current_xpos#19 ] ) always clobbers reg byte a 
Statement [144] (byte*~) current_piece#73 ← (byte*) current_piece#13 [ current_piece#13 current_ypos#16 current_orientation#18 current_piece#73 collision::orientation#1 collision::ypos#1 collision::xpos#1 current_xpos#19 ] ( main:3::play_move_leftright:34 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_piece#73 collision::orientation#1 collision::ypos#1 collision::xpos#1 current_xpos#19 ] ) always clobbers reg byte a 
Statement [168] (byte*~) current_piece#72 ← (byte*) current_piece#11 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_piece#72 collision::orientation#0 collision::ypos#0 collision::xpos#0 ] ( main:3::play_move_down:29 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_piece#72 collision::orientation#0 collision::ypos#0 collision::xpos#0 ] ) always clobbers reg byte a 
Statement [179] (byte*~) current_piece#76 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) [ current_piece_gfx#10 current_piece_color#15 current_piece#76 ] ( main:3::play_move_down:29 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#10 current_piece_color#15 current_piece#76 ] ) always clobbers reg byte a 
Statement [187] (byte~) spawn_current::$3 ← (byte) spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ spawn_current::$3 spawn_current::piece_idx#2 ] ( main:3::spawn_current:12 [ spawn_current::$3 spawn_current::piece_idx#2 ] main:3::play_move_down:29::spawn_current:178 [ keyboard_events_size#16 main::key_event#0 spawn_current::$3 spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:42 [ spawn_current::piece_idx#2 spawn_current::piece_idx#1 ]
Statement [188] (byte*) current_piece_gfx#10 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0 [ current_piece_gfx#10 spawn_current::$3 spawn_current::piece_idx#2 ] ( main:3::spawn_current:12 [ current_piece_gfx#10 spawn_current::$3 spawn_current::piece_idx#2 ] main:3::play_move_down:29::spawn_current:178 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#10 spawn_current::$3 spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Statement [189] (byte) current_piece_color#15 ← *((const byte[]) PIECES_COLORS#0 + (byte) spawn_current::piece_idx#2) [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 ] ( main:3::spawn_current:12 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 ] main:3::play_move_down:29::spawn_current:178 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#10 current_piece_color#15 spawn_current::$3 ] ) always clobbers reg byte a 
Statement [195] (byte) spawn_current::piece_idx#1 ← (byte~) spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ spawn_current::piece_idx#1 ] ( main:3::spawn_current:12 [ spawn_current::piece_idx#1 ] main:3::play_move_down:29::spawn_current:178 [ keyboard_events_size#16 main::key_event#0 spawn_current::piece_idx#1 ] ) always clobbers reg byte a 
Statement [210] (byte) remove_lines::w#2 ← (byte) remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 [ remove_lines::y#8 remove_lines::r#1 remove_lines::w#2 ] ( main:3::play_move_down:29::remove_lines:176 [ keyboard_events_size#16 main::key_event#0 remove_lines::y#8 remove_lines::r#1 remove_lines::w#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:43 [ remove_lines::y#8 remove_lines::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:44 [ remove_lines::r#2 remove_lines::r#3 remove_lines::r#1 ]
Statement [217] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ remove_lines::w#6 ] ( main:3::play_move_down:29::remove_lines:176 [ keyboard_events_size#16 main::key_event#0 remove_lines::w#6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:47 [ remove_lines::w#6 remove_lines::w#4 remove_lines::w#12 remove_lines::w#11 remove_lines::w#1 remove_lines::w#2 remove_lines::w#3 ]
Statement [220] (byte) lock_current::ypos2#0 ← (byte) current_ypos#12 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#0 ] ( main:3::play_move_down:29::lock_current:174 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#0 ] ) always clobbers reg byte a 
Statement [222] (byte*) lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) lock_current::ypos2#2) [ current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::i#3 lock_current::l#6 lock_current::playfield_line#0 ] ( main:3::play_move_down:29::lock_current:174 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::i#3 lock_current::l#6 lock_current::playfield_line#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:48 [ lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:50 [ lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:49 [ lock_current::l#6 lock_current::l#1 ]
Statement [226] if(*((byte*) current_piece_gfx#15 + (byte) lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto lock_current::@3 [ current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::l#6 lock_current::playfield_line#0 lock_current::col#2 lock_current::c#2 lock_current::i#1 ] ( main:3::play_move_down:29::lock_current:174 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::l#6 lock_current::playfield_line#0 lock_current::col#2 lock_current::c#2 lock_current::i#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:51 [ lock_current::col#2 lock_current::col#0 lock_current::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:52 [ lock_current::c#2 lock_current::c#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:116 [ lock_current::i#1 ]
Statement [227] *((byte*) lock_current::playfield_line#0 + (byte) lock_current::col#2) ← (byte) current_piece_color#11 [ current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::l#6 lock_current::playfield_line#0 lock_current::col#2 lock_current::c#2 lock_current::i#1 ] ( main:3::play_move_down:29::lock_current:174 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::l#6 lock_current::playfield_line#0 lock_current::col#2 lock_current::c#2 lock_current::i#1 ] ) always clobbers reg byte a 
Statement [238] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ( main:3::play_move_down:29::keyboard_event_pressed:154 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#10 play_move_down::movedown#10 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:260 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:266 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:272 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:278 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:53 [ keyboard_event_pressed::keycode#5 ]
Statement [240] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:3::play_move_down:29::keyboard_event_pressed:154 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#10 play_move_down::movedown#10 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:260 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:266 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:272 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:278 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:118 [ keyboard_event_pressed::row_bits#0 ]
Statement [241] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#11 ] ( main:3::play_move_down:29::keyboard_event_pressed:154 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#10 play_move_down::movedown#10 keyboard_event_pressed::return#11 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:260 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:266 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:272 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:278 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::return#11 ] ) always clobbers reg byte a 
Statement [255] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 [ keyboard_event_scan::row#2 keyboard_events_size#29 keyboard_event_scan::keycode#1 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_events_size#29 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:55 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Statement [285] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$3 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:123 [ keyboard_event_scan::row_scan#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:56 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:57 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ]
Statement [286] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$4 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$4 ] ) always clobbers reg byte a 
Statement [289] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [291] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte a 
Statement [297] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#30 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#30 ] ) always clobbers reg byte a 
Statement [298] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$11 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$11 ] ) always clobbers reg byte a 
Statement [301] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:3::keyboard_event_scan:23::keyboard_matrix_read:251 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 ] ) always clobbers reg byte a 
Statement [302] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:3::keyboard_event_scan:23::keyboard_matrix_read:251 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [306] (byte~) tables_init::$1 ← (byte) tables_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 tables_init::$1 ] ( main:3::tables_init:10 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 tables_init::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:59 [ tables_init::j#2 tables_init::j#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:62 [ tables_init::idx#2 tables_init::idx#1 ]
Statement [307] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) tables_init::$1) ← (byte*) tables_init::pli#2 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 ] ( main:3::tables_init:10 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 ] ) always clobbers reg byte a 
Statement [308] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) tables_init::j#2) ← (byte) tables_init::idx#2 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 ] ( main:3::tables_init:10 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 ] ) always clobbers reg byte a 
Statement [309] (byte*) tables_init::pli#1 ← (byte*) tables_init::pli#2 + (const byte) PLAYFIELD_COLS#0 [ tables_init::j#2 tables_init::idx#2 tables_init::pli#1 ] ( main:3::tables_init:10 [ tables_init::j#2 tables_init::idx#2 tables_init::pli#1 ] ) always clobbers reg byte a 
Statement [310] (byte) tables_init::idx#1 ← (byte) tables_init::idx#2 + (const byte) PLAYFIELD_COLS#0 [ tables_init::j#2 tables_init::pli#1 tables_init::idx#1 ] ( main:3::tables_init:10 [ tables_init::j#2 tables_init::pli#1 tables_init::idx#1 ] ) always clobbers reg byte a 
Statement [313] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 [ ] ( main:3::tables_init:10 [ ] ) always clobbers reg byte a 
Statement [320] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_init::i#2 render_init::li#2 render_init::$5 ] ( main:3::render_init:8 [ render_init::i#2 render_init::li#2 render_init::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:63 [ render_init::i#2 render_init::i#1 ]
Statement [321] *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_init::$5) ← (byte*) render_init::li#2 [ render_init::i#2 render_init::li#2 ] ( main:3::render_init:8 [ render_init::i#2 render_init::li#2 ] ) always clobbers reg byte a 
Statement [322] (byte*) render_init::li#1 ← (byte*) render_init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ render_init::i#2 render_init::li#1 ] ( main:3::render_init:8 [ render_init::i#2 render_init::li#1 ] ) always clobbers reg byte a 
Statement [327] (byte*~) render_init::$10 ← (byte*) render_init::line#4 + (byte) render_init::c#2 [ render_init::line#4 render_init::l#4 render_init::c#2 render_init::$10 ] ( main:3::render_init:8 [ render_init::line#4 render_init::l#4 render_init::c#2 render_init::$10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:68 [ render_init::l#4 render_init::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:69 [ render_init::c#2 render_init::c#1 ]
Statement [328] *((byte*~) render_init::$10) ← (const byte) DARK_GREY#0 [ render_init::line#4 render_init::l#4 render_init::c#2 ] ( main:3::render_init:8 [ render_init::line#4 render_init::l#4 render_init::c#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:68 [ render_init::l#4 render_init::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:69 [ render_init::c#2 render_init::c#1 ]
Statement [331] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ render_init::l#4 render_init::line#1 ] ( main:3::render_init:8 [ render_init::l#4 render_init::line#1 ] ) always clobbers reg byte a 
Statement [336] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000 [ fill::addr#0 fill::val#3 fill::end#0 ] ( main:3::render_init:8::fill:316 [ fill::addr#0 fill::val#3 fill::end#0 ] main:3::render_init:8::fill:318 [ fill::addr#0 fill::val#3 fill::end#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:70 [ fill::val#3 ]
Statement [338] *((byte*) fill::addr#2) ← (byte) fill::val#3 [ fill::val#3 fill::end#0 fill::addr#2 ] ( main:3::render_init:8::fill:316 [ fill::val#3 fill::end#0 fill::addr#2 ] main:3::render_init:8::fill:318 [ fill::val#3 fill::end#0 fill::addr#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:70 [ fill::val#3 ]
Statement [340] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1 [ fill::val#3 fill::end#0 fill::addr#1 ] ( main:3::render_init:8::fill:316 [ fill::val#3 fill::end#0 fill::addr#1 ] main:3::render_init:8::fill:318 [ fill::val#3 fill::end#0 fill::addr#1 ] ) always clobbers reg byte a 
Statement [342] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535 [ ] ( main:3::sid_rnd_init:6 [ ] ) always clobbers reg byte a 
Statement [343] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:3::sid_rnd_init:6 [ ] ) always clobbers reg byte a 
Statement [15] (byte*~) current_piece_gfx#87 ← (byte*) current_piece_gfx#10 [ current_piece_gfx#87 current_piece_gfx#10 current_piece_color#15 spawn_current::$3 ] ( main:3 [ current_piece_gfx#87 current_piece_gfx#10 current_piece_color#15 spawn_current::$3 ] ) always clobbers reg byte a 
Statement [18] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) [ current_piece_gfx#10 current_piece_color#15 current_piece#71 ] ( main:3 [ current_piece_gfx#10 current_piece_color#15 current_piece#71 ] ) always clobbers reg byte a 
Statement [20] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 keyboard_events_size#19 current_movedown_counter#15 ] ( main:3 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 keyboard_events_size#19 current_movedown_counter#15 ] ) always clobbers reg byte a 
Statement [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 254) goto main::@7 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 keyboard_events_size#19 current_movedown_counter#15 ] ( main:3 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 keyboard_events_size#19 current_movedown_counter#15 ] ) always clobbers reg byte a 
Statement [32] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$10 [ current_piece#13 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_orientation#18 current_piece_gfx#17 current_xpos#19 ] ( main:3 [ current_piece#13 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_orientation#18 current_piece_gfx#17 current_xpos#19 ] ) always clobbers reg byte a 
Statement [37] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$11 [ current_piece#13 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#2 current_orientation#18 current_piece_gfx#17 ] ( main:3 [ current_piece#13 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#2 current_orientation#18 current_piece_gfx#17 ] ) always clobbers reg byte a 
Statement [42] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$12 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#3 ] ( main:3 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#3 ] ) always clobbers reg byte a 
Statement [48] (byte*~) current_piece_gfx#88 ← (byte*) current_piece_gfx#18 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_ypos#71 current_xpos#96 current_piece_gfx#88 ] ( main:3 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_ypos#71 current_xpos#96 current_piece_gfx#88 ] ) always clobbers reg byte a 
Statement [53] (byte) render_current::ypos2#0 ← (byte) current_ypos#22 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#0 ] ( main:3::render_current:17 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#0 ] main:3::render_current:50 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#0 ] ) always clobbers reg byte a 
Statement [56] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte) render_current::ypos2#2) [ current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::i#4 render_current::screen_line#0 ] ( main:3::render_current:17 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::i#4 render_current::screen_line#0 ] main:3::render_current:50 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::i#4 render_current::screen_line#0 ] ) always clobbers reg byte a 
Statement [59] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_current::i#2) [ current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::i#2 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] ( main:3::render_current:17 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::i#2 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] main:3::render_current:50 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::i#2 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] ) always clobbers reg byte a 
Statement [63] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_color#67 [ current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 render_current::i#1 ] ( main:3::render_current:17 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 render_current::i#1 ] main:3::render_current:50 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 current_xpos#63 current_piece_gfx#64 current_piece_color#67 render_current::ypos2#2 render_current::l#3 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 render_current::i#1 ] ) always clobbers reg byte a 
Statement [74] (byte~) render_playfield::$1 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_playfield::l#2 render_playfield::i#3 render_playfield::$1 ] ( main:3::render_playfield:14 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 render_playfield::l#2 render_playfield::i#3 render_playfield::$1 ] main:3::render_playfield:45 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 render_playfield::l#2 render_playfield::i#3 render_playfield::$1 ] ) always clobbers reg byte a 
Statement [75] (byte*) render_playfield::line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_playfield::$1) [ render_playfield::l#2 render_playfield::i#3 render_playfield::line#0 ] ( main:3::render_playfield:14 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 render_playfield::l#2 render_playfield::i#3 render_playfield::line#0 ] main:3::render_playfield:45 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 render_playfield::l#2 render_playfield::i#3 render_playfield::line#0 ] ) always clobbers reg byte a 
Statement [77] *((byte*) render_playfield::line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) [ render_playfield::l#2 render_playfield::i#2 render_playfield::line#2 render_playfield::c#2 ] ( main:3::render_playfield:14 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 render_playfield::l#2 render_playfield::i#2 render_playfield::line#2 render_playfield::c#2 ] main:3::render_playfield:45 [ current_piece#13 current_orientation#23 current_piece_gfx#18 current_xpos#23 current_ypos#16 current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 render_playfield::l#2 render_playfield::i#2 render_playfield::line#2 render_playfield::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [89] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#18 + (byte/signed byte/word/signed word/dword/signed dword) 16 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::$2 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::$2 ] ) always clobbers reg byte a 
Statement [90] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#2 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#2 ] ) always clobbers reg byte a 
Statement [95] (byte*~) current_piece#75 ← (byte*) current_piece#13 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#3 collision::ypos#3 collision::orientation#3 current_piece#75 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#3 collision::ypos#3 collision::orientation#3 current_piece#75 ] ) always clobbers reg byte a 
Statement [101] (byte*) current_piece_gfx#8 ← (byte*) current_piece#13 + (byte) current_orientation#8 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#8 current_piece_gfx#8 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#8 current_piece_gfx#8 ] ) always clobbers reg byte a 
Statement [102] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#18 - (byte/signed byte/word/signed word/dword/signed dword) 16 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::$4 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::$4 ] ) always clobbers reg byte a 
Statement [103] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63 [ current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#1 ] ( main:3::play_move_rotate:39 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#1 ] ) always clobbers reg byte a 
Statement [105] (byte*) collision::piece_gfx#0 ← (byte*) current_piece#15 + (byte) collision::orientation#4 [ collision::ypos#4 collision::xpos#5 collision::piece_gfx#0 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::ypos#4 collision::xpos#5 collision::piece_gfx#0 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::ypos#4 collision::xpos#5 collision::piece_gfx#0 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::ypos#4 collision::xpos#5 collision::piece_gfx#0 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::ypos#4 collision::xpos#5 collision::piece_gfx#0 ] ) always clobbers reg byte a 
Statement [106] (byte) collision::ypos2#0 ← (byte) collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ collision::xpos#5 collision::piece_gfx#0 collision::ypos2#0 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#0 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#0 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#0 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#0 ] ) always clobbers reg byte a 
Statement [108] (byte*) collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) collision::ypos2#2) [ collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::i#3 collision::l#6 collision::playfield_line#0 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::i#3 collision::l#6 collision::playfield_line#0 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::i#3 collision::l#6 collision::playfield_line#0 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::i#3 collision::l#6 collision::playfield_line#0 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::i#3 collision::l#6 collision::playfield_line#0 ] ) always clobbers reg byte a 
Statement [112] if(*((byte*) collision::piece_gfx#0 + (byte) collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3 [ collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] ) always clobbers reg byte a 
Statement [116] (byte~) collision::$7 ← (byte) collision::col#2 & (byte/word/signed word/dword/signed dword) 128 [ collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 collision::$7 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 collision::$7 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 collision::$7 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 collision::$7 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 collision::$7 ] ) always clobbers reg byte a 
Statement [119] if(*((byte*) collision::playfield_line#0 + (byte) collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3 [ collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] ( main:3::play_move_rotate:39::collision:96 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::render#2 current_piece#13 current_xpos#23 current_ypos#16 current_orientation#18 current_piece_gfx#17 play_move_rotate::orientation#3 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_leftright:34::collision:134 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_leftright:34::collision:145 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_xpos#19 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] main:3::play_move_down:29::collision:169 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 collision::xpos#5 collision::piece_gfx#0 collision::ypos2#2 collision::l#6 collision::playfield_line#0 collision::col#2 collision::c#2 collision::i#1 ] ) always clobbers reg byte a 
Statement [133] (byte*~) current_piece#74 ← (byte*) current_piece#13 [ current_piece#13 current_ypos#16 current_orientation#18 current_piece#74 collision::orientation#2 collision::ypos#2 collision::xpos#2 current_xpos#19 ] ( main:3::play_move_leftright:34 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_piece#74 collision::orientation#2 collision::ypos#2 collision::xpos#2 current_xpos#19 ] ) always clobbers reg byte a 
Statement [144] (byte*~) current_piece#73 ← (byte*) current_piece#13 [ current_piece#13 current_ypos#16 current_orientation#18 current_piece#73 collision::orientation#1 collision::ypos#1 collision::xpos#1 current_xpos#19 ] ( main:3::play_move_leftright:34 [ current_piece_color#13 keyboard_events_size#16 current_movedown_counter#12 main::key_event#0 main::render#1 current_piece_gfx#17 current_piece#13 current_ypos#16 current_orientation#18 current_piece#73 collision::orientation#1 collision::ypos#1 collision::xpos#1 current_xpos#19 ] ) always clobbers reg byte a 
Statement [168] (byte*~) current_piece#72 ← (byte*) current_piece#11 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_piece#72 collision::orientation#0 collision::ypos#0 collision::xpos#0 ] ( main:3::play_move_down:29 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_piece#72 collision::orientation#0 collision::ypos#0 collision::xpos#0 ] ) always clobbers reg byte a 
Statement [179] (byte*~) current_piece#76 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) [ current_piece_gfx#10 current_piece_color#15 current_piece#76 ] ( main:3::play_move_down:29 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#10 current_piece_color#15 current_piece#76 ] ) always clobbers reg byte a 
Statement [187] (byte~) spawn_current::$3 ← (byte) spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ spawn_current::$3 spawn_current::piece_idx#2 ] ( main:3::spawn_current:12 [ spawn_current::$3 spawn_current::piece_idx#2 ] main:3::play_move_down:29::spawn_current:178 [ keyboard_events_size#16 main::key_event#0 spawn_current::$3 spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Statement [188] (byte*) current_piece_gfx#10 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0 [ current_piece_gfx#10 spawn_current::$3 spawn_current::piece_idx#2 ] ( main:3::spawn_current:12 [ current_piece_gfx#10 spawn_current::$3 spawn_current::piece_idx#2 ] main:3::play_move_down:29::spawn_current:178 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#10 spawn_current::$3 spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Statement [189] (byte) current_piece_color#15 ← *((const byte[]) PIECES_COLORS#0 + (byte) spawn_current::piece_idx#2) [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 ] ( main:3::spawn_current:12 [ current_piece_gfx#10 current_piece_color#15 spawn_current::$3 ] main:3::play_move_down:29::spawn_current:178 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#10 current_piece_color#15 spawn_current::$3 ] ) always clobbers reg byte a 
Statement [195] (byte) spawn_current::piece_idx#1 ← (byte~) spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ spawn_current::piece_idx#1 ] ( main:3::spawn_current:12 [ spawn_current::piece_idx#1 ] main:3::play_move_down:29::spawn_current:178 [ keyboard_events_size#16 main::key_event#0 spawn_current::piece_idx#1 ] ) always clobbers reg byte a 
Statement [210] (byte) remove_lines::w#2 ← (byte) remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 [ remove_lines::y#8 remove_lines::r#1 remove_lines::w#2 ] ( main:3::play_move_down:29::remove_lines:176 [ keyboard_events_size#16 main::key_event#0 remove_lines::y#8 remove_lines::r#1 remove_lines::w#2 ] ) always clobbers reg byte a 
Statement [217] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ remove_lines::w#6 ] ( main:3::play_move_down:29::remove_lines:176 [ keyboard_events_size#16 main::key_event#0 remove_lines::w#6 ] ) always clobbers reg byte a 
Statement [220] (byte) lock_current::ypos2#0 ← (byte) current_ypos#12 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#0 ] ( main:3::play_move_down:29::lock_current:174 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#0 ] ) always clobbers reg byte a 
Statement [222] (byte*) lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) lock_current::ypos2#2) [ current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::i#3 lock_current::l#6 lock_current::playfield_line#0 ] ( main:3::play_move_down:29::lock_current:174 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::i#3 lock_current::l#6 lock_current::playfield_line#0 ] ) always clobbers reg byte a 
Statement [226] if(*((byte*) current_piece_gfx#15 + (byte) lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto lock_current::@3 [ current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::l#6 lock_current::playfield_line#0 lock_current::col#2 lock_current::c#2 lock_current::i#1 ] ( main:3::play_move_down:29::lock_current:174 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::l#6 lock_current::playfield_line#0 lock_current::col#2 lock_current::c#2 lock_current::i#1 ] ) always clobbers reg byte a 
Statement [227] *((byte*) lock_current::playfield_line#0 + (byte) lock_current::col#2) ← (byte) current_piece_color#11 [ current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::l#6 lock_current::playfield_line#0 lock_current::col#2 lock_current::c#2 lock_current::i#1 ] ( main:3::play_move_down:29::lock_current:174 [ keyboard_events_size#16 main::key_event#0 current_piece_gfx#15 current_xpos#16 current_piece_color#11 lock_current::ypos2#2 lock_current::l#6 lock_current::playfield_line#0 lock_current::col#2 lock_current::c#2 lock_current::i#1 ] ) always clobbers reg byte a 
Statement [238] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ( main:3::play_move_down:29::keyboard_event_pressed:154 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#10 play_move_down::movedown#10 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:260 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:266 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:272 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:278 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Statement [240] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:3::play_move_down:29::keyboard_event_pressed:154 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#10 play_move_down::movedown#10 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:260 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:266 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:272 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:278 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Statement [241] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#11 ] ( main:3::play_move_down:29::keyboard_event_pressed:154 [ keyboard_events_size#16 main::key_event#0 current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#10 play_move_down::movedown#10 keyboard_event_pressed::return#11 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:260 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:266 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:272 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:3::keyboard_event_scan:23::keyboard_event_pressed:278 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_events_size#13 keyboard_event_pressed::return#11 ] ) always clobbers reg byte a 
Statement [254] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 keyboard_event_scan::row_scan#0 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 keyboard_event_scan::row_scan#0 ] ) always clobbers reg byte a 
Statement [255] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 [ keyboard_event_scan::row#2 keyboard_events_size#29 keyboard_event_scan::keycode#1 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_events_size#29 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a 
Statement [285] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$3 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$3 ] ) always clobbers reg byte a 
Statement [286] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$4 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$4 ] ) always clobbers reg byte a 
Statement [289] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [291] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte a 
Statement [297] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#30 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#30 ] ) always clobbers reg byte a 
Statement [298] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$11 ] ( main:3::keyboard_event_scan:23 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$11 ] ) always clobbers reg byte a 
Statement [301] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:3::keyboard_event_scan:23::keyboard_matrix_read:251 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 ] ) always clobbers reg byte a 
Statement [302] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:3::keyboard_event_scan:23::keyboard_matrix_read:251 [ current_piece#11 current_orientation#15 current_piece_gfx#15 current_xpos#16 current_ypos#12 current_piece_color#11 current_movedown_counter#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [306] (byte~) tables_init::$1 ← (byte) tables_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 tables_init::$1 ] ( main:3::tables_init:10 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 tables_init::$1 ] ) always clobbers reg byte a 
Statement [307] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) tables_init::$1) ← (byte*) tables_init::pli#2 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 ] ( main:3::tables_init:10 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 ] ) always clobbers reg byte a 
Statement [308] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) tables_init::j#2) ← (byte) tables_init::idx#2 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 ] ( main:3::tables_init:10 [ tables_init::j#2 tables_init::pli#2 tables_init::idx#2 ] ) always clobbers reg byte a 
Statement [309] (byte*) tables_init::pli#1 ← (byte*) tables_init::pli#2 + (const byte) PLAYFIELD_COLS#0 [ tables_init::j#2 tables_init::idx#2 tables_init::pli#1 ] ( main:3::tables_init:10 [ tables_init::j#2 tables_init::idx#2 tables_init::pli#1 ] ) always clobbers reg byte a 
Statement [310] (byte) tables_init::idx#1 ← (byte) tables_init::idx#2 + (const byte) PLAYFIELD_COLS#0 [ tables_init::j#2 tables_init::pli#1 tables_init::idx#1 ] ( main:3::tables_init:10 [ tables_init::j#2 tables_init::pli#1 tables_init::idx#1 ] ) always clobbers reg byte a 
Statement [313] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 [ ] ( main:3::tables_init:10 [ ] ) always clobbers reg byte a 
Statement [320] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_init::i#2 render_init::li#2 render_init::$5 ] ( main:3::render_init:8 [ render_init::i#2 render_init::li#2 render_init::$5 ] ) always clobbers reg byte a 
Statement [321] *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_init::$5) ← (byte*) render_init::li#2 [ render_init::i#2 render_init::li#2 ] ( main:3::render_init:8 [ render_init::i#2 render_init::li#2 ] ) always clobbers reg byte a 
Statement [322] (byte*) render_init::li#1 ← (byte*) render_init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ render_init::i#2 render_init::li#1 ] ( main:3::render_init:8 [ render_init::i#2 render_init::li#1 ] ) always clobbers reg byte a 
Statement [327] (byte*~) render_init::$10 ← (byte*) render_init::line#4 + (byte) render_init::c#2 [ render_init::line#4 render_init::l#4 render_init::c#2 render_init::$10 ] ( main:3::render_init:8 [ render_init::line#4 render_init::l#4 render_init::c#2 render_init::$10 ] ) always clobbers reg byte a 
Statement [328] *((byte*~) render_init::$10) ← (const byte) DARK_GREY#0 [ render_init::line#4 render_init::l#4 render_init::c#2 ] ( main:3::render_init:8 [ render_init::line#4 render_init::l#4 render_init::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [331] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ render_init::l#4 render_init::line#1 ] ( main:3::render_init:8 [ render_init::l#4 render_init::line#1 ] ) always clobbers reg byte a 
Statement [336] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000 [ fill::addr#0 fill::val#3 fill::end#0 ] ( main:3::render_init:8::fill:316 [ fill::addr#0 fill::val#3 fill::end#0 ] main:3::render_init:8::fill:318 [ fill::addr#0 fill::val#3 fill::end#0 ] ) always clobbers reg byte a 
Statement [338] *((byte*) fill::addr#2) ← (byte) fill::val#3 [ fill::val#3 fill::end#0 fill::addr#2 ] ( main:3::render_init:8::fill:316 [ fill::val#3 fill::end#0 fill::addr#2 ] main:3::render_init:8::fill:318 [ fill::val#3 fill::end#0 fill::addr#2 ] ) always clobbers reg byte a reg byte y 
Statement [340] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1 [ fill::val#3 fill::end#0 fill::addr#1 ] ( main:3::render_init:8::fill:316 [ fill::val#3 fill::end#0 fill::addr#1 ] main:3::render_init:8::fill:318 [ fill::val#3 fill::end#0 fill::addr#1 ] ) always clobbers reg byte a 
Statement [342] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535 [ ] ( main:3::sid_rnd_init:6 [ ] ) always clobbers reg byte a 
Statement [343] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:3::sid_rnd_init:6 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_BYTE:4 [ current_ypos#22 current_ypos#71 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ render_current::l#3 render_current::l#1 ] : zp ZP_BYTE:10 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ render_current::c#2 render_current::c#1 ] : zp ZP_BYTE:13 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ render_playfield::l#2 render_playfield::l#1 ] : zp ZP_BYTE:14 , reg byte x , 
Potential registers zp ZP_BYTE:15 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] : zp ZP_BYTE:15 , reg byte x , 
Potential registers zp ZP_WORD:16 [ render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_BYTE:18 [ render_playfield::c#2 render_playfield::c#1 ] : zp ZP_BYTE:18 , reg byte x , 
Potential registers zp ZP_BYTE:19 [ play_move_rotate::return#2 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] : zp ZP_BYTE:20 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:21 [ current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_BYTE:23 [ collision::orientation#4 collision::orientation#0 collision::orientation#1 collision::orientation#2 collision::orientation#3 ] : zp ZP_BYTE:23 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ collision::ypos#4 collision::ypos#0 collision::ypos#1 collision::ypos#2 collision::ypos#3 ] : zp ZP_BYTE:24 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ] : zp ZP_BYTE:25 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ] : zp ZP_BYTE:26 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ collision::l#6 collision::l#1 ] : zp ZP_BYTE:27 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ collision::i#2 collision::i#3 collision::i#11 collision::i#13 ] : zp ZP_BYTE:28 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ collision::col#2 collision::col#9 collision::col#1 ] : zp ZP_BYTE:29 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ collision::c#2 collision::c#1 ] : zp ZP_BYTE:30 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ collision::return#14 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ play_move_leftright::return#2 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ] : zp ZP_BYTE:33 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:34 [ current_piece#23 current_piece#76 current_piece#11 current_piece#13 current_piece#71 ] : zp ZP_WORD:34 , 
Potential registers zp ZP_BYTE:36 [ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ] : zp ZP_BYTE:36 , reg byte x , 
Potential registers zp ZP_WORD:37 [ current_piece_gfx#29 current_piece_gfx#15 current_piece_gfx#18 current_piece_gfx#10 current_piece_gfx#8 current_piece_gfx#17 ] : zp ZP_WORD:37 , 
Potential registers zp ZP_BYTE:39 [ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ] : zp ZP_BYTE:39 , reg byte x , 
Potential registers zp ZP_BYTE:40 [ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ] : zp ZP_BYTE:40 , reg byte x , 
Potential registers zp ZP_BYTE:41 [ play_move_down::return#3 ] : zp ZP_BYTE:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ spawn_current::piece_idx#2 spawn_current::piece_idx#1 ] : zp ZP_BYTE:42 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ remove_lines::y#8 remove_lines::y#1 ] : zp ZP_BYTE:43 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:44 [ remove_lines::r#2 remove_lines::r#3 remove_lines::r#1 ] : zp ZP_BYTE:44 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:45 [ remove_lines::x#2 remove_lines::x#1 ] : zp ZP_BYTE:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ remove_lines::full#4 remove_lines::full#2 ] : zp ZP_BYTE:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ remove_lines::w#6 remove_lines::w#4 remove_lines::w#12 remove_lines::w#11 remove_lines::w#1 remove_lines::w#2 remove_lines::w#3 ] : zp ZP_BYTE:47 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ] : zp ZP_BYTE:48 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:49 [ lock_current::l#6 lock_current::l#1 ] : zp ZP_BYTE:49 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:50 [ lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ] : zp ZP_BYTE:50 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ lock_current::col#2 lock_current::col#0 lock_current::col#1 ] : zp ZP_BYTE:51 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:52 [ lock_current::c#2 lock_current::c#1 ] : zp ZP_BYTE:52 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:53 [ keyboard_event_pressed::keycode#5 ] : zp ZP_BYTE:53 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:54 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] : zp ZP_BYTE:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:55 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] : zp ZP_BYTE:55 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] : zp ZP_BYTE:56 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:57 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] : zp ZP_BYTE:57 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:58 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ] : zp ZP_BYTE:58 , reg byte x , 
Potential registers zp ZP_BYTE:59 [ tables_init::j#2 tables_init::j#1 ] : zp ZP_BYTE:59 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:60 [ tables_init::pli#2 tables_init::pli#1 ] : zp ZP_WORD:60 , 
Potential registers zp ZP_BYTE:62 [ tables_init::idx#2 tables_init::idx#1 ] : zp ZP_BYTE:62 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:63 [ render_init::i#2 render_init::i#1 ] : zp ZP_BYTE:63 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:64 [ render_init::li#2 render_init::li#1 ] : zp ZP_WORD:64 , 
Potential registers zp ZP_WORD:66 [ render_init::line#4 render_init::line#1 ] : zp ZP_WORD:66 , 
Potential registers zp ZP_BYTE:68 [ render_init::l#4 render_init::l#1 ] : zp ZP_BYTE:68 , reg byte x , 
Potential registers zp ZP_BYTE:69 [ render_init::c#2 render_init::c#1 ] : zp ZP_BYTE:69 , reg byte x , 
Potential registers zp ZP_BYTE:70 [ fill::val#3 ] : zp ZP_BYTE:70 , reg byte x , 
Potential registers zp ZP_WORD:71 [ fill::addr#2 fill::addr#0 fill::addr#1 ] : zp ZP_WORD:71 , 
Potential registers zp ZP_BYTE:73 [ keyboard_event_get::return#3 ] : zp ZP_BYTE:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:74 [ main::key_event#0 ] : zp ZP_BYTE:74 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:75 [ play_move_down::key_event#0 ] : zp ZP_BYTE:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:76 [ play_move_down::return#0 ] : zp ZP_BYTE:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:77 [ main::$10 ] : zp ZP_BYTE:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:78 [ main::render#1 ] : zp ZP_BYTE:78 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:79 [ play_move_leftright::key_event#0 ] : zp ZP_BYTE:79 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:80 [ play_move_leftright::return#0 ] : zp ZP_BYTE:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:81 [ main::$11 ] : zp ZP_BYTE:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:82 [ main::render#2 ] : zp ZP_BYTE:82 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:83 [ play_move_rotate::key_event#0 ] : zp ZP_BYTE:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:84 [ play_move_rotate::return#0 ] : zp ZP_BYTE:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:85 [ main::$12 ] : zp ZP_BYTE:85 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:86 [ main::render#3 ] : zp ZP_BYTE:86 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:87 [ render_current::screen_line#0 ] : zp ZP_WORD:87 , 
Potential registers zp ZP_BYTE:89 [ render_current::current_cell#0 ] : zp ZP_BYTE:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:90 [ render_playfield::$1 ] : zp ZP_BYTE:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:91 [ play_move_rotate::$2 ] : zp ZP_BYTE:91 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:92 [ collision::return#13 ] : zp ZP_BYTE:92 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:93 [ play_move_rotate::$6 ] : zp ZP_BYTE:93 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:94 [ play_move_rotate::$4 ] : zp ZP_BYTE:94 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:95 [ collision::piece_gfx#0 ] : zp ZP_WORD:95 , 
Potential registers zp ZP_WORD:97 [ collision::playfield_line#0 ] : zp ZP_WORD:97 , 
Potential registers zp ZP_BYTE:99 [ collision::i#1 ] : zp ZP_BYTE:99 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:100 [ collision::$7 ] : zp ZP_BYTE:100 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:101 [ collision::return#12 ] : zp ZP_BYTE:101 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:102 [ play_move_leftright::$4 ] : zp ZP_BYTE:102 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:103 [ collision::return#1 ] : zp ZP_BYTE:103 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:104 [ play_move_leftright::$8 ] : zp ZP_BYTE:104 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:105 [ keyboard_event_pressed::return#12 ] : zp ZP_BYTE:105 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:106 [ play_move_down::$2 ] : zp ZP_BYTE:106 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:107 [ collision::return#0 ] : zp ZP_BYTE:107 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:108 [ play_move_down::$12 ] : zp ZP_BYTE:108 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:109 [ spawn_current::$3 ] : zp ZP_BYTE:109 , reg byte x , 
Potential registers zp ZP_BYTE:110 [ sid_rnd::return#2 ] : zp ZP_BYTE:110 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:111 [ spawn_current::$1 ] : zp ZP_BYTE:111 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:112 [ sid_rnd::return#0 ] : zp ZP_BYTE:112 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:113 [ remove_lines::c#0 ] : zp ZP_BYTE:113 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:114 [ lock_current::playfield_line#0 ] : zp ZP_WORD:114 , 
Potential registers zp ZP_BYTE:116 [ lock_current::i#1 ] : zp ZP_BYTE:116 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:117 [ keyboard_event_pressed::$0 ] : zp ZP_BYTE:117 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:118 [ keyboard_event_pressed::row_bits#0 ] : zp ZP_BYTE:118 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:119 [ keyboard_event_pressed::$1 ] : zp ZP_BYTE:119 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:120 [ keyboard_event_pressed::return#11 ] : zp ZP_BYTE:120 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:121 [ keyboard_matrix_read::rowid#0 ] : zp ZP_BYTE:121 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:122 [ keyboard_matrix_read::return#2 ] : zp ZP_BYTE:122 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:123 [ keyboard_event_scan::row_scan#0 ] : zp ZP_BYTE:123 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:124 [ keyboard_event_pressed::return#0 ] : zp ZP_BYTE:124 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:125 [ keyboard_event_scan::$14 ] : zp ZP_BYTE:125 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:126 [ keyboard_event_pressed::return#1 ] : zp ZP_BYTE:126 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:127 [ keyboard_event_scan::$18 ] : zp ZP_BYTE:127 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:128 [ keyboard_event_pressed::return#2 ] : zp ZP_BYTE:128 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:129 [ keyboard_event_scan::$22 ] : zp ZP_BYTE:129 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:130 [ keyboard_event_pressed::return#10 ] : zp ZP_BYTE:130 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:131 [ keyboard_event_scan::$26 ] : zp ZP_BYTE:131 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:132 [ keyboard_event_scan::$3 ] : zp ZP_BYTE:132 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:133 [ keyboard_event_scan::$4 ] : zp ZP_BYTE:133 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:134 [ keyboard_event_scan::event_type#0 ] : zp ZP_BYTE:134 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:135 [ keyboard_event_scan::$11 ] : zp ZP_BYTE:135 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:136 [ keyboard_matrix_read::return#0 ] : zp ZP_BYTE:136 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:137 [ tables_init::$1 ] : zp ZP_BYTE:137 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:138 [ render_init::$5 ] : zp ZP_BYTE:138 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:139 [ render_init::$10 ] : zp ZP_WORD:139 , 
Potential registers zp ZP_WORD:141 [ fill::end#0 ] : zp ZP_WORD:141 , 

REGISTER UPLIFT SCOPES
Uplift Scope [keyboard_event_scan] 2,002: zp ZP_BYTE:132 [ keyboard_event_scan::$3 ] 2,002: zp ZP_BYTE:133 [ keyboard_event_scan::$4 ] 2,002: zp ZP_BYTE:134 [ keyboard_event_scan::event_type#0 ] 2,002: zp ZP_BYTE:135 [ keyboard_event_scan::$11 ] 1,787.5: zp ZP_BYTE:56 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 1,195.02: zp ZP_BYTE:57 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] 211.74: zp ZP_BYTE:55 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 128.06: zp ZP_BYTE:123 [ keyboard_event_scan::row_scan#0 ] 4: zp ZP_BYTE:125 [ keyboard_event_scan::$14 ] 4: zp ZP_BYTE:127 [ keyboard_event_scan::$18 ] 4: zp ZP_BYTE:129 [ keyboard_event_scan::$22 ] 4: zp ZP_BYTE:131 [ keyboard_event_scan::$26 ] 
Uplift Scope [collision] 3,823.33: zp ZP_BYTE:28 [ collision::i#2 collision::i#3 collision::i#11 collision::i#13 ] 2,002: zp ZP_BYTE:100 [ collision::$7 ] 1,340.75: zp ZP_BYTE:29 [ collision::col#2 collision::col#9 collision::col#1 ] 1,223.44: zp ZP_BYTE:30 [ collision::c#2 collision::c#1 ] 161.77: zp ZP_BYTE:99 [ collision::i#1 ] 141.57: zp ZP_BYTE:26 [ collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ] 113.62: zp ZP_BYTE:27 [ collision::l#6 collision::l#1 ] 78.71: zp ZP_WORD:97 [ collision::playfield_line#0 ] 47.76: zp ZP_WORD:95 [ collision::piece_gfx#0 ] 18: zp ZP_BYTE:23 [ collision::orientation#4 collision::orientation#0 collision::orientation#1 collision::orientation#2 collision::orientation#3 ] 10: zp ZP_BYTE:24 [ collision::ypos#4 collision::ypos#0 collision::ypos#1 collision::ypos#2 collision::ypos#3 ] 9.29: zp ZP_BYTE:25 [ collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ] 4: zp ZP_BYTE:92 [ collision::return#13 ] 4: zp ZP_BYTE:101 [ collision::return#12 ] 4: zp ZP_BYTE:103 [ collision::return#1 ] 4: zp ZP_BYTE:107 [ collision::return#0 ] 1.33: zp ZP_BYTE:31 [ collision::return#14 ] 
Uplift Scope [lock_current] 3,823.33: zp ZP_BYTE:50 [ lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ] 1,478.5: zp ZP_BYTE:51 [ lock_current::col#2 lock_current::col#0 lock_current::col#1 ] 1,401.4: zp ZP_BYTE:52 [ lock_current::c#2 lock_current::c#1 ] 233.67: zp ZP_BYTE:116 [ lock_current::i#1 ] 117.83: zp ZP_BYTE:49 [ lock_current::l#6 lock_current::l#1 ] 110.2: zp ZP_WORD:114 [ lock_current::playfield_line#0 ] 82.23: zp ZP_BYTE:48 [ lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ] 
Uplift Scope [remove_lines] 1,915.77: zp ZP_BYTE:44 [ remove_lines::r#2 remove_lines::r#3 remove_lines::r#1 ] 1,903.43: zp ZP_BYTE:47 [ remove_lines::w#6 remove_lines::w#4 remove_lines::w#12 remove_lines::w#11 remove_lines::w#1 remove_lines::w#2 remove_lines::w#3 ] 1,751.75: zp ZP_BYTE:45 [ remove_lines::x#2 remove_lines::x#1 ] 821: zp ZP_BYTE:46 [ remove_lines::full#4 remove_lines::full#2 ] 600.6: zp ZP_BYTE:113 [ remove_lines::c#0 ] 165.93: zp ZP_BYTE:43 [ remove_lines::y#8 remove_lines::y#1 ] 
Uplift Scope [render_current] 2,357.5: zp ZP_BYTE:11 [ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 ] 1,787.5: zp ZP_BYTE:13 [ render_current::c#2 render_current::c#1 ] 1,553.5: zp ZP_BYTE:12 [ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 ] 1,001: zp ZP_BYTE:89 [ render_current::current_cell#0 ] 164.97: zp ZP_BYTE:10 [ render_current::l#3 render_current::l#1 ] 100.33: zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ] 100.18: zp ZP_WORD:87 [ render_current::screen_line#0 ] 
Uplift Scope [] 5,895.76: zp ZP_BYTE:58 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ] 79.37: zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 ] 66.37: zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 ] 32.79: zp ZP_WORD:37 [ current_piece_gfx#29 current_piece_gfx#15 current_piece_gfx#18 current_piece_gfx#10 current_piece_gfx#8 current_piece_gfx#17 ] 27.73: zp ZP_BYTE:40 [ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ] 26: zp ZP_WORD:21 [ current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 ] 18.5: zp ZP_BYTE:4 [ current_ypos#22 current_ypos#71 ] 15.91: zp ZP_BYTE:39 [ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ] 14.91: zp ZP_WORD:34 [ current_piece#23 current_piece#76 current_piece#11 current_piece#13 current_piece#71 ] 13.23: zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 ] 9.04: zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ] 8.96: zp ZP_BYTE:36 [ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ] 2.35: zp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ] 
Uplift Scope [render_playfield] 2,254.5: zp ZP_WORD:16 [ render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 ] 2,002: zp ZP_BYTE:18 [ render_playfield::c#2 render_playfield::c#1 ] 1,522.6: zp ZP_BYTE:15 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] 202: zp ZP_BYTE:90 [ render_playfield::$1 ] 185.17: zp ZP_BYTE:14 [ render_playfield::l#2 render_playfield::l#1 ] 
Uplift Scope [render_init] 252.5: zp ZP_BYTE:69 [ render_init::c#2 render_init::c#1 ] 202: zp ZP_WORD:139 [ render_init::$10 ] 27.83: zp ZP_WORD:66 [ render_init::line#4 render_init::line#1 ] 24.75: zp ZP_BYTE:63 [ render_init::i#2 render_init::i#1 ] 22: zp ZP_BYTE:138 [ render_init::$5 ] 19.64: zp ZP_BYTE:68 [ render_init::l#4 render_init::l#1 ] 18.33: zp ZP_WORD:64 [ render_init::li#2 render_init::li#1 ] 
Uplift Scope [spawn_current] 253.5: zp ZP_BYTE:42 [ spawn_current::piece_idx#2 spawn_current::piece_idx#1 ] 202: zp ZP_BYTE:111 [ spawn_current::$1 ] 0.18: zp ZP_BYTE:109 [ spawn_current::$3 ] 
Uplift Scope [keyboard_matrix_read] 202: zp ZP_BYTE:122 [ keyboard_matrix_read::return#2 ] 103: zp ZP_BYTE:121 [ keyboard_matrix_read::rowid#0 ] 34.33: zp ZP_BYTE:136 [ keyboard_matrix_read::return#0 ] 
Uplift Scope [sid_rnd] 202: zp ZP_BYTE:110 [ sid_rnd::return#2 ] 34.33: zp ZP_BYTE:112 [ sid_rnd::return#0 ] 
Uplift Scope [main] 22: zp ZP_BYTE:77 [ main::$10 ] 22: zp ZP_BYTE:81 [ main::$11 ] 22: zp ZP_BYTE:85 [ main::$12 ] 22: zp ZP_BYTE:86 [ main::render#3 ] 4.4: zp ZP_BYTE:78 [ main::render#1 ] 4.4: zp ZP_BYTE:82 [ main::render#2 ] 4: zp ZP_BYTE:74 [ main::key_event#0 ] 
Uplift Scope [tables_init] 23.83: zp ZP_BYTE:59 [ tables_init::j#2 tables_init::j#1 ] 22: zp ZP_BYTE:137 [ tables_init::$1 ] 13.93: zp ZP_BYTE:62 [ tables_init::idx#2 tables_init::idx#1 ] 13.75: zp ZP_WORD:60 [ tables_init::pli#2 tables_init::pli#1 ] 
Uplift Scope [play_move_down] 22: zp ZP_BYTE:76 [ play_move_down::return#0 ] 20: zp ZP_BYTE:33 [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ] 6.5: zp ZP_BYTE:75 [ play_move_down::key_event#0 ] 4: zp ZP_BYTE:106 [ play_move_down::$2 ] 4: zp ZP_BYTE:108 [ play_move_down::$12 ] 3.67: zp ZP_BYTE:41 [ play_move_down::return#3 ] 
Uplift Scope [play_move_rotate] 22: zp ZP_BYTE:84 [ play_move_rotate::return#0 ] 8.89: zp ZP_BYTE:20 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] 7.5: zp ZP_BYTE:83 [ play_move_rotate::key_event#0 ] 4: zp ZP_BYTE:91 [ play_move_rotate::$2 ] 4: zp ZP_BYTE:93 [ play_move_rotate::$6 ] 4: zp ZP_BYTE:94 [ play_move_rotate::$4 ] 3.67: zp ZP_BYTE:19 [ play_move_rotate::return#2 ] 
Uplift Scope [play_move_leftright] 22: zp ZP_BYTE:80 [ play_move_leftright::return#0 ] 7.5: zp ZP_BYTE:79 [ play_move_leftright::key_event#0 ] 4: zp ZP_BYTE:102 [ play_move_leftright::$4 ] 4: zp ZP_BYTE:104 [ play_move_leftright::$8 ] 3.67: zp ZP_BYTE:32 [ play_move_leftright::return#2 ] 
Uplift Scope [fill] 36: zp ZP_WORD:71 [ fill::addr#2 fill::addr#0 fill::addr#1 ] 2.6: zp ZP_WORD:141 [ fill::end#0 ] 1.83: zp ZP_BYTE:70 [ fill::val#3 ] 
Uplift Scope [keyboard_event_pressed] 4: zp ZP_BYTE:105 [ keyboard_event_pressed::return#12 ] 4: zp ZP_BYTE:117 [ keyboard_event_pressed::$0 ] 4: zp ZP_BYTE:119 [ keyboard_event_pressed::$1 ] 4: zp ZP_BYTE:124 [ keyboard_event_pressed::return#0 ] 4: zp ZP_BYTE:126 [ keyboard_event_pressed::return#1 ] 4: zp ZP_BYTE:128 [ keyboard_event_pressed::return#2 ] 4: zp ZP_BYTE:130 [ keyboard_event_pressed::return#10 ] 2: zp ZP_BYTE:118 [ keyboard_event_pressed::row_bits#0 ] 1.71: zp ZP_BYTE:120 [ keyboard_event_pressed::return#11 ] 1.33: zp ZP_BYTE:53 [ keyboard_event_pressed::keycode#5 ] 
Uplift Scope [keyboard_event_get] 22: zp ZP_BYTE:73 [ keyboard_event_get::return#3 ] 8.33: zp ZP_BYTE:54 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 
Uplift Scope [sid_rnd_init] 

Uplifting [keyboard_event_scan] best 598286 combination reg byte a [ keyboard_event_scan::$3 ] reg byte a [ keyboard_event_scan::$4 ] reg byte a [ keyboard_event_scan::event_type#0 ] reg byte a [ keyboard_event_scan::$11 ] zp ZP_BYTE:56 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] zp ZP_BYTE:57 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] zp ZP_BYTE:55 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] zp ZP_BYTE:123 [ keyboard_event_scan::row_scan#0 ] zp ZP_BYTE:125 [ keyboard_event_scan::$14 ] zp ZP_BYTE:127 [ keyboard_event_scan::$18 ] zp ZP_BYTE:129 [ keyboard_event_scan::$22 ] zp ZP_BYTE:131 [ keyboard_event_scan::$26 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [collision] best 583286 combination zp ZP_BYTE:28 [ collision::i#2 collision::i#3 collision::i#11 collision::i#13 ] reg byte a [ collision::$7 ] zp ZP_BYTE:29 [ collision::col#2 collision::col#9 collision::col#1 ] reg byte x [ collision::c#2 collision::c#1 ] zp ZP_BYTE:99 [ collision::i#1 ] zp ZP_BYTE:26 [ collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ] zp ZP_BYTE:27 [ collision::l#6 collision::l#1 ] zp ZP_WORD:97 [ collision::playfield_line#0 ] zp ZP_WORD:95 [ collision::piece_gfx#0 ] zp ZP_BYTE:23 [ collision::orientation#4 collision::orientation#0 collision::orientation#1 collision::orientation#2 collision::orientation#3 ] zp ZP_BYTE:24 [ collision::ypos#4 collision::ypos#0 collision::ypos#1 collision::ypos#2 collision::ypos#3 ] zp ZP_BYTE:25 [ collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ] zp ZP_BYTE:92 [ collision::return#13 ] zp ZP_BYTE:101 [ collision::return#12 ] zp ZP_BYTE:103 [ collision::return#1 ] zp ZP_BYTE:107 [ collision::return#0 ] zp ZP_BYTE:31 [ collision::return#14 ] 
Limited combination testing to 100 combinations of 80621568 possible.
Uplifting [lock_current] best 574286 combination zp ZP_BYTE:50 [ lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ] zp ZP_BYTE:51 [ lock_current::col#2 lock_current::col#0 lock_current::col#1 ] reg byte x [ lock_current::c#2 lock_current::c#1 ] zp ZP_BYTE:116 [ lock_current::i#1 ] zp ZP_BYTE:49 [ lock_current::l#6 lock_current::l#1 ] zp ZP_WORD:114 [ lock_current::playfield_line#0 ] zp ZP_BYTE:48 [ lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ] 
Limited combination testing to 100 combinations of 729 possible.
Uplifting [remove_lines] best 560586 combination reg byte y [ remove_lines::r#2 remove_lines::r#3 remove_lines::r#1 ] reg byte x [ remove_lines::w#6 remove_lines::w#4 remove_lines::w#12 remove_lines::w#11 remove_lines::w#1 remove_lines::w#2 remove_lines::w#3 ] zp ZP_BYTE:45 [ remove_lines::x#2 remove_lines::x#1 ] zp ZP_BYTE:46 [ remove_lines::full#4 remove_lines::full#2 ] zp ZP_BYTE:113 [ remove_lines::c#0 ] zp ZP_BYTE:43 [ remove_lines::y#8 remove_lines::y#1 ] 
Limited combination testing to 100 combinations of 1728 possible.
Uplifting [render_current] best 545586 combination zp ZP_BYTE:11 [ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 ] reg byte x [ render_current::c#2 render_current::c#1 ] zp ZP_BYTE:12 [ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 ] reg byte a [ render_current::current_cell#0 ] zp ZP_BYTE:10 [ render_current::l#3 render_current::l#1 ] zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ] zp ZP_WORD:87 [ render_current::screen_line#0 ] 
Limited combination testing to 100 combinations of 972 possible.
Uplifting [] best 545552 combination zp ZP_BYTE:58 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ] zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 ] zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 ] zp ZP_WORD:37 [ current_piece_gfx#29 current_piece_gfx#15 current_piece_gfx#18 current_piece_gfx#10 current_piece_gfx#8 current_piece_gfx#17 ] zp ZP_BYTE:40 [ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ] zp ZP_WORD:21 [ current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 ] reg byte x [ current_ypos#22 current_ypos#71 ] zp ZP_BYTE:39 [ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ] zp ZP_WORD:34 [ current_piece#23 current_piece#76 current_piece#11 current_piece#13 current_piece#71 ] zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 ] zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ] zp ZP_BYTE:36 [ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ] zp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ] 
Limited combination testing to 100 combinations of 1728 possible.
Uplifting [render_playfield] best 536152 combination zp ZP_WORD:16 [ render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 ] reg byte x [ render_playfield::c#2 render_playfield::c#1 ] zp ZP_BYTE:15 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] reg byte a [ render_playfield::$1 ] zp ZP_BYTE:14 [ render_playfield::l#2 render_playfield::l#1 ] 
Uplifting [render_init] best 535012 combination reg byte x [ render_init::c#2 render_init::c#1 ] zp ZP_WORD:139 [ render_init::$10 ] zp ZP_WORD:66 [ render_init::line#4 render_init::line#1 ] reg byte x [ render_init::i#2 render_init::i#1 ] reg byte a [ render_init::$5 ] zp ZP_BYTE:68 [ render_init::l#4 render_init::l#1 ] zp ZP_WORD:64 [ render_init::li#2 render_init::li#1 ] 
Uplifting [spawn_current] best 533708 combination reg byte x [ spawn_current::piece_idx#2 spawn_current::piece_idx#1 ] reg byte a [ spawn_current::$1 ] zp ZP_BYTE:109 [ spawn_current::$3 ] 
Uplifting [keyboard_matrix_read] best 532502 combination reg byte a [ keyboard_matrix_read::return#2 ] reg byte x [ keyboard_matrix_read::rowid#0 ] reg byte a [ keyboard_matrix_read::return#0 ] 
Uplifting [sid_rnd] best 531599 combination reg byte a [ sid_rnd::return#2 ] reg byte a [ sid_rnd::return#0 ] 
Uplifting [main] best 531359 combination reg byte a [ main::$10 ] reg byte a [ main::$11 ] reg byte a [ main::$12 ] reg byte a [ main::render#3 ] zp ZP_BYTE:78 [ main::render#1 ] zp ZP_BYTE:82 [ main::render#2 ] zp ZP_BYTE:74 [ main::key_event#0 ] 
Limited combination testing to 100 combinations of 6912 possible.
Uplifting [tables_init] best 531189 combination reg byte x [ tables_init::j#2 tables_init::j#1 ] reg byte a [ tables_init::$1 ] zp ZP_BYTE:62 [ tables_init::idx#2 tables_init::idx#1 ] zp ZP_WORD:60 [ tables_init::pli#2 tables_init::pli#1 ] 
Uplifting [play_move_down] best 531075 combination reg byte a [ play_move_down::return#0 ] reg byte x [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ] reg byte a [ play_move_down::key_event#0 ] reg byte a [ play_move_down::$2 ] zp ZP_BYTE:108 [ play_move_down::$12 ] zp ZP_BYTE:41 [ play_move_down::return#3 ] 
Limited combination testing to 100 combinations of 3072 possible.
Uplifting [play_move_rotate] best 530973 combination reg byte a [ play_move_rotate::return#0 ] zp ZP_BYTE:20 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] reg byte a [ play_move_rotate::key_event#0 ] reg byte a [ play_move_rotate::$2 ] zp ZP_BYTE:93 [ play_move_rotate::$6 ] zp ZP_BYTE:94 [ play_move_rotate::$4 ] zp ZP_BYTE:19 [ play_move_rotate::return#2 ] 
Limited combination testing to 100 combinations of 12288 possible.
Uplifting [play_move_leftright] best 530865 combination reg byte a [ play_move_leftright::return#0 ] reg byte a [ play_move_leftright::key_event#0 ] reg byte a [ play_move_leftright::$4 ] reg byte a [ play_move_leftright::$8 ] zp ZP_BYTE:32 [ play_move_leftright::return#2 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [fill] best 530849 combination zp ZP_WORD:71 [ fill::addr#2 fill::addr#0 fill::addr#1 ] zp ZP_WORD:141 [ fill::end#0 ] reg byte x [ fill::val#3 ] 
Uplifting [keyboard_event_pressed] best 530829 combination reg byte a [ keyboard_event_pressed::return#12 ] reg byte a [ keyboard_event_pressed::$0 ] reg byte a [ keyboard_event_pressed::$1 ] reg byte a [ keyboard_event_pressed::return#0 ] zp ZP_BYTE:126 [ keyboard_event_pressed::return#1 ] zp ZP_BYTE:128 [ keyboard_event_pressed::return#2 ] zp ZP_BYTE:130 [ keyboard_event_pressed::return#10 ] zp ZP_BYTE:118 [ keyboard_event_pressed::row_bits#0 ] zp ZP_BYTE:120 [ keyboard_event_pressed::return#11 ] zp ZP_BYTE:53 [ keyboard_event_pressed::keycode#5 ] 
Limited combination testing to 100 combinations of 589824 possible.
Uplifting [keyboard_event_get] best 530733 combination reg byte a [ keyboard_event_get::return#3 ] reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 
Uplifting [sid_rnd_init] best 530733 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:58 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
Uplifting [] best 530733 combination zp ZP_BYTE:58 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ collision::i#2 collision::i#3 collision::i#11 collision::i#13 ]
Uplifting [collision] best 530733 combination zp ZP_BYTE:28 [ collision::i#2 collision::i#3 collision::i#11 collision::i#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ]
Uplifting [lock_current] best 530733 combination zp ZP_BYTE:50 [ lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 ]
Uplifting [render_current] best 530733 combination zp ZP_BYTE:11 [ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:56 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Uplifting [keyboard_event_scan] best 515733 combination reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:45 [ remove_lines::x#2 remove_lines::x#1 ]
Uplifting [remove_lines] best 515733 combination zp ZP_BYTE:45 [ remove_lines::x#2 remove_lines::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 ]
Uplifting [render_current] best 515733 combination zp ZP_BYTE:12 [ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Uplifting [render_playfield] best 515733 combination zp ZP_BYTE:15 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:51 [ lock_current::col#2 lock_current::col#0 lock_current::col#1 ]
Uplifting [lock_current] best 515733 combination zp ZP_BYTE:51 [ lock_current::col#2 lock_current::col#0 lock_current::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ collision::col#2 collision::col#9 collision::col#1 ]
Uplifting [collision] best 515733 combination zp ZP_BYTE:29 [ collision::col#2 collision::col#9 collision::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:57 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ]
Uplifting [keyboard_event_scan] best 515733 combination zp ZP_BYTE:57 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:46 [ remove_lines::full#4 remove_lines::full#2 ]
Uplifting [remove_lines] best 515733 combination zp ZP_BYTE:46 [ remove_lines::full#4 remove_lines::full#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:113 [ remove_lines::c#0 ]
Uplifting [remove_lines] best 515733 combination zp ZP_BYTE:113 [ remove_lines::c#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:116 [ lock_current::i#1 ]
Uplifting [lock_current] best 515733 combination zp ZP_BYTE:116 [ lock_current::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:55 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Uplifting [keyboard_event_scan] best 515733 combination zp ZP_BYTE:55 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ render_playfield::l#2 render_playfield::l#1 ]
Uplifting [render_playfield] best 515733 combination zp ZP_BYTE:14 [ render_playfield::l#2 render_playfield::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ remove_lines::y#8 remove_lines::y#1 ]
Uplifting [remove_lines] best 515733 combination zp ZP_BYTE:43 [ remove_lines::y#8 remove_lines::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ render_current::l#3 render_current::l#1 ]
Uplifting [render_current] best 515733 combination zp ZP_BYTE:10 [ render_current::l#3 render_current::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:99 [ collision::i#1 ]
Uplifting [collision] best 515733 combination zp ZP_BYTE:99 [ collision::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ]
Uplifting [collision] best 515733 combination zp ZP_BYTE:26 [ collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:123 [ keyboard_event_scan::row_scan#0 ]
Uplifting [keyboard_event_scan] best 515733 combination zp ZP_BYTE:123 [ keyboard_event_scan::row_scan#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:49 [ lock_current::l#6 lock_current::l#1 ]
Uplifting [lock_current] best 515733 combination zp ZP_BYTE:49 [ lock_current::l#6 lock_current::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ collision::l#6 collision::l#1 ]
Uplifting [collision] best 515733 combination zp ZP_BYTE:27 [ collision::l#6 collision::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ]
Uplifting [render_current] best 515733 combination zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:48 [ lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ]
Uplifting [lock_current] best 515733 combination zp ZP_BYTE:48 [ lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 ]
Uplifting [] best 515733 combination zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:40 [ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ]
Uplifting [] best 515733 combination zp ZP_BYTE:40 [ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:68 [ render_init::l#4 render_init::l#1 ]
Uplifting [render_init] best 515733 combination zp ZP_BYTE:68 [ render_init::l#4 render_init::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ collision::orientation#4 collision::orientation#0 collision::orientation#1 collision::orientation#2 collision::orientation#3 ]
Uplifting [collision] best 515720 combination reg byte x [ collision::orientation#4 collision::orientation#0 collision::orientation#1 collision::orientation#2 collision::orientation#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:39 [ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ]
Uplifting [] best 515720 combination zp ZP_BYTE:39 [ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:62 [ tables_init::idx#2 tables_init::idx#1 ]
Uplifting [tables_init] best 515720 combination zp ZP_BYTE:62 [ tables_init::idx#2 tables_init::idx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 ]
Uplifting [] best 515720 combination zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ collision::ypos#4 collision::ypos#0 collision::ypos#1 collision::ypos#2 collision::ypos#3 ]
Uplifting [collision] best 515707 combination reg byte y [ collision::ypos#4 collision::ypos#0 collision::ypos#1 collision::ypos#2 collision::ypos#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ]
Uplifting [collision] best 515707 combination zp ZP_BYTE:25 [ collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ]
Uplifting [] best 515707 combination zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ]
Uplifting [] best 515707 combination zp ZP_BYTE:36 [ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Uplifting [play_move_rotate] best 515707 combination zp ZP_BYTE:20 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:78 [ main::render#1 ]
Uplifting [main] best 515707 combination zp ZP_BYTE:78 [ main::render#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:82 [ main::render#2 ]
Uplifting [main] best 515707 combination zp ZP_BYTE:82 [ main::render#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:74 [ main::key_event#0 ]
Uplifting [main] best 515707 combination zp ZP_BYTE:74 [ main::key_event#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:92 [ collision::return#13 ]
Uplifting [collision] best 515701 combination reg byte a [ collision::return#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:93 [ play_move_rotate::$6 ]
Uplifting [play_move_rotate] best 515695 combination reg byte a [ play_move_rotate::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:94 [ play_move_rotate::$4 ]
Uplifting [play_move_rotate] best 515689 combination reg byte a [ play_move_rotate::$4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:101 [ collision::return#12 ]
Uplifting [collision] best 515683 combination reg byte a [ collision::return#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:103 [ collision::return#1 ]
Uplifting [collision] best 515677 combination reg byte a [ collision::return#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:107 [ collision::return#0 ]
Uplifting [collision] best 515671 combination reg byte a [ collision::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:108 [ play_move_down::$12 ]
Uplifting [play_move_down] best 515665 combination reg byte a [ play_move_down::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:125 [ keyboard_event_scan::$14 ]
Uplifting [keyboard_event_scan] best 515659 combination reg byte a [ keyboard_event_scan::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:126 [ keyboard_event_pressed::return#1 ]
Uplifting [keyboard_event_pressed] best 515653 combination reg byte a [ keyboard_event_pressed::return#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:127 [ keyboard_event_scan::$18 ]
Uplifting [keyboard_event_scan] best 515647 combination reg byte a [ keyboard_event_scan::$18 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:128 [ keyboard_event_pressed::return#2 ]
Uplifting [keyboard_event_pressed] best 515641 combination reg byte a [ keyboard_event_pressed::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:129 [ keyboard_event_scan::$22 ]
Uplifting [keyboard_event_scan] best 515635 combination reg byte a [ keyboard_event_scan::$22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:130 [ keyboard_event_pressed::return#10 ]
Uplifting [keyboard_event_pressed] best 515629 combination reg byte a [ keyboard_event_pressed::return#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:131 [ keyboard_event_scan::$26 ]
Uplifting [keyboard_event_scan] best 515623 combination reg byte a [ keyboard_event_scan::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ play_move_rotate::return#2 ]
Uplifting [play_move_rotate] best 515587 combination reg byte a [ play_move_rotate::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ play_move_leftright::return#2 ]
Uplifting [play_move_leftright] best 515551 combination reg byte a [ play_move_leftright::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:41 [ play_move_down::return#3 ]
Uplifting [play_move_down] best 515535 combination reg byte x [ play_move_down::return#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ]
Uplifting [] best 515535 combination zp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:118 [ keyboard_event_pressed::row_bits#0 ]
Uplifting [keyboard_event_pressed] best 515535 combination zp ZP_BYTE:118 [ keyboard_event_pressed::row_bits#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:120 [ keyboard_event_pressed::return#11 ]
Uplifting [keyboard_event_pressed] best 515517 combination reg byte a [ keyboard_event_pressed::return#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ collision::return#14 ]
Uplifting [collision] best 515490 combination reg byte a [ collision::return#14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:53 [ keyboard_event_pressed::keycode#5 ]
Uplifting [keyboard_event_pressed] best 515490 combination zp ZP_BYTE:53 [ keyboard_event_pressed::keycode#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:109 [ spawn_current::$3 ]
Uplifting [spawn_current] best 515490 combination zp ZP_BYTE:109 [ spawn_current::$3 ] 
Coalescing zero page register with common assignment [ zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 ] ] with [ zp ZP_BYTE:48 [ lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 ] ] with [ zp ZP_WORD:95 [ collision::piece_gfx#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:78 [ main::render#1 ] ] with [ zp ZP_BYTE:82 [ main::render#2 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 ] ] with [ zp ZP_BYTE:43 [ remove_lines::y#8 remove_lines::y#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 remove_lines::y#8 remove_lines::y#1 ] ] with [ zp ZP_BYTE:62 [ tables_init::idx#2 tables_init::idx#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 remove_lines::y#8 remove_lines::y#1 tables_init::idx#2 tables_init::idx#1 ] ] with [ zp ZP_BYTE:68 [ render_init::l#4 render_init::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 remove_lines::y#8 remove_lines::y#1 tables_init::idx#2 tables_init::idx#1 render_init::l#4 render_init::l#1 ] ] with [ zp ZP_BYTE:109 [ spawn_current::$3 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 ] ] with [ zp ZP_BYTE:45 [ remove_lines::x#2 remove_lines::x#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 remove_lines::x#2 remove_lines::x#1 ] ] with [ zp ZP_BYTE:49 [ lock_current::l#6 lock_current::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 ] ] with [ zp ZP_BYTE:14 [ render_playfield::l#2 render_playfield::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 render_playfield::l#2 render_playfield::l#1 ] ] with [ zp ZP_BYTE:20 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] ] with [ zp ZP_BYTE:46 [ remove_lines::full#4 remove_lines::full#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 remove_lines::full#4 remove_lines::full#2 ] ] with [ zp ZP_BYTE:50 [ lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 remove_lines::full#4 remove_lines::full#2 lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 ] ] with [ zp ZP_BYTE:53 [ keyboard_event_pressed::keycode#5 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ current_xpos#63 current_xpos#96 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 remove_lines::full#4 remove_lines::full#2 lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 keyboard_event_pressed::keycode#5 ] ] with [ zp ZP_BYTE:55 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 ] ] with [ zp ZP_WORD:16 [ render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 ] ] with [ zp ZP_WORD:21 [ current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 collision::piece_gfx#0 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 collision::piece_gfx#0 ] ] with [ zp ZP_WORD:60 [ tables_init::pli#2 tables_init::pli#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 collision::piece_gfx#0 tables_init::pli#2 tables_init::pli#1 ] ] with [ zp ZP_WORD:64 [ render_init::li#2 render_init::li#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 collision::piece_gfx#0 tables_init::pli#2 tables_init::pli#1 render_init::li#2 render_init::li#1 ] ] with [ zp ZP_WORD:66 [ render_init::line#4 render_init::line#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 collision::piece_gfx#0 tables_init::pli#2 tables_init::pli#1 render_init::li#2 render_init::li#1 render_init::line#4 render_init::line#1 ] ] with [ zp ZP_WORD:71 [ fill::addr#2 fill::addr#0 fill::addr#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 collision::piece_gfx#0 tables_init::pli#2 tables_init::pli#1 render_init::li#2 render_init::li#1 render_init::line#4 render_init::line#1 fill::addr#2 fill::addr#0 fill::addr#1 ] ] with [ zp ZP_WORD:114 [ lock_current::playfield_line#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 ] ] with [ zp ZP_BYTE:15 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] ] with [ zp ZP_BYTE:25 [ collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 ] ] with [ zp ZP_BYTE:51 [ lock_current::col#2 lock_current::col#0 lock_current::col#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 lock_current::col#2 lock_current::col#0 lock_current::col#1 ] ] with [ zp ZP_BYTE:57 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 lock_current::col#2 lock_current::col#0 lock_current::col#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] ] with [ zp ZP_BYTE:113 [ remove_lines::c#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 lock_current::col#2 lock_current::col#0 lock_current::col#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 remove_lines::c#0 ] ] with [ zp ZP_BYTE:118 [ keyboard_event_pressed::row_bits#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ] ] with [ zp ZP_BYTE:26 [ collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 ] ] with [ zp ZP_BYTE:116 [ lock_current::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 lock_current::i#1 ] ] with [ zp ZP_BYTE:123 [ keyboard_event_scan::row_scan#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:10 [ render_current::l#3 render_current::l#1 ] ] with [ zp ZP_BYTE:27 [ collision::l#6 collision::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 ] ] with [ zp ZP_BYTE:28 [ collision::i#2 collision::i#3 collision::i#11 collision::i#13 ] ]
Coalescing zero page register [ zp ZP_BYTE:12 [ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 ] ] with [ zp ZP_BYTE:29 [ collision::col#2 collision::col#9 collision::col#1 ] ]
Coalescing zero page register [ zp ZP_WORD:34 [ current_piece#23 current_piece#76 current_piece#11 current_piece#13 current_piece#71 ] ] with [ zp ZP_WORD:139 [ render_init::$10 ] ]
Coalescing zero page register [ zp ZP_WORD:34 [ current_piece#23 current_piece#76 current_piece#11 current_piece#13 current_piece#71 render_init::$10 ] ] with [ zp ZP_WORD:141 [ fill::end#0 ] ]
Coalescing zero page register [ zp ZP_WORD:87 [ render_current::screen_line#0 ] ] with [ zp ZP_WORD:97 [ collision::playfield_line#0 ] ]
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:4 [ current_xpos#63 current_xpos#96 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 remove_lines::full#4 remove_lines::full#2 lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 keyboard_event_pressed::keycode#5 keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated (was zp ZP_WORD:6) zp ZP_WORD:5 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 collision::piece_gfx#0 tables_init::pli#2 tables_init::pli#1 render_init::li#2 render_init::li#1 render_init::line#4 render_init::line#1 fill::addr#2 fill::addr#0 fill::addr#1 lock_current::playfield_line#0 ]
Allocated (was zp ZP_BYTE:8) zp ZP_BYTE:7 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 lock_current::col#2 lock_current::col#0 lock_current::col#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 remove_lines::c#0 keyboard_event_pressed::row_bits#0 ]
Allocated (was zp ZP_BYTE:9) zp ZP_BYTE:8 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 lock_current::i#1 keyboard_event_scan::row_scan#0 ]
Allocated (was zp ZP_BYTE:10) zp ZP_BYTE:9 [ render_current::l#3 render_current::l#1 collision::l#6 collision::l#1 ]
Allocated (was zp ZP_BYTE:11) zp ZP_BYTE:10 [ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 collision::i#2 collision::i#3 collision::i#11 collision::i#13 ]
Allocated (was zp ZP_BYTE:12) zp ZP_BYTE:11 [ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 collision::col#2 collision::col#9 collision::col#1 ]
Allocated (was zp ZP_WORD:34) zp ZP_WORD:12 [ current_piece#23 current_piece#76 current_piece#11 current_piece#13 current_piece#71 render_init::$10 fill::end#0 ]
Allocated (was zp ZP_BYTE:36) zp ZP_BYTE:14 [ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ]
Allocated (was zp ZP_WORD:37) zp ZP_WORD:15 [ current_piece_gfx#29 current_piece_gfx#15 current_piece_gfx#18 current_piece_gfx#10 current_piece_gfx#8 current_piece_gfx#17 ]
Allocated (was zp ZP_BYTE:39) zp ZP_BYTE:17 [ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ]
Allocated (was zp ZP_BYTE:40) zp ZP_BYTE:18 [ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ]
Allocated (was zp ZP_BYTE:58) zp ZP_BYTE:19 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
Allocated (was zp ZP_BYTE:74) zp ZP_BYTE:20 [ main::key_event#0 ]
Allocated (was zp ZP_BYTE:78) zp ZP_BYTE:21 [ main::render#1 main::render#2 ]
Allocated (was zp ZP_WORD:87) zp ZP_WORD:22 [ render_current::screen_line#0 collision::playfield_line#0 ]
Allocated (was zp ZP_BYTE:99) zp ZP_BYTE:24 [ collision::i#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label COLS = $d800
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .const BLACK = 0
  .const WHITE = 1
  .const GREEN = 5
  .const DARK_GREY = $b
  .const LIGHT_GREY = $f
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  .const current_movedown_slow = $32
  .const current_movedown_fast = 5
  .const COLLISION_NONE = 0
  .const COLLISION_PLAYFIELD = 1
  .const COLLISION_BOTTOM = 2
  .const COLLISION_LEFT = 4
  .const COLLISION_RIGHT = 8
  .label SCREEN = $400
  .label CHARSET = $2000
  .label keyboard_events_size = $13
  .label current_ypos = 2
  .label current_xpos = $11
  .label current_orientation = $e
  .label current_piece_gfx = $f
  .label current_piece = $c
  .label current_piece_color = $12
  .label current_movedown_counter = 3
  .label current_piece_15 = 5
  .label current_xpos_63 = 4
  .label current_piece_gfx_64 = 5
  .label current_piece_color_67 = 7
  .label current_xpos_96 = 4
  .label current_piece_gfx_87 = 5
  .label current_piece_gfx_88 = 5
  .label current_piece_color_75 = 7
  .label current_piece_color_76 = 7
  .label current_piece_72 = 5
  .label current_piece_73 = 5
  .label current_piece_74 = 5
  .label current_piece_75 = 5
//SEG2 @begin
bbegin:
  jmp b22
//SEG3 @22
b22:
//SEG4 kickasm(location (const byte*) CHARSET#0) {{ .var charset = LoadPicture("charset.png", List().add($000000, $ffffff, $523fa0, $77c1c9))     .for (var c=0; c<16; c++)         .for (var y=0;y<8; y++)             .byte charset.getMulticolorByte(c,y)  }}
//SEG5 [2] phi from @22 to @25 [phi:@22->@25]
b25_from_b22:
  jmp b25
//SEG6 @25
b25:
//SEG7 [3] call main 
//SEG8 [5] phi from @25 to main [phi:@25->main]
main_from_b25:
  jsr main
//SEG9 [4] phi from @25 to @end [phi:@25->@end]
bend_from_b25:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .label key_event = $14
    .label render = $15
  //SEG12 [6] call sid_rnd_init 
    jsr sid_rnd_init
    jmp b21
  //SEG13 main::@21
  b21:
  //SEG14 asm { sei  }
    sei
  //SEG15 [8] call render_init 
  //SEG16 [315] phi from main::@21 to render_init [phi:main::@21->render_init]
  render_init_from_b21:
    jsr render_init
  //SEG17 [9] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
  b22_from_b21:
    jmp b22
  //SEG18 main::@22
  b22:
  //SEG19 [10] call tables_init 
  //SEG20 [304] phi from main::@22 to tables_init [phi:main::@22->tables_init]
  tables_init_from_b22:
    jsr tables_init
  //SEG21 [11] phi from main::@22 to main::@23 [phi:main::@22->main::@23]
  b23_from_b22:
    jmp b23
  //SEG22 main::@23
  b23:
  //SEG23 [12] call spawn_current 
  //SEG24 [184] phi from main::@23 to spawn_current [phi:main::@23->spawn_current]
  spawn_current_from_b23:
    jsr spawn_current
  //SEG25 [13] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  b24_from_b23:
    jmp b24
  //SEG26 main::@24
  b24:
  //SEG27 [14] call render_playfield 
  //SEG28 [72] phi from main::@24 to render_playfield [phi:main::@24->render_playfield]
  render_playfield_from_b24:
    jsr render_playfield
    jmp b25
  //SEG29 main::@25
  b25:
  //SEG30 [15] (byte*~) current_piece_gfx#87 ← (byte*) current_piece_gfx#10 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_87
    lda current_piece_gfx+1
    sta current_piece_gfx_87+1
  //SEG31 [16] (byte~) current_piece_color#75 ← (byte) current_piece_color#15 -- vbuz1=vbuz2 
    lda current_piece_color
    sta current_piece_color_75
  //SEG32 [17] call render_current 
  //SEG33 [52] phi from main::@25 to render_current [phi:main::@25->render_current]
  render_current_from_b25:
  //SEG34 [52] phi (byte) current_piece_color#67 = (byte~) current_piece_color#75 [phi:main::@25->render_current#0] -- register_copy 
  //SEG35 [52] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#87 [phi:main::@25->render_current#1] -- register_copy 
  //SEG36 [52] phi (byte) current_xpos#63 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main::@25->render_current#2] -- vbuz1=vbuc1 
    lda #3
    sta current_xpos_63
  //SEG37 [52] phi (byte) current_ypos#22 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->render_current#3] -- vbuxx=vbuc1 
    ldx #0
    jsr render_current
  //SEG38 [18] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG39 [19] phi from main::@25 to main::@1 [phi:main::@25->main::@1]
  b1_from_b25:
  //SEG40 [19] phi (byte) current_movedown_counter#15 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG41 [19] phi (byte) keyboard_events_size#19 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keyboard_events_size
  //SEG42 [19] phi (byte) current_piece_color#11 = (byte) current_piece_color#15 [phi:main::@25->main::@1#2] -- register_copy 
  //SEG43 [19] phi (byte) current_ypos#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta current_ypos
  //SEG44 [19] phi (byte) current_xpos#16 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main::@25->main::@1#4] -- vbuz1=vbuc1 
    lda #3
    sta current_xpos
  //SEG45 [19] phi (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#10 [phi:main::@25->main::@1#5] -- register_copy 
  //SEG46 [19] phi (byte) current_orientation#15 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#6] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG47 [19] phi (byte*) current_piece#11 = (byte*~) current_piece#71 [phi:main::@25->main::@1#7] -- register_copy 
    jmp b1
  //SEG48 main::@1
  b1:
    jmp b4
  //SEG49 main::@4
  b4:
  //SEG50 [20] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b7
  //SEG51 main::@7
  b7:
  //SEG52 [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 254) goto main::@7 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$fe
    bne b7
    jmp b9
  //SEG53 main::@9
  b9:
  //SEG54 [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG55 [23] call keyboard_event_scan 
  //SEG56 [248] phi from main::@9 to keyboard_event_scan [phi:main::@9->keyboard_event_scan]
  keyboard_event_scan_from_b9:
    jsr keyboard_event_scan
  //SEG57 [24] phi from main::@9 to main::@27 [phi:main::@9->main::@27]
  b27_from_b9:
    jmp b27
  //SEG58 main::@27
  b27:
  //SEG59 [25] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG60 [26] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    // (byte) keyboard_event_get::return#3 = (byte) keyboard_event_get::return#2  // register copy reg byte a
    jmp b28
  //SEG61 main::@28
  b28:
  //SEG62 [27] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuaa 
    sta key_event
  //SEG63 [28] (byte) play_move_down::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
    lda key_event
  //SEG64 [29] call play_move_down 
    jsr play_move_down
  //SEG65 [30] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3 -- vbuaa=vbuxx 
    txa
    jmp b29
  //SEG66 main::@29
  b29:
  //SEG67 [31] (byte~) main::$10 ← (byte) play_move_down::return#0
    // (byte~) main::$10 = (byte) play_move_down::return#0  // register copy reg byte a
  //SEG68 [32] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$10 -- vbuz1=vbuc1_plus_vbuaa 
    clc
    adc #0
    sta render
  //SEG69 [33] (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
    lda key_event
  //SEG70 [34] call play_move_leftright 
    jsr play_move_leftright
  //SEG71 [35] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
    // (byte) play_move_leftright::return#0 = (byte) play_move_leftright::return#2  // register copy reg byte a
    jmp b30
  //SEG72 main::@30
  b30:
  //SEG73 [36] (byte~) main::$11 ← (byte) play_move_leftright::return#0
    // (byte~) main::$11 = (byte) play_move_leftright::return#0  // register copy reg byte a
  //SEG74 [37] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$11 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc render
    sta render
  //SEG75 [38] (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
    lda key_event
  //SEG76 [39] call play_move_rotate 
    jsr play_move_rotate
  //SEG77 [40] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
    // (byte) play_move_rotate::return#0 = (byte) play_move_rotate::return#2  // register copy reg byte a
    jmp b31
  //SEG78 main::@31
  b31:
  //SEG79 [41] (byte~) main::$12 ← (byte) play_move_rotate::return#0
    // (byte~) main::$12 = (byte) play_move_rotate::return#0  // register copy reg byte a
  //SEG80 [42] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$12 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc render
  //SEG81 [43] if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10
  //SEG82 [44] phi from main::@31 to main::@19 [phi:main::@31->main::@19]
  b19_from_b31:
    jmp b19
  //SEG83 main::@19
  b19:
  //SEG84 [45] call render_playfield 
  //SEG85 [72] phi from main::@19 to render_playfield [phi:main::@19->render_playfield]
  render_playfield_from_b19:
    jsr render_playfield
    jmp b32
  //SEG86 main::@32
  b32:
  //SEG87 [46] (byte~) current_ypos#71 ← (byte) current_ypos#16 -- vbuxx=vbuz1 
    ldx current_ypos
  //SEG88 [47] (byte~) current_xpos#96 ← (byte) current_xpos#23 -- vbuz1=vbuz2 
    lda current_xpos
    sta current_xpos_96
  //SEG89 [48] (byte*~) current_piece_gfx#88 ← (byte*) current_piece_gfx#18 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_88
    lda current_piece_gfx+1
    sta current_piece_gfx_88+1
  //SEG90 [49] (byte~) current_piece_color#76 ← (byte) current_piece_color#13 -- vbuz1=vbuz2 
    lda current_piece_color
    sta current_piece_color_76
  //SEG91 [50] call render_current 
  //SEG92 [52] phi from main::@32 to render_current [phi:main::@32->render_current]
  render_current_from_b32:
  //SEG93 [52] phi (byte) current_piece_color#67 = (byte~) current_piece_color#76 [phi:main::@32->render_current#0] -- register_copy 
  //SEG94 [52] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#88 [phi:main::@32->render_current#1] -- register_copy 
  //SEG95 [52] phi (byte) current_xpos#63 = (byte~) current_xpos#96 [phi:main::@32->render_current#2] -- register_copy 
  //SEG96 [52] phi (byte) current_ypos#22 = (byte~) current_ypos#71 [phi:main::@32->render_current#3] -- register_copy 
    jsr render_current
    jmp b10
  //SEG97 main::@10
  b10:
  //SEG98 [51] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
  //SEG99 [19] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
  b1_from_b10:
  //SEG100 [19] phi (byte) current_movedown_counter#15 = (byte) current_movedown_counter#12 [phi:main::@10->main::@1#0] -- register_copy 
  //SEG101 [19] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@10->main::@1#1] -- register_copy 
  //SEG102 [19] phi (byte) current_piece_color#11 = (byte) current_piece_color#13 [phi:main::@10->main::@1#2] -- register_copy 
  //SEG103 [19] phi (byte) current_ypos#12 = (byte) current_ypos#16 [phi:main::@10->main::@1#3] -- register_copy 
  //SEG104 [19] phi (byte) current_xpos#16 = (byte) current_xpos#23 [phi:main::@10->main::@1#4] -- register_copy 
  //SEG105 [19] phi (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#18 [phi:main::@10->main::@1#5] -- register_copy 
  //SEG106 [19] phi (byte) current_orientation#15 = (byte) current_orientation#23 [phi:main::@10->main::@1#6] -- register_copy 
  //SEG107 [19] phi (byte*) current_piece#11 = (byte*) current_piece#13 [phi:main::@10->main::@1#7] -- register_copy 
    jmp b1
}
//SEG108 render_current
render_current: {
    .label ypos2 = 8
    .label l = 9
    .label screen_line = $16
    .label xpos = $b
    .label i = $a
  //SEG109 [53] (byte) render_current::ypos2#0 ← (byte) current_ypos#22 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta ypos2
  //SEG110 [54] phi from render_current to render_current::@1 [phi:render_current->render_current::@1]
  b1_from_render_current:
  //SEG111 [54] phi (byte) render_current::i#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG112 [54] phi (byte) render_current::l#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG113 [54] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#0 [phi:render_current->render_current::@1#2] -- register_copy 
    jmp b1
  //SEG114 [54] phi from render_current::@2 to render_current::@1 [phi:render_current::@2->render_current::@1]
  b1_from_b2:
  //SEG115 [54] phi (byte) render_current::i#4 = (byte) render_current::i#8 [phi:render_current::@2->render_current::@1#0] -- register_copy 
  //SEG116 [54] phi (byte) render_current::l#3 = (byte) render_current::l#1 [phi:render_current::@2->render_current::@1#1] -- register_copy 
  //SEG117 [54] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#1 [phi:render_current::@2->render_current::@1#2] -- register_copy 
    jmp b1
  //SEG118 render_current::@1
  b1:
  //SEG119 [55] if((byte) render_current::ypos2#2>=(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto render_current::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcs b2_from_b1
    jmp b6
  //SEG120 render_current::@6
  b6:
  //SEG121 [56] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte) render_current::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda screen_lines,y
    sta screen_line
    lda screen_lines+1,y
    sta screen_line+1
  //SEG122 [57] (byte) render_current::xpos#0 ← (byte) current_xpos#63 -- vbuz1=vbuz2 
    lda current_xpos_63
    sta xpos
  //SEG123 [58] phi from render_current::@6 to render_current::@3 [phi:render_current::@6->render_current::@3]
  b3_from_b6:
  //SEG124 [58] phi (byte) render_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current::@6->render_current::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG125 [58] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#0 [phi:render_current::@6->render_current::@3#1] -- register_copy 
  //SEG126 [58] phi (byte) render_current::i#2 = (byte) render_current::i#4 [phi:render_current::@6->render_current::@3#2] -- register_copy 
    jmp b3
  //SEG127 [58] phi from render_current::@4 to render_current::@3 [phi:render_current::@4->render_current::@3]
  b3_from_b4:
  //SEG128 [58] phi (byte) render_current::c#2 = (byte) render_current::c#1 [phi:render_current::@4->render_current::@3#0] -- register_copy 
  //SEG129 [58] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#1 [phi:render_current::@4->render_current::@3#1] -- register_copy 
  //SEG130 [58] phi (byte) render_current::i#2 = (byte) render_current::i#1 [phi:render_current::@4->render_current::@3#2] -- register_copy 
    jmp b3
  //SEG131 render_current::@3
  b3:
  //SEG132 [59] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_current::i#2) -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy i
    lda (current_piece_gfx_64),y
  //SEG133 [60] (byte) render_current::i#1 ← ++ (byte) render_current::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG134 [61] if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4
    jmp b7
  //SEG135 render_current::@7
  b7:
  //SEG136 [62] if((byte) render_current::xpos#2>=(const byte) PLAYFIELD_COLS#0) goto render_current::@4 -- vbuz1_ge_vbuc1_then_la1 
    lda xpos
    cmp #PLAYFIELD_COLS
    bcs b4
    jmp b8
  //SEG137 render_current::@8
  b8:
  //SEG138 [63] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_color#67 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda current_piece_color_67
    ldy xpos
    sta (screen_line),y
    jmp b4
  //SEG139 render_current::@4
  b4:
  //SEG140 [64] (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2 -- vbuz1=_inc_vbuz1 
    inc xpos
  //SEG141 [65] (byte) render_current::c#1 ← ++ (byte) render_current::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG142 [66] if((byte) render_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b3_from_b4
  //SEG143 [67] phi from render_current::@1 render_current::@4 to render_current::@2 [phi:render_current::@1/render_current::@4->render_current::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG144 [67] phi (byte) render_current::i#8 = (byte) render_current::i#4 [phi:render_current::@1/render_current::@4->render_current::@2#0] -- register_copy 
    jmp b2
  //SEG145 render_current::@2
  b2:
  //SEG146 [68] (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG147 [69] (byte) render_current::l#1 ← ++ (byte) render_current::l#3 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG148 [70] if((byte) render_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b1_from_b2
    jmp breturn
  //SEG149 render_current::@return
  breturn:
  //SEG150 [71] return 
    rts
}
//SEG151 render_playfield
render_playfield: {
    .label line = 5
    .label i = 7
    .label l = 4
  //SEG152 [73] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  b1_from_render_playfield:
  //SEG153 [73] phi (byte) render_playfield::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG154 [73] phi (byte) render_playfield::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta l
    jmp b1
  //SEG155 [73] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  b1_from_b3:
  //SEG156 [73] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
  //SEG157 [73] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    jmp b1
  //SEG158 render_playfield::@1
  b1:
  //SEG159 [74] (byte~) render_playfield::$1 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_rol_1 
    lda l
    asl
  //SEG160 [75] (byte*) render_playfield::line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_playfield::$1) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines,y
    sta line
    lda screen_lines+1,y
    sta line+1
  //SEG161 [76] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  b2_from_b1:
  //SEG162 [76] phi (byte) render_playfield::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG163 [76] phi (byte*) render_playfield::line#2 = (byte*) render_playfield::line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
  //SEG164 [76] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
    jmp b2
  //SEG165 [76] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  b2_from_b2:
  //SEG166 [76] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
  //SEG167 [76] phi (byte*) render_playfield::line#2 = (byte*) render_playfield::line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
  //SEG168 [76] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
    jmp b2
  //SEG169 render_playfield::@2
  b2:
  //SEG170 [77] *((byte*) render_playfield::line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda playfield,y
    ldy #0
    sta (line),y
  //SEG171 [78] (byte*) render_playfield::line#1 ← ++ (byte*) render_playfield::line#2 -- pbuz1=_inc_pbuz1 
    inc line
    bne !+
    inc line+1
  !:
  //SEG172 [79] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG173 [80] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG174 [81] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_COLS-1+1
    bne b2_from_b2
    jmp b3
  //SEG175 render_playfield::@3
  b3:
  //SEG176 [82] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG177 [83] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b3
    jmp breturn
  //SEG178 render_playfield::@return
  breturn:
  //SEG179 [84] return 
    rts
}
//SEG180 play_move_rotate
play_move_rotate: {
    .label orientation = 4
  //SEG181 [85] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_Z
    beq b1
    jmp b6
  //SEG182 play_move_rotate::@6
  b6:
  //SEG183 [86] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_X
    beq b2
  //SEG184 [87] phi from play_move_rotate::@14 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return]
  breturn_from_b14:
  breturn_from_b6:
  //SEG185 [87] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#17 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
  //SEG186 [87] phi (byte) current_orientation#23 = (byte) current_orientation#18 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
  //SEG187 [87] phi (byte) play_move_rotate::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #0
    jmp breturn
  //SEG188 play_move_rotate::@return
  breturn:
  //SEG189 [88] return 
    rts
  //SEG190 play_move_rotate::@2
  b2:
  //SEG191 [89] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#18 + (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$10
    clc
    adc current_orientation
  //SEG192 [90] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuaa_band_vbuc1 
    and #$3f
    sta orientation
  //SEG193 [91] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@4 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4]
  b4_from_b1:
  b4_from_b2:
  //SEG194 [91] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4#0] -- register_copy 
    jmp b4
  //SEG195 play_move_rotate::@4
  b4:
  //SEG196 [92] (byte) collision::xpos#3 ← (byte) current_xpos#23 -- vbuz1=vbuz2 
    lda current_xpos
    sta collision.xpos
  //SEG197 [93] (byte) collision::ypos#3 ← (byte) current_ypos#16 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG198 [94] (byte) collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuxx=vbuz1 
    ldx orientation
  //SEG199 [95] (byte*~) current_piece#75 ← (byte*) current_piece#13 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_75
    lda current_piece+1
    sta current_piece_75+1
  //SEG200 [96] call collision 
  //SEG201 [104] phi from play_move_rotate::@4 to collision [phi:play_move_rotate::@4->collision]
  collision_from_b4:
  //SEG202 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#3 [phi:play_move_rotate::@4->collision#0] -- register_copy 
  //SEG203 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#3 [phi:play_move_rotate::@4->collision#1] -- register_copy 
  //SEG204 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#3 [phi:play_move_rotate::@4->collision#2] -- register_copy 
  //SEG205 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#75 [phi:play_move_rotate::@4->collision#3] -- register_copy 
    jsr collision
  //SEG206 [97] (byte) collision::return#13 ← (byte) collision::return#14
    // (byte) collision::return#13 = (byte) collision::return#14  // register copy reg byte a
    jmp b14
  //SEG207 play_move_rotate::@14
  b14:
  //SEG208 [98] (byte~) play_move_rotate::$6 ← (byte) collision::return#13
    // (byte~) play_move_rotate::$6 = (byte) collision::return#13  // register copy reg byte a
  //SEG209 [99] if((byte~) play_move_rotate::$6!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne breturn_from_b14
    jmp b11
  //SEG210 play_move_rotate::@11
  b11:
  //SEG211 [100] (byte) current_orientation#8 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda orientation
    sta current_orientation
  //SEG212 [101] (byte*) current_piece_gfx#8 ← (byte*) current_piece#13 + (byte) current_orientation#8 -- pbuz1=pbuz2_plus_vbuz3 
    lda current_orientation
    clc
    adc current_piece
    sta current_piece_gfx
    lda #0
    adc current_piece+1
    sta current_piece_gfx+1
  //SEG213 [87] phi from play_move_rotate::@11 to play_move_rotate::@return [phi:play_move_rotate::@11->play_move_rotate::@return]
  breturn_from_b11:
  //SEG214 [87] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#8 [phi:play_move_rotate::@11->play_move_rotate::@return#0] -- register_copy 
  //SEG215 [87] phi (byte) current_orientation#23 = (byte) current_orientation#8 [phi:play_move_rotate::@11->play_move_rotate::@return#1] -- register_copy 
  //SEG216 [87] phi (byte) play_move_rotate::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_rotate::@11->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #1
    jmp breturn
  //SEG217 play_move_rotate::@1
  b1:
  //SEG218 [102] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#18 - (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuaa=vbuz1_minus_vbuc1 
    lda current_orientation
    sec
    sbc #$10
  //SEG219 [103] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuaa_band_vbuc1 
    and #$3f
    sta orientation
    jmp b4_from_b1
}
//SEG220 collision
collision: {
    .label xpos = 7
    .label piece_gfx = 5
    .label ypos2 = 8
    .label playfield_line = $16
    .label i = $18
    .label col = $b
    .label l = 9
    .label i_2 = $a
    .label i_3 = $a
    .label i_11 = $a
    .label i_13 = $a
  //SEG221 [105] (byte*) collision::piece_gfx#0 ← (byte*) current_piece#15 + (byte) collision::orientation#4 -- pbuz1=pbuz1_plus_vbuxx 
    txa
    clc
    adc piece_gfx
    sta piece_gfx
    lda #0
    adc piece_gfx+1
    sta piece_gfx+1
  //SEG222 [106] (byte) collision::ypos2#0 ← (byte) collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuyy_rol_1 
    tya
    asl
    sta ypos2
  //SEG223 [107] phi from collision to collision::@1 [phi:collision->collision::@1]
  b1_from_collision:
  //SEG224 [107] phi (byte) collision::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:collision->collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG225 [107] phi (byte) collision::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:collision->collision::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i_3
  //SEG226 [107] phi (byte) collision::ypos2#2 = (byte) collision::ypos2#0 [phi:collision->collision::@1#2] -- register_copy 
    jmp b1
  //SEG227 collision::@1
  b1:
  //SEG228 [108] (byte*) collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) collision::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG229 [109] (byte~) collision::col#9 ← (byte) collision::xpos#5 -- vbuz1=vbuz2 
    lda xpos
    sta col
  //SEG230 [110] phi from collision::@1 to collision::@2 [phi:collision::@1->collision::@2]
  b2_from_b1:
  //SEG231 [110] phi (byte) collision::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:collision::@1->collision::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG232 [110] phi (byte) collision::col#2 = (byte~) collision::col#9 [phi:collision::@1->collision::@2#1] -- register_copy 
  //SEG233 [110] phi (byte) collision::i#2 = (byte) collision::i#3 [phi:collision::@1->collision::@2#2] -- register_copy 
    jmp b2
  //SEG234 collision::@2
  b2:
  //SEG235 [111] (byte) collision::i#1 ← ++ (byte) collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG236 [112] if(*((byte*) collision::piece_gfx#0 + (byte) collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (piece_gfx),y
    cmp #0
    beq b3
    jmp b8
  //SEG237 collision::@8
  b8:
  //SEG238 [113] if((byte) collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcc b4
  //SEG239 [114] phi from collision::@8 to collision::@return [phi:collision::@8->collision::@return]
  breturn_from_b8:
  //SEG240 [114] phi (byte) collision::return#14 = (const byte) COLLISION_BOTTOM#0 [phi:collision::@8->collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_BOTTOM
    jmp breturn
  //SEG241 collision::@return
  breturn:
  //SEG242 [115] return 
    rts
  //SEG243 collision::@4
  b4:
  //SEG244 [116] (byte~) collision::$7 ← (byte) collision::col#2 & (byte/word/signed word/dword/signed dword) 128 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and col
  //SEG245 [117] if((byte~) collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG246 [114] phi from collision::@4 to collision::@return [phi:collision::@4->collision::@return]
  breturn_from_b4:
  //SEG247 [114] phi (byte) collision::return#14 = (const byte) COLLISION_LEFT#0 [phi:collision::@4->collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_LEFT
    jmp breturn
  //SEG248 collision::@5
  b5:
  //SEG249 [118] if((byte) collision::col#2<(const byte) PLAYFIELD_COLS#0) goto collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda col
    cmp #PLAYFIELD_COLS
    bcc b6
  //SEG250 [114] phi from collision::@5 to collision::@return [phi:collision::@5->collision::@return]
  breturn_from_b5:
  //SEG251 [114] phi (byte) collision::return#14 = (const byte) COLLISION_RIGHT#0 [phi:collision::@5->collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_RIGHT
    jmp breturn
  //SEG252 collision::@6
  b6:
  //SEG253 [119] if(*((byte*) collision::playfield_line#0 + (byte) collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy col
    lda (playfield_line),y
    cmp #0
    beq b3
  //SEG254 [114] phi from collision::@6 to collision::@return [phi:collision::@6->collision::@return]
  breturn_from_b6:
  //SEG255 [114] phi (byte) collision::return#14 = (const byte) COLLISION_PLAYFIELD#0 [phi:collision::@6->collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_PLAYFIELD
    jmp breturn
  //SEG256 collision::@3
  b3:
  //SEG257 [120] (byte) collision::col#1 ← ++ (byte) collision::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG258 [121] (byte) collision::c#1 ← ++ (byte) collision::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG259 [122] if((byte) collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto collision::@21 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b21
    jmp b17
  //SEG260 collision::@17
  b17:
  //SEG261 [123] (byte) collision::ypos2#1 ← (byte) collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG262 [124] (byte) collision::l#1 ← ++ (byte) collision::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG263 [125] if((byte) collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto collision::@20 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b20
  //SEG264 [114] phi from collision::@17 to collision::@return [phi:collision::@17->collision::@return]
  breturn_from_b17:
  //SEG265 [114] phi (byte) collision::return#14 = (const byte) COLLISION_NONE#0 [phi:collision::@17->collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_NONE
    jmp breturn
  //SEG266 collision::@20
  b20:
  //SEG267 [126] (byte~) collision::i#11 ← (byte) collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_11
  //SEG268 [107] phi from collision::@20 to collision::@1 [phi:collision::@20->collision::@1]
  b1_from_b20:
  //SEG269 [107] phi (byte) collision::l#6 = (byte) collision::l#1 [phi:collision::@20->collision::@1#0] -- register_copy 
  //SEG270 [107] phi (byte) collision::i#3 = (byte~) collision::i#11 [phi:collision::@20->collision::@1#1] -- register_copy 
  //SEG271 [107] phi (byte) collision::ypos2#2 = (byte) collision::ypos2#1 [phi:collision::@20->collision::@1#2] -- register_copy 
    jmp b1
  //SEG272 collision::@21
  b21:
  //SEG273 [127] (byte~) collision::i#13 ← (byte) collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_13
  //SEG274 [110] phi from collision::@21 to collision::@2 [phi:collision::@21->collision::@2]
  b2_from_b21:
  //SEG275 [110] phi (byte) collision::c#2 = (byte) collision::c#1 [phi:collision::@21->collision::@2#0] -- register_copy 
  //SEG276 [110] phi (byte) collision::col#2 = (byte) collision::col#1 [phi:collision::@21->collision::@2#1] -- register_copy 
  //SEG277 [110] phi (byte) collision::i#2 = (byte~) collision::i#13 [phi:collision::@21->collision::@2#2] -- register_copy 
    jmp b2
}
//SEG278 play_move_leftright
play_move_leftright: {
  //SEG279 [128] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_COMMA
    beq b1
    jmp b6
  //SEG280 play_move_leftright::@6
  b6:
  //SEG281 [129] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_DOT
    bne breturn_from_b6
    jmp b7
  //SEG282 play_move_leftright::@7
  b7:
  //SEG283 [130] (byte) collision::xpos#2 ← (byte) current_xpos#19 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy current_xpos
    iny
    sty collision.xpos
  //SEG284 [131] (byte) collision::ypos#2 ← (byte) current_ypos#16 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG285 [132] (byte) collision::orientation#2 ← (byte) current_orientation#18 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG286 [133] (byte*~) current_piece#74 ← (byte*) current_piece#13 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_74
    lda current_piece+1
    sta current_piece_74+1
  //SEG287 [134] call collision 
  //SEG288 [104] phi from play_move_leftright::@7 to collision [phi:play_move_leftright::@7->collision]
  collision_from_b7:
  //SEG289 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#2 [phi:play_move_leftright::@7->collision#0] -- register_copy 
  //SEG290 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#2 [phi:play_move_leftright::@7->collision#1] -- register_copy 
  //SEG291 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#2 [phi:play_move_leftright::@7->collision#2] -- register_copy 
  //SEG292 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#74 [phi:play_move_leftright::@7->collision#3] -- register_copy 
    jsr collision
  //SEG293 [135] (byte) collision::return#12 ← (byte) collision::return#14
    // (byte) collision::return#12 = (byte) collision::return#14  // register copy reg byte a
    jmp b15
  //SEG294 play_move_leftright::@15
  b15:
  //SEG295 [136] (byte~) play_move_leftright::$4 ← (byte) collision::return#12
    // (byte~) play_move_leftright::$4 = (byte) collision::return#12  // register copy reg byte a
  //SEG296 [137] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne breturn_from_b15
    jmp b8
  //SEG297 play_move_leftright::@8
  b8:
  //SEG298 [138] (byte) current_xpos#7 ← ++ (byte) current_xpos#19 -- vbuz1=_inc_vbuz1 
    inc current_xpos
  //SEG299 [139] phi from play_move_leftright::@11 play_move_leftright::@8 to play_move_leftright::@return [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return]
  breturn_from_b11:
  breturn_from_b8:
  //SEG300 [139] phi (byte) current_xpos#23 = (byte) current_xpos#9 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#0] -- register_copy 
  //SEG301 [139] phi (byte) play_move_leftright::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #1
    jmp breturn
  //SEG302 [139] phi from play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@6 to play_move_leftright::@return [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return]
  breturn_from_b14:
  breturn_from_b15:
  breturn_from_b6:
  //SEG303 [139] phi (byte) current_xpos#23 = (byte) current_xpos#19 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#0] -- register_copy 
  //SEG304 [139] phi (byte) play_move_leftright::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #0
    jmp breturn
  //SEG305 play_move_leftright::@return
  breturn:
  //SEG306 [140] return 
    rts
  //SEG307 play_move_leftright::@1
  b1:
  //SEG308 [141] (byte) collision::xpos#1 ← (byte) current_xpos#19 - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_minus_1 
    ldx current_xpos
    dex
    stx collision.xpos
  //SEG309 [142] (byte) collision::ypos#1 ← (byte) current_ypos#16 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG310 [143] (byte) collision::orientation#1 ← (byte) current_orientation#18 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG311 [144] (byte*~) current_piece#73 ← (byte*) current_piece#13 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_73
    lda current_piece+1
    sta current_piece_73+1
  //SEG312 [145] call collision 
  //SEG313 [104] phi from play_move_leftright::@1 to collision [phi:play_move_leftright::@1->collision]
  collision_from_b1:
  //SEG314 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#1 [phi:play_move_leftright::@1->collision#0] -- register_copy 
  //SEG315 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#1 [phi:play_move_leftright::@1->collision#1] -- register_copy 
  //SEG316 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#1 [phi:play_move_leftright::@1->collision#2] -- register_copy 
  //SEG317 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#73 [phi:play_move_leftright::@1->collision#3] -- register_copy 
    jsr collision
  //SEG318 [146] (byte) collision::return#1 ← (byte) collision::return#14
    // (byte) collision::return#1 = (byte) collision::return#14  // register copy reg byte a
    jmp b14
  //SEG319 play_move_leftright::@14
  b14:
  //SEG320 [147] (byte~) play_move_leftright::$8 ← (byte) collision::return#1
    // (byte~) play_move_leftright::$8 = (byte) collision::return#1  // register copy reg byte a
  //SEG321 [148] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne breturn_from_b14
    jmp b11
  //SEG322 play_move_leftright::@11
  b11:
  //SEG323 [149] (byte) current_xpos#9 ← -- (byte) current_xpos#19 -- vbuz1=_dec_vbuz1 
    dec current_xpos
    jmp breturn_from_b11
}
//SEG324 play_move_down
play_move_down: {
  //SEG325 [150] (byte) current_movedown_counter#10 ← ++ (byte) current_movedown_counter#15 -- vbuz1=_inc_vbuz1 
    inc current_movedown_counter
  //SEG326 [151] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b1_from_play_move_down
  //SEG327 [152] phi from play_move_down to play_move_down::@8 [phi:play_move_down->play_move_down::@8]
  b8_from_play_move_down:
    jmp b8
  //SEG328 play_move_down::@8
  b8:
  //SEG329 [153] phi from play_move_down::@8 to play_move_down::@1 [phi:play_move_down::@8->play_move_down::@1]
  b1_from_b8:
  //SEG330 [153] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@8->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #1
    jmp b1
  //SEG331 [153] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  b1_from_play_move_down:
  //SEG332 [153] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG333 play_move_down::@1
  b1:
  //SEG334 [154] call keyboard_event_pressed 
  //SEG335 [237] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
  keyboard_event_pressed_from_b1:
  //SEG336 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_SPACE#0 [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG337 [155] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#12 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
    jmp b17
  //SEG338 play_move_down::@17
  b17:
  //SEG339 [156] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
    // (byte~) play_move_down::$2 = (byte) keyboard_event_pressed::return#12  // register copy reg byte a
  //SEG340 [157] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b17
    jmp b9
  //SEG341 play_move_down::@9
  b9:
  //SEG342 [158] if((byte) current_movedown_counter#10<(const byte) current_movedown_fast#0) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_fast
    bcc b2_from_b9
    jmp b10
  //SEG343 play_move_down::@10
  b10:
  //SEG344 [159] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuxx=_inc_vbuxx 
    inx
  //SEG345 [160] phi from play_move_down::@10 play_move_down::@17 play_move_down::@9 to play_move_down::@2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2]
  b2_from_b10:
  b2_from_b17:
  b2_from_b9:
  //SEG346 [160] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2#0] -- register_copy 
    jmp b2
  //SEG347 play_move_down::@2
  b2:
  //SEG348 [161] if((byte) current_movedown_counter#10<(const byte) current_movedown_slow#0) goto play_move_down::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_slow
    bcc b4_from_b2
    jmp b11
  //SEG349 play_move_down::@11
  b11:
  //SEG350 [162] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuxx=_inc_vbuxx 
    inx
  //SEG351 [163] phi from play_move_down::@11 play_move_down::@2 to play_move_down::@4 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4]
  b4_from_b11:
  b4_from_b2:
  //SEG352 [163] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#3 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4#0] -- register_copy 
    jmp b4
  //SEG353 play_move_down::@4
  b4:
  //SEG354 [164] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq breturn_from_b4
    jmp b12
  //SEG355 play_move_down::@12
  b12:
  //SEG356 [165] (byte) collision::ypos#0 ← (byte) current_ypos#12 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuyy=vbuz1_plus_1 
    ldy current_ypos
    iny
  //SEG357 [166] (byte) collision::xpos#0 ← (byte) current_xpos#16 -- vbuz1=vbuz2 
    lda current_xpos
    sta collision.xpos
  //SEG358 [167] (byte) collision::orientation#0 ← (byte) current_orientation#15 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG359 [168] (byte*~) current_piece#72 ← (byte*) current_piece#11 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_72
    lda current_piece+1
    sta current_piece_72+1
  //SEG360 [169] call collision 
  //SEG361 [104] phi from play_move_down::@12 to collision [phi:play_move_down::@12->collision]
  collision_from_b12:
  //SEG362 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#0 [phi:play_move_down::@12->collision#0] -- register_copy 
  //SEG363 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#0 [phi:play_move_down::@12->collision#1] -- register_copy 
  //SEG364 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#0 [phi:play_move_down::@12->collision#2] -- register_copy 
  //SEG365 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#72 [phi:play_move_down::@12->collision#3] -- register_copy 
    jsr collision
  //SEG366 [170] (byte) collision::return#0 ← (byte) collision::return#14
    // (byte) collision::return#0 = (byte) collision::return#14  // register copy reg byte a
    jmp b18
  //SEG367 play_move_down::@18
  b18:
  //SEG368 [171] (byte~) play_move_down::$12 ← (byte) collision::return#0
    // (byte~) play_move_down::$12 = (byte) collision::return#0  // register copy reg byte a
  //SEG369 [172] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@6 -- vbuaa_eq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    beq b6
  //SEG370 [173] phi from play_move_down::@18 to play_move_down::@13 [phi:play_move_down::@18->play_move_down::@13]
  b13_from_b18:
    jmp b13
  //SEG371 play_move_down::@13
  b13:
  //SEG372 [174] call lock_current 
    jsr lock_current
  //SEG373 [175] phi from play_move_down::@13 to play_move_down::@19 [phi:play_move_down::@13->play_move_down::@19]
  b19_from_b13:
    jmp b19
  //SEG374 play_move_down::@19
  b19:
  //SEG375 [176] call remove_lines 
  //SEG376 [198] phi from play_move_down::@19 to remove_lines [phi:play_move_down::@19->remove_lines]
  remove_lines_from_b19:
    jsr remove_lines
  //SEG377 [177] phi from play_move_down::@19 to play_move_down::@20 [phi:play_move_down::@19->play_move_down::@20]
  b20_from_b19:
    jmp b20
  //SEG378 play_move_down::@20
  b20:
  //SEG379 [178] call spawn_current 
  //SEG380 [184] phi from play_move_down::@20 to spawn_current [phi:play_move_down::@20->spawn_current]
  spawn_current_from_b20:
    jsr spawn_current
  //SEG381 [179] (byte*~) current_piece#76 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG382 [180] phi from play_move_down::@20 to play_move_down::@7 [phi:play_move_down::@20->play_move_down::@7]
  b7_from_b20:
  //SEG383 [180] phi (byte) current_piece_color#23 = (byte) current_piece_color#15 [phi:play_move_down::@20->play_move_down::@7#0] -- register_copy 
  //SEG384 [180] phi (byte) current_xpos#36 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:play_move_down::@20->play_move_down::@7#1] -- vbuz1=vbuc1 
    lda #3
    sta current_xpos
  //SEG385 [180] phi (byte*) current_piece_gfx#29 = (byte*) current_piece_gfx#10 [phi:play_move_down::@20->play_move_down::@7#2] -- register_copy 
  //SEG386 [180] phi (byte) current_orientation#33 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@20->play_move_down::@7#3] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG387 [180] phi (byte*) current_piece#23 = (byte*~) current_piece#76 [phi:play_move_down::@20->play_move_down::@7#4] -- register_copy 
  //SEG388 [180] phi (byte) current_ypos#31 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@20->play_move_down::@7#5] -- vbuz1=vbuc1 
    lda #0
    sta current_ypos
    jmp b7
  //SEG389 play_move_down::@7
  b7:
  //SEG390 [181] phi from play_move_down::@7 to play_move_down::@return [phi:play_move_down::@7->play_move_down::@return]
  breturn_from_b7:
  //SEG391 [181] phi (byte) current_piece_color#13 = (byte) current_piece_color#23 [phi:play_move_down::@7->play_move_down::@return#0] -- register_copy 
  //SEG392 [181] phi (byte) current_xpos#19 = (byte) current_xpos#36 [phi:play_move_down::@7->play_move_down::@return#1] -- register_copy 
  //SEG393 [181] phi (byte*) current_piece_gfx#17 = (byte*) current_piece_gfx#29 [phi:play_move_down::@7->play_move_down::@return#2] -- register_copy 
  //SEG394 [181] phi (byte) current_orientation#18 = (byte) current_orientation#33 [phi:play_move_down::@7->play_move_down::@return#3] -- register_copy 
  //SEG395 [181] phi (byte*) current_piece#13 = (byte*) current_piece#23 [phi:play_move_down::@7->play_move_down::@return#4] -- register_copy 
  //SEG396 [181] phi (byte) current_ypos#16 = (byte) current_ypos#31 [phi:play_move_down::@7->play_move_down::@return#5] -- register_copy 
  //SEG397 [181] phi (byte) current_movedown_counter#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@7->play_move_down::@return#6] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG398 [181] phi (byte) play_move_down::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@7->play_move_down::@return#7] -- vbuxx=vbuc1 
    ldx #1
    jmp breturn
  //SEG399 [181] phi from play_move_down::@4 to play_move_down::@return [phi:play_move_down::@4->play_move_down::@return]
  breturn_from_b4:
  //SEG400 [181] phi (byte) current_piece_color#13 = (byte) current_piece_color#11 [phi:play_move_down::@4->play_move_down::@return#0] -- register_copy 
  //SEG401 [181] phi (byte) current_xpos#19 = (byte) current_xpos#16 [phi:play_move_down::@4->play_move_down::@return#1] -- register_copy 
  //SEG402 [181] phi (byte*) current_piece_gfx#17 = (byte*) current_piece_gfx#15 [phi:play_move_down::@4->play_move_down::@return#2] -- register_copy 
  //SEG403 [181] phi (byte) current_orientation#18 = (byte) current_orientation#15 [phi:play_move_down::@4->play_move_down::@return#3] -- register_copy 
  //SEG404 [181] phi (byte*) current_piece#13 = (byte*) current_piece#11 [phi:play_move_down::@4->play_move_down::@return#4] -- register_copy 
  //SEG405 [181] phi (byte) current_ypos#16 = (byte) current_ypos#12 [phi:play_move_down::@4->play_move_down::@return#5] -- register_copy 
  //SEG406 [181] phi (byte) current_movedown_counter#12 = (byte) current_movedown_counter#10 [phi:play_move_down::@4->play_move_down::@return#6] -- register_copy 
  //SEG407 [181] phi (byte) play_move_down::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@4->play_move_down::@return#7] -- vbuxx=vbuc1 
    ldx #0
    jmp breturn
  //SEG408 play_move_down::@return
  breturn:
  //SEG409 [182] return 
    rts
  //SEG410 play_move_down::@6
  b6:
  //SEG411 [183] (byte) current_ypos#4 ← ++ (byte) current_ypos#12 -- vbuz1=_inc_vbuz1 
    inc current_ypos
  //SEG412 [180] phi from play_move_down::@6 to play_move_down::@7 [phi:play_move_down::@6->play_move_down::@7]
  b7_from_b6:
  //SEG413 [180] phi (byte) current_piece_color#23 = (byte) current_piece_color#11 [phi:play_move_down::@6->play_move_down::@7#0] -- register_copy 
  //SEG414 [180] phi (byte) current_xpos#36 = (byte) current_xpos#16 [phi:play_move_down::@6->play_move_down::@7#1] -- register_copy 
  //SEG415 [180] phi (byte*) current_piece_gfx#29 = (byte*) current_piece_gfx#15 [phi:play_move_down::@6->play_move_down::@7#2] -- register_copy 
  //SEG416 [180] phi (byte) current_orientation#33 = (byte) current_orientation#15 [phi:play_move_down::@6->play_move_down::@7#3] -- register_copy 
  //SEG417 [180] phi (byte*) current_piece#23 = (byte*) current_piece#11 [phi:play_move_down::@6->play_move_down::@7#4] -- register_copy 
  //SEG418 [180] phi (byte) current_ypos#31 = (byte) current_ypos#4 [phi:play_move_down::@6->play_move_down::@7#5] -- register_copy 
    jmp b7
}
//SEG419 spawn_current
spawn_current: {
    .label _3 = 2
  //SEG420 [185] phi from spawn_current to spawn_current::@1 [phi:spawn_current->spawn_current::@1]
  b1_from_spawn_current:
  //SEG421 [185] phi (byte) spawn_current::piece_idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 7 [phi:spawn_current->spawn_current::@1#0] -- vbuxx=vbuc1 
    ldx #7
    jmp b1
  //SEG422 spawn_current::@1
  b1:
  //SEG423 [186] if((byte) spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto spawn_current::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #7
    beq b2_from_b1
    jmp b3
  //SEG424 spawn_current::@3
  b3:
  //SEG425 [187] (byte~) spawn_current::$3 ← (byte) spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta _3
  //SEG426 [188] (byte*) current_piece_gfx#10 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuz1=pptc1_derefidx_vbuz2_plus_0 
    ldy _3
    lda PIECES,y
    sta current_piece_gfx
    lda PIECES+1,y
    sta current_piece_gfx+1
  //SEG427 [189] (byte) current_piece_color#15 ← *((const byte[]) PIECES_COLORS#0 + (byte) spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_COLORS,x
    sta current_piece_color
    jmp breturn
  //SEG428 spawn_current::@return
  breturn:
  //SEG429 [190] return 
    rts
  //SEG430 [191] phi from spawn_current::@1 to spawn_current::@2 [phi:spawn_current::@1->spawn_current::@2]
  b2_from_b1:
    jmp b2
  //SEG431 spawn_current::@2
  b2:
  //SEG432 [192] call sid_rnd 
    jsr sid_rnd
  //SEG433 [193] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
    // (byte) sid_rnd::return#2 = (byte) sid_rnd::return#0  // register copy reg byte a
    jmp b7
  //SEG434 spawn_current::@7
  b7:
  //SEG435 [194] (byte~) spawn_current::$1 ← (byte) sid_rnd::return#2
    // (byte~) spawn_current::$1 = (byte) sid_rnd::return#2  // register copy reg byte a
  //SEG436 [195] (byte) spawn_current::piece_idx#1 ← (byte~) spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuxx=vbuaa_band_vbuc1 
    and #7
    tax
  //SEG437 [185] phi from spawn_current::@7 to spawn_current::@1 [phi:spawn_current::@7->spawn_current::@1]
  b1_from_b7:
  //SEG438 [185] phi (byte) spawn_current::piece_idx#2 = (byte) spawn_current::piece_idx#1 [phi:spawn_current::@7->spawn_current::@1#0] -- register_copy 
    jmp b1
}
//SEG439 sid_rnd
sid_rnd: {
  //SEG440 [196] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuaa=_deref_pbuc1 
    lda SID_VOICE3_OSC
    jmp breturn
  //SEG441 sid_rnd::@return
  breturn:
  //SEG442 [197] return 
    rts
}
//SEG443 remove_lines
remove_lines: {
    .label c = 7
    .label x = 3
    .label y = 2
    .label full = 4
  //SEG444 [199] phi from remove_lines to remove_lines::@1 [phi:remove_lines->remove_lines::@1]
  b1_from_remove_lines:
  //SEG445 [199] phi (byte) remove_lines::y#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:remove_lines->remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG446 [199] phi (byte) remove_lines::w#12 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:remove_lines->remove_lines::@1#1] -- vbuxx=vbuc1 
    ldx #PLAYFIELD_LINES*PLAYFIELD_COLS-1
  //SEG447 [199] phi (byte) remove_lines::r#3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:remove_lines->remove_lines::@1#2] -- vbuyy=vbuc1 
    ldy #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    jmp b1
  //SEG448 [199] phi from remove_lines::@4 to remove_lines::@1 [phi:remove_lines::@4->remove_lines::@1]
  b1_from_b4:
  //SEG449 [199] phi (byte) remove_lines::y#8 = (byte) remove_lines::y#1 [phi:remove_lines::@4->remove_lines::@1#0] -- register_copy 
  //SEG450 [199] phi (byte) remove_lines::w#12 = (byte) remove_lines::w#11 [phi:remove_lines::@4->remove_lines::@1#1] -- register_copy 
  //SEG451 [199] phi (byte) remove_lines::r#3 = (byte) remove_lines::r#1 [phi:remove_lines::@4->remove_lines::@1#2] -- register_copy 
    jmp b1
  //SEG452 remove_lines::@1
  b1:
  //SEG453 [200] phi from remove_lines::@1 to remove_lines::@2 [phi:remove_lines::@1->remove_lines::@2]
  b2_from_b1:
  //SEG454 [200] phi (byte) remove_lines::full#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:remove_lines::@1->remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta full
  //SEG455 [200] phi (byte) remove_lines::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:remove_lines::@1->remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG456 [200] phi (byte) remove_lines::w#4 = (byte) remove_lines::w#12 [phi:remove_lines::@1->remove_lines::@2#2] -- register_copy 
  //SEG457 [200] phi (byte) remove_lines::r#2 = (byte) remove_lines::r#3 [phi:remove_lines::@1->remove_lines::@2#3] -- register_copy 
    jmp b2
  //SEG458 [200] phi from remove_lines::@3 to remove_lines::@2 [phi:remove_lines::@3->remove_lines::@2]
  b2_from_b3:
  //SEG459 [200] phi (byte) remove_lines::full#4 = (byte) remove_lines::full#2 [phi:remove_lines::@3->remove_lines::@2#0] -- register_copy 
  //SEG460 [200] phi (byte) remove_lines::x#2 = (byte) remove_lines::x#1 [phi:remove_lines::@3->remove_lines::@2#1] -- register_copy 
  //SEG461 [200] phi (byte) remove_lines::w#4 = (byte) remove_lines::w#1 [phi:remove_lines::@3->remove_lines::@2#2] -- register_copy 
  //SEG462 [200] phi (byte) remove_lines::r#2 = (byte) remove_lines::r#1 [phi:remove_lines::@3->remove_lines::@2#3] -- register_copy 
    jmp b2
  //SEG463 remove_lines::@2
  b2:
  //SEG464 [201] (byte) remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda playfield,y
    sta c
  //SEG465 [202] (byte) remove_lines::r#1 ← -- (byte) remove_lines::r#2 -- vbuyy=_dec_vbuyy 
    dey
  //SEG466 [203] if((byte) remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto remove_lines::@17 -- vbuz1_neq_0_then_la1 
    lda c
    cmp #0
    bne b17_from_b2
  //SEG467 [204] phi from remove_lines::@2 to remove_lines::@3 [phi:remove_lines::@2->remove_lines::@3]
  b3_from_b2:
  //SEG468 [204] phi (byte) remove_lines::full#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:remove_lines::@2->remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta full
    jmp b3
  //SEG469 remove_lines::@3
  b3:
  //SEG470 [205] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::w#4) ← (byte) remove_lines::c#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda c
    sta playfield,x
  //SEG471 [206] (byte) remove_lines::w#1 ← -- (byte) remove_lines::w#4 -- vbuxx=_dec_vbuxx 
    dex
  //SEG472 [207] (byte) remove_lines::x#1 ← ++ (byte) remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG473 [208] if((byte) remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #PLAYFIELD_COLS-1+1
    bne b2_from_b3
    jmp b9
  //SEG474 remove_lines::@9
  b9:
  //SEG475 [209] if((byte) remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda full
    cmp #1
    bne b4_from_b9
    jmp b10
  //SEG476 remove_lines::@10
  b10:
  //SEG477 [210] (byte) remove_lines::w#2 ← (byte) remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    clc
    adc #PLAYFIELD_COLS
    tax
  //SEG478 [211] phi from remove_lines::@10 remove_lines::@9 to remove_lines::@4 [phi:remove_lines::@10/remove_lines::@9->remove_lines::@4]
  b4_from_b10:
  b4_from_b9:
  //SEG479 [211] phi (byte) remove_lines::w#11 = (byte) remove_lines::w#2 [phi:remove_lines::@10/remove_lines::@9->remove_lines::@4#0] -- register_copy 
    jmp b4
  //SEG480 remove_lines::@4
  b4:
  //SEG481 [212] (byte) remove_lines::y#1 ← ++ (byte) remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG482 [213] if((byte) remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b4
  //SEG483 [214] phi from remove_lines::@4 remove_lines::@6 to remove_lines::@5 [phi:remove_lines::@4/remove_lines::@6->remove_lines::@5]
  b5_from_b4:
  b5_from_b6:
  //SEG484 [214] phi (byte) remove_lines::w#6 = (byte) remove_lines::w#11 [phi:remove_lines::@4/remove_lines::@6->remove_lines::@5#0] -- register_copy 
    jmp b5
  //SEG485 remove_lines::@5
  b5:
  //SEG486 [215] if((byte) remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto remove_lines::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne b6
    jmp breturn
  //SEG487 remove_lines::@return
  breturn:
  //SEG488 [216] return 
    rts
  //SEG489 remove_lines::@6
  b6:
  //SEG490 [217] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta playfield,x
  //SEG491 [218] (byte) remove_lines::w#3 ← -- (byte) remove_lines::w#6 -- vbuxx=_dec_vbuxx 
    dex
    jmp b5_from_b6
  //SEG492 [219] phi from remove_lines::@2 to remove_lines::@17 [phi:remove_lines::@2->remove_lines::@17]
  b17_from_b2:
    jmp b17
  //SEG493 remove_lines::@17
  b17:
  //SEG494 [204] phi from remove_lines::@17 to remove_lines::@3 [phi:remove_lines::@17->remove_lines::@3]
  b3_from_b17:
  //SEG495 [204] phi (byte) remove_lines::full#2 = (byte) remove_lines::full#4 [phi:remove_lines::@17->remove_lines::@3#0] -- register_copy 
    jmp b3
}
//SEG496 lock_current
lock_current: {
    .label ypos2 = 2
    .label playfield_line = 5
    .label col = 7
    .label i = 8
    .label l = 3
    .label i_2 = 4
    .label i_3 = 4
    .label i_7 = 4
    .label i_9 = 4
  //SEG497 [220] (byte) lock_current::ypos2#0 ← (byte) current_ypos#12 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl ypos2
  //SEG498 [221] phi from lock_current to lock_current::@1 [phi:lock_current->lock_current::@1]
  b1_from_lock_current:
  //SEG499 [221] phi (byte) lock_current::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lock_current->lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG500 [221] phi (byte) lock_current::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lock_current->lock_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i_3
  //SEG501 [221] phi (byte) lock_current::ypos2#2 = (byte) lock_current::ypos2#0 [phi:lock_current->lock_current::@1#2] -- register_copy 
    jmp b1
  //SEG502 lock_current::@1
  b1:
  //SEG503 [222] (byte*) lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) lock_current::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG504 [223] (byte) lock_current::col#0 ← (byte) current_xpos#16 -- vbuz1=vbuz2 
    lda current_xpos
    sta col
  //SEG505 [224] phi from lock_current::@1 to lock_current::@2 [phi:lock_current::@1->lock_current::@2]
  b2_from_b1:
  //SEG506 [224] phi (byte) lock_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lock_current::@1->lock_current::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG507 [224] phi (byte) lock_current::col#2 = (byte) lock_current::col#0 [phi:lock_current::@1->lock_current::@2#1] -- register_copy 
  //SEG508 [224] phi (byte) lock_current::i#2 = (byte) lock_current::i#3 [phi:lock_current::@1->lock_current::@2#2] -- register_copy 
    jmp b2
  //SEG509 lock_current::@2
  b2:
  //SEG510 [225] (byte) lock_current::i#1 ← ++ (byte) lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG511 [226] if(*((byte*) current_piece_gfx#15 + (byte) lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (current_piece_gfx),y
    cmp #0
    beq b3
    jmp b4
  //SEG512 lock_current::@4
  b4:
  //SEG513 [227] *((byte*) lock_current::playfield_line#0 + (byte) lock_current::col#2) ← (byte) current_piece_color#11 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda current_piece_color
    ldy col
    sta (playfield_line),y
    jmp b3
  //SEG514 lock_current::@3
  b3:
  //SEG515 [228] (byte) lock_current::col#1 ← ++ (byte) lock_current::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG516 [229] (byte) lock_current::c#1 ← ++ (byte) lock_current::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG517 [230] if((byte) lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto lock_current::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b8
    jmp b5
  //SEG518 lock_current::@5
  b5:
  //SEG519 [231] (byte) lock_current::ypos2#1 ← (byte) lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG520 [232] (byte) lock_current::l#1 ← ++ (byte) lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG521 [233] if((byte) lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto lock_current::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b7
    jmp breturn
  //SEG522 lock_current::@return
  breturn:
  //SEG523 [234] return 
    rts
  //SEG524 lock_current::@7
  b7:
  //SEG525 [235] (byte~) lock_current::i#7 ← (byte) lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_7
  //SEG526 [221] phi from lock_current::@7 to lock_current::@1 [phi:lock_current::@7->lock_current::@1]
  b1_from_b7:
  //SEG527 [221] phi (byte) lock_current::l#6 = (byte) lock_current::l#1 [phi:lock_current::@7->lock_current::@1#0] -- register_copy 
  //SEG528 [221] phi (byte) lock_current::i#3 = (byte~) lock_current::i#7 [phi:lock_current::@7->lock_current::@1#1] -- register_copy 
  //SEG529 [221] phi (byte) lock_current::ypos2#2 = (byte) lock_current::ypos2#1 [phi:lock_current::@7->lock_current::@1#2] -- register_copy 
    jmp b1
  //SEG530 lock_current::@8
  b8:
  //SEG531 [236] (byte~) lock_current::i#9 ← (byte) lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_9
  //SEG532 [224] phi from lock_current::@8 to lock_current::@2 [phi:lock_current::@8->lock_current::@2]
  b2_from_b8:
  //SEG533 [224] phi (byte) lock_current::c#2 = (byte) lock_current::c#1 [phi:lock_current::@8->lock_current::@2#0] -- register_copy 
  //SEG534 [224] phi (byte) lock_current::col#2 = (byte) lock_current::col#1 [phi:lock_current::@8->lock_current::@2#1] -- register_copy 
  //SEG535 [224] phi (byte) lock_current::i#2 = (byte~) lock_current::i#9 [phi:lock_current::@8->lock_current::@2#2] -- register_copy 
    jmp b2
}
//SEG536 keyboard_event_pressed
keyboard_event_pressed: {
    .label row_bits = 7
    .label keycode = 4
  //SEG537 [238] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuz1_ror_3 
    lda keycode
    lsr
    lsr
    lsr
  //SEG538 [239] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta row_bits
  //SEG539 [240] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and keycode
  //SEG540 [241] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and row_bits
    jmp breturn
  //SEG541 keyboard_event_pressed::@return
  breturn:
  //SEG542 [242] return 
    rts
}
//SEG543 keyboard_event_get
keyboard_event_get: {
  //SEG544 [243] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda keyboard_events_size
    cmp #0
    beq breturn_from_keyboard_event_get
    jmp b3
  //SEG545 keyboard_event_get::@3
  b3:
  //SEG546 [244] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec keyboard_events_size
  //SEG547 [245] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy keyboard_events_size
    lda keyboard_events,y
  //SEG548 [246] phi from keyboard_event_get::@3 to keyboard_event_get::@return [phi:keyboard_event_get::@3->keyboard_event_get::@return]
  breturn_from_b3:
  //SEG549 [246] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@3->keyboard_event_get::@return#0] -- register_copy 
  //SEG550 [246] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@3->keyboard_event_get::@return#1] -- register_copy 
    jmp breturn
  //SEG551 [246] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  breturn_from_keyboard_event_get:
  //SEG552 [246] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
  //SEG553 [246] phi (byte) keyboard_event_get::return#2 = (byte/word/signed word/dword/signed dword) 255 [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    jmp breturn
  //SEG554 keyboard_event_get::@return
  breturn:
  //SEG555 [247] return 
    rts
}
//SEG556 keyboard_event_scan
keyboard_event_scan: {
    .label row_scan = 8
    .label keycode = 7
    .label row = 4
  //SEG557 [249] phi from keyboard_event_scan to keyboard_event_scan::@1 [phi:keyboard_event_scan->keyboard_event_scan::@1]
  b1_from_keyboard_event_scan:
  //SEG558 [249] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@1#0] -- register_copy 
  //SEG559 [249] phi (byte) keyboard_event_scan::keycode#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keycode
  //SEG560 [249] phi (byte) keyboard_event_scan::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta row
    jmp b1
  //SEG561 [249] phi from keyboard_event_scan::@3 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1]
  b1_from_b3:
  //SEG562 [249] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#0] -- register_copy 
  //SEG563 [249] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#1] -- register_copy 
  //SEG564 [249] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#2] -- register_copy 
    jmp b1
  //SEG565 keyboard_event_scan::@1
  b1:
  //SEG566 [250] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx row
  //SEG567 [251] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG568 [252] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    // (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#0  // register copy reg byte a
    jmp b25
  //SEG569 keyboard_event_scan::@25
  b25:
  //SEG570 [253] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta row_scan
  //SEG571 [254] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda row_scan
    ldy row
    cmp keyboard_scan_values,y
    bne b4_from_b25
    jmp b13
  //SEG572 keyboard_event_scan::@13
  b13:
  //SEG573 [255] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lda #8
    clc
    adc keycode
    sta keycode
  //SEG574 [256] phi from keyboard_event_scan::@13 keyboard_event_scan::@19 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3]
  b3_from_b13:
  b3_from_b19:
  //SEG575 [256] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#0] -- register_copy 
  //SEG576 [256] phi (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#1 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#1] -- register_copy 
    jmp b3
  //SEG577 keyboard_event_scan::@3
  b3:
  //SEG578 [257] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG579 [258] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda row
    cmp #8
    bne b1_from_b3
  //SEG580 [259] phi from keyboard_event_scan::@3 to keyboard_event_scan::@20 [phi:keyboard_event_scan::@3->keyboard_event_scan::@20]
  b20_from_b3:
    jmp b20
  //SEG581 keyboard_event_scan::@20
  b20:
  //SEG582 [260] call keyboard_event_pressed 
  //SEG583 [237] phi from keyboard_event_scan::@20 to keyboard_event_pressed [phi:keyboard_event_scan::@20->keyboard_event_pressed]
  keyboard_event_pressed_from_b20:
  //SEG584 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@20->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG585 [261] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#0 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
    jmp b26
  //SEG586 keyboard_event_scan::@26
  b26:
  //SEG587 [262] (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#0
    // (byte~) keyboard_event_scan::$14 = (byte) keyboard_event_pressed::return#0  // register copy reg byte a
  //SEG588 [263] if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b9_from_b26
  //SEG589 [264] phi from keyboard_event_scan::@26 to keyboard_event_scan::@21 [phi:keyboard_event_scan::@26->keyboard_event_scan::@21]
  b21_from_b26:
    jmp b21
  //SEG590 keyboard_event_scan::@21
  b21:
  //SEG591 [265] phi from keyboard_event_scan::@21 keyboard_event_scan::@26 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@21/keyboard_event_scan::@26->keyboard_event_scan::@9]
  b9_from_b21:
  b9_from_b26:
    jmp b9
  //SEG592 keyboard_event_scan::@9
  b9:
  //SEG593 [266] call keyboard_event_pressed 
  //SEG594 [237] phi from keyboard_event_scan::@9 to keyboard_event_pressed [phi:keyboard_event_scan::@9->keyboard_event_pressed]
  keyboard_event_pressed_from_b9:
  //SEG595 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@9->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG596 [267] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#1 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
    jmp b27
  //SEG597 keyboard_event_scan::@27
  b27:
  //SEG598 [268] (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#1
    // (byte~) keyboard_event_scan::$18 = (byte) keyboard_event_pressed::return#1  // register copy reg byte a
  //SEG599 [269] if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10_from_b27
  //SEG600 [270] phi from keyboard_event_scan::@27 to keyboard_event_scan::@22 [phi:keyboard_event_scan::@27->keyboard_event_scan::@22]
  b22_from_b27:
    jmp b22
  //SEG601 keyboard_event_scan::@22
  b22:
  //SEG602 [271] phi from keyboard_event_scan::@22 keyboard_event_scan::@27 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@22/keyboard_event_scan::@27->keyboard_event_scan::@10]
  b10_from_b22:
  b10_from_b27:
    jmp b10
  //SEG603 keyboard_event_scan::@10
  b10:
  //SEG604 [272] call keyboard_event_pressed 
  //SEG605 [237] phi from keyboard_event_scan::@10 to keyboard_event_pressed [phi:keyboard_event_scan::@10->keyboard_event_pressed]
  keyboard_event_pressed_from_b10:
  //SEG606 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@10->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG607 [273] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#2 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
    jmp b28
  //SEG608 keyboard_event_scan::@28
  b28:
  //SEG609 [274] (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#2
    // (byte~) keyboard_event_scan::$22 = (byte) keyboard_event_pressed::return#2  // register copy reg byte a
  //SEG610 [275] if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11_from_b28
  //SEG611 [276] phi from keyboard_event_scan::@28 to keyboard_event_scan::@23 [phi:keyboard_event_scan::@28->keyboard_event_scan::@23]
  b23_from_b28:
    jmp b23
  //SEG612 keyboard_event_scan::@23
  b23:
  //SEG613 [277] phi from keyboard_event_scan::@23 keyboard_event_scan::@28 to keyboard_event_scan::@11 [phi:keyboard_event_scan::@23/keyboard_event_scan::@28->keyboard_event_scan::@11]
  b11_from_b23:
  b11_from_b28:
    jmp b11
  //SEG614 keyboard_event_scan::@11
  b11:
  //SEG615 [278] call keyboard_event_pressed 
  //SEG616 [237] phi from keyboard_event_scan::@11 to keyboard_event_pressed [phi:keyboard_event_scan::@11->keyboard_event_pressed]
  keyboard_event_pressed_from_b11:
  //SEG617 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@11->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG618 [279] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#10 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
    jmp b29
  //SEG619 keyboard_event_scan::@29
  b29:
  //SEG620 [280] (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10
    // (byte~) keyboard_event_scan::$26 = (byte) keyboard_event_pressed::return#10  // register copy reg byte a
  //SEG621 [281] if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq breturn
  //SEG622 [282] phi from keyboard_event_scan::@29 to keyboard_event_scan::@24 [phi:keyboard_event_scan::@29->keyboard_event_scan::@24]
  b24_from_b29:
    jmp b24
  //SEG623 keyboard_event_scan::@24
  b24:
    jmp breturn
  //SEG624 keyboard_event_scan::@return
  breturn:
  //SEG625 [283] return 
    rts
  //SEG626 [284] phi from keyboard_event_scan::@25 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4]
  b4_from_b25:
  //SEG627 [284] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#0] -- register_copy 
  //SEG628 [284] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#1] -- register_copy 
  //SEG629 [284] phi (byte) keyboard_event_scan::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b4
  //SEG630 [284] phi from keyboard_event_scan::@5 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4]
  b4_from_b5:
  //SEG631 [284] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#0] -- register_copy 
  //SEG632 [284] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#1] -- register_copy 
  //SEG633 [284] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#2] -- register_copy 
    jmp b4
  //SEG634 keyboard_event_scan::@4
  b4:
  //SEG635 [285] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda row_scan
    ldy row
    eor keyboard_scan_values,y
  //SEG636 [286] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
  //SEG637 [287] if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5_from_b4
    jmp b15
  //SEG638 keyboard_event_scan::@15
  b15:
  //SEG639 [288] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda keyboard_events_size
    cmp #8
    beq b5_from_b15
    jmp b16
  //SEG640 keyboard_event_scan::@16
  b16:
  //SEG641 [289] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and row_scan
  //SEG642 [290] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b7
    jmp b17
  //SEG643 keyboard_event_scan::@17
  b17:
  //SEG644 [291] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda keycode
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG645 [292] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
  //SEG646 [293] phi from keyboard_event_scan::@15 keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@7 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5]
  b5_from_b15:
  b5_from_b17:
  b5_from_b4:
  b5_from_b7:
  //SEG647 [293] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#10 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5#0] -- register_copy 
    jmp b5
  //SEG648 keyboard_event_scan::@5
  b5:
  //SEG649 [294] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc keycode
  //SEG650 [295] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG651 [296] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b4_from_b5
    jmp b19
  //SEG652 keyboard_event_scan::@19
  b19:
  //SEG653 [297] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda row_scan
    ldy row
    sta keyboard_scan_values,y
    jmp b3_from_b19
  //SEG654 keyboard_event_scan::@7
  b7:
  //SEG655 [298] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora keycode
  //SEG656 [299] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$11 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG657 [300] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
    jmp b5_from_b7
}
//SEG658 keyboard_matrix_read
keyboard_matrix_read: {
  //SEG659 [301] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
  //SEG660 [302] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    jmp breturn
  //SEG661 keyboard_matrix_read::@return
  breturn:
  //SEG662 [303] return 
    rts
}
//SEG663 tables_init
tables_init: {
    .label pli = 5
    .label idx = 2
  //SEG664 [305] phi from tables_init to tables_init::@1 [phi:tables_init->tables_init::@1]
  b1_from_tables_init:
  //SEG665 [305] phi (byte) tables_init::idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:tables_init->tables_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta idx
  //SEG666 [305] phi (byte*) tables_init::pli#2 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 [phi:tables_init->tables_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta pli
    lda #>playfield
    sta pli+1
  //SEG667 [305] phi (byte) tables_init::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:tables_init->tables_init::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG668 [305] phi from tables_init::@1 to tables_init::@1 [phi:tables_init::@1->tables_init::@1]
  b1_from_b1:
  //SEG669 [305] phi (byte) tables_init::idx#2 = (byte) tables_init::idx#1 [phi:tables_init::@1->tables_init::@1#0] -- register_copy 
  //SEG670 [305] phi (byte*) tables_init::pli#2 = (byte*) tables_init::pli#1 [phi:tables_init::@1->tables_init::@1#1] -- register_copy 
  //SEG671 [305] phi (byte) tables_init::j#2 = (byte) tables_init::j#1 [phi:tables_init::@1->tables_init::@1#2] -- register_copy 
    jmp b1
  //SEG672 tables_init::@1
  b1:
  //SEG673 [306] (byte~) tables_init::$1 ← (byte) tables_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG674 [307] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) tables_init::$1) ← (byte*) tables_init::pli#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda pli
    sta playfield_lines,y
    lda pli+1
    sta playfield_lines+1,y
  //SEG675 [308] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) tables_init::j#2) ← (byte) tables_init::idx#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda idx
    sta playfield_lines_idx,x
  //SEG676 [309] (byte*) tables_init::pli#1 ← (byte*) tables_init::pli#2 + (const byte) PLAYFIELD_COLS#0 -- pbuz1=pbuz1_plus_vbuc1 
    lda pli
    clc
    adc #PLAYFIELD_COLS
    sta pli
    bcc !+
    inc pli+1
  !:
  //SEG677 [310] (byte) tables_init::idx#1 ← (byte) tables_init::idx#2 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc idx
    sta idx
  //SEG678 [311] (byte) tables_init::j#1 ← ++ (byte) tables_init::j#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG679 [312] if((byte) tables_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto tables_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_LINES-1+1
    bne b1_from_b1
    jmp b2
  //SEG680 tables_init::@2
  b2:
  //SEG681 [313] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
    jmp breturn
  //SEG682 tables_init::@return
  breturn:
  //SEG683 [314] return 
    rts
}
//SEG684 render_init
render_init: {
    .label _10 = $c
    .label li = 5
    .label line = 5
    .label l = 2
  //SEG685 [316] call fill 
  //SEG686 [335] phi from render_init to fill [phi:render_init->fill]
  fill_from_render_init:
  //SEG687 [335] phi (byte) fill::val#3 = (byte/word/signed word/dword/signed dword) 160 [phi:render_init->fill#0] -- vbuxx=vbuc1 
    ldx #$a0
  //SEG688 [335] phi (byte*) fill::addr#0 = (const byte*) SCREEN#0 [phi:render_init->fill#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta fill.addr
    lda #>SCREEN
    sta fill.addr+1
    jsr fill
  //SEG689 [317] phi from render_init to render_init::@7 [phi:render_init->render_init::@7]
  b7_from_render_init:
    jmp b7
  //SEG690 render_init::@7
  b7:
  //SEG691 [318] call fill 
  //SEG692 [335] phi from render_init::@7 to fill [phi:render_init::@7->fill]
  fill_from_b7:
  //SEG693 [335] phi (byte) fill::val#3 = (const byte) BLACK#0 [phi:render_init::@7->fill#0] -- vbuxx=vbuc1 
    ldx #BLACK
  //SEG694 [335] phi (byte*) fill::addr#0 = (const byte*) COLS#0 [phi:render_init::@7->fill#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta fill.addr
    lda #>COLS
    sta fill.addr+1
    jsr fill
  //SEG695 [319] phi from render_init::@7 to render_init::@1 [phi:render_init::@7->render_init::@1]
  b1_from_b7:
  //SEG696 [319] phi (byte*) render_init::li#2 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15 [phi:render_init::@7->render_init::@1#0] -- pbuz1=pbuc1 
    lda #<COLS+$28+$f
    sta li
    lda #>COLS+$28+$f
    sta li+1
  //SEG697 [319] phi (byte) render_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@7->render_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG698 [319] phi from render_init::@1 to render_init::@1 [phi:render_init::@1->render_init::@1]
  b1_from_b1:
  //SEG699 [319] phi (byte*) render_init::li#2 = (byte*) render_init::li#1 [phi:render_init::@1->render_init::@1#0] -- register_copy 
  //SEG700 [319] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@1->render_init::@1#1] -- register_copy 
    jmp b1
  //SEG701 render_init::@1
  b1:
  //SEG702 [320] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG703 [321] *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_init::$5) ← (byte*) render_init::li#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda li
    sta screen_lines,y
    lda li+1
    sta screen_lines+1,y
  //SEG704 [322] (byte*) render_init::li#1 ← (byte*) render_init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li
    clc
    adc #$28
    sta li
    bcc !+
    inc li+1
  !:
  //SEG705 [323] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG706 [324] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_LINES+2+1
    bne b1_from_b1
  //SEG707 [325] phi from render_init::@1 to render_init::@2 [phi:render_init::@1->render_init::@2]
  b2_from_b1:
  //SEG708 [325] phi (byte) render_init::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@1->render_init::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG709 [325] phi (byte*) render_init::line#4 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14 [phi:render_init::@1->render_init::@2#1] -- pbuz1=pbuc1 
    lda #<COLS+$e
    sta line
    lda #>COLS+$e
    sta line+1
    jmp b2
  //SEG710 [325] phi from render_init::@5 to render_init::@2 [phi:render_init::@5->render_init::@2]
  b2_from_b5:
  //SEG711 [325] phi (byte) render_init::l#4 = (byte) render_init::l#1 [phi:render_init::@5->render_init::@2#0] -- register_copy 
  //SEG712 [325] phi (byte*) render_init::line#4 = (byte*) render_init::line#1 [phi:render_init::@5->render_init::@2#1] -- register_copy 
    jmp b2
  //SEG713 render_init::@2
  b2:
  //SEG714 [326] phi from render_init::@2 to render_init::@3 [phi:render_init::@2->render_init::@3]
  b3_from_b2:
  //SEG715 [326] phi (byte) render_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@2->render_init::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG716 [326] phi from render_init::@3 to render_init::@3 [phi:render_init::@3->render_init::@3]
  b3_from_b3:
  //SEG717 [326] phi (byte) render_init::c#2 = (byte) render_init::c#1 [phi:render_init::@3->render_init::@3#0] -- register_copy 
    jmp b3
  //SEG718 render_init::@3
  b3:
  //SEG719 [327] (byte*~) render_init::$10 ← (byte*) render_init::line#4 + (byte) render_init::c#2 -- pbuz1=pbuz2_plus_vbuxx 
    txa
    clc
    adc line
    sta _10
    lda #0
    adc line+1
    sta _10+1
  //SEG720 [328] *((byte*~) render_init::$10) ← (const byte) DARK_GREY#0 -- _deref_pbuz1=vbuc1 
    lda #DARK_GREY
    ldy #0
    sta (_10),y
  //SEG721 [329] (byte) render_init::c#1 ← ++ (byte) render_init::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG722 [330] if((byte) render_init::c#1!=(const byte) PLAYFIELD_COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_COLS+1+1
    bne b3_from_b3
    jmp b5
  //SEG723 render_init::@5
  b5:
  //SEG724 [331] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG725 [332] (byte) render_init::l#1 ← ++ (byte) render_init::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG726 [333] if((byte) render_init::l#1!=(const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES+1+1
    bne b2_from_b5
    jmp breturn
  //SEG727 render_init::@return
  breturn:
  //SEG728 [334] return 
    rts
}
//SEG729 fill
fill: {
    .label end = $c
    .label addr = 5
  //SEG730 [336] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000 -- pbuz1=pbuz2_plus_vwuc1 
    lda addr
    clc
    adc #<$3e8
    sta end
    lda addr+1
    adc #>$3e8
    sta end+1
  //SEG731 [337] phi from fill fill::@1 to fill::@1 [phi:fill/fill::@1->fill::@1]
  b1_from_fill:
  b1_from_b1:
  //SEG732 [337] phi (byte*) fill::addr#2 = (byte*) fill::addr#0 [phi:fill/fill::@1->fill::@1#0] -- register_copy 
    jmp b1
  //SEG733 fill::@1
  b1:
  //SEG734 [338] *((byte*) fill::addr#2) ← (byte) fill::val#3 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (addr),y
  //SEG735 [339] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG736 [340] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuz2_then_la1 
    lda addr+1
    cmp end+1
    bne b1_from_b1
    lda addr
    cmp end
    bne b1_from_b1
    jmp breturn
  //SEG737 fill::@return
  breturn:
  //SEG738 [341] return 
    rts
}
//SEG739 sid_rnd_init
sid_rnd_init: {
  //SEG740 [342] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535 -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG741 [343] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    jmp breturn
  //SEG742 sid_rnd_init::@return
  breturn:
  //SEG743 [344] return 
    rts
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  keyboard_events: .fill 8, 0
  keyboard_scan_values: .fill 8, 0
  .align $40
  PIECE_T: .byte 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  .align $40
  PIECE_J: .byte 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_O: .byte 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  PIECES_COLORS: .byte WHITE, LIGHT_GREY, GREEN, LIGHT_GREY, WHITE, WHITE, GREEN
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
  screen_lines: .fill 2*(PLAYFIELD_LINES+3), 0
.pc = CHARSET "Inline"
  .var charset = LoadPicture("charset.png", List().add($000000, $ffffff, $523fa0, $77c1c9))
    .for (var c=0; c<16; c++)
        .for (var y=0;y<8; y++)
            .byte charset.getMulticolorByte(c,y)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b22
Removing instruction jmp b25
Removing instruction jmp bend
Removing instruction jmp b21
Removing instruction jmp b22
Removing instruction jmp b23
Removing instruction jmp b24
Removing instruction jmp b25
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b7
Removing instruction jmp b9
Removing instruction jmp b27
Removing instruction jmp b28
Removing instruction jmp b29
Removing instruction jmp b30
Removing instruction jmp b31
Removing instruction jmp b19
Removing instruction jmp b32
Removing instruction jmp b10
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b14
Removing instruction jmp b11
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b17
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b15
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b14
Removing instruction jmp b11
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp b17
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b2
Removing instruction jmp b11
Removing instruction jmp b4
Removing instruction jmp b12
Removing instruction jmp b18
Removing instruction jmp b13
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b17
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b25
Removing instruction jmp b13
Removing instruction jmp b3
Removing instruction jmp b20
Removing instruction jmp b26
Removing instruction jmp b21
Removing instruction jmp b9
Removing instruction jmp b27
Removing instruction jmp b22
Removing instruction jmp b10
Removing instruction jmp b28
Removing instruction jmp b23
Removing instruction jmp b11
Removing instruction jmp b29
Removing instruction jmp b24
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b5
Removing instruction jmp b19
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda key_event
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda current_orientation
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldy _3 with TAY
Removing instruction lda c
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda row_scan
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1 with b4
Replacing label b2_from_b1 with b2
Replacing label b3_from_b4 with b3
Replacing label b1_from_b2 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label breturn_from_b14 with breturn_from_b6
Replacing label b4_from_b1 with b4
Replacing label breturn_from_b15 with breturn_from_b6
Replacing label breturn_from_b14 with breturn_from_b6
Replacing label breturn_from_b11 with breturn_from_b8
Replacing label b2_from_b17 with b2
Replacing label b2_from_b9 with b2
Replacing label b4_from_b2 with b4
Replacing label b2_from_b1 with b2
Replacing label b17_from_b2 with b17
Replacing label b2_from_b3 with b2
Replacing label b4_from_b9 with b4
Replacing label b1_from_b4 with b1
Replacing label b5_from_b6 with b5
Replacing label b1_from_b3 with b1
Replacing label b9_from_b26 with b9
Replacing label b10_from_b27 with b10
Replacing label b11_from_b28 with b11
Replacing label breturn with b24
Replacing label b5_from_b4 with b5
Replacing label b5_from_b15 with b5
Replacing label b4_from_b5 with b4
Replacing label b3_from_b19 with b3
Replacing label b5_from_b7 with b5
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b5 with b2
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b22:
Removing instruction b25_from_b22:
Removing instruction main_from_b25:
Removing instruction bend_from_b25:
Removing instruction b22_from_b21:
Removing instruction tables_init_from_b22:
Removing instruction b23_from_b22:
Removing instruction spawn_current_from_b23:
Removing instruction b24_from_b23:
Removing instruction render_playfield_from_b24:
Removing instruction b1:
Removing instruction b27_from_b9:
Removing instruction b19_from_b31:
Removing instruction render_playfield_from_b19:
Removing instruction b1_from_b2:
Removing instruction b3_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b1_from_b3:
Removing instruction b2_from_b2:
Removing instruction breturn_from_b14:
Removing instruction b4_from_b1:
Removing instruction b4_from_b2:
Removing instruction breturn_from_b11:
Removing instruction breturn_from_b14:
Removing instruction breturn_from_b15:
Removing instruction b8_from_play_move_down:
Removing instruction b1_from_b8:
Removing instruction keyboard_event_pressed_from_b1:
Removing instruction b2_from_b10:
Removing instruction b2_from_b17:
Removing instruction b2_from_b9:
Removing instruction b4_from_b11:
Removing instruction b4_from_b2:
Removing instruction b13_from_b18:
Removing instruction b19_from_b13:
Removing instruction remove_lines_from_b19:
Removing instruction b20_from_b19:
Removing instruction spawn_current_from_b20:
Removing instruction breturn_from_b7:
Removing instruction b2_from_b1:
Removing instruction b1_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b4_from_b10:
Removing instruction b4_from_b9:
Removing instruction b5_from_b4:
Removing instruction b5_from_b6:
Removing instruction b17_from_b2:
Removing instruction b3_from_b17:
Removing instruction b1_from_b3:
Removing instruction b3_from_b13:
Removing instruction b3_from_b19:
Removing instruction b20_from_b3:
Removing instruction keyboard_event_pressed_from_b20:
Removing instruction b21_from_b26:
Removing instruction b21:
Removing instruction b9_from_b21:
Removing instruction b9_from_b26:
Removing instruction keyboard_event_pressed_from_b9:
Removing instruction b22_from_b27:
Removing instruction b22:
Removing instruction b10_from_b22:
Removing instruction b10_from_b27:
Removing instruction keyboard_event_pressed_from_b10:
Removing instruction b23_from_b28:
Removing instruction b23:
Removing instruction b11_from_b23:
Removing instruction b11_from_b28:
Removing instruction keyboard_event_pressed_from_b11:
Removing instruction b24_from_b29:
Removing instruction breturn:
Removing instruction b4_from_b5:
Removing instruction b5_from_b15:
Removing instruction b5_from_b17:
Removing instruction b5_from_b4:
Removing instruction b5_from_b7:
Removing instruction b1_from_b1:
Removing instruction b7_from_render_init:
Removing instruction fill_from_b7:
Removing instruction b1_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b1_from_fill:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b25:
Removing instruction bend:
Removing instruction b21:
Removing instruction render_init_from_b21:
Removing instruction b22:
Removing instruction b23:
Removing instruction b24:
Removing instruction b25:
Removing instruction render_current_from_b25:
Removing instruction b1_from_b25:
Removing instruction b9:
Removing instruction keyboard_event_scan_from_b9:
Removing instruction b27:
Removing instruction b28:
Removing instruction b29:
Removing instruction b30:
Removing instruction b31:
Removing instruction b19:
Removing instruction b32:
Removing instruction render_current_from_b32:
Removing instruction b1_from_b10:
Removing instruction b1_from_render_current:
Removing instruction b6:
Removing instruction b3_from_b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction breturn:
Removing instruction b1_from_render_playfield:
Removing instruction b2_from_b1:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b6:
Removing instruction collision_from_b4:
Removing instruction b14:
Removing instruction b11:
Removing instruction breturn_from_b11:
Removing instruction b1_from_collision:
Removing instruction b2_from_b1:
Removing instruction b8:
Removing instruction breturn_from_b8:
Removing instruction breturn_from_b4:
Removing instruction breturn_from_b5:
Removing instruction breturn_from_b6:
Removing instruction b17:
Removing instruction breturn_from_b17:
Removing instruction b1_from_b20:
Removing instruction b2_from_b21:
Removing instruction b6:
Removing instruction b7:
Removing instruction collision_from_b7:
Removing instruction b15:
Removing instruction b8:
Removing instruction collision_from_b1:
Removing instruction b14:
Removing instruction b11:
Removing instruction b8:
Removing instruction b17:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction collision_from_b12:
Removing instruction b18:
Removing instruction b13:
Removing instruction b19:
Removing instruction b20:
Removing instruction b7_from_b20:
Removing instruction b7_from_b6:
Removing instruction b1_from_spawn_current:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b1_from_b7:
Removing instruction breturn:
Removing instruction b1_from_remove_lines:
Removing instruction b3_from_b2:
Removing instruction b9:
Removing instruction b10:
Removing instruction breturn:
Removing instruction b1_from_lock_current:
Removing instruction b2_from_b1:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_b7:
Removing instruction b2_from_b8:
Removing instruction breturn:
Removing instruction b3:
Removing instruction breturn_from_b3:
Removing instruction b1_from_keyboard_event_scan:
Removing instruction b25:
Removing instruction b13:
Removing instruction b20:
Removing instruction b26:
Removing instruction b27:
Removing instruction b28:
Removing instruction b29:
Removing instruction b15:
Removing instruction b16:
Removing instruction b17:
Removing instruction b19:
Removing instruction breturn:
Removing instruction b1_from_tables_init:
Removing instruction b2:
Removing instruction breturn:
Removing instruction fill_from_render_init:
Removing instruction b7:
Removing instruction b1_from_b7:
Removing instruction b2_from_b1:
Removing instruction b5:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b3 in bne b17
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label breturn_from_b6 to b3
Relabelling long label breturn_from_b8 to b2
Relabelling long label breturn_from_b6 to b3
Relabelling long label b1_from_play_move_down to b3
Relabelling long label breturn_from_b4 to b5
Relabelling long label breturn_from_keyboard_event_get to b1
Relabelling long label b4_from_b25 to b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction beq b9
Removing instruction beq b10
Removing instruction beq b11
Removing instruction beq b24
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy ypos2 with TAY
Removing instruction b17:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b24:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b3
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @22
(label) @25
(label) @begin
(label) @end
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) CHARSET
(const byte*) CHARSET#0 CHARSET = ((byte*))(word/signed word/dword/signed dword) 8192
(byte*) CIA1_PORT_A
(const byte*) CIA1_PORT_A#0 CIA1_PORT_A = ((byte*))(word/dword/signed dword) 56320
(byte*) CIA1_PORT_B
(const byte*) CIA1_PORT_B#0 CIA1_PORT_B = ((byte*))(word/dword/signed dword) 56321
(byte) COLLISION_BOTTOM
(const byte) COLLISION_BOTTOM#0 COLLISION_BOTTOM = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte) COLLISION_LEFT
(const byte) COLLISION_LEFT#0 COLLISION_LEFT = (byte/signed byte/word/signed word/dword/signed dword) 4
(byte) COLLISION_NONE
(const byte) COLLISION_NONE#0 COLLISION_NONE = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte) COLLISION_PLAYFIELD
(const byte) COLLISION_PLAYFIELD#0 COLLISION_PLAYFIELD = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) COLLISION_RIGHT
(const byte) COLLISION_RIGHT#0 COLLISION_RIGHT = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte*) COLS
(const byte*) COLS#0 COLS = ((byte*))(word/dword/signed dword) 55296
(byte) DARK_GREY
(const byte) DARK_GREY#0 DARK_GREY = (byte/signed byte/word/signed word/dword/signed dword) 11
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte) KEY_COMMA
(const byte) KEY_COMMA#0 KEY_COMMA = (byte/signed byte/word/signed word/dword/signed dword) 47
(byte) KEY_COMMODORE
(const byte) KEY_COMMODORE#0 KEY_COMMODORE = (byte/signed byte/word/signed word/dword/signed dword) 61
(byte) KEY_CTRL
(const byte) KEY_CTRL#0 KEY_CTRL = (byte/signed byte/word/signed word/dword/signed dword) 58
(byte) KEY_DOT
(const byte) KEY_DOT#0 KEY_DOT = (byte/signed byte/word/signed word/dword/signed dword) 44
(byte) KEY_LSHIFT
(const byte) KEY_LSHIFT#0 KEY_LSHIFT = (byte/signed byte/word/signed word/dword/signed dword) 15
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_RSHIFT
(const byte) KEY_RSHIFT#0 KEY_RSHIFT = (byte/signed byte/word/signed word/dword/signed dword) 52
(byte) KEY_SPACE
(const byte) KEY_SPACE#0 KEY_SPACE = (byte/signed byte/word/signed word/dword/signed dword) 60
(byte) KEY_X
(const byte) KEY_X#0 KEY_X = (byte/signed byte/word/signed word/dword/signed dword) 23
(byte) KEY_Z
(const byte) KEY_Z#0 KEY_Z = (byte/signed byte/word/signed word/dword/signed dword) 12
(byte) LIGHT_GREY
(const byte) LIGHT_GREY#0 LIGHT_GREY = (byte/signed byte/word/signed word/dword/signed dword) 15
(word[]) PIECES
(const word[]) PIECES#0 PIECES = { ((word))(const byte[4*4*4]) PIECE_T#0, ((word))(const byte[4*4*4]) PIECE_S#0, ((word))(const byte[4*4*4]) PIECE_Z#0, ((word))(const byte[4*4*4]) PIECE_J#0, ((word))(const byte[4*4*4]) PIECE_O#0, ((word))(const byte[4*4*4]) PIECE_I#0, ((word))(const byte[4*4*4]) PIECE_L#0 }
(byte[]) PIECES_COLORS
(const byte[]) PIECES_COLORS#0 PIECES_COLORS = { (const byte) WHITE#0, (const byte) LIGHT_GREY#0, (const byte) GREEN#0, (const byte) LIGHT_GREY#0, (const byte) WHITE#0, (const byte) WHITE#0, (const byte) GREEN#0 }
(byte[4*4*4]) PIECE_I
(const byte[4*4*4]) PIECE_I#0 PIECE_I = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_J
(const byte[4*4*4]) PIECE_J#0 PIECE_J = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_L
(const byte[4*4*4]) PIECE_L#0 PIECE_L = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_O
(const byte[4*4*4]) PIECE_O#0 PIECE_O = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_S
(const byte[4*4*4]) PIECE_S#0 PIECE_S = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_T
(const byte[4*4*4]) PIECE_T#0 PIECE_T = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_Z
(const byte[4*4*4]) PIECE_Z#0 PIECE_Z = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte) PLAYFIELD_COLS
(const byte) PLAYFIELD_COLS#0 PLAYFIELD_COLS = (byte/signed byte/word/signed word/dword/signed dword) 10
(byte) PLAYFIELD_LINES
(const byte) PLAYFIELD_LINES#0 PLAYFIELD_LINES = (byte/signed byte/word/signed word/dword/signed dword) 22
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte) SID_CONTROL_NOISE
(const byte) SID_CONTROL_NOISE#0 SID_CONTROL_NOISE = (byte/word/signed word/dword/signed dword) 128
(byte*) SID_VOICE3_CONTROL
(const byte*) SID_VOICE3_CONTROL#0 SID_VOICE3_CONTROL = ((byte*))(word/dword/signed dword) 54290
(word*) SID_VOICE3_FREQ
(const word*) SID_VOICE3_FREQ#0 SID_VOICE3_FREQ = ((word*))(word/dword/signed dword) 54286
(byte*) SID_VOICE3_OSC
(const byte*) SID_VOICE3_OSC#0 SID_VOICE3_OSC = ((byte*))(word/dword/signed dword) 54299
(byte) WHITE
(const byte) WHITE#0 WHITE = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte()) collision((byte) collision::xpos , (byte) collision::ypos , (byte) collision::orientation)
(byte~) collision::$7 reg byte a 2002.0
(label) collision::@1
(label) collision::@17
(label) collision::@2
(label) collision::@20
(label) collision::@21
(label) collision::@3
(label) collision::@4
(label) collision::@5
(label) collision::@6
(label) collision::@8
(label) collision::@return
(byte) collision::c
(byte) collision::c#1 reg byte x 1001.0
(byte) collision::c#2 reg byte x 222.44444444444446
(byte) collision::col
(byte) collision::col#1 col zp ZP_BYTE:11 500.5
(byte) collision::col#2 col zp ZP_BYTE:11 638.25
(byte~) collision::col#9 col zp ZP_BYTE:11 202.0
(byte) collision::i
(byte) collision::i#1 i zp ZP_BYTE:24 161.76923076923077
(byte~) collision::i#11 i#11 zp ZP_BYTE:10 202.0
(byte~) collision::i#13 i#13 zp ZP_BYTE:10 2002.0
(byte) collision::i#2 i#2 zp ZP_BYTE:10 1552.0
(byte) collision::i#3 i#3 zp ZP_BYTE:10 67.33333333333333
(byte) collision::l
(byte) collision::l#1 l zp ZP_BYTE:9 101.0
(byte) collision::l#6 l zp ZP_BYTE:9 12.625
(byte) collision::orientation
(byte) collision::orientation#0 reg byte x 2.0
(byte) collision::orientation#1 reg byte x 2.0
(byte) collision::orientation#2 reg byte x 2.0
(byte) collision::orientation#3 reg byte x 2.0
(byte) collision::orientation#4 reg byte x 10.0
(byte*) collision::piece_gfx
(byte*) collision::piece_gfx#0 piece_gfx zp ZP_WORD:5 47.76190476190476
(byte*) collision::playfield_line
(byte*) collision::playfield_line#0 playfield_line zp ZP_WORD:22 78.71428571428571
(byte) collision::return
(byte) collision::return#0 reg byte a 4.0
(byte) collision::return#1 reg byte a 4.0
(byte) collision::return#12 reg byte a 4.0
(byte) collision::return#13 reg byte a 4.0
(byte) collision::return#14 reg byte a 1.3333333333333333
(byte) collision::xpos
(byte) collision::xpos#0 xpos zp ZP_BYTE:7 1.3333333333333333
(byte) collision::xpos#1 xpos zp ZP_BYTE:7 1.0
(byte) collision::xpos#2 xpos zp ZP_BYTE:7 1.0
(byte) collision::xpos#3 xpos zp ZP_BYTE:7 1.0
(byte) collision::xpos#5 xpos zp ZP_BYTE:7 4.954545454545454
(byte) collision::ypos
(byte) collision::ypos#0 reg byte y 1.0
(byte) collision::ypos#1 reg byte y 1.3333333333333333
(byte) collision::ypos#2 reg byte y 1.3333333333333333
(byte) collision::ypos#3 reg byte y 1.3333333333333333
(byte) collision::ypos#4 reg byte y 5.0
(byte) collision::ypos2
(byte) collision::ypos2#0 ypos2 zp ZP_BYTE:8 4.0
(byte) collision::ypos2#1 ypos2 zp ZP_BYTE:8 50.5
(byte) collision::ypos2#2 ypos2 zp ZP_BYTE:8 87.06666666666668
(byte) current_movedown_counter
(byte) current_movedown_counter#10 current_movedown_counter zp ZP_BYTE:3 0.5333333333333333
(byte) current_movedown_counter#12 current_movedown_counter zp ZP_BYTE:3 0.52
(byte) current_movedown_counter#15 current_movedown_counter zp ZP_BYTE:3 1.3
(byte) current_movedown_fast
(const byte) current_movedown_fast#0 current_movedown_fast = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte) current_movedown_slow
(const byte) current_movedown_slow#0 current_movedown_slow = (byte/signed byte/word/signed word/dword/signed dword) 50
(byte) current_orientation
(byte) current_orientation#15 current_orientation zp ZP_BYTE:14 0.5
(byte) current_orientation#18 current_orientation zp ZP_BYTE:14 0.32653061224489793
(byte) current_orientation#23 current_orientation zp ZP_BYTE:14 1.1333333333333333
(byte) current_orientation#33 current_orientation zp ZP_BYTE:14 4.0
(byte) current_orientation#8 current_orientation zp ZP_BYTE:14 3.0
(byte*) current_piece
(byte*) current_piece#11 current_piece zp ZP_WORD:12 0.5588235294117647
(byte*) current_piece#13 current_piece zp ZP_WORD:12 0.3484848484848484
(byte*) current_piece#15 current_piece#15 zp ZP_WORD:5 10.0
(byte*) current_piece#23 current_piece zp ZP_WORD:12 6.0
(byte*~) current_piece#71 current_piece zp ZP_WORD:12 4.0
(byte*~) current_piece#72 current_piece#72 zp ZP_WORD:5 4.0
(byte*~) current_piece#73 current_piece#73 zp ZP_WORD:5 4.0
(byte*~) current_piece#74 current_piece#74 zp ZP_WORD:5 4.0
(byte*~) current_piece#75 current_piece#75 zp ZP_WORD:5 4.0
(byte*~) current_piece#76 current_piece zp ZP_WORD:12 4.0
(byte) current_piece_color
(byte) current_piece_color#11 current_piece_color zp ZP_BYTE:18 19.96078431372549
(byte) current_piece_color#13 current_piece_color zp ZP_BYTE:18 1.04
(byte) current_piece_color#15 current_piece_color zp ZP_BYTE:18 0.7272727272727273
(byte) current_piece_color#23 current_piece_color zp ZP_BYTE:18 6.0
(byte) current_piece_color#67 current_piece_color#67 zp ZP_BYTE:7 53.368421052631575
(byte~) current_piece_color#75 current_piece_color#75 zp ZP_BYTE:7 4.0
(byte~) current_piece_color#76 current_piece_color#76 zp ZP_BYTE:7 22.0
(byte*) current_piece_gfx
(byte*) current_piece_gfx#10 current_piece_gfx zp ZP_WORD:15 0.6666666666666666
(byte*) current_piece_gfx#15 current_piece_gfx zp ZP_WORD:15 19.96078431372549
(byte*) current_piece_gfx#17 current_piece_gfx zp ZP_WORD:15 0.2962962962962963
(byte*) current_piece_gfx#18 current_piece_gfx zp ZP_WORD:15 1.8666666666666665
(byte*) current_piece_gfx#29 current_piece_gfx zp ZP_WORD:15 6.0
(byte*) current_piece_gfx#64 current_piece_gfx#64 zp ZP_WORD:5 53.368421052631575
(byte*) current_piece_gfx#8 current_piece_gfx zp ZP_WORD:15 4.0
(byte*~) current_piece_gfx#87 current_piece_gfx#87 zp ZP_WORD:5 2.0
(byte*~) current_piece_gfx#88 current_piece_gfx#88 zp ZP_WORD:5 11.0
(byte) current_xpos
(byte) current_xpos#16 current_xpos zp ZP_BYTE:17 2.313725490196078
(byte) current_xpos#19 current_xpos zp ZP_BYTE:17 0.72
(byte) current_xpos#23 current_xpos zp ZP_BYTE:17 0.871794871794872
(byte) current_xpos#36 current_xpos zp ZP_BYTE:17 4.0
(byte) current_xpos#63 current_xpos#63 zp ZP_BYTE:4 5.894736842105264
(byte) current_xpos#7 current_xpos zp ZP_BYTE:17 4.0
(byte) current_xpos#9 current_xpos zp ZP_BYTE:17 4.0
(byte~) current_xpos#96 current_xpos#96 zp ZP_BYTE:4 7.333333333333333
(byte) current_ypos
(byte) current_ypos#12 current_ypos zp ZP_BYTE:2 0.5588235294117647
(byte) current_ypos#16 current_ypos zp ZP_BYTE:2 0.48484848484848475
(byte) current_ypos#22 reg byte x 13.0
(byte) current_ypos#31 current_ypos zp ZP_BYTE:2 4.0
(byte) current_ypos#4 current_ypos zp ZP_BYTE:2 4.0
(byte~) current_ypos#71 reg byte x 5.5
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(label) fill::@1
(label) fill::@return
(byte*) fill::addr
(byte*) fill::addr#0 addr zp ZP_WORD:5 2.0
(byte*) fill::addr#1 addr zp ZP_WORD:5 16.5
(byte*) fill::addr#2 addr zp ZP_WORD:5 17.5
(byte*) fill::end
(byte*) fill::end#0 end zp ZP_WORD:12 2.6
(word) fill::size
(byte*) fill::start
(byte) fill::val
(byte) fill::val#3 reg byte x 1.8333333333333333
(byte()) keyboard_event_get()
(label) keyboard_event_get::@3
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 reg byte a 4.0
(byte) keyboard_event_get::return#2 reg byte a 4.333333333333333
(byte) keyboard_event_get::return#3 reg byte a 22.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 reg byte a 4.0
(byte~) keyboard_event_pressed::$1 reg byte a 4.0
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#5 keycode zp ZP_BYTE:4 1.3333333333333333
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 reg byte a 4.0
(byte) keyboard_event_pressed::return#1 reg byte a 4.0
(byte) keyboard_event_pressed::return#10 reg byte a 4.0
(byte) keyboard_event_pressed::return#11 reg byte a 1.714285714285714
(byte) keyboard_event_pressed::return#12 reg byte a 4.0
(byte) keyboard_event_pressed::return#2 reg byte a 4.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 row_bits zp ZP_BYTE:7 2.0
(void()) keyboard_event_scan()
(byte/word/dword~) keyboard_event_scan::$11 reg byte a 2002.0
(byte~) keyboard_event_scan::$14 reg byte a 4.0
(byte~) keyboard_event_scan::$18 reg byte a 4.0
(byte~) keyboard_event_scan::$22 reg byte a 4.0
(byte~) keyboard_event_scan::$26 reg byte a 4.0
(byte~) keyboard_event_scan::$3 reg byte a 2002.0
(byte~) keyboard_event_scan::$4 reg byte a 2002.0
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@24
(label) keyboard_event_scan::@25
(label) keyboard_event_scan::@26
(label) keyboard_event_scan::@27
(label) keyboard_event_scan::@28
(label) keyboard_event_scan::@29
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 reg byte x 1501.5
(byte) keyboard_event_scan::col#2 reg byte x 286.0
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 reg byte a 2002.0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 keycode zp ZP_BYTE:7 202.0
(byte) keyboard_event_scan::keycode#10 keycode zp ZP_BYTE:7 315.7692307692308
(byte) keyboard_event_scan::keycode#11 keycode zp ZP_BYTE:7 50.5
(byte) keyboard_event_scan::keycode#14 keycode zp ZP_BYTE:7 101.0
(byte) keyboard_event_scan::keycode#15 keycode zp ZP_BYTE:7 525.75
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 row zp ZP_BYTE:4 151.5
(byte) keyboard_event_scan::row#2 row zp ZP_BYTE:4 60.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 row_scan zp ZP_BYTE:8 128.05555555555557
(byte[8]) keyboard_events
(const byte[8]) keyboard_events#0 keyboard_events = { fill( 8, 0) }
(byte) keyboard_events_size
(byte) keyboard_events_size#1 keyboard_events_size zp ZP_BYTE:19 2002.0
(byte) keyboard_events_size#10 keyboard_events_size zp ZP_BYTE:19 810.9000000000001
(byte) keyboard_events_size#13 keyboard_events_size zp ZP_BYTE:19 9.967741935483872
(byte) keyboard_events_size#16 keyboard_events_size zp ZP_BYTE:19 0.5172413793103449
(byte) keyboard_events_size#19 keyboard_events_size zp ZP_BYTE:19 2.6
(byte) keyboard_events_size#2 keyboard_events_size zp ZP_BYTE:19 2002.0
(byte) keyboard_events_size#29 keyboard_events_size zp ZP_BYTE:19 43.57142857142858
(byte) keyboard_events_size#30 keyboard_events_size zp ZP_BYTE:19 1021.2
(byte) keyboard_events_size#4 keyboard_events_size zp ZP_BYTE:19 3.0
(byte[8]) keyboard_matrix_col_bitmask
(const byte[8]) keyboard_matrix_col_bitmask#0 keyboard_matrix_col_bitmask = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 16, (byte/signed byte/word/signed word/dword/signed dword) 32, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/word/signed word/dword/signed dword) 128 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 34.33333333333333
(byte) keyboard_matrix_read::return#2 reg byte a 202.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte x 103.0
(byte[8]) keyboard_matrix_row_bitmask
(const byte[8]) keyboard_matrix_row_bitmask#0 keyboard_matrix_row_bitmask = { (byte/word/signed word/dword/signed dword) 254, (byte/word/signed word/dword/signed dword) 253, (byte/word/signed word/dword/signed dword) 251, (byte/word/signed word/dword/signed dword) 247, (byte/word/signed word/dword/signed dword) 239, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 191, (byte/signed byte/word/signed word/dword/signed dword) 127 }
(byte) keyboard_modifiers
(byte[8]) keyboard_scan_values
(const byte[8]) keyboard_scan_values#0 keyboard_scan_values = { fill( 8, 0) }
(void()) lock_current()
(label) lock_current::@1
(label) lock_current::@2
(label) lock_current::@3
(label) lock_current::@4
(label) lock_current::@5
(label) lock_current::@7
(label) lock_current::@8
(label) lock_current::@return
(byte) lock_current::c
(byte) lock_current::c#1 reg byte x 1001.0
(byte) lock_current::c#2 reg byte x 400.4
(byte) lock_current::col
(byte) lock_current::col#0 col zp ZP_BYTE:7 202.0
(byte) lock_current::col#1 col zp ZP_BYTE:7 500.5
(byte) lock_current::col#2 col zp ZP_BYTE:7 776.0
(byte) lock_current::i
(byte) lock_current::i#1 i zp ZP_BYTE:8 233.66666666666669
(byte) lock_current::i#2 i#2 zp ZP_BYTE:4 1552.0
(byte) lock_current::i#3 i#3 zp ZP_BYTE:4 67.33333333333333
(byte~) lock_current::i#7 i#7 zp ZP_BYTE:4 202.0
(byte~) lock_current::i#9 i#9 zp ZP_BYTE:4 2002.0
(byte) lock_current::l
(byte) lock_current::l#1 l zp ZP_BYTE:3 101.0
(byte) lock_current::l#6 l zp ZP_BYTE:3 16.833333333333332
(byte*) lock_current::playfield_line
(byte*) lock_current::playfield_line#0 playfield_line zp ZP_WORD:5 110.19999999999999
(byte) lock_current::ypos2
(byte) lock_current::ypos2#0 ypos2 zp ZP_BYTE:2 4.0
(byte) lock_current::ypos2#1 ypos2 zp ZP_BYTE:2 50.5
(byte) lock_current::ypos2#2 ypos2 zp ZP_BYTE:2 27.727272727272727
(void()) main()
(byte~) main::$10 reg byte a 22.0
(byte~) main::$11 reg byte a 22.0
(byte~) main::$12 reg byte a 22.0
(label) main::@1
(label) main::@10
(label) main::@19
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@27
(label) main::@28
(label) main::@29
(label) main::@30
(label) main::@31
(label) main::@32
(label) main::@4
(label) main::@7
(label) main::@9
(byte) main::key_event
(byte) main::key_event#0 key_event zp ZP_BYTE:20 4.0
(byte) main::render
(byte) main::render#1 render zp ZP_BYTE:21 4.4
(byte) main::render#2 render zp ZP_BYTE:21 4.4
(byte) main::render#3 reg byte a 22.0
(byte()) play_move_down((byte) play_move_down::key_event)
(byte~) play_move_down::$12 reg byte a 4.0
(byte~) play_move_down::$2 reg byte a 4.0
(label) play_move_down::@1
(label) play_move_down::@10
(label) play_move_down::@11
(label) play_move_down::@12
(label) play_move_down::@13
(label) play_move_down::@17
(label) play_move_down::@18
(label) play_move_down::@19
(label) play_move_down::@2
(label) play_move_down::@20
(label) play_move_down::@4
(label) play_move_down::@6
(label) play_move_down::@7
(label) play_move_down::@8
(label) play_move_down::@9
(label) play_move_down::@return
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0 reg byte a 6.5
(byte) play_move_down::movedown
(byte) play_move_down::movedown#10 reg byte x 1.0
(byte) play_move_down::movedown#2 reg byte x 4.0
(byte) play_move_down::movedown#3 reg byte x 4.0
(byte) play_move_down::movedown#6 reg byte x 6.0
(byte) play_move_down::movedown#7 reg byte x 5.0
(byte) play_move_down::return
(byte) play_move_down::return#0 reg byte a 22.0
(byte) play_move_down::return#3 reg byte x 3.6666666666666665
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(byte~) play_move_leftright::$4 reg byte a 4.0
(byte~) play_move_leftright::$8 reg byte a 4.0
(label) play_move_leftright::@1
(label) play_move_leftright::@11
(label) play_move_leftright::@14
(label) play_move_leftright::@15
(label) play_move_leftright::@6
(label) play_move_leftright::@7
(label) play_move_leftright::@8
(label) play_move_leftright::@return
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0 reg byte a 7.5
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0 reg byte a 22.0
(byte) play_move_leftright::return#2 reg byte a 3.6666666666666665
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(byte/signed word/word/dword/signed dword~) play_move_rotate::$2 reg byte a 4.0
(byte/signed word/word/dword/signed dword~) play_move_rotate::$4 reg byte a 4.0
(byte~) play_move_rotate::$6 reg byte a 4.0
(label) play_move_rotate::@1
(label) play_move_rotate::@11
(label) play_move_rotate::@14
(label) play_move_rotate::@2
(label) play_move_rotate::@4
(label) play_move_rotate::@6
(label) play_move_rotate::@return
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0 reg byte a 7.5
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#1 orientation zp ZP_BYTE:4 4.0
(byte) play_move_rotate::orientation#2 orientation zp ZP_BYTE:4 4.0
(byte) play_move_rotate::orientation#3 orientation zp ZP_BYTE:4 0.8888888888888888
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0 reg byte a 22.0
(byte) play_move_rotate::return#2 reg byte a 3.6666666666666665
(byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield
(const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 playfield = { fill( PLAYFIELD_LINES#0*PLAYFIELD_COLS#0, 0) }
(byte*[PLAYFIELD_LINES#0]) playfield_lines
(const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 playfield_lines = { fill( PLAYFIELD_LINES#0, 0) }
(byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx
(const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 playfield_lines_idx = { fill( PLAYFIELD_LINES#0+1, 0) }
(void()) remove_lines()
(label) remove_lines::@1
(label) remove_lines::@10
(label) remove_lines::@17
(label) remove_lines::@2
(label) remove_lines::@3
(label) remove_lines::@4
(label) remove_lines::@5
(label) remove_lines::@6
(label) remove_lines::@9
(label) remove_lines::@return
(byte) remove_lines::c
(byte) remove_lines::c#0 c zp ZP_BYTE:7 600.5999999999999
(byte) remove_lines::full
(byte) remove_lines::full#2 full zp ZP_BYTE:4 420.59999999999997
(byte) remove_lines::full#4 full zp ZP_BYTE:4 400.4
(byte) remove_lines::r
(byte) remove_lines::r#1 reg byte y 161.76923076923077
(byte) remove_lines::r#2 reg byte y 1552.0
(byte) remove_lines::r#3 reg byte y 202.0
(byte) remove_lines::w
(byte) remove_lines::w#1 reg byte x 551.0
(byte) remove_lines::w#11 reg byte x 134.66666666666666
(byte) remove_lines::w#12 reg byte x 202.0
(byte) remove_lines::w#2 reg byte x 202.0
(byte) remove_lines::w#3 reg byte x 202.0
(byte) remove_lines::w#4 reg byte x 443.42857142857144
(byte) remove_lines::w#6 reg byte x 168.33333333333331
(byte) remove_lines::x
(byte) remove_lines::x#1 x zp ZP_BYTE:3 1501.5
(byte) remove_lines::x#2 x zp ZP_BYTE:3 250.25
(byte) remove_lines::y
(byte) remove_lines::y#1 y zp ZP_BYTE:2 151.5
(byte) remove_lines::y#8 y zp ZP_BYTE:2 14.428571428571429
(void()) render_current()
(label) render_current::@1
(label) render_current::@2
(label) render_current::@3
(label) render_current::@4
(label) render_current::@6
(label) render_current::@7
(label) render_current::@8
(label) render_current::@return
(byte) render_current::c
(byte) render_current::c#1 reg byte x 1501.5
(byte) render_current::c#2 reg byte x 286.0
(byte) render_current::current_cell
(byte) render_current::current_cell#0 reg byte a 1001.0
(byte) render_current::i
(byte) render_current::i#1 i zp ZP_BYTE:10 429.0
(byte) render_current::i#2 i zp ZP_BYTE:10 1552.0
(byte) render_current::i#4 i zp ZP_BYTE:10 75.75
(byte) render_current::i#8 i zp ZP_BYTE:10 300.75
(byte) render_current::l
(byte) render_current::l#1 l zp ZP_BYTE:9 151.5
(byte) render_current::l#3 l zp ZP_BYTE:9 13.466666666666667
(byte*) render_current::screen_line
(byte*) render_current::screen_line#0 screen_line zp ZP_WORD:22 100.18181818181819
(byte) render_current::xpos
(byte) render_current::xpos#0 xpos zp ZP_BYTE:11 202.0
(byte) render_current::xpos#1 xpos zp ZP_BYTE:11 667.3333333333334
(byte) render_current::xpos#2 xpos zp ZP_BYTE:11 684.1666666666667
(byte) render_current::ypos2
(byte) render_current::ypos2#0 ypos2 zp ZP_BYTE:8 4.0
(byte) render_current::ypos2#1 ypos2 zp ZP_BYTE:8 67.33333333333333
(byte) render_current::ypos2#2 ypos2 zp ZP_BYTE:8 29.000000000000004
(void()) render_init()
(byte*~) render_init::$10 $10 zp ZP_WORD:12 202.0
(byte~) render_init::$5 reg byte a 22.0
(label) render_init::@1
(label) render_init::@2
(label) render_init::@3
(label) render_init::@5
(label) render_init::@7
(label) render_init::@return
(byte) render_init::c
(byte) render_init::c#1 reg byte x 151.5
(byte) render_init::c#2 reg byte x 101.0
(byte) render_init::i
(byte) render_init::i#1 reg byte x 16.5
(byte) render_init::i#2 reg byte x 8.25
(byte) render_init::l
(byte) render_init::l#1 l zp ZP_BYTE:2 16.5
(byte) render_init::l#4 l zp ZP_BYTE:2 3.142857142857143
(byte*) render_init::li
(byte*) render_init::li#1 li zp ZP_WORD:5 7.333333333333333
(byte*) render_init::li#2 li zp ZP_WORD:5 11.0
(byte*) render_init::line
(byte*) render_init::line#1 line zp ZP_WORD:5 7.333333333333333
(byte*) render_init::line#4 line zp ZP_WORD:5 20.499999999999996
(void()) render_playfield()
(byte~) render_playfield::$1 reg byte a 202.0
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#1 reg byte x 1501.5
(byte) render_playfield::c#2 reg byte x 500.5
(byte) render_playfield::i
(byte) render_playfield::i#1 i zp ZP_BYTE:7 420.59999999999997
(byte) render_playfield::i#2 i zp ZP_BYTE:7 1034.6666666666667
(byte) render_playfield::i#3 i zp ZP_BYTE:7 67.33333333333333
(byte) render_playfield::l
(byte) render_playfield::l#1 l zp ZP_BYTE:4 151.5
(byte) render_playfield::l#2 l zp ZP_BYTE:4 33.666666666666664
(byte*) render_playfield::line
(byte*) render_playfield::line#0 line zp ZP_WORD:5 202.0
(byte*) render_playfield::line#1 line zp ZP_WORD:5 500.5
(byte*) render_playfield::line#2 line zp ZP_WORD:5 1552.0
(byte*[PLAYFIELD_LINES#0+3]) screen_lines
(const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 screen_lines = { fill( PLAYFIELD_LINES#0+3, 0) }
(byte()) sid_rnd()
(label) sid_rnd::@return
(byte) sid_rnd::return
(byte) sid_rnd::return#0 reg byte a 34.33333333333333
(byte) sid_rnd::return#2 reg byte a 202.0
(void()) sid_rnd_init()
(label) sid_rnd_init::@return
(void()) spawn_current()
(byte~) spawn_current::$1 reg byte a 202.0
(byte~) spawn_current::$3 $3 zp ZP_BYTE:2 0.18181818181818182
(label) spawn_current::@1
(label) spawn_current::@2
(label) spawn_current::@3
(label) spawn_current::@7
(label) spawn_current::@return
(byte) spawn_current::piece_idx
(byte) spawn_current::piece_idx#1 reg byte x 202.0
(byte) spawn_current::piece_idx#2 reg byte x 51.5
(void()) tables_init()
(byte~) tables_init::$1 reg byte a 22.0
(label) tables_init::@1
(label) tables_init::@2
(label) tables_init::@return
(byte) tables_init::idx
(byte) tables_init::idx#1 idx zp ZP_BYTE:2 7.333333333333333
(byte) tables_init::idx#2 idx zp ZP_BYTE:2 6.6000000000000005
(byte) tables_init::j
(byte) tables_init::j#1 reg byte x 16.5
(byte) tables_init::j#2 reg byte x 7.333333333333333
(byte*) tables_init::pli
(byte*) tables_init::pli#1 pli zp ZP_WORD:5 5.5
(byte*) tables_init::pli#2 pli zp ZP_WORD:5 8.25

zp ZP_BYTE:2 [ current_ypos#12 current_ypos#16 current_ypos#31 current_ypos#4 lock_current::ypos2#2 lock_current::ypos2#0 lock_current::ypos2#1 remove_lines::y#8 remove_lines::y#1 tables_init::idx#2 tables_init::idx#1 render_init::l#4 render_init::l#1 spawn_current::$3 ]
zp ZP_BYTE:3 [ current_movedown_counter#15 current_movedown_counter#12 current_movedown_counter#10 remove_lines::x#2 remove_lines::x#1 lock_current::l#6 lock_current::l#1 ]
reg byte x [ current_ypos#22 current_ypos#71 ]
zp ZP_BYTE:4 [ current_xpos#63 current_xpos#96 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 remove_lines::full#4 remove_lines::full#2 lock_current::i#2 lock_current::i#3 lock_current::i#7 lock_current::i#9 keyboard_event_pressed::keycode#5 keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
zp ZP_WORD:5 [ current_piece_gfx#64 current_piece_gfx#87 current_piece_gfx#88 render_playfield::line#2 render_playfield::line#0 render_playfield::line#1 current_piece#15 current_piece#72 current_piece#73 current_piece#74 current_piece#75 collision::piece_gfx#0 tables_init::pli#2 tables_init::pli#1 render_init::li#2 render_init::li#1 render_init::line#4 render_init::line#1 fill::addr#2 fill::addr#0 fill::addr#1 lock_current::playfield_line#0 ]
zp ZP_BYTE:7 [ current_piece_color#67 current_piece_color#75 current_piece_color#76 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 collision::xpos#5 collision::xpos#0 collision::xpos#1 collision::xpos#2 collision::xpos#3 lock_current::col#2 lock_current::col#0 lock_current::col#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 remove_lines::c#0 keyboard_event_pressed::row_bits#0 ]
zp ZP_BYTE:8 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 collision::ypos2#2 collision::ypos2#0 collision::ypos2#1 lock_current::i#1 keyboard_event_scan::row_scan#0 ]
zp ZP_BYTE:9 [ render_current::l#3 render_current::l#1 collision::l#6 collision::l#1 ]
zp ZP_BYTE:10 [ render_current::i#2 render_current::i#1 render_current::i#4 render_current::i#8 collision::i#2 collision::i#3 collision::i#11 collision::i#13 ]
zp ZP_BYTE:11 [ render_current::xpos#2 render_current::xpos#1 render_current::xpos#0 collision::col#2 collision::col#9 collision::col#1 ]
reg byte x [ render_current::c#2 render_current::c#1 ]
reg byte x [ render_playfield::c#2 render_playfield::c#1 ]
reg byte a [ play_move_rotate::return#2 ]
reg byte x [ collision::orientation#4 collision::orientation#0 collision::orientation#1 collision::orientation#2 collision::orientation#3 ]
reg byte y [ collision::ypos#4 collision::ypos#0 collision::ypos#1 collision::ypos#2 collision::ypos#3 ]
reg byte x [ collision::c#2 collision::c#1 ]
reg byte a [ collision::return#14 ]
reg byte a [ play_move_leftright::return#2 ]
reg byte x [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
zp ZP_WORD:12 [ current_piece#23 current_piece#76 current_piece#11 current_piece#13 current_piece#71 render_init::$10 fill::end#0 ]
zp ZP_BYTE:14 [ current_orientation#33 current_orientation#15 current_orientation#23 current_orientation#8 current_orientation#18 ]
zp ZP_WORD:15 [ current_piece_gfx#29 current_piece_gfx#15 current_piece_gfx#18 current_piece_gfx#10 current_piece_gfx#8 current_piece_gfx#17 ]
zp ZP_BYTE:17 [ current_xpos#36 current_xpos#16 current_xpos#23 current_xpos#9 current_xpos#19 current_xpos#7 ]
zp ZP_BYTE:18 [ current_piece_color#23 current_piece_color#11 current_piece_color#13 current_piece_color#15 ]
reg byte x [ play_move_down::return#3 ]
reg byte x [ spawn_current::piece_idx#2 spawn_current::piece_idx#1 ]
reg byte y [ remove_lines::r#2 remove_lines::r#3 remove_lines::r#1 ]
reg byte x [ remove_lines::w#6 remove_lines::w#4 remove_lines::w#12 remove_lines::w#11 remove_lines::w#1 remove_lines::w#2 remove_lines::w#3 ]
reg byte x [ lock_current::c#2 lock_current::c#1 ]
reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
zp ZP_BYTE:19 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
reg byte x [ tables_init::j#2 tables_init::j#1 ]
reg byte x [ render_init::i#2 render_init::i#1 ]
reg byte x [ render_init::c#2 render_init::c#1 ]
reg byte x [ fill::val#3 ]
reg byte a [ keyboard_event_get::return#3 ]
zp ZP_BYTE:20 [ main::key_event#0 ]
reg byte a [ play_move_down::key_event#0 ]
reg byte a [ play_move_down::return#0 ]
reg byte a [ main::$10 ]
zp ZP_BYTE:21 [ main::render#1 main::render#2 ]
reg byte a [ play_move_leftright::key_event#0 ]
reg byte a [ play_move_leftright::return#0 ]
reg byte a [ main::$11 ]
reg byte a [ play_move_rotate::key_event#0 ]
reg byte a [ play_move_rotate::return#0 ]
reg byte a [ main::$12 ]
reg byte a [ main::render#3 ]
zp ZP_WORD:22 [ render_current::screen_line#0 collision::playfield_line#0 ]
reg byte a [ render_current::current_cell#0 ]
reg byte a [ render_playfield::$1 ]
reg byte a [ play_move_rotate::$2 ]
reg byte a [ collision::return#13 ]
reg byte a [ play_move_rotate::$6 ]
reg byte a [ play_move_rotate::$4 ]
zp ZP_BYTE:24 [ collision::i#1 ]
reg byte a [ collision::$7 ]
reg byte a [ collision::return#12 ]
reg byte a [ play_move_leftright::$4 ]
reg byte a [ collision::return#1 ]
reg byte a [ play_move_leftright::$8 ]
reg byte a [ keyboard_event_pressed::return#12 ]
reg byte a [ play_move_down::$2 ]
reg byte a [ collision::return#0 ]
reg byte a [ play_move_down::$12 ]
reg byte a [ sid_rnd::return#2 ]
reg byte a [ spawn_current::$1 ]
reg byte a [ sid_rnd::return#0 ]
reg byte a [ keyboard_event_pressed::$0 ]
reg byte a [ keyboard_event_pressed::$1 ]
reg byte a [ keyboard_event_pressed::return#11 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_event_pressed::return#0 ]
reg byte a [ keyboard_event_scan::$14 ]
reg byte a [ keyboard_event_pressed::return#1 ]
reg byte a [ keyboard_event_scan::$18 ]
reg byte a [ keyboard_event_pressed::return#2 ]
reg byte a [ keyboard_event_scan::$22 ]
reg byte a [ keyboard_event_pressed::return#10 ]
reg byte a [ keyboard_event_scan::$26 ]
reg byte a [ keyboard_event_scan::$3 ]
reg byte a [ keyboard_event_scan::$4 ]
reg byte a [ keyboard_event_scan::event_type#0 ]
reg byte a [ keyboard_event_scan::$11 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ tables_init::$1 ]
reg byte a [ render_init::$5 ]


FINAL ASSEMBLER
Score: 416929

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label COLS = $d800
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .const BLACK = 0
  .const WHITE = 1
  .const GREEN = 5
  .const DARK_GREY = $b
  .const LIGHT_GREY = $f
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  .const current_movedown_slow = $32
  .const current_movedown_fast = 5
  .const COLLISION_NONE = 0
  .const COLLISION_PLAYFIELD = 1
  .const COLLISION_BOTTOM = 2
  .const COLLISION_LEFT = 4
  .const COLLISION_RIGHT = 8
  .label SCREEN = $400
  .label CHARSET = $2000
  .label keyboard_events_size = $13
  .label current_ypos = 2
  .label current_xpos = $11
  .label current_orientation = $e
  .label current_piece_gfx = $f
  .label current_piece = $c
  .label current_piece_color = $12
  .label current_movedown_counter = 3
  .label current_piece_15 = 5
  .label current_xpos_63 = 4
  .label current_piece_gfx_64 = 5
  .label current_piece_color_67 = 7
  .label current_xpos_96 = 4
  .label current_piece_gfx_87 = 5
  .label current_piece_gfx_88 = 5
  .label current_piece_color_75 = 7
  .label current_piece_color_76 = 7
  .label current_piece_72 = 5
  .label current_piece_73 = 5
  .label current_piece_74 = 5
  .label current_piece_75 = 5
//SEG2 @begin
//SEG3 @22
//SEG4 kickasm(location (const byte*) CHARSET#0) {{ .var charset = LoadPicture("charset.png", List().add($000000, $ffffff, $523fa0, $77c1c9))     .for (var c=0; c<16; c++)         .for (var y=0;y<8; y++)             .byte charset.getMulticolorByte(c,y)  }}
//SEG5 [2] phi from @22 to @25 [phi:@22->@25]
//SEG6 @25
//SEG7 [3] call main 
//SEG8 [5] phi from @25 to main [phi:@25->main]
  jsr main
//SEG9 [4] phi from @25 to @end [phi:@25->@end]
//SEG10 @end
//SEG11 main
main: {
    .label key_event = $14
    .label render = $15
  //SEG12 [6] call sid_rnd_init 
    jsr sid_rnd_init
  //SEG13 main::@21
  //SEG14 asm { sei  }
    sei
  //SEG15 [8] call render_init 
  //SEG16 [315] phi from main::@21 to render_init [phi:main::@21->render_init]
    jsr render_init
  //SEG17 [9] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
  //SEG18 main::@22
  //SEG19 [10] call tables_init 
  //SEG20 [304] phi from main::@22 to tables_init [phi:main::@22->tables_init]
    jsr tables_init
  //SEG21 [11] phi from main::@22 to main::@23 [phi:main::@22->main::@23]
  //SEG22 main::@23
  //SEG23 [12] call spawn_current 
  //SEG24 [184] phi from main::@23 to spawn_current [phi:main::@23->spawn_current]
    jsr spawn_current
  //SEG25 [13] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  //SEG26 main::@24
  //SEG27 [14] call render_playfield 
  //SEG28 [72] phi from main::@24 to render_playfield [phi:main::@24->render_playfield]
    jsr render_playfield
  //SEG29 main::@25
  //SEG30 [15] (byte*~) current_piece_gfx#87 ← (byte*) current_piece_gfx#10 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_87
    lda current_piece_gfx+1
    sta current_piece_gfx_87+1
  //SEG31 [16] (byte~) current_piece_color#75 ← (byte) current_piece_color#15 -- vbuz1=vbuz2 
    lda current_piece_color
    sta current_piece_color_75
  //SEG32 [17] call render_current 
  //SEG33 [52] phi from main::@25 to render_current [phi:main::@25->render_current]
  //SEG34 [52] phi (byte) current_piece_color#67 = (byte~) current_piece_color#75 [phi:main::@25->render_current#0] -- register_copy 
  //SEG35 [52] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#87 [phi:main::@25->render_current#1] -- register_copy 
  //SEG36 [52] phi (byte) current_xpos#63 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main::@25->render_current#2] -- vbuz1=vbuc1 
    lda #3
    sta current_xpos_63
  //SEG37 [52] phi (byte) current_ypos#22 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->render_current#3] -- vbuxx=vbuc1 
    ldx #0
    jsr render_current
  //SEG38 [18] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG39 [19] phi from main::@25 to main::@1 [phi:main::@25->main::@1]
  //SEG40 [19] phi (byte) current_movedown_counter#15 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG41 [19] phi (byte) keyboard_events_size#19 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#1] -- vbuz1=vbuc1 
    sta keyboard_events_size
  //SEG42 [19] phi (byte) current_piece_color#11 = (byte) current_piece_color#15 [phi:main::@25->main::@1#2] -- register_copy 
  //SEG43 [19] phi (byte) current_ypos#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#3] -- vbuz1=vbuc1 
    sta current_ypos
  //SEG44 [19] phi (byte) current_xpos#16 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main::@25->main::@1#4] -- vbuz1=vbuc1 
    lda #3
    sta current_xpos
  //SEG45 [19] phi (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#10 [phi:main::@25->main::@1#5] -- register_copy 
  //SEG46 [19] phi (byte) current_orientation#15 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@25->main::@1#6] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG47 [19] phi (byte*) current_piece#11 = (byte*~) current_piece#71 [phi:main::@25->main::@1#7] -- register_copy 
  //SEG48 main::@1
  //SEG49 main::@4
  b4:
  //SEG50 [20] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG51 main::@7
  b7:
  //SEG52 [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 254) goto main::@7 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$fe
    bne b7
  //SEG53 main::@9
  //SEG54 [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG55 [23] call keyboard_event_scan 
  //SEG56 [248] phi from main::@9 to keyboard_event_scan [phi:main::@9->keyboard_event_scan]
    jsr keyboard_event_scan
  //SEG57 [24] phi from main::@9 to main::@27 [phi:main::@9->main::@27]
  //SEG58 main::@27
  //SEG59 [25] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG60 [26] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    // (byte) keyboard_event_get::return#3 = (byte) keyboard_event_get::return#2  // register copy reg byte a
  //SEG61 main::@28
  //SEG62 [27] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuaa 
    sta key_event
  //SEG63 [28] (byte) play_move_down::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
  //SEG64 [29] call play_move_down 
    jsr play_move_down
  //SEG65 [30] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3 -- vbuaa=vbuxx 
    txa
  //SEG66 main::@29
  //SEG67 [31] (byte~) main::$10 ← (byte) play_move_down::return#0
    // (byte~) main::$10 = (byte) play_move_down::return#0  // register copy reg byte a
  //SEG68 [32] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$10 -- vbuz1=vbuc1_plus_vbuaa 
    clc
    adc #0
    sta render
  //SEG69 [33] (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
    lda key_event
  //SEG70 [34] call play_move_leftright 
    jsr play_move_leftright
  //SEG71 [35] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
    // (byte) play_move_leftright::return#0 = (byte) play_move_leftright::return#2  // register copy reg byte a
  //SEG72 main::@30
  //SEG73 [36] (byte~) main::$11 ← (byte) play_move_leftright::return#0
    // (byte~) main::$11 = (byte) play_move_leftright::return#0  // register copy reg byte a
  //SEG74 [37] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$11 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc render
    sta render
  //SEG75 [38] (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
    lda key_event
  //SEG76 [39] call play_move_rotate 
    jsr play_move_rotate
  //SEG77 [40] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
    // (byte) play_move_rotate::return#0 = (byte) play_move_rotate::return#2  // register copy reg byte a
  //SEG78 main::@31
  //SEG79 [41] (byte~) main::$12 ← (byte) play_move_rotate::return#0
    // (byte~) main::$12 = (byte) play_move_rotate::return#0  // register copy reg byte a
  //SEG80 [42] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$12 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc render
  //SEG81 [43] if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10
  //SEG82 [44] phi from main::@31 to main::@19 [phi:main::@31->main::@19]
  //SEG83 main::@19
  //SEG84 [45] call render_playfield 
  //SEG85 [72] phi from main::@19 to render_playfield [phi:main::@19->render_playfield]
    jsr render_playfield
  //SEG86 main::@32
  //SEG87 [46] (byte~) current_ypos#71 ← (byte) current_ypos#16 -- vbuxx=vbuz1 
    ldx current_ypos
  //SEG88 [47] (byte~) current_xpos#96 ← (byte) current_xpos#23 -- vbuz1=vbuz2 
    lda current_xpos
    sta current_xpos_96
  //SEG89 [48] (byte*~) current_piece_gfx#88 ← (byte*) current_piece_gfx#18 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_88
    lda current_piece_gfx+1
    sta current_piece_gfx_88+1
  //SEG90 [49] (byte~) current_piece_color#76 ← (byte) current_piece_color#13 -- vbuz1=vbuz2 
    lda current_piece_color
    sta current_piece_color_76
  //SEG91 [50] call render_current 
  //SEG92 [52] phi from main::@32 to render_current [phi:main::@32->render_current]
  //SEG93 [52] phi (byte) current_piece_color#67 = (byte~) current_piece_color#76 [phi:main::@32->render_current#0] -- register_copy 
  //SEG94 [52] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#88 [phi:main::@32->render_current#1] -- register_copy 
  //SEG95 [52] phi (byte) current_xpos#63 = (byte~) current_xpos#96 [phi:main::@32->render_current#2] -- register_copy 
  //SEG96 [52] phi (byte) current_ypos#22 = (byte~) current_ypos#71 [phi:main::@32->render_current#3] -- register_copy 
    jsr render_current
  //SEG97 main::@10
  b10:
  //SEG98 [51] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
  //SEG99 [19] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
  //SEG100 [19] phi (byte) current_movedown_counter#15 = (byte) current_movedown_counter#12 [phi:main::@10->main::@1#0] -- register_copy 
  //SEG101 [19] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@10->main::@1#1] -- register_copy 
  //SEG102 [19] phi (byte) current_piece_color#11 = (byte) current_piece_color#13 [phi:main::@10->main::@1#2] -- register_copy 
  //SEG103 [19] phi (byte) current_ypos#12 = (byte) current_ypos#16 [phi:main::@10->main::@1#3] -- register_copy 
  //SEG104 [19] phi (byte) current_xpos#16 = (byte) current_xpos#23 [phi:main::@10->main::@1#4] -- register_copy 
  //SEG105 [19] phi (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#18 [phi:main::@10->main::@1#5] -- register_copy 
  //SEG106 [19] phi (byte) current_orientation#15 = (byte) current_orientation#23 [phi:main::@10->main::@1#6] -- register_copy 
  //SEG107 [19] phi (byte*) current_piece#11 = (byte*) current_piece#13 [phi:main::@10->main::@1#7] -- register_copy 
    jmp b4
}
//SEG108 render_current
render_current: {
    .label ypos2 = 8
    .label l = 9
    .label screen_line = $16
    .label xpos = $b
    .label i = $a
  //SEG109 [53] (byte) render_current::ypos2#0 ← (byte) current_ypos#22 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta ypos2
  //SEG110 [54] phi from render_current to render_current::@1 [phi:render_current->render_current::@1]
  //SEG111 [54] phi (byte) render_current::i#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG112 [54] phi (byte) render_current::l#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#1] -- vbuz1=vbuc1 
    sta l
  //SEG113 [54] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#0 [phi:render_current->render_current::@1#2] -- register_copy 
  //SEG114 [54] phi from render_current::@2 to render_current::@1 [phi:render_current::@2->render_current::@1]
  //SEG115 [54] phi (byte) render_current::i#4 = (byte) render_current::i#8 [phi:render_current::@2->render_current::@1#0] -- register_copy 
  //SEG116 [54] phi (byte) render_current::l#3 = (byte) render_current::l#1 [phi:render_current::@2->render_current::@1#1] -- register_copy 
  //SEG117 [54] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#1 [phi:render_current::@2->render_current::@1#2] -- register_copy 
  //SEG118 render_current::@1
  b1:
  //SEG119 [55] if((byte) render_current::ypos2#2>=(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto render_current::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcs b2
  //SEG120 render_current::@6
  //SEG121 [56] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte) render_current::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    tay
    lda screen_lines,y
    sta screen_line
    lda screen_lines+1,y
    sta screen_line+1
  //SEG122 [57] (byte) render_current::xpos#0 ← (byte) current_xpos#63 -- vbuz1=vbuz2 
    lda current_xpos_63
    sta xpos
  //SEG123 [58] phi from render_current::@6 to render_current::@3 [phi:render_current::@6->render_current::@3]
  //SEG124 [58] phi (byte) render_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current::@6->render_current::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG125 [58] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#0 [phi:render_current::@6->render_current::@3#1] -- register_copy 
  //SEG126 [58] phi (byte) render_current::i#2 = (byte) render_current::i#4 [phi:render_current::@6->render_current::@3#2] -- register_copy 
  //SEG127 [58] phi from render_current::@4 to render_current::@3 [phi:render_current::@4->render_current::@3]
  //SEG128 [58] phi (byte) render_current::c#2 = (byte) render_current::c#1 [phi:render_current::@4->render_current::@3#0] -- register_copy 
  //SEG129 [58] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#1 [phi:render_current::@4->render_current::@3#1] -- register_copy 
  //SEG130 [58] phi (byte) render_current::i#2 = (byte) render_current::i#1 [phi:render_current::@4->render_current::@3#2] -- register_copy 
  //SEG131 render_current::@3
  b3:
  //SEG132 [59] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_current::i#2) -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy i
    lda (current_piece_gfx_64),y
  //SEG133 [60] (byte) render_current::i#1 ← ++ (byte) render_current::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG134 [61] if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4
  //SEG135 render_current::@7
  //SEG136 [62] if((byte) render_current::xpos#2>=(const byte) PLAYFIELD_COLS#0) goto render_current::@4 -- vbuz1_ge_vbuc1_then_la1 
    lda xpos
    cmp #PLAYFIELD_COLS
    bcs b4
  //SEG137 render_current::@8
  //SEG138 [63] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_color#67 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda current_piece_color_67
    ldy xpos
    sta (screen_line),y
  //SEG139 render_current::@4
  b4:
  //SEG140 [64] (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2 -- vbuz1=_inc_vbuz1 
    inc xpos
  //SEG141 [65] (byte) render_current::c#1 ← ++ (byte) render_current::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG142 [66] if((byte) render_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b3
  //SEG143 [67] phi from render_current::@1 render_current::@4 to render_current::@2 [phi:render_current::@1/render_current::@4->render_current::@2]
  //SEG144 [67] phi (byte) render_current::i#8 = (byte) render_current::i#4 [phi:render_current::@1/render_current::@4->render_current::@2#0] -- register_copy 
  //SEG145 render_current::@2
  b2:
  //SEG146 [68] (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG147 [69] (byte) render_current::l#1 ← ++ (byte) render_current::l#3 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG148 [70] if((byte) render_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b1
  //SEG149 render_current::@return
  //SEG150 [71] return 
    rts
}
//SEG151 render_playfield
render_playfield: {
    .label line = 5
    .label i = 7
    .label l = 4
  //SEG152 [73] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  //SEG153 [73] phi (byte) render_playfield::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG154 [73] phi (byte) render_playfield::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    sta l
  //SEG155 [73] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  //SEG156 [73] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
  //SEG157 [73] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
  //SEG158 render_playfield::@1
  b1:
  //SEG159 [74] (byte~) render_playfield::$1 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_rol_1 
    lda l
    asl
  //SEG160 [75] (byte*) render_playfield::line#0 ← *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_playfield::$1) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines,y
    sta line
    lda screen_lines+1,y
    sta line+1
  //SEG161 [76] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  //SEG162 [76] phi (byte) render_playfield::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG163 [76] phi (byte*) render_playfield::line#2 = (byte*) render_playfield::line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
  //SEG164 [76] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
  //SEG165 [76] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  //SEG166 [76] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
  //SEG167 [76] phi (byte*) render_playfield::line#2 = (byte*) render_playfield::line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
  //SEG168 [76] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
  //SEG169 render_playfield::@2
  b2:
  //SEG170 [77] *((byte*) render_playfield::line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda playfield,y
    ldy #0
    sta (line),y
  //SEG171 [78] (byte*) render_playfield::line#1 ← ++ (byte*) render_playfield::line#2 -- pbuz1=_inc_pbuz1 
    inc line
    bne !+
    inc line+1
  !:
  //SEG172 [79] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG173 [80] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG174 [81] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_COLS-1+1
    bne b2
  //SEG175 render_playfield::@3
  //SEG176 [82] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG177 [83] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES-1+1
    bne b1
  //SEG178 render_playfield::@return
  //SEG179 [84] return 
    rts
}
//SEG180 play_move_rotate
play_move_rotate: {
    .label orientation = 4
  //SEG181 [85] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_Z
    beq b1
  //SEG182 play_move_rotate::@6
  //SEG183 [86] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_X
    beq b2
  //SEG184 [87] phi from play_move_rotate::@14 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return]
  b3:
  //SEG185 [87] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#17 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
  //SEG186 [87] phi (byte) current_orientation#23 = (byte) current_orientation#18 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
  //SEG187 [87] phi (byte) play_move_rotate::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #0
  //SEG188 play_move_rotate::@return
  breturn:
  //SEG189 [88] return 
    rts
  //SEG190 play_move_rotate::@2
  b2:
  //SEG191 [89] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#18 + (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$10
    clc
    adc current_orientation
  //SEG192 [90] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuaa_band_vbuc1 
    and #$3f
    sta orientation
  //SEG193 [91] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@4 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4]
  //SEG194 [91] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4#0] -- register_copy 
  //SEG195 play_move_rotate::@4
  b4:
  //SEG196 [92] (byte) collision::xpos#3 ← (byte) current_xpos#23 -- vbuz1=vbuz2 
    lda current_xpos
    sta collision.xpos
  //SEG197 [93] (byte) collision::ypos#3 ← (byte) current_ypos#16 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG198 [94] (byte) collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuxx=vbuz1 
    ldx orientation
  //SEG199 [95] (byte*~) current_piece#75 ← (byte*) current_piece#13 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_75
    lda current_piece+1
    sta current_piece_75+1
  //SEG200 [96] call collision 
  //SEG201 [104] phi from play_move_rotate::@4 to collision [phi:play_move_rotate::@4->collision]
  //SEG202 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#3 [phi:play_move_rotate::@4->collision#0] -- register_copy 
  //SEG203 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#3 [phi:play_move_rotate::@4->collision#1] -- register_copy 
  //SEG204 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#3 [phi:play_move_rotate::@4->collision#2] -- register_copy 
  //SEG205 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#75 [phi:play_move_rotate::@4->collision#3] -- register_copy 
    jsr collision
  //SEG206 [97] (byte) collision::return#13 ← (byte) collision::return#14
    // (byte) collision::return#13 = (byte) collision::return#14  // register copy reg byte a
  //SEG207 play_move_rotate::@14
  //SEG208 [98] (byte~) play_move_rotate::$6 ← (byte) collision::return#13
    // (byte~) play_move_rotate::$6 = (byte) collision::return#13  // register copy reg byte a
  //SEG209 [99] if((byte~) play_move_rotate::$6!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne b3
  //SEG210 play_move_rotate::@11
  //SEG211 [100] (byte) current_orientation#8 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda orientation
    sta current_orientation
  //SEG212 [101] (byte*) current_piece_gfx#8 ← (byte*) current_piece#13 + (byte) current_orientation#8 -- pbuz1=pbuz2_plus_vbuz3 
    clc
    adc current_piece
    sta current_piece_gfx
    lda #0
    adc current_piece+1
    sta current_piece_gfx+1
  //SEG213 [87] phi from play_move_rotate::@11 to play_move_rotate::@return [phi:play_move_rotate::@11->play_move_rotate::@return]
  //SEG214 [87] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#8 [phi:play_move_rotate::@11->play_move_rotate::@return#0] -- register_copy 
  //SEG215 [87] phi (byte) current_orientation#23 = (byte) current_orientation#8 [phi:play_move_rotate::@11->play_move_rotate::@return#1] -- register_copy 
  //SEG216 [87] phi (byte) play_move_rotate::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_rotate::@11->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #1
    jmp breturn
  //SEG217 play_move_rotate::@1
  b1:
  //SEG218 [102] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#18 - (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuaa=vbuz1_minus_vbuc1 
    lda current_orientation
    sec
    sbc #$10
  //SEG219 [103] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuaa_band_vbuc1 
    and #$3f
    sta orientation
    jmp b4
}
//SEG220 collision
collision: {
    .label xpos = 7
    .label piece_gfx = 5
    .label ypos2 = 8
    .label playfield_line = $16
    .label i = $18
    .label col = $b
    .label l = 9
    .label i_2 = $a
    .label i_3 = $a
    .label i_11 = $a
    .label i_13 = $a
  //SEG221 [105] (byte*) collision::piece_gfx#0 ← (byte*) current_piece#15 + (byte) collision::orientation#4 -- pbuz1=pbuz1_plus_vbuxx 
    txa
    clc
    adc piece_gfx
    sta piece_gfx
    lda #0
    adc piece_gfx+1
    sta piece_gfx+1
  //SEG222 [106] (byte) collision::ypos2#0 ← (byte) collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuyy_rol_1 
    tya
    asl
    sta ypos2
  //SEG223 [107] phi from collision to collision::@1 [phi:collision->collision::@1]
  //SEG224 [107] phi (byte) collision::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:collision->collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG225 [107] phi (byte) collision::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:collision->collision::@1#1] -- vbuz1=vbuc1 
    sta i_3
  //SEG226 [107] phi (byte) collision::ypos2#2 = (byte) collision::ypos2#0 [phi:collision->collision::@1#2] -- register_copy 
  //SEG227 collision::@1
  b1:
  //SEG228 [108] (byte*) collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) collision::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG229 [109] (byte~) collision::col#9 ← (byte) collision::xpos#5 -- vbuz1=vbuz2 
    lda xpos
    sta col
  //SEG230 [110] phi from collision::@1 to collision::@2 [phi:collision::@1->collision::@2]
  //SEG231 [110] phi (byte) collision::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:collision::@1->collision::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG232 [110] phi (byte) collision::col#2 = (byte~) collision::col#9 [phi:collision::@1->collision::@2#1] -- register_copy 
  //SEG233 [110] phi (byte) collision::i#2 = (byte) collision::i#3 [phi:collision::@1->collision::@2#2] -- register_copy 
  //SEG234 collision::@2
  b2:
  //SEG235 [111] (byte) collision::i#1 ← ++ (byte) collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG236 [112] if(*((byte*) collision::piece_gfx#0 + (byte) collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (piece_gfx),y
    cmp #0
    beq b3
  //SEG237 collision::@8
  //SEG238 [113] if((byte) collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcc b4
  //SEG239 [114] phi from collision::@8 to collision::@return [phi:collision::@8->collision::@return]
  //SEG240 [114] phi (byte) collision::return#14 = (const byte) COLLISION_BOTTOM#0 [phi:collision::@8->collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_BOTTOM
  //SEG241 collision::@return
  breturn:
  //SEG242 [115] return 
    rts
  //SEG243 collision::@4
  b4:
  //SEG244 [116] (byte~) collision::$7 ← (byte) collision::col#2 & (byte/word/signed word/dword/signed dword) 128 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and col
  //SEG245 [117] if((byte~) collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG246 [114] phi from collision::@4 to collision::@return [phi:collision::@4->collision::@return]
  //SEG247 [114] phi (byte) collision::return#14 = (const byte) COLLISION_LEFT#0 [phi:collision::@4->collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_LEFT
    jmp breturn
  //SEG248 collision::@5
  b5:
  //SEG249 [118] if((byte) collision::col#2<(const byte) PLAYFIELD_COLS#0) goto collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda col
    cmp #PLAYFIELD_COLS
    bcc b6
  //SEG250 [114] phi from collision::@5 to collision::@return [phi:collision::@5->collision::@return]
  //SEG251 [114] phi (byte) collision::return#14 = (const byte) COLLISION_RIGHT#0 [phi:collision::@5->collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_RIGHT
    jmp breturn
  //SEG252 collision::@6
  b6:
  //SEG253 [119] if(*((byte*) collision::playfield_line#0 + (byte) collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy col
    lda (playfield_line),y
    cmp #0
    beq b3
  //SEG254 [114] phi from collision::@6 to collision::@return [phi:collision::@6->collision::@return]
  //SEG255 [114] phi (byte) collision::return#14 = (const byte) COLLISION_PLAYFIELD#0 [phi:collision::@6->collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_PLAYFIELD
    jmp breturn
  //SEG256 collision::@3
  b3:
  //SEG257 [120] (byte) collision::col#1 ← ++ (byte) collision::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG258 [121] (byte) collision::c#1 ← ++ (byte) collision::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG259 [122] if((byte) collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto collision::@21 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b21
  //SEG260 collision::@17
  //SEG261 [123] (byte) collision::ypos2#1 ← (byte) collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG262 [124] (byte) collision::l#1 ← ++ (byte) collision::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG263 [125] if((byte) collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto collision::@20 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b20
  //SEG264 [114] phi from collision::@17 to collision::@return [phi:collision::@17->collision::@return]
  //SEG265 [114] phi (byte) collision::return#14 = (const byte) COLLISION_NONE#0 [phi:collision::@17->collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_NONE
    jmp breturn
  //SEG266 collision::@20
  b20:
  //SEG267 [126] (byte~) collision::i#11 ← (byte) collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_11
  //SEG268 [107] phi from collision::@20 to collision::@1 [phi:collision::@20->collision::@1]
  //SEG269 [107] phi (byte) collision::l#6 = (byte) collision::l#1 [phi:collision::@20->collision::@1#0] -- register_copy 
  //SEG270 [107] phi (byte) collision::i#3 = (byte~) collision::i#11 [phi:collision::@20->collision::@1#1] -- register_copy 
  //SEG271 [107] phi (byte) collision::ypos2#2 = (byte) collision::ypos2#1 [phi:collision::@20->collision::@1#2] -- register_copy 
    jmp b1
  //SEG272 collision::@21
  b21:
  //SEG273 [127] (byte~) collision::i#13 ← (byte) collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_13
  //SEG274 [110] phi from collision::@21 to collision::@2 [phi:collision::@21->collision::@2]
  //SEG275 [110] phi (byte) collision::c#2 = (byte) collision::c#1 [phi:collision::@21->collision::@2#0] -- register_copy 
  //SEG276 [110] phi (byte) collision::col#2 = (byte) collision::col#1 [phi:collision::@21->collision::@2#1] -- register_copy 
  //SEG277 [110] phi (byte) collision::i#2 = (byte~) collision::i#13 [phi:collision::@21->collision::@2#2] -- register_copy 
    jmp b2
}
//SEG278 play_move_leftright
play_move_leftright: {
  //SEG279 [128] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_COMMA
    beq b1
  //SEG280 play_move_leftright::@6
  //SEG281 [129] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_DOT
    bne b3
  //SEG282 play_move_leftright::@7
  //SEG283 [130] (byte) collision::xpos#2 ← (byte) current_xpos#19 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy current_xpos
    iny
    sty collision.xpos
  //SEG284 [131] (byte) collision::ypos#2 ← (byte) current_ypos#16 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG285 [132] (byte) collision::orientation#2 ← (byte) current_orientation#18 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG286 [133] (byte*~) current_piece#74 ← (byte*) current_piece#13 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_74
    lda current_piece+1
    sta current_piece_74+1
  //SEG287 [134] call collision 
  //SEG288 [104] phi from play_move_leftright::@7 to collision [phi:play_move_leftright::@7->collision]
  //SEG289 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#2 [phi:play_move_leftright::@7->collision#0] -- register_copy 
  //SEG290 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#2 [phi:play_move_leftright::@7->collision#1] -- register_copy 
  //SEG291 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#2 [phi:play_move_leftright::@7->collision#2] -- register_copy 
  //SEG292 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#74 [phi:play_move_leftright::@7->collision#3] -- register_copy 
    jsr collision
  //SEG293 [135] (byte) collision::return#12 ← (byte) collision::return#14
    // (byte) collision::return#12 = (byte) collision::return#14  // register copy reg byte a
  //SEG294 play_move_leftright::@15
  //SEG295 [136] (byte~) play_move_leftright::$4 ← (byte) collision::return#12
    // (byte~) play_move_leftright::$4 = (byte) collision::return#12  // register copy reg byte a
  //SEG296 [137] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne b3
  //SEG297 play_move_leftright::@8
  //SEG298 [138] (byte) current_xpos#7 ← ++ (byte) current_xpos#19 -- vbuz1=_inc_vbuz1 
    inc current_xpos
  //SEG299 [139] phi from play_move_leftright::@11 play_move_leftright::@8 to play_move_leftright::@return [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return]
  b2:
  //SEG300 [139] phi (byte) current_xpos#23 = (byte) current_xpos#9 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#0] -- register_copy 
  //SEG301 [139] phi (byte) play_move_leftright::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #1
    jmp breturn
  //SEG302 [139] phi from play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@6 to play_move_leftright::@return [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return]
  b3:
  //SEG303 [139] phi (byte) current_xpos#23 = (byte) current_xpos#19 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#0] -- register_copy 
  //SEG304 [139] phi (byte) play_move_leftright::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #0
  //SEG305 play_move_leftright::@return
  breturn:
  //SEG306 [140] return 
    rts
  //SEG307 play_move_leftright::@1
  b1:
  //SEG308 [141] (byte) collision::xpos#1 ← (byte) current_xpos#19 - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_minus_1 
    ldx current_xpos
    dex
    stx collision.xpos
  //SEG309 [142] (byte) collision::ypos#1 ← (byte) current_ypos#16 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG310 [143] (byte) collision::orientation#1 ← (byte) current_orientation#18 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG311 [144] (byte*~) current_piece#73 ← (byte*) current_piece#13 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_73
    lda current_piece+1
    sta current_piece_73+1
  //SEG312 [145] call collision 
  //SEG313 [104] phi from play_move_leftright::@1 to collision [phi:play_move_leftright::@1->collision]
  //SEG314 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#1 [phi:play_move_leftright::@1->collision#0] -- register_copy 
  //SEG315 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#1 [phi:play_move_leftright::@1->collision#1] -- register_copy 
  //SEG316 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#1 [phi:play_move_leftright::@1->collision#2] -- register_copy 
  //SEG317 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#73 [phi:play_move_leftright::@1->collision#3] -- register_copy 
    jsr collision
  //SEG318 [146] (byte) collision::return#1 ← (byte) collision::return#14
    // (byte) collision::return#1 = (byte) collision::return#14  // register copy reg byte a
  //SEG319 play_move_leftright::@14
  //SEG320 [147] (byte~) play_move_leftright::$8 ← (byte) collision::return#1
    // (byte~) play_move_leftright::$8 = (byte) collision::return#1  // register copy reg byte a
  //SEG321 [148] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne b3
  //SEG322 play_move_leftright::@11
  //SEG323 [149] (byte) current_xpos#9 ← -- (byte) current_xpos#19 -- vbuz1=_dec_vbuz1 
    dec current_xpos
    jmp b2
}
//SEG324 play_move_down
play_move_down: {
  //SEG325 [150] (byte) current_movedown_counter#10 ← ++ (byte) current_movedown_counter#15 -- vbuz1=_inc_vbuz1 
    inc current_movedown_counter
  //SEG326 [151] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b3
  //SEG327 [152] phi from play_move_down to play_move_down::@8 [phi:play_move_down->play_move_down::@8]
  //SEG328 play_move_down::@8
  //SEG329 [153] phi from play_move_down::@8 to play_move_down::@1 [phi:play_move_down::@8->play_move_down::@1]
  //SEG330 [153] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@8->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #1
    jmp b1
  //SEG331 [153] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  b3:
  //SEG332 [153] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG333 play_move_down::@1
  b1:
  //SEG334 [154] call keyboard_event_pressed 
  //SEG335 [237] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
  //SEG336 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_SPACE#0 [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG337 [155] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#12 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
  //SEG338 play_move_down::@17
  //SEG339 [156] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
    // (byte~) play_move_down::$2 = (byte) keyboard_event_pressed::return#12  // register copy reg byte a
  //SEG340 [157] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG341 play_move_down::@9
  //SEG342 [158] if((byte) current_movedown_counter#10<(const byte) current_movedown_fast#0) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_fast
    bcc b2
  //SEG343 play_move_down::@10
  //SEG344 [159] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuxx=_inc_vbuxx 
    inx
  //SEG345 [160] phi from play_move_down::@10 play_move_down::@17 play_move_down::@9 to play_move_down::@2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2]
  //SEG346 [160] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2#0] -- register_copy 
  //SEG347 play_move_down::@2
  b2:
  //SEG348 [161] if((byte) current_movedown_counter#10<(const byte) current_movedown_slow#0) goto play_move_down::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_slow
    bcc b4
  //SEG349 play_move_down::@11
  //SEG350 [162] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuxx=_inc_vbuxx 
    inx
  //SEG351 [163] phi from play_move_down::@11 play_move_down::@2 to play_move_down::@4 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4]
  //SEG352 [163] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#3 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4#0] -- register_copy 
  //SEG353 play_move_down::@4
  b4:
  //SEG354 [164] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq b5
  //SEG355 play_move_down::@12
  //SEG356 [165] (byte) collision::ypos#0 ← (byte) current_ypos#12 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuyy=vbuz1_plus_1 
    ldy current_ypos
    iny
  //SEG357 [166] (byte) collision::xpos#0 ← (byte) current_xpos#16 -- vbuz1=vbuz2 
    lda current_xpos
    sta collision.xpos
  //SEG358 [167] (byte) collision::orientation#0 ← (byte) current_orientation#15 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG359 [168] (byte*~) current_piece#72 ← (byte*) current_piece#11 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_72
    lda current_piece+1
    sta current_piece_72+1
  //SEG360 [169] call collision 
  //SEG361 [104] phi from play_move_down::@12 to collision [phi:play_move_down::@12->collision]
  //SEG362 [104] phi (byte) collision::xpos#5 = (byte) collision::xpos#0 [phi:play_move_down::@12->collision#0] -- register_copy 
  //SEG363 [104] phi (byte) collision::ypos#4 = (byte) collision::ypos#0 [phi:play_move_down::@12->collision#1] -- register_copy 
  //SEG364 [104] phi (byte) collision::orientation#4 = (byte) collision::orientation#0 [phi:play_move_down::@12->collision#2] -- register_copy 
  //SEG365 [104] phi (byte*) current_piece#15 = (byte*~) current_piece#72 [phi:play_move_down::@12->collision#3] -- register_copy 
    jsr collision
  //SEG366 [170] (byte) collision::return#0 ← (byte) collision::return#14
    // (byte) collision::return#0 = (byte) collision::return#14  // register copy reg byte a
  //SEG367 play_move_down::@18
  //SEG368 [171] (byte~) play_move_down::$12 ← (byte) collision::return#0
    // (byte~) play_move_down::$12 = (byte) collision::return#0  // register copy reg byte a
  //SEG369 [172] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@6 -- vbuaa_eq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    beq b6
  //SEG370 [173] phi from play_move_down::@18 to play_move_down::@13 [phi:play_move_down::@18->play_move_down::@13]
  //SEG371 play_move_down::@13
  //SEG372 [174] call lock_current 
    jsr lock_current
  //SEG373 [175] phi from play_move_down::@13 to play_move_down::@19 [phi:play_move_down::@13->play_move_down::@19]
  //SEG374 play_move_down::@19
  //SEG375 [176] call remove_lines 
  //SEG376 [198] phi from play_move_down::@19 to remove_lines [phi:play_move_down::@19->remove_lines]
    jsr remove_lines
  //SEG377 [177] phi from play_move_down::@19 to play_move_down::@20 [phi:play_move_down::@19->play_move_down::@20]
  //SEG378 play_move_down::@20
  //SEG379 [178] call spawn_current 
  //SEG380 [184] phi from play_move_down::@20 to spawn_current [phi:play_move_down::@20->spawn_current]
    jsr spawn_current
  //SEG381 [179] (byte*~) current_piece#76 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG382 [180] phi from play_move_down::@20 to play_move_down::@7 [phi:play_move_down::@20->play_move_down::@7]
  //SEG383 [180] phi (byte) current_piece_color#23 = (byte) current_piece_color#15 [phi:play_move_down::@20->play_move_down::@7#0] -- register_copy 
  //SEG384 [180] phi (byte) current_xpos#36 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:play_move_down::@20->play_move_down::@7#1] -- vbuz1=vbuc1 
    lda #3
    sta current_xpos
  //SEG385 [180] phi (byte*) current_piece_gfx#29 = (byte*) current_piece_gfx#10 [phi:play_move_down::@20->play_move_down::@7#2] -- register_copy 
  //SEG386 [180] phi (byte) current_orientation#33 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@20->play_move_down::@7#3] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG387 [180] phi (byte*) current_piece#23 = (byte*~) current_piece#76 [phi:play_move_down::@20->play_move_down::@7#4] -- register_copy 
  //SEG388 [180] phi (byte) current_ypos#31 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@20->play_move_down::@7#5] -- vbuz1=vbuc1 
    sta current_ypos
  //SEG389 play_move_down::@7
  b7:
  //SEG390 [181] phi from play_move_down::@7 to play_move_down::@return [phi:play_move_down::@7->play_move_down::@return]
  //SEG391 [181] phi (byte) current_piece_color#13 = (byte) current_piece_color#23 [phi:play_move_down::@7->play_move_down::@return#0] -- register_copy 
  //SEG392 [181] phi (byte) current_xpos#19 = (byte) current_xpos#36 [phi:play_move_down::@7->play_move_down::@return#1] -- register_copy 
  //SEG393 [181] phi (byte*) current_piece_gfx#17 = (byte*) current_piece_gfx#29 [phi:play_move_down::@7->play_move_down::@return#2] -- register_copy 
  //SEG394 [181] phi (byte) current_orientation#18 = (byte) current_orientation#33 [phi:play_move_down::@7->play_move_down::@return#3] -- register_copy 
  //SEG395 [181] phi (byte*) current_piece#13 = (byte*) current_piece#23 [phi:play_move_down::@7->play_move_down::@return#4] -- register_copy 
  //SEG396 [181] phi (byte) current_ypos#16 = (byte) current_ypos#31 [phi:play_move_down::@7->play_move_down::@return#5] -- register_copy 
  //SEG397 [181] phi (byte) current_movedown_counter#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@7->play_move_down::@return#6] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG398 [181] phi (byte) play_move_down::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@7->play_move_down::@return#7] -- vbuxx=vbuc1 
    ldx #1
    jmp breturn
  //SEG399 [181] phi from play_move_down::@4 to play_move_down::@return [phi:play_move_down::@4->play_move_down::@return]
  b5:
  //SEG400 [181] phi (byte) current_piece_color#13 = (byte) current_piece_color#11 [phi:play_move_down::@4->play_move_down::@return#0] -- register_copy 
  //SEG401 [181] phi (byte) current_xpos#19 = (byte) current_xpos#16 [phi:play_move_down::@4->play_move_down::@return#1] -- register_copy 
  //SEG402 [181] phi (byte*) current_piece_gfx#17 = (byte*) current_piece_gfx#15 [phi:play_move_down::@4->play_move_down::@return#2] -- register_copy 
  //SEG403 [181] phi (byte) current_orientation#18 = (byte) current_orientation#15 [phi:play_move_down::@4->play_move_down::@return#3] -- register_copy 
  //SEG404 [181] phi (byte*) current_piece#13 = (byte*) current_piece#11 [phi:play_move_down::@4->play_move_down::@return#4] -- register_copy 
  //SEG405 [181] phi (byte) current_ypos#16 = (byte) current_ypos#12 [phi:play_move_down::@4->play_move_down::@return#5] -- register_copy 
  //SEG406 [181] phi (byte) current_movedown_counter#12 = (byte) current_movedown_counter#10 [phi:play_move_down::@4->play_move_down::@return#6] -- register_copy 
  //SEG407 [181] phi (byte) play_move_down::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@4->play_move_down::@return#7] -- vbuxx=vbuc1 
    ldx #0
  //SEG408 play_move_down::@return
  breturn:
  //SEG409 [182] return 
    rts
  //SEG410 play_move_down::@6
  b6:
  //SEG411 [183] (byte) current_ypos#4 ← ++ (byte) current_ypos#12 -- vbuz1=_inc_vbuz1 
    inc current_ypos
  //SEG412 [180] phi from play_move_down::@6 to play_move_down::@7 [phi:play_move_down::@6->play_move_down::@7]
  //SEG413 [180] phi (byte) current_piece_color#23 = (byte) current_piece_color#11 [phi:play_move_down::@6->play_move_down::@7#0] -- register_copy 
  //SEG414 [180] phi (byte) current_xpos#36 = (byte) current_xpos#16 [phi:play_move_down::@6->play_move_down::@7#1] -- register_copy 
  //SEG415 [180] phi (byte*) current_piece_gfx#29 = (byte*) current_piece_gfx#15 [phi:play_move_down::@6->play_move_down::@7#2] -- register_copy 
  //SEG416 [180] phi (byte) current_orientation#33 = (byte) current_orientation#15 [phi:play_move_down::@6->play_move_down::@7#3] -- register_copy 
  //SEG417 [180] phi (byte*) current_piece#23 = (byte*) current_piece#11 [phi:play_move_down::@6->play_move_down::@7#4] -- register_copy 
  //SEG418 [180] phi (byte) current_ypos#31 = (byte) current_ypos#4 [phi:play_move_down::@6->play_move_down::@7#5] -- register_copy 
    jmp b7
}
//SEG419 spawn_current
spawn_current: {
    .label _3 = 2
  //SEG420 [185] phi from spawn_current to spawn_current::@1 [phi:spawn_current->spawn_current::@1]
  //SEG421 [185] phi (byte) spawn_current::piece_idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 7 [phi:spawn_current->spawn_current::@1#0] -- vbuxx=vbuc1 
    ldx #7
  //SEG422 spawn_current::@1
  b1:
  //SEG423 [186] if((byte) spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto spawn_current::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #7
    beq b2
  //SEG424 spawn_current::@3
  //SEG425 [187] (byte~) spawn_current::$3 ← (byte) spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta _3
  //SEG426 [188] (byte*) current_piece_gfx#10 ← (byte*)*((const word[]) PIECES#0 + (byte~) spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuz1=pptc1_derefidx_vbuz2_plus_0 
    tay
    lda PIECES,y
    sta current_piece_gfx
    lda PIECES+1,y
    sta current_piece_gfx+1
  //SEG427 [189] (byte) current_piece_color#15 ← *((const byte[]) PIECES_COLORS#0 + (byte) spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_COLORS,x
    sta current_piece_color
  //SEG428 spawn_current::@return
  //SEG429 [190] return 
    rts
  //SEG430 [191] phi from spawn_current::@1 to spawn_current::@2 [phi:spawn_current::@1->spawn_current::@2]
  //SEG431 spawn_current::@2
  b2:
  //SEG432 [192] call sid_rnd 
    jsr sid_rnd
  //SEG433 [193] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
    // (byte) sid_rnd::return#2 = (byte) sid_rnd::return#0  // register copy reg byte a
  //SEG434 spawn_current::@7
  //SEG435 [194] (byte~) spawn_current::$1 ← (byte) sid_rnd::return#2
    // (byte~) spawn_current::$1 = (byte) sid_rnd::return#2  // register copy reg byte a
  //SEG436 [195] (byte) spawn_current::piece_idx#1 ← (byte~) spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuxx=vbuaa_band_vbuc1 
    and #7
    tax
  //SEG437 [185] phi from spawn_current::@7 to spawn_current::@1 [phi:spawn_current::@7->spawn_current::@1]
  //SEG438 [185] phi (byte) spawn_current::piece_idx#2 = (byte) spawn_current::piece_idx#1 [phi:spawn_current::@7->spawn_current::@1#0] -- register_copy 
    jmp b1
}
//SEG439 sid_rnd
sid_rnd: {
  //SEG440 [196] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuaa=_deref_pbuc1 
    lda SID_VOICE3_OSC
  //SEG441 sid_rnd::@return
  //SEG442 [197] return 
    rts
}
//SEG443 remove_lines
remove_lines: {
    .label c = 7
    .label x = 3
    .label y = 2
    .label full = 4
  //SEG444 [199] phi from remove_lines to remove_lines::@1 [phi:remove_lines->remove_lines::@1]
  //SEG445 [199] phi (byte) remove_lines::y#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:remove_lines->remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG446 [199] phi (byte) remove_lines::w#12 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:remove_lines->remove_lines::@1#1] -- vbuxx=vbuc1 
    ldx #PLAYFIELD_LINES*PLAYFIELD_COLS-1
  //SEG447 [199] phi (byte) remove_lines::r#3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:remove_lines->remove_lines::@1#2] -- vbuyy=vbuc1 
    ldy #PLAYFIELD_LINES*PLAYFIELD_COLS-1
  //SEG448 [199] phi from remove_lines::@4 to remove_lines::@1 [phi:remove_lines::@4->remove_lines::@1]
  //SEG449 [199] phi (byte) remove_lines::y#8 = (byte) remove_lines::y#1 [phi:remove_lines::@4->remove_lines::@1#0] -- register_copy 
  //SEG450 [199] phi (byte) remove_lines::w#12 = (byte) remove_lines::w#11 [phi:remove_lines::@4->remove_lines::@1#1] -- register_copy 
  //SEG451 [199] phi (byte) remove_lines::r#3 = (byte) remove_lines::r#1 [phi:remove_lines::@4->remove_lines::@1#2] -- register_copy 
  //SEG452 remove_lines::@1
  b1:
  //SEG453 [200] phi from remove_lines::@1 to remove_lines::@2 [phi:remove_lines::@1->remove_lines::@2]
  //SEG454 [200] phi (byte) remove_lines::full#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:remove_lines::@1->remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta full
  //SEG455 [200] phi (byte) remove_lines::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:remove_lines::@1->remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG456 [200] phi (byte) remove_lines::w#4 = (byte) remove_lines::w#12 [phi:remove_lines::@1->remove_lines::@2#2] -- register_copy 
  //SEG457 [200] phi (byte) remove_lines::r#2 = (byte) remove_lines::r#3 [phi:remove_lines::@1->remove_lines::@2#3] -- register_copy 
  //SEG458 [200] phi from remove_lines::@3 to remove_lines::@2 [phi:remove_lines::@3->remove_lines::@2]
  //SEG459 [200] phi (byte) remove_lines::full#4 = (byte) remove_lines::full#2 [phi:remove_lines::@3->remove_lines::@2#0] -- register_copy 
  //SEG460 [200] phi (byte) remove_lines::x#2 = (byte) remove_lines::x#1 [phi:remove_lines::@3->remove_lines::@2#1] -- register_copy 
  //SEG461 [200] phi (byte) remove_lines::w#4 = (byte) remove_lines::w#1 [phi:remove_lines::@3->remove_lines::@2#2] -- register_copy 
  //SEG462 [200] phi (byte) remove_lines::r#2 = (byte) remove_lines::r#1 [phi:remove_lines::@3->remove_lines::@2#3] -- register_copy 
  //SEG463 remove_lines::@2
  b2:
  //SEG464 [201] (byte) remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda playfield,y
    sta c
  //SEG465 [202] (byte) remove_lines::r#1 ← -- (byte) remove_lines::r#2 -- vbuyy=_dec_vbuyy 
    dey
  //SEG466 [203] if((byte) remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto remove_lines::@17 -- vbuz1_neq_0_then_la1 
    cmp #0
    bne b3
  //SEG467 [204] phi from remove_lines::@2 to remove_lines::@3 [phi:remove_lines::@2->remove_lines::@3]
  //SEG468 [204] phi (byte) remove_lines::full#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:remove_lines::@2->remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta full
  //SEG469 remove_lines::@3
  b3:
  //SEG470 [205] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::w#4) ← (byte) remove_lines::c#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda c
    sta playfield,x
  //SEG471 [206] (byte) remove_lines::w#1 ← -- (byte) remove_lines::w#4 -- vbuxx=_dec_vbuxx 
    dex
  //SEG472 [207] (byte) remove_lines::x#1 ← ++ (byte) remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG473 [208] if((byte) remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #PLAYFIELD_COLS-1+1
    bne b2
  //SEG474 remove_lines::@9
  //SEG475 [209] if((byte) remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda full
    cmp #1
    bne b4
  //SEG476 remove_lines::@10
  //SEG477 [210] (byte) remove_lines::w#2 ← (byte) remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    clc
    adc #PLAYFIELD_COLS
    tax
  //SEG478 [211] phi from remove_lines::@10 remove_lines::@9 to remove_lines::@4 [phi:remove_lines::@10/remove_lines::@9->remove_lines::@4]
  //SEG479 [211] phi (byte) remove_lines::w#11 = (byte) remove_lines::w#2 [phi:remove_lines::@10/remove_lines::@9->remove_lines::@4#0] -- register_copy 
  //SEG480 remove_lines::@4
  b4:
  //SEG481 [212] (byte) remove_lines::y#1 ← ++ (byte) remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG482 [213] if((byte) remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #PLAYFIELD_LINES-1+1
    bne b1
  //SEG483 [214] phi from remove_lines::@4 remove_lines::@6 to remove_lines::@5 [phi:remove_lines::@4/remove_lines::@6->remove_lines::@5]
  //SEG484 [214] phi (byte) remove_lines::w#6 = (byte) remove_lines::w#11 [phi:remove_lines::@4/remove_lines::@6->remove_lines::@5#0] -- register_copy 
  //SEG485 remove_lines::@5
  b5:
  //SEG486 [215] if((byte) remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto remove_lines::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne b6
  //SEG487 remove_lines::@return
  //SEG488 [216] return 
    rts
  //SEG489 remove_lines::@6
  b6:
  //SEG490 [217] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta playfield,x
  //SEG491 [218] (byte) remove_lines::w#3 ← -- (byte) remove_lines::w#6 -- vbuxx=_dec_vbuxx 
    dex
    jmp b5
  //SEG492 [219] phi from remove_lines::@2 to remove_lines::@17 [phi:remove_lines::@2->remove_lines::@17]
  //SEG493 remove_lines::@17
  //SEG494 [204] phi from remove_lines::@17 to remove_lines::@3 [phi:remove_lines::@17->remove_lines::@3]
  //SEG495 [204] phi (byte) remove_lines::full#2 = (byte) remove_lines::full#4 [phi:remove_lines::@17->remove_lines::@3#0] -- register_copy 
}
//SEG496 lock_current
lock_current: {
    .label ypos2 = 2
    .label playfield_line = 5
    .label col = 7
    .label i = 8
    .label l = 3
    .label i_2 = 4
    .label i_3 = 4
    .label i_7 = 4
    .label i_9 = 4
  //SEG497 [220] (byte) lock_current::ypos2#0 ← (byte) current_ypos#12 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl ypos2
  //SEG498 [221] phi from lock_current to lock_current::@1 [phi:lock_current->lock_current::@1]
  //SEG499 [221] phi (byte) lock_current::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lock_current->lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG500 [221] phi (byte) lock_current::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lock_current->lock_current::@1#1] -- vbuz1=vbuc1 
    sta i_3
  //SEG501 [221] phi (byte) lock_current::ypos2#2 = (byte) lock_current::ypos2#0 [phi:lock_current->lock_current::@1#2] -- register_copy 
  //SEG502 lock_current::@1
  b1:
  //SEG503 [222] (byte*) lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) lock_current::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG504 [223] (byte) lock_current::col#0 ← (byte) current_xpos#16 -- vbuz1=vbuz2 
    lda current_xpos
    sta col
  //SEG505 [224] phi from lock_current::@1 to lock_current::@2 [phi:lock_current::@1->lock_current::@2]
  //SEG506 [224] phi (byte) lock_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:lock_current::@1->lock_current::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG507 [224] phi (byte) lock_current::col#2 = (byte) lock_current::col#0 [phi:lock_current::@1->lock_current::@2#1] -- register_copy 
  //SEG508 [224] phi (byte) lock_current::i#2 = (byte) lock_current::i#3 [phi:lock_current::@1->lock_current::@2#2] -- register_copy 
  //SEG509 lock_current::@2
  b2:
  //SEG510 [225] (byte) lock_current::i#1 ← ++ (byte) lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG511 [226] if(*((byte*) current_piece_gfx#15 + (byte) lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (current_piece_gfx),y
    cmp #0
    beq b3
  //SEG512 lock_current::@4
  //SEG513 [227] *((byte*) lock_current::playfield_line#0 + (byte) lock_current::col#2) ← (byte) current_piece_color#11 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda current_piece_color
    ldy col
    sta (playfield_line),y
  //SEG514 lock_current::@3
  b3:
  //SEG515 [228] (byte) lock_current::col#1 ← ++ (byte) lock_current::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG516 [229] (byte) lock_current::c#1 ← ++ (byte) lock_current::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG517 [230] if((byte) lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto lock_current::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b8
  //SEG518 lock_current::@5
  //SEG519 [231] (byte) lock_current::ypos2#1 ← (byte) lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG520 [232] (byte) lock_current::l#1 ← ++ (byte) lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG521 [233] if((byte) lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto lock_current::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b7
  //SEG522 lock_current::@return
  //SEG523 [234] return 
    rts
  //SEG524 lock_current::@7
  b7:
  //SEG525 [235] (byte~) lock_current::i#7 ← (byte) lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_7
  //SEG526 [221] phi from lock_current::@7 to lock_current::@1 [phi:lock_current::@7->lock_current::@1]
  //SEG527 [221] phi (byte) lock_current::l#6 = (byte) lock_current::l#1 [phi:lock_current::@7->lock_current::@1#0] -- register_copy 
  //SEG528 [221] phi (byte) lock_current::i#3 = (byte~) lock_current::i#7 [phi:lock_current::@7->lock_current::@1#1] -- register_copy 
  //SEG529 [221] phi (byte) lock_current::ypos2#2 = (byte) lock_current::ypos2#1 [phi:lock_current::@7->lock_current::@1#2] -- register_copy 
    jmp b1
  //SEG530 lock_current::@8
  b8:
  //SEG531 [236] (byte~) lock_current::i#9 ← (byte) lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_9
  //SEG532 [224] phi from lock_current::@8 to lock_current::@2 [phi:lock_current::@8->lock_current::@2]
  //SEG533 [224] phi (byte) lock_current::c#2 = (byte) lock_current::c#1 [phi:lock_current::@8->lock_current::@2#0] -- register_copy 
  //SEG534 [224] phi (byte) lock_current::col#2 = (byte) lock_current::col#1 [phi:lock_current::@8->lock_current::@2#1] -- register_copy 
  //SEG535 [224] phi (byte) lock_current::i#2 = (byte~) lock_current::i#9 [phi:lock_current::@8->lock_current::@2#2] -- register_copy 
    jmp b2
}
//SEG536 keyboard_event_pressed
keyboard_event_pressed: {
    .label row_bits = 7
    .label keycode = 4
  //SEG537 [238] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuz1_ror_3 
    lda keycode
    lsr
    lsr
    lsr
  //SEG538 [239] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta row_bits
  //SEG539 [240] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and keycode
  //SEG540 [241] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and row_bits
  //SEG541 keyboard_event_pressed::@return
  //SEG542 [242] return 
    rts
}
//SEG543 keyboard_event_get
keyboard_event_get: {
  //SEG544 [243] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda keyboard_events_size
    cmp #0
    beq b1
  //SEG545 keyboard_event_get::@3
  //SEG546 [244] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec keyboard_events_size
  //SEG547 [245] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy keyboard_events_size
    lda keyboard_events,y
  //SEG548 [246] phi from keyboard_event_get::@3 to keyboard_event_get::@return [phi:keyboard_event_get::@3->keyboard_event_get::@return]
  //SEG549 [246] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@3->keyboard_event_get::@return#0] -- register_copy 
  //SEG550 [246] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@3->keyboard_event_get::@return#1] -- register_copy 
    jmp breturn
  //SEG551 [246] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  b1:
  //SEG552 [246] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
  //SEG553 [246] phi (byte) keyboard_event_get::return#2 = (byte/word/signed word/dword/signed dword) 255 [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
  //SEG554 keyboard_event_get::@return
  breturn:
  //SEG555 [247] return 
    rts
}
//SEG556 keyboard_event_scan
keyboard_event_scan: {
    .label row_scan = 8
    .label keycode = 7
    .label row = 4
  //SEG557 [249] phi from keyboard_event_scan to keyboard_event_scan::@1 [phi:keyboard_event_scan->keyboard_event_scan::@1]
  //SEG558 [249] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@1#0] -- register_copy 
  //SEG559 [249] phi (byte) keyboard_event_scan::keycode#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keycode
  //SEG560 [249] phi (byte) keyboard_event_scan::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#2] -- vbuz1=vbuc1 
    sta row
  //SEG561 [249] phi from keyboard_event_scan::@3 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1]
  //SEG562 [249] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#0] -- register_copy 
  //SEG563 [249] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#1] -- register_copy 
  //SEG564 [249] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#2] -- register_copy 
  //SEG565 keyboard_event_scan::@1
  b1:
  //SEG566 [250] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx row
  //SEG567 [251] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG568 [252] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    // (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#0  // register copy reg byte a
  //SEG569 keyboard_event_scan::@25
  //SEG570 [253] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta row_scan
  //SEG571 [254] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    ldy row
    cmp keyboard_scan_values,y
    bne b2
  //SEG572 keyboard_event_scan::@13
  //SEG573 [255] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lda #8
    clc
    adc keycode
    sta keycode
  //SEG574 [256] phi from keyboard_event_scan::@13 keyboard_event_scan::@19 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3]
  //SEG575 [256] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#0] -- register_copy 
  //SEG576 [256] phi (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#1 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#1] -- register_copy 
  //SEG577 keyboard_event_scan::@3
  b3:
  //SEG578 [257] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG579 [258] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda row
    cmp #8
    bne b1
  //SEG580 [259] phi from keyboard_event_scan::@3 to keyboard_event_scan::@20 [phi:keyboard_event_scan::@3->keyboard_event_scan::@20]
  //SEG581 keyboard_event_scan::@20
  //SEG582 [260] call keyboard_event_pressed 
  //SEG583 [237] phi from keyboard_event_scan::@20 to keyboard_event_pressed [phi:keyboard_event_scan::@20->keyboard_event_pressed]
  //SEG584 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@20->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG585 [261] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#0 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
  //SEG586 keyboard_event_scan::@26
  //SEG587 [262] (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#0
    // (byte~) keyboard_event_scan::$14 = (byte) keyboard_event_pressed::return#0  // register copy reg byte a
  //SEG588 [263] if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
  //SEG589 [264] phi from keyboard_event_scan::@26 to keyboard_event_scan::@21 [phi:keyboard_event_scan::@26->keyboard_event_scan::@21]
  //SEG590 keyboard_event_scan::@21
  //SEG591 [265] phi from keyboard_event_scan::@21 keyboard_event_scan::@26 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@21/keyboard_event_scan::@26->keyboard_event_scan::@9]
  //SEG592 keyboard_event_scan::@9
  //SEG593 [266] call keyboard_event_pressed 
  //SEG594 [237] phi from keyboard_event_scan::@9 to keyboard_event_pressed [phi:keyboard_event_scan::@9->keyboard_event_pressed]
  //SEG595 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@9->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG596 [267] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#1 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
  //SEG597 keyboard_event_scan::@27
  //SEG598 [268] (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#1
    // (byte~) keyboard_event_scan::$18 = (byte) keyboard_event_pressed::return#1  // register copy reg byte a
  //SEG599 [269] if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
  //SEG600 [270] phi from keyboard_event_scan::@27 to keyboard_event_scan::@22 [phi:keyboard_event_scan::@27->keyboard_event_scan::@22]
  //SEG601 keyboard_event_scan::@22
  //SEG602 [271] phi from keyboard_event_scan::@22 keyboard_event_scan::@27 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@22/keyboard_event_scan::@27->keyboard_event_scan::@10]
  //SEG603 keyboard_event_scan::@10
  //SEG604 [272] call keyboard_event_pressed 
  //SEG605 [237] phi from keyboard_event_scan::@10 to keyboard_event_pressed [phi:keyboard_event_scan::@10->keyboard_event_pressed]
  //SEG606 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@10->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG607 [273] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#2 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
  //SEG608 keyboard_event_scan::@28
  //SEG609 [274] (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#2
    // (byte~) keyboard_event_scan::$22 = (byte) keyboard_event_pressed::return#2  // register copy reg byte a
  //SEG610 [275] if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
  //SEG611 [276] phi from keyboard_event_scan::@28 to keyboard_event_scan::@23 [phi:keyboard_event_scan::@28->keyboard_event_scan::@23]
  //SEG612 keyboard_event_scan::@23
  //SEG613 [277] phi from keyboard_event_scan::@23 keyboard_event_scan::@28 to keyboard_event_scan::@11 [phi:keyboard_event_scan::@23/keyboard_event_scan::@28->keyboard_event_scan::@11]
  //SEG614 keyboard_event_scan::@11
  //SEG615 [278] call keyboard_event_pressed 
  //SEG616 [237] phi from keyboard_event_scan::@11 to keyboard_event_pressed [phi:keyboard_event_scan::@11->keyboard_event_pressed]
  //SEG617 [237] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@11->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG618 [279] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#10 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
  //SEG619 keyboard_event_scan::@29
  //SEG620 [280] (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10
    // (byte~) keyboard_event_scan::$26 = (byte) keyboard_event_pressed::return#10  // register copy reg byte a
  //SEG621 [281] if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
  //SEG622 [282] phi from keyboard_event_scan::@29 to keyboard_event_scan::@24 [phi:keyboard_event_scan::@29->keyboard_event_scan::@24]
  //SEG623 keyboard_event_scan::@24
  //SEG624 keyboard_event_scan::@return
  //SEG625 [283] return 
    rts
  //SEG626 [284] phi from keyboard_event_scan::@25 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4]
  b2:
  //SEG627 [284] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#0] -- register_copy 
  //SEG628 [284] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#1] -- register_copy 
  //SEG629 [284] phi (byte) keyboard_event_scan::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG630 [284] phi from keyboard_event_scan::@5 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4]
  //SEG631 [284] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#0] -- register_copy 
  //SEG632 [284] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#1] -- register_copy 
  //SEG633 [284] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#2] -- register_copy 
  //SEG634 keyboard_event_scan::@4
  b4:
  //SEG635 [285] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda row_scan
    ldy row
    eor keyboard_scan_values,y
  //SEG636 [286] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
  //SEG637 [287] if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG638 keyboard_event_scan::@15
  //SEG639 [288] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda keyboard_events_size
    cmp #8
    beq b5
  //SEG640 keyboard_event_scan::@16
  //SEG641 [289] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and row_scan
  //SEG642 [290] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b7
  //SEG643 keyboard_event_scan::@17
  //SEG644 [291] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda keycode
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG645 [292] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
  //SEG646 [293] phi from keyboard_event_scan::@15 keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@7 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5]
  //SEG647 [293] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#10 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5#0] -- register_copy 
  //SEG648 keyboard_event_scan::@5
  b5:
  //SEG649 [294] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc keycode
  //SEG650 [295] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG651 [296] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b4
  //SEG652 keyboard_event_scan::@19
  //SEG653 [297] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda row_scan
    ldy row
    sta keyboard_scan_values,y
    jmp b3
  //SEG654 keyboard_event_scan::@7
  b7:
  //SEG655 [298] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora keycode
  //SEG656 [299] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$11 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG657 [300] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
    jmp b5
}
//SEG658 keyboard_matrix_read
keyboard_matrix_read: {
  //SEG659 [301] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
  //SEG660 [302] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
  //SEG661 keyboard_matrix_read::@return
  //SEG662 [303] return 
    rts
}
//SEG663 tables_init
tables_init: {
    .label pli = 5
    .label idx = 2
  //SEG664 [305] phi from tables_init to tables_init::@1 [phi:tables_init->tables_init::@1]
  //SEG665 [305] phi (byte) tables_init::idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:tables_init->tables_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta idx
  //SEG666 [305] phi (byte*) tables_init::pli#2 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 [phi:tables_init->tables_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta pli
    lda #>playfield
    sta pli+1
  //SEG667 [305] phi (byte) tables_init::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:tables_init->tables_init::@1#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG668 [305] phi from tables_init::@1 to tables_init::@1 [phi:tables_init::@1->tables_init::@1]
  //SEG669 [305] phi (byte) tables_init::idx#2 = (byte) tables_init::idx#1 [phi:tables_init::@1->tables_init::@1#0] -- register_copy 
  //SEG670 [305] phi (byte*) tables_init::pli#2 = (byte*) tables_init::pli#1 [phi:tables_init::@1->tables_init::@1#1] -- register_copy 
  //SEG671 [305] phi (byte) tables_init::j#2 = (byte) tables_init::j#1 [phi:tables_init::@1->tables_init::@1#2] -- register_copy 
  //SEG672 tables_init::@1
  b1:
  //SEG673 [306] (byte~) tables_init::$1 ← (byte) tables_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG674 [307] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) tables_init::$1) ← (byte*) tables_init::pli#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda pli
    sta playfield_lines,y
    lda pli+1
    sta playfield_lines+1,y
  //SEG675 [308] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) tables_init::j#2) ← (byte) tables_init::idx#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda idx
    sta playfield_lines_idx,x
  //SEG676 [309] (byte*) tables_init::pli#1 ← (byte*) tables_init::pli#2 + (const byte) PLAYFIELD_COLS#0 -- pbuz1=pbuz1_plus_vbuc1 
    lda pli
    clc
    adc #PLAYFIELD_COLS
    sta pli
    bcc !+
    inc pli+1
  !:
  //SEG677 [310] (byte) tables_init::idx#1 ← (byte) tables_init::idx#2 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc idx
    sta idx
  //SEG678 [311] (byte) tables_init::j#1 ← ++ (byte) tables_init::j#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG679 [312] if((byte) tables_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto tables_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_LINES-1+1
    bne b1
  //SEG680 tables_init::@2
  //SEG681 [313] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
  //SEG682 tables_init::@return
  //SEG683 [314] return 
    rts
}
//SEG684 render_init
render_init: {
    .label _10 = $c
    .label li = 5
    .label line = 5
    .label l = 2
  //SEG685 [316] call fill 
  //SEG686 [335] phi from render_init to fill [phi:render_init->fill]
  //SEG687 [335] phi (byte) fill::val#3 = (byte/word/signed word/dword/signed dword) 160 [phi:render_init->fill#0] -- vbuxx=vbuc1 
    ldx #$a0
  //SEG688 [335] phi (byte*) fill::addr#0 = (const byte*) SCREEN#0 [phi:render_init->fill#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta fill.addr
    lda #>SCREEN
    sta fill.addr+1
    jsr fill
  //SEG689 [317] phi from render_init to render_init::@7 [phi:render_init->render_init::@7]
  //SEG690 render_init::@7
  //SEG691 [318] call fill 
  //SEG692 [335] phi from render_init::@7 to fill [phi:render_init::@7->fill]
  //SEG693 [335] phi (byte) fill::val#3 = (const byte) BLACK#0 [phi:render_init::@7->fill#0] -- vbuxx=vbuc1 
    ldx #BLACK
  //SEG694 [335] phi (byte*) fill::addr#0 = (const byte*) COLS#0 [phi:render_init::@7->fill#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta fill.addr
    lda #>COLS
    sta fill.addr+1
    jsr fill
  //SEG695 [319] phi from render_init::@7 to render_init::@1 [phi:render_init::@7->render_init::@1]
  //SEG696 [319] phi (byte*) render_init::li#2 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15 [phi:render_init::@7->render_init::@1#0] -- pbuz1=pbuc1 
    lda #<COLS+$28+$f
    sta li
    lda #>COLS+$28+$f
    sta li+1
  //SEG697 [319] phi (byte) render_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@7->render_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG698 [319] phi from render_init::@1 to render_init::@1 [phi:render_init::@1->render_init::@1]
  //SEG699 [319] phi (byte*) render_init::li#2 = (byte*) render_init::li#1 [phi:render_init::@1->render_init::@1#0] -- register_copy 
  //SEG700 [319] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@1->render_init::@1#1] -- register_copy 
  //SEG701 render_init::@1
  b1:
  //SEG702 [320] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG703 [321] *((const byte*[PLAYFIELD_LINES#0+3]) screen_lines#0 + (byte~) render_init::$5) ← (byte*) render_init::li#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda li
    sta screen_lines,y
    lda li+1
    sta screen_lines+1,y
  //SEG704 [322] (byte*) render_init::li#1 ← (byte*) render_init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li
    clc
    adc #$28
    sta li
    bcc !+
    inc li+1
  !:
  //SEG705 [323] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG706 [324] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_LINES+2+1
    bne b1
  //SEG707 [325] phi from render_init::@1 to render_init::@2 [phi:render_init::@1->render_init::@2]
  //SEG708 [325] phi (byte) render_init::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@1->render_init::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG709 [325] phi (byte*) render_init::line#4 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14 [phi:render_init::@1->render_init::@2#1] -- pbuz1=pbuc1 
    lda #<COLS+$e
    sta line
    lda #>COLS+$e
    sta line+1
  //SEG710 [325] phi from render_init::@5 to render_init::@2 [phi:render_init::@5->render_init::@2]
  //SEG711 [325] phi (byte) render_init::l#4 = (byte) render_init::l#1 [phi:render_init::@5->render_init::@2#0] -- register_copy 
  //SEG712 [325] phi (byte*) render_init::line#4 = (byte*) render_init::line#1 [phi:render_init::@5->render_init::@2#1] -- register_copy 
  //SEG713 render_init::@2
  b2:
  //SEG714 [326] phi from render_init::@2 to render_init::@3 [phi:render_init::@2->render_init::@3]
  //SEG715 [326] phi (byte) render_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@2->render_init::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG716 [326] phi from render_init::@3 to render_init::@3 [phi:render_init::@3->render_init::@3]
  //SEG717 [326] phi (byte) render_init::c#2 = (byte) render_init::c#1 [phi:render_init::@3->render_init::@3#0] -- register_copy 
  //SEG718 render_init::@3
  b3:
  //SEG719 [327] (byte*~) render_init::$10 ← (byte*) render_init::line#4 + (byte) render_init::c#2 -- pbuz1=pbuz2_plus_vbuxx 
    txa
    clc
    adc line
    sta _10
    lda #0
    adc line+1
    sta _10+1
  //SEG720 [328] *((byte*~) render_init::$10) ← (const byte) DARK_GREY#0 -- _deref_pbuz1=vbuc1 
    lda #DARK_GREY
    ldy #0
    sta (_10),y
  //SEG721 [329] (byte) render_init::c#1 ← ++ (byte) render_init::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG722 [330] if((byte) render_init::c#1!=(const byte) PLAYFIELD_COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_COLS+1+1
    bne b3
  //SEG723 render_init::@5
  //SEG724 [331] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG725 [332] (byte) render_init::l#1 ← ++ (byte) render_init::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG726 [333] if((byte) render_init::l#1!=(const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES+1+1
    bne b2
  //SEG727 render_init::@return
  //SEG728 [334] return 
    rts
}
//SEG729 fill
fill: {
    .label end = $c
    .label addr = 5
  //SEG730 [336] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000 -- pbuz1=pbuz2_plus_vwuc1 
    lda addr
    clc
    adc #<$3e8
    sta end
    lda addr+1
    adc #>$3e8
    sta end+1
  //SEG731 [337] phi from fill fill::@1 to fill::@1 [phi:fill/fill::@1->fill::@1]
  //SEG732 [337] phi (byte*) fill::addr#2 = (byte*) fill::addr#0 [phi:fill/fill::@1->fill::@1#0] -- register_copy 
  //SEG733 fill::@1
  b1:
  //SEG734 [338] *((byte*) fill::addr#2) ← (byte) fill::val#3 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (addr),y
  //SEG735 [339] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG736 [340] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuz2_then_la1 
    lda addr+1
    cmp end+1
    bne b1
    lda addr
    cmp end
    bne b1
  //SEG737 fill::@return
  //SEG738 [341] return 
    rts
}
//SEG739 sid_rnd_init
sid_rnd_init: {
  //SEG740 [342] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535 -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG741 [343] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
  //SEG742 sid_rnd_init::@return
  //SEG743 [344] return 
    rts
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  keyboard_events: .fill 8, 0
  keyboard_scan_values: .fill 8, 0
  .align $40
  PIECE_T: .byte 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  .align $40
  PIECE_J: .byte 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_O: .byte 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  PIECES_COLORS: .byte WHITE, LIGHT_GREY, GREEN, LIGHT_GREY, WHITE, WHITE, GREEN
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
  screen_lines: .fill 2*(PLAYFIELD_LINES+3), 0
.pc = CHARSET "Inline"
  .var charset = LoadPicture("charset.png", List().add($000000, $ffffff, $523fa0, $77c1c9))
    .for (var c=0; c<16; c++)
        .for (var y=0;y<8; y++)
            .byte charset.getMulticolorByte(c,y)


