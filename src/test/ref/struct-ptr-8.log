Fixing pointer array-indexing *((struct Point[2]) points + (byte) main::i)
Fixing pointer array-indexing *((struct Point[2]) points + (byte) main::i)
Fixing pointer array-indexing *((struct Point[2]) points + (byte) main::i1)
Fixing pointer array-indexing *((struct Point[2]) points + (byte) main::i1)
Rewriting struct pointer member access *((struct Point[2]) points + (byte~) main::$4).x
Rewriting struct pointer member access *((struct Point[2]) points + (byte~) main::$5).y
Rewriting struct pointer member access *((struct Point[2]) points + (byte~) main::$6).x
Rewriting struct pointer member access *((struct Point[2]) points + (byte~) main::$7).y
Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (struct Point[2]) points#0 ← { fill( 2, 0) }
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (number~) main::$0 ← (number) 2 + (byte) main::i#2
  (byte~) main::$4 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
  (byte*) main::$8 ← (byte*)(struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
  *((byte*) main::$8 + (byte~) main::$4) ← (number~) main::$0
  (number~) main::$1 ← (number) 3 + (byte) main::i#2
  (byte~) main::$5 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
  (byte*) main::$9 ← (byte*)(struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
  *((byte*) main::$9 + (byte~) main::$5) ← (number~) main::$1
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,1)
  (bool~) main::$2 ← (byte) main::i#1 != rangelast(0,1)
  if((bool~) main::$2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  (byte) main::idx#0 ← (number) 0
  (byte) main::i1#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::idx#4 ← phi( main::@2/(byte) main::idx#0 main::@3/(byte) main::idx#3 )
  (byte) main::i1#2 ← phi( main::@2/(byte) main::i1#0 main::@3/(byte) main::i1#1 )
  (byte~) main::$6 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
  (byte*) main::$10 ← (byte*)(struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
  *((byte*) main::SCREEN#0 + (byte) main::idx#4) ← *((byte*) main::$10 + (byte~) main::$6)
  (byte) main::idx#1 ← ++ (byte) main::idx#4
  (byte~) main::$7 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
  (byte*) main::$11 ← (byte*)(struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
  *((byte*) main::SCREEN#0 + (byte) main::idx#1) ← *((byte*) main::$11 + (byte~) main::$7)
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  *((byte*) main::SCREEN#0 + (byte) main::idx#2) ← (byte) ' '
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  (byte) main::i1#1 ← (byte) main::i1#2 + rangenext(0,1)
  (bool~) main::$3 ← (byte) main::i1#1 != rangelast(0,1)
  if((bool~) main::$3) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(void()) main()
(number~) main::$0
(number~) main::$1
(byte*) main::$10
(byte*) main::$11
(bool~) main::$2
(bool~) main::$3
(byte~) main::$4
(byte~) main::$5
(byte~) main::$6
(byte~) main::$7
(byte*) main::$8
(byte*) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i1
(byte) main::i1#0
(byte) main::i1#1
(byte) main::i1#2
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(struct Point[2]) points
(struct Point[2]) points#0

Adding number conversion cast (unumber) 2 in (number~) main::$0 ← (number) 2 + (byte) main::i#2
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (unumber)(number) 2 + (byte) main::i#2
Adding number conversion cast (unumber) 3 in (number~) main::$1 ← (number) 3 + (byte) main::i#2
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) 3 + (byte) main::i#2
Adding number conversion cast (unumber) 0 in (byte) main::idx#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Inlining cast (byte) main::idx#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) 2 + (byte) main::i#2
Inferred type updated to byte in (unumber~) main::$1 ← (byte) 3 + (byte) main::i#2
Identified duplicate assignment right side [8] (byte~) main::$5 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
Identified duplicate assignment right side [22] (byte~) main::$7 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) main::$2 [13] if((byte) main::i#1!=rangelast(0,1)) goto main::@1
Simple Condition (bool~) main::$3 [30] if((byte) main::i1#1!=rangelast(0,1)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (struct Point[2]) points#0 ← { fill( 2, 0) }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const struct Point[2]) points#0 = { fill( 2, 0) }
Constant (const byte) main::i#0 = 0
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Constant (const byte) main::idx#0 = 0
Constant (const byte) main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)points#0 in [5] (byte*) main::$8 ← (byte*)(const struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
Constant value identified (byte*)points#0 in [9] (byte*) main::$9 ← (byte*)(const struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
Constant value identified (byte*)points#0 in [19] (byte*) main::$10 ← (byte*)(const struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
Constant value identified (byte*)points#0 in [23] (byte*) main::$11 ← (byte*)(const struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [11] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [13] if(main::i#1!=rangelast(0,1)) goto main::@1 to (number) 2
Resolved ranged next value [28] main::i1#1 ← ++ main::i1#2 to ++
Resolved ranged comparison value [30] if(main::i1#1!=rangelast(0,1)) goto main::@3 to (number) 2
Simplifying expression containing zero (byte*)points#0 in [5] (byte*) main::$8 ← (byte*)(const struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero (byte*)points#0 in [19] (byte*) main::$10 ← (byte*)(const struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 2 in if((byte) main::i#1!=(number) 2) goto main::@1
Adding number conversion cast (unumber) 2 in if((byte) main::i1#1!=(number) 2) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte~) main::$5 = (byte~) main::$4 
Alias (byte~) main::$7 = (byte~) main::$6 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [7] (byte*) main::$9 ← (byte*)(const struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
Constant right-side identified [17] (byte*) main::$11 ← (byte*)(const struct Point[2]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$8 = (byte*)points#0
Constant (const byte*) main::$9 = (byte*)points#0+OFFSET_STRUCT_POINT_Y
Constant (const byte*) main::$10 = (byte*)points#0
Constant (const byte*) main::$11 = (byte*)points#0+OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [2] (byte~) main::$5 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
Rewriting multiplication to use shift [9] (byte~) main::$7 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::idx#0
Inlining constant with var siblings (const byte) main::i1#0
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::i1#0 = (byte) 0
Constant inlined main::$9 = (byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y
Constant inlined main::$10 = (byte*)(const struct Point[2]) points#0
Constant inlined main::$8 = (byte*)(const struct Point[2]) points#0
Constant inlined main::$11 = (byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@5(between main::@1 and main::@1)
Added new block during phi lifting main::@6(between main::@3 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [26] main::i1#3 ← main::i1#1
Coalesced [27] main::idx#5 ← main::idx#3
Coalesced [28] main::i#3 ← main::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@5
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2
  [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1
  [8] *((byte*)(const struct Point[2]) points#0 + (byte~) main::$5) ← (byte~) main::$0
  [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2
  [10] *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5) ← (byte~) main::$1
  [11] (byte) main::i#1 ← ++ (byte) main::i#2
  [12] if((byte) main::i#1!=(byte) 2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [13] (byte) main::idx#4 ← phi( main::@1/(byte) 0 main::@2/(byte) main::idx#3 )
  [13] (byte) main::i1#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::i1#1 )
  [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1
  [15] *((const byte*) main::SCREEN#0 + (byte) main::idx#4) ← *((byte*)(const struct Point[2]) points#0 + (byte~) main::$7)
  [16] (byte) main::idx#1 ← ++ (byte) main::idx#4
  [17] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7)
  [18] (byte) main::idx#2 ← ++ (byte) main::idx#1
  [19] *((const byte*) main::SCREEN#0 + (byte) main::idx#2) ← (byte) ' '
  [20] (byte) main::idx#3 ← ++ (byte) main::idx#2
  [21] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [22] if((byte) main::i1#1!=(byte) 2) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [23] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()
(byte~) main::$0 11.0
(byte~) main::$1 22.0
(byte~) main::$5 11.0
(byte~) main::$7 11.0
(byte*) main::SCREEN
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 9.166666666666666
(byte) main::i1
(byte) main::i1#1 16.5
(byte) main::i1#2 4.125
(byte) main::idx
(byte) main::idx#1 16.5
(byte) main::idx#2 16.5
(byte) main::idx#3 7.333333333333333
(byte) main::idx#4 11.0
(struct Point[2]) points

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::idx#4 main::idx#3 ]
Added variable main::$0 to zero page equivalence class [ main::$0 ]
Added variable main::$5 to zero page equivalence class [ main::$5 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable main::$7 to zero page equivalence class [ main::$7 ]
Added variable main::idx#1 to zero page equivalence class [ main::idx#1 ]
Added variable main::idx#2 to zero page equivalence class [ main::idx#2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::idx#4 main::idx#3 ]
[ main::$0 ]
[ main::$5 ]
[ main::$1 ]
[ main::$7 ]
[ main::idx#1 ]
[ main::idx#2 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ]
Allocated zp ZP_BYTE:4 [ main::idx#4 main::idx#3 ]
Allocated zp ZP_BYTE:5 [ main::$0 ]
Allocated zp ZP_BYTE:6 [ main::$5 ]
Allocated zp ZP_BYTE:7 [ main::$1 ]
Allocated zp ZP_BYTE:8 [ main::$7 ]
Allocated zp ZP_BYTE:9 [ main::idx#1 ]
Allocated zp ZP_BYTE:10 [ main::idx#2 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
// Minimal struct -  variable array access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label _0 = 5
    .label _1 = 7
    .label _5 = 6
    .label _7 = 8
    .label i = 2
    .label idx = 9
    .label idx_2 = $a
    .label idx_3 = 4
    .label i1 = 3
    .label idx_4 = 4
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2 -- vbuz1=vbuc1_plus_vbuz2 
    lax i
    axs #-[2]
    stx _0
    // [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _5
    // [8] *((byte*)(const struct Point[2]) points#0 + (byte~) main::$5) ← (byte~) main::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _0
    ldy _5
    sta points,y
    // [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2 -- vbuz1=vbuc1_plus_vbuz2 
    lax i
    axs #-[3]
    stx _1
    // [10] *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5) ← (byte~) main::$1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _1
    ldy _5
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [12] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp i
    bne b1_from_b1
    // [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [13] phi (byte) main::idx#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta idx_4
    // [13] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta i1
    jmp b2
    // [13] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  b2_from_b2:
    // [13] phi (byte) main::idx#4 = (byte) main::idx#3 [phi:main::@2->main::@2#0] -- register_copy 
    // [13] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#1] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i1
    asl
    sta _7
    // [15] *((const byte*) main::SCREEN#0 + (byte) main::idx#4) ← *((byte*)(const struct Point[2]) points#0 + (byte~) main::$7) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy _7
    lda points,y
    ldy idx_4
    sta SCREEN,y
    // [16] (byte) main::idx#1 ← ++ (byte) main::idx#4 -- vbuz1=_inc_vbuz2 
    ldy idx_4
    iny
    sty idx
    // [17] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy _7
    lda points+OFFSET_STRUCT_POINT_Y,y
    ldy idx
    sta SCREEN,y
    // [18] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuz1=_inc_vbuz2 
    ldy idx
    iny
    sty idx_2
    // [19] *((const byte*) main::SCREEN#0 + (byte) main::idx#2) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy idx_2
    sta SCREEN,y
    // [20] (byte) main::idx#3 ← ++ (byte) main::idx#2 -- vbuz1=_inc_vbuz2 
    ldy idx_2
    iny
    sty idx_3
    // [21] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
    // [22] if((byte) main::i1#1!=(byte) 2) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp i1
    bne b2_from_b2
    jmp breturn
    // main::@return
  breturn:
    // [23] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$0 main::$5 ] ( main:2 [ main::i#2 main::$0 main::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ main::$0 ]
Statement [8] *((byte*)(const struct Point[2]) points#0 + (byte~) main::$5) ← (byte~) main::$0 [ main::i#2 main::$5 ] ( main:2 [ main::i#2 main::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ main::$5 ]
Statement [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2 [ main::i#2 main::$5 main::$1 ] ( main:2 [ main::i#2 main::$5 main::$1 ] ) always clobbers reg byte a 
Statement [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1 [ main::i1#2 main::idx#4 main::$7 ] ( main:2 [ main::i1#2 main::idx#4 main::$7 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::idx#4 main::idx#3 ]
Statement [15] *((const byte*) main::SCREEN#0 + (byte) main::idx#4) ← *((byte*)(const struct Point[2]) points#0 + (byte~) main::$7) [ main::i1#2 main::idx#4 main::$7 ] ( main:2 [ main::i1#2 main::idx#4 main::$7 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ main::$7 ]
Statement [17] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) [ main::i1#2 main::idx#1 ] ( main:2 [ main::i1#2 main::idx#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ main::idx#1 ]
Statement [19] *((const byte*) main::SCREEN#0 + (byte) main::idx#2) ← (byte) ' ' [ main::i1#2 main::idx#2 ] ( main:2 [ main::i1#2 main::idx#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ main::idx#2 ]
Statement [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2 [ main::i#2 main::$0 ] ( main:2 [ main::i#2 main::$0 ] ) always clobbers reg byte a 
Statement [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$0 main::$5 ] ( main:2 [ main::i#2 main::$0 main::$5 ] ) always clobbers reg byte a 
Statement [8] *((byte*)(const struct Point[2]) points#0 + (byte~) main::$5) ← (byte~) main::$0 [ main::i#2 main::$5 ] ( main:2 [ main::i#2 main::$5 ] ) always clobbers reg byte a 
Statement [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2 [ main::i#2 main::$5 main::$1 ] ( main:2 [ main::i#2 main::$5 main::$1 ] ) always clobbers reg byte a 
Statement [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1 [ main::i1#2 main::idx#4 main::$7 ] ( main:2 [ main::i1#2 main::idx#4 main::$7 ] ) always clobbers reg byte a 
Statement [15] *((const byte*) main::SCREEN#0 + (byte) main::idx#4) ← *((byte*)(const struct Point[2]) points#0 + (byte~) main::$7) [ main::i1#2 main::idx#4 main::$7 ] ( main:2 [ main::i1#2 main::idx#4 main::$7 ] ) always clobbers reg byte a 
Statement [17] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) [ main::i1#2 main::idx#1 ] ( main:2 [ main::i1#2 main::idx#1 ] ) always clobbers reg byte a 
Statement [19] *((const byte*) main::SCREEN#0 + (byte) main::idx#2) ← (byte) ' ' [ main::i1#2 main::idx#2 ] ( main:2 [ main::i1#2 main::idx#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::idx#4 main::idx#3 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::$0 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::$5 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::$1 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ main::$7 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ main::idx#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ main::idx#2 ] : zp ZP_BYTE:10 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 25.67: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:7 [ main::$1 ] 20.62: zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ] 18.33: zp ZP_BYTE:4 [ main::idx#4 main::idx#3 ] 16.5: zp ZP_BYTE:9 [ main::idx#1 ] 16.5: zp ZP_BYTE:10 [ main::idx#2 ] 11: zp ZP_BYTE:5 [ main::$0 ] 11: zp ZP_BYTE:6 [ main::$5 ] 11: zp ZP_BYTE:8 [ main::$7 ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [main] best 1598 combination zp ZP_BYTE:2 [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ] reg byte x [ main::idx#4 main::idx#3 ] zp ZP_BYTE:9 [ main::idx#1 ] zp ZP_BYTE:10 [ main::idx#2 ] zp ZP_BYTE:5 [ main::$0 ] zp ZP_BYTE:6 [ main::$5 ] zp ZP_BYTE:8 [ main::$7 ] 
Limited combination testing to 100 combinations of 26244 possible.
Uplifting [Point] best 1598 combination 
Uplifting [] best 1598 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 1598 combination zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ main::i1#2 main::i1#1 ]
Uplifting [main] best 1598 combination zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ main::idx#1 ]
Uplifting [main] best 1508 combination reg byte x [ main::idx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ main::idx#2 ]
Uplifting [main] best 1418 combination reg byte x [ main::idx#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ main::$0 ]
Uplifting [main] best 1378 combination reg byte x [ main::$0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::$5 ]
Uplifting [main] best 1308 combination reg byte y [ main::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ main::$7 ]
Uplifting [main] best 1238 combination reg byte y [ main::$7 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct -  variable array access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    .label i1 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2 -- vbuxx=vbuc1_plus_vbuz1 
    lax i
    axs #-[2]
    // [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda i
    asl
    tay
    // [8] *((byte*)(const struct Point[2]) points#0 + (byte~) main::$5) ← (byte~) main::$0 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta points,y
    // [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2 -- vbuaa=vbuc1_plus_vbuz1 
    lda #3
    clc
    adc i
    // [10] *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5) ← (byte~) main::$1 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [12] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp i
    bne b1_from_b1
    // [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [13] phi (byte) main::idx#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [13] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta i1
    jmp b2
    // [13] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  b2_from_b2:
    // [13] phi (byte) main::idx#4 = (byte) main::idx#3 [phi:main::@2->main::@2#0] -- register_copy 
    // [13] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#1] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda i1
    asl
    tay
    // [15] *((const byte*) main::SCREEN#0 + (byte) main::idx#4) ← *((byte*)(const struct Point[2]) points#0 + (byte~) main::$7) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points,y
    sta SCREEN,x
    // [16] (byte) main::idx#1 ← ++ (byte) main::idx#4 -- vbuxx=_inc_vbuxx 
    inx
    // [17] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN,x
    // [18] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // [19] *((const byte*) main::SCREEN#0 + (byte) main::idx#2) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [20] (byte) main::idx#3 ← ++ (byte) main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [21] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
    // [22] if((byte) main::i1#1!=(byte) 2) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp i1
    bne b2_from_b2
    jmp breturn
    // main::@return
  breturn:
    // [23] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Removing instruction b2_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_Y OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(void()) main()
(byte~) main::$0 reg byte x 11.0
(byte~) main::$1 reg byte a 22.0
(byte~) main::$5 reg byte y 11.0
(byte~) main::$7 reg byte y 11.0
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:2 16.5
(byte) main::i#2 i zp ZP_BYTE:2 9.166666666666666
(byte) main::i1
(byte) main::i1#1 i1 zp ZP_BYTE:3 16.5
(byte) main::i1#2 i1 zp ZP_BYTE:3 4.125
(byte) main::idx
(byte) main::idx#1 reg byte x 16.5
(byte) main::idx#2 reg byte x 16.5
(byte) main::idx#3 reg byte x 7.333333333333333
(byte) main::idx#4 reg byte x 11.0
(struct Point[2]) points
(const struct Point[2]) points#0 points = { fill( 2, 0) }

zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ]
reg byte x [ main::idx#4 main::idx#3 ]
reg byte x [ main::$0 ]
reg byte y [ main::$5 ]
reg byte a [ main::$1 ]
reg byte y [ main::$7 ]
reg byte x [ main::idx#1 ]
reg byte x [ main::idx#2 ]


FINAL ASSEMBLER
Score: 1076

  // File Comments
// Minimal struct -  variable array access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    .label i1 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  b1:
    // 2+i
    // [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2 -- vbuxx=vbuc1_plus_vbuz1 
    lax i
    axs #-[2]
    // points[i].x = 2+i
    // [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda i
    asl
    tay
    // [8] *((byte*)(const struct Point[2]) points#0 + (byte~) main::$5) ← (byte~) main::$0 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta points,y
    // 3+i
    // [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2 -- vbuaa=vbuc1_plus_vbuz1 
    lda #3
    clc
    adc i
    // points[i].y = 3+i
    // [10] *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5) ← (byte~) main::$1 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta points+OFFSET_STRUCT_POINT_Y,y
    // for( byte i: 0..1)
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [12] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp i
    bne b1
    // [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [13] phi (byte) main::idx#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [13] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#1] -- vbuz1=vbuc1 
    txa
    sta i1
    // [13] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [13] phi (byte) main::idx#4 = (byte) main::idx#3 [phi:main::@2->main::@2#0] -- register_copy 
    // [13] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#1] -- register_copy 
    // main::@2
  b2:
    // SCREEN[idx++] = points[i].x
    // [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda i1
    asl
    tay
    // [15] *((const byte*) main::SCREEN#0 + (byte) main::idx#4) ← *((byte*)(const struct Point[2]) points#0 + (byte~) main::$7) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points,y
    sta SCREEN,x
    // SCREEN[idx++] = points[i].x;
    // [16] (byte) main::idx#1 ← ++ (byte) main::idx#4 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = points[i].y
    // [17] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN,x
    // SCREEN[idx++] = points[i].y;
    // [18] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = ' '
    // [19] *((const byte*) main::SCREEN#0 + (byte) main::idx#2) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [20] (byte) main::idx#3 ← ++ (byte) main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // for( byte i: 0..1)
    // [21] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
    // [22] if((byte) main::i1#1!=(byte) 2) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp i1
    bne b2
    // main::@return
    // }
    // [23] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

