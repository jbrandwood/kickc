@begin: scope:[]  from
  [0] (byte) col#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@2
@2: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @2
  [3] phi()
main: scope:[main]  from @2
  [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq()
  to:main::@1
main::@1: scope:[main]  from main main::@2 main::@7
  [5] (byte) col#14 ← phi( main/(byte) col#0 main::@7/(byte) col#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] if((byte) col#14<=(byte/signed byte/word/signed word/dword/signed dword) $a) goto main::@1
  to:main::@7
main::@7: scope:[main]  from main::@2
  [7] (byte) col#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
irq: scope:[irq]  from
  asm { lda$dc0d  }
  [9] *((const byte*) BGCOL#0) ← (byte) col#0
  [10] if((byte) col#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto irq::@1
  to:irq::@3
irq::@3: scope:[irq]  from irq
  [11] (byte) col#4 ← (byte) col#0 + (byte/signed byte/word/signed word/dword/signed dword) 2
  to:irq::@return
irq::@return: scope:[irq]  from irq::@1 irq::@3
  [12] return 
  to:@return
irq::@1: scope:[irq]  from irq
  [13] (byte) col#3 ← ++ (byte) col#0
  to:irq::@return
