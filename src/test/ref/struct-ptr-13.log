
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte*~) main::$6 ← (byte*)(const struct Point*) points
  (byte*~) main::$0 ← (byte*~) main::$6 + (const byte) OFFSET_STRUCT_POINT_X
  (byte*~) main::$7 ← (byte*)(const struct Point*) points
  (byte*~) main::$1 ← (byte*~) main::$7 + (const byte) OFFSET_STRUCT_POINT_X
  *((byte*~) main::$1) ← *((byte*~) main::$0) + (number) 5
  (byte*~) main::$8 ← (byte*)(const struct Point*) points
  (byte*~) main::$2 ← (byte*~) main::$8 + (const byte) OFFSET_STRUCT_POINT_Y
  (byte*~) main::$9 ← (byte*)(const struct Point*) points
  (byte*~) main::$3 ← (byte*~) main::$9 + (const byte) OFFSET_STRUCT_POINT_Y
  *((byte*~) main::$3) ← *((byte*~) main::$2) + (number) 5
  (byte*~) main::$10 ← (byte*)(const struct Point*) points
  (byte*~) main::$4 ← (byte*~) main::$10 + (const byte) OFFSET_STRUCT_POINT_X
  *((const nomodify byte*) main::SCREEN + (number) 0) ← *((byte*~) main::$4)
  (byte*~) main::$11 ← (byte*)(const struct Point*) points
  (byte*~) main::$5 ← (byte*~) main::$11 + (const byte) OFFSET_STRUCT_POINT_Y
  *((const nomodify byte*) main::SCREEN + (number) 1) ← *((byte*~) main::$5)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(byte*~) main::$10
(byte*~) main::$11
(byte*~) main::$2
(byte*~) main::$3
(byte*~) main::$4
(byte*~) main::$5
(byte*~) main::$6
(byte*~) main::$7
(byte*~) main::$8
(byte*~) main::$9
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(const struct Point*) points = (struct Point*)(number) $1000

Adding number conversion cast (unumber) 5 in *((byte*~) main::$1) ← *((byte*~) main::$0) + (number) 5
Adding number conversion cast (unumber) 5 in *((byte*~) main::$3) ← *((byte*~) main::$2) + (number) 5
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) main::SCREEN + (number) 0) ← *((byte*~) main::$4)
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) main::SCREEN + (number) 1) ← *((byte*~) main::$5)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (struct Point*) 4096
Simplifying constant integer cast 5
Simplifying constant integer cast 5
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte*~) main::$6 ← (byte*)(const struct Point*) points
Constant right-side identified [2] (byte*~) main::$7 ← (byte*)(const struct Point*) points
Constant right-side identified [5] (byte*~) main::$8 ← (byte*)(const struct Point*) points
Constant right-side identified [7] (byte*~) main::$9 ← (byte*)(const struct Point*) points
Constant right-side identified [10] (byte*~) main::$10 ← (byte*)(const struct Point*) points
Constant right-side identified [13] (byte*~) main::$11 ← (byte*)(const struct Point*) points
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$6 = (byte*)points
Constant (const byte*) main::$7 = (byte*)points
Constant (const byte*) main::$8 = (byte*)points
Constant (const byte*) main::$9 = (byte*)points
Constant (const byte*) main::$10 = (byte*)points
Constant (const byte*) main::$11 = (byte*)points
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [4] *((byte*~) main::$1) ← *((byte*~) main::$0) + (byte) 5  -- *(main::$6 + OFFSET_STRUCT_POINT_X)
Converting *(pointer+n) to pointer[n] [4] *((byte*~) main::$1) ← *((const byte*) main::$6 + (const byte) OFFSET_STRUCT_POINT_X) + (byte) 5  -- *(main::$7 + OFFSET_STRUCT_POINT_X)
Converting *(pointer+n) to pointer[n] [9] *((byte*~) main::$3) ← *((byte*~) main::$2) + (byte) 5  -- *(main::$8 + OFFSET_STRUCT_POINT_Y)
Converting *(pointer+n) to pointer[n] [9] *((byte*~) main::$3) ← *((const byte*) main::$8 + (const byte) OFFSET_STRUCT_POINT_Y) + (byte) 5  -- *(main::$9 + OFFSET_STRUCT_POINT_Y)
Converting *(pointer+n) to pointer[n] [12] *((const nomodify byte*) main::SCREEN + (byte) 0) ← *((byte*~) main::$4)  -- *(main::$10 + OFFSET_STRUCT_POINT_X)
Converting *(pointer+n) to pointer[n] [15] *((const nomodify byte*) main::SCREEN + (byte) 1) ← *((byte*~) main::$5)  -- *(main::$11 + OFFSET_STRUCT_POINT_Y)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::$6 in [1] (byte*~) main::$0 ← (const byte*) main::$6 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero main::$7 in [3] (byte*~) main::$1 ← (const byte*) main::$7 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero main::$6 in [4] *((const byte*) main::$7 + (const byte) OFFSET_STRUCT_POINT_X) ← *((const byte*) main::$6 + (const byte) OFFSET_STRUCT_POINT_X) + (byte) 5
Simplifying expression containing zero main::$7 in [4] *((const byte*) main::$7 + (const byte) OFFSET_STRUCT_POINT_X) ← *((const byte*) main::$6) + (byte) 5
Simplifying expression containing zero main::$10 in [11] (byte*~) main::$4 ← (const byte*) main::$10 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero main::$10 in [12] *((const nomodify byte*) main::SCREEN + (byte) 0) ← *((const byte*) main::$10 + (const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero main::SCREEN in [12] *((const nomodify byte*) main::SCREEN + (byte) 0) ← *((const byte*) main::$10)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) main::$0 and assignment [0] (byte*~) main::$0 ← (const byte*) main::$6
Eliminating unused variable (byte*~) main::$1 and assignment [1] (byte*~) main::$1 ← (const byte*) main::$7
Eliminating unused variable (byte*~) main::$2 and assignment [3] (byte*~) main::$2 ← (const byte*) main::$8 + (const byte) OFFSET_STRUCT_POINT_Y
Eliminating unused variable (byte*~) main::$3 and assignment [4] (byte*~) main::$3 ← (const byte*) main::$9 + (const byte) OFFSET_STRUCT_POINT_Y
Eliminating unused variable (byte*~) main::$4 and assignment [6] (byte*~) main::$4 ← (const byte*) main::$10
Eliminating unused variable (byte*~) main::$5 and assignment [8] (byte*~) main::$5 ← (const byte*) main::$11 + (const byte) OFFSET_STRUCT_POINT_Y
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined main::$6 = (byte*)(const struct Point*) points
Constant inlined main::$9 = (byte*)(const struct Point*) points
Constant inlined main::$7 = (byte*)(const struct Point*) points
Constant inlined main::$10 = (byte*)(const struct Point*) points
Constant inlined main::$8 = (byte*)(const struct Point*) points
Constant inlined main::$11 = (byte*)(const struct Point*) points
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)points+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *((byte*)points+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *((byte*)points+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *(main::SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((byte*)(const struct Point*) points) ← *((byte*)(const struct Point*) points) + (byte) 5
  [5] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) + (byte) 5
  [6] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct Point*) points)
  [7] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct - modifying pointer to struct in memory using arrow operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label points = $1000
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    // [4] *((byte*)(const struct Point*) points) ← *((byte*)(const struct Point*) points) + (byte) 5 -- _deref_pbuc1=_deref_pbuc1_plus_vbuc2 
    lda #5
    clc
    adc points
    sta points
    // [5] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) + (byte) 5 -- _deref_pbuc1=_deref_pbuc1_plus_vbuc2 
    lda #5
    clc
    adc points+OFFSET_STRUCT_POINT_Y
    sta points+OFFSET_STRUCT_POINT_Y
    // [6] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct Point*) points) -- _deref_pbuc1=_deref_pbuc2 
    lda points
    sta SCREEN
    // [7] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda points+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((byte*)(const struct Point*) points) ← *((byte*)(const struct Point*) points) + (byte) 5 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [5] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) + (byte) 5 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct Point*) points) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [Point] best 61 combination 
Uplifting [main] best 61 combination 
Uplifting [] best 61 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct - modifying pointer to struct in memory using arrow operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label points = $1000
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    // [4] *((byte*)(const struct Point*) points) ← *((byte*)(const struct Point*) points) + (byte) 5 -- _deref_pbuc1=_deref_pbuc1_plus_vbuc2 
    lda #5
    clc
    adc points
    sta points
    // [5] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) + (byte) 5 -- _deref_pbuc1=_deref_pbuc1_plus_vbuc2 
    lda #5
    clc
    adc points+OFFSET_STRUCT_POINT_Y
    sta points+OFFSET_STRUCT_POINT_Y
    // [6] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct Point*) points) -- _deref_pbuc1=_deref_pbuc2 
    lda points
    sta SCREEN
    // [7] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda points+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(const struct Point*) points = (struct Point*) 4096



FINAL ASSEMBLER
Score: 46

  // File Comments
// Minimal struct - modifying pointer to struct in memory using arrow operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label points = $1000
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // points->x += 5
    // [4] *((byte*)(const struct Point*) points) ← *((byte*)(const struct Point*) points) + (byte) 5 -- _deref_pbuc1=_deref_pbuc1_plus_vbuc2 
    lda #5
    clc
    adc points
    sta points
    // points->y += 5
    // [5] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) + (byte) 5 -- _deref_pbuc1=_deref_pbuc1_plus_vbuc2 
    lda #5
    clc
    adc points+OFFSET_STRUCT_POINT_Y
    sta points+OFFSET_STRUCT_POINT_Y
    // SCREEN[0] = points->x
    // [6] *((const nomodify byte*) main::SCREEN) ← *((byte*)(const struct Point*) points) -- _deref_pbuc1=_deref_pbuc2 
    lda points
    sta SCREEN
    // SCREEN[1] = points->y
    // [7] *((const nomodify byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda points+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // main::@return
    // }
    // [8] return 
    rts
}
  // File Data

