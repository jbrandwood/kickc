
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  asm { sei  }
  to:main::@1
main::@1: scope:[main]  from main main::@2
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::col#0 = *RASTER
  *BG_COLOR = main::col#0
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* BG_COLOR = (byte*)$d021
const nomodify byte* RASTER = (byte*)$d012
void __start()
void main()
byte main::col
byte main::col#0

Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53266
Successful SSA optimization PassNCastSimplification
if() condition always true - replacing block destination [1] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding NOP phi() at start of main::@1
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block label main::@1
Renumbering block main::@2 to main::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::col#0 = *RASTER
  [2] *BG_COLOR = main::col#0
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::col
byte main::col#0 22.0

Initial phi equivalence classes
Added variable main::col#0 to live range equivalence class [ main::col#0 ]
Complete equivalence classes
[ main::col#0 ]
Allocated zp[1]:2 [ main::col#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::col#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp[1]:2 [ main::col#0 ] 
Uplift Scope [] 

Uplifting [main] best 115 combination reg byte a [ main::col#0 ] 
Uplifting [] best 115 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test setting the program PC through a #pc directive
  // Upstart
  // Commodore 64 PRG executable file
.file [name="global-pc.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$1000]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label BG_COLOR = $d021
  .label RASTER = $d012
.segment Code
  // main
main: {
    // asm { sei  }
    sei
    jmp __b1
    // main::@1
  __b1:
    // [1] main::col#0 = *RASTER -- vbuaa=_deref_pbuc1 
    lda RASTER
    // [2] *BG_COLOR = main::col#0 -- _deref_pbuc1=vbuaa 
    sta BG_COLOR
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* BG_COLOR = (byte*) 53281
const nomodify byte* RASTER = (byte*) 53266
void main()
byte main::col
byte main::col#0 reg byte a 22.0

reg byte a [ main::col#0 ]


FINAL ASSEMBLER
Score: 112

  // File Comments
// Test setting the program PC through a #pc directive
  // Upstart
  // Commodore 64 PRG executable file
.file [name="global-pc.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$1000]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label BG_COLOR = $d021
  .label RASTER = $d012
.segment Code
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // main::@1
  __b1:
    // col = *RASTER
    // [1] main::col#0 = *RASTER -- vbuaa=_deref_pbuc1 
    lda RASTER
    // *BG_COLOR = col
    // [2] *BG_COLOR = main::col#0 -- _deref_pbuc1=vbuaa 
    sta BG_COLOR
    jmp __b1
}
  // File Data

