byte* SCREEN = $0400;

byte char = 'a';
byte num = 1;
byte[] str = "bc"+"d"+'e';
byte[] nums = { 2, 3, 4, 5};

main();
void main() {
    SCREEN[0] = char;
    SCREEN[2] = num;
    for(byte i : 0..3) {
        SCREEN[4+i] = str[i];
        SCREEN[9+i] = nums[i];
    }
}
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (byte) char ← (byte) 'a'
  (byte) num ← (byte) 1
  (string~) $0 ← (string) "bc" + (string) "d"
  (string~) $1 ← (string~) $0 + (byte) 'e'
  (byte[]) str ← (string~) $1
  (byte[]) nums ← { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
  (void~) $2 ← call main 
proc (void()) main()
  *((byte*) SCREEN + (byte) 0) ← (byte) char
  *((byte*) SCREEN + (byte) 2) ← (byte) num
  (byte) main::i ← (byte) 0
main::@1:
  (byte~) main::$0 ← (byte) 4 + (byte) main::i
  (byte~) main::$1 ← (byte[]) str *idx (byte) main::i
  *((byte*) SCREEN + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i
  (byte~) main::$3 ← (byte[]) nums *idx (byte) main::i
  *((byte*) SCREEN + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$4 ← (byte) main::i != (byte) 4
  if((boolean~) main::$4) goto main::@1
main::@return:
  return 
endproc // main()

SYMBOLS
(string~) $0
(string~) $1
(void~) $2
(byte*) SCREEN
(byte) char
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(boolean~) main::$4
(label) main::@1
(label) main::@return
(byte) main::i
(byte) num
(byte[]) nums
(byte[]) str

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte) char ← (byte) 'a'
  (byte) num ← (byte) 1
  (string~) $0 ← (string) "bc" + (string) "d"
  (string~) $1 ← (string~) $0 + (byte) 'e'
  (byte[]) str ← (string~) $1
  (byte[]) nums ← { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
  (void~) $2 ← call main 
  to:@1
main: scope:[main]  from
  *((byte*) SCREEN + (byte) 0) ← (byte) char
  *((byte*) SCREEN + (byte) 2) ← (byte) num
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte) 4 + (byte) main::i
  (byte~) main::$1 ← (byte[]) str *idx (byte) main::i
  *((byte*) SCREEN + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i
  (byte~) main::$3 ← (byte[]) nums *idx (byte) main::i
  *((byte*) SCREEN + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$4 ← (byte) main::i != (byte) 4
  if((boolean~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@end
@end: scope:[]  from @1

Removing empty block main::@2
Removing empty block @1
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte) char ← (byte) 'a'
  (byte) num ← (byte) 1
  (string~) $0 ← (string) "bc" + (string) "d"
  (string~) $1 ← (string~) $0 + (byte) 'e'
  (byte[]) str ← (string~) $1
  (byte[]) nums ← { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
  (void~) $2 ← call main 
  to:@end
main: scope:[main]  from
  *((byte*) SCREEN + (byte) 0) ← (byte) char
  *((byte*) SCREEN + (byte) 2) ← (byte) num
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte) 4 + (byte) main::i
  (byte~) main::$1 ← (byte[]) str *idx (byte) main::i
  *((byte*) SCREEN + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i
  (byte~) main::$3 ← (byte[]) nums *idx (byte) main::i
  *((byte*) SCREEN + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$4 ← (byte) main::i != (byte) 4
  if((boolean~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte) char ← (byte) 'a'
  (byte) num ← (byte) 1
  (string~) $0 ← (string) "bc" + (string) "d"
  (string~) $1 ← (string~) $0 + (byte) 'e'
  (byte[]) str ← (string~) $1
  (byte[]) nums ← { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  *((byte*) SCREEN + (byte) 0) ← (byte) char
  *((byte*) SCREEN + (byte) 2) ← (byte) num
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte) 4 + (byte) main::i
  (byte~) main::$1 ← (byte[]) str *idx (byte) main::i
  *((byte*) SCREEN + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i
  (byte~) main::$3 ← (byte[]) nums *idx (byte) main::i
  *((byte*) SCREEN + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$4 ← (byte) main::i != (byte) 4
  if((boolean~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte) char#0 ← (byte) 'a'
  (byte) num#0 ← (byte) 1
  (string~) $0 ← (string) "bc" + (string) "d"
  (string~) $1 ← (string~) $0 + (byte) 'e'
  (byte[]) str#0 ← (string~) $1
  (byte[]) nums#0 ← { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte[]) nums#2 ← phi( @begin/(byte[]) nums#0 )
  (byte[]) str#2 ← phi( @begin/(byte[]) str#0 )
  (byte) num#1 ← phi( @begin/(byte) num#0 )
  (byte*) SCREEN#1 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) char#1 ← phi( @begin/(byte) char#0 )
  *((byte*) SCREEN#1 + (byte) 0) ← (byte) char#1
  *((byte*) SCREEN#1 + (byte) 2) ← (byte) num#1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte[]) nums#1 ← phi( main/(byte[]) nums#2 main::@1/(byte[]) nums#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#1 main::@1/(byte*) SCREEN#2 )
  (byte[]) str#1 ← phi( main/(byte[]) str#2 main::@1/(byte[]) str#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) 4 + (byte) main::i#2
  (byte~) main::$1 ← (byte[]) str#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i#2
  (byte~) main::$3 ← (byte[]) nums#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$4 ← (byte) main::i#1 != (byte) 4
  if((boolean~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte) char#0 ← (byte) 'a'
  (byte) num#0 ← (byte) 1
  (string~) $0 ← (string) "bc" + (string) "d"
  (string~) $1 ← (string~) $0 + (byte) 'e'
  (byte[]) str#0 ← (string~) $1
  (byte[]) nums#0 ← { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte[]) nums#2 ← phi( @begin/(byte[]) nums#0 )
  (byte[]) str#2 ← phi( @begin/(byte[]) str#0 )
  (byte) num#1 ← phi( @begin/(byte) num#0 )
  (byte*) SCREEN#1 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) char#1 ← phi( @begin/(byte) char#0 )
  *((byte*) SCREEN#1 + (byte) 0) ← (byte) char#1
  *((byte*) SCREEN#1 + (byte) 2) ← (byte) num#1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte[]) nums#1 ← phi( main/(byte[]) nums#2 main::@1/(byte[]) nums#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#1 main::@1/(byte*) SCREEN#2 )
  (byte[]) str#1 ← phi( main/(byte[]) str#2 main::@1/(byte[]) str#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) 4 + (byte) main::i#2
  (byte~) main::$1 ← (byte[]) str#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i#2
  (byte~) main::$3 ← (byte[]) nums#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$4 ← (byte) main::i#1 != (byte) 4
  if((boolean~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(string~) $0
(string~) $1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte) char
(byte) char#0
(byte) char#1
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(boolean~) main::$4
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) num
(byte) num#0
(byte) num#1
(byte[]) nums
(byte[]) nums#0
(byte[]) nums#1
(byte[]) nums#2
(byte[]) str
(byte[]) str#0
(byte[]) str#1
(byte[]) str#2

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte) char#0 ← (byte) 'a'
  (byte) num#0 ← (byte) 1
  (string~) $0 ← (string) "bc" + (string) "d"
  (string~) $1 ← (string~) $0 + (byte) 'e'
  (byte[]) str#0 ← (string~) $1
  (byte[]) nums#0 ← { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte[]) nums#2 ← phi( @begin/(byte[]) nums#0 )
  (byte[]) str#2 ← phi( @begin/(byte[]) str#0 )
  (byte) num#1 ← phi( @begin/(byte) num#0 )
  (byte*) SCREEN#1 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) char#1 ← phi( @begin/(byte) char#0 )
  *((byte*) SCREEN#1 + (byte) 0) ← (byte) char#1
  *((byte*) SCREEN#1 + (byte) 2) ← (byte) num#1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte[]) nums#1 ← phi( main/(byte[]) nums#2 main::@1/(byte[]) nums#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#1 main::@1/(byte*) SCREEN#2 )
  (byte[]) str#1 ← phi( main/(byte[]) str#2 main::@1/(byte[]) str#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) 4 + (byte) main::i#2
  (byte~) main::$1 ← (byte[]) str#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i#2
  (byte~) main::$3 ← (byte[]) nums#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$4 ← (byte) main::i#1 != (byte) 4
  if((boolean~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Alias (byte[]) str#0 = (string~) $1 (byte[]) str#2 
Alias (byte) char#0 = (byte) char#1 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#1 
Alias (byte) num#0 = (byte) num#1 
Alias (byte[]) nums#0 = (byte[]) nums#2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte) char#0 ← (byte) 'a'
  (byte) num#0 ← (byte) 1
  (string~) $0 ← (string) "bc" + (string) "d"
  (byte[]) str#0 ← (string~) $0 + (byte) 'e'
  (byte[]) nums#0 ← { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  *((byte*) SCREEN#0 + (byte) 0) ← (byte) char#0
  *((byte*) SCREEN#0 + (byte) 2) ← (byte) num#0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte[]) nums#1 ← phi( main/(byte[]) nums#0 main::@1/(byte[]) nums#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#0 main::@1/(byte*) SCREEN#2 )
  (byte[]) str#1 ← phi( main/(byte[]) str#0 main::@1/(byte[]) str#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) 4 + (byte) main::i#2
  (byte~) main::$1 ← (byte[]) str#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i#2
  (byte~) main::$3 ← (byte[]) nums#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$4 ← (byte) main::i#1 != (byte) 4
  if((boolean~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Self Phi Eliminated (byte[]) str#1
Self Phi Eliminated (byte*) SCREEN#2
Self Phi Eliminated (byte[]) nums#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte) char#0 ← (byte) 'a'
  (byte) num#0 ← (byte) 1
  (string~) $0 ← (string) "bc" + (string) "d"
  (byte[]) str#0 ← (string~) $0 + (byte) 'e'
  (byte[]) nums#0 ← { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  *((byte*) SCREEN#0 + (byte) 0) ← (byte) char#0
  *((byte*) SCREEN#0 + (byte) 2) ← (byte) num#0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte[]) nums#1 ← phi( main/(byte[]) nums#0 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#0 )
  (byte[]) str#1 ← phi( main/(byte[]) str#0 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) 4 + (byte) main::i#2
  (byte~) main::$1 ← (byte[]) str#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i#2
  (byte~) main::$3 ← (byte[]) nums#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$4 ← (byte) main::i#1 != (byte) 4
  if((boolean~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Simple Condition (boolean~) main::$4 if((byte) main::i#1!=(byte) 4) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte) char#0 ← (byte) 'a'
  (byte) num#0 ← (byte) 1
  (string~) $0 ← (string) "bc" + (string) "d"
  (byte[]) str#0 ← (string~) $0 + (byte) 'e'
  (byte[]) nums#0 ← { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  *((byte*) SCREEN#0 + (byte) 0) ← (byte) char#0
  *((byte*) SCREEN#0 + (byte) 2) ← (byte) num#0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte[]) nums#1 ← phi( main/(byte[]) nums#0 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#0 )
  (byte[]) str#1 ← phi( main/(byte[]) str#0 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) 4 + (byte) main::i#2
  (byte~) main::$1 ← (byte[]) str#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i#2
  (byte~) main::$3 ← (byte[]) nums#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Constant (const byte*) SCREEN#0 = 1024
Constant (const byte) char#0 = 'a'
Constant (const byte) num#0 = 1
Constant (const string) $0 = "bc"+"d"
Constant (const byte[]) nums#0 = { 2, 3, 4, 5 }
Constant (const byte) main::i#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) str#0 ← (const string) $0 + (byte) 'e'
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  *((const byte*) SCREEN#0 + (byte) 0) ← (const byte) char#0
  *((const byte*) SCREEN#0 + (byte) 2) ← (const byte) num#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte[]) nums#1 ← phi( main/(const byte[]) nums#0 )
  (byte*) SCREEN#2 ← phi( main/(const byte*) SCREEN#0 )
  (byte[]) str#1 ← phi( main/(byte[]) str#0 )
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) 4 + (byte) main::i#2
  (byte~) main::$1 ← (byte[]) str#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i#2
  (byte~) main::$3 ← (byte[]) nums#1 *idx (byte) main::i#2
  *((byte*) SCREEN#2 + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Constant (const byte[]) str#0 = $0+'e'
Constant (const byte*) SCREEN#2 = SCREEN#0
Constant (const byte[]) nums#1 = nums#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  *((const byte*) SCREEN#0 + (byte) 0) ← (const byte) char#0
  *((const byte*) SCREEN#0 + (byte) 2) ← (const byte) num#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte[]) str#1 ← phi( main/(const byte[]) str#0 )
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) 4 + (byte) main::i#2
  (byte~) main::$1 ← (byte[]) str#1 *idx (byte) main::i#2
  *((const byte*) SCREEN#2 + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i#2
  (byte~) main::$3 ← (const byte[]) nums#1 *idx (byte) main::i#2
  *((const byte*) SCREEN#2 + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Constant (const byte[]) str#1 = str#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  *((const byte*) SCREEN#0 + (byte) 0) ← (const byte) char#0
  *((const byte*) SCREEN#0 + (byte) 2) ← (const byte) num#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) 4 + (byte) main::i#2
  (byte~) main::$1 ← (const byte[]) str#1 *idx (byte) main::i#2
  *((const byte*) SCREEN#2 + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) 9 + (byte) main::i#2
  (byte~) main::$3 ← (const byte[]) nums#1 *idx (byte) main::i#2
  *((const byte*) SCREEN#2 + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Consolidated assigned array index constant in assignment *(SCREEN#0+0)
Consolidated assigned array index constant in assignment *(SCREEN#0+2)
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Consolidated assigned array index constant in assignment *(SCREEN#2+4 + main::$0)
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Consolidated assigned array index constant in assignment *(SCREEN#2+9 + main::$2)
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0
  *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2
  (byte~) main::$1 ← (const byte[]) str#1 *idx (byte) main::i#2
  *((const byte*) SCREEN#2+(byte) 4 + (byte~) main::$0) ← (byte~) main::$1
  (byte~) main::$2 ← (byte) main::i#2
  (byte~) main::$3 ← (const byte[]) nums#1 *idx (byte) main::i#2
  *((const byte*) SCREEN#2+(byte) 9 + (byte~) main::$2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Alias (byte) main::i#2 = (byte~) main::$0 (byte~) main::$2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0
  *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$1 ← (const byte[]) str#1 *idx (byte) main::i#2
  *((const byte*) SCREEN#2+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1
  (byte~) main::$3 ← (const byte[]) nums#1 *idx (byte) main::i#2
  *((const byte*) SCREEN#2+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Constant inlined SCREEN#2 = (const byte*) SCREEN#0
Constant inlined str#1 = (const byte[]) str#0
Constant inlined $0 = (string) "bc"+(string) "d"
Constant inlined main::i#0 = (byte) 0
Constant inlined nums#1 = (const byte[]) nums#0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0
  *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  (byte~) main::$1 ← (const byte[]) str#0 *idx (byte) main::i#2
  *((const byte*) SCREEN#0+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1
  (byte~) main::$3 ← (const byte[]) nums#0 *idx (byte) main::i#2
  *((const byte*) SCREEN#0+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(byte) char
(const byte) char#0 = (byte) 'a'
(void()) main()
(byte~) main::$1
(byte~) main::$3
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#2
(byte) num
(const byte) num#0 = (byte) 1
(byte[]) nums
(const byte[]) nums#0 = { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
(byte[]) str
(const byte[]) str#0 = (string) "bc"+(string) "d"+(byte) 'e'

Block Sequence Planned @begin @end main main::@1 main::@return 
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Block Sequence Planned @begin @end main main::@1 main::@return main::@3 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0
  *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) 0 main::@3/(byte~) main::i#3 )
  (byte~) main::$1 ← (const byte[]) str#0 *idx (byte) main::i#2
  *((const byte*) SCREEN#0+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1
  (byte~) main::$3 ← (const byte[]) nums#0 *idx (byte) main::i#2
  *((const byte*) SCREEN#0+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 4) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
main::@3: scope:[main]  from main::@1
  (byte~) main::i#3 ← (byte) main::i#1
  to:main::@1

CALL GRAPH
Calls in [] to 0:main 

Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0 [ ]
  [2] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0 [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [3] (byte) main::i#2 ← phi( main/(byte) 0 main::@3/(byte~) main::i#3 ) [ main::i#2 ]
  [4] (byte~) main::$1 ← (const byte[]) str#0 *idx (byte) main::i#2 [ main::i#2 main::$1 ]
  [5] *((const byte*) SCREEN#0+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1 [ main::i#2 ]
  [6] (byte~) main::$3 ← (const byte[]) nums#0 *idx (byte) main::i#2 [ main::i#2 main::$3 ]
  [7] *((const byte*) SCREEN#0+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3 [ main::i#2 ]
  [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [9] if((byte) main::i#1!=(byte) 4) goto main::@3 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return  [ ]
  to:@return
main::@3: scope:[main]  from main::@1
  [11] (byte~) main::i#3 ← (byte) main::i#1 [ main::i#3 ]
  to:main::@1

Created 1 initial phi equivalence classes
Coalesced [11] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@3
Block Sequence Planned @begin @end main main::@1 main::@return 
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0 [ ]
  [2] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0 [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [3] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 ) [ main::i#2 ]
  [4] (byte~) main::$1 ← (const byte[]) str#0 *idx (byte) main::i#2 [ main::i#2 main::$1 ]
  [5] *((const byte*) SCREEN#0+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1 [ main::i#2 ]
  [6] (byte~) main::$3 ← (const byte[]) nums#0 *idx (byte) main::i#2 [ main::i#2 main::$3 ]
  [7] *((const byte*) SCREEN#0+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3 [ main::i#2 ]
  [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [9] if((byte) main::i#1!=(byte) 4) goto main::@1 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return  [ ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@1 dominated by  @begin main::@1 main 
main::@return dominated by  main::@return @begin main::@1 main 

Found back edge: Loop head: main::@1 tails: main::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@1 blocks: main::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@1 blocks: main::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@1 blocks: main::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@1 blocks: main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte) char
(void()) main()
(byte~) main::$1 22.0
(byte~) main::$3 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 13.2
(byte) num
(byte[]) nums
(byte[]) str

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$1 ]
[ main::$3 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::$1 ]
Allocated zp ZP_BYTE:4 [ main::$3 ]
INITIAL ASM
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const char = 'a'
  .const num = 1
  .const str = "bc"+"d"+'e'
  nums: .byte 2, 3, 4, 5
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG3 @end
bend:
//SEG4 main
main: {
    .label _1 = 3
    .label _3 = 4
    .label i = 2
  //SEG5 [1] *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0 [ ] -- _star_cowo1=coby2 
    lda #char
    sta SCREEN+0
  //SEG6 [2] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0 [ ] -- _star_cowo1=coby2 
    lda #num
    sta SCREEN+2
  //SEG7 [3] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG8 [3] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG9 [3] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG10 [3] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG11 main::@1
  b1:
  //SEG12 [4] (byte~) main::$1 ← (const byte[]) str#0 *idx (byte) main::i#2 [ main::i#2 main::$1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda str,x
    sta _1
  //SEG13 [5] *((const byte*) SCREEN#0+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1 [ main::i#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda _1
    ldx i
    sta SCREEN+4,x
  //SEG14 [6] (byte~) main::$3 ← (const byte[]) nums#0 *idx (byte) main::i#2 [ main::i#2 main::$3 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda nums,x
    sta _3
  //SEG15 [7] *((const byte*) SCREEN#0+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3 [ main::i#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda _3
    ldx i
    sta SCREEN+9,x
  //SEG16 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG17 [9] if((byte) main::i#1!=(byte) 4) goto main::@1 [ main::i#1 ] -- zpby1_neq_coby1_then_la1 
    lda i
    cmp #4
    bne b1_from_b1
    jmp breturn
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return  [ ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0 [ ] always clobbers reg byte a 
Statement [2] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0 [ ] always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::$1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$3 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 29.7: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:3 [ main::$1 ] 22: zp ZP_BYTE:4 [ main::$3 ] 
Uplift Scope [] 

Uplifting [main] best 392 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] reg byte a [ main::$3 ] 
Uplifting [] best 392 combination 
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const char = 'a'
  .const num = 1
  .const str = "bc"+"d"+'e'
  nums: .byte 2, 3, 4, 5
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0 [ ] -- _star_cowo1=coby2 
    lda #char
    sta SCREEN+0
  //SEG6 [2] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0 [ ] -- _star_cowo1=coby2 
    lda #num
    sta SCREEN+2
  //SEG7 [3] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG8 [3] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG9 [3] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG10 [3] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG11 main::@1
  b1:
  //SEG12 [4] (byte~) main::$1 ← (const byte[]) str#0 *idx (byte) main::i#2 [ main::i#2 main::$1 ] -- aby=cowo1_staridx_xby 
    lda str,x
  //SEG13 [5] *((const byte*) SCREEN#0+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1 [ main::i#2 ] -- cowo1_staridx_xby=aby 
    sta SCREEN+4,x
  //SEG14 [6] (byte~) main::$3 ← (const byte[]) nums#0 *idx (byte) main::i#2 [ main::i#2 main::$3 ] -- aby=cowo1_staridx_xby 
    lda nums,x
  //SEG15 [7] *((const byte*) SCREEN#0+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3 [ main::i#2 ] -- cowo1_staridx_xby=aby 
    sta SCREEN+9,x
  //SEG16 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG17 [9] if((byte) main::i#1!=(byte) 4) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #4
    bne b1_from_b1
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return  [ ]
    rts
}

Replacing label b1_from_b1 with b1
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const char = 'a'
  .const num = 1
  .const str = "bc"+"d"+'e'
  nums: .byte 2, 3, 4, 5
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0 [ ] -- _star_cowo1=coby2 
    lda #char
    sta SCREEN+0
  //SEG6 [2] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0 [ ] -- _star_cowo1=coby2 
    lda #num
    sta SCREEN+2
  //SEG7 [3] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG8 [3] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG9 [3] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG10 [3] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG11 main::@1
  b1:
  //SEG12 [4] (byte~) main::$1 ← (const byte[]) str#0 *idx (byte) main::i#2 [ main::i#2 main::$1 ] -- aby=cowo1_staridx_xby 
    lda str,x
  //SEG13 [5] *((const byte*) SCREEN#0+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1 [ main::i#2 ] -- cowo1_staridx_xby=aby 
    sta SCREEN+4,x
  //SEG14 [6] (byte~) main::$3 ← (const byte[]) nums#0 *idx (byte) main::i#2 [ main::i#2 main::$3 ] -- aby=cowo1_staridx_xby 
    lda nums,x
  //SEG15 [7] *((const byte*) SCREEN#0+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3 [ main::i#2 ] -- cowo1_staridx_xby=aby 
    sta SCREEN+9,x
  //SEG16 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG17 [9] if((byte) main::i#1!=(byte) 4) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #4
    bne b1
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return  [ ]
    rts
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const char = 'a'
  .const num = 1
  .const str = "bc"+"d"+'e'
  nums: .byte 2, 3, 4, 5
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0 [ ] -- _star_cowo1=coby2 
    lda #char
    sta SCREEN+0
  //SEG6 [2] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0 [ ] -- _star_cowo1=coby2 
    lda #num
    sta SCREEN+2
  //SEG7 [3] phi from main to main::@1 [phi:main->main::@1]
  //SEG8 [3] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG9 [3] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG10 [3] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG11 main::@1
  b1:
  //SEG12 [4] (byte~) main::$1 ← (const byte[]) str#0 *idx (byte) main::i#2 [ main::i#2 main::$1 ] -- aby=cowo1_staridx_xby 
    lda str,x
  //SEG13 [5] *((const byte*) SCREEN#0+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1 [ main::i#2 ] -- cowo1_staridx_xby=aby 
    sta SCREEN+4,x
  //SEG14 [6] (byte~) main::$3 ← (const byte[]) nums#0 *idx (byte) main::i#2 [ main::i#2 main::$3 ] -- aby=cowo1_staridx_xby 
    lda nums,x
  //SEG15 [7] *((const byte*) SCREEN#0+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3 [ main::i#2 ] -- cowo1_staridx_xby=aby 
    sta SCREEN+9,x
  //SEG16 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG17 [9] if((byte) main::i#1!=(byte) 4) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #4
    bne b1
  //SEG18 main::@return
  //SEG19 [10] return  [ ]
    rts
}

Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const char = 'a'
  .const num = 1
  .const str = "bc"+"d"+'e'
  nums: .byte 2, 3, 4, 5
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0 [ ] -- _star_cowo1=coby2 
    lda #char
    sta SCREEN+0
  //SEG6 [2] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0 [ ] -- _star_cowo1=coby2 
    lda #num
    sta SCREEN+2
  //SEG7 [3] phi from main to main::@1 [phi:main->main::@1]
  //SEG8 [3] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG9 [3] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG10 [3] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG11 main::@1
  b1:
  //SEG12 [4] (byte~) main::$1 ← (const byte[]) str#0 *idx (byte) main::i#2 [ main::i#2 main::$1 ] -- aby=cowo1_staridx_xby 
    lda str,x
  //SEG13 [5] *((const byte*) SCREEN#0+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1 [ main::i#2 ] -- cowo1_staridx_xby=aby 
    sta SCREEN+4,x
  //SEG14 [6] (byte~) main::$3 ← (const byte[]) nums#0 *idx (byte) main::i#2 [ main::i#2 main::$3 ] -- aby=cowo1_staridx_xby 
    lda nums,x
  //SEG15 [7] *((const byte*) SCREEN#0+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3 [ main::i#2 ] -- cowo1_staridx_xby=aby 
    sta SCREEN+9,x
  //SEG16 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG17 [9] if((byte) main::i#1!=(byte) 4) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #4
    bne b1
  //SEG18 main::@return
  //SEG19 [10] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (word) 1024
(byte) char
(const byte) char#0 char = (byte) 'a'
(void()) main()
(byte~) main::$1 reg byte a 22.0
(byte~) main::$3 reg byte a 22.0
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 13.2
(byte) num
(const byte) num#0 num = (byte) 1
(byte[]) nums
(const byte[]) nums#0 nums = { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
(byte[]) str
(const byte[]) str#0 str = (string) "bc"+(string) "d"+(byte) 'e'

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$1 ]
reg byte a [ main::$3 ]

FINAL CODE
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const char = 'a'
  .const num = 1
  .const str = "bc"+"d"+'e'
  nums: .byte 2, 3, 4, 5
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] *((const byte*) SCREEN#0+(byte) 0) ← (const byte) char#0 [ ] -- _star_cowo1=coby2 
    lda #char
    sta SCREEN+0
  //SEG6 [2] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) num#0 [ ] -- _star_cowo1=coby2 
    lda #num
    sta SCREEN+2
  //SEG7 [3] phi from main to main::@1 [phi:main->main::@1]
  //SEG8 [3] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG9 [3] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG10 [3] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG11 main::@1
  b1:
  //SEG12 [4] (byte~) main::$1 ← (const byte[]) str#0 *idx (byte) main::i#2 [ main::i#2 main::$1 ] -- aby=cowo1_staridx_xby 
    lda str,x
  //SEG13 [5] *((const byte*) SCREEN#0+(byte) 4 + (byte) main::i#2) ← (byte~) main::$1 [ main::i#2 ] -- cowo1_staridx_xby=aby 
    sta SCREEN+4,x
  //SEG14 [6] (byte~) main::$3 ← (const byte[]) nums#0 *idx (byte) main::i#2 [ main::i#2 main::$3 ] -- aby=cowo1_staridx_xby 
    lda nums,x
  //SEG15 [7] *((const byte*) SCREEN#0+(byte) 9 + (byte) main::i#2) ← (byte~) main::$3 [ main::i#2 ] -- cowo1_staridx_xby=aby 
    sta SCREEN+9,x
  //SEG16 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG17 [9] if((byte) main::i#1!=(byte) 4) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #4
    bne b1
  //SEG18 main::@return
  //SEG19 [10] return  [ ]
    rts
}

