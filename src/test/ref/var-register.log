Eliminating unused variable with no statement main::$0

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::x#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  main::x#7 = phi( main/main::x#0, main::@5/main::x#1 )
  main::y#0 = 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  main::y#4 = phi( main::@1/main::y#0, main::@4/main::y#1 )
  main::x#4 = phi( main::@1/main::x#7, main::@4/main::x#6 )
  main::a#0 = 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@6
  main::y#2 = phi( main::@2/main::y#4, main::@6/main::y#5 )
  main::x#2 = phi( main::@2/main::x#4, main::@6/main::x#5 )
  main::a#2 = phi( main::@2/main::a#0, main::@6/main::a#1 )
  main::val1#0 = main::a#2 + main::x#2
  print::idx#0 = main::y#2
  print::val#0 = main::val1#0
  call print
  to:main::@6
main::@6: scope:[main]  from main::@3
  main::y#5 = phi( main::@3/main::y#2 )
  main::x#5 = phi( main::@3/main::x#2 )
  main::a#3 = phi( main::@3/main::a#2 )
  main::a#1 = main::a#3 + rangenext(0,$64)
  main::$2 = main::a#1 != rangelast(0,$64)
  if(main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@6
  main::x#6 = phi( main::@6/main::x#5 )
  main::y#3 = phi( main::@6/main::y#5 )
  main::y#1 = main::y#3 + rangenext(0,$64)
  main::$3 = main::y#1 != rangelast(0,$64)
  if(main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  main::x#3 = phi( main::@4/main::x#6 )
  main::x#1 = main::x#3 + rangenext(0,$64)
  main::$4 = main::x#1 != rangelast(0,$64)
  if(main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return

void print(char idx , char val)
print: scope:[print]  from main::@3
  print::idx#1 = phi( main::@3/print::idx#0 )
  print::val#1 = phi( main::@3/print::val#0 )
  print::SCREEN[print::idx#1] = print::val#1
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool main::$2
bool main::$3
bool main::$4
char main::a
char main::a#0
char main::a#1
char main::a#2
char main::a#3
char main::val1
char main::val1#0
char main::x
char main::x#0
char main::x#1
char main::x#2
char main::x#3
char main::x#4
char main::x#5
char main::x#6
char main::x#7
char main::y
char main::y#0
char main::y#1
char main::y#2
char main::y#3
char main::y#4
char main::y#5
void print(char idx , char val)
__constant char * const print::SCREEN = (char *)$400
char print::idx
char print::idx#0
char print::idx#1
char print::val
char print::val#0
char print::val#1

Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Alias main::a#2 = main::a#3 
Alias main::x#2 = main::x#5 main::x#6 main::x#3 
Alias main::y#2 = main::y#5 main::y#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values main::x#2 main::x#4
Identical Phi Values main::y#2 main::y#4
Identical Phi Values print::val#1 print::val#0
Identical Phi Values print::idx#1 print::idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values main::x#4 main::x#7
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$2 [12] if(main::a#1!=rangelast(0,$64)) goto main::@3
Simple Condition main::$3 [15] if(main::y#1!=rangelast(0,$64)) goto main::@2
Simple Condition main::$4 [18] if(main::x#1!=rangelast(0,$64)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::x#0 = 0
Constant main::y#0 = 0
Constant main::a#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [10] main::a#1 = ++ main::a#2 to ++
Resolved ranged comparison value [12] if(main::a#1!=rangelast(0,$64)) goto main::@3 to $65
Resolved ranged next value [13] main::y#1 = ++ main::y#4 to ++
Resolved ranged comparison value [15] if(main::y#1!=rangelast(0,$64)) goto main::@2 to $65
Resolved ranged next value [16] main::x#1 = ++ main::x#7 to ++
Resolved ranged comparison value [18] if(main::x#1!=rangelast(0,$64)) goto main::@1 to $65
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $65 in [8] if(main::a#1!=$65) goto main::@3
Adding number conversion cast (unumber) $65 in [10] if(main::y#1!=$65) goto main::@2
Adding number conversion cast (unumber) $65 in [12] if(main::x#1!=$65) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $65
Simplifying constant integer cast $65
Simplifying constant integer cast $65
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $65
Finalized unsigned number type (char) $65
Finalized unsigned number type (char) $65
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::x#0
Inlining constant with var siblings main::y#0
Inlining constant with var siblings main::a#0
Constant inlined main::a#0 = 0
Constant inlined main::x#0 = 0
Constant inlined main::y#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@7(between main::@5 and main::@1)
Added new block during phi lifting main::@8(between main::@4 and main::@2)
Added new block during phi lifting main::@9(between main::@6 and main::@3)
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to print:7 

Created 3 initial phi equivalence classes
Coalesced [15] main::x#8 = main::x#1
Coalesced [16] main::y#6 = main::y#1
Coalesced [17] main::a#4 = main::a#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@7
Culled Empty Block label main::@8
Culled Empty Block label main::@9
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [1] main::x#7 = phi( main/0, main::@5/main::x#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [2] main::y#4 = phi( main::@1/0, main::@4/main::y#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@6
  [3] main::a#2 = phi( main::@2/0, main::@6/main::a#1 )
  [4] main::val1#0 = main::a#2 + main::x#7
  [5] print::idx#0 = main::y#4
  [6] print::val#0 = main::val1#0
  [7] call print
  to:main::@6
main::@6: scope:[main]  from main::@3
  [8] main::a#1 = ++ main::a#2
  [9] if(main::a#1!=$65) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@6
  [10] main::y#1 = ++ main::y#4
  [11] if(main::y#1!=$65) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [12] main::x#1 = ++ main::x#7
  [13] if(main::x#1!=$65) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [14] return 
  to:@return

void print(char idx , char val)
print: scope:[print]  from main::@3
  [15] print::SCREEN[print::idx#0] = print::val#0
  to:print::@return
print::@return: scope:[print]  from print
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::a
char main::a#1 // 1501.5
char main::a#2 // 600.5999999999999
char main::val1
char main::val1#0 // 1001.0
char main::x
char main::x#1 // 16.5
char main::x#7 // 93.0
char main::y
char main::y#1 // 151.5
char main::y#4 // 150.375
void print(char idx , char val)
char print::idx
char print::idx#0 // 5501.0
char print::val
char print::val#0 // 11002.0

Initial phi equivalence classes
[ main::x#7 main::x#1 ]
[ main::y#4 main::y#1 ]
[ main::a#2 main::a#1 ]
Added variable main::val1#0 to live range equivalence class [ main::val1#0 ]
Added variable print::idx#0 to live range equivalence class [ print::idx#0 ]
Added variable print::val#0 to live range equivalence class [ print::val#0 ]
Complete equivalence classes
[ main::x#7 main::x#1 ]
[ main::y#4 main::y#1 ]
[ main::a#2 main::a#1 ]
[ main::val1#0 ]
[ print::idx#0 ]
[ print::val#0 ]
Allocated zp[1]:2 [ print::val#0 ]
Allocated zp[1]:3 [ print::idx#0 ]
Allocated zp[1]:4 [ main::a#2 main::a#1 ]
Allocated zp[1]:5 [ main::val1#0 ]
Allocated zp[1]:6 [ main::y#4 main::y#1 ]
Allocated zp[1]:7 [ main::x#7 main::x#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] main::val1#0 = main::a#2 + main::x#7 [ main::x#7 main::y#4 main::a#2 main::val1#0 ] (  [ main::x#7 main::y#4 main::a#2 main::val1#0 ] { { print::idx#0 = main::y#4 } { print::val#0 = main::val1#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ main::x#7 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::y#4 main::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::a#2 main::a#1 ]
Statement [4] main::val1#0 = main::a#2 + main::x#7 [ main::x#7 main::y#4 main::a#2 main::val1#0 ] (  [ main::x#7 main::y#4 main::a#2 main::val1#0 ] { { print::idx#0 = main::y#4 } { print::val#0 = main::val1#0 } }  ) always clobbers reg byte a 
Potential registers zp[1]:7 [ main::x#7 main::x#1 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::y#4 main::y#1 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::a#2 main::a#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::val1#0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ print::idx#0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:2 [ print::val#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 11,002: zp[1]:2 [ print::val#0 ] 5,501: zp[1]:3 [ print::idx#0 ] 
Uplift Scope [main] 2,102.1: zp[1]:4 [ main::a#2 main::a#1 ] 1,001: zp[1]:5 [ main::val1#0 ] 301.88: zp[1]:6 [ main::y#4 main::y#1 ] 109.5: zp[1]:7 [ main::x#7 main::x#1 ] 
Uplift Scope [] 

Uplifting [print] best 55435 combination reg byte a [ print::val#0 ] reg byte x [ print::idx#0 ] 
Uplifting [main] best 35535 combination reg byte y [ main::a#2 main::a#1 ] reg byte a [ main::val1#0 ] reg byte x [ main::y#4 main::y#1 ] zp[1]:7 [ main::x#7 main::x#1 ] 
Limited combination testing to 100 combinations of 108 possible.
Uplifting [] best 35535 combination 
Attempting to uplift remaining variables inzp[1]:7 [ main::x#7 main::x#1 ]
Uplifting [main] best 35535 combination zp[1]:7 [ main::x#7 main::x#1 ] 
Allocated (was zp[1]:7) zp[1]:2 [ main::x#7 main::x#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="var-register.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label x = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::x#7 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [1] phi main::x#7 = main::x#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [2] phi main::y#4 = 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [2] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    // [2] phi main::y#4 = main::y#1 [phi:main::@4->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [3] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [3] phi main::a#2 = 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // [3] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  __b3_from___b6:
    // [3] phi main::a#2 = main::a#1 [phi:main::@6->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [4] main::val1#0 = main::a#2 + main::x#7 -- vbuaa=vbuyy_plus_vbuz1 
    tya
    clc
    adc.z x
    // [5] print::idx#0 = main::y#4
    // [6] print::val#0 = main::val1#0
    // [7] call print
    jsr print
    jmp __b6
    // main::@6
  __b6:
    // [8] main::a#1 = ++ main::a#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if(main::a#1!=$65) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$65
    bne __b3_from___b6
    jmp __b4
    // main::@4
  __b4:
    // [10] main::y#1 = ++ main::y#4 -- vbuxx=_inc_vbuxx 
    inx
    // [11] if(main::y#1!=$65) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne __b2_from___b4
    jmp __b5
    // main::@5
  __b5:
    // [12] main::x#1 = ++ main::x#7 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [13] if(main::x#1!=$65) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$65
    cmp.z x
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // print
// void print(__register(X) char idx, __register(A) char val)
print: {
    .label SCREEN = $400
    // [15] print::SCREEN[print::idx#0] = print::val#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    jmp __breturn
    // print::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b6 with __b3
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b5 with __b1
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b6:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b6:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
char main::a
char main::a#1 // reg byte y 1501.5
char main::a#2 // reg byte y 600.5999999999999
char main::val1
char main::val1#0 // reg byte a 1001.0
char main::x
char main::x#1 // x zp[1]:2 16.5
char main::x#7 // x zp[1]:2 93.0
char main::y
char main::y#1 // reg byte x 151.5
char main::y#4 // reg byte x 150.375
void print(char idx , char val)
__constant char * const print::SCREEN = (char *) 1024
char print::idx
char print::idx#0 // reg byte x 5501.0
char print::val
char print::val#0 // reg byte a 11002.0

zp[1]:2 [ main::x#7 main::x#1 ]
reg byte x [ main::y#4 main::y#1 ]
reg byte y [ main::a#2 main::a#1 ]
reg byte a [ main::val1#0 ]
reg byte x [ print::idx#0 ]
reg byte a [ print::val#0 ]


FINAL ASSEMBLER
Score: 22542

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="var-register.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label x = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::x#7 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [1] phi main::x#7 = main::x#1 [phi:main::@5->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [2] phi main::y#4 = 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [2] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
    // [2] phi main::y#4 = main::y#1 [phi:main::@4->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // [3] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [3] phi main::a#2 = 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // [3] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
    // [3] phi main::a#2 = main::a#1 [phi:main::@6->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // byte val1 = a+x
    // [4] main::val1#0 = main::a#2 + main::x#7 -- vbuaa=vbuyy_plus_vbuz1 
    tya
    clc
    adc.z x
    // print(y, val1)
    // [5] print::idx#0 = main::y#4
    // [6] print::val#0 = main::val1#0
    // [7] call print
    jsr print
    // main::@6
    // for( byte a: 0..100 )
    // [8] main::a#1 = ++ main::a#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if(main::a#1!=$65) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$65
    bne __b3
    // main::@4
    // for( byte y: 0..100 )
    // [10] main::y#1 = ++ main::y#4 -- vbuxx=_inc_vbuxx 
    inx
    // [11] if(main::y#1!=$65) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne __b2
    // main::@5
    // for( byte x: 0..100 )
    // [12] main::x#1 = ++ main::x#7 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [13] if(main::x#1!=$65) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$65
    cmp.z x
    bne __b1
    // main::@return
    // }
    // [14] return 
    rts
}
  // print
// void print(__register(X) char idx, __register(A) char val)
print: {
    .label SCREEN = $400
    // SCREEN[idx] = val
    // [15] print::SCREEN[print::idx#0] = print::val#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // print::@return
    // }
    // [16] return 
    rts
}
  // File Data

