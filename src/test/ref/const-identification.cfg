@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/(byte) main::i#1 )
  [6] *((const byte*) plots#0 + (byte) main::i#2) ← (byte) main::i#2
  [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [8] (byte) main::i#1 ← ++ (byte) main::i#2
  [9] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [10] phi()
  [11] call line 
  to:main::@2
line: scope:[line]  from main::@2
  [12] phi()
  to:line::@1
line::@1: scope:[line]  from line line::@2
  [13] (byte) line::x#2 ← phi( line/(const byte) line::x0#0 line::@2/(byte) line::x#1 )
  [14] (byte) plot::x#1 ← (byte) line::x#2
  [15] call plot 
  to:line::@2
line::@2: scope:[line]  from line::@1
  [16] (byte) line::x#1 ← ++ (byte) line::x#2
  [17] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@1
  to:line::@return
line::@return: scope:[line]  from line::@2
  [18] return 
  to:@return
plot: scope:[plot]  from line::@1
  [19] (byte) plot::idx#0 ← *((const byte*) plots#0 + (byte) plot::x#1)
  [20] (byte/signed word/word/dword/signed dword~) plot::$0 ← *((const byte*) SCREEN#0 + (byte) plot::idx#0) + (byte/signed byte/word/signed word/dword/signed dword) 1
  [21] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte/signed word/word/dword/signed dword~) plot::$0
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [22] return 
  to:@return
