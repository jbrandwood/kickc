
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  SCREEN[0] = main::dy-1/$10
  SCREEN[1] = main::dy-1>>4
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
label __start::@1
label __start::@return
void main()
label main::@return
const nomodify byte main::dy = $80

Adding number conversion cast (unumber) main::dy-1/$10 in SCREEN[0] = main::dy-1/$10
Adding number conversion cast (unumber) 1 in SCREEN[0] = ((unumber)) main::dy-1/$10
Adding number conversion cast (unumber) 0 in SCREEN[0] = ((unumber)) main::dy-(unumber)1/$10
Adding number conversion cast (unumber) main::dy-1>>4 in SCREEN[1] = main::dy-1>>4
Adding number conversion cast (unumber) 1 in SCREEN[1] = ((unumber)) main::dy-1>>4
Adding number conversion cast (unumber) 1 in SCREEN[1] = ((unumber)) main::dy-(unumber)1>>4
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) $10 in SCREEN[(unumber)0] = ((unumber)) main::dy-(unumber)1/$10
Adding number conversion cast (unumber) 4 in SCREEN[(unumber)1] = ((unumber)) main::dy-(unumber)1>>4
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast SCREEN[(unumber)0] = (unumber)main::dy-(unumber)1/(unumber)$10
Inlining cast SCREEN[(unumber)1] = (unumber)main::dy-(unumber)1>>(unumber)4
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast main::dy-(unumber)1/(unumber)$10
Simplifying constant integer cast 1
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast main::dy-(unumber)1>>(unumber)4
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Finalized unsigned number type $10
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 4
Finalized unsigned number type 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero SCREEN in [0] SCREEN[0] = main::dy-1/$10
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *SCREEN = main::dy-1/$10
  [1] *(SCREEN+1) = main::dy-1>>4
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *SCREEN = main::dy-1/$10 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(SCREEN+1) = main::dy-1>>4 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test parenthesising of constants
// See https://gitlab.com/camelot/kickc/-/issues/470#note_356486132
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .const dy = $80
    // [0] *SCREEN = main::dy-1/$10 -- _deref_pbuc1=vbuc2 
    // A parenthesis should be added in the ASM to ensure operator precedence 
    lda #(dy-1)/$10
    sta SCREEN
    // [1] *(SCREEN+1) = main::dy-1>>4 -- _deref_pbuc1=vbuc2 
    // No parenthesis should be added in the ASM because minus (-) has higher precedence than shift (>>)
    lda #dy-1>>4
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
label main::@return
const nomodify byte main::dy = $80



FINAL ASSEMBLER
Score: 18

  // File Comments
// Test parenthesising of constants
// See https://gitlab.com/camelot/kickc/-/issues/470#note_356486132
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .const dy = $80
    // SCREEN[0] = (dy-1)/16
    // [0] *SCREEN = main::dy-1/$10 -- _deref_pbuc1=vbuc2 
    // A parenthesis should be added in the ASM to ensure operator precedence 
    lda #(dy-1)/$10
    sta SCREEN
    // SCREEN[1] = (dy-1)>>4
    // [1] *(SCREEN+1) = main::dy-1>>4 -- _deref_pbuc1=vbuc2 
    // No parenthesis should be added in the ASM because minus (-) has higher precedence than shift (>>)
    lda #dy-1>>4
    sta SCREEN+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

