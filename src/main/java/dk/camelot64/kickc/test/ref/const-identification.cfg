@begin: scope:[]  from
  to:@3
@3: scope:[]  from @begin
  [0] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @3
main: scope:[main]  from @3
  [1] phi() [ ] ( main:0 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [2] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 ) [ main::i#2 ] ( main:0 [ main::i#2 ] )
  [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:0 [ main::i#2 ] )
  [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] ( main:0 [ main::i#2 ] )
  [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:0 [ main::i#1 ] )
  [6] if((byte) main::i#1!=(byte) 40) goto main::@1 [ main::i#1 ] ( main:0 [ main::i#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  [7] call line param-assignment [ ] ( main:0 [ ] )
  to:main::@5
main::@5: scope:[main]  from main::@2
  [8] if(true) goto main::@2 [ ] ( main:0 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@5
  [9] return  [ ] ( main:0 [ ] )
  to:@return
line: scope:[line]  from main::@2
  [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ] ( main:0::line:7 [ ] )
  to:line::@2
line::@2: scope:[line]  from line line::@8
  [11] (byte) line::x#2 ← phi( line/(byte) 0 line::@8/(byte) line::x#1 ) [ line::x#2 ] ( main:0::line:7 [ line::x#2 ] )
  [12] (byte) plot::x#1 ← (byte) line::x#2 [ line::x#2 plot::x#1 ] ( main:0::line:7 [ line::x#2 plot::x#1 ] )
  [13] call plot param-assignment [ line::x#2 ] ( main:0::line:7 [ line::x#2 ] )
  to:line::@8
line::@8: scope:[line]  from line::@2
  [14] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x#1 ] ( main:0::line:7 [ line::x#1 ] )
  [15] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2 [ line::x#1 ] ( main:0::line:7 [ line::x#1 ] )
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  [16] return  [ ] ( main:0::line:7 [ ] )
  to:@return
line::@1: scope:[line]  from line
  [17] call plot param-assignment [ ] ( main:0::line:7 [ ] )
  to:line::@return
plot: scope:[plot]  from line::@1 line::@2
  [18] (byte) plot::x#2 ← phi( line::@1/(byte) 0 line::@2/(byte) plot::x#1 ) [ plot::x#2 ] ( main:0::line:7::plot:13 [ line::x#2 plot::x#2 ] main:0::line:7::plot:17 [ plot::x#2 ] )
  [19] (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2 [ plot::idx#0 ] ( main:0::line:7::plot:13 [ line::x#2 plot::idx#0 ] main:0::line:7::plot:17 [ plot::idx#0 ] )
  [20] (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0 [ plot::idx#0 plot::$1 ] ( main:0::line:7::plot:13 [ line::x#2 plot::idx#0 plot::$1 ] main:0::line:7::plot:17 [ plot::idx#0 plot::$1 ] )
  [21] (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1 [ plot::idx#0 plot::$2 ] ( main:0::line:7::plot:13 [ line::x#2 plot::idx#0 plot::$2 ] main:0::line:7::plot:17 [ plot::idx#0 plot::$2 ] )
  [22] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2 [ ] ( main:0::line:7::plot:13 [ line::x#2 ] main:0::line:7::plot:17 [ ] )
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [23] return  [ ] ( main:0::line:7::plot:13 [ line::x#2 ] main:0::line:7::plot:17 [ ] )
  to:@return
