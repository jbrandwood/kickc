const word* COLCRS = (word*) 85
const nomodify byte* CRSINH = (byte*) 752
const byte* DIGITS[]  = "0123456789abcdef"atz
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const nomodify byte** OLDADR = (byte**) 94
const nomodify byte* OLDCHR = (byte*) 93
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
const dword* RADIX_DECIMAL_VALUES_LONG[]  = { $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a }
const byte* ROWCRS = (byte*) 84
const nomodify byte** SAVMSC = (byte**) 88
const byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
const byte SIZEOF_WORD = 2
void clrscr()
void cputc(volatile byte cputc::c)
volatile byte cputc::c loadstore zp[1]:161 7.750002500125E10
byte cputc::convertToScreenCode1_return
byte cputc::convertToScreenCode1_return#0 reg byte x 1.833333333336667E11
byte* cputc::convertToScreenCode1_v
const byte* cputc::convertToScreenCode1_v#0 convertToScreenCode1_v = &cputc::c
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 1.0000000001E10
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 s zp[2]:138 5.0000000005E9
to_nomodify byte* cputs::s#26 s zp[2]:138 1.5000500002E10
to_nomodify byte* cputs::s#27 s zp[2]:138 1000001.0
byte* cursorLocation()
word~ cursorLocation::$0 zp[2]:166 2.00000000000002E14
byte*~ cursorLocation::$1 zp[2]:166 2.00000000000002E14
word~ cursorLocation::$3 zp[2]:166 1.500000000000015E14
word~ cursorLocation::$4 zp[2]:168 2.00000000000002E14
word~ cursorLocation::$5 zp[2]:166 2.00000000000002E14
byte* cursorLocation::return
byte* cursorLocation::return#0 return zp[2]:166 2.000000000002E12
byte* cursorLocation::return#1 return zp[2]:166 2.775000000000075E13
byte* cursorLocation::return#3 return zp[2]:166 2.0000000000002E13
const word* entries[]  = { $78f, $7a4, $7c7, $591, $687, $601, $7c0, $621, $751, $730, $6b8, $791, $71f, $659, $6bf, $714, $6b2, $76c, $793, $78b, $79f, $6dc, $796, $64b, $7bb, $78a, $7cc, $7d0, $608, $6f4, $697, $6e0, $72c, $716, $69b, $719, $7ac, $76b, $629, $60b, $362, $618, $7c4, $641, $7b2, $6ca, $5e3, $683, $73b, $78d, $5eb, $740, $7b1, $744, $709, $7d7, $74a, $708, $6d5, $733, $6af, $5d7, $771, $2fb, $688, $742, $7c3, $5d4, $739, $7c9, $6c9, $752, $67a, $712, $681, $6e8, $79e, $757, $718, $74c, $7cb, $6e3, $6f7, $729, $7b0, $737, $6d4, $6bd, $763, $6db, $11e, $7b8, $7b9, $677, $710, $7c2, $6f3, $745, $7a1, $760, $700, $713, $750, $6fe, $72f, $7c1, $723, $732, $785, $6c7, $663, $71d, $71c, $7b5, $5fb, $6ea, $3b, $736, $78c, $773, $6c2, $3a5, $573, $6d9, $6d7, $169, $5fa, $6f6, $43f, $635, $789, $703, $717, $6c4, $6e5, $755, $6ba, $20e, $6ad, $6fd, $764, $779, $67e, $711, $686, $79b, $72b, $633, $6de, $7be, $7d9, $6dd, $29e, $7bf, $5f4, $756, $704, $7a0, $236, $782, $75a, $74e, $707, $6c3, $6bc, $70d, $7d3, $63c, $61e, $73d, $777, $741, $6cb, $6d0, $65b, $6c1, $6d1, $735, $62e, $75c, $75b, $795, $6e4, $695, $6ff, $72d, $6a1, $6ce, $6f5, $79c, $754, $7c5, $66b, $74f, $772, $6be, $7a6, $5de, $787, $79a }
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte gotoxy::x
const byte gotoxy::x#1 x = 0
byte gotoxy::y
const byte gotoxy::y#1 y = 0
void main()
word~ main::$21 zp[2]:151 667.3333333333334
word~ main::$22 zp[2]:155 2002.0
word~ main::$34 zp[2]:142 14.428571428571429
word~ main::$35 zp[2]:140 13.931034482758621
word~ main::$41 zp[2]:142 100.1
word~ main::$42 zp[2]:149 85.19148936170212
word~ main::$43 zp[2]:140 108.21621621621621
word*~ main::$47 zp[2]:157 101.0
word*~ main::$48 zp[2]:159 202.0
word*~ main::$49 zp[2]:138 202.0
word*~ main::$50 zp[2]:138 202.0
word*~ main::$51 zp[2]:142 202.0
word*~ main::$52 zp[2]:140 202.0
word*~ main::$53 zp[2]:151 1001.0
word*~ main::$54 zp[2]:153 2002.0
word*~ main::$55 zp[2]:155 2002.0
word*~ main::$56 zp[2]:138 2002.0
word*~ main::$57 zp[2]:138 2002.0
word*~ main::$58 zp[2]:138 2002.0
word*~ main::$59 zp[2]:142 2002.0
word*~ main::$60 zp[2]:140 2002.0
word*~ main::$61 zp[2]:140 2002.0
word~ main::$8 zp[2]:157 202.0
word main::i
word main::i#1 i zp[2]:128 22.0
word main::i#2 i zp[2]:128 5.125
word main::i1
word main::i1#1 i1 zp[2]:130 22.0
word main::i1#2 i1 zp[2]:130 29.228571428571428
word main::j
word main::j#0 j zp[2]:136 22.0
word main::j#1 j zp[2]:136 202.0
word main::j#10 j zp[2]:136 12.285714285714286
word main::j1
word main::j1#0 j1 zp[2]:132 22.0
word main::j1#1 j1 zp[2]:132 202.0
word main::j1#2 j1 zp[2]:132 37.765625
word main::k
word main::k#0 k zp[2]:134 202.0
word main::k#1 k zp[2]:134 2002.0
word main::k#10 k zp[2]:134 85.10000000000001
dword main::mul
dword main::mul#0 mul zp[4]:144 101.0
dword main::mul1
dword main::mul1#0 mul1 zp[4]:144 2002.0
dword main::mul2
dword main::mul2#0 mul2 zp[4]:144 1001.0
word main::num_entries
const word main::num_entries#0 num_entries = $c8*SIZEOF_WORD/SIZEOF_WORD
const byte* main::s[$19]  = "looking a+b=2020 within "at
const byte* main::s1[$a]  = " entries
"at
const byte* main::s10[7]  = "=2020
"at
const byte* main::s11[$c]  = "multiplied "at
const byte* main::s2[$1c]  = "
looking a+b+c=2020 within "at
const byte* main::s4[2]  = "."at
const byte* main::s5[2]  = "
"at
const byte* main::s6[$e]  = "match found ["at
const byte* main::s7[2]  = "]"at
const byte* main::s8[3]  = "+["at
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#0 destination zp[2]:153 3.333333333336667E11
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:153 1.0E18
byte* memcpy::dst#2 dst zp[2]:153 1.00000333333333325E18
byte* memcpy::dst#4 dst zp[2]:153 2.0000000000002E13
word memcpy::num
const word memcpy::num#0 num = (word)$28*$17
void* memcpy::return
void* memcpy::source
byte* memcpy::source#0 source zp[2]:151 3.333333333336667E11
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:151 2.0E18
byte* memcpy::src#2 src zp[2]:151 1.0000025E18
byte* memcpy::src#4 src zp[2]:151 1.0000000000001E13
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:168 1.2500125E17
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 dst zp[2]:155 2.0E18
byte* memset::dst#2 dst zp[2]:155 1.3333366666666665E18
byte* memset::dst#4 dst zp[2]:155 2.0000000000002E13
byte* memset::end
byte* memset::end#0 end zp[2]:151 1.66668333333333312E17
word memset::num
word memset::num#2 num zp[2]:151 1.0000000000001E13
void* memset::return
void* memset::str
byte* memset::str#0 str zp[2]:155 1.000000000001E12
void* memset::str#3 str zp[2]:155 3.333333333373334E11
void* memset::str#7 str zp[2]:155 22.0
void* memset::str#8 str zp[2]:155 2.000000000002E12
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 reg byte a 2.00000002E8
word mul16u::a
word mul16u::a#0 a zp[2]:142 1.00000001E8
word mul16u::a#1 a zp[2]:142 67.33333333333333
word mul16u::a#2 a zp[2]:142 667.3333333333334
word mul16u::a#3 a zp[2]:142 667.3333333333334
word mul16u::a#4 a zp[2]:142 6.666833416666667E7
word mul16u::a#7 a zp[2]:142 6052.0
word mul16u::b
word mul16u::b#0 b zp[2]:140 202.0
word mul16u::b#1 b zp[2]:140 2002.0
word mul16u::b#2 b zp[2]:140 2002.0
word mul16u::b#3 b zp[2]:140 2103.0
dword mul16u::mb
dword mul16u::mb#0 mb zp[4]:162 20002.0
dword mul16u::mb#1 mb zp[4]:162 2.00000002E8
dword mul16u::mb#2 mb zp[4]:162 4.2858572E7
dword mul16u::res
dword mul16u::res#1 res zp[4]:144 2.00000002E8
dword mul16u::res#2 res zp[4]:144 3.750026325E7
dword mul16u::res#6 res zp[4]:144 1.00000001E8
dword mul16u::return
dword mul16u::return#2 return zp[4]:144 202.0
dword mul16u::return#3 return zp[4]:144 2002.0
dword mul16u::return#4 return zp[4]:144 2002.0
void newline()
byte* newline::start
byte* newline::start#0 start zp[2]:155 7.5000000000075E11
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 reg byte a 20002.0
byte printf_number_buffer::buffer_sign#1 reg byte a 20002.0
byte printf_number_buffer::buffer_sign#10 reg byte a 110002.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_zero_padding
word printf_uint::uvalue
word printf_uint::uvalue#10 uvalue zp[2]:138 2002.0
word printf_uint::uvalue#11 uvalue zp[2]:138 2002.0
word printf_uint::uvalue#12 uvalue zp[2]:138 8205.5
word printf_uint::uvalue#2 uvalue zp[2]:138 202.0
word printf_uint::uvalue#3 uvalue zp[2]:138 202.0
word printf_uint::uvalue#4 uvalue zp[2]:138 202.0
word printf_uint::uvalue#5 uvalue zp[2]:138 202.0
word printf_uint::uvalue#6 uvalue zp[2]:138 2002.0
word printf_uint::uvalue#7 uvalue zp[2]:138 2002.0
word printf_uint::uvalue#8 uvalue zp[2]:138 2002.0
word printf_uint::uvalue#9 uvalue zp[2]:138 2002.0
void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
struct printf_format_number printf_ulong::format
byte printf_ulong::format_justify_left
byte printf_ulong::format_min_length
byte printf_ulong::format_radix
byte printf_ulong::format_sign_always
byte printf_ulong::format_upper_case
byte printf_ulong::format_zero_padding
dword printf_ulong::uvalue
dword printf_ulong::uvalue#0 uvalue zp[4]:144 202.0
dword printf_ulong::uvalue#1 uvalue zp[4]:144 2002.0
dword printf_ulong::uvalue#2 uvalue zp[4]:144 5551.5
void putchar(byte putchar::code)
byte putchar::code
byte* putchar::loc
byte* putchar::loc#0 loc zp[2]:166 1.000000000001E12
byte putchar::newChar
byte putchar::newChar#0 reg byte a 1.5000000000015E12
const byte* rawmap[$100]  = kickasm {{ .var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}
 }}
void setcursor()
byte setcursor::c
byte setcursor::c#0 reg byte x 7.50000000000075E12
byte setcursor::c#1 reg byte a 2.0000000000002E13
byte* setcursor::loc
byte* setcursor::loc#0 loc zp[2]:166 1.0000000000001E13
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
byte~ ultoa::$10 reg byte a 2.000000002E9
byte~ ultoa::$11 reg byte a 200002.0
byte* ultoa::buffer
byte* ultoa::buffer#11 buffer zp[2]:155 2.8572857185714287E8
byte* ultoa::buffer#14 buffer zp[2]:155 1.5000000015E9
byte* ultoa::buffer#3 buffer zp[2]:155 200002.0
byte* ultoa::buffer#4 buffer zp[2]:155 2.000000002E9
byte ultoa::digit
byte ultoa::digit#1 digit zp[1]:148 2.000000002E9
byte ultoa::digit#2 digit zp[1]:148 2.85714286E8
dword ultoa::digit_value
dword ultoa::digit_value#0 digit_value zp[4]:162 6.000000005999999E8
dword* ultoa::digit_values
byte ultoa::max_digits
byte ultoa::radix
byte ultoa::started
byte ultoa::started#2 reg byte x 5.000000005E8
byte ultoa::started#4 reg byte x 1.000000001E9
dword ultoa::value
dword ultoa::value#0 value zp[4]:144 1.000000001E9
dword ultoa::value#1 value zp[4]:144 55001.0
dword ultoa::value#2 value zp[4]:144 5.714428578571429E8
dword ultoa::value#6 value zp[4]:144 1.5000000015E9
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0 buffer zp[2]:155 1.37500000025E9
byte ultoa_append::digit
byte ultoa_append::digit#1 reg byte x 1.000000000000001E15
byte ultoa_append::digit#2 reg byte x 1.0000050000000015E15
dword ultoa_append::return
dword ultoa_append::return#0 return zp[4]:144 2.000000002E9
dword ultoa_append::sub
dword ultoa_append::sub#0 sub zp[4]:162 3.333335000000005E14
dword ultoa_append::value
dword ultoa_append::value#0 value zp[4]:144 3.666666667333333E9
dword ultoa_append::value#1 value zp[4]:144 2.000000000000002E15
dword ultoa_append::value#2 value zp[4]:144 5.0000183333333425E14
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 2.000000002E9
byte~ utoa::$11 reg byte a 200002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:151 2.8572857185714287E8
byte* utoa::buffer#14 buffer zp[2]:151 1.5000000015E9
byte* utoa::buffer#3 buffer zp[2]:151 200002.0
byte* utoa::buffer#4 buffer zp[2]:151 2.000000002E9
byte utoa::digit
byte utoa::digit#1 digit zp[1]:148 2.000000002E9
byte utoa::digit#2 digit zp[1]:148 2.85714286E8
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:166 6.000000005999999E8
word* utoa::digit_values
byte utoa::max_digits
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 5.000000005E8
byte utoa::started#4 reg byte x 1.000000001E9
word utoa::value
word utoa::value#0 value zp[2]:138 1.000000001E9
word utoa::value#1 value zp[2]:138 55001.0
word utoa::value#2 value zp[2]:138 5.714428578571429E8
word utoa::value#6 value zp[2]:138 1.5000000015E9
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:151 1.37500000025E9
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.000000000000001E15
byte utoa_append::digit#2 reg byte x 1.0000050000000015E15
word utoa_append::return
word utoa_append::return#0 return zp[2]:138 2.000000002E9
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:166 3.333335000000005E14
word utoa_append::value
word utoa_append::value#0 value zp[2]:138 3.666666667333333E9
word utoa_append::value#1 value zp[2]:138 2.000000000000002E15
word utoa_append::value#2 value zp[2]:138 5.0000183333333425E14

zp[2]:128 [ main::i#2 main::i#1 ]
zp[2]:130 [ main::i1#2 main::i1#1 ]
zp[2]:132 [ main::j1#2 main::j1#0 main::j1#1 ]
zp[2]:134 [ main::k#10 main::k#0 main::k#1 ]
zp[2]:136 [ main::j#10 main::j#0 main::j#1 ]
zp[2]:138 [ printf_uint::uvalue#12 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#6 printf_uint::uvalue#7 printf_uint::uvalue#8 printf_uint::uvalue#9 printf_uint::uvalue#10 printf_uint::uvalue#11 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 main::$56 main::$57 main::$58 main::$49 main::$50 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 cputs::s#26 cputs::s#27 cputs::s#0 ]
zp[2]:140 [ mul16u::b#3 mul16u::b#0 mul16u::b#1 mul16u::b#2 main::$60 main::$61 main::$52 main::$43 main::$35 ]
zp[2]:142 [ mul16u::a#4 mul16u::a#7 mul16u::a#1 mul16u::a#2 mul16u::a#3 mul16u::a#0 main::$59 main::$51 main::$41 main::$34 ]
zp[4]:144 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16u::return#4 mul16u::return#2 printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 main::mul2#0 main::mul#0 main::mul1#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte a [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
zp[1]:148 [ ultoa::digit#2 ultoa::digit#1 utoa::digit#2 utoa::digit#1 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
zp[2]:149 [ main::$42 ]
zp[2]:151 [ main::$53 main::$21 memcpy::src#2 memcpy::src#4 memcpy::src#1 memcpy::source#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 memset::num#2 memset::end#0 ]
zp[2]:153 [ main::$54 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memcpy::destination#0 ]
zp[2]:155 [ main::$55 main::$22 ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 memset::str#3 memset::str#7 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 newline::start#0 ]
zp[2]:157 [ main::$47 main::$8 ]
zp[2]:159 [ main::$48 ]
reg byte a [ cputs::c#1 ]
zp[1]:161 [ cputc::c ]
reg byte a [ mul16u::$1 ]
reg byte x [ cputc::convertToScreenCode1_return#0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:162 [ ultoa::digit_value#0 ultoa_append::sub#0 mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[2]:166 [ cursorLocation::return#3 setcursor::loc#0 cursorLocation::return#1 cursorLocation::return#0 putchar::loc#0 cursorLocation::$0 cursorLocation::$1 cursorLocation::$3 cursorLocation::$5 utoa::digit_value#0 utoa_append::sub#0 ]
reg byte x [ setcursor::c#0 ]
reg byte a [ setcursor::c#1 ]
reg byte a [ putchar::newChar#0 ]
zp[2]:168 [ memcpy::src_end#0 cursorLocation::$4 ]
mem[12] [ printf_buffer ]
