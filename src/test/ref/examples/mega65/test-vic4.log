Fixing struct type size struct F018_DMAGIC to 17
Fixing struct type SIZE_OF struct F018_DMAGIC to 17
Fixing struct type SIZE_OF struct F018_DMAGIC to 17
Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  asm { sei lda#0 tax tay taz map eom  }
  *IO_KEY = $47
  *IO_KEY = $53
  *IO_BANK = *IO_BANK | CRAM2K
  main::sc#0 = SCREEN
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::sc#2 = phi( main/main::sc#0, main::@2/main::sc#1 )
  main::$0 = main::sc#2 < SCREEN+$7d0
  if(main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::sc#3 = phi( main::@1/main::sc#2 )
  *main::sc#3 = '*'
  main::sc#1 = ++ main::sc#3
  to:main::@1
main::@3: scope:[main]  from main::@1
  main::col#0 = COLORS
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  main::col#2 = phi( main::@3/main::col#0, main::@5/main::col#1 )
  main::$1 = main::col#2 < COLORS+$7d0
  if(main::$1) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  main::col#3 = phi( main::@4/main::col#2 )
  main::$2 = < main::col#3
  *main::col#3 = main::$2
  main::col#1 = ++ main::col#3
  to:main::@4
main::@6: scope:[main]  from main::@4 main::@6
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)
  to:main::@6
main::@return: scope:[main]  from
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* COLORS = (byte*)$d800
const nomodify byte CRAM2K = 1
const nomodify to_volatile byte* IO_BANK = (byte*)$d030
const nomodify to_volatile byte* IO_KEY = (byte*)$d02f
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const nomodify byte* SCREEN = (byte*)$800
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*)$d000
void __start()
void main()
bool~ main::$0
bool~ main::$1
byte~ main::$2
byte* main::col
byte* main::col#0
byte* main::col#1
byte* main::col#2
byte* main::col#3
byte* main::sc
byte* main::sc#0
byte* main::sc#1
byte* main::sc#2
byte* main::sc#3

Adding number conversion cast (unumber) $47 in *IO_KEY = $47
Adding number conversion cast (unumber) $53 in *IO_KEY = $53
Adding number conversion cast (unumber) $7d0 in main::$0 = main::sc#2 < SCREEN+$7d0
Adding number conversion cast (unumber) $7d0 in main::$1 = main::col#2 < COLORS+$7d0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *IO_KEY = (unumber)$47
Inlining cast *IO_KEY = (unumber)$53
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53295
Simplifying constant pointer cast (byte*) 53296
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (byte*) 2048
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast $47
Simplifying constant integer cast $53
Simplifying constant integer cast $7d0
Simplifying constant integer cast $7d0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $47
Finalized unsigned number type (byte) $53
Finalized unsigned number type (word) $7d0
Finalized unsigned number type (word) $7d0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::sc#2 = main::sc#3 
Alias main::col#2 = main::col#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [7] if(main::sc#2<SCREEN+$7d0) goto main::@2
Simple Condition main::$1 [13] if(main::col#2<COLORS+$7d0) goto main::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::sc#0 = SCREEN
Constant main::col#0 = COLORS
Successful SSA optimization Pass2ConstantIdentification
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::sc#0
Inlining constant with var siblings main::col#0
Constant inlined main::col#0 = COLORS
Constant inlined main::sc#0 = SCREEN
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding NOP phi() at start of main::@3
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [13] main::col#4 = main::col#1
Coalesced [16] main::sc#4 = main::sc#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei lda#0 tax tay taz map eom  }
  [1] *IO_KEY = $47
  [2] *IO_KEY = $53
  [3] *IO_BANK = *IO_BANK | CRAM2K
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [4] main::sc#2 = phi( main/SCREEN, main::@2/main::sc#1 )
  [5] if(main::sc#2<SCREEN+$7d0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@4
  [6] main::col#2 = phi( main::@1/COLORS, main::@4/main::col#1 )
  [7] if(main::col#2<COLORS+$7d0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@5
  [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)
  to:main::@5
main::@4: scope:[main]  from main::@3
  [9] main::$2 = < main::col#2
  [10] *main::col#2 = main::$2
  [11] main::col#1 = ++ main::col#2
  to:main::@3
main::@2: scope:[main]  from main::@1
  [12] *main::sc#2 = '*'
  [13] main::sc#1 = ++ main::sc#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$2 22.0
byte* main::col
byte* main::col#1 22.0
byte* main::col#2 13.75
byte* main::sc
byte* main::sc#1 22.0
byte* main::sc#2 14.666666666666666

Initial phi equivalence classes
[ main::sc#2 main::sc#1 ]
[ main::col#2 main::col#1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Complete equivalence classes
[ main::sc#2 main::sc#1 ]
[ main::col#2 main::col#1 ]
[ main::$2 ]
Allocated zp[2]:2 [ main::sc#2 main::sc#1 ]
Allocated zp[2]:4 [ main::col#2 main::col#1 ]
Allocated zp[1]:6 [ main::$2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement asm { sei lda#0 tax tay taz map eom  } always clobbers reg byte a reg byte x reg byte y reg byte z 
Statement [1] *IO_KEY = $47 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *IO_KEY = $53 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *IO_BANK = *IO_BANK | CRAM2K [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] if(main::sc#2<SCREEN+$7d0) goto main::@2 [ main::sc#2 ] (  [ main::sc#2 ] { }  ) always clobbers reg byte a 
Statement [7] if(main::col#2<COLORS+$7d0) goto main::@4 [ main::col#2 ] (  [ main::col#2 ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *main::col#2 = main::$2 [ main::col#2 ] (  [ main::col#2 ] { }  ) always clobbers reg byte y 
Statement [12] *main::sc#2 = '*' [ main::sc#2 ] (  [ main::sc#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::sc#2 main::sc#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::col#2 main::col#1 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ main::$2 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , reg byte z , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 36.67: zp[2]:2 [ main::sc#2 main::sc#1 ] 35.75: zp[2]:4 [ main::col#2 main::col#1 ] 22: zp[1]:6 [ main::$2 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [MOS4569_VICIII] 
Uplift Scope [MEGA65_VICIV] 
Uplift Scope [F018_DMAGIC] 
Uplift Scope [DMA_LIST_F018A] 
Uplift Scope [DMA_LIST_F018B] 
Uplift Scope [] 

Uplifting [main] best 1154 combination zp[2]:2 [ main::sc#2 main::sc#1 ] zp[2]:4 [ main::col#2 main::col#1 ] reg byte a [ main::$2 ] 
Uplifting [MOS6526_CIA] best 1154 combination 
Uplifting [MOS6569_VICII] best 1154 combination 
Uplifting [MOS6581_SID] best 1154 combination 
Uplifting [MOS4569_VICIII] best 1154 combination 
Uplifting [MEGA65_VICIV] best 1154 combination 
Uplifting [F018_DMAGIC] best 1154 combination 
Uplifting [DMA_LIST_F018A] best 1154 combination 
Uplifting [DMA_LIST_F018B] best 1154 combination 
Uplifting [] best 1154 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a few VIC 3/4 features
// MEGA65 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.cpu _45gs02
  // MEGA65 platform PRG executable starting in MEGA65 mode.
.file [name="test-vic4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$2001]
.segmentdef Code [start=$2017]
.segmentdef Data [startAfter="Code"]
.segment Basic
.byte $0a, $20, $0a, $00, $fe, $02, $20, $30, $00       // 10 BANK 0
.byte $15, $20, $14, $00, $9e, $20                      // 20 SYS 
.text toIntString(main)                                   //         NNNN
.byte $00, $00, $00                                     // 
  // Global Constants & labels
  // Map 2nd KB of colour RAM $DC00-$DFFF (hiding CIA's)
  .const CRAM2K = 1
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  // I/O Personality selection
  .label IO_KEY = $d02f
  // C65 Banking Register
  .label IO_BANK = $d030
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  .label SCREEN = $800
  .label COLORS = $d800
.segment Code
  // main
main: {
    .label sc = 2
    .label col = 4
    // asm { sei lda#0 tax tay taz map eom  }
    // Map memory to BANK 0 : 0x00XXXX - giving access to I/O
    sei
    lda #0
    tax
    tay
    taz
    map
    eom
    // [1] *IO_KEY = $47 -- _deref_pbuc1=vbuc2 
    // Enable the VIC 4
    lda #$47
    sta IO_KEY
    // [2] *IO_KEY = $53 -- _deref_pbuc1=vbuc2 
    lda #$53
    sta IO_KEY
    // [3] *IO_BANK = *IO_BANK | CRAM2K -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Enable 2K Color RAM
    lda #CRAM2K
    ora IO_BANK
    sta IO_BANK
    // [4] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [4] phi main::sc#2 = SCREEN [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z sc
    lda #>SCREEN
    sta.z sc+1
    jmp __b1
  // Fill the screen with '*'
    // main::@1
  __b1:
    // [5] if(main::sc#2<SCREEN+$7d0) goto main::@2 -- pbuz1_lt_pbuc1_then_la1 
    lda.z sc+1
    cmp #>SCREEN+$7d0
    bcc __b2
    bne !+
    lda.z sc
    cmp #<SCREEN+$7d0
    bcc __b2
  !:
    // [6] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [6] phi main::col#2 = COLORS [phi:main::@1->main::@3#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
    jmp __b3
  // Fill the color memory
    // main::@3
  __b3:
    // [7] if(main::col#2<COLORS+$7d0) goto main::@4 -- pbuz1_lt_pbuc1_then_la1 
    lda.z col+1
    cmp #>COLORS+$7d0
    bcc __b4
    bne !+
    lda.z col
    cmp #<COLORS+$7d0
    bcc __b4
  !:
    jmp __b5
    // main::@5
  __b5:
    // [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) -- _deref_pbuc1=_deref_pbuc2 
    lda VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    jmp __b5
    // main::@4
  __b4:
    // [9] main::$2 = < main::col#2 -- vbuaa=_lo_pbuz1 
    lda.z col
    // [10] *main::col#2 = main::$2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // [11] main::col#1 = ++ main::col#2 -- pbuz1=_inc_pbuz1 
    inw.z col
    // [6] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [6] phi main::col#2 = main::col#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@2
  __b2:
    // [12] *main::sc#2 = '*' -- _deref_pbuz1=vbuc1 
    lda #'*'
    ldy #0
    sta (sc),y
    // [13] main::sc#1 = ++ main::sc#2 -- pbuz1=_inc_pbuz1 
    inw.z sc
    // [4] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [4] phi main::sc#2 = main::sc#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __b3_from___b1:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* COLORS = (byte*) 55296
const nomodify byte CRAM2K = 1
const nomodify to_volatile byte* IO_BANK = (byte*) 53296
const nomodify to_volatile byte* IO_KEY = (byte*) 53295
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const nomodify byte* SCREEN = (byte*) 2048
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
void main()
byte~ main::$2 reg byte a 22.0
byte* main::col
byte* main::col#1 col zp[2]:4 22.0
byte* main::col#2 col zp[2]:4 13.75
byte* main::sc
byte* main::sc#1 sc zp[2]:2 22.0
byte* main::sc#2 sc zp[2]:2 14.666666666666666

zp[2]:2 [ main::sc#2 main::sc#1 ]
zp[2]:4 [ main::col#2 main::col#1 ]
reg byte a [ main::$2 ]


FINAL ASSEMBLER
Score: 1064

  // File Comments
// Test a few VIC 3/4 features
// MEGA65 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.cpu _45gs02
  // MEGA65 platform PRG executable starting in MEGA65 mode.
.file [name="test-vic4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$2001]
.segmentdef Code [start=$2017]
.segmentdef Data [startAfter="Code"]
.segment Basic
.byte $0a, $20, $0a, $00, $fe, $02, $20, $30, $00       // 10 BANK 0
.byte $15, $20, $14, $00, $9e, $20                      // 20 SYS 
.text toIntString(main)                                   //         NNNN
.byte $00, $00, $00                                     // 
  // Global Constants & labels
  // Map 2nd KB of colour RAM $DC00-$DFFF (hiding CIA's)
  .const CRAM2K = 1
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  // I/O Personality selection
  .label IO_KEY = $d02f
  // C65 Banking Register
  .label IO_BANK = $d030
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  .label SCREEN = $800
  .label COLORS = $d800
.segment Code
  // main
main: {
    .label sc = 2
    .label col = 4
    // asm
    // asm { sei lda#0 tax tay taz map eom  }
    // Map memory to BANK 0 : 0x00XXXX - giving access to I/O
    sei
    lda #0
    tax
    tay
    taz
    map
    eom
    // *IO_KEY = 0x47
    // [1] *IO_KEY = $47 -- _deref_pbuc1=vbuc2 
    // Enable the VIC 4
    lda #$47
    sta IO_KEY
    // *IO_KEY = 0x53
    // [2] *IO_KEY = $53 -- _deref_pbuc1=vbuc2 
    lda #$53
    sta IO_KEY
    // *IO_BANK |= CRAM2K
    // [3] *IO_BANK = *IO_BANK | CRAM2K -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Enable 2K Color RAM
    lda #CRAM2K
    ora IO_BANK
    sta IO_BANK
    // [4] phi from main to main::@1 [phi:main->main::@1]
    // [4] phi main::sc#2 = SCREEN [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z sc
    lda #>SCREEN
    sta.z sc+1
  // Fill the screen with '*'
    // main::@1
  __b1:
    // for( char *sc = SCREEN; sc<SCREEN+2000; sc++)
    // [5] if(main::sc#2<SCREEN+$7d0) goto main::@2 -- pbuz1_lt_pbuc1_then_la1 
    lda.z sc+1
    cmp #>SCREEN+$7d0
    bcc __b2
    bne !+
    lda.z sc
    cmp #<SCREEN+$7d0
    bcc __b2
  !:
    // [6] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // [6] phi main::col#2 = COLORS [phi:main::@1->main::@3#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z col
    lda #>COLORS
    sta.z col+1
  // Fill the color memory
    // main::@3
  __b3:
    // for( char *col = COLORS; col<COLORS+2000; col++)
    // [7] if(main::col#2<COLORS+$7d0) goto main::@4 -- pbuz1_lt_pbuc1_then_la1 
    lda.z col+1
    cmp #>COLORS+$7d0
    bcc __b4
    bne !+
    lda.z col
    cmp #<COLORS+$7d0
    bcc __b4
  !:
    // main::@5
  __b5:
    // VICII->BORDER_COLOR = VICII->RASTER
    // [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) -- _deref_pbuc1=_deref_pbuc2 
    lda VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    jmp __b5
    // main::@4
  __b4:
    // <col
    // [9] main::$2 = < main::col#2 -- vbuaa=_lo_pbuz1 
    lda.z col
    // *col = <col
    // [10] *main::col#2 = main::$2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (col),y
    // for( char *col = COLORS; col<COLORS+2000; col++)
    // [11] main::col#1 = ++ main::col#2 -- pbuz1=_inc_pbuz1 
    inw.z col
    // [6] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [6] phi main::col#2 = main::col#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@2
  __b2:
    // *sc = '*'
    // [12] *main::sc#2 = '*' -- _deref_pbuz1=vbuc1 
    lda #'*'
    ldy #0
    sta (sc),y
    // for( char *sc = SCREEN; sc<SCREEN+2000; sc++)
    // [13] main::sc#1 = ++ main::sc#2 -- pbuz1=_inc_pbuz1 
    inw.z sc
    // [4] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [4] phi main::sc#2 = main::sc#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

