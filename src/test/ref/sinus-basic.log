Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_lines::str)
Warning! Adding boolean cast to non-boolean condition (byte) print_str_lines::ch
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_at::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte) print_str_lines::ch
Identified constant variable (byte*) HEAP_TOP
Inlined call call prepareMEM (word) setFAC::w 
Inlined call call prepareMEM (word~) setMEMtoFAC::$0 
Inlined call call prepareMEM (word~) setFACtoMEM::$0 
Inlined call call prepareMEM (word~) setARGtoMEM::$0 
Inlined call call prepareMEM (word~) addMEMtoFAC::$0 
Inlined call call prepareMEM (word~) subFACfromMEM::$0 
Inlined call call prepareMEM (word~) divMEMbyFAC::$0 
Inlined call call prepareMEM (word~) mulFACbyMEM::$0 
Inlined call call prepareMEM (word~) pwrMEMbyFAC::$0 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @37
Culled Empty Block (label) setFAC::prepareMEM1_@return
Culled Empty Block (label) @38
Culled Empty Block (label) getFAC::@1
Culled Empty Block (label) @39
Culled Empty Block (label) @40
Culled Empty Block (label) @41
Culled Empty Block (label) setMEMtoFAC::prepareMEM1_@return
Culled Empty Block (label) @42
Culled Empty Block (label) @43
Culled Empty Block (label) @44
Culled Empty Block (label) @45
Culled Empty Block (label) @46
Culled Empty Block (label) addMEMtoFAC::prepareMEM1_@return
Culled Empty Block (label) @47
Culled Empty Block (label) @48
Culled Empty Block (label) @49
Culled Empty Block (label) @50
Culled Empty Block (label) divMEMbyFAC::prepareMEM1_@return
Culled Empty Block (label) @51
Culled Empty Block (label) mulFACbyMEM::prepareMEM1_@return
Culled Empty Block (label) @52
Culled Empty Block (label) @53
Culled Empty Block (label) @54
Culled Empty Block (label) @55
Culled Empty Block (label) @56
Culled Empty Block (label) @57
Culled Empty Block (label) @58
Culled Empty Block (label) @59
Culled Empty Block (label) @60
Culled Empty Block (label) @61
Culled Empty Block (label) @62
Culled Empty Block (label) @63
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@12
@12: scope:[]  from @begin
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@29
print_ln: scope:[print_ln]  from main::@15
  (byte*) print_char_cursor#29 ← phi( main::@15/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#12 ← phi( main::@15/(byte*) print_line_cursor#13 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#15 ← phi( print_ln/(byte*) print_char_cursor#29 print_ln::@1/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#6 ← phi( print_ln/(byte*) print_line_cursor#12 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#6 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#15
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#7 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#1 ← (byte*) print_line_cursor#7
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#16 ← phi( print_ln::@2/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#8 ← phi( print_ln::@2/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#8
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#16
  return 
  to:@return
print_word: scope:[print_word]  from main::@14
  (byte*) print_char_cursor#30 ← phi( main::@14/(byte*) print_char_cursor#32 )
  (word) print_word::w#1 ← phi( main::@14/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#1
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#2 ← phi( print_word/(word) print_word::w#1 )
  (byte*) print_char_cursor#17 ← phi( print_word/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#17
  (byte~) print_word::$2 ← < (word) print_word::w#2
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#18 ← phi( print_word::@1/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#18
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#19 ← phi( print_word::@2/(byte*) print_char_cursor#4 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#19
  return 
  to:@return
@29: scope:[]  from @12
  (byte*) print_line_cursor#17 ← phi( @12/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#36 ← phi( @12/(byte*) print_char_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@36
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) print_char_cursor#31 ← phi( print_word/(byte*) print_char_cursor#30 print_word::@1/(byte*) print_char_cursor#3 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
  (byte) print_char::ch#0 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#20 ← phi( print_byte/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#20
  (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
  (byte) print_char::ch#1 ← *((byte[]) print_hextab#0 + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#21 ← phi( print_byte::@1/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#21
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#22 ← phi( print_byte::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#22
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  (byte*) print_char_cursor#23 ← phi( print_byte/(byte*) print_char_cursor#31 print_byte::@1/(byte*) print_char_cursor#6 )
  (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#23) ← (byte) print_char::ch#2
  (byte*) print_char_cursor#9 ← ++ (byte*) print_char_cursor#23
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#24 ← phi( print_char/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#24
  return 
  to:@return
@36: scope:[]  from @29
  (byte*) print_line_cursor#16 ← phi( @29/(byte*) print_line_cursor#17 )
  (byte*) print_char_cursor#35 ← phi( @29/(byte*) print_char_cursor#36 )
  (byte*) memLo#0 ← ((byte*)) (number) $fe
  (byte*) memHi#0 ← ((byte*)) (number) $ff
  to:@64
setFAC: scope:[setFAC]  from main main::@1 main::@8
  (word) setFAC::w#3 ← phi( main/(word) setFAC::w#0 main::@1/(word) setFAC::w#1 main::@8/(word) setFAC::w#2 )
  (word) setFAC::prepareMEM1_mem#0 ← (word) setFAC::w#3
  to:setFAC::prepareMEM1
setFAC::prepareMEM1: scope:[setFAC]  from setFAC
  (word) setFAC::prepareMEM1_mem#1 ← phi( setFAC/(word) setFAC::prepareMEM1_mem#0 )
  (byte~) setFAC::prepareMEM1_$0#0 ← < (word) setFAC::prepareMEM1_mem#1
  *((byte*) memLo#0) ← (byte~) setFAC::prepareMEM1_$0#0
  (byte~) setFAC::prepareMEM1_$1#0 ← > (word) setFAC::prepareMEM1_mem#1
  *((byte*) memHi#0) ← (byte~) setFAC::prepareMEM1_$1#0
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC::prepareMEM1
  asm { ldymemLo ldamemHi jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  return 
  to:@return
getFAC: scope:[getFAC]  from main::@13
  asm { jsr$b1aa stymemLo stamemHi  }
  (word) getFAC::w#0 ← ((word)) { *((byte*) memHi#0), *((byte*) memLo#0) }
  (word) getFAC::return#0 ← (word) getFAC::w#0
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  (word) getFAC::return#3 ← phi( getFAC/(word) getFAC::return#0 )
  (word) getFAC::return#1 ← (word) getFAC::return#3
  return 
  to:@return
setMEMtoFAC: scope:[setMEMtoFAC]  from main::@4 main::@7
  (byte*) setMEMtoFAC::mem#2 ← phi( main::@4/(byte*) setMEMtoFAC::mem#0 main::@7/(byte*) setMEMtoFAC::mem#1 )
  (word~) setMEMtoFAC::$0 ← ((word)) (byte*) setMEMtoFAC::mem#2
  (word) setMEMtoFAC::prepareMEM1_mem#0 ← (word~) setMEMtoFAC::$0
  to:setMEMtoFAC::prepareMEM1
setMEMtoFAC::prepareMEM1: scope:[setMEMtoFAC]  from setMEMtoFAC
  (word) setMEMtoFAC::prepareMEM1_mem#1 ← phi( setMEMtoFAC/(word) setMEMtoFAC::prepareMEM1_mem#0 )
  (byte~) setMEMtoFAC::prepareMEM1_$0#0 ← < (word) setMEMtoFAC::prepareMEM1_mem#1
  *((byte*) memLo#0) ← (byte~) setMEMtoFAC::prepareMEM1_$0#0
  (byte~) setMEMtoFAC::prepareMEM1_$1#0 ← > (word) setMEMtoFAC::prepareMEM1_mem#1
  *((byte*) memHi#0) ← (byte~) setMEMtoFAC::prepareMEM1_$1#0
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC::prepareMEM1
  asm { ldxmemLo ldymemHi jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  return 
  to:@return
addMEMtoFAC: scope:[addMEMtoFAC]  from main::@12
  (byte*) addMEMtoFAC::mem#1 ← phi( main::@12/(byte*) addMEMtoFAC::mem#0 )
  (word~) addMEMtoFAC::$0 ← ((word)) (byte*) addMEMtoFAC::mem#1
  (word) addMEMtoFAC::prepareMEM1_mem#0 ← (word~) addMEMtoFAC::$0
  to:addMEMtoFAC::prepareMEM1
addMEMtoFAC::prepareMEM1: scope:[addMEMtoFAC]  from addMEMtoFAC
  (word) addMEMtoFAC::prepareMEM1_mem#1 ← phi( addMEMtoFAC/(word) addMEMtoFAC::prepareMEM1_mem#0 )
  (byte~) addMEMtoFAC::prepareMEM1_$0#0 ← < (word) addMEMtoFAC::prepareMEM1_mem#1
  *((byte*) memLo#0) ← (byte~) addMEMtoFAC::prepareMEM1_$0#0
  (byte~) addMEMtoFAC::prepareMEM1_$1#0 ← > (word) addMEMtoFAC::prepareMEM1_mem#1
  *((byte*) memHi#0) ← (byte~) addMEMtoFAC::prepareMEM1_$1#0
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC::prepareMEM1
  asm { ldamemLo ldymemHi jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  return 
  to:@return
divMEMbyFAC: scope:[divMEMbyFAC]  from main::@9
  (byte*) divMEMbyFAC::mem#1 ← phi( main::@9/(byte*) divMEMbyFAC::mem#0 )
  (word~) divMEMbyFAC::$0 ← ((word)) (byte*) divMEMbyFAC::mem#1
  (word) divMEMbyFAC::prepareMEM1_mem#0 ← (word~) divMEMbyFAC::$0
  to:divMEMbyFAC::prepareMEM1
divMEMbyFAC::prepareMEM1: scope:[divMEMbyFAC]  from divMEMbyFAC
  (word) divMEMbyFAC::prepareMEM1_mem#1 ← phi( divMEMbyFAC/(word) divMEMbyFAC::prepareMEM1_mem#0 )
  (byte~) divMEMbyFAC::prepareMEM1_$0#0 ← < (word) divMEMbyFAC::prepareMEM1_mem#1
  *((byte*) memLo#0) ← (byte~) divMEMbyFAC::prepareMEM1_$0#0
  (byte~) divMEMbyFAC::prepareMEM1_$1#0 ← > (word) divMEMbyFAC::prepareMEM1_mem#1
  *((byte*) memHi#0) ← (byte~) divMEMbyFAC::prepareMEM1_$1#0
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC::prepareMEM1
  asm { ldamemLo ldymemHi jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  return 
  to:@return
mulFACbyMEM: scope:[mulFACbyMEM]  from main::@11 main::@6
  (byte*) mulFACbyMEM::mem#2 ← phi( main::@11/(byte*) mulFACbyMEM::mem#1 main::@6/(byte*) mulFACbyMEM::mem#0 )
  (word~) mulFACbyMEM::$0 ← ((word)) (byte*) mulFACbyMEM::mem#2
  (word) mulFACbyMEM::prepareMEM1_mem#0 ← (word~) mulFACbyMEM::$0
  to:mulFACbyMEM::prepareMEM1
mulFACbyMEM::prepareMEM1: scope:[mulFACbyMEM]  from mulFACbyMEM
  (word) mulFACbyMEM::prepareMEM1_mem#1 ← phi( mulFACbyMEM/(word) mulFACbyMEM::prepareMEM1_mem#0 )
  (byte~) mulFACbyMEM::prepareMEM1_$0#0 ← < (word) mulFACbyMEM::prepareMEM1_mem#1
  *((byte*) memLo#0) ← (byte~) mulFACbyMEM::prepareMEM1_$0#0
  (byte~) mulFACbyMEM::prepareMEM1_$1#0 ← > (word) mulFACbyMEM::prepareMEM1_mem#1
  *((byte*) memHi#0) ← (byte~) mulFACbyMEM::prepareMEM1_$1#0
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM::prepareMEM1
  asm { ldamemLo ldymemHi jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  return 
  to:@return
sinFAC: scope:[sinFAC]  from main::@10
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  return 
  to:@return
divFACby10: scope:[divFACby10]  from main::@3
  asm { jsr$bafe  }
  to:divFACby10::@return
divFACby10::@return: scope:[divFACby10]  from divFACby10
  return 
  to:@return
main: scope:[main]  from @64
  (byte*) print_line_cursor#30 ← phi( @64/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#48 ← phi( @64/(byte*) print_char_cursor#33 )
  (byte[]) main::f_i#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) main::f_127#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte*) main::f_2pi#0 ← ((byte*)) (number) $e2e5
  (word) setFAC::w#0 ← (number) $4fb
  call setFAC 
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) print_line_cursor#29 ← phi( main/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#47 ← phi( main/(byte*) print_char_cursor#48 )
  call divFACby10 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) print_line_cursor#28 ← phi( main::@3/(byte*) print_line_cursor#29 )
  (byte*) print_char_cursor#46 ← phi( main::@3/(byte*) print_char_cursor#47 )
  (byte*) setMEMtoFAC::mem#0 ← (byte[]) main::f_127#0
  call setMEMtoFAC 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) print_line_cursor#27 ← phi( main::@4/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#45 ← phi( main::@4/(byte*) print_char_cursor#46 )
  (byte) main::i#0 ← (byte) 1
  to:main::@1
main::@1: scope:[main]  from main::@16 main::@5
  (byte*) print_line_cursor#26 ← phi( main::@16/(byte*) print_line_cursor#3 main::@5/(byte*) print_line_cursor#27 )
  (byte*) print_char_cursor#44 ← phi( main::@16/(byte*) print_char_cursor#12 main::@5/(byte*) print_char_cursor#45 )
  (byte) main::i#2 ← phi( main::@16/(byte) main::i#1 main::@5/(byte) main::i#0 )
  (word~) main::$3 ← ((word)) (byte) main::i#2
  (word) setFAC::w#1 ← (word~) main::$3
  call setFAC 
  to:main::@6
main::@6: scope:[main]  from main::@1
  (byte) main::i#13 ← phi( main::@1/(byte) main::i#2 )
  (byte*) print_line_cursor#25 ← phi( main::@1/(byte*) print_line_cursor#26 )
  (byte*) print_char_cursor#43 ← phi( main::@1/(byte*) print_char_cursor#44 )
  (byte*) mulFACbyMEM::mem#0 ← (byte*) main::f_2pi#0
  call mulFACbyMEM 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::i#12 ← phi( main::@6/(byte) main::i#13 )
  (byte*) print_line_cursor#24 ← phi( main::@6/(byte*) print_line_cursor#25 )
  (byte*) print_char_cursor#42 ← phi( main::@6/(byte*) print_char_cursor#43 )
  (byte*) setMEMtoFAC::mem#1 ← (byte[]) main::f_i#0
  call setMEMtoFAC 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) main::i#11 ← phi( main::@7/(byte) main::i#12 )
  (byte*) print_line_cursor#23 ← phi( main::@7/(byte*) print_line_cursor#24 )
  (byte*) print_char_cursor#41 ← phi( main::@7/(byte*) print_char_cursor#42 )
  (word) setFAC::w#2 ← (number) $19
  call setFAC 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte) main::i#10 ← phi( main::@8/(byte) main::i#11 )
  (byte*) print_line_cursor#22 ← phi( main::@8/(byte*) print_line_cursor#23 )
  (byte*) print_char_cursor#40 ← phi( main::@8/(byte*) print_char_cursor#41 )
  (byte*) divMEMbyFAC::mem#0 ← (byte[]) main::f_i#0
  call divMEMbyFAC 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) main::i#9 ← phi( main::@9/(byte) main::i#10 )
  (byte*) print_line_cursor#21 ← phi( main::@9/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#39 ← phi( main::@9/(byte*) print_char_cursor#40 )
  call sinFAC 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte) main::i#8 ← phi( main::@10/(byte) main::i#9 )
  (byte*) print_line_cursor#20 ← phi( main::@10/(byte*) print_line_cursor#21 )
  (byte*) print_char_cursor#38 ← phi( main::@10/(byte*) print_char_cursor#39 )
  (byte*) mulFACbyMEM::mem#1 ← (byte[]) main::f_127#0
  call mulFACbyMEM 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (byte) main::i#7 ← phi( main::@11/(byte) main::i#8 )
  (byte*) print_line_cursor#19 ← phi( main::@11/(byte*) print_line_cursor#20 )
  (byte*) print_char_cursor#37 ← phi( main::@11/(byte*) print_char_cursor#38 )
  (byte*) addMEMtoFAC::mem#0 ← (byte[]) main::f_127#0
  call addMEMtoFAC 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (byte) main::i#6 ← phi( main::@12/(byte) main::i#7 )
  (byte*) print_line_cursor#18 ← phi( main::@12/(byte*) print_line_cursor#19 )
  (byte*) print_char_cursor#34 ← phi( main::@12/(byte*) print_char_cursor#37 )
  call getFAC 
  (word) getFAC::return#2 ← (word) getFAC::return#1
  to:main::@14
main::@14: scope:[main]  from main::@13
  (byte) main::i#5 ← phi( main::@13/(byte) main::i#6 )
  (byte*) print_line_cursor#15 ← phi( main::@13/(byte*) print_line_cursor#18 )
  (byte*) print_char_cursor#32 ← phi( main::@13/(byte*) print_char_cursor#34 )
  (word) getFAC::return#4 ← phi( main::@13/(word) getFAC::return#2 )
  (word~) main::$12 ← (word) getFAC::return#4
  (word) print_word::w#0 ← (word~) main::$12
  call print_word 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (byte) main::i#4 ← phi( main::@14/(byte) main::i#5 )
  (byte*) print_line_cursor#13 ← phi( main::@14/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#25 ← phi( main::@14/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#25
  call print_ln 
  to:main::@16
main::@16: scope:[main]  from main::@15
  (byte) main::i#3 ← phi( main::@15/(byte) main::i#4 )
  (byte*) print_char_cursor#26 ← phi( main::@15/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#9 ← phi( main::@15/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#26
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(1,$19)
  (bool~) main::$15 ← (byte) main::i#1 != rangelast(1,$19)
  if((bool~) main::$15) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@16
  (byte*) print_line_cursor#10 ← phi( main::@16/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#27 ← phi( main::@16/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#27
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#10
  return 
  to:@return
@64: scope:[]  from @36
  (byte*) print_line_cursor#14 ← phi( @36/(byte*) print_line_cursor#16 )
  (byte*) print_char_cursor#33 ← phi( @36/(byte*) print_char_cursor#35 )
  call main 
  to:@65
@65: scope:[]  from @64
  (byte*) print_line_cursor#11 ← phi( @64/(byte*) print_line_cursor#4 )
  (byte*) print_char_cursor#28 ← phi( @64/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#28
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#11
  to:@end
@end: scope:[]  from @65

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"z
(label) @12
(label) @29
(label) @36
(label) @64
(label) @65
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(word~) addMEMtoFAC::$0
(label) addMEMtoFAC::@1
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(byte*) addMEMtoFAC::mem#0
(byte*) addMEMtoFAC::mem#1
(label) addMEMtoFAC::prepareMEM1
(byte~) addMEMtoFAC::prepareMEM1_$0
(byte~) addMEMtoFAC::prepareMEM1_$0#0
(byte~) addMEMtoFAC::prepareMEM1_$1
(byte~) addMEMtoFAC::prepareMEM1_$1#0
(word) addMEMtoFAC::prepareMEM1_mem
(word) addMEMtoFAC::prepareMEM1_mem#0
(word) addMEMtoFAC::prepareMEM1_mem#1
(void()) divFACby10()
(label) divFACby10::@return
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(word~) divMEMbyFAC::$0
(label) divMEMbyFAC::@1
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(byte*) divMEMbyFAC::mem#0
(byte*) divMEMbyFAC::mem#1
(label) divMEMbyFAC::prepareMEM1
(byte~) divMEMbyFAC::prepareMEM1_$0
(byte~) divMEMbyFAC::prepareMEM1_$0#0
(byte~) divMEMbyFAC::prepareMEM1_$1
(byte~) divMEMbyFAC::prepareMEM1_$1#0
(word) divMEMbyFAC::prepareMEM1_mem
(word) divMEMbyFAC::prepareMEM1_mem#0
(word) divMEMbyFAC::prepareMEM1_mem#1
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::return#0
(word) getFAC::return#1
(word) getFAC::return#2
(word) getFAC::return#3
(word) getFAC::return#4
(word) getFAC::w
(word) getFAC::w#0
(void()) main()
(word~) main::$12
(bool~) main::$15
(word~) main::$3
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte[]) main::f_127
(byte[]) main::f_127#0
(byte*) main::f_2pi
(byte*) main::f_2pi#0
(byte[]) main::f_i
(byte[]) main::f_i#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#11
(byte) main::i#12
(byte) main::i#13
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(byte*) memHi
(byte*) memHi#0
(byte*) memLo
(byte*) memLo#0
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(word~) mulFACbyMEM::$0
(label) mulFACbyMEM::@1
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#0
(byte*) mulFACbyMEM::mem#1
(byte*) mulFACbyMEM::mem#2
(label) mulFACbyMEM::prepareMEM1
(byte~) mulFACbyMEM::prepareMEM1_$0
(byte~) mulFACbyMEM::prepareMEM1_$0#0
(byte~) mulFACbyMEM::prepareMEM1_$1
(byte~) mulFACbyMEM::prepareMEM1_$1#0
(word) mulFACbyMEM::prepareMEM1_mem
(word) mulFACbyMEM::prepareMEM1_mem#0
(word) mulFACbyMEM::prepareMEM1_mem#1
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(void()) setFAC((word) setFAC::w)
(label) setFAC::@1
(label) setFAC::@return
(label) setFAC::prepareMEM1
(byte~) setFAC::prepareMEM1_$0
(byte~) setFAC::prepareMEM1_$0#0
(byte~) setFAC::prepareMEM1_$1
(byte~) setFAC::prepareMEM1_$1#0
(word) setFAC::prepareMEM1_mem
(word) setFAC::prepareMEM1_mem#0
(word) setFAC::prepareMEM1_mem#1
(word) setFAC::w
(word) setFAC::w#0
(word) setFAC::w#1
(word) setFAC::w#2
(word) setFAC::w#3
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(word~) setMEMtoFAC::$0
(label) setMEMtoFAC::@1
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#0
(byte*) setMEMtoFAC::mem#1
(byte*) setMEMtoFAC::mem#2
(label) setMEMtoFAC::prepareMEM1
(byte~) setMEMtoFAC::prepareMEM1_$0
(byte~) setMEMtoFAC::prepareMEM1_$0#0
(byte~) setMEMtoFAC::prepareMEM1_$1
(byte~) setMEMtoFAC::prepareMEM1_$1#0
(word) setMEMtoFAC::prepareMEM1_mem
(word) setMEMtoFAC::prepareMEM1_mem#0
(word) setMEMtoFAC::prepareMEM1_mem#1
(void()) sinFAC()
(label) sinFAC::@return

Fixing inline constructor with getFAC::$0 ← (byte)*(memHi#0) w= (byte)*(memLo#0)
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#6 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $4fb in (word) setFAC::w#0 ← (number) $4fb
Adding number conversion cast (unumber) $19 in (word) setFAC::w#2 ← (number) $19
Successful SSA optimization PassNAddNumberTypeConversions
Added casts to value list in (byte[]) main::f_i#0 ← (byte[]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) main::f_127#0 ← (byte[]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Successful SSA optimization PassNAddInitializerValueListTypeCasts
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (byte*) memLo#0 ← (byte*)(number) $fe
Inlining cast (byte*) memHi#0 ← (byte*)(number) $ff
Inlining cast (word~) setMEMtoFAC::$0 ← (word)(byte*) setMEMtoFAC::mem#2
Inlining cast (word~) addMEMtoFAC::$0 ← (word)(byte*) addMEMtoFAC::mem#1
Inlining cast (word~) divMEMbyFAC::$0 ← (word)(byte*) divMEMbyFAC::mem#1
Inlining cast (word~) mulFACbyMEM::$0 ← (word)(byte*) mulFACbyMEM::mem#2
Inlining cast (byte*) main::f_2pi#0 ← (byte*)(number) $e2e5
Inlining cast (word) setFAC::w#0 ← (unumber)(number) $4fb
Inlining cast (word~) main::$3 ← (word)(byte) main::i#2
Inlining cast (word) setFAC::w#2 ← (unumber)(number) $19
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant pointer cast (byte*) 254
Simplifying constant pointer cast (byte*) 255
Simplifying constant integer cast *((byte*) memHi#0)
Simplifying constant integer cast *((byte*) memLo#0)
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 58085
Simplifying constant integer cast $4fb
Simplifying constant integer cast $19
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $4fb
Finalized unsigned number type (byte) $19
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f
Alias (byte*) print_char_cursor#0 = (byte*) print_line_cursor#0 (byte*) print_screen#0 (byte*) print_char_cursor#36 (byte*) print_line_cursor#17 (byte*) print_char_cursor#35 (byte*) print_line_cursor#16 (byte*) print_char_cursor#33 (byte*) print_line_cursor#14 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#7 (byte*) print_char_cursor#1 (byte*) print_line_cursor#8 (byte*) print_char_cursor#16 (byte*) print_line_cursor#2 (byte*) print_char_cursor#2 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#1 = (word) print_word::w#2 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#3 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#4 (byte*) print_char_cursor#19 (byte*) print_char_cursor#5 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#6 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#7 (byte*) print_char_cursor#22 (byte*) print_char_cursor#8 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#24 (byte*) print_char_cursor#9 
Alias (word) setFAC::prepareMEM1_mem#0 = (word) setFAC::w#3 (word) setFAC::prepareMEM1_mem#1 
Alias (word) getFAC::return#0 = (word) getFAC::w#0 (word~) getFAC::$0 (word) getFAC::return#3 (word) getFAC::return#1 
Alias (word) setMEMtoFAC::prepareMEM1_mem#0 = (word~) setMEMtoFAC::$0 (word) setMEMtoFAC::prepareMEM1_mem#1 
Alias (word) addMEMtoFAC::prepareMEM1_mem#0 = (word~) addMEMtoFAC::$0 (word) addMEMtoFAC::prepareMEM1_mem#1 
Alias (word) divMEMbyFAC::prepareMEM1_mem#0 = (word~) divMEMbyFAC::$0 (word) divMEMbyFAC::prepareMEM1_mem#1 
Alias (word) mulFACbyMEM::prepareMEM1_mem#0 = (word~) mulFACbyMEM::$0 (word) mulFACbyMEM::prepareMEM1_mem#1 
Alias (byte*) print_char_cursor#45 = (byte*) print_char_cursor#47 (byte*) print_char_cursor#48 (byte*) print_char_cursor#46 
Alias (byte*) print_line_cursor#27 = (byte*) print_line_cursor#29 (byte*) print_line_cursor#30 (byte*) print_line_cursor#28 
Alias (word) setFAC::w#1 = (word~) main::$3 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#43 (byte*) print_char_cursor#44 (byte*) print_char_cursor#42 (byte*) print_char_cursor#41 (byte*) print_char_cursor#40 (byte*) print_char_cursor#39 (byte*) print_char_cursor#38 (byte*) print_char_cursor#37 (byte*) print_char_cursor#34 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#25 (byte*) print_line_cursor#26 (byte*) print_line_cursor#24 (byte*) print_line_cursor#23 (byte*) print_line_cursor#22 (byte*) print_line_cursor#21 (byte*) print_line_cursor#20 (byte*) print_line_cursor#19 (byte*) print_line_cursor#18 (byte*) print_line_cursor#15 
Alias (byte) main::i#10 = (byte) main::i#13 (byte) main::i#2 (byte) main::i#12 (byte) main::i#11 (byte) main::i#9 (byte) main::i#8 (byte) main::i#7 (byte) main::i#6 (byte) main::i#5 (byte) main::i#4 (byte) main::i#3 
Alias (word) getFAC::return#2 = (word) getFAC::return#4 
Alias (word) print_word::w#0 = (word~) main::$12 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#25 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#3 (byte*) print_line_cursor#9 (byte*) print_line_cursor#4 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#26 (byte*) print_char_cursor#27 (byte*) print_char_cursor#13 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#28 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#29
Identical Phi Values (word) print_word::w#1 (word) print_word::w#0
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#32
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#21
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#21
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#10
Identical Phi Values (byte*) addMEMtoFAC::mem#1 (byte*) addMEMtoFAC::mem#0
Identical Phi Values (byte*) divMEMbyFAC::mem#1 (byte*) divMEMbyFAC::mem#0
Identical Phi Values (byte*) print_char_cursor#45 (byte*) print_char_cursor#0
Identical Phi Values (byte*) print_line_cursor#27 (byte*) print_char_cursor#0
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_ln::$1 [8] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1
Simple Condition (bool~) main::$15 [166] if((byte) main::i#1!=rangelast(1,$19)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Identified constant from value list (byte[]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const byte*) print_char_cursor#0 = (byte*) 1024
Constant (const byte[]) print_hextab#0 = $0
Constant (const byte*) memLo#0 = (byte*) 254
Constant (const byte*) memHi#0 = (byte*) 255
Constant (const byte[]) main::f_i#0 = { 0, 0, 0, 0, 0 }
Constant (const byte[]) main::f_127#0 = { 0, 0, 0, 0, 0 }
Constant (const byte*) main::f_2pi#0 = (byte*) 58085
Constant (const word) setFAC::w#0 = $4fb
Constant (const byte) main::i#0 = 1
Constant (const word) setFAC::w#2 = $19
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) setMEMtoFAC::mem#0 = main::f_127#0
Constant (const byte*) mulFACbyMEM::mem#0 = main::f_2pi#0
Constant (const byte*) setMEMtoFAC::mem#1 = main::f_i#0
Constant (const byte*) divMEMbyFAC::mem#0 = main::f_i#0
Constant (const byte*) mulFACbyMEM::mem#1 = main::f_127#0
Constant (const byte*) addMEMtoFAC::mem#0 = main::f_127#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)addMEMtoFAC::mem#0 in [81] (word) addMEMtoFAC::prepareMEM1_mem#0 ← (word)(const byte*) addMEMtoFAC::mem#0
Constant value identified (word)divMEMbyFAC::mem#0 in [91] (word) divMEMbyFAC::prepareMEM1_mem#0 ← (word)(const byte*) divMEMbyFAC::mem#0
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [164] main::i#1 ← ++ main::i#10 to ++
Resolved ranged comparison value [166] if(main::i#1!=rangelast(1,$19)) goto main::@1 to (number) $1a
Adding number conversion cast (unumber) $1a in if((byte) main::i#1!=(number) $1a) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $1a
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $1a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const word) addMEMtoFAC::prepareMEM1_mem#0 = (word)addMEMtoFAC::mem#0
Constant (const word) divMEMbyFAC::prepareMEM1_mem#0 = (word)divMEMbyFAC::mem#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [39] (byte~) addMEMtoFAC::prepareMEM1_$0#0 ← < (const word) addMEMtoFAC::prepareMEM1_mem#0
Constant right-side identified [41] (byte~) addMEMtoFAC::prepareMEM1_$1#0 ← > (const word) addMEMtoFAC::prepareMEM1_mem#0
Constant right-side identified [45] (byte~) divMEMbyFAC::prepareMEM1_$0#0 ← < (const word) divMEMbyFAC::prepareMEM1_mem#0
Constant right-side identified [47] (byte~) divMEMbyFAC::prepareMEM1_$1#0 ← > (const word) divMEMbyFAC::prepareMEM1_mem#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) addMEMtoFAC::prepareMEM1_$0#0 = <addMEMtoFAC::prepareMEM1_mem#0
Constant (const byte) addMEMtoFAC::prepareMEM1_$1#0 = >addMEMtoFAC::prepareMEM1_mem#0
Constant (const byte) divMEMbyFAC::prepareMEM1_$0#0 = <divMEMbyFAC::prepareMEM1_mem#0
Constant (const byte) divMEMbyFAC::prepareMEM1_$1#0 = >divMEMbyFAC::prepareMEM1_mem#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [32] (word) setMEMtoFAC::prepareMEM1_mem#0 ← (word)(byte*) setMEMtoFAC::mem#2 keeping setMEMtoFAC::mem#2
Inlining Noop Cast [48] (word) mulFACbyMEM::prepareMEM1_mem#0 ← (word)(byte*) mulFACbyMEM::mem#2 keeping mulFACbyMEM::mem#2
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const word) setFAC::w#0
Inlining constant with var siblings (const word) setFAC::w#2
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#0
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#1
Inlining constant with var siblings (const byte*) mulFACbyMEM::mem#0
Inlining constant with var siblings (const byte*) mulFACbyMEM::mem#1
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) print_char_cursor#0
Constant inlined addMEMtoFAC::mem#0 = (const byte[]) main::f_127#0
Constant inlined setFAC::w#2 = (byte) $19
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined print_char_cursor#0 = (byte*) 1024
Constant inlined addMEMtoFAC::prepareMEM1_$1#0 = >(const word) addMEMtoFAC::prepareMEM1_mem#0
Constant inlined divMEMbyFAC::prepareMEM1_$1#0 = >(const word) divMEMbyFAC::prepareMEM1_mem#0
Constant inlined addMEMtoFAC::prepareMEM1_$0#0 = <(const word) addMEMtoFAC::prepareMEM1_mem#0
Constant inlined divMEMbyFAC::prepareMEM1_$0#0 = <(const word) divMEMbyFAC::prepareMEM1_mem#0
Constant inlined divMEMbyFAC::mem#0 = (const byte[]) main::f_i#0
Constant inlined main::i#0 = (byte) 1
Constant inlined setMEMtoFAC::mem#1 = (const byte[]) main::f_i#0
Constant inlined mulFACbyMEM::mem#0 = (const byte*) main::f_2pi#0
Constant inlined setMEMtoFAC::mem#0 = (const byte[]) main::f_127#0
Constant inlined mulFACbyMEM::mem#1 = (const byte[]) main::f_127#0
Constant inlined setFAC::w#0 = (word) $4fb
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@17(between main::@16 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @12
Adding NOP phi() at start of @29
Adding NOP phi() at start of @36
Adding NOP phi() at start of @64
Adding NOP phi() at start of @65
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of addMEMtoFAC
Adding NOP phi() at start of divMEMbyFAC
CALL GRAPH
Calls in [] to main:5 
Calls in [main] to setFAC:9 divFACby10:11 setMEMtoFAC:13 setFAC:18 mulFACbyMEM:20 setMEMtoFAC:22 setFAC:24 divMEMbyFAC:26 sinFAC:28 mulFACbyMEM:30 addMEMtoFAC:32 getFAC:34 print_word:37 print_ln:39 
Calls in [print_word] to print_byte:56 print_byte:60 
Calls in [print_byte] to print_char:68 print_char:73 

Created 11 initial phi equivalence classes
Coalesced [17] setFAC::prepareMEM1_mem#2 ← setFAC::w#1
Coalesced [43] main::i#14 ← main::i#1
Not coalescing [44] print_char_cursor#53 ← print_line_cursor#1
Coalesced [45] print_line_cursor#33 ← print_line_cursor#1
Coalesced [46] print_line_cursor#31 ← print_line_cursor#13
Coalesced (already) [52] print_line_cursor#32 ← print_line_cursor#1
Coalesced [54] print_byte::b#4 ← print_byte::b#0
Coalesced [55] print_char_cursor#49 ← print_char_cursor#32
Coalesced [58] print_byte::b#5 ← print_byte::b#1
Coalesced [59] print_char_cursor#50 ← print_char_cursor#10
Coalesced [66] print_char::ch#3 ← print_char::ch#0
Coalesced [67] print_char_cursor#51 ← print_char_cursor#31
Coalesced [71] print_char::ch#4 ← print_char::ch#1
Coalesced (already) [72] print_char_cursor#52 ← print_char_cursor#10
Coalesced down to 8 phi equivalence classes
Culled Empty Block (label) @12
Culled Empty Block (label) @29
Culled Empty Block (label) @36
Culled Empty Block (label) @65
Culled Empty Block (label) main::@5
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Renumbering block @64 to @1
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@6 to main::@4
Renumbering block main::@7 to main::@5
Renumbering block main::@8 to main::@6
Renumbering block main::@9 to main::@7
Renumbering block main::@10 to main::@8
Renumbering block main::@11 to main::@9
Renumbering block main::@12 to main::@10
Renumbering block main::@13 to main::@11
Renumbering block main::@14 to main::@12
Renumbering block main::@15 to main::@13
Renumbering block main::@16 to main::@14
Renumbering block main::@17 to main::@15
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of addMEMtoFAC
Adding NOP phi() at start of divMEMbyFAC

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call setFAC 
  to:main::@2
main::@2: scope:[main]  from main
  [6] phi()
  [7] call divFACby10 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] phi()
  [9] call setMEMtoFAC 
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@3
  [10] (byte*) print_line_cursor#13 ← phi( main::@15/(byte*) print_line_cursor#1 main::@3/(byte*) 1024 )
  [10] (byte*) print_char_cursor#32 ← phi( main::@15/(byte*~) print_char_cursor#53 main::@3/(byte*) 1024 )
  [10] (byte) main::i#10 ← phi( main::@15/(byte) main::i#1 main::@3/(byte) 1 )
  [11] (word) setFAC::w#1 ← (word)(byte) main::i#10
  [12] call setFAC 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [13] phi()
  [14] call mulFACbyMEM 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [15] phi()
  [16] call setMEMtoFAC 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [17] phi()
  [18] call setFAC 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [19] phi()
  [20] call divMEMbyFAC 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [21] phi()
  [22] call sinFAC 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [23] phi()
  [24] call mulFACbyMEM 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [25] phi()
  [26] call addMEMtoFAC 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [27] phi()
  [28] call getFAC 
  [29] (word) getFAC::return#2 ← (word) getFAC::return#0
  to:main::@12
main::@12: scope:[main]  from main::@11
  [30] (word) print_word::w#0 ← (word) getFAC::return#2
  [31] call print_word 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [32] phi()
  [33] call print_ln 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [34] (byte) main::i#1 ← ++ (byte) main::i#10
  [35] if((byte) main::i#1!=(byte) $1a) goto main::@15
  to:main::@return
main::@return: scope:[main]  from main::@14
  [36] return 
  to:@return
main::@15: scope:[main]  from main::@14
  [37] (byte*~) print_char_cursor#53 ← (byte*) print_line_cursor#1
  to:main::@1
print_ln: scope:[print_ln]  from main::@13
  [38] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [39] (byte*) print_line_cursor#6 ← phi( print_ln/(byte*) print_line_cursor#13 print_ln::@1/(byte*) print_line_cursor#1 )
  [40] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte) $28
  [41] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [42] return 
  to:@return
print_word: scope:[print_word]  from main::@12
  [43] (byte) print_byte::b#0 ← > (word) print_word::w#0
  [44] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [45] (byte) print_byte::b#1 ← < (word) print_word::w#0
  [46] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [47] return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [48] (byte*) print_char_cursor#31 ← phi( print_word/(byte*) print_char_cursor#32 print_word::@1/(byte*) print_char_cursor#10 )
  [48] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4
  [50] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [51] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
  [53] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [54] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [55] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  [56] (byte*) print_char_cursor#23 ← phi( print_byte/(byte*) print_char_cursor#31 print_byte::@1/(byte*) print_char_cursor#10 )
  [56] (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  [57] *((byte*) print_char_cursor#23) ← (byte) print_char::ch#2
  [58] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#23
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [59] return 
  to:@return
getFAC: scope:[getFAC]  from main::@11
  asm { jsr$b1aa stymemLo stamemHi  }
  [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0)
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  [62] return 
  to:@return
addMEMtoFAC: scope:[addMEMtoFAC]  from main::@10
  [63] phi()
  to:addMEMtoFAC::prepareMEM1
addMEMtoFAC::prepareMEM1: scope:[addMEMtoFAC]  from addMEMtoFAC
  [64] *((const byte*) memLo#0) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0
  [65] *((const byte*) memHi#0) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC::prepareMEM1
  asm { ldamemLo ldymemHi jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  [67] return 
  to:@return
mulFACbyMEM: scope:[mulFACbyMEM]  from main::@4 main::@9
  [68] (byte*) mulFACbyMEM::mem#2 ← phi( main::@9/(const byte[]) main::f_127#0 main::@4/(const byte*) main::f_2pi#0 )
  to:mulFACbyMEM::prepareMEM1
mulFACbyMEM::prepareMEM1: scope:[mulFACbyMEM]  from mulFACbyMEM
  [69] (byte~) mulFACbyMEM::prepareMEM1_$0#0 ← < (word)(byte*) mulFACbyMEM::mem#2
  [70] *((const byte*) memLo#0) ← (byte~) mulFACbyMEM::prepareMEM1_$0#0
  [71] (byte~) mulFACbyMEM::prepareMEM1_$1#0 ← > (word)(byte*) mulFACbyMEM::mem#2
  [72] *((const byte*) memHi#0) ← (byte~) mulFACbyMEM::prepareMEM1_$1#0
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM::prepareMEM1
  asm { ldamemLo ldymemHi jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  [74] return 
  to:@return
sinFAC: scope:[sinFAC]  from main::@8
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  [76] return 
  to:@return
divMEMbyFAC: scope:[divMEMbyFAC]  from main::@7
  [77] phi()
  to:divMEMbyFAC::prepareMEM1
divMEMbyFAC::prepareMEM1: scope:[divMEMbyFAC]  from divMEMbyFAC
  [78] *((const byte*) memLo#0) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0
  [79] *((const byte*) memHi#0) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC::prepareMEM1
  asm { ldamemLo ldymemHi jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  [81] return 
  to:@return
setFAC: scope:[setFAC]  from main main::@1 main::@6
  [82] (word) setFAC::prepareMEM1_mem#0 ← phi( main/(word) $4fb main::@1/(word) setFAC::w#1 main::@6/(byte) $19 )
  to:setFAC::prepareMEM1
setFAC::prepareMEM1: scope:[setFAC]  from setFAC
  [83] (byte~) setFAC::prepareMEM1_$0#0 ← < (word) setFAC::prepareMEM1_mem#0
  [84] *((const byte*) memLo#0) ← (byte~) setFAC::prepareMEM1_$0#0
  [85] (byte~) setFAC::prepareMEM1_$1#0 ← > (word) setFAC::prepareMEM1_mem#0
  [86] *((const byte*) memHi#0) ← (byte~) setFAC::prepareMEM1_$1#0
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC::prepareMEM1
  asm { ldymemLo ldamemHi jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  [88] return 
  to:@return
setMEMtoFAC: scope:[setMEMtoFAC]  from main::@3 main::@5
  [89] (byte*) setMEMtoFAC::mem#2 ← phi( main::@3/(const byte[]) main::f_127#0 main::@5/(const byte[]) main::f_i#0 )
  to:setMEMtoFAC::prepareMEM1
setMEMtoFAC::prepareMEM1: scope:[setMEMtoFAC]  from setMEMtoFAC
  [90] (byte~) setMEMtoFAC::prepareMEM1_$0#0 ← < (word)(byte*) setMEMtoFAC::mem#2
  [91] *((const byte*) memLo#0) ← (byte~) setMEMtoFAC::prepareMEM1_$0#0
  [92] (byte~) setMEMtoFAC::prepareMEM1_$1#0 ← > (word)(byte*) setMEMtoFAC::mem#2
  [93] *((const byte*) memHi#0) ← (byte~) setMEMtoFAC::prepareMEM1_$1#0
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC::prepareMEM1
  asm { ldxmemLo ldymemHi jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  [95] return 
  to:@return
divFACby10: scope:[divFACby10]  from main::@2
  asm { jsr$bafe  }
  to:divFACby10::@return
divFACby10::@return: scope:[divFACby10]  from divFACby10
  [97] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(byte*) addMEMtoFAC::mem
(byte~) addMEMtoFAC::prepareMEM1_$0
(byte~) addMEMtoFAC::prepareMEM1_$1
(word) addMEMtoFAC::prepareMEM1_mem
(void()) divFACby10()
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(byte*) divMEMbyFAC::mem
(byte~) divMEMbyFAC::prepareMEM1_$0
(byte~) divMEMbyFAC::prepareMEM1_$1
(word) divMEMbyFAC::prepareMEM1_mem
(word()) getFAC()
(word) getFAC::return
(word) getFAC::return#0 4.333333333333333
(word) getFAC::return#2 22.0
(word) getFAC::w
(void()) main()
(byte[]) main::f_127
(byte*) main::f_2pi
(byte[]) main::f_i
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#10 0.9166666666666666
(byte*) memHi
(byte*) memLo
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#2
(byte~) mulFACbyMEM::prepareMEM1_$0
(byte~) mulFACbyMEM::prepareMEM1_$0#0 4.0
(byte~) mulFACbyMEM::prepareMEM1_$1
(byte~) mulFACbyMEM::prepareMEM1_$1#0 4.0
(word) mulFACbyMEM::prepareMEM1_mem
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 4.0
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#10 6.2941176470588225
(byte*) print_char_cursor#23 4.0
(byte*) print_char_cursor#31 2.0
(byte*) print_char_cursor#32 0.5909090909090909
(byte*~) print_char_cursor#53 22.0
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 46.42857142857143
(byte*) print_line_cursor#13 0.5416666666666666
(byte*) print_line_cursor#6 204.0
(void()) print_ln()
(byte*) print_screen
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 5.0
(void()) setFAC((word) setFAC::w)
(byte~) setFAC::prepareMEM1_$0
(byte~) setFAC::prepareMEM1_$0#0 4.0
(byte~) setFAC::prepareMEM1_$1
(byte~) setFAC::prepareMEM1_$1#0 4.0
(word) setFAC::prepareMEM1_mem
(word) setFAC::prepareMEM1_mem#0 5.0
(word) setFAC::w
(word) setFAC::w#1 22.0
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#2
(byte~) setMEMtoFAC::prepareMEM1_$0
(byte~) setMEMtoFAC::prepareMEM1_$0#0 4.0
(byte~) setMEMtoFAC::prepareMEM1_$1
(byte~) setMEMtoFAC::prepareMEM1_$1#0 4.0
(word) setMEMtoFAC::prepareMEM1_mem
(void()) sinFAC()

Initial phi equivalence classes
[ main::i#10 main::i#1 ]
[ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#23 print_char_cursor#31 print_char_cursor#32 print_char_cursor#53 print_char_cursor#10 ]
[ mulFACbyMEM::mem#2 ]
[ setFAC::prepareMEM1_mem#0 setFAC::w#1 ]
[ setMEMtoFAC::mem#2 ]
Added variable getFAC::return#2 to zero page equivalence class [ getFAC::return#2 ]
Added variable print_word::w#0 to zero page equivalence class [ print_word::w#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable getFAC::return#0 to zero page equivalence class [ getFAC::return#0 ]
Added variable mulFACbyMEM::prepareMEM1_$0#0 to zero page equivalence class [ mulFACbyMEM::prepareMEM1_$0#0 ]
Added variable mulFACbyMEM::prepareMEM1_$1#0 to zero page equivalence class [ mulFACbyMEM::prepareMEM1_$1#0 ]
Added variable setFAC::prepareMEM1_$0#0 to zero page equivalence class [ setFAC::prepareMEM1_$0#0 ]
Added variable setFAC::prepareMEM1_$1#0 to zero page equivalence class [ setFAC::prepareMEM1_$1#0 ]
Added variable setMEMtoFAC::prepareMEM1_$0#0 to zero page equivalence class [ setMEMtoFAC::prepareMEM1_$0#0 ]
Added variable setMEMtoFAC::prepareMEM1_$1#0 to zero page equivalence class [ setMEMtoFAC::prepareMEM1_$1#0 ]
Complete equivalence classes
[ main::i#10 main::i#1 ]
[ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#23 print_char_cursor#31 print_char_cursor#32 print_char_cursor#53 print_char_cursor#10 ]
[ mulFACbyMEM::mem#2 ]
[ setFAC::prepareMEM1_mem#0 setFAC::w#1 ]
[ setMEMtoFAC::mem#2 ]
[ getFAC::return#2 ]
[ print_word::w#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ getFAC::return#0 ]
[ mulFACbyMEM::prepareMEM1_$0#0 ]
[ mulFACbyMEM::prepareMEM1_$1#0 ]
[ setFAC::prepareMEM1_$0#0 ]
[ setFAC::prepareMEM1_$1#0 ]
[ setMEMtoFAC::prepareMEM1_$0#0 ]
[ setMEMtoFAC::prepareMEM1_$1#0 ]
Allocated zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Allocated zp ZP_WORD:3 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ]
Allocated zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
Allocated zp ZP_WORD:7 [ print_char_cursor#23 print_char_cursor#31 print_char_cursor#32 print_char_cursor#53 print_char_cursor#10 ]
Allocated zp ZP_WORD:9 [ mulFACbyMEM::mem#2 ]
Allocated zp ZP_WORD:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 ]
Allocated zp ZP_WORD:13 [ setMEMtoFAC::mem#2 ]
Allocated zp ZP_WORD:15 [ getFAC::return#2 ]
Allocated zp ZP_WORD:17 [ print_word::w#0 ]
Allocated zp ZP_BYTE:19 [ print_byte::$0 ]
Allocated zp ZP_BYTE:20 [ print_byte::$2 ]
Allocated zp ZP_WORD:21 [ getFAC::return#0 ]
Allocated zp ZP_BYTE:23 [ mulFACbyMEM::prepareMEM1_$0#0 ]
Allocated zp ZP_BYTE:24 [ mulFACbyMEM::prepareMEM1_$1#0 ]
Allocated zp ZP_BYTE:25 [ setFAC::prepareMEM1_$0#0 ]
Allocated zp ZP_BYTE:26 [ setFAC::prepareMEM1_$1#0 ]
Allocated zp ZP_BYTE:27 [ setMEMtoFAC::prepareMEM1_$0#0 ]
Allocated zp ZP_BYTE:28 [ setMEMtoFAC::prepareMEM1_$1#0 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .label print_line_cursor = 3
  .label print_char_cursor = 7
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label f_2pi = $e2e5
    .label i = 2
    // [5] call setFAC 
    // [82] phi from main to setFAC [phi:main->setFAC]
  setFAC_from_main:
    // [82] phi (word) setFAC::prepareMEM1_mem#0 = (word) $4fb [phi:main->setFAC#0] -- vwuz1=vwuc1 
    lda #<$4fb
    sta.z setFAC.prepareMEM1_mem
    lda #>$4fb
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [6] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
    jmp b2
    // main::@2
  b2:
    // [7] call divFACby10 
    jsr divFACby10
    // [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
    // main::@3
  b3:
    // [9] call setMEMtoFAC 
    // [89] phi from main::@3 to setMEMtoFAC [phi:main::@3->setMEMtoFAC]
  setMEMtoFAC_from_b3:
    // [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_127#0 [phi:main::@3->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z setMEMtoFAC.mem
    lda #>f_127
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [10] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
    // [10] phi (byte*) print_line_cursor#13 = (byte*) 1024 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [10] phi (byte*) print_char_cursor#32 = (byte*) 1024 [phi:main::@3->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [10] phi (byte) main::i#10 = (byte) 1 [phi:main::@3->main::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp b1
    // main::@1
  b1:
    // [11] (word) setFAC::w#1 ← (word)(byte) main::i#10 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z setFAC.w
    lda #0
    sta.z setFAC.w+1
    // [12] call setFAC 
    // [82] phi from main::@1 to setFAC [phi:main::@1->setFAC]
  setFAC_from_b1:
    // [82] phi (word) setFAC::prepareMEM1_mem#0 = (word) setFAC::w#1 [phi:main::@1->setFAC#0] -- register_copy 
    jsr setFAC
    // [13] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  b4_from_b1:
    jmp b4
    // main::@4
  b4:
    // [14] call mulFACbyMEM 
    // [68] phi from main::@4 to mulFACbyMEM [phi:main::@4->mulFACbyMEM]
  mulFACbyMEM_from_b4:
    // [68] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) main::f_2pi#0 [phi:main::@4->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta.z mulFACbyMEM.mem
    lda #>f_2pi
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [15] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
    // main::@5
  b5:
    // [16] call setMEMtoFAC 
    // [89] phi from main::@5 to setMEMtoFAC [phi:main::@5->setMEMtoFAC]
  setMEMtoFAC_from_b5:
    // [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_i#0 [phi:main::@5->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta.z setMEMtoFAC.mem
    lda #>f_i
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [17] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    jmp b6
    // main::@6
  b6:
    // [18] call setFAC 
    // [82] phi from main::@6 to setFAC [phi:main::@6->setFAC]
  setFAC_from_b6:
    // [82] phi (word) setFAC::prepareMEM1_mem#0 = (byte) $19 [phi:main::@6->setFAC#0] -- vwuz1=vbuc1 
    lda #<$19
    sta.z setFAC.prepareMEM1_mem
    lda #>$19
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [19] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
    // main::@7
  b7:
    // [20] call divMEMbyFAC 
    // [77] phi from main::@7 to divMEMbyFAC [phi:main::@7->divMEMbyFAC]
  divMEMbyFAC_from_b7:
    jsr divMEMbyFAC
    // [21] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  b8_from_b7:
    jmp b8
    // main::@8
  b8:
    // [22] call sinFAC 
    jsr sinFAC
    // [23] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
    // main::@9
  b9:
    // [24] call mulFACbyMEM 
    // [68] phi from main::@9 to mulFACbyMEM [phi:main::@9->mulFACbyMEM]
  mulFACbyMEM_from_b9:
    // [68] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) main::f_127#0 [phi:main::@9->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z mulFACbyMEM.mem
    lda #>f_127
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [25] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
    // main::@10
  b10:
    // [26] call addMEMtoFAC 
    // [63] phi from main::@10 to addMEMtoFAC [phi:main::@10->addMEMtoFAC]
  addMEMtoFAC_from_b10:
    jsr addMEMtoFAC
    // [27] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
    // main::@11
  b11:
    // [28] call getFAC 
    jsr getFAC
    // [29] (word) getFAC::return#2 ← (word) getFAC::return#0 -- vwuz1=vwuz2 
    lda.z getFAC.return
    sta.z getFAC.return_2
    lda.z getFAC.return+1
    sta.z getFAC.return_2+1
    jmp b12
    // main::@12
  b12:
    // [30] (word) print_word::w#0 ← (word) getFAC::return#2 -- vwuz1=vwuz2 
    lda.z getFAC.return_2
    sta.z print_word.w
    lda.z getFAC.return_2+1
    sta.z print_word.w+1
    // [31] call print_word 
    jsr print_word
    // [32] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  b13_from_b12:
    jmp b13
    // main::@13
  b13:
    // [33] call print_ln 
    // [38] phi from main::@13 to print_ln [phi:main::@13->print_ln]
  print_ln_from_b13:
    jsr print_ln
    jmp b14
    // main::@14
  b14:
    // [34] (byte) main::i#1 ← ++ (byte) main::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [35] if((byte) main::i#1!=(byte) $1a) goto main::@15 -- vbuz1_neq_vbuc1_then_la1 
    lda #$1a
    cmp.z i
    bne b15
    jmp breturn
    // main::@return
  breturn:
    // [36] return 
    rts
    // main::@15
  b15:
    // [37] (byte*~) print_char_cursor#53 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [10] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
  b1_from_b15:
    // [10] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#1 [phi:main::@15->main::@1#0] -- register_copy 
    // [10] phi (byte*) print_char_cursor#32 = (byte*~) print_char_cursor#53 [phi:main::@15->main::@1#1] -- register_copy 
    // [10] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@15->main::@1#2] -- register_copy 
    jmp b1
    f_i: .byte 0, 0, 0, 0, 0
    f_127: .byte 0, 0, 0, 0, 0
}
  // print_ln
// Print a newline
print_ln: {
    // [39] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
    // [39] phi (byte*) print_line_cursor#6 = (byte*) print_line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
    // print_ln::@1
  b1:
    // [40] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [41] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
    // print_ln::@return
  breturn:
    // [42] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zeropage($11) w)
print_word: {
    .label w = $11
    // [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [44] call print_byte 
    // [48] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [48] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_word->print_byte#0] -- register_copy 
    // [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
    // print_word::@1
  b1:
    // [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [46] call print_byte 
    // [48] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
    // [48] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#10 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
    // print_word::@return
  breturn:
    // [47] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage(5) b)
print_byte: {
    .label _0 = $13
    .label _2 = $14
    .label b = 5
    // [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z _0
    // [50] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z _0
    lda print_hextab,y
    sta.z print_char.ch
    // [51] call print_char 
    // [56] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [56] phi (byte*) print_char_cursor#23 = (byte*) print_char_cursor#31 [phi:print_byte->print_char#0] -- register_copy 
    // [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
    // print_byte::@1
  b1:
    // [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z _2
    // [53] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z _2
    lda print_hextab,y
    sta.z print_char.ch
    // [54] call print_char 
    // [56] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
    // [56] phi (byte*) print_char_cursor#23 = (byte*) print_char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
    // print_byte::@return
  breturn:
    // [55] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zeropage(6) ch)
print_char: {
    .label ch = 6
    // [57] *((byte*) print_char_cursor#23) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [58] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#23 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp breturn
    // print_char::@return
  breturn:
    // [59] return 
    rts
}
  // getFAC
// word = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit word
// Destroys the value in the FAC in the process
getFAC: {
    .label return = $15
    .label return_2 = $f
    // asm { jsr$b1aa stymemLo stamemHi  }
    // Load FAC (floating point accumulator) integer part into word register Y,A
    jsr $b1aa
    sty memLo
    sta memHi
    // [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta.z return
    lda memHi
    sta.z return+1
    jmp breturn
    // getFAC::@return
  breturn:
    // [62] return 
    rts
}
  // addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 bytes from memory
addMEMtoFAC: {
    .const prepareMEM1_mem = main.f_127
    jmp prepareMEM1
    // addMEMtoFAC::prepareMEM1
  prepareMEM1:
    // [64] *((const byte*) memLo#0) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // [65] *((const byte*) memHi#0) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    jmp b1
    // addMEMtoFAC::@1
  b1:
    // asm { ldamemLo ldymemHi jsr$b867  }
    lda memLo
    ldy memHi
    jsr $b867
    jmp breturn
    // addMEMtoFAC::@return
  breturn:
    // [67] return 
    rts
}
  // mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 bytes from memory
// mulFACbyMEM(byte* zeropage(9) mem)
mulFACbyMEM: {
    .label prepareMEM1__0 = $17
    .label prepareMEM1__1 = $18
    .label mem = 9
    jmp prepareMEM1
    // mulFACbyMEM::prepareMEM1
  prepareMEM1:
    // [69] (byte~) mulFACbyMEM::prepareMEM1_$0#0 ← < (word)(byte*) mulFACbyMEM::mem#2 -- vbuz1=_lo_vwuz2 
    lda.z mem
    sta.z prepareMEM1__0
    // [70] *((const byte*) memLo#0) ← (byte~) mulFACbyMEM::prepareMEM1_$0#0 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1__0
    sta memLo
    // [71] (byte~) mulFACbyMEM::prepareMEM1_$1#0 ← > (word)(byte*) mulFACbyMEM::mem#2 -- vbuz1=_hi_vwuz2 
    lda.z mem+1
    sta.z prepareMEM1__1
    // [72] *((const byte*) memHi#0) ← (byte~) mulFACbyMEM::prepareMEM1_$1#0 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1__1
    sta memHi
    jmp b1
    // mulFACbyMEM::@1
  b1:
    // asm { ldamemLo ldymemHi jsr$ba28  }
    lda memLo
    ldy memHi
    jsr $ba28
    jmp breturn
    // mulFACbyMEM::@return
  breturn:
    // [74] return 
    rts
}
  // sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
    // asm { jsr$e26b  }
    jsr $e26b
    jmp breturn
    // sinFAC::@return
  breturn:
    // [76] return 
    rts
}
  // divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 bytes from memory
divMEMbyFAC: {
    .const prepareMEM1_mem = main.f_i
    jmp prepareMEM1
    // divMEMbyFAC::prepareMEM1
  prepareMEM1:
    // [78] *((const byte*) memLo#0) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // [79] *((const byte*) memHi#0) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    jmp b1
    // divMEMbyFAC::@1
  b1:
    // asm { ldamemLo ldymemHi jsr$bb0f  }
    lda memLo
    ldy memHi
    jsr $bb0f
    jmp breturn
    // divMEMbyFAC::@return
  breturn:
    // [81] return 
    rts
}
  // setFAC
// FAC = word
// Set the FAC (floating point accumulator) to the integer value of a 16bit word
// setFAC(word zeropage($b) w)
setFAC: {
    .label prepareMEM1_mem = $b
    .label prepareMEM1__0 = $19
    .label prepareMEM1__1 = $1a
    .label w = $b
    jmp prepareMEM1
    // setFAC::prepareMEM1
  prepareMEM1:
    // [83] (byte~) setFAC::prepareMEM1_$0#0 ← < (word) setFAC::prepareMEM1_mem#0 -- vbuz1=_lo_vwuz2 
    lda.z prepareMEM1_mem
    sta.z prepareMEM1__0
    // [84] *((const byte*) memLo#0) ← (byte~) setFAC::prepareMEM1_$0#0 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1__0
    sta memLo
    // [85] (byte~) setFAC::prepareMEM1_$1#0 ← > (word) setFAC::prepareMEM1_mem#0 -- vbuz1=_hi_vwuz2 
    lda.z prepareMEM1_mem+1
    sta.z prepareMEM1__1
    // [86] *((const byte*) memHi#0) ← (byte~) setFAC::prepareMEM1_$1#0 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1__1
    sta memHi
    jmp b1
    // setFAC::@1
  b1:
    // asm { ldymemLo ldamemHi jsr$b391  }
    // Load word register Y,A into FAC (floating point accumulator)
    ldy memLo
    lda memHi
    jsr $b391
    jmp breturn
    // setFAC::@return
  breturn:
    // [88] return 
    rts
}
  // setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 bytes (means it is necessary to allocate 5 bytes to avoid clobbering other data using eg. byte[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zeropage($d) mem)
setMEMtoFAC: {
    .label prepareMEM1__0 = $1b
    .label prepareMEM1__1 = $1c
    .label mem = $d
    jmp prepareMEM1
    // setMEMtoFAC::prepareMEM1
  prepareMEM1:
    // [90] (byte~) setMEMtoFAC::prepareMEM1_$0#0 ← < (word)(byte*) setMEMtoFAC::mem#2 -- vbuz1=_lo_vwuz2 
    lda.z mem
    sta.z prepareMEM1__0
    // [91] *((const byte*) memLo#0) ← (byte~) setMEMtoFAC::prepareMEM1_$0#0 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1__0
    sta memLo
    // [92] (byte~) setMEMtoFAC::prepareMEM1_$1#0 ← > (word)(byte*) setMEMtoFAC::mem#2 -- vbuz1=_hi_vwuz2 
    lda.z mem+1
    sta.z prepareMEM1__1
    // [93] *((const byte*) memHi#0) ← (byte~) setMEMtoFAC::prepareMEM1_$1#0 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1__1
    sta memHi
    jmp b1
    // setMEMtoFAC::@1
  b1:
    // asm { ldxmemLo ldymemHi jsr$bbd4  }
    ldx memLo
    ldy memHi
    jsr $bbd4
    jmp breturn
    // setMEMtoFAC::@return
  breturn:
    // [95] return 
    rts
}
  // divFACby10
// FAC = FAC/10
// Set FAC to FAC divided by 10
divFACby10: {
    // asm { jsr$bafe  }
    jsr $bafe
    jmp breturn
    // divFACby10::@return
  breturn:
    // [97] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] (word) setFAC::w#1 ← (word)(byte) main::i#10 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::w#1 ] ( main:2 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::w#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Statement [29] (word) getFAC::return#2 ← (word) getFAC::return#0 [ main::i#10 print_char_cursor#32 print_line_cursor#13 getFAC::return#2 ] ( main:2 [ main::i#10 print_char_cursor#32 print_line_cursor#13 getFAC::return#2 ] ) always clobbers reg byte a 
Statement [30] (word) print_word::w#0 ← (word) getFAC::return#2 [ main::i#10 print_char_cursor#32 print_line_cursor#13 print_word::w#0 ] ( main:2 [ main::i#10 print_char_cursor#32 print_line_cursor#13 print_word::w#0 ] ) always clobbers reg byte a 
Statement [37] (byte*~) print_char_cursor#53 ← (byte*) print_line_cursor#1 [ main::i#1 print_char_cursor#53 print_line_cursor#1 ] ( main:2 [ main::i#1 print_char_cursor#53 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [40] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte) $28 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 print_line_cursor#1 print_char_cursor#10 ] ) always clobbers reg byte a 
Statement [41] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 print_line_cursor#1 print_char_cursor#10 ] ) always clobbers reg byte a 
Statement [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ print_char_cursor#32 print_word::w#0 print_byte::b#0 ] ( main:2::print_word:31 [ main::i#10 print_line_cursor#13 print_char_cursor#32 print_word::w#0 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ print_char_cursor#10 print_byte::b#1 ] ( main:2::print_word:31 [ main::i#10 print_line_cursor#13 print_char_cursor#10 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_byte::b#2 print_char_cursor#31 print_byte::$0 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 print_line_cursor#13 print_word::w#0 print_byte::b#2 print_char_cursor#31 print_byte::$0 ] main:2::print_word:31::print_byte:46 [ main::i#10 print_line_cursor#13 print_byte::b#2 print_char_cursor#31 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#10 print_byte::$2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 print_line_cursor#13 print_word::w#0 print_char_cursor#10 print_byte::$2 ] main:2::print_word:31::print_byte:46 [ main::i#10 print_line_cursor#13 print_char_cursor#10 print_byte::$2 ] ) always clobbers reg byte a 
Statement [57] *((byte*) print_char_cursor#23) ← (byte) print_char::ch#2 [ print_char_cursor#23 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 print_line_cursor#13 print_word::w#0 print_byte::b#2 print_char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 print_line_cursor#13 print_byte::b#2 print_char_cursor#23 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 print_line_cursor#13 print_word::w#0 print_char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 print_line_cursor#13 print_char_cursor#23 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement asm { jsr$b1aa stymemLo stamemHi  } always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Statement [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 print_char_cursor#32 print_line_cursor#13 getFAC::return#0 ] ) always clobbers reg byte a 
Statement [64] *((const byte*) memLo#0) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0 [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 print_char_cursor#32 print_line_cursor#13 ] ) always clobbers reg byte a 
Statement [65] *((const byte*) memHi#0) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0 [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 print_char_cursor#32 print_line_cursor#13 ] ) always clobbers reg byte a 
Statement asm { ldamemLo ldymemHi jsr$b867  } always clobbers reg byte a reg byte x reg byte y 
Statement [69] (byte~) mulFACbyMEM::prepareMEM1_$0#0 ← < (word)(byte*) mulFACbyMEM::mem#2 [ mulFACbyMEM::mem#2 mulFACbyMEM::prepareMEM1_$0#0 ] ( main:2::mulFACbyMEM:14 [ main::i#10 print_char_cursor#32 print_line_cursor#13 mulFACbyMEM::mem#2 mulFACbyMEM::prepareMEM1_$0#0 ] main:2::mulFACbyMEM:24 [ main::i#10 print_char_cursor#32 print_line_cursor#13 mulFACbyMEM::mem#2 mulFACbyMEM::prepareMEM1_$0#0 ] ) always clobbers reg byte a 
Statement [71] (byte~) mulFACbyMEM::prepareMEM1_$1#0 ← > (word)(byte*) mulFACbyMEM::mem#2 [ mulFACbyMEM::prepareMEM1_$1#0 ] ( main:2::mulFACbyMEM:14 [ main::i#10 print_char_cursor#32 print_line_cursor#13 mulFACbyMEM::prepareMEM1_$1#0 ] main:2::mulFACbyMEM:24 [ main::i#10 print_char_cursor#32 print_line_cursor#13 mulFACbyMEM::prepareMEM1_$1#0 ] ) always clobbers reg byte a 
Statement asm { ldamemLo ldymemHi jsr$ba28  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$e26b  } always clobbers reg byte a reg byte x reg byte y 
Statement [78] *((const byte*) memLo#0) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0 [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 print_char_cursor#32 print_line_cursor#13 ] ) always clobbers reg byte a 
Statement [79] *((const byte*) memHi#0) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0 [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 print_char_cursor#32 print_line_cursor#13 ] ) always clobbers reg byte a 
Statement asm { ldamemLo ldymemHi jsr$bb0f  } always clobbers reg byte a reg byte x reg byte y 
Statement [83] (byte~) setFAC::prepareMEM1_$0#0 ← < (word) setFAC::prepareMEM1_mem#0 [ setFAC::prepareMEM1_mem#0 setFAC::prepareMEM1_$0#0 ] ( main:2::setFAC:5 [ setFAC::prepareMEM1_mem#0 setFAC::prepareMEM1_$0#0 ] main:2::setFAC:12 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::prepareMEM1_mem#0 setFAC::prepareMEM1_$0#0 ] main:2::setFAC:18 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::prepareMEM1_mem#0 setFAC::prepareMEM1_$0#0 ] ) always clobbers reg byte a 
Statement [85] (byte~) setFAC::prepareMEM1_$1#0 ← > (word) setFAC::prepareMEM1_mem#0 [ setFAC::prepareMEM1_$1#0 ] ( main:2::setFAC:5 [ setFAC::prepareMEM1_$1#0 ] main:2::setFAC:12 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::prepareMEM1_$1#0 ] main:2::setFAC:18 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::prepareMEM1_$1#0 ] ) always clobbers reg byte a 
Statement asm { ldymemLo ldamemHi jsr$b391  } always clobbers reg byte a reg byte x reg byte y 
Statement [90] (byte~) setMEMtoFAC::prepareMEM1_$0#0 ← < (word)(byte*) setMEMtoFAC::mem#2 [ setMEMtoFAC::mem#2 setMEMtoFAC::prepareMEM1_$0#0 ] ( main:2::setMEMtoFAC:9 [ setMEMtoFAC::mem#2 setMEMtoFAC::prepareMEM1_$0#0 ] main:2::setMEMtoFAC:16 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setMEMtoFAC::mem#2 setMEMtoFAC::prepareMEM1_$0#0 ] ) always clobbers reg byte a 
Statement [92] (byte~) setMEMtoFAC::prepareMEM1_$1#0 ← > (word)(byte*) setMEMtoFAC::mem#2 [ setMEMtoFAC::prepareMEM1_$1#0 ] ( main:2::setMEMtoFAC:9 [ setMEMtoFAC::prepareMEM1_$1#0 ] main:2::setMEMtoFAC:16 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setMEMtoFAC::prepareMEM1_$1#0 ] ) always clobbers reg byte a 
Statement asm { ldxmemLo ldymemHi jsr$bbd4  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$bafe  } always clobbers reg byte a reg byte x reg byte y 
Statement [11] (word) setFAC::w#1 ← (word)(byte) main::i#10 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::w#1 ] ( main:2 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::w#1 ] ) always clobbers reg byte a 
Statement [29] (word) getFAC::return#2 ← (word) getFAC::return#0 [ main::i#10 print_char_cursor#32 print_line_cursor#13 getFAC::return#2 ] ( main:2 [ main::i#10 print_char_cursor#32 print_line_cursor#13 getFAC::return#2 ] ) always clobbers reg byte a 
Statement [30] (word) print_word::w#0 ← (word) getFAC::return#2 [ main::i#10 print_char_cursor#32 print_line_cursor#13 print_word::w#0 ] ( main:2 [ main::i#10 print_char_cursor#32 print_line_cursor#13 print_word::w#0 ] ) always clobbers reg byte a 
Statement [35] if((byte) main::i#1!=(byte) $1a) goto main::@15 [ main::i#1 print_line_cursor#1 ] ( main:2 [ main::i#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [37] (byte*~) print_char_cursor#53 ← (byte*) print_line_cursor#1 [ main::i#1 print_char_cursor#53 print_line_cursor#1 ] ( main:2 [ main::i#1 print_char_cursor#53 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [40] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte) $28 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 print_line_cursor#1 print_char_cursor#10 ] ) always clobbers reg byte a 
Statement [41] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 print_line_cursor#1 print_char_cursor#10 ] ) always clobbers reg byte a 
Statement [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ print_char_cursor#32 print_word::w#0 print_byte::b#0 ] ( main:2::print_word:31 [ main::i#10 print_line_cursor#13 print_char_cursor#32 print_word::w#0 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ print_char_cursor#10 print_byte::b#1 ] ( main:2::print_word:31 [ main::i#10 print_line_cursor#13 print_char_cursor#10 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_byte::b#2 print_char_cursor#31 print_byte::$0 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 print_line_cursor#13 print_word::w#0 print_byte::b#2 print_char_cursor#31 print_byte::$0 ] main:2::print_word:31::print_byte:46 [ main::i#10 print_line_cursor#13 print_byte::b#2 print_char_cursor#31 print_byte::$0 ] ) always clobbers reg byte a 
Statement [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#10 print_byte::$2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 print_line_cursor#13 print_word::w#0 print_char_cursor#10 print_byte::$2 ] main:2::print_word:31::print_byte:46 [ main::i#10 print_line_cursor#13 print_char_cursor#10 print_byte::$2 ] ) always clobbers reg byte a 
Statement [57] *((byte*) print_char_cursor#23) ← (byte) print_char::ch#2 [ print_char_cursor#23 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 print_line_cursor#13 print_word::w#0 print_byte::b#2 print_char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 print_line_cursor#13 print_byte::b#2 print_char_cursor#23 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 print_line_cursor#13 print_word::w#0 print_char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 print_line_cursor#13 print_char_cursor#23 ] ) always clobbers reg byte y 
Statement asm { jsr$b1aa stymemLo stamemHi  } always clobbers reg byte a reg byte x reg byte y 
Statement [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 print_char_cursor#32 print_line_cursor#13 getFAC::return#0 ] ) always clobbers reg byte a 
Statement [64] *((const byte*) memLo#0) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0 [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 print_char_cursor#32 print_line_cursor#13 ] ) always clobbers reg byte a 
Statement [65] *((const byte*) memHi#0) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0 [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 print_char_cursor#32 print_line_cursor#13 ] ) always clobbers reg byte a 
Statement asm { ldamemLo ldymemHi jsr$b867  } always clobbers reg byte a reg byte x reg byte y 
Statement [69] (byte~) mulFACbyMEM::prepareMEM1_$0#0 ← < (word)(byte*) mulFACbyMEM::mem#2 [ mulFACbyMEM::mem#2 mulFACbyMEM::prepareMEM1_$0#0 ] ( main:2::mulFACbyMEM:14 [ main::i#10 print_char_cursor#32 print_line_cursor#13 mulFACbyMEM::mem#2 mulFACbyMEM::prepareMEM1_$0#0 ] main:2::mulFACbyMEM:24 [ main::i#10 print_char_cursor#32 print_line_cursor#13 mulFACbyMEM::mem#2 mulFACbyMEM::prepareMEM1_$0#0 ] ) always clobbers reg byte a 
Statement [71] (byte~) mulFACbyMEM::prepareMEM1_$1#0 ← > (word)(byte*) mulFACbyMEM::mem#2 [ mulFACbyMEM::prepareMEM1_$1#0 ] ( main:2::mulFACbyMEM:14 [ main::i#10 print_char_cursor#32 print_line_cursor#13 mulFACbyMEM::prepareMEM1_$1#0 ] main:2::mulFACbyMEM:24 [ main::i#10 print_char_cursor#32 print_line_cursor#13 mulFACbyMEM::prepareMEM1_$1#0 ] ) always clobbers reg byte a 
Statement asm { ldamemLo ldymemHi jsr$ba28  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$e26b  } always clobbers reg byte a reg byte x reg byte y 
Statement [78] *((const byte*) memLo#0) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0 [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 print_char_cursor#32 print_line_cursor#13 ] ) always clobbers reg byte a 
Statement [79] *((const byte*) memHi#0) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0 [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 print_char_cursor#32 print_line_cursor#13 ] ) always clobbers reg byte a 
Statement asm { ldamemLo ldymemHi jsr$bb0f  } always clobbers reg byte a reg byte x reg byte y 
Statement [83] (byte~) setFAC::prepareMEM1_$0#0 ← < (word) setFAC::prepareMEM1_mem#0 [ setFAC::prepareMEM1_mem#0 setFAC::prepareMEM1_$0#0 ] ( main:2::setFAC:5 [ setFAC::prepareMEM1_mem#0 setFAC::prepareMEM1_$0#0 ] main:2::setFAC:12 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::prepareMEM1_mem#0 setFAC::prepareMEM1_$0#0 ] main:2::setFAC:18 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::prepareMEM1_mem#0 setFAC::prepareMEM1_$0#0 ] ) always clobbers reg byte a 
Statement [85] (byte~) setFAC::prepareMEM1_$1#0 ← > (word) setFAC::prepareMEM1_mem#0 [ setFAC::prepareMEM1_$1#0 ] ( main:2::setFAC:5 [ setFAC::prepareMEM1_$1#0 ] main:2::setFAC:12 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::prepareMEM1_$1#0 ] main:2::setFAC:18 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setFAC::prepareMEM1_$1#0 ] ) always clobbers reg byte a 
Statement asm { ldymemLo ldamemHi jsr$b391  } always clobbers reg byte a reg byte x reg byte y 
Statement [90] (byte~) setMEMtoFAC::prepareMEM1_$0#0 ← < (word)(byte*) setMEMtoFAC::mem#2 [ setMEMtoFAC::mem#2 setMEMtoFAC::prepareMEM1_$0#0 ] ( main:2::setMEMtoFAC:9 [ setMEMtoFAC::mem#2 setMEMtoFAC::prepareMEM1_$0#0 ] main:2::setMEMtoFAC:16 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setMEMtoFAC::mem#2 setMEMtoFAC::prepareMEM1_$0#0 ] ) always clobbers reg byte a 
Statement [92] (byte~) setMEMtoFAC::prepareMEM1_$1#0 ← > (word)(byte*) setMEMtoFAC::mem#2 [ setMEMtoFAC::prepareMEM1_$1#0 ] ( main:2::setMEMtoFAC:9 [ setMEMtoFAC::prepareMEM1_$1#0 ] main:2::setMEMtoFAC:16 [ main::i#10 print_char_cursor#32 print_line_cursor#13 setMEMtoFAC::prepareMEM1_$1#0 ] ) always clobbers reg byte a 
Statement asm { ldxmemLo ldymemHi jsr$bbd4  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$bafe  } always clobbers reg byte a reg byte x reg byte y 
Potential registers zp ZP_BYTE:2 [ main::i#10 main::i#1 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_WORD:3 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:5 , reg byte x , 
Potential registers zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:7 [ print_char_cursor#23 print_char_cursor#31 print_char_cursor#32 print_char_cursor#53 print_char_cursor#10 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ mulFACbyMEM::mem#2 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_WORD:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_WORD:13 [ setMEMtoFAC::mem#2 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ getFAC::return#2 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_WORD:17 [ print_word::w#0 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_BYTE:19 [ print_byte::$0 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ print_byte::$2 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:21 [ getFAC::return#0 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_BYTE:23 [ mulFACbyMEM::prepareMEM1_$0#0 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ mulFACbyMEM::prepareMEM1_$1#0 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ setFAC::prepareMEM1_$0#0 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ setFAC::prepareMEM1_$1#0 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ setMEMtoFAC::prepareMEM1_$0#0 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ setMEMtoFAC::prepareMEM1_$1#0 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 250.97: zp ZP_WORD:3 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ] 34.89: zp ZP_WORD:7 [ print_char_cursor#23 print_char_cursor#31 print_char_cursor#32 print_char_cursor#53 print_char_cursor#10 ] 
Uplift Scope [setFAC] 27: zp ZP_WORD:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 ] 4: zp ZP_BYTE:25 [ setFAC::prepareMEM1_$0#0 ] 4: zp ZP_BYTE:26 [ setFAC::prepareMEM1_$1#0 ] 
Uplift Scope [getFAC] 22: zp ZP_WORD:15 [ getFAC::return#2 ] 4.33: zp ZP_WORD:21 [ getFAC::return#0 ] 
Uplift Scope [print_byte] 10: zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:19 [ print_byte::$0 ] 4: zp ZP_BYTE:20 [ print_byte::$2 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [main] 11.92: zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 
Uplift Scope [setMEMtoFAC] 4: zp ZP_BYTE:27 [ setMEMtoFAC::prepareMEM1_$0#0 ] 4: zp ZP_BYTE:28 [ setMEMtoFAC::prepareMEM1_$1#0 ] 0: zp ZP_WORD:13 [ setMEMtoFAC::mem#2 ] 
Uplift Scope [mulFACbyMEM] 4: zp ZP_BYTE:23 [ mulFACbyMEM::prepareMEM1_$0#0 ] 4: zp ZP_BYTE:24 [ mulFACbyMEM::prepareMEM1_$1#0 ] 0: zp ZP_WORD:9 [ mulFACbyMEM::mem#2 ] 
Uplift Scope [print_word] 5: zp ZP_WORD:17 [ print_word::w#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [addMEMtoFAC] 
Uplift Scope [divMEMbyFAC] 
Uplift Scope [sinFAC] 
Uplift Scope [divFACby10] 

Uplifting [] best 6457 combination zp ZP_WORD:3 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ] zp ZP_WORD:7 [ print_char_cursor#23 print_char_cursor#31 print_char_cursor#32 print_char_cursor#53 print_char_cursor#10 ] 
Uplifting [setFAC] best 6445 combination zp ZP_WORD:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 ] reg byte a [ setFAC::prepareMEM1_$0#0 ] reg byte a [ setFAC::prepareMEM1_$1#0 ] 
Uplifting [getFAC] best 6445 combination zp ZP_WORD:15 [ getFAC::return#2 ] zp ZP_WORD:21 [ getFAC::return#0 ] 
Uplifting [print_byte] best 6431 combination reg byte x [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte x [ print_byte::$2 ] 
Uplifting [print_char] best 6422 combination reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplifting [main] best 6422 combination zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 
Uplifting [setMEMtoFAC] best 6410 combination reg byte a [ setMEMtoFAC::prepareMEM1_$0#0 ] reg byte a [ setMEMtoFAC::prepareMEM1_$1#0 ] zp ZP_WORD:13 [ setMEMtoFAC::mem#2 ] 
Uplifting [mulFACbyMEM] best 6398 combination reg byte a [ mulFACbyMEM::prepareMEM1_$0#0 ] reg byte a [ mulFACbyMEM::prepareMEM1_$1#0 ] zp ZP_WORD:9 [ mulFACbyMEM::mem#2 ] 
Uplifting [print_word] best 6398 combination zp ZP_WORD:17 [ print_word::w#0 ] 
Uplifting [RADIX] best 6398 combination 
Uplifting [print_ln] best 6398 combination 
Uplifting [addMEMtoFAC] best 6398 combination 
Uplifting [divMEMbyFAC] best 6398 combination 
Uplifting [sinFAC] best 6398 combination 
Uplifting [divFACby10] best 6398 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Uplifting [main] best 6398 combination zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 
Coalescing zero page register [ zp ZP_WORD:15 [ getFAC::return#2 ] ] with [ zp ZP_WORD:17 [ print_word::w#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:15 [ getFAC::return#2 print_word::w#0 ] ] with [ zp ZP_WORD:21 [ getFAC::return#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 ] ] with [ zp ZP_WORD:9 [ mulFACbyMEM::mem#2 ] ]
Coalescing zero page register [ zp ZP_WORD:15 [ getFAC::return#2 print_word::w#0 getFAC::return#0 ] ] with [ zp ZP_WORD:13 [ setMEMtoFAC::mem#2 ] ]
Coalescing zero page register [ zp ZP_WORD:15 [ getFAC::return#2 print_word::w#0 getFAC::return#0 setMEMtoFAC::mem#2 ] ] with [ zp ZP_WORD:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 mulFACbyMEM::mem#2 ] ]
Allocated (was zp ZP_WORD:7) zp ZP_WORD:5 [ print_char_cursor#23 print_char_cursor#31 print_char_cursor#32 print_char_cursor#53 print_char_cursor#10 ]
Allocated (was zp ZP_WORD:15) zp ZP_WORD:7 [ getFAC::return#2 print_word::w#0 getFAC::return#0 setMEMtoFAC::mem#2 setFAC::prepareMEM1_mem#0 setFAC::w#1 mulFACbyMEM::mem#2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .label print_line_cursor = 3
  .label print_char_cursor = 5
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label f_2pi = $e2e5
    .label i = 2
    // [5] call setFAC 
    // [82] phi from main to setFAC [phi:main->setFAC]
  setFAC_from_main:
    // [82] phi (word) setFAC::prepareMEM1_mem#0 = (word) $4fb [phi:main->setFAC#0] -- vwuz1=vwuc1 
    lda #<$4fb
    sta.z setFAC.prepareMEM1_mem
    lda #>$4fb
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [6] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
    jmp b2
    // main::@2
  b2:
    // [7] call divFACby10 
    jsr divFACby10
    // [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
    // main::@3
  b3:
    // [9] call setMEMtoFAC 
    // [89] phi from main::@3 to setMEMtoFAC [phi:main::@3->setMEMtoFAC]
  setMEMtoFAC_from_b3:
    // [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_127#0 [phi:main::@3->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z setMEMtoFAC.mem
    lda #>f_127
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [10] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
    // [10] phi (byte*) print_line_cursor#13 = (byte*) 1024 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [10] phi (byte*) print_char_cursor#32 = (byte*) 1024 [phi:main::@3->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [10] phi (byte) main::i#10 = (byte) 1 [phi:main::@3->main::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp b1
    // main::@1
  b1:
    // [11] (word) setFAC::w#1 ← (word)(byte) main::i#10 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z setFAC.w
    lda #0
    sta.z setFAC.w+1
    // [12] call setFAC 
    // [82] phi from main::@1 to setFAC [phi:main::@1->setFAC]
  setFAC_from_b1:
    // [82] phi (word) setFAC::prepareMEM1_mem#0 = (word) setFAC::w#1 [phi:main::@1->setFAC#0] -- register_copy 
    jsr setFAC
    // [13] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  b4_from_b1:
    jmp b4
    // main::@4
  b4:
    // [14] call mulFACbyMEM 
    // [68] phi from main::@4 to mulFACbyMEM [phi:main::@4->mulFACbyMEM]
  mulFACbyMEM_from_b4:
    // [68] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) main::f_2pi#0 [phi:main::@4->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta.z mulFACbyMEM.mem
    lda #>f_2pi
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [15] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
    // main::@5
  b5:
    // [16] call setMEMtoFAC 
    // [89] phi from main::@5 to setMEMtoFAC [phi:main::@5->setMEMtoFAC]
  setMEMtoFAC_from_b5:
    // [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_i#0 [phi:main::@5->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta.z setMEMtoFAC.mem
    lda #>f_i
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [17] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    jmp b6
    // main::@6
  b6:
    // [18] call setFAC 
    // [82] phi from main::@6 to setFAC [phi:main::@6->setFAC]
  setFAC_from_b6:
    // [82] phi (word) setFAC::prepareMEM1_mem#0 = (byte) $19 [phi:main::@6->setFAC#0] -- vwuz1=vbuc1 
    lda #<$19
    sta.z setFAC.prepareMEM1_mem
    lda #>$19
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [19] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
    // main::@7
  b7:
    // [20] call divMEMbyFAC 
    // [77] phi from main::@7 to divMEMbyFAC [phi:main::@7->divMEMbyFAC]
  divMEMbyFAC_from_b7:
    jsr divMEMbyFAC
    // [21] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  b8_from_b7:
    jmp b8
    // main::@8
  b8:
    // [22] call sinFAC 
    jsr sinFAC
    // [23] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
    // main::@9
  b9:
    // [24] call mulFACbyMEM 
    // [68] phi from main::@9 to mulFACbyMEM [phi:main::@9->mulFACbyMEM]
  mulFACbyMEM_from_b9:
    // [68] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) main::f_127#0 [phi:main::@9->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z mulFACbyMEM.mem
    lda #>f_127
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [25] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
    // main::@10
  b10:
    // [26] call addMEMtoFAC 
    // [63] phi from main::@10 to addMEMtoFAC [phi:main::@10->addMEMtoFAC]
  addMEMtoFAC_from_b10:
    jsr addMEMtoFAC
    // [27] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
    // main::@11
  b11:
    // [28] call getFAC 
    jsr getFAC
    // [29] (word) getFAC::return#2 ← (word) getFAC::return#0
    jmp b12
    // main::@12
  b12:
    // [30] (word) print_word::w#0 ← (word) getFAC::return#2
    // [31] call print_word 
    jsr print_word
    // [32] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  b13_from_b12:
    jmp b13
    // main::@13
  b13:
    // [33] call print_ln 
    // [38] phi from main::@13 to print_ln [phi:main::@13->print_ln]
  print_ln_from_b13:
    jsr print_ln
    jmp b14
    // main::@14
  b14:
    // [34] (byte) main::i#1 ← ++ (byte) main::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [35] if((byte) main::i#1!=(byte) $1a) goto main::@15 -- vbuz1_neq_vbuc1_then_la1 
    lda #$1a
    cmp.z i
    bne b15
    jmp breturn
    // main::@return
  breturn:
    // [36] return 
    rts
    // main::@15
  b15:
    // [37] (byte*~) print_char_cursor#53 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [10] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
  b1_from_b15:
    // [10] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#1 [phi:main::@15->main::@1#0] -- register_copy 
    // [10] phi (byte*) print_char_cursor#32 = (byte*~) print_char_cursor#53 [phi:main::@15->main::@1#1] -- register_copy 
    // [10] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@15->main::@1#2] -- register_copy 
    jmp b1
    f_i: .byte 0, 0, 0, 0, 0
    f_127: .byte 0, 0, 0, 0, 0
}
  // print_ln
// Print a newline
print_ln: {
    // [39] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
    // [39] phi (byte*) print_line_cursor#6 = (byte*) print_line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
    // print_ln::@1
  b1:
    // [40] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [41] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
    // print_ln::@return
  breturn:
    // [42] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zeropage(7) w)
print_word: {
    .label w = 7
    // [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 -- vbuxx=_hi_vwuz1 
    lda.z w+1
    tax
    // [44] call print_byte 
    // [48] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [48] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_word->print_byte#0] -- register_copy 
    // [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
    // print_word::@1
  b1:
    // [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 -- vbuxx=_lo_vwuz1 
    lda.z w
    tax
    // [46] call print_byte 
    // [48] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
    // [48] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#10 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
    // print_word::@return
  breturn:
    // [47] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
    // [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [50] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [51] call print_char 
    // [56] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [56] phi (byte*) print_char_cursor#23 = (byte*) print_char_cursor#31 [phi:print_byte->print_char#0] -- register_copy 
    // [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
    // print_byte::@1
  b1:
    // [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [53] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [54] call print_char 
    // [56] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
    // [56] phi (byte*) print_char_cursor#23 = (byte*) print_char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
    // print_byte::@return
  breturn:
    // [55] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [57] *((byte*) print_char_cursor#23) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [58] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#23 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp breturn
    // print_char::@return
  breturn:
    // [59] return 
    rts
}
  // getFAC
// word = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit word
// Destroys the value in the FAC in the process
getFAC: {
    .label return = 7
    // asm { jsr$b1aa stymemLo stamemHi  }
    // Load FAC (floating point accumulator) integer part into word register Y,A
    jsr $b1aa
    sty memLo
    sta memHi
    // [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta.z return
    lda memHi
    sta.z return+1
    jmp breturn
    // getFAC::@return
  breturn:
    // [62] return 
    rts
}
  // addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 bytes from memory
addMEMtoFAC: {
    .const prepareMEM1_mem = main.f_127
    jmp prepareMEM1
    // addMEMtoFAC::prepareMEM1
  prepareMEM1:
    // [64] *((const byte*) memLo#0) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // [65] *((const byte*) memHi#0) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    jmp b1
    // addMEMtoFAC::@1
  b1:
    // asm { ldamemLo ldymemHi jsr$b867  }
    lda memLo
    ldy memHi
    jsr $b867
    jmp breturn
    // addMEMtoFAC::@return
  breturn:
    // [67] return 
    rts
}
  // mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 bytes from memory
// mulFACbyMEM(byte* zeropage(7) mem)
mulFACbyMEM: {
    .label mem = 7
    jmp prepareMEM1
    // mulFACbyMEM::prepareMEM1
  prepareMEM1:
    // [69] (byte~) mulFACbyMEM::prepareMEM1_$0#0 ← < (word)(byte*) mulFACbyMEM::mem#2 -- vbuaa=_lo_vwuz1 
    lda.z mem
    // [70] *((const byte*) memLo#0) ← (byte~) mulFACbyMEM::prepareMEM1_$0#0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // [71] (byte~) mulFACbyMEM::prepareMEM1_$1#0 ← > (word)(byte*) mulFACbyMEM::mem#2 -- vbuaa=_hi_vwuz1 
    lda.z mem+1
    // [72] *((const byte*) memHi#0) ← (byte~) mulFACbyMEM::prepareMEM1_$1#0 -- _deref_pbuc1=vbuaa 
    sta memHi
    jmp b1
    // mulFACbyMEM::@1
  b1:
    // asm { ldamemLo ldymemHi jsr$ba28  }
    lda memLo
    ldy memHi
    jsr $ba28
    jmp breturn
    // mulFACbyMEM::@return
  breturn:
    // [74] return 
    rts
}
  // sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
    // asm { jsr$e26b  }
    jsr $e26b
    jmp breturn
    // sinFAC::@return
  breturn:
    // [76] return 
    rts
}
  // divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 bytes from memory
divMEMbyFAC: {
    .const prepareMEM1_mem = main.f_i
    jmp prepareMEM1
    // divMEMbyFAC::prepareMEM1
  prepareMEM1:
    // [78] *((const byte*) memLo#0) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // [79] *((const byte*) memHi#0) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    jmp b1
    // divMEMbyFAC::@1
  b1:
    // asm { ldamemLo ldymemHi jsr$bb0f  }
    lda memLo
    ldy memHi
    jsr $bb0f
    jmp breturn
    // divMEMbyFAC::@return
  breturn:
    // [81] return 
    rts
}
  // setFAC
// FAC = word
// Set the FAC (floating point accumulator) to the integer value of a 16bit word
// setFAC(word zeropage(7) w)
setFAC: {
    .label prepareMEM1_mem = 7
    .label w = 7
    jmp prepareMEM1
    // setFAC::prepareMEM1
  prepareMEM1:
    // [83] (byte~) setFAC::prepareMEM1_$0#0 ← < (word) setFAC::prepareMEM1_mem#0 -- vbuaa=_lo_vwuz1 
    lda.z prepareMEM1_mem
    // [84] *((const byte*) memLo#0) ← (byte~) setFAC::prepareMEM1_$0#0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // [85] (byte~) setFAC::prepareMEM1_$1#0 ← > (word) setFAC::prepareMEM1_mem#0 -- vbuaa=_hi_vwuz1 
    lda.z prepareMEM1_mem+1
    // [86] *((const byte*) memHi#0) ← (byte~) setFAC::prepareMEM1_$1#0 -- _deref_pbuc1=vbuaa 
    sta memHi
    jmp b1
    // setFAC::@1
  b1:
    // asm { ldymemLo ldamemHi jsr$b391  }
    // Load word register Y,A into FAC (floating point accumulator)
    ldy memLo
    lda memHi
    jsr $b391
    jmp breturn
    // setFAC::@return
  breturn:
    // [88] return 
    rts
}
  // setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 bytes (means it is necessary to allocate 5 bytes to avoid clobbering other data using eg. byte[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zeropage(7) mem)
setMEMtoFAC: {
    .label mem = 7
    jmp prepareMEM1
    // setMEMtoFAC::prepareMEM1
  prepareMEM1:
    // [90] (byte~) setMEMtoFAC::prepareMEM1_$0#0 ← < (word)(byte*) setMEMtoFAC::mem#2 -- vbuaa=_lo_vwuz1 
    lda.z mem
    // [91] *((const byte*) memLo#0) ← (byte~) setMEMtoFAC::prepareMEM1_$0#0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // [92] (byte~) setMEMtoFAC::prepareMEM1_$1#0 ← > (word)(byte*) setMEMtoFAC::mem#2 -- vbuaa=_hi_vwuz1 
    lda.z mem+1
    // [93] *((const byte*) memHi#0) ← (byte~) setMEMtoFAC::prepareMEM1_$1#0 -- _deref_pbuc1=vbuaa 
    sta memHi
    jmp b1
    // setMEMtoFAC::@1
  b1:
    // asm { ldxmemLo ldymemHi jsr$bbd4  }
    ldx memLo
    ldy memHi
    jsr $bbd4
    jmp breturn
    // setMEMtoFAC::@return
  breturn:
    // [95] return 
    rts
}
  // divFACby10
// FAC = FAC/10
// Set FAC to FAC divided by 10
divFACby10: {
    // asm { jsr$bafe  }
    jsr $bafe
    jmp breturn
    // divFACby10::@return
  breturn:
    // [97] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp prepareMEM1
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp prepareMEM1
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp prepareMEM1
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp prepareMEM1
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp prepareMEM1
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda memLo with TYA
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b2_from_main:
Removing instruction b3_from_b2:
Removing instruction setMEMtoFAC_from_b3:
Removing instruction b4_from_b1:
Removing instruction mulFACbyMEM_from_b4:
Removing instruction b5_from_b4:
Removing instruction setMEMtoFAC_from_b5:
Removing instruction b6_from_b5:
Removing instruction setFAC_from_b6:
Removing instruction b7_from_b6:
Removing instruction divMEMbyFAC_from_b7:
Removing instruction b8_from_b7:
Removing instruction b9_from_b8:
Removing instruction mulFACbyMEM_from_b9:
Removing instruction b10_from_b9:
Removing instruction addMEMtoFAC_from_b10:
Removing instruction b11_from_b10:
Removing instruction b13_from_b12:
Removing instruction print_ln_from_b13:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction setFAC_from_main:
Removing instruction b2:
Removing instruction b3:
Removing instruction b1_from_b3:
Removing instruction setFAC_from_b1:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction breturn:
Removing instruction b1_from_b15:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM1:
Removing instruction b1:
Removing instruction breturn:
Removing instruction prepareMEM1:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM1:
Removing instruction b1:
Removing instruction breturn:
Removing instruction prepareMEM1:
Removing instruction b1:
Removing instruction breturn:
Removing instruction prepareMEM1:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction lda memHi
Replacing instruction ldy memHi with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY BINARY = (number) 2
(const byte) RADIX::DECIMAL DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL OCTAL = (number) 8
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(label) addMEMtoFAC::@1
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(label) addMEMtoFAC::prepareMEM1
(byte~) addMEMtoFAC::prepareMEM1_$0
(byte~) addMEMtoFAC::prepareMEM1_$1
(word) addMEMtoFAC::prepareMEM1_mem
(const word) addMEMtoFAC::prepareMEM1_mem#0 prepareMEM1_mem = (word)(const byte[]) main::f_127#0
(void()) divFACby10()
(label) divFACby10::@return
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(label) divMEMbyFAC::@1
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(label) divMEMbyFAC::prepareMEM1
(byte~) divMEMbyFAC::prepareMEM1_$0
(byte~) divMEMbyFAC::prepareMEM1_$1
(word) divMEMbyFAC::prepareMEM1_mem
(const word) divMEMbyFAC::prepareMEM1_mem#0 prepareMEM1_mem = (word)(const byte[]) main::f_i#0
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::return#0 return zp ZP_WORD:7 4.333333333333333
(word) getFAC::return#2 return zp ZP_WORD:7 22.0
(word) getFAC::w
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte[]) main::f_127
(const byte[]) main::f_127#0 f_127 = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte*) main::f_2pi
(const byte*) main::f_2pi#0 f_2pi = (byte*) 58085
(byte[]) main::f_i
(const byte[]) main::f_i#0 f_i = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:2 11.0
(byte) main::i#10 i zp ZP_BYTE:2 0.9166666666666666
(byte*) memHi
(const byte*) memHi#0 memHi = (byte*) 255
(byte*) memLo
(const byte*) memLo#0 memLo = (byte*) 254
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(label) mulFACbyMEM::@1
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#2 mem zp ZP_WORD:7
(label) mulFACbyMEM::prepareMEM1
(byte~) mulFACbyMEM::prepareMEM1_$0
(byte~) mulFACbyMEM::prepareMEM1_$0#0 reg byte a 4.0
(byte~) mulFACbyMEM::prepareMEM1_$1
(byte~) mulFACbyMEM::prepareMEM1_$1#0 reg byte a 4.0
(word) mulFACbyMEM::prepareMEM1_mem
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte x 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 4.0
(byte) print_byte::b#1 reg byte x 4.0
(byte) print_byte::b#2 reg byte x 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#10 print_char_cursor zp ZP_WORD:5 6.2941176470588225
(byte*) print_char_cursor#23 print_char_cursor zp ZP_WORD:5 4.0
(byte*) print_char_cursor#31 print_char_cursor zp ZP_WORD:5 2.0
(byte*) print_char_cursor#32 print_char_cursor zp ZP_WORD:5 0.5909090909090909
(byte*~) print_char_cursor#53 print_char_cursor zp ZP_WORD:5 22.0
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:3 46.42857142857143
(byte*) print_line_cursor#13 print_line_cursor zp ZP_WORD:3 0.5416666666666666
(byte*) print_line_cursor#6 print_line_cursor zp ZP_WORD:3 204.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp ZP_WORD:7 5.0
(void()) setFAC((word) setFAC::w)
(label) setFAC::@1
(label) setFAC::@return
(label) setFAC::prepareMEM1
(byte~) setFAC::prepareMEM1_$0
(byte~) setFAC::prepareMEM1_$0#0 reg byte a 4.0
(byte~) setFAC::prepareMEM1_$1
(byte~) setFAC::prepareMEM1_$1#0 reg byte a 4.0
(word) setFAC::prepareMEM1_mem
(word) setFAC::prepareMEM1_mem#0 prepareMEM1_mem zp ZP_WORD:7 5.0
(word) setFAC::w
(word) setFAC::w#1 w zp ZP_WORD:7 22.0
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(label) setMEMtoFAC::@1
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#2 mem zp ZP_WORD:7
(label) setMEMtoFAC::prepareMEM1
(byte~) setMEMtoFAC::prepareMEM1_$0
(byte~) setMEMtoFAC::prepareMEM1_$0#0 reg byte a 4.0
(byte~) setMEMtoFAC::prepareMEM1_$1
(byte~) setMEMtoFAC::prepareMEM1_$1#0 reg byte a 4.0
(word) setMEMtoFAC::prepareMEM1_mem
(void()) sinFAC()
(label) sinFAC::@return

zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
zp ZP_WORD:3 [ print_line_cursor#6 print_line_cursor#13 print_line_cursor#1 ]
reg byte x [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:5 [ print_char_cursor#23 print_char_cursor#31 print_char_cursor#32 print_char_cursor#53 print_char_cursor#10 ]
zp ZP_WORD:7 [ getFAC::return#2 print_word::w#0 getFAC::return#0 setMEMtoFAC::mem#2 setFAC::prepareMEM1_mem#0 setFAC::w#1 mulFACbyMEM::mem#2 ]
reg byte a [ print_byte::$0 ]
reg byte x [ print_byte::$2 ]
reg byte a [ mulFACbyMEM::prepareMEM1_$0#0 ]
reg byte a [ mulFACbyMEM::prepareMEM1_$1#0 ]
reg byte a [ setFAC::prepareMEM1_$0#0 ]
reg byte a [ setFAC::prepareMEM1_$1#0 ]
reg byte a [ setMEMtoFAC::prepareMEM1_$0#0 ]
reg byte a [ setMEMtoFAC::prepareMEM1_$1#0 ]


FINAL ASSEMBLER
Score: 4965

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .label print_line_cursor = 3
  .label print_char_cursor = 5
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label f_2pi = $e2e5
    .label i = 2
    // setFAC(1275)
    // [5] call setFAC 
    // [82] phi from main to setFAC [phi:main->setFAC]
    // [82] phi (word) setFAC::prepareMEM1_mem#0 = (word) $4fb [phi:main->setFAC#0] -- vwuz1=vwuc1 
    lda #<$4fb
    sta.z setFAC.prepareMEM1_mem
    lda #>$4fb
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [6] phi from main to main::@2 [phi:main->main::@2]
    // main::@2
    // divFACby10()
    // [7] call divFACby10 
    jsr divFACby10
    // [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // setMEMtoFAC(f_127)
    // [9] call setMEMtoFAC 
    // [89] phi from main::@3 to setMEMtoFAC [phi:main::@3->setMEMtoFAC]
    // [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_127#0 [phi:main::@3->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z setMEMtoFAC.mem
    lda #>f_127
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [10] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [10] phi (byte*) print_line_cursor#13 = (byte*) 1024 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [10] phi (byte*) print_char_cursor#32 = (byte*) 1024 [phi:main::@3->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [10] phi (byte) main::i#10 = (byte) 1 [phi:main::@3->main::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    // main::@1
  b1:
    // setFAC((word)i)
    // [11] (word) setFAC::w#1 ← (word)(byte) main::i#10 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z setFAC.w
    lda #0
    sta.z setFAC.w+1
    // [12] call setFAC 
    // [82] phi from main::@1 to setFAC [phi:main::@1->setFAC]
    // [82] phi (word) setFAC::prepareMEM1_mem#0 = (word) setFAC::w#1 [phi:main::@1->setFAC#0] -- register_copy 
    jsr setFAC
    // [13] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
    // main::@4
    // mulFACbyMEM(f_2pi)
    // [14] call mulFACbyMEM 
    // [68] phi from main::@4 to mulFACbyMEM [phi:main::@4->mulFACbyMEM]
    // [68] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) main::f_2pi#0 [phi:main::@4->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta.z mulFACbyMEM.mem
    lda #>f_2pi
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [15] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // setMEMtoFAC(f_i)
    // [16] call setMEMtoFAC 
    // [89] phi from main::@5 to setMEMtoFAC [phi:main::@5->setMEMtoFAC]
    // [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_i#0 [phi:main::@5->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta.z setMEMtoFAC.mem
    lda #>f_i
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [17] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // setFAC(25)
    // [18] call setFAC 
    // [82] phi from main::@6 to setFAC [phi:main::@6->setFAC]
    // [82] phi (word) setFAC::prepareMEM1_mem#0 = (byte) $19 [phi:main::@6->setFAC#0] -- vwuz1=vbuc1 
    lda #<$19
    sta.z setFAC.prepareMEM1_mem
    lda #>$19
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [19] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // divMEMbyFAC(f_i)
    // [20] call divMEMbyFAC 
    // [77] phi from main::@7 to divMEMbyFAC [phi:main::@7->divMEMbyFAC]
    jsr divMEMbyFAC
    // [21] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
    // sinFAC()
    // [22] call sinFAC 
    jsr sinFAC
    // [23] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // mulFACbyMEM(f_127)
    // [24] call mulFACbyMEM 
    // [68] phi from main::@9 to mulFACbyMEM [phi:main::@9->mulFACbyMEM]
    // [68] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) main::f_127#0 [phi:main::@9->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z mulFACbyMEM.mem
    lda #>f_127
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [25] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // main::@10
    // addMEMtoFAC(f_127)
    // [26] call addMEMtoFAC 
    // [63] phi from main::@10 to addMEMtoFAC [phi:main::@10->addMEMtoFAC]
    jsr addMEMtoFAC
    // [27] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
    // main::@11
    // getFAC()
    // [28] call getFAC 
    jsr getFAC
    // [29] (word) getFAC::return#2 ← (word) getFAC::return#0
    // main::@12
    // print_word(getFAC())
    // [30] (word) print_word::w#0 ← (word) getFAC::return#2
    // [31] call print_word 
    jsr print_word
    // [32] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // print_ln()
    // [33] call print_ln 
    // [38] phi from main::@13 to print_ln [phi:main::@13->print_ln]
    jsr print_ln
    // main::@14
    // for(byte i : 1..25)
    // [34] (byte) main::i#1 ← ++ (byte) main::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [35] if((byte) main::i#1!=(byte) $1a) goto main::@15 -- vbuz1_neq_vbuc1_then_la1 
    lda #$1a
    cmp.z i
    bne b15
    // main::@return
    // }
    // [36] return 
    rts
    // main::@15
  b15:
    // [37] (byte*~) print_char_cursor#53 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [10] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
    // [10] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#1 [phi:main::@15->main::@1#0] -- register_copy 
    // [10] phi (byte*) print_char_cursor#32 = (byte*~) print_char_cursor#53 [phi:main::@15->main::@1#1] -- register_copy 
    // [10] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@15->main::@1#2] -- register_copy 
    jmp b1
    f_i: .byte 0, 0, 0, 0, 0
    f_127: .byte 0, 0, 0, 0, 0
}
  // print_ln
// Print a newline
print_ln: {
    // [39] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [39] phi (byte*) print_line_cursor#6 = (byte*) print_line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  b1:
    // print_line_cursor + $28
    // [40] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [41] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc b1
  !:
    // print_ln::@return
    // }
    // [42] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zeropage(7) w)
print_word: {
    .label w = 7
    // print_byte(>w)
    // [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 -- vbuxx=_hi_vwuz1 
    lda.z w+1
    tax
    // [44] call print_byte 
    // [48] phi from print_word to print_byte [phi:print_word->print_byte]
    // [48] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_word->print_byte#0] -- register_copy 
    // [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    // print_word::@1
    // print_byte(<w)
    // [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 -- vbuxx=_lo_vwuz1 
    lda.z w
    tax
    // [46] call print_byte 
    // [48] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
    // [48] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#10 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    // print_word::@return
    // }
    // [47] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
    // b>>4
    // [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [50] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [51] call print_char 
    // [56] phi from print_byte to print_char [phi:print_byte->print_char]
    // [56] phi (byte*) print_char_cursor#23 = (byte*) print_char_cursor#31 [phi:print_byte->print_char#0] -- register_copy 
    // [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@1
    // b&$f
    // [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [53] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [54] call print_char 
    // [56] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
    // [56] phi (byte*) print_char_cursor#23 = (byte*) print_char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@return
    // }
    // [55] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [57] *((byte*) print_char_cursor#23) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [58] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#23 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [59] return 
    rts
}
  // getFAC
// word = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit word
// Destroys the value in the FAC in the process
getFAC: {
    .label return = 7
    // asm
    // asm { jsr$b1aa stymemLo stamemHi  }
    // Load FAC (floating point accumulator) integer part into word register Y,A
    jsr $b1aa
    sty memLo
    sta memHi
    // w = { *memHi, *memLo }
    // [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    tya
    sta.z return
    lda memHi
    sta.z return+1
    // getFAC::@return
    // }
    // [62] return 
    rts
}
  // addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 bytes from memory
addMEMtoFAC: {
    .const prepareMEM1_mem = main.f_127
    // addMEMtoFAC::prepareMEM1
    // *memLo = <mem
    // [64] *((const byte*) memLo#0) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // *memHi = >mem
    // [65] *((const byte*) memHi#0) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    // addMEMtoFAC::@1
    // asm
    // asm { ldamemLo ldymemHi jsr$b867  }
    lda memLo
    ldy memHi
    jsr $b867
    // addMEMtoFAC::@return
    // }
    // [67] return 
    rts
}
  // mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 bytes from memory
// mulFACbyMEM(byte* zeropage(7) mem)
mulFACbyMEM: {
    .label mem = 7
    // mulFACbyMEM::prepareMEM1
    // <mem
    // [69] (byte~) mulFACbyMEM::prepareMEM1_$0#0 ← < (word)(byte*) mulFACbyMEM::mem#2 -- vbuaa=_lo_vwuz1 
    lda.z mem
    // *memLo = <mem
    // [70] *((const byte*) memLo#0) ← (byte~) mulFACbyMEM::prepareMEM1_$0#0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // >mem
    // [71] (byte~) mulFACbyMEM::prepareMEM1_$1#0 ← > (word)(byte*) mulFACbyMEM::mem#2 -- vbuaa=_hi_vwuz1 
    lda.z mem+1
    // *memHi = >mem
    // [72] *((const byte*) memHi#0) ← (byte~) mulFACbyMEM::prepareMEM1_$1#0 -- _deref_pbuc1=vbuaa 
    sta memHi
    // mulFACbyMEM::@1
    // asm
    // asm { ldamemLo ldymemHi jsr$ba28  }
    lda memLo
    ldy memHi
    jsr $ba28
    // mulFACbyMEM::@return
    // }
    // [74] return 
    rts
}
  // sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
    // asm
    // asm { jsr$e26b  }
    jsr $e26b
    // sinFAC::@return
    // }
    // [76] return 
    rts
}
  // divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 bytes from memory
divMEMbyFAC: {
    .const prepareMEM1_mem = main.f_i
    // divMEMbyFAC::prepareMEM1
    // *memLo = <mem
    // [78] *((const byte*) memLo#0) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // *memHi = >mem
    // [79] *((const byte*) memHi#0) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    // divMEMbyFAC::@1
    // asm
    // asm { ldamemLo ldymemHi jsr$bb0f  }
    lda memLo
    ldy memHi
    jsr $bb0f
    // divMEMbyFAC::@return
    // }
    // [81] return 
    rts
}
  // setFAC
// FAC = word
// Set the FAC (floating point accumulator) to the integer value of a 16bit word
// setFAC(word zeropage(7) w)
setFAC: {
    .label prepareMEM1_mem = 7
    .label w = 7
    // setFAC::prepareMEM1
    // <mem
    // [83] (byte~) setFAC::prepareMEM1_$0#0 ← < (word) setFAC::prepareMEM1_mem#0 -- vbuaa=_lo_vwuz1 
    lda.z prepareMEM1_mem
    // *memLo = <mem
    // [84] *((const byte*) memLo#0) ← (byte~) setFAC::prepareMEM1_$0#0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // >mem
    // [85] (byte~) setFAC::prepareMEM1_$1#0 ← > (word) setFAC::prepareMEM1_mem#0 -- vbuaa=_hi_vwuz1 
    lda.z prepareMEM1_mem+1
    // *memHi = >mem
    // [86] *((const byte*) memHi#0) ← (byte~) setFAC::prepareMEM1_$1#0 -- _deref_pbuc1=vbuaa 
    sta memHi
    // setFAC::@1
    // asm
    // asm { ldymemLo ldamemHi jsr$b391  }
    // Load word register Y,A into FAC (floating point accumulator)
    ldy memLo
    jsr $b391
    // setFAC::@return
    // }
    // [88] return 
    rts
}
  // setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 bytes (means it is necessary to allocate 5 bytes to avoid clobbering other data using eg. byte[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zeropage(7) mem)
setMEMtoFAC: {
    .label mem = 7
    // setMEMtoFAC::prepareMEM1
    // <mem
    // [90] (byte~) setMEMtoFAC::prepareMEM1_$0#0 ← < (word)(byte*) setMEMtoFAC::mem#2 -- vbuaa=_lo_vwuz1 
    lda.z mem
    // *memLo = <mem
    // [91] *((const byte*) memLo#0) ← (byte~) setMEMtoFAC::prepareMEM1_$0#0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // >mem
    // [92] (byte~) setMEMtoFAC::prepareMEM1_$1#0 ← > (word)(byte*) setMEMtoFAC::mem#2 -- vbuaa=_hi_vwuz1 
    lda.z mem+1
    // *memHi = >mem
    // [93] *((const byte*) memHi#0) ← (byte~) setMEMtoFAC::prepareMEM1_$1#0 -- _deref_pbuc1=vbuaa 
    sta memHi
    // setMEMtoFAC::@1
    // asm
    // asm { ldxmemLo ldymemHi jsr$bbd4  }
    ldx memLo
    tay
    jsr $bbd4
    // setMEMtoFAC::@return
    // }
    // [95] return 
    rts
}
  // divFACby10
// FAC = FAC/10
// Set FAC to FAC divided by 10
divFACby10: {
    // asm
    // asm { jsr$bafe  }
    jsr $bafe
    // divFACby10::@return
    // }
    // [97] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

