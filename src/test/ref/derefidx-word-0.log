
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (word) main::i#0 ← (word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (word) main::i#2 ← phi( main/(word) main::i#0 main::@2/(word) main::i#1 )
  (bool~) main::$0 ← (word) main::i#2 < (number) $3e8
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (word) main::i#3 ← phi( main::@1/(word) main::i#2 )
  *((const nomodify byte*) main::screen + (word) main::i#3) ← (byte) 'a'
  (word) main::i#1 ← (word) main::i#3 + (number) $28
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@2
(label) main::@return
(word) main::i
(word) main::i#0
(word) main::i#1
(word) main::i#2
(word) main::i#3
(const nomodify byte*) main::screen = (byte*)(number) $400

Adding number conversion cast (unumber) $3e8 in (bool~) main::$0 ← (word) main::i#2 < (number) $3e8
Adding number conversion cast (unumber) $28 in (word) main::i#1 ← (word) main::i#3 + (number) $28
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $3e8
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [3] if((word) main::i#2<(word) $3e8) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const word) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
De-inlining pointer[w] to *(pointer+w)   [4] *((const nomodify byte*) main::screen + (word) main::i#2) ← (byte) 'a'
Successful SSA optimization Pass2DeInlineWordDerefIdx
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const word) main::i#0
Constant inlined main::i#0 = (word) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::i#4 ← main::i#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (word) main::i#2 ← phi( main/(word) 0 main::@2/(word) main::i#1 )
  [2] if((word) main::i#2<(word) $3e8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] (byte*~) main::$1 ← (const nomodify byte*) main::screen + (word) main::i#2
  [5] *((byte*~) main::$1) ← (byte) 'a'
  [6] (word) main::i#1 ← (word) main::i#2 + (byte) $28
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*~) main::$1 22.0
(word) main::i
(word) main::i#1 22.0
(word) main::i#2 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$1 ]
Allocated zp[2]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:4 [ main::$1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests that array-indexing by a word variable is turned into pointer addition
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label i = 2
    .label __1 = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (word) main::i#2 = (word) 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // main::@1
  __b1:
    // [2] if((word) main::i#2<(word) $3e8) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>$3e8
    bcc __b2
    bne !+
    lda.z i
    cmp #<$3e8
    bcc __b2
  !:
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] (byte*~) main::$1 ← (const nomodify byte*) main::screen + (word) main::i#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z i
    clc
    adc #<screen
    sta.z __1
    lda.z i+1
    adc #>screen
    sta.z __1+1
    // [5] *((byte*~) main::$1) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    lda #'a'
    ldy #0
    sta (__1),y
    // [6] (word) main::i#1 ← (word) main::i#2 + (byte) $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z i
    sta.z i
    bcc !+
    inc.z i+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (word) main::i#2 = (word) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if((word) main::i#2<(word) $3e8) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] (byte*~) main::$1 ← (const nomodify byte*) main::screen + (word) main::i#2 [ main::i#2 main::$1 ] (  [ main::i#2 main::$1 ] { }  ) always clobbers reg byte a 
Statement [5] *((byte*~) main::$1) ← (byte) 'a' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [6] (word) main::i#1 ← (word) main::i#2 + (byte) $28 [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::i#2 main::i#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::$1 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp[2]:2 [ main::i#2 main::i#1 ] 22: zp[2]:4 [ main::$1 ] 
Uplift Scope [] 

Uplifting [main] best 826 combination zp[2]:2 [ main::i#2 main::i#1 ] zp[2]:4 [ main::$1 ] 
Uplifting [] best 826 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that array-indexing by a word variable is turned into pointer addition
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label i = 2
    .label __1 = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (word) main::i#2 = (word) 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // main::@1
  __b1:
    // [2] if((word) main::i#2<(word) $3e8) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>$3e8
    bcc __b2
    bne !+
    lda.z i
    cmp #<$3e8
    bcc __b2
  !:
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] (byte*~) main::$1 ← (const nomodify byte*) main::screen + (word) main::i#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z i
    clc
    adc #<screen
    sta.z __1
    lda.z i+1
    adc #>screen
    sta.z __1+1
    // [5] *((byte*~) main::$1) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    lda #'a'
    ldy #0
    sta (__1),y
    // [6] (word) main::i#1 ← (word) main::i#2 + (byte) $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z i
    sta.z i
    bcc !+
    inc.z i+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (word) main::i#2 = (word) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(byte*~) main::$1 zp[2]:4 22.0
(label) main::@1
(label) main::@2
(label) main::@return
(word) main::i
(word) main::i#1 i zp[2]:2 22.0
(word) main::i#2 i zp[2]:2 11.0
(const nomodify byte*) main::screen = (byte*) 1024

zp[2]:2 [ main::i#2 main::i#1 ]
zp[2]:4 [ main::$1 ]


FINAL ASSEMBLER
Score: 746

  // File Comments
// Tests that array-indexing by a word variable is turned into pointer addition
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label i = 2
    .label __1 = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (word) main::i#2 = (word) 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // main::@1
  __b1:
    // for( word i=0;i<1000;i+=40)
    // [2] if((word) main::i#2<(word) $3e8) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>$3e8
    bcc __b2
    bne !+
    lda.z i
    cmp #<$3e8
    bcc __b2
  !:
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // screen[i] = 'a'
    // [4] (byte*~) main::$1 ← (const nomodify byte*) main::screen + (word) main::i#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z i
    clc
    adc #<screen
    sta.z __1
    lda.z i+1
    adc #>screen
    sta.z __1+1
    // [5] *((byte*~) main::$1) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    lda #'a'
    ldy #0
    sta (__1),y
    // i+=40
    // [6] (word) main::i#1 ← (word) main::i#2 + (byte) $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z i
    sta.z i
    bcc !+
    inc.z i+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi (word) main::i#2 = (word) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

