Culled Empty Block (label) @1
Culled Empty Block (label) line::@4
Culled Empty Block (label) line::@3
Culled Empty Block (label) line::@5
Culled Empty Block (label) line::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) screen#0 ← ((byte*)) (number) $400
  to:@2

(void()) main()
main: scope:[main]  from @2
  (byte*) screen#13 ← phi( @2/(byte*) screen#15 )
  (byte) line::x0#0 ← (number) 1
  (byte) line::x1#0 ← (number) 2
  call line 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) screen#7 ← phi( main/(byte*) screen#5 )
  (byte*) screen#1 ← (byte*) screen#7
  (byte) line::x0#1 ← (number) 3
  (byte) line::x1#1 ← (number) 5
  call line 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) screen#8 ← phi( main::@1/(byte*) screen#5 )
  (byte*) screen#2 ← (byte*) screen#8
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) screen#9 ← phi( main::@2/(byte*) screen#2 )
  (byte*) screen#3 ← (byte*) screen#9
  return 
  to:@return

(void()) line((byte) line::x0 , (byte) line::x1)
line: scope:[line]  from main main::@1
  (byte*) screen#16 ← phi( main/(byte*) screen#13 main::@1/(byte*) screen#1 )
  (byte) line::x1#3 ← phi( main/(byte) line::x1#0 main::@1/(byte) line::x1#1 )
  (byte) line::x0#2 ← phi( main/(byte) line::x0#0 main::@1/(byte) line::x0#1 )
  (byte) line::x#0 ← (byte) line::x0#2
  to:line::@1
line::@1: scope:[line]  from line line::@2
  (byte*) screen#14 ← phi( line/(byte*) screen#16 line::@2/(byte*) screen#4 )
  (byte) line::x1#2 ← phi( line/(byte) line::x1#3 line::@2/(byte) line::x1#4 )
  (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@2/(byte) line::x#1 )
  (bool~) line::$0 ← (byte) line::x#2 < (byte) line::x1#2
  if((bool~) line::$0) goto line::@2
  to:line::@return
line::@2: scope:[line]  from line::@1
  (byte) line::x1#4 ← phi( line::@1/(byte) line::x1#2 )
  (byte*) screen#10 ← phi( line::@1/(byte*) screen#14 )
  (byte) line::x#3 ← phi( line::@1/(byte) line::x#2 )
  *((byte*) screen#10) ← (byte) line::x#3
  (byte*) screen#4 ← ++ (byte*) screen#10
  (byte) line::x#1 ← ++ (byte) line::x#3
  to:line::@1
line::@return: scope:[line]  from line::@1
  (byte*) screen#11 ← phi( line::@1/(byte*) screen#14 )
  (byte*) screen#5 ← (byte*) screen#11
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) screen#15 ← phi( @begin/(byte*) screen#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte*) screen#12 ← phi( @2/(byte*) screen#3 )
  (byte*) screen#6 ← (byte*) screen#12
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(void()) line((byte) line::x0 , (byte) line::x1)
(bool~) line::$0
(label) line::@1
(label) line::@2
(label) line::@return
(byte) line::x
(byte) line::x#0
(byte) line::x#1
(byte) line::x#2
(byte) line::x#3
(byte) line::x0
(byte) line::x0#0
(byte) line::x0#1
(byte) line::x0#2
(byte) line::x1
(byte) line::x1#0
(byte) line::x1#1
(byte) line::x1#2
(byte) line::x1#3
(byte) line::x1#4
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#10
(byte*) screen#11
(byte*) screen#12
(byte*) screen#13
(byte*) screen#14
(byte*) screen#15
(byte*) screen#16
(byte*) screen#2
(byte*) screen#3
(byte*) screen#4
(byte*) screen#5
(byte*) screen#6
(byte*) screen#7
(byte*) screen#8
(byte*) screen#9

Adding number conversion cast (unumber) 1 in (byte) line::x0#0 ← (number) 1
Adding number conversion cast (unumber) 2 in (byte) line::x1#0 ← (number) 2
Adding number conversion cast (unumber) 3 in (byte) line::x0#1 ← (number) 3
Adding number conversion cast (unumber) 5 in (byte) line::x1#1 ← (number) 5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) screen#0 ← (byte*)(number) $400
Inlining cast (byte) line::x0#0 ← (unumber)(number) 1
Inlining cast (byte) line::x1#0 ← (unumber)(number) 2
Inlining cast (byte) line::x0#1 ← (unumber)(number) 3
Inlining cast (byte) line::x1#1 ← (unumber)(number) 5
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte*) screen#1 = (byte*) screen#7 
Alias (byte*) screen#2 = (byte*) screen#8 (byte*) screen#9 (byte*) screen#3 
Alias (byte) line::x#0 = (byte) line::x0#2 
Alias (byte) line::x#2 = (byte) line::x#3 
Alias (byte*) screen#10 = (byte*) screen#14 (byte*) screen#11 (byte*) screen#5 
Alias (byte) line::x1#2 = (byte) line::x1#4 
Alias (byte*) screen#0 = (byte*) screen#15 
Alias (byte*) screen#12 = (byte*) screen#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) screen#13 (byte*) screen#0
Identical Phi Values (byte*) screen#1 (byte*) screen#10
Identical Phi Values (byte*) screen#2 (byte*) screen#10
Identical Phi Values (byte) line::x1#2 (byte) line::x1#3
Identical Phi Values (byte*) screen#12 (byte*) screen#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) line::$0 [19] if((byte) line::x#2<(byte) line::x1#3) goto line::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) screen#0 = (byte*) 1024
Constant (const byte) line::x0#0 = 1
Constant (const byte) line::x1#0 = 2
Constant (const byte) line::x0#1 = 3
Constant (const byte) line::x1#1 = 5
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) line::x0#0
Inlining constant with var siblings (const byte) line::x1#0
Inlining constant with different constant siblings (const byte) line::x0#1
Inlining constant with var siblings (const byte) line::x1#1
Inlining constant with var siblings (const byte*) screen#0
Constant inlined line::x0#0 = (byte) 1
Constant inlined line::x1#1 = (byte) 5
Constant inlined screen#0 = (byte*) 1024
Constant inlined line::x1#0 = (byte) 2
Constant inlined line::x0#1 = (byte) 3
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to line:6 line:8 

Created 5 initial phi equivalence classes
Coalesced [7] screen#17 ← screen#10
Coalesced [12] line::x#4 ← line::x#0
Coalesced (already) [13] screen#18 ← screen#16
Coalesced [20] line::x#5 ← line::x#1
Coalesced [21] screen#19 ← screen#4
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@2
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call line 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call line 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return

(void()) line((byte) line::x0 , (byte) line::x1)
line: scope:[line]  from main main::@1
  [9] (byte*) screen#16 ← phi( main/(byte*) 1024 main::@1/(byte*) screen#10 )
  [9] (byte) line::x1#3 ← phi( main/(byte) 2 main::@1/(byte) 5 )
  [9] (byte) line::x#0 ← phi( main/(byte) 1 main::@1/(byte) 3 )
  to:line::@1
line::@1: scope:[line]  from line line::@2
  [10] (byte*) screen#10 ← phi( line/(byte*) screen#16 line::@2/(byte*) screen#4 )
  [10] (byte) line::x#2 ← phi( line/(byte) line::x#0 line::@2/(byte) line::x#1 )
  [11] if((byte) line::x#2<(byte) line::x1#3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1
  [12] return 
  to:@return
line::@2: scope:[line]  from line::@1
  [13] *((byte*) screen#10) ← (byte) line::x#2
  [14] (byte*) screen#4 ← ++ (byte*) screen#10
  [15] (byte) line::x#1 ← ++ (byte) line::x#2
  to:line::@1


VARIABLE REGISTER WEIGHTS
(void()) line((byte) line::x0 , (byte) line::x1)
(byte) line::x
(byte) line::x#0 2.0
(byte) line::x#1 22.0
(byte) line::x#2 11.5
(byte) line::x0
(byte) line::x1
(byte) line::x1#3 1.8333333333333333
(void()) main()
(byte*) screen
(byte*) screen#10 6.166666666666666
(byte*) screen#16 4.0
(byte*) screen#4 11.0

Initial phi equivalence classes
[ line::x1#3 ]
[ screen#16 screen#10 screen#4 ]
[ line::x#2 line::x#0 line::x#1 ]
Complete equivalence classes
[ line::x1#3 ]
[ screen#16 screen#10 screen#4 ]
[ line::x#2 line::x#0 line::x#1 ]
Allocated zp ZP_BYTE:2 [ line::x1#3 ]
Allocated zp ZP_WORD:3 [ screen#16 screen#10 screen#4 ]
Allocated zp ZP_BYTE:5 [ line::x#2 line::x#0 line::x#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Multiple calls with different (constant?) parameters should yield different values at runtime
// Currently the same constant parameter is passed on every call.
// Reason: Multiple versioned parameter constants x0#0, x0#1 are only output as a single constant in the ASM .const x0 = 0
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 3
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call line 
    // [9] phi from main to line [phi:main->line]
  line_from_main:
    // [9] phi (byte*) screen#16 = (byte*) 1024 [phi:main->line#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [9] phi (byte) line::x1#3 = (byte) 2 [phi:main->line#1] -- vbuz1=vbuc1 
    lda #2
    sta.z line.x1
    // [9] phi (byte) line::x#0 = (byte) 1 [phi:main->line#2] -- vbuz1=vbuc1 
    lda #1
    sta.z line.x
    jsr line
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call line 
    // [9] phi from main::@1 to line [phi:main::@1->line]
  line_from___b1:
    // [9] phi (byte*) screen#16 = (byte*) screen#10 [phi:main::@1->line#0] -- register_copy 
    // [9] phi (byte) line::x1#3 = (byte) 5 [phi:main::@1->line#1] -- vbuz1=vbuc1 
    lda #5
    sta.z line.x1
    // [9] phi (byte) line::x#0 = (byte) 3 [phi:main::@1->line#2] -- vbuz1=vbuc1 
    lda #3
    sta.z line.x
    jsr line
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // line
// line(byte zeropage(2) x1)
line: {
    .label x = 5
    .label x1 = 2
    // [10] phi from line line::@2 to line::@1 [phi:line/line::@2->line::@1]
  __b1_from_line:
  __b1_from___b2:
    // [10] phi (byte*) screen#10 = (byte*) screen#16 [phi:line/line::@2->line::@1#0] -- register_copy 
    // [10] phi (byte) line::x#2 = (byte) line::x#0 [phi:line/line::@2->line::@1#1] -- register_copy 
    jmp __b1
    // line::@1
  __b1:
    // [11] if((byte) line::x#2<(byte) line::x1#3) goto line::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x
    cmp.z x1
    bcc __b2
    jmp __breturn
    // line::@return
  __breturn:
    // [12] return 
    rts
    // line::@2
  __b2:
    // [13] *((byte*) screen#10) ← (byte) line::x#2 -- _deref_pbuz1=vbuz2 
    lda.z x
    ldy #0
    sta (screen),y
    // [14] (byte*) screen#4 ← ++ (byte*) screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [15] (byte) line::x#1 ← ++ (byte) line::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    jmp __b1_from___b2
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [13] *((byte*) screen#10) ← (byte) line::x#2 [ line::x1#3 screen#10 line::x#2 ] ( main:2::line:5 [ line::x1#3 screen#10 line::x#2 ] main:2::line:7 [ line::x1#3 screen#10 line::x#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ line::x1#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ line::x#2 line::x#0 line::x#1 ]
Statement [13] *((byte*) screen#10) ← (byte) line::x#2 [ line::x1#3 screen#10 line::x#2 ] ( main:2::line:5 [ line::x1#3 screen#10 line::x#2 ] main:2::line:7 [ line::x1#3 screen#10 line::x#2 ] ) always clobbers reg byte y 
Potential registers zp ZP_BYTE:2 [ line::x1#3 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , 
Potential registers zp ZP_WORD:3 [ screen#16 screen#10 screen#4 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ line::x#2 line::x#0 line::x#1 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [line] 35.5: zp ZP_BYTE:5 [ line::x#2 line::x#0 line::x#1 ] 1.83: zp ZP_BYTE:2 [ line::x1#3 ] 
Uplift Scope [] 21.17: zp ZP_WORD:3 [ screen#16 screen#10 screen#4 ] 
Uplift Scope [main] 

Uplifting [line] best 456 combination reg byte x [ line::x#2 line::x#0 line::x#1 ] zp ZP_BYTE:2 [ line::x1#3 ] 
Uplifting [] best 456 combination zp ZP_WORD:3 [ screen#16 screen#10 screen#4 ] 
Uplifting [main] best 456 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ line::x1#3 ]
Uplifting [line] best 456 combination zp ZP_BYTE:2 [ line::x1#3 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Multiple calls with different (constant?) parameters should yield different values at runtime
// Currently the same constant parameter is passed on every call.
// Reason: Multiple versioned parameter constants x0#0, x0#1 are only output as a single constant in the ASM .const x0 = 0
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 3
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call line 
    // [9] phi from main to line [phi:main->line]
  line_from_main:
    // [9] phi (byte*) screen#16 = (byte*) 1024 [phi:main->line#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [9] phi (byte) line::x1#3 = (byte) 2 [phi:main->line#1] -- vbuz1=vbuc1 
    lda #2
    sta.z line.x1
    // [9] phi (byte) line::x#0 = (byte) 1 [phi:main->line#2] -- vbuxx=vbuc1 
    ldx #1
    jsr line
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call line 
    // [9] phi from main::@1 to line [phi:main::@1->line]
  line_from___b1:
    // [9] phi (byte*) screen#16 = (byte*) screen#10 [phi:main::@1->line#0] -- register_copy 
    // [9] phi (byte) line::x1#3 = (byte) 5 [phi:main::@1->line#1] -- vbuz1=vbuc1 
    lda #5
    sta.z line.x1
    // [9] phi (byte) line::x#0 = (byte) 3 [phi:main::@1->line#2] -- vbuxx=vbuc1 
    ldx #3
    jsr line
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // line
// line(byte zeropage(2) x1)
line: {
    .label x1 = 2
    // [10] phi from line line::@2 to line::@1 [phi:line/line::@2->line::@1]
  __b1_from_line:
  __b1_from___b2:
    // [10] phi (byte*) screen#10 = (byte*) screen#16 [phi:line/line::@2->line::@1#0] -- register_copy 
    // [10] phi (byte) line::x#2 = (byte) line::x#0 [phi:line/line::@2->line::@1#1] -- register_copy 
    jmp __b1
    // line::@1
  __b1:
    // [11] if((byte) line::x#2<(byte) line::x1#3) goto line::@2 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z x1
    bcc __b2
    jmp __breturn
    // line::@return
  __breturn:
    // [12] return 
    rts
    // line::@2
  __b2:
    // [13] *((byte*) screen#10) ← (byte) line::x#2 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (screen),y
    // [14] (byte*) screen#4 ← ++ (byte*) screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [15] (byte) line::x#1 ← ++ (byte) line::x#2 -- vbuxx=_inc_vbuxx 
    inx
    jmp __b1_from___b2
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b1_from___b2 with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction line_from___b1:
Removing instruction __b1_from_line:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction line_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) line((byte) line::x0 , (byte) line::x1)
(label) line::@1
(label) line::@2
(label) line::@return
(byte) line::x
(byte) line::x#0 reg byte x 2.0
(byte) line::x#1 reg byte x 22.0
(byte) line::x#2 reg byte x 11.5
(byte) line::x0
(byte) line::x1
(byte) line::x1#3 x1 zp ZP_BYTE:2 1.8333333333333333
(void()) main()
(label) main::@1
(label) main::@return
(byte*) screen
(byte*) screen#10 screen zp ZP_WORD:3 6.166666666666666
(byte*) screen#16 screen zp ZP_WORD:3 4.0
(byte*) screen#4 screen zp ZP_WORD:3 11.0

zp ZP_BYTE:2 [ line::x1#3 ]
zp ZP_WORD:3 [ screen#16 screen#10 screen#4 ]
reg byte x [ line::x#2 line::x#0 line::x#1 ]


FINAL ASSEMBLER
Score: 378

  // File Comments
// Multiple calls with different (constant?) parameters should yield different values at runtime
// Currently the same constant parameter is passed on every call.
// Reason: Multiple versioned parameter constants x0#0, x0#1 are only output as a single constant in the ASM .const x0 = 0
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 3
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // line(1,2)
    // [5] call line 
    // [9] phi from main to line [phi:main->line]
    // [9] phi (byte*) screen#16 = (byte*) 1024 [phi:main->line#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [9] phi (byte) line::x1#3 = (byte) 2 [phi:main->line#1] -- vbuz1=vbuc1 
    lda #2
    sta.z line.x1
    // [9] phi (byte) line::x#0 = (byte) 1 [phi:main->line#2] -- vbuxx=vbuc1 
    ldx #1
    jsr line
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // line(3,5)
    // [7] call line 
    // [9] phi from main::@1 to line [phi:main::@1->line]
    // [9] phi (byte*) screen#16 = (byte*) screen#10 [phi:main::@1->line#0] -- register_copy 
    // [9] phi (byte) line::x1#3 = (byte) 5 [phi:main::@1->line#1] -- vbuz1=vbuc1 
    lda #5
    sta.z line.x1
    // [9] phi (byte) line::x#0 = (byte) 3 [phi:main::@1->line#2] -- vbuxx=vbuc1 
    ldx #3
    jsr line
    // main::@return
    // }
    // [8] return 
    rts
}
  // line
// line(byte zeropage(2) x1)
line: {
    .label x1 = 2
    // [10] phi from line line::@2 to line::@1 [phi:line/line::@2->line::@1]
    // [10] phi (byte*) screen#10 = (byte*) screen#16 [phi:line/line::@2->line::@1#0] -- register_copy 
    // [10] phi (byte) line::x#2 = (byte) line::x#0 [phi:line/line::@2->line::@1#1] -- register_copy 
    // line::@1
  __b1:
    // for(byte x  = x0; x<x1; x++)
    // [11] if((byte) line::x#2<(byte) line::x1#3) goto line::@2 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z x1
    bcc __b2
    // line::@return
    // }
    // [12] return 
    rts
    // line::@2
  __b2:
    // *screen = x
    // [13] *((byte*) screen#10) ← (byte) line::x#2 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (screen),y
    // screen++;
    // [14] (byte*) screen#4 ← ++ (byte*) screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // for(byte x  = x0; x<x1; x++)
    // [15] (byte) line::x#1 ← ++ (byte) line::x#2 -- vbuxx=_inc_vbuxx 
    inx
    jmp __b1
}
  // File Data

