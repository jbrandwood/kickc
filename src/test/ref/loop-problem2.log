
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  call mode_ctrl 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_cls::sc#0 ← (const nomodify byte*) SCREEN
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@2
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@2/(byte*) print_cls::sc#1 )
  (bool~) print_cls::$0 ← (byte*) print_cls::sc#2 != (const nomodify byte*) SCREEN+(number) $3e8
  if((bool~) print_cls::$0) goto print_cls::@2
  to:print_cls::@return
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_cls::sc#3 ← phi( print_cls::@1/(byte*) print_cls::sc#2 )
  *((byte*) print_cls::sc#3) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#3
  to:print_cls::@1
print_cls::@return: scope:[print_cls]  from print_cls::@1
  return 
  to:@return

(void()) mode_ctrl()
mode_ctrl: scope:[mode_ctrl]  from main::@1
  to:mode_ctrl::@1
mode_ctrl::@1: scope:[mode_ctrl]  from mode_ctrl mode_ctrl::@3 mode_ctrl::@4
  if(true) goto mode_ctrl::@2
  to:mode_ctrl::@return
mode_ctrl::@2: scope:[mode_ctrl]  from mode_ctrl::@1
  (byte) mode_ctrl::before#0 ← *((const nomodify byte*) BORDER_COLOR)
  (bool~) mode_ctrl::$0 ← (byte) mode_ctrl::before#0 == (number) $ff
  if((bool~) mode_ctrl::$0) goto mode_ctrl::@3
  to:mode_ctrl::@4
mode_ctrl::@3: scope:[mode_ctrl]  from mode_ctrl::@2
  *((const nomodify byte*) BORDER_COLOR) ← (number) 2
  to:mode_ctrl::@1
mode_ctrl::@4: scope:[mode_ctrl]  from mode_ctrl::@2
  *((const nomodify byte*) BORDER_COLOR) ← (number) 3
  to:mode_ctrl::@1
mode_ctrl::@return: scope:[mode_ctrl]  from mode_ctrl::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) BORDER_COLOR = (byte*)(number) $d020
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) mode_ctrl()
(bool~) mode_ctrl::$0
(label) mode_ctrl::@1
(label) mode_ctrl::@2
(label) mode_ctrl::@3
(label) mode_ctrl::@4
(label) mode_ctrl::@return
(byte) mode_ctrl::before
(byte) mode_ctrl::before#0
(void()) print_cls()
(bool~) print_cls::$0
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte*) print_cls::sc#3

Adding number conversion cast (unumber) $3e8 in (bool~) print_cls::$0 ← (byte*) print_cls::sc#2 != (const nomodify byte*) SCREEN+(number) $3e8
Adding number conversion cast (unumber) $ff in (bool~) mode_ctrl::$0 ← (byte) mode_ctrl::before#0 == (number) $ff
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) BORDER_COLOR) ← (number) 2
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) BORDER_COLOR) ← (number) 3
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const nomodify byte*) BORDER_COLOR) ← (unumber)(number) 2
Inlining cast *((const nomodify byte*) BORDER_COLOR) ← (unumber)(number) 3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $3e8
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias print_cls::sc#2 = print_cls::sc#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) print_cls::$0 [6] if((byte*) print_cls::sc#2!=(const nomodify byte*) SCREEN+(word) $3e8) goto print_cls::@2
Simple Condition (bool~) mode_ctrl::$0 [13] if((byte) mode_ctrl::before#0==(byte) $ff) goto mode_ctrl::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_cls::sc#0 = SCREEN
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [10] if(true) goto mode_ctrl::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block mode_ctrl::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte*) print_cls::sc#0
Constant inlined print_cls::sc#0 = (const nomodify byte*) SCREEN
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of mode_ctrl
Adding NOP phi() at start of mode_ctrl::@1
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [main] to print_cls:1 mode_ctrl:3 

Created 1 initial phi equivalence classes
Coalesced [18] print_cls::sc#4 ← print_cls::sc#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@2
Culled Empty Block (label) mode_ctrl::@1
Renumbering block mode_ctrl::@2 to mode_ctrl::@1
Renumbering block mode_ctrl::@3 to mode_ctrl::@2
Renumbering block mode_ctrl::@4 to mode_ctrl::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of mode_ctrl
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call mode_ctrl 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(void()) mode_ctrl()
mode_ctrl: scope:[mode_ctrl]  from main::@1
  [5] phi()
  to:mode_ctrl::@1
mode_ctrl::@1: scope:[mode_ctrl]  from mode_ctrl mode_ctrl::@2 mode_ctrl::@3
  [6] (byte) mode_ctrl::before#0 ← *((const nomodify byte*) BORDER_COLOR)
  [7] if((byte) mode_ctrl::before#0==(byte) $ff) goto mode_ctrl::@2
  to:mode_ctrl::@3
mode_ctrl::@3: scope:[mode_ctrl]  from mode_ctrl::@1
  [8] *((const nomodify byte*) BORDER_COLOR) ← (byte) 3
  to:mode_ctrl::@1
mode_ctrl::@2: scope:[mode_ctrl]  from mode_ctrl::@1
  [9] *((const nomodify byte*) BORDER_COLOR) ← (byte) 2
  to:mode_ctrl::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [10] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@2
  [11] (byte*) print_cls::sc#2 ← phi( print_cls/(const nomodify byte*) SCREEN print_cls::@2/(byte*) print_cls::sc#1 )
  [12] if((byte*) print_cls::sc#2!=(const nomodify byte*) SCREEN+(word) $3e8) goto print_cls::@2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [13] return 
  to:@return
print_cls::@2: scope:[print_cls]  from print_cls::@1
  [14] *((byte*) print_cls::sc#2) ← (byte) ' '
  [15] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  to:print_cls::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(void()) mode_ctrl()
(byte) mode_ctrl::before
(byte) mode_ctrl::before#0 202.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 202.0
(byte*) print_cls::sc#2 134.66666666666666

Initial phi equivalence classes
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable mode_ctrl::before#0 to live range equivalence class [ mode_ctrl::before#0 ]
Complete equivalence classes
[ print_cls::sc#2 print_cls::sc#1 ]
[ mode_ctrl::before#0 ]
Allocated zp[2]:2 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp[1]:4 [ mode_ctrl::before#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label BORDER_COLOR = $d020
  .label SCREEN = $400
  // main
main: {
    // [1] call print_cls 
    // [10] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call mode_ctrl 
    // [5] phi from main::@1 to mode_ctrl [phi:main::@1->mode_ctrl]
  mode_ctrl_from___b1:
    jsr mode_ctrl
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // mode_ctrl
mode_ctrl: {
    .label before = 4
    jmp __b1
    // mode_ctrl::@1
  __b1:
    // [6] (byte) mode_ctrl::before#0 ← *((const nomodify byte*) BORDER_COLOR) -- vbuz1=_deref_pbuc1 
    lda BORDER_COLOR
    sta.z before
    // [7] if((byte) mode_ctrl::before#0==(byte) $ff) goto mode_ctrl::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #$ff
    cmp.z before
    beq __b2
    jmp __b3
    // mode_ctrl::@3
  __b3:
    // [8] *((const nomodify byte*) BORDER_COLOR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta BORDER_COLOR
    jmp __b1
    // mode_ctrl::@2
  __b2:
    // [9] *((const nomodify byte*) BORDER_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BORDER_COLOR
    jmp __b1
}
  // print_cls
print_cls: {
    .label sc = 2
    // [11] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  __b1_from_print_cls:
    // [11] phi (byte*) print_cls::sc#2 = (const nomodify byte*) SCREEN [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z sc
    lda #>SCREEN
    sta.z sc+1
    jmp __b1
    // print_cls::@1
  __b1:
    // [12] if((byte*) print_cls::sc#2!=(const nomodify byte*) SCREEN+(word) $3e8) goto print_cls::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sc+1
    cmp #>SCREEN+$3e8
    bne __b2
    lda.z sc
    cmp #<SCREEN+$3e8
    bne __b2
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [13] return 
    rts
    // print_cls::@2
  __b2:
    // [14] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // [15] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc.z sc
    bne !+
    inc.z sc+1
  !:
    // [11] phi from print_cls::@2 to print_cls::@1 [phi:print_cls::@2->print_cls::@1]
  __b1_from___b2:
    // [11] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@2->print_cls::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] *((const nomodify byte*) BORDER_COLOR) ← (byte) 3 [ ] ( mode_ctrl:3 [ ] { }  ) always clobbers reg byte a 
Statement [9] *((const nomodify byte*) BORDER_COLOR) ← (byte) 2 [ ] ( mode_ctrl:3 [ ] { }  ) always clobbers reg byte a 
Statement [12] if((byte*) print_cls::sc#2!=(const nomodify byte*) SCREEN+(word) $3e8) goto print_cls::@2 [ print_cls::sc#2 ] ( print_cls:1 [ print_cls::sc#2 ] { }  ) always clobbers reg byte a 
Statement [14] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( print_cls:1 [ print_cls::sc#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ print_cls::sc#2 print_cls::sc#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ mode_ctrl::before#0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_cls] 336.67: zp[2]:2 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [mode_ctrl] 202: zp[1]:4 [ mode_ctrl::before#0 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [print_cls] best 980 combination zp[2]:2 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [mode_ctrl] best 920 combination reg byte a [ mode_ctrl::before#0 ] 
Uplifting [main] best 920 combination 
Uplifting [] best 920 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label BORDER_COLOR = $d020
  .label SCREEN = $400
  // main
main: {
    // [1] call print_cls 
    // [10] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call mode_ctrl 
    // [5] phi from main::@1 to mode_ctrl [phi:main::@1->mode_ctrl]
  mode_ctrl_from___b1:
    jsr mode_ctrl
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // mode_ctrl
mode_ctrl: {
    jmp __b1
    // mode_ctrl::@1
  __b1:
    // [6] (byte) mode_ctrl::before#0 ← *((const nomodify byte*) BORDER_COLOR) -- vbuaa=_deref_pbuc1 
    lda BORDER_COLOR
    // [7] if((byte) mode_ctrl::before#0==(byte) $ff) goto mode_ctrl::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$ff
    beq __b2
    jmp __b3
    // mode_ctrl::@3
  __b3:
    // [8] *((const nomodify byte*) BORDER_COLOR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta BORDER_COLOR
    jmp __b1
    // mode_ctrl::@2
  __b2:
    // [9] *((const nomodify byte*) BORDER_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BORDER_COLOR
    jmp __b1
}
  // print_cls
print_cls: {
    .label sc = 2
    // [11] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  __b1_from_print_cls:
    // [11] phi (byte*) print_cls::sc#2 = (const nomodify byte*) SCREEN [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z sc
    lda #>SCREEN
    sta.z sc+1
    jmp __b1
    // print_cls::@1
  __b1:
    // [12] if((byte*) print_cls::sc#2!=(const nomodify byte*) SCREEN+(word) $3e8) goto print_cls::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sc+1
    cmp #>SCREEN+$3e8
    bne __b2
    lda.z sc
    cmp #<SCREEN+$3e8
    bne __b2
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [13] return 
    rts
    // print_cls::@2
  __b2:
    // [14] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // [15] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc.z sc
    bne !+
    inc.z sc+1
  !:
    // [11] phi from print_cls::@2 to print_cls::@1 [phi:print_cls::@2->print_cls::@1]
  __b1_from___b2:
    // [11] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@2->print_cls::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction mode_ctrl_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_cls_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) BORDER_COLOR = (byte*) 53280
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@return
(void()) mode_ctrl()
(label) mode_ctrl::@1
(label) mode_ctrl::@2
(label) mode_ctrl::@3
(byte) mode_ctrl::before
(byte) mode_ctrl::before#0 reg byte a 202.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp[2]:2 202.0
(byte*) print_cls::sc#2 sc zp[2]:2 134.66666666666666

zp[2]:2 [ print_cls::sc#2 print_cls::sc#1 ]
reg byte a [ mode_ctrl::before#0 ]


FINAL ASSEMBLER
Score: 794

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label BORDER_COLOR = $d020
  .label SCREEN = $400
  // main
main: {
    // print_cls()
    // [1] call print_cls 
    // [10] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // mode_ctrl()
    // [3] call mode_ctrl 
    // [5] phi from main::@1 to mode_ctrl [phi:main::@1->mode_ctrl]
    jsr mode_ctrl
    // main::@return
    // }
    // [4] return 
    rts
}
  // mode_ctrl
mode_ctrl: {
    // mode_ctrl::@1
  __b1:
    // before = *BORDER_COLOR
    // [6] (byte) mode_ctrl::before#0 ← *((const nomodify byte*) BORDER_COLOR) -- vbuaa=_deref_pbuc1 
    lda BORDER_COLOR
    // if(before==$ff)
    // [7] if((byte) mode_ctrl::before#0==(byte) $ff) goto mode_ctrl::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$ff
    beq __b2
    // mode_ctrl::@3
    // *BORDER_COLOR = 3
    // [8] *((const nomodify byte*) BORDER_COLOR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta BORDER_COLOR
    jmp __b1
    // mode_ctrl::@2
  __b2:
    // *BORDER_COLOR = 2
    // [9] *((const nomodify byte*) BORDER_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BORDER_COLOR
    jmp __b1
}
  // print_cls
print_cls: {
    .label sc = 2
    // [11] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
    // [11] phi (byte*) print_cls::sc#2 = (const nomodify byte*) SCREEN [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z sc
    lda #>SCREEN
    sta.z sc+1
    // print_cls::@1
  __b1:
    // for(byte* sc=SCREEN; sc!=SCREEN+1000; sc++)
    // [12] if((byte*) print_cls::sc#2!=(const nomodify byte*) SCREEN+(word) $3e8) goto print_cls::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sc+1
    cmp #>SCREEN+$3e8
    bne __b2
    lda.z sc
    cmp #<SCREEN+$3e8
    bne __b2
    // print_cls::@return
    // }
    // [13] return 
    rts
    // print_cls::@2
  __b2:
    // *sc = ' '
    // [14] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // for(byte* sc=SCREEN; sc!=SCREEN+1000; sc++)
    // [15] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc.z sc
    bne !+
    inc.z sc+1
  !:
    // [11] phi from print_cls::@2 to print_cls::@1 [phi:print_cls::@2->print_cls::@1]
    // [11] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@2->print_cls::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

