
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

__stackcall void cputc(char c)
cputc: scope:[cputc]  from printf_number_buffer::@3
  [16] cputc::c#0 = stackidx(char,cputc::OFFSET_STACK_C)
  [17] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [18] conio_line_text[conio_cursor_x] = cputc::c#0
  [19] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [20] conio_cursor_x = ++ conio_cursor_x
  [21] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [22] phi()
  [23] call cputln
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [24] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [25] phi()
  [26] call cputln
  to:cputc::@return

void main()
main: scope:[main]  from __start::@1
  [27] phi()
  [28] call clrscr
  to:main::@20
main::@20: scope:[main]  from main
  [29] main::pwd = passwords
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@20
  [30] main::invalid_b#11 = phi( main::@15/main::invalid_b#30, main::@20/0 )
  [30] main::valid_b#11 = phi( main::@15/main::valid_b#28, main::@20/0 )
  [30] main::total#10 = phi( main::@15/main::total#1, main::@20/0 )
  [30] main::invalid_a#11 = phi( main::@15/main::invalid_a#16, main::@20/0 )
  [30] main::valid_a#11 = phi( main::@15/main::valid_a#15, main::@20/0 )
  [31] if(0!=*main::pwd) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [32] phi()
  [33] call printf_str
  to:main::@23
main::@23: scope:[main]  from main::@3
  [34] printf_uint::uvalue#0 = main::valid_a#11
  [35] call printf_uint
  to:main::@24
main::@24: scope:[main]  from main::@23
  [36] phi()
  [37] call printf_str
  to:main::@25
main::@25: scope:[main]  from main::@24
  [38] printf_uint::uvalue#1 = main::invalid_a#11
  [39] call printf_uint
  to:main::@26
main::@26: scope:[main]  from main::@25
  [40] phi()
  [41] call printf_str
  to:main::@27
main::@27: scope:[main]  from main::@26
  [42] printf_uint::uvalue#2 = main::total#10
  [43] call printf_uint
  to:main::@28
main::@28: scope:[main]  from main::@27
  [44] phi()
  [45] call printf_str
  to:main::@29
main::@29: scope:[main]  from main::@28
  [46] phi()
  [47] call printf_str
  to:main::@30
main::@30: scope:[main]  from main::@29
  [48] printf_uint::uvalue#3 = main::valid_b#11
  [49] call printf_uint
  to:main::@31
main::@31: scope:[main]  from main::@30
  [50] phi()
  [51] call printf_str
  to:main::@32
main::@32: scope:[main]  from main::@31
  [52] printf_uint::uvalue#4 = main::invalid_b#11
  [53] call printf_uint
  to:main::@33
main::@33: scope:[main]  from main::@32
  [54] phi()
  [55] call printf_str
  to:main::@34
main::@34: scope:[main]  from main::@33
  [56] printf_uint::uvalue#5 = main::total#10
  [57] call printf_uint
  to:main::@35
main::@35: scope:[main]  from main::@34
  [58] phi()
  [59] call printf_str
  to:main::@19
main::@19: scope:[main]  from main::@19 main::@35
  [60] phi()
  to:main::@19
main::@2: scope:[main]  from main::@1
  [61] strtouc::str#1 = main::pwd
  [62] call strtouc
  [63] strtouc::return#2 = strtouc::val#3
  to:main::@21
main::@21: scope:[main]  from main::@2
  [64] main::min#0 = strtouc::return#2
  [65] main::pwd = ++ main::pwd
  [66] strtouc::str#2 = main::pwd
  [67] call strtouc
  [68] strtouc::return#3 = strtouc::val#3
  to:main::@22
main::@22: scope:[main]  from main::@21
  [69] main::max#0 = strtouc::return#3
  [70] main::pwd = ++ main::pwd
  [71] main::ch#0 = *main::pwd
  [72] main::pwd = main::pwd + 3
  [73] main::$5 = main::min#0 - 1
  [74] if(main::pwd[main::$5]!=main::ch#0) goto main::@4
  to:main::@16
main::@16: scope:[main]  from main::@22
  [75] phi()
  to:main::@4
main::@4: scope:[main]  from main::@16 main::@22
  [76] main::count_b#4 = phi( main::@16/1, main::@22/0 )
  [77] main::$8 = main::max#0 - 1
  [78] if(main::pwd[main::$8]!=main::ch#0) goto main::@5
  to:main::@17
main::@17: scope:[main]  from main::@4
  [79] main::count_b#2 = ++ main::count_b#4
  to:main::@5
main::@5: scope:[main]  from main::@17 main::@4
  [80] main::count_b#11 = phi( main::@17/main::count_b#2, main::@4/main::count_b#4 )
  to:main::@6
main::@6: scope:[main]  from main::@5 main::@9
  [81] main::count_a#2 = phi( main::@5/0, main::@9/main::count_a#6 )
  [82] if(0!=*main::pwd) goto main::@7
  to:main::@8
main::@8: scope:[main]  from main::@6
  [83] if(main::count_a#2<main::min#0) goto main::@11
  to:main::@36
main::@36: scope:[main]  from main::@8
  [84] if(main::count_a#2<=main::max#0) goto main::@12
  to:main::@11
main::@11: scope:[main]  from main::@36 main::@8
  [85] main::invalid_a#1 = ++ main::invalid_a#11
  to:main::@13
main::@13: scope:[main]  from main::@11 main::@12
  [86] main::invalid_a#16 = phi( main::@11/main::invalid_a#1, main::@12/main::invalid_a#11 )
  [86] main::valid_a#15 = phi( main::@11/main::valid_a#11, main::@12/main::valid_a#1 )
  [87] if(main::count_b#11==1) goto main::@14
  to:main::@18
main::@18: scope:[main]  from main::@13
  [88] main::invalid_b#1 = ++ main::invalid_b#11
  to:main::@15
main::@15: scope:[main]  from main::@14 main::@18
  [89] main::invalid_b#30 = phi( main::@14/main::invalid_b#11, main::@18/main::invalid_b#1 )
  [89] main::valid_b#28 = phi( main::@14/main::valid_b#1, main::@18/main::valid_b#11 )
  [90] main::total#1 = ++ main::total#10
  [91] main::pwd = ++ main::pwd
  to:main::@1
main::@14: scope:[main]  from main::@13
  [92] main::valid_b#1 = ++ main::valid_b#11
  to:main::@15
main::@12: scope:[main]  from main::@36
  [93] main::valid_a#1 = ++ main::valid_a#11
  to:main::@13
main::@7: scope:[main]  from main::@6
  [94] if(*main::pwd!=main::ch#0) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@7
  [95] main::count_a#1 = ++ main::count_a#2
  to:main::@9
main::@9: scope:[main]  from main::@10 main::@7
  [96] main::count_a#6 = phi( main::@10/main::count_a#1, main::@7/main::count_a#2 )
  [97] main::pwd = ++ main::pwd
  to:main::@6

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [98] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [99] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [100] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [101] conio_cursor_x = gotoxy::x#2
  [102] conio_cursor_y = gotoxy::y#4
  [103] gotoxy::$7 = (unsigned int)gotoxy::y#4
  [104] gotoxy::$8 = gotoxy::$7 << 2
  [105] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [106] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [107] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [108] conio_line_text = gotoxy::$5
  [109] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [110] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [111] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [112] conio_line_text = conio_line_text + $28
  [113] conio_line_color = conio_line_color + $28
  [114] conio_cursor_x = 0
  [115] conio_cursor_y = ++ conio_cursor_y
  [116] call cscroll
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [117] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [118] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [119] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [119] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [119] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [120] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [121] conio_cursor_x = 0
  [122] conio_cursor_y = 0
  [123] conio_line_text = DEFAULT_SCREEN
  [124] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [125] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [126] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [127] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [128] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [129] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [130] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [131] clrscr::line_text#5[clrscr::c#2] = ' '
  [132] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [133] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void printf_str(void (*putc)(char) , const char *s)
printf_str: scope:[printf_str]  from main::@24 main::@26 main::@28 main::@29 main::@3 main::@31 main::@33 main::@35 printf_number_buffer::@2
  [134] printf_str::putc#11 = phi( main::@24/&cputc, main::@26/&cputc, main::@28/&cputc, main::@29/&cputc, main::@3/&cputc, main::@31/&cputc, main::@33/&cputc, main::@35/&cputc, printf_number_buffer::@2/printf_number_buffer::putc#0 )
  [134] printf_str::s#11 = phi( main::@24/main::s1, main::@26/main::s2, main::@28/main::s3, main::@29/main::s4, main::@3/main::s, main::@31/main::s1, main::@33/main::s2, main::@35/main::s3, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [135] printf_str::s#10 = phi( printf_str/printf_str::s#11, printf_str::@2/printf_str::s#0 )
  [136] printf_str::c#1 = *printf_str::s#10
  [137] printf_str::s#0 = ++ printf_str::s#10
  [138] if(0!=printf_str::c#1) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [139] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [140] stackpush(char) = printf_str::c#1
  [141] callexecute *printf_str::putc#11 
  sideeffect stackpullpadding(1)
  to:printf_str::@1

void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uint: scope:[printf_uint]  from main::@23 main::@25 main::@27 main::@30 main::@32 main::@34
  [143] printf_uint::uvalue#6 = phi( main::@23/printf_uint::uvalue#0, main::@25/printf_uint::uvalue#1, main::@27/printf_uint::uvalue#2, main::@30/printf_uint::uvalue#3, main::@32/printf_uint::uvalue#4, main::@34/printf_uint::uvalue#5 )
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [144] *((char *)&printf_buffer) = 0
  [145] utoa::value#1 = printf_uint::uvalue#6
  [146] call utoa
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [147] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer)
  [148] call printf_number_buffer
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [149] return 
  to:@return

char strtouc(char *str , char **endptr)
strtouc: scope:[strtouc]  from main::@2 main::@21
  [150] strtouc::str#3 = phi( main::@2/strtouc::str#1, main::@21/strtouc::str#2 )
  [151] strtouc::c#0 = *strtouc::str#3
  to:strtouc::@1
strtouc::@1: scope:[strtouc]  from strtouc strtouc::@2
  [152] strtouc::str#4 = phi( strtouc/strtouc::str#3, strtouc::@2/strtouc::str#0 )
  [152] strtouc::val#3 = phi( strtouc/0, strtouc::@2/strtouc::val#2 )
  [152] strtouc::c#2 = phi( strtouc/strtouc::c#0, strtouc::@2/strtouc::c#1 )
  [153] if(strtouc::c#2<'0') goto strtouc::@3
  to:strtouc::@4
strtouc::@4: scope:[strtouc]  from strtouc::@1
  [154] if(strtouc::c#2<='9') goto strtouc::@2
  to:strtouc::@3
strtouc::@3: scope:[strtouc]  from strtouc::@1 strtouc::@4
  [155] *(&main::pwd) = strtouc::str#4
  to:strtouc::@return
strtouc::@return: scope:[strtouc]  from strtouc::@3
  [156] return 
  to:@return
strtouc::@2: scope:[strtouc]  from strtouc::@4
  [157] strtouc::$5 = strtouc::val#3 << 2
  [158] strtouc::$6 = strtouc::$5 + strtouc::val#3
  [159] strtouc::val#1 = strtouc::$6 << 1
  [160] strtouc::$4 = strtouc::c#2 - '0'
  [161] strtouc::val#2 = strtouc::val#1 + strtouc::$4
  [162] strtouc::str#0 = ++ strtouc::str#4
  [163] strtouc::c#1 = *strtouc::str#0
  to:strtouc::@1

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [164] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [165] phi()
  [166] call memcpy
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [167] phi()
  [168] call memcpy
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [169] phi()
  [170] call memset
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [171] phi()
  [172] call memset
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [173] conio_line_text = conio_line_text - $28
  [174] conio_line_color = conio_line_color - $28
  [175] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [176] return 
  to:@return

void utoa(unsigned int value , char *buffer , char radix)
utoa: scope:[utoa]  from printf_uint::@1
  [177] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [178] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [178] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [178] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [178] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [179] if(utoa::digit#2<5-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [180] utoa::$11 = (char)utoa::value#2
  [181] *utoa::buffer#11 = DIGITS[utoa::$11]
  [182] utoa::buffer#3 = ++ utoa::buffer#11
  [183] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [184] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [185] utoa::$10 = utoa::digit#2 << 1
  [186] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [187] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [188] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [189] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [189] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [189] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [190] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [191] utoa_append::buffer#0 = utoa::buffer#11
  [192] utoa_append::value#0 = utoa::value#2
  [193] utoa_append::sub#0 = utoa::digit_value#0
  [194] call utoa_append
  [195] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [196] utoa::value#0 = utoa_append::return#0
  [197] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [198] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [199] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [200] stackpush(char) = printf_number_buffer::buffer_sign#0
  [201] callexecute cputc 
  sideeffect stackpullpadding(1)
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [203] phi()
  [204] call printf_str
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [205] return 
  to:@return

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [206] memcpy::destination#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN, cscroll::@2/(void *)COLORRAM )
  [206] memcpy::source#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN+$28, cscroll::@2/(void *)COLORRAM+$28 )
  [207] memcpy::src_end#0 = (char *)memcpy::source#2 + (unsigned int)$19*$28-$28
  [208] memcpy::src#4 = (char *)memcpy::source#2
  [209] memcpy::dst#4 = (char *)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [210] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [210] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [211] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [212] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [213] *memcpy::dst#2 = *memcpy::src#2
  [214] memcpy::dst#1 = ++ memcpy::dst#2
  [215] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [216] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [216] memset::str#3 = phi( cscroll::@3/(void *)DEFAULT_SCREEN+(unsigned int)$19*$28-$28, cscroll::@4/(void *)COLORRAM+(unsigned int)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [217] memset::end#0 = (char *)memset::str#3 + $28
  [218] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [219] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [220] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [221] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [222] *memset::dst#2 = memset::c#4
  [223] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [224] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [225] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [225] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [226] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [227] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [228] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [229] utoa_append::digit#1 = ++ utoa_append::digit#2
  [230] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1
