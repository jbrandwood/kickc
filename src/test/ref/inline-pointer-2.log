
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::$1 = (byte*){ 4, 0 }
  main::$2 = (word){ 0, $28 }
  main::$0 = main::$1 + main::$2
  main::screen#0 = main::$0
  *main::screen#0 = 'a'
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
label __start::@1
label __start::@return
void main()
byte*~ main::$0
byte*~ main::$1
word~ main::$2
label main::@return
byte* main::screen
byte* main::screen#0

Fixing inline constructor with main::$3 = (byte)4 w= (byte)0
Fixing inline constructor with main::$4 = (byte)0 w= (byte)$28
Successful SSA optimization Pass2FixInlineConstructors
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Adding pointer type conversion cast (byte*) main::$3 in main::$3 = 4 w= 0
Successful SSA optimization PassNAddTypeConversionAssignment
Alias main::$1 = main::$3 
Alias main::$2 = main::$4 
Alias main::screen#0 = main::$0 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] main::$5 = 4 w= 0
Constant right-side identified [2] main::$2 = 0 w= $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Simplifying constant evaluating to zero 0*$100 in [2] main::$2 = 0*$100+$28
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero 4*$100 in [0] main::$5 = 4*$100+0
Simplifying expression containing zero $28 in [2] main::$2 = 0+$28
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 4*$100 in [0] main::$5 = 4*$100
Adding number conversion cast (unumber) $100 in [0] main::$5 = ((unumber)) 4*$100
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [0] main::$5 = (unumber)4*(unumber)$100
Inlining cast [1] main::$1 = (byte*)main::$5
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 4*(unumber)$100
Simplifying constant integer cast $100
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant main::$5 = 4*$100
Constant main::$2 = $28
Successful SSA optimization Pass2ConstantIdentification
Constant main::$1 = (byte*)main::$5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] main::screen#0 = main::$1 + main::$2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::screen#0 = main::$1+main::$2
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$5 = 4*$100
Constant inlined main::$1 = (byte*)4*$100
Constant inlined main::$2 = $28
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::screen#0 = 'a'
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte* main::screen

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::screen#0 = 'a' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests creating a literal pointer from two bytes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = 4*$100+$28
    // [0] *main::screen#0 = 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
label main::@return
byte* main::screen
const byte* main::screen#0 screen = (byte*)4*$100+$28



FINAL ASSEMBLER
Score: 12

  // File Comments
// Tests creating a literal pointer from two bytes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = 4*$100+$28
    // *screen = 'a'
    // [0] *main::screen#0 = 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

