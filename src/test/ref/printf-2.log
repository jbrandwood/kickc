Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list (void~) main::$1 ← call printf_schar (number) -$4d (struct printf_format_number){ (number) 6, (number) 0, (number) 0, (number) 0, (number) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list (void~) main::$3 ← call printf_schar (number) $63 (struct printf_format_number){ (number) 6, (number) 0, (number) 1, (number) 1, (number) 0, (const byte) OCTAL } 
Added struct type cast to parameter value list (void~) main::$5 ← call printf_uint (number) $d80 (struct printf_format_number){ (number) $a, (number) 1, (number) 0, (number) 0, (number) 1, (const byte) HEXADECIMAL } 
Created struct value member variable (byte) printf_slong::format_min_length
Created struct value member variable (byte) printf_slong::format_justify_left
Created struct value member variable (byte) printf_slong::format_sign_always
Created struct value member variable (byte) printf_slong::format_zero_padding
Created struct value member variable (byte) printf_slong::format_upper_case
Created struct value member variable (byte) printf_slong::format_radix
Converted struct value to member variables (struct printf_format_number) printf_slong::format
Created struct value member variable (byte) printf_ulong::format_min_length
Created struct value member variable (byte) printf_ulong::format_justify_left
Created struct value member variable (byte) printf_ulong::format_sign_always
Created struct value member variable (byte) printf_ulong::format_zero_padding
Created struct value member variable (byte) printf_ulong::format_upper_case
Created struct value member variable (byte) printf_ulong::format_radix
Converted struct value to member variables (struct printf_format_number) printf_ulong::format
Created struct value member variable (byte) printf_sint::format_min_length
Created struct value member variable (byte) printf_sint::format_justify_left
Created struct value member variable (byte) printf_sint::format_sign_always
Created struct value member variable (byte) printf_sint::format_zero_padding
Created struct value member variable (byte) printf_sint::format_upper_case
Created struct value member variable (byte) printf_sint::format_radix
Converted struct value to member variables (struct printf_format_number) printf_sint::format
Created struct value member variable (byte) printf_uint::format_min_length
Created struct value member variable (byte) printf_uint::format_justify_left
Created struct value member variable (byte) printf_uint::format_sign_always
Created struct value member variable (byte) printf_uint::format_zero_padding
Created struct value member variable (byte) printf_uint::format_upper_case
Created struct value member variable (byte) printf_uint::format_radix
Converted struct value to member variables (struct printf_format_number) printf_uint::format
Created struct value member variable (byte) printf_schar::format_min_length
Created struct value member variable (byte) printf_schar::format_justify_left
Created struct value member variable (byte) printf_schar::format_sign_always
Created struct value member variable (byte) printf_schar::format_zero_padding
Created struct value member variable (byte) printf_schar::format_upper_case
Created struct value member variable (byte) printf_schar::format_radix
Converted struct value to member variables (struct printf_format_number) printf_schar::format
Created struct value member variable (byte) printf_uchar::format_min_length
Created struct value member variable (byte) printf_uchar::format_justify_left
Created struct value member variable (byte) printf_uchar::format_sign_always
Created struct value member variable (byte) printf_uchar::format_zero_padding
Created struct value member variable (byte) printf_uchar::format_upper_case
Created struct value member variable (byte) printf_uchar::format_radix
Converted struct value to member variables (struct printf_format_number) printf_uchar::format
Created struct value member variable (byte) printf_number_buffer::buffer_sign
Created struct value member variable (byte*) printf_number_buffer::buffer_digits
Converted struct value to member variables (struct printf_buffer_number) printf_number_buffer::buffer
Created struct value member variable (byte) printf_number_buffer::format_min_length
Created struct value member variable (byte) printf_number_buffer::format_justify_left
Created struct value member variable (byte) printf_number_buffer::format_sign_always
Created struct value member variable (byte) printf_number_buffer::format_zero_padding
Created struct value member variable (byte) printf_number_buffer::format_upper_case
Created struct value member variable (byte) printf_number_buffer::format_radix
Converted struct value to member variables (struct printf_format_number) printf_number_buffer::format
Created struct value member variable (byte) printf_string::format_min_length
Created struct value member variable (byte) printf_string::format_justify_left
Converted struct value to member variables (struct printf_format_string) printf_string::format
Converted procedure struct value parameter to member unwinding (void()) printf_slong((signed dword) printf_slong::value , (byte) printf_slong::format_min_length , (byte) printf_slong::format_justify_left , (byte) printf_slong::format_sign_always , (byte) printf_slong::format_zero_padding , (byte) printf_slong::format_upper_case , (byte) printf_slong::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
Converted call struct value parameter to member unwinding (void~) printf_slong::$2 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_slong::format_min_length (byte) printf_slong::format_justify_left (byte) printf_slong::format_sign_always (byte) printf_slong::format_zero_padding (byte) printf_slong::format_upper_case (byte) printf_slong::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_ulong::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_ulong::format_min_length (byte) printf_ulong::format_justify_left (byte) printf_ulong::format_sign_always (byte) printf_ulong::format_zero_padding (byte) printf_ulong::format_upper_case (byte) printf_ulong::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_sint::$2 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_sint::format_min_length (byte) printf_sint::format_justify_left (byte) printf_sint::format_sign_always (byte) printf_sint::format_zero_padding (byte) printf_sint::format_upper_case (byte) printf_sint::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_uint::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_uint::format_min_length (byte) printf_uint::format_justify_left (byte) printf_uint::format_sign_always (byte) printf_uint::format_zero_padding (byte) printf_uint::format_upper_case (byte) printf_uint::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_schar::$2 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_schar::format_min_length (byte) printf_schar::format_justify_left (byte) printf_schar::format_sign_always (byte) printf_schar::format_zero_padding (byte) printf_schar::format_upper_case (byte) printf_schar::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_uchar::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_uchar::format_min_length (byte) printf_uchar::format_justify_left (byte) printf_uchar::format_sign_always (byte) printf_uchar::format_zero_padding (byte) printf_uchar::format_upper_case (byte) printf_uchar::format_radix 
Converted call struct value parameter to member unwinding (void~) main::$1 ← call printf_schar (number) -$4d (number) 6 (number) 0 (number) 0 (number) 0 (number) 0 (const byte) DECIMAL 
Converted call struct value parameter to member unwinding (void~) main::$3 ← call printf_schar (number) $63 (number) 6 (number) 0 (number) 1 (number) 1 (number) 0 (const byte) OCTAL 
Converted call struct value parameter to member unwinding (void~) main::$5 ← call printf_uint (number) $d80 (number) $a (number) 1 (number) 0 (number) 0 (number) 1 (const byte) HEXADECIMAL 
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_slong::format.sign_always with member unwinding reference (byte) printf_slong::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_slong::format.radix with member unwinding reference (byte) printf_slong::format_radix
Replacing struct member reference (struct printf_format_number) printf_ulong::format.sign_always with member unwinding reference (byte) printf_ulong::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_ulong::format.radix with member unwinding reference (byte) printf_ulong::format_radix
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_sint::format.sign_always with member unwinding reference (byte) printf_sint::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_sint::format.radix with member unwinding reference (byte) printf_sint::format_radix
Replacing struct member reference (struct printf_format_number) printf_uint::format.sign_always with member unwinding reference (byte) printf_uint::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_uint::format.radix with member unwinding reference (byte) printf_uint::format_radix
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_schar::format.sign_always with member unwinding reference (byte) printf_schar::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_schar::format.radix with member unwinding reference (byte) printf_schar::format_radix
Replacing struct member reference (struct printf_format_number) printf_uchar::format.sign_always with member unwinding reference (byte) printf_uchar::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_uchar::format.radix with member unwinding reference (byte) printf_uchar::format_radix
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.min_length with member unwinding reference (byte) printf_number_buffer::format_min_length
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.justify_left with member unwinding reference (byte) printf_number_buffer::format_justify_left
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.min_length with member unwinding reference (byte) printf_number_buffer::format_min_length
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.upper_case with member unwinding reference (byte) printf_number_buffer::format_upper_case
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.justify_left with member unwinding reference (byte) printf_number_buffer::format_justify_left
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_format_string) printf_string::format.min_length with member unwinding reference (byte) printf_string::format_min_length
Replacing struct member reference (struct printf_format_string) printf_string::format.justify_left with member unwinding reference (byte) printf_string::format_justify_left
Replacing struct member reference (struct printf_format_string) printf_string::format.min_length with member unwinding reference (byte) printf_string::format_min_length
Replacing struct member reference (struct printf_format_string) printf_string::format.justify_left with member unwinding reference (byte) printf_string::format_justify_left

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  (byte) toupper::ch#1 ← phi( strupr::@2/(byte) toupper::ch#0 )
  (bool~) toupper::$0 ← (byte) toupper::ch#1 >= (byte) 'a'
  (bool~) toupper::$1 ← (byte) toupper::ch#1 <= (byte) 'z'
  (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
  if((bool~) toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  (byte) toupper::ch#2 ← phi( toupper/(byte) toupper::ch#1 )
  (byte~) toupper::$3 ← (byte) toupper::ch#2 + (byte) 'A'-(byte) 'a'
  (byte) toupper::return#0 ← (byte~) toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  (byte) toupper::ch#3 ← phi( toupper/(byte) toupper::ch#1 )
  (byte) toupper::return#1 ← (byte) toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  (byte) toupper::return#4 ← phi( toupper::@1/(byte) toupper::return#0 toupper::@2/(byte) toupper::return#1 )
  (byte) toupper::return#2 ← (byte) toupper::return#4
  return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_scroll::@1
  (word) memcpy::num#1 ← phi( printf_scroll::@1/(word) memcpy::num#0 )
  (void*) memcpy::destination#1 ← phi( printf_scroll::@1/(void*) memcpy::destination#0 )
  (void*) memcpy::source#1 ← phi( printf_scroll::@1/(void*) memcpy::source#0 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#1
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#1
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#1
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#1
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#3 ← phi( memcpy/(void*) memcpy::destination#1 memcpy::@2/(void*) memcpy::destination#4 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#4 ← phi( memcpy::@1/(void*) memcpy::destination#3 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#2 ← phi( memcpy::@1/(void*) memcpy::destination#3 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#3 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#3
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_cls printf_scroll::@2
  (byte) memset::c#5 ← phi( printf_cls/(byte) memset::c#0 printf_scroll::@2/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( printf_cls/(void*) memset::str#0 printf_scroll::@2/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( printf_cls/(word) memset::num#0 printf_scroll::@2/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  (byte*) strupr::str#1 ← phi( printf_number_buffer::@11/(byte*) strupr::str#0 )
  (byte*) strupr::src#0 ← (byte*) strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  (byte*) strupr::str#3 ← phi( strupr/(byte*) strupr::str#1 strupr::@4/(byte*) strupr::str#4 )
  (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::src#0 strupr::@4/(byte*) strupr::src#1 )
  (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
  if((bool~) strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#5 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::src#3 ← phi( strupr::@1/(byte*) strupr::src#2 )
  (byte) toupper::ch#0 ← *((byte*) strupr::src#3)
  call toupper 
  (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  (byte*) strupr::str#4 ← phi( strupr::@2/(byte*) strupr::str#5 )
  (byte*) strupr::src#4 ← phi( strupr::@2/(byte*) strupr::src#3 )
  (byte) toupper::return#5 ← phi( strupr::@2/(byte) toupper::return#3 )
  (byte~) strupr::$0 ← (byte) toupper::return#5
  *((byte*) strupr::src#4) ← (byte~) strupr::$0
  (byte*) strupr::src#1 ← ++ (byte*) strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#2 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::return#0 ← (byte*) strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  (byte*) strupr::return#3 ← phi( strupr::@3/(byte*) strupr::return#0 )
  (byte*) strupr::return#1 ← (byte*) strupr::return#3
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  (byte*) strlen::str#4 ← phi( printf_number_buffer::@6/(byte*) strlen::str#1 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#4 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#3 ← phi( strlen::@1/(byte*) strlen::str#2 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#3 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#3
  return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_schar::@2
  (byte*) uctoa::buffer#21 ← phi( printf_schar::@2/(byte*) uctoa::buffer#5 )
  (byte) uctoa::value#12 ← phi( printf_schar::@2/(byte) uctoa::value#1 )
  (byte) uctoa::radix#1 ← phi( printf_schar::@2/(byte) uctoa::radix#0 )
  (byte) uctoa::max_digits#0 ← (byte) 0
  (byte*) uctoa::digit_values#0 ← (byte*) 0
  (bool~) uctoa::$0 ← (byte) uctoa::radix#1 == (const byte) DECIMAL
  if((bool~) uctoa::$0) goto uctoa::@1
  to:uctoa::@6
uctoa::@1: scope:[uctoa]  from uctoa
  (byte*) uctoa::buffer#17 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::value#8 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte) uctoa::max_digits#1 ← (number) 3
  (byte*) uctoa::digit_values#1 ← (const byte*) RADIX_DECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@6: scope:[uctoa]  from uctoa
  (byte) uctoa::value#13 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte*) uctoa::buffer#16 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::radix#2 ← phi( uctoa/(byte) uctoa::radix#1 )
  (bool~) uctoa::$1 ← (byte) uctoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) uctoa::$1) goto uctoa::@2
  to:uctoa::@7
uctoa::@2: scope:[uctoa]  from uctoa::@6
  (byte*) uctoa::buffer#18 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::value#9 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte) uctoa::max_digits#2 ← (number) 2
  (byte*) uctoa::digit_values#2 ← (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@7: scope:[uctoa]  from uctoa::@6
  (byte) uctoa::value#14 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte*) uctoa::buffer#13 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::radix#3 ← phi( uctoa::@6/(byte) uctoa::radix#2 )
  (bool~) uctoa::$2 ← (byte) uctoa::radix#3 == (const byte) OCTAL
  if((bool~) uctoa::$2) goto uctoa::@3
  to:uctoa::@8
uctoa::@3: scope:[uctoa]  from uctoa::@7
  (byte*) uctoa::buffer#19 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::value#10 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte) uctoa::max_digits#3 ← (number) 3
  (byte*) uctoa::digit_values#3 ← (const byte*) RADIX_OCTAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@8: scope:[uctoa]  from uctoa::@7
  (byte) uctoa::value#15 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte*) uctoa::buffer#10 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::radix#4 ← phi( uctoa::@7/(byte) uctoa::radix#3 )
  (bool~) uctoa::$3 ← (byte) uctoa::radix#4 == (const byte) BINARY
  if((bool~) uctoa::$3) goto uctoa::@4
  to:uctoa::@9
uctoa::@4: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#20 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  (byte) uctoa::value#11 ← phi( uctoa::@8/(byte) uctoa::value#15 )
  (byte) uctoa::max_digits#4 ← (number) 8
  (byte*) uctoa::digit_values#4 ← (const byte*) RADIX_BINARY_VALUES_CHAR
  to:uctoa::@5
uctoa::@9: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#6 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  *((byte*) uctoa::buffer#6) ← (byte) 'e'
  (byte*) uctoa::buffer#0 ← ++ (byte*) uctoa::buffer#6
  *((byte*) uctoa::buffer#0) ← (byte) 'r'
  (byte*) uctoa::buffer#1 ← ++ (byte*) uctoa::buffer#0
  *((byte*) uctoa::buffer#1) ← (byte) 'r'
  (byte*) uctoa::buffer#2 ← ++ (byte*) uctoa::buffer#1
  *((byte*) uctoa::buffer#2) ← (number) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@12 uctoa::@9
  return 
  to:@return
uctoa::@5: scope:[uctoa]  from uctoa::@1 uctoa::@2 uctoa::@3 uctoa::@4
  (byte*) uctoa::buffer#15 ← phi( uctoa::@1/(byte*) uctoa::buffer#17 uctoa::@2/(byte*) uctoa::buffer#18 uctoa::@3/(byte*) uctoa::buffer#19 uctoa::@4/(byte*) uctoa::buffer#20 )
  (byte) uctoa::value#7 ← phi( uctoa::@1/(byte) uctoa::value#8 uctoa::@2/(byte) uctoa::value#9 uctoa::@3/(byte) uctoa::value#10 uctoa::@4/(byte) uctoa::value#11 )
  (byte*) uctoa::digit_values#8 ← phi( uctoa::@1/(byte*) uctoa::digit_values#1 uctoa::@2/(byte*) uctoa::digit_values#2 uctoa::@3/(byte*) uctoa::digit_values#3 uctoa::@4/(byte*) uctoa::digit_values#4 )
  (byte) uctoa::max_digits#7 ← phi( uctoa::@1/(byte) uctoa::max_digits#1 uctoa::@2/(byte) uctoa::max_digits#2 uctoa::@3/(byte) uctoa::max_digits#3 uctoa::@4/(byte) uctoa::max_digits#4 )
  (byte) uctoa::started#0 ← (byte) 0
  (byte) uctoa::digit#0 ← (byte) 0
  to:uctoa::@10
uctoa::@10: scope:[uctoa]  from uctoa::@13 uctoa::@5
  (byte*) uctoa::buffer#11 ← phi( uctoa::@13/(byte*) uctoa::buffer#14 uctoa::@5/(byte*) uctoa::buffer#15 )
  (byte) uctoa::started#3 ← phi( uctoa::@13/(byte) uctoa::started#4 uctoa::@5/(byte) uctoa::started#0 )
  (byte) uctoa::value#5 ← phi( uctoa::@13/(byte) uctoa::value#6 uctoa::@5/(byte) uctoa::value#7 )
  (byte*) uctoa::digit_values#6 ← phi( uctoa::@13/(byte*) uctoa::digit_values#7 uctoa::@5/(byte*) uctoa::digit_values#8 )
  (byte) uctoa::digit#2 ← phi( uctoa::@13/(byte) uctoa::digit#1 uctoa::@5/(byte) uctoa::digit#0 )
  (byte) uctoa::max_digits#5 ← phi( uctoa::@13/(byte) uctoa::max_digits#6 uctoa::@5/(byte) uctoa::max_digits#7 )
  (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
  (bool~) uctoa::$5 ← (byte) uctoa::digit#2 < (number~) uctoa::$4
  if((bool~) uctoa::$5) goto uctoa::@11
  to:uctoa::@12
uctoa::@11: scope:[uctoa]  from uctoa::@10
  (byte) uctoa::max_digits#8 ← phi( uctoa::@10/(byte) uctoa::max_digits#5 )
  (byte*) uctoa::buffer#12 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::started#2 ← phi( uctoa::@10/(byte) uctoa::started#3 )
  (byte) uctoa::value#2 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte) uctoa::digit#3 ← phi( uctoa::@10/(byte) uctoa::digit#2 )
  (byte*) uctoa::digit_values#5 ← phi( uctoa::@10/(byte*) uctoa::digit_values#6 )
  (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#5 + (byte) uctoa::digit#3)
  (bool~) uctoa::$6 ← (byte) uctoa::value#2 >= (byte) uctoa::digit_value#0
  (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
  (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
  if((bool~) uctoa::$8) goto uctoa::@13
  to:uctoa::@14
uctoa::@12: scope:[uctoa]  from uctoa::@10
  (byte*) uctoa::buffer#7 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::value#3 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte~) uctoa::$10 ← (byte)(byte) uctoa::value#3
  *((byte*) uctoa::buffer#7) ← *((const byte*) DIGITS + (byte~) uctoa::$10)
  (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#7
  *((byte*) uctoa::buffer#3) ← (number) 0
  to:uctoa::@return
uctoa::@13: scope:[uctoa]  from uctoa::@11 uctoa::@15
  (byte*) uctoa::buffer#14 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 uctoa::@15/(byte*) uctoa::buffer#4 )
  (byte) uctoa::started#4 ← phi( uctoa::@11/(byte) uctoa::started#2 uctoa::@15/(byte) uctoa::started#1 )
  (byte) uctoa::value#6 ← phi( uctoa::@11/(byte) uctoa::value#2 uctoa::@15/(byte) uctoa::value#0 )
  (byte*) uctoa::digit_values#7 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 uctoa::@15/(byte*) uctoa::digit_values#9 )
  (byte) uctoa::max_digits#6 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 uctoa::@15/(byte) uctoa::max_digits#9 )
  (byte) uctoa::digit#4 ← phi( uctoa::@11/(byte) uctoa::digit#3 uctoa::@15/(byte) uctoa::digit#5 )
  (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#4
  to:uctoa::@10
uctoa::@14: scope:[uctoa]  from uctoa::@11
  (byte*) uctoa::digit_values#10 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 )
  (byte) uctoa::max_digits#10 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 )
  (byte) uctoa::digit#6 ← phi( uctoa::@11/(byte) uctoa::digit#3 )
  (byte) uctoa::digit_value#1 ← phi( uctoa::@11/(byte) uctoa::digit_value#0 )
  (byte) uctoa::value#4 ← phi( uctoa::@11/(byte) uctoa::value#2 )
  (byte*) uctoa::buffer#8 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 )
  (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#8
  (byte) uctoa_append::value#0 ← (byte) uctoa::value#4
  (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#1
  call uctoa_append 
  (byte) uctoa_append::return#0 ← (byte) uctoa_append::return#2
  to:uctoa::@15
uctoa::@15: scope:[uctoa]  from uctoa::@14
  (byte*) uctoa::digit_values#9 ← phi( uctoa::@14/(byte*) uctoa::digit_values#10 )
  (byte) uctoa::max_digits#9 ← phi( uctoa::@14/(byte) uctoa::max_digits#10 )
  (byte) uctoa::digit#5 ← phi( uctoa::@14/(byte) uctoa::digit#6 )
  (byte*) uctoa::buffer#9 ← phi( uctoa::@14/(byte*) uctoa::buffer#8 )
  (byte) uctoa_append::return#3 ← phi( uctoa::@14/(byte) uctoa_append::return#0 )
  (byte~) uctoa::$9 ← (byte) uctoa_append::return#3
  (byte) uctoa::value#0 ← (byte~) uctoa::$9
  (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#9
  (byte) uctoa::started#1 ← (number) 1
  to:uctoa::@13

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@14
  (byte*) uctoa_append::buffer#3 ← phi( uctoa::@14/(byte*) uctoa_append::buffer#0 )
  (byte) uctoa_append::sub#3 ← phi( uctoa::@14/(byte) uctoa_append::sub#0 )
  (byte) uctoa_append::value#5 ← phi( uctoa::@14/(byte) uctoa_append::value#0 )
  (byte) uctoa_append::digit#0 ← (byte) 0
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  (byte*) uctoa_append::buffer#2 ← phi( uctoa_append/(byte*) uctoa_append::buffer#3 uctoa_append::@2/(byte*) uctoa_append::buffer#4 )
  (byte) uctoa_append::digit#4 ← phi( uctoa_append/(byte) uctoa_append::digit#0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  (byte) uctoa_append::sub#1 ← phi( uctoa_append/(byte) uctoa_append::sub#3 uctoa_append::@2/(byte) uctoa_append::sub#2 )
  (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#5 uctoa_append::@2/(byte) uctoa_append::value#1 )
  (bool~) uctoa_append::$0 ← (byte) uctoa_append::value#2 >= (byte) uctoa_append::sub#1
  if((bool~) uctoa_append::$0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  (byte*) uctoa_append::buffer#4 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::sub#2 ← phi( uctoa_append::@1/(byte) uctoa_append::sub#1 )
  (byte) uctoa_append::value#3 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte) uctoa_append::digit#2 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#3 - (byte) uctoa_append::sub#2
  to:uctoa_append::@1
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  (byte) uctoa_append::value#4 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte*) uctoa_append::buffer#1 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::digit#3 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  *((byte*) uctoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#3)
  (byte) uctoa_append::return#1 ← (byte) uctoa_append::value#4
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  (byte) uctoa_append::return#4 ← phi( uctoa_append::@3/(byte) uctoa_append::return#1 )
  (byte) uctoa_append::return#2 ← (byte) uctoa_append::return#4
  return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@3
  (byte*) utoa::buffer#21 ← phi( printf_uint::@3/(byte*) utoa::buffer#5 )
  (word) utoa::value#12 ← phi( printf_uint::@3/(word) utoa::value#1 )
  (byte) utoa::radix#1 ← phi( printf_uint::@3/(byte) utoa::radix#0 )
  (byte) utoa::max_digits#0 ← (byte) 0
  (word*) utoa::digit_values#0 ← (word*) 0
  (bool~) utoa::$0 ← (byte) utoa::radix#1 == (const byte) DECIMAL
  if((bool~) utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  (byte*) utoa::buffer#17 ← phi( utoa/(byte*) utoa::buffer#21 )
  (word) utoa::value#8 ← phi( utoa/(word) utoa::value#12 )
  (byte) utoa::max_digits#1 ← (number) 5
  (word*) utoa::digit_values#1 ← (const word*) RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  (word) utoa::value#13 ← phi( utoa/(word) utoa::value#12 )
  (byte*) utoa::buffer#16 ← phi( utoa/(byte*) utoa::buffer#21 )
  (byte) utoa::radix#2 ← phi( utoa/(byte) utoa::radix#1 )
  (bool~) utoa::$1 ← (byte) utoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  (byte*) utoa::buffer#18 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (word) utoa::value#9 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte) utoa::max_digits#2 ← (number) 4
  (word*) utoa::digit_values#2 ← (const word*) RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  (word) utoa::value#14 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte*) utoa::buffer#13 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (byte) utoa::radix#3 ← phi( utoa::@6/(byte) utoa::radix#2 )
  (bool~) utoa::$2 ← (byte) utoa::radix#3 == (const byte) OCTAL
  if((bool~) utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  (byte*) utoa::buffer#19 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (word) utoa::value#10 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte) utoa::max_digits#3 ← (number) 6
  (word*) utoa::digit_values#3 ← (const word*) RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  (word) utoa::value#15 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte*) utoa::buffer#10 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (byte) utoa::radix#4 ← phi( utoa::@7/(byte) utoa::radix#3 )
  (bool~) utoa::$3 ← (byte) utoa::radix#4 == (const byte) BINARY
  if((bool~) utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#20 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  (word) utoa::value#11 ← phi( utoa::@8/(word) utoa::value#15 )
  (byte) utoa::max_digits#4 ← (number) $10
  (word*) utoa::digit_values#4 ← (const word*) RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#6 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  *((byte*) utoa::buffer#6) ← (byte) 'e'
  (byte*) utoa::buffer#0 ← ++ (byte*) utoa::buffer#6
  *((byte*) utoa::buffer#0) ← (byte) 'r'
  (byte*) utoa::buffer#1 ← ++ (byte*) utoa::buffer#0
  *((byte*) utoa::buffer#1) ← (byte) 'r'
  (byte*) utoa::buffer#2 ← ++ (byte*) utoa::buffer#1
  *((byte*) utoa::buffer#2) ← (number) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  (byte*) utoa::buffer#15 ← phi( utoa::@1/(byte*) utoa::buffer#17 utoa::@2/(byte*) utoa::buffer#18 utoa::@3/(byte*) utoa::buffer#19 utoa::@4/(byte*) utoa::buffer#20 )
  (word) utoa::value#7 ← phi( utoa::@1/(word) utoa::value#8 utoa::@2/(word) utoa::value#9 utoa::@3/(word) utoa::value#10 utoa::@4/(word) utoa::value#11 )
  (word*) utoa::digit_values#8 ← phi( utoa::@1/(word*) utoa::digit_values#1 utoa::@2/(word*) utoa::digit_values#2 utoa::@3/(word*) utoa::digit_values#3 utoa::@4/(word*) utoa::digit_values#4 )
  (byte) utoa::max_digits#7 ← phi( utoa::@1/(byte) utoa::max_digits#1 utoa::@2/(byte) utoa::max_digits#2 utoa::@3/(byte) utoa::max_digits#3 utoa::@4/(byte) utoa::max_digits#4 )
  (byte) utoa::started#0 ← (byte) 0
  (byte) utoa::digit#0 ← (byte) 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  (byte*) utoa::buffer#11 ← phi( utoa::@13/(byte*) utoa::buffer#14 utoa::@5/(byte*) utoa::buffer#15 )
  (byte) utoa::started#3 ← phi( utoa::@13/(byte) utoa::started#4 utoa::@5/(byte) utoa::started#0 )
  (word) utoa::value#5 ← phi( utoa::@13/(word) utoa::value#6 utoa::@5/(word) utoa::value#7 )
  (word*) utoa::digit_values#6 ← phi( utoa::@13/(word*) utoa::digit_values#7 utoa::@5/(word*) utoa::digit_values#8 )
  (byte) utoa::digit#2 ← phi( utoa::@13/(byte) utoa::digit#1 utoa::@5/(byte) utoa::digit#0 )
  (byte) utoa::max_digits#5 ← phi( utoa::@13/(byte) utoa::max_digits#6 utoa::@5/(byte) utoa::max_digits#7 )
  (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
  (bool~) utoa::$5 ← (byte) utoa::digit#2 < (number~) utoa::$4
  if((bool~) utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  (byte) utoa::max_digits#8 ← phi( utoa::@10/(byte) utoa::max_digits#5 )
  (byte*) utoa::buffer#12 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (byte) utoa::started#2 ← phi( utoa::@10/(byte) utoa::started#3 )
  (word) utoa::value#2 ← phi( utoa::@10/(word) utoa::value#5 )
  (word*) utoa::digit_values#5 ← phi( utoa::@10/(word*) utoa::digit_values#6 )
  (byte) utoa::digit#3 ← phi( utoa::@10/(byte) utoa::digit#2 )
  (byte~) utoa::$10 ← (byte) utoa::digit#3 * (const byte) SIZEOF_WORD
  (word) utoa::digit_value#0 ← *((word*) utoa::digit_values#5 + (byte~) utoa::$10)
  (bool~) utoa::$6 ← (word) utoa::value#2 >= (word) utoa::digit_value#0
  (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
  (bool~) utoa::$8 ← ! (bool~) utoa::$7
  if((bool~) utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  (byte*) utoa::buffer#7 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (word) utoa::value#3 ← phi( utoa::@10/(word) utoa::value#5 )
  (byte~) utoa::$11 ← (byte)(word) utoa::value#3
  *((byte*) utoa::buffer#7) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#7
  *((byte*) utoa::buffer#3) ← (number) 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  (byte*) utoa::buffer#14 ← phi( utoa::@11/(byte*) utoa::buffer#12 utoa::@15/(byte*) utoa::buffer#4 )
  (byte) utoa::started#4 ← phi( utoa::@11/(byte) utoa::started#2 utoa::@15/(byte) utoa::started#1 )
  (word) utoa::value#6 ← phi( utoa::@11/(word) utoa::value#2 utoa::@15/(word) utoa::value#0 )
  (word*) utoa::digit_values#7 ← phi( utoa::@11/(word*) utoa::digit_values#5 utoa::@15/(word*) utoa::digit_values#9 )
  (byte) utoa::max_digits#6 ← phi( utoa::@11/(byte) utoa::max_digits#8 utoa::@15/(byte) utoa::max_digits#9 )
  (byte) utoa::digit#4 ← phi( utoa::@11/(byte) utoa::digit#3 utoa::@15/(byte) utoa::digit#5 )
  (byte) utoa::digit#1 ← ++ (byte) utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  (word*) utoa::digit_values#10 ← phi( utoa::@11/(word*) utoa::digit_values#5 )
  (byte) utoa::max_digits#10 ← phi( utoa::@11/(byte) utoa::max_digits#8 )
  (byte) utoa::digit#6 ← phi( utoa::@11/(byte) utoa::digit#3 )
  (word) utoa::digit_value#1 ← phi( utoa::@11/(word) utoa::digit_value#0 )
  (word) utoa::value#4 ← phi( utoa::@11/(word) utoa::value#2 )
  (byte*) utoa::buffer#8 ← phi( utoa::@11/(byte*) utoa::buffer#12 )
  (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#8
  (word) utoa_append::value#0 ← (word) utoa::value#4
  (word) utoa_append::sub#0 ← (word) utoa::digit_value#1
  call utoa_append 
  (word) utoa_append::return#0 ← (word) utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  (word*) utoa::digit_values#9 ← phi( utoa::@14/(word*) utoa::digit_values#10 )
  (byte) utoa::max_digits#9 ← phi( utoa::@14/(byte) utoa::max_digits#10 )
  (byte) utoa::digit#5 ← phi( utoa::@14/(byte) utoa::digit#6 )
  (byte*) utoa::buffer#9 ← phi( utoa::@14/(byte*) utoa::buffer#8 )
  (word) utoa_append::return#3 ← phi( utoa::@14/(word) utoa_append::return#0 )
  (word~) utoa::$9 ← (word) utoa_append::return#3
  (word) utoa::value#0 ← (word~) utoa::$9
  (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#9
  (byte) utoa::started#1 ← (number) 1
  to:utoa::@13

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  (byte*) utoa_append::buffer#3 ← phi( utoa::@14/(byte*) utoa_append::buffer#0 )
  (word) utoa_append::sub#3 ← phi( utoa::@14/(word) utoa_append::sub#0 )
  (word) utoa_append::value#5 ← phi( utoa::@14/(word) utoa_append::value#0 )
  (byte) utoa_append::digit#0 ← (byte) 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  (byte*) utoa_append::buffer#2 ← phi( utoa_append/(byte*) utoa_append::buffer#3 utoa_append::@2/(byte*) utoa_append::buffer#4 )
  (byte) utoa_append::digit#4 ← phi( utoa_append/(byte) utoa_append::digit#0 utoa_append::@2/(byte) utoa_append::digit#1 )
  (word) utoa_append::sub#1 ← phi( utoa_append/(word) utoa_append::sub#3 utoa_append::@2/(word) utoa_append::sub#2 )
  (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#5 utoa_append::@2/(word) utoa_append::value#1 )
  (bool~) utoa_append::$0 ← (word) utoa_append::value#2 >= (word) utoa_append::sub#1
  if((bool~) utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  (byte*) utoa_append::buffer#4 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (word) utoa_append::sub#2 ← phi( utoa_append::@1/(word) utoa_append::sub#1 )
  (word) utoa_append::value#3 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte) utoa_append::digit#2 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  (word) utoa_append::value#1 ← (word) utoa_append::value#3 - (word) utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  (word) utoa_append::value#4 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte*) utoa_append::buffer#1 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (byte) utoa_append::digit#3 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  *((byte*) utoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) utoa_append::digit#3)
  (word) utoa_append::return#1 ← (word) utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  (word) utoa_append::return#4 ← phi( utoa_append::@3/(word) utoa_append::return#1 )
  (word) utoa_append::return#2 ← (word) utoa_append::return#4
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) printf_cursor_x ← (byte) 0
  (byte) printf_cursor_y ← (byte) 0
  (byte*) printf_cursor_ptr ← (byte*)(number) $400
  to:@2

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  (void*) memset::str#0 ← (void*)(number) $400
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28*(number) $19
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  (byte*) printf_cursor_ptr ← ((byte*)) (number) $400
  (byte) printf_cursor_x ← (number) 0
  (byte) printf_cursor_y ← (number) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  return 
  to:@return

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_number_buffer::@9 printf_padding::@2 printf_str::@5
  (byte) printf_char::ch#3 ← phi( printf_number_buffer::@9/(byte) printf_char::ch#2 printf_padding::@2/(byte) printf_char::ch#0 printf_str::@5/(byte) printf_char::ch#1 )
  *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3
  (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  (bool~) printf_char::$0 ← (byte) printf_cursor_x == (number) $28
  (bool~) printf_char::$1 ← ! (bool~) printf_char::$0
  if((bool~) printf_char::$1) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  (byte) printf_cursor_x ← (number) 0
  (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  call printf_scroll 
  to:printf_char::@2
printf_char::@2: scope:[printf_char]  from printf_char::@1
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@2
  return 
  to:@return

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from main::@2 main::@4 main::@6 printf_str::@4
  (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (number) $28
  (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  (byte) printf_cursor_x ← (number) 0
  (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  call printf_scroll 
  to:printf_ln::@1
printf_ln::@1: scope:[printf_ln]  from printf_ln
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln::@1
  return 
  to:@return

(void()) printf_scroll()
printf_scroll: scope:[printf_scroll]  from printf_char::@1 printf_ln
  (bool~) printf_scroll::$0 ← (byte) printf_cursor_y == (number) $19
  (bool~) printf_scroll::$1 ← ! (bool~) printf_scroll::$0
  if((bool~) printf_scroll::$1) goto printf_scroll::@return
  to:printf_scroll::@1
printf_scroll::@1: scope:[printf_scroll]  from printf_scroll
  (void*) memcpy::destination#0 ← (void*)(number) $400
  (void*) memcpy::source#0 ← (void*)(number) $400+(number) $28
  (word) memcpy::num#0 ← (number) $28*(number) $19-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:printf_scroll::@2
printf_scroll::@2: scope:[printf_scroll]  from printf_scroll::@1
  (void*) memset::str#1 ← (void*)(number) $400+(number) $28*(number) $19-(number) $28
  (byte) memset::c#1 ← (byte) ' '
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:printf_scroll::@3
printf_scroll::@3: scope:[printf_scroll]  from printf_scroll::@2
  (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (number) $28
  (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
  (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_scroll::@return
printf_scroll::@return: scope:[printf_scroll]  from printf_scroll printf_scroll::@3
  return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) printf_padding::pad#1 printf_number_buffer::@12/(byte) printf_padding::pad#2 printf_number_buffer::@8/(byte) printf_padding::pad#0 )
  (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  (byte) printf_padding::i#0 ← (byte) 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  (byte) printf_padding::pad#4 ← phi( printf_padding/(byte) printf_padding::pad#5 printf_padding::@3/(byte) printf_padding::pad#6 )
  (byte) printf_padding::length#3 ← phi( printf_padding/(byte) printf_padding::length#4 printf_padding::@3/(byte) printf_padding::length#5 )
  (byte) printf_padding::i#2 ← phi( printf_padding/(byte) printf_padding::i#0 printf_padding::@3/(byte) printf_padding::i#1 )
  (bool~) printf_padding::$0 ← (byte) printf_padding::i#2 < (byte) printf_padding::length#3
  if((bool~) printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  (byte) printf_padding::length#6 ← phi( printf_padding::@1/(byte) printf_padding::length#3 )
  (byte) printf_padding::i#4 ← phi( printf_padding::@1/(byte) printf_padding::i#2 )
  (byte) printf_padding::pad#3 ← phi( printf_padding::@1/(byte) printf_padding::pad#4 )
  (byte) printf_char::ch#0 ← (byte) printf_padding::pad#3
  call printf_char 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  (byte) printf_padding::pad#6 ← phi( printf_padding::@2/(byte) printf_padding::pad#3 )
  (byte) printf_padding::length#5 ← phi( printf_padding::@2/(byte) printf_padding::length#6 )
  (byte) printf_padding::i#3 ← phi( printf_padding::@2/(byte) printf_padding::i#4 )
  (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from printf_number_buffer::@5
  (byte*) printf_str::str#4 ← phi( printf_number_buffer::@5/(byte*) printf_str::str#1 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@6 printf_str::@7
  (byte*) printf_str::str#3 ← phi( printf_str/(byte*) printf_str::str#4 printf_str::@6/(byte*) printf_str::str#5 printf_str::@7/(byte*) printf_str::str#6 )
  if(true) goto printf_str::@2
  to:printf_str::@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  (byte*) printf_str::str#2 ← phi( printf_str::@1/(byte*) printf_str::str#3 )
  (byte) printf_str::ch#0 ← *((byte*) printf_str::str#2)
  (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#2
  (bool~) printf_str::$0 ← (byte) printf_str::ch#0 == (number) 0
  (bool~) printf_str::$1 ← ! (bool~) printf_str::$0
  if((bool~) printf_str::$1) goto printf_str::@3
  to:printf_str::@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  (byte*) printf_str::str#9 ← phi( printf_str::@2/(byte*) printf_str::str#0 )
  (byte) printf_str::ch#1 ← phi( printf_str::@2/(byte) printf_str::ch#0 )
  (bool~) printf_str::$2 ← (byte) printf_str::ch#1 == (byte) '
'
  if((bool~) printf_str::$2) goto printf_str::@4
  to:printf_str::@5
printf_str::@4: scope:[printf_str]  from printf_str::@3
  (byte*) printf_str::str#7 ← phi( printf_str::@3/(byte*) printf_str::str#9 )
  call printf_ln 
  to:printf_str::@6
printf_str::@6: scope:[printf_str]  from printf_str::@4
  (byte*) printf_str::str#5 ← phi( printf_str::@4/(byte*) printf_str::str#7 )
  to:printf_str::@1
printf_str::@5: scope:[printf_str]  from printf_str::@3
  (byte*) printf_str::str#8 ← phi( printf_str::@3/(byte*) printf_str::str#9 )
  (byte) printf_str::ch#2 ← phi( printf_str::@3/(byte) printf_str::ch#1 )
  (byte) printf_char::ch#1 ← (byte) printf_str::ch#2
  call printf_char 
  to:printf_str::@7
printf_str::@7: scope:[printf_str]  from printf_str::@5
  (byte*) printf_str::str#6 ← phi( printf_str::@5/(byte*) printf_str::str#8 )
  to:printf_str::@1
printf_str::@return: scope:[printf_str]  from printf_str::@1 printf_str::@2
  return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@5
  (byte) printf_uint::format_upper_case#5 ← phi( main::@5/(byte) printf_uint::format_upper_case#0 )
  (byte) printf_uint::format_zero_padding#5 ← phi( main::@5/(byte) printf_uint::format_zero_padding#0 )
  (byte) printf_uint::format_justify_left#5 ← phi( main::@5/(byte) printf_uint::format_justify_left#0 )
  (byte) printf_uint::format_min_length#5 ← phi( main::@5/(byte) printf_uint::format_min_length#0 )
  (byte) printf_uint::format_radix#5 ← phi( main::@5/(byte) printf_uint::format_radix#0 )
  (word) printf_uint::uvalue#4 ← phi( main::@5/(word) printf_uint::uvalue#0 )
  (byte) printf_uint::format_sign_always#1 ← phi( main::@5/(byte) printf_uint::format_sign_always#0 )
  (bool~) printf_uint::$5 ← (number) 0 != (byte) printf_uint::format_sign_always#1
  if((bool~) printf_uint::$5) goto printf_uint::@1
  to:printf_uint::@2
printf_uint::@1: scope:[printf_uint]  from printf_uint
  (byte) printf_uint::format_upper_case#3 ← phi( printf_uint/(byte) printf_uint::format_upper_case#5 )
  (byte) printf_uint::format_zero_padding#3 ← phi( printf_uint/(byte) printf_uint::format_zero_padding#5 )
  (byte) printf_uint::format_sign_always#4 ← phi( printf_uint/(byte) printf_uint::format_sign_always#1 )
  (byte) printf_uint::format_justify_left#3 ← phi( printf_uint/(byte) printf_uint::format_justify_left#5 )
  (byte) printf_uint::format_min_length#3 ← phi( printf_uint/(byte) printf_uint::format_min_length#5 )
  (byte) printf_uint::format_radix#3 ← phi( printf_uint/(byte) printf_uint::format_radix#5 )
  (word) printf_uint::uvalue#2 ← phi( printf_uint/(word) printf_uint::uvalue#4 )
  (byte~) printf_uint::$1 ← (byte) '+'
  to:printf_uint::@3
printf_uint::@2: scope:[printf_uint]  from printf_uint
  (byte) printf_uint::format_upper_case#4 ← phi( printf_uint/(byte) printf_uint::format_upper_case#5 )
  (byte) printf_uint::format_zero_padding#4 ← phi( printf_uint/(byte) printf_uint::format_zero_padding#5 )
  (byte) printf_uint::format_sign_always#5 ← phi( printf_uint/(byte) printf_uint::format_sign_always#1 )
  (byte) printf_uint::format_justify_left#4 ← phi( printf_uint/(byte) printf_uint::format_justify_left#5 )
  (byte) printf_uint::format_min_length#4 ← phi( printf_uint/(byte) printf_uint::format_min_length#5 )
  (byte) printf_uint::format_radix#4 ← phi( printf_uint/(byte) printf_uint::format_radix#5 )
  (word) printf_uint::uvalue#3 ← phi( printf_uint/(word) printf_uint::uvalue#4 )
  (number~) printf_uint::$0 ← (number) 0
  to:printf_uint::@3
printf_uint::@3: scope:[printf_uint]  from printf_uint::@1 printf_uint::@2
  (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (number~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_uint::$2
  (word) utoa::value#1 ← (word) printf_uint::uvalue#1
  (byte*) utoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) utoa::radix#0 ← (byte) printf_uint::format_radix#1
  call utoa 
  to:printf_uint::@4
printf_uint::@4: scope:[printf_uint]  from printf_uint::@3
  (byte) printf_uint::format_radix#2 ← phi( printf_uint::@3/(byte) printf_uint::format_radix#1 )
  (byte) printf_uint::format_upper_case#1 ← phi( printf_uint::@3/(byte) printf_uint::format_upper_case#2 )
  (byte) printf_uint::format_zero_padding#1 ← phi( printf_uint::@3/(byte) printf_uint::format_zero_padding#2 )
  (byte) printf_uint::format_sign_always#2 ← phi( printf_uint::@3/(byte) printf_uint::format_sign_always#3 )
  (byte) printf_uint::format_justify_left#1 ← phi( printf_uint::@3/(byte) printf_uint::format_justify_left#2 )
  (byte) printf_uint::format_min_length#1 ← phi( printf_uint::@3/(byte) printf_uint::format_min_length#2 )
  (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#0 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#0 ← (byte) printf_uint::format_min_length#1
  (byte) printf_number_buffer::format_justify_left#0 ← (byte) printf_uint::format_justify_left#1
  (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_uint::format_sign_always#2
  (byte) printf_number_buffer::format_zero_padding#0 ← (byte) printf_uint::format_zero_padding#1
  (byte) printf_number_buffer::format_upper_case#0 ← (byte) printf_uint::format_upper_case#1
  (byte) printf_number_buffer::format_radix#0 ← (byte) printf_uint::format_radix#2
  call printf_number_buffer 
  to:printf_uint::@5
printf_uint::@5: scope:[printf_uint]  from printf_uint::@4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@5
  return 
  to:@return

(void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
printf_schar: scope:[printf_schar]  from main::@1 main::@3
  (byte) printf_schar::format_upper_case#7 ← phi( main::@1/(byte) printf_schar::format_upper_case#0 main::@3/(byte) printf_schar::format_upper_case#1 )
  (byte) printf_schar::format_zero_padding#7 ← phi( main::@1/(byte) printf_schar::format_zero_padding#0 main::@3/(byte) printf_schar::format_zero_padding#1 )
  (byte) printf_schar::format_justify_left#7 ← phi( main::@1/(byte) printf_schar::format_justify_left#0 main::@3/(byte) printf_schar::format_justify_left#1 )
  (byte) printf_schar::format_min_length#7 ← phi( main::@1/(byte) printf_schar::format_min_length#0 main::@3/(byte) printf_schar::format_min_length#1 )
  (byte) printf_schar::format_radix#7 ← phi( main::@1/(byte) printf_schar::format_radix#0 main::@3/(byte) printf_schar::format_radix#1 )
  (byte) printf_schar::format_sign_always#4 ← phi( main::@1/(byte) printf_schar::format_sign_always#0 main::@3/(byte) printf_schar::format_sign_always#1 )
  (signed byte) printf_schar::value#3 ← phi( main::@1/(signed byte) printf_schar::value#1 main::@3/(signed byte) printf_schar::value#2 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number) 0
  (bool~) printf_schar::$0 ← (signed byte) printf_schar::value#3 < (number) 0
  if((bool~) printf_schar::$0) goto printf_schar::@1
  to:printf_schar::@3
printf_schar::@1: scope:[printf_schar]  from printf_schar
  (byte) printf_schar::format_upper_case#4 ← phi( printf_schar/(byte) printf_schar::format_upper_case#7 )
  (byte) printf_schar::format_zero_padding#4 ← phi( printf_schar/(byte) printf_schar::format_zero_padding#7 )
  (byte) printf_schar::format_sign_always#6 ← phi( printf_schar/(byte) printf_schar::format_sign_always#4 )
  (byte) printf_schar::format_justify_left#4 ← phi( printf_schar/(byte) printf_schar::format_justify_left#7 )
  (byte) printf_schar::format_min_length#4 ← phi( printf_schar/(byte) printf_schar::format_min_length#7 )
  (byte) printf_schar::format_radix#4 ← phi( printf_schar/(byte) printf_schar::format_radix#7 )
  (signed byte) printf_schar::value#4 ← phi( printf_schar/(signed byte) printf_schar::value#3 )
  (signed byte~) printf_schar::$4 ← - (signed byte) printf_schar::value#4
  (signed byte) printf_schar::value#0 ← (signed byte~) printf_schar::$4
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte) '-'
  to:printf_schar::@2
printf_schar::@3: scope:[printf_schar]  from printf_schar
  (byte) printf_schar::format_upper_case#5 ← phi( printf_schar/(byte) printf_schar::format_upper_case#7 )
  (byte) printf_schar::format_zero_padding#5 ← phi( printf_schar/(byte) printf_schar::format_zero_padding#7 )
  (byte) printf_schar::format_justify_left#5 ← phi( printf_schar/(byte) printf_schar::format_justify_left#7 )
  (byte) printf_schar::format_min_length#5 ← phi( printf_schar/(byte) printf_schar::format_min_length#7 )
  (byte) printf_schar::format_radix#5 ← phi( printf_schar/(byte) printf_schar::format_radix#7 )
  (signed byte) printf_schar::value#6 ← phi( printf_schar/(signed byte) printf_schar::value#3 )
  (byte) printf_schar::format_sign_always#2 ← phi( printf_schar/(byte) printf_schar::format_sign_always#4 )
  (bool~) printf_schar::$5 ← (number) 0 != (byte) printf_schar::format_sign_always#2
  (bool~) printf_schar::$3 ← ! (bool~) printf_schar::$5
  if((bool~) printf_schar::$3) goto printf_schar::@2
  to:printf_schar::@4
printf_schar::@4: scope:[printf_schar]  from printf_schar::@3
  (byte) printf_schar::format_upper_case#6 ← phi( printf_schar::@3/(byte) printf_schar::format_upper_case#5 )
  (byte) printf_schar::format_zero_padding#6 ← phi( printf_schar::@3/(byte) printf_schar::format_zero_padding#5 )
  (byte) printf_schar::format_sign_always#7 ← phi( printf_schar::@3/(byte) printf_schar::format_sign_always#2 )
  (byte) printf_schar::format_justify_left#6 ← phi( printf_schar::@3/(byte) printf_schar::format_justify_left#5 )
  (byte) printf_schar::format_min_length#6 ← phi( printf_schar::@3/(byte) printf_schar::format_min_length#5 )
  (byte) printf_schar::format_radix#6 ← phi( printf_schar::@3/(byte) printf_schar::format_radix#5 )
  (signed byte) printf_schar::value#7 ← phi( printf_schar::@3/(signed byte) printf_schar::value#6 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte) '+'
  to:printf_schar::@2
printf_schar::@2: scope:[printf_schar]  from printf_schar::@1 printf_schar::@3 printf_schar::@4
  (byte) printf_schar::format_upper_case#3 ← phi( printf_schar::@1/(byte) printf_schar::format_upper_case#4 printf_schar::@3/(byte) printf_schar::format_upper_case#5 printf_schar::@4/(byte) printf_schar::format_upper_case#6 )
  (byte) printf_schar::format_zero_padding#3 ← phi( printf_schar::@1/(byte) printf_schar::format_zero_padding#4 printf_schar::@3/(byte) printf_schar::format_zero_padding#5 printf_schar::@4/(byte) printf_schar::format_zero_padding#6 )
  (byte) printf_schar::format_sign_always#5 ← phi( printf_schar::@1/(byte) printf_schar::format_sign_always#6 printf_schar::@3/(byte) printf_schar::format_sign_always#2 printf_schar::@4/(byte) printf_schar::format_sign_always#7 )
  (byte) printf_schar::format_justify_left#3 ← phi( printf_schar::@1/(byte) printf_schar::format_justify_left#4 printf_schar::@3/(byte) printf_schar::format_justify_left#5 printf_schar::@4/(byte) printf_schar::format_justify_left#6 )
  (byte) printf_schar::format_min_length#3 ← phi( printf_schar::@1/(byte) printf_schar::format_min_length#4 printf_schar::@3/(byte) printf_schar::format_min_length#5 printf_schar::@4/(byte) printf_schar::format_min_length#6 )
  (byte) printf_schar::format_radix#2 ← phi( printf_schar::@1/(byte) printf_schar::format_radix#4 printf_schar::@3/(byte) printf_schar::format_radix#5 printf_schar::@4/(byte) printf_schar::format_radix#6 )
  (signed byte) printf_schar::value#5 ← phi( printf_schar::@1/(signed byte) printf_schar::value#0 printf_schar::@3/(signed byte) printf_schar::value#6 printf_schar::@4/(signed byte) printf_schar::value#7 )
  (byte) printf_schar::uvalue#0 ← (byte)(signed byte) printf_schar::value#5
  (byte) uctoa::value#1 ← (byte) printf_schar::uvalue#0
  (byte*) uctoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) uctoa::radix#0 ← (byte) printf_schar::format_radix#2
  call uctoa 
  to:printf_schar::@5
printf_schar::@5: scope:[printf_schar]  from printf_schar::@2
  (byte) printf_schar::format_radix#3 ← phi( printf_schar::@2/(byte) printf_schar::format_radix#2 )
  (byte) printf_schar::format_upper_case#2 ← phi( printf_schar::@2/(byte) printf_schar::format_upper_case#3 )
  (byte) printf_schar::format_zero_padding#2 ← phi( printf_schar::@2/(byte) printf_schar::format_zero_padding#3 )
  (byte) printf_schar::format_sign_always#3 ← phi( printf_schar::@2/(byte) printf_schar::format_sign_always#5 )
  (byte) printf_schar::format_justify_left#2 ← phi( printf_schar::@2/(byte) printf_schar::format_justify_left#3 )
  (byte) printf_schar::format_min_length#2 ← phi( printf_schar::@2/(byte) printf_schar::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#1 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#1 ← (byte) printf_schar::format_min_length#2
  (byte) printf_number_buffer::format_justify_left#1 ← (byte) printf_schar::format_justify_left#2
  (byte) printf_number_buffer::format_sign_always#1 ← (byte) printf_schar::format_sign_always#3
  (byte) printf_number_buffer::format_zero_padding#1 ← (byte) printf_schar::format_zero_padding#2
  (byte) printf_number_buffer::format_upper_case#1 ← (byte) printf_schar::format_upper_case#2
  (byte) printf_number_buffer::format_radix#1 ← (byte) printf_schar::format_radix#3
  call printf_number_buffer 
  to:printf_schar::@6
printf_schar::@6: scope:[printf_schar]  from printf_schar::@5
  to:printf_schar::@return
printf_schar::@return: scope:[printf_schar]  from printf_schar::@6
  return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_schar::@5 printf_uint::@4
  (byte) printf_number_buffer::format_upper_case#11 ← phi( printf_schar::@5/(byte) printf_number_buffer::format_upper_case#1 printf_uint::@4/(byte) printf_number_buffer::format_upper_case#0 )
  (byte) printf_number_buffer::buffer_sign#8 ← phi( printf_schar::@5/(byte) printf_number_buffer::buffer_sign#1 printf_uint::@4/(byte) printf_number_buffer::buffer_sign#0 )
  (byte*) printf_number_buffer::buffer_digits#5 ← phi( printf_schar::@5/(byte*) printf_number_buffer::buffer_digits#1 printf_uint::@4/(byte*) printf_number_buffer::buffer_digits#0 )
  (byte) printf_number_buffer::format_zero_padding#5 ← phi( printf_schar::@5/(byte) printf_number_buffer::format_zero_padding#1 printf_uint::@4/(byte) printf_number_buffer::format_zero_padding#0 )
  (byte) printf_number_buffer::format_justify_left#4 ← phi( printf_schar::@5/(byte) printf_number_buffer::format_justify_left#1 printf_uint::@4/(byte) printf_number_buffer::format_justify_left#0 )
  (byte) printf_number_buffer::format_min_length#2 ← phi( printf_schar::@5/(byte) printf_number_buffer::format_min_length#1 printf_uint::@4/(byte) printf_number_buffer::format_min_length#0 )
  (signed byte) printf_number_buffer::padding#0 ← (signed byte) 0
  (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#2
  (bool~) printf_number_buffer::$0 ← ! (bool~) printf_number_buffer::$26
  if((bool~) printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  (byte*) printf_number_buffer::buffer_digits#13 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#5 printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#16 printf_number_buffer::@14/(byte*) printf_number_buffer::buffer_digits#17 )
  (byte) printf_number_buffer::format_upper_case#8 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#11 printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#12 printf_number_buffer::@14/(byte) printf_number_buffer::format_upper_case#13 )
  (byte) printf_number_buffer::buffer_sign#6 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#8 printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#9 printf_number_buffer::@14/(byte) printf_number_buffer::buffer_sign#10 )
  (signed byte) printf_number_buffer::padding#3 ← phi( printf_number_buffer/(signed byte) printf_number_buffer::padding#0 printf_number_buffer::@13/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@14/(signed byte) printf_number_buffer::padding#2 )
  (byte) printf_number_buffer::format_zero_padding#2 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#5 printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#6 printf_number_buffer::@14/(byte) printf_number_buffer::format_zero_padding#7 )
  (byte) printf_number_buffer::format_justify_left#2 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#4 printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#5 printf_number_buffer::@14/(byte) printf_number_buffer::format_justify_left#6 )
  (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#2
  (bool~) printf_number_buffer::$1 ← ! (bool~) printf_number_buffer::$27
  (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#2
  (bool~) printf_number_buffer::$2 ← ! (bool~) printf_number_buffer::$28
  (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
  (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#3
  (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
  if((bool~) printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  (byte) printf_number_buffer::format_upper_case#17 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#11 )
  (byte) printf_number_buffer::format_zero_padding#17 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#5 )
  (byte) printf_number_buffer::format_justify_left#12 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#4 )
  (byte) printf_number_buffer::format_min_length#6 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_min_length#2 )
  (byte) printf_number_buffer::buffer_sign#5 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#8 )
  (byte*) printf_number_buffer::buffer_digits#2 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#5 )
  (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#2
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  (byte*) printf_number_buffer::buffer_digits#19 ← phi( printf_number_buffer::@6/(byte*) printf_number_buffer::buffer_digits#2 )
  (byte) printf_number_buffer::format_upper_case#15 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_upper_case#17 )
  (byte) printf_number_buffer::format_zero_padding#11 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte) printf_number_buffer::format_justify_left#8 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_justify_left#12 )
  (byte) printf_number_buffer::format_min_length#4 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_min_length#6 )
  (byte) printf_number_buffer::buffer_sign#2 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::buffer_sign#5 )
  (word) strlen::return#4 ← phi( printf_number_buffer::@6/(word) strlen::return#2 )
  (word~) printf_number_buffer::$19 ← (word) strlen::return#4
  (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#2
  (bool~) printf_number_buffer::$20 ← ! (bool~) printf_number_buffer::$29
  if((bool~) printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  (byte*) printf_number_buffer::buffer_digits#16 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#19 printf_number_buffer::@7/(byte*) printf_number_buffer::buffer_digits#20 )
  (byte) printf_number_buffer::format_upper_case#12 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#15 printf_number_buffer::@7/(byte) printf_number_buffer::format_upper_case#16 )
  (byte) printf_number_buffer::buffer_sign#9 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#2 printf_number_buffer::@7/(byte) printf_number_buffer::buffer_sign#12 )
  (byte) printf_number_buffer::format_zero_padding#6 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#11 printf_number_buffer::@7/(byte) printf_number_buffer::format_zero_padding#12 )
  (byte) printf_number_buffer::format_justify_left#5 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#8 printf_number_buffer::@7/(byte) printf_number_buffer::format_justify_left#9 )
  (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  (byte) printf_number_buffer::format_min_length#3 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#4 printf_number_buffer::@7/(byte) printf_number_buffer::format_min_length#5 )
  (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#3
  (signed byte~) printf_number_buffer::$21 ← (signed byte~) printf_number_buffer::$25 - (signed byte) printf_number_buffer::len#2
  (signed byte) printf_number_buffer::padding#1 ← (signed byte~) printf_number_buffer::$21
  (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
  (bool~) printf_number_buffer::$23 ← ! (bool~) printf_number_buffer::$22
  if((bool~) printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  (byte*) printf_number_buffer::buffer_digits#20 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#19 )
  (byte) printf_number_buffer::format_upper_case#16 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#15 )
  (byte) printf_number_buffer::buffer_sign#12 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#2 )
  (byte) printf_number_buffer::format_zero_padding#12 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#11 )
  (byte) printf_number_buffer::format_justify_left#9 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#8 )
  (byte) printf_number_buffer::format_min_length#5 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#4 )
  (signed byte) printf_number_buffer::len#3 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 )
  (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  (byte*) printf_number_buffer::buffer_digits#17 ← phi( printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#16 )
  (byte) printf_number_buffer::format_upper_case#13 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#12 )
  (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#9 )
  (byte) printf_number_buffer::format_zero_padding#7 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#6 )
  (byte) printf_number_buffer::format_justify_left#6 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#5 )
  (signed byte) printf_number_buffer::padding#2 ← (number) 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  (byte) printf_number_buffer::format_justify_left#17 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#2 printf_number_buffer::@16/(byte) printf_number_buffer::format_justify_left#19 )
  (byte*) printf_number_buffer::buffer_digits#11 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#13 printf_number_buffer::@16/(byte*) printf_number_buffer::buffer_digits#14 )
  (byte) printf_number_buffer::format_upper_case#6 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#8 printf_number_buffer::@16/(byte) printf_number_buffer::format_upper_case#9 )
  (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 printf_number_buffer::@16/(signed byte) printf_number_buffer::padding#12 )
  (byte) printf_number_buffer::format_zero_padding#9 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#2 printf_number_buffer::@16/(byte) printf_number_buffer::format_zero_padding#13 )
  (byte) printf_number_buffer::buffer_sign#3 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#6 printf_number_buffer::@16/(byte) printf_number_buffer::buffer_sign#7 )
  (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#3
  (bool~) printf_number_buffer::$7 ← ! (bool~) printf_number_buffer::$30
  if((bool~) printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  (byte) printf_number_buffer::format_justify_left#21 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#2 )
  (byte*) printf_number_buffer::buffer_digits#18 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#13 )
  (byte) printf_number_buffer::format_upper_case#14 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#8 )
  (byte) printf_number_buffer::format_zero_padding#18 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#2 )
  (byte) printf_number_buffer::buffer_sign#11 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#6 )
  (signed byte) printf_number_buffer::padding#4 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 )
  (byte) printf_padding::pad#0 ← (byte) ' '
  (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  (byte) printf_number_buffer::format_justify_left#19 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_justify_left#21 )
  (byte*) printf_number_buffer::buffer_digits#14 ← phi( printf_number_buffer::@8/(byte*) printf_number_buffer::buffer_digits#18 )
  (byte) printf_number_buffer::format_upper_case#9 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_upper_case#14 )
  (signed byte) printf_number_buffer::padding#12 ← phi( printf_number_buffer::@8/(signed byte) printf_number_buffer::padding#4 )
  (byte) printf_number_buffer::format_zero_padding#13 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_zero_padding#18 )
  (byte) printf_number_buffer::buffer_sign#7 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::buffer_sign#11 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#14 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_justify_left#16 printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#17 )
  (byte*) printf_number_buffer::buffer_digits#9 ← phi( printf_number_buffer::@17/(byte*) printf_number_buffer::buffer_digits#10 printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#11 )
  (byte) printf_number_buffer::format_upper_case#4 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_upper_case#5 printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#6 )
  (signed byte) printf_number_buffer::padding#5 ← phi( printf_number_buffer::@17/(signed byte) printf_number_buffer::padding#9 printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#3 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_zero_padding#8 printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#9 )
  (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#3 && (signed byte) printf_number_buffer::padding#5
  (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
  if((bool~) printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#20 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#17 )
  (byte*) printf_number_buffer::buffer_digits#15 ← phi( printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#11 )
  (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#6 )
  (signed byte) printf_number_buffer::padding#13 ← phi( printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#14 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#9 )
  (byte) printf_number_buffer::buffer_sign#4 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::buffer_sign#3 )
  (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#4
  call printf_char 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  (byte) printf_number_buffer::format_justify_left#16 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_justify_left#20 )
  (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_number_buffer::@9/(byte*) printf_number_buffer::buffer_digits#15 )
  (byte) printf_number_buffer::format_upper_case#5 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_upper_case#10 )
  (signed byte) printf_number_buffer::padding#9 ← phi( printf_number_buffer::@9/(signed byte) printf_number_buffer::padding#13 )
  (byte) printf_number_buffer::format_zero_padding#8 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_zero_padding#14 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  (signed byte) printf_number_buffer::padding#15 ← phi( printf_number_buffer::@18/(signed byte) printf_number_buffer::padding#16 printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_number_buffer::format_justify_left#11 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_justify_left#13 printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#14 )
  (byte) printf_number_buffer::format_zero_padding#16 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_zero_padding#19 printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#3 )
  (byte*) printf_number_buffer::buffer_digits#7 ← phi( printf_number_buffer::@18/(byte*) printf_number_buffer::buffer_digits#8 printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#9 )
  (byte) printf_number_buffer::format_upper_case#2 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_upper_case#3 printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#4 )
  (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#2
  (bool~) printf_number_buffer::$12 ← ! (bool~) printf_number_buffer::$31
  if((bool~) printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  (byte) printf_number_buffer::format_justify_left#18 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#14 )
  (byte) printf_number_buffer::format_zero_padding#21 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#3 )
  (byte*) printf_number_buffer::buffer_digits#12 ← phi( printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#9 )
  (byte) printf_number_buffer::format_upper_case#7 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#4 )
  (signed byte) printf_number_buffer::padding#6 ← phi( printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_padding::pad#1 ← (byte) '0'
  (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  (signed byte) printf_number_buffer::padding#16 ← phi( printf_number_buffer::@10/(signed byte) printf_number_buffer::padding#6 )
  (byte) printf_number_buffer::format_justify_left#13 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_justify_left#18 )
  (byte) printf_number_buffer::format_zero_padding#19 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_zero_padding#21 )
  (byte*) printf_number_buffer::buffer_digits#8 ← phi( printf_number_buffer::@10/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#3 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_upper_case#7 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#11 ← phi( printf_number_buffer::@20/(signed byte) printf_number_buffer::padding#14 printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#7 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_justify_left#10 printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#11 )
  (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_zero_padding#15 printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#16 )
  (byte*) printf_number_buffer::buffer_digits#3 ← phi( printf_number_buffer::@20/(byte*) printf_number_buffer::buffer_digits#6 printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#7 )
  (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#3
  call printf_str 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  (signed byte) printf_number_buffer::padding#7 ← phi( printf_number_buffer::@5/(signed byte) printf_number_buffer::padding#11 )
  (byte) printf_number_buffer::format_justify_left#3 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_justify_left#7 )
  (byte) printf_number_buffer::format_zero_padding#4 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_zero_padding#10 )
  (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#4
  (bool~) printf_number_buffer::$14 ← ! (bool~) printf_number_buffer::$32
  (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#3 && (bool~) printf_number_buffer::$14
  (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#7
  (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
  if((bool~) printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#17 ← phi( printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#15 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#11 )
  (byte) printf_number_buffer::format_zero_padding#20 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#16 )
  (byte*) printf_number_buffer::buffer_digits#4 ← phi( printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#7 )
  (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#4
  call strupr 
  (byte*) strupr::return#2 ← (byte*) strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  (signed byte) printf_number_buffer::padding#14 ← phi( printf_number_buffer::@11/(signed byte) printf_number_buffer::padding#17 )
  (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_justify_left#15 )
  (byte) printf_number_buffer::format_zero_padding#15 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_zero_padding#20 )
  (byte*) printf_number_buffer::buffer_digits#6 ← phi( printf_number_buffer::@11/(byte*) printf_number_buffer::buffer_digits#4 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  (signed byte) printf_number_buffer::padding#8 ← phi( printf_number_buffer::@19/(signed byte) printf_number_buffer::padding#7 )
  (byte) printf_padding::pad#2 ← (byte) ' '
  (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return

(void()) main()
main: scope:[main]  from @2
  call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (signed byte) printf_schar::value#1 ← (number) -$4d
  (byte) printf_schar::format_min_length#0 ← (number) 6
  (byte) printf_schar::format_justify_left#0 ← (number) 0
  (byte) printf_schar::format_sign_always#0 ← (number) 0
  (byte) printf_schar::format_zero_padding#0 ← (number) 0
  (byte) printf_schar::format_upper_case#0 ← (number) 0
  (byte) printf_schar::format_radix#0 ← (const byte) DECIMAL
  call printf_schar 
  to:main::@2
main::@2: scope:[main]  from main::@1
  call printf_ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (signed byte) printf_schar::value#2 ← (number) $63
  (byte) printf_schar::format_min_length#1 ← (number) 6
  (byte) printf_schar::format_justify_left#1 ← (number) 0
  (byte) printf_schar::format_sign_always#1 ← (number) 1
  (byte) printf_schar::format_zero_padding#1 ← (number) 1
  (byte) printf_schar::format_upper_case#1 ← (number) 0
  (byte) printf_schar::format_radix#1 ← (const byte) OCTAL
  call printf_schar 
  to:main::@4
main::@4: scope:[main]  from main::@3
  call printf_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (word) printf_uint::uvalue#0 ← (number) $d80
  (byte) printf_uint::format_min_length#0 ← (number) $a
  (byte) printf_uint::format_justify_left#0 ← (number) 1
  (byte) printf_uint::format_sign_always#0 ← (number) 0
  (byte) printf_uint::format_zero_padding#0 ← (number) 0
  (byte) printf_uint::format_upper_case#0 ← (number) 1
  (byte) printf_uint::format_radix#0 ← (const byte) HEXADECIMAL
  call printf_uint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  call printf_ln 
  to:main::@7
main::@7: scope:[main]  from main::@6
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte) BINARY = (number) 2
(const byte) DECIMAL = (number) $a
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(const byte) OCTAL = (number) 8
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = (byte) 0
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_BINARY_VALUES[]  = { (word) $8000, (word) $4000, (word) $2000, (word) $1000, (word) $800, (word) $400, (word) $200, (word) $100, (word) $80, (word) $40, (word) $20, (word) $10, (word) 8, (word) 4, (word) 2 }
(const byte*) RADIX_BINARY_VALUES_CHAR[]  = { (byte) $80, (byte) $40, (byte) $20, (byte) $10, (byte) 8, (byte) 4, (byte) 2 }
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const byte*) RADIX_DECIMAL_VALUES_CHAR[]  = { (byte) $64, (byte) $a }
(const word*) RADIX_HEXADECIMAL_VALUES[]  = { (word) $1000, (word) $100, (word) $10 }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const word*) RADIX_OCTAL_VALUES[]  = { (word) $8000, (word) $1000, (word) $200, (word) $40, (word) 8 }
(const byte*) RADIX_OCTAL_VALUES_CHAR[]  = { (byte) $40, (byte) 8 }
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(struct printf_buffer_number) printf_buffer loadstore = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(bool~) printf_char::$0
(bool~) printf_char::$1
(label) printf_char::@1
(label) printf_char::@2
(label) printf_char::@return
(byte) printf_char::ch
(byte) printf_char::ch#0
(byte) printf_char::ch#1
(byte) printf_char::ch#2
(byte) printf_char::ch#3
(void()) printf_cls()
(label) printf_cls::@1
(label) printf_cls::@return
(byte*) printf_cursor_ptr loadstore
(byte) printf_cursor_x loadstore
(byte) printf_cursor_y loadstore
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_ln()
(byte*~) printf_ln::$0
(byte*~) printf_ln::$1
(label) printf_ln::@1
(label) printf_ln::@return
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(bool~) printf_number_buffer::$0
(bool~) printf_number_buffer::$1
(bool~) printf_number_buffer::$10
(bool~) printf_number_buffer::$12
(bool~) printf_number_buffer::$14
(bool~) printf_number_buffer::$15
(bool~) printf_number_buffer::$16
(bool~) printf_number_buffer::$17
(word~) printf_number_buffer::$19
(bool~) printf_number_buffer::$2
(bool~) printf_number_buffer::$20
(signed byte~) printf_number_buffer::$21
(bool~) printf_number_buffer::$22
(bool~) printf_number_buffer::$23
(signed byte~) printf_number_buffer::$25
(bool~) printf_number_buffer::$26
(bool~) printf_number_buffer::$27
(bool~) printf_number_buffer::$28
(bool~) printf_number_buffer::$29
(bool~) printf_number_buffer::$3
(bool~) printf_number_buffer::$30
(bool~) printf_number_buffer::$31
(bool~) printf_number_buffer::$32
(bool~) printf_number_buffer::$4
(bool~) printf_number_buffer::$5
(bool~) printf_number_buffer::$7
(bool~) printf_number_buffer::$9
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#0
(byte*) printf_number_buffer::buffer_digits#1
(byte*) printf_number_buffer::buffer_digits#10
(byte*) printf_number_buffer::buffer_digits#11
(byte*) printf_number_buffer::buffer_digits#12
(byte*) printf_number_buffer::buffer_digits#13
(byte*) printf_number_buffer::buffer_digits#14
(byte*) printf_number_buffer::buffer_digits#15
(byte*) printf_number_buffer::buffer_digits#16
(byte*) printf_number_buffer::buffer_digits#17
(byte*) printf_number_buffer::buffer_digits#18
(byte*) printf_number_buffer::buffer_digits#19
(byte*) printf_number_buffer::buffer_digits#2
(byte*) printf_number_buffer::buffer_digits#20
(byte*) printf_number_buffer::buffer_digits#3
(byte*) printf_number_buffer::buffer_digits#4
(byte*) printf_number_buffer::buffer_digits#5
(byte*) printf_number_buffer::buffer_digits#6
(byte*) printf_number_buffer::buffer_digits#7
(byte*) printf_number_buffer::buffer_digits#8
(byte*) printf_number_buffer::buffer_digits#9
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0
(byte) printf_number_buffer::buffer_sign#1
(byte) printf_number_buffer::buffer_sign#10
(byte) printf_number_buffer::buffer_sign#11
(byte) printf_number_buffer::buffer_sign#12
(byte) printf_number_buffer::buffer_sign#2
(byte) printf_number_buffer::buffer_sign#3
(byte) printf_number_buffer::buffer_sign#4
(byte) printf_number_buffer::buffer_sign#5
(byte) printf_number_buffer::buffer_sign#6
(byte) printf_number_buffer::buffer_sign#7
(byte) printf_number_buffer::buffer_sign#8
(byte) printf_number_buffer::buffer_sign#9
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#0
(byte) printf_number_buffer::format_justify_left#1
(byte) printf_number_buffer::format_justify_left#10
(byte) printf_number_buffer::format_justify_left#11
(byte) printf_number_buffer::format_justify_left#12
(byte) printf_number_buffer::format_justify_left#13
(byte) printf_number_buffer::format_justify_left#14
(byte) printf_number_buffer::format_justify_left#15
(byte) printf_number_buffer::format_justify_left#16
(byte) printf_number_buffer::format_justify_left#17
(byte) printf_number_buffer::format_justify_left#18
(byte) printf_number_buffer::format_justify_left#19
(byte) printf_number_buffer::format_justify_left#2
(byte) printf_number_buffer::format_justify_left#20
(byte) printf_number_buffer::format_justify_left#21
(byte) printf_number_buffer::format_justify_left#3
(byte) printf_number_buffer::format_justify_left#4
(byte) printf_number_buffer::format_justify_left#5
(byte) printf_number_buffer::format_justify_left#6
(byte) printf_number_buffer::format_justify_left#7
(byte) printf_number_buffer::format_justify_left#8
(byte) printf_number_buffer::format_justify_left#9
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#0
(byte) printf_number_buffer::format_min_length#1
(byte) printf_number_buffer::format_min_length#2
(byte) printf_number_buffer::format_min_length#3
(byte) printf_number_buffer::format_min_length#4
(byte) printf_number_buffer::format_min_length#5
(byte) printf_number_buffer::format_min_length#6
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_radix#0
(byte) printf_number_buffer::format_radix#1
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_sign_always#0
(byte) printf_number_buffer::format_sign_always#1
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#0
(byte) printf_number_buffer::format_upper_case#1
(byte) printf_number_buffer::format_upper_case#10
(byte) printf_number_buffer::format_upper_case#11
(byte) printf_number_buffer::format_upper_case#12
(byte) printf_number_buffer::format_upper_case#13
(byte) printf_number_buffer::format_upper_case#14
(byte) printf_number_buffer::format_upper_case#15
(byte) printf_number_buffer::format_upper_case#16
(byte) printf_number_buffer::format_upper_case#17
(byte) printf_number_buffer::format_upper_case#2
(byte) printf_number_buffer::format_upper_case#3
(byte) printf_number_buffer::format_upper_case#4
(byte) printf_number_buffer::format_upper_case#5
(byte) printf_number_buffer::format_upper_case#6
(byte) printf_number_buffer::format_upper_case#7
(byte) printf_number_buffer::format_upper_case#8
(byte) printf_number_buffer::format_upper_case#9
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#0
(byte) printf_number_buffer::format_zero_padding#1
(byte) printf_number_buffer::format_zero_padding#10
(byte) printf_number_buffer::format_zero_padding#11
(byte) printf_number_buffer::format_zero_padding#12
(byte) printf_number_buffer::format_zero_padding#13
(byte) printf_number_buffer::format_zero_padding#14
(byte) printf_number_buffer::format_zero_padding#15
(byte) printf_number_buffer::format_zero_padding#16
(byte) printf_number_buffer::format_zero_padding#17
(byte) printf_number_buffer::format_zero_padding#18
(byte) printf_number_buffer::format_zero_padding#19
(byte) printf_number_buffer::format_zero_padding#2
(byte) printf_number_buffer::format_zero_padding#20
(byte) printf_number_buffer::format_zero_padding#21
(byte) printf_number_buffer::format_zero_padding#3
(byte) printf_number_buffer::format_zero_padding#4
(byte) printf_number_buffer::format_zero_padding#5
(byte) printf_number_buffer::format_zero_padding#6
(byte) printf_number_buffer::format_zero_padding#7
(byte) printf_number_buffer::format_zero_padding#8
(byte) printf_number_buffer::format_zero_padding#9
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0
(signed byte) printf_number_buffer::len#1
(signed byte) printf_number_buffer::len#2
(signed byte) printf_number_buffer::len#3
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#0
(signed byte) printf_number_buffer::padding#1
(signed byte) printf_number_buffer::padding#10
(signed byte) printf_number_buffer::padding#11
(signed byte) printf_number_buffer::padding#12
(signed byte) printf_number_buffer::padding#13
(signed byte) printf_number_buffer::padding#14
(signed byte) printf_number_buffer::padding#15
(signed byte) printf_number_buffer::padding#16
(signed byte) printf_number_buffer::padding#17
(signed byte) printf_number_buffer::padding#2
(signed byte) printf_number_buffer::padding#3
(signed byte) printf_number_buffer::padding#4
(signed byte) printf_number_buffer::padding#5
(signed byte) printf_number_buffer::padding#6
(signed byte) printf_number_buffer::padding#7
(signed byte) printf_number_buffer::padding#8
(signed byte) printf_number_buffer::padding#9
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(bool~) printf_padding::$0
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#0
(byte) printf_padding::i#1
(byte) printf_padding::i#2
(byte) printf_padding::i#3
(byte) printf_padding::i#4
(byte) printf_padding::length
(byte) printf_padding::length#0
(byte) printf_padding::length#1
(byte) printf_padding::length#2
(byte) printf_padding::length#3
(byte) printf_padding::length#4
(byte) printf_padding::length#5
(byte) printf_padding::length#6
(byte) printf_padding::pad
(byte) printf_padding::pad#0
(byte) printf_padding::pad#1
(byte) printf_padding::pad#2
(byte) printf_padding::pad#3
(byte) printf_padding::pad#4
(byte) printf_padding::pad#5
(byte) printf_padding::pad#6
(void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
(bool~) printf_schar::$0
(bool~) printf_schar::$3
(signed byte~) printf_schar::$4
(bool~) printf_schar::$5
(label) printf_schar::@1
(label) printf_schar::@2
(label) printf_schar::@3
(label) printf_schar::@4
(label) printf_schar::@5
(label) printf_schar::@6
(label) printf_schar::@return
(struct printf_format_number) printf_schar::format
(byte) printf_schar::format_justify_left
(byte) printf_schar::format_justify_left#0
(byte) printf_schar::format_justify_left#1
(byte) printf_schar::format_justify_left#2
(byte) printf_schar::format_justify_left#3
(byte) printf_schar::format_justify_left#4
(byte) printf_schar::format_justify_left#5
(byte) printf_schar::format_justify_left#6
(byte) printf_schar::format_justify_left#7
(byte) printf_schar::format_min_length
(byte) printf_schar::format_min_length#0
(byte) printf_schar::format_min_length#1
(byte) printf_schar::format_min_length#2
(byte) printf_schar::format_min_length#3
(byte) printf_schar::format_min_length#4
(byte) printf_schar::format_min_length#5
(byte) printf_schar::format_min_length#6
(byte) printf_schar::format_min_length#7
(byte) printf_schar::format_radix
(byte) printf_schar::format_radix#0
(byte) printf_schar::format_radix#1
(byte) printf_schar::format_radix#2
(byte) printf_schar::format_radix#3
(byte) printf_schar::format_radix#4
(byte) printf_schar::format_radix#5
(byte) printf_schar::format_radix#6
(byte) printf_schar::format_radix#7
(byte) printf_schar::format_sign_always
(byte) printf_schar::format_sign_always#0
(byte) printf_schar::format_sign_always#1
(byte) printf_schar::format_sign_always#2
(byte) printf_schar::format_sign_always#3
(byte) printf_schar::format_sign_always#4
(byte) printf_schar::format_sign_always#5
(byte) printf_schar::format_sign_always#6
(byte) printf_schar::format_sign_always#7
(byte) printf_schar::format_upper_case
(byte) printf_schar::format_upper_case#0
(byte) printf_schar::format_upper_case#1
(byte) printf_schar::format_upper_case#2
(byte) printf_schar::format_upper_case#3
(byte) printf_schar::format_upper_case#4
(byte) printf_schar::format_upper_case#5
(byte) printf_schar::format_upper_case#6
(byte) printf_schar::format_upper_case#7
(byte) printf_schar::format_zero_padding
(byte) printf_schar::format_zero_padding#0
(byte) printf_schar::format_zero_padding#1
(byte) printf_schar::format_zero_padding#2
(byte) printf_schar::format_zero_padding#3
(byte) printf_schar::format_zero_padding#4
(byte) printf_schar::format_zero_padding#5
(byte) printf_schar::format_zero_padding#6
(byte) printf_schar::format_zero_padding#7
(byte) printf_schar::uvalue
(byte) printf_schar::uvalue#0
(signed byte) printf_schar::value
(signed byte) printf_schar::value#0
(signed byte) printf_schar::value#1
(signed byte) printf_schar::value#2
(signed byte) printf_schar::value#3
(signed byte) printf_schar::value#4
(signed byte) printf_schar::value#5
(signed byte) printf_schar::value#6
(signed byte) printf_schar::value#7
(void()) printf_scroll()
(bool~) printf_scroll::$0
(bool~) printf_scroll::$1
(byte*~) printf_scroll::$4
(label) printf_scroll::@1
(label) printf_scroll::@2
(label) printf_scroll::@3
(label) printf_scroll::@return
(void()) printf_str((byte*) printf_str::str)
(bool~) printf_str::$0
(bool~) printf_str::$1
(bool~) printf_str::$2
(label) printf_str::@1
(label) printf_str::@2
(label) printf_str::@3
(label) printf_str::@4
(label) printf_str::@5
(label) printf_str::@6
(label) printf_str::@7
(label) printf_str::@return
(byte) printf_str::ch
(byte) printf_str::ch#0
(byte) printf_str::ch#1
(byte) printf_str::ch#2
(byte*) printf_str::str
(byte*) printf_str::str#0
(byte*) printf_str::str#1
(byte*) printf_str::str#2
(byte*) printf_str::str#3
(byte*) printf_str::str#4
(byte*) printf_str::str#5
(byte*) printf_str::str#6
(byte*) printf_str::str#7
(byte*) printf_str::str#8
(byte*) printf_str::str#9
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(number~) printf_uint::$0
(byte~) printf_uint::$1
(number~) printf_uint::$2
(bool~) printf_uint::$5
(label) printf_uint::@1
(label) printf_uint::@2
(label) printf_uint::@3
(label) printf_uint::@4
(label) printf_uint::@5
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_justify_left#0
(byte) printf_uint::format_justify_left#1
(byte) printf_uint::format_justify_left#2
(byte) printf_uint::format_justify_left#3
(byte) printf_uint::format_justify_left#4
(byte) printf_uint::format_justify_left#5
(byte) printf_uint::format_min_length
(byte) printf_uint::format_min_length#0
(byte) printf_uint::format_min_length#1
(byte) printf_uint::format_min_length#2
(byte) printf_uint::format_min_length#3
(byte) printf_uint::format_min_length#4
(byte) printf_uint::format_min_length#5
(byte) printf_uint::format_radix
(byte) printf_uint::format_radix#0
(byte) printf_uint::format_radix#1
(byte) printf_uint::format_radix#2
(byte) printf_uint::format_radix#3
(byte) printf_uint::format_radix#4
(byte) printf_uint::format_radix#5
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_sign_always#0
(byte) printf_uint::format_sign_always#1
(byte) printf_uint::format_sign_always#2
(byte) printf_uint::format_sign_always#3
(byte) printf_uint::format_sign_always#4
(byte) printf_uint::format_sign_always#5
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_upper_case#0
(byte) printf_uint::format_upper_case#1
(byte) printf_uint::format_upper_case#2
(byte) printf_uint::format_upper_case#3
(byte) printf_uint::format_upper_case#4
(byte) printf_uint::format_upper_case#5
(byte) printf_uint::format_zero_padding
(byte) printf_uint::format_zero_padding#0
(byte) printf_uint::format_zero_padding#1
(byte) printf_uint::format_zero_padding#2
(byte) printf_uint::format_zero_padding#3
(byte) printf_uint::format_zero_padding#4
(byte) printf_uint::format_zero_padding#5
(word) printf_uint::uvalue
(word) printf_uint::uvalue#0
(word) printf_uint::uvalue#1
(word) printf_uint::uvalue#2
(word) printf_uint::uvalue#3
(word) printf_uint::uvalue#4
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0
(bool~) strupr::$1
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@4
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::return#0
(byte*) strupr::return#1
(byte*) strupr::return#2
(byte*) strupr::return#3
(byte*) strupr::src
(byte*) strupr::src#0
(byte*) strupr::src#1
(byte*) strupr::src#2
(byte*) strupr::src#3
(byte*) strupr::src#4
(byte*) strupr::str
(byte*) strupr::str#0
(byte*) strupr::str#1
(byte*) strupr::str#2
(byte*) strupr::str#3
(byte*) strupr::str#4
(byte*) strupr::str#5
(byte()) toupper((byte) toupper::ch)
(bool~) toupper::$0
(bool~) toupper::$1
(bool~) toupper::$2
(byte~) toupper::$3
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0
(byte) toupper::ch#1
(byte) toupper::ch#2
(byte) toupper::ch#3
(byte) toupper::return
(byte) toupper::return#0
(byte) toupper::return#1
(byte) toupper::return#2
(byte) toupper::return#3
(byte) toupper::return#4
(byte) toupper::return#5
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(bool~) uctoa::$0
(bool~) uctoa::$1
(byte~) uctoa::$10
(bool~) uctoa::$2
(bool~) uctoa::$3
(number~) uctoa::$4
(bool~) uctoa::$5
(bool~) uctoa::$6
(bool~) uctoa::$7
(bool~) uctoa::$8
(byte~) uctoa::$9
(label) uctoa::@1
(label) uctoa::@10
(label) uctoa::@11
(label) uctoa::@12
(label) uctoa::@13
(label) uctoa::@14
(label) uctoa::@15
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@8
(label) uctoa::@9
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#0
(byte*) uctoa::buffer#1
(byte*) uctoa::buffer#10
(byte*) uctoa::buffer#11
(byte*) uctoa::buffer#12
(byte*) uctoa::buffer#13
(byte*) uctoa::buffer#14
(byte*) uctoa::buffer#15
(byte*) uctoa::buffer#16
(byte*) uctoa::buffer#17
(byte*) uctoa::buffer#18
(byte*) uctoa::buffer#19
(byte*) uctoa::buffer#2
(byte*) uctoa::buffer#20
(byte*) uctoa::buffer#21
(byte*) uctoa::buffer#3
(byte*) uctoa::buffer#4
(byte*) uctoa::buffer#5
(byte*) uctoa::buffer#6
(byte*) uctoa::buffer#7
(byte*) uctoa::buffer#8
(byte*) uctoa::buffer#9
(byte) uctoa::digit
(byte) uctoa::digit#0
(byte) uctoa::digit#1
(byte) uctoa::digit#2
(byte) uctoa::digit#3
(byte) uctoa::digit#4
(byte) uctoa::digit#5
(byte) uctoa::digit#6
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0
(byte) uctoa::digit_value#1
(byte*) uctoa::digit_values
(byte*) uctoa::digit_values#0
(byte*) uctoa::digit_values#1
(byte*) uctoa::digit_values#10
(byte*) uctoa::digit_values#2
(byte*) uctoa::digit_values#3
(byte*) uctoa::digit_values#4
(byte*) uctoa::digit_values#5
(byte*) uctoa::digit_values#6
(byte*) uctoa::digit_values#7
(byte*) uctoa::digit_values#8
(byte*) uctoa::digit_values#9
(byte) uctoa::max_digits
(byte) uctoa::max_digits#0
(byte) uctoa::max_digits#1
(byte) uctoa::max_digits#10
(byte) uctoa::max_digits#2
(byte) uctoa::max_digits#3
(byte) uctoa::max_digits#4
(byte) uctoa::max_digits#5
(byte) uctoa::max_digits#6
(byte) uctoa::max_digits#7
(byte) uctoa::max_digits#8
(byte) uctoa::max_digits#9
(byte) uctoa::radix
(byte) uctoa::radix#0
(byte) uctoa::radix#1
(byte) uctoa::radix#2
(byte) uctoa::radix#3
(byte) uctoa::radix#4
(byte) uctoa::started
(byte) uctoa::started#0
(byte) uctoa::started#1
(byte) uctoa::started#2
(byte) uctoa::started#3
(byte) uctoa::started#4
(byte) uctoa::value
(byte) uctoa::value#0
(byte) uctoa::value#1
(byte) uctoa::value#10
(byte) uctoa::value#11
(byte) uctoa::value#12
(byte) uctoa::value#13
(byte) uctoa::value#14
(byte) uctoa::value#15
(byte) uctoa::value#2
(byte) uctoa::value#3
(byte) uctoa::value#4
(byte) uctoa::value#5
(byte) uctoa::value#6
(byte) uctoa::value#7
(byte) uctoa::value#8
(byte) uctoa::value#9
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(bool~) uctoa_append::$0
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0
(byte*) uctoa_append::buffer#1
(byte*) uctoa_append::buffer#2
(byte*) uctoa_append::buffer#3
(byte*) uctoa_append::buffer#4
(byte) uctoa_append::digit
(byte) uctoa_append::digit#0
(byte) uctoa_append::digit#1
(byte) uctoa_append::digit#2
(byte) uctoa_append::digit#3
(byte) uctoa_append::digit#4
(byte) uctoa_append::return
(byte) uctoa_append::return#0
(byte) uctoa_append::return#1
(byte) uctoa_append::return#2
(byte) uctoa_append::return#3
(byte) uctoa_append::return#4
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0
(byte) uctoa_append::sub#1
(byte) uctoa_append::sub#2
(byte) uctoa_append::sub#3
(byte) uctoa_append::value
(byte) uctoa_append::value#0
(byte) uctoa_append::value#1
(byte) uctoa_append::value#2
(byte) uctoa_append::value#3
(byte) uctoa_append::value#4
(byte) uctoa_append::value#5
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(bool~) utoa::$0
(bool~) utoa::$1
(byte~) utoa::$10
(byte~) utoa::$11
(bool~) utoa::$2
(bool~) utoa::$3
(number~) utoa::$4
(bool~) utoa::$5
(bool~) utoa::$6
(bool~) utoa::$7
(bool~) utoa::$8
(word~) utoa::$9
(label) utoa::@1
(label) utoa::@10
(label) utoa::@11
(label) utoa::@12
(label) utoa::@13
(label) utoa::@14
(label) utoa::@15
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@8
(label) utoa::@9
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#0
(byte*) utoa::buffer#1
(byte*) utoa::buffer#10
(byte*) utoa::buffer#11
(byte*) utoa::buffer#12
(byte*) utoa::buffer#13
(byte*) utoa::buffer#14
(byte*) utoa::buffer#15
(byte*) utoa::buffer#16
(byte*) utoa::buffer#17
(byte*) utoa::buffer#18
(byte*) utoa::buffer#19
(byte*) utoa::buffer#2
(byte*) utoa::buffer#20
(byte*) utoa::buffer#21
(byte*) utoa::buffer#3
(byte*) utoa::buffer#4
(byte*) utoa::buffer#5
(byte*) utoa::buffer#6
(byte*) utoa::buffer#7
(byte*) utoa::buffer#8
(byte*) utoa::buffer#9
(byte) utoa::digit
(byte) utoa::digit#0
(byte) utoa::digit#1
(byte) utoa::digit#2
(byte) utoa::digit#3
(byte) utoa::digit#4
(byte) utoa::digit#5
(byte) utoa::digit#6
(word) utoa::digit_value
(word) utoa::digit_value#0
(word) utoa::digit_value#1
(word*) utoa::digit_values
(word*) utoa::digit_values#0
(word*) utoa::digit_values#1
(word*) utoa::digit_values#10
(word*) utoa::digit_values#2
(word*) utoa::digit_values#3
(word*) utoa::digit_values#4
(word*) utoa::digit_values#5
(word*) utoa::digit_values#6
(word*) utoa::digit_values#7
(word*) utoa::digit_values#8
(word*) utoa::digit_values#9
(byte) utoa::max_digits
(byte) utoa::max_digits#0
(byte) utoa::max_digits#1
(byte) utoa::max_digits#10
(byte) utoa::max_digits#2
(byte) utoa::max_digits#3
(byte) utoa::max_digits#4
(byte) utoa::max_digits#5
(byte) utoa::max_digits#6
(byte) utoa::max_digits#7
(byte) utoa::max_digits#8
(byte) utoa::max_digits#9
(byte) utoa::radix
(byte) utoa::radix#0
(byte) utoa::radix#1
(byte) utoa::radix#2
(byte) utoa::radix#3
(byte) utoa::radix#4
(byte) utoa::started
(byte) utoa::started#0
(byte) utoa::started#1
(byte) utoa::started#2
(byte) utoa::started#3
(byte) utoa::started#4
(word) utoa::value
(word) utoa::value#0
(word) utoa::value#1
(word) utoa::value#10
(word) utoa::value#11
(word) utoa::value#12
(word) utoa::value#13
(word) utoa::value#14
(word) utoa::value#15
(word) utoa::value#2
(word) utoa::value#3
(word) utoa::value#4
(word) utoa::value#5
(word) utoa::value#6
(word) utoa::value#7
(word) utoa::value#8
(word) utoa::value#9
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(bool~) utoa_append::$0
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0
(byte*) utoa_append::buffer#1
(byte*) utoa_append::buffer#2
(byte*) utoa_append::buffer#3
(byte*) utoa_append::buffer#4
(byte) utoa_append::digit
(byte) utoa_append::digit#0
(byte) utoa_append::digit#1
(byte) utoa_append::digit#2
(byte) utoa_append::digit#3
(byte) utoa_append::digit#4
(word) utoa_append::return
(word) utoa_append::return#0
(word) utoa_append::return#1
(word) utoa_append::return#2
(word) utoa_append::return#3
(word) utoa_append::return#4
(word) utoa_append::sub
(word) utoa_append::sub#0
(word) utoa_append::sub#1
(word) utoa_append::sub#2
(word) utoa_append::sub#3
(word) utoa_append::value
(word) utoa_append::value#0
(word) utoa_append::value#1
(word) utoa_append::value#2
(word) utoa_append::value#3
(word) utoa_append::value#4
(word) utoa_append::value#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#1 ← (number) 3
Adding number conversion cast (unumber) 2 in (byte) uctoa::max_digits#2 ← (number) 2
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#3 ← (number) 3
Adding number conversion cast (unumber) 8 in (byte) uctoa::max_digits#4 ← (number) 8
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) uctoa::$4 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) uctoa::started#1 ← (number) 1
Adding number conversion cast (unumber) 5 in (byte) utoa::max_digits#1 ← (number) 5
Adding number conversion cast (unumber) 4 in (byte) utoa::max_digits#2 ← (number) 4
Adding number conversion cast (unumber) 6 in (byte) utoa::max_digits#3 ← (number) 6
Adding number conversion cast (unumber) $10 in (byte) utoa::max_digits#4 ← (number) $10
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) utoa::$4 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) utoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $28*$19 in (word) memset::num#0 ← (number) $28*(number) $19
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_x ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_y ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) printf_char::$0 ← (byte) printf_cursor_x == (number) $28
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_x ← (number) 0
Adding number conversion cast (unumber) $28 in (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (number) $28
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) printf_scroll::$0 ← (byte) printf_cursor_y == (number) $19
Adding number conversion cast (unumber) $28*$19-$28 in (word) memcpy::num#0 ← (number) $28*(number) $19-(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (number) $28
Adding number conversion cast (unumber) 0 in (bool~) printf_str::$0 ← (byte) printf_str::ch#0 == (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_uint::$5 ← (number) 0 != (byte) printf_uint::format_sign_always#1
Adding number conversion cast (unumber) printf_uint::$2 in (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (number~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
Adding number conversion cast (unumber) printf_uint::$0 in (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (unumber~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
Adding number conversion cast (unumber) 0 in *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number) 0
Adding number conversion cast (snumber) 0 in (bool~) printf_schar::$0 ← (signed byte) printf_schar::value#3 < (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_schar::$5 ← (number) 0 != (byte) printf_schar::format_sign_always#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#2
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_number_buffer::padding#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#4
Adding number conversion cast (snumber) -$4d in (signed byte) printf_schar::value#1 ← (number) -$4d
Adding number conversion cast (unumber) 6 in (byte) printf_schar::format_min_length#0 ← (number) 6
Adding number conversion cast (unumber) 0 in (byte) printf_schar::format_justify_left#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) printf_schar::format_sign_always#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) printf_schar::format_zero_padding#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) printf_schar::format_upper_case#0 ← (number) 0
Adding number conversion cast (snumber) $63 in (signed byte) printf_schar::value#2 ← (number) $63
Adding number conversion cast (unumber) 6 in (byte) printf_schar::format_min_length#1 ← (number) 6
Adding number conversion cast (unumber) 0 in (byte) printf_schar::format_justify_left#1 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) printf_schar::format_sign_always#1 ← (number) 1
Adding number conversion cast (unumber) 1 in (byte) printf_schar::format_zero_padding#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) printf_schar::format_upper_case#1 ← (number) 0
Adding number conversion cast (unumber) $d80 in (word) printf_uint::uvalue#0 ← (number) $d80
Adding number conversion cast (unumber) $a in (byte) printf_uint::format_min_length#0 ← (number) $a
Adding number conversion cast (unumber) 1 in (byte) printf_uint::format_justify_left#0 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) printf_uint::format_sign_always#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) printf_uint::format_zero_padding#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) printf_uint::format_upper_case#0 ← (number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in (unumber~) printf_uint::$0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#1
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#1
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) uctoa::max_digits#1 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#2 ← (unumber)(number) 2
Inlining cast (byte) uctoa::max_digits#3 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#4 ← (unumber)(number) 8
Inlining cast *((byte*) uctoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) uctoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) uctoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) utoa::max_digits#1 ← (unumber)(number) 5
Inlining cast (byte) utoa::max_digits#2 ← (unumber)(number) 4
Inlining cast (byte) utoa::max_digits#3 ← (unumber)(number) 6
Inlining cast (byte) utoa::max_digits#4 ← (unumber)(number) $10
Inlining cast *((byte*) utoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) utoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) utoa::started#1 ← (unumber)(number) 1
Inlining cast (word) memset::num#0 ← (unumber)(number) $28*(number) $19
Inlining cast (byte*) printf_cursor_ptr ← (byte*)(number) $400
Inlining cast (byte) printf_cursor_x ← (unumber)(number) 0
Inlining cast (byte) printf_cursor_y ← (unumber)(number) 0
Inlining cast (byte) printf_cursor_x ← (unumber)(number) 0
Inlining cast (byte) printf_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $28*(number) $19-(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (unumber~) printf_uint::$0 ← (unumber)(number) 0
Inlining cast *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (unumber)(number) 0
Inlining cast (signed byte) printf_number_buffer::padding#2 ← (snumber)(number) 0
Inlining cast (signed byte) printf_schar::value#1 ← (snumber)(number) -$4d
Inlining cast (byte) printf_schar::format_min_length#0 ← (unumber)(number) 6
Inlining cast (byte) printf_schar::format_justify_left#0 ← (unumber)(number) 0
Inlining cast (byte) printf_schar::format_sign_always#0 ← (unumber)(number) 0
Inlining cast (byte) printf_schar::format_zero_padding#0 ← (unumber)(number) 0
Inlining cast (byte) printf_schar::format_upper_case#0 ← (unumber)(number) 0
Inlining cast (signed byte) printf_schar::value#2 ← (snumber)(number) $63
Inlining cast (byte) printf_schar::format_min_length#1 ← (unumber)(number) 6
Inlining cast (byte) printf_schar::format_justify_left#1 ← (unumber)(number) 0
Inlining cast (byte) printf_schar::format_sign_always#1 ← (unumber)(number) 1
Inlining cast (byte) printf_schar::format_zero_padding#1 ← (unumber)(number) 1
Inlining cast (byte) printf_schar::format_upper_case#1 ← (unumber)(number) 0
Inlining cast (word) printf_uint::uvalue#0 ← (unumber)(number) $d80
Inlining cast (byte) printf_uint::format_min_length#0 ← (unumber)(number) $a
Inlining cast (byte) printf_uint::format_justify_left#0 ← (unumber)(number) 1
Inlining cast (byte) printf_uint::format_sign_always#0 ← (unumber)(number) 0
Inlining cast (byte) printf_uint::format_zero_padding#0 ← (unumber)(number) 0
Inlining cast (byte) printf_uint::format_upper_case#0 ← (unumber)(number) 1
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) uctoa::value#3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (void*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant pointer cast (void*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast -$4d
Simplifying constant integer cast 6
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $63
Simplifying constant integer cast 6
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $d80
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) -$4d
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) $63
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $d80
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) utoa::$4 ← (byte) utoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) printf_uint::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_uint::$2
Inversing boolean not [33] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [32] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [260] (bool~) printf_char::$1 ← (byte) printf_cursor_x != (byte) $28 from [259] (bool~) printf_char::$0 ← (byte) printf_cursor_x == (byte) $28
Inversing boolean not [274] (bool~) printf_scroll::$1 ← (byte) printf_cursor_y != (byte) $19 from [273] (bool~) printf_scroll::$0 ← (byte) printf_cursor_y == (byte) $19
Inversing boolean not [308] (bool~) printf_str::$1 ← (byte) printf_str::ch#0 != (byte) 0 from [307] (bool~) printf_str::$0 ← (byte) printf_str::ch#0 == (byte) 0
Inversing boolean not [355] (bool~) printf_schar::$3 ← (byte) 0 == (byte) printf_schar::format_sign_always#2 from [354] (bool~) printf_schar::$5 ← (byte) 0 != (byte) printf_schar::format_sign_always#2
Inversing boolean not [379] (bool~) printf_number_buffer::$0 ← (byte) 0 == (byte) printf_number_buffer::format_min_length#2 from [378] (bool~) printf_number_buffer::$26 ← (byte) 0 != (byte) printf_number_buffer::format_min_length#2
Inversing boolean not [383] (bool~) printf_number_buffer::$1 ← (byte) 0 == (byte) printf_number_buffer::format_justify_left#2 from [382] (bool~) printf_number_buffer::$27 ← (byte) 0 != (byte) printf_number_buffer::format_justify_left#2
Inversing boolean not [385] (bool~) printf_number_buffer::$2 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#2 from [384] (bool~) printf_number_buffer::$28 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#2
Inversing boolean not [398] (bool~) printf_number_buffer::$20 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#2 from [397] (bool~) printf_number_buffer::$29 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#2
Inversing boolean not [405] (bool~) printf_number_buffer::$23 ← (signed byte) printf_number_buffer::padding#1 >= (signed byte) 0 from [404] (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (signed byte) 0
Inversing boolean not [413] (bool~) printf_number_buffer::$7 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#3 from [412] (bool~) printf_number_buffer::$30 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#3
Inversing boolean not [430] (bool~) printf_number_buffer::$12 ← (byte) 0 == (byte) printf_number_buffer::format_upper_case#2 from [429] (bool~) printf_number_buffer::$31 ← (byte) 0 != (byte) printf_number_buffer::format_upper_case#2
Inversing boolean not [442] (bool~) printf_number_buffer::$14 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#4 from [441] (bool~) printf_number_buffer::$32 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#4
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#2 = memcpy::destination#4 memcpy::destination#3 memcpy::return#0 memcpy::return#3 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias uctoa::value#10 = uctoa::value#8 uctoa::value#12 uctoa::value#13 uctoa::value#9 uctoa::value#14 uctoa::value#15 uctoa::value#11 
Alias uctoa::buffer#10 = uctoa::buffer#17 uctoa::buffer#21 uctoa::buffer#16 uctoa::buffer#18 uctoa::buffer#13 uctoa::buffer#19 uctoa::buffer#20 uctoa::buffer#6 
Alias uctoa::radix#1 = uctoa::radix#2 uctoa::radix#3 uctoa::radix#4 
Alias uctoa::digit_values#10 = uctoa::digit_values#5 uctoa::digit_values#6 uctoa::digit_values#9 
Alias uctoa::digit#2 = uctoa::digit#3 uctoa::digit#6 uctoa::digit#5 
Alias uctoa::value#2 = uctoa::value#5 uctoa::value#3 uctoa::$10 uctoa::value#4 
Alias uctoa::started#2 = uctoa::started#3 
Alias uctoa::buffer#11 = uctoa::buffer#12 uctoa::buffer#7 uctoa::buffer#8 uctoa::buffer#9 
Alias uctoa::max_digits#10 = uctoa::max_digits#8 uctoa::max_digits#5 uctoa::max_digits#9 
Alias uctoa::digit_value#0 = uctoa::digit_value#1 
Alias uctoa_append::return#0 = uctoa_append::return#3 
Alias uctoa::value#0 = uctoa::$9 
Alias uctoa_append::digit#2 = uctoa_append::digit#4 uctoa_append::digit#3 
Alias uctoa_append::value#2 = uctoa_append::value#3 uctoa_append::value#4 uctoa_append::return#1 uctoa_append::return#4 uctoa_append::return#2 
Alias uctoa_append::sub#1 = uctoa_append::sub#2 
Alias uctoa_append::buffer#1 = uctoa_append::buffer#4 uctoa_append::buffer#2 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias printf_padding::pad#3 = printf_padding::pad#4 printf_padding::pad#6 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#3 = printf_padding::length#6 printf_padding::length#5 
Alias printf_str::str#2 = printf_str::str#3 
Alias printf_str::ch#0 = printf_str::ch#1 printf_str::ch#2 
Alias printf_str::str#0 = printf_str::str#9 printf_str::str#7 printf_str::str#5 printf_str::str#8 printf_str::str#6 
Alias printf_uint::uvalue#2 = printf_uint::uvalue#4 printf_uint::uvalue#3 
Alias printf_uint::format_radix#3 = printf_uint::format_radix#5 printf_uint::format_radix#4 
Alias printf_uint::format_min_length#3 = printf_uint::format_min_length#5 printf_uint::format_min_length#4 
Alias printf_uint::format_justify_left#3 = printf_uint::format_justify_left#5 printf_uint::format_justify_left#4 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#4 printf_uint::format_sign_always#5 
Alias printf_uint::format_zero_padding#3 = printf_uint::format_zero_padding#5 printf_uint::format_zero_padding#4 
Alias printf_uint::format_upper_case#3 = printf_uint::format_upper_case#5 printf_uint::format_upper_case#4 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#2 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#2 
Alias printf_uint::format_sign_always#2 = printf_uint::format_sign_always#3 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#2 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#2 
Alias printf_schar::value#3 = printf_schar::value#4 printf_schar::value#6 printf_schar::value#7 
Alias printf_schar::format_radix#4 = printf_schar::format_radix#7 printf_schar::format_radix#5 printf_schar::format_radix#6 
Alias printf_schar::format_min_length#4 = printf_schar::format_min_length#7 printf_schar::format_min_length#5 printf_schar::format_min_length#6 
Alias printf_schar::format_justify_left#4 = printf_schar::format_justify_left#7 printf_schar::format_justify_left#5 printf_schar::format_justify_left#6 
Alias printf_schar::format_sign_always#2 = printf_schar::format_sign_always#6 printf_schar::format_sign_always#4 printf_schar::format_sign_always#7 
Alias printf_schar::format_zero_padding#4 = printf_schar::format_zero_padding#7 printf_schar::format_zero_padding#5 printf_schar::format_zero_padding#6 
Alias printf_schar::format_upper_case#4 = printf_schar::format_upper_case#7 printf_schar::format_upper_case#5 printf_schar::format_upper_case#6 
Alias printf_schar::value#0 = printf_schar::$4 
Alias printf_schar::format_min_length#2 = printf_schar::format_min_length#3 
Alias printf_schar::format_justify_left#2 = printf_schar::format_justify_left#3 
Alias printf_schar::format_sign_always#3 = printf_schar::format_sign_always#5 
Alias printf_schar::format_zero_padding#2 = printf_schar::format_zero_padding#3 
Alias printf_schar::format_upper_case#2 = printf_schar::format_upper_case#3 
Alias printf_schar::format_radix#2 = printf_schar::format_radix#3 
Alias printf_number_buffer::buffer_digits#19 = printf_number_buffer::buffer_digits#2 printf_number_buffer::buffer_digits#5 printf_number_buffer::buffer_digits#20 
Alias printf_number_buffer::buffer_sign#12 = printf_number_buffer::buffer_sign#5 printf_number_buffer::buffer_sign#8 printf_number_buffer::buffer_sign#2 
Alias printf_number_buffer::format_min_length#2 = printf_number_buffer::format_min_length#6 printf_number_buffer::format_min_length#4 printf_number_buffer::format_min_length#5 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#4 printf_number_buffer::format_justify_left#8 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::format_zero_padding#11 = printf_number_buffer::format_zero_padding#17 printf_number_buffer::format_zero_padding#5 printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#17 printf_number_buffer::format_upper_case#15 printf_number_buffer::format_upper_case#16 
Alias strlen::return#2 = strlen::return#4 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#5 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::format_zero_padding#6 = printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#9 
Alias printf_number_buffer::format_upper_case#12 = printf_number_buffer::format_upper_case#13 
Alias printf_number_buffer::buffer_digits#16 = printf_number_buffer::buffer_digits#17 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#11 = printf_number_buffer::buffer_sign#6 printf_number_buffer::buffer_sign#7 
Alias printf_number_buffer::format_zero_padding#13 = printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#2 
Alias printf_number_buffer::format_upper_case#14 = printf_number_buffer::format_upper_case#8 printf_number_buffer::format_upper_case#9 
Alias printf_number_buffer::buffer_digits#13 = printf_number_buffer::buffer_digits#18 printf_number_buffer::buffer_digits#14 
Alias printf_number_buffer::format_justify_left#19 = printf_number_buffer::format_justify_left#21 printf_number_buffer::format_justify_left#2 
Alias printf_number_buffer::buffer_sign#3 = printf_number_buffer::buffer_sign#4 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#9 printf_number_buffer::format_zero_padding#8 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#6 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#15 printf_number_buffer::buffer_digits#11 
Alias printf_number_buffer::format_justify_left#16 = printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#17 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#3 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#4 
Alias printf_number_buffer::buffer_digits#12 = printf_number_buffer::buffer_digits#9 printf_number_buffer::buffer_digits#8 
Alias printf_number_buffer::format_zero_padding#19 = printf_number_buffer::format_zero_padding#21 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::format_justify_left#13 = printf_number_buffer::format_justify_left#18 printf_number_buffer::format_justify_left#14 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#4 
Alias printf_number_buffer::format_justify_left#3 = printf_number_buffer::format_justify_left#7 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#4 = printf_number_buffer::buffer_digits#7 printf_number_buffer::buffer_digits#6 
Alias printf_number_buffer::format_zero_padding#15 = printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#16 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#15 printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias uctoa::value#10 = uctoa::value#7 
Alias uctoa::buffer#10 = uctoa::buffer#15 
Alias uctoa::digit#2 = uctoa::digit#4 
Alias uctoa::max_digits#10 = uctoa::max_digits#6 
Alias uctoa::digit_values#10 = uctoa::digit_values#7 
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias printf_uint::uvalue#1 = printf_uint::uvalue#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#3 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#3 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#3 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#2 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#3 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#3 
Alias printf_schar::format_radix#2 = printf_schar::format_radix#4 
Alias printf_schar::format_min_length#2 = printf_schar::format_min_length#4 
Alias printf_schar::format_justify_left#2 = printf_schar::format_justify_left#4 
Alias printf_schar::format_sign_always#2 = printf_schar::format_sign_always#3 
Alias printf_schar::format_zero_padding#2 = printf_schar::format_zero_padding#4 
Alias printf_schar::format_upper_case#2 = printf_schar::format_upper_case#4 
Alias printf_number_buffer::format_min_length#2 = printf_number_buffer::format_min_length#3 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#5 
Alias printf_number_buffer::format_zero_padding#11 = printf_number_buffer::format_zero_padding#6 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#12 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#16 = printf_number_buffer::buffer_digits#19 
Alias printf_number_buffer::buffer_sign#11 = printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#13 printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#15 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#14 printf_number_buffer::format_upper_case#3 printf_number_buffer::format_upper_case#2 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#13 printf_number_buffer::buffer_digits#12 printf_number_buffer::buffer_digits#4 printf_number_buffer::buffer_digits#3 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#16 printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#13 printf_number_buffer::format_justify_left#3 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#12 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#16 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Identical Phi Values (byte) toupper::ch#1 (byte) toupper::ch#0
Identical Phi Values (void*) memcpy::source#1 (void*) memcpy::source#0
Identical Phi Values (void*) memcpy::destination#1 (void*) memcpy::destination#0
Identical Phi Values (word) memcpy::num#1 (word) memcpy::num#0
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#2 (void*) memcpy::destination#1
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) strupr::src#0 (byte*) strupr::str#0
Identical Phi Values (byte*) strupr::str#2 (byte*) strupr::src#0
Identical Phi Values (byte*) strlen::str#4 (byte*) strlen::str#1
Identical Phi Values (byte) uctoa::radix#1 (byte) uctoa::radix#0
Identical Phi Values (byte) uctoa::value#10 (byte) uctoa::value#1
Identical Phi Values (byte*) uctoa::buffer#10 (byte*) uctoa::buffer#5
Identical Phi Values (byte) uctoa::max_digits#10 (byte) uctoa::max_digits#7
Identical Phi Values (byte*) uctoa::digit_values#10 (byte*) uctoa::digit_values#8
Identical Phi Values (byte) uctoa_append::value#5 (byte) uctoa_append::value#0
Identical Phi Values (byte) uctoa_append::sub#3 (byte) uctoa_append::sub#0
Identical Phi Values (byte*) uctoa_append::buffer#3 (byte*) uctoa_append::buffer#0
Identical Phi Values (byte) uctoa_append::sub#1 (byte) uctoa_append::sub#3
Identical Phi Values (byte*) uctoa_append::buffer#1 (byte*) uctoa_append::buffer#3
Identical Phi Values (byte) utoa::radix#1 (byte) utoa::radix#0
Identical Phi Values (word) utoa::value#10 (word) utoa::value#1
Identical Phi Values (byte*) utoa::buffer#10 (byte*) utoa::buffer#5
Identical Phi Values (byte) utoa::max_digits#10 (byte) utoa::max_digits#7
Identical Phi Values (word*) utoa::digit_values#10 (word*) utoa::digit_values#8
Identical Phi Values (word) utoa_append::value#5 (word) utoa_append::value#0
Identical Phi Values (word) utoa_append::sub#3 (word) utoa_append::sub#0
Identical Phi Values (byte*) utoa_append::buffer#3 (byte*) utoa_append::buffer#0
Identical Phi Values (word) utoa_append::sub#1 (word) utoa_append::sub#3
Identical Phi Values (byte*) utoa_append::buffer#1 (byte*) utoa_append::buffer#3
Identical Phi Values (byte) printf_padding::length#3 (byte) printf_padding::length#4
Identical Phi Values (byte) printf_padding::pad#3 (byte) printf_padding::pad#5
Identical Phi Values (byte*) printf_str::str#4 (byte*) printf_str::str#1
Identical Phi Values (byte) printf_uint::format_sign_always#1 (byte) printf_uint::format_sign_always#0
Identical Phi Values (word) printf_uint::uvalue#1 (word) printf_uint::uvalue#0
Identical Phi Values (byte) printf_uint::format_radix#1 (byte) printf_uint::format_radix#0
Identical Phi Values (byte) printf_uint::format_min_length#1 (byte) printf_uint::format_min_length#0
Identical Phi Values (byte) printf_uint::format_justify_left#1 (byte) printf_uint::format_justify_left#0
Identical Phi Values (byte) printf_uint::format_zero_padding#1 (byte) printf_uint::format_zero_padding#0
Identical Phi Values (byte) printf_uint::format_upper_case#1 (byte) printf_uint::format_upper_case#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [15] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [22] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [29] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) strupr::$1 [36] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
Simple Condition (bool~) strlen::$0 [48] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
Simple Condition (bool~) uctoa::$0 [56] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
Simple Condition (bool~) uctoa::$1 [60] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
Simple Condition (bool~) uctoa::$2 [64] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
Simple Condition (bool~) uctoa::$3 [68] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
Simple Condition (bool~) uctoa::$5 [85] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@11
Simple Condition (bool~) uctoa_append::$0 [108] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
Simple Condition (bool~) utoa::$0 [117] if((byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
Simple Condition (bool~) utoa::$1 [121] if((byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
Simple Condition (bool~) utoa::$2 [125] if((byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
Simple Condition (bool~) utoa::$3 [129] if((byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
Simple Condition (bool~) utoa::$5 [146] if((byte) utoa::digit#2<(byte~) utoa::$4) goto utoa::@11
Simple Condition (bool~) utoa_append::$0 [171] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
Simple Condition (bool~) printf_char::$1 [193] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
Simple Condition (bool~) printf_scroll::$1 [206] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return
Simple Condition (bool~) printf_padding::$0 [225] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
Simple Condition (bool~) printf_str::$1 [236] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
Simple Condition (bool~) printf_str::$2 [238] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
Simple Condition (bool~) printf_uint::$5 [245] if((byte) 0!=(byte) printf_uint::format_sign_always#0) goto printf_uint::@1
Simple Condition (bool~) printf_schar::$0 [267] if((signed byte) printf_schar::value#3<(signed byte) 0) goto printf_schar::@1
Simple Condition (bool~) printf_schar::$3 [271] if((byte) 0==(byte) printf_schar::format_sign_always#2) goto printf_schar::@2
Simple Condition (bool~) printf_number_buffer::$0 [292] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$20 [306] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
Simple Condition (bool~) printf_number_buffer::$23 [311] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$7 [315] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
Simple Condition (bool~) printf_number_buffer::$12 [325] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
Rewriting ! if()-condition to reversed if() [89] (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
Rewriting || if()-condition to two if()s [88] (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
Rewriting ! if()-condition to reversed if() [151] (bool~) utoa::$8 ← ! (bool~) utoa::$7
Rewriting || if()-condition to two if()s [150] (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
Rewriting ! if()-condition to reversed if() [298] (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
Rewriting && if()-condition to two if()s [297] (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [296] (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [320] (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
Rewriting && if()-condition to two if()s [319] (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#10 && (signed byte) printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [334] (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
Rewriting && if()-condition to two if()s [333] (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [332] (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#10 && (bool~) printf_number_buffer::$14
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) uctoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) utoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_zero_padding#10
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_justify_left#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Constant right-side identified [181] (word) memset::num#0 ← (unumber)(number) $28*(number) $19
Constant right-side identified [209] (word) memcpy::num#0 ← (unumber)(number) $28*(number) $19-(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) strlen::len#0 = 0
Constant (const byte) uctoa::max_digits#0 = 0
Constant (const byte*) uctoa::digit_values#0 = (byte*) 0
Constant (const byte) uctoa::max_digits#1 = 3
Constant (const byte*) uctoa::digit_values#1 = RADIX_DECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#2 = 2
Constant (const byte*) uctoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#3 = 3
Constant (const byte*) uctoa::digit_values#3 = RADIX_OCTAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#4 = 8
Constant (const byte*) uctoa::digit_values#4 = RADIX_BINARY_VALUES_CHAR
Constant (const byte) uctoa::started#0 = 0
Constant (const byte) uctoa::digit#0 = 0
Constant (const byte) uctoa::started#1 = 1
Constant (const byte) uctoa_append::digit#0 = 0
Constant (const byte) utoa::max_digits#0 = 0
Constant (const word*) utoa::digit_values#0 = (word*) 0
Constant (const byte) utoa::max_digits#1 = 5
Constant (const word*) utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant (const byte) utoa::max_digits#2 = 4
Constant (const word*) utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant (const byte) utoa::max_digits#3 = 6
Constant (const word*) utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant (const byte) utoa::max_digits#4 = $10
Constant (const word*) utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant (const byte) utoa::started#0 = 0
Constant (const byte) utoa::digit#0 = 0
Constant (const byte) utoa::started#1 = 1
Constant (const byte) utoa_append::digit#0 = 0
Constant (const void*) memset::str#0 = (void*) 1024
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = (unumber)$28*$19
Constant (const void*) memcpy::destination#0 = (void*) 1024
Constant (const void*) memcpy::source#0 = (void*)$400+$28
Constant (const word) memcpy::num#0 = (unumber)$28*$19-$28
Constant (const void*) memset::str#1 = (void*)$400+$28*$19-$28
Constant (const byte) memset::c#1 = ' '
Constant (const word) memset::num#1 = $28
Constant (const byte) printf_padding::i#0 = 0
Constant (const byte) printf_uint::$1 = '+'
Constant (const byte) printf_uint::$0 = 0
Constant (const byte*) utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) uctoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const signed byte) printf_number_buffer::padding#0 = 0
Constant (const signed byte) printf_number_buffer::padding#2 = 0
Constant (const byte) printf_padding::pad#0 = ' '
Constant (const byte) printf_padding::pad#1 = '0'
Constant (const byte) printf_padding::pad#2 = ' '
Constant (const signed byte) printf_schar::value#1 = -$4d
Constant (const byte) printf_schar::format_min_length#0 = 6
Constant (const byte) printf_schar::format_justify_left#0 = 0
Constant (const byte) printf_schar::format_sign_always#0 = 0
Constant (const byte) printf_schar::format_zero_padding#0 = 0
Constant (const byte) printf_schar::format_upper_case#0 = 0
Constant (const byte) printf_schar::format_radix#0 = DECIMAL
Constant (const signed byte) printf_schar::value#2 = $63
Constant (const byte) printf_schar::format_min_length#1 = 6
Constant (const byte) printf_schar::format_justify_left#1 = 0
Constant (const byte) printf_schar::format_sign_always#1 = 1
Constant (const byte) printf_schar::format_zero_padding#1 = 1
Constant (const byte) printf_schar::format_upper_case#1 = 0
Constant (const byte) printf_schar::format_radix#1 = OCTAL
Constant (const word) printf_uint::uvalue#0 = $d80
Constant (const byte) printf_uint::format_min_length#0 = $a
Constant (const byte) printf_uint::format_justify_left#0 = 1
Constant (const byte) printf_uint::format_sign_always#0 = 0
Constant (const byte) printf_uint::format_zero_padding#0 = 0
Constant (const byte) printf_uint::format_upper_case#0 = 1
Constant (const byte) printf_uint::format_radix#0 = HEXADECIMAL
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memcpy::src#0 = (byte*)memcpy::source#0
Constant (const byte*) memcpy::dst#0 = (byte*)memcpy::destination#0
Constant (const byte*) memcpy::$2 = (byte*)memcpy::source#0
Constant (const void*) memcpy::return#2 = memcpy::destination#0
Constant (const word) utoa::value#1 = printf_uint::uvalue#0
Constant (const byte) utoa::radix#0 = printf_uint::format_radix#0
Constant (const byte) printf_number_buffer::format_min_length#0 = printf_uint::format_min_length#0
Constant (const byte) printf_number_buffer::format_justify_left#0 = printf_uint::format_justify_left#0
Constant (const byte) printf_number_buffer::format_sign_always#0 = printf_uint::format_sign_always#0
Constant (const byte) printf_number_buffer::format_zero_padding#0 = printf_uint::format_zero_padding#0
Constant (const byte) printf_number_buffer::format_upper_case#0 = printf_uint::format_upper_case#0
Constant (const byte) printf_number_buffer::format_radix#0 = printf_uint::format_radix#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [117] if((const byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
if() condition always true - replacing block destination [121] if((const byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [125] if((const byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
if() condition always false - eliminating [129] if((const byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
if() condition always true - replacing block destination [232] if(true) goto printf_str::@2
if() condition always false - eliminating [245] if((byte) 0!=(const byte) printf_uint::format_sign_always#0) goto printf_uint::@1
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero (byte*)&printf_buffer in [249] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_uint::$2
Simplifying expression containing zero (byte*)&printf_buffer in [254] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero (byte*)&printf_buffer in [265] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte) 0
Simplifying expression containing zero (byte*)&printf_buffer in [269] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte) '-'
Simplifying expression containing zero (byte*)&printf_buffer in [272] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte) '+'
Simplifying expression containing zero (byte*)&printf_buffer in [279] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memset::return#2 and assignment [115] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [139] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused variable (byte) printf_number_buffer::format_sign_always#1 and assignment [181] (byte) printf_number_buffer::format_sign_always#1 ← (byte) printf_schar::format_sign_always#2
Eliminating unused variable (byte) printf_number_buffer::format_radix#1 and assignment [184] (byte) printf_number_buffer::format_radix#1 ← (byte) printf_schar::format_radix#2
Eliminating unused variable (byte*) strupr::return#2 and assignment [221] (byte*) strupr::return#2 ← (byte*) strupr::str#0
Eliminating unused constant (const void*) memcpy::return#2
Eliminating unused constant (const byte) uctoa::max_digits#0
Eliminating unused constant (const byte*) uctoa::digit_values#0
Eliminating unused constant (const byte) utoa::max_digits#0
Eliminating unused constant (const word*) utoa::digit_values#0
Eliminating unused constant (const byte) utoa::radix#0
Eliminating unused constant (const byte) printf_number_buffer::format_sign_always#0
Eliminating unused constant (const byte) printf_number_buffer::format_radix#0
Eliminating unused constant (const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) printf_uint::format_sign_always#0
Eliminating unused constant (const byte) printf_uint::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte*) utoa::buffer#0 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#1 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#2 from unused block utoa::@9
Removing PHI-reference to removed block (utoa::@1) in block utoa::@5
Removing PHI-reference to removed block (utoa::@1) in block utoa::@5
Removing unused block utoa::@1
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Removing PHI-reference to removed block (printf_uint::@1) in block printf_uint::@3
Removing unused block printf_uint::@1
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 0 in (bool~) uctoa::$11 ← (number) 0 != (byte) uctoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) utoa::$12 ← (number) 0 != (byte) utoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$33 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#10
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$34 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$35 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$36 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$37 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Identical Phi Values (byte) utoa::max_digits#7 (const byte) utoa::max_digits#2
Identical Phi Values (word*) utoa::digit_values#8 (const word*) utoa::digit_values#2
Identical Phi Values (byte~) printf_uint::$2 (const byte) printf_uint::$0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) toupper::$0 [2] if((byte) toupper::ch#0>=(byte) 'a') goto toupper::@3
Simple Condition (bool~) uctoa::$11 [56] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@14
Simple Condition (bool~) utoa::$12 [84] if((byte) 0!=(byte) utoa::started#2) goto utoa::@14
Simple Condition (bool~) printf_number_buffer::$1 [181] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@23
Simple Condition (bool~) printf_number_buffer::$33 [197] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@24
Simple Condition (bool~) printf_number_buffer::$34 [207] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@26
Simple Condition (bool~) toupper::$1 [222] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
Simple Condition (bool~) uctoa::$6 [223] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@14
Simple Condition (bool~) utoa::$6 [224] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@14
Simple Condition (bool~) printf_number_buffer::$35 [226] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
Simple Condition (bool~) printf_number_buffer::$2 [227] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@22
Simple Condition (bool~) printf_number_buffer::$36 [229] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
Simple Condition (bool~) printf_number_buffer::$37 [231] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
Simple Condition (bool~) printf_number_buffer::$14 [232] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@25
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [2] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@2
Negating conditional jump and destination [181] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
Negating conditional jump and destination [197] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
Negating conditional jump and destination [207] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
Negating conditional jump and destination [227] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
Negating conditional jump and destination [232] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [6] (byte*) memcpy::src_end#0 ← (const byte*) memcpy::$2 + (const word) memcpy::num#0
Constant right-side identified [42] (byte*) uctoa::buffer#0 ← ++ (const byte*) uctoa::buffer#5
Constant right-side identified [78] (byte~) utoa::$4 ← (const byte) utoa::max_digits#2 - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memcpy::src_end#0 = memcpy::$2+memcpy::num#0
Constant (const byte*) uctoa::buffer#0 = ++uctoa::buffer#5
Constant (const byte) utoa::$4 = utoa::max_digits#2-1
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) utoa::max_digits#1
Eliminating unused constant (const word*) utoa::digit_values#1
Eliminating unused constant (const byte) utoa::max_digits#3
Eliminating unused constant (const word*) utoa::digit_values#3
Eliminating unused constant (const byte) utoa::max_digits#4
Eliminating unused constant (const word*) utoa::digit_values#4
Eliminating unused constant (const byte) printf_uint::$1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const word*) RADIX_BINARY_VALUES
Eliminating unused constant (const word*) RADIX_OCTAL_VALUES
Eliminating unused constant (const word*) RADIX_DECIMAL_VALUES
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Constant right-side identified [40] (byte*) uctoa::buffer#1 ← ++ (const byte*) uctoa::buffer#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#1 = ++uctoa::buffer#0
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Constant right-side identified [41] (byte*) uctoa::buffer#2 ← ++ (const byte*) uctoa::buffer#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#2 = ++uctoa::buffer#1
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Inlining Noop Cast [12] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [14] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [152] (byte) printf_schar::uvalue#0 ← (byte)(signed byte) printf_schar::value#5 keeping printf_schar::value#5
Inlining Noop Cast [174] (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 keeping printf_number_buffer::format_min_length#2
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [70] (byte~) utoa::$10 ← (byte) utoa::digit#2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memcpy::src#0
Inlining constant with var siblings (const byte*) memcpy::dst#0
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const word) strlen::len#0
Inlining constant with var siblings (const byte) uctoa::max_digits#1
Inlining constant with var siblings (const byte*) uctoa::digit_values#1
Inlining constant with var siblings (const byte) uctoa::max_digits#2
Inlining constant with var siblings (const byte*) uctoa::digit_values#2
Inlining constant with var siblings (const byte) uctoa::max_digits#3
Inlining constant with var siblings (const byte*) uctoa::digit_values#3
Inlining constant with var siblings (const byte) uctoa::max_digits#4
Inlining constant with var siblings (const byte*) uctoa::digit_values#4
Inlining constant with var siblings (const byte) uctoa::started#0
Inlining constant with var siblings (const byte) uctoa::digit#0
Inlining constant with var siblings (const byte) uctoa::started#1
Inlining constant with var siblings (const byte*) uctoa::buffer#5
Inlining constant with var siblings (const byte*) uctoa::buffer#0
Inlining constant with var siblings (const byte*) uctoa::buffer#1
Inlining constant with var siblings (const byte*) uctoa::buffer#2
Inlining constant with var siblings (const byte) uctoa_append::digit#0
Inlining constant with var siblings (const byte) utoa::started#0
Inlining constant with var siblings (const byte) utoa::digit#0
Inlining constant with var siblings (const byte) utoa::started#1
Inlining constant with var siblings (const byte*) utoa::buffer#5
Inlining constant with var siblings (const word) utoa::value#1
Inlining constant with var siblings (const byte) utoa_append::digit#0
Inlining constant with var siblings (const byte) printf_padding::i#0
Inlining constant with var siblings (const byte) printf_padding::pad#0
Inlining constant with var siblings (const byte) printf_padding::pad#1
Inlining constant with var siblings (const byte) printf_padding::pad#2
Inlining constant with var siblings (const signed byte) printf_schar::value#1
Inlining constant with var siblings (const byte) printf_schar::format_min_length#0
Inlining constant with var siblings (const byte) printf_schar::format_justify_left#0
Inlining constant with var siblings (const byte) printf_schar::format_sign_always#0
Inlining constant with var siblings (const byte) printf_schar::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_schar::format_upper_case#0
Inlining constant with var siblings (const byte) printf_schar::format_radix#0
Inlining constant with var siblings (const signed byte) printf_schar::value#2
Inlining constant with var siblings (const byte) printf_schar::format_min_length#1
Inlining constant with var siblings (const byte) printf_schar::format_justify_left#1
Inlining constant with var siblings (const byte) printf_schar::format_sign_always#1
Inlining constant with var siblings (const byte) printf_schar::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_schar::format_upper_case#1
Inlining constant with var siblings (const byte) printf_schar::format_radix#1
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#0
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#1
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#0
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#0
Constant inlined uctoa_append::digit#0 = (byte) 0
Constant inlined printf_number_buffer::format_justify_left#0 = (const byte) printf_uint::format_justify_left#0
Constant inlined printf_number_buffer::buffer_digits#0 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::buffer_digits#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined utoa::digit_values#2 = (const word*) RADIX_HEXADECIMAL_VALUES
Constant inlined printf_schar::format_min_length#0 = (byte) 6
Constant inlined memset::num#1 = (byte) $28
Constant inlined printf_schar::format_min_length#1 = (byte) 6
Constant inlined memset::num#0 = (word)(number) $28*(number) $19
Constant inlined strlen::len#0 = (word) 0
Constant inlined printf_schar::format_upper_case#1 = (byte) 0
Constant inlined printf_schar::format_sign_always#1 = (byte) 1
Constant inlined printf_schar::format_sign_always#0 = (byte) 0
Constant inlined memcpy::$2 = (byte*)(const void*) memcpy::source#0
Constant inlined printf_schar::format_justify_left#0 = (byte) 0
Constant inlined printf_schar::format_justify_left#1 = (byte) 0
Constant inlined utoa::$4 = (const byte) utoa::max_digits#2-(byte) 1
Constant inlined printf_number_buffer::padding#2 = (signed byte) 0
Constant inlined uctoa::digit#0 = (byte) 0
Constant inlined printf_schar::format_upper_case#0 = (byte) 0
Constant inlined utoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined memset::c#0 = (byte) ' '
Constant inlined memset::c#1 = (byte) ' '
Constant inlined printf_number_buffer::padding#0 = (signed byte) 0
Constant inlined utoa_append::digit#0 = (byte) 0
Constant inlined uctoa::digit_values#2 = (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
Constant inlined uctoa::started#0 = (byte) 0
Constant inlined uctoa::digit_values#1 = (const byte*) RADIX_DECIMAL_VALUES_CHAR
Constant inlined uctoa::started#1 = (byte) 1
Constant inlined uctoa::digit_values#4 = (const byte*) RADIX_BINARY_VALUES_CHAR
Constant inlined printf_schar::format_radix#1 = (const byte) OCTAL
Constant inlined memcpy::dst#0 = (byte*)(const void*) memcpy::destination#0
Constant inlined uctoa::digit_values#3 = (const byte*) RADIX_OCTAL_VALUES_CHAR
Constant inlined printf_schar::format_radix#0 = (const byte) DECIMAL
Constant inlined printf_schar::format_zero_padding#1 = (byte) 1
Constant inlined memcpy::src#0 = (byte*)(const void*) memcpy::source#0
Constant inlined printf_schar::format_zero_padding#0 = (byte) 0
Constant inlined uctoa::max_digits#1 = (byte) 3
Constant inlined printf_number_buffer::format_upper_case#0 = (const byte) printf_uint::format_upper_case#0
Constant inlined utoa::digit#0 = (byte) 0
Constant inlined printf_number_buffer::format_min_length#0 = (const byte) printf_uint::format_min_length#0
Constant inlined uctoa::max_digits#3 = (byte) 3
Constant inlined printf_number_buffer::format_zero_padding#0 = (const byte) printf_uint::format_zero_padding#0
Constant inlined uctoa::max_digits#2 = (byte) 2
Constant inlined uctoa::max_digits#4 = (byte) 8
Constant inlined uctoa::buffer#1 = ++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined memset::str#1 = (void*)(number) $400+(number) $28*(number) $19-(number) $28
Constant inlined uctoa::buffer#2 = ++++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_padding::pad#0 = (byte) ' '
Constant inlined memset::str#0 = (void*) 1024
Constant inlined printf_padding::i#0 = (byte) 0
Constant inlined printf_padding::pad#1 = (byte) '0'
Constant inlined uctoa::buffer#0 = ++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_padding::pad#2 = (byte) ' '
Constant inlined printf_schar::value#2 = (signed byte) $63
Constant inlined printf_uint::$0 = (byte) 0
Constant inlined printf_schar::value#1 = (signed byte) -$4d
Constant inlined utoa::started#1 = (byte) 1
Constant inlined utoa::started#0 = (byte) 0
Constant inlined uctoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined utoa::value#1 = (const word) printf_uint::uvalue#0
Successful SSA optimization Pass2ConstantInlining
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
Successful SSA optimization Pass2ConstantSimplification
Adding number conversion cast (unumber) 1 in [39] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 1) ← (byte) 'r'
Adding number conversion cast (unumber) 2 in [40] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 2) ← (byte) 'r'
Adding number conversion cast (unumber) 3 in [41] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 3) ← (byte) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Identical Phi Values (byte) printf_schar::format_min_length#2 (byte) 6
Identical Phi Values (byte) printf_schar::format_justify_left#2 (byte) 0
Identical Phi Values (byte) printf_schar::format_upper_case#2 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) printf_number_buffer::format_min_length#1 = 6
Constant (const byte) printf_number_buffer::format_justify_left#1 = 0
Constant (const byte) printf_number_buffer::format_upper_case#1 = 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#1
Constant inlined printf_number_buffer::format_upper_case#1 = (byte) 0
Constant inlined printf_number_buffer::format_justify_left#1 = (byte) 0
Constant inlined printf_number_buffer::format_min_length#1 = (byte) 6
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Added new block during phi lifting uctoa::@17(between uctoa::@16 and uctoa::@13)
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting printf_schar::@7(between printf_schar::@3 and printf_schar::@2)
Added new block during phi lifting printf_number_buffer::@27(between printf_number_buffer::@13 and printf_number_buffer::@1)
Added new block during phi lifting printf_number_buffer::@28(between printf_number_buffer::@15 and printf_number_buffer::@13)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of printf_ln::@1
Adding NOP phi() at start of printf_scroll::@1
Adding NOP phi() at start of printf_scroll::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_uint::@2
Adding NOP phi() at start of printf_uint::@5
Adding NOP phi() at start of printf_number_buffer::@14
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@20
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@18
Adding NOP phi() at start of printf_number_buffer::@16
Adding NOP phi() at start of printf_char::@2
Adding NOP phi() at start of printf_str::@4
Adding NOP phi() at start of strupr::@3
Adding NOP phi() at start of strlen::@3
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@6
Adding NOP phi() at start of utoa::@2
Adding NOP phi() at start of utoa::@5
Adding NOP phi() at start of printf_schar::@6
Adding NOP phi() at start of uctoa::@4
Adding NOP phi() at start of uctoa::@3
Adding NOP phi() at start of uctoa::@2
Adding NOP phi() at start of uctoa::@1
Adding NOP phi() at start of printf_cls
CALL GRAPH
Calls in [] to main:5 
Calls in [main] to printf_cls:9 printf_schar:11 printf_ln:13 printf_schar:15 printf_ln:17 printf_uint:19 printf_ln:21 
Calls in [printf_ln] to printf_scroll:29 
Calls in [printf_scroll] to memcpy:34 memset:36 
Calls in [printf_uint] to utoa:65 printf_number_buffer:68 
Calls in [printf_number_buffer] to strlen:74 printf_char:92 strupr:98 printf_str:101 printf_padding:108 printf_padding:112 printf_padding:116 
Calls in [printf_padding] to printf_char:126 
Calls in [printf_char] to printf_scroll:136 
Calls in [printf_str] to printf_char:148 printf_ln:151 
Calls in [strupr] to toupper:159 
Calls in [utoa] to utoa_append:208 
Calls in [printf_schar] to uctoa:232 printf_number_buffer:237 
Calls in [uctoa] to uctoa_append:277 
Calls in [printf_cls] to memset:296 

Created 48 initial phi equivalence classes
Coalesced [51] memset::dst#5 ← memset::dst#1
Coalesced [60] memcpy::src#4 ← memcpy::src#1
Coalesced [61] memcpy::dst#4 ← memcpy::dst#1
Coalesced [67] printf_number_buffer::buffer_sign#14 ← printf_number_buffer::buffer_sign#0
Coalesced [80] printf_number_buffer::len#5 ← printf_number_buffer::len#1
Coalesced [91] printf_char::ch#4 ← printf_char::ch#2
Coalesced [107] printf_padding::length#8 ← printf_padding::length#2
Coalesced [111] printf_padding::length#7 ← printf_padding::length#1
Coalesced [115] printf_padding::length#9 ← printf_padding::length#0
Coalesced [118] printf_number_buffer::padding#18 ← printf_number_buffer::padding#1
Coalesced [119] printf_number_buffer::len#4 ← printf_number_buffer::len#0
Coalesced [125] printf_char::ch#5 ← printf_char::ch#0
Coalesced [128] printf_padding::i#5 ← printf_padding::i#1
Coalesced [139] printf_str::str#10 ← printf_str::str#1
Coalesced [147] printf_char::ch#6 ← printf_char::ch#1
Coalesced [149] printf_str::str#12 ← printf_str::str#0
Coalesced (already) [152] printf_str::str#11 ← printf_str::str#0
Coalesced [153] strupr::src#5 ← strupr::str#0
Coalesced [164] strupr::src#6 ← strupr::src#1
Coalesced [167] toupper::return#7 ← toupper::ch#0
Coalesced [171] toupper::return#6 ← toupper::return#0
Coalesced [172] strlen::str#5 ← strlen::str#1
Coalesced [179] strlen::str#6 ← strlen::str#0
Coalesced [180] strlen::len#5 ← strlen::len#1
Coalesced [196] utoa::value#17 ← utoa::value#2
Coalesced [197] utoa::started#6 ← utoa::started#2
Coalesced [198] utoa::buffer#23 ← utoa::buffer#11
Coalesced [201] utoa::digit#7 ← utoa::digit#1
Coalesced (already) [202] utoa::value#16 ← utoa::value#6
Coalesced (already) [203] utoa::started#5 ← utoa::started#4
Coalesced (already) [204] utoa::buffer#22 ← utoa::buffer#14
Coalesced [212] utoa::value#18 ← utoa::value#0
Coalesced [213] utoa::buffer#24 ← utoa::buffer#4
Coalesced [214] utoa_append::value#6 ← utoa_append::value#0
Coalesced [221] utoa_append::value#7 ← utoa_append::value#1
Coalesced [222] utoa_append::digit#5 ← utoa_append::digit#1
Coalesced [228] printf_schar::value#10 ← printf_schar::value#3
Coalesced [235] printf_number_buffer::format_zero_padding#22 ← printf_number_buffer::format_zero_padding#1
Coalesced [236] printf_number_buffer::buffer_sign#13 ← printf_number_buffer::buffer_sign#1
Coalesced (already) [240] printf_schar::value#9 ← printf_schar::value#3
Coalesced [243] printf_schar::value#8 ← printf_schar::value#0
Coalesced [255] uctoa::value#17 ← uctoa::value#1
Coalesced [265] uctoa::value#18 ← uctoa::value#2
Coalesced [266] uctoa::started#6 ← uctoa::started#2
Coalesced [267] uctoa::buffer#23 ← uctoa::buffer#11
Coalesced [270] uctoa::digit#7 ← uctoa::digit#1
Coalesced (already) [271] uctoa::value#16 ← uctoa::value#6
Coalesced (already) [272] uctoa::started#5 ← uctoa::started#4
Coalesced (already) [273] uctoa::buffer#22 ← uctoa::buffer#14
Coalesced [281] uctoa::value#19 ← uctoa::value#0
Coalesced [282] uctoa::buffer#24 ← uctoa::buffer#4
Coalesced [286] uctoa_append::value#6 ← uctoa_append::value#0
Coalesced [293] uctoa_append::value#7 ← uctoa_append::value#1
Coalesced [294] uctoa_append::digit#5 ← uctoa_append::digit#1
Coalesced down to 41 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@7
Culled Empty Block (label) printf_ln::@1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) printf_uint::@2
Culled Empty Block (label) printf_uint::@5
Culled Empty Block (label) printf_number_buffer::@14
Culled Empty Block (label) printf_number_buffer::@17
Culled Empty Block (label) printf_number_buffer::@20
Culled Empty Block (label) printf_number_buffer::@21
Culled Empty Block (label) printf_number_buffer::@18
Culled Empty Block (label) printf_number_buffer::@16
Culled Empty Block (label) printf_number_buffer::@28
Culled Empty Block (label) printf_char::@2
Culled Empty Block (label) printf_str::@7
Culled Empty Block (label) printf_str::@6
Culled Empty Block (label) strupr::@3
Culled Empty Block (label) toupper::@2
Culled Empty Block (label) strlen::@3
Culled Empty Block (label) utoa::@6
Culled Empty Block (label) utoa::@2
Culled Empty Block (label) utoa::@5
Culled Empty Block (label) utoa::@17
Culled Empty Block (label) printf_schar::@6
Culled Empty Block (label) printf_schar::@7
Culled Empty Block (label) uctoa::@4
Culled Empty Block (label) uctoa::@17
Culled Empty Block (label) uctoa::@3
Culled Empty Block (label) uctoa::@2
Culled Empty Block (label) uctoa::@1
Renumbering block toupper::@3 to toupper::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block strupr::@4 to strupr::@3
Renumbering block uctoa::@5 to uctoa::@1
Renumbering block uctoa::@6 to uctoa::@2
Renumbering block uctoa::@7 to uctoa::@3
Renumbering block uctoa::@8 to uctoa::@4
Renumbering block uctoa::@9 to uctoa::@5
Renumbering block uctoa::@10 to uctoa::@6
Renumbering block uctoa::@11 to uctoa::@7
Renumbering block uctoa::@12 to uctoa::@8
Renumbering block uctoa::@13 to uctoa::@9
Renumbering block uctoa::@14 to uctoa::@10
Renumbering block uctoa::@15 to uctoa::@11
Renumbering block uctoa::@16 to uctoa::@12
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block printf_uint::@3 to printf_uint::@1
Renumbering block printf_uint::@4 to printf_uint::@2
Renumbering block printf_number_buffer::@15 to printf_number_buffer::@14
Renumbering block printf_number_buffer::@19 to printf_number_buffer::@15
Renumbering block printf_number_buffer::@22 to printf_number_buffer::@16
Renumbering block printf_number_buffer::@23 to printf_number_buffer::@17
Renumbering block printf_number_buffer::@24 to printf_number_buffer::@18
Renumbering block printf_number_buffer::@25 to printf_number_buffer::@19
Renumbering block printf_number_buffer::@26 to printf_number_buffer::@20
Renumbering block printf_number_buffer::@27 to printf_number_buffer::@21
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of printf_scroll::@1
Adding NOP phi() at start of printf_scroll::@2
Adding NOP phi() at start of memcpy
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_str
Adding NOP phi() at start of printf_str::@4
Adding NOP phi() at start of strupr
Adding NOP phi() at start of strlen
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa_append
Adding NOP phi() at start of uctoa_append
Adding NOP phi() at start of printf_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) printf_cursor_x ← (byte) 0
  [2] (byte) printf_cursor_y ← (byte) 0
  [3] (byte*) printf_cursor_ptr ← (byte*) 1024
  to:@2
@2: scope:[]  from @1
  [4] phi()
  [5] call main 
  to:@end
@end: scope:[]  from @2
  [6] phi()

(void()) main()
main: scope:[main]  from @2
  [7] phi()
  [8] call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [9] phi()
  [10] call printf_schar 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [11] phi()
  [12] call printf_ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [13] phi()
  [14] call printf_schar 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [15] phi()
  [16] call printf_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [17] phi()
  [18] call printf_uint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [19] phi()
  [20] call printf_ln 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [21] return 
  to:@return

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from main::@2 main::@4 main::@6 printf_str::@4
  [22] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  [23] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28
  [24] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  [25] (byte) printf_cursor_x ← (byte) 0
  [26] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [27] call printf_scroll 
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln
  [28] return 
  to:@return

(void()) printf_scroll()
printf_scroll: scope:[printf_scroll]  from printf_char::@1 printf_ln
  [29] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return
  to:printf_scroll::@1
printf_scroll::@1: scope:[printf_scroll]  from printf_scroll
  [30] phi()
  [31] call memcpy 
  to:printf_scroll::@2
printf_scroll::@2: scope:[printf_scroll]  from printf_scroll::@1
  [32] phi()
  [33] call memset 
  to:printf_scroll::@3
printf_scroll::@3: scope:[printf_scroll]  from printf_scroll::@2
  [34] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28
  [35] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
  [36] (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_scroll::@return
printf_scroll::@return: scope:[printf_scroll]  from printf_scroll printf_scroll::@3
  [37] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_cls printf_scroll::@2
  [38] (byte) memset::c#4 ← phi( printf_cls/(byte) ' ' printf_scroll::@2/(byte) ' ' )
  [38] (void*) memset::str#3 ← phi( printf_cls/(void*) 1024 printf_scroll::@2/(void*)(number) $400+(number) $28*(number) $19-(number) $28 )
  [38] (word) memset::num#2 ← phi( printf_cls/(word)(number) $28*(number) $19 printf_scroll::@2/(byte) $28 )
  [39] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [40] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [41] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [42] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [43] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [44] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [45] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [46] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_scroll::@1
  [47] phi()
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [48] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*)(const void*) memcpy::destination#0 memcpy::@2/(byte*) memcpy::dst#1 )
  [48] (byte*) memcpy::src#2 ← phi( memcpy/(byte*)(const void*) memcpy::source#0 memcpy::@2/(byte*) memcpy::src#1 )
  [49] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [50] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [51] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [52] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [53] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@5
  [54] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [55] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [56] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [57] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [58] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [59] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_schar::@5 printf_uint::@2
  [60] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_schar::@5/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_upper_case#0 )
  [60] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_schar::@5/(byte) printf_number_buffer::buffer_sign#1 printf_uint::@2/(byte) printf_number_buffer::buffer_sign#0 )
  [60] (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_schar::@5/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS printf_uint::@2/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [60] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_schar::@5/(byte) printf_number_buffer::format_zero_padding#1 printf_uint::@2/(const byte) printf_uint::format_zero_padding#0 )
  [60] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_schar::@5/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_justify_left#0 )
  [60] (byte) printf_number_buffer::format_min_length#2 ← phi( printf_schar::@5/(byte) 6 printf_uint::@2/(const byte) printf_uint::format_min_length#0 )
  [61] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [62] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10
  [63] call strlen 
  [64] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [65] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [66] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [67] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [68] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [69] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [70] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2
  [71] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [72] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [73] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [74] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [75] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [76] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [77] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [78] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [79] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [80] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10
  [81] call printf_char 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [82] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [83] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [84] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [85] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [86] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [87] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10
  [88] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [89] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10
  [90] call printf_str 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [91] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [92] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [93] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [94] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [95] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [96] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [97] (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [97] (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [98] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [99] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [100] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [101] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#5
  [102] call printf_char 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [103] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_number_buffer::@9 printf_padding::@2 printf_str::@5
  [104] (byte) printf_char::ch#3 ← phi( printf_number_buffer::@9/(byte) printf_char::ch#2 printf_padding::@2/(byte) printf_char::ch#0 printf_str::@5/(byte) printf_char::ch#1 )
  [105] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3
  [106] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  [107] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  [108] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  [109] (byte) printf_cursor_x ← (byte) 0
  [110] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [111] call printf_scroll 
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@1
  [112] return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from printf_number_buffer::@5
  [113] phi()
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@4 printf_str::@5
  [114] (byte*) printf_str::str#2 ← phi( printf_str/(byte*) printf_str::str#1 printf_str::@4/(byte*) printf_str::str#0 printf_str::@5/(byte*) printf_str::str#0 )
  to:printf_str::@2
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [115] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#2)
  [116] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#2
  [117] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@2
  [118] return 
  to:@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  [119] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
  to:printf_str::@5
printf_str::@5: scope:[printf_str]  from printf_str::@3
  [120] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
  [121] call printf_char 
  to:printf_str::@1
printf_str::@4: scope:[printf_str]  from printf_str::@3
  [122] phi()
  [123] call printf_ln 
  to:printf_str::@1

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [124] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [125] (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [126] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [127] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [128] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [129] call toupper 
  [130] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [131] (byte~) strupr::$0 ← (byte) toupper::return#3
  [132] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [133] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [134] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [135] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [136] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [137] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [138] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [139] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [140] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [140] (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#1 strlen::@2/(byte*) strlen::str#0 )
  [141] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [142] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [143] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [144] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [145] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [146] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [146] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [146] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(const word) printf_uint::uvalue#0 )
  [146] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [147] if((byte) utoa::digit#2<(const byte) utoa::max_digits#2-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [148] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [149] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [150] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [151] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [152] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [153] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [154] (word) utoa::digit_value#0 ← *((const word*) RADIX_HEXADECIMAL_VALUES + (byte~) utoa::$10)
  [155] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [156] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [157] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [157] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [157] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [158] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [159] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [160] (word) utoa_append::value#0 ← (word) utoa::value#2
  [161] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [162] call utoa_append 
  [163] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [164] (word) utoa::value#0 ← (word) utoa_append::return#0
  [165] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [166] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [167] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [167] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [168] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [169] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [170] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [171] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [172] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
printf_schar: scope:[printf_schar]  from main::@1 main::@3
  [173] (byte) printf_schar::format_zero_padding#2 ← phi( main::@1/(byte) 0 main::@3/(byte) 1 )
  [173] (byte) printf_schar::format_radix#2 ← phi( main::@1/(const byte) DECIMAL main::@3/(const byte) OCTAL )
  [173] (byte) printf_schar::format_sign_always#2 ← phi( main::@1/(byte) 0 main::@3/(byte) 1 )
  [173] (signed byte) printf_schar::value#3 ← phi( main::@1/(signed byte) -$4d main::@3/(signed byte) $63 )
  [174] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [175] if((signed byte) printf_schar::value#3<(signed byte) 0) goto printf_schar::@1
  to:printf_schar::@3
printf_schar::@3: scope:[printf_schar]  from printf_schar
  [176] if((byte) 0==(byte) printf_schar::format_sign_always#2) goto printf_schar::@2
  to:printf_schar::@4
printf_schar::@4: scope:[printf_schar]  from printf_schar::@3
  [177] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '+'
  to:printf_schar::@2
printf_schar::@2: scope:[printf_schar]  from printf_schar::@1 printf_schar::@3 printf_schar::@4
  [178] (signed byte) printf_schar::value#5 ← phi( printf_schar::@1/(signed byte) printf_schar::value#0 printf_schar::@3/(signed byte) printf_schar::value#3 printf_schar::@4/(signed byte) printf_schar::value#3 )
  [179] (byte) uctoa::value#1 ← (byte)(signed byte) printf_schar::value#5
  [180] (byte) uctoa::radix#0 ← (byte) printf_schar::format_radix#2
  [181] call uctoa 
  to:printf_schar::@5
printf_schar::@5: scope:[printf_schar]  from printf_schar::@2
  [182] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [183] (byte) printf_number_buffer::format_zero_padding#1 ← (byte) printf_schar::format_zero_padding#2
  [184] call printf_number_buffer 
  to:printf_schar::@return
printf_schar::@return: scope:[printf_schar]  from printf_schar::@5
  [185] return 
  to:@return
printf_schar::@1: scope:[printf_schar]  from printf_schar
  [186] (signed byte) printf_schar::value#0 ← - (signed byte) printf_schar::value#3
  [187] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_schar::@2

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_schar::@2
  [188] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
  to:uctoa::@2
uctoa::@2: scope:[uctoa]  from uctoa
  [189] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@1
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@2
  [190] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@1
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@3
  [191] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@1
  to:uctoa::@5
uctoa::@5: scope:[uctoa]  from uctoa::@4
  [192] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) ← (byte) 'e'
  [193] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 1) ← (byte) 'r'
  [194] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 2) ← (byte) 'r'
  [195] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@5 uctoa::@8
  [196] return 
  to:@return
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@2 uctoa::@3 uctoa::@4
  [197] (byte*) uctoa::digit_values#8 ← phi( uctoa/(const byte*) RADIX_DECIMAL_VALUES_CHAR uctoa::@2/(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR uctoa::@3/(const byte*) RADIX_OCTAL_VALUES_CHAR uctoa::@4/(const byte*) RADIX_BINARY_VALUES_CHAR )
  [197] (byte) uctoa::max_digits#7 ← phi( uctoa/(byte) 3 uctoa::@2/(byte) 2 uctoa::@3/(byte) 3 uctoa::@4/(byte) 8 )
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@1 uctoa::@9
  [198] (byte*) uctoa::buffer#11 ← phi( uctoa::@9/(byte*) uctoa::buffer#14 uctoa::@1/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [198] (byte) uctoa::started#2 ← phi( uctoa::@9/(byte) uctoa::started#4 uctoa::@1/(byte) 0 )
  [198] (byte) uctoa::value#2 ← phi( uctoa::@9/(byte) uctoa::value#6 uctoa::@1/(byte) uctoa::value#1 )
  [198] (byte) uctoa::digit#2 ← phi( uctoa::@9/(byte) uctoa::digit#1 uctoa::@1/(byte) 0 )
  [199] (byte~) uctoa::$4 ← (byte) uctoa::max_digits#7 - (byte) 1
  [200] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@7
  to:uctoa::@8
uctoa::@8: scope:[uctoa]  from uctoa::@6
  [201] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [202] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [203] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@7: scope:[uctoa]  from uctoa::@6
  [204] (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#8 + (byte) uctoa::digit#2)
  [205] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@10
  to:uctoa::@12
uctoa::@12: scope:[uctoa]  from uctoa::@7
  [206] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@10
  to:uctoa::@9
uctoa::@9: scope:[uctoa]  from uctoa::@11 uctoa::@12
  [207] (byte*) uctoa::buffer#14 ← phi( uctoa::@12/(byte*) uctoa::buffer#11 uctoa::@11/(byte*) uctoa::buffer#4 )
  [207] (byte) uctoa::started#4 ← phi( uctoa::@12/(byte) uctoa::started#2 uctoa::@11/(byte) 1 )
  [207] (byte) uctoa::value#6 ← phi( uctoa::@12/(byte) uctoa::value#2 uctoa::@11/(byte) uctoa::value#0 )
  [208] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@6
uctoa::@10: scope:[uctoa]  from uctoa::@12 uctoa::@7
  [209] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [210] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [211] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [212] call uctoa_append 
  [213] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@11
uctoa::@11: scope:[uctoa]  from uctoa::@10
  [214] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [215] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@9

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@10
  [216] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [217] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [217] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [218] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [219] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [220] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [221] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [222] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  [223] phi()
  [224] call memset 
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  [225] (byte*) printf_cursor_ptr ← (byte*) 1024
  [226] (byte) printf_cursor_x ← (byte) 0
  [227] (byte) printf_cursor_y ← (byte) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  [228] return 
  to:@return

null depth in calling loop Loop head: printf_str::@1 tails: printf_str::@5 printf_str::@4 blocks: printf_str::@5 printf_str::@3 printf_str::@2 printf_str::@1 printf_str::@4  in scope printf_ln
null depth in calling loop Loop head: printf_str::@1 tails: printf_str::@5 printf_str::@4 blocks: printf_str::@5 printf_str::@3 printf_str::@2 printf_str::@1 printf_str::@4  in scope printf_ln
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope printf_char
null depth in calling loop Loop head: printf_str::@1 tails: printf_str::@5 printf_str::@4 blocks: printf_str::@5 printf_str::@3 printf_str::@2 printf_str::@1 printf_str::@4  in scope printf_char
null depth in calling loop Loop head: printf_str::@1 tails: printf_str::@5 printf_str::@4 blocks: printf_str::@5 printf_str::@3 printf_str::@2 printf_str::@1 printf_str::@4  in scope printf_ln
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope printf_char
null depth in calling loop Loop head: printf_str::@1 tails: printf_str::@5 printf_str::@4 blocks: printf_str::@5 printf_str::@3 printf_str::@2 printf_str::@1 printf_str::@4  in scope printf_char
null depth in calling loop Loop head: printf_str::@1 tails: printf_str::@5 printf_str::@4 blocks: printf_str::@5 printf_str::@3 printf_str::@2 printf_str::@1 printf_str::@4  in scope printf_char

VARIABLE REGISTER WEIGHTS
(void()) main()
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.0000000001E10
(byte*) memcpy::dst#2 1.0000000001E10
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(byte*) memcpy::src
(byte*) memcpy::src#1 2.0000000002E10
(byte*) memcpy::src#2 1.0000000001E10
(byte*) memcpy::src_end
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1.25000000125E8
(byte*) memset::dst
(byte*) memset::dst#1 2.000000002E9
(byte*) memset::dst#2 1.3666666683333335E9
(byte*) memset::dst#4 2.00000002E8
(byte*) memset::end
(byte*) memset::end#0 1.833333336666667E8
(word) memset::num
(word) memset::num#2 1.00000001E8
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(struct printf_buffer_number) printf_buffer loadstore = {}
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(byte) printf_char::ch
(byte) printf_char::ch#0 200002.0
(byte) printf_char::ch#1 200002.0
(byte) printf_char::ch#2 2002.0
(byte) printf_char::ch#3 1201004.0
(void()) printf_cls()
(byte*) printf_cursor_ptr loadstore 219299.21052631582
(byte) printf_cursor_x loadstore 57693.35576923078
(byte) printf_cursor_y loadstore 295653.1304347826
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_ln()
(byte*~) printf_ln::$0 2000002.0
(byte*~) printf_ln::$1 2000002.0
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(word~) printf_number_buffer::$19 1001.0
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#10 103.55172413793102
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 202.0
(byte) printf_number_buffer::buffer_sign#1 101.0
(byte) printf_number_buffer::buffer_sign#10 160.25
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#10 64.58064516129032
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#2 100.1
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#10 38.5
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#1 202.0
(byte) printf_number_buffer::format_zero_padding#10 97.0
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0 1501.5
(signed byte) printf_number_buffer::len#1 2002.0
(signed byte) printf_number_buffer::len#2 3003.0
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#1 1001.0
(signed byte) printf_number_buffer::padding#10 190.66666666666666
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(byte) printf_padding::i
(byte) printf_padding::i#1 200002.0
(byte) printf_padding::i#2 75000.75
(byte) printf_padding::length
(byte) printf_padding::length#0 2002.0
(byte) printf_padding::length#1 2002.0
(byte) printf_padding::length#2 2002.0
(byte) printf_padding::length#4 17167.333333333332
(byte) printf_padding::pad
(byte) printf_padding::pad#5 16666.833333333332
(void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
(struct printf_format_number) printf_schar::format
(byte) printf_schar::format_justify_left
(byte) printf_schar::format_min_length
(byte) printf_schar::format_radix
(byte) printf_schar::format_radix#2 11.222222222222221
(byte) printf_schar::format_sign_always
(byte) printf_schar::format_sign_always#2 33.666666666666664
(byte) printf_schar::format_upper_case
(byte) printf_schar::format_zero_padding
(byte) printf_schar::format_zero_padding#2 8.416666666666666
(byte) printf_schar::uvalue
(signed byte) printf_schar::value
(signed byte) printf_schar::value#0 101.0
(signed byte) printf_schar::value#3 80.8
(signed byte) printf_schar::value#5 303.0
(void()) printf_scroll()
(byte*~) printf_scroll::$4 2.0000002E7
(void()) printf_str((byte*) printf_str::str)
(byte) printf_str::ch
(byte) printf_str::ch#0 100001.0
(byte*) printf_str::str
(byte*) printf_str::str#0 42857.57142857143
(byte*) printf_str::str#1 5501.0
(byte*) printf_str::str#2 205002.5
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_min_length
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_zero_padding
(word) printf_uint::uvalue
(word()) strlen((byte*) strlen::str)
(word) strlen::len
(word) strlen::len#1 100001.0
(word) strlen::len#2 50250.75
(word) strlen::return
(word) strlen::return#2 2002.0
(byte*) strlen::str
(byte*) strlen::str#0 200002.0
(byte*) strlen::str#1 5501.0
(byte*) strlen::str#2 103334.66666666666
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0 200002.0
(byte*) strupr::return
(byte*) strupr::src
(byte*) strupr::src#1 200002.0
(byte*) strupr::src#2 72858.0
(byte*) strupr::str
(byte*) strupr::str#0 5501.0
(byte()) toupper((byte) toupper::ch)
(byte) toupper::ch
(byte) toupper::ch#0 1700002.0000000002
(byte) toupper::return
(byte) toupper::return#0 2000002.0
(byte) toupper::return#2 1033334.6666666667
(byte) toupper::return#3 200002.0
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(byte~) uctoa::$4 20002.0
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 3231.230769230769
(byte*) uctoa::buffer#14 15001.5
(byte*) uctoa::buffer#3 2002.0
(byte*) uctoa::buffer#4 20002.0
(byte) uctoa::digit
(byte) uctoa::digit#1 20002.0
(byte) uctoa::digit#2 2857.4285714285716
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 6000.6
(byte*) uctoa::digit_values
(byte*) uctoa::digit_values#8 625.0625
(byte) uctoa::max_digits
(byte) uctoa::max_digits#7 625.0625
(byte) uctoa::radix
(byte) uctoa::radix#0 1026.25
(byte) uctoa::started
(byte) uctoa::started#2 5000.5
(byte) uctoa::started#4 10001.0
(byte) uctoa::value
(byte) uctoa::value#0 10001.0
(byte) uctoa::value#1 157.42857142857142
(byte) uctoa::value#2 6000.857142857143
(byte) uctoa::value#6 15001.5
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 13750.25
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 1.0000001E7
(byte) uctoa_append::digit#2 1.00500015E7
(byte) uctoa_append::return
(byte) uctoa_append::return#0 20002.0
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 3335000.5
(byte) uctoa_append::value
(byte) uctoa_append::value#0 36667.33333333333
(byte) uctoa_append::value#1 2.0000002E7
(byte) uctoa_append::value#2 5018334.166666666
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 20002.0
(byte~) utoa::$11 2002.0
(byte*) utoa::buffer
(byte*) utoa::buffer#11 3000.4285714285716
(byte*) utoa::buffer#14 15001.5
(byte*) utoa::buffer#3 2002.0
(byte*) utoa::buffer#4 20002.0
(byte) utoa::digit
(byte) utoa::digit#1 20002.0
(byte) utoa::digit#2 2857.4285714285716
(word) utoa::digit_value
(word) utoa::digit_value#0 6000.6
(word*) utoa::digit_values
(byte) utoa::max_digits
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 5000.5
(byte) utoa::started#4 10001.0
(word) utoa::value
(word) utoa::value#0 10001.0
(word) utoa::value#2 5714.857142857143
(word) utoa::value#6 15001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 13750.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 1.0000001E7
(byte) utoa_append::digit#2 1.00500015E7
(word) utoa_append::return
(word) utoa_append::return#0 20002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 3335000.5
(word) utoa_append::value
(word) utoa_append::value#0 36667.33333333333
(word) utoa_append::value#1 2.0000002E7
(word) utoa_append::value#2 5018334.166666666

Initial phi equivalence classes
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::src#2 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#1 ]
[ printf_number_buffer::format_min_length#2 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ]
[ printf_number_buffer::buffer_digits#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#5 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
[ printf_str::str#2 printf_str::str#1 printf_str::str#0 ]
[ strupr::src#2 strupr::str#0 strupr::src#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ strlen::str#2 strlen::str#1 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ printf_schar::format_sign_always#2 ]
[ printf_schar::format_radix#2 ]
[ printf_schar::format_zero_padding#2 ]
[ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 ]
[ uctoa::max_digits#7 ]
[ uctoa::digit_values#8 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
Added variable printf_cursor_x to live range equivalence class [ printf_cursor_x ]
Added variable printf_cursor_y to live range equivalence class [ printf_cursor_y ]
Added variable printf_cursor_ptr to live range equivalence class [ printf_cursor_ptr ]
Added variable printf_ln::$0 to live range equivalence class [ printf_ln::$0 ]
Added variable printf_ln::$1 to live range equivalence class [ printf_ln::$1 ]
Added variable printf_scroll::$4 to live range equivalence class [ printf_scroll::$4 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable strlen::return#2 to live range equivalence class [ strlen::return#2 ]
Added variable printf_number_buffer::$19 to live range equivalence class [ printf_number_buffer::$19 ]
Added variable printf_str::ch#0 to live range equivalence class [ printf_str::ch#0 ]
Added variable toupper::return#3 to live range equivalence class [ toupper::return#3 ]
Added variable strupr::$0 to live range equivalence class [ strupr::$0 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable uctoa::radix#0 to live range equivalence class [ uctoa::radix#0 ]
Added variable uctoa::$4 to live range equivalence class [ uctoa::$4 ]
Added variable uctoa::buffer#3 to live range equivalence class [ uctoa::buffer#3 ]
Added variable uctoa::digit_value#0 to live range equivalence class [ uctoa::digit_value#0 ]
Added variable uctoa_append::buffer#0 to live range equivalence class [ uctoa_append::buffer#0 ]
Added variable uctoa_append::sub#0 to live range equivalence class [ uctoa_append::sub#0 ]
Added variable uctoa_append::return#0 to live range equivalence class [ uctoa_append::return#0 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Complete equivalence classes
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::src#2 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#1 ]
[ printf_number_buffer::format_min_length#2 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ]
[ printf_number_buffer::buffer_digits#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#5 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
[ printf_str::str#2 printf_str::str#1 printf_str::str#0 ]
[ strupr::src#2 strupr::str#0 strupr::src#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ strlen::str#2 strlen::str#1 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ printf_schar::format_sign_always#2 ]
[ printf_schar::format_radix#2 ]
[ printf_schar::format_zero_padding#2 ]
[ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 ]
[ uctoa::max_digits#7 ]
[ uctoa::digit_values#8 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ printf_cursor_x ]
[ printf_cursor_y ]
[ printf_cursor_ptr ]
[ printf_ln::$0 ]
[ printf_ln::$1 ]
[ printf_scroll::$4 ]
[ memset::end#0 ]
[ strlen::return#2 ]
[ printf_number_buffer::$19 ]
[ printf_str::ch#0 ]
[ toupper::return#3 ]
[ strupr::$0 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ uctoa::radix#0 ]
[ uctoa::$4 ]
[ uctoa::buffer#3 ]
[ uctoa::digit_value#0 ]
[ uctoa_append::buffer#0 ]
[ uctoa_append::sub#0 ]
[ uctoa_append::return#0 ]
[ printf_buffer ]
Allocated zp[2]:2 [ memset::num#2 ]
Allocated zp[2]:4 [ memset::str#3 ]
Allocated zp[1]:6 [ memset::c#4 ]
Allocated zp[2]:7 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:9 [ memcpy::src#2 memcpy::src#1 ]
Allocated zp[2]:11 [ memcpy::dst#2 memcpy::dst#1 ]
Allocated zp[1]:13 [ printf_number_buffer::format_min_length#2 ]
Allocated zp[1]:14 [ printf_number_buffer::format_justify_left#10 ]
Allocated zp[1]:15 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ]
Allocated zp[2]:16 [ printf_number_buffer::buffer_digits#10 ]
Allocated zp[1]:18 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated zp[1]:19 [ printf_number_buffer::format_upper_case#10 ]
Allocated zp[1]:20 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
Allocated zp[1]:21 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated zp[1]:22 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated zp[1]:23 [ printf_padding::pad#5 ]
Allocated zp[1]:24 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated zp[1]:25 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
Allocated zp[2]:26 [ printf_str::str#2 printf_str::str#1 printf_str::str#0 ]
Allocated zp[2]:28 [ strupr::src#2 strupr::str#0 strupr::src#1 ]
Allocated zp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Allocated zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 ]
Allocated zp[2]:33 [ strlen::len#2 strlen::len#1 ]
Allocated zp[1]:35 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 ]
Allocated zp[1]:38 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[2]:41 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[1]:44 [ printf_schar::format_sign_always#2 ]
Allocated zp[1]:45 [ printf_schar::format_radix#2 ]
Allocated zp[1]:46 [ printf_schar::format_zero_padding#2 ]
Allocated zp[1]:47 [ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 ]
Allocated zp[1]:48 [ uctoa::max_digits#7 ]
Allocated zp[2]:49 [ uctoa::digit_values#8 ]
Allocated zp[1]:51 [ uctoa::digit#2 uctoa::digit#1 ]
Allocated zp[1]:52 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Allocated zp[1]:53 [ uctoa::started#2 uctoa::started#4 ]
Allocated zp[2]:54 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
Allocated zp[1]:56 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Allocated zp[1]:57 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Allocated zp[1]:58 [ printf_cursor_x ]
Allocated zp[1]:59 [ printf_cursor_y ]
Allocated zp[2]:60 [ printf_cursor_ptr ]
Allocated zp[2]:62 [ printf_ln::$0 ]
Allocated zp[2]:64 [ printf_ln::$1 ]
Allocated zp[2]:66 [ printf_scroll::$4 ]
Allocated zp[2]:68 [ memset::end#0 ]
Allocated zp[2]:70 [ strlen::return#2 ]
Allocated zp[2]:72 [ printf_number_buffer::$19 ]
Allocated zp[1]:74 [ printf_str::ch#0 ]
Allocated zp[1]:75 [ toupper::return#3 ]
Allocated zp[1]:76 [ strupr::$0 ]
Allocated zp[1]:77 [ utoa::$11 ]
Allocated zp[2]:78 [ utoa::buffer#3 ]
Allocated zp[1]:80 [ utoa::$10 ]
Allocated zp[2]:81 [ utoa::digit_value#0 ]
Allocated zp[2]:83 [ utoa_append::buffer#0 ]
Allocated zp[2]:85 [ utoa_append::sub#0 ]
Allocated zp[2]:87 [ utoa_append::return#0 ]
Allocated zp[1]:89 [ uctoa::radix#0 ]
Allocated zp[1]:90 [ uctoa::$4 ]
Allocated zp[2]:91 [ uctoa::buffer#3 ]
Allocated zp[1]:93 [ uctoa::digit_value#0 ]
Allocated zp[2]:94 [ uctoa_append::buffer#0 ]
Allocated zp[1]:96 [ uctoa_append::sub#0 ]
Allocated zp[1]:97 [ uctoa_append::return#0 ]
Allocated mem[12] [ printf_buffer ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests printf implementation
// Format a number
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const BINARY = 2
  .const OCTAL = 8
  .const DECIMAL = $a
  .const HEXADECIMAL = $10
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .label printf_cursor_x = $3a
  .label printf_cursor_y = $3b
  .label printf_cursor_ptr = $3c
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // X-position of cursor
  lda #0
  sta.z printf_cursor_x
  // [2] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // Y-position of cursor
  lda #0
  sta.z printf_cursor_y
  // [3] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
  // Pointer to cursor address
  lda #<$400
  sta.z printf_cursor_ptr
  lda #>$400
  sta.z printf_cursor_ptr+1
  // [4] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [5] call main 
  // [7] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [6] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [8] call printf_cls 
    // [223] phi from main to printf_cls [phi:main->printf_cls]
  printf_cls_from_main:
    jsr printf_cls
    // [9] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [10] call printf_schar 
    // [173] phi from main::@1 to printf_schar [phi:main::@1->printf_schar]
  printf_schar_from___b1:
    // [173] phi (byte) printf_schar::format_zero_padding#2 = (byte) 0 [phi:main::@1->printf_schar#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_schar.format_zero_padding
    // [173] phi (byte) printf_schar::format_radix#2 = (const byte) DECIMAL [phi:main::@1->printf_schar#1] -- vbuz1=vbuc1 
    lda #DECIMAL
    sta.z printf_schar.format_radix
    // [173] phi (byte) printf_schar::format_sign_always#2 = (byte) 0 [phi:main::@1->printf_schar#2] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_schar.format_sign_always
    // [173] phi (signed byte) printf_schar::value#3 = (signed byte) -$4d [phi:main::@1->printf_schar#3] -- vbsz1=vbsc1 
    lda #-$4d
    sta.z printf_schar.value
    jsr printf_schar
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [12] call printf_ln 
    jsr printf_ln
    // [13] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [14] call printf_schar 
    // [173] phi from main::@3 to printf_schar [phi:main::@3->printf_schar]
  printf_schar_from___b3:
    // [173] phi (byte) printf_schar::format_zero_padding#2 = (byte) 1 [phi:main::@3->printf_schar#0] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_schar.format_zero_padding
    // [173] phi (byte) printf_schar::format_radix#2 = (const byte) OCTAL [phi:main::@3->printf_schar#1] -- vbuz1=vbuc1 
    lda #OCTAL
    sta.z printf_schar.format_radix
    // [173] phi (byte) printf_schar::format_sign_always#2 = (byte) 1 [phi:main::@3->printf_schar#2] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_schar.format_sign_always
    // [173] phi (signed byte) printf_schar::value#3 = (signed byte) $63 [phi:main::@3->printf_schar#3] -- vbsz1=vbsc1 
    lda #$63
    sta.z printf_schar.value
    jsr printf_schar
    // [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [16] call printf_ln 
    jsr printf_ln
    // [17] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [18] call printf_uint 
    // [54] phi from main::@5 to printf_uint [phi:main::@5->printf_uint]
  printf_uint_from___b5:
    jsr printf_uint
    // [19] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [20] call printf_ln 
    jsr printf_ln
    jmp __breturn
    // main::@return
  __breturn:
    // [21] return 
    rts
}
  // printf_ln
// Print a newline
printf_ln: {
    .label __0 = $3e
    .label __1 = $40
    // [22] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x -- pbuz1=pbuz2_minus_vbuz3 
    sec
    lda.z printf_cursor_ptr
    sbc.z printf_cursor_x
    sta.z __0
    lda.z printf_cursor_ptr+1
    sbc #0
    sta.z __0+1
    // [23] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z __0
    sta.z __1
    lda #0
    adc.z __0+1
    sta.z __1+1
    // [24] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1 -- pbuz1=pbuz2 
    lda.z __1
    sta.z printf_cursor_ptr
    lda.z __1+1
    sta.z printf_cursor_ptr+1
    // [25] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [26] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // [27] call printf_scroll 
    jsr printf_scroll
    jmp __breturn
    // printf_ln::@return
  __breturn:
    // [28] return 
    rts
}
  // printf_scroll
// Scroll the entire screen if the cursor is on the last line
printf_scroll: {
    .label __4 = $42
    // [29] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z printf_cursor_y
    bne __breturn
    // [30] phi from printf_scroll to printf_scroll::@1 [phi:printf_scroll->printf_scroll::@1]
  __b1_from_printf_scroll:
    jmp __b1
    // printf_scroll::@1
  __b1:
    // [31] call memcpy 
    // [47] phi from printf_scroll::@1 to memcpy [phi:printf_scroll::@1->memcpy]
  memcpy_from___b1:
    jsr memcpy
    // [32] phi from printf_scroll::@1 to printf_scroll::@2 [phi:printf_scroll::@1->printf_scroll::@2]
  __b2_from___b1:
    jmp __b2
    // printf_scroll::@2
  __b2:
    // [33] call memset 
    // [38] phi from printf_scroll::@2 to memset [phi:printf_scroll::@2->memset]
  memset_from___b2:
    // [38] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_scroll::@2->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [38] phi (void*) memset::str#3 = (void*)(number) $400+(number) $28*(number) $19-(number) $28 [phi:printf_scroll::@2->memset#1] -- pvoz1=pvoc1 
    lda #<$400+$28*$19-$28
    sta.z memset.str
    lda #>$400+$28*$19-$28
    sta.z memset.str+1
    // [38] phi (word) memset::num#2 = (byte) $28 [phi:printf_scroll::@2->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b3
    // printf_scroll::@3
  __b3:
    // [34] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z printf_cursor_ptr
    sec
    sbc #<$28
    sta.z __4
    lda.z printf_cursor_ptr+1
    sbc #>$28
    sta.z __4+1
    // [35] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4 -- pbuz1=pbuz2 
    lda.z __4
    sta.z printf_cursor_ptr
    lda.z __4+1
    sta.z printf_cursor_ptr+1
    // [36] (byte) printf_cursor_y ← -- (byte) printf_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z printf_cursor_y
    jmp __breturn
    // printf_scroll::@return
  __breturn:
    // [37] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(4) str, byte zp(6) c, word zp(2) num)
memset: {
    .label end = $44
    .label dst = 7
    .label num = 2
    .label str = 4
    .label c = 6
    // [39] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [40] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z str
    clc
    adc.z num
    sta.z end
    lda.z str+1
    adc.z num+1
    sta.z end+1
    // [41] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [42] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [42] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [43] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [44] return 
    rts
    // memset::@3
  __b3:
    // [45] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [46] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = $400
    .label source = $400+$28
    .const num = $28*$19-$28
    .label src_end = source+num
    .label dst = $b
    .label src = 9
    // [48] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
  __b1_from_memcpy:
    // [48] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [48] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    jmp __b1
    // memcpy::@1
  __b1:
    // [49] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [50] return 
    rts
    // memcpy::@2
  __b2:
    // [51] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [52] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [53] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [48] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
  __b1_from___b2:
    // [48] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [48] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .label uvalue = $d80
    .const format_min_length = $a
    .const format_justify_left = 1
    .const format_zero_padding = 0
    .const format_upper_case = 1
    jmp __b1
    // printf_uint::@1
  __b1:
    // [55] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [56] call utoa 
  // Format number into buffer
    // [145] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [57] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [58] call printf_number_buffer 
  // Print using format
    // [60] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [60] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [60] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [60] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_uint::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [60] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [60] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [60] phi (byte) printf_number_buffer::format_min_length#2 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#5] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [59] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($12) buffer_sign, byte* zp($10) buffer_digits, byte zp($d) format_min_length, byte zp($e) format_justify_left, byte zp($f) format_zero_padding, byte zp($13) format_upper_case)
printf_number_buffer: {
    .label __19 = $48
    .label buffer_sign = $12
    .label format_zero_padding = $f
    .label len = $14
    .label padding = $15
    .label format_min_length = $d
    .label format_justify_left = $e
    .label buffer_digits = $10
    .label format_upper_case = $13
    // [61] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_min_length
    beq __b1_from_printf_number_buffer
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [62] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strlen.str
    lda.z buffer_digits+1
    sta.z strlen.str+1
    // [63] call strlen 
    // [139] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [64] (word) strlen::return#2 ← (word) strlen::len#2 -- vwuz1=vwuz2 
    lda.z strlen.len
    sta.z strlen.return
    lda.z strlen.len+1
    sta.z strlen.return+1
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [65] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 -- vwuz1=vwuz2 
    lda.z strlen.return
    sta.z __19
    lda.z strlen.return+1
    sta.z __19+1
    // [66] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsz1=_sbyte_vwuz2 
    // There is a minimum length - work out the padding
    lda.z __19
    sta.z len
    // [67] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [68] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsz1=_inc_vbsz1 
    inc.z len
    // [69] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [69] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [70] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsz2_minus_vbsz3 
    lda.z format_min_length
    sec
    sbc.z len
    sta.z padding
    // [71] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [73] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [73] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [72] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [73] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [73] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [74] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [75] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [76] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [77] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [78] call printf_padding 
    // [97] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [97] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [97] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [79] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [80] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z printf_char.ch
    // [81] call printf_char 
    // [104] phi from printf_number_buffer::@9 to printf_char [phi:printf_number_buffer::@9->printf_char]
  printf_char_from___b9:
    // [104] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#2 [phi:printf_number_buffer::@9->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [82] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [83] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [84] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [85] call printf_padding 
    // [97] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [97] phi (byte) printf_padding::pad#5 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [97] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [86] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [87] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strupr.str
    lda.z buffer_digits+1
    sta.z strupr.str+1
    // [88] call strupr 
    // [124] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [89] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z printf_str.str
    lda.z buffer_digits+1
    sta.z printf_str.str+1
    // [90] call printf_str 
    // [113] phi from printf_number_buffer::@5 to printf_str [phi:printf_number_buffer::@5->printf_str]
  printf_str_from___b5:
    jsr printf_str
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [91] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [92] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [93] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [94] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [95] call printf_padding 
    // [97] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [97] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [97] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [96] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($17) pad, byte zp($16) length)
printf_padding: {
    .label i = $18
    .label length = $16
    .label pad = $17
    // [98] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [98] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [99] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [100] return 
    rts
    // printf_padding::@2
  __b2:
    // [101] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#5 -- vbuz1=vbuz2 
    lda.z pad
    sta.z printf_char.ch
    // [102] call printf_char 
    // [104] phi from printf_padding::@2 to printf_char [phi:printf_padding::@2->printf_char]
  printf_char_from___b2:
    // [104] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#0 [phi:printf_padding::@2->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_padding::@3
  __b3:
    // [103] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [98] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [98] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte zp($19) ch)
printf_char: {
    .label ch = $19
    // [105] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (printf_cursor_ptr),y
    // [106] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr -- pbuz1=_inc_pbuz1 
    inc.z printf_cursor_ptr
    bne !+
    inc.z printf_cursor_ptr+1
  !:
    // [107] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_x
    // [108] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z printf_cursor_x
    bne __breturn
    jmp __b1
    // printf_char::@1
  __b1:
    // [109] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [110] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // [111] call printf_scroll 
    jsr printf_scroll
    jmp __breturn
    // printf_char::@return
  __breturn:
    // [112] return 
    rts
}
  // printf_str
// Print a zero-terminated string
// Handles escape codes such as newline
// printf_str(byte* zp($1a) str)
printf_str: {
    .label ch = $4a
    .label str = $1a
    // [114] phi from printf_str printf_str::@4 printf_str::@5 to printf_str::@1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1]
  __b1_from_printf_str:
  __b1_from___b4:
  __b1_from___b5:
    // [114] phi (byte*) printf_str::str#2 = (byte*) printf_str::str#1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1#0] -- register_copy 
    jmp __b1
    // printf_str::@1
  __b1:
    jmp __b2
    // printf_str::@2
  __b2:
    // [115] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z ch
    // [116] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [117] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b3
    jmp __breturn
    // printf_str::@return
  __breturn:
    // [118] return 
    rts
    // printf_str::@3
  __b3:
    // [119] if((byte) printf_str::ch#0==(byte) ' ') goto printf_str::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z ch
    beq __b4_from___b3
    jmp __b5
    // printf_str::@5
  __b5:
    // [120] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0 -- vbuz1=vbuz2 
    lda.z ch
    sta.z printf_char.ch
    // [121] call printf_char 
    // [104] phi from printf_str::@5 to printf_char [phi:printf_str::@5->printf_char]
  printf_char_from___b5:
    // [104] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#1 [phi:printf_str::@5->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b1_from___b5
    // [122] phi from printf_str::@3 to printf_str::@4 [phi:printf_str::@3->printf_str::@4]
  __b4_from___b3:
    jmp __b4
    // printf_str::@4
  __b4:
    // [123] call printf_ln 
    jsr printf_ln
    jmp __b1_from___b4
}
  // strupr
// Converts a string to uppercase.
// strupr(byte* zp($1c) str)
strupr: {
    .label __0 = $4c
    .label src = $1c
    .label str = $1c
    // [125] phi from strupr strupr::@3 to strupr::@1 [phi:strupr/strupr::@3->strupr::@1]
  __b1_from_strupr:
  __b1_from___b3:
    // [125] phi (byte*) strupr::src#2 = (byte*) strupr::str#0 [phi:strupr/strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
    // strupr::@1
  __b1:
    // [126] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [127] return 
    rts
    // strupr::@2
  __b2:
    // [128] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta.z toupper.ch
    // [129] call toupper 
    jsr toupper
    // [130] (byte) toupper::return#3 ← (byte) toupper::return#2 -- vbuz1=vbuz2 
    lda.z toupper.return
    sta.z toupper.return_1
    jmp __b3
    // strupr::@3
  __b3:
    // [131] (byte~) strupr::$0 ← (byte) toupper::return#3 -- vbuz1=vbuz2 
    lda.z toupper.return_1
    sta.z __0
    // [132] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuz2 
    lda.z __0
    ldy #0
    sta (src),y
    // [133] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b3
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp($1e) ch)
toupper: {
    .label return = $1e
    .label ch = $1e
    .label return_1 = $4b
    // [134] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [135] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [137] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [137] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [136] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [138] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($1f) str)
strlen: {
    .label len = $21
    .label str = $1f
    .label return = $46
    // [140] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [140] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [140] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    jmp __b1
    // strlen::@1
  __b1:
    // [141] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [142] return 
    rts
    // strlen::@2
  __b2:
    // [143] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [144] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [140] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [140] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [140] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($24) value, byte* zp($4e) buffer)
utoa: {
    .const max_digits = 4
    .label __10 = $50
    .label __11 = $4d
    .label digit_value = $51
    .label buffer = $4e
    .label digit = $23
    .label value = $24
    .label buffer_1 = $27
    .label started = $26
    // [146] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [146] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [146] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [146] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [146] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [147] if((byte) utoa::digit#2<(const byte) utoa::max_digits#2-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [148] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [149] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [150] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [151] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [152] return 
    rts
    // utoa::@2
  __b2:
    // [153] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [154] (word) utoa::digit_value#0 ← *((const word*) RADIX_HEXADECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_HEXADECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_HEXADECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [155] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [156] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [157] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [157] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [157] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [157] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [158] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [146] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [146] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [146] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [146] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [146] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [159] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z utoa_append.buffer
    lda.z buffer_1+1
    sta.z utoa_append.buffer+1
    // [160] (word) utoa_append::value#0 ← (word) utoa::value#2 -- vwuz1=vwuz2 
    lda.z value
    sta.z utoa_append.value
    lda.z value+1
    sta.z utoa_append.value+1
    // [161] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 -- vwuz1=vwuz2 
    lda.z digit_value
    sta.z utoa_append.sub
    lda.z digit_value+1
    sta.z utoa_append.sub+1
    // [162] call utoa_append 
    // [166] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [163] (word) utoa_append::return#0 ← (word) utoa_append::value#2 -- vwuz1=vwuz2 
    lda.z utoa_append.value
    sta.z utoa_append.return
    lda.z utoa_append.value+1
    sta.z utoa_append.return+1
    jmp __b6
    // utoa::@6
  __b6:
    // [164] (word) utoa::value#0 ← (word) utoa_append::return#0 -- vwuz1=vwuz2 
    lda.z utoa_append.return
    sta.z value
    lda.z utoa_append.return+1
    sta.z value+1
    // [165] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [157] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [157] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [157] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [157] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($53) buffer, word zp($29) value, word zp($55) sub)
utoa_append: {
    .label buffer = $53
    .label value = $29
    .label sub = $55
    .label return = $57
    .label digit = $2b
    // [167] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [167] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [167] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [168] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [169] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [170] return 
    rts
    // utoa_append::@2
  __b2:
    // [171] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [172] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [167] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [167] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [167] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_schar
// Print a signed char using a specific format
// printf_schar(signed byte zp($2f) value, byte zp($2c) format_sign_always, byte zp($2e) format_zero_padding, byte zp($2d) format_radix)
printf_schar: {
    .label value = $2f
    .label format_sign_always = $2c
    .label format_radix = $2d
    .label format_zero_padding = $2e
    // [174] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [175] if((signed byte) printf_schar::value#3<(signed byte) 0) goto printf_schar::@1 -- vbsz1_lt_0_then_la1 
    lda.z value
    bmi __b1
    jmp __b3
    // printf_schar::@3
  __b3:
    // [176] if((byte) 0==(byte) printf_schar::format_sign_always#2) goto printf_schar::@2 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_sign_always
    beq __b2_from___b3
    jmp __b4
    // printf_schar::@4
  __b4:
    // [177] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '+' -- _deref_pbuc1=vbuc2 
    lda #'+'
    sta printf_buffer
    // [178] phi from printf_schar::@1 printf_schar::@3 printf_schar::@4 to printf_schar::@2 [phi:printf_schar::@1/printf_schar::@3/printf_schar::@4->printf_schar::@2]
  __b2_from___b1:
  __b2_from___b3:
  __b2_from___b4:
    // [178] phi (signed byte) printf_schar::value#5 = (signed byte) printf_schar::value#0 [phi:printf_schar::@1/printf_schar::@3/printf_schar::@4->printf_schar::@2#0] -- register_copy 
    jmp __b2
    // printf_schar::@2
  __b2:
    // [179] (byte) uctoa::value#1 ← (byte)(signed byte) printf_schar::value#5 -- vbuz1=vbuz2 
    lda.z value
    sta.z uctoa.value
    // [180] (byte) uctoa::radix#0 ← (byte) printf_schar::format_radix#2 -- vbuz1=vbuz2 
    lda.z format_radix
    sta.z uctoa.radix
    // [181] call uctoa 
    jsr uctoa
    jmp __b5
    // printf_schar::@5
  __b5:
    // [182] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [183] (byte) printf_number_buffer::format_zero_padding#1 ← (byte) printf_schar::format_zero_padding#2 -- vbuz1=vbuz2 
    lda.z format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [184] call printf_number_buffer 
  // Print using format
    // [60] phi from printf_schar::@5 to printf_number_buffer [phi:printf_schar::@5->printf_number_buffer]
  printf_number_buffer_from___b5:
    // [60] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_schar::@5->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [60] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_schar::@5->printf_number_buffer#1] -- register_copy 
    // [60] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_schar::@5->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [60] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) printf_number_buffer::format_zero_padding#1 [phi:printf_schar::@5->printf_number_buffer#3] -- register_copy 
    // [60] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_schar::@5->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [60] phi (byte) printf_number_buffer::format_min_length#2 = (byte) 6 [phi:printf_schar::@5->printf_number_buffer#5] -- vbuz1=vbuc1 
    lda #6
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_schar::@return
  __breturn:
    // [185] return 
    rts
    // printf_schar::@1
  __b1:
    // [186] (signed byte) printf_schar::value#0 ← - (signed byte) printf_schar::value#3 -- vbsz1=_neg_vbsz1 
    lda.z value
    eor #$ff
    clc
    adc #1
    sta.z value
    // [187] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' -- _deref_pbuc1=vbuc2 
    lda #'-'
    sta printf_buffer
    jmp __b2_from___b1
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte zp($34) value, byte* zp($5b) buffer, byte zp($59) radix)
uctoa: {
    .label __4 = $5a
    .label digit_value = $5d
    .label buffer = $5b
    .label digit = $33
    .label value = $34
    .label buffer_1 = $36
    .label radix = $59
    .label started = $35
    .label max_digits = $30
    .label digit_values = $31
    // [188] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #DECIMAL
    cmp.z radix
    beq __b1_from_uctoa
    jmp __b2
    // uctoa::@2
  __b2:
    // [189] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #HEXADECIMAL
    cmp.z radix
    beq __b1_from___b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [190] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #OCTAL
    cmp.z radix
    beq __b1_from___b3
    jmp __b4
    // uctoa::@4
  __b4:
    // [191] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #BINARY
    cmp.z radix
    beq __b1_from___b4
    jmp __b5
    // uctoa::@5
  __b5:
    // [192] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) ← (byte) 'e' -- _deref_pbuc1=vbuc2 
    // Unknown radix
    lda #'e'
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    // [193] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 1) ← (byte) 'r' -- _deref_pbuc1=vbuc2 
    lda #'r'
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
    // [194] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 2) ← (byte) 'r' -- _deref_pbuc1=vbuc2 
    lda #'r'
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
    // [195] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+3
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [196] return 
    rts
    // [197] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_DECIMAL_VALUES_CHAR [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_DECIMAL_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_DECIMAL_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 3 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #3
    sta.z max_digits
    jmp __b1
    // [197] phi from uctoa::@2 to uctoa::@1 [phi:uctoa::@2->uctoa::@1]
  __b1_from___b2:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR [phi:uctoa::@2->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_HEXADECIMAL_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_HEXADECIMAL_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 2 [phi:uctoa::@2->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta.z max_digits
    jmp __b1
    // [197] phi from uctoa::@3 to uctoa::@1 [phi:uctoa::@3->uctoa::@1]
  __b1_from___b3:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_OCTAL_VALUES_CHAR [phi:uctoa::@3->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_OCTAL_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_OCTAL_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 3 [phi:uctoa::@3->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #3
    sta.z max_digits
    jmp __b1
    // [197] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_BINARY_VALUES_CHAR [phi:uctoa::@4->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_BINARY_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_BINARY_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 8 [phi:uctoa::@4->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #8
    sta.z max_digits
    jmp __b1
    // uctoa::@1
  __b1:
    // [198] phi from uctoa::@1 to uctoa::@6 [phi:uctoa::@1->uctoa::@6]
  __b6_from___b1:
    // [198] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa::@1->uctoa::@6#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [198] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa::@1->uctoa::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [198] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa::@1->uctoa::@6#2] -- register_copy 
    // [198] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa::@1->uctoa::@6#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b6
    // uctoa::@6
  __b6:
    // [199] (byte~) uctoa::$4 ← (byte) uctoa::max_digits#7 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z max_digits
    dex
    stx.z __4
    // [200] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@7 -- vbuz1_lt_vbuz2_then_la1 
    lda.z digit
    cmp.z __4
    bcc __b7
    jmp __b8
    // uctoa::@8
  __b8:
    // [201] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z value
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [202] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [203] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@7
  __b7:
    // [204] (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#8 + (byte) uctoa::digit#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy.z digit
    lda (digit_values),y
    sta.z digit_value
    // [205] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@10 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b10
    jmp __b12
    // uctoa::@12
  __b12:
    // [206] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@10 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z digit_value
    bcs __b10
    // [207] phi from uctoa::@12 to uctoa::@9 [phi:uctoa::@12->uctoa::@9]
  __b9_from___b12:
    // [207] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@12->uctoa::@9#0] -- register_copy 
    // [207] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@12->uctoa::@9#1] -- register_copy 
    // [207] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@12->uctoa::@9#2] -- register_copy 
    jmp __b9
    // uctoa::@9
  __b9:
    // [208] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [198] phi from uctoa::@9 to uctoa::@6 [phi:uctoa::@9->uctoa::@6]
  __b6_from___b9:
    // [198] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@9->uctoa::@6#0] -- register_copy 
    // [198] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@9->uctoa::@6#1] -- register_copy 
    // [198] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@9->uctoa::@6#2] -- register_copy 
    // [198] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@9->uctoa::@6#3] -- register_copy 
    jmp __b6
    // uctoa::@10
  __b10:
    // [209] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z uctoa_append.buffer
    lda.z buffer_1+1
    sta.z uctoa_append.buffer+1
    // [210] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2 -- vbuz1=vbuz2 
    lda.z value
    sta.z uctoa_append.value
    // [211] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0 -- vbuz1=vbuz2 
    lda.z digit_value
    sta.z uctoa_append.sub
    // [212] call uctoa_append 
    // [216] phi from uctoa::@10 to uctoa_append [phi:uctoa::@10->uctoa_append]
  uctoa_append_from___b10:
    jsr uctoa_append
    // [213] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2 -- vbuz1=vbuz2 
    lda.z uctoa_append.value
    sta.z uctoa_append.return
    jmp __b11
    // uctoa::@11
  __b11:
    // [214] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0 -- vbuz1=vbuz2 
    lda.z uctoa_append.return
    sta.z value
    // [215] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [207] phi from uctoa::@11 to uctoa::@9 [phi:uctoa::@11->uctoa::@9]
  __b9_from___b11:
    // [207] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@11->uctoa::@9#0] -- register_copy 
    // [207] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@11->uctoa::@9#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [207] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@11->uctoa::@9#2] -- register_copy 
    jmp __b9
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($5e) buffer, byte zp($38) value, byte zp($60) sub)
uctoa_append: {
    .label buffer = $5e
    .label value = $38
    .label sub = $60
    .label return = $61
    .label digit = $39
    // [217] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [217] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [217] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [218] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [219] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [220] return 
    rts
    // uctoa_append::@2
  __b2:
    // [221] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [222] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    // [217] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [217] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [217] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // [224] call memset 
    // [38] phi from printf_cls to memset [phi:printf_cls->memset]
  memset_from_printf_cls:
    // [38] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [38] phi (void*) memset::str#3 = (void*) 1024 [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<$400
    sta.z memset.str
    lda #>$400
    sta.z memset.str+1
    // [38] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    jmp __b1
    // printf_cls::@1
  __b1:
    // [225] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z printf_cursor_ptr
    lda #>$400
    sta.z printf_cursor_ptr+1
    // [226] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [227] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_y
    jmp __breturn
    // printf_cls::@return
  __breturn:
    // [228] return 
    rts
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of binary digits
  RADIX_BINARY_VALUES_CHAR: .byte $80, $40, $20, $10, 8, 4, 2
  // Values of octal digits
  RADIX_OCTAL_VALUES_CHAR: .byte $40, 8
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_CHAR: .byte $64, $a
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES: .word $1000, $100, $10
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) printf_cursor_x ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) printf_cursor_y ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [22] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x [ printf_cursor_y printf_ln::$0 ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_y printf_ln::$0 ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_y printf_ln::$0 ] { }  main:5::printf_ln:20 [ printf_cursor_y printf_ln::$0 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:21 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Statement [23] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 [ printf_cursor_y printf_ln::$1 ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_y printf_ln::$1 ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_y printf_ln::$1 ] { }  main:5::printf_ln:20 [ printf_cursor_y printf_ln::$1 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [24] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1 [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20 [ printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [25] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [29] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20::printf_scroll:27 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:22 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:23 [ printf_padding::pad#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [34] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 [ printf_cursor_y printf_scroll::$4 ] ( main:5::printf_ln:12::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:5::printf_ln:16::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:5::printf_ln:20::printf_scroll:27 [ printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [35] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4 [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20::printf_scroll:27 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [39] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ memset::c#4 ]
Statement [40] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [41] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [43] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [45] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:6 [ memset::c#4 ]
Removing always clobbered register reg byte y as potential for zp[1]:14 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:15 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:21 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:19 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:18 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:22 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:23 [ printf_padding::pad#5 ]
Removing always clobbered register reg byte y as potential for zp[1]:24 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [49] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memcpy:31 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [51] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src#2 memcpy::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memcpy:31 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a reg byte y 
Statement [55] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] ( main:5::printf_uint:18 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { }  ) always clobbers reg byte a 
Statement [62] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ printf_number_buffer::format_min_length#2 ]
Statement [64] (word) strlen::return#2 ← (word) strlen::len#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [65] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [66] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [70] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [87] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [89] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [105] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte y 
Statement [108] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [109] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [115] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#2) [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_str:90 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a reg byte y 
Statement [126] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a reg byte y 
Statement [128] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [132] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte y 
Statement [136] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88::toupper:129 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88::toupper:129 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88::toupper:129 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [141] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:5::printf_uint:18::printf_number_buffer:58::strlen:63 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:10::printf_number_buffer:184::strlen:63 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:14::printf_number_buffer:184::strlen:63 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:13 [ printf_number_buffer::format_min_length#2 ]
Statement [148] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 utoa::$11 ] { }  ) always clobbers reg byte a 
Statement [149] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [150] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [151] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [153] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:35 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:38 [ utoa::started#2 utoa::started#4 ]
Statement [154] (word) utoa::digit_value#0 ← *((const word*) RADIX_HEXADECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [156] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [159] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [160] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [161] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [163] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [164] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { }  ) always clobbers reg byte a 
Statement [168] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:5::printf_uint:18::utoa:56::utoa_append:162 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [169] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:5::printf_uint:18::utoa:56::utoa_append:162 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:35 [ utoa::digit#2 utoa::digit#1 ]
Statement [172] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:5::printf_uint:18::utoa:56::utoa_append:162 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [174] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_sign_always#2 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_sign_always#2 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_sign_always#2 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:47 [ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:44 [ printf_schar::format_sign_always#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:45 [ printf_schar::format_radix#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ printf_schar::format_zero_padding#2 ]
Statement [177] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '+' [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  ) always clobbers reg byte a 
Statement [186] (signed byte) printf_schar::value#0 ← - (signed byte) printf_schar::value#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  ) always clobbers reg byte a 
Statement [187] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  ) always clobbers reg byte a 
Statement [192] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) ← (byte) 'e' [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [193] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 1) ← (byte) 'r' [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [194] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 2) ← (byte) 'r' [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [195] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [201] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#11 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#11 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:46 [ printf_schar::format_zero_padding#2 ]
Statement [202] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#3 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#3 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [203] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a reg byte y 
Statement [204] (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#8 + (byte) uctoa::digit#2) [ printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::started#2 uctoa::buffer#11 uctoa::digit_value#0 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::started#2 uctoa::buffer#11 uctoa::digit_value#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::started#2 uctoa::buffer#11 uctoa::digit_value#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:48 [ uctoa::max_digits#7 ]
Removing always clobbered register reg byte a as potential for zp[1]:51 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:52 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:53 [ uctoa::started#2 uctoa::started#4 ]
Statement [209] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:93 [ uctoa::digit_value#0 ]
Statement [219] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:5::printf_schar:10::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:5::printf_schar:14::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:48 [ uctoa::max_digits#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:51 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:56 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:56 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Statement [222] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:5::printf_schar:10::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:5::printf_schar:14::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:96 [ uctoa_append::sub#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:57 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Statement [225] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [226] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_x printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [227] (byte) printf_cursor_y ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [1] (byte) printf_cursor_x ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) printf_cursor_y ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [22] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x [ printf_cursor_y printf_ln::$0 ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_y printf_ln::$0 ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_y printf_ln::$0 ] { }  main:5::printf_ln:20 [ printf_cursor_y printf_ln::$0 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [23] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 [ printf_cursor_y printf_ln::$1 ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_y printf_ln::$1 ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_y printf_ln::$1 ] { }  main:5::printf_ln:20 [ printf_cursor_y printf_ln::$1 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [24] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1 [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20 [ printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [25] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [29] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20::printf_scroll:27 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [34] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 [ printf_cursor_y printf_scroll::$4 ] ( main:5::printf_ln:12::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:5::printf_ln:16::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:5::printf_ln:20::printf_scroll:27 [ printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [35] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4 [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20::printf_scroll:27 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [39] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Statement [40] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [41] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [43] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [45] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [49] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memcpy:31 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [51] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src#2 memcpy::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memcpy:31 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a reg byte y 
Statement [55] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] ( main:5::printf_uint:18 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { }  ) always clobbers reg byte a 
Statement [62] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [64] (word) strlen::return#2 ← (word) strlen::len#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [65] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [66] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [70] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [87] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [89] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [105] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte y 
Statement [108] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [109] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [115] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#2) [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_str:90 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a reg byte y 
Statement [126] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a reg byte y 
Statement [128] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [132] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte y 
Statement [136] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88::toupper:129 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88::toupper:129 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88::toupper:129 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [141] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:5::printf_uint:18::printf_number_buffer:58::strlen:63 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:10::printf_number_buffer:184::strlen:63 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:14::printf_number_buffer:184::strlen:63 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [148] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 utoa::$11 ] { }  ) always clobbers reg byte a 
Statement [149] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [150] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [151] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [153] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { }  ) always clobbers reg byte a 
Statement [154] (word) utoa::digit_value#0 ← *((const word*) RADIX_HEXADECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [156] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [159] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [160] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [161] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [163] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [164] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { }  ) always clobbers reg byte a 
Statement [168] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:5::printf_uint:18::utoa:56::utoa_append:162 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [169] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:5::printf_uint:18::utoa:56::utoa_append:162 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [172] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:5::printf_uint:18::utoa:56::utoa_append:162 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [174] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_sign_always#2 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_sign_always#2 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_sign_always#2 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  ) always clobbers reg byte a 
Statement [177] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '+' [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  ) always clobbers reg byte a 
Statement [186] (signed byte) printf_schar::value#0 ← - (signed byte) printf_schar::value#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  ) always clobbers reg byte a 
Statement [187] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  ) always clobbers reg byte a 
Statement [192] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) ← (byte) 'e' [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [193] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 1) ← (byte) 'r' [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [194] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 2) ← (byte) 'r' [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [195] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [201] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#11 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#11 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a reg byte y 
Statement [202] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#3 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#3 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [203] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a reg byte y 
Statement [204] (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#8 + (byte) uctoa::digit#2) [ printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::started#2 uctoa::buffer#11 uctoa::digit_value#0 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::started#2 uctoa::buffer#11 uctoa::digit_value#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::started#2 uctoa::buffer#11 uctoa::digit_value#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:52 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:53 [ uctoa::started#2 uctoa::started#4 ]
Statement [209] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [219] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:5::printf_schar:10::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:5::printf_schar:14::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [222] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:5::printf_schar:10::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:5::printf_schar:14::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [225] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [226] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_x printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [227] (byte) printf_cursor_y ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [1] (byte) printf_cursor_x ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) printf_cursor_y ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [22] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x [ printf_cursor_y printf_ln::$0 ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_y printf_ln::$0 ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_y printf_ln::$0 ] { }  main:5::printf_ln:20 [ printf_cursor_y printf_ln::$0 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [23] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 [ printf_cursor_y printf_ln::$1 ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_y printf_ln::$1 ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_y printf_ln::$1 ] { }  main:5::printf_ln:20 [ printf_cursor_y printf_ln::$1 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [24] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1 [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20 [ printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [25] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [29] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20::printf_scroll:27 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [34] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 [ printf_cursor_y printf_scroll::$4 ] ( main:5::printf_ln:12::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:5::printf_ln:16::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:5::printf_ln:20::printf_scroll:27 [ printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [35] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4 [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_ln:12::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:16::printf_scroll:27 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_ln:20::printf_scroll:27 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [39] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Statement [40] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [41] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [43] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [45] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memset:33 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memset:33 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memset:33 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memset:33 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_cls:8::memset:224 [ printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [49] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memcpy:31 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [51] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src#2 memcpy::dst#2 ] ( main:5::printf_ln:12::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:16::printf_scroll:27::memcpy:31 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_ln:20::printf_scroll:27::memcpy:31 [ printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_ln:123::printf_scroll:27::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102::printf_scroll:111::memcpy:31 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121::printf_scroll:111::memcpy:31 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a reg byte y 
Statement [55] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] ( main:5::printf_uint:18 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { }  ) always clobbers reg byte a 
Statement [62] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [64] (word) strlen::return#2 ← (word) strlen::len#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [65] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [66] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [70] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [87] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [89] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] ( main:5::printf_uint:18::printf_number_buffer:58 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [105] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte y 
Statement [108] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [109] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_char:81 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:78::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:85::printf_char:102 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_padding:95::printf_char:102 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:5::printf_uint:18::printf_number_buffer:58::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90::printf_char:121 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [115] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#2) [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] ( main:5::printf_uint:18::printf_number_buffer:58::printf_str:90 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::printf_str:90 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::printf_str:90 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#2 printf_str::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a reg byte y 
Statement [126] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a reg byte y 
Statement [128] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [132] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte y 
Statement [136] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:5::printf_uint:18::printf_number_buffer:58::strupr:88::toupper:129 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:10::printf_number_buffer:184::strupr:88::toupper:129 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:5::printf_schar:14::printf_number_buffer:184::strupr:88::toupper:129 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [141] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:5::printf_uint:18::printf_number_buffer:58::strlen:63 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:10::printf_number_buffer:184::strlen:63 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:5::printf_schar:14::printf_number_buffer:184::strlen:63 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 printf_schar::format_zero_padding#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [148] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 utoa::$11 ] { }  ) always clobbers reg byte a 
Statement [149] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [150] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [151] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [153] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { }  ) always clobbers reg byte a 
Statement [154] (word) utoa::digit_value#0 ← *((const word*) RADIX_HEXADECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [156] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [159] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [160] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [161] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [163] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [164] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:5::printf_uint:18::utoa:56 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { }  ) always clobbers reg byte a 
Statement [168] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:5::printf_uint:18::utoa:56::utoa_append:162 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [169] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:5::printf_uint:18::utoa:56::utoa_append:162 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [172] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:5::printf_uint:18::utoa:56::utoa_append:162 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [174] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_sign_always#2 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_sign_always#2 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_sign_always#2 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  ) always clobbers reg byte a 
Statement [177] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '+' [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::value#3 printf_schar::format_radix#2 printf_schar::format_zero_padding#2 ] { }  ) always clobbers reg byte a 
Statement [186] (signed byte) printf_schar::value#0 ← - (signed byte) printf_schar::value#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  ) always clobbers reg byte a 
Statement [187] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] ( main:5::printf_schar:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  main:5::printf_schar:14 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_schar::format_radix#2 printf_schar::format_zero_padding#2 printf_schar::value#0 ] { }  ) always clobbers reg byte a 
Statement [192] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) ← (byte) 'e' [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [193] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 1) ← (byte) 'r' [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [194] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 2) ← (byte) 'r' [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [195] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [201] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#11 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#11 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a reg byte y 
Statement [202] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#3 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::buffer#3 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a 
Statement [203] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a reg byte y 
Statement [204] (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#8 + (byte) uctoa::digit#2) [ printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::started#2 uctoa::buffer#11 uctoa::digit_value#0 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::started#2 uctoa::buffer#11 uctoa::digit_value#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::started#2 uctoa::buffer#11 uctoa::digit_value#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } }  ) always clobbers reg byte a reg byte y 
Statement [209] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:5::printf_schar:10::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:5::printf_schar:14::uctoa:181 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [219] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:5::printf_schar:10::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:5::printf_schar:14::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [222] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:5::printf_schar:10::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:5::printf_schar:14::uctoa:181::uctoa_append:212 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_schar::format_zero_padding#2 printf_buffer uctoa::max_digits#7 uctoa::digit_values#8 uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { uctoa::radix#0 = printf_schar::format_radix#2 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [225] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [226] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_x printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [227] (byte) printf_cursor_y ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ memset::num#2 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ memset::str#3 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ memset::c#4 ] : zp[1]:6 , reg byte x , 
Potential registers zp[2]:7 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ memcpy::src#2 memcpy::src#1 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ memcpy::dst#2 memcpy::dst#1 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ printf_number_buffer::format_min_length#2 ] : zp[1]:13 , reg byte x , 
Potential registers zp[1]:14 [ printf_number_buffer::format_justify_left#10 ] : zp[1]:14 , reg byte x , 
Potential registers zp[1]:15 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ] : zp[1]:15 , reg byte x , 
Potential registers zp[2]:16 [ printf_number_buffer::buffer_digits#10 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] : zp[1]:18 , reg byte x , 
Potential registers zp[1]:19 [ printf_number_buffer::format_upper_case#10 ] : zp[1]:19 , reg byte x , 
Potential registers zp[1]:20 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] : zp[1]:21 , reg byte x , 
Potential registers zp[1]:22 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] : zp[1]:22 , reg byte x , 
Potential registers zp[1]:23 [ printf_padding::pad#5 ] : zp[1]:23 , reg byte x , 
Potential registers zp[1]:24 [ printf_padding::i#2 printf_padding::i#1 ] : zp[1]:24 , reg byte x , 
Potential registers zp[1]:25 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:26 [ printf_str::str#2 printf_str::str#1 printf_str::str#0 ] : zp[2]:26 , 
Potential registers zp[2]:28 [ strupr::src#2 strupr::str#0 strupr::src#1 ] : zp[2]:28 , 
Potential registers zp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 ] : zp[2]:31 , 
Potential registers zp[2]:33 [ strlen::len#2 strlen::len#1 ] : zp[2]:33 , 
Potential registers zp[1]:35 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:35 , reg byte x , 
Potential registers zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 ] : zp[2]:36 , 
Potential registers zp[1]:38 [ utoa::started#2 utoa::started#4 ] : zp[1]:38 , reg byte x , reg byte y , 
Potential registers zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:41 , 
Potential registers zp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:43 , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ printf_schar::format_sign_always#2 ] : zp[1]:44 , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ printf_schar::format_radix#2 ] : zp[1]:45 , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ printf_schar::format_zero_padding#2 ] : zp[1]:46 , reg byte x , 
Potential registers zp[1]:47 [ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 ] : zp[1]:47 , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ uctoa::max_digits#7 ] : zp[1]:48 , reg byte x , 
Potential registers zp[2]:49 [ uctoa::digit_values#8 ] : zp[2]:49 , 
Potential registers zp[1]:51 [ uctoa::digit#2 uctoa::digit#1 ] : zp[1]:51 , reg byte x , 
Potential registers zp[1]:52 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] : zp[1]:52 , reg byte x , 
Potential registers zp[1]:53 [ uctoa::started#2 uctoa::started#4 ] : zp[1]:53 , reg byte x , 
Potential registers zp[2]:54 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] : zp[2]:54 , 
Potential registers zp[1]:56 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] : zp[1]:56 , reg byte x , 
Potential registers zp[1]:57 [ uctoa_append::digit#2 uctoa_append::digit#1 ] : zp[1]:57 , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ printf_cursor_x ] : zp[1]:58 , 
Potential registers zp[1]:59 [ printf_cursor_y ] : zp[1]:59 , 
Potential registers zp[2]:60 [ printf_cursor_ptr ] : zp[2]:60 , 
Potential registers zp[2]:62 [ printf_ln::$0 ] : zp[2]:62 , 
Potential registers zp[2]:64 [ printf_ln::$1 ] : zp[2]:64 , 
Potential registers zp[2]:66 [ printf_scroll::$4 ] : zp[2]:66 , 
Potential registers zp[2]:68 [ memset::end#0 ] : zp[2]:68 , 
Potential registers zp[2]:70 [ strlen::return#2 ] : zp[2]:70 , 
Potential registers zp[2]:72 [ printf_number_buffer::$19 ] : zp[2]:72 , 
Potential registers zp[1]:74 [ printf_str::ch#0 ] : zp[1]:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:75 [ toupper::return#3 ] : zp[1]:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:76 [ strupr::$0 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ utoa::$11 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:78 [ utoa::buffer#3 ] : zp[2]:78 , 
Potential registers zp[1]:80 [ utoa::$10 ] : zp[1]:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:81 [ utoa::digit_value#0 ] : zp[2]:81 , 
Potential registers zp[2]:83 [ utoa_append::buffer#0 ] : zp[2]:83 , 
Potential registers zp[2]:85 [ utoa_append::sub#0 ] : zp[2]:85 , 
Potential registers zp[2]:87 [ utoa_append::return#0 ] : zp[2]:87 , 
Potential registers zp[1]:89 [ uctoa::radix#0 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:90 [ uctoa::$4 ] : zp[1]:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:91 [ uctoa::buffer#3 ] : zp[2]:91 , 
Potential registers zp[1]:93 [ uctoa::digit_value#0 ] : zp[1]:93 , reg byte x , reg byte y , 
Potential registers zp[2]:94 [ uctoa_append::buffer#0 ] : zp[2]:94 , 
Potential registers zp[1]:96 [ uctoa_append::sub#0 ] : zp[1]:96 , reg byte x , reg byte y , 
Potential registers zp[1]:97 [ uctoa_append::return#0 ] : zp[1]:97 , reg byte a , reg byte x , reg byte y , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 30,000,000,003: zp[2]:9 [ memcpy::src#2 memcpy::src#1 ] 20,000,000,002: zp[2]:11 [ memcpy::dst#2 memcpy::dst#1 ] 
Uplift Scope [memset] 3,566,666,672.33: zp[2]:7 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 183,333,333.67: zp[2]:68 [ memset::end#0 ] 125,000,000.12: zp[1]:6 [ memset::c#4 ] 100,000,001: zp[2]:2 [ memset::num#2 ] 0: zp[2]:4 [ memset::str#3 ] 
Uplift Scope [uctoa_append] 25,055,003.5: zp[1]:56 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] 20,050,002.5: zp[1]:57 [ uctoa_append::digit#2 uctoa_append::digit#1 ] 3,335,000.5: zp[1]:96 [ uctoa_append::sub#0 ] 20,002: zp[1]:97 [ uctoa_append::return#0 ] 13,750.25: zp[2]:94 [ uctoa_append::buffer#0 ] 
Uplift Scope [utoa_append] 25,055,003.5: zp[2]:41 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 20,050,002.5: zp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 ] 3,335,000.5: zp[2]:85 [ utoa_append::sub#0 ] 20,002: zp[2]:87 [ utoa_append::return#0 ] 13,750.25: zp[2]:83 [ utoa_append::buffer#0 ] 
Uplift Scope [printf_scroll] 20,000,002: zp[2]:66 [ printf_scroll::$4 ] 
Uplift Scope [toupper] 4,733,338.67: zp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] 200,002: zp[1]:75 [ toupper::return#3 ] 
Uplift Scope [printf_ln] 2,000,002: zp[2]:62 [ printf_ln::$0 ] 2,000,002: zp[2]:64 [ printf_ln::$1 ] 
Uplift Scope [printf_char] 1,603,010: zp[1]:25 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ] 
Uplift Scope [] 295,653.13: zp[1]:59 [ printf_cursor_y ] 219,299.21: zp[2]:60 [ printf_cursor_ptr ] 57,693.36: zp[1]:58 [ printf_cursor_x ] 0: mem[12] [ printf_buffer ] 
Uplift Scope [strupr] 278,361: zp[2]:28 [ strupr::src#2 strupr::str#0 strupr::src#1 ] 200,002: zp[1]:76 [ strupr::$0 ] 
Uplift Scope [strlen] 308,837.67: zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 ] 150,251.75: zp[2]:33 [ strlen::len#2 strlen::len#1 ] 2,002: zp[2]:70 [ strlen::return#2 ] 
Uplift Scope [printf_str] 253,361.07: zp[2]:26 [ printf_str::str#2 printf_str::str#1 printf_str::str#0 ] 100,001: zp[1]:74 [ printf_str::ch#0 ] 
Uplift Scope [printf_padding] 275,002.75: zp[1]:24 [ printf_padding::i#2 printf_padding::i#1 ] 23,173.33: zp[1]:22 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] 16,666.83: zp[1]:23 [ printf_padding::pad#5 ] 
Uplift Scope [uctoa] 38,234.73: zp[2]:54 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] 31,160.79: zp[1]:52 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] 22,859.43: zp[1]:51 [ uctoa::digit#2 uctoa::digit#1 ] 20,002: zp[1]:90 [ uctoa::$4 ] 15,001.5: zp[1]:53 [ uctoa::started#2 uctoa::started#4 ] 6,000.6: zp[1]:93 [ uctoa::digit_value#0 ] 2,002: zp[2]:91 [ uctoa::buffer#3 ] 1,026.25: zp[1]:89 [ uctoa::radix#0 ] 625.06: zp[1]:48 [ uctoa::max_digits#7 ] 625.06: zp[2]:49 [ uctoa::digit_values#8 ] 
Uplift Scope [utoa] 38,003.93: zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 30,717.36: zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 ] 22,859.43: zp[1]:35 [ utoa::digit#2 utoa::digit#1 ] 20,002: zp[1]:80 [ utoa::$10 ] 15,001.5: zp[1]:38 [ utoa::started#2 utoa::started#4 ] 6,000.6: zp[2]:81 [ utoa::digit_value#0 ] 2,002: zp[1]:77 [ utoa::$11 ] 2,002: zp[2]:78 [ utoa::buffer#3 ] 
Uplift Scope [printf_number_buffer] 6,506.5: zp[1]:20 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] 1,191.67: zp[1]:21 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] 1,001: zp[2]:72 [ printf_number_buffer::$19 ] 463.25: zp[1]:18 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] 299: zp[1]:15 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ] 103.55: zp[2]:16 [ printf_number_buffer::buffer_digits#10 ] 100.1: zp[1]:13 [ printf_number_buffer::format_min_length#2 ] 64.58: zp[1]:14 [ printf_number_buffer::format_justify_left#10 ] 38.5: zp[1]:19 [ printf_number_buffer::format_upper_case#10 ] 
Uplift Scope [printf_schar] 484.8: zp[1]:47 [ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 ] 33.67: zp[1]:44 [ printf_schar::format_sign_always#2 ] 11.22: zp[1]:45 [ printf_schar::format_radix#2 ] 8.42: zp[1]:46 [ printf_schar::format_zero_padding#2 ] 
Uplift Scope [RADIX] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [printf_cls] 
Uplift Scope [printf_uint] 
Uplift Scope [main] 

Uplifting [memcpy] best 25828 combination zp[2]:9 [ memcpy::src#2 memcpy::src#1 ] zp[2]:11 [ memcpy::dst#2 memcpy::dst#1 ] 
Uplifting [memset] best 25812 combination zp[2]:7 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:68 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:2 [ memset::num#2 ] zp[2]:4 [ memset::str#3 ] 
Uplifting [uctoa_append] best 24589 combination reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ] zp[1]:96 [ uctoa_append::sub#0 ] reg byte x [ uctoa_append::return#0 ] zp[2]:94 [ uctoa_append::buffer#0 ] 
Uplifting [utoa_append] best 23986 combination zp[2]:41 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:85 [ utoa_append::sub#0 ] zp[2]:87 [ utoa_append::return#0 ] zp[2]:83 [ utoa_append::buffer#0 ] 
Uplifting [printf_scroll] best 23986 combination zp[2]:66 [ printf_scroll::$4 ] 
Uplifting [toupper] best 23859 combination reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ] reg byte a [ toupper::return#3 ] 
Uplifting [printf_ln] best 23859 combination zp[2]:62 [ printf_ln::$0 ] zp[2]:64 [ printf_ln::$1 ] 
Uplifting [printf_char] best 23793 combination reg byte a [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ] 
Uplifting [] best 23793 combination zp[1]:59 [ printf_cursor_y ] zp[2]:60 [ printf_cursor_ptr ] zp[1]:58 [ printf_cursor_x ] mem[12] [ printf_buffer ] 
Uplifting [strupr] best 23733 combination zp[2]:28 [ strupr::src#2 strupr::str#0 strupr::src#1 ] reg byte a [ strupr::$0 ] 
Uplifting [strlen] best 23733 combination zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 ] zp[2]:33 [ strlen::len#2 strlen::len#1 ] zp[2]:70 [ strlen::return#2 ] 
Uplifting [printf_str] best 23613 combination zp[2]:26 [ printf_str::str#2 printf_str::str#1 printf_str::str#0 ] reg byte a [ printf_str::ch#0 ] 
Uplifting [printf_padding] best 23613 combination zp[1]:24 [ printf_padding::i#2 printf_padding::i#1 ] zp[1]:22 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] zp[1]:23 [ printf_padding::pad#5 ] 
Uplifting [uctoa] best 23492 combination zp[2]:54 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] zp[1]:51 [ uctoa::digit#2 uctoa::digit#1 ] reg byte a [ uctoa::$4 ] zp[1]:53 [ uctoa::started#2 uctoa::started#4 ] reg byte y [ uctoa::digit_value#0 ] zp[2]:91 [ uctoa::buffer#3 ] zp[1]:89 [ uctoa::radix#0 ] zp[1]:48 [ uctoa::max_digits#7 ] zp[2]:49 [ uctoa::digit_values#8 ] 
Limited combination testing to 100 combinations of 768 possible.
Uplifting [utoa] best 23358 combination zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 ] zp[1]:35 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:81 [ utoa::digit_value#0 ] reg byte a [ utoa::$11 ] zp[2]:78 [ utoa::buffer#3 ] 
Uplifting [printf_number_buffer] best 23347 combination reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] zp[1]:21 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] zp[2]:72 [ printf_number_buffer::$19 ] zp[1]:18 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] zp[1]:15 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ] zp[2]:16 [ printf_number_buffer::buffer_digits#10 ] reg byte x [ printf_number_buffer::format_min_length#2 ] zp[1]:14 [ printf_number_buffer::format_justify_left#10 ] zp[1]:19 [ printf_number_buffer::format_upper_case#10 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [printf_schar] best 23326 combination reg byte x [ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 ] reg byte y [ printf_schar::format_sign_always#2 ] zp[1]:45 [ printf_schar::format_radix#2 ] zp[1]:46 [ printf_schar::format_zero_padding#2 ] 
Uplifting [RADIX] best 23326 combination 
Uplifting [printf_format_number] best 23326 combination 
Uplifting [printf_buffer_number] best 23326 combination 
Uplifting [printf_format_string] best 23326 combination 
Uplifting [printf_cls] best 23326 combination 
Uplifting [printf_uint] best 23326 combination 
Uplifting [main] best 23326 combination 
Attempting to uplift remaining variables inzp[1]:96 [ uctoa_append::sub#0 ]
Uplifting [uctoa_append] best 23326 combination zp[1]:96 [ uctoa_append::sub#0 ] 
Attempting to uplift remaining variables inzp[1]:59 [ printf_cursor_y ]
Uplifting [] best 23326 combination zp[1]:59 [ printf_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:24 [ printf_padding::i#2 printf_padding::i#1 ]
Uplifting [printf_padding] best 23326 combination zp[1]:24 [ printf_padding::i#2 printf_padding::i#1 ] 
Attempting to uplift remaining variables inzp[1]:58 [ printf_cursor_x ]
Uplifting [] best 23326 combination zp[1]:58 [ printf_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:22 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Uplifting [printf_padding] best 23326 combination zp[1]:22 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] 
Attempting to uplift remaining variables inzp[1]:35 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 23326 combination zp[1]:35 [ utoa::digit#2 utoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:51 [ uctoa::digit#2 uctoa::digit#1 ]
Uplifting [uctoa] best 23326 combination zp[1]:51 [ uctoa::digit#2 uctoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:23 [ printf_padding::pad#5 ]
Uplifting [printf_padding] best 23326 combination zp[1]:23 [ printf_padding::pad#5 ] 
Attempting to uplift remaining variables inzp[1]:53 [ uctoa::started#2 uctoa::started#4 ]
Uplifting [uctoa] best 23326 combination zp[1]:53 [ uctoa::started#2 uctoa::started#4 ] 
Attempting to uplift remaining variables inzp[1]:21 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Uplifting [printf_number_buffer] best 23326 combination zp[1]:21 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] 
Attempting to uplift remaining variables inzp[1]:89 [ uctoa::radix#0 ]
Uplifting [uctoa] best 23311 combination reg byte a [ uctoa::radix#0 ] 
Attempting to uplift remaining variables inzp[1]:48 [ uctoa::max_digits#7 ]
Uplifting [uctoa] best 23311 combination zp[1]:48 [ uctoa::max_digits#7 ] 
Attempting to uplift remaining variables inzp[1]:18 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Uplifting [printf_number_buffer] best 23311 combination zp[1]:18 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] 
Attempting to uplift remaining variables inzp[1]:15 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ]
Uplifting [printf_number_buffer] best 23311 combination zp[1]:15 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ] 
Attempting to uplift remaining variables inzp[1]:14 [ printf_number_buffer::format_justify_left#10 ]
Uplifting [printf_number_buffer] best 23311 combination zp[1]:14 [ printf_number_buffer::format_justify_left#10 ] 
Attempting to uplift remaining variables inzp[1]:19 [ printf_number_buffer::format_upper_case#10 ]
Uplifting [printf_number_buffer] best 23311 combination zp[1]:19 [ printf_number_buffer::format_upper_case#10 ] 
Attempting to uplift remaining variables inzp[1]:45 [ printf_schar::format_radix#2 ]
Uplifting [printf_schar] best 23311 combination zp[1]:45 [ printf_schar::format_radix#2 ] 
Attempting to uplift remaining variables inzp[1]:46 [ printf_schar::format_zero_padding#2 ]
Uplifting [printf_schar] best 23311 combination zp[1]:46 [ printf_schar::format_zero_padding#2 ] 
Coalescing zero page register [ zp[2]:60 [ printf_cursor_ptr ] ] with [ zp[2]:66 [ printf_scroll::$4 ] ] - score: 2
Coalescing zero page register [ zp[2]:2 [ memset::num#2 ] ] with [ zp[2]:68 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:4 [ memset::str#3 ] ] with [ zp[2]:7 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:15 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 ] ] with [ zp[1]:46 [ printf_schar::format_zero_padding#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ printf_number_buffer::buffer_digits#10 ] ] with [ zp[2]:26 [ printf_str::str#2 printf_str::str#1 printf_str::str#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ strlen::len#2 strlen::len#1 ] ] with [ zp[2]:70 [ strlen::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 ] ] with [ zp[2]:41 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:87 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:78 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:83 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] ] with [ zp[2]:91 [ uctoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 ] ] with [ zp[2]:94 [ uctoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:60 [ printf_cursor_ptr printf_scroll::$4 ] ] with [ zp[2]:62 [ printf_ln::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:60 [ printf_cursor_ptr printf_scroll::$4 printf_ln::$0 ] ] with [ zp[2]:64 [ printf_ln::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:81 [ utoa::digit_value#0 ] ] with [ zp[2]:85 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ strlen::len#2 strlen::len#1 strlen::return#2 ] ] with [ zp[2]:72 [ printf_number_buffer::$19 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ memcpy::src#2 memcpy::src#1 ] ] with [ zp[2]:2 [ memset::num#2 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:11 [ memcpy::dst#2 memcpy::dst#1 ] ] with [ zp[2]:4 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 ] ] with [ zp[2]:28 [ strupr::src#2 strupr::str#0 strupr::src#1 ] ]
Coalescing zero page register [ zp[1]:35 [ utoa::digit#2 utoa::digit#1 ] ] with [ zp[1]:14 [ printf_number_buffer::format_justify_left#10 ] ]
Coalescing zero page register [ zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:16 [ printf_number_buffer::buffer_digits#10 printf_str::str#2 printf_str::str#1 printf_str::str#0 ] ]
Coalescing zero page register [ zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ] with [ zp[2]:33 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ]
Coalescing zero page register [ zp[1]:45 [ printf_schar::format_radix#2 ] ] with [ zp[1]:18 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] ]
Coalescing zero page register [ zp[1]:48 [ uctoa::max_digits#7 ] ] with [ zp[1]:19 [ printf_number_buffer::format_upper_case#10 ] ]
Coalescing zero page register [ zp[1]:51 [ uctoa::digit#2 uctoa::digit#1 ] ] with [ zp[1]:21 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] ]
Coalescing zero page register [ zp[1]:53 [ uctoa::started#2 uctoa::started#4 ] ] with [ zp[1]:22 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] ]
Coalescing zero page register [ zp[2]:81 [ utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:49 [ uctoa::digit_values#8 ] ]
Coalescing zero page register [ zp[1]:96 [ uctoa_append::sub#0 ] ] with [ zp[1]:23 [ printf_padding::pad#5 ] ]
Coalescing zero page register [ zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 strupr::src#2 strupr::str#0 strupr::src#1 ] ] with [ zp[2]:9 [ memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ] with [ zp[2]:11 [ memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:54 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ] ] with [ zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_number_buffer::buffer_digits#10 printf_str::str#2 printf_str::str#1 printf_str::str#0 ] ]
Coalescing zero page register [ zp[2]:81 [ utoa::digit_value#0 utoa_append::sub#0 uctoa::digit_values#8 ] ] with [ zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 strupr::src#2 strupr::str#0 strupr::src#1 memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ] ]
Allocated (was zp[1]:15) zp[1]:2 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 printf_schar::format_zero_padding#2 ]
Allocated (was zp[1]:24) zp[1]:3 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated (was zp[1]:35) zp[1]:4 [ utoa::digit#2 utoa::digit#1 printf_number_buffer::format_justify_left#10 ]
Allocated (was zp[2]:39) zp[2]:5 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[1]:45) zp[1]:7 [ printf_schar::format_radix#2 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated (was zp[1]:48) zp[1]:8 [ uctoa::max_digits#7 printf_number_buffer::format_upper_case#10 ]
Allocated (was zp[1]:51) zp[1]:9 [ uctoa::digit#2 uctoa::digit#1 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated (was zp[1]:53) zp[1]:10 [ uctoa::started#2 uctoa::started#4 printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated (was zp[2]:54) zp[2]:11 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_number_buffer::buffer_digits#10 printf_str::str#2 printf_str::str#1 printf_str::str#0 ]
Allocated (was zp[1]:58) zp[1]:13 [ printf_cursor_x ]
Allocated (was zp[1]:59) zp[1]:14 [ printf_cursor_y ]
Allocated (was zp[2]:60) zp[2]:15 [ printf_cursor_ptr printf_scroll::$4 printf_ln::$0 printf_ln::$1 ]
Allocated (was zp[2]:81) zp[2]:17 [ utoa::digit_value#0 utoa_append::sub#0 uctoa::digit_values#8 strlen::str#2 strlen::str#1 strlen::str#0 strupr::src#2 strupr::str#0 strupr::src#1 memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ]
Allocated (was zp[1]:96) zp[1]:19 [ uctoa_append::sub#0 printf_padding::pad#5 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests printf implementation
// Format a number
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const BINARY = 2
  .const OCTAL = 8
  .const DECIMAL = $a
  .const HEXADECIMAL = $10
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  .label printf_cursor_x = $d
  .label printf_cursor_y = $e
  .label printf_cursor_ptr = $f
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // X-position of cursor
  lda #0
  sta.z printf_cursor_x
  // [2] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // Y-position of cursor
  lda #0
  sta.z printf_cursor_y
  // [3] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
  // Pointer to cursor address
  lda #<$400
  sta.z printf_cursor_ptr
  lda #>$400
  sta.z printf_cursor_ptr+1
  // [4] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [5] call main 
  // [7] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [6] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [8] call printf_cls 
    // [223] phi from main to printf_cls [phi:main->printf_cls]
  printf_cls_from_main:
    jsr printf_cls
    // [9] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [10] call printf_schar 
    // [173] phi from main::@1 to printf_schar [phi:main::@1->printf_schar]
  printf_schar_from___b1:
    // [173] phi (byte) printf_schar::format_zero_padding#2 = (byte) 0 [phi:main::@1->printf_schar#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_schar.format_zero_padding
    // [173] phi (byte) printf_schar::format_radix#2 = (const byte) DECIMAL [phi:main::@1->printf_schar#1] -- vbuz1=vbuc1 
    lda #DECIMAL
    sta.z printf_schar.format_radix
    // [173] phi (byte) printf_schar::format_sign_always#2 = (byte) 0 [phi:main::@1->printf_schar#2] -- vbuyy=vbuc1 
    ldy #0
    // [173] phi (signed byte) printf_schar::value#3 = (signed byte) -$4d [phi:main::@1->printf_schar#3] -- vbsxx=vbsc1 
    ldx #-$4d
    jsr printf_schar
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [12] call printf_ln 
    jsr printf_ln
    // [13] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [14] call printf_schar 
    // [173] phi from main::@3 to printf_schar [phi:main::@3->printf_schar]
  printf_schar_from___b3:
    // [173] phi (byte) printf_schar::format_zero_padding#2 = (byte) 1 [phi:main::@3->printf_schar#0] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_schar.format_zero_padding
    // [173] phi (byte) printf_schar::format_radix#2 = (const byte) OCTAL [phi:main::@3->printf_schar#1] -- vbuz1=vbuc1 
    lda #OCTAL
    sta.z printf_schar.format_radix
    // [173] phi (byte) printf_schar::format_sign_always#2 = (byte) 1 [phi:main::@3->printf_schar#2] -- vbuyy=vbuc1 
    ldy #1
    // [173] phi (signed byte) printf_schar::value#3 = (signed byte) $63 [phi:main::@3->printf_schar#3] -- vbsxx=vbsc1 
    ldx #$63
    jsr printf_schar
    // [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [16] call printf_ln 
    jsr printf_ln
    // [17] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [18] call printf_uint 
    // [54] phi from main::@5 to printf_uint [phi:main::@5->printf_uint]
  printf_uint_from___b5:
    jsr printf_uint
    // [19] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [20] call printf_ln 
    jsr printf_ln
    jmp __breturn
    // main::@return
  __breturn:
    // [21] return 
    rts
}
  // printf_ln
// Print a newline
printf_ln: {
    .label __0 = $f
    .label __1 = $f
    // [22] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __0
    sbc.z printf_cursor_x
    sta.z __0
    bcs !+
    dec.z __0+1
  !:
    // [23] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __1
    sta.z __1
    bcc !+
    inc.z __1+1
  !:
    // [24] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
    // [25] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [26] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // [27] call printf_scroll 
    jsr printf_scroll
    jmp __breturn
    // printf_ln::@return
  __breturn:
    // [28] return 
    rts
}
  // printf_scroll
// Scroll the entire screen if the cursor is on the last line
printf_scroll: {
    .label __4 = $f
    // [29] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z printf_cursor_y
    bne __breturn
    // [30] phi from printf_scroll to printf_scroll::@1 [phi:printf_scroll->printf_scroll::@1]
  __b1_from_printf_scroll:
    jmp __b1
    // printf_scroll::@1
  __b1:
    // [31] call memcpy 
    // [47] phi from printf_scroll::@1 to memcpy [phi:printf_scroll::@1->memcpy]
  memcpy_from___b1:
    jsr memcpy
    // [32] phi from printf_scroll::@1 to printf_scroll::@2 [phi:printf_scroll::@1->printf_scroll::@2]
  __b2_from___b1:
    jmp __b2
    // printf_scroll::@2
  __b2:
    // [33] call memset 
    // [38] phi from printf_scroll::@2 to memset [phi:printf_scroll::@2->memset]
  memset_from___b2:
    // [38] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_scroll::@2->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [38] phi (void*) memset::str#3 = (void*)(number) $400+(number) $28*(number) $19-(number) $28 [phi:printf_scroll::@2->memset#1] -- pvoz1=pvoc1 
    lda #<$400+$28*$19-$28
    sta.z memset.str
    lda #>$400+$28*$19-$28
    sta.z memset.str+1
    // [38] phi (word) memset::num#2 = (byte) $28 [phi:printf_scroll::@2->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b3
    // printf_scroll::@3
  __b3:
    // [34] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __4
    sec
    sbc #<$28
    sta.z __4
    lda.z __4+1
    sbc #>$28
    sta.z __4+1
    // [35] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
    // [36] (byte) printf_cursor_y ← -- (byte) printf_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z printf_cursor_y
    jmp __breturn
    // printf_scroll::@return
  __breturn:
    // [37] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(5) str, byte register(X) c, word zp($11) num)
memset: {
    .label end = $11
    .label dst = 5
    .label num = $11
    .label str = 5
    // [39] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [40] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [41] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [42] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [42] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [43] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [44] return 
    rts
    // memset::@3
  __b3:
    // [45] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [46] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = $400
    .label source = $400+$28
    .const num = $28*$19-$28
    .label src_end = source+num
    .label dst = 5
    .label src = $11
    // [48] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
  __b1_from_memcpy:
    // [48] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [48] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    jmp __b1
    // memcpy::@1
  __b1:
    // [49] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [50] return 
    rts
    // memcpy::@2
  __b2:
    // [51] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [52] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [53] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [48] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
  __b1_from___b2:
    // [48] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [48] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .label uvalue = $d80
    .const format_min_length = $a
    .const format_justify_left = 1
    .const format_zero_padding = 0
    .const format_upper_case = 1
    jmp __b1
    // printf_uint::@1
  __b1:
    // [55] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [56] call utoa 
  // Format number into buffer
    // [145] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [57] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [58] call printf_number_buffer 
  // Print using format
    // [60] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [60] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [60] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [60] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_uint::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [60] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [60] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [60] phi (byte) printf_number_buffer::format_min_length#2 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#5] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [59] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp(7) buffer_sign, byte* zp($b) buffer_digits, byte register(X) format_min_length, byte zp(4) format_justify_left, byte zp(2) format_zero_padding, byte zp(8) format_upper_case)
printf_number_buffer: {
    .label __19 = 5
    .label buffer_sign = 7
    .label format_zero_padding = 2
    .label padding = 9
    .label format_justify_left = 4
    .label buffer_digits = $b
    .label format_upper_case = 8
    // [61] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1 -- vbuc1_eq_vbuxx_then_la1 
    cpx #0
    beq __b1_from_printf_number_buffer
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [62] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strlen.str
    lda.z buffer_digits+1
    sta.z strlen.str+1
    // [63] call strlen 
    // [139] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [64] (word) strlen::return#2 ← (word) strlen::len#2
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [65] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
    // [66] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsyy=_sbyte_vwuz1 
    // There is a minimum length - work out the padding
    lda.z __19
    tay
    // [67] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [68] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsyy=_inc_vbsyy 
    iny
    // [69] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [69] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [70] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsxx_minus_vbsyy 
    txa
    sty.z $ff
    sec
    sbc.z $ff
    sta.z padding
    // [71] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [73] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [73] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [72] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [73] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [73] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [74] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [75] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [76] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [77] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [78] call printf_padding 
    // [97] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [97] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [97] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [79] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [80] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuaa=vbuz1 
    lda.z buffer_sign
    // [81] call printf_char 
    // [104] phi from printf_number_buffer::@9 to printf_char [phi:printf_number_buffer::@9->printf_char]
  printf_char_from___b9:
    // [104] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#2 [phi:printf_number_buffer::@9->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [82] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [83] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [84] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [85] call printf_padding 
    // [97] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [97] phi (byte) printf_padding::pad#5 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [97] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [86] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [87] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strupr.str
    lda.z buffer_digits+1
    sta.z strupr.str+1
    // [88] call strupr 
    // [124] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [89] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10
    // [90] call printf_str 
    // [113] phi from printf_number_buffer::@5 to printf_str [phi:printf_number_buffer::@5->printf_str]
  printf_str_from___b5:
    jsr printf_str
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [91] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [92] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [93] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [94] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [95] call printf_padding 
    // [97] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [97] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [97] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [96] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($13) pad, byte zp($a) length)
printf_padding: {
    .label i = 3
    .label length = $a
    .label pad = $13
    // [98] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [98] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [99] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [100] return 
    rts
    // printf_padding::@2
  __b2:
    // [101] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#5 -- vbuaa=vbuz1 
    lda.z pad
    // [102] call printf_char 
    // [104] phi from printf_padding::@2 to printf_char [phi:printf_padding::@2->printf_char]
  printf_char_from___b2:
    // [104] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#0 [phi:printf_padding::@2->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_padding::@3
  __b3:
    // [103] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [98] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [98] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte register(A) ch)
printf_char: {
    // [105] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (printf_cursor_ptr),y
    // [106] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr -- pbuz1=_inc_pbuz1 
    inc.z printf_cursor_ptr
    bne !+
    inc.z printf_cursor_ptr+1
  !:
    // [107] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_x
    // [108] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z printf_cursor_x
    bne __breturn
    jmp __b1
    // printf_char::@1
  __b1:
    // [109] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [110] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // [111] call printf_scroll 
    jsr printf_scroll
    jmp __breturn
    // printf_char::@return
  __breturn:
    // [112] return 
    rts
}
  // printf_str
// Print a zero-terminated string
// Handles escape codes such as newline
// printf_str(byte* zp($b) str)
printf_str: {
    .label str = $b
    // [114] phi from printf_str printf_str::@4 printf_str::@5 to printf_str::@1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1]
  __b1_from_printf_str:
  __b1_from___b4:
  __b1_from___b5:
    // [114] phi (byte*) printf_str::str#2 = (byte*) printf_str::str#1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1#0] -- register_copy 
    jmp __b1
    // printf_str::@1
  __b1:
    jmp __b2
    // printf_str::@2
  __b2:
    // [115] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [116] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [117] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3
    jmp __breturn
    // printf_str::@return
  __breturn:
    // [118] return 
    rts
    // printf_str::@3
  __b3:
    // [119] if((byte) printf_str::ch#0==(byte) ' ') goto printf_str::@4 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b4_from___b3
    jmp __b5
    // printf_str::@5
  __b5:
    // [120] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
    // [121] call printf_char 
    // [104] phi from printf_str::@5 to printf_char [phi:printf_str::@5->printf_char]
  printf_char_from___b5:
    // [104] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#1 [phi:printf_str::@5->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b1_from___b5
    // [122] phi from printf_str::@3 to printf_str::@4 [phi:printf_str::@3->printf_str::@4]
  __b4_from___b3:
    jmp __b4
    // printf_str::@4
  __b4:
    // [123] call printf_ln 
    jsr printf_ln
    jmp __b1_from___b4
}
  // strupr
// Converts a string to uppercase.
// strupr(byte* zp($11) str)
strupr: {
    .label src = $11
    .label str = $11
    // [125] phi from strupr strupr::@3 to strupr::@1 [phi:strupr/strupr::@3->strupr::@1]
  __b1_from_strupr:
  __b1_from___b3:
    // [125] phi (byte*) strupr::src#2 = (byte*) strupr::str#0 [phi:strupr/strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
    // strupr::@1
  __b1:
    // [126] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [127] return 
    rts
    // strupr::@2
  __b2:
    // [128] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (src),y
    // [129] call toupper 
    jsr toupper
    // [130] (byte) toupper::return#3 ← (byte) toupper::return#2
    jmp __b3
    // strupr::@3
  __b3:
    // [131] (byte~) strupr::$0 ← (byte) toupper::return#3
    // [132] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (src),y
    // [133] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b3
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // [134] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [135] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [137] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [137] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [136] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [138] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($11) str)
strlen: {
    .label len = 5
    .label str = $11
    .label return = 5
    // [140] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [140] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [140] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    jmp __b1
    // strlen::@1
  __b1:
    // [141] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [142] return 
    rts
    // strlen::@2
  __b2:
    // [143] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [144] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [140] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [140] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [140] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($b) value, byte* zp(5) buffer)
utoa: {
    .const max_digits = 4
    .label digit_value = $11
    .label buffer = 5
    .label digit = 4
    .label value = $b
    // [146] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [146] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [146] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [146] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [146] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [147] if((byte) utoa::digit#2<(const byte) utoa::max_digits#2-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [148] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [149] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [150] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [151] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [152] return 
    rts
    // utoa::@2
  __b2:
    // [153] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [154] (word) utoa::digit_value#0 ← *((const word*) RADIX_HEXADECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_HEXADECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_HEXADECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [155] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [156] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [157] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [157] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [157] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [157] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [158] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [146] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [146] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [146] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [146] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [146] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [159] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [160] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [161] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [162] call utoa_append 
    // [166] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [163] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [164] (word) utoa::value#0 ← (word) utoa_append::return#0
    // [165] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [157] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [157] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [157] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [157] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp(5) buffer, word zp($b) value, word zp($11) sub)
utoa_append: {
    .label buffer = 5
    .label value = $b
    .label sub = $11
    .label return = $b
    // [167] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [167] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [167] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [168] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [169] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [170] return 
    rts
    // utoa_append::@2
  __b2:
    // [171] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [172] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [167] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [167] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [167] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_schar
// Print a signed char using a specific format
// printf_schar(signed byte register(X) value, byte register(Y) format_sign_always, byte zp(2) format_zero_padding, byte zp(7) format_radix)
printf_schar: {
    .label format_radix = 7
    .label format_zero_padding = 2
    // [174] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [175] if((signed byte) printf_schar::value#3<(signed byte) 0) goto printf_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    jmp __b3
    // printf_schar::@3
  __b3:
    // [176] if((byte) 0==(byte) printf_schar::format_sign_always#2) goto printf_schar::@2 -- vbuc1_eq_vbuyy_then_la1 
    cpy #0
    beq __b2_from___b3
    jmp __b4
    // printf_schar::@4
  __b4:
    // [177] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '+' -- _deref_pbuc1=vbuc2 
    lda #'+'
    sta printf_buffer
    // [178] phi from printf_schar::@1 printf_schar::@3 printf_schar::@4 to printf_schar::@2 [phi:printf_schar::@1/printf_schar::@3/printf_schar::@4->printf_schar::@2]
  __b2_from___b1:
  __b2_from___b3:
  __b2_from___b4:
    // [178] phi (signed byte) printf_schar::value#5 = (signed byte) printf_schar::value#0 [phi:printf_schar::@1/printf_schar::@3/printf_schar::@4->printf_schar::@2#0] -- register_copy 
    jmp __b2
    // printf_schar::@2
  __b2:
    // [179] (byte) uctoa::value#1 ← (byte)(signed byte) printf_schar::value#5
    // [180] (byte) uctoa::radix#0 ← (byte) printf_schar::format_radix#2 -- vbuaa=vbuz1 
    lda.z format_radix
    // [181] call uctoa 
    jsr uctoa
    jmp __b5
    // printf_schar::@5
  __b5:
    // [182] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [183] (byte) printf_number_buffer::format_zero_padding#1 ← (byte) printf_schar::format_zero_padding#2
    // [184] call printf_number_buffer 
  // Print using format
    // [60] phi from printf_schar::@5 to printf_number_buffer [phi:printf_schar::@5->printf_number_buffer]
  printf_number_buffer_from___b5:
    // [60] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_schar::@5->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [60] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_schar::@5->printf_number_buffer#1] -- register_copy 
    // [60] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_schar::@5->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [60] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) printf_number_buffer::format_zero_padding#1 [phi:printf_schar::@5->printf_number_buffer#3] -- register_copy 
    // [60] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_schar::@5->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [60] phi (byte) printf_number_buffer::format_min_length#2 = (byte) 6 [phi:printf_schar::@5->printf_number_buffer#5] -- vbuxx=vbuc1 
    ldx #6
    jsr printf_number_buffer
    jmp __breturn
    // printf_schar::@return
  __breturn:
    // [185] return 
    rts
    // printf_schar::@1
  __b1:
    // [186] (signed byte) printf_schar::value#0 ← - (signed byte) printf_schar::value#3 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    // [187] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' -- _deref_pbuc1=vbuc2 
    lda #'-'
    sta printf_buffer
    jmp __b2_from___b1
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte register(X) value, byte* zp($b) buffer, byte register(A) radix)
uctoa: {
    .label buffer = $b
    .label digit = 9
    .label started = $a
    .label max_digits = 8
    .label digit_values = $11
    // [188] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #DECIMAL
    beq __b1_from_uctoa
    jmp __b2
    // uctoa::@2
  __b2:
    // [189] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #HEXADECIMAL
    beq __b1_from___b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [190] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #OCTAL
    beq __b1_from___b3
    jmp __b4
    // uctoa::@4
  __b4:
    // [191] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #BINARY
    beq __b1_from___b4
    jmp __b5
    // uctoa::@5
  __b5:
    // [192] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) ← (byte) 'e' -- _deref_pbuc1=vbuc2 
    // Unknown radix
    lda #'e'
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    // [193] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 1) ← (byte) 'r' -- _deref_pbuc1=vbuc2 
    lda #'r'
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
    // [194] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 2) ← (byte) 'r' -- _deref_pbuc1=vbuc2 
    lda #'r'
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
    // [195] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+3
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [196] return 
    rts
    // [197] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_DECIMAL_VALUES_CHAR [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_DECIMAL_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_DECIMAL_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 3 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #3
    sta.z max_digits
    jmp __b1
    // [197] phi from uctoa::@2 to uctoa::@1 [phi:uctoa::@2->uctoa::@1]
  __b1_from___b2:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR [phi:uctoa::@2->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_HEXADECIMAL_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_HEXADECIMAL_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 2 [phi:uctoa::@2->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta.z max_digits
    jmp __b1
    // [197] phi from uctoa::@3 to uctoa::@1 [phi:uctoa::@3->uctoa::@1]
  __b1_from___b3:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_OCTAL_VALUES_CHAR [phi:uctoa::@3->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_OCTAL_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_OCTAL_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 3 [phi:uctoa::@3->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #3
    sta.z max_digits
    jmp __b1
    // [197] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_BINARY_VALUES_CHAR [phi:uctoa::@4->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_BINARY_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_BINARY_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 8 [phi:uctoa::@4->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #8
    sta.z max_digits
    jmp __b1
    // uctoa::@1
  __b1:
    // [198] phi from uctoa::@1 to uctoa::@6 [phi:uctoa::@1->uctoa::@6]
  __b6_from___b1:
    // [198] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa::@1->uctoa::@6#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [198] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa::@1->uctoa::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [198] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa::@1->uctoa::@6#2] -- register_copy 
    // [198] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa::@1->uctoa::@6#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b6
    // uctoa::@6
  __b6:
    // [199] (byte~) uctoa::$4 ← (byte) uctoa::max_digits#7 - (byte) 1 -- vbuaa=vbuz1_minus_1 
    lda.z max_digits
    sec
    sbc #1
    // [200] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@7 -- vbuz1_lt_vbuaa_then_la1 
    cmp.z digit
    beq !+
    bcs __b7
  !:
    jmp __b8
    // uctoa::@8
  __b8:
    // [201] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // [202] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [203] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@7
  __b7:
    // [204] (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#8 + (byte) uctoa::digit#2) -- vbuyy=pbuz1_derefidx_vbuz2 
    ldy.z digit
    lda (digit_values),y
    tay
    // [205] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@10 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b10
    jmp __b12
    // uctoa::@12
  __b12:
    // [206] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@10 -- vbuxx_ge_vbuyy_then_la1 
    sty.z $ff
    cpx.z $ff
    bcs __b10
    // [207] phi from uctoa::@12 to uctoa::@9 [phi:uctoa::@12->uctoa::@9]
  __b9_from___b12:
    // [207] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@12->uctoa::@9#0] -- register_copy 
    // [207] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@12->uctoa::@9#1] -- register_copy 
    // [207] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@12->uctoa::@9#2] -- register_copy 
    jmp __b9
    // uctoa::@9
  __b9:
    // [208] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [198] phi from uctoa::@9 to uctoa::@6 [phi:uctoa::@9->uctoa::@6]
  __b6_from___b9:
    // [198] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@9->uctoa::@6#0] -- register_copy 
    // [198] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@9->uctoa::@6#1] -- register_copy 
    // [198] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@9->uctoa::@6#2] -- register_copy 
    // [198] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@9->uctoa::@6#3] -- register_copy 
    jmp __b6
    // uctoa::@10
  __b10:
    // [209] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [210] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [211] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0 -- vbuz1=vbuyy 
    sty.z uctoa_append.sub
    // [212] call uctoa_append 
    // [216] phi from uctoa::@10 to uctoa_append [phi:uctoa::@10->uctoa_append]
  uctoa_append_from___b10:
    jsr uctoa_append
    // [213] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    jmp __b11
    // uctoa::@11
  __b11:
    // [214] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // [215] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [207] phi from uctoa::@11 to uctoa::@9 [phi:uctoa::@11->uctoa::@9]
  __b9_from___b11:
    // [207] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@11->uctoa::@9#0] -- register_copy 
    // [207] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@11->uctoa::@9#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [207] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@11->uctoa::@9#2] -- register_copy 
    jmp __b9
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($b) buffer, byte register(X) value, byte zp($13) sub)
uctoa_append: {
    .label buffer = $b
    .label sub = $13
    // [217] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [217] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [217] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [218] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [219] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuyy 
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [220] return 
    rts
    // uctoa_append::@2
  __b2:
    // [221] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuyy=_inc_vbuyy 
    iny
    // [222] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z sub
    tax
    // [217] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [217] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [217] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // [224] call memset 
    // [38] phi from printf_cls to memset [phi:printf_cls->memset]
  memset_from_printf_cls:
    // [38] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [38] phi (void*) memset::str#3 = (void*) 1024 [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<$400
    sta.z memset.str
    lda #>$400
    sta.z memset.str+1
    // [38] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    jmp __b1
    // printf_cls::@1
  __b1:
    // [225] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z printf_cursor_ptr
    lda #>$400
    sta.z printf_cursor_ptr+1
    // [226] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [227] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_y
    jmp __breturn
    // printf_cls::@return
  __breturn:
    // [228] return 
    rts
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of binary digits
  RADIX_BINARY_VALUES_CHAR: .byte $80, $40, $20, $10, 8, 4, 2
  // Values of octal digits
  RADIX_OCTAL_VALUES_CHAR: .byte $40, 8
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_CHAR: .byte $64, $a
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES: .word $1000, $100, $10
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b14
Removing instruction jmp __b7
Removing instruction jmp __b13
Removing instruction jmp __b21
Removing instruction jmp __b1
Removing instruction jmp __b17
Removing instruction jmp __b16
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b3
Removing instruction jmp __b18
Removing instruction jmp __b4
Removing instruction jmp __b11
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b20
Removing instruction jmp __b19
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b8
Removing instruction jmp __b12
Removing instruction jmp __b9
Removing instruction jmp __b11
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction lda.z padding
Removing instruction lda #>0
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction lda #'r'
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from_printf_number_buffer with __b1_from___b13
Replacing label __b13_from___b14 with __b13
Replacing label __b21_from___b13 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b1_from___b5 with __b2
Replacing label __b1_from___b4 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __breturn_from_toupper with __breturn_from___b2
Replacing label __breturn_from___b1 with __breturn_from___b2
Replacing label __b2_from___b3 with __b2
Replacing label __b2_from___b1 with __b2
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction main_from___b2:
Removing instruction __bend_from___b2:
Removing instruction __b1_from_main:
Removing instruction printf_schar_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction printf_schar_from___b3:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b4:
Removing instruction printf_uint_from___b5:
Removing instruction __b6_from___b5:
Removing instruction __b1_from_printf_scroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memset_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b13_from___b14:
Removing instruction __b13_from___b7:
Removing instruction __b1_from_printf_number_buffer:
Removing instruction __b21_from___b13:
Removing instruction __b21:
Removing instruction __b1_from___b21:
Removing instruction printf_str_from___b5:
Removing instruction __b1_from_printf_str:
Removing instruction __b1_from___b4:
Removing instruction __b1_from___b5:
Removing instruction __b1:
Removing instruction printf_char_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b1_from_strupr:
Removing instruction __b1_from___b3:
Removing instruction __breturn_from_toupper:
Removing instruction __breturn_from___b1:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b6_from___b1:
Removing instruction __b9_from___b12:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction printf_cls_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1:
Removing instruction __b1_from_memcpy:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1:
Removing instruction utoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b6:
Removing instruction strlen_from___b6:
Removing instruction __b14:
Removing instruction __b7:
Removing instruction __b17:
Removing instruction __b16:
Removing instruction printf_padding_from___b8:
Removing instruction __b9:
Removing instruction printf_char_from___b9:
Removing instruction __b18:
Removing instruction printf_padding_from___b10:
Removing instruction __b11:
Removing instruction strupr_from___b11:
Removing instruction __b15:
Removing instruction __b20:
Removing instruction __b19:
Removing instruction printf_padding_from___b12:
Removing instruction __b1_from_printf_padding:
Removing instruction __breturn:
Removing instruction printf_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b2:
Removing instruction __b1_from_strlen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction printf_number_buffer_from___b5:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b8:
Removing instruction __b12:
Removing instruction __b6_from___b9:
Removing instruction uctoa_append_from___b10:
Removing instruction __b11:
Removing instruction __b9_from___b11:
Removing instruction __b1_from_uctoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction memset_from_printf_cls:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in bcc __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from___b13 to __b6
Relabelling long label __breturn_from___b2 to __b2
Relabelling long label __b1_from_uctoa to __b2
Relabelling long label __b1_from___b2 to __b3
Relabelling long label __b1_from___b3 to __b4
Relabelling long label __b1_from___b4 to __b5
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda.z digit_value+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) BINARY = (number) 2
(const byte) DECIMAL = (number) $a
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(const byte) OCTAL = (number) 8
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte*) RADIX_BINARY_VALUES_CHAR[]  = { (byte) $80, (byte) $40, (byte) $20, (byte) $10, (byte) 8, (byte) 4, (byte) 2 }
(const byte*) RADIX_DECIMAL_VALUES_CHAR[]  = { (byte) $64, (byte) $a }
(const word*) RADIX_HEXADECIMAL_VALUES[]  = { (word) $1000, (word) $100, (word) $10 }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const byte*) RADIX_OCTAL_VALUES_CHAR[]  = { (byte) $40, (byte) 8 }
(const byte) SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = (byte) $c
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(const void*) memcpy::destination#0 destination = (void*) 1024
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:5 1.0000000001E10
(byte*) memcpy::dst#2 dst zp[2]:5 1.0000000001E10
(word) memcpy::num
(const word) memcpy::num#0 num = (word)(number) $28*(number) $19-(number) $28
(void*) memcpy::return
(void*) memcpy::source
(const void*) memcpy::source#0 source = (void*)(number) $400+(number) $28
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:17 2.0000000002E10
(byte*) memcpy::src#2 src zp[2]:17 1.0000000001E10
(byte*) memcpy::src_end
(const byte*) memcpy::src_end#0 src_end = (byte*)(const void*) memcpy::source#0+(const word) memcpy::num#0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1.25000000125E8
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:5 2.000000002E9
(byte*) memset::dst#2 dst zp[2]:5 1.3666666683333335E9
(byte*) memset::dst#4 dst zp[2]:5 2.00000002E8
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:17 1.833333336666667E8
(word) memset::num
(word) memset::num#2 num zp[2]:17 1.00000001E8
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:5
(struct printf_buffer_number) printf_buffer loadstore mem[12] = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(label) printf_char::@1
(label) printf_char::@return
(byte) printf_char::ch
(byte) printf_char::ch#0 reg byte a 200002.0
(byte) printf_char::ch#1 reg byte a 200002.0
(byte) printf_char::ch#2 reg byte a 2002.0
(byte) printf_char::ch#3 reg byte a 1201004.0
(void()) printf_cls()
(label) printf_cls::@1
(label) printf_cls::@return
(byte*) printf_cursor_ptr loadstore zp[2]:15 219299.21052631582
(byte) printf_cursor_x loadstore zp[1]:13 57693.35576923078
(byte) printf_cursor_y loadstore zp[1]:14 295653.1304347826
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_ln()
(byte*~) printf_ln::$0 zp[2]:15 2000002.0
(byte*~) printf_ln::$1 zp[2]:15 2000002.0
(label) printf_ln::@return
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(word~) printf_number_buffer::$19 zp[2]:5 1001.0
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#10 buffer_digits zp[2]:11 103.55172413793102
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 buffer_sign zp[1]:7 202.0
(byte) printf_number_buffer::buffer_sign#1 buffer_sign zp[1]:7 101.0
(byte) printf_number_buffer::buffer_sign#10 buffer_sign zp[1]:7 160.25
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#10 format_justify_left zp[1]:4 64.58064516129032
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#2 reg byte x 100.1
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#10 format_upper_case zp[1]:8 38.5
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#1 format_zero_padding zp[1]:2 202.0
(byte) printf_number_buffer::format_zero_padding#10 format_zero_padding zp[1]:2 97.0
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0 reg byte y 1501.5
(signed byte) printf_number_buffer::len#1 reg byte y 2002.0
(signed byte) printf_number_buffer::len#2 reg byte y 3003.0
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#1 padding zp[1]:9 1001.0
(signed byte) printf_number_buffer::padding#10 padding zp[1]:9 190.66666666666666
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#1 i zp[1]:3 200002.0
(byte) printf_padding::i#2 i zp[1]:3 75000.75
(byte) printf_padding::length
(byte) printf_padding::length#0 length zp[1]:10 2002.0
(byte) printf_padding::length#1 length zp[1]:10 2002.0
(byte) printf_padding::length#2 length zp[1]:10 2002.0
(byte) printf_padding::length#4 length zp[1]:10 17167.333333333332
(byte) printf_padding::pad
(byte) printf_padding::pad#5 pad zp[1]:19 16666.833333333332
(void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
(label) printf_schar::@1
(label) printf_schar::@2
(label) printf_schar::@3
(label) printf_schar::@4
(label) printf_schar::@5
(label) printf_schar::@return
(struct printf_format_number) printf_schar::format
(byte) printf_schar::format_justify_left
(byte) printf_schar::format_min_length
(byte) printf_schar::format_radix
(byte) printf_schar::format_radix#2 format_radix zp[1]:7 11.222222222222221
(byte) printf_schar::format_sign_always
(byte) printf_schar::format_sign_always#2 reg byte y 33.666666666666664
(byte) printf_schar::format_upper_case
(byte) printf_schar::format_zero_padding
(byte) printf_schar::format_zero_padding#2 format_zero_padding zp[1]:2 8.416666666666666
(byte) printf_schar::uvalue
(signed byte) printf_schar::value
(signed byte) printf_schar::value#0 reg byte x 101.0
(signed byte) printf_schar::value#3 reg byte x 80.8
(signed byte) printf_schar::value#5 reg byte x 303.0
(void()) printf_scroll()
(byte*~) printf_scroll::$4 zp[2]:15 2.0000002E7
(label) printf_scroll::@1
(label) printf_scroll::@2
(label) printf_scroll::@3
(label) printf_scroll::@return
(void()) printf_str((byte*) printf_str::str)
(label) printf_str::@1
(label) printf_str::@2
(label) printf_str::@3
(label) printf_str::@4
(label) printf_str::@5
(label) printf_str::@return
(byte) printf_str::ch
(byte) printf_str::ch#0 reg byte a 100001.0
(byte*) printf_str::str
(byte*) printf_str::str#0 str zp[2]:11 42857.57142857143
(byte*) printf_str::str#1 str zp[2]:11 5501.0
(byte*) printf_str::str#2 str zp[2]:11 205002.5
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(label) printf_uint::@1
(label) printf_uint::@2
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(const byte) printf_uint::format_justify_left#0 format_justify_left = (byte) 1
(byte) printf_uint::format_min_length
(const byte) printf_uint::format_min_length#0 format_min_length = (byte) $a
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(const byte) printf_uint::format_upper_case#0 format_upper_case = (byte) 1
(byte) printf_uint::format_zero_padding
(const byte) printf_uint::format_zero_padding#0 format_zero_padding = (byte) 0
(word) printf_uint::uvalue
(const word) printf_uint::uvalue#0 uvalue = (word) $d80
(word()) strlen((byte*) strlen::str)
(label) strlen::@1
(label) strlen::@2
(label) strlen::@return
(word) strlen::len
(word) strlen::len#1 len zp[2]:5 100001.0
(word) strlen::len#2 len zp[2]:5 50250.75
(word) strlen::return
(word) strlen::return#2 return zp[2]:5 2002.0
(byte*) strlen::str
(byte*) strlen::str#0 str zp[2]:17 200002.0
(byte*) strlen::str#1 str zp[2]:17 5501.0
(byte*) strlen::str#2 str zp[2]:17 103334.66666666666
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0 reg byte a 200002.0
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::src
(byte*) strupr::src#1 src zp[2]:17 200002.0
(byte*) strupr::src#2 src zp[2]:17 72858.0
(byte*) strupr::str
(byte*) strupr::str#0 str zp[2]:17 5501.0
(byte()) toupper((byte) toupper::ch)
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0 reg byte a 1700002.0000000002
(byte) toupper::return
(byte) toupper::return#0 reg byte a 2000002.0
(byte) toupper::return#2 reg byte a 1033334.6666666667
(byte) toupper::return#3 reg byte a 200002.0
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(byte~) uctoa::$4 reg byte a 20002.0
(label) uctoa::@1
(label) uctoa::@10
(label) uctoa::@11
(label) uctoa::@12
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@8
(label) uctoa::@9
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 buffer zp[2]:11 3231.230769230769
(byte*) uctoa::buffer#14 buffer zp[2]:11 15001.5
(byte*) uctoa::buffer#3 buffer zp[2]:11 2002.0
(byte*) uctoa::buffer#4 buffer zp[2]:11 20002.0
(byte) uctoa::digit
(byte) uctoa::digit#1 digit zp[1]:9 20002.0
(byte) uctoa::digit#2 digit zp[1]:9 2857.4285714285716
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 reg byte y 6000.6
(byte*) uctoa::digit_values
(byte*) uctoa::digit_values#8 digit_values zp[2]:17 625.0625
(byte) uctoa::max_digits
(byte) uctoa::max_digits#7 max_digits zp[1]:8 625.0625
(byte) uctoa::radix
(byte) uctoa::radix#0 reg byte a 1026.25
(byte) uctoa::started
(byte) uctoa::started#2 started zp[1]:10 5000.5
(byte) uctoa::started#4 started zp[1]:10 10001.0
(byte) uctoa::value
(byte) uctoa::value#0 reg byte x 10001.0
(byte) uctoa::value#1 reg byte x 157.42857142857142
(byte) uctoa::value#2 reg byte x 6000.857142857143
(byte) uctoa::value#6 reg byte x 15001.5
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 buffer zp[2]:11 13750.25
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 reg byte y 1.0000001E7
(byte) uctoa_append::digit#2 reg byte y 1.00500015E7
(byte) uctoa_append::return
(byte) uctoa_append::return#0 reg byte x 20002.0
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 sub zp[1]:19 3335000.5
(byte) uctoa_append::value
(byte) uctoa_append::value#0 reg byte x 36667.33333333333
(byte) uctoa_append::value#1 reg byte x 2.0000002E7
(byte) uctoa_append::value#2 reg byte x 5018334.166666666
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 reg byte a 20002.0
(byte~) utoa::$11 reg byte a 2002.0
(label) utoa::@1
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#11 buffer zp[2]:5 3000.4285714285716
(byte*) utoa::buffer#14 buffer zp[2]:5 15001.5
(byte*) utoa::buffer#3 buffer zp[2]:5 2002.0
(byte*) utoa::buffer#4 buffer zp[2]:5 20002.0
(byte) utoa::digit
(byte) utoa::digit#1 digit zp[1]:4 20002.0
(byte) utoa::digit#2 digit zp[1]:4 2857.4285714285716
(word) utoa::digit_value
(word) utoa::digit_value#0 digit_value zp[2]:17 6000.6
(word*) utoa::digit_values
(byte) utoa::max_digits
(const byte) utoa::max_digits#2 max_digits = (byte) 4
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 reg byte x 5000.5
(byte) utoa::started#4 reg byte x 10001.0
(word) utoa::value
(word) utoa::value#0 value zp[2]:11 10001.0
(word) utoa::value#2 value zp[2]:11 5714.857142857143
(word) utoa::value#6 value zp[2]:11 15001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 buffer zp[2]:5 13750.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 reg byte x 1.0000001E7
(byte) utoa_append::digit#2 reg byte x 1.00500015E7
(word) utoa_append::return
(word) utoa_append::return#0 return zp[2]:11 20002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 sub zp[2]:17 3335000.5
(word) utoa_append::value
(word) utoa_append::value#0 value zp[2]:11 36667.33333333333
(word) utoa_append::value#1 value zp[2]:11 2.0000002E7
(word) utoa_append::value#2 value zp[2]:11 5018334.166666666

reg byte x [ memset::c#4 ]
reg byte x [ printf_number_buffer::format_min_length#2 ]
zp[1]:2 [ printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#1 printf_schar::format_zero_padding#2 ]
reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
zp[1]:3 [ printf_padding::i#2 printf_padding::i#1 ]
reg byte a [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
zp[1]:4 [ utoa::digit#2 utoa::digit#1 printf_number_buffer::format_justify_left#10 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:5 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
reg byte y [ printf_schar::format_sign_always#2 ]
zp[1]:7 [ printf_schar::format_radix#2 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
reg byte x [ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 ]
zp[1]:8 [ uctoa::max_digits#7 printf_number_buffer::format_upper_case#10 ]
zp[1]:9 [ uctoa::digit#2 uctoa::digit#1 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
zp[1]:10 [ uctoa::started#2 uctoa::started#4 printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
zp[2]:11 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_number_buffer::buffer_digits#10 printf_str::str#2 printf_str::str#1 printf_str::str#0 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
zp[1]:13 [ printf_cursor_x ]
zp[1]:14 [ printf_cursor_y ]
zp[2]:15 [ printf_cursor_ptr printf_scroll::$4 printf_ln::$0 printf_ln::$1 ]
reg byte a [ printf_str::ch#0 ]
reg byte a [ toupper::return#3 ]
reg byte a [ strupr::$0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:17 [ utoa::digit_value#0 utoa_append::sub#0 uctoa::digit_values#8 strlen::str#2 strlen::str#1 strlen::str#0 strupr::src#2 strupr::str#0 strupr::src#1 memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ]
reg byte a [ uctoa::radix#0 ]
reg byte a [ uctoa::$4 ]
reg byte y [ uctoa::digit_value#0 ]
zp[1]:19 [ uctoa_append::sub#0 printf_padding::pad#5 ]
reg byte x [ uctoa_append::return#0 ]
mem[12] [ printf_buffer ]


FINAL ASSEMBLER
Score: 19471

  // File Comments
// Tests printf implementation
// Format a number
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const BINARY = 2
  .const OCTAL = 8
  .const DECIMAL = $a
  .const HEXADECIMAL = $10
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  .label printf_cursor_x = $d
  .label printf_cursor_y = $e
  .label printf_cursor_ptr = $f
  // @begin
__bbegin:
  // @1
  // printf_cursor_x = 0
  // [1] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // X-position of cursor
  lda #0
  sta.z printf_cursor_x
  // printf_cursor_y = 0
  // [2] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // Y-position of cursor
  sta.z printf_cursor_y
  // printf_cursor_ptr = PRINTF_SCREEN_ADDRESS
  // [3] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
  // Pointer to cursor address
  lda #<$400
  sta.z printf_cursor_ptr
  lda #>$400
  sta.z printf_cursor_ptr+1
  // [4] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [5] call main 
  // [7] phi from @2 to main [phi:@2->main]
  jsr main
  rts
  // [6] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    // printf_cls()
    // [8] call printf_cls 
    // [223] phi from main to printf_cls [phi:main->printf_cls]
    jsr printf_cls
    // [9] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // printf_schar(-77, { 6, 0, 0, 0, 0, DECIMAL})
    // [10] call printf_schar 
    // [173] phi from main::@1 to printf_schar [phi:main::@1->printf_schar]
    // [173] phi (byte) printf_schar::format_zero_padding#2 = (byte) 0 [phi:main::@1->printf_schar#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_schar.format_zero_padding
    // [173] phi (byte) printf_schar::format_radix#2 = (const byte) DECIMAL [phi:main::@1->printf_schar#1] -- vbuz1=vbuc1 
    lda #DECIMAL
    sta.z printf_schar.format_radix
    // [173] phi (byte) printf_schar::format_sign_always#2 = (byte) 0 [phi:main::@1->printf_schar#2] -- vbuyy=vbuc1 
    ldy #0
    // [173] phi (signed byte) printf_schar::value#3 = (signed byte) -$4d [phi:main::@1->printf_schar#3] -- vbsxx=vbsc1 
    ldx #-$4d
    jsr printf_schar
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // printf_ln()
    // [12] call printf_ln 
    jsr printf_ln
    // [13] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // printf_schar(99, {6, 0, 1, 1, 0, OCTAL})
    // [14] call printf_schar 
    // [173] phi from main::@3 to printf_schar [phi:main::@3->printf_schar]
    // [173] phi (byte) printf_schar::format_zero_padding#2 = (byte) 1 [phi:main::@3->printf_schar#0] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_schar.format_zero_padding
    // [173] phi (byte) printf_schar::format_radix#2 = (const byte) OCTAL [phi:main::@3->printf_schar#1] -- vbuz1=vbuc1 
    lda #OCTAL
    sta.z printf_schar.format_radix
    // [173] phi (byte) printf_schar::format_sign_always#2 = (byte) 1 [phi:main::@3->printf_schar#2] -- vbuyy=vbuc1 
    ldy #1
    // [173] phi (signed byte) printf_schar::value#3 = (signed byte) $63 [phi:main::@3->printf_schar#3] -- vbsxx=vbsc1 
    ldx #$63
    jsr printf_schar
    // [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // printf_ln()
    // [16] call printf_ln 
    jsr printf_ln
    // [17] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // printf_uint(3456, {10, 1, 0, 0, 1, HEXADECIMAL})
    // [18] call printf_uint 
    // [54] phi from main::@5 to printf_uint [phi:main::@5->printf_uint]
    jsr printf_uint
    // [19] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // printf_ln()
    // [20] call printf_ln 
    jsr printf_ln
    // main::@return
    // }
    // [21] return 
    rts
}
  // printf_ln
// Print a newline
printf_ln: {
    .label __0 = $f
    .label __1 = $f
    // printf_cursor_ptr - printf_cursor_x
    // [22] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __0
    sbc.z printf_cursor_x
    sta.z __0
    bcs !+
    dec.z __0+1
  !:
    // printf_cursor_ptr - printf_cursor_x + PRINTF_SCREEN_WIDTH
    // [23] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __1
    sta.z __1
    bcc !+
    inc.z __1+1
  !:
    // printf_cursor_ptr =  printf_cursor_ptr - printf_cursor_x + PRINTF_SCREEN_WIDTH
    // [24] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
    // printf_cursor_x = 0
    // [25] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // printf_cursor_y++;
    // [26] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // printf_scroll()
    // [27] call printf_scroll 
    jsr printf_scroll
    // printf_ln::@return
    // }
    // [28] return 
    rts
}
  // printf_scroll
// Scroll the entire screen if the cursor is on the last line
printf_scroll: {
    .label __4 = $f
    // if(printf_cursor_y==PRINTF_SCREEN_HEIGHT)
    // [29] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z printf_cursor_y
    bne __breturn
    // [30] phi from printf_scroll to printf_scroll::@1 [phi:printf_scroll->printf_scroll::@1]
    // printf_scroll::@1
    // memcpy(PRINTF_SCREEN_ADDRESS, PRINTF_SCREEN_ADDRESS+PRINTF_SCREEN_WIDTH, PRINTF_SCREEN_BYTES-PRINTF_SCREEN_WIDTH)
    // [31] call memcpy 
    // [47] phi from printf_scroll::@1 to memcpy [phi:printf_scroll::@1->memcpy]
    jsr memcpy
    // [32] phi from printf_scroll::@1 to printf_scroll::@2 [phi:printf_scroll::@1->printf_scroll::@2]
    // printf_scroll::@2
    // memset(PRINTF_SCREEN_ADDRESS+PRINTF_SCREEN_BYTES-PRINTF_SCREEN_WIDTH, ' ', PRINTF_SCREEN_WIDTH)
    // [33] call memset 
    // [38] phi from printf_scroll::@2 to memset [phi:printf_scroll::@2->memset]
    // [38] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_scroll::@2->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [38] phi (void*) memset::str#3 = (void*)(number) $400+(number) $28*(number) $19-(number) $28 [phi:printf_scroll::@2->memset#1] -- pvoz1=pvoc1 
    lda #<$400+$28*$19-$28
    sta.z memset.str
    lda #>$400+$28*$19-$28
    sta.z memset.str+1
    // [38] phi (word) memset::num#2 = (byte) $28 [phi:printf_scroll::@2->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    // printf_scroll::@3
    // printf_cursor_ptr-PRINTF_SCREEN_WIDTH
    // [34] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __4
    sec
    sbc #<$28
    sta.z __4
    lda.z __4+1
    sbc #>$28
    sta.z __4+1
    // printf_cursor_ptr = printf_cursor_ptr-PRINTF_SCREEN_WIDTH
    // [35] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
    // printf_cursor_y--;
    // [36] (byte) printf_cursor_y ← -- (byte) printf_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z printf_cursor_y
    // printf_scroll::@return
  __breturn:
    // }
    // [37] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(5) str, byte register(X) c, word zp($11) num)
memset: {
    .label end = $11
    .label dst = 5
    .label num = $11
    .label str = 5
    // if(num>0)
    // [39] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // end = (char*)str + num
    // [40] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [41] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [42] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [42] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [43] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [44] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [45] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [46] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = $400
    .label source = $400+$28
    .const num = $28*$19-$28
    .label src_end = source+num
    .label dst = 5
    .label src = $11
    // [48] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
    // [48] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [48] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [49] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    // memcpy::@return
    // }
    // [50] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [51] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [52] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [53] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [48] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
    // [48] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [48] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .label uvalue = $d80
    .const format_min_length = $a
    .const format_justify_left = 1
    .const format_zero_padding = 0
    .const format_upper_case = 1
    // printf_uint::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [55] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // utoa(uvalue, printf_buffer.digits, format.radix)
    // [56] call utoa 
  // Format number into buffer
    // [145] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
    jsr utoa
    // printf_uint::@2
    // printf_number_buffer(printf_buffer, format)
    // [57] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [58] call printf_number_buffer 
  // Print using format
    // [60] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
    // [60] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [60] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [60] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_uint::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [60] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [60] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [60] phi (byte) printf_number_buffer::format_min_length#2 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#5] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    // printf_uint::@return
    // }
    // [59] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp(7) buffer_sign, byte* zp($b) buffer_digits, byte register(X) format_min_length, byte zp(4) format_justify_left, byte zp(2) format_zero_padding, byte zp(8) format_upper_case)
printf_number_buffer: {
    .label __19 = 5
    .label buffer_sign = 7
    .label format_zero_padding = 2
    .label padding = 9
    .label format_justify_left = 4
    .label buffer_digits = $b
    .label format_upper_case = 8
    // if(format.min_length)
    // [61] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1 -- vbuc1_eq_vbuxx_then_la1 
    cpx #0
    beq __b6
    // printf_number_buffer::@6
    // strlen(buffer.digits)
    // [62] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strlen.str
    lda.z buffer_digits+1
    sta.z strlen.str+1
    // [63] call strlen 
    // [139] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
    jsr strlen
    // strlen(buffer.digits)
    // [64] (word) strlen::return#2 ← (word) strlen::len#2
    // printf_number_buffer::@14
    // [65] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
    // len = (signed char)strlen(buffer.digits)
    // [66] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsyy=_sbyte_vwuz1 
    // There is a minimum length - work out the padding
    lda.z __19
    tay
    // if(buffer.sign)
    // [67] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13
    // printf_number_buffer::@7
    // len++;
    // [68] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsyy=_inc_vbsyy 
    iny
    // [69] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
    // [69] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    // printf_number_buffer::@13
  __b13:
    // padding = (signed char)format.min_length - len
    // [70] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsxx_minus_vbsyy 
    txa
    sty.z $ff
    sec
    sbc.z $ff
    sta.z padding
    // if(padding<0)
    // [71] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    cmp #0
    bpl __b1
    // [73] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b6:
    // [73] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    // [72] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
    // printf_number_buffer::@21
    // [73] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
    // [73] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    // printf_number_buffer::@1
  __b1:
    // if(!format.justify_left && !format.zero_padding && padding)
    // [74] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    // printf_number_buffer::@17
    // [75] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    cmp.z format_zero_padding
    bne __b2
    // printf_number_buffer::@16
    // [76] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // printf_padding(' ',(char)padding)
    // [77] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [78] call printf_padding 
    // [97] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
    // [97] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [97] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@2
  __b2:
    // if(buffer.sign)
    // [79] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    // printf_number_buffer::@9
    // printf_char(buffer.sign)
    // [80] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuaa=vbuz1 
    lda.z buffer_sign
    // [81] call printf_char 
    // [104] phi from printf_number_buffer::@9 to printf_char [phi:printf_number_buffer::@9->printf_char]
    // [104] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#2 [phi:printf_number_buffer::@9->printf_char#0] -- register_copy 
    jsr printf_char
    // printf_number_buffer::@3
  __b3:
    // if(format.zero_padding && padding)
    // [82] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    // printf_number_buffer::@18
    // [83] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // printf_padding('0',(char)padding)
    // [84] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [85] call printf_padding 
    // [97] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
    // [97] phi (byte) printf_padding::pad#5 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [97] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@4
  __b4:
    // if(format.upper_case)
    // [86] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5
    // printf_number_buffer::@11
    // strupr(buffer.digits)
    // [87] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strupr.str
    lda.z buffer_digits+1
    sta.z strupr.str+1
    // [88] call strupr 
    // [124] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
    jsr strupr
    // printf_number_buffer::@5
  __b5:
    // printf_str(buffer.digits)
    // [89] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10
    // [90] call printf_str 
    // [113] phi from printf_number_buffer::@5 to printf_str [phi:printf_number_buffer::@5->printf_str]
    jsr printf_str
    // printf_number_buffer::@15
    // if(format.justify_left && !format.zero_padding && padding)
    // [91] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    // printf_number_buffer::@20
    // [92] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    cmp.z format_zero_padding
    bne __breturn
    // printf_number_buffer::@19
    // [93] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b12
    rts
    // printf_number_buffer::@12
  __b12:
    // printf_padding(' ',(char)padding)
    // [94] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [95] call printf_padding 
    // [97] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
    // [97] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [97] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@return
  __breturn:
    // }
    // [96] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($13) pad, byte zp($a) length)
printf_padding: {
    .label i = 3
    .label length = $a
    .label pad = $13
    // [98] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
    // [98] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // printf_padding::@1
  __b1:
    // for(char i=0;i<length; i++)
    // [99] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    // printf_padding::@return
    // }
    // [100] return 
    rts
    // printf_padding::@2
  __b2:
    // printf_char(pad)
    // [101] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#5 -- vbuaa=vbuz1 
    lda.z pad
    // [102] call printf_char 
    // [104] phi from printf_padding::@2 to printf_char [phi:printf_padding::@2->printf_char]
    // [104] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#0 [phi:printf_padding::@2->printf_char#0] -- register_copy 
    jsr printf_char
    // printf_padding::@3
    // for(char i=0;i<length; i++)
    // [103] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [98] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
    // [98] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte register(A) ch)
printf_char: {
    // *(printf_cursor_ptr++) = ch
    // [105] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (printf_cursor_ptr),y
    // *(printf_cursor_ptr++) = ch;
    // [106] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr -- pbuz1=_inc_pbuz1 
    inc.z printf_cursor_ptr
    bne !+
    inc.z printf_cursor_ptr+1
  !:
    // if(++printf_cursor_x==PRINTF_SCREEN_WIDTH)
    // [107] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_x
    // [108] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z printf_cursor_x
    bne __breturn
    // printf_char::@1
    // printf_cursor_x = 0
    // [109] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // ++printf_cursor_y;
    // [110] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // printf_scroll()
    // [111] call printf_scroll 
    jsr printf_scroll
    // printf_char::@return
  __breturn:
    // }
    // [112] return 
    rts
}
  // printf_str
// Print a zero-terminated string
// Handles escape codes such as newline
// printf_str(byte* zp($b) str)
printf_str: {
    .label str = $b
    // [114] phi from printf_str printf_str::@4 printf_str::@5 to printf_str::@1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1]
    // [114] phi (byte*) printf_str::str#2 = (byte*) printf_str::str#1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1#0] -- register_copy 
    // printf_str::@1
    // printf_str::@2
  __b2:
    // ch = *str++
    // [115] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [116] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // if(ch==0)
    // [117] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3
    // printf_str::@return
    // }
    // [118] return 
    rts
    // printf_str::@3
  __b3:
    // if(ch=='\n')
    // [119] if((byte) printf_str::ch#0==(byte) ' ') goto printf_str::@4 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b4
    // printf_str::@5
    // printf_char(ch)
    // [120] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
    // [121] call printf_char 
    // [104] phi from printf_str::@5 to printf_char [phi:printf_str::@5->printf_char]
    // [104] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#1 [phi:printf_str::@5->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b2
    // [122] phi from printf_str::@3 to printf_str::@4 [phi:printf_str::@3->printf_str::@4]
    // printf_str::@4
  __b4:
    // printf_ln()
    // [123] call printf_ln 
    jsr printf_ln
    jmp __b2
}
  // strupr
// Converts a string to uppercase.
// strupr(byte* zp($11) str)
strupr: {
    .label src = $11
    .label str = $11
    // [125] phi from strupr strupr::@3 to strupr::@1 [phi:strupr/strupr::@3->strupr::@1]
    // [125] phi (byte*) strupr::src#2 = (byte*) strupr::str#0 [phi:strupr/strupr::@3->strupr::@1#0] -- register_copy 
    // strupr::@1
  __b1:
    // while(*src)
    // [126] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    // strupr::@return
    // }
    // [127] return 
    rts
    // strupr::@2
  __b2:
    // toupper(*src)
    // [128] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (src),y
    // [129] call toupper 
    jsr toupper
    // [130] (byte) toupper::return#3 ← (byte) toupper::return#2
    // strupr::@3
    // [131] (byte~) strupr::$0 ← (byte) toupper::return#3
    // *src = toupper(*src)
    // [132] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (src),y
    // src++;
    // [133] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // if(ch>='a' && ch<='z')
    // [134] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn
    // toupper::@2
    // [135] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [137] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
    // [137] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    rts
    // toupper::@1
  __b1:
    // return ch + ('A'-'a');
    // [136] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    // toupper::@return
  __breturn:
    // }
    // [138] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($11) str)
strlen: {
    .label len = 5
    .label str = $11
    .label return = 5
    // [140] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
    // [140] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    sta.z len+1
    // [140] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    // strlen::@1
  __b1:
    // while(*str)
    // [141] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // strlen::@return
    // }
    // [142] return 
    rts
    // strlen::@2
  __b2:
    // len++;
    // [143] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // str++;
    // [144] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [140] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
    // [140] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [140] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($b) value, byte* zp(5) buffer)
utoa: {
    .const max_digits = 4
    .label digit_value = $11
    .label buffer = 5
    .label digit = 4
    .label value = $b
    // [146] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [146] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [146] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [146] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [146] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [147] if((byte) utoa::digit#2<(const byte) utoa::max_digits#2-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [148] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [149] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [150] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [151] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [152] return 
    rts
    // utoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [153] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [154] (word) utoa::digit_value#0 ← *((const word*) RADIX_HEXADECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_HEXADECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_HEXADECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [155] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [156] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [157] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [157] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [157] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [157] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [158] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [146] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [146] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [146] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [146] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [146] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [159] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [160] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [161] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [162] call utoa_append 
    // [166] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [163] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [164] (word) utoa::value#0 ← (word) utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [165] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [157] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [157] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [157] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [157] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp(5) buffer, word zp($b) value, word zp($11) sub)
utoa_append: {
    .label buffer = 5
    .label value = $b
    .label sub = $11
    .label return = $b
    // [167] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [167] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [167] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [168] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [169] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [170] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [171] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [172] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [167] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [167] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [167] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_schar
// Print a signed char using a specific format
// printf_schar(signed byte register(X) value, byte register(Y) format_sign_always, byte zp(2) format_zero_padding, byte zp(7) format_radix)
printf_schar: {
    .label format_radix = 7
    .label format_zero_padding = 2
    // printf_buffer.sign = 0
    // [174] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // if(value<0)
    // [175] if((signed byte) printf_schar::value#3<(signed byte) 0) goto printf_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    // printf_schar::@3
    // if(format.sign_always)
    // [176] if((byte) 0==(byte) printf_schar::format_sign_always#2) goto printf_schar::@2 -- vbuc1_eq_vbuyy_then_la1 
    cpy #0
    beq __b2
    // printf_schar::@4
    // printf_buffer.sign = '+'
    // [177] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '+' -- _deref_pbuc1=vbuc2 
    lda #'+'
    sta printf_buffer
    // [178] phi from printf_schar::@1 printf_schar::@3 printf_schar::@4 to printf_schar::@2 [phi:printf_schar::@1/printf_schar::@3/printf_schar::@4->printf_schar::@2]
    // [178] phi (signed byte) printf_schar::value#5 = (signed byte) printf_schar::value#0 [phi:printf_schar::@1/printf_schar::@3/printf_schar::@4->printf_schar::@2#0] -- register_copy 
    // printf_schar::@2
  __b2:
    // uctoa(uvalue, printf_buffer.digits, format.radix)
    // [179] (byte) uctoa::value#1 ← (byte)(signed byte) printf_schar::value#5
    // [180] (byte) uctoa::radix#0 ← (byte) printf_schar::format_radix#2 -- vbuaa=vbuz1 
    lda.z format_radix
    // [181] call uctoa 
    jsr uctoa
    // printf_schar::@5
    // printf_number_buffer(printf_buffer, format)
    // [182] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [183] (byte) printf_number_buffer::format_zero_padding#1 ← (byte) printf_schar::format_zero_padding#2
    // [184] call printf_number_buffer 
  // Print using format
    // [60] phi from printf_schar::@5 to printf_number_buffer [phi:printf_schar::@5->printf_number_buffer]
    // [60] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_schar::@5->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [60] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_schar::@5->printf_number_buffer#1] -- register_copy 
    // [60] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_schar::@5->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [60] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) printf_number_buffer::format_zero_padding#1 [phi:printf_schar::@5->printf_number_buffer#3] -- register_copy 
    // [60] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_schar::@5->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [60] phi (byte) printf_number_buffer::format_min_length#2 = (byte) 6 [phi:printf_schar::@5->printf_number_buffer#5] -- vbuxx=vbuc1 
    ldx #6
    jsr printf_number_buffer
    // printf_schar::@return
    // }
    // [185] return 
    rts
    // printf_schar::@1
  __b1:
    // value = -value
    // [186] (signed byte) printf_schar::value#0 ← - (signed byte) printf_schar::value#3 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    // printf_buffer.sign = '-'
    // [187] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' -- _deref_pbuc1=vbuc2 
    lda #'-'
    sta printf_buffer
    jmp __b2
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte register(X) value, byte* zp($b) buffer, byte register(A) radix)
uctoa: {
    .label buffer = $b
    .label digit = 9
    .label started = $a
    .label max_digits = 8
    .label digit_values = $11
    // if(radix==DECIMAL)
    // [188] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #DECIMAL
    beq __b2
    // uctoa::@2
    // if(radix==HEXADECIMAL)
    // [189] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #HEXADECIMAL
    beq __b3
    // uctoa::@3
    // if(radix==OCTAL)
    // [190] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #OCTAL
    beq __b4
    // uctoa::@4
    // if(radix==BINARY)
    // [191] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #BINARY
    beq __b5
    // uctoa::@5
    // *buffer++ = 'e'
    // [192] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) ← (byte) 'e' -- _deref_pbuc1=vbuc2 
    // Unknown radix
    lda #'e'
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    // *buffer++ = 'r'
    // [193] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 1) ← (byte) 'r' -- _deref_pbuc1=vbuc2 
    lda #'r'
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
    // [194] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 2) ← (byte) 'r' -- _deref_pbuc1=vbuc2 
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
    // *buffer = 0
    // [195] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+3
    // uctoa::@return
    // }
    // [196] return 
    rts
    // [197] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b2:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_DECIMAL_VALUES_CHAR [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_DECIMAL_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_DECIMAL_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 3 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #3
    sta.z max_digits
    jmp __b1
    // [197] phi from uctoa::@2 to uctoa::@1 [phi:uctoa::@2->uctoa::@1]
  __b3:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR [phi:uctoa::@2->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_HEXADECIMAL_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_HEXADECIMAL_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 2 [phi:uctoa::@2->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta.z max_digits
    jmp __b1
    // [197] phi from uctoa::@3 to uctoa::@1 [phi:uctoa::@3->uctoa::@1]
  __b4:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_OCTAL_VALUES_CHAR [phi:uctoa::@3->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_OCTAL_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_OCTAL_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 3 [phi:uctoa::@3->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #3
    sta.z max_digits
    jmp __b1
    // [197] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b5:
    // [197] phi (byte*) uctoa::digit_values#8 = (const byte*) RADIX_BINARY_VALUES_CHAR [phi:uctoa::@4->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<RADIX_BINARY_VALUES_CHAR
    sta.z digit_values
    lda #>RADIX_BINARY_VALUES_CHAR
    sta.z digit_values+1
    // [197] phi (byte) uctoa::max_digits#7 = (byte) 8 [phi:uctoa::@4->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #8
    sta.z max_digits
    // uctoa::@1
  __b1:
    // [198] phi from uctoa::@1 to uctoa::@6 [phi:uctoa::@1->uctoa::@6]
    // [198] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa::@1->uctoa::@6#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [198] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa::@1->uctoa::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [198] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa::@1->uctoa::@6#2] -- register_copy 
    // [198] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa::@1->uctoa::@6#3] -- vbuz1=vbuc1 
    sta.z digit
    // uctoa::@6
  __b6:
    // max_digits-1
    // [199] (byte~) uctoa::$4 ← (byte) uctoa::max_digits#7 - (byte) 1 -- vbuaa=vbuz1_minus_1 
    lda.z max_digits
    sec
    sbc #1
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [200] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@7 -- vbuz1_lt_vbuaa_then_la1 
    cmp.z digit
    beq !+
    bcs __b7
  !:
    // uctoa::@8
    // *buffer++ = DIGITS[(char)value]
    // [201] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [202] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [203] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    rts
    // uctoa::@7
  __b7:
    // digit_value = digit_values[digit]
    // [204] (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#8 + (byte) uctoa::digit#2) -- vbuyy=pbuz1_derefidx_vbuz2 
    ldy.z digit
    lda (digit_values),y
    tay
    // if (started || value >= digit_value)
    // [205] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@10 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b10
    // uctoa::@12
    // [206] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@10 -- vbuxx_ge_vbuyy_then_la1 
    sty.z $ff
    cpx.z $ff
    bcs __b10
    // [207] phi from uctoa::@12 to uctoa::@9 [phi:uctoa::@12->uctoa::@9]
    // [207] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@12->uctoa::@9#0] -- register_copy 
    // [207] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@12->uctoa::@9#1] -- register_copy 
    // [207] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@12->uctoa::@9#2] -- register_copy 
    // uctoa::@9
  __b9:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [208] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [198] phi from uctoa::@9 to uctoa::@6 [phi:uctoa::@9->uctoa::@6]
    // [198] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@9->uctoa::@6#0] -- register_copy 
    // [198] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@9->uctoa::@6#1] -- register_copy 
    // [198] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@9->uctoa::@6#2] -- register_copy 
    // [198] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@9->uctoa::@6#3] -- register_copy 
    jmp __b6
    // uctoa::@10
  __b10:
    // uctoa_append(buffer++, value, digit_value)
    // [209] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [210] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [211] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0 -- vbuz1=vbuyy 
    sty.z uctoa_append.sub
    // [212] call uctoa_append 
    // [216] phi from uctoa::@10 to uctoa_append [phi:uctoa::@10->uctoa_append]
    jsr uctoa_append
    // uctoa_append(buffer++, value, digit_value)
    // [213] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    // uctoa::@11
    // value = uctoa_append(buffer++, value, digit_value)
    // [214] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // value = uctoa_append(buffer++, value, digit_value);
    // [215] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [207] phi from uctoa::@11 to uctoa::@9 [phi:uctoa::@11->uctoa::@9]
    // [207] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@11->uctoa::@9#0] -- register_copy 
    // [207] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@11->uctoa::@9#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [207] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@11->uctoa::@9#2] -- register_copy 
    jmp __b9
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($b) buffer, byte register(X) value, byte zp($13) sub)
uctoa_append: {
    .label buffer = $b
    .label sub = $13
    // [217] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
    // [217] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [217] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    // uctoa_append::@1
  __b1:
    // while (value >= sub)
    // [218] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z sub
    bcs __b2
    // uctoa_append::@3
    // *buffer = DIGITS[digit]
    // [219] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuyy 
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // uctoa_append::@return
    // }
    // [220] return 
    rts
    // uctoa_append::@2
  __b2:
    // digit++;
    // [221] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuyy=_inc_vbuyy 
    iny
    // value -= sub
    // [222] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z sub
    tax
    // [217] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
    // [217] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [217] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // memset(PRINTF_SCREEN_ADDRESS, ' ', PRINTF_SCREEN_BYTES)
    // [224] call memset 
    // [38] phi from printf_cls to memset [phi:printf_cls->memset]
    // [38] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [38] phi (void*) memset::str#3 = (void*) 1024 [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<$400
    sta.z memset.str
    lda #>$400
    sta.z memset.str+1
    // [38] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // printf_cls::@1
    // printf_cursor_ptr = PRINTF_SCREEN_ADDRESS
    // [225] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z printf_cursor_ptr
    lda #>$400
    sta.z printf_cursor_ptr+1
    // printf_cursor_x = 0
    // [226] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // printf_cursor_y = 0
    // [227] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z printf_cursor_y
    // printf_cls::@return
    // }
    // [228] return 
    rts
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of binary digits
  RADIX_BINARY_VALUES_CHAR: .byte $80, $40, $20, $10, 8, 4, 2
  // Values of octal digits
  RADIX_OCTAL_VALUES_CHAR: .byte $40, 8
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_CHAR: .byte $64, $a
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES: .word $1000, $100, $10
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

