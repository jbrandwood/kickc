
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @2
  (byte) idx#21 ← phi( @2/(byte) idx#24 )
  (byte*) print::msg#0 ← (const byte*) main::msg
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) idx#11 ← phi( main/(byte) idx#9 )
  (byte) idx#0 ← (byte) idx#11
  (byte*) print::msg#1 ← (const byte*) main::msg1
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) idx#12 ← phi( main::@1/(byte) idx#9 )
  (byte) idx#1 ← (byte) idx#12
  call print1 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) idx#13 ← phi( main::@2/(byte) idx#6 )
  (byte) idx#2 ← (byte) idx#13
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte) idx#14 ← phi( main::@3/(byte) idx#2 )
  (byte) idx#3 ← (byte) idx#14
  return 
  to:@return

(void()) print1()
print1: scope:[print1]  from main::@2
  (byte) idx#22 ← phi( main::@2/(byte) idx#1 )
  (byte*) print::msg#2 ← (const byte*) print1::msg
  call print 
  to:print1::@1
print1::@1: scope:[print1]  from print1
  (byte) idx#15 ← phi( print1/(byte) idx#9 )
  (byte) idx#4 ← (byte) idx#15
  (byte*) print::msg#3 ← (const byte*) print1::msg1
  call print 
  to:print1::@2
print1::@2: scope:[print1]  from print1::@1
  (byte) idx#16 ← phi( print1::@1/(byte) idx#9 )
  (byte) idx#5 ← (byte) idx#16
  to:print1::@return
print1::@return: scope:[print1]  from print1::@2
  (byte) idx#17 ← phi( print1::@2/(byte) idx#5 )
  (byte) idx#6 ← (byte) idx#17
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) idx#7 ← (byte) 0
  to:@2

(void()) print((byte*) print::msg)
print: scope:[print]  from main main::@1 print1 print1::@1
  (byte) idx#25 ← phi( main/(byte) idx#21 main::@1/(byte) idx#0 print1/(byte) idx#22 print1::@1/(byte) idx#4 )
  (byte*) print::msg#7 ← phi( main/(byte*) print::msg#0 main::@1/(byte*) print::msg#1 print1/(byte*) print::msg#2 print1::@1/(byte*) print::msg#3 )
  to:print::@1
print::@1: scope:[print]  from print print::@2
  (byte) idx#23 ← phi( print/(byte) idx#25 print::@2/(byte) idx#8 )
  (byte*) print::msg#5 ← phi( print/(byte*) print::msg#7 print::@2/(byte*) print::msg#4 )
  (bool~) print::$0 ← (number) 0 != *((byte*) print::msg#5)
  if((bool~) print::$0) goto print::@2
  to:print::@return
print::@2: scope:[print]  from print::@1
  (byte) idx#18 ← phi( print::@1/(byte) idx#23 )
  (byte*) print::msg#6 ← phi( print::@1/(byte*) print::msg#5 )
  *((const nomodify byte*) SCREEN + (byte) idx#18) ← *((byte*) print::msg#6)
  (byte) idx#8 ← ++ (byte) idx#18
  (byte*) print::msg#4 ← ++ (byte*) print::msg#6
  to:print::@1
print::@return: scope:[print]  from print::@1
  (byte) idx#19 ← phi( print::@1/(byte) idx#23 )
  (byte) idx#9 ← (byte) idx#19
  return 
  to:@return
@2: scope:[]  from @1
  (byte) idx#24 ← phi( @1/(byte) idx#7 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte) idx#20 ← phi( @2/(byte) idx#3 )
  (byte) idx#10 ← (byte) idx#20
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*)(number) $400
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#17
(byte) idx#18
(byte) idx#19
(byte) idx#2
(byte) idx#20
(byte) idx#21
(byte) idx#22
(byte) idx#23
(byte) idx#24
(byte) idx#25
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const byte*) main::msg[(byte) 2]  = (byte*) "a"
(const byte*) main::msg1[(byte) 2]  = (byte*) "b"
(void()) print((byte*) print::msg)
(bool~) print::$0
(label) print::@1
(label) print::@2
(label) print::@return
(byte*) print::msg
(byte*) print::msg#0
(byte*) print::msg#1
(byte*) print::msg#2
(byte*) print::msg#3
(byte*) print::msg#4
(byte*) print::msg#5
(byte*) print::msg#6
(byte*) print::msg#7
(void()) print1()
(label) print1::@1
(label) print1::@2
(label) print1::@return
(const byte*) print1::msg[(byte) 2]  = (byte*) "c"
(const byte*) print1::msg1[(byte) 2]  = (byte*) "a"

Adding number conversion cast (unumber) 0 in (bool~) print::$0 ← (number) 0 != *((byte*) print::msg#5)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias idx#0 = idx#11 
Alias idx#1 = idx#12 
Alias idx#13 = idx#2 idx#14 idx#3 
Alias idx#15 = idx#4 
Alias idx#16 = idx#5 idx#17 idx#6 
Alias print::msg#5 = print::msg#6 
Alias idx#18 = idx#23 idx#19 idx#9 
Alias idx#24 = idx#7 
Alias idx#10 = idx#20 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#21 (byte) idx#24
Identical Phi Values (byte) idx#0 (byte) idx#18
Identical Phi Values (byte) idx#1 (byte) idx#18
Identical Phi Values (byte) idx#13 (byte) idx#16
Identical Phi Values (byte) idx#22 (byte) idx#1
Identical Phi Values (byte) idx#15 (byte) idx#18
Identical Phi Values (byte) idx#16 (byte) idx#18
Identical Phi Values (byte) idx#10 (byte) idx#13
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print::$0 [22] if((byte) 0!=*((byte*) print::msg#5)) goto print::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print::msg#0 = main::msg
Constant (const byte*) print::msg#1 = main::msg1
Constant (const byte*) print::msg#2 = print1::msg
Constant (const byte*) print::msg#3 = print1::msg1
Constant (const byte) idx#24 = 0
Successful SSA optimization Pass2ConstantIdentification
Consolidated constant strings into (const byte*) msg
Successful SSA optimization Pass2ConstantStringConsolidation
Inlining constant with var siblings (const byte*) print::msg#0
Inlining constant with var siblings (const byte*) print::msg#1
Inlining constant with var siblings (const byte*) print::msg#2
Inlining constant with var siblings (const byte*) print::msg#3
Inlining constant with var siblings (const byte) idx#24
Constant inlined print::msg#3 = (const byte*) msg
Constant inlined print::msg#2 = (const byte*) print1::msg
Constant inlined print::msg#1 = (const byte*) main::msg1
Constant inlined print::msg#0 = (const byte*) msg
Constant inlined print1::msg1 = (const byte*) msg
Constant inlined main::msg = (const byte*) msg
Constant inlined idx#24 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of print1::@2
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print:7 print:9 print1:11 
Calls in [print1] to print:15 print:17 

Created 4 initial phi equivalence classes
Coalesced [8] idx#26 ← idx#18
Coalesced (already) [14] idx#27 ← idx#18
Coalesced (already) [16] idx#28 ← idx#18
Coalesced [21] print::msg#8 ← print::msg#7
Coalesced (already) [22] idx#29 ← idx#25
Coalesced [29] print::msg#9 ← print::msg#4
Coalesced [30] idx#30 ← idx#8
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) @3
Culled Empty Block (label) main::@3
Culled Empty Block (label) print1::@2
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of print1
Adding NOP phi() at start of print1::@1

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call print1 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) print1()
print1: scope:[print1]  from main::@2
  [11] phi()
  [12] call print 
  to:print1::@1
print1::@1: scope:[print1]  from print1
  [13] phi()
  [14] call print 
  to:print1::@return
print1::@return: scope:[print1]  from print1::@1
  [15] return 
  to:@return

(void()) print((byte*) print::msg)
print: scope:[print]  from main main::@1 print1 print1::@1
  [16] (byte) idx#25 ← phi( main/(byte) 0 main::@1/(byte) idx#18 print1/(byte) idx#18 print1::@1/(byte) idx#18 )
  [16] (byte*) print::msg#7 ← phi( main/(const byte*) msg main::@1/(const byte*) main::msg1 print1/(const byte*) print1::msg print1::@1/(const byte*) msg )
  to:print::@1
print::@1: scope:[print]  from print print::@2
  [17] (byte) idx#18 ← phi( print/(byte) idx#25 print::@2/(byte) idx#8 )
  [17] (byte*) print::msg#5 ← phi( print/(byte*) print::msg#7 print::@2/(byte*) print::msg#4 )
  [18] if((byte) 0!=*((byte*) print::msg#5)) goto print::@2
  to:print::@return
print::@return: scope:[print]  from print::@1
  [19] return 
  to:@return
print::@2: scope:[print]  from print::@1
  [20] *((const nomodify byte*) SCREEN + (byte) idx#18) ← *((byte*) print::msg#5)
  [21] (byte) idx#8 ← ++ (byte) idx#18
  [22] (byte*) print::msg#4 ← ++ (byte*) print::msg#5
  to:print::@1


VARIABLE REGISTER WEIGHTS
(byte) idx
(byte) idx#18 2837.9090909090905
(byte) idx#25 1214.0
(byte) idx#8 10001.0
(void()) main()
(void()) print((byte*) print::msg)
(byte*) print::msg
(byte*) print::msg#4 20002.0
(byte*) print::msg#5 10251.25
(byte*) print::msg#7 1001.0
(void()) print1()

Initial phi equivalence classes
[ idx#25 idx#18 idx#8 ]
[ print::msg#5 print::msg#7 print::msg#4 ]
Complete equivalence classes
[ idx#25 idx#18 idx#8 ]
[ print::msg#5 print::msg#7 print::msg#4 ]
Allocated zp[1]:2 [ idx#25 idx#18 idx#8 ]
Allocated zp[2]:3 [ print::msg#5 print::msg#7 print::msg#4 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Demonstrates problems with local labels overwriting global labels
// This should produce "abca" - but produces "abcc" because the local variable containing "c" overrides the global variable containing "a"
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Screen pointer and index
  .label SCREEN = $400
  .label idx = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print 
    // [16] phi from main to print [phi:main->print]
  print_from_main:
    // [16] phi (byte) idx#25 = (byte) 0 [phi:main->print#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [16] phi (byte*) print::msg#7 = (const byte*) msg [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print.msg
    lda #>msg
    sta.z print.msg+1
    jsr print
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call print 
    // [16] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [16] phi (byte) idx#25 = (byte) idx#18 [phi:main::@1->print#0] -- register_copy 
    // [16] phi (byte*) print::msg#7 = (const byte*) main::msg1 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.msg
    lda #>msg1
    sta.z print.msg+1
    jsr print
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call print1 
    // [11] phi from main::@2 to print1 [phi:main::@2->print1]
  print1_from___b2:
    jsr print1
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
    msg1: .text "b"
    .byte 0
}
  // print1
print1: {
    // [12] call print 
    // [16] phi from print1 to print [phi:print1->print]
  print_from_print1:
    // [16] phi (byte) idx#25 = (byte) idx#18 [phi:print1->print#0] -- register_copy 
    // [16] phi (byte*) print::msg#7 = (const byte*) print1::msg [phi:print1->print#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print.msg
    lda #>msg
    sta.z print.msg+1
    jsr print
    // [13] phi from print1 to print1::@1 [phi:print1->print1::@1]
  __b1_from_print1:
    jmp __b1
    // print1::@1
  __b1:
    // [14] call print 
    // [16] phi from print1::@1 to print [phi:print1::@1->print]
  print_from___b1:
    // [16] phi (byte) idx#25 = (byte) idx#18 [phi:print1::@1->print#0] -- register_copy 
    // [16] phi (byte*) print::msg#7 = (const byte*) msg [phi:print1::@1->print#1] -- pbuz1=pbuc1 
    lda #<@msg
    sta.z print.msg
    lda #>@msg
    sta.z print.msg+1
    jsr print
    jmp __breturn
    // print1::@return
  __breturn:
    // [15] return 
    rts
    msg: .text "c"
    .byte 0
}
  // print
// print(byte* zp(3) msg)
print: {
    .label msg = 3
    // [17] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
  __b1_from_print:
  __b1_from___b2:
    // [17] phi (byte) idx#18 = (byte) idx#25 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [17] phi (byte*) print::msg#5 = (byte*) print::msg#7 [phi:print/print::@2->print::@1#1] -- register_copy 
    jmp __b1
    // print::@1
  __b1:
    // [18] if((byte) 0!=*((byte*) print::msg#5)) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    jmp __breturn
    // print::@return
  __breturn:
    // [19] return 
    rts
    // print::@2
  __b2:
    // [20] *((const nomodify byte*) SCREEN + (byte) idx#18) ← *((byte*) print::msg#5) -- pbuc1_derefidx_vbuz1=_deref_pbuz2 
    ldx.z idx
    ldy #0
    lda (msg),y
    sta SCREEN,x
    // [21] (byte) idx#8 ← ++ (byte) idx#18 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [22] (byte*) print::msg#4 ← ++ (byte*) print::msg#5 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1_from___b2
}
  // File Data
  msg: .text "a"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [18] if((byte) 0!=*((byte*) print::msg#5)) goto print::@2 [ idx#18 print::msg#5 ] ( main:2::print:5 [ idx#18 print::msg#5 ] { }  main:2::print:7 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  main:2::print1:9::print:12 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  main:2::print1:9::print:14 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ idx#25 idx#18 idx#8 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ idx#25 idx#18 idx#8 ]
Statement [20] *((const nomodify byte*) SCREEN + (byte) idx#18) ← *((byte*) print::msg#5) [ idx#18 print::msg#5 ] ( main:2::print:5 [ idx#18 print::msg#5 ] { }  main:2::print:7 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  main:2::print1:9::print:12 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  main:2::print1:9::print:14 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  ) always clobbers reg byte a reg byte y 
Statement [18] if((byte) 0!=*((byte*) print::msg#5)) goto print::@2 [ idx#18 print::msg#5 ] ( main:2::print:5 [ idx#18 print::msg#5 ] { }  main:2::print:7 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  main:2::print1:9::print:12 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  main:2::print1:9::print:14 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  ) always clobbers reg byte a reg byte y 
Statement [20] *((const nomodify byte*) SCREEN + (byte) idx#18) ← *((byte*) print::msg#5) [ idx#18 print::msg#5 ] ( main:2::print:5 [ idx#18 print::msg#5 ] { }  main:2::print:7 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  main:2::print1:9::print:12 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  main:2::print1:9::print:14 [ idx#18 print::msg#5 ] { { idx#18 = idx#25 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ idx#25 idx#18 idx#8 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ print::msg#5 print::msg#7 print::msg#4 ] : zp[2]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 31,254.25: zp[2]:3 [ print::msg#5 print::msg#7 print::msg#4 ] 
Uplift Scope [] 14,052.91: zp[1]:2 [ idx#25 idx#18 idx#8 ] 
Uplift Scope [main] 
Uplift Scope [print1] 

Uplifting [print] best 660 combination zp[2]:3 [ print::msg#5 print::msg#7 print::msg#4 ] 
Uplifting [] best 597 combination reg byte x [ idx#25 idx#18 idx#8 ] 
Uplifting [main] best 597 combination 
Uplifting [print1] best 597 combination 
Allocated (was zp[2]:3) zp[2]:2 [ print::msg#5 print::msg#7 print::msg#4 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates problems with local labels overwriting global labels
// This should produce "abca" - but produces "abcc" because the local variable containing "c" overrides the global variable containing "a"
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Screen pointer and index
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print 
    // [16] phi from main to print [phi:main->print]
  print_from_main:
    // [16] phi (byte) idx#25 = (byte) 0 [phi:main->print#0] -- vbuxx=vbuc1 
    ldx #0
    // [16] phi (byte*) print::msg#7 = (const byte*) msg [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print.msg
    lda #>msg
    sta.z print.msg+1
    jsr print
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call print 
    // [16] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [16] phi (byte) idx#25 = (byte) idx#18 [phi:main::@1->print#0] -- register_copy 
    // [16] phi (byte*) print::msg#7 = (const byte*) main::msg1 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.msg
    lda #>msg1
    sta.z print.msg+1
    jsr print
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call print1 
    // [11] phi from main::@2 to print1 [phi:main::@2->print1]
  print1_from___b2:
    jsr print1
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
    msg1: .text "b"
    .byte 0
}
  // print1
print1: {
    // [12] call print 
    // [16] phi from print1 to print [phi:print1->print]
  print_from_print1:
    // [16] phi (byte) idx#25 = (byte) idx#18 [phi:print1->print#0] -- register_copy 
    // [16] phi (byte*) print::msg#7 = (const byte*) print1::msg [phi:print1->print#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print.msg
    lda #>msg
    sta.z print.msg+1
    jsr print
    // [13] phi from print1 to print1::@1 [phi:print1->print1::@1]
  __b1_from_print1:
    jmp __b1
    // print1::@1
  __b1:
    // [14] call print 
    // [16] phi from print1::@1 to print [phi:print1::@1->print]
  print_from___b1:
    // [16] phi (byte) idx#25 = (byte) idx#18 [phi:print1::@1->print#0] -- register_copy 
    // [16] phi (byte*) print::msg#7 = (const byte*) msg [phi:print1::@1->print#1] -- pbuz1=pbuc1 
    lda #<@msg
    sta.z print.msg
    lda #>@msg
    sta.z print.msg+1
    jsr print
    jmp __breturn
    // print1::@return
  __breturn:
    // [15] return 
    rts
    msg: .text "c"
    .byte 0
}
  // print
// print(byte* zp(2) msg)
print: {
    .label msg = 2
    // [17] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
  __b1_from_print:
  __b1_from___b2:
    // [17] phi (byte) idx#18 = (byte) idx#25 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [17] phi (byte*) print::msg#5 = (byte*) print::msg#7 [phi:print/print::@2->print::@1#1] -- register_copy 
    jmp __b1
    // print::@1
  __b1:
    // [18] if((byte) 0!=*((byte*) print::msg#5)) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    jmp __breturn
    // print::@return
  __breturn:
    // [19] return 
    rts
    // print::@2
  __b2:
    // [20] *((const nomodify byte*) SCREEN + (byte) idx#18) ← *((byte*) print::msg#5) -- pbuc1_derefidx_vbuxx=_deref_pbuz1 
    ldy #0
    lda (msg),y
    sta SCREEN,x
    // [21] (byte) idx#8 ← ++ (byte) idx#18 -- vbuxx=_inc_vbuxx 
    inx
    // [22] (byte*) print::msg#4 ← ++ (byte*) print::msg#5 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1_from___b2
}
  // File Data
  msg: .text "a"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction print_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print1_from___b2:
Removing instruction __b1_from_print1:
Removing instruction print_from___b1:
Removing instruction __b1_from_print:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction print_from_print1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*) 1024
(byte) idx
(byte) idx#18 reg byte x 2837.9090909090905
(byte) idx#25 reg byte x 1214.0
(byte) idx#8 reg byte x 10001.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::msg1[(byte) 2]  = (byte*) "b"
(const byte*) msg[(byte) 2]  = (byte*) "a"
(void()) print((byte*) print::msg)
(label) print::@1
(label) print::@2
(label) print::@return
(byte*) print::msg
(byte*) print::msg#4 msg zp[2]:2 20002.0
(byte*) print::msg#5 msg zp[2]:2 10251.25
(byte*) print::msg#7 msg zp[2]:2 1001.0
(void()) print1()
(label) print1::@1
(label) print1::@return
(const byte*) print1::msg[(byte) 2]  = (byte*) "c"

reg byte x [ idx#25 idx#18 idx#8 ]
zp[2]:2 [ print::msg#5 print::msg#7 print::msg#4 ]


FINAL ASSEMBLER
Score: 510

  // File Comments
// Demonstrates problems with local labels overwriting global labels
// This should produce "abca" - but produces "abcc" because the local variable containing "c" overrides the global variable containing "a"
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Screen pointer and index
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // print("a")
    // [5] call print 
    // [16] phi from main to print [phi:main->print]
    // [16] phi (byte) idx#25 = (byte) 0 [phi:main->print#0] -- vbuxx=vbuc1 
    ldx #0
    // [16] phi (byte*) print::msg#7 = (const byte*) msg [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print.msg
    lda #>msg
    sta.z print.msg+1
    jsr print
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print("b")
    // [7] call print 
    // [16] phi from main::@1 to print [phi:main::@1->print]
    // [16] phi (byte) idx#25 = (byte) idx#18 [phi:main::@1->print#0] -- register_copy 
    // [16] phi (byte*) print::msg#7 = (const byte*) main::msg1 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.msg
    lda #>msg1
    sta.z print.msg+1
    jsr print
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // print1()
    // [9] call print1 
    // [11] phi from main::@2 to print1 [phi:main::@2->print1]
    jsr print1
    // main::@return
    // }
    // [10] return 
    rts
    msg1: .text "b"
    .byte 0
}
  // print1
print1: {
    // print("c")
    // [12] call print 
    // [16] phi from print1 to print [phi:print1->print]
    // [16] phi (byte) idx#25 = (byte) idx#18 [phi:print1->print#0] -- register_copy 
    // [16] phi (byte*) print::msg#7 = (const byte*) print1::msg [phi:print1->print#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print.msg
    lda #>msg
    sta.z print.msg+1
    jsr print
    // [13] phi from print1 to print1::@1 [phi:print1->print1::@1]
    // print1::@1
    // print("a")
    // [14] call print 
    // [16] phi from print1::@1 to print [phi:print1::@1->print]
    // [16] phi (byte) idx#25 = (byte) idx#18 [phi:print1::@1->print#0] -- register_copy 
    // [16] phi (byte*) print::msg#7 = (const byte*) msg [phi:print1::@1->print#1] -- pbuz1=pbuc1 
    lda #<@msg
    sta.z print.msg
    lda #>@msg
    sta.z print.msg+1
    jsr print
    // print1::@return
    // }
    // [15] return 
    rts
    msg: .text "c"
    .byte 0
}
  // print
// print(byte* zp(2) msg)
print: {
    .label msg = 2
    // [17] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
    // [17] phi (byte) idx#18 = (byte) idx#25 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [17] phi (byte*) print::msg#5 = (byte*) print::msg#7 [phi:print/print::@2->print::@1#1] -- register_copy 
    // print::@1
  __b1:
    // while(*msg)
    // [18] if((byte) 0!=*((byte*) print::msg#5)) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    // print::@return
    // }
    // [19] return 
    rts
    // print::@2
  __b2:
    // SCREEN[idx++] = *msg++
    // [20] *((const nomodify byte*) SCREEN + (byte) idx#18) ← *((byte*) print::msg#5) -- pbuc1_derefidx_vbuxx=_deref_pbuz1 
    ldy #0
    lda (msg),y
    sta SCREEN,x
    // SCREEN[idx++] = *msg++;
    // [21] (byte) idx#8 ← ++ (byte) idx#18 -- vbuxx=_inc_vbuxx 
    inx
    // [22] (byte*) print::msg#4 ← ++ (byte*) print::msg#5 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1
}
  // File Data
  msg: .text "a"
  .byte 0

