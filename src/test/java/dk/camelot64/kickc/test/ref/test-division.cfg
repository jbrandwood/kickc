@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@15
@15: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @15
  [3] phi() [ ] ( )
main: scope:[main]  from @15
  [4] phi() [ ] ( main:2 [ ] )
  [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call test_8s param-assignment [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  [9] call test_8u param-assignment [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi() [ line_cursor#1 ] ( main:2 [ line_cursor#1 ] )
  [11] call test_16u param-assignment [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@3
  [12] return  [ ] ( main:2 [ ] )
  to:@return
test_16u: scope:[test_16u]  from main::@3
  [13] phi() [ line_cursor#1 ] ( main:2::test_16u:11 [ line_cursor#1 ] )
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@11
  [14] (word) rem16u#16 ← phi( test_16u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_16u::@11/(word) div16u::rem#8 ) [ test_16u::i#10 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 line_cursor#1 ] )
  [14] (byte) test_16u::i#10 ← phi( test_16u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_16u::@11/(byte) test_16u::i#1 ) [ test_16u::i#10 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 line_cursor#1 ] )
  [15] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 line_cursor#1 ] )
  [16] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 ] )
  [17] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 line_cursor#1 ] )
  [18] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#1 div16u::divisor#0 line_cursor#1 ] )
  [19] call div16u param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 line_cursor#1 ] )
  [20] (word) div16u::return#2 ← (word) div16u::return#0 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 line_cursor#1 ] )
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@1
  [21] (word) test_16u::res#0 ← (word) div16u::return#2 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 line_cursor#1 ] )
  [22] (word) print_word::w#0 ← (word) test_16u::dividend#0 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 line_cursor#1 ] )
  [23] (byte*~) char_cursor#122 ← (byte*) line_cursor#1 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 print_word::w#0 char_cursor#122 line_cursor#1 ] )
  [24] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  [25] phi() [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  [26] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] )
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  [27] (word) print_word::w#1 ← (word) test_16u::divisor#0 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#1 char_cursor#100 ] )
  [28] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  [29] phi() [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] )
  [30] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] )
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  [31] (word) print_word::w#2 ← (word) test_16u::res#0 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#2 char_cursor#100 ] )
  [32] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  [33] phi() [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  [34] call print_str param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] )
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  [35] (word) print_word::w#3 ← (word) div16u::rem#8 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#3 char_cursor#100 ] )
  [36] call print_word param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  [37] phi() [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  [38] call print_ln param-assignment [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] )
  to:test_16u::@11
test_16u::@11: scope:[test_16u]  from test_16u::@10
  [39] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] )
  [40] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] ( main:2::test_16u:11 [ test_16u::i#1 div16u::rem#8 line_cursor#1 ] )
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@11
  [41] return  [ ] ( main:2::test_16u:11 [ ] )
  to:@return
print_ln: scope:[print_ln]  from test_16u::@10 test_8s::@10 test_8u::@10
  [42] (byte*) line_cursor#33 ← phi( test_16u::@10/(byte*) line_cursor#1 test_8s::@10/(byte*) line_cursor#37 test_8u::@10/(byte*) line_cursor#1 ) [ line_cursor#33 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#33 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#33 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#33 char_cursor#14 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [43] (byte*) line_cursor#17 ← phi( print_ln/(byte*) line_cursor#33 print_ln::@1/(byte*) line_cursor#1 ) [ line_cursor#17 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#17 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#17 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#17 char_cursor#14 ] )
  [44] (byte*) line_cursor#1 ← (byte*) line_cursor#17 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] )
  [45] if((byte*) line_cursor#1<(byte*) char_cursor#14) goto print_ln::@1 [ line_cursor#1 char_cursor#14 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 char_cursor#14 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 char_cursor#14 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [46] return  [ line_cursor#1 ] ( main:2::test_16u:11::print_ln:38 [ test_16u::i#10 div16u::rem#8 line_cursor#1 ] main:2::test_8u:9::print_ln:114 [ test_8u::i#10 line_cursor#1 ] main:2::test_8s:7::print_ln:159 [ rem8u#1 test_8s::i#10 rem8s#3 line_cursor#1 ] )
  to:@return
print_word: scope:[print_word]  from test_16u::@3 test_16u::@5 test_16u::@7 test_16u::@9
  [47] (byte*) char_cursor#104 ← phi( test_16u::@3/(byte*~) char_cursor#122 test_16u::@5/(byte*) char_cursor#100 test_16u::@7/(byte*) char_cursor#100 test_16u::@9/(byte*) char_cursor#100 ) [ print_word::w#4 char_cursor#104 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 ] )
  [47] (word) print_word::w#4 ← phi( test_16u::@3/(word) print_word::w#0 test_16u::@5/(word) print_word::w#1 test_16u::@7/(word) print_word::w#2 test_16u::@9/(word) print_word::w#3 ) [ print_word::w#4 char_cursor#104 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 ] )
  [48] (byte) print_byte::b#1 ← > (word) print_word::w#4 [ print_word::w#4 char_cursor#104 print_byte::b#1 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#104 print_byte::b#1 ] )
  [49] call print_byte param-assignment [ char_cursor#14 print_word::w#4 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_word::w#4 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_word::w#4 ] )
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [50] (byte) print_byte::b#2 ← < (word) print_word::w#4 [ char_cursor#14 print_byte::b#2 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#2 ] )
  [51] call print_byte param-assignment [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [52] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] )
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@1 print_word print_word::@1 test_8u::@3 test_8u::@5 test_8u::@7 test_8u::@9
  [53] (byte*) char_cursor#105 ← phi( print_sbyte::@1/(byte*) char_cursor#102 print_word/(byte*) char_cursor#104 print_word::@1/(byte*) char_cursor#14 test_8u::@3/(byte*~) char_cursor#129 test_8u::@5/(byte*) char_cursor#100 test_8u::@7/(byte*) char_cursor#100 test_8u::@9/(byte*) char_cursor#100 ) [ print_byte::b#7 char_cursor#105 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 ] )
  [53] (byte) print_byte::b#7 ← phi( print_sbyte::@1/(byte~) print_byte::b#9 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 test_8u::@3/(byte) print_byte::b#3 test_8u::@5/(byte) print_byte::b#4 test_8u::@7/(byte) print_byte::b#5 test_8u::@9/(byte) print_byte::b#6 ) [ print_byte::b#7 char_cursor#105 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 ] )
  [54] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#105 print_byte::$0 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_byte::$0 ] )
  [55] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#105 print_char::ch#1 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#105 print_char::ch#1 ] )
  [56] call print_char param-assignment [ char_cursor#14 print_byte::b#7 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::b#7 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::b#7 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::b#7 ] )
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [57] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#14 print_byte::$2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_byte::$2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_byte::$2 ] )
  [58] (byte) print_char::ch#2 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#14 print_char::ch#2 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_char::ch#2 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_char::ch#2 ] )
  [59] call print_char param-assignment [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [60] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@2
  [61] (byte*) char_cursor#64 ← phi( print_byte/(byte*) char_cursor#105 print_byte::@1/(byte*) char_cursor#14 print_sbyte::@2/(byte*) char_cursor#103 ) [ print_char::ch#3 char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] )
  [61] (byte) print_char::ch#3 ← phi( print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sbyte::@2/(byte) '-' ) [ print_char::ch#3 char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 print_char::ch#3 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char::ch#3 char_cursor#64 ] )
  [62] *((byte*) char_cursor#64) ← (byte) print_char::ch#3 [ char_cursor#64 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#64 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#64 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#64 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#64 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#64 ] )
  [63] (byte*) char_cursor#14 ← ++ (byte*) char_cursor#64 [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] )
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [64] return  [ char_cursor#14 ] ( main:2::test_16u:11::print_word:24::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:56 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:56 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:56 [ line_cursor#1 test_8u::i#10 rem8u#1 print_byte::b#7 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:56 [ line_cursor#1 test_8u::i#10 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:56 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#7 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:49::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_word::w#4 char_cursor#14 ] main:2::test_16u:11::print_word:24::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:28::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:32::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_16u:11::print_word:36::print_byte:51::print_char:59 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 ] main:2::test_8u:9::print_byte:100::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:104::print_char:59 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:108::print_char:59 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 ] main:2::test_8u:9::print_byte:112::print_char:59 [ line_cursor#1 test_8u::i#10 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_byte:171::print_char:59 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:145::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157::print_char:167 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 char_cursor#14 ] )
  to:@return
print_str: scope:[print_str]  from test_16u::@4 test_16u::@6 test_16u::@8 test_8s::@4 test_8s::@6 test_8s::@8 test_8u::@4 test_8u::@6 test_8u::@8
  [65] (byte*) print_str::str#12 ← phi( test_16u::@4/(const string) test_16u::str test_16u::@6/(const string) test_16u::str1 test_16u::@8/(const string) test_16u::str2 test_8s::@4/(const string) test_8s::str test_8s::@6/(const string) test_8s::str1 test_8s::@8/(const string) test_8s::str2 test_8u::@4/(const string) test_8u::str test_8u::@6/(const string) test_8u::str1 test_8u::@8/(const string) test_8u::str2 ) [ char_cursor#14 print_str::str#12 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#14 print_str::str#12 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#14 print_str::str#12 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#14 print_str::str#12 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#14 print_str::str#12 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#14 print_str::str#12 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#14 print_str::str#12 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_str::str#12 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_str::str#12 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_str::str#12 ] )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [66] (byte*) char_cursor#100 ← phi( print_str/(byte*) char_cursor#14 print_str::@2/(byte*) char_cursor#1 ) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] )
  [66] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@2/(byte*) print_str::str#0 ) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] )
  [67] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] )
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [68] return  [ char_cursor#100 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 ] )
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [69] *((byte*) char_cursor#100) ← *((byte*) print_str::str#10) [ char_cursor#100 print_str::str#10 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#100 print_str::str#10 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#100 print_str::str#10 ] )
  [70] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#100 [ print_str::str#10 char_cursor#1 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_str::str#10 char_cursor#1 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_str::str#10 char_cursor#1 ] )
  [71] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 [ print_str::str#0 char_cursor#1 ] ( main:2::test_16u:11::print_str:26 [ test_16u::i#10 div16u::rem#8 test_16u::divisor#0 test_16u::res#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_16u:11::print_str:30 [ test_16u::i#10 div16u::rem#8 test_16u::res#0 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_16u:11::print_str:34 [ test_16u::i#10 div16u::rem#8 line_cursor#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:102 [ line_cursor#1 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:106 [ line_cursor#1 test_8u::i#10 test_8u::res#0 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:110 [ line_cursor#1 test_8u::i#10 rem8u#1 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:147 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:151 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:155 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_str::str#0 char_cursor#1 ] )
  to:print_str::@1
div16u: scope:[div16u]  from test_16u::@1
  [72] phi() [ div16u::dividend#1 div16u::divisor#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::dividend#1 div16u::divisor#0 ] )
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u div16u::@3
  [73] (byte) div16u::i#2 ← phi( div16u/(byte/signed byte/word/signed word/dword/signed dword) 0 div16u::@3/(byte) div16u::i#1 ) [ div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] )
  [73] (word) div16u::quotient#3 ← phi( div16u/(byte/signed byte/word/signed word/dword/signed dword) 0 div16u::@3/(word) div16u::return#0 ) [ div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] )
  [73] (word) div16u::dividend#2 ← phi( div16u/(word) div16u::dividend#1 div16u::@3/(word) div16u::dividend#0 ) [ div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] )
  [73] (word) div16u::rem#4 ← phi( div16u/(byte/signed byte/word/signed word/dword/signed dword) 0 div16u::@3/(word) div16u::rem#8 ) [ div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::rem#4 div16u::dividend#2 div16u::quotient#3 div16u::i#2 ] )
  [74] (word) div16u::rem#1 ← (word) div16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] )
  [75] (byte~) div16u::$1 ← > (word) div16u::dividend#2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$1 ] )
  [76] (byte~) div16u::$2 ← (byte~) div16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 div16u::$2 ] )
  [77] if((byte~) div16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16u::@2 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#1 ] )
  to:div16u::@4
div16u::@4: scope:[div16u]  from div16u::@1
  [78] (word) div16u::rem#2 ← ++ (word) div16u::rem#1 [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#2 ] )
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u::@1 div16u::@4
  [79] (word) div16u::rem#5 ← phi( div16u::@1/(word) div16u::rem#1 div16u::@4/(word) div16u::rem#2 ) [ div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#5 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::dividend#2 div16u::quotient#3 div16u::i#2 div16u::rem#5 ] )
  [80] (word) div16u::dividend#0 ← (word) div16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::quotient#3 div16u::i#2 div16u::dividend#0 div16u::rem#5 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::quotient#3 div16u::i#2 div16u::dividend#0 div16u::rem#5 ] )
  [81] (word) div16u::quotient#1 ← (word) div16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] )
  [82] if((word) div16u::rem#5<(word) div16u::divisor#0) goto div16u::@3 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#1 ] )
  to:div16u::@5
div16u::@5: scope:[div16u]  from div16u::@2
  [83] (word) div16u::quotient#2 ← ++ (word) div16u::quotient#1 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#2 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::rem#5 div16u::quotient#2 ] )
  [84] (word) div16u::rem#3 ← (word) div16u::rem#5 - (word) div16u::divisor#0 [ div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::divisor#0 div16u::i#2 div16u::dividend#0 div16u::quotient#2 div16u::rem#3 ] )
  to:div16u::@3
div16u::@3: scope:[div16u]  from div16u::@2 div16u::@5
  [85] (word) div16u::return#0 ← phi( div16u::@2/(word) div16u::quotient#1 div16u::@5/(word) div16u::quotient#2 ) [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::i#2 div16u::dividend#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::i#2 div16u::dividend#0 ] )
  [85] (word) div16u::rem#8 ← phi( div16u::@2/(word) div16u::rem#5 div16u::@5/(word) div16u::rem#3 ) [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::i#2 div16u::dividend#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::i#2 div16u::dividend#0 ] )
  [86] (byte) div16u::i#1 ← ++ (byte) div16u::i#2 [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] )
  [87] if((byte) div16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto div16u::@1 [ div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::divisor#0 div16u::return#0 div16u::dividend#0 div16u::i#1 ] )
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@3
  [88] return  [ div16u::rem#8 div16u::return#0 ] ( main:2::test_16u:11::div16u:19 [ test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 line_cursor#1 div16u::rem#8 div16u::return#0 ] )
  to:@return
test_8u: scope:[test_8u]  from main::@2
  [89] phi() [ line_cursor#1 ] ( main:2::test_8u:9 [ line_cursor#1 ] )
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  [90] (byte) test_8u::i#10 ← phi( test_8u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8u::@11/(byte) test_8u::i#1 ) [ line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 ] )
  [91] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 ] )
  [92] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  [93] (byte) div8u::dividend#2 ← (byte) test_8u::dividend#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 ] )
  [94] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 ] )
  [95] call div8u param-assignment [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] )
  [96] (byte) div8u::return#3 ← (byte) div8u::return#0 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 rem8u#1 ] )
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@1
  [97] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  [98] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ line_cursor#1 print_byte::b#3 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  [99] (byte*~) char_cursor#129 ← (byte*) line_cursor#1 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 print_byte::b#3 char_cursor#129 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  [100] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  [101] phi() [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  [102] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 rem8u#1 ] )
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  [103] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ line_cursor#1 char_cursor#100 print_byte::b#4 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#4 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  [104] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  [105] phi() [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  [106] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::res#0 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 test_8u::res#0 rem8u#1 ] )
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  [107] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ line_cursor#1 char_cursor#100 print_byte::b#5 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#5 test_8u::i#10 rem8u#1 ] )
  [108] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] )
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  [109] phi() [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 rem8u#1 ] )
  [110] call print_str param-assignment [ line_cursor#1 char_cursor#100 test_8u::i#10 rem8u#1 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 test_8u::i#10 rem8u#1 ] )
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  [111] (byte) print_byte::b#6 ← (byte) rem8u#1 [ line_cursor#1 char_cursor#100 print_byte::b#6 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#100 print_byte::b#6 test_8u::i#10 ] )
  [112] call print_byte param-assignment [ line_cursor#1 char_cursor#14 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 ] )
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  [113] phi() [ line_cursor#1 char_cursor#14 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 char_cursor#14 test_8u::i#10 ] )
  [114] call print_ln param-assignment [ line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#10 ] )
  to:test_8u::@11
test_8u::@11: scope:[test_8u]  from test_8u::@10
  [115] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#1 ] )
  [116] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@1 [ line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:9 [ line_cursor#1 test_8u::i#1 ] )
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@11
  [117] return  [ line_cursor#1 ] ( main:2::test_8u:9 [ line_cursor#1 ] )
  to:@return
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  [118] (byte) div8u::divisor#6 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 ) [ div8u::dividend#5 div8u::divisor#6 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#5 div8u::divisor#6 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#5 div8u::divisor#6 ] )
  [118] (byte) div8u::dividend#5 ← phi( div8s::@4/(byte) div8u::dividend#1 test_8u::@1/(byte) div8u::dividend#2 ) [ div8u::dividend#5 div8u::divisor#6 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#5 div8u::divisor#6 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#5 div8u::divisor#6 ] )
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u div8u::@3
  [119] (byte) div8u::i#2 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::i#1 ) [ div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] )
  [119] (byte) div8u::quotient#3 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::return#0 ) [ div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] )
  [119] (byte) div8u::dividend#3 ← phi( div8u/(byte) div8u::dividend#5 div8u::@3/(byte) div8u::dividend#0 ) [ div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] )
  [119] (byte) div8u::rem#4 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::rem#8 ) [ div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 ] )
  [120] (byte) div8u::rem#1 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] )
  [121] (byte~) div8u::$1 ← (byte) div8u::dividend#3 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] )
  [122] if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] )
  to:div8u::@4
div8u::@4: scope:[div8u]  from div8u::@1
  [123] (byte) div8u::rem#2 ← ++ (byte) div8u::rem#1 [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] )
  to:div8u::@2
div8u::@2: scope:[div8u]  from div8u::@1 div8u::@4
  [124] (byte) div8u::rem#5 ← phi( div8u::@1/(byte) div8u::rem#1 div8u::@4/(byte) div8u::rem#2 ) [ div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#5 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#5 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#5 ] )
  [125] (byte) div8u::dividend#0 ← (byte) div8u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 ] )
  [126] (byte) div8u::quotient#1 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] )
  [127] if((byte) div8u::rem#5<(byte) div8u::divisor#6) goto div8u::@3 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 ] )
  to:div8u::@5
div8u::@5: scope:[div8u]  from div8u::@2
  [128] (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#1 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 ] )
  [129] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#6 [ div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#6 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 ] )
  to:div8u::@3
div8u::@3: scope:[div8u]  from div8u::@2 div8u::@5
  [130] (byte) div8u::return#0 ← phi( div8u::@2/(byte) div8u::quotient#1 div8u::@5/(byte) div8u::quotient#2 ) [ div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] )
  [130] (byte) div8u::rem#8 ← phi( div8u::@2/(byte) div8u::rem#5 div8u::@5/(byte) div8u::rem#3 ) [ div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::i#2 div8u::rem#8 div8u::dividend#0 ] )
  [131] (byte) div8u::i#1 ← ++ (byte) div8u::i#2 [ div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] )
  [132] if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1 [ div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 div8u::divisor#6 div8u::rem#8 div8u::dividend#0 div8u::i#1 ] )
  to:div8u::@6
div8u::@6: scope:[div8u]  from div8u::@3
  [133] (byte) rem8u#1 ← (byte) div8u::rem#8 [ div8u::return#0 rem8u#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#1 ] )
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@6
  [134] return  [ div8u::return#0 rem8u#1 ] ( main:2::test_8u:9::div8u:95 [ line_cursor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#1 ] main:2::test_8s:7::div8s:141::div8u:184 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#1 ] )
  to:@return
test_8s: scope:[test_8s]  from main::@1
  [135] phi() [ ] ( main:2::test_8s:7 [ ] )
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@12
  [136] (byte*) line_cursor#37 ← phi( test_8s/(const byte*) SCREEN#0 test_8s::@12/(byte*) line_cursor#1 ) [ line_cursor#37 test_8s::i#10 char_cursor#109 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 ] )
  [136] (byte*) char_cursor#109 ← phi( test_8s/(const byte*) SCREEN#0 test_8s::@12/(byte*~) char_cursor#138 ) [ line_cursor#37 test_8s::i#10 char_cursor#109 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 ] )
  [136] (signed byte) rem8s#18 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@12/(signed byte) rem8s#3 ) [ line_cursor#37 test_8s::i#10 char_cursor#109 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 ] )
  [136] (byte) rem8u#33 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@12/(byte) rem8u#1 ) [ line_cursor#37 test_8s::i#10 char_cursor#109 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 ] )
  [136] (byte) test_8s::i#10 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@12/(byte) test_8s::i#1 ) [ line_cursor#37 test_8s::i#10 char_cursor#109 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 ] )
  [137] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 ] )
  [138] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 ] )
  [139] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] )
  [140] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] )
  [141] call div8s param-assignment [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 ] )
  [142] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 ] )
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@1
  [143] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 ] )
  [144] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 ] ( main:2::test_8s:7 [ line_cursor#37 rem8u#1 test_8s::i#10 char_cursor#109 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 ] )
  [145] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  [146] phi() [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  [147] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 ] )
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  [148] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 ] )
  [149] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  [150] phi() [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  [151] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 ] )
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  [152] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#3 ] )
  [153] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  [154] phi() [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  [155] call print_str param-assignment [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 ] )
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  [156] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#4 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#100 rem8u#1 test_8s::i#10 rem8s#3 print_sbyte::b#4 ] )
  [157] call print_sbyte param-assignment [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  [158] phi() [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#37 char_cursor#14 rem8u#1 test_8s::i#10 rem8s#3 ] )
  [159] call print_ln param-assignment [ line_cursor#1 rem8u#1 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#10 rem8s#3 ] )
  to:test_8s::@11
test_8s::@11: scope:[test_8s]  from test_8s::@10
  [160] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] )
  [161] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@12 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 ] )
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@11
  [162] return  [ line_cursor#1 ] ( main:2::test_8s:7 [ line_cursor#1 ] )
  to:@return
test_8s::@12: scope:[test_8s]  from test_8s::@11
  [163] (byte*~) char_cursor#138 ← (byte*) line_cursor#1 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] ( main:2::test_8s:7 [ line_cursor#1 rem8u#1 test_8s::i#1 rem8s#3 char_cursor#138 ] )
  to:test_8s::@1
print_sbyte: scope:[print_sbyte]  from test_8s::@3 test_8s::@5 test_8s::@7 test_8s::@9
  [164] (byte*) char_cursor#103 ← phi( test_8s::@3/(byte*) char_cursor#109 test_8s::@5/(byte*) char_cursor#100 test_8s::@7/(byte*) char_cursor#100 test_8s::@9/(byte*) char_cursor#100 ) [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] )
  [164] (signed byte) print_sbyte::b#5 ← phi( test_8s::@3/(signed byte) print_sbyte::b#1 test_8s::@5/(signed byte) print_sbyte::b#2 test_8s::@7/(signed byte) print_sbyte::b#3 test_8s::@9/(signed byte) print_sbyte::b#4 ) [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] )
  [165] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] )
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  [166] phi() [ char_cursor#103 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#103 print_sbyte::b#5 ] )
  [167] call print_char param-assignment [ char_cursor#14 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#5 ] )
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@2
  [168] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#14 print_sbyte::b#0 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 print_sbyte::b#0 ] )
  to:print_sbyte::@1
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@4
  [169] (byte*) char_cursor#102 ← phi( print_sbyte/(byte*) char_cursor#103 print_sbyte::@4/(byte*) char_cursor#14 ) [ char_cursor#102 print_sbyte::b#6 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#102 print_sbyte::b#6 ] )
  [169] (signed byte) print_sbyte::b#6 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 print_sbyte::@4/(signed byte) print_sbyte::b#0 ) [ char_cursor#102 print_sbyte::b#6 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#102 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#102 print_sbyte::b#6 ] )
  [170] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 char_cursor#102 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#9 char_cursor#102 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 print_byte::b#9 char_cursor#102 ] )
  [171] call print_byte param-assignment [ char_cursor#14 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  [172] return  [ char_cursor#14 ] ( main:2::test_8s:7::print_sbyte:145 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:149 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 test_8s::res#0 char_cursor#14 ] main:2::test_8s:7::print_sbyte:153 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] main:2::test_8s:7::print_sbyte:157 [ line_cursor#37 rem8u#1 test_8s::i#10 rem8s#3 char_cursor#14 ] )
  to:@return
div8s: scope:[div8s]  from test_8s::@1
  [173] if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@16 [ div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] )
  to:div8s::@7
div8s::@7: scope:[div8s]  from div8s
  [174] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] )
  [175] (byte~) div8s::dividendb#8 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendb#8 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendb#8 ] )
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@16 div8s::@7
  [176] (byte) div8s::dividendb#3 ← phi( div8s::@16/(byte~) div8s::dividendb#7 div8s::@7/(byte~) div8s::dividendb#8 ) [ div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] )
  [176] (byte) div8s::neg#3 ← phi( div8s::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 div8s::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 ) [ div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] )
  [177] if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@17 [ div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] )
  to:div8s::@9
div8s::@9: scope:[div8s]  from div8s::@2
  [178] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::$7 ] )
  [179] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::$7 div8s::neg#2 ] )
  [180] (byte~) div8s::divisorb#5 ← (byte)(signed byte~) div8s::$7 [ div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] )
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@17 div8s::@9
  [181] (byte) div8s::neg#4 ← phi( div8s::@17/(byte) div8s::neg#3 div8s::@9/(byte) div8s::neg#2 ) [ div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] )
  [181] (byte) div8s::divisorb#3 ← phi( div8s::@17/(byte~) div8s::divisorb#4 div8s::@9/(byte~) div8s::divisorb#5 ) [ div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] )
  [182] (byte) div8u::dividend#1 ← (byte) div8s::dividendb#3 [ div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 ] )
  [183] (byte) div8u::divisor#0 ← (byte) div8s::divisorb#3 [ div8u::dividend#1 div8u::divisor#0 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::dividend#1 div8u::divisor#0 div8s::neg#4 ] )
  [184] call div8u param-assignment [ div8u::return#0 rem8u#1 div8s::neg#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8u::return#0 rem8u#1 div8s::neg#4 ] )
  [185] (byte) div8u::return#2 ← (byte) div8u::return#0 [ rem8u#1 div8s::neg#4 div8u::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::neg#4 div8u::return#2 ] )
  to:div8s::@15
div8s::@15: scope:[div8s]  from div8s::@4
  [186] (byte) div8s::resultb#0 ← (byte) div8u::return#2 [ rem8u#1 div8s::neg#4 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::neg#4 div8s::resultb#0 ] )
  [187] if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5 [ rem8u#1 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 ] )
  to:div8s::@18
div8s::@18: scope:[div8s]  from div8s::@15
  [188] (signed byte~) div8s::return#6 ← (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#6 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#6 ] )
  [189] (signed byte~) rem8s#32 ← (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::return#6 rem8s#32 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#6 rem8s#32 ] )
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@18 div8s::@5
  [190] (signed byte) rem8s#3 ← phi( div8s::@18/(signed byte~) rem8s#32 div8s::@5/(signed byte) rem8s#1 ) [ rem8u#1 rem8s#3 div8s::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 rem8s#3 div8s::return#2 ] )
  [190] (signed byte) div8s::return#2 ← phi( div8s::@18/(signed byte~) div8s::return#6 div8s::@5/(signed byte) div8s::return#0 ) [ rem8u#1 rem8s#3 div8s::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 rem8s#3 div8s::return#2 ] )
  [191] return  [ rem8u#1 rem8s#3 div8s::return#2 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 rem8s#3 div8s::return#2 ] )
  to:@return
div8s::@5: scope:[div8s]  from div8s::@15
  [192] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#1 [ rem8u#1 div8s::resultb#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::resultb#0 rem8s#1 ] )
  [193] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultb#0 [ rem8u#1 div8s::return#0 rem8s#1 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 rem8u#1 div8s::return#0 rem8s#1 ] )
  to:div8s::@return
div8s::@17: scope:[div8s]  from div8s::@2
  [194] (byte~) div8s::divisorb#4 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] )
  to:div8s::@4
div8s::@16: scope:[div8s]  from div8s
  [195] (byte~) div8s::dividendb#7 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendb#7 ] ( main:2::test_8s:7::div8s:141 [ line_cursor#37 test_8s::i#10 char_cursor#109 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendb#7 ] )
  to:div8s::@2
print_cls: scope:[print_cls]  from main
  [196] phi() [ ] ( main:2::print_cls:5 [ ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [197] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) SCREEN#0 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [198] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [199] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  [200] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [201] return  [ ] ( main:2::print_cls:5 [ ] )
  to:@return
