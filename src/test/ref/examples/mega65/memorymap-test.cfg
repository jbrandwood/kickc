
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call memoryRemapBlock 
  to:main::@1
main::@1: scope:[main]  from main
  [2] *((const byte*) main::block1) ← (byte) $55
  [3] *((const byte*) main::block1+(byte) 1) ← (byte) $aa
  [4] call memoryRemapBlock 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] *((const byte*) main::block2+(byte) 2) ← (byte) $55
  [6] *((const byte*) main::block2+(byte) 3) ← (byte) $aa
  [7] call memoryRemap 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] *((const byte*) main::block2+(byte) 4) ← *((const byte*) main::block1+(byte) 2)
  [9] *((const byte*) main::block1+(byte) 5) ← *((const byte*) main::block2+(byte) 1)
  [10] call memoryRemap256M 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] *((const byte*) main::block1) ← (byte) 0
  [12] *((const byte*) main::block1+(byte) 1) ← (byte) 1
  [13] call memoryRemap256M 
  to:main::@return
main::@return: scope:[main]  from main::@4
  [14] return 
  to:@return

(void()) memoryRemapBlock((byte) memoryRemapBlock::blockPage , (word) memoryRemapBlock::memoryPage)
memoryRemapBlock: scope:[memoryRemapBlock]  from main main::@1
  [15] (byte) memoryRemapBlock::blockPage#2 ← phi( main/(byte) $40 main::@1/(byte) $80 )
  [16] (word) memoryRemapBlock::pageOffset#0 ← (word) $100 - (byte) memoryRemapBlock::blockPage#2
  [17] (byte) memoryRemapBlock::block#0 ← (byte) memoryRemapBlock::blockPage#2 >> (byte) 5
  [18] (byte) memoryRemapBlock::blockBits#0 ← (byte) 1 << (byte) memoryRemapBlock::block#0
  [19] (byte) memoryRemap::remapBlocks#1 ← (byte) memoryRemapBlock::blockBits#0
  [20] (word) memoryRemap::lowerPageOffset#1 ← (word) memoryRemapBlock::pageOffset#0
  [21] (word) memoryRemap::upperPageOffset#1 ← (word) memoryRemapBlock::pageOffset#0
  [22] call memoryRemap 
  to:memoryRemapBlock::@return
memoryRemapBlock::@return: scope:[memoryRemapBlock]  from memoryRemapBlock
  [23] return 
  to:@return

(void()) memoryRemap((byte) memoryRemap::remapBlocks , (word) memoryRemap::lowerPageOffset , (word) memoryRemap::upperPageOffset)
memoryRemap: scope:[memoryRemap]  from main::@2 memoryRemapBlock
  [24] (word) memoryRemap::upperPageOffset#2 ← phi( main::@2/(byte) $80 memoryRemapBlock/(word) memoryRemap::upperPageOffset#1 )
  [24] (byte) memoryRemap::remapBlocks#2 ← phi( main::@2/(const nomodify byte) MEMORYBLOCK_4000|(const nomodify byte) MEMORYBLOCK_8000 memoryRemapBlock/(byte) memoryRemap::remapBlocks#1 )
  [24] (word) memoryRemap::lowerPageOffset#2 ← phi( main::@2/(byte) $c0 memoryRemapBlock/(word) memoryRemap::lowerPageOffset#1 )
  [25] (byte~) memoryRemap::$0 ← < (word) memoryRemap::lowerPageOffset#2
  [26] *((const byte*) memoryRemap::aVal) ← (byte~) memoryRemap::$0
  [27] (byte~) memoryRemap::$1 ← (byte) memoryRemap::remapBlocks#2 << (byte) 4
  [28] (byte~) memoryRemap::$2 ← > (word) memoryRemap::lowerPageOffset#2
  [29] (byte~) memoryRemap::$3 ← (byte~) memoryRemap::$2 & (byte) $f
  [30] (byte~) memoryRemap::$4 ← (byte~) memoryRemap::$1 | (byte~) memoryRemap::$3
  [31] *((const byte*) memoryRemap::xVal) ← (byte~) memoryRemap::$4
  [32] (byte~) memoryRemap::$5 ← < (word) memoryRemap::upperPageOffset#2
  [33] *((const byte*) memoryRemap::yVal) ← (byte~) memoryRemap::$5
  [34] (byte~) memoryRemap::$6 ← (byte) memoryRemap::remapBlocks#2 & (byte) $f0
  [35] (byte~) memoryRemap::$7 ← > (word) memoryRemap::upperPageOffset#2
  [36] (byte~) memoryRemap::$8 ← (byte~) memoryRemap::$7 & (byte) $f
  [37] (byte~) memoryRemap::$9 ← (byte~) memoryRemap::$6 | (byte~) memoryRemap::$8
  [38] *((const byte*) memoryRemap::zVal) ← (byte~) memoryRemap::$9
  asm { ldaaVal ldxxVal ldyyVal ldzzVal map eom  }
  to:memoryRemap::@return
memoryRemap::@return: scope:[memoryRemap]  from memoryRemap
  [40] return 
  to:@return

(void()) memoryRemap256M((byte) memoryRemap256M::remapBlocks , (dword) memoryRemap256M::lowerPageOffset , (dword) memoryRemap256M::upperPageOffset)
memoryRemap256M: scope:[memoryRemap256M]  from main::@3 main::@4
  [41] (byte) memoryRemap256M::remapBlocks#2 ← phi( main::@3/(const nomodify byte) MEMORYBLOCK_4000 main::@4/(byte) 0 )
  [41] (dword) memoryRemap256M::lowerPageOffset#2 ← phi( main::@3/(dword)(number) $ff800-(number) $40 main::@4/(byte) 0 )
  [42] (dword~) memoryRemap256M::$0 ← (dword) memoryRemap256M::lowerPageOffset#2 >> (byte) 4
  [43] (byte~) memoryRemap256M::$1 ← > (word)(dword~) memoryRemap256M::$0
  [44] *((const byte*) memoryRemap256M::lMb) ← (byte~) memoryRemap256M::$1
  [45] *((const byte*) memoryRemap256M::uMb) ← (byte) 0
  [46] (word~) memoryRemap256M::$7 ← < (dword) memoryRemap256M::lowerPageOffset#2
  [47] (byte~) memoryRemap256M::$5 ← < (word~) memoryRemap256M::$7
  [48] *((const byte*) memoryRemap256M::aVal) ← (byte~) memoryRemap256M::$5
  [49] (byte~) memoryRemap256M::$6 ← (byte) memoryRemap256M::remapBlocks#2 << (byte) 4
  [50] (byte~) memoryRemap256M::$8 ← > (word~) memoryRemap256M::$7
  [51] (byte~) memoryRemap256M::$9 ← (byte~) memoryRemap256M::$8 & (byte) $f
  [52] (byte~) memoryRemap256M::$10 ← (byte~) memoryRemap256M::$6 | (byte~) memoryRemap256M::$9
  [53] *((const byte*) memoryRemap256M::xVal) ← (byte~) memoryRemap256M::$10
  [54] *((const byte*) memoryRemap256M::yVal) ← (byte) 0
  [55] (byte~) memoryRemap256M::$17 ← (byte) memoryRemap256M::remapBlocks#2 & (byte) $f0
  [56] *((const byte*) memoryRemap256M::zVal) ← (byte~) memoryRemap256M::$17
  asm { ldalMb ldx#$0f ldyuMb ldz#$00 map ldaaVal ldxxVal ldyyVal ldzzVal map eom  }
  to:memoryRemap256M::@return
memoryRemap256M::@return: scope:[memoryRemap256M]  from memoryRemap256M
  [58] return 
  to:@return
