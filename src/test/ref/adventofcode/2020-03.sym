constant word* COLCRS = (word*) 85
constant byte* const CRSINH = (byte*) 752
constant byte* DIGITS[]  = "0123456789abcdef"atz
constant byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
constant byte** const OLDADR = (byte**) 94
constant byte* const OLDCHR = (byte*) 93
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
constant byte* ROWCRS = (byte*) 84
constant byte** const SAVMSC = (byte**) 88
constant byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
void clrscr()
void cputc(volatile byte cputc::c)
volatile byte cputc::c loadstore zp[1]:136 77526.25
byte cputc::convertToScreenCode1_return
byte cputc::convertToScreenCode1_return#0 reg byte x 183333.6666666667
byte* cputc::convertToScreenCode1_v
constant byte* cputc::convertToScreenCode1_v#0 convertToScreenCode1_v = &cputc::c
void cputs(const byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 10001.0
const byte* cputs::s
const byte* cputs::s#0 s zp[2]:131 5000.5
const byte* cputs::s#14 s zp[2]:131 15502.0
const byte* cputs::s#15 s zp[2]:131 1001.0
byte* cursorLocation()
word~ cursorLocation::$0 zp[2]:139 2.00000002E8
byte*~ cursorLocation::$1 zp[2]:139 2.00000002E8
word~ cursorLocation::$3 zp[2]:139 1.500000015E8
word~ cursorLocation::$4 zp[2]:141 2.00000002E8
word~ cursorLocation::$5 zp[2]:139 2.00000002E8
byte* cursorLocation::return
byte* cursorLocation::return#0 return zp[2]:139 2000002.0
byte* cursorLocation::return#1 return zp[2]:139 2.775000075E7
byte* cursorLocation::return#3 return zp[2]:139 2.0000002E7
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte gotoxy::x
constant byte gotoxy::x#0 x = 0
byte gotoxy::y
constant byte gotoxy::y#0 y = 0
void main()
constant byte* main::s[$10]  = "1: encountered "at
constant byte* main::s1[8]  = " trees
"at
constant byte* main::s10[$11]  = "2e: encountered "at
constant byte* main::s2[$11]  = "2a: encountered "at
constant byte* main::s4[$11]  = "2b: encountered "at
constant byte* main::s6[$11]  = "2c: encountered "at
constant byte* main::s8[$11]  = "2d: encountered "at
constant byte* map = ".#......##..#.....#....#.#.#....#.#...#.##.#..........#...##...........#.....#.####........#........#.#...#.#.................#....#...#.#...#.#...#.#........#...........#..#.........#.#....#..#....#..#..#.#...#..##..#...........#..#.....#.......#.#..#...#...#.###...#...#.#...#.#...#.#.......#...#...#...##.##..#..................#.#.#....#..#.##....#........##...............#....#....#.#.......#.....##.#..##.#.....###.......#...........#...###....#..#.#...#..................#.........#.##...#......#.............#....#...#.#..#......#.###....#...#.....#..#........#.....#.....#...#..#.......#...#..............#..#...#...#........#...##........#..#........#....#......#......#.....#..#.###.......##....#.#..#..#..###..#..........................#...#....#.........#.#.......#.##................#..#.......#......######.....#.........#......##.......#....#..##.###..#...##.###..#.......#....#.......#.###...#.#.#........#........###...#.......#..........#.#..........#...#..........##.#....#....#........#.....#....#..#..#...#.#....##..#...##....#...........##...#..##.....#.......###.......#.#...#...#.......#.#....#.#....##.###........#..........#..............#....##..###......#.#....#.#......#.....##.....#....#..#......#...#........#.##..#.....#..#....#......#......#.#.#..........##....#.............#..#..........#.#......##..#...#......#.#..#....#....#.#..##.......#.#......##........#.#....#.#.....#..............#.........#.......#..#.#......##.........#..##.#......#......#..#.....#...#.....#.........#...........#..##..##.#..##...###..##.....#...#..##...##.#.#......#..........#.#.....##.#....#..##..#..#.........###.......#........##....#...##....##............#.#.##...............#....#..#......#.....#..#..#.#.....#.....##.#....#.#.....#.#.#.........#..#.#..##....#.....#....#.#...#.....#....#....#.#.#...........#................#.......#.......#..#.#...#.#......#..#.#...........#....#....###...#.#.#.##....##..###.#.#......#.##.#..##...#.#..#..#...#.....#.#.#.#.....###.#..#.#...#.#......#.#..##.#...#...#.#.....#.#.......#....#...#.##......#.#......#....#.....##.....#....................###...##.#...........#.......#..##.....##....#................#..#......#..........#........##..##.#...#...#.#.....#.##.#.....###..###.#...#.#..#....#.#..........#...#..#.#.#..#...#.##.##..#..#....#....####..........#..#.#..........#..........###...#.#..#..#...#..###.......####.#...#....#..#...#..#...........##....#.#...#....##....##.....#.#.##....#.##..#....#.#.#.#......#..#.###....#####.##......##..#.#.#..#........##.##..###.#...#..#..#......#..#.....#...###.....#.#....#.#..##.....#.#....#......#.#...#...#.#....#.#.....#.###.##...................#..........#........#.#...##.#.##......#.#.#..#....##.###..#...#.##....#....#.........#.#..#........#..#..#.#.####.....##..#..#.##.#......#.#..##.#...#..#..#.#.##..#.##..........#......##.#.....#.#.##..#..##.....##.#.##........#..#.....#...#.##.##...#....#.#.#.........##.....#....#....#.#....#...#..#.............#...#..#...#.##......##...##.........#......#..........##.#......#.....##....#.#.#.....#..#.###......#..#.#....#.....#..#.......#...#...#.#.#.#..##......#..............#...###.....#...##......#.#..#.#........#.#...##.#....#..........##...#.#....#...#.....#.######...##...#..#...#...#............#.....#....###..###.##..#.........#.......#........##..#....#...#.#..##.#.#.##.#.#...###.................#.#.#......#.#.#....#.....#.#.#...........#.##.#..#.###......###.#....#...........##.#.#....#...#...........#..##..........#...#.#...........#..###....#..##.......#.....#.....##....#..#.......#........#...##.##..#.#....#..###..#.....##.......#.........###.#...#..#....#.#...#....#..#.......##...#.#.#...#..........#..#.......#.......##.#..#.#....###.....#...#..#...#....#...#.##.#........#..........##.....#.#.##.#.#..#..##.......##.#.#.......##....#.#...........#..##.............##...#.#..#..#...........#.#......#.##.##..#...#...#...........#....###.#.#.##..#.#.#....#....#####.........#...#.....#.#....#............#..#........#.....#.#......#...#.........#...#...#.#.#..#.....##.##......#.#...#.......#...#.##...#..#..........#...#.....##..........#..#...#.#......#.......##......#...##..##..#....#..##.......#...#.#..##..#..#.....#.#................#....#.......#..#..###.......#...............##.....#..#......#....#.........#...###...#....#..##...#.#.#.........#.......#...#....#....#.#...#.#....##....#.#..##.#.....#..#..#....#..#.#..##.....##..#..#.#.#....#...#....#..#..........###.....#...##.#..#.#...#.#.#.#..#.##........#.#....#....#..........#....#.#.......#...#.....#........#........#....#..#.#..#...#...................#....####..#..#..#..#....#..#.#...##.#..........#.##..#.....##...................##..........#....##....###.....#..#...#.#....##.........#..#...................##..###....#.##............#.#...###.#..##...#...........#.....#..#......#.....#...........#..##...#.....#.....#.#............#....###.#..#.#.#....#..##...#.......#.##.....#..........#.#..#...#.............##...........#..............#.....#..#......#......###....#...#...........#.....#...#.......###.....#..........##......##.#.#.....#....#.......#..#......#.......#..#...#.###...........#..#.###......#...#.#...........#.#...##........#.#.#........#.#.....#.....##..##.#.#..#.#....#.#.##....#.#.#......##.....#...#.#...###...#..#......#.#.#..#...#........#..##...........#..#..#..#..#..##...#...#...##.#..#.#....#.#.....####.#..#..#....##..#.#..#....#..#......#.....#.#.#........#..#.....#......#............#.#..###.....#...#...#.....##..#.#...##..#...........####....#.##....##.#......#.....##.#..#.##..#....#.###..........##....###...#......#.#....##...........................#..#.....#..#.#...#.#..#.....#...#..####.##....#.##..##...##.##.....#......#...#.##...........#.......##.###..#.....##...#.........##....###....##...###................#....#####........#.#.#.##.....#.#....####.##........#............#......#........................###.....##......#..##.#......#.#...........##.#....##.#....................#.#.#.......#.#.#........#..#.......##.......#...#...#....#......#....##.##..#..............#......#....#......#.........##..................#.#....##..#.......#............#.......#...........#........#....#.#..##.#....#...#....#.#.#..#..#.#.#.#...#....#....#.#.#....#...#.#..#......#.....#.#...........#.#....##.....#...........#...#....#....##.....###..#..........#..#..#.....#....#.#.###..........#.##....#...##..#................#.##.##.......#...#.##...##...#.........#..#....#......#......#.........#.##...#...##.#.........#......#........#.....#....................#...#.....##.........#.#..#...#......#...#.......#......#.##.......#...#.##.#..##..#.......#.#............#...###..#........#.......##.......#....#..#.......#..#.#....#.#.............#....#...##.##....#....##..............#......#.......#....#....#..#..##......##.#..#.#..##......##......#.##.##......#.............##.#...#.....#.......#...##.#....#..#......#.##.........##.####.#...#.#....#..........#........#.....#..#....#...#.####....##......#..#..#.##..#.............###.#..#..#....#.......#.........#....#.....#....#.#.#...#.#.....##.#...#...#.#..#.....##......##.##.#.....#..#.......#.##...##.......#..##......#..........#..#....#.......#.#...#.....#.................#..............#.#.#.....#.#....#..#.......#..........#.##....#....#..#.....#.......#........#....#.....##..#.........##..#..#.#..##.#...#..........#....#..........#..#.#......#.##..#..#.##.....##.####....#.....#.#...##.....#.#....#.#........#..........#...#.#.##.##....##..#...#...#....#.#.......#..#...#..#..##..#.....#....#........###.....#..........#..#.##....#.#.....#........##....#....#.......#.....#..........#........###...##.....#.#..#...##.........#.#..#....#...##...........#.........#...#......#.#.#.........#..#.#.#...........##.###....#..#.......#.....#.#...#......#..#........##.#....##....#...#.##.........#.####.#..#...........##.#.#........#....#..#.....#..##.####.#...##...#...........#.#.........##.#..#..#...#.#.#.........#..#.#......###............#...#......#.......#....#...#...#..#...##.#.#...##..#...#...#.......##.......#.#.......#..........#.#................#...#..#...#.#...#.#...##.####..##.##....#..##.#..####.......##.#........#...#......###....##...#.#..#.##.....##.....###..#...#.###.###.......#...#.....#...#..#..##..#.......#...##.....##........#.#.##..#...#..#....#....#..###....#.#..#.#.#.#.#..........#.#..#..##.......###.....................##.#......#.##.....#.........#.......................#.#.....##..#........##.......#..##..#.##.#.#.....##.#.##.##.#....##....#...#.....#.........#.....#.....#.........#.##.#.###.#......#.........#..#.##...#.......###......##........#......#...........#.#...##...#........#.##.............##............#.####..#....#...#...#..#....#..#.#.#.#..#.........#......#.##............#.....#........#........#.#.##.#..#.#..#..###......###....#.###.....#.#.#.##........#..###.#..#...##.....#....#...#.#.........#....#.....#...#............#........##.......#.##..####..#..#....#....#..#..#...#.##...##.....#............#...#...........#.......#.....#...#.#.#...........#.....#...##...............#........##...........#...#.#..##.#...#....#....#........#.##..#.#.......#...#......#..............#.#..#..#.....##.#..#....#.##.......#......#.##..#......#........#.##.#...#.....#......###..#.......##....................#.#.#.....#.##.......#.......#....#......#.#.....#...##........#...#..#.#.........#.##...........#.##...##......#....#.###.#.#.#...####..#....###..........#...#.....##....#.#.##.###..###.#.#.....#.##.........#..#...#.#.................##.###.........#.#....#.#...#.###..#.#....#..............#.##.#......#..#....##.#..#.......#..##..#..#.###......##..........#..#.##....#.#....#....#.#..#.............#.....#..#....#.##...#..#.#.#.........###..#..#.....#.....##..##...##....#..#......#............#....#..........#....#..##..#...#......#.....#.#....#..##..#....#.#.#...#................##..#.........#........#..##..#..#......###.....#..#.........#..#.##..........#.#..#..."at
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#0 destination zp[2]:139 333333.6666666667
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:139 1.000000001E9
byte* memcpy::dst#2 dst zp[2]:139 1.0033333346666667E9
byte* memcpy::dst#4 dst zp[2]:139 2.0000002E7
word memcpy::num
constant word memcpy::num#0 num = (word)$28*$17
void* memcpy::return
void* memcpy::source
byte* memcpy::source#0 source zp[2]:137 333333.6666666667
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:137 2.000000002E9
byte* memcpy::src#2 src zp[2]:137 1.00250000125E9
byte* memcpy::src#4 src zp[2]:137 1.0000001E7
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:141 1.2625000025E8
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 dst zp[2]:134 2.000000002E9
byte* memset::dst#2 dst zp[2]:134 1.3366666683333335E9
byte* memset::dst#4 dst zp[2]:134 2.0000002E7
byte* memset::end
byte* memset::end#0 end zp[2]:137 1.683333336666667E8
word memset::num
word memset::num#2 num zp[2]:137 1.0000001E7
void* memset::return
void* memset::str
byte* memset::str#1 str zp[2]:134 1000001.0
void* memset::str#3 str zp[2]:134 333337.3333333334
void* memset::str#7 str zp[2]:134 22.0
void* memset::str#8 str zp[2]:134 2000002.0
void newline()
byte* newline::start
byte* newline::start#0 start zp[2]:134 750000.75
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
constant byte* printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 reg byte a 71.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_zero_padding
word printf_uint::uvalue
word printf_uint::uvalue#0 uvalue zp[2]:129 1.3333333333333333
word printf_uint::uvalue#1 uvalue zp[2]:129 1.3333333333333333
word printf_uint::uvalue#2 uvalue zp[2]:129 1.3333333333333333
word printf_uint::uvalue#3 uvalue zp[2]:129 1.3333333333333333
word printf_uint::uvalue#4 uvalue zp[2]:129 1.3333333333333333
word printf_uint::uvalue#5 uvalue zp[2]:129 1.3333333333333333
word printf_uint::uvalue#6 uvalue zp[2]:129 11.5
void putchar(byte putchar::code)
byte putchar::code
byte* putchar::loc
byte* putchar::loc#0 loc zp[2]:139 1000001.0
byte putchar::newChar
byte putchar::newChar#0 reg byte a 1500001.5
constant byte* rawmap[$100]  = kickasm {{ .var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}
 }}
void setcursor()
byte setcursor::c
byte setcursor::c#0 reg byte x 7500000.75
byte setcursor::c#1 reg byte a 2.0000002E7
byte* setcursor::loc
byte* setcursor::loc#0 loc zp[2]:139 1.0000001E7
word test_slope(byte test_slope::x_inc , byte test_slope::y_inc)
byte~ test_slope::$10 reg byte a 202.0
byte~ test_slope::$11 reg byte a 202.0
byte~ test_slope::$12 reg byte a 202.0
byte~ test_slope::$5 reg byte a 202.0
byte~ test_slope::$6 reg byte a 202.0
byte~ test_slope::$7 reg byte a 202.0
byte~ test_slope::$8 reg byte a 202.0
byte~ test_slope::$9 reg byte a 202.0
byte* test_slope::mapline
byte* test_slope::mapline#1 mapline zp[2]:137 101.0
byte* test_slope::mapline#2 mapline zp[2]:137 17.823529411764707
word test_slope::return
word test_slope::return#0 return zp[2]:129 4.0
word test_slope::return#1 return zp[2]:129 4.0
word test_slope::return#10 return zp[2]:129 4.0
word test_slope::return#11 return zp[2]:129 4.0
word test_slope::return#12 return zp[2]:129 4.0
word test_slope::return#13 return zp[2]:129 4.0
word test_slope::trees
word test_slope::trees#1 trees zp[2]:129 202.0
word test_slope::trees#2 trees zp[2]:129 31.5
word test_slope::trees#6 trees zp[2]:129 20.2
byte test_slope::x
byte test_slope::x#1 reg byte x 202.0
byte test_slope::x#2 reg byte x 202.0
byte test_slope::x#3 reg byte x 60.599999999999994
byte test_slope::x#8 reg byte x 27.545454545454547
byte test_slope::x_inc
byte test_slope::x_inc#10 x_inc zp[1]:133 5.05
word test_slope::y
word test_slope::y#1 y zp[2]:131 202.0
word test_slope::y#2 y zp[2]:131 16.833333333333332
byte test_slope::y_inc
byte test_slope::y_inc#12 y_inc zp[1]:128 30.3
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 2002.0
byte~ utoa::$11 reg byte a 202.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:134 300.42857142857144
byte* utoa::buffer#14 buffer zp[2]:134 1501.5
byte* utoa::buffer#3 buffer zp[2]:134 202.0
byte* utoa::buffer#4 buffer zp[2]:134 2002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:133 2002.0
byte utoa::digit#2 digit zp[1]:133 286.0
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:137 600.5999999999999
word* utoa::digit_values
byte utoa::max_digits
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 500.5
byte utoa::started#4 reg byte x 1001.0
word utoa::value
word utoa::value#0 value zp[2]:129 1001.0
word utoa::value#1 value zp[2]:129 56.0
word utoa::value#2 value zp[2]:129 586.4285714285714
word utoa::value#6 value zp[2]:129 1501.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:134 1375.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1000001.0
byte utoa_append::digit#2 reg byte x 1005001.5
word utoa_append::return
word utoa_append::return#0 return zp[2]:129 2002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:137 333500.5
word utoa_append::value
word utoa_append::value#0 value zp[2]:129 3667.333333333333
word utoa_append::value#1 value zp[2]:129 2000002.0
word utoa_append::value#2 value zp[2]:129 501834.16666666674

zp[1]:128 [ test_slope::y_inc#12 ]
reg byte x [ test_slope::x#3 test_slope::x#8 test_slope::x#1 test_slope::x#2 ]
zp[2]:129 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 test_slope::return#1 test_slope::return#10 test_slope::return#11 test_slope::return#12 test_slope::return#13 printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ]
zp[2]:131 [ cputs::s#14 cputs::s#15 cputs::s#0 test_slope::y#2 test_slope::y#1 ]
zp[1]:133 [ utoa::digit#2 utoa::digit#1 test_slope::x_inc#10 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:134 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 memset::str#3 memset::str#7 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#1 newline::start#0 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
reg byte a [ test_slope::$6 ]
reg byte a [ test_slope::$7 ]
reg byte a [ test_slope::$8 ]
reg byte a [ test_slope::$9 ]
reg byte a [ test_slope::$10 ]
reg byte a [ test_slope::$11 ]
reg byte a [ test_slope::$12 ]
reg byte a [ test_slope::$5 ]
reg byte a [ cputs::c#1 ]
zp[1]:136 [ cputc::c ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
reg byte x [ cputc::convertToScreenCode1_return#0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:137 [ utoa::digit_value#0 utoa_append::sub#0 memcpy::src#2 memcpy::src#4 memcpy::src#1 memcpy::source#0 memset::num#2 memset::end#0 test_slope::mapline#2 test_slope::mapline#1 ]
zp[2]:139 [ cursorLocation::return#3 setcursor::loc#0 cursorLocation::return#1 cursorLocation::return#0 putchar::loc#0 cursorLocation::$0 cursorLocation::$1 cursorLocation::$3 cursorLocation::$5 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memcpy::destination#0 ]
reg byte x [ setcursor::c#0 ]
reg byte a [ setcursor::c#1 ]
reg byte a [ putchar::newChar#0 ]
zp[2]:141 [ memcpy::src_end#0 cursorLocation::$4 ]
mem[12] [ printf_buffer ]
