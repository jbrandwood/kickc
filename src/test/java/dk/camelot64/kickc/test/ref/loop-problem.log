PARSING src/test/java/dk/camelot64/kickc/test/kc/loop-problem.kc
// A simple loop results in NullPointerException during loop analysis

byte* SCREEN = $400;

void main() {
    *SCREEN = '0';
    d();
    b();
}

void b() {
    for( byte i: 0..3) {
        d();
    }
}

void d() {
    (*SCREEN)++;
}
Adding pre/post-modifier *((byte*) SCREEN) ← ++ *((byte*) SCREEN)
SYMBOLS
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(byte*) SCREEN
(void()) b()
(void~) b::$0
(bool~) b::$1
(label) b::@1
(label) b::@2
(label) b::@return
(byte) b::i
(void()) d()
(label) d::@return
(void()) main()
(void~) main::$0
(void~) main::$1
(label) main::@return

Promoting word/signed word/dword/signed dword to byte* in SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@1
main: scope:[main]  from
  *((byte*) SCREEN) ← (byte) '0'
  (void~) main::$0 ← call d 
  (void~) main::$1 ← call b 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
b: scope:[b]  from
  (byte) b::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:b::@1
b::@1: scope:[b]  from b b::@1
  (void~) b::$0 ← call d 
  (byte) b::i ← (byte) b::i + rangenext(0,3)
  (bool~) b::$1 ← (byte) b::i != rangelast(0,3)
  if((bool~) b::$1) goto b::@1
  to:b::@2
b::@2: scope:[b]  from b::@1
  to:b::@return
b::@return: scope:[b]  from b::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
d: scope:[d]  from
  *((byte*) SCREEN) ← ++ *((byte*) SCREEN)
  to:d::@return
d::@return: scope:[d]  from d
  return 
  to:@return
@3: scope:[]  from @2
  call main 
  to:@end
@end: scope:[]  from @3

Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) b::$0
Removing empty block @1
Removing empty block b::@2
Removing empty block @2
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@3
main: scope:[main]  from @3
  (byte*) SCREEN#1 ← phi( @3/(byte*) SCREEN#3 )
  *((byte*) SCREEN#1) ← (byte) '0'
  call d 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) SCREEN#7 ← phi( main/(byte*) SCREEN#1 )
  call b 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
b: scope:[b]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#7 )
  (byte) b::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:b::@1
b::@1: scope:[b]  from b b::@3
  (byte*) SCREEN#4 ← phi( b/(byte*) SCREEN#5 b::@3/(byte*) SCREEN#6 )
  (byte) b::i#3 ← phi( b/(byte) b::i#0 b::@3/(byte) b::i#1 )
  call d 
  to:b::@3
b::@3: scope:[b]  from b::@1
  (byte*) SCREEN#6 ← phi( b::@1/(byte*) SCREEN#4 )
  (byte) b::i#2 ← phi( b::@1/(byte) b::i#3 )
  (byte) b::i#1 ← (byte) b::i#2 + rangenext(0,3)
  (bool~) b::$1 ← (byte) b::i#1 != rangelast(0,3)
  if((bool~) b::$1) goto b::@1
  to:b::@return
b::@return: scope:[b]  from b::@3
  return 
  to:@return
d: scope:[d]  from b::@1 main
  (byte*) SCREEN#2 ← phi( b::@1/(byte*) SCREEN#4 main/(byte*) SCREEN#1 )
  *((byte*) SCREEN#2) ← ++ *((byte*) SCREEN#2)
  to:d::@return
d::@return: scope:[d]  from d
  return 
  to:@return
@3: scope:[]  from @begin
  (byte*) SCREEN#3 ← phi( @begin/(byte*) SCREEN#0 )
  call main 
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @3
(label) @4
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCREEN#7
(void()) b()
(bool~) b::$1
(label) b::@1
(label) b::@3
(label) b::@return
(byte) b::i
(byte) b::i#0
(byte) b::i#1
(byte) b::i#2
(byte) b::i#3
(void()) d()
(label) d::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return

Culled Empty Block (label) main::@2
Culled Empty Block (label) @4
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte*) SCREEN#1 = (byte*) SCREEN#7 
Alias (byte) b::i#2 = (byte) b::i#3 
Alias (byte*) SCREEN#4 = (byte*) SCREEN#6 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#3 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) SCREEN#4
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN#5 (byte*) SCREEN#1
Redundant Phi (byte*) SCREEN#4 (byte*) SCREEN#5
Successful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#0
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) b::$1 if((byte) b::i#1!=rangelast(0,3)) goto b::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte) b::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value b::i#1 ← ++ b::i#2 to ++
Resolved ranged comparison value if(b::i#1!=rangelast(0,3)) goto b::@1 to (byte/signed byte/word/signed word/dword/signed dword) 4
Inlining constant with var siblings (const byte) b::i#0
Constant inlined b::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting b::@4(between b::@3 and b::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of b
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to d:5 b:7 
Calls in [b] to d:11 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 1 initial phi equivalence classes
Coalesced [15] b::i#4 ← b::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) b::@4
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of b
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@3
@3: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @3
  [3] phi() [ ] ( )
main: scope:[main]  from @3
  [4] *((const byte*) SCREEN#0) ← (byte) '0' [ ] ( main:2 [ ] )
  [5] call d  [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call b  [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return  [ ] ( main:2 [ ] )
  to:@return
b: scope:[b]  from main::@1
  [9] phi() [ ] ( main:2::b:7 [ ] )
  to:b::@1
b::@1: scope:[b]  from b b::@3
  [10] (byte) b::i#2 ← phi( b/(byte/signed byte/word/signed word/dword/signed dword) 0 b::@3/(byte) b::i#1 ) [ b::i#2 ] ( main:2::b:7 [ b::i#2 ] )
  [11] call d  [ b::i#2 ] ( main:2::b:7 [ b::i#2 ] )
  to:b::@3
b::@3: scope:[b]  from b::@1
  [12] (byte) b::i#1 ← ++ (byte) b::i#2 [ b::i#1 ] ( main:2::b:7 [ b::i#1 ] )
  [13] if((byte) b::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto b::@1 [ b::i#1 ] ( main:2::b:7 [ b::i#1 ] )
  to:b::@return
b::@return: scope:[b]  from b::@3
  [14] return  [ ] ( main:2::b:7 [ ] )
  to:@return
d: scope:[d]  from b::@1 main
  [15] *((const byte*) SCREEN#0) ← ++ *((const byte*) SCREEN#0) [ ] ( main:2::d:5 [ ] main:2::b:7::d:11 [ b::i#2 ] )
  to:d::@return
d::@return: scope:[d]  from d
  [16] return  [ ] ( main:2::d:5 [ ] main:2::b:7::d:11 [ b::i#2 ] )
  to:@return

null depth in calling loop Loop head: b::@1 tails: b::@3 blocks: b::@3 b::@1  in scope d

VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) b()
(byte) b::i
(byte) b::i#1 16.5
(byte) b::i#2 11.0
(void()) d()
(void()) main()

Initial phi equivalence classes
[ b::i#2 b::i#1 ]
Complete equivalence classes
[ b::i#2 b::i#1 ]
Allocated zp ZP_BYTE:2 [ b::i#2 b::i#1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @3 [phi:@begin->@3]
b3_from_bbegin:
  jmp b3
//SEG4 @3
b3:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @3 to @end [phi:@3->@end]
bend_from_b3:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) SCREEN#0) ← (byte) '0' [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #'0'
    sta SCREEN
  //SEG10 [5] call d  [ ] ( main:2 [ ] )
    jsr d
  //SEG11 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG12 main::@1
  b1:
  //SEG13 [7] call b  [ ] ( main:2 [ ] )
  //SEG14 [9] phi from main::@1 to b [phi:main::@1->b]
  b_from_b1:
    jsr b
    jmp breturn
  //SEG15 main::@return
  breturn:
  //SEG16 [8] return  [ ] ( main:2 [ ] )
    rts
}
//SEG17 b
b: {
    .label i = 2
  //SEG18 [10] phi from b to b::@1 [phi:b->b::@1]
  b1_from_b:
  //SEG19 [10] phi (byte) b::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:b->b::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG20 [10] phi from b::@3 to b::@1 [phi:b::@3->b::@1]
  b1_from_b3:
  //SEG21 [10] phi (byte) b::i#2 = (byte) b::i#1 [phi:b::@3->b::@1#0] -- register_copy 
    jmp b1
  //SEG22 b::@1
  b1:
  //SEG23 [11] call d  [ b::i#2 ] ( main:2::b:7 [ b::i#2 ] )
    jsr d
    jmp b3
  //SEG24 b::@3
  b3:
  //SEG25 [12] (byte) b::i#1 ← ++ (byte) b::i#2 [ b::i#1 ] ( main:2::b:7 [ b::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG26 [13] if((byte) b::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto b::@1 [ b::i#1 ] ( main:2::b:7 [ b::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #4
    bne b1_from_b3
    jmp breturn
  //SEG27 b::@return
  breturn:
  //SEG28 [14] return  [ ] ( main:2::b:7 [ ] )
    rts
}
//SEG29 d
d: {
  //SEG30 [15] *((const byte*) SCREEN#0) ← ++ *((const byte*) SCREEN#0) [ ] ( main:2::d:5 [ ] main:2::b:7::d:11 [ b::i#2 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN
    jmp breturn
  //SEG31 d::@return
  breturn:
  //SEG32 [16] return  [ ] ( main:2::d:5 [ ] main:2::b:7::d:11 [ b::i#2 ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) SCREEN#0) ← (byte) '0' [ ] ( main:2 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ b::i#2 b::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [b] 27.5: zp ZP_BYTE:2 [ b::i#2 b::i#1 ] 
Uplift Scope [main] 
Uplift Scope [d] 
Uplift Scope [] 

Uplifting [b] best 328 combination reg byte x [ b::i#2 b::i#1 ] 
Uplifting [main] best 328 combination 
Uplifting [d] best 328 combination 
Uplifting [] best 328 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @3 [phi:@begin->@3]
b3_from_bbegin:
  jmp b3
//SEG4 @3
b3:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @3 to @end [phi:@3->@end]
bend_from_b3:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) SCREEN#0) ← (byte) '0' [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #'0'
    sta SCREEN
  //SEG10 [5] call d  [ ] ( main:2 [ ] )
    jsr d
  //SEG11 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG12 main::@1
  b1:
  //SEG13 [7] call b  [ ] ( main:2 [ ] )
  //SEG14 [9] phi from main::@1 to b [phi:main::@1->b]
  b_from_b1:
    jsr b
    jmp breturn
  //SEG15 main::@return
  breturn:
  //SEG16 [8] return  [ ] ( main:2 [ ] )
    rts
}
//SEG17 b
b: {
  //SEG18 [10] phi from b to b::@1 [phi:b->b::@1]
  b1_from_b:
  //SEG19 [10] phi (byte) b::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:b->b::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG20 [10] phi from b::@3 to b::@1 [phi:b::@3->b::@1]
  b1_from_b3:
  //SEG21 [10] phi (byte) b::i#2 = (byte) b::i#1 [phi:b::@3->b::@1#0] -- register_copy 
    jmp b1
  //SEG22 b::@1
  b1:
  //SEG23 [11] call d  [ b::i#2 ] ( main:2::b:7 [ b::i#2 ] )
    jsr d
    jmp b3
  //SEG24 b::@3
  b3:
  //SEG25 [12] (byte) b::i#1 ← ++ (byte) b::i#2 [ b::i#1 ] ( main:2::b:7 [ b::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG26 [13] if((byte) b::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto b::@1 [ b::i#1 ] ( main:2::b:7 [ b::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b1_from_b3
    jmp breturn
  //SEG27 b::@return
  breturn:
  //SEG28 [14] return  [ ] ( main:2::b:7 [ ] )
    rts
}
//SEG29 d
d: {
  //SEG30 [15] *((const byte*) SCREEN#0) ← ++ *((const byte*) SCREEN#0) [ ] ( main:2::d:5 [ ] main:2::b:7::d:11 [ b::i#2 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN
    jmp breturn
  //SEG31 d::@return
  breturn:
  //SEG32 [16] return  [ ] ( main:2::d:5 [ ] main:2::b:7::d:11 [ b::i#2 ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b3
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b3 with b1
Removing instruction bbegin:
Removing instruction b3_from_bbegin:
Removing instruction bend_from_b3:
Removing instruction b1_from_main:
Removing instruction b_from_b1:
Removing instruction b1_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b3:
Removing instruction bend:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1_from_b:
Removing instruction b3:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @3
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(void()) b()
(label) b::@1
(label) b::@3
(label) b::@return
(byte) b::i
(byte) b::i#1 reg byte x 16.5
(byte) b::i#2 reg byte x 11.0
(void()) d()
(label) d::@return
(void()) main()
(label) main::@1
(label) main::@return

reg byte x [ b::i#2 b::i#1 ]


FINAL ASSEMBLER
Score: 193

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @3 [phi:@begin->@3]
//SEG4 @3
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @3 to @end [phi:@3->@end]
//SEG7 @end
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) SCREEN#0) ← (byte) '0' [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #'0'
    sta SCREEN
  //SEG10 [5] call d  [ ] ( main:2 [ ] )
    jsr d
  //SEG11 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 main::@1
  //SEG13 [7] call b  [ ] ( main:2 [ ] )
  //SEG14 [9] phi from main::@1 to b [phi:main::@1->b]
    jsr b
  //SEG15 main::@return
  //SEG16 [8] return  [ ] ( main:2 [ ] )
    rts
}
//SEG17 b
b: {
  //SEG18 [10] phi from b to b::@1 [phi:b->b::@1]
  //SEG19 [10] phi (byte) b::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:b->b::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG20 [10] phi from b::@3 to b::@1 [phi:b::@3->b::@1]
  //SEG21 [10] phi (byte) b::i#2 = (byte) b::i#1 [phi:b::@3->b::@1#0] -- register_copy 
  //SEG22 b::@1
  b1:
  //SEG23 [11] call d  [ b::i#2 ] ( main:2::b:7 [ b::i#2 ] )
    jsr d
  //SEG24 b::@3
  //SEG25 [12] (byte) b::i#1 ← ++ (byte) b::i#2 [ b::i#1 ] ( main:2::b:7 [ b::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG26 [13] if((byte) b::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto b::@1 [ b::i#1 ] ( main:2::b:7 [ b::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b1
  //SEG27 b::@return
  //SEG28 [14] return  [ ] ( main:2::b:7 [ ] )
    rts
}
//SEG29 d
d: {
  //SEG30 [15] *((const byte*) SCREEN#0) ← ++ *((const byte*) SCREEN#0) [ ] ( main:2::d:5 [ ] main:2::b:7::d:11 [ b::i#2 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN
  //SEG31 d::@return
  //SEG32 [16] return  [ ] ( main:2::d:5 [ ] main:2::b:7::d:11 [ b::i#2 ] )
    rts
}

