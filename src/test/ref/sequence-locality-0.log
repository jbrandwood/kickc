Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::idx#0 ← (byte) 0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::idx#5 ← phi( main/(byte) main::idx#0 main::@3/(byte) main::idx#6 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (bool~) main::$0 ← (byte) main::i#2 > (number) 5
  if((bool~) main::$0) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1
  (byte) main::idx#3 ← phi( main::@1/(byte) main::idx#5 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  *((const byte*) main::screen + (byte) main::idx#3) ← (byte) main::i#3
  (byte) main::idx#1 ← ++ (byte) main::idx#3
  to:main::@3
main::@4: scope:[main]  from main::@1
  (byte) main::idx#4 ← phi( main::@1/(byte) main::idx#5 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (number~) main::$1 ← (byte) main::i#4 - (number) 5
  *((const byte*) main::screen + (byte) main::idx#4) ← (number~) main::$1
  (byte) main::idx#2 ← ++ (byte) main::idx#4
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  (byte) main::idx#6 ← phi( main::@2/(byte) main::idx#1 main::@4/(byte) main::idx#2 )
  (byte) main::i#5 ← phi( main::@2/(byte) main::i#3 main::@4/(byte) main::i#4 )
  (byte) main::i#1 ← (byte) main::i#5 + rangenext(0,$a)
  (bool~) main::$2 ← (byte) main::i#1 != rangelast(0,$a)
  if((bool~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(bool~) main::$0
(number~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(const byte*) main::screen = (byte*)(number) $400

Adding number conversion cast (unumber) 5 in (bool~) main::$0 ← (byte) main::i#2 > (number) 5
Adding number conversion cast (unumber) 5 in (number~) main::$1 ← (byte) main::i#4 - (number) 5
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) main::i#4 - (unumber)(number) 5
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 5
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$1 ← (byte) main::i#4 - (byte) 5
Alias main::i#2 = main::i#3 main::i#4 
Alias main::idx#3 = main::idx#5 main::idx#4 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#5 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [4] if((byte) main::i#2>(byte) 5) goto main::@2
Simple Condition (bool~) main::$2 [13] if((byte) main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::idx#0 = 0
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [11] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [13] if(main::i#1!=rangelast(0,$a)) goto main::@1 to (number) $b
Rewriting conditional comparison [4] if((byte) main::i#2>(byte) 5) goto main::@2
Adding number conversion cast (unumber) 5+1 in if((byte) main::i#2>=(byte) 5+(number) 1) goto main::@2
Adding number conversion cast (unumber) 1 in if((byte) main::i#2>=(unumber)(byte) 5+(number) 1) goto main::@2
Adding number conversion cast (unumber) $b in if((byte) main::i#1!=(number) $b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (byte) 5+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::idx#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::idx#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@7(between main::@3 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [11] main::idx#9 ← main::idx#2
Coalesced [16] main::i#6 ← main::i#1
Coalesced [17] main::idx#7 ← main::idx#6
Coalesced [20] main::idx#8 ← main::idx#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@7
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) main::idx#3 ← phi( main/(byte) 0 main::@3/(byte) main::idx#6 )
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@3/(byte) main::i#1 )
  [6] if((byte) main::i#2>=(byte) 5+(byte) 1) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@1
  [7] (byte~) main::$1 ← (byte) main::i#2 - (byte) 5
  [8] *((const byte*) main::screen + (byte) main::idx#3) ← (byte~) main::$1
  [9] (byte) main::idx#2 ← ++ (byte) main::idx#3
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [10] (byte) main::idx#6 ← phi( main::@2/(byte) main::idx#1 main::@4/(byte) main::idx#2 )
  [11] (byte) main::i#1 ← ++ (byte) main::i#2
  [12] if((byte) main::i#1!=(byte) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [13] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [14] *((const byte*) main::screen + (byte) main::idx#3) ← (byte) main::i#2
  [15] (byte) main::idx#1 ← ++ (byte) main::idx#3
  to:main::@3


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$1 202.0
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#2 63.125
(byte) main::idx
(byte) main::idx#1 202.0
(byte) main::idx#2 202.0
(byte) main::idx#3 101.0
(byte) main::idx#6 101.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ]
[ main::$1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ]
Allocated zp[1]:4 [ main::$1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests statement sequence locality of if(cond) { stmt1; } else { stmt2; }
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label screen = $400
    .label __1 = 4
    .label idx = 3
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [5] phi (byte) main::idx#3 = (byte) main::idx#6 [phi:main::@3->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) main::i#2>=(byte) 5+(byte) 1) goto main::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda.z i
    cmp #5+1
    bcs __b2
    jmp __b4
    // main::@4
  __b4:
    // [7] (byte~) main::$1 ← (byte) main::i#2 - (byte) 5 -- vbuz1=vbuz2_minus_vbuc1 
    lax.z i
    axs #5
    stx.z __1
    // [8] *((const byte*) main::screen + (byte) main::idx#3) ← (byte~) main::$1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __1
    ldy.z idx
    sta screen,y
    // [9] (byte) main::idx#2 ← ++ (byte) main::idx#3 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [10] phi from main::@2 main::@4 to main::@3 [phi:main::@2/main::@4->main::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [10] phi (byte) main::idx#6 = (byte) main::idx#1 [phi:main::@2/main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [12] if((byte) main::i#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z i
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
    // main::@2
  __b2:
    // [14] *((const byte*) main::screen + (byte) main::idx#3) ← (byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z i
    ldy.z idx
    sta screen,y
    // [15] (byte) main::idx#1 ← ++ (byte) main::idx#3 -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __b3_from___b2
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 606: zp[1]:3 [ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ] 214.62: zp[1]:2 [ main::i#2 main::i#1 ] 202: zp[1]:4 [ main::$1 ] 
Uplift Scope [] 

Uplifting [main] best 568 combination reg byte y [ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ] reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] 
Uplifting [] best 568 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests statement sequence locality of if(cond) { stmt1; } else { stmt2; }
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label screen = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [5] phi (byte) main::idx#3 = (byte) main::idx#6 [phi:main::@3->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) main::i#2>=(byte) 5+(byte) 1) goto main::@2 -- vbuxx_ge_vbuc1_then_la1 
    cpx #5+1
    bcs __b2
    jmp __b4
    // main::@4
  __b4:
    // [7] (byte~) main::$1 ← (byte) main::i#2 - (byte) 5 -- vbuaa=vbuxx_minus_vbuc1 
    txa
    sec
    sbc #5
    // [8] *((const byte*) main::screen + (byte) main::idx#3) ← (byte~) main::$1 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta screen,y
    // [9] (byte) main::idx#2 ← ++ (byte) main::idx#3 -- vbuyy=_inc_vbuyy 
    iny
    // [10] phi from main::@2 main::@4 to main::@3 [phi:main::@2/main::@4->main::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [10] phi (byte) main::idx#6 = (byte) main::idx#1 [phi:main::@2/main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [12] if((byte) main::i#1!=(byte) $b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
    // main::@2
  __b2:
    // [14] *((const byte*) main::screen + (byte) main::idx#3) ← (byte) main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta screen,y
    // [15] (byte) main::idx#1 ← ++ (byte) main::idx#3 -- vbuyy=_inc_vbuyy 
    iny
    jmp __b3_from___b2
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b4:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$1 reg byte a 202.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 151.5
(byte) main::i#2 reg byte x 63.125
(byte) main::idx
(byte) main::idx#1 reg byte y 202.0
(byte) main::idx#2 reg byte y 202.0
(byte) main::idx#3 reg byte y 101.0
(byte) main::idx#6 reg byte y 101.0
(const byte*) main::screen = (byte*) 1024

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::idx#3 main::idx#6 main::idx#1 main::idx#2 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 406

  // File Comments
// Tests statement sequence locality of if(cond) { stmt1; } else { stmt2; }
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label screen = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [5] phi (byte) main::idx#3 = (byte) main::idx#6 [phi:main::@3->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // if(i>5)
    // [6] if((byte) main::i#2>=(byte) 5+(byte) 1) goto main::@2 -- vbuxx_ge_vbuc1_then_la1 
    cpx #5+1
    bcs __b2
    // main::@4
    // i-5
    // [7] (byte~) main::$1 ← (byte) main::i#2 - (byte) 5 -- vbuaa=vbuxx_minus_vbuc1 
    txa
    sec
    sbc #5
    // screen[idx++] = i-5
    // [8] *((const byte*) main::screen + (byte) main::idx#3) ← (byte~) main::$1 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta screen,y
    // screen[idx++] = i-5;
    // [9] (byte) main::idx#2 ← ++ (byte) main::idx#3 -- vbuyy=_inc_vbuyy 
    iny
    // [10] phi from main::@2 main::@4 to main::@3 [phi:main::@2/main::@4->main::@3]
    // [10] phi (byte) main::idx#6 = (byte) main::idx#1 [phi:main::@2/main::@4->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // for(byte i: 0..10)
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [12] if((byte) main::i#1!=(byte) $b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b1
    // main::@return
    // }
    // [13] return 
    rts
    // main::@2
  __b2:
    // screen[idx++] = i
    // [14] *((const byte*) main::screen + (byte) main::idx#3) ← (byte) main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta screen,y
    // screen[idx++] = i;
    // [15] (byte) main::idx#1 ← ++ (byte) main::idx#3 -- vbuyy=_inc_vbuyy 
    iny
    jmp __b3
}
  // File Data

