Setting inferred volatile on symbol affected by address-of main::long_ptr_zp = <&main::long_ptr

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::long_ptr = $12345678
  asm { nop lda(long_ptr_zp),y sta$ff  }
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
volatile dword main::long_ptr loadstore
const byte main::long_ptr_zp = <&main::long_ptr

Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::long_ptr = $12345678
  asm { nop lda(long_ptr_zp),y sta$ff  }
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
volatile dword main::long_ptr loadstore 20.0

Initial phi equivalence classes
Added variable main::long_ptr to live range equivalence class [ main::long_ptr ]
Complete equivalence classes
[ main::long_ptr ]
Allocated zp[4]:2 [ main::long_ptr ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::long_ptr = $12345678 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement asm { nop lda(long_ptr_zp),y sta$ff  } always clobbers reg byte a 
Potential registers zp[4]:2 [ main::long_ptr ] : zp[4]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp[4]:2 [ main::long_ptr ] 
Uplift Scope [] 

Uplifting [main] best 39 combination zp[4]:2 [ main::long_ptr ] 
Uplifting [] best 39 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests creating a long (32bit) pointer on zeropage for 45GS02 flat memory access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const long_ptr_zp = <long_ptr
    .label long_ptr = 2
    // [0] main::long_ptr = $12345678 -- vduz1=vduc1 
    lda #<$12345678
    sta.z long_ptr
    lda #>$12345678
    sta.z long_ptr+1
    lda #<$12345678>>$10
    sta.z long_ptr+2
    lda #>$12345678>>$10
    sta.z long_ptr+3
    // asm { nop lda(long_ptr_zp),y sta$ff  }
    nop
    lda (long_ptr_zp),y
    sta.z $ff
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
volatile dword main::long_ptr loadstore zp[4]:2 20.0
const byte main::long_ptr_zp = <&main::long_ptr

zp[4]:2 [ main::long_ptr ]


FINAL ASSEMBLER
Score: 36

  // File Comments
// Tests creating a long (32bit) pointer on zeropage for 45GS02 flat memory access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const long_ptr_zp = <long_ptr
    .label long_ptr = 2
    // long_ptr = 0x12345678
    // [0] main::long_ptr = $12345678 -- vduz1=vduc1 
    lda #<$12345678
    sta.z long_ptr
    lda #>$12345678
    sta.z long_ptr+1
    lda #<$12345678>>$10
    sta.z long_ptr+2
    lda #>$12345678>>$10
    sta.z long_ptr+3
    // asm
    // asm { nop lda(long_ptr_zp),y sta$ff  }
    nop
    lda (long_ptr_zp),y
    sta.z $ff
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

