Resolved forward reference irq to interrupt(KERNEL_MIN)(void()) irq()
Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq()
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  *((const nomodify byte*) SCREEN + (number) $28) ← (volatile byte) col1
  (volatile byte) col1 ← ++ (volatile byte) col1
  *((const nomodify byte*) SCREEN + (number) $29) ← (volatile byte) col2
  (volatile byte) col2 ← ++ (volatile byte) col2
  to:irq::@return
irq::@return: scope:[irq]  from irq
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (volatile byte) col1 ← (byte) 0
  (volatile byte) col2 ← (byte) 8
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify void()**) KERNEL_IRQ = (void()**)(number) $314
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(volatile byte) col1 loadstore
(volatile byte) col2 loadstore
interrupt(KERNEL_MIN)(void()) irq()
(label) irq::@return
(void()) main()
(label) main::@return

Adding number conversion cast (unumber) $28 in *((const nomodify byte*) SCREEN + (number) $28) ← (volatile byte) col1
Adding number conversion cast (unumber) $29 in *((const nomodify byte*) SCREEN + (number) $29) ← (volatile byte) col2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast $29
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $29
Successful SSA optimization PassNFinalizeNumberTypeConversions
Consolidated array index constant in *(SCREEN+$28)
Consolidated array index constant in *(SCREEN+$29)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of _start::@2
CALL GRAPH
Calls in [_start] to main:4 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) _start::@2
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1

FINAL CONTROL FLOW GRAPH

(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (volatile byte) col1 ← (byte) 0
  [2] (volatile byte) col2 ← (byte) 8
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [3] phi()
  [4] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [5] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [6] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq()
  to:main::@return
main::@return: scope:[main]  from main
  [7] return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  [8] *((const nomodify byte*) SCREEN+(byte) $28) ← (volatile byte) col1
  [9] (volatile byte) col1 ← ++ (volatile byte) col1
  [10] *((const nomodify byte*) SCREEN+(byte) $29) ← (volatile byte) col2
  [11] (volatile byte) col2 ← ++ (volatile byte) col2
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [12] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) _start()
(volatile byte) col1 loadstore 8.0
(volatile byte) col2 loadstore 2.6666666666666665
interrupt(KERNEL_MIN)(void()) irq()
(void()) main()

Initial phi equivalence classes
Added variable col1 to live range equivalence class [ col1 ]
Added variable col2 to live range equivalence class [ col2 ]
Complete equivalence classes
[ col1 ]
[ col2 ]
Allocated zp[1]:2 [ col1 ]
Allocated zp[1]:3 [ col2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates problem where volatiles reuse the same ZP addresses for multiple overlapping volatiles
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label col1 = 2
  .label col2 = 3
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (volatile byte) col1 ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z col1
    // [2] (volatile byte) col2 ← (byte) 8 -- vbuz1=vbuc1 
    lda #8
    sta.z col2
    // [3] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [4] call main 
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [5] return 
    rts
}
  // main
main: {
    // [6] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // irq
irq: {
    // entry interrupt(KERNEL_MIN)
    // [8] *((const nomodify byte*) SCREEN+(byte) $28) ← (volatile byte) col1 -- _deref_pbuc1=vbuz1 
    lda.z col1
    sta SCREEN+$28
    // [9] (volatile byte) col1 ← ++ (volatile byte) col1 -- vbuz1=_inc_vbuz1 
    inc.z col1
    // [10] *((const nomodify byte*) SCREEN+(byte) $29) ← (volatile byte) col2 -- _deref_pbuc1=vbuz1 
    lda.z col2
    sta SCREEN+$29
    // [11] (volatile byte) col2 ← ++ (volatile byte) col2 -- vbuz1=_inc_vbuz1 
    inc.z col2
    jmp __breturn
    // irq::@return
  __breturn:
    // [12] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte) col1 ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) col2 ← (byte) 8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq() [ ] ( main:4 [ ] { }  ) always clobbers reg byte a 
Statement [8] *((const nomodify byte*) SCREEN+(byte) $28) ← (volatile byte) col1 [ col1 col2 ] (  [ col1 col2 ] { }  ) always clobbers reg byte a 
Statement [10] *((const nomodify byte*) SCREEN+(byte) $29) ← (volatile byte) col2 [ col2 ] (  [ col2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ col1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ col2 ] : zp[1]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 8: zp[1]:2 [ col1 ] 2.67: zp[1]:3 [ col2 ] 
Uplift Scope [main] 
Uplift Scope [irq] 
Uplift Scope [_start] 

Uplifting [] best 109 combination zp[1]:2 [ col1 ] zp[1]:3 [ col2 ] 
Uplifting [main] best 109 combination 
Uplifting [irq] best 109 combination 
Uplifting [_start] best 109 combination 
Attempting to uplift remaining variables inzp[1]:2 [ col1 ]
Uplifting [] best 109 combination zp[1]:2 [ col1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ col2 ]
Uplifting [] best 109 combination zp[1]:3 [ col2 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates problem where volatiles reuse the same ZP addresses for multiple overlapping volatiles
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label col1 = 2
  .label col2 = 3
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (volatile byte) col1 ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z col1
    // [2] (volatile byte) col2 ← (byte) 8 -- vbuz1=vbuc1 
    lda #8
    sta.z col2
    // [3] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [4] call main 
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [5] return 
    rts
}
  // main
main: {
    // [6] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // irq
irq: {
    // entry interrupt(KERNEL_MIN)
    // [8] *((const nomodify byte*) SCREEN+(byte) $28) ← (volatile byte) col1 -- _deref_pbuc1=vbuz1 
    lda.z col1
    sta SCREEN+$28
    // [9] (volatile byte) col1 ← ++ (volatile byte) col1 -- vbuz1=_inc_vbuz1 
    inc.z col1
    // [10] *((const nomodify byte*) SCREEN+(byte) $29) ← (volatile byte) col2 -- _deref_pbuc1=vbuz1 
    lda.z col2
    sta SCREEN+$29
    // [11] (volatile byte) col2 ← ++ (volatile byte) col2 -- vbuz1=_inc_vbuz1 
    inc.z col2
    jmp __breturn
    // irq::@return
  __breturn:
    // [12] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp _init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from__init1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction _init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify void()**) KERNEL_IRQ = (void()**) 788
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) _start()
(label) _start::@1
(label) _start::@return
(label) _start::_init1
(volatile byte) col1 loadstore zp[1]:2 8.0
(volatile byte) col2 loadstore zp[1]:3 2.6666666666666665
interrupt(KERNEL_MIN)(void()) irq()
(label) irq::@return
(void()) main()
(label) main::@return

zp[1]:2 [ col1 ]
zp[1]:3 [ col2 ]


FINAL ASSEMBLER
Score: 67

  // File Comments
// Illustrates problem where volatiles reuse the same ZP addresses for multiple overlapping volatiles
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label col1 = 2
  .label col2 = 3
  // _start
_start: {
    // _start::_init1
    // col1 = 0
    // [1] (volatile byte) col1 ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z col1
    // col2 = 8
    // [2] (volatile byte) col2 ← (byte) 8 -- vbuz1=vbuc1 
    lda #8
    sta.z col2
    // [3] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
    // _start::@1
    // [4] call main 
    jsr main
    // _start::@return
    // [5] return 
    rts
}
  // main
main: {
    // *KERNEL_IRQ = &irq
    // [6] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    // main::@return
    // }
    // [7] return 
    rts
}
  // irq
irq: {
    // entry interrupt(KERNEL_MIN)
    // SCREEN[40] = col1++
    // [8] *((const nomodify byte*) SCREEN+(byte) $28) ← (volatile byte) col1 -- _deref_pbuc1=vbuz1 
    lda.z col1
    sta SCREEN+$28
    // SCREEN[40] = col1++;
    // [9] (volatile byte) col1 ← ++ (volatile byte) col1 -- vbuz1=_inc_vbuz1 
    inc.z col1
    // SCREEN[41] = col2++
    // [10] *((const nomodify byte*) SCREEN+(byte) $29) ← (volatile byte) col2 -- _deref_pbuc1=vbuz1 
    lda.z col2
    sta SCREEN+$29
    // SCREEN[41] = col2++;
    // [11] (volatile byte) col2 ← ++ (volatile byte) col2 -- vbuz1=_inc_vbuz1 
    inc.z col2
    // irq::@return
    // }
    // [12] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data

