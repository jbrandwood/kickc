
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  asm { ldx#0 nxt: ldatable,x staSCREEN+1,x inx cpx#4 bnenxt  }
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@return
(const byte*) table[]  = (byte*) "cml!"z

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  asm { ldx#0 nxt: ldatable,x staSCREEN+1,x inx cpx#4 bnenxt  }
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates how inline assembler use internal labels and external references
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // asm { ldx#0 nxt: ldatable,x staSCREEN+1,x inx cpx#4 bnenxt  }
    ldx #0
  nxt:
    lda table,x
    sta SCREEN+1,x
    inx
    cpx #4
    bne nxt
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data
  table: .text "cml!"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement asm { ldx#0 nxt: ldatable,x staSCREEN+1,x inx cpx#4 bnenxt  } always clobbers reg byte a reg byte x 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 27 combination 
Uplifting [] best 27 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates how inline assembler use internal labels and external references
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // asm { ldx#0 nxt: ldatable,x staSCREEN+1,x inx cpx#4 bnenxt  }
    ldx #0
  nxt:
    lda table,x
    sta SCREEN+1,x
    inx
    cpx #4
    bne nxt
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data
  table: .text "cml!"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@return
(const byte*) table[]  = (byte*) "cml!"z



FINAL ASSEMBLER
Score: 24

  // File Comments
// Illustrates how inline assembler use internal labels and external references
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // asm
    // asm { ldx#0 nxt: ldatable,x staSCREEN+1,x inx cpx#4 bnenxt  }
    ldx #0
  nxt:
    lda table,x
    sta SCREEN+1,x
    inx
    cpx #4
    bne nxt
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data
  table: .text "cml!"

