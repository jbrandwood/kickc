
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  call scrollup1
  to:main::@1
main::@1: scope:[main]  from main
  call scrollup2
  to:main::@2
main::@2: scope:[main]  from main::@1
  call scrollup3
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void scrollup1()
scrollup1: scope:[scrollup1]  from main
  scrollup1::line#0 = 0
  to:scrollup1::@1
scrollup1::@1: scope:[scrollup1]  from scrollup1 scrollup1::@5
  scrollup1::line#2 = phi( scrollup1/scrollup1::line#0, scrollup1::@5/scrollup1::line#1 )
  scrollup1::$0 = scrollup1::line#2 < $28*$18
  if(scrollup1::$0) goto scrollup1::@2
  to:scrollup1::@return
scrollup1::@2: scope:[scrollup1]  from scrollup1::@1
  scrollup1::line#6 = phi( scrollup1::@1/scrollup1::line#2 )
  scrollup1::c#0 = 0
  to:scrollup1::@3
scrollup1::@3: scope:[scrollup1]  from scrollup1::@2 scrollup1::@4
  scrollup1::line#5 = phi( scrollup1::@2/scrollup1::line#6, scrollup1::@4/scrollup1::line#3 )
  scrollup1::c#2 = phi( scrollup1::@2/scrollup1::c#0, scrollup1::@4/scrollup1::c#1 )
  scrollup1::$1 = scrollup1::c#2 < $28
  if(scrollup1::$1) goto scrollup1::@4
  to:scrollup1::@5
scrollup1::@4: scope:[scrollup1]  from scrollup1::@3
  scrollup1::c#3 = phi( scrollup1::@3/scrollup1::c#2 )
  scrollup1::line#3 = phi( scrollup1::@3/scrollup1::line#5 )
  scrollup1::$2 = scrollup1::line#3 + scrollup1::c#3
  scrollup1::$3 = scrollup1::line#3 + scrollup1::c#3
  scrollup1::$4 = scrollup1::$3 + $28
  screen[scrollup1::$2] = screen[scrollup1::$4]
  scrollup1::c#1 = ++ scrollup1::c#3
  to:scrollup1::@3
scrollup1::@5: scope:[scrollup1]  from scrollup1::@3
  scrollup1::line#4 = phi( scrollup1::@3/scrollup1::line#5 )
  scrollup1::line#1 = scrollup1::line#4 + $28
  to:scrollup1::@1
scrollup1::@return: scope:[scrollup1]  from scrollup1::@1
  return 
  to:@return

void scrollup2()
scrollup2: scope:[scrollup2]  from main::@1
  scrollup2::line1#0 = screen
  scrollup2::line2#0 = screen+$28
  scrollup2::l#0 = 0
  to:scrollup2::@1
scrollup2::@1: scope:[scrollup2]  from scrollup2 scrollup2::@3
  scrollup2::l#4 = phi( scrollup2/scrollup2::l#0, scrollup2::@3/scrollup2::l#1 )
  scrollup2::line1#3 = phi( scrollup2/scrollup2::line1#0, scrollup2::@3/scrollup2::line1#4 )
  scrollup2::line2#3 = phi( scrollup2/scrollup2::line2#0, scrollup2::@3/scrollup2::line2#4 )
  scrollup2::c#0 = 0
  to:scrollup2::@2
scrollup2::@2: scope:[scrollup2]  from scrollup2::@1 scrollup2::@2
  scrollup2::l#3 = phi( scrollup2::@1/scrollup2::l#4, scrollup2::@2/scrollup2::l#3 )
  scrollup2::c#2 = phi( scrollup2::@1/scrollup2::c#0, scrollup2::@2/scrollup2::c#1 )
  scrollup2::line1#2 = phi( scrollup2::@1/scrollup2::line1#3, scrollup2::@2/scrollup2::line1#1 )
  scrollup2::line2#2 = phi( scrollup2::@1/scrollup2::line2#3, scrollup2::@2/scrollup2::line2#1 )
  *scrollup2::line1#2 = *scrollup2::line2#2
  scrollup2::line1#1 = ++ scrollup2::line1#2
  scrollup2::line2#1 = ++ scrollup2::line2#2
  scrollup2::c#1 = scrollup2::c#2 + rangenext(0,$27)
  scrollup2::$0 = scrollup2::c#1 != rangelast(0,$27)
  if(scrollup2::$0) goto scrollup2::@2
  to:scrollup2::@3
scrollup2::@3: scope:[scrollup2]  from scrollup2::@2
  scrollup2::line1#4 = phi( scrollup2::@2/scrollup2::line1#1 )
  scrollup2::line2#4 = phi( scrollup2::@2/scrollup2::line2#1 )
  scrollup2::l#2 = phi( scrollup2::@2/scrollup2::l#3 )
  scrollup2::l#1 = scrollup2::l#2 + rangenext(0,$17)
  scrollup2::$1 = scrollup2::l#1 != rangelast(0,$17)
  if(scrollup2::$1) goto scrollup2::@1
  to:scrollup2::@return
scrollup2::@return: scope:[scrollup2]  from scrollup2::@3
  return 
  to:@return

void scrollup3()
scrollup3: scope:[scrollup3]  from main::@2
  scrollup3::line#0 = 0
  to:scrollup3::@1
scrollup3::@1: scope:[scrollup3]  from scrollup3 scrollup3::@5
  scrollup3::line#2 = phi( scrollup3/scrollup3::line#0, scrollup3::@5/scrollup3::line#1 )
  scrollup3::$0 = scrollup3::line#2 < $28*$18
  if(scrollup3::$0) goto scrollup3::@2
  to:scrollup3::@return
scrollup3::@2: scope:[scrollup3]  from scrollup3::@1
  scrollup3::line#3 = phi( scrollup3::@1/scrollup3::line#2 )
  scrollup3::l2#0 = scrollup3::line#3
  scrollup3::c#0 = 0
  to:scrollup3::@3
scrollup3::@3: scope:[scrollup3]  from scrollup3::@2 scrollup3::@4
  scrollup3::line#5 = phi( scrollup3::@2/scrollup3::line#3, scrollup3::@4/scrollup3::line#6 )
  scrollup3::l2#3 = phi( scrollup3::@2/scrollup3::l2#0, scrollup3::@4/scrollup3::l2#1 )
  scrollup3::c#2 = phi( scrollup3::@2/scrollup3::c#0, scrollup3::@4/scrollup3::c#1 )
  scrollup3::$1 = scrollup3::c#2 < $28
  if(scrollup3::$1) goto scrollup3::@4
  to:scrollup3::@5
scrollup3::@4: scope:[scrollup3]  from scrollup3::@3
  scrollup3::line#6 = phi( scrollup3::@3/scrollup3::line#5 )
  scrollup3::c#3 = phi( scrollup3::@3/scrollup3::c#2 )
  scrollup3::l2#2 = phi( scrollup3::@3/scrollup3::l2#3 )
  scrollup3::$2 = scrollup3::l2#2 + $28
  screen[scrollup3::l2#2] = screen[scrollup3::$2]
  scrollup3::l2#1 = ++ scrollup3::l2#2
  scrollup3::c#1 = ++ scrollup3::c#3
  to:scrollup3::@3
scrollup3::@5: scope:[scrollup3]  from scrollup3::@3
  scrollup3::line#4 = phi( scrollup3::@3/scrollup3::line#5 )
  scrollup3::line#1 = scrollup3::line#4 + $28
  to:scrollup3::@1
scrollup3::@return: scope:[scrollup3]  from scrollup3::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
__constant char * const screen = (char *)$400
void scrollup1()
bool scrollup1::$0
bool scrollup1::$1
unsigned int scrollup1::$2
unsigned int scrollup1::$3
number scrollup1::$4
char scrollup1::c
char scrollup1::c#0
char scrollup1::c#1
char scrollup1::c#2
char scrollup1::c#3
unsigned int scrollup1::line
unsigned int scrollup1::line#0
unsigned int scrollup1::line#1
unsigned int scrollup1::line#2
unsigned int scrollup1::line#3
unsigned int scrollup1::line#4
unsigned int scrollup1::line#5
unsigned int scrollup1::line#6
void scrollup2()
bool scrollup2::$0
bool scrollup2::$1
char scrollup2::c
char scrollup2::c#0
char scrollup2::c#1
char scrollup2::c#2
char scrollup2::l
char scrollup2::l#0
char scrollup2::l#1
char scrollup2::l#2
char scrollup2::l#3
char scrollup2::l#4
char *scrollup2::line1
char *scrollup2::line1#0
char *scrollup2::line1#1
char *scrollup2::line1#2
char *scrollup2::line1#3
char *scrollup2::line1#4
char *scrollup2::line2
char *scrollup2::line2#0
char *scrollup2::line2#1
char *scrollup2::line2#2
char *scrollup2::line2#3
char *scrollup2::line2#4
void scrollup3()
bool scrollup3::$0
bool scrollup3::$1
number scrollup3::$2
char scrollup3::c
char scrollup3::c#0
char scrollup3::c#1
char scrollup3::c#2
char scrollup3::c#3
unsigned int scrollup3::l2
unsigned int scrollup3::l2#0
unsigned int scrollup3::l2#1
unsigned int scrollup3::l2#2
unsigned int scrollup3::l2#3
unsigned int scrollup3::line
unsigned int scrollup3::line#0
unsigned int scrollup3::line#1
unsigned int scrollup3::line#2
unsigned int scrollup3::line#3
unsigned int scrollup3::line#4
unsigned int scrollup3::line#5
unsigned int scrollup3::line#6

Adding number conversion cast (unumber) $28*$18 in scrollup1::$0 = scrollup1::line#2 < $28*$18
Adding number conversion cast (unumber) $28 in scrollup1::$1 = scrollup1::c#2 < $28
Adding number conversion cast (unumber) $28 in scrollup1::$4 = scrollup1::$3 + $28
Adding number conversion cast (unumber) scrollup1::$4 in scrollup1::$4 = scrollup1::$3 + (unumber)$28
Adding number conversion cast (unumber) $28 in scrollup1::line#1 = scrollup1::line#4 + $28
Adding number conversion cast (unumber) $28 in scrollup2::line2#0 = screen+$28
Adding number conversion cast (unumber) $28*$18 in scrollup3::$0 = scrollup3::line#2 < $28*$18
Adding number conversion cast (unumber) $28 in scrollup3::$1 = scrollup3::c#2 < $28
Adding number conversion cast (unumber) $28 in scrollup3::$2 = scrollup3::l2#2 + $28
Adding number conversion cast (unumber) scrollup3::$2 in scrollup3::$2 = scrollup3::l2#2 + (unumber)$28
Adding number conversion cast (unumber) $28 in scrollup3::line#1 = scrollup3::line#4 + $28
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to unsigned int in scrollup1::$4 = scrollup1::$3 + $28
Inferred type updated to unsigned int in scrollup3::$2 = scrollup3::l2#2 + $28
Alias scrollup1::line#2 = scrollup1::line#6 
Alias scrollup1::line#3 = scrollup1::line#5 scrollup1::line#4 
Alias scrollup1::c#2 = scrollup1::c#3 
Alias scrollup2::l#2 = scrollup2::l#3 
Alias scrollup2::line2#1 = scrollup2::line2#4 
Alias scrollup2::line1#1 = scrollup2::line1#4 
Alias scrollup3::line#2 = scrollup3::line#3 scrollup3::l2#0 
Alias scrollup3::l2#2 = scrollup3::l2#3 
Alias scrollup3::c#2 = scrollup3::c#3 
Alias scrollup3::line#4 = scrollup3::line#6 scrollup3::line#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values scrollup1::line#3 scrollup1::line#2
Identical Phi Values scrollup2::l#2 scrollup2::l#4
Identical Phi Values scrollup3::line#4 scrollup3::line#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [15] scrollup1::$3 = scrollup1::line#2 + scrollup1::c#2
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition scrollup1::$0 [7] if(scrollup1::line#2<(unsigned int)$28*$18) goto scrollup1::@2
Simple Condition scrollup1::$1 [11] if(scrollup1::c#2<$28) goto scrollup1::@4
Simple Condition scrollup2::$0 [30] if(scrollup2::c#1!=rangelast(0,$27)) goto scrollup2::@2
Simple Condition scrollup2::$1 [33] if(scrollup2::l#1!=rangelast(0,$17)) goto scrollup2::@1
Simple Condition scrollup3::$0 [38] if(scrollup3::line#2<(unsigned int)$28*$18) goto scrollup3::@2
Simple Condition scrollup3::$1 [42] if(scrollup3::c#2<$28) goto scrollup3::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant scrollup1::line#0 = 0
Constant scrollup1::c#0 = 0
Constant scrollup2::line1#0 = screen
Constant scrollup2::line2#0 = screen+$28
Constant scrollup2::l#0 = 0
Constant scrollup2::c#0 = 0
Constant scrollup3::line#0 = 0
Constant scrollup3::c#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [28] scrollup2::c#1 = ++ scrollup2::c#2 to ++
Resolved ranged comparison value [30] if(scrollup2::c#1!=rangelast(0,$27)) goto scrollup2::@2 to $28
Resolved ranged next value [31] scrollup2::l#1 = ++ scrollup2::l#4 to ++
Resolved ranged comparison value [33] if(scrollup2::l#1!=rangelast(0,$17)) goto scrollup2::@1 to $18
De-inlining pointer[w] to *(pointer+w)   [15] screen[scrollup1::$2] = screen[scrollup1::$4]
De-inlining pointer[w] to *(pointer+w)   [15] screen[scrollup1::$2] = *scrollup1::$5
De-inlining pointer[w] to *(pointer+w)   [44] screen[scrollup3::l2#2] = screen[scrollup3::$2]
De-inlining pointer[w] to *(pointer+w)   [44] screen[scrollup3::l2#2] = *scrollup3::$3
Successful SSA optimization Pass2DeInlineWordDerefIdx
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $28 in [23] if(scrollup2::c#1!=$28) goto scrollup2::@2
Adding number conversion cast (unumber) $18 in [25] if(scrollup2::l#1!=$18) goto scrollup2::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Simplifying constant integer cast $18
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $18
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias scrollup1::$3 = scrollup1::$2 
Successful SSA optimization Pass2AliasElimination
Inlining constant with var siblings scrollup1::line#0
Inlining constant with var siblings scrollup1::c#0
Inlining constant with var siblings scrollup2::line1#0
Inlining constant with var siblings scrollup2::line2#0
Inlining constant with var siblings scrollup2::l#0
Inlining constant with var siblings scrollup2::c#0
Inlining constant with var siblings scrollup3::line#0
Inlining constant with var siblings scrollup3::c#0
Constant inlined scrollup2::l#0 = 0
Constant inlined scrollup3::line#0 = 0
Constant inlined scrollup3::c#0 = 0
Constant inlined scrollup2::c#0 = 0
Constant inlined scrollup1::c#0 = 0
Constant inlined scrollup1::line#0 = 0
Constant inlined scrollup2::line2#0 = screen+$28
Constant inlined scrollup2::line1#0 = screen
Successful SSA optimization Pass2ConstantInlining
Consolidated constant in assignment scrollup1::$5
Consolidated constant in assignment scrollup3::$3
Successful SSA optimization Pass2ConstantAdditionElimination
Alias scrollup1::$4 = scrollup1::$3 
Alias scrollup3::l2#2 = scrollup3::$2 
Successful SSA optimization Pass2AliasElimination
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $18
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $18
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting scrollup2::@4(between scrollup2::@3 and scrollup2::@1)
Added new block during phi lifting scrollup2::@5(between scrollup2::@2 and scrollup2::@2)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of scrollup1
Adding NOP phi() at start of scrollup1::@2
Adding NOP phi() at start of scrollup2
Adding NOP phi() at start of scrollup3
CALL GRAPH
Calls in [main] to scrollup1:1 scrollup2:3 scrollup3:5 

Created 11 initial phi equivalence classes
Coalesced [16] scrollup1::line#7 = scrollup1::line#1
Coalesced [22] scrollup1::c#4 = scrollup1::c#1
Coalesced [25] scrollup2::line2#6 = scrollup2::line2#3
Coalesced [26] scrollup2::line1#6 = scrollup2::line1#3
Coalesced [36] scrollup2::line2#5 = scrollup2::line2#1
Coalesced [37] scrollup2::line1#5 = scrollup2::line1#1
Coalesced [38] scrollup2::l#5 = scrollup2::l#1
Coalesced (already) [39] scrollup2::line2#7 = scrollup2::line2#1
Coalesced (already) [40] scrollup2::line1#7 = scrollup2::line1#1
Coalesced [41] scrollup2::c#3 = scrollup2::c#1
Not coalescing [46] scrollup3::l2#4 = scrollup3::line#2
Coalesced [50] scrollup3::line#7 = scrollup3::line#1
Coalesced [56] scrollup3::c#4 = scrollup3::c#1
Coalesced [57] scrollup3::l2#5 = scrollup3::l2#1
Coalesced down to 9 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label scrollup1::@2
Culled Empty Block label scrollup2::@4
Culled Empty Block label scrollup2::@5
Renumbering block scrollup1::@3 to scrollup1::@2
Renumbering block scrollup1::@4 to scrollup1::@3
Renumbering block scrollup1::@5 to scrollup1::@4
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of scrollup1
Adding NOP phi() at start of scrollup2
Adding NOP phi() at start of scrollup3

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call scrollup1
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call scrollup2
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call scrollup3
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

void scrollup1()
scrollup1: scope:[scrollup1]  from main
  [7] phi()
  to:scrollup1::@1
scrollup1::@1: scope:[scrollup1]  from scrollup1 scrollup1::@4
  [8] scrollup1::line#2 = phi( scrollup1/0, scrollup1::@4/scrollup1::line#1 )
  [9] if(scrollup1::line#2<(unsigned int)$28*$18) goto scrollup1::@2
  to:scrollup1::@return
scrollup1::@return: scope:[scrollup1]  from scrollup1::@1
  [10] return 
  to:@return
scrollup1::@2: scope:[scrollup1]  from scrollup1::@1 scrollup1::@3
  [11] scrollup1::c#2 = phi( scrollup1::@1/0, scrollup1::@3/scrollup1::c#1 )
  [12] if(scrollup1::c#2<$28) goto scrollup1::@3
  to:scrollup1::@4
scrollup1::@4: scope:[scrollup1]  from scrollup1::@2
  [13] scrollup1::line#1 = scrollup1::line#2 + $28
  to:scrollup1::@1
scrollup1::@3: scope:[scrollup1]  from scrollup1::@2
  [14] scrollup1::$4 = scrollup1::line#2 + scrollup1::c#2
  [15] scrollup1::$5 = screen+$28 + scrollup1::$4
  [16] scrollup1::$6 = screen + scrollup1::$4
  [17] *scrollup1::$6 = *scrollup1::$5
  [18] scrollup1::c#1 = ++ scrollup1::c#2
  to:scrollup1::@2

void scrollup2()
scrollup2: scope:[scrollup2]  from main::@1
  [19] phi()
  to:scrollup2::@1
scrollup2::@1: scope:[scrollup2]  from scrollup2 scrollup2::@3
  [20] scrollup2::l#4 = phi( scrollup2/0, scrollup2::@3/scrollup2::l#1 )
  [20] scrollup2::line1#3 = phi( scrollup2/screen, scrollup2::@3/scrollup2::line1#1 )
  [20] scrollup2::line2#3 = phi( scrollup2/screen+$28, scrollup2::@3/scrollup2::line2#1 )
  to:scrollup2::@2
scrollup2::@2: scope:[scrollup2]  from scrollup2::@1 scrollup2::@2
  [21] scrollup2::c#2 = phi( scrollup2::@1/0, scrollup2::@2/scrollup2::c#1 )
  [21] scrollup2::line1#2 = phi( scrollup2::@1/scrollup2::line1#3, scrollup2::@2/scrollup2::line1#1 )
  [21] scrollup2::line2#2 = phi( scrollup2::@1/scrollup2::line2#3, scrollup2::@2/scrollup2::line2#1 )
  [22] *scrollup2::line1#2 = *scrollup2::line2#2
  [23] scrollup2::line1#1 = ++ scrollup2::line1#2
  [24] scrollup2::line2#1 = ++ scrollup2::line2#2
  [25] scrollup2::c#1 = ++ scrollup2::c#2
  [26] if(scrollup2::c#1!=$28) goto scrollup2::@2
  to:scrollup2::@3
scrollup2::@3: scope:[scrollup2]  from scrollup2::@2
  [27] scrollup2::l#1 = ++ scrollup2::l#4
  [28] if(scrollup2::l#1!=$18) goto scrollup2::@1
  to:scrollup2::@return
scrollup2::@return: scope:[scrollup2]  from scrollup2::@3
  [29] return 
  to:@return

void scrollup3()
scrollup3: scope:[scrollup3]  from main::@2
  [30] phi()
  to:scrollup3::@1
scrollup3::@1: scope:[scrollup3]  from scrollup3 scrollup3::@5
  [31] scrollup3::line#2 = phi( scrollup3/0, scrollup3::@5/scrollup3::line#1 )
  [32] if(scrollup3::line#2<(unsigned int)$28*$18) goto scrollup3::@2
  to:scrollup3::@return
scrollup3::@return: scope:[scrollup3]  from scrollup3::@1
  [33] return 
  to:@return
scrollup3::@2: scope:[scrollup3]  from scrollup3::@1
  [34] scrollup3::l2#4 = scrollup3::line#2
  to:scrollup3::@3
scrollup3::@3: scope:[scrollup3]  from scrollup3::@2 scrollup3::@4
  [35] scrollup3::l2#2 = phi( scrollup3::@2/scrollup3::l2#4, scrollup3::@4/scrollup3::l2#1 )
  [35] scrollup3::c#2 = phi( scrollup3::@2/0, scrollup3::@4/scrollup3::c#1 )
  [36] if(scrollup3::c#2<$28) goto scrollup3::@4
  to:scrollup3::@5
scrollup3::@5: scope:[scrollup3]  from scrollup3::@3
  [37] scrollup3::line#1 = scrollup3::line#2 + $28
  to:scrollup3::@1
scrollup3::@4: scope:[scrollup3]  from scrollup3::@3
  [38] scrollup3::$3 = screen+$28 + scrollup3::l2#2
  [39] scrollup3::$4 = screen + scrollup3::l2#2
  [40] *scrollup3::$4 = *scrollup3::$3
  [41] scrollup3::l2#1 = ++ scrollup3::l2#2
  [42] scrollup3::c#1 = ++ scrollup3::c#2
  to:scrollup3::@3


VARIABLE REGISTER WEIGHTS
void main()
void scrollup1()
unsigned int scrollup1::$4 // 1501.5
char *scrollup1::$5 // 1001.0
char *scrollup1::$6 // 2002.0
char scrollup1::c
char scrollup1::c#1 // 2002.0
char scrollup1::c#2 // 667.3333333333334
unsigned int scrollup1::line
unsigned int scrollup1::line#1 // 202.0
unsigned int scrollup1::line#2 // 144.88888888888889
void scrollup2()
char scrollup2::c
char scrollup2::c#1 // 1501.5
char scrollup2::c#2 // 500.5
char scrollup2::l
char scrollup2::l#1 // 151.5
char scrollup2::l#4 // 28.857142857142858
char *scrollup2::line1
char *scrollup2::line1#1 // 350.5
char *scrollup2::line1#2 // 1552.0
char *scrollup2::line1#3 // 202.0
char *scrollup2::line2
char *scrollup2::line2#1 // 420.59999999999997
char *scrollup2::line2#2 // 1034.6666666666667
char *scrollup2::line2#3 // 202.0
void scrollup3()
char *scrollup3::$3 // 1001.0
char *scrollup3::$4 // 2002.0
char scrollup3::c
char scrollup3::c#1 // 2002.0
char scrollup3::c#2 // 500.5
unsigned int scrollup3::l2
unsigned int scrollup3::l2#1 // 1001.0
unsigned int scrollup3::l2#2 // 821.0
unsigned int scrollup3::l2#4 // 202.0
unsigned int scrollup3::line
unsigned int scrollup3::line#1 // 202.0
unsigned int scrollup3::line#2 // 40.4

Initial phi equivalence classes
[ scrollup1::line#2 scrollup1::line#1 ]
[ scrollup1::c#2 scrollup1::c#1 ]
[ scrollup2::l#4 scrollup2::l#1 ]
[ scrollup2::line2#2 scrollup2::line2#3 scrollup2::line2#1 ]
[ scrollup2::line1#2 scrollup2::line1#3 scrollup2::line1#1 ]
[ scrollup2::c#2 scrollup2::c#1 ]
[ scrollup3::line#2 scrollup3::line#1 ]
[ scrollup3::c#2 scrollup3::c#1 ]
[ scrollup3::l2#2 scrollup3::l2#4 scrollup3::l2#1 ]
Added variable scrollup1::$4 to live range equivalence class [ scrollup1::$4 ]
Added variable scrollup1::$5 to live range equivalence class [ scrollup1::$5 ]
Added variable scrollup1::$6 to live range equivalence class [ scrollup1::$6 ]
Added variable scrollup3::$3 to live range equivalence class [ scrollup3::$3 ]
Added variable scrollup3::$4 to live range equivalence class [ scrollup3::$4 ]
Complete equivalence classes
[ scrollup1::line#2 scrollup1::line#1 ]
[ scrollup1::c#2 scrollup1::c#1 ]
[ scrollup2::l#4 scrollup2::l#1 ]
[ scrollup2::line2#2 scrollup2::line2#3 scrollup2::line2#1 ]
[ scrollup2::line1#2 scrollup2::line1#3 scrollup2::line1#1 ]
[ scrollup2::c#2 scrollup2::c#1 ]
[ scrollup3::line#2 scrollup3::line#1 ]
[ scrollup3::c#2 scrollup3::c#1 ]
[ scrollup3::l2#2 scrollup3::l2#4 scrollup3::l2#1 ]
[ scrollup1::$4 ]
[ scrollup1::$5 ]
[ scrollup1::$6 ]
[ scrollup3::$3 ]
[ scrollup3::$4 ]
Allocated zp[2]:2 [ scrollup1::line#2 scrollup1::line#1 ]
Allocated zp[1]:4 [ scrollup1::c#2 scrollup1::c#1 ]
Allocated zp[1]:5 [ scrollup2::l#4 scrollup2::l#1 ]
Allocated zp[2]:6 [ scrollup2::line2#2 scrollup2::line2#3 scrollup2::line2#1 ]
Allocated zp[2]:8 [ scrollup2::line1#2 scrollup2::line1#3 scrollup2::line1#1 ]
Allocated zp[1]:10 [ scrollup2::c#2 scrollup2::c#1 ]
Allocated zp[2]:11 [ scrollup3::line#2 scrollup3::line#1 ]
Allocated zp[1]:13 [ scrollup3::c#2 scrollup3::c#1 ]
Allocated zp[2]:14 [ scrollup3::l2#2 scrollup3::l2#4 scrollup3::l2#1 ]
Allocated zp[2]:16 [ scrollup1::$4 ]
Allocated zp[2]:18 [ scrollup1::$5 ]
Allocated zp[2]:20 [ scrollup1::$6 ]
Allocated zp[2]:22 [ scrollup3::$3 ]
Allocated zp[2]:24 [ scrollup3::$4 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] if(scrollup1::line#2<(unsigned int)$28*$18) goto scrollup1::@2 [ scrollup1::line#2 ] ( scrollup1:1 [ scrollup1::line#2 ] { }  ) always clobbers reg byte a 
Statement [13] scrollup1::line#1 = scrollup1::line#2 + $28 [ scrollup1::line#1 ] ( scrollup1:1 [ scrollup1::line#1 ] { }  ) always clobbers reg byte a 
Statement [14] scrollup1::$4 = scrollup1::line#2 + scrollup1::c#2 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$4 ] ( scrollup1:1 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ scrollup1::c#2 scrollup1::c#1 ]
Statement [15] scrollup1::$5 = screen+$28 + scrollup1::$4 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$4 scrollup1::$5 ] ( scrollup1:1 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$4 scrollup1::$5 ] { }  ) always clobbers reg byte a 
Statement [16] scrollup1::$6 = screen + scrollup1::$4 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$5 scrollup1::$6 ] ( scrollup1:1 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$5 scrollup1::$6 ] { }  ) always clobbers reg byte a 
Statement [17] *scrollup1::$6 = *scrollup1::$5 [ scrollup1::line#2 scrollup1::c#2 ] ( scrollup1:1 [ scrollup1::line#2 scrollup1::c#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:4 [ scrollup1::c#2 scrollup1::c#1 ]
Statement [22] *scrollup2::line1#2 = *scrollup2::line2#2 [ scrollup2::l#4 scrollup2::line2#2 scrollup2::line1#2 scrollup2::c#2 ] ( scrollup2:3 [ scrollup2::l#4 scrollup2::line2#2 scrollup2::line1#2 scrollup2::c#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ scrollup2::l#4 scrollup2::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ scrollup2::l#4 scrollup2::l#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ scrollup2::c#2 scrollup2::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:10 [ scrollup2::c#2 scrollup2::c#1 ]
Statement [32] if(scrollup3::line#2<(unsigned int)$28*$18) goto scrollup3::@2 [ scrollup3::line#2 ] ( scrollup3:5 [ scrollup3::line#2 ] { }  ) always clobbers reg byte a 
Statement [34] scrollup3::l2#4 = scrollup3::line#2 [ scrollup3::line#2 scrollup3::l2#4 ] ( scrollup3:5 [ scrollup3::line#2 scrollup3::l2#4 ] { }  ) always clobbers reg byte a 
Statement [37] scrollup3::line#1 = scrollup3::line#2 + $28 [ scrollup3::line#1 ] ( scrollup3:5 [ scrollup3::line#1 ] { }  ) always clobbers reg byte a 
Statement [38] scrollup3::$3 = screen+$28 + scrollup3::l2#2 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 scrollup3::$3 ] ( scrollup3:5 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 scrollup3::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ scrollup3::c#2 scrollup3::c#1 ]
Statement [39] scrollup3::$4 = screen + scrollup3::l2#2 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 scrollup3::$3 scrollup3::$4 ] ( scrollup3:5 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 scrollup3::$3 scrollup3::$4 ] { }  ) always clobbers reg byte a 
Statement [40] *scrollup3::$4 = *scrollup3::$3 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 ] ( scrollup3:5 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:13 [ scrollup3::c#2 scrollup3::c#1 ]
Statement [9] if(scrollup1::line#2<(unsigned int)$28*$18) goto scrollup1::@2 [ scrollup1::line#2 ] ( scrollup1:1 [ scrollup1::line#2 ] { }  ) always clobbers reg byte a 
Statement [13] scrollup1::line#1 = scrollup1::line#2 + $28 [ scrollup1::line#1 ] ( scrollup1:1 [ scrollup1::line#1 ] { }  ) always clobbers reg byte a 
Statement [14] scrollup1::$4 = scrollup1::line#2 + scrollup1::c#2 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$4 ] ( scrollup1:1 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$4 ] { }  ) always clobbers reg byte a 
Statement [15] scrollup1::$5 = screen+$28 + scrollup1::$4 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$4 scrollup1::$5 ] ( scrollup1:1 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$4 scrollup1::$5 ] { }  ) always clobbers reg byte a 
Statement [16] scrollup1::$6 = screen + scrollup1::$4 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$5 scrollup1::$6 ] ( scrollup1:1 [ scrollup1::line#2 scrollup1::c#2 scrollup1::$5 scrollup1::$6 ] { }  ) always clobbers reg byte a 
Statement [17] *scrollup1::$6 = *scrollup1::$5 [ scrollup1::line#2 scrollup1::c#2 ] ( scrollup1:1 [ scrollup1::line#2 scrollup1::c#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [22] *scrollup2::line1#2 = *scrollup2::line2#2 [ scrollup2::l#4 scrollup2::line2#2 scrollup2::line1#2 scrollup2::c#2 ] ( scrollup2:3 [ scrollup2::l#4 scrollup2::line2#2 scrollup2::line1#2 scrollup2::c#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [32] if(scrollup3::line#2<(unsigned int)$28*$18) goto scrollup3::@2 [ scrollup3::line#2 ] ( scrollup3:5 [ scrollup3::line#2 ] { }  ) always clobbers reg byte a 
Statement [34] scrollup3::l2#4 = scrollup3::line#2 [ scrollup3::line#2 scrollup3::l2#4 ] ( scrollup3:5 [ scrollup3::line#2 scrollup3::l2#4 ] { }  ) always clobbers reg byte a 
Statement [37] scrollup3::line#1 = scrollup3::line#2 + $28 [ scrollup3::line#1 ] ( scrollup3:5 [ scrollup3::line#1 ] { }  ) always clobbers reg byte a 
Statement [38] scrollup3::$3 = screen+$28 + scrollup3::l2#2 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 scrollup3::$3 ] ( scrollup3:5 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 scrollup3::$3 ] { }  ) always clobbers reg byte a 
Statement [39] scrollup3::$4 = screen + scrollup3::l2#2 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 scrollup3::$3 scrollup3::$4 ] ( scrollup3:5 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 scrollup3::$3 scrollup3::$4 ] { }  ) always clobbers reg byte a 
Statement [40] *scrollup3::$4 = *scrollup3::$3 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 ] ( scrollup3:5 [ scrollup3::line#2 scrollup3::c#2 scrollup3::l2#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ scrollup1::line#2 scrollup1::line#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ scrollup1::c#2 scrollup1::c#1 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ scrollup2::l#4 scrollup2::l#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[2]:6 [ scrollup2::line2#2 scrollup2::line2#3 scrollup2::line2#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ scrollup2::line1#2 scrollup2::line1#3 scrollup2::line1#1 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ scrollup2::c#2 scrollup2::c#1 ] : zp[1]:10 , reg byte x , 
Potential registers zp[2]:11 [ scrollup3::line#2 scrollup3::line#1 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ scrollup3::c#2 scrollup3::c#1 ] : zp[1]:13 , reg byte x , 
Potential registers zp[2]:14 [ scrollup3::l2#2 scrollup3::l2#4 scrollup3::l2#1 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ scrollup1::$4 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ scrollup1::$5 ] : zp[2]:18 , 
Potential registers zp[2]:20 [ scrollup1::$6 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ scrollup3::$3 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ scrollup3::$4 ] : zp[2]:24 , 

REGISTER UPLIFT SCOPES
Uplift Scope [scrollup3] 2,502.5: zp[1]:13 [ scrollup3::c#2 scrollup3::c#1 ] 2,024: zp[2]:14 [ scrollup3::l2#2 scrollup3::l2#4 scrollup3::l2#1 ] 2,002: zp[2]:24 [ scrollup3::$4 ] 1,001: zp[2]:22 [ scrollup3::$3 ] 242.4: zp[2]:11 [ scrollup3::line#2 scrollup3::line#1 ] 
Uplift Scope [scrollup1] 2,669.33: zp[1]:4 [ scrollup1::c#2 scrollup1::c#1 ] 2,002: zp[2]:20 [ scrollup1::$6 ] 1,501.5: zp[2]:16 [ scrollup1::$4 ] 1,001: zp[2]:18 [ scrollup1::$5 ] 346.89: zp[2]:2 [ scrollup1::line#2 scrollup1::line#1 ] 
Uplift Scope [scrollup2] 2,104.5: zp[2]:8 [ scrollup2::line1#2 scrollup2::line1#3 scrollup2::line1#1 ] 2,002: zp[1]:10 [ scrollup2::c#2 scrollup2::c#1 ] 1,657.27: zp[2]:6 [ scrollup2::line2#2 scrollup2::line2#3 scrollup2::line2#1 ] 180.36: zp[1]:5 [ scrollup2::l#4 scrollup2::l#1 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [scrollup3] best 26266 combination reg byte x [ scrollup3::c#2 scrollup3::c#1 ] zp[2]:14 [ scrollup3::l2#2 scrollup3::l2#4 scrollup3::l2#1 ] zp[2]:24 [ scrollup3::$4 ] zp[2]:22 [ scrollup3::$3 ] zp[2]:11 [ scrollup3::line#2 scrollup3::line#1 ] 
Uplifting [scrollup1] best 25266 combination reg byte x [ scrollup1::c#2 scrollup1::c#1 ] zp[2]:20 [ scrollup1::$6 ] zp[2]:16 [ scrollup1::$4 ] zp[2]:18 [ scrollup1::$5 ] zp[2]:2 [ scrollup1::line#2 scrollup1::line#1 ] 
Uplifting [scrollup2] best 24366 combination zp[2]:8 [ scrollup2::line1#2 scrollup2::line1#3 scrollup2::line1#1 ] reg byte x [ scrollup2::c#2 scrollup2::c#1 ] zp[2]:6 [ scrollup2::line2#2 scrollup2::line2#3 scrollup2::line2#1 ] zp[1]:5 [ scrollup2::l#4 scrollup2::l#1 ] 
Uplifting [main] best 24366 combination 
Uplifting [] best 24366 combination 
Attempting to uplift remaining variables inzp[1]:5 [ scrollup2::l#4 scrollup2::l#1 ]
Uplifting [scrollup2] best 24366 combination zp[1]:5 [ scrollup2::l#4 scrollup2::l#1 ] 
Coalescing zero page register [ zp[2]:16 [ scrollup1::$4 ] ] with [ zp[2]:20 [ scrollup1::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ scrollup2::line2#2 scrollup2::line2#3 scrollup2::line2#1 ] ] with [ zp[2]:2 [ scrollup1::line#2 scrollup1::line#1 ] ]
Coalescing zero page register [ zp[2]:11 [ scrollup3::line#2 scrollup3::line#1 ] ] with [ zp[2]:8 [ scrollup2::line1#2 scrollup2::line1#3 scrollup2::line1#1 ] ]
Coalescing zero page register [ zp[2]:16 [ scrollup1::$4 scrollup1::$6 ] ] with [ zp[2]:14 [ scrollup3::l2#2 scrollup3::l2#4 scrollup3::l2#1 ] ]
Coalescing zero page register [ zp[2]:22 [ scrollup3::$3 ] ] with [ zp[2]:18 [ scrollup1::$5 ] ]
Coalescing zero page register [ zp[2]:24 [ scrollup3::$4 ] ] with [ zp[2]:6 [ scrollup2::line2#2 scrollup2::line2#3 scrollup2::line2#1 scrollup1::line#2 scrollup1::line#1 ] ]
Allocated (was zp[1]:5) zp[1]:2 [ scrollup2::l#4 scrollup2::l#1 ]
Allocated (was zp[2]:11) zp[2]:3 [ scrollup3::line#2 scrollup3::line#1 scrollup2::line1#2 scrollup2::line1#3 scrollup2::line1#1 ]
Allocated (was zp[2]:16) zp[2]:5 [ scrollup1::$4 scrollup1::$6 scrollup3::l2#2 scrollup3::l2#4 scrollup3::l2#1 ]
Allocated (was zp[2]:22) zp[2]:7 [ scrollup3::$3 scrollup1::$5 ]
Allocated (was zp[2]:24) zp[2]:9 [ scrollup3::$4 scrollup2::line2#2 scrollup2::line2#3 scrollup2::line2#1 scrollup1::line#2 scrollup1::line#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests different ways of scrolling up the screen
  // Upstart
  // Commodore 64 PRG executable file
.file [name="test-scroll-up.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label screen = $400
.segment Code
  // main
main: {
    // [1] call scrollup1
    // [7] phi from main to scrollup1 [phi:main->scrollup1]
  scrollup1_from_main:
    jsr scrollup1
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call scrollup2
    // [19] phi from main::@1 to scrollup2 [phi:main::@1->scrollup2]
  scrollup2_from___b1:
    jsr scrollup2
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call scrollup3
    // [30] phi from main::@2 to scrollup3 [phi:main::@2->scrollup3]
  scrollup3_from___b2:
    jsr scrollup3
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // scrollup1
scrollup1: {
    .label __4 = 5
    .label line = 9
    .label __5 = 7
    .label __6 = 5
    // [8] phi from scrollup1 to scrollup1::@1 [phi:scrollup1->scrollup1::@1]
  __b1_from_scrollup1:
    // [8] phi scrollup1::line#2 = 0 [phi:scrollup1->scrollup1::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z line
    lda #>0
    sta.z line+1
    jmp __b1
    // scrollup1::@1
  __b1:
    // [9] if(scrollup1::line#2<(unsigned int)$28*$18) goto scrollup1::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z line+1
    cmp #>$28*$18
    bcc __b2_from___b1
    bne !+
    lda.z line
    cmp #<$28*$18
    bcc __b2_from___b1
  !:
    jmp __breturn
    // scrollup1::@return
  __breturn:
    // [10] return 
    rts
    // [11] phi from scrollup1::@1 to scrollup1::@2 [phi:scrollup1::@1->scrollup1::@2]
  __b2_from___b1:
    // [11] phi scrollup1::c#2 = 0 [phi:scrollup1::@1->scrollup1::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // scrollup1::@2
  __b2:
    // [12] if(scrollup1::c#2<$28) goto scrollup1::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b3
    jmp __b4
    // scrollup1::@4
  __b4:
    // [13] scrollup1::line#1 = scrollup1::line#2 + $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [8] phi from scrollup1::@4 to scrollup1::@1 [phi:scrollup1::@4->scrollup1::@1]
  __b1_from___b4:
    // [8] phi scrollup1::line#2 = scrollup1::line#1 [phi:scrollup1::@4->scrollup1::@1#0] -- register_copy 
    jmp __b1
    // scrollup1::@3
  __b3:
    // [14] scrollup1::$4 = scrollup1::line#2 + scrollup1::c#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z line
    sta.z __4
    lda #0
    adc.z line+1
    sta.z __4+1
    // [15] scrollup1::$5 = screen+$28 + scrollup1::$4 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __4
    clc
    adc #<screen+$28
    sta.z __5
    lda.z __4+1
    adc #>screen+$28
    sta.z __5+1
    // [16] scrollup1::$6 = screen + scrollup1::$4 -- pbuz1=pbuc1_plus_vwuz1 
    lda.z __6
    clc
    adc #<screen
    sta.z __6
    lda.z __6+1
    adc #>screen
    sta.z __6+1
    // [17] *scrollup1::$6 = *scrollup1::$5 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__5),y
    ldy #0
    sta (__6),y
    // [18] scrollup1::c#1 = ++ scrollup1::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [11] phi from scrollup1::@3 to scrollup1::@2 [phi:scrollup1::@3->scrollup1::@2]
  __b2_from___b3:
    // [11] phi scrollup1::c#2 = scrollup1::c#1 [phi:scrollup1::@3->scrollup1::@2#0] -- register_copy 
    jmp __b2
}
  // scrollup2
scrollup2: {
    .label line1 = 3
    .label line2 = 9
    .label l = 2
    // [20] phi from scrollup2 to scrollup2::@1 [phi:scrollup2->scrollup2::@1]
  __b1_from_scrollup2:
    // [20] phi scrollup2::l#4 = 0 [phi:scrollup2->scrollup2::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [20] phi scrollup2::line1#3 = screen [phi:scrollup2->scrollup2::@1#1] -- pbuz1=pbuc1 
    lda #<screen
    sta.z line1
    lda #>screen
    sta.z line1+1
    // [20] phi scrollup2::line2#3 = screen+$28 [phi:scrollup2->scrollup2::@1#2] -- pbuz1=pbuc1 
    lda #<screen+$28
    sta.z line2
    lda #>screen+$28
    sta.z line2+1
    jmp __b1
    // [20] phi from scrollup2::@3 to scrollup2::@1 [phi:scrollup2::@3->scrollup2::@1]
  __b1_from___b3:
    // [20] phi scrollup2::l#4 = scrollup2::l#1 [phi:scrollup2::@3->scrollup2::@1#0] -- register_copy 
    // [20] phi scrollup2::line1#3 = scrollup2::line1#1 [phi:scrollup2::@3->scrollup2::@1#1] -- register_copy 
    // [20] phi scrollup2::line2#3 = scrollup2::line2#1 [phi:scrollup2::@3->scrollup2::@1#2] -- register_copy 
    jmp __b1
    // scrollup2::@1
  __b1:
    // [21] phi from scrollup2::@1 to scrollup2::@2 [phi:scrollup2::@1->scrollup2::@2]
  __b2_from___b1:
    // [21] phi scrollup2::c#2 = 0 [phi:scrollup2::@1->scrollup2::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [21] phi scrollup2::line1#2 = scrollup2::line1#3 [phi:scrollup2::@1->scrollup2::@2#1] -- register_copy 
    // [21] phi scrollup2::line2#2 = scrollup2::line2#3 [phi:scrollup2::@1->scrollup2::@2#2] -- register_copy 
    jmp __b2
    // [21] phi from scrollup2::@2 to scrollup2::@2 [phi:scrollup2::@2->scrollup2::@2]
  __b2_from___b2:
    // [21] phi scrollup2::c#2 = scrollup2::c#1 [phi:scrollup2::@2->scrollup2::@2#0] -- register_copy 
    // [21] phi scrollup2::line1#2 = scrollup2::line1#1 [phi:scrollup2::@2->scrollup2::@2#1] -- register_copy 
    // [21] phi scrollup2::line2#2 = scrollup2::line2#1 [phi:scrollup2::@2->scrollup2::@2#2] -- register_copy 
    jmp __b2
    // scrollup2::@2
  __b2:
    // [22] *scrollup2::line1#2 = *scrollup2::line2#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (line2),y
    ldy #0
    sta (line1),y
    // [23] scrollup2::line1#1 = ++ scrollup2::line1#2 -- pbuz1=_inc_pbuz1 
    inc.z line1
    bne !+
    inc.z line1+1
  !:
    // [24] scrollup2::line2#1 = ++ scrollup2::line2#2 -- pbuz1=_inc_pbuz1 
    inc.z line2
    bne !+
    inc.z line2+1
  !:
    // [25] scrollup2::c#1 = ++ scrollup2::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [26] if(scrollup2::c#1!=$28) goto scrollup2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // scrollup2::@3
  __b3:
    // [27] scrollup2::l#1 = ++ scrollup2::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [28] if(scrollup2::l#1!=$18) goto scrollup2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$18
    cmp.z l
    bne __b1_from___b3
    jmp __breturn
    // scrollup2::@return
  __breturn:
    // [29] return 
    rts
}
  // scrollup3
scrollup3: {
    .label l2 = 5
    .label line = 3
    .label __3 = 7
    .label __4 = 9
    // [31] phi from scrollup3 to scrollup3::@1 [phi:scrollup3->scrollup3::@1]
  __b1_from_scrollup3:
    // [31] phi scrollup3::line#2 = 0 [phi:scrollup3->scrollup3::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z line
    lda #>0
    sta.z line+1
    jmp __b1
    // scrollup3::@1
  __b1:
    // [32] if(scrollup3::line#2<(unsigned int)$28*$18) goto scrollup3::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z line+1
    cmp #>$28*$18
    bcc __b2
    bne !+
    lda.z line
    cmp #<$28*$18
    bcc __b2
  !:
    jmp __breturn
    // scrollup3::@return
  __breturn:
    // [33] return 
    rts
    // scrollup3::@2
  __b2:
    // [34] scrollup3::l2#4 = scrollup3::line#2 -- vwuz1=vwuz2 
    lda.z line
    sta.z l2
    lda.z line+1
    sta.z l2+1
    // [35] phi from scrollup3::@2 to scrollup3::@3 [phi:scrollup3::@2->scrollup3::@3]
  __b3_from___b2:
    // [35] phi scrollup3::l2#2 = scrollup3::l2#4 [phi:scrollup3::@2->scrollup3::@3#0] -- register_copy 
    // [35] phi scrollup3::c#2 = 0 [phi:scrollup3::@2->scrollup3::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // scrollup3::@3
  __b3:
    // [36] if(scrollup3::c#2<$28) goto scrollup3::@4 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b4
    jmp __b5
    // scrollup3::@5
  __b5:
    // [37] scrollup3::line#1 = scrollup3::line#2 + $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [31] phi from scrollup3::@5 to scrollup3::@1 [phi:scrollup3::@5->scrollup3::@1]
  __b1_from___b5:
    // [31] phi scrollup3::line#2 = scrollup3::line#1 [phi:scrollup3::@5->scrollup3::@1#0] -- register_copy 
    jmp __b1
    // scrollup3::@4
  __b4:
    // [38] scrollup3::$3 = screen+$28 + scrollup3::l2#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z l2
    clc
    adc #<screen+$28
    sta.z __3
    lda.z l2+1
    adc #>screen+$28
    sta.z __3+1
    // [39] scrollup3::$4 = screen + scrollup3::l2#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z l2
    clc
    adc #<screen
    sta.z __4
    lda.z l2+1
    adc #>screen
    sta.z __4+1
    // [40] *scrollup3::$4 = *scrollup3::$3 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__3),y
    ldy #0
    sta (__4),y
    // [41] scrollup3::l2#1 = ++ scrollup3::l2#2 -- vwuz1=_inc_vwuz1 
    inc.z l2
    bne !+
    inc.z l2+1
  !:
    // [42] scrollup3::c#1 = ++ scrollup3::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [35] phi from scrollup3::@4 to scrollup3::@3 [phi:scrollup3::@4->scrollup3::@3]
  __b3_from___b4:
    // [35] phi scrollup3::l2#2 = scrollup3::l2#1 [phi:scrollup3::@4->scrollup3::@3#0] -- register_copy 
    // [35] phi scrollup3::c#2 = scrollup3::c#1 [phi:scrollup3::@4->scrollup3::@3#1] -- register_copy 
    jmp __b3
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from_main:
Removing instruction scrollup2_from___b1:
Removing instruction __b2_from___b1:
Removing instruction scrollup3_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction scrollup1_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1_from_scrollup1:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_scrollup2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_scrollup3:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b2_from___b1 to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
__constant char * const screen = (char *) 1024
void scrollup1()
unsigned int scrollup1::$4 // zp[2]:5 1501.5
char *scrollup1::$5 // zp[2]:7 1001.0
char *scrollup1::$6 // zp[2]:5 2002.0
char scrollup1::c
char scrollup1::c#1 // reg byte x 2002.0
char scrollup1::c#2 // reg byte x 667.3333333333334
unsigned int scrollup1::line
unsigned int scrollup1::line#1 // line zp[2]:9 202.0
unsigned int scrollup1::line#2 // line zp[2]:9 144.88888888888889
void scrollup2()
char scrollup2::c
char scrollup2::c#1 // reg byte x 1501.5
char scrollup2::c#2 // reg byte x 500.5
char scrollup2::l
char scrollup2::l#1 // l zp[1]:2 151.5
char scrollup2::l#4 // l zp[1]:2 28.857142857142858
char *scrollup2::line1
char *scrollup2::line1#1 // line1 zp[2]:3 350.5
char *scrollup2::line1#2 // line1 zp[2]:3 1552.0
char *scrollup2::line1#3 // line1 zp[2]:3 202.0
char *scrollup2::line2
char *scrollup2::line2#1 // line2 zp[2]:9 420.59999999999997
char *scrollup2::line2#2 // line2 zp[2]:9 1034.6666666666667
char *scrollup2::line2#3 // line2 zp[2]:9 202.0
void scrollup3()
char *scrollup3::$3 // zp[2]:7 1001.0
char *scrollup3::$4 // zp[2]:9 2002.0
char scrollup3::c
char scrollup3::c#1 // reg byte x 2002.0
char scrollup3::c#2 // reg byte x 500.5
unsigned int scrollup3::l2
unsigned int scrollup3::l2#1 // l2 zp[2]:5 1001.0
unsigned int scrollup3::l2#2 // l2 zp[2]:5 821.0
unsigned int scrollup3::l2#4 // l2 zp[2]:5 202.0
unsigned int scrollup3::line
unsigned int scrollup3::line#1 // line zp[2]:3 202.0
unsigned int scrollup3::line#2 // line zp[2]:3 40.4

reg byte x [ scrollup1::c#2 scrollup1::c#1 ]
zp[1]:2 [ scrollup2::l#4 scrollup2::l#1 ]
reg byte x [ scrollup2::c#2 scrollup2::c#1 ]
zp[2]:3 [ scrollup3::line#2 scrollup3::line#1 scrollup2::line1#2 scrollup2::line1#3 scrollup2::line1#1 ]
reg byte x [ scrollup3::c#2 scrollup3::c#1 ]
zp[2]:5 [ scrollup1::$4 scrollup1::$6 scrollup3::l2#2 scrollup3::l2#4 scrollup3::l2#1 ]
zp[2]:7 [ scrollup3::$3 scrollup1::$5 ]
zp[2]:9 [ scrollup3::$4 scrollup2::line2#2 scrollup2::line2#3 scrollup2::line2#1 scrollup1::line#2 scrollup1::line#1 ]


FINAL ASSEMBLER
Score: 21407

  // File Comments
// Tests different ways of scrolling up the screen
  // Upstart
  // Commodore 64 PRG executable file
.file [name="test-scroll-up.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label screen = $400
.segment Code
  // main
main: {
    // scrollup1()
    // [1] call scrollup1
    // [7] phi from main to scrollup1 [phi:main->scrollup1]
    jsr scrollup1
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // scrollup2()
    // [3] call scrollup2
    // [19] phi from main::@1 to scrollup2 [phi:main::@1->scrollup2]
    jsr scrollup2
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // scrollup3()
    // [5] call scrollup3
    // [30] phi from main::@2 to scrollup3 [phi:main::@2->scrollup3]
    jsr scrollup3
    // main::@return
    // }
    // [6] return 
    rts
}
  // scrollup1
scrollup1: {
    .label __4 = 5
    .label line = 9
    .label __5 = 7
    .label __6 = 5
    // [8] phi from scrollup1 to scrollup1::@1 [phi:scrollup1->scrollup1::@1]
    // [8] phi scrollup1::line#2 = 0 [phi:scrollup1->scrollup1::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z line
    sta.z line+1
    // scrollup1::@1
  __b1:
    // for (word line = 0; line < 40*24; line += 40)
    // [9] if(scrollup1::line#2<(unsigned int)$28*$18) goto scrollup1::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z line+1
    cmp #>$28*$18
    bcc __b4
    bne !+
    lda.z line
    cmp #<$28*$18
    bcc __b4
  !:
    // scrollup1::@return
    // }
    // [10] return 
    rts
    // [11] phi from scrollup1::@1 to scrollup1::@2 [phi:scrollup1::@1->scrollup1::@2]
  __b4:
    // [11] phi scrollup1::c#2 = 0 [phi:scrollup1::@1->scrollup1::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // scrollup1::@2
  __b2:
    // for (byte c=0; c<40; ++c)
    // [12] if(scrollup1::c#2<$28) goto scrollup1::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b3
    // scrollup1::@4
    // line += 40
    // [13] scrollup1::line#1 = scrollup1::line#2 + $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [8] phi from scrollup1::@4 to scrollup1::@1 [phi:scrollup1::@4->scrollup1::@1]
    // [8] phi scrollup1::line#2 = scrollup1::line#1 [phi:scrollup1::@4->scrollup1::@1#0] -- register_copy 
    jmp __b1
    // scrollup1::@3
  __b3:
    // line+c
    // [14] scrollup1::$4 = scrollup1::line#2 + scrollup1::c#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z line
    sta.z __4
    lda #0
    adc.z line+1
    sta.z __4+1
    // screen[line+c] = screen[line+c+40]
    // [15] scrollup1::$5 = screen+$28 + scrollup1::$4 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __4
    clc
    adc #<screen+$28
    sta.z __5
    lda.z __4+1
    adc #>screen+$28
    sta.z __5+1
    // [16] scrollup1::$6 = screen + scrollup1::$4 -- pbuz1=pbuc1_plus_vwuz1 
    lda.z __6
    clc
    adc #<screen
    sta.z __6
    lda.z __6+1
    adc #>screen
    sta.z __6+1
    // [17] *scrollup1::$6 = *scrollup1::$5 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__5),y
    sta (__6),y
    // for (byte c=0; c<40; ++c)
    // [18] scrollup1::c#1 = ++ scrollup1::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [11] phi from scrollup1::@3 to scrollup1::@2 [phi:scrollup1::@3->scrollup1::@2]
    // [11] phi scrollup1::c#2 = scrollup1::c#1 [phi:scrollup1::@3->scrollup1::@2#0] -- register_copy 
    jmp __b2
}
  // scrollup2
scrollup2: {
    .label line1 = 3
    .label line2 = 9
    .label l = 2
    // [20] phi from scrollup2 to scrollup2::@1 [phi:scrollup2->scrollup2::@1]
    // [20] phi scrollup2::l#4 = 0 [phi:scrollup2->scrollup2::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [20] phi scrollup2::line1#3 = screen [phi:scrollup2->scrollup2::@1#1] -- pbuz1=pbuc1 
    lda #<screen
    sta.z line1
    lda #>screen
    sta.z line1+1
    // [20] phi scrollup2::line2#3 = screen+$28 [phi:scrollup2->scrollup2::@1#2] -- pbuz1=pbuc1 
    lda #<screen+$28
    sta.z line2
    lda #>screen+$28
    sta.z line2+1
    // [20] phi from scrollup2::@3 to scrollup2::@1 [phi:scrollup2::@3->scrollup2::@1]
    // [20] phi scrollup2::l#4 = scrollup2::l#1 [phi:scrollup2::@3->scrollup2::@1#0] -- register_copy 
    // [20] phi scrollup2::line1#3 = scrollup2::line1#1 [phi:scrollup2::@3->scrollup2::@1#1] -- register_copy 
    // [20] phi scrollup2::line2#3 = scrollup2::line2#1 [phi:scrollup2::@3->scrollup2::@1#2] -- register_copy 
    // scrollup2::@1
  __b1:
    // [21] phi from scrollup2::@1 to scrollup2::@2 [phi:scrollup2::@1->scrollup2::@2]
    // [21] phi scrollup2::c#2 = 0 [phi:scrollup2::@1->scrollup2::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [21] phi scrollup2::line1#2 = scrollup2::line1#3 [phi:scrollup2::@1->scrollup2::@2#1] -- register_copy 
    // [21] phi scrollup2::line2#2 = scrollup2::line2#3 [phi:scrollup2::@1->scrollup2::@2#2] -- register_copy 
    // [21] phi from scrollup2::@2 to scrollup2::@2 [phi:scrollup2::@2->scrollup2::@2]
    // [21] phi scrollup2::c#2 = scrollup2::c#1 [phi:scrollup2::@2->scrollup2::@2#0] -- register_copy 
    // [21] phi scrollup2::line1#2 = scrollup2::line1#1 [phi:scrollup2::@2->scrollup2::@2#1] -- register_copy 
    // [21] phi scrollup2::line2#2 = scrollup2::line2#1 [phi:scrollup2::@2->scrollup2::@2#2] -- register_copy 
    // scrollup2::@2
  __b2:
    // *line1++ = *line2++
    // [22] *scrollup2::line1#2 = *scrollup2::line2#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (line2),y
    sta (line1),y
    // *line1++ = *line2++;
    // [23] scrollup2::line1#1 = ++ scrollup2::line1#2 -- pbuz1=_inc_pbuz1 
    inc.z line1
    bne !+
    inc.z line1+1
  !:
    // [24] scrollup2::line2#1 = ++ scrollup2::line2#2 -- pbuz1=_inc_pbuz1 
    inc.z line2
    bne !+
    inc.z line2+1
  !:
    // for (byte c: 0..39)
    // [25] scrollup2::c#1 = ++ scrollup2::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [26] if(scrollup2::c#1!=$28) goto scrollup2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // scrollup2::@3
    // for( byte l: 0..23 )
    // [27] scrollup2::l#1 = ++ scrollup2::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [28] if(scrollup2::l#1!=$18) goto scrollup2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$18
    cmp.z l
    bne __b1
    // scrollup2::@return
    // }
    // [29] return 
    rts
}
  // scrollup3
scrollup3: {
    .label l2 = 5
    .label line = 3
    .label __3 = 7
    .label __4 = 9
    // [31] phi from scrollup3 to scrollup3::@1 [phi:scrollup3->scrollup3::@1]
    // [31] phi scrollup3::line#2 = 0 [phi:scrollup3->scrollup3::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z line
    sta.z line+1
    // scrollup3::@1
  __b1:
    // for (word line = 0; line < 40*24; line += 40)
    // [32] if(scrollup3::line#2<(unsigned int)$28*$18) goto scrollup3::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z line+1
    cmp #>$28*$18
    bcc __b2
    bne !+
    lda.z line
    cmp #<$28*$18
    bcc __b2
  !:
    // scrollup3::@return
    // }
    // [33] return 
    rts
    // scrollup3::@2
  __b2:
    // [34] scrollup3::l2#4 = scrollup3::line#2 -- vwuz1=vwuz2 
    lda.z line
    sta.z l2
    lda.z line+1
    sta.z l2+1
    // [35] phi from scrollup3::@2 to scrollup3::@3 [phi:scrollup3::@2->scrollup3::@3]
    // [35] phi scrollup3::l2#2 = scrollup3::l2#4 [phi:scrollup3::@2->scrollup3::@3#0] -- register_copy 
    // [35] phi scrollup3::c#2 = 0 [phi:scrollup3::@2->scrollup3::@3#1] -- vbuxx=vbuc1 
    ldx #0
    // scrollup3::@3
  __b3:
    // for (byte c=0; c<40; ++c)
    // [36] if(scrollup3::c#2<$28) goto scrollup3::@4 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b4
    // scrollup3::@5
    // line += 40
    // [37] scrollup3::line#1 = scrollup3::line#2 + $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [31] phi from scrollup3::@5 to scrollup3::@1 [phi:scrollup3::@5->scrollup3::@1]
    // [31] phi scrollup3::line#2 = scrollup3::line#1 [phi:scrollup3::@5->scrollup3::@1#0] -- register_copy 
    jmp __b1
    // scrollup3::@4
  __b4:
    // screen[l2++] = screen[l2+40]
    // [38] scrollup3::$3 = screen+$28 + scrollup3::l2#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z l2
    clc
    adc #<screen+$28
    sta.z __3
    lda.z l2+1
    adc #>screen+$28
    sta.z __3+1
    // [39] scrollup3::$4 = screen + scrollup3::l2#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z l2
    clc
    adc #<screen
    sta.z __4
    lda.z l2+1
    adc #>screen
    sta.z __4+1
    // [40] *scrollup3::$4 = *scrollup3::$3 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__3),y
    sta (__4),y
    // screen[l2++] = screen[l2+40];
    // [41] scrollup3::l2#1 = ++ scrollup3::l2#2 -- vwuz1=_inc_vwuz1 
    inc.z l2
    bne !+
    inc.z l2+1
  !:
    // for (byte c=0; c<40; ++c)
    // [42] scrollup3::c#1 = ++ scrollup3::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [35] phi from scrollup3::@4 to scrollup3::@3 [phi:scrollup3::@4->scrollup3::@3]
    // [35] phi scrollup3::l2#2 = scrollup3::l2#1 [phi:scrollup3::@4->scrollup3::@3#0] -- register_copy 
    // [35] phi scrollup3::c#2 = scrollup3::c#1 [phi:scrollup3::@4->scrollup3::@3#1] -- register_copy 
    jmp __b3
}
  // File Data

