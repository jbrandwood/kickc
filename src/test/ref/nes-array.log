Setting inferred volatile on symbol affected by address-of (signed word~) main::$0 ← call foo (number) 1 &(signed word) main::y1 
Setting inferred volatile on symbol affected by address-of (signed word~) main::$1 ← call foo (number) 2 &(signed word) main::y2 
Fixing pointer increment (signed word*) main::SCREEN ← ++ (signed word*) main::SCREEN
Fixing pointer increment (signed word*) main::SCREEN ← ++ (signed word*) main::SCREEN
Fixing pointer array-indexing *((const signed word*) wow + (byte) foo::x)
Culled Empty Block (label) foo::@1
Culled Empty Block (label) @1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2

(signed word()) foo((byte) foo::x , (signed word*) foo::y)
foo: scope:[foo]  from main main::@1
  (signed word*) foo::y#2 ← phi( main/(signed word*) foo::y#0 main::@1/(signed word*) foo::y#1 )
  (byte) foo::x#2 ← phi( main/(byte) foo::x#0 main::@1/(byte) foo::x#1 )
  (byte~) foo::$1 ← (byte) foo::x#2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word~) foo::$0 ← *((const signed word*) wow + (byte~) foo::$1) + *((signed word*) foo::y#2)
  (signed word) foo::return#0 ← (signed word~) foo::$0
  to:foo::@return
foo::@return: scope:[foo]  from foo
  (signed word) foo::return#4 ← phi( foo/(signed word) foo::return#0 )
  (signed word) foo::return#1 ← (signed word) foo::return#4
  return 
  to:@return

(void()) main()
main: scope:[main]  from @2
  (signed word*) main::SCREEN#0 ← (signed word*)(number) $400
  (signed word) main::y1 ← (signed word) $1234
  (signed word) main::y2 ← (signed word) $1234
  (byte) foo::x#0 ← (number) 1
  (signed word*) foo::y#0 ← &(signed word) main::y1
  call foo 
  (signed word) foo::return#2 ← (signed word) foo::return#1
  to:main::@1
main::@1: scope:[main]  from main
  (signed word*) main::SCREEN#3 ← phi( main/(signed word*) main::SCREEN#0 )
  (signed word) foo::return#5 ← phi( main/(signed word) foo::return#2 )
  (signed word~) main::$0 ← (signed word) foo::return#5
  *((signed word*) main::SCREEN#3) ← (signed word~) main::$0
  (signed word*) main::SCREEN#1 ← (signed word*) main::SCREEN#3 + (const byte) SIZEOF_SIGNED_WORD
  (byte) foo::x#1 ← (number) 2
  (signed word*) foo::y#1 ← &(signed word) main::y2
  call foo 
  (signed word) foo::return#3 ← (signed word) foo::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed word*) main::SCREEN#4 ← phi( main::@1/(signed word*) main::SCREEN#1 )
  (signed word) foo::return#6 ← phi( main::@1/(signed word) foo::return#3 )
  (signed word~) main::$1 ← (signed word) foo::return#6
  *((signed word*) main::SCREEN#4) ← (signed word~) main::$1
  (signed word*) main::SCREEN#2 ← (signed word*) main::SCREEN#4 + (const byte) SIZEOF_SIGNED_WORD
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(signed word()) foo((byte) foo::x , (signed word*) foo::y)
(signed word~) foo::$0
(byte~) foo::$1
(label) foo::@return
(signed word) foo::return
(signed word) foo::return#0
(signed word) foo::return#1
(signed word) foo::return#2
(signed word) foo::return#3
(signed word) foo::return#4
(signed word) foo::return#5
(signed word) foo::return#6
(byte) foo::x
(byte) foo::x#0
(byte) foo::x#1
(byte) foo::x#2
(signed word*) foo::y
(signed word*) foo::y#0
(signed word*) foo::y#1
(signed word*) foo::y#2
(void()) main()
(signed word~) main::$0
(signed word~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(signed word*) main::SCREEN
(signed word*) main::SCREEN#0
(signed word*) main::SCREEN#1
(signed word*) main::SCREEN#2
(signed word*) main::SCREEN#3
(signed word*) main::SCREEN#4
(signed word) main::y1 loadstore
(signed word) main::y2 loadstore
(const signed word*) wow[(number) 4]  = { (signed word)(number) $cafe, (signed word)(number) $babe, (signed word) $1234, (signed word) $5678 }

Adding number conversion cast (unumber) 1 in (byte) foo::x#0 ← (number) 1
Adding number conversion cast (unumber) 2 in (byte) foo::x#1 ← (number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) foo::x#0 ← (unumber)(number) 1
Inlining cast (byte) foo::x#1 ← (unumber)(number) 2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $cafe
Simplifying constant integer cast $babe
Simplifying constant pointer cast (signed word*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias foo::return#0 = foo::$0 foo::return#4 foo::return#1 
Alias foo::return#2 = foo::return#5 
Alias main::SCREEN#0 = main::SCREEN#3 
Alias foo::return#3 = foo::return#6 
Alias main::SCREEN#1 = main::SCREEN#4 
Successful SSA optimization Pass2AliasElimination
Constant (const signed word*) main::SCREEN#0 = (signed word*) 1024
Constant (const byte) foo::x#0 = 1
Constant (const signed word*) foo::y#0 = &main::y1
Constant (const byte) foo::x#1 = 2
Constant (const signed word*) foo::y#1 = &main::y2
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [19] *((signed word*) main::SCREEN#1) ← (signed word~) main::$1  -- *(main::SCREEN#0 + SIZEOF_SIGNED_WORD)
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable (signed word*) main::SCREEN#2 and assignment [15] (signed word*) main::SCREEN#2 ← (signed word*) main::SCREEN#1 + (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (signed word*) main::SCREEN#1 and assignment [10] (signed word*) main::SCREEN#1 ← (const signed word*) main::SCREEN#0 + (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Rewriting multiplication to use shift [1] (byte~) foo::$1 ← (byte) foo::x#2 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) foo::x#0
Inlining constant with var siblings (const signed word*) foo::y#0
Inlining constant with var siblings (const byte) foo::x#1
Inlining constant with var siblings (const signed word*) foo::y#1
Constant inlined foo::y#0 = &(signed word) main::y1
Constant inlined foo::x#1 = (byte) 2
Constant inlined foo::y#1 = &(signed word) main::y2
Constant inlined foo::x#0 = (byte) 1
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN#0+SIZEOF_SIGNED_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to foo:7 foo:11 

Created 2 initial phi equivalence classes
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @3
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] (signed word) main::y1 ← (signed word) $1234
  [5] (signed word) main::y2 ← (signed word) $1234
  [6] call foo 
  [7] (signed word) foo::return#2 ← (signed word) foo::return#0
  to:main::@1
main::@1: scope:[main]  from main
  [8] (signed word~) main::$0 ← (signed word) foo::return#2
  [9] *((const signed word*) main::SCREEN#0) ← (signed word~) main::$0
  [10] call foo 
  [11] (signed word) foo::return#3 ← (signed word) foo::return#0
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] (signed word~) main::$1 ← (signed word) foo::return#3
  [13] *((const signed word*) main::SCREEN#0+(const byte) SIZEOF_SIGNED_WORD) ← (signed word~) main::$1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [14] return 
  to:@return

(signed word()) foo((byte) foo::x , (signed word*) foo::y)
foo: scope:[foo]  from main main::@1
  [15] (signed word*) foo::y#2 ← phi( main/&(signed word) main::y1 main::@1/&(signed word) main::y2 )
  [15] (byte) foo::x#2 ← phi( main/(byte) 1 main::@1/(byte) 2 )
  [16] (byte~) foo::$1 ← (byte) foo::x#2 << (byte) 1
  [17] (signed word) foo::return#0 ← *((const signed word*) wow + (byte~) foo::$1) + *((signed word*) foo::y#2)
  to:foo::@return
foo::@return: scope:[foo]  from foo
  [18] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(signed word()) foo((byte) foo::x , (signed word*) foo::y)
(byte~) foo::$1 202.0
(signed word) foo::return
(signed word) foo::return#0 30.75
(signed word) foo::return#2 22.0
(signed word) foo::return#3 22.0
(byte) foo::x
(byte) foo::x#2 101.0
(signed word*) foo::y
(signed word*) foo::y#2 50.5
(void()) main()
(signed word~) main::$0 22.0
(signed word~) main::$1 22.0
(signed word*) main::SCREEN
(signed word) main::y1 loadstore 110.0
(signed word) main::y2 loadstore 110.0

Initial phi equivalence classes
[ foo::x#2 ]
[ foo::y#2 ]
Added variable main::y1 to live range equivalence class [ main::y1 ]
Added variable main::y2 to live range equivalence class [ main::y2 ]
Added variable foo::return#2 to live range equivalence class [ foo::return#2 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable foo::return#3 to live range equivalence class [ foo::return#3 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable foo::$1 to live range equivalence class [ foo::$1 ]
Added variable foo::return#0 to live range equivalence class [ foo::return#0 ]
Complete equivalence classes
[ foo::x#2 ]
[ foo::y#2 ]
[ main::y1 ]
[ main::y2 ]
[ foo::return#2 ]
[ main::$0 ]
[ foo::return#3 ]
[ main::$1 ]
[ foo::$1 ]
[ foo::return#0 ]
Allocated zp[1]:2 [ foo::x#2 ]
Allocated zp[2]:3 [ foo::y#2 ]
Allocated zp[2]:5 [ main::y1 ]
Allocated zp[2]:7 [ main::y2 ]
Allocated zp[2]:9 [ foo::return#2 ]
Allocated zp[2]:11 [ main::$0 ]
Allocated zp[2]:13 [ foo::return#3 ]
Allocated zp[2]:15 [ main::$1 ]
Allocated zp[1]:17 [ foo::$1 ]
Allocated zp[2]:18 [ foo::return#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test a bit of array code from the NES forum
// https://forums.nesdev.com/viewtopic.php?f=2&t=18735
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label y1 = 5
    .label y2 = 7
    .label __0 = $b
    .label __1 = $f
    // [4] (signed word) main::y1 ← (signed word) $1234 -- vwsz1=vwsc1 
    lda #<$1234
    sta.z y1
    lda #>$1234
    sta.z y1+1
    // [5] (signed word) main::y2 ← (signed word) $1234 -- vwsz1=vwsc1 
    lda #<$1234
    sta.z y2
    lda #>$1234
    sta.z y2+1
    // [6] call foo 
    // [15] phi from main to foo [phi:main->foo]
  foo_from_main:
    // [15] phi (signed word*) foo::y#2 = &(signed word) main::y1 [phi:main->foo#0] -- pwsz1=pwsc1 
    lda #<y1
    sta.z foo.y
    lda #>y1
    sta.z foo.y+1
    // [15] phi (byte) foo::x#2 = (byte) 1 [phi:main->foo#1] -- vbuz1=vbuc1 
    lda #1
    sta.z foo.x
    jsr foo
    // [7] (signed word) foo::return#2 ← (signed word) foo::return#0 -- vwsz1=vwsz2 
    lda.z foo.return
    sta.z foo.return_1
    lda.z foo.return+1
    sta.z foo.return_1+1
    jmp __b1
    // main::@1
  __b1:
    // [8] (signed word~) main::$0 ← (signed word) foo::return#2 -- vwsz1=vwsz2 
    lda.z foo.return_1
    sta.z __0
    lda.z foo.return_1+1
    sta.z __0+1
    // [9] *((const signed word*) main::SCREEN#0) ← (signed word~) main::$0 -- _deref_pwsc1=vwsz1 
    lda.z __0
    sta SCREEN
    lda.z __0+1
    sta SCREEN+1
    // [10] call foo 
    // [15] phi from main::@1 to foo [phi:main::@1->foo]
  foo_from___b1:
    // [15] phi (signed word*) foo::y#2 = &(signed word) main::y2 [phi:main::@1->foo#0] -- pwsz1=pwsc1 
    lda #<y2
    sta.z foo.y
    lda #>y2
    sta.z foo.y+1
    // [15] phi (byte) foo::x#2 = (byte) 2 [phi:main::@1->foo#1] -- vbuz1=vbuc1 
    lda #2
    sta.z foo.x
    jsr foo
    // [11] (signed word) foo::return#3 ← (signed word) foo::return#0 -- vwsz1=vwsz2 
    lda.z foo.return
    sta.z foo.return_2
    lda.z foo.return+1
    sta.z foo.return_2+1
    jmp __b2
    // main::@2
  __b2:
    // [12] (signed word~) main::$1 ← (signed word) foo::return#3 -- vwsz1=vwsz2 
    lda.z foo.return_2
    sta.z __1
    lda.z foo.return_2+1
    sta.z __1+1
    // [13] *((const signed word*) main::SCREEN#0+(const byte) SIZEOF_SIGNED_WORD) ← (signed word~) main::$1 -- _deref_pwsc1=vwsz1 
    lda.z __1
    sta SCREEN+SIZEOF_SIGNED_WORD
    lda.z __1+1
    sta SCREEN+SIZEOF_SIGNED_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // foo
// foo(byte zp(2) x, signed word* zp(3) y)
foo: {
    .label __1 = $11
    .label return = $12
    .label return_1 = 9
    .label return_2 = $d
    .label x = 2
    .label y = 3
    // [16] (byte~) foo::$1 ← (byte) foo::x#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z x
    asl
    sta.z __1
    // [17] (signed word) foo::return#0 ← *((const signed word*) wow + (byte~) foo::$1) + *((signed word*) foo::y#2) -- vwsz1=pwsc1_derefidx_vbuz2_plus__deref_pwsz3 
    ldx.z __1
    clc
    ldy #0
    lda wow,x
    adc (y),y
    sta.z return
    iny
    lda wow+1,x
    adc (y),y
    sta.z return+1
    jmp __breturn
    // foo::@return
  __breturn:
    // [18] return 
    rts
}
  // File Data
  wow: .word $cafe, $babe, $1234, $5678

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (signed word) main::y1 ← (signed word) $1234 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] (signed word) main::y2 ← (signed word) $1234 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] (signed word) foo::return#2 ← (signed word) foo::return#0 [ foo::return#2 ] (  [ foo::return#2 ] { { foo::return#0 = foo::return#2 } }  ) always clobbers reg byte a 
Statement [8] (signed word~) main::$0 ← (signed word) foo::return#2 [ main::$0 ] (  [ main::$0 ] { { foo::return#2 = main::$0 } }  ) always clobbers reg byte a 
Statement [9] *((const signed word*) main::SCREEN#0) ← (signed word~) main::$0 [ ] (  [ ] { { foo::return#2 = main::$0 } }  ) always clobbers reg byte a 
Statement [11] (signed word) foo::return#3 ← (signed word) foo::return#0 [ foo::return#3 ] (  [ foo::return#3 ] { { foo::return#2 = main::$0 } { foo::return#0 = foo::return#3 } }  ) always clobbers reg byte a 
Statement [12] (signed word~) main::$1 ← (signed word) foo::return#3 [ main::$1 ] (  [ main::$1 ] { { foo::return#3 = main::$1 } }  ) always clobbers reg byte a 
Statement [13] *((const signed word*) main::SCREEN#0+(const byte) SIZEOF_SIGNED_WORD) ← (signed word~) main::$1 [ ] (  [ ] { { foo::return#3 = main::$1 } }  ) always clobbers reg byte a 
Statement [16] (byte~) foo::$1 ← (byte) foo::x#2 << (byte) 1 [ foo::y#2 foo::$1 ] (  [ foo::y#2 foo::$1 ] { }  ) always clobbers reg byte a 
Statement [17] (signed word) foo::return#0 ← *((const signed word*) wow + (byte~) foo::$1) + *((signed word*) foo::y#2) [ foo::return#0 ] (  [ foo::return#0 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ foo::x#2 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ foo::y#2 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ main::y1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ main::y2 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ foo::return#2 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ main::$0 ] : zp[2]:11 , 
Potential registers zp[2]:13 [ foo::return#3 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ main::$1 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ foo::$1 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:18 [ foo::return#0 ] : zp[2]:18 , 

REGISTER UPLIFT SCOPES
Uplift Scope [foo] 202: zp[1]:17 [ foo::$1 ] 101: zp[1]:2 [ foo::x#2 ] 50.5: zp[2]:3 [ foo::y#2 ] 30.75: zp[2]:18 [ foo::return#0 ] 22: zp[2]:9 [ foo::return#2 ] 22: zp[2]:13 [ foo::return#3 ] 
Uplift Scope [main] 110: zp[2]:5 [ main::y1 ] 110: zp[2]:7 [ main::y2 ] 22: zp[2]:11 [ main::$0 ] 22: zp[2]:15 [ main::$1 ] 
Uplift Scope [] 

Uplifting [foo] best 206 combination reg byte a [ foo::$1 ] reg byte x [ foo::x#2 ] zp[2]:3 [ foo::y#2 ] zp[2]:18 [ foo::return#0 ] zp[2]:9 [ foo::return#2 ] zp[2]:13 [ foo::return#3 ] 
Uplifting [main] best 206 combination zp[2]:5 [ main::y1 ] zp[2]:7 [ main::y2 ] zp[2]:11 [ main::$0 ] zp[2]:15 [ main::$1 ] 
Uplifting [] best 206 combination 
Coalescing zero page register [ zp[2]:3 [ foo::y#2 ] ] with [ zp[2]:18 [ foo::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ foo::return#2 ] ] with [ zp[2]:11 [ main::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ foo::return#3 ] ] with [ zp[2]:15 [ main::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:3 [ foo::y#2 foo::return#0 ] ] with [ zp[2]:9 [ foo::return#2 main::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:3 [ foo::y#2 foo::return#0 foo::return#2 main::$0 ] ] with [ zp[2]:13 [ foo::return#3 main::$1 ] ] - score: 1
Allocated (was zp[2]:3) zp[2]:2 [ foo::y#2 foo::return#0 foo::return#2 main::$0 foo::return#3 main::$1 ]
Allocated (was zp[2]:5) zp[2]:4 [ main::y1 ]
Allocated (was zp[2]:7) zp[2]:6 [ main::y2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a bit of array code from the NES forum
// https://forums.nesdev.com/viewtopic.php?f=2&t=18735
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label y1 = 4
    .label y2 = 6
    .label __0 = 2
    .label __1 = 2
    // [4] (signed word) main::y1 ← (signed word) $1234 -- vwsz1=vwsc1 
    lda #<$1234
    sta.z y1
    lda #>$1234
    sta.z y1+1
    // [5] (signed word) main::y2 ← (signed word) $1234 -- vwsz1=vwsc1 
    lda #<$1234
    sta.z y2
    lda #>$1234
    sta.z y2+1
    // [6] call foo 
    // [15] phi from main to foo [phi:main->foo]
  foo_from_main:
    // [15] phi (signed word*) foo::y#2 = &(signed word) main::y1 [phi:main->foo#0] -- pwsz1=pwsc1 
    lda #<y1
    sta.z foo.y
    lda #>y1
    sta.z foo.y+1
    // [15] phi (byte) foo::x#2 = (byte) 1 [phi:main->foo#1] -- vbuxx=vbuc1 
    ldx #1
    jsr foo
    // [7] (signed word) foo::return#2 ← (signed word) foo::return#0
    jmp __b1
    // main::@1
  __b1:
    // [8] (signed word~) main::$0 ← (signed word) foo::return#2
    // [9] *((const signed word*) main::SCREEN#0) ← (signed word~) main::$0 -- _deref_pwsc1=vwsz1 
    lda.z __0
    sta SCREEN
    lda.z __0+1
    sta SCREEN+1
    // [10] call foo 
    // [15] phi from main::@1 to foo [phi:main::@1->foo]
  foo_from___b1:
    // [15] phi (signed word*) foo::y#2 = &(signed word) main::y2 [phi:main::@1->foo#0] -- pwsz1=pwsc1 
    lda #<y2
    sta.z foo.y
    lda #>y2
    sta.z foo.y+1
    // [15] phi (byte) foo::x#2 = (byte) 2 [phi:main::@1->foo#1] -- vbuxx=vbuc1 
    ldx #2
    jsr foo
    // [11] (signed word) foo::return#3 ← (signed word) foo::return#0
    jmp __b2
    // main::@2
  __b2:
    // [12] (signed word~) main::$1 ← (signed word) foo::return#3
    // [13] *((const signed word*) main::SCREEN#0+(const byte) SIZEOF_SIGNED_WORD) ← (signed word~) main::$1 -- _deref_pwsc1=vwsz1 
    lda.z __1
    sta SCREEN+SIZEOF_SIGNED_WORD
    lda.z __1+1
    sta SCREEN+SIZEOF_SIGNED_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // foo
// foo(byte register(X) x, signed word* zp(2) y)
foo: {
    .label return = 2
    .label y = 2
    // [16] (byte~) foo::$1 ← (byte) foo::x#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [17] (signed word) foo::return#0 ← *((const signed word*) wow + (byte~) foo::$1) + *((signed word*) foo::y#2) -- vwsz1=pwsc1_derefidx_vbuaa_plus__deref_pwsz1 
    tax
    clc
    ldy #0
    lda wow,x
    adc (return),y
    pha
    iny
    lda wow+1,x
    adc (return),y
    sta.z return+1
    pla
    sta.z return
    jmp __breturn
    // foo::@return
  __breturn:
    // [18] return 
    rts
}
  // File Data
  wow: .word $cafe, $babe, $1234, $5678

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction foo_from_main:
Removing instruction __b1:
Removing instruction foo_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(signed word()) foo((byte) foo::x , (signed word*) foo::y)
(byte~) foo::$1 reg byte a 202.0
(label) foo::@return
(signed word) foo::return
(signed word) foo::return#0 return zp[2]:2 30.75
(signed word) foo::return#2 return zp[2]:2 22.0
(signed word) foo::return#3 return zp[2]:2 22.0
(byte) foo::x
(byte) foo::x#2 reg byte x 101.0
(signed word*) foo::y
(signed word*) foo::y#2 y zp[2]:2 50.5
(void()) main()
(signed word~) main::$0 zp[2]:2 22.0
(signed word~) main::$1 zp[2]:2 22.0
(label) main::@1
(label) main::@2
(label) main::@return
(signed word*) main::SCREEN
(const signed word*) main::SCREEN#0 SCREEN = (signed word*) 1024
(signed word) main::y1 loadstore zp[2]:4 110.0
(signed word) main::y2 loadstore zp[2]:6 110.0
(const signed word*) wow[(number) 4]  = { (signed word) $cafe, (signed word) $babe, (signed word) $1234, (signed word) $5678 }

reg byte x [ foo::x#2 ]
zp[2]:2 [ foo::y#2 foo::return#0 foo::return#2 main::$0 foo::return#3 main::$1 ]
zp[2]:4 [ main::y1 ]
zp[2]:6 [ main::y2 ]
reg byte a [ foo::$1 ]


FINAL ASSEMBLER
Score: 141

  // File Comments
// Test a bit of array code from the NES forum
// https://forums.nesdev.com/viewtopic.php?f=2&t=18735
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    .label y1 = 4
    .label y2 = 6
    .label __0 = 2
    .label __1 = 2
    // y1 = 0x1234
    // [4] (signed word) main::y1 ← (signed word) $1234 -- vwsz1=vwsc1 
    lda #<$1234
    sta.z y1
    lda #>$1234
    sta.z y1+1
    // y2 = 0x1234
    // [5] (signed word) main::y2 ← (signed word) $1234 -- vwsz1=vwsc1 
    lda #<$1234
    sta.z y2
    lda #>$1234
    sta.z y2+1
    // foo(1, &y1)
    // [6] call foo 
    // [15] phi from main to foo [phi:main->foo]
    // [15] phi (signed word*) foo::y#2 = &(signed word) main::y1 [phi:main->foo#0] -- pwsz1=pwsc1 
    lda #<y1
    sta.z foo.y
    lda #>y1
    sta.z foo.y+1
    // [15] phi (byte) foo::x#2 = (byte) 1 [phi:main->foo#1] -- vbuxx=vbuc1 
    ldx #1
    jsr foo
    // foo(1, &y1)
    // [7] (signed word) foo::return#2 ← (signed word) foo::return#0
    // main::@1
    // [8] (signed word~) main::$0 ← (signed word) foo::return#2
    // *SCREEN++ = foo(1, &y1)
    // [9] *((const signed word*) main::SCREEN#0) ← (signed word~) main::$0 -- _deref_pwsc1=vwsz1 
    lda.z __0
    sta SCREEN
    lda.z __0+1
    sta SCREEN+1
    // foo(2, &y2)
    // [10] call foo 
    // [15] phi from main::@1 to foo [phi:main::@1->foo]
    // [15] phi (signed word*) foo::y#2 = &(signed word) main::y2 [phi:main::@1->foo#0] -- pwsz1=pwsc1 
    lda #<y2
    sta.z foo.y
    lda #>y2
    sta.z foo.y+1
    // [15] phi (byte) foo::x#2 = (byte) 2 [phi:main::@1->foo#1] -- vbuxx=vbuc1 
    ldx #2
    jsr foo
    // foo(2, &y2)
    // [11] (signed word) foo::return#3 ← (signed word) foo::return#0
    // main::@2
    // [12] (signed word~) main::$1 ← (signed word) foo::return#3
    // *SCREEN++ = foo(2, &y2)
    // [13] *((const signed word*) main::SCREEN#0+(const byte) SIZEOF_SIGNED_WORD) ← (signed word~) main::$1 -- _deref_pwsc1=vwsz1 
    lda.z __1
    sta SCREEN+SIZEOF_SIGNED_WORD
    lda.z __1+1
    sta SCREEN+SIZEOF_SIGNED_WORD+1
    // main::@return
    // }
    // [14] return 
    rts
}
  // foo
// foo(byte register(X) x, signed word* zp(2) y)
foo: {
    .label return = 2
    .label y = 2
    // wow[x] + *y
    // [16] (byte~) foo::$1 ← (byte) foo::x#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [17] (signed word) foo::return#0 ← *((const signed word*) wow + (byte~) foo::$1) + *((signed word*) foo::y#2) -- vwsz1=pwsc1_derefidx_vbuaa_plus__deref_pwsz1 
    tax
    clc
    ldy #0
    lda wow,x
    adc (return),y
    pha
    iny
    lda wow+1,x
    adc (return),y
    sta.z return+1
    pla
    sta.z return
    // foo::@return
    // }
    // [18] return 
    rts
}
  // File Data
  wow: .word $cafe, $babe, $1234, $5678

