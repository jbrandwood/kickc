@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call test_8u 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call test_16u 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi()
  [11] call test_8s 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] phi()
  [13] call test_16s 
  to:main::@return
main::@return: scope:[main]  from main::@4
  [14] return 
  to:@return

(void()) test_16s()
test_16s: scope:[test_16s]  from main::@4
  [15] phi()
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@10
  [16] (byte) test_16s::i#10 ← phi( test_16s/(byte) 0 test_16s::@10/(byte) test_16s::i#1 )
  [17] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1
  [18] (signed word) test_16s::dividend#0 ← *((const signed word*) test_16s::dividends + (byte~) test_16s::$11)
  [19] (signed word) test_16s::divisor#0 ← *((const signed word*) test_16s::divisors + (byte~) test_16s::$11)
  [20] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
  [21] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
  [22] call div16s 
  [23] (signed word) div16s::return#2 ← (signed word) div16s::return#0
  to:test_16s::@2
test_16s::@2: scope:[test_16s]  from test_16s::@1
  [24] (signed word) test_16s::res#0 ← (signed word) div16s::return#2
  [25] (signed word) print_sint::w#1 ← (signed word) test_16s::dividend#0
  [26] (byte*) print_char_cursor#162 ← (byte*) print_line_cursor#1
  [27] call print_sint 
  to:test_16s::@3
test_16s::@3: scope:[test_16s]  from test_16s::@2
  [28] phi()
  [29] call print_str 
  to:test_16s::@4
test_16s::@4: scope:[test_16s]  from test_16s::@3
  [30] (signed word) print_sint::w#2 ← (signed word) test_16s::divisor#0
  [31] call print_sint 
  to:test_16s::@5
test_16s::@5: scope:[test_16s]  from test_16s::@4
  [32] phi()
  [33] call print_str 
  to:test_16s::@6
test_16s::@6: scope:[test_16s]  from test_16s::@5
  [34] (signed word) print_sint::w#3 ← (signed word) test_16s::res#0
  [35] call print_sint 
  to:test_16s::@7
test_16s::@7: scope:[test_16s]  from test_16s::@6
  [36] phi()
  [37] call print_str 
  to:test_16s::@8
test_16s::@8: scope:[test_16s]  from test_16s::@7
  [38] (signed word) print_sint::w#4 ← (signed word) rem16s#11
  [39] call print_sint 
  to:test_16s::@9
test_16s::@9: scope:[test_16s]  from test_16s::@8
  [40] phi()
  [41] call print_ln 
  to:test_16s::@10
test_16s::@10: scope:[test_16s]  from test_16s::@9
  [42] (byte) test_16s::i#1 ← ++ (byte) test_16s::i#10
  [43] if((byte) test_16s::i#1!=(byte) 6) goto test_16s::@1
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@10
  [44] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from test_16s::@9 test_16u::@9 test_8s::@9 test_8u::@9
  [45] (byte*) print_line_cursor#39 ← phi( test_16s::@9/(byte*) print_line_cursor#1 test_16u::@9/(byte*) print_line_cursor#1 test_8s::@9/(byte*) print_line_cursor#1 test_8u::@9/(byte*) print_line_cursor#41 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [46] (byte*) print_line_cursor#20 ← phi( print_ln/(byte*) print_line_cursor#39 print_ln::@1/(byte*) print_line_cursor#1 )
  [47] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte) $28
  [48] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#19) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [49] return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from test_16s::@2 test_16s::@4 test_16s::@6 test_16s::@8
  [50] (byte*) print_char_cursor#133 ← phi( test_16s::@2/(byte*) print_char_cursor#162 test_16s::@4/(byte*) print_char_cursor#19 test_16s::@6/(byte*) print_char_cursor#19 test_16s::@8/(byte*) print_char_cursor#19 )
  [50] (signed word) print_sint::w#10 ← phi( test_16s::@2/(signed word) print_sint::w#1 test_16s::@4/(signed word) print_sint::w#2 test_16s::@6/(signed word) print_sint::w#3 test_16s::@8/(signed word) print_sint::w#4 )
  [51] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [52] phi()
  [53] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [54] (signed word) print_sint::w#7 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#10 )
  [55] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7
  [56] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [57] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [58] phi()
  [59] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [60] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#10
  to:print_sint::@2

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  [61] (byte*) print_char_cursor#84 ← phi( print_schar::@1/(byte*) print_char_cursor#136 print_schar::@3/(byte*) print_char_cursor#136 print_sint::@1/(byte*) print_char_cursor#133 print_sint::@3/(byte*) print_char_cursor#133 print_str::@2/(byte*) print_char_cursor#19 print_uchar/(byte*) print_char_cursor#140 print_uchar::@1/(byte*) print_char_cursor#19 )
  [61] (byte) print_char::ch#7 ← phi( print_schar::@1/(byte) '-' print_schar::@3/(byte) ' ' print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#5 print_uchar::@1/(byte) print_char::ch#6 )
  [62] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#7
  [63] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#84
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [64] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2 test_16u::@2 test_16u::@4 test_16u::@6 test_16u::@8
  [65] (byte*) print_char_cursor#139 ← phi( print_sint::@2/(byte*) print_char_cursor#19 test_16u::@2/(byte*) print_char_cursor#171 test_16u::@4/(byte*) print_char_cursor#19 test_16u::@6/(byte*) print_char_cursor#19 test_16u::@8/(byte*) print_char_cursor#19 )
  [65] (word) print_uint::w#5 ← phi( print_sint::@2/(word) print_uint::w#0 test_16u::@2/(word) print_uint::w#1 test_16u::@4/(word) print_uint::w#2 test_16u::@6/(word) print_uint::w#3 test_16u::@8/(word) print_uint::w#4 )
  [66] (byte) print_uchar::b#1 ← > (word) print_uint::w#5
  [67] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [68] (byte) print_uchar::b#2 ← < (word) print_uint::w#5
  [69] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [70] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2 print_uint print_uint::@1 test_8u::@2 test_8u::@4 test_8u::@6 test_8u::@8
  [71] (byte*) print_char_cursor#140 ← phi( print_schar::@2/(byte*) print_char_cursor#19 print_uint/(byte*) print_char_cursor#139 print_uint::@1/(byte*) print_char_cursor#19 test_8u::@2/(byte*) print_char_cursor#142 test_8u::@4/(byte*) print_char_cursor#19 test_8u::@6/(byte*) print_char_cursor#19 test_8u::@8/(byte*) print_char_cursor#19 )
  [71] (byte) print_uchar::b#7 ← phi( print_schar::@2/(byte) print_uchar::b#0 print_uint/(byte) print_uchar::b#1 print_uint::@1/(byte) print_uchar::b#2 test_8u::@2/(byte) print_uchar::b#3 test_8u::@4/(byte) print_uchar::b#4 test_8u::@6/(byte) print_uchar::b#5 test_8u::@8/(byte) print_uchar::b#6 )
  [72] (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (byte) 4
  [73] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [74] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [75] (byte~) print_uchar::$2 ← (byte) print_uchar::b#7 & (byte) $f
  [76] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [77] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [78] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from test_16s::@3 test_16s::@5 test_16s::@7 test_16u::@3 test_16u::@5 test_16u::@7 test_8s::@3 test_8s::@5 test_8s::@7 test_8u::@3 test_8u::@5 test_8u::@7
  [79] (byte*) print_str::str#16 ← phi( test_16s::@3/(const byte*) str test_16s::@5/(const byte*) str1 test_16s::@7/(const byte*) str2 test_16u::@3/(const byte*) str test_16u::@5/(const byte*) str1 test_16u::@7/(const byte*) str2 test_8s::@3/(const byte*) str test_8s::@5/(const byte*) str1 test_8s::@7/(const byte*) str2 test_8u::@3/(const byte*) str test_8u::@5/(const byte*) str1 test_8u::@7/(const byte*) str2 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [80] (byte*) print_str::str#13 ← phi( print_str/(byte*) print_str::str#16 print_str::@3/(byte*) print_str::str#0 )
  [81] if((byte) 0!=*((byte*) print_str::str#13)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [82] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [83] (byte) print_char::ch#0 ← *((byte*) print_str::str#13)
  [84] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [85] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13
  to:print_str::@1

(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
div16s: scope:[div16s]  from test_16s::@1
  [86] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0
  [87] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0
  [88] call divr16s 
  [89] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
  to:div16s::@1
div16s::@1: scope:[div16s]  from div16s
  [90] (signed word) div16s::return#0 ← (signed word) divr16s::return#3
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@1
  [91] return 
  to:@return

(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
divr16s: scope:[divr16s]  from div16s
  [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1
  to:divr16s::@6
divr16s::@6: scope:[divr16s]  from divr16s
  [93] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  [94] (word) divr16s::dividendu#3 ← phi( divr16s::@1/(word) divr16s::dividendu#7 divr16s::@6/(word) divr16s::dividendu#8 )
  [94] (byte) divr16s::neg#3 ← phi( divr16s::@1/(byte) 1 divr16s::@6/(byte) 0 )
  [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3
  to:divr16s::@7
divr16s::@7: scope:[divr16s]  from divr16s::@2
  [96] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  [97] (byte) divr16s::neg#4 ← phi( divr16s::@3/(byte) divr16s::neg#2 divr16s::@7/(byte) divr16s::neg#3 )
  [97] (word) divr16s::divisoru#3 ← phi( divr16s::@3/(word) divr16s::divisoru#4 divr16s::@7/(word) divr16s::divisoru#5 )
  [98] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3
  [99] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3
  [100] call divr16u 
  [101] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  [102] (word) divr16s::resultu#0 ← (word) divr16u::return#3
  [103] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5
  to:divr16s::@8
divr16s::@8: scope:[divr16s]  from divr16s::@9
  [104] (signed word) rem16s#2 ← - (signed word)(word) rem16u#1
  [105] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  [106] (signed word) rem16s#11 ← phi( divr16s::@8/(signed word) rem16s#2 divr16s::@5/(signed word) rem16s#37 )
  [106] (signed word) divr16s::return#2 ← phi( divr16s::@8/(signed word) divr16s::return#1 divr16s::@5/(signed word) divr16s::return#7 )
  [107] return 
  to:@return
divr16s::@5: scope:[divr16s]  from divr16s::@9
  [108] (signed word) divr16s::return#7 ← (signed word)(word) divr16s::resultu#0
  [109] (signed word) rem16s#37 ← (signed word)(word) rem16u#1
  to:divr16s::@return
divr16s::@3: scope:[divr16s]  from divr16s::@2
  [110] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0
  [111] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1
  [112] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
  to:divr16s::@4
divr16s::@1: scope:[divr16s]  from divr16s
  [113] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0
  [114] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
  to:divr16s::@2

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u divr16s::@4
  [115] (word) divr16u::divisor#6 ← phi( div16u/(word) divr16u::divisor#0 divr16s::@4/(word) divr16u::divisor#1 )
  [115] (word) divr16u::dividend#5 ← phi( div16u/(word) divr16u::dividend#1 divr16s::@4/(word) divr16u::dividend#2 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [116] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [116] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [116] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [116] (word) divr16u::rem#5 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::rem#11 )
  [117] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [118] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [119] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [120] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [121] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [122] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [123] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [124] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [125] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [126] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [127] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [128] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [128] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [129] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [130] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [131] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [132] return 
  to:@return

(void()) test_8s()
test_8s: scope:[test_8s]  from main::@3
  [133] phi()
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@10
  [134] (byte) test_8s::i#10 ← phi( test_8s/(byte) 0 test_8s::@10/(byte) test_8s::i#1 )
  [135] (signed byte) test_8s::dividend#0 ← *((const signed byte*) test_8s::dividends + (byte) test_8s::i#10)
  [136] (signed byte) test_8s::divisor#0 ← *((const signed byte*) test_8s::divisors + (byte) test_8s::i#10)
  [137] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0
  [138] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0
  [139] call div8s 
  [140] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
  to:test_8s::@2
test_8s::@2: scope:[test_8s]  from test_8s::@1
  [141] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3
  [142] (signed byte) print_schar::b#1 ← (signed byte) test_8s::dividend#0
  [143] (byte*) print_char_cursor#166 ← (byte*) print_line_cursor#1
  [144] call print_schar 
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@2
  [145] phi()
  [146] call print_str 
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  [147] (signed byte) print_schar::b#2 ← (signed byte) test_8s::divisor#0
  [148] call print_schar 
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  [149] phi()
  [150] call print_str 
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  [151] (signed byte) print_schar::b#3 ← (signed byte) test_8s::res#0
  [152] call print_schar 
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  [153] phi()
  [154] call print_str 
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  [155] (signed byte) print_schar::b#4 ← (signed byte) rem8s#3
  [156] call print_schar 
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  [157] phi()
  [158] call print_ln 
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  [159] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10
  [160] if((byte) test_8s::i#1!=(byte) 6) goto test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@10
  [161] return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from test_8s::@2 test_8s::@4 test_8s::@6 test_8s::@8
  [162] (byte*) print_char_cursor#136 ← phi( test_8s::@2/(byte*) print_char_cursor#166 test_8s::@4/(byte*) print_char_cursor#19 test_8s::@6/(byte*) print_char_cursor#19 test_8s::@8/(byte*) print_char_cursor#19 )
  [162] (signed byte) print_schar::b#10 ← phi( test_8s::@2/(signed byte) print_schar::b#1 test_8s::@4/(signed byte) print_schar::b#2 test_8s::@6/(signed byte) print_schar::b#3 test_8s::@8/(signed byte) print_schar::b#4 )
  [163] if((signed byte) print_schar::b#10<(signed byte) 0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [164] phi()
  [165] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [166] (signed byte) print_schar::b#7 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@3/(signed byte) print_schar::b#10 )
  [167] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#7
  [168] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [169] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [170] phi()
  [171] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [172] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#10
  to:print_schar::@2

(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
div8s: scope:[div8s]  from test_8s::@1
  [173] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1
  to:div8s::@6
div8s::@6: scope:[div8s]  from div8s
  [174] (byte) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@6
  [175] (byte) div8s::dividendu#3 ← phi( div8s::@1/(byte) div8s::dividendu#7 div8s::@6/(byte) div8s::dividendu#8 )
  [175] (byte) div8s::neg#3 ← phi( div8s::@1/(byte) 1 div8s::@6/(byte) 0 )
  [176] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3
  to:div8s::@7
div8s::@7: scope:[div8s]  from div8s::@2
  [177] (byte) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@7
  [178] (byte) div8s::neg#4 ← phi( div8s::@3/(byte) div8s::neg#2 div8s::@7/(byte) div8s::neg#3 )
  [178] (byte) div8s::divisoru#3 ← phi( div8s::@3/(byte) div8s::divisoru#4 div8s::@7/(byte) div8s::divisoru#5 )
  [179] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3
  [180] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
  [181] call div8u 
  [182] (byte) div8u::return#2 ← (byte) div8u::return#0
  to:div8s::@9
div8s::@9: scope:[div8s]  from div8s::@4
  [183] (byte) div8s::resultu#0 ← (byte) div8u::return#2
  [184] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5
  to:div8s::@8
div8s::@8: scope:[div8s]  from div8s::@9
  [185] (signed byte) rem8s#2 ← - (signed byte)(byte) rem8u#17
  [186] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@5 div8s::@8
  [187] (signed byte) rem8s#3 ← phi( div8s::@8/(signed byte) rem8s#2 div8s::@5/(signed byte) rem8s#33 )
  [187] (signed byte) div8s::return#2 ← phi( div8s::@8/(signed byte) div8s::return#1 div8s::@5/(signed byte) div8s::return#7 )
  [188] return 
  to:@return
div8s::@5: scope:[div8s]  from div8s::@9
  [189] (signed byte) div8s::return#7 ← (signed byte)(byte) div8s::resultu#0
  [190] (signed byte) rem8s#33 ← (signed byte)(byte) rem8u#17
  to:div8s::@return
div8s::@3: scope:[div8s]  from div8s::@2
  [191] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0
  [192] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1
  [193] (byte) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisoru#1
  to:div8s::@4
div8s::@1: scope:[div8s]  from div8s
  [194] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0
  [195] (byte) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividendu#1
  to:div8s::@2

(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  [196] (byte) div8u::divisor#2 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 )
  [196] (byte) div8u::dividend#2 ← phi( div8s::@4/(byte) div8u::dividend#0 test_8u::@1/(byte) div8u::dividend#1 )
  [197] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2
  [198] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2
  [199] call divr8u 
  [200] (byte) divr8u::return#0 ← (byte) divr8u::return#1
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u
  [201] (byte) div8u::return#0 ← (byte) divr8u::return#0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@1
  [202] return 
  to:@return

(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
divr8u: scope:[divr8u]  from div8u
  [203] phi()
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  [204] (byte) divr8u::i#2 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::i#1 )
  [204] (byte) divr8u::quotient#3 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::return#1 )
  [204] (byte) divr8u::dividend#2 ← phi( divr8u/(byte) divr8u::dividend#0 divr8u::@3/(byte) divr8u::dividend#1 )
  [204] (byte) divr8u::rem#4 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::rem#10 )
  [205] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte) 1
  [206] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80
  [207] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2
  to:divr8u::@4
divr8u::@4: scope:[divr8u]  from divr8u::@1
  [208] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1
  to:divr8u::@2
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  [209] (byte) divr8u::rem#5 ← phi( divr8u::@1/(byte) divr8u::rem#1 divr8u::@4/(byte) divr8u::rem#2 )
  [210] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte) 1
  [211] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1
  [212] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3
  to:divr8u::@5
divr8u::@5: scope:[divr8u]  from divr8u::@2
  [213] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1
  [214] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0
  to:divr8u::@3
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  [215] (byte) divr8u::return#1 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  [215] (byte) divr8u::rem#10 ← phi( divr8u::@2/(byte) divr8u::rem#5 divr8u::@5/(byte) divr8u::rem#3 )
  [216] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2
  [217] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1
  to:divr8u::@6
divr8u::@6: scope:[divr8u]  from divr8u::@3
  [218] (byte) rem8u#17 ← (byte) divr8u::rem#10
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  [219] return 
  to:@return

(void()) test_16u()
test_16u: scope:[test_16u]  from main::@2
  [220] phi()
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@10
  [221] (byte) test_16u::i#10 ← phi( test_16u/(byte) 0 test_16u::@10/(byte) test_16u::i#1 )
  [222] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1
  [223] (word) test_16u::dividend#0 ← *((const word*) test_16u::dividends + (byte~) test_16u::$11)
  [224] (word) test_16u::divisor#0 ← *((const word*) test_16u::divisors + (byte~) test_16u::$11)
  [225] (word) div16u::dividend#0 ← (word) test_16u::dividend#0
  [226] (word) div16u::divisor#0 ← (word) test_16u::divisor#0
  [227] call div16u 
  [228] (word) div16u::return#2 ← (word) div16u::return#0
  to:test_16u::@2
test_16u::@2: scope:[test_16u]  from test_16u::@1
  [229] (word) test_16u::res#0 ← (word) div16u::return#2
  [230] (word) print_uint::w#1 ← (word) test_16u::dividend#0
  [231] (byte*) print_char_cursor#171 ← (byte*) print_line_cursor#1
  [232] call print_uint 
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@2
  [233] phi()
  [234] call print_str 
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  [235] (word) print_uint::w#2 ← (word) test_16u::divisor#0
  [236] call print_uint 
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  [237] phi()
  [238] call print_str 
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  [239] (word) print_uint::w#3 ← (word) test_16u::res#0
  [240] call print_uint 
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  [241] phi()
  [242] call print_str 
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  [243] (word) print_uint::w#4 ← (word) rem16u#1
  [244] call print_uint 
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  [245] phi()
  [246] call print_ln 
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  [247] (byte) test_16u::i#1 ← ++ (byte) test_16u::i#10
  [248] if((byte) test_16u::i#1!=(byte) 6) goto test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@10
  [249] return 
  to:@return

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from test_16u::@1
  [250] (word) divr16u::dividend#1 ← (word) div16u::dividend#0
  [251] (word) divr16u::divisor#0 ← (word) div16u::divisor#0
  [252] call divr16u 
  [253] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [254] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [255] return 
  to:@return

(void()) test_8u()
test_8u: scope:[test_8u]  from main::@1
  [256] phi()
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  [257] (byte*) print_line_cursor#41 ← phi( test_8u/(byte*) 1024 test_8u::@11/(byte*) print_line_cursor#1 )
  [257] (byte*) print_char_cursor#142 ← phi( test_8u/(byte*) 1024 test_8u::@11/(byte*) print_char_cursor#189 )
  [257] (byte) test_8u::i#10 ← phi( test_8u/(byte) 0 test_8u::@11/(byte) test_8u::i#1 )
  [258] (byte) test_8u::dividend#0 ← *((const byte*) test_8u::dividends + (byte) test_8u::i#10)
  [259] (byte) test_8u::divisor#0 ← *((const byte*) test_8u::divisors + (byte) test_8u::i#10)
  [260] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0
  [261] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0
  [262] call div8u 
  [263] (byte) div8u::return#3 ← (byte) div8u::return#0
  to:test_8u::@2
test_8u::@2: scope:[test_8u]  from test_8u::@1
  [264] (byte) test_8u::res#0 ← (byte) div8u::return#3
  [265] (byte) print_uchar::b#3 ← (byte) test_8u::dividend#0
  [266] call print_uchar 
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@2
  [267] phi()
  [268] call print_str 
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  [269] (byte) print_uchar::b#4 ← (byte) test_8u::divisor#0
  [270] call print_uchar 
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  [271] phi()
  [272] call print_str 
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  [273] (byte) print_uchar::b#5 ← (byte) test_8u::res#0
  [274] call print_uchar 
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  [275] phi()
  [276] call print_str 
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  [277] (byte) print_uchar::b#6 ← (byte) rem8u#17
  [278] call print_uchar 
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  [279] phi()
  [280] call print_ln 
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  [281] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10
  [282] if((byte) test_8u::i#1!=(byte) 6) goto test_8u::@11
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@10
  [283] return 
  to:@return
test_8u::@11: scope:[test_8u]  from test_8u::@10
  [284] (byte*) print_char_cursor#189 ← (byte*) print_line_cursor#1
  to:test_8u::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [285] phi()
  [286] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [287] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [288] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [289] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [290] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [291] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [292] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [293] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
