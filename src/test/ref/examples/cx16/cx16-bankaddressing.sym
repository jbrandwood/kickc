constant const byte BLUE = 6
byte CONIO_SCREEN_BANK
byte CONIO_SCREEN_BANK#10 CONIO_SCREEN_BANK zp[1]:38 578035.2716763006
byte* CONIO_SCREEN_TEXT
word CONIO_SCREEN_TEXT#101 CONIO_SCREEN_TEXT zp[2]:39 0.45701357466063347
constant byte* DIGITS[]  = "0123456789abcdef"z
constant byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_HEXADECIMAL_VALUES[]  = { $1000, $100, $10 }
constant byte* RADIX_HEXADECIMAL_VALUES_CHAR[]  = { $10 }
constant dword* RADIX_HEXADECIMAL_VALUES_LONG[]  = { $10000000, $1000000, $100000, $10000, $1000, $100, $10 }
constant byte SIZEOF_DWORD = 4
constant byte SIZEOF_POINTER = 2
constant byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
constant byte SIZEOF_WORD = 2
constant const byte VERA_ADDRSEL = 1
constant byte* const VERA_ADDRX_H = (byte*) 40738
constant byte* const VERA_ADDRX_L = (byte*) 40736
constant byte* const VERA_ADDRX_M = (byte*) 40737
constant byte* const VERA_CTRL = (byte*) 40741
constant byte* const VERA_DATA0 = (byte*) 40739
constant byte* const VERA_DATA1 = (byte*) 40740
constant byte* const VERA_DC_HSCALE = (byte*) 40746
constant byte* const VERA_DC_VSCALE = (byte*) 40747
constant const byte VERA_INC_1 = $10
constant byte* const VERA_L0_CONFIG = (byte*) 40749
constant byte* const VERA_L0_MAPBASE = (byte*) 40750
constant byte* const VERA_L0_TILEBASE = (byte*) 40751
constant byte* const VERA_L1_CONFIG = (byte*) 40756
constant byte* const VERA_L1_MAPBASE = (byte*) 40757
constant byte* const VERA_L1_TILEBASE = (byte*) 40758
constant const byte VERA_LAYER_CONFIG_256C = 8
constant const word* VERA_LAYER_HEIGHT[4]  = { $20, $40, $80, $100 }
constant const byte VERA_LAYER_HEIGHT_64 = $40
constant const byte VERA_LAYER_HEIGHT_MASK = $c0
constant const byte VERA_LAYER_TILEBASE_MASK = $fc
constant const word* VERA_LAYER_WIDTH[4]  = { $20, $40, $80, $100 }
constant const byte VERA_LAYER_WIDTH_128 = $20
constant const byte VERA_LAYER_WIDTH_MASK = $30
constant const byte WHITE = 1
void __start()
void clearline()
byte~ clearline::$1 reg byte a 2.000000000002E12
byte~ clearline::$2 reg byte a 2.000000000002E12
byte~ clearline::$5 reg byte a 2.000000000002E12
byte* clearline::addr
byte* clearline::addr#0 addr zp[2]:67 1.000000000001E12
word clearline::c
word clearline::c#1 c zp[2]:47 2.000000000000002E15
word clearline::c#2 c zp[2]:47 7.500000000000008E14
byte clearline::color
byte clearline::color#0 reg byte x 1.668333333333337E14
constant byte* conio_cursor_x[2]  = { 0, 0 }
constant byte* conio_cursor_y[2]  = { 0, 0 }
word conio_height loadstore zp[2]:25 6.369426817834395E7
constant word* conio_line_text[2]  = { 0, 0 }
byte conio_rowshift loadstore zp[1]:27 5.00500000000525E11
word conio_rowskip loadstore zp[2]:28 5.4945604395662085E11
volatile byte conio_screen_height loadstore zp[1]:21 6.703910616033521E8
byte conio_screen_layer loadstore zp[1]:22 1.4197107441037191E10
volatile byte conio_screen_width loadstore zp[1]:20 4.673832242990682E12
constant byte* conio_scroll_enable[2]  = { 1, 1 }
word conio_width loadstore zp[2]:23 628931.4716981133
void conio_x16_init()
constant byte* const conio_x16_init::BASIC_CURSOR_LINE = (byte*) 214
byte conio_x16_init::line
byte conio_x16_init::line#0 line zp[1]:2 2.1999999999999997
byte conio_x16_init::line#1 line zp[1]:2 22.0
byte conio_x16_init::line#3 line zp[1]:2 33.0
void cputc(byte cputc::c)
byte~ cputc::$15 reg byte a 2.00000002E8
word~ cputc::$16 zp[2]:47 2.00000002E8
byte~ cputc::$2 reg byte a 2.00000002E8
byte~ cputc::$4 reg byte a 2.00000002E8
byte~ cputc::$5 reg byte a 2.00000002E8
byte~ cputc::$6 reg byte a 2.00000002E8
byte cputc::c
byte cputc::c#0 c zp[1]:17 2.0000002E7
byte cputc::c#2 c zp[1]:17 20002.0
byte cputc::c#3 c zp[1]:17 1.2353529647058824E7
byte cputc::color
byte cputc::color#0 reg byte x 1.428571442857143E7
byte* cputc::conio_addr
byte* cputc::conio_addr#0 conio_addr zp[2]:53 1.00000001E8
byte* cputc::conio_addr#1 conio_addr zp[2]:53 6.0000000599999994E7
byte cputc::scroll_enable
byte cputc::scroll_enable#0 reg byte a 2.00000002E8
void cputln()
byte~ cputln::$2 reg byte a 2.000000002E9
byte~ cputln::$3 reg byte a 2.000000002E9
word cputln::temp
word cputln::temp#0 temp zp[2]:59 2.000000002E9
word cputln::temp#1 temp zp[2]:59 1.000000001E9
void cputs(const byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 1.0000001E7
const byte* cputs::s
const byte* cputs::s#0 s zp[2]:18 5000000.5
const byte* cputs::s#10 s zp[2]:18 1.5050002E7
const byte* cputs::s#11 s zp[2]:18 100001.0
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte~ gotoxy::$5 reg byte a 2.00000000002E11
word~ gotoxy::$6 zp[2]:43 2.00000000002E11
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:43 1.00000000001E11
byte gotoxy::x
byte gotoxy::y
byte gotoxy::y#1 reg byte x 22.0
byte gotoxy::y#2 reg byte x 2.0000000002E10
byte gotoxy::y#3 reg byte x 7.000000000466667E10
byte gotoxy::y#4 reg byte x 4.00000000004E10
void insertup()
byte~ insertup::$3 reg byte a 2.00000000000002E14
byte insertup::cy
byte insertup::cy#0 cy zp[1]:61 8.341666666666834E12
byte insertup::i
byte insertup::i#1 reg byte x 2.00000000000002E14
byte insertup::i#2 reg byte x 4.444444444444489E13
word insertup::line
word insertup::line#0 line zp[2]:63 2.00000000000002E14
byte* insertup::start
byte* insertup::start#0 start zp[2]:63 1.00000000000001E14
byte insertup::width
byte insertup::width#0 width zp[1]:62 9.100000000000182E12
void main()
dword~ main::$1 zp[4]:30 202.0
byte~ main::$10 reg byte a 202.0
byte~ main::$11 reg byte a 202.0
word~ main::$13 zp[2]:15 202.0
word~ main::$15 zp[2]:36 202.0
byte~ main::$3 reg byte a 202.0
byte~ main::$4 zp[1]:34 67.33333333333333
byte~ main::$5 reg byte a 202.0
byte~ main::$6 reg byte a 202.0
byte~ main::$8 reg byte a 202.0
byte~ main::$9 zp[1]:35 67.33333333333333
byte main::bankbeg
byte main::bankbeg#0 bankbeg zp[1]:34 8.08
byte main::bankend
byte main::bankend#0 bankend zp[1]:35 8.416666666666666
word main::beg
word main::beg#0 beg zp[2]:15 67.33333333333333
word main::beg#1 beg zp[2]:15 8.782608695652174
constant const word main::borderbeg = $a000
dword main::calcbeg
dword main::calcend
dword main::calcend#0 calcend zp[4]:30 19.423076923076923
word main::end
word main::end#0 end zp[2]:36 101.0
word main::end#1 end zp[2]:36 7.769230769230769
constant word main::inc = $123
dword main::num
dword main::num#1 num zp[4]:7 151.5
dword main::num#10 num zp[4]:7 8.244897959183673
constant byte* main::s[6]  = "cbeg="
constant byte* main::s1[7]  = ", add="
constant byte* main::s2[8]  = ", cend="
constant byte* main::s3[8]  = ", bbeg="
constant byte* main::s4[8]  = ", bend="
constant byte* main::s5[7]  = ", beg="
constant byte* main::s6[7]  = ", end="
constant byte* main::s7[2]  = "
"
dword main::src1
dword main::src1#1 src1 zp[4]:3 202.0
dword main::src1#10 src1 zp[4]:3 16.16
void memcpy_in_vram(byte memcpy_in_vram::dest_bank , void* memcpy_in_vram::dest , byte memcpy_in_vram::dest_increment , byte memcpy_in_vram::src_bank , void* memcpy_in_vram::src , byte memcpy_in_vram::src_increment , word memcpy_in_vram::num)
byte~ memcpy_in_vram::$0 reg byte a 2.000000000000002E15
byte~ memcpy_in_vram::$1 reg byte a 2.000000000000002E15
byte~ memcpy_in_vram::$3 reg byte a 2.000000000000002E15
byte~ memcpy_in_vram::$4 reg byte a 2.000000000000002E15
void* memcpy_in_vram::dest
void* memcpy_in_vram::dest#0 dest zp[2]:63 1.909090909090912E14
byte memcpy_in_vram::dest_bank
byte memcpy_in_vram::dest_increment
word memcpy_in_vram::i
word memcpy_in_vram::i#1 i zp[2]:47 2.0E19
word memcpy_in_vram::i#2 i zp[2]:47 1.0E19
word memcpy_in_vram::num
word memcpy_in_vram::num#0 num zp[2]:65 5.8824117647058829E17
void* memcpy_in_vram::src
byte* memcpy_in_vram::src#0 src zp[2]:67 1.6666666666666834E13
byte memcpy_in_vram::src_bank
byte memcpy_in_vram::src_increment
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 reg byte a 2002.0
byte printf_number_buffer::buffer_sign#1 reg byte a 2002.0
byte printf_number_buffer::buffer_sign#10 reg byte a 11502.5
byte printf_number_buffer::buffer_sign#2 reg byte a 2002.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
struct printf_format_number printf_uchar::format
byte printf_uchar::format_justify_left
byte printf_uchar::format_min_length
byte printf_uchar::format_radix
byte printf_uchar::format_sign_always
byte printf_uchar::format_upper_case
byte printf_uchar::format_zero_padding
byte printf_uchar::uvalue
byte printf_uchar::uvalue#0 reg byte x 202.0
byte printf_uchar::uvalue#1 reg byte x 202.0
byte printf_uchar::uvalue#2 reg byte x 601.5
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_zero_padding
word printf_uint::uvalue
word printf_uint::uvalue#0 uvalue zp[2]:15 202.0
word printf_uint::uvalue#1 uvalue zp[2]:15 202.0
word printf_uint::uvalue#2 uvalue zp[2]:15 601.5
void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
struct printf_format_number printf_ulong::format
byte printf_ulong::format_justify_left
byte printf_ulong::format_min_length
byte printf_ulong::format_radix
byte printf_ulong::format_sign_always
byte printf_ulong::format_upper_case
byte printf_ulong::format_zero_padding
dword printf_ulong::uvalue
dword printf_ulong::uvalue#0 uvalue zp[4]:11 202.0
dword printf_ulong::uvalue#1 uvalue zp[4]:11 202.0
dword printf_ulong::uvalue#2 uvalue zp[4]:11 202.0
dword printf_ulong::uvalue#3 uvalue zp[4]:11 652.0
void screenlayer(byte screenlayer::layer)
word~ screenlayer::$2 zp[2]:41 202.0
byte~ screenlayer::$3 reg byte a 202.0
word~ screenlayer::$4 zp[2]:43 202.0
word~ screenlayer::$5 zp[2]:55 202.0
byte screenlayer::layer
constant byte screenlayer::layer#0 layer = 1
byte~ screenlayer::vera_layer_get_height1_$0 reg byte a 202.0
byte~ screenlayer::vera_layer_get_height1_$1 reg byte a 202.0
byte~ screenlayer::vera_layer_get_height1_$2 reg byte a 202.0
byte~ screenlayer::vera_layer_get_height1_$3 reg byte a 202.0
byte* screenlayer::vera_layer_get_height1_config
byte* screenlayer::vera_layer_get_height1_config#0 vera_layer_get_height1_config zp[2]:45 202.0
byte screenlayer::vera_layer_get_height1_layer
byte screenlayer::vera_layer_get_height1_layer#0 reg byte a 202.0
word screenlayer::vera_layer_get_height1_return
word screenlayer::vera_layer_get_height1_return#0 vera_layer_get_height1_return zp[2]:55 202.0
word screenlayer::vera_layer_get_height1_return#1 vera_layer_get_height1_return zp[2]:55 202.0
byte~ screenlayer::vera_layer_get_width1_$0 reg byte a 202.0
byte~ screenlayer::vera_layer_get_width1_$1 reg byte a 202.0
byte~ screenlayer::vera_layer_get_width1_$2 reg byte a 202.0
byte~ screenlayer::vera_layer_get_width1_$3 reg byte a 202.0
byte* screenlayer::vera_layer_get_width1_config
byte* screenlayer::vera_layer_get_width1_config#0 vera_layer_get_width1_config zp[2]:57 202.0
byte screenlayer::vera_layer_get_width1_layer
byte screenlayer::vera_layer_get_width1_layer#0 reg byte a 202.0
word screenlayer::vera_layer_get_width1_return
word screenlayer::vera_layer_get_width1_return#0 vera_layer_get_width1_return zp[2]:41 202.0
word screenlayer::vera_layer_get_width1_return#1 vera_layer_get_width1_return zp[2]:41 202.0
void screensize(byte* screensize::x , byte* screensize::y)
byte~ screensize::$1 reg byte a 202.0
byte~ screensize::$3 reg byte a 202.0
byte screensize::hscale
byte screensize::hscale#0 reg byte a 202.0
byte screensize::vscale
byte screensize::vscale#0 reg byte a 202.0
byte* screensize::x
constant byte* screensize::x#0 x = &conio_screen_width
byte* screensize::y
constant byte* screensize::y#0 y = &conio_screen_height
void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
byte* uctoa::buffer
byte* uctoa::buffer#11 buffer zp[2]:18 335000.50000000006
byte* uctoa::buffer#14 buffer zp[2]:18 1500001.5
byte* uctoa::buffer#3 buffer zp[2]:18 20002.0
byte* uctoa::buffer#4 buffer zp[2]:18 2000002.0
byte uctoa::digit
byte uctoa::digit#1 digit zp[1]:17 2000002.0
byte uctoa::digit#2 digit zp[1]:17 307692.6153846154
byte uctoa::digit_value
byte uctoa::digit_value#0 digit_value zp[1]:61 600000.6000000001
byte* uctoa::digit_values
byte uctoa::max_digits
byte uctoa::radix
byte uctoa::started
byte uctoa::started#2 started zp[1]:34 600000.6000000001
byte uctoa::started#4 started zp[1]:34 1000001.0
byte uctoa::value
byte uctoa::value#0 reg byte x 1000001.0
byte uctoa::value#1 reg byte x 5501.0
byte uctoa::value#2 reg byte x 670001.0000000001
byte uctoa::value#6 reg byte x 1500001.5
byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
byte* uctoa_append::buffer
byte* uctoa_append::buffer#0 buffer zp[2]:18 1375000.25
byte uctoa_append::digit
byte uctoa_append::digit#1 reg byte y 1.0000000001E10
byte uctoa_append::digit#2 reg byte y 1.00050000015E10
byte uctoa_append::return
byte uctoa_append::return#0 reg byte x 2000002.0
byte uctoa_append::sub
byte uctoa_append::sub#0 sub zp[1]:61 3.3335000005E9
byte uctoa_append::value
byte uctoa_append::value#0 reg byte x 3666667.333333333
byte uctoa_append::value#1 reg byte x 2.0000000002E10
byte uctoa_append::value#2 reg byte x 5.001833334166666E9
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
byte~ ultoa::$10 reg byte a 2000002.0
byte~ ultoa::$11 reg byte a 20002.0
byte* ultoa::buffer
byte* ultoa::buffer#11 buffer zp[2]:18 287143.2857142857
byte* ultoa::buffer#14 buffer zp[2]:18 1500001.5
byte* ultoa::buffer#3 buffer zp[2]:18 20002.0
byte* ultoa::buffer#4 buffer zp[2]:18 2000002.0
byte ultoa::digit
byte ultoa::digit#1 digit zp[1]:17 2000002.0
byte ultoa::digit#2 digit zp[1]:17 285714.5714285714
dword ultoa::digit_value
dword ultoa::digit_value#0 digit_value zp[4]:49 600000.6000000001
dword* ultoa::digit_values
byte ultoa::max_digits
byte ultoa::radix
byte ultoa::started
byte ultoa::started#2 reg byte x 500000.5
byte ultoa::started#4 reg byte x 1000001.0
dword ultoa::value
dword ultoa::value#0 value zp[4]:11 1000001.0
dword ultoa::value#1 value zp[4]:11 5501.0
dword ultoa::value#2 value zp[4]:11 572857.857142857
dword ultoa::value#6 value zp[4]:11 1500001.5
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0 buffer zp[2]:18 1375000.25
byte ultoa_append::digit
byte ultoa_append::digit#1 reg byte x 1.0000000001E10
byte ultoa_append::digit#2 reg byte x 1.00050000015E10
dword ultoa_append::return
dword ultoa_append::return#0 return zp[4]:11 2000002.0
dword ultoa_append::sub
dword ultoa_append::sub#0 sub zp[4]:49 3.3335000005E9
dword ultoa_append::value
dword ultoa_append::value#0 value zp[4]:11 3666667.333333333
dword ultoa_append::value#1 value zp[4]:11 2.0000000002E10
dword ultoa_append::value#2 value zp[4]:11 5.001833334166666E9
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 2000002.0
byte~ utoa::$11 reg byte x 20002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:18 287143.2857142857
byte* utoa::buffer#14 buffer zp[2]:18 1500001.5
byte* utoa::buffer#3 buffer zp[2]:18 20002.0
byte* utoa::buffer#4 buffer zp[2]:18 2000002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:17 2000002.0
byte utoa::digit#2 digit zp[1]:17 285714.5714285714
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:53 600000.6000000001
word* utoa::digit_values
byte utoa::max_digits
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 500000.5
byte utoa::started#4 reg byte x 1000001.0
word utoa::value
word utoa::value#0 value zp[2]:15 1000001.0
word utoa::value#1 value zp[2]:15 5501.0
word utoa::value#2 value zp[2]:15 572857.857142857
word utoa::value#6 value zp[2]:15 1500001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:18 1375000.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.0000000001E10
byte utoa_append::digit#2 reg byte x 1.00050000015E10
word utoa_append::return
word utoa_append::return#0 return zp[2]:15 2000002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:53 3.3335000005E9
word utoa_append::value
word utoa_append::value#0 value zp[2]:15 3666667.333333333
word utoa_append::value#1 value zp[2]:15 2.0000000002E10
word utoa_append::value#2 value zp[2]:15 5.001833334166666E9
constant byte* vera_layer_backcolor[2]  = { BLUE, BLUE }
constant byte** vera_layer_config[2]  = { VERA_L0_CONFIG, VERA_L1_CONFIG }
byte vera_layer_get_color(byte vera_layer_get_color::layer)
byte~ vera_layer_get_color::$0 reg byte a 2.0000000000002E13
byte~ vera_layer_get_color::$1 reg byte a 2.0000000000002E13
byte~ vera_layer_get_color::$3 reg byte a 2.0000000000002E13
byte* vera_layer_get_color::addr
byte* vera_layer_get_color::addr#0 addr zp[2]:59 2.0000000000002E13
byte vera_layer_get_color::layer
byte vera_layer_get_color::layer#0 reg byte x 2.00000002E8
byte vera_layer_get_color::layer#1 reg byte x 2.000000000002E12
byte vera_layer_get_color::layer#2 reg byte x 6.833350000000999E12
byte vera_layer_get_color::return
byte vera_layer_get_color::return#0 reg byte a 2.0000000000002E13
byte vera_layer_get_color::return#1 reg byte a 2.0000000000002E13
byte vera_layer_get_color::return#2 reg byte a 5.250025000001E12
byte vera_layer_get_color::return#3 reg byte a 2.00000002E8
byte vera_layer_get_color::return#4 reg byte a 2.000000000002E12
byte vera_layer_get_mapbase_bank(byte vera_layer_get_mapbase_bank::layer)
byte vera_layer_get_mapbase_bank::layer
byte vera_layer_get_mapbase_bank::layer#0 reg byte x 1102.0
byte vera_layer_get_mapbase_bank::return
byte vera_layer_get_mapbase_bank::return#0 reg byte a 367.33333333333337
byte vera_layer_get_mapbase_bank::return#2 reg byte a 202.0
word vera_layer_get_mapbase_offset(byte vera_layer_get_mapbase_offset::layer)
byte~ vera_layer_get_mapbase_offset::$0 reg byte a 2002.0
byte vera_layer_get_mapbase_offset::layer
byte vera_layer_get_mapbase_offset::layer#0 reg byte a 1102.0
word vera_layer_get_mapbase_offset::return
word vera_layer_get_mapbase_offset::return#0 return zp[2]:57 367.33333333333337
word vera_layer_get_mapbase_offset::return#2 return zp[2]:57 202.0
byte vera_layer_get_rowshift(byte vera_layer_get_rowshift::layer)
byte vera_layer_get_rowshift::layer
byte vera_layer_get_rowshift::layer#0 reg byte x 1102.0
byte vera_layer_get_rowshift::return
byte vera_layer_get_rowshift::return#0 reg byte a 367.33333333333337
byte vera_layer_get_rowshift::return#2 reg byte a 202.0
word vera_layer_get_rowskip(byte vera_layer_get_rowskip::layer)
byte~ vera_layer_get_rowskip::$0 reg byte a 2002.0
byte vera_layer_get_rowskip::layer
byte vera_layer_get_rowskip::layer#0 reg byte a 1102.0
word vera_layer_get_rowskip::return
word vera_layer_get_rowskip::return#0 return zp[2]:43 367.33333333333337
word vera_layer_get_rowskip::return#2 return zp[2]:43 202.0
constant byte** vera_layer_mapbase[2]  = { VERA_L0_MAPBASE, VERA_L1_MAPBASE }
void vera_layer_mode_text(byte vera_layer_mode_text::layer , dword vera_layer_mode_text::mapbase_address , dword vera_layer_mode_text::tilebase_address , word vera_layer_mode_text::mapwidth , word vera_layer_mode_text::mapheight , byte vera_layer_mode_text::tilewidth , byte vera_layer_mode_text::tileheight , word vera_layer_mode_text::color_mode)
word vera_layer_mode_text::color_mode
byte vera_layer_mode_text::layer
constant byte vera_layer_mode_text::layer#0 layer = 1
dword vera_layer_mode_text::mapbase_address
constant dword vera_layer_mode_text::mapbase_address#0 mapbase_address = 0
word vera_layer_mode_text::mapheight
word vera_layer_mode_text::mapwidth
dword vera_layer_mode_text::tilebase_address
constant dword vera_layer_mode_text::tilebase_address#0 tilebase_address = $f800
byte vera_layer_mode_text::tileheight
byte vera_layer_mode_text::tilewidth
void vera_layer_mode_tile(byte vera_layer_mode_tile::layer , dword vera_layer_mode_tile::mapbase_address , dword vera_layer_mode_tile::tilebase_address , word vera_layer_mode_tile::mapwidth , word vera_layer_mode_tile::mapheight , byte vera_layer_mode_tile::tilewidth , byte vera_layer_mode_tile::tileheight , byte vera_layer_mode_tile::color_depth)
byte vera_layer_mode_tile::color_depth
byte vera_layer_mode_tile::config
constant byte vera_layer_mode_tile::config#10 config = VERA_LAYER_WIDTH_128|VERA_LAYER_HEIGHT_64
byte vera_layer_mode_tile::layer
byte vera_layer_mode_tile::mapbase
constant byte vera_layer_mode_tile::mapbase#0 mapbase = 0
dword vera_layer_mode_tile::mapbase_address
word vera_layer_mode_tile::mapheight
word vera_layer_mode_tile::mapwidth
byte vera_layer_mode_tile::tilebase
dword vera_layer_mode_tile::tilebase_address
constant dword vera_layer_mode_tile::tilebase_address#0 tilebase_address = vera_layer_mode_text::tilebase_address#0>>1
byte vera_layer_mode_tile::tileheight
byte vera_layer_mode_tile::tilewidth
constant byte* vera_layer_rowshift[2]  = { 0, 0 }
constant word* vera_layer_rowskip[2]  = { 0, 0 }
byte vera_layer_set_backcolor(byte vera_layer_set_backcolor::layer , byte vera_layer_set_backcolor::color)
byte vera_layer_set_backcolor::color
byte vera_layer_set_backcolor::layer
constant byte vera_layer_set_backcolor::layer#0 layer = 1
byte vera_layer_set_backcolor::old
byte vera_layer_set_backcolor::return
void vera_layer_set_config(byte vera_layer_set_config::layer , byte vera_layer_set_config::config)
byte* vera_layer_set_config::addr
byte* vera_layer_set_config::addr#0 addr zp[2]:55 20002.0
byte vera_layer_set_config::config
byte vera_layer_set_config::layer
void vera_layer_set_mapbase(byte vera_layer_set_mapbase::layer , byte vera_layer_set_mapbase::mapbase)
byte~ vera_layer_set_mapbase::$0 reg byte a 20002.0
byte* vera_layer_set_mapbase::addr
byte* vera_layer_set_mapbase::addr#0 addr zp[2]:41 20002.0
byte vera_layer_set_mapbase::layer
byte vera_layer_set_mapbase::layer#3 reg byte a 10001.0
byte vera_layer_set_mapbase::mapbase
byte vera_layer_set_mapbase::mapbase#3 reg byte x 3333.6666666666665
void vera_layer_set_text_color_mode(byte vera_layer_set_text_color_mode::layer , byte vera_layer_set_text_color_mode::color_mode)
byte* vera_layer_set_text_color_mode::addr
byte* vera_layer_set_text_color_mode::addr#0 addr zp[2]:45 2502.5
byte vera_layer_set_text_color_mode::color_mode
byte vera_layer_set_text_color_mode::layer
byte vera_layer_set_textcolor(byte vera_layer_set_textcolor::layer , byte vera_layer_set_textcolor::color)
byte vera_layer_set_textcolor::color
byte vera_layer_set_textcolor::layer
constant byte vera_layer_set_textcolor::layer#0 layer = 1
byte vera_layer_set_textcolor::old
byte vera_layer_set_textcolor::return
void vera_layer_set_tilebase(byte vera_layer_set_tilebase::layer , byte vera_layer_set_tilebase::tilebase)
byte* vera_layer_set_tilebase::addr
byte* vera_layer_set_tilebase::addr#0 addr zp[2]:57 20002.0
byte vera_layer_set_tilebase::layer
byte vera_layer_set_tilebase::tilebase
constant byte* vera_layer_textcolor[2]  = { WHITE, WHITE }
constant byte** vera_layer_tilebase[2]  = { VERA_L0_TILEBASE, VERA_L1_TILEBASE }
constant dword* vera_mapbase_address[2]  = { 0, 0 }
constant byte* vera_mapbase_bank[2]  = { 0, 0 }
constant word* vera_mapbase_offset[2]  = { 0, 0 }
constant dword* vera_tilebase_address[2]  = { 0, 0 }
constant byte* vera_tilebase_bank[2]  = { 0, 0 }
constant word* vera_tilebase_offset[2]  = { 0, 0 }

zp[1]:2 [ conio_x16_init::line#3 conio_x16_init::line#1 conio_x16_init::line#0 ]
zp[4]:3 [ main::src1#10 main::src1#1 ]
zp[4]:7 [ main::num#10 main::num#1 ]
reg byte a [ vera_layer_set_mapbase::layer#3 ]
reg byte x [ vera_layer_set_mapbase::mapbase#3 ]
reg byte x [ gotoxy::y#4 gotoxy::y#3 gotoxy::y#1 gotoxy::y#2 ]
zp[4]:11 [ printf_ulong::uvalue#3 printf_ulong::uvalue#0 printf_ulong::uvalue#1 printf_ulong::uvalue#2 ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
reg byte x [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
zp[2]:15 [ printf_uint::uvalue#2 printf_uint::uvalue#0 printf_uint::uvalue#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 main::beg#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 main::$13 main::beg#0 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
reg byte a [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
zp[1]:17 [ utoa::digit#2 utoa::digit#1 uctoa::digit#2 uctoa::digit#1 ultoa::digit#2 ultoa::digit#1 cputc::c#3 cputc::c#0 cputc::c#2 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:18 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 cputs::s#10 cputs::s#11 cputs::s#0 ]
reg byte x [ vera_layer_get_color::layer#2 vera_layer_get_color::layer#1 vera_layer_get_color::layer#0 ]
reg byte a [ vera_layer_get_color::return#2 vera_layer_get_color::return#0 vera_layer_get_color::return#1 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
reg byte x [ insertup::i#2 insertup::i#1 ]
zp[1]:20 [ conio_screen_width ]
zp[1]:21 [ conio_screen_height ]
zp[1]:22 [ conio_screen_layer ]
zp[2]:23 [ conio_width ]
zp[2]:25 [ conio_height ]
zp[1]:27 [ conio_rowshift ]
zp[2]:28 [ conio_rowskip ]
zp[4]:30 [ main::$1 main::calcend#0 ]
reg byte a [ main::$3 ]
zp[1]:34 [ main::$4 main::bankbeg#0 uctoa::started#2 uctoa::started#4 ]
reg byte a [ main::$5 ]
reg byte a [ main::$6 ]
reg byte a [ main::$8 ]
zp[1]:35 [ main::$9 main::bankend#0 ]
reg byte a [ main::$10 ]
reg byte a [ main::$11 ]
zp[2]:36 [ main::$15 main::end#0 main::end#1 ]
reg byte a [ screensize::hscale#0 ]
reg byte a [ screensize::$1 ]
reg byte a [ screensize::vscale#0 ]
reg byte a [ screensize::$3 ]
reg byte x [ vera_layer_get_mapbase_bank::layer#0 ]
reg byte a [ vera_layer_get_mapbase_bank::return#2 ]
zp[1]:38 [ CONIO_SCREEN_BANK#10 ]
reg byte a [ vera_layer_get_mapbase_offset::layer#0 ]
zp[2]:39 [ CONIO_SCREEN_TEXT#101 ]
reg byte a [ screenlayer::vera_layer_get_width1_layer#0 ]
reg byte a [ screenlayer::vera_layer_get_width1_$2 ]
reg byte a [ screenlayer::vera_layer_get_width1_$0 ]
reg byte a [ screenlayer::vera_layer_get_width1_$1 ]
reg byte a [ screenlayer::vera_layer_get_width1_$3 ]
reg byte x [ vera_layer_get_rowshift::layer#0 ]
reg byte a [ vera_layer_get_rowshift::return#2 ]
reg byte a [ screenlayer::$3 ]
reg byte a [ vera_layer_get_rowskip::layer#0 ]
reg byte a [ screenlayer::vera_layer_get_height1_layer#0 ]
reg byte a [ screenlayer::vera_layer_get_height1_$2 ]
reg byte a [ screenlayer::vera_layer_get_height1_$0 ]
reg byte a [ screenlayer::vera_layer_get_height1_$1 ]
reg byte a [ screenlayer::vera_layer_get_height1_$3 ]
reg byte a [ vera_layer_set_mapbase::$0 ]
zp[2]:41 [ vera_layer_set_mapbase::addr#0 screenlayer::vera_layer_get_width1_return#0 screenlayer::vera_layer_get_width1_return#1 screenlayer::$2 ]
zp[2]:43 [ gotoxy::$6 gotoxy::line_offset#0 vera_layer_get_rowskip::return#2 screenlayer::$4 vera_layer_get_rowskip::return#0 ]
reg byte a [ gotoxy::$5 ]
reg byte a [ cputs::c#1 ]
zp[2]:45 [ vera_layer_set_text_color_mode::addr#0 screenlayer::vera_layer_get_height1_config#0 ]
reg byte a [ vera_layer_get_mapbase_bank::return#0 ]
reg byte a [ vera_layer_get_mapbase_offset::$0 ]
reg byte a [ vera_layer_get_rowshift::return#0 ]
reg byte a [ vera_layer_get_rowskip::$0 ]
reg byte a [ vera_layer_get_color::return#3 ]
reg byte x [ cputc::color#0 ]
reg byte a [ cputc::$15 ]
reg byte a [ cputc::$2 ]
reg byte a [ cputc::$4 ]
reg byte a [ cputc::$5 ]
reg byte a [ cputc::$6 ]
reg byte a [ cputc::scroll_enable#0 ]
zp[2]:47 [ cputc::$16 memcpy_in_vram::i#2 memcpy_in_vram::i#1 clearline::c#2 clearline::c#1 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:49 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
reg byte x [ uctoa_append::return#0 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:53 [ utoa::digit_value#0 utoa_append::sub#0 cputc::conio_addr#0 cputc::conio_addr#1 ]
zp[2]:55 [ vera_layer_set_config::addr#0 screenlayer::vera_layer_get_height1_return#0 screenlayer::vera_layer_get_height1_return#1 screenlayer::$5 ]
zp[2]:57 [ vera_layer_set_tilebase::addr#0 screenlayer::vera_layer_get_width1_config#0 vera_layer_get_mapbase_offset::return#2 vera_layer_get_mapbase_offset::return#0 ]
reg byte a [ vera_layer_get_color::$3 ]
reg byte a [ vera_layer_get_color::$0 ]
reg byte a [ vera_layer_get_color::$1 ]
reg byte a [ cputln::$2 ]
zp[2]:59 [ cputln::temp#0 cputln::temp#1 vera_layer_get_color::addr#0 ]
reg byte a [ cputln::$3 ]
zp[1]:61 [ insertup::cy#0 uctoa::digit_value#0 uctoa_append::sub#0 ]
zp[1]:62 [ insertup::width#0 ]
reg byte a [ insertup::$3 ]
zp[2]:63 [ insertup::line#0 insertup::start#0 memcpy_in_vram::dest#0 ]
zp[2]:65 [ memcpy_in_vram::num#0 ]
reg byte a [ clearline::$5 ]
zp[2]:67 [ clearline::addr#0 memcpy_in_vram::src#0 ]
reg byte a [ clearline::$1 ]
reg byte a [ clearline::$2 ]
reg byte a [ vera_layer_get_color::return#4 ]
reg byte x [ clearline::color#0 ]
reg byte a [ memcpy_in_vram::$0 ]
reg byte a [ memcpy_in_vram::$1 ]
reg byte a [ memcpy_in_vram::$3 ]
reg byte a [ memcpy_in_vram::$4 ]
mem[12] [ printf_buffer ]
