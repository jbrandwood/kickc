@begin: scope:[]  from
  [0] phi()
  to:@5
@5: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @5
  [3] phi()
main: scope:[main]  from @5
  [4] phi()
  [5] call initscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [6] phi()
  [7] call render 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [8] phi()
  [9] call animate 
  to:main::@1
animate: scope:[animate]  from main::@4
  [10] (byte/signed word/word/dword/signed dword~) animate::$0 ← *((const byte[]) XPOS#0) + (byte/signed byte/word/signed word/dword/signed dword) 1
  [11] *((const byte[]) XPOS#0) ← (byte/signed word/word/dword/signed dword~) animate::$0
  [12] if(*((const byte[]) XPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto animate::@1
  to:animate::@7
animate::@7: scope:[animate]  from animate
  [13] *((const byte[]) XPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  [14] (byte/signed word/word/dword/signed dword~) animate::$3 ← *((const byte[]) YPOS#0) + (byte/signed byte/word/signed word/dword/signed dword) 1
  [15] *((const byte[]) YPOS#0) ← (byte/signed word/word/dword/signed dword~) animate::$3
  [16] if(*((const byte[]) YPOS#0)!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto animate::@2
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  [17] *((const byte[]) YPOS#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  [18] (byte/signed word/word/dword/signed dword~) animate::$6 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) - (byte/signed byte/word/signed word/dword/signed dword) 1
  [19] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed word/word/dword/signed dword~) animate::$6
  [20] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1)!=(byte/word/signed word/dword/signed dword) 255) goto animate::@3
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  [21] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte/signed byte/word/signed word/dword/signed dword) 40
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  [22] (byte/signed word/word/dword/signed dword~) animate::$9 ← *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) + (byte/signed byte/word/signed word/dword/signed dword) 1
  [23] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed word/word/dword/signed dword~) animate::$9
  [24] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2)!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto animate::@4
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  [25] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  [26] (byte/signed word/word/dword/signed dword~) animate::$12 ← *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) 1
  [27] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$12
  [28] if(*((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)!=(byte/word/signed word/dword/signed dword) 255) goto animate::@return
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  [29] *((const byte[]) YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed byte/word/signed word/dword/signed dword) 25
  [30] (byte/signed word/word/dword/signed dword~) animate::$15 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) + (byte/signed byte/word/signed word/dword/signed dword) 7
  [31] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$15
  [32] if(*((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3)<(byte/signed byte/word/signed word/dword/signed dword) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  [33] (byte/signed word/word/dword/signed dword~) animate::$18 ← *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) - (byte/signed byte/word/signed word/dword/signed dword) 40
  [34] *((const byte[]) XPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte/signed word/word/dword/signed dword~) animate::$18
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  [35] return 
  to:@return
render: scope:[render]  from main::@1
  [36] phi()
  to:render::@1
render::@1: scope:[render]  from render render::@3
  [37] (byte*) render::colline#5 ← phi( render/(const byte*) COLORS#0 render::@3/(byte*) render::colline#1 )
  [37] (byte) render::y#4 ← phi( render/(byte/signed byte/word/signed word/dword/signed dword) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  [38] (byte) render::x#2 ← phi( render::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render::@5/(byte) render::x#1 )
  [39] (byte) findcol::x#0 ← (byte) render::x#2
  [40] (byte) findcol::y#0 ← (byte) render::y#4
  [41] call findcol 
  [42] (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  [43] (byte) render::col#0 ← (byte) findcol::return#0
  [44] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  [45] (byte) render::x#1 ← ++ (byte) render::x#2
  [46] if((byte) render::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  [47] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [48] (byte) render::y#1 ← ++ (byte) render::y#4
  [49] if((byte) render::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  [50] return 
  to:@return
findcol: scope:[findcol]  from render::@2
  [51] phi()
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  [52] (byte) findcol::mincol#10 ← phi( findcol/(byte/signed byte/word/signed word/dword/signed dword) 0 findcol::@19/(byte) findcol::mincol#2 )
  [52] (byte) findcol::mindiff#10 ← phi( findcol/(byte/word/signed word/dword/signed dword) 255 findcol::@19/(byte~) findcol::mindiff#13 )
  [52] (byte) findcol::i#10 ← phi( findcol/(byte/signed byte/word/signed word/dword/signed dword) 0 findcol::@19/(byte) findcol::i#1 )
  [53] (byte) findcol::xp#0 ← *((const byte[]) XPOS#0 + (byte) findcol::i#10)
  [54] (byte) findcol::yp#0 ← *((const byte[]) YPOS#0 + (byte) findcol::i#10)
  [55] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  [56] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  [57] (byte) findcol::return#2 ← phi( findcol::@9/(byte/signed byte/word/signed word/dword/signed dword) 0 findcol::@8/(byte) findcol::mincol#2 )
  [58] return 
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  [59] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  [60] (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  [61] (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  [62] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  [63] (byte~) findcol::$8 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  [64] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$8
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  [65] (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  [66] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  [67] (byte) findcol::mincol#1 ← *((const byte[]) COLS#0 + (byte) findcol::i#10)
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  [68] (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@21/(byte~) findcol::mindiff#15 )
  [68] (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@21/(byte) findcol::mincol#10 )
  [69] (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  [70] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  [71] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  [72] (byte~) findcol::mindiff#15 ← (byte) findcol::mindiff#10
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [73] (byte~) findcol::$10 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  [74] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$10
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  [75] (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
initscreen: scope:[initscreen]  from main
  [76] phi()
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  [77] (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@1/(byte*) initscreen::screen#1 )
  [78] *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  [79] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  [80] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [81] return 
  to:@return
