(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(byte~) main::$8 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 7.857142857142857
(byte) main::j
(byte) main::j#1 j zp[1]:2 11.0
(byte) main::j#2 j zp[1]:2 5.5
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:7 2002.0
(byte*) memset::dst#2 dst zp[2]:7 1334.6666666666667
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_screen#0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 20002.0
(byte) print_char::ch#3 reg byte a 20002.0
(byte) print_char::ch#4 reg byte a 120003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 print_char_cursor zp[2]:5 4643.0
(byte*) print_char_cursor#35 print_char_cursor zp[2]:5 110103.0
(byte*) print_char_cursor#51 print_char_cursor zp[2]:5 35.5
(byte*) print_char_cursor#63 print_char_cursor zp[2]:5 22.0
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0 print_line_cursor zp[2]:7 4289.285714285714
(byte*) print_line_cursor#10 print_line_cursor zp[2]:7 20103.0
(byte*) print_line_cursor#21 print_line_cursor zp[2]:7 18.666666666666664
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_sint((signed word) print_sint::w)
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0 w zp[2]:3 202.0
(signed word) print_sint::w#1 w zp[2]:3 52.33333333333333
(signed word) print_sint::w#4 w zp[2]:3 202.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 20002.0
(byte~) print_uchar::$2 reg byte x 20002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 2002.0
(byte) print_uchar::b#1 reg byte x 2002.0
(byte) print_uchar::b#2 reg byte x 5501.0
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:3 701.0
(void()) sub((byte) sub::idx , (byte) sub::s)
(byte~) sub::$0 reg byte a 303.0
(label) sub::@return
(byte) sub::idx
(byte) sub::idx#0 reg byte a 22.0
(byte) sub::idx#1 reg byte a 22.0
(byte) sub::idx#2 reg byte a 22.0
(byte) sub::idx#3 reg byte a 134.0
(byte) sub::s
(byte) sub::s#3 reg byte x 50.5
(const signed word*) words[]  = { (signed word) -$6000, (signed word) -$600, (signed word) -$60, (signed word) -6, (signed word) 0, (signed word) 6, (signed word) $60, (signed word) $600, (signed word) $6000 }

reg byte y [ main::i#2 main::i#1 ]
zp[1]:2 [ main::j#2 main::j#1 ]
zp[2]:3 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#0 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp[2]:5 [ print_char_cursor#35 print_char_cursor#51 print_char_cursor#63 print_char_cursor#12 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
zp[2]:7 [ memset::dst#2 memset::dst#1 print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
reg byte a [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ]
reg byte x [ sub::s#3 ]
reg byte a [ main::$8 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ sub::$0 ]
