Resolving typeid() (byte~) testUnsigned::$1 ← typeid  (byte) testUnsigned::ubc1
Resolving typeid() (byte~) testUnsigned::$2 ← typeid  (byte) testUnsigned::ubv1
Resolving typeid() (byte~) testUnsigned::$14 ← typeid  (byte~) testUnsigned::$13
Resolving typeid() (byte~) testUnsigned::$16 ← typeid  (byte~) testUnsigned::$15
Resolving typeid() (byte~) testUnsigned::$18 ← typeid  (byte~) testUnsigned::$17
Resolving typeid() (byte~) testSigned::$1 ← typeid  (signed byte) testSigned::sbc1
Resolving typeid() (byte~) testSigned::$2 ← typeid  (signed byte) testSigned::sbv1
Resolving typeid() (byte~) testSigned::$14 ← typeid  (signed byte~) testSigned::$13
Resolving typeid() (byte~) testSigned::$16 ← typeid  (signed byte~) testSigned::$15
Resolving typeid() (byte~) testSigned::$18 ← typeid  (signed byte~) testSigned::$17
Adding pointer type conversion cast (byte*) SCREEN in (byte*) SCREEN ← (number) $400
Adding pointer type conversion cast (signed byte*) SSCREEN in (signed byte*) SSCREEN ← (number) $400
Identified constant variable (byte) testUnsigned::ubc1
Identified constant variable (byte) testUnsignedVals::ubc1
Identified constant variable (signed byte) testSigned::sbc1
Identified constant variable (signed byte) testSignedVals::sbc1
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  (signed byte*) SSCREEN#0 ← ((signed byte*)) (number) $400
  (byte) idx#0 ← (number) 0
  to:@5
main: scope:[main]  from @5
  (byte) idx#1 ← (number) 0
  call testUnsigned 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) idx#59 ← phi( main/(byte) idx#21 )
  (byte) idx#2 ← (byte) idx#59
  (byte) idx#3 ← (number) $28
  call testUnsignedVals 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) idx#60 ← phi( main::@1/(byte) idx#33 )
  (byte) idx#4 ← (byte) idx#60
  (number~) main::$2 ← (number) $28 * (number) 2
  (byte) idx#5 ← (number~) main::$2
  call testSigned 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) idx#61 ← phi( main::@2/(byte) idx#45 )
  (byte) idx#6 ← (byte) idx#61
  (number~) main::$4 ← (number) $28 * (number) 3
  (byte) idx#7 ← (number~) main::$4
  call testSignedVals 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) idx#62 ← phi( main::@3/(byte) idx#57 )
  (byte) idx#8 ← (byte) idx#62
  to:main::@return
main::@return: scope:[main]  from main::@4
  (byte) idx#63 ← phi( main::@4/(byte) idx#8 )
  (byte) idx#9 ← (byte) idx#63
  return 
  to:@return
testUnsigned: scope:[testUnsigned]  from main
  (byte) idx#64 ← phi( main/(byte) idx#1 )
  (byte) testUnsigned::ubc1#0 ← (number) $fa
  (byte) testUnsigned::ubv1#0 ← (number) $fa
  (byte~) testUnsigned::$0 ← typeid  (number) $fa
  *((byte*) SCREEN#0 + (byte) idx#64) ← (byte~) testUnsigned::$0
  (byte) idx#10 ← ++ (byte) idx#64
  (byte~) testUnsigned::$1 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#10) ← (byte~) testUnsigned::$1
  (byte) idx#11 ← ++ (byte) idx#10
  (byte~) testUnsigned::$2 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#11) ← (byte~) testUnsigned::$2
  (byte) idx#12 ← ++ (byte) idx#11
  (number~) testUnsigned::$3 ← (number) $78 + (number) $82
  (byte~) testUnsigned::$4 ← typeid  (number~) testUnsigned::$3
  *((byte*) SCREEN#0 + (byte) idx#12) ← (byte~) testUnsigned::$4
  (byte) idx#13 ← ++ (byte) idx#12
  (number~) testUnsigned::$5 ← (byte) testUnsigned::ubc1#0 + (number) $fa
  (byte~) testUnsigned::$6 ← typeid  (number~) testUnsigned::$5
  *((byte*) SCREEN#0 + (byte) idx#13) ← (byte~) testUnsigned::$6
  (byte) idx#14 ← ++ (byte) idx#13
  (number~) testUnsigned::$7 ← (number) $fa + (byte) testUnsigned::ubc1#0
  (byte~) testUnsigned::$8 ← typeid  (number~) testUnsigned::$7
  *((byte*) SCREEN#0 + (byte) idx#14) ← (byte~) testUnsigned::$8
  (byte) idx#15 ← ++ (byte) idx#14
  (number~) testUnsigned::$9 ← (byte) testUnsigned::ubv1#0 + (number) $fa
  (byte~) testUnsigned::$10 ← typeid  (number~) testUnsigned::$9
  *((byte*) SCREEN#0 + (byte) idx#15) ← (byte~) testUnsigned::$10
  (byte) idx#16 ← ++ (byte) idx#15
  (number~) testUnsigned::$11 ← (number) $fa + (byte) testUnsigned::ubv1#0
  (byte~) testUnsigned::$12 ← typeid  (number~) testUnsigned::$11
  *((byte*) SCREEN#0 + (byte) idx#16) ← (byte~) testUnsigned::$12
  (byte) idx#17 ← ++ (byte) idx#16
  (byte~) testUnsigned::$14 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#17) ← (byte~) testUnsigned::$14
  (byte) idx#18 ← ++ (byte) idx#17
  (byte~) testUnsigned::$16 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#18) ← (byte~) testUnsigned::$16
  (byte) idx#19 ← ++ (byte) idx#18
  (byte~) testUnsigned::$18 ← (const byte) TYPEID_BYTE
  *((byte*) SCREEN#0 + (byte) idx#19) ← (byte~) testUnsigned::$18
  (byte) idx#20 ← ++ (byte) idx#19
  to:testUnsigned::@return
testUnsigned::@return: scope:[testUnsigned]  from testUnsigned
  (byte) idx#65 ← phi( testUnsigned/(byte) idx#20 )
  (byte) idx#21 ← (byte) idx#65
  return 
  to:@return
testUnsignedVals: scope:[testUnsignedVals]  from main::@1
  (byte) idx#66 ← phi( main::@1/(byte) idx#3 )
  (byte) testUnsignedVals::ubc1#0 ← (number) $fa
  (byte) testUnsignedVals::ubv1#0 ← (number) $fa
  *((byte*) SCREEN#0 + (byte) idx#66) ← (number) $fa
  (byte) idx#22 ← ++ (byte) idx#66
  *((byte*) SCREEN#0 + (byte) idx#22) ← (byte) testUnsignedVals::ubc1#0
  (byte) idx#23 ← ++ (byte) idx#22
  *((byte*) SCREEN#0 + (byte) idx#23) ← (byte) testUnsignedVals::ubv1#0
  (byte) idx#24 ← ++ (byte) idx#23
  (number~) testUnsignedVals::$0 ← (number) $78 + (number) $82
  *((byte*) SCREEN#0 + (byte) idx#24) ← (number~) testUnsignedVals::$0
  (byte) idx#25 ← ++ (byte) idx#24
  (number~) testUnsignedVals::$1 ← (byte) testUnsignedVals::ubc1#0 + (number) $fa
  *((byte*) SCREEN#0 + (byte) idx#25) ← (number~) testUnsignedVals::$1
  (byte) idx#26 ← ++ (byte) idx#25
  (number~) testUnsignedVals::$2 ← (number) $fa + (byte) testUnsignedVals::ubc1#0
  *((byte*) SCREEN#0 + (byte) idx#26) ← (number~) testUnsignedVals::$2
  (byte) idx#27 ← ++ (byte) idx#26
  (number~) testUnsignedVals::$3 ← (byte) testUnsignedVals::ubv1#0 + (number) $fa
  *((byte*) SCREEN#0 + (byte) idx#27) ← (number~) testUnsignedVals::$3
  (byte) idx#28 ← ++ (byte) idx#27
  (number~) testUnsignedVals::$4 ← (number) $fa + (byte) testUnsignedVals::ubv1#0
  *((byte*) SCREEN#0 + (byte) idx#28) ← (number~) testUnsignedVals::$4
  (byte) idx#29 ← ++ (byte) idx#28
  (byte~) testUnsignedVals::$5 ← (byte) testUnsignedVals::ubv1#0 + (byte) testUnsignedVals::ubc1#0
  *((byte*) SCREEN#0 + (byte) idx#29) ← (byte~) testUnsignedVals::$5
  (byte) idx#30 ← ++ (byte) idx#29
  (byte~) testUnsignedVals::$6 ← (byte) testUnsignedVals::ubc1#0 + (byte) testUnsignedVals::ubv1#0
  *((byte*) SCREEN#0 + (byte) idx#30) ← (byte~) testUnsignedVals::$6
  (byte) idx#31 ← ++ (byte) idx#30
  (byte~) testUnsignedVals::$7 ← (byte) testUnsignedVals::ubv1#0 + (byte) testUnsignedVals::ubv1#0
  *((byte*) SCREEN#0 + (byte) idx#31) ← (byte~) testUnsignedVals::$7
  (byte) idx#32 ← ++ (byte) idx#31
  to:testUnsignedVals::@return
testUnsignedVals::@return: scope:[testUnsignedVals]  from testUnsignedVals
  (byte) idx#67 ← phi( testUnsignedVals/(byte) idx#32 )
  (byte) idx#33 ← (byte) idx#67
  return 
  to:@return
testSigned: scope:[testSigned]  from main::@2
  (byte) idx#68 ← phi( main::@2/(byte) idx#5 )
  (signed byte) testSigned::sbc1#0 ← (number) -$78
  (signed byte) testSigned::sbv1#0 ← (number) -$78
  (byte~) testSigned::$0 ← typeid  (number) -$78
  *((byte*) SCREEN#0 + (byte) idx#68) ← (byte~) testSigned::$0
  (byte) idx#34 ← ++ (byte) idx#68
  (byte~) testSigned::$1 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#34) ← (byte~) testSigned::$1
  (byte) idx#35 ← ++ (byte) idx#34
  (byte~) testSigned::$2 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#35) ← (byte~) testSigned::$2
  (byte) idx#36 ← ++ (byte) idx#35
  (number~) testSigned::$3 ← (number) -$78 + (number) -$82
  (byte~) testSigned::$4 ← typeid  (number~) testSigned::$3
  *((byte*) SCREEN#0 + (byte) idx#36) ← (byte~) testSigned::$4
  (byte) idx#37 ← ++ (byte) idx#36
  (number~) testSigned::$5 ← (signed byte) testSigned::sbc1#0 + (number) -$78
  (byte~) testSigned::$6 ← typeid  (number~) testSigned::$5
  *((byte*) SCREEN#0 + (byte) idx#37) ← (byte~) testSigned::$6
  (byte) idx#38 ← ++ (byte) idx#37
  (number~) testSigned::$7 ← (number) -$78 + (signed byte) testSigned::sbc1#0
  (byte~) testSigned::$8 ← typeid  (number~) testSigned::$7
  *((byte*) SCREEN#0 + (byte) idx#38) ← (byte~) testSigned::$8
  (byte) idx#39 ← ++ (byte) idx#38
  (number~) testSigned::$9 ← (signed byte) testSigned::sbv1#0 + (number) -$78
  (byte~) testSigned::$10 ← typeid  (number~) testSigned::$9
  *((byte*) SCREEN#0 + (byte) idx#39) ← (byte~) testSigned::$10
  (byte) idx#40 ← ++ (byte) idx#39
  (number~) testSigned::$11 ← (number) -$78 + (signed byte) testSigned::sbv1#0
  (byte~) testSigned::$12 ← typeid  (number~) testSigned::$11
  *((byte*) SCREEN#0 + (byte) idx#40) ← (byte~) testSigned::$12
  (byte) idx#41 ← ++ (byte) idx#40
  (byte~) testSigned::$14 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#41) ← (byte~) testSigned::$14
  (byte) idx#42 ← ++ (byte) idx#41
  (byte~) testSigned::$16 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#42) ← (byte~) testSigned::$16
  (byte) idx#43 ← ++ (byte) idx#42
  (byte~) testSigned::$18 ← (const byte) TYPEID_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) idx#43) ← (byte~) testSigned::$18
  (byte) idx#44 ← ++ (byte) idx#43
  to:testSigned::@return
testSigned::@return: scope:[testSigned]  from testSigned
  (byte) idx#69 ← phi( testSigned/(byte) idx#44 )
  (byte) idx#45 ← (byte) idx#69
  return 
  to:@return
testSignedVals: scope:[testSignedVals]  from main::@3
  (byte) idx#70 ← phi( main::@3/(byte) idx#7 )
  (signed byte) testSignedVals::sbc1#0 ← (number) -$78
  (signed byte) testSignedVals::sbv1#0 ← (number) -$78
  *((signed byte*) SSCREEN#0 + (byte) idx#70) ← (number) -$78
  (byte) idx#46 ← ++ (byte) idx#70
  *((signed byte*) SSCREEN#0 + (byte) idx#46) ← (signed byte) testSignedVals::sbc1#0
  (byte) idx#47 ← ++ (byte) idx#46
  *((signed byte*) SSCREEN#0 + (byte) idx#47) ← (signed byte) testSignedVals::sbv1#0
  (byte) idx#48 ← ++ (byte) idx#47
  (number~) testSignedVals::$0 ← (number) -$46 + (number) -$32
  *((signed byte*) SSCREEN#0 + (byte) idx#48) ← (number~) testSignedVals::$0
  (byte) idx#49 ← ++ (byte) idx#48
  (number~) testSignedVals::$1 ← (signed byte) testSignedVals::sbc1#0 + (number) -$78
  *((signed byte*) SSCREEN#0 + (byte) idx#49) ← (number~) testSignedVals::$1
  (byte) idx#50 ← ++ (byte) idx#49
  (number~) testSignedVals::$2 ← (number) -$78 + (signed byte) testSignedVals::sbc1#0
  *((signed byte*) SSCREEN#0 + (byte) idx#50) ← (number~) testSignedVals::$2
  (byte) idx#51 ← ++ (byte) idx#50
  (number~) testSignedVals::$3 ← (signed byte) testSignedVals::sbv1#0 + (number) -$78
  *((signed byte*) SSCREEN#0 + (byte) idx#51) ← (number~) testSignedVals::$3
  (byte) idx#52 ← ++ (byte) idx#51
  (number~) testSignedVals::$4 ← (number) -$78 + (signed byte) testSignedVals::sbv1#0
  *((signed byte*) SSCREEN#0 + (byte) idx#52) ← (number~) testSignedVals::$4
  (byte) idx#53 ← ++ (byte) idx#52
  (signed byte~) testSignedVals::$5 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) testSignedVals::sbc1#0
  *((signed byte*) SSCREEN#0 + (byte) idx#53) ← (signed byte~) testSignedVals::$5
  (byte) idx#54 ← ++ (byte) idx#53
  (signed byte~) testSignedVals::$6 ← (signed byte) testSignedVals::sbc1#0 + (signed byte) testSignedVals::sbv1#0
  *((signed byte*) SSCREEN#0 + (byte) idx#54) ← (signed byte~) testSignedVals::$6
  (byte) idx#55 ← ++ (byte) idx#54
  (signed byte~) testSignedVals::$7 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) testSignedVals::sbv1#0
  *((signed byte*) SSCREEN#0 + (byte) idx#55) ← (signed byte~) testSignedVals::$7
  (byte) idx#56 ← ++ (byte) idx#55
  to:testSignedVals::@return
testSignedVals::@return: scope:[testSignedVals]  from testSignedVals
  (byte) idx#71 ← phi( testSignedVals/(byte) idx#56 )
  (byte) idx#57 ← (byte) idx#71
  return 
  to:@return
@5: scope:[]  from @begin
  (byte) idx#73 ← phi( @begin/(byte) idx#0 )
  call main 
  to:@6
@6: scope:[]  from @5
  (byte) idx#72 ← phi( @5/(byte) idx#9 )
  (byte) idx#58 ← (byte) idx#72
  to:@end
@end: scope:[]  from @6

SYMBOL TABLE SSA
(label) @5
(label) @6
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(signed byte*) SSCREEN
(signed byte*) SSCREEN#0
(const byte) TYPEID_BYTE = (number) 1
(const byte) TYPEID_SIGNED_BYTE = (number) 2
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#17
(byte) idx#18
(byte) idx#19
(byte) idx#2
(byte) idx#20
(byte) idx#21
(byte) idx#22
(byte) idx#23
(byte) idx#24
(byte) idx#25
(byte) idx#26
(byte) idx#27
(byte) idx#28
(byte) idx#29
(byte) idx#3
(byte) idx#30
(byte) idx#31
(byte) idx#32
(byte) idx#33
(byte) idx#34
(byte) idx#35
(byte) idx#36
(byte) idx#37
(byte) idx#38
(byte) idx#39
(byte) idx#4
(byte) idx#40
(byte) idx#41
(byte) idx#42
(byte) idx#43
(byte) idx#44
(byte) idx#45
(byte) idx#46
(byte) idx#47
(byte) idx#48
(byte) idx#49
(byte) idx#5
(byte) idx#50
(byte) idx#51
(byte) idx#52
(byte) idx#53
(byte) idx#54
(byte) idx#55
(byte) idx#56
(byte) idx#57
(byte) idx#58
(byte) idx#59
(byte) idx#6
(byte) idx#60
(byte) idx#61
(byte) idx#62
(byte) idx#63
(byte) idx#64
(byte) idx#65
(byte) idx#66
(byte) idx#67
(byte) idx#68
(byte) idx#69
(byte) idx#7
(byte) idx#70
(byte) idx#71
(byte) idx#72
(byte) idx#73
(byte) idx#8
(byte) idx#9
(void()) main()
(number~) main::$2
(number~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(void()) testSigned()
(byte~) testSigned::$0
(byte~) testSigned::$1
(byte~) testSigned::$10
(number~) testSigned::$11
(byte~) testSigned::$12
(byte~) testSigned::$14
(byte~) testSigned::$16
(byte~) testSigned::$18
(byte~) testSigned::$2
(number~) testSigned::$3
(byte~) testSigned::$4
(number~) testSigned::$5
(byte~) testSigned::$6
(number~) testSigned::$7
(byte~) testSigned::$8
(number~) testSigned::$9
(label) testSigned::@return
(signed byte) testSigned::sbc1
(signed byte) testSigned::sbc1#0
(signed byte) testSigned::sbv1
(signed byte) testSigned::sbv1#0
(void()) testSignedVals()
(number~) testSignedVals::$0
(number~) testSignedVals::$1
(number~) testSignedVals::$2
(number~) testSignedVals::$3
(number~) testSignedVals::$4
(signed byte~) testSignedVals::$5
(signed byte~) testSignedVals::$6
(signed byte~) testSignedVals::$7
(label) testSignedVals::@return
(signed byte) testSignedVals::sbc1
(signed byte) testSignedVals::sbc1#0
(signed byte) testSignedVals::sbv1
(signed byte) testSignedVals::sbv1#0
(void()) testUnsigned()
(byte~) testUnsigned::$0
(byte~) testUnsigned::$1
(byte~) testUnsigned::$10
(number~) testUnsigned::$11
(byte~) testUnsigned::$12
(byte~) testUnsigned::$14
(byte~) testUnsigned::$16
(byte~) testUnsigned::$18
(byte~) testUnsigned::$2
(number~) testUnsigned::$3
(byte~) testUnsigned::$4
(number~) testUnsigned::$5
(byte~) testUnsigned::$6
(number~) testUnsigned::$7
(byte~) testUnsigned::$8
(number~) testUnsigned::$9
(label) testUnsigned::@return
(byte) testUnsigned::ubc1
(byte) testUnsigned::ubc1#0
(byte) testUnsigned::ubv1
(byte) testUnsigned::ubv1#0
(void()) testUnsignedVals()
(number~) testUnsignedVals::$0
(number~) testUnsignedVals::$1
(number~) testUnsignedVals::$2
(number~) testUnsignedVals::$3
(number~) testUnsignedVals::$4
(byte~) testUnsignedVals::$5
(byte~) testUnsignedVals::$6
(byte~) testUnsignedVals::$7
(label) testUnsignedVals::@return
(byte) testUnsignedVals::ubc1
(byte) testUnsignedVals::ubc1#0
(byte) testUnsignedVals::ubv1
(byte) testUnsignedVals::ubv1#0

Adding number conversion cast (unumber) 0 in (byte) idx#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) idx#1 ← (number) 0
Adding number conversion cast (unumber) $28 in (byte) idx#3 ← (number) $28
Adding number conversion cast (unumber) main::$2 in (byte) idx#5 ← (number~) main::$2
Adding number conversion cast (unumber) main::$4 in (byte) idx#7 ← (number~) main::$4
Adding number conversion cast (unumber) $fa in (byte) testUnsigned::ubc1#0 ← (number) $fa
Adding number conversion cast (unumber) $fa in (byte) testUnsigned::ubv1#0 ← (number) $fa
Adding number conversion cast (unumber) $fa in (number~) testUnsigned::$5 ← (byte) testUnsigned::ubc1#0 + (number) $fa
Adding number conversion cast (unumber) testUnsigned::$5 in (number~) testUnsigned::$5 ← (byte) testUnsigned::ubc1#0 + (unumber)(number) $fa
Adding number conversion cast (unumber) $fa in (number~) testUnsigned::$7 ← (number) $fa + (byte) testUnsigned::ubc1#0
Adding number conversion cast (unumber) testUnsigned::$7 in (number~) testUnsigned::$7 ← (unumber)(number) $fa + (byte) testUnsigned::ubc1#0
Adding number conversion cast (unumber) $fa in (number~) testUnsigned::$9 ← (byte) testUnsigned::ubv1#0 + (number) $fa
Adding number conversion cast (unumber) testUnsigned::$9 in (number~) testUnsigned::$9 ← (byte) testUnsigned::ubv1#0 + (unumber)(number) $fa
Adding number conversion cast (unumber) $fa in (number~) testUnsigned::$11 ← (number) $fa + (byte) testUnsigned::ubv1#0
Adding number conversion cast (unumber) testUnsigned::$11 in (number~) testUnsigned::$11 ← (unumber)(number) $fa + (byte) testUnsigned::ubv1#0
Adding number conversion cast (unumber) $fa in (byte) testUnsignedVals::ubc1#0 ← (number) $fa
Adding number conversion cast (unumber) $fa in (byte) testUnsignedVals::ubv1#0 ← (number) $fa
Adding number conversion cast (unumber) $fa in *((byte*) SCREEN#0 + (byte) idx#66) ← (number) $fa
Adding number conversion cast (unumber) testUnsignedVals::$0 in *((byte*) SCREEN#0 + (byte) idx#24) ← (number~) testUnsignedVals::$0
Adding number conversion cast (unumber) $fa in (number~) testUnsignedVals::$1 ← (byte) testUnsignedVals::ubc1#0 + (number) $fa
Adding number conversion cast (unumber) testUnsignedVals::$1 in (number~) testUnsignedVals::$1 ← (byte) testUnsignedVals::ubc1#0 + (unumber)(number) $fa
Adding number conversion cast (unumber) $fa in (number~) testUnsignedVals::$2 ← (number) $fa + (byte) testUnsignedVals::ubc1#0
Adding number conversion cast (unumber) testUnsignedVals::$2 in (number~) testUnsignedVals::$2 ← (unumber)(number) $fa + (byte) testUnsignedVals::ubc1#0
Adding number conversion cast (unumber) $fa in (number~) testUnsignedVals::$3 ← (byte) testUnsignedVals::ubv1#0 + (number) $fa
Adding number conversion cast (unumber) testUnsignedVals::$3 in (number~) testUnsignedVals::$3 ← (byte) testUnsignedVals::ubv1#0 + (unumber)(number) $fa
Adding number conversion cast (unumber) $fa in (number~) testUnsignedVals::$4 ← (number) $fa + (byte) testUnsignedVals::ubv1#0
Adding number conversion cast (unumber) testUnsignedVals::$4 in (number~) testUnsignedVals::$4 ← (unumber)(number) $fa + (byte) testUnsignedVals::ubv1#0
Adding number conversion cast (snumber) -$78 in (signed byte) testSigned::sbc1#0 ← (number) -$78
Adding number conversion cast (snumber) -$78 in (signed byte) testSigned::sbv1#0 ← (number) -$78
Adding number conversion cast (snumber) -$78 in (number~) testSigned::$5 ← (signed byte) testSigned::sbc1#0 + (number) -$78
Adding number conversion cast (snumber) testSigned::$5 in (number~) testSigned::$5 ← (signed byte) testSigned::sbc1#0 + (snumber)(number) -$78
Adding number conversion cast (snumber) -$78 in (number~) testSigned::$7 ← (number) -$78 + (signed byte) testSigned::sbc1#0
Adding number conversion cast (snumber) testSigned::$7 in (number~) testSigned::$7 ← (snumber)(number) -$78 + (signed byte) testSigned::sbc1#0
Adding number conversion cast (snumber) -$78 in (number~) testSigned::$9 ← (signed byte) testSigned::sbv1#0 + (number) -$78
Adding number conversion cast (snumber) testSigned::$9 in (number~) testSigned::$9 ← (signed byte) testSigned::sbv1#0 + (snumber)(number) -$78
Adding number conversion cast (snumber) -$78 in (number~) testSigned::$11 ← (number) -$78 + (signed byte) testSigned::sbv1#0
Adding number conversion cast (snumber) testSigned::$11 in (number~) testSigned::$11 ← (snumber)(number) -$78 + (signed byte) testSigned::sbv1#0
Adding number conversion cast (snumber) -$78 in (signed byte) testSignedVals::sbc1#0 ← (number) -$78
Adding number conversion cast (snumber) -$78 in (signed byte) testSignedVals::sbv1#0 ← (number) -$78
Adding number conversion cast (snumber) -$78 in *((signed byte*) SSCREEN#0 + (byte) idx#70) ← (number) -$78
Adding number conversion cast (snumber) testSignedVals::$0 in *((signed byte*) SSCREEN#0 + (byte) idx#48) ← (number~) testSignedVals::$0
Adding number conversion cast (snumber) -$78 in (number~) testSignedVals::$1 ← (signed byte) testSignedVals::sbc1#0 + (number) -$78
Adding number conversion cast (snumber) testSignedVals::$1 in (number~) testSignedVals::$1 ← (signed byte) testSignedVals::sbc1#0 + (snumber)(number) -$78
Adding number conversion cast (snumber) -$78 in (number~) testSignedVals::$2 ← (number) -$78 + (signed byte) testSignedVals::sbc1#0
Adding number conversion cast (snumber) testSignedVals::$2 in (number~) testSignedVals::$2 ← (snumber)(number) -$78 + (signed byte) testSignedVals::sbc1#0
Adding number conversion cast (snumber) -$78 in (number~) testSignedVals::$3 ← (signed byte) testSignedVals::sbv1#0 + (number) -$78
Adding number conversion cast (snumber) testSignedVals::$3 in (number~) testSignedVals::$3 ← (signed byte) testSignedVals::sbv1#0 + (snumber)(number) -$78
Adding number conversion cast (snumber) -$78 in (number~) testSignedVals::$4 ← (number) -$78 + (signed byte) testSignedVals::sbv1#0
Adding number conversion cast (snumber) testSignedVals::$4 in (number~) testSignedVals::$4 ← (snumber)(number) -$78 + (signed byte) testSignedVals::sbv1#0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast (signed byte*) SSCREEN#0 ← (signed byte*)(number) $400
Inlining cast (byte) idx#0 ← (unumber)(number) 0
Inlining cast (byte) idx#1 ← (unumber)(number) 0
Inlining cast (byte) idx#3 ← (unumber)(number) $28
Inlining cast (byte) idx#5 ← (unumber)(number~) main::$2
Inlining cast (byte) idx#7 ← (unumber)(number~) main::$4
Inlining cast (byte) testUnsigned::ubc1#0 ← (unumber)(number) $fa
Inlining cast (byte) testUnsigned::ubv1#0 ← (unumber)(number) $fa
Inlining cast (byte) testUnsignedVals::ubc1#0 ← (unumber)(number) $fa
Inlining cast (byte) testUnsignedVals::ubv1#0 ← (unumber)(number) $fa
Inlining cast *((byte*) SCREEN#0 + (byte) idx#66) ← (unumber)(number) $fa
Inlining cast *((byte*) SCREEN#0 + (byte) idx#24) ← (unumber)(number~) testUnsignedVals::$0
Inlining cast (signed byte) testSigned::sbc1#0 ← (snumber)(number) -$78
Inlining cast (signed byte) testSigned::sbv1#0 ← (snumber)(number) -$78
Inlining cast (signed byte) testSignedVals::sbc1#0 ← (snumber)(number) -$78
Inlining cast (signed byte) testSignedVals::sbv1#0 ← (snumber)(number) -$78
Inlining cast *((signed byte*) SSCREEN#0 + (byte) idx#70) ← (snumber)(number) -$78
Inlining cast *((signed byte*) SSCREEN#0 + (byte) idx#48) ← (snumber)(number~) testSignedVals::$0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (signed byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Simplifying constant integer cast -$78
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) $fa
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Finalized signed number type (signed byte) -$78
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) testUnsigned::$5 ← (byte) testUnsigned::ubc1#0 + (byte) $fa
Inferred type updated to byte in (unumber~) testUnsigned::$7 ← (byte) $fa + (byte) testUnsigned::ubc1#0
Inferred type updated to byte in (unumber~) testUnsigned::$9 ← (byte) testUnsigned::ubv1#0 + (byte) $fa
Inferred type updated to byte in (unumber~) testUnsigned::$11 ← (byte) $fa + (byte) testUnsigned::ubv1#0
Inferred type updated to byte in (unumber~) testUnsignedVals::$1 ← (byte) testUnsignedVals::ubc1#0 + (byte) $fa
Inferred type updated to byte in (unumber~) testUnsignedVals::$2 ← (byte) $fa + (byte) testUnsignedVals::ubc1#0
Inferred type updated to byte in (unumber~) testUnsignedVals::$3 ← (byte) testUnsignedVals::ubv1#0 + (byte) $fa
Inferred type updated to byte in (unumber~) testUnsignedVals::$4 ← (byte) $fa + (byte) testUnsignedVals::ubv1#0
Inferred type updated to signed byte in (snumber~) testSigned::$5 ← (signed byte) testSigned::sbc1#0 + (signed byte) -$78
Inferred type updated to signed byte in (snumber~) testSigned::$7 ← (signed byte) -$78 + (signed byte) testSigned::sbc1#0
Inferred type updated to signed byte in (snumber~) testSigned::$9 ← (signed byte) testSigned::sbv1#0 + (signed byte) -$78
Inferred type updated to signed byte in (snumber~) testSigned::$11 ← (signed byte) -$78 + (signed byte) testSigned::sbv1#0
Inferred type updated to signed byte in (snumber~) testSignedVals::$1 ← (signed byte) testSignedVals::sbc1#0 + (signed byte) -$78
Inferred type updated to signed byte in (snumber~) testSignedVals::$2 ← (signed byte) -$78 + (signed byte) testSignedVals::sbc1#0
Inferred type updated to signed byte in (snumber~) testSignedVals::$3 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) -$78
Inferred type updated to signed byte in (snumber~) testSignedVals::$4 ← (signed byte) -$78 + (signed byte) testSignedVals::sbv1#0
Resolving typeid() (byte~) testUnsigned::$6 ← typeid  (byte~) testUnsigned::$5
Resolving typeid() (byte~) testUnsigned::$8 ← typeid  (byte~) testUnsigned::$7
Resolving typeid() (byte~) testUnsigned::$10 ← typeid  (byte~) testUnsigned::$9
Resolving typeid() (byte~) testUnsigned::$12 ← typeid  (byte~) testUnsigned::$11
Resolving typeid() (byte~) testSigned::$6 ← typeid  (signed byte~) testSigned::$5
Resolving typeid() (byte~) testSigned::$8 ← typeid  (signed byte~) testSigned::$7
Resolving typeid() (byte~) testSigned::$10 ← typeid  (signed byte~) testSigned::$9
Resolving typeid() (byte~) testSigned::$12 ← typeid  (signed byte~) testSigned::$11
Successful SSA optimization PassNTypeIdSimplification
Alias (byte) idx#2 = (byte) idx#59 
Alias (byte) idx#4 = (byte) idx#60 
Alias (byte) idx#6 = (byte) idx#61 
Alias (byte) idx#62 = (byte) idx#8 (byte) idx#63 (byte) idx#9 
Alias (byte) idx#20 = (byte) idx#65 (byte) idx#21 
Alias (byte) idx#32 = (byte) idx#67 (byte) idx#33 
Alias (byte) idx#44 = (byte) idx#69 (byte) idx#45 
Alias (byte) idx#56 = (byte) idx#71 (byte) idx#57 
Alias (byte) idx#0 = (byte) idx#73 
Alias (byte) idx#58 = (byte) idx#72 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#2 (byte) idx#20
Identical Phi Values (byte) idx#4 (byte) idx#32
Identical Phi Values (byte) idx#6 (byte) idx#44
Identical Phi Values (byte) idx#62 (byte) idx#56
Identical Phi Values (byte) idx#64 (byte) idx#1
Identical Phi Values (byte) idx#66 (byte) idx#3
Identical Phi Values (byte) idx#68 (byte) idx#5
Identical Phi Values (byte) idx#70 (byte) idx#7
Identical Phi Values (byte) idx#58 (byte) idx#62
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [11] (number~) main::$2 ← (number) $28 * (number) 2
Constant right-side identified [16] (number~) main::$4 ← (number) $28 * (number) 3
Constant right-side identified [27] (byte~) testUnsigned::$0 ← typeid  (number) $fa
Constant right-side identified [36] (number~) testUnsigned::$3 ← (number) $78 + (number) $82
Constant right-side identified [77] (number~) testUnsignedVals::$0 ← (number) $78 + (number) $82
Constant right-side identified [107] (byte~) testSigned::$0 ← typeid  (number) -$78
Constant right-side identified [116] (number~) testSigned::$3 ← (number) -$78 + (number) -$82
Constant right-side identified [157] (number~) testSignedVals::$0 ← (number) -$46 + (number) -$32
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const signed byte*) SSCREEN#0 = (signed byte*) 1024
Constant (const byte) idx#0 = 0
Constant (const byte) idx#1 = 0
Constant (const byte) idx#3 = $28
Constant (const number) main::$2 = $28*2
Constant (const number) main::$4 = $28*3
Constant (const byte) testUnsigned::ubc1#0 = $fa
Constant (const byte) testUnsigned::$0 = typeid $fa
Constant (const byte) testUnsigned::$1 = TYPEID_BYTE
Constant (const byte) testUnsigned::$2 = TYPEID_BYTE
Constant (const number) testUnsigned::$3 = $78+$82
Constant (const byte) testUnsigned::$6 = TYPEID_BYTE
Constant (const byte) testUnsigned::$8 = TYPEID_BYTE
Constant (const byte) testUnsigned::$10 = TYPEID_BYTE
Constant (const byte) testUnsigned::$12 = TYPEID_BYTE
Constant (const byte) testUnsigned::$14 = TYPEID_BYTE
Constant (const byte) testUnsigned::$16 = TYPEID_BYTE
Constant (const byte) testUnsigned::$18 = TYPEID_BYTE
Constant (const byte) testUnsignedVals::ubc1#0 = $fa
Constant (const number) testUnsignedVals::$0 = $78+$82
Constant (const signed byte) testSigned::sbc1#0 = -$78
Constant (const byte) testSigned::$0 = typeid -$78
Constant (const byte) testSigned::$1 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$2 = TYPEID_SIGNED_BYTE
Constant (const number) testSigned::$3 = -$78+-$82
Constant (const byte) testSigned::$6 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$8 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$10 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$12 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$14 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$16 = TYPEID_SIGNED_BYTE
Constant (const byte) testSigned::$18 = TYPEID_SIGNED_BYTE
Constant (const signed byte) testSignedVals::sbc1#0 = -$78
Constant (const number) testSignedVals::$0 = -$46+-$32
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (unumber)main::$2 in [12] (byte) idx#5 ← (unumber)(const number) main::$2
Constant value identified (unumber)main::$4 in [17] (byte) idx#7 ← (unumber)(const number) main::$4
Constant value identified (unumber)testUnsignedVals::$0 in [78] *((const byte*) SCREEN#0 + (byte) idx#24) ← (unumber)(const number) testUnsignedVals::$0
Constant value identified (snumber)testSignedVals::$0 in [158] *((const signed byte*) SSCREEN#0 + (byte) idx#48) ← (snumber)(const number) testSignedVals::$0
Successful SSA optimization Pass2ConstantValues
Simplifying constant evaluating to zero typeid (number) $fa in 
Simplifying constant evaluating to zero typeid (number) -$78 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero SCREEN#0 in [28] *((const byte*) SCREEN#0 + (const byte) idx#1) ← (const byte) testUnsigned::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte~) testUnsigned::$5 and assignment [17] (byte~) testUnsigned::$5 ← (const byte) testUnsigned::ubc1#0 + (byte) $fa
Eliminating unused variable (byte~) testUnsigned::$7 and assignment [20] (byte~) testUnsigned::$7 ← (byte) $fa + (const byte) testUnsigned::ubc1#0
Eliminating unused variable (byte~) testUnsigned::$9 and assignment [23] (byte~) testUnsigned::$9 ← (byte) testUnsigned::ubv1#0 + (byte) $fa
Eliminating unused variable (byte~) testUnsigned::$11 and assignment [26] (byte~) testUnsigned::$11 ← (byte) $fa + (byte) testUnsigned::ubv1#0
Eliminating unused variable (byte) idx#20 and assignment [34] (byte) idx#20 ← ++ (byte) idx#19
Eliminating unused variable (byte) idx#32 and assignment [65] (byte) idx#32 ← ++ (byte) idx#31
Eliminating unused variable (signed byte~) testSigned::$5 and assignment [77] (signed byte~) testSigned::$5 ← (const signed byte) testSigned::sbc1#0 + (signed byte) -$78
Eliminating unused variable (signed byte~) testSigned::$7 and assignment [80] (signed byte~) testSigned::$7 ← (signed byte) -$78 + (const signed byte) testSigned::sbc1#0
Eliminating unused variable (signed byte~) testSigned::$9 and assignment [83] (signed byte~) testSigned::$9 ← (signed byte) testSigned::sbv1#0 + (signed byte) -$78
Eliminating unused variable (signed byte~) testSigned::$11 and assignment [86] (signed byte~) testSigned::$11 ← (signed byte) -$78 + (signed byte) testSigned::sbv1#0
Eliminating unused variable (byte) idx#44 and assignment [94] (byte) idx#44 ← ++ (byte) idx#43
Eliminating unused variable (byte) idx#56 and assignment [125] (byte) idx#56 ← ++ (byte) idx#55
Eliminating unused constant (const byte) idx#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) testUnsigned::ubc1#0
Eliminating unused constant (const signed byte) testSigned::sbc1#0
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [9] (byte) idx#10 ← ++ (const byte) idx#1
Constant right-side identified [14] (byte~) testUnsigned::$4 ← typeid  (const number) testUnsigned::$3
Constant right-side identified [33] (byte) idx#22 ← ++ (const byte) idx#3
Constant right-side identified [40] (byte~) testUnsignedVals::$1 ← (const byte) testUnsignedVals::ubc1#0 + (byte) $fa
Constant right-side identified [43] (byte~) testUnsignedVals::$2 ← (byte) $fa + (const byte) testUnsignedVals::ubc1#0
Constant right-side identified [68] (byte~) testSigned::$4 ← typeid  (const number) testSigned::$3
Constant right-side identified [94] (signed byte~) testSignedVals::$1 ← (const signed byte) testSignedVals::sbc1#0 + (signed byte) -$78
Constant right-side identified [97] (signed byte~) testSignedVals::$2 ← (signed byte) -$78 + (const signed byte) testSignedVals::sbc1#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#5 = (unumber)main::$2
Constant (const byte) idx#7 = (unumber)main::$4
Constant (const byte) idx#10 = ++idx#1
Constant (const byte) testUnsigned::$4 = typeid testUnsigned::$3
Constant (const byte) idx#22 = ++idx#3
Constant (const byte) testUnsignedVals::$1 = testUnsignedVals::ubc1#0+$fa
Constant (const byte) testUnsignedVals::$2 = $fa+testUnsignedVals::ubc1#0
Constant (const byte) testSigned::$4 = typeid testSigned::$3
Constant (const signed byte) testSignedVals::$1 = testSignedVals::sbc1#0+-$78
Constant (const signed byte) testSignedVals::$2 = -$78+testSignedVals::sbc1#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero typeid (const number) testUnsigned::$3 in 
Simplifying constant evaluating to zero typeid (const number) testSigned::$3 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const number) testUnsigned::$3
Eliminating unused constant (const number) testSigned::$3
Successful SSA optimization PassNEliminateUnusedVars
Simplifying constant integer cast (const unumber) main::$2
Simplifying constant integer cast (const unumber) main::$4
Simplifying constant integer cast (const unumber) testUnsignedVals::$0
Simplifying constant integer cast (const snumber) testSignedVals::$0
Successful SSA optimization PassNCastSimplification
Constant right-side identified [8] (byte) idx#11 ← ++ (const byte) idx#10
Constant right-side identified [30] (byte) idx#23 ← ++ (const byte) idx#22
Constant right-side identified [56] (byte) idx#34 ← ++ (const byte) idx#5
Constant right-side identified [79] (byte) idx#46 ← ++ (const byte) idx#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#11 = ++idx#10
Constant (const byte) idx#23 = ++idx#22
Constant (const byte) idx#34 = ++idx#5
Constant (const byte) idx#46 = ++idx#7
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [9] (byte) idx#12 ← ++ (const byte) idx#11
Constant right-side identified [30] (byte) idx#24 ← ++ (const byte) idx#23
Constant right-side identified [55] (byte) idx#35 ← ++ (const byte) idx#34
Constant right-side identified [77] (byte) idx#47 ← ++ (const byte) idx#46
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#12 = ++idx#11
Constant (const byte) idx#24 = ++idx#23
Constant (const byte) idx#35 = ++idx#34
Constant (const byte) idx#47 = ++idx#46
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [10] (byte) idx#13 ← ++ (const byte) idx#12
Constant right-side identified [30] (byte) idx#25 ← ++ (const byte) idx#24
Constant right-side identified [54] (byte) idx#36 ← ++ (const byte) idx#35
Constant right-side identified [75] (byte) idx#48 ← ++ (const byte) idx#47
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#13 = ++idx#12
Constant (const byte) idx#25 = ++idx#24
Constant (const byte) idx#36 = ++idx#35
Constant (const byte) idx#48 = ++idx#47
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] (byte) idx#14 ← ++ (const byte) idx#13
Constant right-side identified [30] (byte) idx#26 ← ++ (const byte) idx#25
Constant right-side identified [53] (byte) idx#37 ← ++ (const byte) idx#36
Constant right-side identified [73] (byte) idx#49 ← ++ (const byte) idx#48
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#14 = ++idx#13
Constant (const byte) idx#26 = ++idx#25
Constant (const byte) idx#37 = ++idx#36
Constant (const byte) idx#49 = ++idx#48
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [12] (byte) idx#15 ← ++ (const byte) idx#14
Constant right-side identified [30] (byte) idx#27 ← ++ (const byte) idx#26
Constant right-side identified [52] (byte) idx#38 ← ++ (const byte) idx#37
Constant right-side identified [71] (byte) idx#50 ← ++ (const byte) idx#49
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#15 = ++idx#14
Constant (const byte) idx#27 = ++idx#26
Constant (const byte) idx#38 = ++idx#37
Constant (const byte) idx#50 = ++idx#49
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [13] (byte) idx#16 ← ++ (const byte) idx#15
Constant right-side identified [31] (byte) idx#28 ← ++ (const byte) idx#27
Constant right-side identified [51] (byte) idx#39 ← ++ (const byte) idx#38
Constant right-side identified [69] (byte) idx#51 ← ++ (const byte) idx#50
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#16 = ++idx#15
Constant (const byte) idx#28 = ++idx#27
Constant (const byte) idx#39 = ++idx#38
Constant (const byte) idx#51 = ++idx#50
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [14] (byte) idx#17 ← ++ (const byte) idx#16
Constant right-side identified [32] (byte) idx#29 ← ++ (const byte) idx#28
Constant right-side identified [50] (byte) idx#40 ← ++ (const byte) idx#39
Constant right-side identified [68] (byte) idx#52 ← ++ (const byte) idx#51
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#17 = ++idx#16
Constant (const byte) idx#29 = ++idx#28
Constant (const byte) idx#40 = ++idx#39
Constant (const byte) idx#52 = ++idx#51
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [15] (byte) idx#18 ← ++ (const byte) idx#17
Constant right-side identified [33] (byte) idx#30 ← ++ (const byte) idx#29
Constant right-side identified [49] (byte) idx#41 ← ++ (const byte) idx#40
Constant right-side identified [67] (byte) idx#53 ← ++ (const byte) idx#52
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#18 = ++idx#17
Constant (const byte) idx#30 = ++idx#29
Constant (const byte) idx#41 = ++idx#40
Constant (const byte) idx#53 = ++idx#52
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [16] (byte) idx#19 ← ++ (const byte) idx#18
Constant right-side identified [34] (byte) idx#31 ← ++ (const byte) idx#30
Constant right-side identified [48] (byte) idx#42 ← ++ (const byte) idx#41
Constant right-side identified [66] (byte) idx#54 ← ++ (const byte) idx#53
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#19 = ++idx#18
Constant (const byte) idx#31 = ++idx#30
Constant (const byte) idx#42 = ++idx#41
Constant (const byte) idx#54 = ++idx#53
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [47] (byte) idx#43 ← ++ (const byte) idx#42
Constant right-side identified [65] (byte) idx#55 ← ++ (const byte) idx#54
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#43 = ++idx#42
Constant (const byte) idx#55 = ++idx#54
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) idx#1
Inlining constant with different constant siblings (const byte) idx#3
Inlining constant with different constant siblings (const byte) idx#5
Inlining constant with different constant siblings (const byte) idx#7
Inlining constant with different constant siblings (const byte) idx#10
Inlining constant with different constant siblings (const byte) idx#22
Inlining constant with different constant siblings (const byte) idx#11
Inlining constant with different constant siblings (const byte) idx#23
Inlining constant with different constant siblings (const byte) idx#34
Inlining constant with different constant siblings (const byte) idx#46
Inlining constant with different constant siblings (const byte) idx#12
Inlining constant with different constant siblings (const byte) idx#24
Inlining constant with different constant siblings (const byte) idx#35
Inlining constant with different constant siblings (const byte) idx#47
Inlining constant with different constant siblings (const byte) idx#13
Inlining constant with different constant siblings (const byte) idx#25
Inlining constant with different constant siblings (const byte) idx#36
Inlining constant with different constant siblings (const byte) idx#48
Inlining constant with different constant siblings (const byte) idx#14
Inlining constant with different constant siblings (const byte) idx#26
Inlining constant with different constant siblings (const byte) idx#37
Inlining constant with different constant siblings (const byte) idx#49
Inlining constant with different constant siblings (const byte) idx#15
Inlining constant with different constant siblings (const byte) idx#27
Inlining constant with different constant siblings (const byte) idx#38
Inlining constant with different constant siblings (const byte) idx#50
Inlining constant with different constant siblings (const byte) idx#16
Inlining constant with different constant siblings (const byte) idx#28
Inlining constant with different constant siblings (const byte) idx#39
Inlining constant with different constant siblings (const byte) idx#51
Inlining constant with different constant siblings (const byte) idx#17
Inlining constant with different constant siblings (const byte) idx#29
Inlining constant with different constant siblings (const byte) idx#40
Inlining constant with different constant siblings (const byte) idx#52
Inlining constant with different constant siblings (const byte) idx#18
Inlining constant with different constant siblings (const byte) idx#30
Inlining constant with different constant siblings (const byte) idx#41
Inlining constant with different constant siblings (const byte) idx#53
Inlining constant with different constant siblings (const byte) idx#19
Inlining constant with different constant siblings (const byte) idx#31
Inlining constant with different constant siblings (const byte) idx#42
Inlining constant with different constant siblings (const byte) idx#54
Inlining constant with different constant siblings (const byte) idx#43
Inlining constant with different constant siblings (const byte) idx#55
Constant inlined testUnsigned::$4 = (byte) 0
Constant inlined idx#31 = ++++++++++++++++++++(byte) $28
Constant inlined testUnsigned::$1 = (const byte) TYPEID_BYTE
Constant inlined idx#34 = ++(number) $28*(number) 2
Constant inlined testUnsigned::$2 = (const byte) TYPEID_BYTE
Constant inlined testUnsigned::$0 = (byte) 0
Constant inlined idx#30 = ++++++++++++++++++(byte) $28
Constant inlined idx#7 = (number) $28*(number) 3
Constant inlined idx#39 = ++++++++++++(number) $28*(number) 2
Constant inlined idx#36 = ++++++(number) $28*(number) 2
Constant inlined testUnsigned::$8 = (const byte) TYPEID_BYTE
Constant inlined idx#35 = ++++(number) $28*(number) 2
Constant inlined idx#38 = ++++++++++(number) $28*(number) 2
Constant inlined testUnsigned::$6 = (const byte) TYPEID_BYTE
Constant inlined idx#37 = ++++++++(number) $28*(number) 2
Constant inlined testUnsigned::$18 = (const byte) TYPEID_BYTE
Constant inlined testUnsigned::$16 = (const byte) TYPEID_BYTE
Constant inlined testUnsigned::$14 = (const byte) TYPEID_BYTE
Constant inlined idx#5 = (number) $28*(number) 2
Constant inlined idx#3 = (byte) $28
Constant inlined idx#1 = (byte) 0
Constant inlined idx#23 = ++++(byte) $28
Constant inlined idx#22 = ++(byte) $28
Constant inlined idx#29 = ++++++++++++++++(byte) $28
Constant inlined idx#28 = ++++++++++++++(byte) $28
Constant inlined idx#25 = ++++++++(byte) $28
Constant inlined idx#24 = ++++++(byte) $28
Constant inlined idx#27 = ++++++++++++(byte) $28
Constant inlined idx#26 = ++++++++++(byte) $28
Constant inlined testUnsignedVals::$0 = (number) $78+(number) $82
Constant inlined testUnsignedVals::$1 = (const byte) testUnsignedVals::ubc1#0+(byte) $fa
Constant inlined testUnsignedVals::$2 = (byte) $fa+(const byte) testUnsignedVals::ubc1#0
Constant inlined idx#10 = ++(byte) 0
Constant inlined idx#54 = ++++++++++++++++++(number) $28*(number) 3
Constant inlined idx#53 = ++++++++++++++++(number) $28*(number) 3
Constant inlined idx#12 = ++++++(byte) 0
Constant inlined idx#11 = ++++(byte) 0
Constant inlined idx#55 = ++++++++++++++++++++(number) $28*(number) 3
Constant inlined idx#50 = ++++++++++(number) $28*(number) 3
Constant inlined idx#52 = ++++++++++++++(number) $28*(number) 3
Constant inlined idx#51 = ++++++++++++(number) $28*(number) 3
Constant inlined idx#18 = ++++++++++++++++++(byte) 0
Constant inlined idx#17 = ++++++++++++++++(byte) 0
Constant inlined idx#19 = ++++++++++++++++++++(byte) 0
Constant inlined idx#14 = ++++++++++(byte) 0
Constant inlined idx#13 = ++++++++(byte) 0
Constant inlined idx#16 = ++++++++++++++(byte) 0
Constant inlined idx#15 = ++++++++++++(byte) 0
Constant inlined testSigned::$6 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$8 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$2 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$18 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined idx#43 = ++++++++++++++++++++(number) $28*(number) 2
Constant inlined idx#42 = ++++++++++++++++++(number) $28*(number) 2
Constant inlined testSigned::$4 = (byte) 0
Constant inlined testSigned::$14 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$16 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSigned::$0 = (byte) 0
Constant inlined idx#41 = ++++++++++++++++(number) $28*(number) 2
Constant inlined testSigned::$1 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined idx#40 = ++++++++++++++(number) $28*(number) 2
Constant inlined testSigned::$10 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testUnsigned::$12 = (const byte) TYPEID_BYTE
Constant inlined testSignedVals::$2 = (signed byte) -$78+(const signed byte) testSignedVals::sbc1#0
Constant inlined testSigned::$12 = (const byte) TYPEID_SIGNED_BYTE
Constant inlined testSignedVals::$1 = (const signed byte) testSignedVals::sbc1#0+(signed byte) -$78
Constant inlined testUnsigned::$10 = (const byte) TYPEID_BYTE
Constant inlined testSignedVals::$0 = (number) -$46+(number) -$32
Constant inlined idx#47 = ++++(number) $28*(number) 3
Constant inlined idx#46 = ++(number) $28*(number) 3
Constant inlined idx#49 = ++++++++(number) $28*(number) 3
Constant inlined idx#48 = ++++++(number) $28*(number) 3
Constant inlined main::$2 = (number) $28*(number) 2
Constant inlined main::$4 = (number) $28*(number) 3
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN#0+++0)
Consolidated array index constant in *(SCREEN#0+++++0)
Consolidated array index constant in *(SCREEN#0+++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+$28)
Consolidated array index constant in *(SCREEN#0+++$28)
Consolidated array index constant in *(SCREEN#0+++++$28)
Consolidated array index constant in *(SCREEN#0+++++++$28)
Consolidated array index constant in *(SCREEN#0+++++++++$28)
Consolidated array index constant in *(SCREEN#0+++++++++++$28)
Consolidated array index constant in *(SCREEN#0+++++++++++++$28)
Consolidated array index constant in *(SCREEN#0+++++++++++++++$28)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++$28)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++$28)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++$28)
Consolidated array index constant in *(SCREEN#0+$28*2)
Consolidated array index constant in *(SCREEN#0+++$28*2)
Consolidated array index constant in *(SCREEN#0+++++$28*2)
Consolidated array index constant in *(SCREEN#0+++++++$28*2)
Consolidated array index constant in *(SCREEN#0+++++++++$28*2)
Consolidated array index constant in *(SCREEN#0+++++++++++$28*2)
Consolidated array index constant in *(SCREEN#0+++++++++++++$28*2)
Consolidated array index constant in *(SCREEN#0+++++++++++++++$28*2)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++$28*2)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++$28*2)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++$28*2)
Consolidated array index constant in *(SSCREEN#0+$28*3)
Consolidated array index constant in *(SSCREEN#0+++$28*3)
Consolidated array index constant in *(SSCREEN#0+++++$28*3)
Consolidated array index constant in *(SSCREEN#0+++++++$28*3)
Consolidated array index constant in *(SSCREEN#0+++++++++$28*3)
Consolidated array index constant in *(SSCREEN#0+++++++++++$28*3)
Consolidated array index constant in *(SSCREEN#0+++++++++++++$28*3)
Consolidated array index constant in *(SSCREEN#0+++++++++++++++$28*3)
Consolidated array index constant in *(SSCREEN#0+++++++++++++++++$28*3)
Consolidated array index constant in *(SSCREEN#0+++++++++++++++++++$28*3)
Consolidated array index constant in *(SSCREEN#0+++++++++++++++++++++$28*3)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++$28
Simplifying constant integer increment ++$28
Simplifying constant integer increment ++$29
Simplifying constant integer increment ++$2a
Simplifying constant integer increment ++$2b
Simplifying constant integer increment ++$2c
Simplifying constant integer increment ++$2d
Simplifying constant integer increment ++$2e
Simplifying constant integer increment ++$2f
Simplifying constant integer increment ++$30
Simplifying constant integer increment ++$28*2
Simplifying constant integer increment ++$28*2
Simplifying constant integer increment ++$28*2+1
Simplifying constant integer increment ++$28*2+2
Simplifying constant integer increment ++$28*2+3
Simplifying constant integer increment ++$28*2+4
Simplifying constant integer increment ++$28*2+5
Simplifying constant integer increment ++$28*2+6
Simplifying constant integer increment ++$28*2+7
Simplifying constant integer increment ++$28*2+8
Simplifying constant integer increment ++$28*3
Simplifying constant integer increment ++$28*3
Simplifying constant integer increment ++$28*3+1
Simplifying constant integer increment ++$28*3+2
Simplifying constant integer increment ++$28*3+3
Simplifying constant integer increment ++$28*3+4
Simplifying constant integer increment ++$28*3+5
Simplifying constant integer increment ++$28*3+6
Simplifying constant integer increment ++$28*3+7
Simplifying constant integer increment ++$28*3+8
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$29
Simplifying constant integer increment ++$2a
Simplifying constant integer increment ++$2b
Simplifying constant integer increment ++$2c
Simplifying constant integer increment ++$2d
Simplifying constant integer increment ++$2e
Simplifying constant integer increment ++$2f
Simplifying constant integer increment ++$30
Simplifying constant integer increment ++$31
Simplifying constant integer increment ++$28*2+1
Simplifying constant integer increment ++$28*2+2
Simplifying constant integer increment ++$28*2+3
Simplifying constant integer increment ++$28*2+4
Simplifying constant integer increment ++$28*2+5
Simplifying constant integer increment ++$28*2+6
Simplifying constant integer increment ++$28*2+7
Simplifying constant integer increment ++$28*2+8
Simplifying constant integer increment ++$28*2+9
Simplifying constant integer increment ++$28*3+1
Simplifying constant integer increment ++$28*3+2
Simplifying constant integer increment ++$28*3+3
Simplifying constant integer increment ++$28*3+4
Simplifying constant integer increment ++$28*3+5
Simplifying constant integer increment ++$28*3+6
Simplifying constant integer increment ++$28*3+7
Simplifying constant integer increment ++$28*3+8
Simplifying constant integer increment ++$28*3+9
Successful SSA optimization Pass2ConstantSimplification
Adding number conversion cast (unumber) $78+$82 in [22] *((const byte*) SCREEN#0+(byte) $2b) ← (number) $78+(number) $82
Adding number conversion cast (unumber) $28*2 in [37] *((const byte*) SCREEN#0+(number) $28*(number) 2) ← (byte) 0
Adding number conversion cast (unumber) $28*2+1 in [38] *((const byte*) SCREEN#0+(number) $28*(number) 2+(number) 1) ← (const byte) TYPEID_SIGNED_BYTE
Adding number conversion cast (unumber) $28*2+2 in [39] *((const byte*) SCREEN#0+(number) $28*(number) 2+(number) 2) ← (const byte) TYPEID_SIGNED_BYTE
Adding number conversion cast (unumber) $28*2+3 in [40] *((const byte*) SCREEN#0+(number) $28*(number) 2+(number) 3) ← (byte) 0
Adding number conversion cast (unumber) $28*2+4 in [41] *((const byte*) SCREEN#0+(number) $28*(number) 2+(number) 4) ← (const byte) TYPEID_SIGNED_BYTE
Adding number conversion cast (unumber) $28*2+5 in [42] *((const byte*) SCREEN#0+(number) $28*(number) 2+(number) 5) ← (const byte) TYPEID_SIGNED_BYTE
Adding number conversion cast (unumber) $28*2+6 in [43] *((const byte*) SCREEN#0+(number) $28*(number) 2+(number) 6) ← (const byte) TYPEID_SIGNED_BYTE
Adding number conversion cast (unumber) $28*2+7 in [44] *((const byte*) SCREEN#0+(number) $28*(number) 2+(number) 7) ← (const byte) TYPEID_SIGNED_BYTE
Adding number conversion cast (unumber) $28*2+8 in [45] *((const byte*) SCREEN#0+(number) $28*(number) 2+(number) 8) ← (const byte) TYPEID_SIGNED_BYTE
Adding number conversion cast (unumber) $28*2+9 in [46] *((const byte*) SCREEN#0+(number) $28*(number) 2+(number) 9) ← (const byte) TYPEID_SIGNED_BYTE
Adding number conversion cast (unumber) $28*2+$a in [47] *((const byte*) SCREEN#0+(number) $28*(number) 2+(number) $a) ← (const byte) TYPEID_SIGNED_BYTE
Adding number conversion cast (unumber) $28*3 in [50] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3) ← (signed byte) -$78
Adding number conversion cast (unumber) $28*3+1 in [51] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) 1) ← (const signed byte) testSignedVals::sbc1#0
Adding number conversion cast (unumber) $28*3+2 in [52] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) 2) ← (signed byte) testSignedVals::sbv1#0
Adding number conversion cast (snumber) -$46+-$32 in [53] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) 3) ← (number) -$46+(number) -$32
Adding number conversion cast (unumber) $28*3+3 in [53] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) 3) ← ((snumber)) (number) -$46+(number) -$32
Adding number conversion cast (unumber) $28*3+4 in [54] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) 4) ← (const signed byte) testSignedVals::sbc1#0+(signed byte) -$78
Adding number conversion cast (unumber) $28*3+5 in [55] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) 5) ← (signed byte) -$78+(const signed byte) testSignedVals::sbc1#0
Adding number conversion cast (unumber) $28*3+6 in [57] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) 6) ← (signed byte~) testSignedVals::$3
Adding number conversion cast (unumber) $28*3+7 in [59] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) 7) ← (signed byte~) testSignedVals::$4
Adding number conversion cast (unumber) $28*3+8 in [61] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) 8) ← (signed byte~) testSignedVals::$5
Adding number conversion cast (unumber) $28*3+9 in [63] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) 9) ← (signed byte~) testSignedVals::$6
Adding number conversion cast (unumber) $28*3+$a in [65] *((const signed byte*) SSCREEN#0+(number) $28*(number) 3+(number) $a) ← (signed byte~) testSignedVals::$7
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [22] *((const byte*) SCREEN#0+(byte) $2b) ← (unumber)(number) $78+(number) $82
Inlining cast [53] *((const signed byte*) SSCREEN#0+(unumber)(number) $28*(number) 3+(number) 3) ← (snumber)(number) -$46+(number) -$32
Successful SSA optimization Pass2InlineCast
Constant right-side identified [22] *((const byte*) SCREEN#0+(byte) $2b) ← (unumber)(number) $78+(number) $82
Constant right-side identified [53] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 3) ← (snumber)(number) -$46+(number) -$32
Successful SSA optimization Pass2ConstantRValueConsolidation
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @5
Adding NOP phi() at start of @6
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to testUnsigned:6 testUnsignedVals:8 testSigned:10 testSignedVals:12 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @6
Culled Empty Block (label) main::@4
Renumbering block @5 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call testUnsigned 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call testUnsignedVals 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call testSigned 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi()
  [11] call testSignedVals 
  to:main::@return
main::@return: scope:[main]  from main::@3
  [12] return 
  to:@return
testSignedVals: scope:[testSignedVals]  from main::@3
  [13] (signed byte) testSignedVals::sbv1#0 ← (signed byte) -$78
  [14] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3) ← (signed byte) -$78
  [15] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 1) ← (const signed byte) testSignedVals::sbc1#0
  [16] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 2) ← (signed byte) testSignedVals::sbv1#0
  [17] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 3) ← (signed byte)(number) -$46+(number) -$32
  [18] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 4) ← (const signed byte) testSignedVals::sbc1#0+(signed byte) -$78
  [19] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 5) ← (signed byte) -$78+(const signed byte) testSignedVals::sbc1#0
  [20] (signed byte~) testSignedVals::$3 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) -$78
  [21] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 6) ← (signed byte~) testSignedVals::$3
  [22] (signed byte~) testSignedVals::$4 ← (signed byte) -$78 + (signed byte) testSignedVals::sbv1#0
  [23] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 7) ← (signed byte~) testSignedVals::$4
  [24] (signed byte~) testSignedVals::$5 ← (signed byte) testSignedVals::sbv1#0 + (const signed byte) testSignedVals::sbc1#0
  [25] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 8) ← (signed byte~) testSignedVals::$5
  [26] (signed byte~) testSignedVals::$6 ← (const signed byte) testSignedVals::sbc1#0 + (signed byte) testSignedVals::sbv1#0
  [27] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 9) ← (signed byte~) testSignedVals::$6
  [28] (signed byte~) testSignedVals::$7 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) testSignedVals::sbv1#0
  [29] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) $a) ← (signed byte~) testSignedVals::$7
  to:testSignedVals::@return
testSignedVals::@return: scope:[testSignedVals]  from testSignedVals
  [30] return 
  to:@return
testSigned: scope:[testSigned]  from main::@2
  [31] (signed byte) testSigned::sbv1#0 ← (signed byte) -$78
  [32] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2) ← (byte) 0
  [33] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 1) ← (const byte) TYPEID_SIGNED_BYTE
  [34] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 2) ← (const byte) TYPEID_SIGNED_BYTE
  [35] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 3) ← (byte) 0
  [36] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 4) ← (const byte) TYPEID_SIGNED_BYTE
  [37] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 5) ← (const byte) TYPEID_SIGNED_BYTE
  [38] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 6) ← (const byte) TYPEID_SIGNED_BYTE
  [39] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 7) ← (const byte) TYPEID_SIGNED_BYTE
  [40] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 8) ← (const byte) TYPEID_SIGNED_BYTE
  [41] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 9) ← (const byte) TYPEID_SIGNED_BYTE
  [42] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) $a) ← (const byte) TYPEID_SIGNED_BYTE
  to:testSigned::@return
testSigned::@return: scope:[testSigned]  from testSigned
  [43] return 
  to:@return
testUnsignedVals: scope:[testUnsignedVals]  from main::@1
  [44] (byte) testUnsignedVals::ubv1#0 ← (byte) $fa
  [45] *((const byte*) SCREEN#0+(byte) $28) ← (byte) $fa
  [46] *((const byte*) SCREEN#0+(byte) $29) ← (const byte) testUnsignedVals::ubc1#0
  [47] *((const byte*) SCREEN#0+(byte) $2a) ← (byte) testUnsignedVals::ubv1#0
  [48] *((const byte*) SCREEN#0+(byte) $2b) ← (byte)(number) $78+(number) $82
  [49] *((const byte*) SCREEN#0+(byte) $2c) ← (const byte) testUnsignedVals::ubc1#0+(byte) $fa
  [50] *((const byte*) SCREEN#0+(byte) $2d) ← (byte) $fa+(const byte) testUnsignedVals::ubc1#0
  [51] (byte~) testUnsignedVals::$3 ← (byte) testUnsignedVals::ubv1#0 + (byte) $fa
  [52] *((const byte*) SCREEN#0+(byte) $2e) ← (byte~) testUnsignedVals::$3
  [53] (byte~) testUnsignedVals::$4 ← (byte) $fa + (byte) testUnsignedVals::ubv1#0
  [54] *((const byte*) SCREEN#0+(byte) $2f) ← (byte~) testUnsignedVals::$4
  [55] (byte~) testUnsignedVals::$5 ← (byte) testUnsignedVals::ubv1#0 + (const byte) testUnsignedVals::ubc1#0
  [56] *((const byte*) SCREEN#0+(byte) $30) ← (byte~) testUnsignedVals::$5
  [57] (byte~) testUnsignedVals::$6 ← (const byte) testUnsignedVals::ubc1#0 + (byte) testUnsignedVals::ubv1#0
  [58] *((const byte*) SCREEN#0+(byte) $31) ← (byte~) testUnsignedVals::$6
  [59] (byte~) testUnsignedVals::$7 ← (byte) testUnsignedVals::ubv1#0 + (byte) testUnsignedVals::ubv1#0
  [60] *((const byte*) SCREEN#0+(byte) $32) ← (byte~) testUnsignedVals::$7
  to:testUnsignedVals::@return
testUnsignedVals::@return: scope:[testUnsignedVals]  from testUnsignedVals
  [61] return 
  to:@return
testUnsigned: scope:[testUnsigned]  from main
  [62] (byte) testUnsigned::ubv1#0 ← (byte) $fa
  [63] *((const byte*) SCREEN#0) ← (byte) 0
  [64] *((const byte*) SCREEN#0+(byte) 1) ← (const byte) TYPEID_BYTE
  [65] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) TYPEID_BYTE
  [66] *((const byte*) SCREEN#0+(byte) 3) ← (byte) 0
  [67] *((const byte*) SCREEN#0+(byte) 4) ← (const byte) TYPEID_BYTE
  [68] *((const byte*) SCREEN#0+(byte) 5) ← (const byte) TYPEID_BYTE
  [69] *((const byte*) SCREEN#0+(byte) 6) ← (const byte) TYPEID_BYTE
  [70] *((const byte*) SCREEN#0+(byte) 7) ← (const byte) TYPEID_BYTE
  [71] *((const byte*) SCREEN#0+(byte) 8) ← (const byte) TYPEID_BYTE
  [72] *((const byte*) SCREEN#0+(byte) 9) ← (const byte) TYPEID_BYTE
  [73] *((const byte*) SCREEN#0+(byte) $a) ← (const byte) TYPEID_BYTE
  to:testUnsigned::@return
testUnsigned::@return: scope:[testUnsigned]  from testUnsigned
  [74] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(signed byte*) SSCREEN
(byte) idx
(void()) main()
(void()) testSigned()
(signed byte) testSigned::sbc1
(signed byte) testSigned::sbv1
(signed byte) testSigned::sbv1#0 20.0
(void()) testSignedVals()
(signed byte~) testSignedVals::$3 4.0
(signed byte~) testSignedVals::$4 4.0
(signed byte~) testSignedVals::$5 4.0
(signed byte~) testSignedVals::$6 4.0
(signed byte~) testSignedVals::$7 4.0
(signed byte) testSignedVals::sbc1
(signed byte) testSignedVals::sbv1
(signed byte) testSignedVals::sbv1#0 1.0666666666666667
(void()) testUnsigned()
(byte) testUnsigned::ubc1
(byte) testUnsigned::ubv1
(byte) testUnsigned::ubv1#0 20.0
(void()) testUnsignedVals()
(byte~) testUnsignedVals::$3 4.0
(byte~) testUnsignedVals::$4 4.0
(byte~) testUnsignedVals::$5 4.0
(byte~) testUnsignedVals::$6 4.0
(byte~) testUnsignedVals::$7 4.0
(byte) testUnsignedVals::ubc1
(byte) testUnsignedVals::ubv1
(byte) testUnsignedVals::ubv1#0 1.0666666666666667

Initial phi equivalence classes
Added variable testSignedVals::$3 to zero page equivalence class [ testSignedVals::$3 ]
Added variable testSignedVals::$4 to zero page equivalence class [ testSignedVals::$4 ]
Added variable testSignedVals::$5 to zero page equivalence class [ testSignedVals::$5 ]
Added variable testSignedVals::$6 to zero page equivalence class [ testSignedVals::$6 ]
Added variable testSignedVals::$7 to zero page equivalence class [ testSignedVals::$7 ]
Added variable testUnsignedVals::$3 to zero page equivalence class [ testUnsignedVals::$3 ]
Added variable testUnsignedVals::$4 to zero page equivalence class [ testUnsignedVals::$4 ]
Added variable testUnsignedVals::$5 to zero page equivalence class [ testUnsignedVals::$5 ]
Added variable testUnsignedVals::$6 to zero page equivalence class [ testUnsignedVals::$6 ]
Added variable testUnsignedVals::$7 to zero page equivalence class [ testUnsignedVals::$7 ]
Complete equivalence classes
[ testUnsigned::ubv1#0 ]
[ testUnsignedVals::ubv1#0 ]
[ testSigned::sbv1#0 ]
[ testSignedVals::sbv1#0 ]
[ testSignedVals::$3 ]
[ testSignedVals::$4 ]
[ testSignedVals::$5 ]
[ testSignedVals::$6 ]
[ testSignedVals::$7 ]
[ testUnsignedVals::$3 ]
[ testUnsignedVals::$4 ]
[ testUnsignedVals::$5 ]
[ testUnsignedVals::$6 ]
[ testUnsignedVals::$7 ]
Allocated zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ]
Allocated zp ZP_BYTE:3 [ testUnsignedVals::ubv1#0 ]
Allocated zp ZP_BYTE:4 [ testSigned::sbv1#0 ]
Allocated zp ZP_BYTE:5 [ testSignedVals::sbv1#0 ]
Allocated zp ZP_BYTE:6 [ testSignedVals::$3 ]
Allocated zp ZP_BYTE:7 [ testSignedVals::$4 ]
Allocated zp ZP_BYTE:8 [ testSignedVals::$5 ]
Allocated zp ZP_BYTE:9 [ testSignedVals::$6 ]
Allocated zp ZP_BYTE:10 [ testSignedVals::$7 ]
Allocated zp ZP_BYTE:11 [ testUnsignedVals::$3 ]
Allocated zp ZP_BYTE:12 [ testUnsignedVals::$4 ]
Allocated zp ZP_BYTE:13 [ testUnsignedVals::$5 ]
Allocated zp ZP_BYTE:14 [ testUnsignedVals::$6 ]
Allocated zp ZP_BYTE:15 [ testUnsignedVals::$7 ]

INITIAL ASM
//SEG0 File Comments
// Test that plus creates the expected type for all legal combinations of bytes (signed/unsigned - constant/variable)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const TYPEID_BYTE = 1
  .const TYPEID_SIGNED_BYTE = 2
  .label SCREEN = $400
  .label SSCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call testUnsigned 
    jsr testUnsigned
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call testUnsignedVals 
    jsr testUnsignedVals
  //SEG15 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG16 main::@2
  b2:
  //SEG17 [9] call testSigned 
    jsr testSigned
  //SEG18 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG19 main::@3
  b3:
  //SEG20 [11] call testSignedVals 
    jsr testSignedVals
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [12] return 
    rts
}
//SEG23 testSignedVals
testSignedVals: {
    .const sbc1 = -$78
    .label _3 = 6
    .label _4 = 7
    .label _5 = 8
    .label _6 = 9
    .label _7 = $a
    .label sbv1 = 5
  //SEG24 [13] (signed byte) testSignedVals::sbv1#0 ← (signed byte) -$78 -- vbsz1=vbsc1 
    lda #-$78
    sta sbv1
  //SEG25 [14] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3) ← (signed byte) -$78 -- _deref_pbsc1=vbsc2 
    lda #-$78
    sta SSCREEN+$28*3
  //SEG26 [15] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 1) ← (const signed byte) testSignedVals::sbc1#0 -- _deref_pbsc1=vbsc2 
    lda #sbc1
    sta SSCREEN+$28*3+1
  //SEG27 [16] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 2) ← (signed byte) testSignedVals::sbv1#0 -- _deref_pbsc1=vbsz1 
    lda sbv1
    sta SSCREEN+$28*3+2
  //SEG28 [17] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 3) ← (signed byte)(number) -$46+(number) -$32 -- _deref_pbsc1=vbsc2 
    lda #-$46+-$32
    sta SSCREEN+$28*3+3
  //SEG29 [18] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 4) ← (const signed byte) testSignedVals::sbc1#0+(signed byte) -$78 -- _deref_pbsc1=vbsc2 
    lda #sbc1+-$78
    sta SSCREEN+$28*3+4
  //SEG30 [19] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 5) ← (signed byte) -$78+(const signed byte) testSignedVals::sbc1#0 -- _deref_pbsc1=vbsc2 
    lda #-$78+sbc1
    sta SSCREEN+$28*3+5
  //SEG31 [20] (signed byte~) testSignedVals::$3 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) -$78 -- vbsz1=vbsz2_plus_vbsc1 
    lax sbv1
    axs #-[-$78]
    stx _3
  //SEG32 [21] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 6) ← (signed byte~) testSignedVals::$3 -- _deref_pbsc1=vbsz1 
    lda _3
    sta SSCREEN+$28*3+6
  //SEG33 [22] (signed byte~) testSignedVals::$4 ← (signed byte) -$78 + (signed byte) testSignedVals::sbv1#0 -- vbsz1=vbsc1_plus_vbsz2 
    lax sbv1
    axs #-[-$78]
    stx _4
  //SEG34 [23] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 7) ← (signed byte~) testSignedVals::$4 -- _deref_pbsc1=vbsz1 
    lda _4
    sta SSCREEN+$28*3+7
  //SEG35 [24] (signed byte~) testSignedVals::$5 ← (signed byte) testSignedVals::sbv1#0 + (const signed byte) testSignedVals::sbc1#0 -- vbsz1=vbsz2_plus_vbsc1 
    lax sbv1
    axs #-[sbc1]
    stx _5
  //SEG36 [25] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 8) ← (signed byte~) testSignedVals::$5 -- _deref_pbsc1=vbsz1 
    lda _5
    sta SSCREEN+$28*3+8
  //SEG37 [26] (signed byte~) testSignedVals::$6 ← (const signed byte) testSignedVals::sbc1#0 + (signed byte) testSignedVals::sbv1#0 -- vbsz1=vbsc1_plus_vbsz2 
    lax sbv1
    axs #-[sbc1]
    stx _6
  //SEG38 [27] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 9) ← (signed byte~) testSignedVals::$6 -- _deref_pbsc1=vbsz1 
    lda _6
    sta SSCREEN+$28*3+9
  //SEG39 [28] (signed byte~) testSignedVals::$7 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) testSignedVals::sbv1#0 -- vbsz1=vbsz2_plus_vbsz2 
    lda sbv1
    asl
    sta _7
  //SEG40 [29] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) $a) ← (signed byte~) testSignedVals::$7 -- _deref_pbsc1=vbsz1 
    lda _7
    sta SSCREEN+$28*3+$a
    jmp breturn
  //SEG41 testSignedVals::@return
  breturn:
  //SEG42 [30] return 
    rts
}
//SEG43 testSigned
testSigned: {
    .label sbv1 = 4
  //SEG44 [31] (signed byte) testSigned::sbv1#0 ← (signed byte) -$78 -- vbsz1=vbsc1 
    lda #-$78
    sta sbv1
  //SEG45 [32] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+$28*2
  //SEG46 [33] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 1) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+1
  //SEG47 [34] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 2) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+2
  //SEG48 [35] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+$28*2+3
  //SEG49 [36] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 4) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+4
  //SEG50 [37] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 5) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+5
  //SEG51 [38] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 6) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+6
  //SEG52 [39] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 7) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+7
  //SEG53 [40] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 8) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+8
  //SEG54 [41] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 9) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+9
  //SEG55 [42] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) $a) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+$a
    jmp breturn
  //SEG56 testSigned::@return
  breturn:
  //SEG57 [43] return 
    rts
}
//SEG58 testUnsignedVals
testUnsignedVals: {
    .const ubc1 = $fa
    .label _3 = $b
    .label _4 = $c
    .label _5 = $d
    .label _6 = $e
    .label _7 = $f
    .label ubv1 = 3
  //SEG59 [44] (byte) testUnsignedVals::ubv1#0 ← (byte) $fa -- vbuz1=vbuc1 
    lda #$fa
    sta ubv1
  //SEG60 [45] *((const byte*) SCREEN#0+(byte) $28) ← (byte) $fa -- _deref_pbuc1=vbuc2 
    lda #$fa
    sta SCREEN+$28
  //SEG61 [46] *((const byte*) SCREEN#0+(byte) $29) ← (const byte) testUnsignedVals::ubc1#0 -- _deref_pbuc1=vbuc2 
    lda #ubc1
    sta SCREEN+$29
  //SEG62 [47] *((const byte*) SCREEN#0+(byte) $2a) ← (byte) testUnsignedVals::ubv1#0 -- _deref_pbuc1=vbuz1 
    lda ubv1
    sta SCREEN+$2a
  //SEG63 [48] *((const byte*) SCREEN#0+(byte) $2b) ← (byte)(number) $78+(number) $82 -- _deref_pbuc1=vbuc2 
    lda #$78+$82
    sta SCREEN+$2b
  //SEG64 [49] *((const byte*) SCREEN#0+(byte) $2c) ← (const byte) testUnsignedVals::ubc1#0+(byte) $fa -- _deref_pbuc1=vbuc2 
    lda #ubc1+$fa
    sta SCREEN+$2c
  //SEG65 [50] *((const byte*) SCREEN#0+(byte) $2d) ← (byte) $fa+(const byte) testUnsignedVals::ubc1#0 -- _deref_pbuc1=vbuc2 
    lda #$fa+ubc1
    sta SCREEN+$2d
  //SEG66 [51] (byte~) testUnsignedVals::$3 ← (byte) testUnsignedVals::ubv1#0 + (byte) $fa -- vbuz1=vbuz2_plus_vbuc1 
    lax ubv1
    axs #-[$fa]
    stx _3
  //SEG67 [52] *((const byte*) SCREEN#0+(byte) $2e) ← (byte~) testUnsignedVals::$3 -- _deref_pbuc1=vbuz1 
    lda _3
    sta SCREEN+$2e
  //SEG68 [53] (byte~) testUnsignedVals::$4 ← (byte) $fa + (byte) testUnsignedVals::ubv1#0 -- vbuz1=vbuc1_plus_vbuz2 
    lax ubv1
    axs #-[$fa]
    stx _4
  //SEG69 [54] *((const byte*) SCREEN#0+(byte) $2f) ← (byte~) testUnsignedVals::$4 -- _deref_pbuc1=vbuz1 
    lda _4
    sta SCREEN+$2f
  //SEG70 [55] (byte~) testUnsignedVals::$5 ← (byte) testUnsignedVals::ubv1#0 + (const byte) testUnsignedVals::ubc1#0 -- vbuz1=vbuz2_plus_vbuc1 
    lax ubv1
    axs #-[ubc1]
    stx _5
  //SEG71 [56] *((const byte*) SCREEN#0+(byte) $30) ← (byte~) testUnsignedVals::$5 -- _deref_pbuc1=vbuz1 
    lda _5
    sta SCREEN+$30
  //SEG72 [57] (byte~) testUnsignedVals::$6 ← (const byte) testUnsignedVals::ubc1#0 + (byte) testUnsignedVals::ubv1#0 -- vbuz1=vbuc1_plus_vbuz2 
    lax ubv1
    axs #-[ubc1]
    stx _6
  //SEG73 [58] *((const byte*) SCREEN#0+(byte) $31) ← (byte~) testUnsignedVals::$6 -- _deref_pbuc1=vbuz1 
    lda _6
    sta SCREEN+$31
  //SEG74 [59] (byte~) testUnsignedVals::$7 ← (byte) testUnsignedVals::ubv1#0 + (byte) testUnsignedVals::ubv1#0 -- vbuz1=vbuz2_plus_vbuz2 
    lda ubv1
    asl
    sta _7
  //SEG75 [60] *((const byte*) SCREEN#0+(byte) $32) ← (byte~) testUnsignedVals::$7 -- _deref_pbuc1=vbuz1 
    lda _7
    sta SCREEN+$32
    jmp breturn
  //SEG76 testUnsignedVals::@return
  breturn:
  //SEG77 [61] return 
    rts
}
//SEG78 testUnsigned
testUnsigned: {
    .label ubv1 = 2
  //SEG79 [62] (byte) testUnsigned::ubv1#0 ← (byte) $fa -- vbuz1=vbuc1 
    lda #$fa
    sta ubv1
  //SEG80 [63] *((const byte*) SCREEN#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN
  //SEG81 [64] *((const byte*) SCREEN#0+(byte) 1) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+1
  //SEG82 [65] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+2
  //SEG83 [66] *((const byte*) SCREEN#0+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+3
  //SEG84 [67] *((const byte*) SCREEN#0+(byte) 4) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+4
  //SEG85 [68] *((const byte*) SCREEN#0+(byte) 5) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+5
  //SEG86 [69] *((const byte*) SCREEN#0+(byte) 6) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+6
  //SEG87 [70] *((const byte*) SCREEN#0+(byte) 7) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+7
  //SEG88 [71] *((const byte*) SCREEN#0+(byte) 8) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+8
  //SEG89 [72] *((const byte*) SCREEN#0+(byte) 9) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+9
  //SEG90 [73] *((const byte*) SCREEN#0+(byte) $a) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+$a
    jmp breturn
  //SEG91 testUnsigned::@return
  breturn:
  //SEG92 [74] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [13] (signed byte) testSignedVals::sbv1#0 ← (signed byte) -$78 [ testSignedVals::sbv1#0 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 ] ) always clobbers reg byte a 
Statement [14] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3) ← (signed byte) -$78 [ testSignedVals::sbv1#0 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 ] ) always clobbers reg byte a 
Statement [15] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 1) ← (const signed byte) testSignedVals::sbc1#0 [ testSignedVals::sbv1#0 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 ] ) always clobbers reg byte a 
Statement [16] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 2) ← (signed byte) testSignedVals::sbv1#0 [ testSignedVals::sbv1#0 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 ] ) always clobbers reg byte a 
Statement [17] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 3) ← (signed byte)(number) -$46+(number) -$32 [ testSignedVals::sbv1#0 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 ] ) always clobbers reg byte a 
Statement [18] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 4) ← (const signed byte) testSignedVals::sbc1#0+(signed byte) -$78 [ testSignedVals::sbv1#0 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 ] ) always clobbers reg byte a 
Statement [19] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 5) ← (signed byte) -$78+(const signed byte) testSignedVals::sbc1#0 [ testSignedVals::sbv1#0 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 ] ) always clobbers reg byte a 
Statement [20] (signed byte~) testSignedVals::$3 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) -$78 [ testSignedVals::sbv1#0 testSignedVals::$3 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 testSignedVals::$3 ] ) always clobbers reg byte a 
Statement [22] (signed byte~) testSignedVals::$4 ← (signed byte) -$78 + (signed byte) testSignedVals::sbv1#0 [ testSignedVals::sbv1#0 testSignedVals::$4 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 testSignedVals::$4 ] ) always clobbers reg byte a 
Statement [24] (signed byte~) testSignedVals::$5 ← (signed byte) testSignedVals::sbv1#0 + (const signed byte) testSignedVals::sbc1#0 [ testSignedVals::sbv1#0 testSignedVals::$5 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 testSignedVals::$5 ] ) always clobbers reg byte a 
Statement [26] (signed byte~) testSignedVals::$6 ← (const signed byte) testSignedVals::sbc1#0 + (signed byte) testSignedVals::sbv1#0 [ testSignedVals::sbv1#0 testSignedVals::$6 ] ( main:2::testSignedVals:11 [ testSignedVals::sbv1#0 testSignedVals::$6 ] ) always clobbers reg byte a 
Statement [28] (signed byte~) testSignedVals::$7 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) testSignedVals::sbv1#0 [ testSignedVals::$7 ] ( main:2::testSignedVals:11 [ testSignedVals::$7 ] ) always clobbers reg byte a 
Statement [31] (signed byte) testSigned::sbv1#0 ← (signed byte) -$78 [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [32] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2) ← (byte) 0 [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [33] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 1) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [34] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 2) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [35] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 3) ← (byte) 0 [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [36] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 4) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [37] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 5) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [38] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 6) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [39] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 7) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [40] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 8) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [41] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 9) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [42] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) $a) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2::testSigned:9 [ ] ) always clobbers reg byte a 
Statement [44] (byte) testUnsignedVals::ubv1#0 ← (byte) $fa [ testUnsignedVals::ubv1#0 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 ] ) always clobbers reg byte a 
Statement [45] *((const byte*) SCREEN#0+(byte) $28) ← (byte) $fa [ testUnsignedVals::ubv1#0 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 ] ) always clobbers reg byte a 
Statement [46] *((const byte*) SCREEN#0+(byte) $29) ← (const byte) testUnsignedVals::ubc1#0 [ testUnsignedVals::ubv1#0 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) SCREEN#0+(byte) $2a) ← (byte) testUnsignedVals::ubv1#0 [ testUnsignedVals::ubv1#0 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 ] ) always clobbers reg byte a 
Statement [48] *((const byte*) SCREEN#0+(byte) $2b) ← (byte)(number) $78+(number) $82 [ testUnsignedVals::ubv1#0 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 ] ) always clobbers reg byte a 
Statement [49] *((const byte*) SCREEN#0+(byte) $2c) ← (const byte) testUnsignedVals::ubc1#0+(byte) $fa [ testUnsignedVals::ubv1#0 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 ] ) always clobbers reg byte a 
Statement [50] *((const byte*) SCREEN#0+(byte) $2d) ← (byte) $fa+(const byte) testUnsignedVals::ubc1#0 [ testUnsignedVals::ubv1#0 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 ] ) always clobbers reg byte a 
Statement [51] (byte~) testUnsignedVals::$3 ← (byte) testUnsignedVals::ubv1#0 + (byte) $fa [ testUnsignedVals::ubv1#0 testUnsignedVals::$3 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 testUnsignedVals::$3 ] ) always clobbers reg byte a 
Statement [53] (byte~) testUnsignedVals::$4 ← (byte) $fa + (byte) testUnsignedVals::ubv1#0 [ testUnsignedVals::ubv1#0 testUnsignedVals::$4 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 testUnsignedVals::$4 ] ) always clobbers reg byte a 
Statement [55] (byte~) testUnsignedVals::$5 ← (byte) testUnsignedVals::ubv1#0 + (const byte) testUnsignedVals::ubc1#0 [ testUnsignedVals::ubv1#0 testUnsignedVals::$5 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 testUnsignedVals::$5 ] ) always clobbers reg byte a 
Statement [57] (byte~) testUnsignedVals::$6 ← (const byte) testUnsignedVals::ubc1#0 + (byte) testUnsignedVals::ubv1#0 [ testUnsignedVals::ubv1#0 testUnsignedVals::$6 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::ubv1#0 testUnsignedVals::$6 ] ) always clobbers reg byte a 
Statement [59] (byte~) testUnsignedVals::$7 ← (byte) testUnsignedVals::ubv1#0 + (byte) testUnsignedVals::ubv1#0 [ testUnsignedVals::$7 ] ( main:2::testUnsignedVals:7 [ testUnsignedVals::$7 ] ) always clobbers reg byte a 
Statement [62] (byte) testUnsigned::ubv1#0 ← (byte) $fa [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [63] *((const byte*) SCREEN#0) ← (byte) 0 [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [64] *((const byte*) SCREEN#0+(byte) 1) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [65] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [66] *((const byte*) SCREEN#0+(byte) 3) ← (byte) 0 [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [67] *((const byte*) SCREEN#0+(byte) 4) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [68] *((const byte*) SCREEN#0+(byte) 5) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [69] *((const byte*) SCREEN#0+(byte) 6) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [70] *((const byte*) SCREEN#0+(byte) 7) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [71] *((const byte*) SCREEN#0+(byte) 8) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [72] *((const byte*) SCREEN#0+(byte) 9) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Statement [73] *((const byte*) SCREEN#0+(byte) $a) ← (const byte) TYPEID_BYTE [ ] ( main:2::testUnsigned:5 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_BYTE:3 [ testUnsignedVals::ubv1#0 ] : zp ZP_BYTE:3 , 
Potential registers zp ZP_BYTE:4 [ testSigned::sbv1#0 ] : zp ZP_BYTE:4 , 
Potential registers zp ZP_BYTE:5 [ testSignedVals::sbv1#0 ] : zp ZP_BYTE:5 , 
Potential registers zp ZP_BYTE:6 [ testSignedVals::$3 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ testSignedVals::$4 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ testSignedVals::$5 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ testSignedVals::$6 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ testSignedVals::$7 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ testUnsignedVals::$3 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ testUnsignedVals::$4 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ testUnsignedVals::$5 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ testUnsignedVals::$6 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ testUnsignedVals::$7 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [testUnsignedVals] 4: zp ZP_BYTE:11 [ testUnsignedVals::$3 ] 4: zp ZP_BYTE:12 [ testUnsignedVals::$4 ] 4: zp ZP_BYTE:13 [ testUnsignedVals::$5 ] 4: zp ZP_BYTE:14 [ testUnsignedVals::$6 ] 4: zp ZP_BYTE:15 [ testUnsignedVals::$7 ] 1.07: zp ZP_BYTE:3 [ testUnsignedVals::ubv1#0 ] 
Uplift Scope [testSignedVals] 4: zp ZP_BYTE:6 [ testSignedVals::$3 ] 4: zp ZP_BYTE:7 [ testSignedVals::$4 ] 4: zp ZP_BYTE:8 [ testSignedVals::$5 ] 4: zp ZP_BYTE:9 [ testSignedVals::$6 ] 4: zp ZP_BYTE:10 [ testSignedVals::$7 ] 1.07: zp ZP_BYTE:5 [ testSignedVals::sbv1#0 ] 
Uplift Scope [testUnsigned] 20: zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ] 
Uplift Scope [testSigned] 20: zp ZP_BYTE:4 [ testSigned::sbv1#0 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [testUnsignedVals] best 446 combination reg byte x [ testUnsignedVals::$3 ] reg byte x [ testUnsignedVals::$4 ] reg byte a [ testUnsignedVals::$5 ] reg byte a [ testUnsignedVals::$6 ] zp ZP_BYTE:15 [ testUnsignedVals::$7 ] zp ZP_BYTE:3 [ testUnsignedVals::ubv1#0 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [testSignedVals] best 430 combination reg byte a [ testSignedVals::$3 ] reg byte a [ testSignedVals::$4 ] reg byte a [ testSignedVals::$5 ] reg byte a [ testSignedVals::$6 ] zp ZP_BYTE:10 [ testSignedVals::$7 ] zp ZP_BYTE:5 [ testSignedVals::sbv1#0 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [testUnsigned] best 430 combination zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ] 
Uplifting [testSigned] best 430 combination zp ZP_BYTE:4 [ testSigned::sbv1#0 ] 
Uplifting [main] best 430 combination 
Uplifting [] best 430 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ testUnsigned::ubv1#0 ]
Uplifting [testUnsigned] best 430 combination zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ testSigned::sbv1#0 ]
Uplifting [testSigned] best 430 combination zp ZP_BYTE:4 [ testSigned::sbv1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ testSignedVals::$7 ]
Uplifting [testSignedVals] best 424 combination reg byte a [ testSignedVals::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ testUnsignedVals::$7 ]
Uplifting [testUnsignedVals] best 418 combination reg byte a [ testUnsignedVals::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ testUnsignedVals::ubv1#0 ]
Uplifting [testUnsignedVals] best 418 combination zp ZP_BYTE:3 [ testUnsignedVals::ubv1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ testSignedVals::sbv1#0 ]
Uplifting [testSignedVals] best 418 combination zp ZP_BYTE:5 [ testSignedVals::sbv1#0 ] 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test that plus creates the expected type for all legal combinations of bytes (signed/unsigned - constant/variable)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const TYPEID_BYTE = 1
  .const TYPEID_SIGNED_BYTE = 2
  .label SCREEN = $400
  .label SSCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call testUnsigned 
    jsr testUnsigned
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call testUnsignedVals 
    jsr testUnsignedVals
  //SEG15 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG16 main::@2
  b2:
  //SEG17 [9] call testSigned 
    jsr testSigned
  //SEG18 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG19 main::@3
  b3:
  //SEG20 [11] call testSignedVals 
    jsr testSignedVals
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [12] return 
    rts
}
//SEG23 testSignedVals
testSignedVals: {
    .const sbc1 = -$78
    .label sbv1 = 5
  //SEG24 [13] (signed byte) testSignedVals::sbv1#0 ← (signed byte) -$78 -- vbsz1=vbsc1 
    lda #-$78
    sta sbv1
  //SEG25 [14] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3) ← (signed byte) -$78 -- _deref_pbsc1=vbsc2 
    lda #-$78
    sta SSCREEN+$28*3
  //SEG26 [15] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 1) ← (const signed byte) testSignedVals::sbc1#0 -- _deref_pbsc1=vbsc2 
    lda #sbc1
    sta SSCREEN+$28*3+1
  //SEG27 [16] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 2) ← (signed byte) testSignedVals::sbv1#0 -- _deref_pbsc1=vbsz1 
    lda sbv1
    sta SSCREEN+$28*3+2
  //SEG28 [17] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 3) ← (signed byte)(number) -$46+(number) -$32 -- _deref_pbsc1=vbsc2 
    lda #-$46+-$32
    sta SSCREEN+$28*3+3
  //SEG29 [18] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 4) ← (const signed byte) testSignedVals::sbc1#0+(signed byte) -$78 -- _deref_pbsc1=vbsc2 
    lda #sbc1+-$78
    sta SSCREEN+$28*3+4
  //SEG30 [19] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 5) ← (signed byte) -$78+(const signed byte) testSignedVals::sbc1#0 -- _deref_pbsc1=vbsc2 
    lda #-$78+sbc1
    sta SSCREEN+$28*3+5
  //SEG31 [20] (signed byte~) testSignedVals::$3 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) -$78 -- vbsaa=vbsz1_plus_vbsc1 
    lda #-$78
    clc
    adc sbv1
  //SEG32 [21] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 6) ← (signed byte~) testSignedVals::$3 -- _deref_pbsc1=vbsaa 
    sta SSCREEN+$28*3+6
  //SEG33 [22] (signed byte~) testSignedVals::$4 ← (signed byte) -$78 + (signed byte) testSignedVals::sbv1#0 -- vbsaa=vbsc1_plus_vbsz1 
    lda #-$78
    clc
    adc sbv1
  //SEG34 [23] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 7) ← (signed byte~) testSignedVals::$4 -- _deref_pbsc1=vbsaa 
    sta SSCREEN+$28*3+7
  //SEG35 [24] (signed byte~) testSignedVals::$5 ← (signed byte) testSignedVals::sbv1#0 + (const signed byte) testSignedVals::sbc1#0 -- vbsaa=vbsz1_plus_vbsc1 
    lda #sbc1
    clc
    adc sbv1
  //SEG36 [25] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 8) ← (signed byte~) testSignedVals::$5 -- _deref_pbsc1=vbsaa 
    sta SSCREEN+$28*3+8
  //SEG37 [26] (signed byte~) testSignedVals::$6 ← (const signed byte) testSignedVals::sbc1#0 + (signed byte) testSignedVals::sbv1#0 -- vbsaa=vbsc1_plus_vbsz1 
    lda #sbc1
    clc
    adc sbv1
  //SEG38 [27] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 9) ← (signed byte~) testSignedVals::$6 -- _deref_pbsc1=vbsaa 
    sta SSCREEN+$28*3+9
  //SEG39 [28] (signed byte~) testSignedVals::$7 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) testSignedVals::sbv1#0 -- vbsaa=vbsz1_plus_vbsz1 
    lda sbv1
    asl
  //SEG40 [29] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) $a) ← (signed byte~) testSignedVals::$7 -- _deref_pbsc1=vbsaa 
    sta SSCREEN+$28*3+$a
    jmp breturn
  //SEG41 testSignedVals::@return
  breturn:
  //SEG42 [30] return 
    rts
}
//SEG43 testSigned
testSigned: {
    .label sbv1 = 4
  //SEG44 [31] (signed byte) testSigned::sbv1#0 ← (signed byte) -$78 -- vbsz1=vbsc1 
    lda #-$78
    sta sbv1
  //SEG45 [32] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+$28*2
  //SEG46 [33] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 1) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+1
  //SEG47 [34] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 2) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+2
  //SEG48 [35] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+$28*2+3
  //SEG49 [36] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 4) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+4
  //SEG50 [37] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 5) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+5
  //SEG51 [38] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 6) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+6
  //SEG52 [39] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 7) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+7
  //SEG53 [40] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 8) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+8
  //SEG54 [41] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 9) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+9
  //SEG55 [42] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) $a) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+$a
    jmp breturn
  //SEG56 testSigned::@return
  breturn:
  //SEG57 [43] return 
    rts
}
//SEG58 testUnsignedVals
testUnsignedVals: {
    .const ubc1 = $fa
    .label ubv1 = 3
  //SEG59 [44] (byte) testUnsignedVals::ubv1#0 ← (byte) $fa -- vbuz1=vbuc1 
    lda #$fa
    sta ubv1
  //SEG60 [45] *((const byte*) SCREEN#0+(byte) $28) ← (byte) $fa -- _deref_pbuc1=vbuc2 
    lda #$fa
    sta SCREEN+$28
  //SEG61 [46] *((const byte*) SCREEN#0+(byte) $29) ← (const byte) testUnsignedVals::ubc1#0 -- _deref_pbuc1=vbuc2 
    lda #ubc1
    sta SCREEN+$29
  //SEG62 [47] *((const byte*) SCREEN#0+(byte) $2a) ← (byte) testUnsignedVals::ubv1#0 -- _deref_pbuc1=vbuz1 
    lda ubv1
    sta SCREEN+$2a
  //SEG63 [48] *((const byte*) SCREEN#0+(byte) $2b) ← (byte)(number) $78+(number) $82 -- _deref_pbuc1=vbuc2 
    lda #$78+$82
    sta SCREEN+$2b
  //SEG64 [49] *((const byte*) SCREEN#0+(byte) $2c) ← (const byte) testUnsignedVals::ubc1#0+(byte) $fa -- _deref_pbuc1=vbuc2 
    lda #ubc1+$fa
    sta SCREEN+$2c
  //SEG65 [50] *((const byte*) SCREEN#0+(byte) $2d) ← (byte) $fa+(const byte) testUnsignedVals::ubc1#0 -- _deref_pbuc1=vbuc2 
    lda #$fa+ubc1
    sta SCREEN+$2d
  //SEG66 [51] (byte~) testUnsignedVals::$3 ← (byte) testUnsignedVals::ubv1#0 + (byte) $fa -- vbuxx=vbuz1_plus_vbuc1 
    lax ubv1
    axs #-[$fa]
  //SEG67 [52] *((const byte*) SCREEN#0+(byte) $2e) ← (byte~) testUnsignedVals::$3 -- _deref_pbuc1=vbuxx 
    stx SCREEN+$2e
  //SEG68 [53] (byte~) testUnsignedVals::$4 ← (byte) $fa + (byte) testUnsignedVals::ubv1#0 -- vbuxx=vbuc1_plus_vbuz1 
    lax ubv1
    axs #-[$fa]
  //SEG69 [54] *((const byte*) SCREEN#0+(byte) $2f) ← (byte~) testUnsignedVals::$4 -- _deref_pbuc1=vbuxx 
    stx SCREEN+$2f
  //SEG70 [55] (byte~) testUnsignedVals::$5 ← (byte) testUnsignedVals::ubv1#0 + (const byte) testUnsignedVals::ubc1#0 -- vbuaa=vbuz1_plus_vbuc1 
    lda #ubc1
    clc
    adc ubv1
  //SEG71 [56] *((const byte*) SCREEN#0+(byte) $30) ← (byte~) testUnsignedVals::$5 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$30
  //SEG72 [57] (byte~) testUnsignedVals::$6 ← (const byte) testUnsignedVals::ubc1#0 + (byte) testUnsignedVals::ubv1#0 -- vbuaa=vbuc1_plus_vbuz1 
    lda #ubc1
    clc
    adc ubv1
  //SEG73 [58] *((const byte*) SCREEN#0+(byte) $31) ← (byte~) testUnsignedVals::$6 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$31
  //SEG74 [59] (byte~) testUnsignedVals::$7 ← (byte) testUnsignedVals::ubv1#0 + (byte) testUnsignedVals::ubv1#0 -- vbuaa=vbuz1_plus_vbuz1 
    lda ubv1
    asl
  //SEG75 [60] *((const byte*) SCREEN#0+(byte) $32) ← (byte~) testUnsignedVals::$7 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$32
    jmp breturn
  //SEG76 testUnsignedVals::@return
  breturn:
  //SEG77 [61] return 
    rts
}
//SEG78 testUnsigned
testUnsigned: {
    .label ubv1 = 2
  //SEG79 [62] (byte) testUnsigned::ubv1#0 ← (byte) $fa -- vbuz1=vbuc1 
    lda #$fa
    sta ubv1
  //SEG80 [63] *((const byte*) SCREEN#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN
  //SEG81 [64] *((const byte*) SCREEN#0+(byte) 1) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+1
  //SEG82 [65] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+2
  //SEG83 [66] *((const byte*) SCREEN#0+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+3
  //SEG84 [67] *((const byte*) SCREEN#0+(byte) 4) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+4
  //SEG85 [68] *((const byte*) SCREEN#0+(byte) 5) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+5
  //SEG86 [69] *((const byte*) SCREEN#0+(byte) 6) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+6
  //SEG87 [70] *((const byte*) SCREEN#0+(byte) 7) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+7
  //SEG88 [71] *((const byte*) SCREEN#0+(byte) 8) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+8
  //SEG89 [72] *((const byte*) SCREEN#0+(byte) 9) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+9
  //SEG90 [73] *((const byte*) SCREEN#0+(byte) $a) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+$a
    jmp breturn
  //SEG91 testUnsigned::@return
  breturn:
  //SEG92 [74] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #-$78
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #TYPEID_SIGNED_BYTE
Removing instruction lda #$fa
Removing instruction lda #TYPEID_BYTE
Removing instruction lda #TYPEID_BYTE
Removing instruction lda #TYPEID_BYTE
Removing instruction lda #TYPEID_BYTE
Removing instruction lda #TYPEID_BYTE
Removing instruction lda #TYPEID_BYTE
Removing instruction lda #TYPEID_BYTE
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(signed byte*) SSCREEN
(const signed byte*) SSCREEN#0 SSCREEN = (signed byte*) 1024
(const byte) TYPEID_BYTE TYPEID_BYTE = (number) 1
(const byte) TYPEID_SIGNED_BYTE TYPEID_SIGNED_BYTE = (number) 2
(byte) idx
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(void()) testSigned()
(label) testSigned::@return
(signed byte) testSigned::sbc1
(signed byte) testSigned::sbv1
(signed byte) testSigned::sbv1#0 sbv1 zp ZP_BYTE:4 20.0
(void()) testSignedVals()
(signed byte~) testSignedVals::$3 reg byte a 4.0
(signed byte~) testSignedVals::$4 reg byte a 4.0
(signed byte~) testSignedVals::$5 reg byte a 4.0
(signed byte~) testSignedVals::$6 reg byte a 4.0
(signed byte~) testSignedVals::$7 reg byte a 4.0
(label) testSignedVals::@return
(signed byte) testSignedVals::sbc1
(const signed byte) testSignedVals::sbc1#0 sbc1 = (signed byte) -$78
(signed byte) testSignedVals::sbv1
(signed byte) testSignedVals::sbv1#0 sbv1 zp ZP_BYTE:5 1.0666666666666667
(void()) testUnsigned()
(label) testUnsigned::@return
(byte) testUnsigned::ubc1
(byte) testUnsigned::ubv1
(byte) testUnsigned::ubv1#0 ubv1 zp ZP_BYTE:2 20.0
(void()) testUnsignedVals()
(byte~) testUnsignedVals::$3 reg byte x 4.0
(byte~) testUnsignedVals::$4 reg byte x 4.0
(byte~) testUnsignedVals::$5 reg byte a 4.0
(byte~) testUnsignedVals::$6 reg byte a 4.0
(byte~) testUnsignedVals::$7 reg byte a 4.0
(label) testUnsignedVals::@return
(byte) testUnsignedVals::ubc1
(const byte) testUnsignedVals::ubc1#0 ubc1 = (byte) $fa
(byte) testUnsignedVals::ubv1
(byte) testUnsignedVals::ubv1#0 ubv1 zp ZP_BYTE:3 1.0666666666666667

zp ZP_BYTE:2 [ testUnsigned::ubv1#0 ]
zp ZP_BYTE:3 [ testUnsignedVals::ubv1#0 ]
zp ZP_BYTE:4 [ testSigned::sbv1#0 ]
zp ZP_BYTE:5 [ testSignedVals::sbv1#0 ]
reg byte a [ testSignedVals::$3 ]
reg byte a [ testSignedVals::$4 ]
reg byte a [ testSignedVals::$5 ]
reg byte a [ testSignedVals::$6 ]
reg byte a [ testSignedVals::$7 ]
reg byte x [ testUnsignedVals::$3 ]
reg byte x [ testUnsignedVals::$4 ]
reg byte a [ testUnsignedVals::$5 ]
reg byte a [ testUnsignedVals::$6 ]
reg byte a [ testUnsignedVals::$7 ]


FINAL ASSEMBLER
Score: 350

//SEG0 File Comments
// Test that plus creates the expected type for all legal combinations of bytes (signed/unsigned - constant/variable)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const TYPEID_BYTE = 1
  .const TYPEID_SIGNED_BYTE = 2
  .label SCREEN = $400
  .label SSCREEN = $400
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] call testUnsigned 
    jsr testUnsigned
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 main::@1
  //SEG14 [7] call testUnsignedVals 
    jsr testUnsignedVals
  //SEG15 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG16 main::@2
  //SEG17 [9] call testSigned 
    jsr testSigned
  //SEG18 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG19 main::@3
  //SEG20 [11] call testSignedVals 
    jsr testSignedVals
  //SEG21 main::@return
  //SEG22 [12] return 
    rts
}
//SEG23 testSignedVals
testSignedVals: {
    .const sbc1 = -$78
    .label sbv1 = 5
  //SEG24 [13] (signed byte) testSignedVals::sbv1#0 ← (signed byte) -$78 -- vbsz1=vbsc1 
    lda #-$78
    sta sbv1
  //SEG25 [14] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3) ← (signed byte) -$78 -- _deref_pbsc1=vbsc2 
    sta SSCREEN+$28*3
  //SEG26 [15] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 1) ← (const signed byte) testSignedVals::sbc1#0 -- _deref_pbsc1=vbsc2 
    lda #sbc1
    sta SSCREEN+$28*3+1
  //SEG27 [16] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 2) ← (signed byte) testSignedVals::sbv1#0 -- _deref_pbsc1=vbsz1 
    lda sbv1
    sta SSCREEN+$28*3+2
  //SEG28 [17] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 3) ← (signed byte)(number) -$46+(number) -$32 -- _deref_pbsc1=vbsc2 
    lda #-$46+-$32
    sta SSCREEN+$28*3+3
  //SEG29 [18] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 4) ← (const signed byte) testSignedVals::sbc1#0+(signed byte) -$78 -- _deref_pbsc1=vbsc2 
    lda #sbc1+-$78
    sta SSCREEN+$28*3+4
  //SEG30 [19] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 5) ← (signed byte) -$78+(const signed byte) testSignedVals::sbc1#0 -- _deref_pbsc1=vbsc2 
    lda #-$78+sbc1
    sta SSCREEN+$28*3+5
  //SEG31 [20] (signed byte~) testSignedVals::$3 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) -$78 -- vbsaa=vbsz1_plus_vbsc1 
    lda #-$78
    clc
    adc sbv1
  //SEG32 [21] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 6) ← (signed byte~) testSignedVals::$3 -- _deref_pbsc1=vbsaa 
    sta SSCREEN+$28*3+6
  //SEG33 [22] (signed byte~) testSignedVals::$4 ← (signed byte) -$78 + (signed byte) testSignedVals::sbv1#0 -- vbsaa=vbsc1_plus_vbsz1 
    lda #-$78
    clc
    adc sbv1
  //SEG34 [23] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 7) ← (signed byte~) testSignedVals::$4 -- _deref_pbsc1=vbsaa 
    sta SSCREEN+$28*3+7
  //SEG35 [24] (signed byte~) testSignedVals::$5 ← (signed byte) testSignedVals::sbv1#0 + (const signed byte) testSignedVals::sbc1#0 -- vbsaa=vbsz1_plus_vbsc1 
    lda #sbc1
    clc
    adc sbv1
  //SEG36 [25] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 8) ← (signed byte~) testSignedVals::$5 -- _deref_pbsc1=vbsaa 
    sta SSCREEN+$28*3+8
  //SEG37 [26] (signed byte~) testSignedVals::$6 ← (const signed byte) testSignedVals::sbc1#0 + (signed byte) testSignedVals::sbv1#0 -- vbsaa=vbsc1_plus_vbsz1 
    lda #sbc1
    clc
    adc sbv1
  //SEG38 [27] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) 9) ← (signed byte~) testSignedVals::$6 -- _deref_pbsc1=vbsaa 
    sta SSCREEN+$28*3+9
  //SEG39 [28] (signed byte~) testSignedVals::$7 ← (signed byte) testSignedVals::sbv1#0 + (signed byte) testSignedVals::sbv1#0 -- vbsaa=vbsz1_plus_vbsz1 
    lda sbv1
    asl
  //SEG40 [29] *((const signed byte*) SSCREEN#0+(byte)(number) $28*(number) 3+(number) $a) ← (signed byte~) testSignedVals::$7 -- _deref_pbsc1=vbsaa 
    sta SSCREEN+$28*3+$a
  //SEG41 testSignedVals::@return
  //SEG42 [30] return 
    rts
}
//SEG43 testSigned
testSigned: {
    .label sbv1 = 4
  //SEG44 [31] (signed byte) testSigned::sbv1#0 ← (signed byte) -$78 -- vbsz1=vbsc1 
    lda #-$78
    sta sbv1
  //SEG45 [32] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+$28*2
  //SEG46 [33] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 1) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+1
  //SEG47 [34] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 2) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$28*2+2
  //SEG48 [35] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+$28*2+3
  //SEG49 [36] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 4) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+$28*2+4
  //SEG50 [37] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 5) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$28*2+5
  //SEG51 [38] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 6) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$28*2+6
  //SEG52 [39] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 7) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$28*2+7
  //SEG53 [40] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 8) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$28*2+8
  //SEG54 [41] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) 9) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$28*2+9
  //SEG55 [42] *((const byte*) SCREEN#0+(byte)(number) $28*(number) 2+(number) $a) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$28*2+$a
  //SEG56 testSigned::@return
  //SEG57 [43] return 
    rts
}
//SEG58 testUnsignedVals
testUnsignedVals: {
    .const ubc1 = $fa
    .label ubv1 = 3
  //SEG59 [44] (byte) testUnsignedVals::ubv1#0 ← (byte) $fa -- vbuz1=vbuc1 
    lda #$fa
    sta ubv1
  //SEG60 [45] *((const byte*) SCREEN#0+(byte) $28) ← (byte) $fa -- _deref_pbuc1=vbuc2 
    sta SCREEN+$28
  //SEG61 [46] *((const byte*) SCREEN#0+(byte) $29) ← (const byte) testUnsignedVals::ubc1#0 -- _deref_pbuc1=vbuc2 
    lda #ubc1
    sta SCREEN+$29
  //SEG62 [47] *((const byte*) SCREEN#0+(byte) $2a) ← (byte) testUnsignedVals::ubv1#0 -- _deref_pbuc1=vbuz1 
    lda ubv1
    sta SCREEN+$2a
  //SEG63 [48] *((const byte*) SCREEN#0+(byte) $2b) ← (byte)(number) $78+(number) $82 -- _deref_pbuc1=vbuc2 
    lda #$78+$82
    sta SCREEN+$2b
  //SEG64 [49] *((const byte*) SCREEN#0+(byte) $2c) ← (const byte) testUnsignedVals::ubc1#0+(byte) $fa -- _deref_pbuc1=vbuc2 
    lda #ubc1+$fa
    sta SCREEN+$2c
  //SEG65 [50] *((const byte*) SCREEN#0+(byte) $2d) ← (byte) $fa+(const byte) testUnsignedVals::ubc1#0 -- _deref_pbuc1=vbuc2 
    lda #$fa+ubc1
    sta SCREEN+$2d
  //SEG66 [51] (byte~) testUnsignedVals::$3 ← (byte) testUnsignedVals::ubv1#0 + (byte) $fa -- vbuxx=vbuz1_plus_vbuc1 
    lax ubv1
    axs #-[$fa]
  //SEG67 [52] *((const byte*) SCREEN#0+(byte) $2e) ← (byte~) testUnsignedVals::$3 -- _deref_pbuc1=vbuxx 
    stx SCREEN+$2e
  //SEG68 [53] (byte~) testUnsignedVals::$4 ← (byte) $fa + (byte) testUnsignedVals::ubv1#0 -- vbuxx=vbuc1_plus_vbuz1 
    lax ubv1
    axs #-[$fa]
  //SEG69 [54] *((const byte*) SCREEN#0+(byte) $2f) ← (byte~) testUnsignedVals::$4 -- _deref_pbuc1=vbuxx 
    stx SCREEN+$2f
  //SEG70 [55] (byte~) testUnsignedVals::$5 ← (byte) testUnsignedVals::ubv1#0 + (const byte) testUnsignedVals::ubc1#0 -- vbuaa=vbuz1_plus_vbuc1 
    lda #ubc1
    clc
    adc ubv1
  //SEG71 [56] *((const byte*) SCREEN#0+(byte) $30) ← (byte~) testUnsignedVals::$5 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$30
  //SEG72 [57] (byte~) testUnsignedVals::$6 ← (const byte) testUnsignedVals::ubc1#0 + (byte) testUnsignedVals::ubv1#0 -- vbuaa=vbuc1_plus_vbuz1 
    lda #ubc1
    clc
    adc ubv1
  //SEG73 [58] *((const byte*) SCREEN#0+(byte) $31) ← (byte~) testUnsignedVals::$6 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$31
  //SEG74 [59] (byte~) testUnsignedVals::$7 ← (byte) testUnsignedVals::ubv1#0 + (byte) testUnsignedVals::ubv1#0 -- vbuaa=vbuz1_plus_vbuz1 
    lda ubv1
    asl
  //SEG75 [60] *((const byte*) SCREEN#0+(byte) $32) ← (byte~) testUnsignedVals::$7 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$32
  //SEG76 testUnsignedVals::@return
  //SEG77 [61] return 
    rts
}
//SEG78 testUnsigned
testUnsigned: {
    .label ubv1 = 2
  //SEG79 [62] (byte) testUnsigned::ubv1#0 ← (byte) $fa -- vbuz1=vbuc1 
    lda #$fa
    sta ubv1
  //SEG80 [63] *((const byte*) SCREEN#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN
  //SEG81 [64] *((const byte*) SCREEN#0+(byte) 1) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+1
  //SEG82 [65] *((const byte*) SCREEN#0+(byte) 2) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+2
  //SEG83 [66] *((const byte*) SCREEN#0+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+3
  //SEG84 [67] *((const byte*) SCREEN#0+(byte) 4) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+4
  //SEG85 [68] *((const byte*) SCREEN#0+(byte) 5) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+5
  //SEG86 [69] *((const byte*) SCREEN#0+(byte) 6) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+6
  //SEG87 [70] *((const byte*) SCREEN#0+(byte) 7) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+7
  //SEG88 [71] *((const byte*) SCREEN#0+(byte) 8) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+8
  //SEG89 [72] *((const byte*) SCREEN#0+(byte) 9) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+9
  //SEG90 [73] *((const byte*) SCREEN#0+(byte) $a) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    sta SCREEN+$a
  //SEG91 testUnsigned::@return
  //SEG92 [74] return 
    rts
}

