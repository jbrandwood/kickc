Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from test_16s::@3 test_16s::@5 test_16s::@7 test_16u::@3 test_16u::@5 test_16u::@7 test_8s::@3 test_8s::@5 test_8s::@7 test_8u::@3 test_8u::@5 test_8u::@7
  (byte*) print_char_cursor#149 ← phi( test_16s::@3/(byte*) print_char_cursor#55 test_16s::@5/(byte*) print_char_cursor#57 test_16s::@7/(byte*) print_char_cursor#59 test_16u::@3/(byte*) print_char_cursor#37 test_16u::@5/(byte*) print_char_cursor#39 test_16u::@7/(byte*) print_char_cursor#41 test_8s::@3/(byte*) print_char_cursor#46 test_8s::@5/(byte*) print_char_cursor#48 test_8s::@7/(byte*) print_char_cursor#50 test_8u::@3/(byte*) print_char_cursor#28 test_8u::@5/(byte*) print_char_cursor#30 test_8u::@7/(byte*) print_char_cursor#32 )
  (byte*) print_str::str#16 ← phi( test_16s::@3/(byte*) print_str::str#10 test_16s::@5/(byte*) print_str::str#11 test_16s::@7/(byte*) print_str::str#12 test_16u::@3/(byte*) print_str::str#4 test_16u::@5/(byte*) print_str::str#5 test_16u::@7/(byte*) print_str::str#6 test_8s::@3/(byte*) print_str::str#7 test_8s::@5/(byte*) print_str::str#8 test_8s::@7/(byte*) print_str::str#9 test_8u::@3/(byte*) print_str::str#1 test_8u::@5/(byte*) print_str::str#2 test_8u::@7/(byte*) print_str::str#3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  (byte*) print_char_cursor#133 ← phi( print_str/(byte*) print_char_cursor#149 print_str::@3/(byte*) print_char_cursor#0 )
  (byte*) print_str::str#13 ← phi( print_str/(byte*) print_str::str#16 print_str::@3/(byte*) print_str::str#0 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#13)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#132 ← phi( print_str::@1/(byte*) print_char_cursor#133 )
  (byte*) print_str::str#14 ← phi( print_str::@1/(byte*) print_str::str#13 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#14)
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#15 ← phi( print_str::@2/(byte*) print_str::str#14 )
  (byte*) print_char_cursor#67 ← phi( print_str::@2/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#0 ← (byte*) print_char_cursor#67
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#15
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#68 ← phi( print_str::@1/(byte*) print_char_cursor#133 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#68
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from test_16s::@9 test_16u::@9 test_8s::@9 test_8u::@9
  (byte*) print_char_cursor#134 ← phi( test_16s::@9/(byte*) print_char_cursor#61 test_16u::@9/(byte*) print_char_cursor#43 test_8s::@9/(byte*) print_char_cursor#52 test_8u::@9/(byte*) print_char_cursor#34 )
  (byte*) print_line_cursor#41 ← phi( test_16s::@9/(byte*) print_line_cursor#46 test_16u::@9/(byte*) print_line_cursor#44 test_8s::@9/(byte*) print_line_cursor#45 test_8u::@9/(byte*) print_line_cursor#43 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#69 ← phi( print_ln/(byte*) print_char_cursor#134 print_ln::@1/(byte*) print_char_cursor#69 )
  (byte*) print_line_cursor#21 ← phi( print_ln/(byte*) print_line_cursor#41 print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#21 + (number) $28
  (byte*) print_line_cursor#0 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#0 < (byte*) print_char_cursor#69
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#22 ← phi( print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#2 ← (byte*) print_line_cursor#22
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#70 ← phi( print_ln::@2/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#23 ← phi( print_ln::@2/(byte*) print_line_cursor#22 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#23
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#70
  return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from test_16s::@2 test_16s::@4 test_16s::@6 test_16s::@8
  (byte*) print_char_cursor#150 ← phi( test_16s::@2/(byte*) print_char_cursor#147 test_16s::@4/(byte*) print_char_cursor#56 test_16s::@6/(byte*) print_char_cursor#58 test_16s::@8/(byte*) print_char_cursor#60 )
  (signed word) print_sint::w#5 ← phi( test_16s::@2/(signed word) print_sint::w#1 test_16s::@4/(signed word) print_sint::w#2 test_16s::@6/(signed word) print_sint::w#3 test_16s::@8/(signed word) print_sint::w#4 )
  (bool~) print_sint::$0 ← (signed word) print_sint::w#5 < (number) 0
  if((bool~) print_sint::$0) goto print_sint::@1
  to:print_sint::@3
print_sint::@1: scope:[print_sint]  from print_sint
  (signed word) print_sint::w#8 ← phi( print_sint/(signed word) print_sint::w#5 )
  (byte*) print_char_cursor#135 ← phi( print_sint/(byte*) print_char_cursor#150 )
  (byte) print_char::ch#1 ← (byte) '-'
  call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  (signed word) print_sint::w#6 ← phi( print_sint::@1/(signed word) print_sint::w#8 )
  (byte*) print_char_cursor#71 ← phi( print_sint::@1/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#71
  (signed word~) print_sint::$4 ← - (signed word) print_sint::w#6
  (signed word) print_sint::w#0 ← (signed word~) print_sint::$4
  to:print_sint::@2
print_sint::@3: scope:[print_sint]  from print_sint
  (signed word) print_sint::w#10 ← phi( print_sint/(signed word) print_sint::w#5 )
  (byte*) print_char_cursor#136 ← phi( print_sint/(byte*) print_char_cursor#150 )
  (byte) print_char::ch#2 ← (byte) ' '
  call print_char 
  to:print_sint::@5
print_sint::@5: scope:[print_sint]  from print_sint::@3
  (signed word) print_sint::w#9 ← phi( print_sint::@3/(signed word) print_sint::w#10 )
  (byte*) print_char_cursor#72 ← phi( print_sint::@3/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#72
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@4 print_sint::@5
  (byte*) print_char_cursor#137 ← phi( print_sint::@4/(byte*) print_char_cursor#4 print_sint::@5/(byte*) print_char_cursor#5 )
  (signed word) print_sint::w#7 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@5/(signed word) print_sint::w#9 )
  (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7
  call print_uint 
  to:print_sint::@6
print_sint::@6: scope:[print_sint]  from print_sint::@2
  (byte*) print_char_cursor#73 ← phi( print_sint::@2/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#73
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@6
  (byte*) print_char_cursor#74 ← phi( print_sint::@6/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#74
  return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from test_8s::@2 test_8s::@4 test_8s::@6 test_8s::@8
  (byte*) print_char_cursor#151 ← phi( test_8s::@2/(byte*) print_char_cursor#146 test_8s::@4/(byte*) print_char_cursor#47 test_8s::@6/(byte*) print_char_cursor#49 test_8s::@8/(byte*) print_char_cursor#51 )
  (signed byte) print_schar::b#5 ← phi( test_8s::@2/(signed byte) print_schar::b#1 test_8s::@4/(signed byte) print_schar::b#2 test_8s::@6/(signed byte) print_schar::b#3 test_8s::@8/(signed byte) print_schar::b#4 )
  (bool~) print_schar::$0 ← (signed byte) print_schar::b#5 < (number) 0
  if((bool~) print_schar::$0) goto print_schar::@1
  to:print_schar::@3
print_schar::@1: scope:[print_schar]  from print_schar
  (signed byte) print_schar::b#8 ← phi( print_schar/(signed byte) print_schar::b#5 )
  (byte*) print_char_cursor#138 ← phi( print_schar/(byte*) print_char_cursor#151 )
  (byte) print_char::ch#3 ← (byte) '-'
  call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  (signed byte) print_schar::b#6 ← phi( print_schar::@1/(signed byte) print_schar::b#8 )
  (byte*) print_char_cursor#75 ← phi( print_schar::@1/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#75
  (signed byte~) print_schar::$4 ← - (signed byte) print_schar::b#6
  (signed byte) print_schar::b#0 ← (signed byte~) print_schar::$4
  to:print_schar::@2
print_schar::@3: scope:[print_schar]  from print_schar
  (signed byte) print_schar::b#10 ← phi( print_schar/(signed byte) print_schar::b#5 )
  (byte*) print_char_cursor#139 ← phi( print_schar/(byte*) print_char_cursor#151 )
  (byte) print_char::ch#4 ← (byte) ' '
  call print_char 
  to:print_schar::@5
print_schar::@5: scope:[print_schar]  from print_schar::@3
  (signed byte) print_schar::b#9 ← phi( print_schar::@3/(signed byte) print_schar::b#10 )
  (byte*) print_char_cursor#76 ← phi( print_schar::@3/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#76
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@4 print_schar::@5
  (byte*) print_char_cursor#140 ← phi( print_schar::@4/(byte*) print_char_cursor#8 print_schar::@5/(byte*) print_char_cursor#9 )
  (signed byte) print_schar::b#7 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@5/(signed byte) print_schar::b#9 )
  (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#7
  call print_uchar 
  to:print_schar::@6
print_schar::@6: scope:[print_schar]  from print_schar::@2
  (byte*) print_char_cursor#77 ← phi( print_schar::@2/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#77
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@6
  (byte*) print_char_cursor#78 ← phi( print_schar::@6/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#78
  return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2 test_16u::@2 test_16u::@4 test_16u::@6 test_16u::@8
  (byte*) print_char_cursor#141 ← phi( print_sint::@2/(byte*) print_char_cursor#137 test_16u::@2/(byte*) print_char_cursor#145 test_16u::@4/(byte*) print_char_cursor#38 test_16u::@6/(byte*) print_char_cursor#40 test_16u::@8/(byte*) print_char_cursor#42 )
  (word) print_uint::w#5 ← phi( print_sint::@2/(word) print_uint::w#0 test_16u::@2/(word) print_uint::w#1 test_16u::@4/(word) print_uint::w#2 test_16u::@6/(word) print_uint::w#3 test_16u::@8/(word) print_uint::w#4 )
  (byte~) print_uint::$0 ← > (word) print_uint::w#5
  (byte) print_uchar::b#1 ← (byte~) print_uint::$0
  call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  (word) print_uint::w#6 ← phi( print_uint/(word) print_uint::w#5 )
  (byte*) print_char_cursor#79 ← phi( print_uint/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#79
  (byte~) print_uint::$2 ← < (word) print_uint::w#6
  (byte) print_uchar::b#2 ← (byte~) print_uint::$2
  call print_uchar 
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  (byte*) print_char_cursor#80 ← phi( print_uint::@1/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#80
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  (byte*) print_char_cursor#81 ← phi( print_uint::@2/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#81
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2 print_uint print_uint::@1 test_8u::@2 test_8u::@4 test_8u::@6 test_8u::@8
  (byte*) print_char_cursor#142 ← phi( print_schar::@2/(byte*) print_char_cursor#140 print_uint/(byte*) print_char_cursor#141 print_uint::@1/(byte*) print_char_cursor#12 test_8u::@2/(byte*) print_char_cursor#144 test_8u::@4/(byte*) print_char_cursor#29 test_8u::@6/(byte*) print_char_cursor#31 test_8u::@8/(byte*) print_char_cursor#33 )
  (byte) print_uchar::b#7 ← phi( print_schar::@2/(byte) print_uchar::b#0 print_uint/(byte) print_uchar::b#1 print_uint::@1/(byte) print_uchar::b#2 test_8u::@2/(byte) print_uchar::b#3 test_8u::@4/(byte) print_uchar::b#4 test_8u::@6/(byte) print_uchar::b#5 test_8u::@8/(byte) print_uchar::b#6 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (number) 4
  (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#8 ← phi( print_uchar/(byte) print_uchar::b#7 )
  (byte*) print_char_cursor#82 ← phi( print_uchar/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#82
  (number~) print_uchar::$2 ← (byte) print_uchar::b#8 & (number) $f
  (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#83 ← phi( print_uchar::@1/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#83
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#84 ← phi( print_uchar::@2/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#84
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  (byte*) print_char_cursor#85 ← phi( print_schar::@1/(byte*) print_char_cursor#138 print_schar::@3/(byte*) print_char_cursor#139 print_sint::@1/(byte*) print_char_cursor#135 print_sint::@3/(byte*) print_char_cursor#136 print_str::@2/(byte*) print_char_cursor#132 print_uchar/(byte*) print_char_cursor#142 print_uchar::@1/(byte*) print_char_cursor#15 )
  (byte) print_char::ch#7 ← phi( print_schar::@1/(byte) print_char::ch#3 print_schar::@3/(byte) print_char::ch#4 print_sint::@1/(byte) print_char::ch#1 print_sint::@3/(byte) print_char::ch#2 print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#5 print_uchar::@1/(byte) print_char::ch#6 )
  *((byte*) print_char_cursor#85) ← (byte) print_char::ch#7
  (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#85
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#86 ← phi( print_char/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#86
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#2 ← phi( main/(byte*) print_screen#5 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#2
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#3 ← phi( print_cls/(byte*) print_screen#2 )
  (byte*) print_line_cursor#2 ← (byte*) print_screen#3
  (byte*) print_char_cursor#20 ← (byte*) print_line_cursor#2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#87 ← phi( print_cls::@1/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#24 ← phi( print_cls::@1/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#24
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#87
  return 
  to:@return

(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  (byte) rem8u#33 ← phi( div8s::@4/(byte) rem8u#34 test_8u::@1/(byte) rem8u#38 )
  (byte) div8u::divisor#2 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 )
  (byte) div8u::dividend#2 ← phi( div8s::@4/(byte) div8u::dividend#0 test_8u::@1/(byte) div8u::dividend#1 )
  (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2
  (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2
  (byte) divr8u::rem#0 ← (number) 0
  call divr8u 
  (byte) divr8u::return#0 ← (byte) divr8u::return#2
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u
  (byte) rem8u#16 ← phi( div8u/(byte) rem8u#3 )
  (byte) divr8u::return#3 ← phi( div8u/(byte) divr8u::return#0 )
  (byte~) div8u::$0 ← (byte) divr8u::return#3
  (byte) rem8u#0 ← (byte) rem8u#16
  (byte) div8u::return#0 ← (byte~) div8u::$0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@1
  (byte) rem8u#17 ← phi( div8u::@1/(byte) rem8u#0 )
  (byte) div8u::return#4 ← phi( div8u::@1/(byte) div8u::return#0 )
  (byte) div8u::return#1 ← (byte) div8u::return#4
  (byte) rem8u#1 ← (byte) rem8u#17
  return 
  to:@return

(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
divr8u: scope:[divr8u]  from div8u
  (byte) divr8u::divisor#5 ← phi( div8u/(byte) divr8u::divisor#0 )
  (byte) divr8u::dividend#4 ← phi( div8u/(byte) divr8u::dividend#0 )
  (byte) divr8u::rem#9 ← phi( div8u/(byte) divr8u::rem#0 )
  (byte) divr8u::quotient#0 ← (byte) 0
  (byte) divr8u::i#0 ← (byte) 0
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  (byte) divr8u::i#5 ← phi( divr8u/(byte) divr8u::i#0 divr8u::@3/(byte) divr8u::i#1 )
  (byte) divr8u::divisor#3 ← phi( divr8u/(byte) divr8u::divisor#5 divr8u::@3/(byte) divr8u::divisor#6 )
  (byte) divr8u::quotient#6 ← phi( divr8u/(byte) divr8u::quotient#0 divr8u::@3/(byte) divr8u::quotient#8 )
  (byte) divr8u::dividend#2 ← phi( divr8u/(byte) divr8u::dividend#4 divr8u::@3/(byte) divr8u::dividend#5 )
  (byte) divr8u::rem#4 ← phi( divr8u/(byte) divr8u::rem#9 divr8u::@3/(byte) divr8u::rem#10 )
  (byte~) divr8u::$0 ← (byte) divr8u::rem#4 << (number) 1
  (byte) divr8u::rem#1 ← (byte~) divr8u::$0
  (number~) divr8u::$1 ← (byte) divr8u::dividend#2 & (number) $80
  (bool~) divr8u::$2 ← (number~) divr8u::$1 != (number) 0
  (bool~) divr8u::$3 ← ! (bool~) divr8u::$2
  if((bool~) divr8u::$3) goto divr8u::@2
  to:divr8u::@4
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  (byte) divr8u::i#3 ← phi( divr8u::@1/(byte) divr8u::i#5 divr8u::@4/(byte) divr8u::i#6 )
  (byte) divr8u::divisor#1 ← phi( divr8u::@1/(byte) divr8u::divisor#3 divr8u::@4/(byte) divr8u::divisor#4 )
  (byte) divr8u::rem#5 ← phi( divr8u::@1/(byte) divr8u::rem#1 divr8u::@4/(byte) divr8u::rem#2 )
  (byte) divr8u::quotient#3 ← phi( divr8u::@1/(byte) divr8u::quotient#6 divr8u::@4/(byte) divr8u::quotient#7 )
  (byte) divr8u::dividend#3 ← phi( divr8u::@1/(byte) divr8u::dividend#2 divr8u::@4/(byte) divr8u::dividend#6 )
  (byte~) divr8u::$5 ← (byte) divr8u::dividend#3 << (number) 1
  (byte) divr8u::dividend#1 ← (byte~) divr8u::$5
  (byte~) divr8u::$6 ← (byte) divr8u::quotient#3 << (number) 1
  (byte) divr8u::quotient#1 ← (byte~) divr8u::$6
  (bool~) divr8u::$7 ← (byte) divr8u::rem#5 >= (byte) divr8u::divisor#1
  (bool~) divr8u::$8 ← ! (bool~) divr8u::$7
  if((bool~) divr8u::$8) goto divr8u::@3
  to:divr8u::@5
divr8u::@4: scope:[divr8u]  from divr8u::@1
  (byte) divr8u::i#6 ← phi( divr8u::@1/(byte) divr8u::i#5 )
  (byte) divr8u::divisor#4 ← phi( divr8u::@1/(byte) divr8u::divisor#3 )
  (byte) divr8u::quotient#7 ← phi( divr8u::@1/(byte) divr8u::quotient#6 )
  (byte) divr8u::dividend#6 ← phi( divr8u::@1/(byte) divr8u::dividend#2 )
  (byte) divr8u::rem#6 ← phi( divr8u::@1/(byte) divr8u::rem#1 )
  (number~) divr8u::$4 ← (byte) divr8u::rem#6 | (number) 1
  (byte) divr8u::rem#2 ← (number~) divr8u::$4
  to:divr8u::@2
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  (byte) divr8u::divisor#6 ← phi( divr8u::@2/(byte) divr8u::divisor#1 divr8u::@5/(byte) divr8u::divisor#2 )
  (byte) divr8u::quotient#8 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  (byte) divr8u::dividend#5 ← phi( divr8u::@2/(byte) divr8u::dividend#1 divr8u::@5/(byte) divr8u::dividend#7 )
  (byte) divr8u::rem#10 ← phi( divr8u::@2/(byte) divr8u::rem#5 divr8u::@5/(byte) divr8u::rem#3 )
  (byte) divr8u::i#2 ← phi( divr8u::@2/(byte) divr8u::i#3 divr8u::@5/(byte) divr8u::i#4 )
  (byte) divr8u::i#1 ← (byte) divr8u::i#2 + rangenext(0,7)
  (bool~) divr8u::$10 ← (byte) divr8u::i#1 != rangelast(0,7)
  if((bool~) divr8u::$10) goto divr8u::@1
  to:divr8u::@6
divr8u::@5: scope:[divr8u]  from divr8u::@2
  (byte) divr8u::dividend#7 ← phi( divr8u::@2/(byte) divr8u::dividend#1 )
  (byte) divr8u::i#4 ← phi( divr8u::@2/(byte) divr8u::i#3 )
  (byte) divr8u::divisor#2 ← phi( divr8u::@2/(byte) divr8u::divisor#1 )
  (byte) divr8u::rem#7 ← phi( divr8u::@2/(byte) divr8u::rem#5 )
  (byte) divr8u::quotient#4 ← phi( divr8u::@2/(byte) divr8u::quotient#1 )
  (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#4
  (byte~) divr8u::$9 ← (byte) divr8u::rem#7 - (byte) divr8u::divisor#2
  (byte) divr8u::rem#3 ← (byte~) divr8u::$9
  to:divr8u::@3
divr8u::@6: scope:[divr8u]  from divr8u::@3
  (byte) divr8u::quotient#5 ← phi( divr8u::@3/(byte) divr8u::quotient#8 )
  (byte) divr8u::rem#8 ← phi( divr8u::@3/(byte) divr8u::rem#10 )
  (byte) rem8u#2 ← (byte) divr8u::rem#8
  (byte) divr8u::return#1 ← (byte) divr8u::quotient#5
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  (byte) rem8u#18 ← phi( divr8u::@6/(byte) rem8u#2 )
  (byte) divr8u::return#4 ← phi( divr8u::@6/(byte) divr8u::return#1 )
  (byte) divr8u::return#2 ← (byte) divr8u::return#4
  (byte) rem8u#3 ← (byte) rem8u#18
  return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u divr16s::@4
  (word) divr16u::divisor#6 ← phi( div16u/(word) divr16u::divisor#0 divr16s::@4/(word) divr16u::divisor#1 )
  (word) divr16u::dividend#5 ← phi( div16u/(word) divr16u::dividend#1 divr16s::@4/(word) divr16u::dividend#2 )
  (word) divr16u::rem#10 ← phi( div16u/(word) divr16u::rem#3 divr16s::@4/(word) divr16u::rem#4 )
  (word) divr16u::quotient#0 ← (word) 0
  (byte) divr16u::i#0 ← (byte) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#4 ← phi( divr16u/(word) divr16u::divisor#6 divr16u::@3/(word) divr16u::divisor#7 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#6 )
  (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  (word~) divr16u::$0 ← (word) divr16u::rem#5 << (number) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
  (bool~) divr16u::$3 ← (number~) divr16u::$2 != (number) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#2 ← phi( divr16u::@1/(word) divr16u::divisor#4 divr16u::@4/(word) divr16u::divisor#5 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#4 ← phi( divr16u::@1/(word) divr16u::dividend#3 divr16u::@4/(word) divr16u::dividend#7 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#4 << (number) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#5 ← phi( divr16u::@1/(word) divr16u::divisor#4 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#7 ← phi( divr16u::@1/(word) divr16u::dividend#3 )
  (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (number~) divr16u::$5 ← (word) divr16u::rem#7 | (number) 1
  (word) divr16u::rem#1 ← (number~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#7 ← phi( divr16u::@2/(word) divr16u::divisor#2 divr16u::@5/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#6 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#8 )
  (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#8 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#3 ← phi( divr16u::@2/(word) divr16u::divisor#2 )
  (word) divr16u::rem#8 ← phi( divr16u::@2/(word) divr16u::rem#6 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#8 - (word) divr16u::divisor#3
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#9 ← phi( divr16u::@3/(word) divr16u::rem#11 )
  (word) rem16u#0 ← (word) divr16u::rem#9
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#18 ← phi( divr16u::@6/(word) rem16u#0 )
  (word) divr16u::return#4 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#4
  (word) rem16u#1 ← (word) rem16u#18
  return 
  to:@return

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from test_16u::@1
  (word) rem16u#37 ← phi( test_16u::@1/(word) rem16u#42 )
  (word) div16u::divisor#1 ← phi( test_16u::@1/(word) div16u::divisor#0 )
  (word) div16u::dividend#1 ← phi( test_16u::@1/(word) div16u::dividend#0 )
  (word) divr16u::dividend#1 ← (word) div16u::dividend#1
  (word) divr16u::divisor#0 ← (word) div16u::divisor#1
  (word) divr16u::rem#3 ← (number) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  (word) rem16u#19 ← phi( div16u/(word) rem16u#1 )
  (word) divr16u::return#5 ← phi( div16u/(word) divr16u::return#2 )
  (word~) div16u::$0 ← (word) divr16u::return#5
  (word) rem16u#2 ← (word) rem16u#19
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  (word) rem16u#20 ← phi( div16u::@1/(word) rem16u#2 )
  (word) div16u::return#3 ← phi( div16u::@1/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#3
  (word) rem16u#3 ← (word) rem16u#20
  return 
  to:@return

(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
div8s: scope:[div8s]  from test_8s::@1
  (byte) rem8u#59 ← phi( test_8s::@1/(byte) rem8u#41 )
  (signed byte) div8s::divisor#6 ← phi( test_8s::@1/(signed byte) div8s::divisor#0 )
  (signed byte) div8s::dividend#1 ← phi( test_8s::@1/(signed byte) div8s::dividend#0 )
  (byte) div8s::neg#0 ← (byte) 0
  (byte) div8s::dividendu#0 ← (byte) 0
  (bool~) div8s::$0 ← (signed byte) div8s::dividend#1 < (number) 0
  if((bool~) div8s::$0) goto div8s::@1
  to:div8s::@6
div8s::@1: scope:[div8s]  from div8s
  (byte) rem8u#55 ← phi( div8s/(byte) rem8u#59 )
  (signed byte) div8s::divisor#4 ← phi( div8s/(signed byte) div8s::divisor#6 )
  (signed byte) div8s::dividend#2 ← phi( div8s/(signed byte) div8s::dividend#1 )
  (signed byte~) div8s::$4 ← - (signed byte) div8s::dividend#2
  (byte) div8s::dividendu#1 ← (byte)(signed byte~) div8s::$4
  (byte) div8s::neg#1 ← (number) 1
  to:div8s::@2
div8s::@6: scope:[div8s]  from div8s
  (byte) rem8u#56 ← phi( div8s/(byte) rem8u#59 )
  (byte) div8s::neg#7 ← phi( div8s/(byte) div8s::neg#0 )
  (signed byte) div8s::divisor#5 ← phi( div8s/(signed byte) div8s::divisor#6 )
  (signed byte) div8s::dividend#3 ← phi( div8s/(signed byte) div8s::dividend#1 )
  (byte) div8s::dividendu#2 ← (byte)(signed byte) div8s::dividend#3
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@6
  (byte) rem8u#52 ← phi( div8s::@1/(byte) rem8u#55 div8s::@6/(byte) rem8u#56 )
  (byte) div8s::dividendu#6 ← phi( div8s::@1/(byte) div8s::dividendu#1 div8s::@6/(byte) div8s::dividendu#2 )
  (byte) div8s::neg#5 ← phi( div8s::@1/(byte) div8s::neg#1 div8s::@6/(byte) div8s::neg#7 )
  (signed byte) div8s::divisor#1 ← phi( div8s::@1/(signed byte) div8s::divisor#4 div8s::@6/(signed byte) div8s::divisor#5 )
  (byte) div8s::divisoru#0 ← (byte) 0
  (bool~) div8s::$1 ← (signed byte) div8s::divisor#1 < (number) 0
  if((bool~) div8s::$1) goto div8s::@3
  to:div8s::@7
div8s::@3: scope:[div8s]  from div8s::@2
  (byte) rem8u#44 ← phi( div8s::@2/(byte) rem8u#52 )
  (byte) div8s::dividendu#4 ← phi( div8s::@2/(byte) div8s::dividendu#6 )
  (byte) div8s::neg#3 ← phi( div8s::@2/(byte) div8s::neg#5 )
  (signed byte) div8s::divisor#2 ← phi( div8s::@2/(signed byte) div8s::divisor#1 )
  (signed byte~) div8s::$5 ← - (signed byte) div8s::divisor#2
  (byte) div8s::divisoru#1 ← (byte)(signed byte~) div8s::$5
  (number~) div8s::$6 ← (byte) div8s::neg#3 ^ (number) 1
  (byte) div8s::neg#2 ← (number~) div8s::$6
  to:div8s::@4
div8s::@7: scope:[div8s]  from div8s::@2
  (byte) div8s::neg#8 ← phi( div8s::@2/(byte) div8s::neg#5 )
  (byte) rem8u#45 ← phi( div8s::@2/(byte) rem8u#52 )
  (byte) div8s::dividendu#5 ← phi( div8s::@2/(byte) div8s::dividendu#6 )
  (signed byte) div8s::divisor#3 ← phi( div8s::@2/(signed byte) div8s::divisor#1 )
  (byte) div8s::divisoru#2 ← (byte)(signed byte) div8s::divisor#3
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@7
  (byte) div8s::neg#6 ← phi( div8s::@3/(byte) div8s::neg#2 div8s::@7/(byte) div8s::neg#8 )
  (byte) rem8u#34 ← phi( div8s::@3/(byte) rem8u#44 div8s::@7/(byte) rem8u#45 )
  (byte) div8s::divisoru#3 ← phi( div8s::@3/(byte) div8s::divisoru#1 div8s::@7/(byte) div8s::divisoru#2 )
  (byte) div8s::dividendu#3 ← phi( div8s::@3/(byte) div8s::dividendu#4 div8s::@7/(byte) div8s::dividendu#5 )
  (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3
  (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
  call div8u 
  (byte) div8u::return#2 ← (byte) div8u::return#1
  to:div8s::@9
div8s::@9: scope:[div8s]  from div8s::@4
  (byte) div8s::neg#4 ← phi( div8s::@4/(byte) div8s::neg#6 )
  (byte) rem8u#19 ← phi( div8s::@4/(byte) rem8u#1 )
  (byte) div8u::return#5 ← phi( div8s::@4/(byte) div8u::return#2 )
  (byte~) div8s::$2 ← (byte) div8u::return#5
  (byte) rem8u#4 ← (byte) rem8u#19
  (byte) div8s::resultu#0 ← (byte~) div8s::$2
  (bool~) div8s::$3 ← (byte) div8s::neg#4 == (number) 0
  if((bool~) div8s::$3) goto div8s::@5
  to:div8s::@8
div8s::@5: scope:[div8s]  from div8s::@9
  (byte) div8s::resultu#1 ← phi( div8s::@9/(byte) div8s::resultu#0 )
  (byte) rem8u#20 ← phi( div8s::@9/(byte) rem8u#4 )
  (signed byte) rem8s#0 ← (signed byte)(byte) rem8u#20
  (signed byte) div8s::return#0 ← (signed byte)(byte) div8s::resultu#1
  to:div8s::@return
div8s::@8: scope:[div8s]  from div8s::@9
  (byte) div8s::resultu#2 ← phi( div8s::@9/(byte) div8s::resultu#0 )
  (byte) rem8u#21 ← phi( div8s::@9/(byte) rem8u#4 )
  (signed byte~) div8s::$7 ← - (signed byte)(byte) rem8u#21
  (signed byte) rem8s#1 ← (signed byte~) div8s::$7
  (signed byte~) div8s::$8 ← - (signed byte)(byte) div8s::resultu#2
  (signed byte) div8s::return#1 ← (signed byte~) div8s::$8
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@5 div8s::@8
  (signed byte) rem8s#10 ← phi( div8s::@5/(signed byte) rem8s#0 div8s::@8/(signed byte) rem8s#1 )
  (byte) rem8u#22 ← phi( div8s::@5/(byte) rem8u#20 div8s::@8/(byte) rem8u#21 )
  (signed byte) div8s::return#4 ← phi( div8s::@5/(signed byte) div8s::return#0 div8s::@8/(signed byte) div8s::return#1 )
  (signed byte) div8s::return#2 ← (signed byte) div8s::return#4
  (byte) rem8u#5 ← (byte) rem8u#22
  (signed byte) rem8s#2 ← (signed byte) rem8s#10
  return 
  to:@return

(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
divr16s: scope:[divr16s]  from div16s
  (word) rem16u#64 ← phi( div16s/(word) rem16u#39 )
  (signed word) divr16s::divisor#6 ← phi( div16s/(signed word) divr16s::divisor#0 )
  (signed word) divr16s::rem#1 ← phi( div16s/(signed word) divr16s::rem#0 )
  (signed word) divr16s::dividend#1 ← phi( div16s/(signed word) divr16s::dividend#0 )
  (byte) divr16s::neg#0 ← (byte) 0
  (word) divr16s::dividendu#0 ← (word) 0
  (word) divr16s::remu#0 ← (word) 0
  (bool~) divr16s::$0 ← (signed word) divr16s::dividend#1 < (number) 0
  (bool~) divr16s::$1 ← (signed word) divr16s::rem#1 < (number) 0
  (bool~) divr16s::$2 ← (bool~) divr16s::$0 || (bool~) divr16s::$1
  if((bool~) divr16s::$2) goto divr16s::@1
  to:divr16s::@6
divr16s::@1: scope:[divr16s]  from divr16s
  (word) rem16u#60 ← phi( divr16s/(word) rem16u#64 )
  (signed word) divr16s::divisor#4 ← phi( divr16s/(signed word) divr16s::divisor#6 )
  (signed word) divr16s::rem#2 ← phi( divr16s/(signed word) divr16s::rem#1 )
  (signed word) divr16s::dividend#2 ← phi( divr16s/(signed word) divr16s::dividend#1 )
  (signed word~) divr16s::$6 ← - (signed word) divr16s::dividend#2
  (word) divr16s::dividendu#1 ← (word)(signed word~) divr16s::$6
  (signed word~) divr16s::$7 ← - (signed word) divr16s::rem#2
  (word) divr16s::remu#1 ← (word)(signed word~) divr16s::$7
  (byte) divr16s::neg#1 ← (number) 1
  to:divr16s::@2
divr16s::@6: scope:[divr16s]  from divr16s
  (word) rem16u#61 ← phi( divr16s/(word) rem16u#64 )
  (byte) divr16s::neg#7 ← phi( divr16s/(byte) divr16s::neg#0 )
  (signed word) divr16s::divisor#5 ← phi( divr16s/(signed word) divr16s::divisor#6 )
  (signed word) divr16s::rem#3 ← phi( divr16s/(signed word) divr16s::rem#1 )
  (signed word) divr16s::dividend#3 ← phi( divr16s/(signed word) divr16s::dividend#1 )
  (word) divr16s::dividendu#2 ← (word)(signed word) divr16s::dividend#3
  (word) divr16s::remu#2 ← (word)(signed word) divr16s::rem#3
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  (word) rem16u#56 ← phi( divr16s::@1/(word) rem16u#60 divr16s::@6/(word) rem16u#61 )
  (word) divr16s::remu#6 ← phi( divr16s::@1/(word) divr16s::remu#1 divr16s::@6/(word) divr16s::remu#2 )
  (word) divr16s::dividendu#6 ← phi( divr16s::@1/(word) divr16s::dividendu#1 divr16s::@6/(word) divr16s::dividendu#2 )
  (byte) divr16s::neg#5 ← phi( divr16s::@1/(byte) divr16s::neg#1 divr16s::@6/(byte) divr16s::neg#7 )
  (signed word) divr16s::divisor#1 ← phi( divr16s::@1/(signed word) divr16s::divisor#4 divr16s::@6/(signed word) divr16s::divisor#5 )
  (word) divr16s::divisoru#0 ← (word) 0
  (bool~) divr16s::$3 ← (signed word) divr16s::divisor#1 < (number) 0
  if((bool~) divr16s::$3) goto divr16s::@3
  to:divr16s::@7
divr16s::@3: scope:[divr16s]  from divr16s::@2
  (word) rem16u#48 ← phi( divr16s::@2/(word) rem16u#56 )
  (word) divr16s::remu#4 ← phi( divr16s::@2/(word) divr16s::remu#6 )
  (word) divr16s::dividendu#4 ← phi( divr16s::@2/(word) divr16s::dividendu#6 )
  (byte) divr16s::neg#3 ← phi( divr16s::@2/(byte) divr16s::neg#5 )
  (signed word) divr16s::divisor#2 ← phi( divr16s::@2/(signed word) divr16s::divisor#1 )
  (signed word~) divr16s::$8 ← - (signed word) divr16s::divisor#2
  (word) divr16s::divisoru#1 ← (word)(signed word~) divr16s::$8
  (number~) divr16s::$9 ← (byte) divr16s::neg#3 ^ (number) 1
  (byte) divr16s::neg#2 ← (number~) divr16s::$9
  to:divr16s::@4
divr16s::@7: scope:[divr16s]  from divr16s::@2
  (byte) divr16s::neg#8 ← phi( divr16s::@2/(byte) divr16s::neg#5 )
  (word) rem16u#49 ← phi( divr16s::@2/(word) rem16u#56 )
  (word) divr16s::remu#5 ← phi( divr16s::@2/(word) divr16s::remu#6 )
  (word) divr16s::dividendu#5 ← phi( divr16s::@2/(word) divr16s::dividendu#6 )
  (signed word) divr16s::divisor#3 ← phi( divr16s::@2/(signed word) divr16s::divisor#1 )
  (word) divr16s::divisoru#2 ← (word)(signed word) divr16s::divisor#3
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  (byte) divr16s::neg#6 ← phi( divr16s::@3/(byte) divr16s::neg#2 divr16s::@7/(byte) divr16s::neg#8 )
  (word) rem16u#38 ← phi( divr16s::@3/(word) rem16u#48 divr16s::@7/(word) rem16u#49 )
  (word) divr16s::remu#3 ← phi( divr16s::@3/(word) divr16s::remu#4 divr16s::@7/(word) divr16s::remu#5 )
  (word) divr16s::divisoru#3 ← phi( divr16s::@3/(word) divr16s::divisoru#1 divr16s::@7/(word) divr16s::divisoru#2 )
  (word) divr16s::dividendu#3 ← phi( divr16s::@3/(word) divr16s::dividendu#4 divr16s::@7/(word) divr16s::dividendu#5 )
  (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3
  (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3
  (word) divr16u::rem#4 ← (word) divr16s::remu#3
  call divr16u 
  (word) divr16u::return#3 ← (word) divr16u::return#1
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  (byte) divr16s::neg#4 ← phi( divr16s::@4/(byte) divr16s::neg#6 )
  (word) rem16u#21 ← phi( divr16s::@4/(word) rem16u#1 )
  (word) divr16u::return#6 ← phi( divr16s::@4/(word) divr16u::return#3 )
  (word~) divr16s::$4 ← (word) divr16u::return#6
  (word) rem16u#4 ← (word) rem16u#21
  (word) divr16s::resultu#0 ← (word~) divr16s::$4
  (bool~) divr16s::$5 ← (byte) divr16s::neg#4 == (number) 0
  if((bool~) divr16s::$5) goto divr16s::@5
  to:divr16s::@8
divr16s::@5: scope:[divr16s]  from divr16s::@9
  (word) divr16s::resultu#1 ← phi( divr16s::@9/(word) divr16s::resultu#0 )
  (word) rem16u#22 ← phi( divr16s::@9/(word) rem16u#4 )
  (signed word) rem16s#0 ← (signed word)(word) rem16u#22
  (signed word) divr16s::return#0 ← (signed word)(word) divr16s::resultu#1
  to:divr16s::@return
divr16s::@8: scope:[divr16s]  from divr16s::@9
  (word) divr16s::resultu#2 ← phi( divr16s::@9/(word) divr16s::resultu#0 )
  (word) rem16u#23 ← phi( divr16s::@9/(word) rem16u#4 )
  (signed word~) divr16s::$10 ← - (signed word)(word) rem16u#23
  (signed word) rem16s#1 ← (signed word~) divr16s::$10
  (signed word~) divr16s::$11 ← - (signed word)(word) divr16s::resultu#2
  (signed word) divr16s::return#1 ← (signed word~) divr16s::$11
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  (signed word) rem16s#12 ← phi( divr16s::@5/(signed word) rem16s#0 divr16s::@8/(signed word) rem16s#1 )
  (word) rem16u#24 ← phi( divr16s::@5/(word) rem16u#22 divr16s::@8/(word) rem16u#23 )
  (signed word) divr16s::return#4 ← phi( divr16s::@5/(signed word) divr16s::return#0 divr16s::@8/(signed word) divr16s::return#1 )
  (signed word) divr16s::return#2 ← (signed word) divr16s::return#4
  (word) rem16u#5 ← (word) rem16u#24
  (signed word) rem16s#2 ← (signed word) rem16s#12
  return 
  to:@return

(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
div16s: scope:[div16s]  from test_16s::@1
  (signed word) rem16s#22 ← phi( test_16s::@1/(signed word) rem16s#24 )
  (word) rem16u#39 ← phi( test_16s::@1/(word) rem16u#45 )
  (signed word) div16s::divisor#1 ← phi( test_16s::@1/(signed word) div16s::divisor#0 )
  (signed word) div16s::dividend#1 ← phi( test_16s::@1/(signed word) div16s::dividend#0 )
  (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#1
  (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#1
  (signed word) divr16s::rem#0 ← (number) 0
  call divr16s 
  (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
  to:div16s::@1
div16s::@1: scope:[div16s]  from div16s
  (signed word) rem16s#13 ← phi( div16s/(signed word) rem16s#2 )
  (word) rem16u#25 ← phi( div16s/(word) rem16u#5 )
  (signed word) divr16s::return#5 ← phi( div16s/(signed word) divr16s::return#3 )
  (signed word~) div16s::$0 ← (signed word) divr16s::return#5
  (word) rem16u#6 ← (word) rem16u#25
  (signed word) rem16s#3 ← (signed word) rem16s#13
  (signed word) div16s::return#0 ← (signed word~) div16s::$0
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@1
  (signed word) rem16s#14 ← phi( div16s::@1/(signed word) rem16s#3 )
  (word) rem16u#26 ← phi( div16s::@1/(word) rem16u#6 )
  (signed word) div16s::return#3 ← phi( div16s::@1/(signed word) div16s::return#0 )
  (signed word) div16s::return#1 ← (signed word) div16s::return#3
  (word) rem16u#7 ← (word) rem16u#26
  (signed word) rem16s#4 ← (signed word) rem16s#14
  return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  (signed word) rem16s#36 ← phi( _start::@1/(signed word) rem16s#27 )
  (signed byte) rem8s#30 ← phi( _start::@1/(signed byte) rem8s#23 )
  (word) rem16u#57 ← phi( _start::@1/(word) rem16u#47 )
  (byte) rem8u#46 ← phi( _start::@1/(byte) rem8u#43 )
  (byte*) print_char_cursor#143 ← phi( _start::@1/(byte*) print_char_cursor#148 )
  (byte*) print_line_cursor#42 ← phi( _start::@1/(byte*) print_line_cursor#47 )
  (byte*) print_screen#5 ← phi( _start::@1/(byte*) print_screen#7 )
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (signed word) rem16s#34 ← phi( main/(signed word) rem16s#36 )
  (signed byte) rem8s#28 ← phi( main/(signed byte) rem8s#30 )
  (word) rem16u#50 ← phi( main/(word) rem16u#57 )
  (byte) rem8u#35 ← phi( main/(byte) rem8u#46 )
  (byte*) print_char_cursor#88 ← phi( main/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#25 ← phi( main/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#25
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#88
  call test_8u 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed word) rem16s#32 ← phi( main::@1/(signed word) rem16s#34 )
  (signed byte) rem8s#24 ← phi( main::@1/(signed byte) rem8s#28 )
  (word) rem16u#40 ← phi( main::@1/(word) rem16u#50 )
  (byte*) print_line_cursor#26 ← phi( main::@1/(byte*) print_line_cursor#11 )
  (byte*) print_char_cursor#89 ← phi( main::@1/(byte*) print_char_cursor#36 )
  (byte) rem8u#23 ← phi( main::@1/(byte) rem8u#10 )
  (byte) rem8u#6 ← (byte) rem8u#23
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#89
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#26
  call test_16u 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (signed word) rem16s#28 ← phi( main::@2/(signed word) rem16s#32 )
  (signed byte) rem8s#18 ← phi( main::@2/(signed byte) rem8s#24 )
  (byte) rem8u#36 ← phi( main::@2/(byte) rem8u#6 )
  (byte*) print_line_cursor#27 ← phi( main::@2/(byte*) print_line_cursor#13 )
  (byte*) print_char_cursor#90 ← phi( main::@2/(byte*) print_char_cursor#45 )
  (word) rem16u#27 ← phi( main::@2/(word) rem16u#12 )
  (word) rem16u#8 ← (word) rem16u#27
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#90
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#27
  call test_8s 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (signed word) rem16s#23 ← phi( main::@3/(signed word) rem16s#28 )
  (word) rem16u#41 ← phi( main::@3/(word) rem16u#8 )
  (byte*) print_line_cursor#28 ← phi( main::@3/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#91 ← phi( main::@3/(byte*) print_char_cursor#54 )
  (signed byte) rem8s#11 ← phi( main::@3/(signed byte) rem8s#6 )
  (byte) rem8u#24 ← phi( main::@3/(byte) rem8u#12 )
  (byte) rem8u#7 ← (byte) rem8u#24
  (signed byte) rem8s#3 ← (signed byte) rem8s#11
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#91
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#28
  call test_16s 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (signed byte) rem8s#19 ← phi( main::@4/(signed byte) rem8s#3 )
  (byte) rem8u#37 ← phi( main::@4/(byte) rem8u#7 )
  (byte*) print_line_cursor#29 ← phi( main::@4/(byte*) print_line_cursor#17 )
  (byte*) print_char_cursor#92 ← phi( main::@4/(byte*) print_char_cursor#63 )
  (signed word) rem16s#15 ← phi( main::@4/(signed word) rem16s#8 )
  (word) rem16u#28 ← phi( main::@4/(word) rem16u#14 )
  (word) rem16u#9 ← (word) rem16u#28
  (signed word) rem16s#5 ← (signed word) rem16s#15
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#92
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#29
  to:main::@return
main::@return: scope:[main]  from main::@5
  (signed word) rem16s#16 ← phi( main::@5/(signed word) rem16s#5 )
  (signed byte) rem8s#12 ← phi( main::@5/(signed byte) rem8s#19 )
  (word) rem16u#29 ← phi( main::@5/(word) rem16u#9 )
  (byte) rem8u#25 ← phi( main::@5/(byte) rem8u#37 )
  (byte*) print_char_cursor#93 ← phi( main::@5/(byte*) print_char_cursor#26 )
  (byte*) print_line_cursor#30 ← phi( main::@5/(byte*) print_line_cursor#8 )
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#30
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#93
  (byte) rem8u#8 ← (byte) rem8u#25
  (word) rem16u#10 ← (word) rem16u#29
  (signed byte) rem8s#4 ← (signed byte) rem8s#12
  (signed word) rem16s#6 ← (signed word) rem16s#16
  return 
  to:@return

(void()) test_8u()
test_8u: scope:[test_8u]  from main::@1
  (byte*) print_line_cursor#80 ← phi( main::@1/(byte*) print_line_cursor#4 )
  (byte*) print_char_cursor#156 ← phi( main::@1/(byte*) print_char_cursor#22 )
  (byte) rem8u#47 ← phi( main::@1/(byte) rem8u#35 )
  (byte) test_8u::i#0 ← (byte) 0
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@10
  (byte*) print_line_cursor#76 ← phi( test_8u/(byte*) print_line_cursor#80 test_8u::@10/(byte*) print_line_cursor#10 )
  (byte*) print_char_cursor#152 ← phi( test_8u/(byte*) print_char_cursor#156 test_8u::@10/(byte*) print_char_cursor#35 )
  (byte) rem8u#38 ← phi( test_8u/(byte) rem8u#47 test_8u::@10/(byte) rem8u#40 )
  (byte) test_8u::i#2 ← phi( test_8u/(byte) test_8u::i#0 test_8u::@10/(byte) test_8u::i#1 )
  (byte) test_8u::dividend#0 ← *((const byte*) test_8u::dividends + (byte) test_8u::i#2)
  (byte) test_8u::divisor#0 ← *((const byte*) test_8u::divisors + (byte) test_8u::i#2)
  (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0
  (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0
  call div8u 
  (byte) div8u::return#3 ← (byte) div8u::return#1
  to:test_8u::@2
test_8u::@2: scope:[test_8u]  from test_8u::@1
  (byte) test_8u::i#11 ← phi( test_8u::@1/(byte) test_8u::i#2 )
  (byte*) print_line_cursor#72 ← phi( test_8u::@1/(byte*) print_line_cursor#76 )
  (byte) test_8u::divisor#3 ← phi( test_8u::@1/(byte) test_8u::divisor#0 )
  (byte*) print_char_cursor#144 ← phi( test_8u::@1/(byte*) print_char_cursor#152 )
  (byte) test_8u::dividend#1 ← phi( test_8u::@1/(byte) test_8u::dividend#0 )
  (byte) rem8u#26 ← phi( test_8u::@1/(byte) rem8u#1 )
  (byte) div8u::return#6 ← phi( test_8u::@1/(byte) div8u::return#3 )
  (byte~) test_8u::$0 ← (byte) div8u::return#6
  (byte) rem8u#9 ← (byte) rem8u#26
  (byte) test_8u::res#0 ← (byte~) test_8u::$0
  (byte) print_uchar::b#3 ← (byte) test_8u::dividend#1
  call print_uchar 
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@2
  (byte) test_8u::i#10 ← phi( test_8u::@2/(byte) test_8u::i#11 )
  (byte*) print_line_cursor#68 ← phi( test_8u::@2/(byte*) print_line_cursor#72 )
  (byte) rem8u#60 ← phi( test_8u::@2/(byte) rem8u#9 )
  (byte) test_8u::res#4 ← phi( test_8u::@2/(byte) test_8u::res#0 )
  (byte) test_8u::divisor#2 ← phi( test_8u::@2/(byte) test_8u::divisor#3 )
  (byte*) print_char_cursor#94 ← phi( test_8u::@2/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#94
  (byte*) print_str::str#1 ← (const byte*) test_8u::str
  call print_str 
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  (byte) test_8u::i#9 ← phi( test_8u::@3/(byte) test_8u::i#10 )
  (byte*) print_line_cursor#64 ← phi( test_8u::@3/(byte*) print_line_cursor#68 )
  (byte) rem8u#57 ← phi( test_8u::@3/(byte) rem8u#60 )
  (byte) test_8u::res#3 ← phi( test_8u::@3/(byte) test_8u::res#4 )
  (byte) test_8u::divisor#1 ← phi( test_8u::@3/(byte) test_8u::divisor#2 )
  (byte*) print_char_cursor#95 ← phi( test_8u::@3/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#95
  (byte) print_uchar::b#4 ← (byte) test_8u::divisor#1
  call print_uchar 
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  (byte) test_8u::i#8 ← phi( test_8u::@4/(byte) test_8u::i#9 )
  (byte*) print_line_cursor#60 ← phi( test_8u::@4/(byte*) print_line_cursor#64 )
  (byte) rem8u#53 ← phi( test_8u::@4/(byte) rem8u#57 )
  (byte) test_8u::res#2 ← phi( test_8u::@4/(byte) test_8u::res#3 )
  (byte*) print_char_cursor#96 ← phi( test_8u::@4/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#96
  (byte*) print_str::str#2 ← (const byte*) test_8u::str1
  call print_str 
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  (byte) test_8u::i#7 ← phi( test_8u::@5/(byte) test_8u::i#8 )
  (byte*) print_line_cursor#56 ← phi( test_8u::@5/(byte*) print_line_cursor#60 )
  (byte) rem8u#48 ← phi( test_8u::@5/(byte) rem8u#53 )
  (byte) test_8u::res#1 ← phi( test_8u::@5/(byte) test_8u::res#2 )
  (byte*) print_char_cursor#97 ← phi( test_8u::@5/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#97
  (byte) print_uchar::b#5 ← (byte) test_8u::res#1
  call print_uchar 
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  (byte) test_8u::i#6 ← phi( test_8u::@6/(byte) test_8u::i#7 )
  (byte*) print_line_cursor#52 ← phi( test_8u::@6/(byte*) print_line_cursor#56 )
  (byte) rem8u#39 ← phi( test_8u::@6/(byte) rem8u#48 )
  (byte*) print_char_cursor#98 ← phi( test_8u::@6/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#98
  (byte*) print_str::str#3 ← (const byte*) test_8u::str2
  call print_str 
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  (byte) test_8u::i#5 ← phi( test_8u::@7/(byte) test_8u::i#6 )
  (byte*) print_line_cursor#48 ← phi( test_8u::@7/(byte*) print_line_cursor#52 )
  (byte) rem8u#27 ← phi( test_8u::@7/(byte) rem8u#39 )
  (byte*) print_char_cursor#99 ← phi( test_8u::@7/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#99
  (byte) print_uchar::b#6 ← (byte) rem8u#27
  call print_uchar 
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  (byte) rem8u#49 ← phi( test_8u::@8/(byte) rem8u#27 )
  (byte) test_8u::i#4 ← phi( test_8u::@8/(byte) test_8u::i#5 )
  (byte*) print_line_cursor#43 ← phi( test_8u::@8/(byte*) print_line_cursor#48 )
  (byte*) print_char_cursor#100 ← phi( test_8u::@8/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#100
  call print_ln 
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  (byte) rem8u#40 ← phi( test_8u::@9/(byte) rem8u#49 )
  (byte) test_8u::i#3 ← phi( test_8u::@9/(byte) test_8u::i#4 )
  (byte*) print_char_cursor#101 ← phi( test_8u::@9/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#31 ← phi( test_8u::@9/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#31
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#101
  (byte) test_8u::i#1 ← (byte) test_8u::i#3 + rangenext(0,5)
  (bool~) test_8u::$9 ← (byte) test_8u::i#1 != rangelast(0,5)
  if((bool~) test_8u::$9) goto test_8u::@1
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@10
  (byte*) print_line_cursor#32 ← phi( test_8u::@10/(byte*) print_line_cursor#10 )
  (byte*) print_char_cursor#102 ← phi( test_8u::@10/(byte*) print_char_cursor#35 )
  (byte) rem8u#28 ← phi( test_8u::@10/(byte) rem8u#40 )
  (byte) rem8u#10 ← (byte) rem8u#28
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#102
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#32
  return 
  to:@return

(void()) test_16u()
test_16u: scope:[test_16u]  from main::@2
  (byte*) print_line_cursor#81 ← phi( main::@2/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#157 ← phi( main::@2/(byte*) print_char_cursor#23 )
  (word) rem16u#51 ← phi( main::@2/(word) rem16u#40 )
  (byte) test_16u::i#0 ← (byte) 0
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@10
  (byte*) print_line_cursor#77 ← phi( test_16u/(byte*) print_line_cursor#81 test_16u::@10/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#153 ← phi( test_16u/(byte*) print_char_cursor#157 test_16u::@10/(byte*) print_char_cursor#44 )
  (word) rem16u#42 ← phi( test_16u/(word) rem16u#51 test_16u::@10/(word) rem16u#44 )
  (byte) test_16u::i#2 ← phi( test_16u/(byte) test_16u::i#0 test_16u::@10/(byte) test_16u::i#1 )
  (byte~) test_16u::$10 ← (byte) test_16u::i#2 * (const byte) SIZEOF_WORD
  (word) test_16u::dividend#0 ← *((const word*) test_16u::dividends + (byte~) test_16u::$10)
  (byte~) test_16u::$11 ← (byte) test_16u::i#2 * (const byte) SIZEOF_WORD
  (word) test_16u::divisor#0 ← *((const word*) test_16u::divisors + (byte~) test_16u::$11)
  (word) div16u::dividend#0 ← (word) test_16u::dividend#0
  (word) div16u::divisor#0 ← (word) test_16u::divisor#0
  call div16u 
  (word) div16u::return#2 ← (word) div16u::return#1
  to:test_16u::@2
test_16u::@2: scope:[test_16u]  from test_16u::@1
  (byte) test_16u::i#11 ← phi( test_16u::@1/(byte) test_16u::i#2 )
  (byte*) print_line_cursor#73 ← phi( test_16u::@1/(byte*) print_line_cursor#77 )
  (word) test_16u::divisor#3 ← phi( test_16u::@1/(word) test_16u::divisor#0 )
  (byte*) print_char_cursor#145 ← phi( test_16u::@1/(byte*) print_char_cursor#153 )
  (word) test_16u::dividend#1 ← phi( test_16u::@1/(word) test_16u::dividend#0 )
  (word) rem16u#30 ← phi( test_16u::@1/(word) rem16u#3 )
  (word) div16u::return#4 ← phi( test_16u::@1/(word) div16u::return#2 )
  (word~) test_16u::$0 ← (word) div16u::return#4
  (word) rem16u#11 ← (word) rem16u#30
  (word) test_16u::res#0 ← (word~) test_16u::$0
  (word) print_uint::w#1 ← (word) test_16u::dividend#1
  call print_uint 
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@2
  (byte) test_16u::i#10 ← phi( test_16u::@2/(byte) test_16u::i#11 )
  (byte*) print_line_cursor#69 ← phi( test_16u::@2/(byte*) print_line_cursor#73 )
  (word) rem16u#65 ← phi( test_16u::@2/(word) rem16u#11 )
  (word) test_16u::res#4 ← phi( test_16u::@2/(word) test_16u::res#0 )
  (word) test_16u::divisor#2 ← phi( test_16u::@2/(word) test_16u::divisor#3 )
  (byte*) print_char_cursor#103 ← phi( test_16u::@2/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#103
  (byte*) print_str::str#4 ← (const byte*) test_16u::str
  call print_str 
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  (byte) test_16u::i#9 ← phi( test_16u::@3/(byte) test_16u::i#10 )
  (byte*) print_line_cursor#65 ← phi( test_16u::@3/(byte*) print_line_cursor#69 )
  (word) rem16u#62 ← phi( test_16u::@3/(word) rem16u#65 )
  (word) test_16u::res#3 ← phi( test_16u::@3/(word) test_16u::res#4 )
  (word) test_16u::divisor#1 ← phi( test_16u::@3/(word) test_16u::divisor#2 )
  (byte*) print_char_cursor#104 ← phi( test_16u::@3/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#104
  (word) print_uint::w#2 ← (word) test_16u::divisor#1
  call print_uint 
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  (byte) test_16u::i#8 ← phi( test_16u::@4/(byte) test_16u::i#9 )
  (byte*) print_line_cursor#61 ← phi( test_16u::@4/(byte*) print_line_cursor#65 )
  (word) rem16u#58 ← phi( test_16u::@4/(word) rem16u#62 )
  (word) test_16u::res#2 ← phi( test_16u::@4/(word) test_16u::res#3 )
  (byte*) print_char_cursor#105 ← phi( test_16u::@4/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#105
  (byte*) print_str::str#5 ← (const byte*) test_16u::str1
  call print_str 
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  (byte) test_16u::i#7 ← phi( test_16u::@5/(byte) test_16u::i#8 )
  (byte*) print_line_cursor#57 ← phi( test_16u::@5/(byte*) print_line_cursor#61 )
  (word) rem16u#52 ← phi( test_16u::@5/(word) rem16u#58 )
  (word) test_16u::res#1 ← phi( test_16u::@5/(word) test_16u::res#2 )
  (byte*) print_char_cursor#106 ← phi( test_16u::@5/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#40 ← (byte*) print_char_cursor#106
  (word) print_uint::w#3 ← (word) test_16u::res#1
  call print_uint 
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  (byte) test_16u::i#6 ← phi( test_16u::@6/(byte) test_16u::i#7 )
  (byte*) print_line_cursor#53 ← phi( test_16u::@6/(byte*) print_line_cursor#57 )
  (word) rem16u#43 ← phi( test_16u::@6/(word) rem16u#52 )
  (byte*) print_char_cursor#107 ← phi( test_16u::@6/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#41 ← (byte*) print_char_cursor#107
  (byte*) print_str::str#6 ← (const byte*) test_16u::str2
  call print_str 
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  (byte) test_16u::i#5 ← phi( test_16u::@7/(byte) test_16u::i#6 )
  (byte*) print_line_cursor#49 ← phi( test_16u::@7/(byte*) print_line_cursor#53 )
  (word) rem16u#31 ← phi( test_16u::@7/(word) rem16u#43 )
  (byte*) print_char_cursor#108 ← phi( test_16u::@7/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#108
  (word) print_uint::w#4 ← (word) rem16u#31
  call print_uint 
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  (word) rem16u#53 ← phi( test_16u::@8/(word) rem16u#31 )
  (byte) test_16u::i#4 ← phi( test_16u::@8/(byte) test_16u::i#5 )
  (byte*) print_line_cursor#44 ← phi( test_16u::@8/(byte*) print_line_cursor#49 )
  (byte*) print_char_cursor#109 ← phi( test_16u::@8/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#43 ← (byte*) print_char_cursor#109
  call print_ln 
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  (word) rem16u#44 ← phi( test_16u::@9/(word) rem16u#53 )
  (byte) test_16u::i#3 ← phi( test_16u::@9/(byte) test_16u::i#4 )
  (byte*) print_char_cursor#110 ← phi( test_16u::@9/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#33 ← phi( test_16u::@9/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#33
  (byte*) print_char_cursor#44 ← (byte*) print_char_cursor#110
  (byte) test_16u::i#1 ← (byte) test_16u::i#3 + rangenext(0,5)
  (bool~) test_16u::$9 ← (byte) test_16u::i#1 != rangelast(0,5)
  if((bool~) test_16u::$9) goto test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@10
  (byte*) print_line_cursor#34 ← phi( test_16u::@10/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#111 ← phi( test_16u::@10/(byte*) print_char_cursor#44 )
  (word) rem16u#32 ← phi( test_16u::@10/(word) rem16u#44 )
  (word) rem16u#12 ← (word) rem16u#32
  (byte*) print_char_cursor#45 ← (byte*) print_char_cursor#111
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#34
  return 
  to:@return

(void()) test_8s()
test_8s: scope:[test_8s]  from main::@3
  (byte*) print_line_cursor#82 ← phi( main::@3/(byte*) print_line_cursor#6 )
  (byte*) print_char_cursor#158 ← phi( main::@3/(byte*) print_char_cursor#24 )
  (signed byte) rem8s#25 ← phi( main::@3/(signed byte) rem8s#18 )
  (byte) rem8u#50 ← phi( main::@3/(byte) rem8u#36 )
  (byte) test_8s::i#0 ← (byte) 0
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@10
  (byte*) print_line_cursor#78 ← phi( test_8s/(byte*) print_line_cursor#82 test_8s::@10/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#154 ← phi( test_8s/(byte*) print_char_cursor#158 test_8s::@10/(byte*) print_char_cursor#53 )
  (signed byte) rem8s#20 ← phi( test_8s/(signed byte) rem8s#25 test_8s::@10/(signed byte) rem8s#22 )
  (byte) rem8u#41 ← phi( test_8s/(byte) rem8u#50 test_8s::@10/(byte) rem8u#42 )
  (byte) test_8s::i#2 ← phi( test_8s/(byte) test_8s::i#0 test_8s::@10/(byte) test_8s::i#1 )
  (signed byte) test_8s::dividend#0 ← *((const signed byte*) test_8s::dividends + (byte) test_8s::i#2)
  (signed byte) test_8s::divisor#0 ← *((const signed byte*) test_8s::divisors + (byte) test_8s::i#2)
  (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0
  (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0
  call div8s 
  (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
  to:test_8s::@2
test_8s::@2: scope:[test_8s]  from test_8s::@1
  (byte) test_8s::i#11 ← phi( test_8s::@1/(byte) test_8s::i#2 )
  (byte*) print_line_cursor#74 ← phi( test_8s::@1/(byte*) print_line_cursor#78 )
  (signed byte) test_8s::divisor#3 ← phi( test_8s::@1/(signed byte) test_8s::divisor#0 )
  (byte*) print_char_cursor#146 ← phi( test_8s::@1/(byte*) print_char_cursor#154 )
  (signed byte) test_8s::dividend#1 ← phi( test_8s::@1/(signed byte) test_8s::dividend#0 )
  (signed byte) rem8s#13 ← phi( test_8s::@1/(signed byte) rem8s#2 )
  (byte) rem8u#29 ← phi( test_8s::@1/(byte) rem8u#5 )
  (signed byte) div8s::return#5 ← phi( test_8s::@1/(signed byte) div8s::return#3 )
  (signed byte~) test_8s::$0 ← (signed byte) div8s::return#5
  (byte) rem8u#11 ← (byte) rem8u#29
  (signed byte) rem8s#5 ← (signed byte) rem8s#13
  (signed byte) test_8s::res#0 ← (signed byte~) test_8s::$0
  (signed byte) print_schar::b#1 ← (signed byte) test_8s::dividend#1
  call print_schar 
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@2
  (byte) rem8u#64 ← phi( test_8s::@2/(byte) rem8u#11 )
  (byte) test_8s::i#10 ← phi( test_8s::@2/(byte) test_8s::i#11 )
  (byte*) print_line_cursor#70 ← phi( test_8s::@2/(byte*) print_line_cursor#74 )
  (signed byte) rem8s#32 ← phi( test_8s::@2/(signed byte) rem8s#5 )
  (signed byte) test_8s::res#4 ← phi( test_8s::@2/(signed byte) test_8s::res#0 )
  (signed byte) test_8s::divisor#2 ← phi( test_8s::@2/(signed byte) test_8s::divisor#3 )
  (byte*) print_char_cursor#112 ← phi( test_8s::@2/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#46 ← (byte*) print_char_cursor#112
  (byte*) print_str::str#7 ← (const byte*) test_8s::str
  call print_str 
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  (byte) rem8u#63 ← phi( test_8s::@3/(byte) rem8u#64 )
  (byte) test_8s::i#9 ← phi( test_8s::@3/(byte) test_8s::i#10 )
  (byte*) print_line_cursor#66 ← phi( test_8s::@3/(byte*) print_line_cursor#70 )
  (signed byte) rem8s#31 ← phi( test_8s::@3/(signed byte) rem8s#32 )
  (signed byte) test_8s::res#3 ← phi( test_8s::@3/(signed byte) test_8s::res#4 )
  (signed byte) test_8s::divisor#1 ← phi( test_8s::@3/(signed byte) test_8s::divisor#2 )
  (byte*) print_char_cursor#113 ← phi( test_8s::@3/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#47 ← (byte*) print_char_cursor#113
  (signed byte) print_schar::b#2 ← (signed byte) test_8s::divisor#1
  call print_schar 
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  (byte) rem8u#62 ← phi( test_8s::@4/(byte) rem8u#63 )
  (byte) test_8s::i#8 ← phi( test_8s::@4/(byte) test_8s::i#9 )
  (byte*) print_line_cursor#62 ← phi( test_8s::@4/(byte*) print_line_cursor#66 )
  (signed byte) rem8s#29 ← phi( test_8s::@4/(signed byte) rem8s#31 )
  (signed byte) test_8s::res#2 ← phi( test_8s::@4/(signed byte) test_8s::res#3 )
  (byte*) print_char_cursor#114 ← phi( test_8s::@4/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#48 ← (byte*) print_char_cursor#114
  (byte*) print_str::str#8 ← (const byte*) test_8s::str1
  call print_str 
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  (byte) rem8u#61 ← phi( test_8s::@5/(byte) rem8u#62 )
  (byte) test_8s::i#7 ← phi( test_8s::@5/(byte) test_8s::i#8 )
  (byte*) print_line_cursor#58 ← phi( test_8s::@5/(byte*) print_line_cursor#62 )
  (signed byte) rem8s#26 ← phi( test_8s::@5/(signed byte) rem8s#29 )
  (signed byte) test_8s::res#1 ← phi( test_8s::@5/(signed byte) test_8s::res#2 )
  (byte*) print_char_cursor#115 ← phi( test_8s::@5/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#49 ← (byte*) print_char_cursor#115
  (signed byte) print_schar::b#3 ← (signed byte) test_8s::res#1
  call print_schar 
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  (byte) rem8u#58 ← phi( test_8s::@6/(byte) rem8u#61 )
  (byte) test_8s::i#6 ← phi( test_8s::@6/(byte) test_8s::i#7 )
  (byte*) print_line_cursor#54 ← phi( test_8s::@6/(byte*) print_line_cursor#58 )
  (signed byte) rem8s#21 ← phi( test_8s::@6/(signed byte) rem8s#26 )
  (byte*) print_char_cursor#116 ← phi( test_8s::@6/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#50 ← (byte*) print_char_cursor#116
  (byte*) print_str::str#9 ← (const byte*) test_8s::str2
  call print_str 
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  (byte) rem8u#54 ← phi( test_8s::@7/(byte) rem8u#58 )
  (byte) test_8s::i#5 ← phi( test_8s::@7/(byte) test_8s::i#6 )
  (byte*) print_line_cursor#50 ← phi( test_8s::@7/(byte*) print_line_cursor#54 )
  (signed byte) rem8s#14 ← phi( test_8s::@7/(signed byte) rem8s#21 )
  (byte*) print_char_cursor#117 ← phi( test_8s::@7/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#51 ← (byte*) print_char_cursor#117
  (signed byte) print_schar::b#4 ← (signed byte) rem8s#14
  call print_schar 
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  (signed byte) rem8s#27 ← phi( test_8s::@8/(signed byte) rem8s#14 )
  (byte) rem8u#51 ← phi( test_8s::@8/(byte) rem8u#54 )
  (byte) test_8s::i#4 ← phi( test_8s::@8/(byte) test_8s::i#5 )
  (byte*) print_line_cursor#45 ← phi( test_8s::@8/(byte*) print_line_cursor#50 )
  (byte*) print_char_cursor#118 ← phi( test_8s::@8/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#52 ← (byte*) print_char_cursor#118
  call print_ln 
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  (signed byte) rem8s#22 ← phi( test_8s::@9/(signed byte) rem8s#27 )
  (byte) rem8u#42 ← phi( test_8s::@9/(byte) rem8u#51 )
  (byte) test_8s::i#3 ← phi( test_8s::@9/(byte) test_8s::i#4 )
  (byte*) print_char_cursor#119 ← phi( test_8s::@9/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#35 ← phi( test_8s::@9/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#35
  (byte*) print_char_cursor#53 ← (byte*) print_char_cursor#119
  (byte) test_8s::i#1 ← (byte) test_8s::i#3 + rangenext(0,5)
  (bool~) test_8s::$9 ← (byte) test_8s::i#1 != rangelast(0,5)
  if((bool~) test_8s::$9) goto test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@10
  (byte*) print_line_cursor#36 ← phi( test_8s::@10/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#120 ← phi( test_8s::@10/(byte*) print_char_cursor#53 )
  (signed byte) rem8s#15 ← phi( test_8s::@10/(signed byte) rem8s#22 )
  (byte) rem8u#30 ← phi( test_8s::@10/(byte) rem8u#42 )
  (byte) rem8u#12 ← (byte) rem8u#30
  (signed byte) rem8s#6 ← (signed byte) rem8s#15
  (byte*) print_char_cursor#54 ← (byte*) print_char_cursor#120
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#36
  return 
  to:@return

(void()) test_16s()
test_16s: scope:[test_16s]  from main::@4
  (byte*) print_line_cursor#83 ← phi( main::@4/(byte*) print_line_cursor#7 )
  (byte*) print_char_cursor#159 ← phi( main::@4/(byte*) print_char_cursor#25 )
  (signed word) rem16s#29 ← phi( main::@4/(signed word) rem16s#23 )
  (word) rem16u#54 ← phi( main::@4/(word) rem16u#41 )
  (byte) test_16s::i#0 ← (byte) 0
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@10
  (byte*) print_line_cursor#79 ← phi( test_16s/(byte*) print_line_cursor#83 test_16s::@10/(byte*) print_line_cursor#16 )
  (byte*) print_char_cursor#155 ← phi( test_16s/(byte*) print_char_cursor#159 test_16s::@10/(byte*) print_char_cursor#62 )
  (signed word) rem16s#24 ← phi( test_16s/(signed word) rem16s#29 test_16s::@10/(signed word) rem16s#26 )
  (word) rem16u#45 ← phi( test_16s/(word) rem16u#54 test_16s::@10/(word) rem16u#46 )
  (byte) test_16s::i#2 ← phi( test_16s/(byte) test_16s::i#0 test_16s::@10/(byte) test_16s::i#1 )
  (byte~) test_16s::$10 ← (byte) test_16s::i#2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) test_16s::dividend#0 ← *((const signed word*) test_16s::dividends + (byte~) test_16s::$10)
  (byte~) test_16s::$11 ← (byte) test_16s::i#2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) test_16s::divisor#0 ← *((const signed word*) test_16s::divisors + (byte~) test_16s::$11)
  (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
  (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
  call div16s 
  (signed word) div16s::return#2 ← (signed word) div16s::return#1
  to:test_16s::@2
test_16s::@2: scope:[test_16s]  from test_16s::@1
  (byte) test_16s::i#11 ← phi( test_16s::@1/(byte) test_16s::i#2 )
  (byte*) print_line_cursor#75 ← phi( test_16s::@1/(byte*) print_line_cursor#79 )
  (signed word) test_16s::divisor#3 ← phi( test_16s::@1/(signed word) test_16s::divisor#0 )
  (byte*) print_char_cursor#147 ← phi( test_16s::@1/(byte*) print_char_cursor#155 )
  (signed word) test_16s::dividend#1 ← phi( test_16s::@1/(signed word) test_16s::dividend#0 )
  (signed word) rem16s#17 ← phi( test_16s::@1/(signed word) rem16s#4 )
  (word) rem16u#33 ← phi( test_16s::@1/(word) rem16u#7 )
  (signed word) div16s::return#4 ← phi( test_16s::@1/(signed word) div16s::return#2 )
  (signed word~) test_16s::$0 ← (signed word) div16s::return#4
  (word) rem16u#13 ← (word) rem16u#33
  (signed word) rem16s#7 ← (signed word) rem16s#17
  (signed word) test_16s::res#0 ← (signed word~) test_16s::$0
  (signed word) print_sint::w#1 ← (signed word) test_16s::dividend#1
  call print_sint 
  to:test_16s::@3
test_16s::@3: scope:[test_16s]  from test_16s::@2
  (word) rem16u#69 ← phi( test_16s::@2/(word) rem16u#13 )
  (byte) test_16s::i#10 ← phi( test_16s::@2/(byte) test_16s::i#11 )
  (byte*) print_line_cursor#71 ← phi( test_16s::@2/(byte*) print_line_cursor#75 )
  (signed word) rem16s#37 ← phi( test_16s::@2/(signed word) rem16s#7 )
  (signed word) test_16s::res#4 ← phi( test_16s::@2/(signed word) test_16s::res#0 )
  (signed word) test_16s::divisor#2 ← phi( test_16s::@2/(signed word) test_16s::divisor#3 )
  (byte*) print_char_cursor#121 ← phi( test_16s::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#55 ← (byte*) print_char_cursor#121
  (byte*) print_str::str#10 ← (const byte*) test_16s::str
  call print_str 
  to:test_16s::@4
test_16s::@4: scope:[test_16s]  from test_16s::@3
  (word) rem16u#68 ← phi( test_16s::@3/(word) rem16u#69 )
  (byte) test_16s::i#9 ← phi( test_16s::@3/(byte) test_16s::i#10 )
  (byte*) print_line_cursor#67 ← phi( test_16s::@3/(byte*) print_line_cursor#71 )
  (signed word) rem16s#35 ← phi( test_16s::@3/(signed word) rem16s#37 )
  (signed word) test_16s::res#3 ← phi( test_16s::@3/(signed word) test_16s::res#4 )
  (signed word) test_16s::divisor#1 ← phi( test_16s::@3/(signed word) test_16s::divisor#2 )
  (byte*) print_char_cursor#122 ← phi( test_16s::@3/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#56 ← (byte*) print_char_cursor#122
  (signed word) print_sint::w#2 ← (signed word) test_16s::divisor#1
  call print_sint 
  to:test_16s::@5
test_16s::@5: scope:[test_16s]  from test_16s::@4
  (word) rem16u#67 ← phi( test_16s::@4/(word) rem16u#68 )
  (byte) test_16s::i#8 ← phi( test_16s::@4/(byte) test_16s::i#9 )
  (byte*) print_line_cursor#63 ← phi( test_16s::@4/(byte*) print_line_cursor#67 )
  (signed word) rem16s#33 ← phi( test_16s::@4/(signed word) rem16s#35 )
  (signed word) test_16s::res#2 ← phi( test_16s::@4/(signed word) test_16s::res#3 )
  (byte*) print_char_cursor#123 ← phi( test_16s::@4/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#57 ← (byte*) print_char_cursor#123
  (byte*) print_str::str#11 ← (const byte*) test_16s::str1
  call print_str 
  to:test_16s::@6
test_16s::@6: scope:[test_16s]  from test_16s::@5
  (word) rem16u#66 ← phi( test_16s::@5/(word) rem16u#67 )
  (byte) test_16s::i#7 ← phi( test_16s::@5/(byte) test_16s::i#8 )
  (byte*) print_line_cursor#59 ← phi( test_16s::@5/(byte*) print_line_cursor#63 )
  (signed word) rem16s#30 ← phi( test_16s::@5/(signed word) rem16s#33 )
  (signed word) test_16s::res#1 ← phi( test_16s::@5/(signed word) test_16s::res#2 )
  (byte*) print_char_cursor#124 ← phi( test_16s::@5/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#58 ← (byte*) print_char_cursor#124
  (signed word) print_sint::w#3 ← (signed word) test_16s::res#1
  call print_sint 
  to:test_16s::@7
test_16s::@7: scope:[test_16s]  from test_16s::@6
  (word) rem16u#63 ← phi( test_16s::@6/(word) rem16u#66 )
  (byte) test_16s::i#6 ← phi( test_16s::@6/(byte) test_16s::i#7 )
  (byte*) print_line_cursor#55 ← phi( test_16s::@6/(byte*) print_line_cursor#59 )
  (signed word) rem16s#25 ← phi( test_16s::@6/(signed word) rem16s#30 )
  (byte*) print_char_cursor#125 ← phi( test_16s::@6/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#59 ← (byte*) print_char_cursor#125
  (byte*) print_str::str#12 ← (const byte*) test_16s::str2
  call print_str 
  to:test_16s::@8
test_16s::@8: scope:[test_16s]  from test_16s::@7
  (word) rem16u#59 ← phi( test_16s::@7/(word) rem16u#63 )
  (byte) test_16s::i#5 ← phi( test_16s::@7/(byte) test_16s::i#6 )
  (byte*) print_line_cursor#51 ← phi( test_16s::@7/(byte*) print_line_cursor#55 )
  (signed word) rem16s#18 ← phi( test_16s::@7/(signed word) rem16s#25 )
  (byte*) print_char_cursor#126 ← phi( test_16s::@7/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#60 ← (byte*) print_char_cursor#126
  (signed word) print_sint::w#4 ← (signed word) rem16s#18
  call print_sint 
  to:test_16s::@9
test_16s::@9: scope:[test_16s]  from test_16s::@8
  (signed word) rem16s#31 ← phi( test_16s::@8/(signed word) rem16s#18 )
  (word) rem16u#55 ← phi( test_16s::@8/(word) rem16u#59 )
  (byte) test_16s::i#4 ← phi( test_16s::@8/(byte) test_16s::i#5 )
  (byte*) print_line_cursor#46 ← phi( test_16s::@8/(byte*) print_line_cursor#51 )
  (byte*) print_char_cursor#127 ← phi( test_16s::@8/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#61 ← (byte*) print_char_cursor#127
  call print_ln 
  to:test_16s::@10
test_16s::@10: scope:[test_16s]  from test_16s::@9
  (signed word) rem16s#26 ← phi( test_16s::@9/(signed word) rem16s#31 )
  (word) rem16u#46 ← phi( test_16s::@9/(word) rem16u#55 )
  (byte) test_16s::i#3 ← phi( test_16s::@9/(byte) test_16s::i#4 )
  (byte*) print_char_cursor#128 ← phi( test_16s::@9/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#37 ← phi( test_16s::@9/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#16 ← (byte*) print_line_cursor#37
  (byte*) print_char_cursor#62 ← (byte*) print_char_cursor#128
  (byte) test_16s::i#1 ← (byte) test_16s::i#3 + rangenext(0,5)
  (bool~) test_16s::$9 ← (byte) test_16s::i#1 != rangelast(0,5)
  if((bool~) test_16s::$9) goto test_16s::@1
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@10
  (byte*) print_line_cursor#38 ← phi( test_16s::@10/(byte*) print_line_cursor#16 )
  (byte*) print_char_cursor#129 ← phi( test_16s::@10/(byte*) print_char_cursor#62 )
  (signed word) rem16s#19 ← phi( test_16s::@10/(signed word) rem16s#26 )
  (word) rem16u#34 ← phi( test_16s::@10/(word) rem16u#46 )
  (word) rem16u#14 ← (word) rem16u#34
  (signed word) rem16s#8 ← (signed word) rem16s#19
  (byte*) print_char_cursor#63 ← (byte*) print_char_cursor#129
  (byte*) print_line_cursor#17 ← (byte*) print_line_cursor#38
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#18 ← (byte*) print_screen#0
  (byte*) print_char_cursor#64 ← (byte*) print_line_cursor#18
  (byte) rem8u#13 ← (byte) 0
  (word) rem16u#15 ← (word) 0
  (signed byte) rem8s#7 ← (signed byte) 0
  (signed word) rem16s#9 ← (signed word) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte*) print_screen#7 ← phi( _start::_init1/(byte*) print_screen#0 )
  (signed word) rem16s#27 ← phi( _start::_init1/(signed word) rem16s#9 )
  (signed byte) rem8s#23 ← phi( _start::_init1/(signed byte) rem8s#7 )
  (word) rem16u#47 ← phi( _start::_init1/(word) rem16u#15 )
  (byte) rem8u#43 ← phi( _start::_init1/(byte) rem8u#13 )
  (byte*) print_char_cursor#148 ← phi( _start::_init1/(byte*) print_char_cursor#64 )
  (byte*) print_line_cursor#47 ← phi( _start::_init1/(byte*) print_line_cursor#18 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte*) print_screen#6 ← phi( _start::@1/(byte*) print_screen#7 )
  (signed word) rem16s#20 ← phi( _start::@1/(signed word) rem16s#6 )
  (signed byte) rem8s#16 ← phi( _start::@1/(signed byte) rem8s#4 )
  (word) rem16u#35 ← phi( _start::@1/(word) rem16u#10 )
  (byte) rem8u#31 ← phi( _start::@1/(byte) rem8u#8 )
  (byte*) print_char_cursor#130 ← phi( _start::@1/(byte*) print_char_cursor#27 )
  (byte*) print_line_cursor#39 ← phi( _start::@1/(byte*) print_line_cursor#9 )
  (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#39
  (byte*) print_char_cursor#65 ← (byte*) print_char_cursor#130
  (byte) rem8u#14 ← (byte) rem8u#31
  (word) rem16u#16 ← (word) rem16u#35
  (signed byte) rem8s#8 ← (signed byte) rem8s#16
  (signed word) rem16s#10 ← (signed word) rem16s#20
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (signed word) rem16s#21 ← phi( _start::@2/(signed word) rem16s#10 )
  (signed byte) rem8s#17 ← phi( _start::@2/(signed byte) rem8s#8 )
  (word) rem16u#36 ← phi( _start::@2/(word) rem16u#16 )
  (byte) rem8u#32 ← phi( _start::@2/(byte) rem8u#14 )
  (byte*) print_char_cursor#131 ← phi( _start::@2/(byte*) print_char_cursor#65 )
  (byte*) print_line_cursor#40 ← phi( _start::@2/(byte*) print_line_cursor#19 )
  (byte*) print_screen#4 ← phi( _start::@2/(byte*) print_screen#6 )
  (byte*) print_screen#1 ← (byte*) print_screen#4
  (byte*) print_line_cursor#20 ← (byte*) print_line_cursor#40
  (byte*) print_char_cursor#66 ← (byte*) print_char_cursor#131
  (byte) rem8u#15 ← (byte) rem8u#32
  (word) rem16u#17 ← (word) rem16u#36
  (signed byte) rem8s#9 ← (signed byte) rem8s#17
  (signed word) rem16s#11 ← (signed word) rem16s#21
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word~) div16s::$0
(label) div16s::@1
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0
(signed word) div16s::dividend#1
(signed word) div16s::divisor
(signed word) div16s::divisor#0
(signed word) div16s::divisor#1
(signed word) div16s::return
(signed word) div16s::return#0
(signed word) div16s::return#1
(signed word) div16s::return#2
(signed word) div16s::return#3
(signed word) div16s::return#4
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(bool~) div8s::$0
(bool~) div8s::$1
(byte~) div8s::$2
(bool~) div8s::$3
(signed byte~) div8s::$4
(signed byte~) div8s::$5
(number~) div8s::$6
(signed byte~) div8s::$7
(signed byte~) div8s::$8
(label) div8s::@1
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@6
(label) div8s::@7
(label) div8s::@8
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0
(signed byte) div8s::dividend#1
(signed byte) div8s::dividend#2
(signed byte) div8s::dividend#3
(byte) div8s::dividendu
(byte) div8s::dividendu#0
(byte) div8s::dividendu#1
(byte) div8s::dividendu#2
(byte) div8s::dividendu#3
(byte) div8s::dividendu#4
(byte) div8s::dividendu#5
(byte) div8s::dividendu#6
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0
(signed byte) div8s::divisor#1
(signed byte) div8s::divisor#2
(signed byte) div8s::divisor#3
(signed byte) div8s::divisor#4
(signed byte) div8s::divisor#5
(signed byte) div8s::divisor#6
(byte) div8s::divisoru
(byte) div8s::divisoru#0
(byte) div8s::divisoru#1
(byte) div8s::divisoru#2
(byte) div8s::divisoru#3
(byte) div8s::neg
(byte) div8s::neg#0
(byte) div8s::neg#1
(byte) div8s::neg#2
(byte) div8s::neg#3
(byte) div8s::neg#4
(byte) div8s::neg#5
(byte) div8s::neg#6
(byte) div8s::neg#7
(byte) div8s::neg#8
(byte) div8s::resultu
(byte) div8s::resultu#0
(byte) div8s::resultu#1
(byte) div8s::resultu#2
(signed byte) div8s::return
(signed byte) div8s::return#0
(signed byte) div8s::return#1
(signed byte) div8s::return#2
(signed byte) div8s::return#3
(signed byte) div8s::return#4
(signed byte) div8s::return#5
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$0
(label) div8u::@1
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0
(byte) div8u::dividend#1
(byte) div8u::dividend#2
(byte) div8u::divisor
(byte) div8u::divisor#0
(byte) div8u::divisor#1
(byte) div8u::divisor#2
(byte) div8u::return
(byte) div8u::return#0
(byte) div8u::return#1
(byte) div8u::return#2
(byte) div8u::return#3
(byte) div8u::return#4
(byte) div8u::return#5
(byte) div8u::return#6
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(bool~) divr16s::$0
(bool~) divr16s::$1
(signed word~) divr16s::$10
(signed word~) divr16s::$11
(bool~) divr16s::$2
(bool~) divr16s::$3
(word~) divr16s::$4
(bool~) divr16s::$5
(signed word~) divr16s::$6
(signed word~) divr16s::$7
(signed word~) divr16s::$8
(number~) divr16s::$9
(label) divr16s::@1
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@6
(label) divr16s::@7
(label) divr16s::@8
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0
(signed word) divr16s::dividend#1
(signed word) divr16s::dividend#2
(signed word) divr16s::dividend#3
(word) divr16s::dividendu
(word) divr16s::dividendu#0
(word) divr16s::dividendu#1
(word) divr16s::dividendu#2
(word) divr16s::dividendu#3
(word) divr16s::dividendu#4
(word) divr16s::dividendu#5
(word) divr16s::dividendu#6
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0
(signed word) divr16s::divisor#1
(signed word) divr16s::divisor#2
(signed word) divr16s::divisor#3
(signed word) divr16s::divisor#4
(signed word) divr16s::divisor#5
(signed word) divr16s::divisor#6
(word) divr16s::divisoru
(word) divr16s::divisoru#0
(word) divr16s::divisoru#1
(word) divr16s::divisoru#2
(word) divr16s::divisoru#3
(byte) divr16s::neg
(byte) divr16s::neg#0
(byte) divr16s::neg#1
(byte) divr16s::neg#2
(byte) divr16s::neg#3
(byte) divr16s::neg#4
(byte) divr16s::neg#5
(byte) divr16s::neg#6
(byte) divr16s::neg#7
(byte) divr16s::neg#8
(signed word) divr16s::rem
(signed word) divr16s::rem#0
(signed word) divr16s::rem#1
(signed word) divr16s::rem#2
(signed word) divr16s::rem#3
(word) divr16s::remu
(word) divr16s::remu#0
(word) divr16s::remu#1
(word) divr16s::remu#2
(word) divr16s::remu#3
(word) divr16s::remu#4
(word) divr16s::remu#5
(word) divr16s::remu#6
(word) divr16s::resultu
(word) divr16s::resultu#0
(word) divr16s::resultu#1
(word) divr16s::resultu#2
(signed word) divr16s::return
(signed word) divr16s::return#0
(signed word) divr16s::return#1
(signed word) divr16s::return#2
(signed word) divr16s::return#3
(signed word) divr16s::return#4
(signed word) divr16s::return#5
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(number~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(number~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::dividend#8
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(word) divr16u::divisor#7
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#11
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(word) divr16u::return#5
(word) divr16u::return#6
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$0
(number~) divr8u::$1
(bool~) divr8u::$10
(bool~) divr8u::$2
(bool~) divr8u::$3
(number~) divr8u::$4
(byte~) divr8u::$5
(byte~) divr8u::$6
(bool~) divr8u::$7
(bool~) divr8u::$8
(byte~) divr8u::$9
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0
(byte) divr8u::dividend#1
(byte) divr8u::dividend#2
(byte) divr8u::dividend#3
(byte) divr8u::dividend#4
(byte) divr8u::dividend#5
(byte) divr8u::dividend#6
(byte) divr8u::dividend#7
(byte) divr8u::divisor
(byte) divr8u::divisor#0
(byte) divr8u::divisor#1
(byte) divr8u::divisor#2
(byte) divr8u::divisor#3
(byte) divr8u::divisor#4
(byte) divr8u::divisor#5
(byte) divr8u::divisor#6
(byte) divr8u::i
(byte) divr8u::i#0
(byte) divr8u::i#1
(byte) divr8u::i#2
(byte) divr8u::i#3
(byte) divr8u::i#4
(byte) divr8u::i#5
(byte) divr8u::i#6
(byte) divr8u::quotient
(byte) divr8u::quotient#0
(byte) divr8u::quotient#1
(byte) divr8u::quotient#2
(byte) divr8u::quotient#3
(byte) divr8u::quotient#4
(byte) divr8u::quotient#5
(byte) divr8u::quotient#6
(byte) divr8u::quotient#7
(byte) divr8u::quotient#8
(byte) divr8u::rem
(byte) divr8u::rem#0
(byte) divr8u::rem#1
(byte) divr8u::rem#10
(byte) divr8u::rem#2
(byte) divr8u::rem#3
(byte) divr8u::rem#4
(byte) divr8u::rem#5
(byte) divr8u::rem#6
(byte) divr8u::rem#7
(byte) divr8u::rem#8
(byte) divr8u::rem#9
(byte) divr8u::return
(byte) divr8u::return#0
(byte) divr8u::return#1
(byte) divr8u::return#2
(byte) divr8u::return#3
(byte) divr8u::return#4
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(byte) print_char::ch#7
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#108
(byte*) print_char_cursor#109
(byte*) print_char_cursor#11
(byte*) print_char_cursor#110
(byte*) print_char_cursor#111
(byte*) print_char_cursor#112
(byte*) print_char_cursor#113
(byte*) print_char_cursor#114
(byte*) print_char_cursor#115
(byte*) print_char_cursor#116
(byte*) print_char_cursor#117
(byte*) print_char_cursor#118
(byte*) print_char_cursor#119
(byte*) print_char_cursor#12
(byte*) print_char_cursor#120
(byte*) print_char_cursor#121
(byte*) print_char_cursor#122
(byte*) print_char_cursor#123
(byte*) print_char_cursor#124
(byte*) print_char_cursor#125
(byte*) print_char_cursor#126
(byte*) print_char_cursor#127
(byte*) print_char_cursor#128
(byte*) print_char_cursor#129
(byte*) print_char_cursor#13
(byte*) print_char_cursor#130
(byte*) print_char_cursor#131
(byte*) print_char_cursor#132
(byte*) print_char_cursor#133
(byte*) print_char_cursor#134
(byte*) print_char_cursor#135
(byte*) print_char_cursor#136
(byte*) print_char_cursor#137
(byte*) print_char_cursor#138
(byte*) print_char_cursor#139
(byte*) print_char_cursor#14
(byte*) print_char_cursor#140
(byte*) print_char_cursor#141
(byte*) print_char_cursor#142
(byte*) print_char_cursor#143
(byte*) print_char_cursor#144
(byte*) print_char_cursor#145
(byte*) print_char_cursor#146
(byte*) print_char_cursor#147
(byte*) print_char_cursor#148
(byte*) print_char_cursor#149
(byte*) print_char_cursor#15
(byte*) print_char_cursor#150
(byte*) print_char_cursor#151
(byte*) print_char_cursor#152
(byte*) print_char_cursor#153
(byte*) print_char_cursor#154
(byte*) print_char_cursor#155
(byte*) print_char_cursor#156
(byte*) print_char_cursor#157
(byte*) print_char_cursor#158
(byte*) print_char_cursor#159
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#68
(byte*) print_line_cursor#69
(byte*) print_line_cursor#7
(byte*) print_line_cursor#70
(byte*) print_line_cursor#71
(byte*) print_line_cursor#72
(byte*) print_line_cursor#73
(byte*) print_line_cursor#74
(byte*) print_line_cursor#75
(byte*) print_line_cursor#76
(byte*) print_line_cursor#77
(byte*) print_line_cursor#78
(byte*) print_line_cursor#79
(byte*) print_line_cursor#8
(byte*) print_line_cursor#80
(byte*) print_line_cursor#81
(byte*) print_line_cursor#82
(byte*) print_line_cursor#83
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_schar((signed byte) print_schar::b)
(bool~) print_schar::$0
(signed byte~) print_schar::$4
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@5
(label) print_schar::@6
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0
(signed byte) print_schar::b#1
(signed byte) print_schar::b#10
(signed byte) print_schar::b#2
(signed byte) print_schar::b#3
(signed byte) print_schar::b#4
(signed byte) print_schar::b#5
(signed byte) print_schar::b#6
(signed byte) print_schar::b#7
(signed byte) print_schar::b#8
(signed byte) print_schar::b#9
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(void()) print_sint((signed word) print_sint::w)
(bool~) print_sint::$0
(signed word~) print_sint::$4
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@5
(label) print_sint::@6
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0
(signed word) print_sint::w#1
(signed word) print_sint::w#10
(signed word) print_sint::w#2
(signed word) print_sint::w#3
(signed word) print_sint::w#4
(signed word) print_sint::w#5
(signed word) print_sint::w#6
(signed word) print_sint::w#7
(signed word) print_sint::w#8
(signed word) print_sint::w#9
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#13
(byte*) print_str::str#14
(byte*) print_str::str#15
(byte*) print_str::str#16
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(byte) print_uchar::b#3
(byte) print_uchar::b#4
(byte) print_uchar::b#5
(byte) print_uchar::b#6
(byte) print_uchar::b#7
(byte) print_uchar::b#8
(void()) print_uint((word) print_uint::w)
(byte~) print_uint::$0
(byte~) print_uint::$2
(label) print_uint::@1
(label) print_uint::@2
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0
(word) print_uint::w#1
(word) print_uint::w#2
(word) print_uint::w#3
(word) print_uint::w#4
(word) print_uint::w#5
(word) print_uint::w#6
(signed word) rem16s
(signed word) rem16s#0
(signed word) rem16s#1
(signed word) rem16s#10
(signed word) rem16s#11
(signed word) rem16s#12
(signed word) rem16s#13
(signed word) rem16s#14
(signed word) rem16s#15
(signed word) rem16s#16
(signed word) rem16s#17
(signed word) rem16s#18
(signed word) rem16s#19
(signed word) rem16s#2
(signed word) rem16s#20
(signed word) rem16s#21
(signed word) rem16s#22
(signed word) rem16s#23
(signed word) rem16s#24
(signed word) rem16s#25
(signed word) rem16s#26
(signed word) rem16s#27
(signed word) rem16s#28
(signed word) rem16s#29
(signed word) rem16s#3
(signed word) rem16s#30
(signed word) rem16s#31
(signed word) rem16s#32
(signed word) rem16s#33
(signed word) rem16s#34
(signed word) rem16s#35
(signed word) rem16s#36
(signed word) rem16s#37
(signed word) rem16s#4
(signed word) rem16s#5
(signed word) rem16s#6
(signed word) rem16s#7
(signed word) rem16s#8
(signed word) rem16s#9
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#42
(word) rem16u#43
(word) rem16u#44
(word) rem16u#45
(word) rem16u#46
(word) rem16u#47
(word) rem16u#48
(word) rem16u#49
(word) rem16u#5
(word) rem16u#50
(word) rem16u#51
(word) rem16u#52
(word) rem16u#53
(word) rem16u#54
(word) rem16u#55
(word) rem16u#56
(word) rem16u#57
(word) rem16u#58
(word) rem16u#59
(word) rem16u#6
(word) rem16u#60
(word) rem16u#61
(word) rem16u#62
(word) rem16u#63
(word) rem16u#64
(word) rem16u#65
(word) rem16u#66
(word) rem16u#67
(word) rem16u#68
(word) rem16u#69
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed byte) rem8s
(signed byte) rem8s#0
(signed byte) rem8s#1
(signed byte) rem8s#10
(signed byte) rem8s#11
(signed byte) rem8s#12
(signed byte) rem8s#13
(signed byte) rem8s#14
(signed byte) rem8s#15
(signed byte) rem8s#16
(signed byte) rem8s#17
(signed byte) rem8s#18
(signed byte) rem8s#19
(signed byte) rem8s#2
(signed byte) rem8s#20
(signed byte) rem8s#21
(signed byte) rem8s#22
(signed byte) rem8s#23
(signed byte) rem8s#24
(signed byte) rem8s#25
(signed byte) rem8s#26
(signed byte) rem8s#27
(signed byte) rem8s#28
(signed byte) rem8s#29
(signed byte) rem8s#3
(signed byte) rem8s#30
(signed byte) rem8s#31
(signed byte) rem8s#32
(signed byte) rem8s#4
(signed byte) rem8s#5
(signed byte) rem8s#6
(signed byte) rem8s#7
(signed byte) rem8s#8
(signed byte) rem8s#9
(byte) rem8u
(byte) rem8u#0
(byte) rem8u#1
(byte) rem8u#10
(byte) rem8u#11
(byte) rem8u#12
(byte) rem8u#13
(byte) rem8u#14
(byte) rem8u#15
(byte) rem8u#16
(byte) rem8u#17
(byte) rem8u#18
(byte) rem8u#19
(byte) rem8u#2
(byte) rem8u#20
(byte) rem8u#21
(byte) rem8u#22
(byte) rem8u#23
(byte) rem8u#24
(byte) rem8u#25
(byte) rem8u#26
(byte) rem8u#27
(byte) rem8u#28
(byte) rem8u#29
(byte) rem8u#3
(byte) rem8u#30
(byte) rem8u#31
(byte) rem8u#32
(byte) rem8u#33
(byte) rem8u#34
(byte) rem8u#35
(byte) rem8u#36
(byte) rem8u#37
(byte) rem8u#38
(byte) rem8u#39
(byte) rem8u#4
(byte) rem8u#40
(byte) rem8u#41
(byte) rem8u#42
(byte) rem8u#43
(byte) rem8u#44
(byte) rem8u#45
(byte) rem8u#46
(byte) rem8u#47
(byte) rem8u#48
(byte) rem8u#49
(byte) rem8u#5
(byte) rem8u#50
(byte) rem8u#51
(byte) rem8u#52
(byte) rem8u#53
(byte) rem8u#54
(byte) rem8u#55
(byte) rem8u#56
(byte) rem8u#57
(byte) rem8u#58
(byte) rem8u#59
(byte) rem8u#6
(byte) rem8u#60
(byte) rem8u#61
(byte) rem8u#62
(byte) rem8u#63
(byte) rem8u#64
(byte) rem8u#7
(byte) rem8u#8
(byte) rem8u#9
(void()) test_16s()
(signed word~) test_16s::$0
(byte~) test_16s::$10
(byte~) test_16s::$11
(bool~) test_16s::$9
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@2
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0
(signed word) test_16s::dividend#1
(const signed word*) test_16s::dividends[]  = { (signed word) $7fff, (signed word) $7fff, (signed word) -$7fff, (signed word) -$7fff, (signed word) $7fff, (signed word) -$7fff }
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0
(signed word) test_16s::divisor#1
(signed word) test_16s::divisor#2
(signed word) test_16s::divisor#3
(const signed word*) test_16s::divisors[]  = { (signed word) 5, (signed word) -7, (signed word) $b, (signed word) -$d, (signed word) -$11, (signed word) $13 }
(byte) test_16s::i
(byte) test_16s::i#0
(byte) test_16s::i#1
(byte) test_16s::i#10
(byte) test_16s::i#11
(byte) test_16s::i#2
(byte) test_16s::i#3
(byte) test_16s::i#4
(byte) test_16s::i#5
(byte) test_16s::i#6
(byte) test_16s::i#7
(byte) test_16s::i#8
(byte) test_16s::i#9
(signed word) test_16s::res
(signed word) test_16s::res#0
(signed word) test_16s::res#1
(signed word) test_16s::res#2
(signed word) test_16s::res#3
(signed word) test_16s::res#4
(const byte*) test_16s::str[(byte) 4]  = (byte*) " / "
(const byte*) test_16s::str1[(byte) 4]  = (byte*) " = "
(const byte*) test_16s::str2[(byte) 2]  = (byte*) " "
(void()) test_16u()
(word~) test_16u::$0
(byte~) test_16u::$10
(byte~) test_16u::$11
(bool~) test_16u::$9
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@2
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0
(word) test_16u::dividend#1
(const word*) test_16u::dividends[]  = { (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff }
(word) test_16u::divisor
(word) test_16u::divisor#0
(word) test_16u::divisor#1
(word) test_16u::divisor#2
(word) test_16u::divisor#3
(const word*) test_16u::divisors[]  = { (word) 5, (word) 7, (word) $b, (word) $d, (word) $11, (word) $13 }
(byte) test_16u::i
(byte) test_16u::i#0
(byte) test_16u::i#1
(byte) test_16u::i#10
(byte) test_16u::i#11
(byte) test_16u::i#2
(byte) test_16u::i#3
(byte) test_16u::i#4
(byte) test_16u::i#5
(byte) test_16u::i#6
(byte) test_16u::i#7
(byte) test_16u::i#8
(byte) test_16u::i#9
(word) test_16u::res
(word) test_16u::res#0
(word) test_16u::res#1
(word) test_16u::res#2
(word) test_16u::res#3
(word) test_16u::res#4
(const byte*) test_16u::str[(byte) 4]  = (byte*) " / "
(const byte*) test_16u::str1[(byte) 4]  = (byte*) " = "
(const byte*) test_16u::str2[(byte) 2]  = (byte*) " "
(void()) test_8s()
(signed byte~) test_8s::$0
(bool~) test_8s::$9
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@2
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0
(signed byte) test_8s::dividend#1
(const signed byte*) test_8s::dividends[]  = { (signed byte) $7f, (signed byte) -$7f, (signed byte) -$7f, (signed byte) $7f, (signed byte) $7f, (signed byte) $7f }
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0
(signed byte) test_8s::divisor#1
(signed byte) test_8s::divisor#2
(signed byte) test_8s::divisor#3
(const signed byte*) test_8s::divisors[]  = { (signed byte) 5, (signed byte) 7, (signed byte) -$b, (signed byte) -$d, (signed byte) $11, (signed byte) $13 }
(byte) test_8s::i
(byte) test_8s::i#0
(byte) test_8s::i#1
(byte) test_8s::i#10
(byte) test_8s::i#11
(byte) test_8s::i#2
(byte) test_8s::i#3
(byte) test_8s::i#4
(byte) test_8s::i#5
(byte) test_8s::i#6
(byte) test_8s::i#7
(byte) test_8s::i#8
(byte) test_8s::i#9
(signed byte) test_8s::res
(signed byte) test_8s::res#0
(signed byte) test_8s::res#1
(signed byte) test_8s::res#2
(signed byte) test_8s::res#3
(signed byte) test_8s::res#4
(const byte*) test_8s::str[(byte) 4]  = (byte*) " / "
(const byte*) test_8s::str1[(byte) 4]  = (byte*) " = "
(const byte*) test_8s::str2[(byte) 2]  = (byte*) " "
(void()) test_8u()
(byte~) test_8u::$0
(bool~) test_8u::$9
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@2
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0
(byte) test_8u::dividend#1
(const byte*) test_8u::dividends[]  = { (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff }
(byte) test_8u::divisor
(byte) test_8u::divisor#0
(byte) test_8u::divisor#1
(byte) test_8u::divisor#2
(byte) test_8u::divisor#3
(const byte*) test_8u::divisors[]  = { (byte) 5, (byte) 7, (byte) $b, (byte) $d, (byte) $11, (byte) $13 }
(byte) test_8u::i
(byte) test_8u::i#0
(byte) test_8u::i#1
(byte) test_8u::i#10
(byte) test_8u::i#11
(byte) test_8u::i#2
(byte) test_8u::i#3
(byte) test_8u::i#4
(byte) test_8u::i#5
(byte) test_8u::i#6
(byte) test_8u::i#7
(byte) test_8u::i#8
(byte) test_8u::i#9
(byte) test_8u::res
(byte) test_8u::res#0
(byte) test_8u::res#1
(byte) test_8u::res#2
(byte) test_8u::res#3
(byte) test_8u::res#4
(const byte*) test_8u::str[(byte) 4]  = (byte*) " / "
(const byte*) test_8u::str1[(byte) 4]  = (byte*) " = "
(const byte*) test_8u::str2[(byte) 2]  = (byte*) " "

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#13)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#21 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sint::$0 ← (signed word) print_sint::w#5 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) print_schar::$0 ← (signed byte) print_schar::b#5 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#8 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#8 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) 0 in (byte) divr8u::rem#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte~) divr8u::$0 ← (byte) divr8u::rem#4 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr8u::$1 ← (byte) divr8u::dividend#2 & (number) $80
Adding number conversion cast (unumber) divr8u::$1 in (number~) divr8u::$1 ← (byte) divr8u::dividend#2 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr8u::$2 ← (unumber~) divr8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) divr8u::$5 ← (byte) divr8u::dividend#3 << (number) 1
Adding number conversion cast (unumber) 1 in (byte~) divr8u::$6 ← (byte) divr8u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr8u::$4 ← (byte) divr8u::rem#6 | (number) 1
Adding number conversion cast (unumber) divr8u::$4 in (number~) divr8u::$4 ← (byte) divr8u::rem#6 | (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$0 ← (word) divr16u::rem#5 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
Adding number conversion cast (unumber) divr16u::$2 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr16u::$3 ← (unumber~) divr16u::$2 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$6 ← (word) divr16u::dividend#4 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr16u::$5 ← (word) divr16u::rem#7 | (number) 1
Adding number conversion cast (unumber) divr16u::$5 in (number~) divr16u::$5 ← (word) divr16u::rem#7 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#3 ← (number) 0
Adding number conversion cast (snumber) 0 in (bool~) div8s::$0 ← (signed byte) div8s::dividend#1 < (number) 0
Adding number conversion cast (unumber) 1 in (byte) div8s::neg#1 ← (number) 1
Adding number conversion cast (snumber) 0 in (bool~) div8s::$1 ← (signed byte) div8s::divisor#1 < (number) 0
Adding number conversion cast (unumber) 1 in (number~) div8s::$6 ← (byte) div8s::neg#3 ^ (number) 1
Adding number conversion cast (unumber) div8s::$6 in (number~) div8s::$6 ← (byte) div8s::neg#3 ^ (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) div8s::$3 ← (byte) div8s::neg#4 == (number) 0
Adding number conversion cast (snumber) 0 in (bool~) divr16s::$0 ← (signed word) divr16s::dividend#1 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) divr16s::$1 ← (signed word) divr16s::rem#1 < (number) 0
Adding number conversion cast (unumber) 1 in (byte) divr16s::neg#1 ← (number) 1
Adding number conversion cast (snumber) 0 in (bool~) divr16s::$3 ← (signed word) divr16s::divisor#1 < (number) 0
Adding number conversion cast (unumber) 1 in (number~) divr16s::$9 ← (byte) divr16s::neg#3 ^ (number) 1
Adding number conversion cast (unumber) divr16s::$9 in (number~) divr16s::$9 ← (byte) divr16s::neg#3 ^ (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) divr16s::$5 ← (byte) divr16s::neg#4 == (number) 0
Adding number conversion cast (snumber) 0 in (signed word) divr16s::rem#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) divr8u::rem#0 ← (unumber)(number) 0
Inlining cast (word) divr16u::rem#3 ← (unumber)(number) 0
Inlining cast (byte) div8s::neg#1 ← (unumber)(number) 1
Inlining cast (byte) divr16s::neg#1 ← (unumber)(number) 1
Inlining cast (signed word) divr16s::rem#0 ← (snumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#8 & (byte) $f
Inferred type updated to byte in (unumber~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80
Inferred type updated to byte in (unumber~) divr8u::$4 ← (byte) divr8u::rem#6 | (byte) 1
Inferred type updated to byte in (unumber~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
Inferred type updated to word in (unumber~) divr16u::$5 ← (word) divr16u::rem#7 | (byte) 1
Inferred type updated to byte in (unumber~) div8s::$6 ← (byte) div8s::neg#3 ^ (byte) 1
Inferred type updated to byte in (unumber~) divr16s::$9 ← (byte) divr16s::neg#3 ^ (byte) 1
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [160] (bool~) divr8u::$3 ← (byte~) divr8u::$1 == (byte) 0 from [159] (bool~) divr8u::$2 ← (byte~) divr8u::$1 != (byte) 0
Inversing boolean not [168] (bool~) divr8u::$8 ← (byte) divr8u::rem#5 < (byte) divr8u::divisor#1 from [167] (bool~) divr8u::$7 ← (byte) divr8u::rem#5 >= (byte) divr8u::divisor#1
Inversing boolean not [197] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte) 0 from [196] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte) 0
Inversing boolean not [205] (bool~) divr16u::$9 ← (word) divr16u::rem#6 < (word) divr16u::divisor#2 from [204] (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_str::str#13 = print_str::str#14 print_str::str#15 
Alias print_char_cursor#1 = print_char_cursor#132 print_char_cursor#133 print_char_cursor#68 
Alias print_char_cursor#0 = print_char_cursor#67 
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#22 print_char_cursor#2 print_line_cursor#23 print_char_cursor#70 print_line_cursor#1 print_char_cursor#3 
Alias print_char_cursor#135 = print_char_cursor#150 print_char_cursor#136 
Alias print_sint::w#10 = print_sint::w#8 print_sint::w#5 print_sint::w#6 print_sint::w#9 
Alias print_char_cursor#4 = print_char_cursor#71 
Alias print_sint::w#0 = print_sint::$4 
Alias print_char_cursor#5 = print_char_cursor#72 
Alias print_char_cursor#6 = print_char_cursor#73 print_char_cursor#74 print_char_cursor#7 
Alias print_char_cursor#138 = print_char_cursor#151 print_char_cursor#139 
Alias print_schar::b#10 = print_schar::b#8 print_schar::b#5 print_schar::b#6 print_schar::b#9 
Alias print_char_cursor#75 = print_char_cursor#8 
Alias print_schar::b#0 = print_schar::$4 
Alias print_char_cursor#76 = print_char_cursor#9 
Alias print_char_cursor#10 = print_char_cursor#77 print_char_cursor#78 print_char_cursor#11 
Alias print_uchar::b#1 = print_uint::$0 
Alias print_uint::w#5 = print_uint::w#6 
Alias print_char_cursor#12 = print_char_cursor#79 
Alias print_uchar::b#2 = print_uint::$2 
Alias print_char_cursor#13 = print_char_cursor#80 print_char_cursor#81 print_char_cursor#14 
Alias print_uchar::b#7 = print_uchar::b#8 
Alias print_char_cursor#15 = print_char_cursor#82 
Alias print_char_cursor#16 = print_char_cursor#83 print_char_cursor#84 print_char_cursor#17 
Alias print_char_cursor#18 = print_char_cursor#86 print_char_cursor#19 
Alias print_line_cursor#2 = print_screen#3 print_screen#2 print_char_cursor#20 print_line_cursor#24 print_char_cursor#87 print_line_cursor#3 print_char_cursor#21 
Alias divr8u::return#0 = divr8u::return#3 
Alias rem8u#0 = rem8u#16 rem8u#17 rem8u#1 
Alias div8u::return#0 = div8u::$0 div8u::return#4 div8u::return#1 
Alias divr8u::rem#1 = divr8u::$0 divr8u::rem#6 
Alias divr8u::dividend#1 = divr8u::$5 divr8u::dividend#7 
Alias divr8u::quotient#1 = divr8u::$6 divr8u::quotient#4 
Alias divr8u::dividend#2 = divr8u::dividend#6 
Alias divr8u::quotient#6 = divr8u::quotient#7 
Alias divr8u::divisor#3 = divr8u::divisor#4 
Alias divr8u::i#5 = divr8u::i#6 
Alias divr8u::rem#2 = divr8u::$4 
Alias divr8u::rem#5 = divr8u::rem#7 
Alias divr8u::divisor#1 = divr8u::divisor#2 
Alias divr8u::i#3 = divr8u::i#4 
Alias divr8u::rem#3 = divr8u::$9 
Alias divr8u::rem#10 = divr8u::rem#8 
Alias divr8u::return#1 = divr8u::quotient#5 divr8u::quotient#8 divr8u::return#4 divr8u::return#2 
Alias rem8u#18 = rem8u#2 rem8u#3 
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#7 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#8 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#3 = divr16u::dividend#7 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#4 = divr16u::divisor#5 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#6 = divr16u::rem#8 
Alias divr16u::divisor#2 = divr16u::divisor#3 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::rem#11 = divr16u::rem#9 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#4 divr16u::return#1 
Alias rem16u#0 = rem16u#18 rem16u#1 
Alias divr16u::return#2 = divr16u::return#5 
Alias rem16u#19 = rem16u#2 rem16u#20 rem16u#3 
Alias div16u::return#0 = div16u::$0 div16u::return#3 div16u::return#1 
Alias div8s::dividend#1 = div8s::dividend#2 div8s::dividend#3 
Alias div8s::divisor#4 = div8s::divisor#6 div8s::divisor#5 
Alias rem8u#55 = rem8u#59 rem8u#56 
Alias div8s::neg#0 = div8s::neg#7 
Alias div8s::divisor#1 = div8s::divisor#2 div8s::divisor#3 
Alias div8s::neg#3 = div8s::neg#5 div8s::neg#8 
Alias div8s::dividendu#4 = div8s::dividendu#6 div8s::dividendu#5 
Alias rem8u#44 = rem8u#52 rem8u#45 
Alias div8s::neg#2 = div8s::$6 
Alias div8u::return#2 = div8u::return#5 
Alias div8s::neg#4 = div8s::neg#6 
Alias rem8u#19 = rem8u#4 rem8u#20 rem8u#21 
Alias div8s::resultu#0 = div8s::$2 div8s::resultu#1 div8s::resultu#2 
Alias rem8s#1 = div8s::$7 
Alias div8s::return#1 = div8s::$8 
Alias div8s::return#2 = div8s::return#4 
Alias rem8u#22 = rem8u#5 
Alias rem8s#10 = rem8s#2 
Alias divr16s::dividend#1 = divr16s::dividend#2 divr16s::dividend#3 
Alias divr16s::rem#1 = divr16s::rem#2 divr16s::rem#3 
Alias divr16s::divisor#4 = divr16s::divisor#6 divr16s::divisor#5 
Alias rem16u#60 = rem16u#64 rem16u#61 
Alias divr16s::neg#0 = divr16s::neg#7 
Alias divr16s::divisor#1 = divr16s::divisor#2 divr16s::divisor#3 
Alias divr16s::neg#3 = divr16s::neg#5 divr16s::neg#8 
Alias divr16s::dividendu#4 = divr16s::dividendu#6 divr16s::dividendu#5 
Alias divr16s::remu#4 = divr16s::remu#6 divr16s::remu#5 
Alias rem16u#48 = rem16u#56 rem16u#49 
Alias divr16s::neg#2 = divr16s::$9 
Alias divr16u::return#3 = divr16u::return#6 
Alias divr16s::neg#4 = divr16s::neg#6 
Alias rem16u#21 = rem16u#4 rem16u#22 rem16u#23 
Alias divr16s::resultu#0 = divr16s::$4 divr16s::resultu#1 divr16s::resultu#2 
Alias rem16s#1 = divr16s::$10 
Alias divr16s::return#1 = divr16s::$11 
Alias divr16s::return#2 = divr16s::return#4 
Alias rem16u#24 = rem16u#5 
Alias rem16s#12 = rem16s#2 
Alias divr16s::return#3 = divr16s::return#5 
Alias rem16u#25 = rem16u#6 rem16u#26 rem16u#7 
Alias rem16s#13 = rem16s#3 rem16s#14 rem16s#4 
Alias div16s::return#0 = div16s::$0 div16s::return#3 div16s::return#1 
Alias rem8u#35 = rem8u#46 
Alias rem16u#40 = rem16u#50 rem16u#57 
Alias rem8s#18 = rem8s#28 rem8s#30 rem8s#24 
Alias rem16s#23 = rem16s#34 rem16s#36 rem16s#32 rem16s#28 
Alias print_line_cursor#25 = print_line_cursor#4 
Alias print_char_cursor#22 = print_char_cursor#88 
Alias rem8u#23 = rem8u#6 rem8u#36 
Alias print_char_cursor#23 = print_char_cursor#89 
Alias print_line_cursor#26 = print_line_cursor#5 
Alias rem16u#27 = rem16u#8 rem16u#41 
Alias print_char_cursor#24 = print_char_cursor#90 
Alias print_line_cursor#27 = print_line_cursor#6 
Alias rem8u#24 = rem8u#7 rem8u#37 rem8u#25 rem8u#8 
Alias rem8s#11 = rem8s#3 rem8s#19 rem8s#12 rem8s#4 
Alias print_char_cursor#25 = print_char_cursor#91 
Alias print_line_cursor#28 = print_line_cursor#7 
Alias rem16u#10 = rem16u#9 rem16u#28 rem16u#29 
Alias rem16s#15 = rem16s#5 rem16s#16 rem16s#6 
Alias print_char_cursor#26 = print_char_cursor#92 print_char_cursor#93 print_char_cursor#27 
Alias print_line_cursor#29 = print_line_cursor#8 print_line_cursor#30 print_line_cursor#9 
Alias div8u::return#3 = div8u::return#6 
Alias test_8u::dividend#0 = test_8u::dividend#1 
Alias print_char_cursor#144 = print_char_cursor#152 
Alias test_8u::divisor#0 = test_8u::divisor#3 test_8u::divisor#2 test_8u::divisor#1 
Alias print_line_cursor#43 = print_line_cursor#72 print_line_cursor#76 print_line_cursor#68 print_line_cursor#64 print_line_cursor#60 print_line_cursor#56 print_line_cursor#52 print_line_cursor#48 
Alias test_8u::i#10 = test_8u::i#11 test_8u::i#2 test_8u::i#9 test_8u::i#8 test_8u::i#7 test_8u::i#6 test_8u::i#5 test_8u::i#4 test_8u::i#3 
Alias rem8u#10 = rem8u#9 rem8u#26 rem8u#60 rem8u#57 rem8u#53 rem8u#48 rem8u#39 rem8u#27 rem8u#49 rem8u#40 rem8u#28 
Alias test_8u::res#0 = test_8u::$0 test_8u::res#4 test_8u::res#3 test_8u::res#2 test_8u::res#1 
Alias print_char_cursor#28 = print_char_cursor#94 
Alias print_char_cursor#29 = print_char_cursor#95 
Alias print_char_cursor#30 = print_char_cursor#96 
Alias print_char_cursor#31 = print_char_cursor#97 
Alias print_char_cursor#32 = print_char_cursor#98 
Alias print_char_cursor#33 = print_char_cursor#99 
Alias print_char_cursor#100 = print_char_cursor#34 
Alias print_line_cursor#10 = print_line_cursor#31 print_line_cursor#32 print_line_cursor#11 
Alias print_char_cursor#101 = print_char_cursor#35 print_char_cursor#102 print_char_cursor#36 
Alias div16u::return#2 = div16u::return#4 
Alias test_16u::dividend#0 = test_16u::dividend#1 
Alias print_char_cursor#145 = print_char_cursor#153 
Alias test_16u::divisor#0 = test_16u::divisor#3 test_16u::divisor#2 test_16u::divisor#1 
Alias print_line_cursor#44 = print_line_cursor#73 print_line_cursor#77 print_line_cursor#69 print_line_cursor#65 print_line_cursor#61 print_line_cursor#57 print_line_cursor#53 print_line_cursor#49 
Alias test_16u::i#10 = test_16u::i#11 test_16u::i#2 test_16u::i#9 test_16u::i#8 test_16u::i#7 test_16u::i#6 test_16u::i#5 test_16u::i#4 test_16u::i#3 
Alias rem16u#11 = rem16u#30 rem16u#65 rem16u#62 rem16u#58 rem16u#52 rem16u#43 rem16u#31 rem16u#53 rem16u#44 rem16u#32 rem16u#12 
Alias test_16u::res#0 = test_16u::$0 test_16u::res#4 test_16u::res#3 test_16u::res#2 test_16u::res#1 
Alias print_char_cursor#103 = print_char_cursor#37 
Alias print_char_cursor#104 = print_char_cursor#38 
Alias print_char_cursor#105 = print_char_cursor#39 
Alias print_char_cursor#106 = print_char_cursor#40 
Alias print_char_cursor#107 = print_char_cursor#41 
Alias print_char_cursor#108 = print_char_cursor#42 
Alias print_char_cursor#109 = print_char_cursor#43 
Alias print_line_cursor#12 = print_line_cursor#33 print_line_cursor#34 print_line_cursor#13 
Alias print_char_cursor#110 = print_char_cursor#44 print_char_cursor#111 print_char_cursor#45 
Alias div8s::return#3 = div8s::return#5 
Alias test_8s::dividend#0 = test_8s::dividend#1 
Alias print_char_cursor#146 = print_char_cursor#154 
Alias test_8s::divisor#0 = test_8s::divisor#3 test_8s::divisor#2 test_8s::divisor#1 
Alias print_line_cursor#45 = print_line_cursor#74 print_line_cursor#78 print_line_cursor#70 print_line_cursor#66 print_line_cursor#62 print_line_cursor#58 print_line_cursor#54 print_line_cursor#50 
Alias test_8s::i#10 = test_8s::i#11 test_8s::i#2 test_8s::i#9 test_8s::i#8 test_8s::i#7 test_8s::i#6 test_8s::i#5 test_8s::i#4 test_8s::i#3 
Alias rem8u#11 = rem8u#29 rem8u#64 rem8u#63 rem8u#62 rem8u#61 rem8u#58 rem8u#54 rem8u#51 rem8u#42 rem8u#30 rem8u#12 
Alias rem8s#13 = rem8s#5 rem8s#32 rem8s#31 rem8s#29 rem8s#26 rem8s#21 rem8s#14 rem8s#27 rem8s#22 rem8s#15 rem8s#6 
Alias test_8s::res#0 = test_8s::$0 test_8s::res#4 test_8s::res#3 test_8s::res#2 test_8s::res#1 
Alias print_char_cursor#112 = print_char_cursor#46 
Alias print_char_cursor#113 = print_char_cursor#47 
Alias print_char_cursor#114 = print_char_cursor#48 
Alias print_char_cursor#115 = print_char_cursor#49 
Alias print_char_cursor#116 = print_char_cursor#50 
Alias print_char_cursor#117 = print_char_cursor#51 
Alias print_char_cursor#118 = print_char_cursor#52 
Alias print_line_cursor#14 = print_line_cursor#35 print_line_cursor#36 print_line_cursor#15 
Alias print_char_cursor#119 = print_char_cursor#53 print_char_cursor#120 print_char_cursor#54 
Alias div16s::return#2 = div16s::return#4 
Alias test_16s::dividend#0 = test_16s::dividend#1 
Alias print_char_cursor#147 = print_char_cursor#155 
Alias test_16s::divisor#0 = test_16s::divisor#3 test_16s::divisor#2 test_16s::divisor#1 
Alias print_line_cursor#46 = print_line_cursor#75 print_line_cursor#79 print_line_cursor#71 print_line_cursor#67 print_line_cursor#63 print_line_cursor#59 print_line_cursor#55 print_line_cursor#51 
Alias test_16s::i#10 = test_16s::i#11 test_16s::i#2 test_16s::i#9 test_16s::i#8 test_16s::i#7 test_16s::i#6 test_16s::i#5 test_16s::i#4 test_16s::i#3 
Alias rem16u#13 = rem16u#33 rem16u#69 rem16u#68 rem16u#67 rem16u#66 rem16u#63 rem16u#59 rem16u#55 rem16u#46 rem16u#34 rem16u#14 
Alias rem16s#17 = rem16s#7 rem16s#37 rem16s#35 rem16s#33 rem16s#30 rem16s#25 rem16s#18 rem16s#31 rem16s#26 rem16s#19 rem16s#8 
Alias test_16s::res#0 = test_16s::$0 test_16s::res#4 test_16s::res#3 test_16s::res#2 test_16s::res#1 
Alias print_char_cursor#121 = print_char_cursor#55 
Alias print_char_cursor#122 = print_char_cursor#56 
Alias print_char_cursor#123 = print_char_cursor#57 
Alias print_char_cursor#124 = print_char_cursor#58 
Alias print_char_cursor#125 = print_char_cursor#59 
Alias print_char_cursor#126 = print_char_cursor#60 
Alias print_char_cursor#127 = print_char_cursor#61 
Alias print_line_cursor#16 = print_line_cursor#37 print_line_cursor#38 print_line_cursor#17 
Alias print_char_cursor#128 = print_char_cursor#62 print_char_cursor#129 print_char_cursor#63 
Alias print_screen#0 = print_line_cursor#18 print_char_cursor#64 print_line_cursor#47 print_char_cursor#148 print_screen#7 print_screen#6 print_screen#4 print_screen#1 
Alias rem8u#13 = rem8u#43 
Alias rem16u#15 = rem16u#47 
Alias rem8s#23 = rem8s#7 
Alias rem16s#27 = rem16s#9 
Alias print_line_cursor#19 = print_line_cursor#39 print_line_cursor#40 print_line_cursor#20 
Alias print_char_cursor#130 = print_char_cursor#65 print_char_cursor#131 print_char_cursor#66 
Alias rem8u#14 = rem8u#31 rem8u#32 rem8u#15 
Alias rem16u#16 = rem16u#35 rem16u#36 rem16u#17 
Alias rem8s#16 = rem8s#8 rem8s#17 rem8s#9 
Alias rem16s#10 = rem16s#20 rem16s#21 rem16s#11 
Successful SSA optimization Pass2AliasElimination
Alias divr8u::dividend#2 = divr8u::dividend#3 
Alias divr8u::quotient#3 = divr8u::quotient#6 
Alias divr8u::divisor#1 = divr8u::divisor#3 divr8u::divisor#6 
Alias divr8u::i#2 = divr8u::i#3 divr8u::i#5 
Alias divr8u::dividend#1 = divr8u::dividend#5 
Alias divr16u::dividend#3 = divr16u::dividend#4 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#2 = divr16u::divisor#4 divr16u::divisor#7 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#6 
Alias div8s::divisor#1 = div8s::divisor#4 
Alias rem8u#34 = rem8u#44 rem8u#55 
Alias div8s::dividendu#3 = div8s::dividendu#4 
Alias rem8u#19 = rem8u#22 
Alias divr16s::divisor#1 = divr16s::divisor#4 
Alias rem16u#38 = rem16u#48 rem16u#60 
Alias divr16s::dividendu#3 = divr16s::dividendu#4 
Alias divr16s::remu#3 = divr16s::remu#4 
Alias rem16u#21 = rem16u#24 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_char_cursor#0 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#69 (byte*) print_char_cursor#134
Identical Phi Values (byte*) print_char_cursor#4 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#5 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#6 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#75 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#76 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_line_cursor#2 (byte*) print_screen#5
Identical Phi Values (byte) rem8u#0 (byte) rem8u#18
Identical Phi Values (byte) divr8u::rem#9 (byte) divr8u::rem#0
Identical Phi Values (byte) divr8u::dividend#4 (byte) divr8u::dividend#0
Identical Phi Values (byte) divr8u::divisor#5 (byte) divr8u::divisor#0
Identical Phi Values (byte) divr8u::divisor#1 (byte) divr8u::divisor#5
Identical Phi Values (word) divr16u::divisor#2 (word) divr16u::divisor#6
Identical Phi Values (word) div16u::dividend#1 (word) div16u::dividend#0
Identical Phi Values (word) div16u::divisor#1 (word) div16u::divisor#0
Identical Phi Values (word) rem16u#37 (word) rem16u#42
Identical Phi Values (word) rem16u#19 (word) rem16u#0
Identical Phi Values (signed byte) div8s::dividend#1 (signed byte) div8s::dividend#0
Identical Phi Values (signed byte) div8s::divisor#1 (signed byte) div8s::divisor#0
Identical Phi Values (byte) rem8u#34 (byte) rem8u#41
Identical Phi Values (byte) rem8u#19 (byte) rem8u#0
Identical Phi Values (signed word) divr16s::dividend#1 (signed word) divr16s::dividend#0
Identical Phi Values (signed word) divr16s::rem#1 (signed word) divr16s::rem#0
Identical Phi Values (signed word) divr16s::divisor#1 (signed word) divr16s::divisor#0
Identical Phi Values (word) rem16u#38 (word) rem16u#39
Identical Phi Values (word) rem16u#21 (word) rem16u#0
Identical Phi Values (signed word) div16s::dividend#1 (signed word) div16s::dividend#0
Identical Phi Values (signed word) div16s::divisor#1 (signed word) div16s::divisor#0
Identical Phi Values (word) rem16u#39 (word) rem16u#45
Identical Phi Values (signed word) rem16s#22 (signed word) rem16s#24
Identical Phi Values (word) rem16u#25 (word) rem16u#21
Identical Phi Values (signed word) rem16s#13 (signed word) rem16s#12
Identical Phi Values (byte*) print_screen#5 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#42 (byte*) print_screen#0
Identical Phi Values (byte*) print_char_cursor#143 (byte*) print_screen#0
Identical Phi Values (byte) rem8u#35 (byte) rem8u#13
Identical Phi Values (word) rem16u#40 (word) rem16u#15
Identical Phi Values (signed byte) rem8s#18 (signed byte) rem8s#23
Identical Phi Values (signed word) rem16s#23 (signed word) rem16s#27
Identical Phi Values (byte*) print_line_cursor#25 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_line_cursor#2
Identical Phi Values (byte) rem8u#23 (byte) rem8u#10
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#101
Identical Phi Values (byte*) print_line_cursor#26 (byte*) print_line_cursor#10
Identical Phi Values (word) rem16u#27 (word) rem16u#11
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#110
Identical Phi Values (byte*) print_line_cursor#27 (byte*) print_line_cursor#12
Identical Phi Values (byte) rem8u#24 (byte) rem8u#11
Identical Phi Values (signed byte) rem8s#11 (signed byte) rem8s#13
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#28 (byte*) print_line_cursor#14
Identical Phi Values (word) rem16u#10 (word) rem16u#13
Identical Phi Values (signed word) rem16s#15 (signed word) rem16s#17
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#128
Identical Phi Values (byte*) print_line_cursor#29 (byte*) print_line_cursor#16
Identical Phi Values (byte) rem8u#47 (byte) rem8u#35
Identical Phi Values (byte*) print_char_cursor#156 (byte*) print_char_cursor#22
Identical Phi Values (byte*) print_line_cursor#80 (byte*) print_line_cursor#25
Identical Phi Values (byte) rem8u#10 (byte) rem8u#0
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#100 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#101 (byte*) print_line_cursor#0
Identical Phi Values (word) rem16u#51 (word) rem16u#40
Identical Phi Values (byte*) print_char_cursor#157 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#81 (byte*) print_line_cursor#26
Identical Phi Values (word) rem16u#11 (word) rem16u#19
Identical Phi Values (byte*) print_char_cursor#103 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#104 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#105 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#106 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#107 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#108 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#109 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#110 (byte*) print_line_cursor#0
Identical Phi Values (byte) rem8u#50 (byte) rem8u#23
Identical Phi Values (signed byte) rem8s#25 (signed byte) rem8s#18
Identical Phi Values (byte*) print_char_cursor#158 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_line_cursor#82 (byte*) print_line_cursor#27
Identical Phi Values (byte) rem8u#11 (byte) rem8u#19
Identical Phi Values (signed byte) rem8s#13 (signed byte) rem8s#10
Identical Phi Values (byte*) print_char_cursor#112 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#113 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#114 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#115 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#116 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#117 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#118 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#119 (byte*) print_line_cursor#0
Identical Phi Values (word) rem16u#54 (word) rem16u#27
Identical Phi Values (signed word) rem16s#29 (signed word) rem16s#23
Identical Phi Values (byte*) print_char_cursor#159 (byte*) print_char_cursor#25
Identical Phi Values (byte*) print_line_cursor#83 (byte*) print_line_cursor#28
Identical Phi Values (word) rem16u#13 (word) rem16u#25
Identical Phi Values (signed word) rem16s#17 (signed word) rem16s#13
Identical Phi Values (byte*) print_char_cursor#121 (byte*) print_char_cursor#6
Identical Phi Values (byte*) print_char_cursor#122 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#123 (byte*) print_char_cursor#6
Identical Phi Values (byte*) print_char_cursor#124 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#125 (byte*) print_char_cursor#6
Identical Phi Values (byte*) print_char_cursor#126 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#127 (byte*) print_char_cursor#6
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#128 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#130 (byte*) print_char_cursor#26
Identical Phi Values (byte) rem8u#14 (byte) rem8u#24
Identical Phi Values (word) rem16u#16 (word) rem16u#10
Identical Phi Values (signed byte) rem8s#16 (signed byte) rem8s#11
Identical Phi Values (signed word) rem16s#10 (signed word) rem16s#15
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#149 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#134 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#137 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#140 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#145 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#44 (byte*) print_line_cursor#0
Identical Phi Values (byte) rem8u#41 (byte) rem8u#18
Identical Phi Values (byte*) print_char_cursor#146 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#45 (byte*) print_line_cursor#0
Identical Phi Values (word) rem16u#45 (word) rem16u#0
Identical Phi Values (byte*) print_char_cursor#147 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#46 (byte*) print_line_cursor#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#18
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [447] (byte~) test_16u::$11 ← (byte) test_16u::i#10 * (const byte) SIZEOF_WORD
Identified duplicate assignment right side [557] (byte~) test_16s::$11 ← (byte) test_16s::i#10 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) print_str::$1 [16] if((byte) 0!=*((byte*) print_str::str#13)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [26] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#18) goto print_ln::@1
Simple Condition (bool~) print_sint::$0 [30] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1
Simple Condition (bool~) print_schar::$0 [45] if((signed byte) print_schar::b#10<(signed byte) 0) goto print_schar::@1
Simple Condition (bool~) divr8u::$3 [103] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2
Simple Condition (bool~) divr8u::$8 [108] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3
Simple Condition (bool~) divr8u::$10 [113] if((byte) divr8u::i#1!=rangelast(0,7)) goto divr8u::@1
Simple Condition (bool~) divr16u::$4 [126] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [131] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [136] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) div8s::$0 [154] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1
Simple Condition (bool~) div8s::$1 [162] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3
Simple Condition (bool~) div8s::$3 [175] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5
Simple Condition (bool~) divr16s::$3 [200] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3
Simple Condition (bool~) divr16s::$5 [214] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5
Simple Condition (bool~) test_8u::$9 [278] if((byte) test_8u::i#1!=rangelast(0,5)) goto test_8u::@1
Simple Condition (bool~) test_16u::$9 [318] if((byte) test_16u::i#1!=rangelast(0,5)) goto test_16u::@1
Simple Condition (bool~) test_8s::$9 [356] if((byte) test_8s::i#1!=rangelast(0,5)) goto test_8s::@1
Simple Condition (bool~) test_16s::$9 [396] if((byte) test_16s::i#1!=rangelast(0,5)) goto test_16s::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting || if()-condition to two if()s [188] (bool~) divr16s::$2 ← (bool~) divr16s::$0 || (bool~) divr16s::$1
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte) print_char::ch#1 = '-'
Constant (const byte) print_char::ch#2 = ' '
Constant (const byte) print_char::ch#3 = '-'
Constant (const byte) print_char::ch#4 = ' '
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte) divr8u::rem#0 = 0
Constant (const byte) divr8u::quotient#0 = 0
Constant (const byte) divr8u::i#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const byte) div8s::neg#0 = 0
Constant (const byte) div8s::dividendu#0 = 0
Constant (const byte) div8s::neg#1 = 1
Constant (const byte) div8s::divisoru#0 = 0
Constant (const byte) divr16s::neg#0 = 0
Constant (const word) divr16s::dividendu#0 = 0
Constant (const word) divr16s::remu#0 = 0
Constant (const byte) divr16s::neg#1 = 1
Constant (const word) divr16s::divisoru#0 = 0
Constant (const signed word) divr16s::rem#0 = 0
Constant (const byte) test_8u::i#0 = 0
Constant (const byte*) print_str::str#1 = test_8u::str
Constant (const byte*) print_str::str#2 = test_8u::str1
Constant (const byte*) print_str::str#3 = test_8u::str2
Constant (const byte) test_16u::i#0 = 0
Constant (const byte*) print_str::str#4 = test_16u::str
Constant (const byte*) print_str::str#5 = test_16u::str1
Constant (const byte*) print_str::str#6 = test_16u::str2
Constant (const byte) test_8s::i#0 = 0
Constant (const byte*) print_str::str#7 = test_8s::str
Constant (const byte*) print_str::str#8 = test_8s::str1
Constant (const byte*) print_str::str#9 = test_8s::str2
Constant (const byte) test_16s::i#0 = 0
Constant (const byte*) print_str::str#10 = test_16s::str
Constant (const byte*) print_str::str#11 = test_16s::str1
Constant (const byte*) print_str::str#12 = test_16s::str2
Constant (const byte*) print_screen#0 = (byte*) 1024
Constant (const byte) rem8u#13 = 0
Constant (const word) rem16u#15 = 0
Constant (const signed byte) rem8s#23 = 0
Constant (const signed word) rem16s#27 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_screen#0
Constant (const word) divr16s::remu#2 = (word)divr16s::rem#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Consolidated constant strings into (const byte*) str
Consolidated constant strings into (const byte*) str1
Consolidated constant strings into (const byte*) str2
Successful SSA optimization Pass2ConstantStringConsolidation
Resolved ranged next value [111] divr8u::i#1 ← ++ divr8u::i#2 to ++
Resolved ranged comparison value [113] if(divr8u::i#1!=rangelast(0,7)) goto divr8u::@1 to (number) 8
Resolved ranged next value [134] divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value [136] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (number) $10
Resolved ranged next value [276] test_8u::i#1 ← ++ test_8u::i#10 to ++
Resolved ranged comparison value [278] if(test_8u::i#1!=rangelast(0,5)) goto test_8u::@1 to (number) 6
Resolved ranged next value [316] test_16u::i#1 ← ++ test_16u::i#10 to ++
Resolved ranged comparison value [318] if(test_16u::i#1!=rangelast(0,5)) goto test_16u::@1 to (number) 6
Resolved ranged next value [354] test_8s::i#1 ← ++ test_8s::i#10 to ++
Resolved ranged comparison value [356] if(test_8s::i#1!=rangelast(0,5)) goto test_8s::@1 to (number) 6
Resolved ranged next value [394] test_16s::i#1 ← ++ test_16s::i#10 to ++
Resolved ranged comparison value [396] if(test_16s::i#1!=rangelast(0,5)) goto test_16s::@1 to (number) 6
Simplifying constant evaluating to zero (word)(const signed word) divr16s::rem#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused variable - keeping the phi block (byte) rem8u#33
Eliminating unused variable - keeping the phi block (word) rem16u#42
Eliminating unused variable - keeping the phi block (signed byte) rem8s#20
Eliminating unused variable - keeping the phi block (signed word) rem16s#24
Eliminating unused constant (const void*) memset::return#2
Eliminating unused constant (const byte) div8s::dividendu#0
Eliminating unused constant (const byte) div8s::divisoru#0
Eliminating unused constant (const word) divr16s::dividendu#0
Eliminating unused constant (const word) divr16s::remu#0
Eliminating unused constant (const word) divr16s::divisoru#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) rem8u#38
Eliminating unused constant (const word) rem16u#15
Eliminating unused constant (const signed byte) rem8s#23
Eliminating unused constant (const signed word) rem16s#27
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) rem8u#13
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [74] if((byte) divr8u::i#1!=(number) 8) goto divr8u::@1
Adding number conversion cast (unumber) $10 in [92] if((byte) divr16u::i#1!=(number) $10) goto divr16u::@1
Adding number conversion cast (unumber) 6 in [187] if((byte) test_8u::i#1!=(number) 6) goto test_8u::@1
Adding number conversion cast (unumber) 6 in [212] if((byte) test_16u::i#1!=(number) 6) goto test_16u::@1
Adding number conversion cast (unumber) 6 in [235] if((byte) test_8s::i#1!=(number) 6) goto test_8s::@1
Adding number conversion cast (unumber) 6 in [260] if((byte) test_16s::i#1!=(number) 6) goto test_16s::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Simplifying constant integer cast $10
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias test_16u::$11 = test_16u::$10 
Alias test_16s::$11 = test_16s::$10 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) divr16s::$0 [128] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1
Simple Condition (bool~) divr16s::$1 [260] if((const signed word) divr16s::rem#0<(signed byte) 0) goto divr16s::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Constant right-side identified [131] (signed word~) divr16s::$7 ← - (const signed word) divr16s::rem#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Constant (const signed word) divr16s::$7 = -divr16s::rem#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16s::remu#1 = (word)divr16s::$7
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [260] if((const signed word) divr16s::rem#0<(signed byte) 0) goto divr16s::@1
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero -(const signed word) divr16s::rem#0 in 
Simplifying constant evaluating to zero (word)(const signed word) divr16s::$7 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const signed word) divr16s::rem#0
Eliminating unused constant (const signed word) divr16s::$7
Successful SSA optimization PassNEliminateUnusedVars
Inlining Noop Cast [104] (byte) div8s::dividendu#1 ← (byte)(signed byte~) div8s::$4 keeping div8s::dividendu#1
Inlining Noop Cast [109] (byte) div8s::divisoru#1 ← (byte)(signed byte~) div8s::$5 keeping div8s::divisoru#1
Inlining Noop Cast [127] (word) divr16s::dividendu#1 ← (word)(signed word~) divr16s::$6 keeping divr16s::dividendu#1
Inlining Noop Cast [132] (word) divr16s::divisoru#1 ← (word)(signed word~) divr16s::$8 keeping divr16s::divisoru#1
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [105] (byte) div8s::dividendu#2 ← (byte)(signed byte) div8s::dividend#0 keeping div8s::dividend#0
Inlining Noop Cast [111] (byte) div8s::divisoru#2 ← (byte)(signed byte) div8s::divisor#0 keeping div8s::divisor#0
Inlining Noop Cast [119] (signed byte) rem8s#0 ← (signed byte)(byte) rem8u#18 keeping rem8u#18
Inlining Noop Cast [120] (signed byte) div8s::return#0 ← (signed byte)(byte) div8s::resultu#0 keeping div8s::resultu#0
Inlining Noop Cast [128] (word) divr16s::dividendu#2 ← (word)(signed word) divr16s::dividend#0 keeping divr16s::dividend#0
Inlining Noop Cast [134] (word) divr16s::divisoru#2 ← (word)(signed word) divr16s::divisor#0 keeping divr16s::divisor#0
Inlining Noop Cast [143] (signed word) rem16s#0 ← (signed word)(word) rem16u#0 keeping rem16u#0
Inlining Noop Cast [144] (signed word) divr16s::return#0 ← (signed word)(word) divr16s::resultu#0 keeping divr16s::resultu#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [185] (byte~) test_16u::$11 ← (byte) test_16u::i#10 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [232] (byte~) test_16s::$11 ← (byte) test_16s::i#10 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte*) print_str::str#3
Inlining constant with var siblings (const byte*) print_str::str#4
Inlining constant with var siblings (const byte*) print_str::str#5
Inlining constant with var siblings (const byte*) print_str::str#6
Inlining constant with var siblings (const byte*) print_str::str#7
Inlining constant with var siblings (const byte*) print_str::str#8
Inlining constant with var siblings (const byte*) print_str::str#9
Inlining constant with var siblings (const byte*) print_str::str#10
Inlining constant with var siblings (const byte*) print_str::str#11
Inlining constant with var siblings (const byte*) print_str::str#12
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::quotient#0
Inlining constant with var siblings (const byte) divr8u::i#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const byte) divr16s::neg#0
Inlining constant with var siblings (const byte) divr16s::neg#1
Inlining constant with var siblings (const word) divr16s::remu#2
Inlining constant with var siblings (const word) divr16s::remu#1
Inlining constant with var siblings (const byte) test_8u::i#0
Inlining constant with var siblings (const byte) test_16u::i#0
Inlining constant with var siblings (const byte) test_8s::i#0
Inlining constant with var siblings (const byte) test_16s::i#0
Constant inlined divr16u::rem#3 = (byte) 0
Constant inlined test_16s::str = (const byte*) str
Constant inlined test_8s::str1 = (const byte*) str1
Constant inlined divr16u::i#0 = (byte) 0
Constant inlined test_8s::str2 = (const byte*) str2
Constant inlined print_str::str#12 = (const byte*) str2
Constant inlined print_str::str#11 = (const byte*) str1
Constant inlined print_str::str#10 = (const byte*) str
Constant inlined divr16s::neg#1 = (byte) 1
Constant inlined divr8u::i#0 = (byte) 0
Constant inlined divr16s::neg#0 = (byte) 0
Constant inlined test_16u::i#0 = (byte) 0
Constant inlined test_8u::str2 = (const byte*) str2
Constant inlined divr16u::quotient#0 = (word) 0
Constant inlined test_8u::str1 = (const byte*) str1
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined test_8u::i#0 = (byte) 0
Constant inlined test_8s::str = (const byte*) str
Constant inlined test_16s::str1 = (const byte*) str1
Constant inlined test_16s::str2 = (const byte*) str2
Constant inlined test_16s::i#0 = (byte) 0
Constant inlined divr8u::rem#0 = (byte) 0
Constant inlined print_char::ch#3 = (byte) '-'
Constant inlined divr8u::quotient#0 = (byte) 0
Constant inlined test_16u::str1 = (const byte*) str1
Constant inlined print_char::ch#2 = (byte) ' '
Constant inlined test_16u::str = (const byte*) str
Constant inlined print_str::str#9 = (const byte*) str2
Constant inlined print_char::ch#4 = (byte) ' '
Constant inlined test_16u::str2 = (const byte*) str2
Constant inlined print_char::ch#1 = (byte) '-'
Constant inlined print_str::str#4 = (const byte*) str
Constant inlined print_str::str#3 = (const byte*) str2
Constant inlined div8s::neg#1 = (byte) 1
Constant inlined print_str::str#2 = (const byte*) str1
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined div8s::neg#0 = (byte) 0
Constant inlined print_str::str#1 = (const byte*) str
Constant inlined print_str::str#8 = (const byte*) str1
Constant inlined print_str::str#7 = (const byte*) str
Constant inlined test_8u::str = (const byte*) str
Constant inlined print_str::str#6 = (const byte*) str2
Constant inlined divr16s::remu#1 = (word) 0
Constant inlined test_8s::i#0 = (byte) 0
Constant inlined print_str::str#5 = (const byte*) str1
Constant inlined divr16s::remu#2 = (word) 0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) divr16s::remu#3 (word) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const word) divr16u::rem#4 = 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) SIZEOF_WORD
Eliminating unused constant (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const word) divr16u::rem#4
Constant inlined divr16u::rem#4 = (word) 0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) divr16u::rem#10 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting divr8u::@7(between divr8u::@3 and divr8u::@1)
Added new block during phi lifting divr8u::@8(between divr8u::@1 and divr8u::@2)
Added new block during phi lifting divr8u::@9(between divr8u::@2 and divr8u::@3)
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting test_8u::@11(between test_8u::@10 and test_8u::@1)
Added new block during phi lifting test_16u::@11(between test_16u::@10 and test_16u::@1)
Added new block during phi lifting test_8s::@11(between test_8s::@10 and test_8s::@1)
Added new block during phi lifting test_16s::@11(between test_16s::@10 and test_16s::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of test_16s
Adding NOP phi() at start of test_16s::@3
Adding NOP phi() at start of test_16s::@5
Adding NOP phi() at start of test_16s::@7
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_sint::@6
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of divr16s::@10
Adding NOP phi() at start of test_8s
Adding NOP phi() at start of test_8s::@3
Adding NOP phi() at start of test_8s::@5
Adding NOP phi() at start of test_8s::@7
Adding NOP phi() at start of print_schar::@6
Adding NOP phi() at start of test_16u
Adding NOP phi() at start of test_16u::@3
Adding NOP phi() at start of test_16u::@5
Adding NOP phi() at start of test_16u::@7
Adding NOP phi() at start of test_8u
Adding NOP phi() at start of test_8u::@3
Adding NOP phi() at start of test_8u::@5
Adding NOP phi() at start of test_8u::@7
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [main] to print_cls:1 test_8u:3 test_16u:5 test_8s:7 test_16s:9 
Calls in [test_16s] to div16s:19 print_sint:25 print_str:27 print_sint:31 print_str:33 print_sint:37 print_str:39 print_sint:43 print_ln:45 
Calls in [print_sint] to print_char:61 print_uint:67 print_char:71 
Calls in [print_uint] to print_uchar:82 print_uchar:86 
Calls in [print_uchar] to print_char:94 print_char:99 
Calls in [print_str] to print_char:110 
Calls in [div16s] to divr16s:115 
Calls in [divr16s] to divr16u:131 
Calls in [test_8s] to div8s:184 print_schar:190 print_str:192 print_schar:196 print_str:198 print_schar:202 print_str:204 print_schar:208 print_ln:210 
Calls in [print_schar] to print_char:218 print_uchar:224 print_char:228 
Calls in [div8s] to div8u:242 
Calls in [div8u] to divr8u:263 
Calls in [test_16u] to div16u:301 print_uint:307 print_str:309 print_uint:313 print_str:315 print_uint:319 print_str:321 print_uint:325 print_ln:327 
Calls in [div16u] to divr16u:336 
Calls in [test_8u] to div8u:348 print_uchar:354 print_str:356 print_uchar:360 print_str:362 print_uchar:366 print_str:368 print_uchar:372 print_ln:374 
Calls in [print_cls] to memset:382 

Created 53 initial phi equivalence classes
Coalesced [23] print_sint::w#11 ← print_sint::w#1
Not coalescing [24] print_char_cursor#160 ← print_line_cursor#0
Coalesced [29] print_sint::w#12 ← print_sint::w#2
Coalesced [30] print_char_cursor#161 ← print_char_cursor#18
Coalesced [35] print_sint::w#13 ← print_sint::w#3
Coalesced (already) [36] print_char_cursor#162 ← print_char_cursor#18
Coalesced [41] print_sint::w#14 ← print_sint::w#4
Coalesced (already) [42] print_char_cursor#163 ← print_char_cursor#18
Coalesced [44] print_line_cursor#84 ← print_line_cursor#0
Coalesced [49] test_16s::i#12 ← test_16s::i#1
Coalesced [51] print_line_cursor#88 ← print_line_cursor#41
Coalesced (already) [57] print_line_cursor#89 ← print_line_cursor#0
Coalesced [60] print_char_cursor#183 ← print_char_cursor#135
Coalesced [62] print_sint::w#16 ← print_sint::w#10
Coalesced [65] print_uint::w#7 ← print_uint::w#0
Coalesced [66] print_char_cursor#168 ← print_char_cursor#18
Coalesced (already) [70] print_char_cursor#182 ← print_char_cursor#135
Coalesced [73] print_sint::w#15 ← print_sint::w#0
Coalesced [80] print_uchar::b#10 ← print_uchar::b#1
Coalesced [81] print_char_cursor#174 ← print_char_cursor#141
Coalesced [84] print_uchar::b#11 ← print_uchar::b#2
Coalesced (already) [85] print_char_cursor#175 ← print_char_cursor#18
Coalesced [92] print_char::ch#9 ← print_char::ch#5
Coalesced (already) [93] print_char_cursor#185 ← print_char_cursor#142
Coalesced [97] print_char::ch#10 ← print_char::ch#6
Coalesced (already) [98] print_char_cursor#186 ← print_char_cursor#18
Coalesced [103] print_str::str#17 ← print_str::str#16
Coalesced [108] print_char::ch#8 ← print_char::ch#0
Coalesced (already) [109] print_char_cursor#184 ← print_char_cursor#18
Coalesced [112] print_str::str#18 ← print_str::str#0
Coalesced [125] divr16s::neg#10 ← divr16s::neg#3
Coalesced [129] divr16u::dividend#10 ← divr16u::dividend#2
Coalesced [130] divr16u::divisor#9 ← divr16u::divisor#1
Coalesced [137] divr16s::return#7 ← divr16s::return#1
Coalesced [138] rem16s#39 ← rem16s#1
Coalesced [146] divr16s::neg#9 ← divr16s::neg#2
Coalesced [150] divr16u::dividend#11 ← divr16u::dividend#5
Coalesced [157] divr16u::rem#14 ← divr16u::rem#1
Coalesced [164] divr16u::rem#16 ← divr16u::rem#2
Coalesced [165] divr16u::return#8 ← divr16u::quotient#2
Coalesced [171] divr16u::rem#12 ← divr16u::rem#11
Coalesced [172] divr16u::dividend#12 ← divr16u::dividend#0
Coalesced [173] divr16u::quotient#9 ← divr16u::return#0
Coalesced [174] divr16u::i#7 ← divr16u::i#1
Coalesced [175] divr16u::rem#15 ← divr16u::rem#6
Coalesced [176] divr16u::return#7 ← divr16u::quotient#1
Coalesced [177] divr16u::rem#13 ← divr16u::rem#0
Coalesced [188] print_schar::b#11 ← print_schar::b#1
Not coalescing [189] print_char_cursor#164 ← print_line_cursor#0
Coalesced [194] print_schar::b#12 ← print_schar::b#2
Coalesced [195] print_char_cursor#165 ← print_char_cursor#18
Coalesced [200] print_schar::b#13 ← print_schar::b#3
Coalesced (already) [201] print_char_cursor#166 ← print_char_cursor#18
Coalesced [206] print_schar::b#14 ← print_schar::b#4
Coalesced (already) [207] print_char_cursor#167 ← print_char_cursor#18
Coalesced (already) [209] print_line_cursor#86 ← print_line_cursor#0
Coalesced [214] test_8s::i#12 ← test_8s::i#1
Coalesced (already) [217] print_char_cursor#181 ← print_char_cursor#138
Coalesced [219] print_schar::b#16 ← print_schar::b#10
Coalesced [222] print_uchar::b#9 ← print_uchar::b#0
Coalesced (already) [223] print_char_cursor#173 ← print_char_cursor#18
Coalesced (already) [227] print_char_cursor#180 ← print_char_cursor#138
Coalesced [230] print_schar::b#15 ← print_schar::b#0
Coalesced [236] div8s::neg#10 ← div8s::neg#3
Coalesced [240] div8u::dividend#3 ← div8u::dividend#0
Coalesced [241] div8u::divisor#3 ← div8u::divisor#0
Coalesced [248] div8s::return#7 ← div8s::return#1
Coalesced [249] rem8s#34 ← rem8s#1
Coalesced [257] div8s::neg#9 ← div8s::neg#2
Coalesced [267] divr8u::dividend#8 ← divr8u::dividend#0
Coalesced [273] divr8u::rem#13 ← divr8u::rem#2
Coalesced [280] divr8u::rem#15 ← divr8u::rem#3
Coalesced [281] divr8u::return#6 ← divr8u::quotient#2
Coalesced [287] divr8u::rem#11 ← divr8u::rem#10
Coalesced [288] divr8u::dividend#9 ← divr8u::dividend#1
Coalesced [289] divr8u::quotient#9 ← divr8u::return#1
Coalesced [290] divr8u::i#7 ← divr8u::i#1
Coalesced [291] divr8u::rem#14 ← divr8u::rem#5
Coalesced [292] divr8u::return#5 ← divr8u::quotient#1
Coalesced [293] divr8u::rem#12 ← divr8u::rem#1
Coalesced [305] print_uint::w#8 ← print_uint::w#1
Not coalescing [306] print_char_cursor#169 ← print_line_cursor#0
Coalesced [311] print_uint::w#9 ← print_uint::w#2
Coalesced (already) [312] print_char_cursor#170 ← print_char_cursor#18
Coalesced [317] print_uint::w#10 ← print_uint::w#3
Coalesced (already) [318] print_char_cursor#171 ← print_char_cursor#18
Coalesced [323] print_uint::w#11 ← print_uint::w#4
Coalesced (already) [324] print_char_cursor#172 ← print_char_cursor#18
Coalesced (already) [326] print_line_cursor#85 ← print_line_cursor#0
Coalesced [331] test_16u::i#12 ← test_16u::i#1
Coalesced [334] divr16u::dividend#9 ← divr16u::dividend#1
Coalesced [335] divr16u::divisor#8 ← divr16u::divisor#0
Coalesced [346] div8u::dividend#4 ← div8u::dividend#1
Coalesced [347] div8u::divisor#4 ← div8u::divisor#1
Coalesced [352] print_uchar::b#12 ← print_uchar::b#3
Coalesced [353] print_char_cursor#176 ← print_char_cursor#144
Coalesced [358] print_uchar::b#13 ← print_uchar::b#4
Coalesced (already) [359] print_char_cursor#177 ← print_char_cursor#18
Coalesced [364] print_uchar::b#14 ← print_uchar::b#5
Coalesced (already) [365] print_char_cursor#178 ← print_char_cursor#18
Coalesced [370] print_uchar::b#15 ← print_uchar::b#6
Coalesced (already) [371] print_char_cursor#179 ← print_char_cursor#18
Coalesced [373] print_line_cursor#87 ← print_line_cursor#43
Coalesced [378] test_8u::i#12 ← test_8u::i#1
Not coalescing [379] print_char_cursor#187 ← print_line_cursor#0
Coalesced (already) [380] print_line_cursor#90 ← print_line_cursor#0
Coalesced [393] memset::dst#4 ← memset::dst#1
Coalesced down to 34 phi equivalence classes
Culled Empty Block (label) main::@5
Culled Empty Block (label) test_16s::@11
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sint::@5
Culled Empty Block (label) print_sint::@6
Culled Empty Block (label) print_uint::@2
Culled Empty Block (label) print_uchar::@2
Culled Empty Block (label) divr16s::@10
Culled Empty Block (label) divr16u::@7
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) test_8s::@11
Culled Empty Block (label) print_schar::@5
Culled Empty Block (label) print_schar::@6
Culled Empty Block (label) divr8u::@7
Culled Empty Block (label) divr8u::@9
Culled Empty Block (label) divr8u::@8
Culled Empty Block (label) test_16u::@11
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of test_16s
Adding NOP phi() at start of test_16s::@3
Adding NOP phi() at start of test_16s::@5
Adding NOP phi() at start of test_16s::@7
Adding NOP phi() at start of test_16s::@9
Adding NOP phi() at start of print_sint::@3
Adding NOP phi() at start of print_sint::@1
Adding NOP phi() at start of test_8s
Adding NOP phi() at start of test_8s::@3
Adding NOP phi() at start of test_8s::@5
Adding NOP phi() at start of test_8s::@7
Adding NOP phi() at start of test_8s::@9
Adding NOP phi() at start of print_schar::@3
Adding NOP phi() at start of print_schar::@1
Adding NOP phi() at start of divr8u
Adding NOP phi() at start of test_16u
Adding NOP phi() at start of test_16u::@3
Adding NOP phi() at start of test_16u::@5
Adding NOP phi() at start of test_16u::@7
Adding NOP phi() at start of test_16u::@9
Adding NOP phi() at start of test_8u
Adding NOP phi() at start of test_8u::@3
Adding NOP phi() at start of test_8u::@5
Adding NOP phi() at start of test_8u::@7
Adding NOP phi() at start of test_8u::@9
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call test_8u 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call test_16u 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] phi()
  [7] call test_8s 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [8] phi()
  [9] call test_16s 
  to:main::@return
main::@return: scope:[main]  from main::@4
  [10] return 
  to:@return

(void()) test_16s()
test_16s: scope:[test_16s]  from main::@4
  [11] phi()
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@10
  [12] (byte) test_16s::i#10 ← phi( test_16s/(byte) 0 test_16s::@10/(byte) test_16s::i#1 )
  [13] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1
  [14] (signed word) test_16s::dividend#0 ← *((const signed word*) test_16s::dividends + (byte~) test_16s::$11)
  [15] (signed word) test_16s::divisor#0 ← *((const signed word*) test_16s::divisors + (byte~) test_16s::$11)
  [16] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
  [17] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
  [18] call div16s 
  [19] (signed word) div16s::return#2 ← (signed word) div16s::return#0
  to:test_16s::@2
test_16s::@2: scope:[test_16s]  from test_16s::@1
  [20] (signed word) test_16s::res#0 ← (signed word) div16s::return#2
  [21] (signed word) print_sint::w#1 ← (signed word) test_16s::dividend#0
  [22] (byte*) print_char_cursor#160 ← (byte*) print_line_cursor#0
  [23] call print_sint 
  to:test_16s::@3
test_16s::@3: scope:[test_16s]  from test_16s::@2
  [24] phi()
  [25] call print_str 
  to:test_16s::@4
test_16s::@4: scope:[test_16s]  from test_16s::@3
  [26] (signed word) print_sint::w#2 ← (signed word) test_16s::divisor#0
  [27] call print_sint 
  to:test_16s::@5
test_16s::@5: scope:[test_16s]  from test_16s::@4
  [28] phi()
  [29] call print_str 
  to:test_16s::@6
test_16s::@6: scope:[test_16s]  from test_16s::@5
  [30] (signed word) print_sint::w#3 ← (signed word) test_16s::res#0
  [31] call print_sint 
  to:test_16s::@7
test_16s::@7: scope:[test_16s]  from test_16s::@6
  [32] phi()
  [33] call print_str 
  to:test_16s::@8
test_16s::@8: scope:[test_16s]  from test_16s::@7
  [34] (signed word) print_sint::w#4 ← (signed word) rem16s#12
  [35] call print_sint 
  to:test_16s::@9
test_16s::@9: scope:[test_16s]  from test_16s::@8
  [36] phi()
  [37] call print_ln 
  to:test_16s::@10
test_16s::@10: scope:[test_16s]  from test_16s::@9
  [38] (byte) test_16s::i#1 ← ++ (byte) test_16s::i#10
  [39] if((byte) test_16s::i#1!=(byte) 6) goto test_16s::@1
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@10
  [40] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from test_16s::@9 test_16u::@9 test_8s::@9 test_8u::@9
  [41] (byte*) print_line_cursor#41 ← phi( test_16s::@9/(byte*) print_line_cursor#0 test_16u::@9/(byte*) print_line_cursor#0 test_8s::@9/(byte*) print_line_cursor#0 test_8u::@9/(byte*) print_line_cursor#43 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [42] (byte*) print_line_cursor#21 ← phi( print_ln/(byte*) print_line_cursor#41 print_ln::@1/(byte*) print_line_cursor#0 )
  [43] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#21 + (byte) $28
  [44] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#18) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [45] return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from test_16s::@2 test_16s::@4 test_16s::@6 test_16s::@8
  [46] (byte*) print_char_cursor#135 ← phi( test_16s::@2/(byte*) print_char_cursor#160 test_16s::@4/(byte*) print_char_cursor#18 test_16s::@6/(byte*) print_char_cursor#18 test_16s::@8/(byte*) print_char_cursor#18 )
  [46] (signed word) print_sint::w#10 ← phi( test_16s::@2/(signed word) print_sint::w#1 test_16s::@4/(signed word) print_sint::w#2 test_16s::@6/(signed word) print_sint::w#3 test_16s::@8/(signed word) print_sint::w#4 )
  [47] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [48] phi()
  [49] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [50] (signed word) print_sint::w#7 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#10 )
  [51] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7
  [52] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [53] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [54] phi()
  [55] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [56] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#10
  to:print_sint::@2

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  [57] (byte*) print_char_cursor#85 ← phi( print_schar::@1/(byte*) print_char_cursor#138 print_schar::@3/(byte*) print_char_cursor#138 print_sint::@1/(byte*) print_char_cursor#135 print_sint::@3/(byte*) print_char_cursor#135 print_str::@2/(byte*) print_char_cursor#18 print_uchar/(byte*) print_char_cursor#142 print_uchar::@1/(byte*) print_char_cursor#18 )
  [57] (byte) print_char::ch#7 ← phi( print_schar::@1/(byte) '-' print_schar::@3/(byte) ' ' print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#5 print_uchar::@1/(byte) print_char::ch#6 )
  [58] *((byte*) print_char_cursor#85) ← (byte) print_char::ch#7
  [59] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#85
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [60] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2 test_16u::@2 test_16u::@4 test_16u::@6 test_16u::@8
  [61] (byte*) print_char_cursor#141 ← phi( print_sint::@2/(byte*) print_char_cursor#18 test_16u::@2/(byte*) print_char_cursor#169 test_16u::@4/(byte*) print_char_cursor#18 test_16u::@6/(byte*) print_char_cursor#18 test_16u::@8/(byte*) print_char_cursor#18 )
  [61] (word) print_uint::w#5 ← phi( print_sint::@2/(word) print_uint::w#0 test_16u::@2/(word) print_uint::w#1 test_16u::@4/(word) print_uint::w#2 test_16u::@6/(word) print_uint::w#3 test_16u::@8/(word) print_uint::w#4 )
  [62] (byte) print_uchar::b#1 ← > (word) print_uint::w#5
  [63] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [64] (byte) print_uchar::b#2 ← < (word) print_uint::w#5
  [65] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [66] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2 print_uint print_uint::@1 test_8u::@2 test_8u::@4 test_8u::@6 test_8u::@8
  [67] (byte*) print_char_cursor#142 ← phi( print_schar::@2/(byte*) print_char_cursor#18 print_uint/(byte*) print_char_cursor#141 print_uint::@1/(byte*) print_char_cursor#18 test_8u::@2/(byte*) print_char_cursor#144 test_8u::@4/(byte*) print_char_cursor#18 test_8u::@6/(byte*) print_char_cursor#18 test_8u::@8/(byte*) print_char_cursor#18 )
  [67] (byte) print_uchar::b#7 ← phi( print_schar::@2/(byte) print_uchar::b#0 print_uint/(byte) print_uchar::b#1 print_uint::@1/(byte) print_uchar::b#2 test_8u::@2/(byte) print_uchar::b#3 test_8u::@4/(byte) print_uchar::b#4 test_8u::@6/(byte) print_uchar::b#5 test_8u::@8/(byte) print_uchar::b#6 )
  [68] (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (byte) 4
  [69] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [70] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [71] (byte~) print_uchar::$2 ← (byte) print_uchar::b#7 & (byte) $f
  [72] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [73] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [74] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from test_16s::@3 test_16s::@5 test_16s::@7 test_16u::@3 test_16u::@5 test_16u::@7 test_8s::@3 test_8s::@5 test_8s::@7 test_8u::@3 test_8u::@5 test_8u::@7
  [75] (byte*) print_str::str#16 ← phi( test_16s::@3/(const byte*) str test_16s::@5/(const byte*) str1 test_16s::@7/(const byte*) str2 test_16u::@3/(const byte*) str test_16u::@5/(const byte*) str1 test_16u::@7/(const byte*) str2 test_8s::@3/(const byte*) str test_8s::@5/(const byte*) str1 test_8s::@7/(const byte*) str2 test_8u::@3/(const byte*) str test_8u::@5/(const byte*) str1 test_8u::@7/(const byte*) str2 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [76] (byte*) print_str::str#13 ← phi( print_str/(byte*) print_str::str#16 print_str::@3/(byte*) print_str::str#0 )
  [77] if((byte) 0!=*((byte*) print_str::str#13)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [78] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [79] (byte) print_char::ch#0 ← *((byte*) print_str::str#13)
  [80] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [81] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13
  to:print_str::@1

(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
div16s: scope:[div16s]  from test_16s::@1
  [82] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0
  [83] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0
  [84] call divr16s 
  [85] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
  to:div16s::@1
div16s::@1: scope:[div16s]  from div16s
  [86] (signed word) div16s::return#0 ← (signed word) divr16s::return#3
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@1
  [87] return 
  to:@return

(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
divr16s: scope:[divr16s]  from div16s
  [88] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1
  to:divr16s::@6
divr16s::@6: scope:[divr16s]  from divr16s
  [89] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  [90] (word) divr16s::dividendu#3 ← phi( divr16s::@1/(word) divr16s::dividendu#7 divr16s::@6/(word) divr16s::dividendu#8 )
  [90] (byte) divr16s::neg#3 ← phi( divr16s::@1/(byte) 1 divr16s::@6/(byte) 0 )
  [91] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3
  to:divr16s::@7
divr16s::@7: scope:[divr16s]  from divr16s::@2
  [92] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  [93] (byte) divr16s::neg#4 ← phi( divr16s::@3/(byte) divr16s::neg#2 divr16s::@7/(byte) divr16s::neg#3 )
  [93] (word) divr16s::divisoru#3 ← phi( divr16s::@3/(word) divr16s::divisoru#4 divr16s::@7/(word) divr16s::divisoru#5 )
  [94] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3
  [95] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3
  [96] call divr16u 
  [97] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  [98] (word) divr16s::resultu#0 ← (word) divr16u::return#3
  [99] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5
  to:divr16s::@8
divr16s::@8: scope:[divr16s]  from divr16s::@9
  [100] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0
  [101] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  [102] (signed word) rem16s#12 ← phi( divr16s::@5/(signed word) rem16s#38 divr16s::@8/(signed word) rem16s#1 )
  [102] (signed word) divr16s::return#2 ← phi( divr16s::@5/(signed word) divr16s::return#6 divr16s::@8/(signed word) divr16s::return#1 )
  [103] return 
  to:@return
divr16s::@5: scope:[divr16s]  from divr16s::@9
  [104] (signed word) divr16s::return#6 ← (signed word)(word) divr16s::resultu#0
  [105] (signed word) rem16s#38 ← (signed word)(word) rem16u#0
  to:divr16s::@return
divr16s::@3: scope:[divr16s]  from divr16s::@2
  [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0
  [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1
  [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
  to:divr16s::@4
divr16s::@1: scope:[divr16s]  from divr16s
  [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0
  [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
  to:divr16s::@2

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u divr16s::@4
  [111] (word) divr16u::divisor#6 ← phi( div16u/(word) divr16u::divisor#0 divr16s::@4/(word) divr16u::divisor#1 )
  [111] (word) divr16u::dividend#5 ← phi( div16u/(word) divr16u::dividend#1 divr16s::@4/(word) divr16u::dividend#2 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [112] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [112] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [112] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [112] (word) divr16u::rem#5 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::rem#11 )
  [113] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [114] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [115] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [116] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [118] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [119] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [120] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [121] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [122] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [123] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [124] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [124] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [125] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [126] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [127] (word) rem16u#0 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [128] return 
  to:@return

(void()) test_8s()
test_8s: scope:[test_8s]  from main::@3
  [129] phi()
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@10
  [130] (byte) test_8s::i#10 ← phi( test_8s/(byte) 0 test_8s::@10/(byte) test_8s::i#1 )
  [131] (signed byte) test_8s::dividend#0 ← *((const signed byte*) test_8s::dividends + (byte) test_8s::i#10)
  [132] (signed byte) test_8s::divisor#0 ← *((const signed byte*) test_8s::divisors + (byte) test_8s::i#10)
  [133] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0
  [134] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0
  [135] call div8s 
  [136] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
  to:test_8s::@2
test_8s::@2: scope:[test_8s]  from test_8s::@1
  [137] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3
  [138] (signed byte) print_schar::b#1 ← (signed byte) test_8s::dividend#0
  [139] (byte*) print_char_cursor#164 ← (byte*) print_line_cursor#0
  [140] call print_schar 
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@2
  [141] phi()
  [142] call print_str 
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  [143] (signed byte) print_schar::b#2 ← (signed byte) test_8s::divisor#0
  [144] call print_schar 
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  [145] phi()
  [146] call print_str 
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  [147] (signed byte) print_schar::b#3 ← (signed byte) test_8s::res#0
  [148] call print_schar 
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  [149] phi()
  [150] call print_str 
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  [151] (signed byte) print_schar::b#4 ← (signed byte) rem8s#10
  [152] call print_schar 
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  [153] phi()
  [154] call print_ln 
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  [155] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10
  [156] if((byte) test_8s::i#1!=(byte) 6) goto test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@10
  [157] return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from test_8s::@2 test_8s::@4 test_8s::@6 test_8s::@8
  [158] (byte*) print_char_cursor#138 ← phi( test_8s::@2/(byte*) print_char_cursor#164 test_8s::@4/(byte*) print_char_cursor#18 test_8s::@6/(byte*) print_char_cursor#18 test_8s::@8/(byte*) print_char_cursor#18 )
  [158] (signed byte) print_schar::b#10 ← phi( test_8s::@2/(signed byte) print_schar::b#1 test_8s::@4/(signed byte) print_schar::b#2 test_8s::@6/(signed byte) print_schar::b#3 test_8s::@8/(signed byte) print_schar::b#4 )
  [159] if((signed byte) print_schar::b#10<(signed byte) 0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [160] phi()
  [161] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [162] (signed byte) print_schar::b#7 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@3/(signed byte) print_schar::b#10 )
  [163] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#7
  [164] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [165] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [166] phi()
  [167] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [168] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#10
  to:print_schar::@2

(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
div8s: scope:[div8s]  from test_8s::@1
  [169] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1
  to:div8s::@6
div8s::@6: scope:[div8s]  from div8s
  [170] (byte) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@6
  [171] (byte) div8s::dividendu#3 ← phi( div8s::@1/(byte) div8s::dividendu#7 div8s::@6/(byte) div8s::dividendu#8 )
  [171] (byte) div8s::neg#3 ← phi( div8s::@1/(byte) 1 div8s::@6/(byte) 0 )
  [172] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3
  to:div8s::@7
div8s::@7: scope:[div8s]  from div8s::@2
  [173] (byte) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@7
  [174] (byte) div8s::neg#4 ← phi( div8s::@3/(byte) div8s::neg#2 div8s::@7/(byte) div8s::neg#3 )
  [174] (byte) div8s::divisoru#3 ← phi( div8s::@3/(byte) div8s::divisoru#4 div8s::@7/(byte) div8s::divisoru#5 )
  [175] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3
  [176] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
  [177] call div8u 
  [178] (byte) div8u::return#2 ← (byte) div8u::return#0
  to:div8s::@9
div8s::@9: scope:[div8s]  from div8s::@4
  [179] (byte) div8s::resultu#0 ← (byte) div8u::return#2
  [180] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5
  to:div8s::@8
div8s::@8: scope:[div8s]  from div8s::@9
  [181] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#18
  [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@5 div8s::@8
  [183] (signed byte) rem8s#10 ← phi( div8s::@5/(signed byte) rem8s#33 div8s::@8/(signed byte) rem8s#1 )
  [183] (signed byte) div8s::return#2 ← phi( div8s::@5/(signed byte) div8s::return#6 div8s::@8/(signed byte) div8s::return#1 )
  [184] return 
  to:@return
div8s::@5: scope:[div8s]  from div8s::@9
  [185] (signed byte) div8s::return#6 ← (signed byte)(byte) div8s::resultu#0
  [186] (signed byte) rem8s#33 ← (signed byte)(byte) rem8u#18
  to:div8s::@return
div8s::@3: scope:[div8s]  from div8s::@2
  [187] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0
  [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1
  [189] (byte) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisoru#1
  to:div8s::@4
div8s::@1: scope:[div8s]  from div8s
  [190] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0
  [191] (byte) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividendu#1
  to:div8s::@2

(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  [192] (byte) div8u::divisor#2 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 )
  [192] (byte) div8u::dividend#2 ← phi( div8s::@4/(byte) div8u::dividend#0 test_8u::@1/(byte) div8u::dividend#1 )
  [193] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2
  [194] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2
  [195] call divr8u 
  [196] (byte) divr8u::return#0 ← (byte) divr8u::return#1
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u
  [197] (byte) div8u::return#0 ← (byte) divr8u::return#0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@1
  [198] return 
  to:@return

(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
divr8u: scope:[divr8u]  from div8u
  [199] phi()
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  [200] (byte) divr8u::i#2 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::i#1 )
  [200] (byte) divr8u::quotient#3 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::return#1 )
  [200] (byte) divr8u::dividend#2 ← phi( divr8u/(byte) divr8u::dividend#0 divr8u::@3/(byte) divr8u::dividend#1 )
  [200] (byte) divr8u::rem#4 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::rem#10 )
  [201] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte) 1
  [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80
  [203] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2
  to:divr8u::@4
divr8u::@4: scope:[divr8u]  from divr8u::@1
  [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1
  to:divr8u::@2
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  [205] (byte) divr8u::rem#5 ← phi( divr8u::@1/(byte) divr8u::rem#1 divr8u::@4/(byte) divr8u::rem#2 )
  [206] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte) 1
  [207] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1
  [208] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3
  to:divr8u::@5
divr8u::@5: scope:[divr8u]  from divr8u::@2
  [209] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1
  [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0
  to:divr8u::@3
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  [211] (byte) divr8u::return#1 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  [211] (byte) divr8u::rem#10 ← phi( divr8u::@2/(byte) divr8u::rem#5 divr8u::@5/(byte) divr8u::rem#3 )
  [212] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2
  [213] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1
  to:divr8u::@6
divr8u::@6: scope:[divr8u]  from divr8u::@3
  [214] (byte) rem8u#18 ← (byte) divr8u::rem#10
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  [215] return 
  to:@return

(void()) test_16u()
test_16u: scope:[test_16u]  from main::@2
  [216] phi()
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@10
  [217] (byte) test_16u::i#10 ← phi( test_16u/(byte) 0 test_16u::@10/(byte) test_16u::i#1 )
  [218] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1
  [219] (word) test_16u::dividend#0 ← *((const word*) test_16u::dividends + (byte~) test_16u::$11)
  [220] (word) test_16u::divisor#0 ← *((const word*) test_16u::divisors + (byte~) test_16u::$11)
  [221] (word) div16u::dividend#0 ← (word) test_16u::dividend#0
  [222] (word) div16u::divisor#0 ← (word) test_16u::divisor#0
  [223] call div16u 
  [224] (word) div16u::return#2 ← (word) div16u::return#0
  to:test_16u::@2
test_16u::@2: scope:[test_16u]  from test_16u::@1
  [225] (word) test_16u::res#0 ← (word) div16u::return#2
  [226] (word) print_uint::w#1 ← (word) test_16u::dividend#0
  [227] (byte*) print_char_cursor#169 ← (byte*) print_line_cursor#0
  [228] call print_uint 
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@2
  [229] phi()
  [230] call print_str 
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  [231] (word) print_uint::w#2 ← (word) test_16u::divisor#0
  [232] call print_uint 
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  [233] phi()
  [234] call print_str 
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  [235] (word) print_uint::w#3 ← (word) test_16u::res#0
  [236] call print_uint 
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  [237] phi()
  [238] call print_str 
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  [239] (word) print_uint::w#4 ← (word) rem16u#0
  [240] call print_uint 
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  [241] phi()
  [242] call print_ln 
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  [243] (byte) test_16u::i#1 ← ++ (byte) test_16u::i#10
  [244] if((byte) test_16u::i#1!=(byte) 6) goto test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@10
  [245] return 
  to:@return

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from test_16u::@1
  [246] (word) divr16u::dividend#1 ← (word) div16u::dividend#0
  [247] (word) divr16u::divisor#0 ← (word) div16u::divisor#0
  [248] call divr16u 
  [249] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [250] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [251] return 
  to:@return

(void()) test_8u()
test_8u: scope:[test_8u]  from main::@1
  [252] phi()
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  [253] (byte*) print_line_cursor#43 ← phi( test_8u/(const byte*) print_screen#0 test_8u::@11/(byte*) print_line_cursor#0 )
  [253] (byte*) print_char_cursor#144 ← phi( test_8u/(const byte*) print_screen#0 test_8u::@11/(byte*) print_char_cursor#187 )
  [253] (byte) test_8u::i#10 ← phi( test_8u/(byte) 0 test_8u::@11/(byte) test_8u::i#1 )
  [254] (byte) test_8u::dividend#0 ← *((const byte*) test_8u::dividends + (byte) test_8u::i#10)
  [255] (byte) test_8u::divisor#0 ← *((const byte*) test_8u::divisors + (byte) test_8u::i#10)
  [256] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0
  [257] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0
  [258] call div8u 
  [259] (byte) div8u::return#3 ← (byte) div8u::return#0
  to:test_8u::@2
test_8u::@2: scope:[test_8u]  from test_8u::@1
  [260] (byte) test_8u::res#0 ← (byte) div8u::return#3
  [261] (byte) print_uchar::b#3 ← (byte) test_8u::dividend#0
  [262] call print_uchar 
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@2
  [263] phi()
  [264] call print_str 
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  [265] (byte) print_uchar::b#4 ← (byte) test_8u::divisor#0
  [266] call print_uchar 
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  [267] phi()
  [268] call print_str 
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  [269] (byte) print_uchar::b#5 ← (byte) test_8u::res#0
  [270] call print_uchar 
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  [271] phi()
  [272] call print_str 
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  [273] (byte) print_uchar::b#6 ← (byte) rem8u#18
  [274] call print_uchar 
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  [275] phi()
  [276] call print_ln 
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  [277] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10
  [278] if((byte) test_8u::i#1!=(byte) 6) goto test_8u::@11
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@10
  [279] return 
  to:@return
test_8u::@11: scope:[test_8u]  from test_8u::@10
  [280] (byte*) print_char_cursor#187 ← (byte*) print_line_cursor#0
  to:test_8u::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [281] phi()
  [282] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [283] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [284] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [285] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [286] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [287] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [288] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [289] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word) div16s::dividend
(signed word) div16s::dividend#0 551.0
(signed word) div16s::divisor
(signed word) div16s::divisor#0 551.0
(signed word) div16s::return
(signed word) div16s::return#0 367.33333333333337
(signed word) div16s::return#2 202.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::dividend#0 551.0
(word) div16u::divisor
(word) div16u::divisor#0 551.0
(word) div16u::return
(word) div16u::return#0 367.33333333333337
(word) div16u::return#2 202.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 701.0
(byte) div8s::dividendu
(signed byte) div8s::dividendu#1 1001.0
(byte) div8s::dividendu#3 429.0
(byte) div8s::dividendu#7 2002.0
(byte) div8s::dividendu#8 2002.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 300.42857142857144
(byte) div8s::divisoru
(signed byte) div8s::divisoru#1 500.5
(byte) div8s::divisoru#3 1501.5
(byte) div8s::divisoru#4 2002.0
(byte) div8s::divisoru#5 2002.0
(byte) div8s::neg
(byte) div8s::neg#2 1001.0
(byte) div8s::neg#3 500.5
(byte) div8s::neg#4 500.5
(byte) div8s::resultu
(byte) div8s::resultu#0 333.6666666666667
(signed byte) div8s::return
(signed byte) div8s::return#1 2002.0
(signed byte) div8s::return#2 701.0
(signed byte) div8s::return#3 202.0
(signed byte) div8s::return#6 1001.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte) div8u::dividend
(byte) div8u::dividend#0 1001.0
(byte) div8u::dividend#1 101.0
(byte) div8u::dividend#2 11103.0
(byte) div8u::divisor
(byte) div8u::divisor#0 2002.0
(byte) div8u::divisor#1 202.0
(byte) div8u::divisor#2 5551.5
(byte) div8u::return
(byte) div8u::return#0 2775.75
(byte) div8u::return#2 2002.0
(byte) div8u::return#3 202.0
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0 7001.0
(word) divr16s::dividendu
(signed word) divr16s::dividendu#1 10001.0
(word) divr16s::dividendu#3 4286.142857142857
(word) divr16s::dividendu#7 20002.0
(word) divr16s::dividendu#8 20002.0
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0 3000.4285714285716
(word) divr16s::divisoru
(signed word) divr16s::divisoru#1 5000.5
(word) divr16s::divisoru#3 15001.5
(word) divr16s::divisoru#4 20002.0
(word) divr16s::divisoru#5 20002.0
(byte) divr16s::neg
(byte) divr16s::neg#2 10001.0
(byte) divr16s::neg#3 5000.5
(byte) divr16s::neg#4 5000.5
(signed word) divr16s::rem
(word) divr16s::remu
(word) divr16s::resultu
(word) divr16s::resultu#0 3333.6666666666665
(signed word) divr16s::return
(signed word) divr16s::return#1 20002.0
(signed word) divr16s::return#2 7001.0
(signed word) divr16s::return#3 2002.0
(signed word) divr16s::return#6 10001.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 2.0000002E7
(byte~) divr16u::$2 2.0000002E7
(word) divr16u::dividend
(word) divr16u::dividend#0 2500000.25
(word) divr16u::dividend#1 1001.0
(word) divr16u::dividend#2 10001.0
(word) divr16u::dividend#3 4300000.571428571
(word) divr16u::dividend#5 111003.0
(word) divr16u::divisor
(word) divr16u::divisor#0 2002.0
(word) divr16u::divisor#1 20002.0
(word) divr16u::divisor#6 1250687.75
(byte) divr16u::i
(byte) divr16u::i#1 1.50000015E7
(byte) divr16u::i#2 1538461.6923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 1.50000015E7
(word) divr16u::quotient#2 1.0000001E7
(word) divr16u::quotient#3 2500000.25
(word) divr16u::rem
(word) divr16u::rem#0 7500000.75
(word) divr16u::rem#1 2.0000002E7
(word) divr16u::rem#11 1.0033334666666666E7
(word) divr16u::rem#2 2.0000002E7
(word) divr16u::rem#5 2.0000002E7
(word) divr16u::rem#6 1.0000001E7
(word) divr16u::return
(word) divr16u::return#0 4287286.428571429
(word) divr16u::return#2 2002.0
(word) divr16u::return#3 20002.0
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 2.0000002E7
(byte) divr8u::dividend
(byte) divr8u::dividend#0 36667.33333333333
(byte) divr8u::dividend#1 2500000.25
(byte) divr8u::dividend#2 5016667.333333333
(byte) divr8u::divisor
(byte) divr8u::divisor#0 1250625.1875
(byte) divr8u::i
(byte) divr8u::i#1 1.50000015E7
(byte) divr8u::i#2 1666666.8333333333
(byte) divr8u::quotient
(byte) divr8u::quotient#1 1.50000015E7
(byte) divr8u::quotient#2 1.0000001E7
(byte) divr8u::quotient#3 2857143.1428571427
(byte) divr8u::rem
(byte) divr8u::rem#1 1.0000001E7
(byte) divr8u::rem#10 1.0033334666666666E7
(byte) divr8u::rem#2 2.0000002E7
(byte) divr8u::rem#3 2.0000002E7
(byte) divr8u::rem#4 2.0000002E7
(byte) divr8u::rem#5 1.0000001E7
(byte) divr8u::return
(byte) divr8u::return#0 20002.0
(byte) divr8u::return#1 5001667.333333333
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 2002.0
(byte*) memset::dst#2 1334.6666666666667
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 200002.0
(byte) print_char::ch#5 200002.0
(byte) print_char::ch#6 200002.0
(byte) print_char::ch#7 1300004.0
(byte*) print_char_cursor
(byte*) print_char_cursor#135 601.5
(byte*) print_char_cursor#138 601.5
(byte*) print_char_cursor#141 5703.0
(byte*) print_char_cursor#142 40469.333333333314
(byte*) print_char_cursor#144 22.444444444444443
(byte*) print_char_cursor#160 202.0
(byte*) print_char_cursor#164 202.0
(byte*) print_char_cursor#169 202.0
(byte*) print_char_cursor#18 14274.119565217386
(byte*) print_char_cursor#187 202.0
(byte*) print_char_cursor#85 1152004.5
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#0 2949.127450980392
(byte*) print_line_cursor#21 201003.0
(byte*) print_line_cursor#41 1405.0
(byte*) print_line_cursor#43 8.782608695652174
(void()) print_ln()
(void()) print_schar((signed byte) print_schar::b)
(signed byte) print_schar::b
(signed byte) print_schar::b#0 2002.0
(signed byte) print_schar::b#1 101.0
(signed byte) print_schar::b#10 567.8333333333334
(signed byte) print_schar::b#2 202.0
(signed byte) print_schar::b#3 202.0
(signed byte) print_schar::b#4 202.0
(signed byte) print_schar::b#7 2002.0
(byte*) print_screen
(void()) print_sint((signed word) print_sint::w)
(signed word) print_sint::w
(signed word) print_sint::w#0 2002.0
(signed word) print_sint::w#1 101.0
(signed word) print_sint::w#10 567.8333333333334
(signed word) print_sint::w#2 202.0
(signed word) print_sint::w#3 202.0
(signed word) print_sint::w#4 202.0
(signed word) print_sint::w#7 2002.0
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 200002.0
(byte*) print_str::str#13 100251.25
(byte*) print_str::str#16 1001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 200002.0
(byte~) print_uchar::$2 200002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 2002.0
(byte) print_uchar::b#1 20002.0
(byte) print_uchar::b#2 20002.0
(byte) print_uchar::b#3 202.0
(byte) print_uchar::b#4 202.0
(byte) print_uchar::b#5 202.0
(byte) print_uchar::b#6 202.0
(byte) print_uchar::b#7 55352.25
(void()) print_uint((word) print_uint::w)
(word) print_uint::w
(word) print_uint::w#0 2002.0
(word) print_uint::w#1 101.0
(word) print_uint::w#2 202.0
(word) print_uint::w#3 202.0
(word) print_uint::w#4 202.0
(word) print_uint::w#5 7135.666666666666
(signed word) rem16s
(signed word) rem16s#1 10001.0
(signed word) rem16s#12 913.7727272727273
(signed word) rem16s#38 20002.0
(word) rem16u
(word) rem16u#0 3707.4814814814818
(signed byte) rem8s
(signed byte) rem8s#1 1001.0
(signed byte) rem8s#10 116.83333333333334
(signed byte) rem8s#33 2002.0
(byte) rem8u
(byte) rem8u#18 3850.076923076923
(void()) test_16s()
(byte~) test_16s::$11 151.5
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 43.285714285714285
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 27.545454545454547
(byte) test_16s::i
(byte) test_16s::i#1 151.5
(byte) test_16s::i#10 11.653846153846153
(signed word) test_16s::res
(signed word) test_16s::res#0 20.2
(void()) test_16u()
(byte~) test_16u::$11 151.5
(word) test_16u::dividend
(word) test_16u::dividend#0 43.285714285714285
(word) test_16u::divisor
(word) test_16u::divisor#0 27.545454545454547
(byte) test_16u::i
(byte) test_16u::i#1 151.5
(byte) test_16u::i#10 11.653846153846153
(word) test_16u::res
(word) test_16u::res#0 20.2
(void()) test_8s()
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 43.285714285714285
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 27.545454545454547
(byte) test_8s::i
(byte) test_8s::i#1 151.5
(byte) test_8s::i#10 16.16
(signed byte) test_8s::res
(signed byte) test_8s::res#0 20.2
(void()) test_8u()
(byte) test_8u::dividend
(byte) test_8u::dividend#0 43.285714285714285
(byte) test_8u::divisor
(byte) test_8u::divisor#0 30.299999999999997
(byte) test_8u::i
(byte) test_8u::i#1 101.0
(byte) test_8u::i#10 16.833333333333332
(byte) test_8u::res
(byte) test_8u::res#0 22.444444444444443

Initial phi equivalence classes
[ test_16s::i#10 test_16s::i#1 ]
[ print_line_cursor#21 print_line_cursor#41 print_line_cursor#0 print_line_cursor#43 ]
[ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 ]
[ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
[ print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 ]
[ print_char_cursor#141 print_char_cursor#85 print_char_cursor#138 print_char_cursor#135 print_char_cursor#160 print_char_cursor#18 print_char_cursor#142 print_char_cursor#169 print_char_cursor#144 print_char_cursor#164 print_char_cursor#187 ]
[ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ]
[ print_str::str#13 print_str::str#16 print_str::str#0 ]
[ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
[ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
[ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
[ divr16s::return#2 divr16s::return#6 divr16s::return#1 ]
[ rem16s#12 rem16s#38 rem16s#1 ]
[ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ]
[ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ test_8s::i#10 test_8s::i#1 ]
[ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ]
[ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
[ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
[ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
[ div8s::return#2 div8s::return#6 div8s::return#1 ]
[ rem8s#10 rem8s#33 rem8s#1 ]
[ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
[ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
[ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
[ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
[ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
[ divr8u::i#2 divr8u::i#1 ]
[ test_16u::i#10 test_16u::i#1 ]
[ test_8u::i#10 test_8u::i#1 ]
[ memset::dst#2 memset::dst#1 ]
Added variable test_16s::$11 to live range equivalence class [ test_16s::$11 ]
Added variable test_16s::dividend#0 to live range equivalence class [ test_16s::dividend#0 ]
Added variable test_16s::divisor#0 to live range equivalence class [ test_16s::divisor#0 ]
Added variable div16s::dividend#0 to live range equivalence class [ div16s::dividend#0 ]
Added variable div16s::divisor#0 to live range equivalence class [ div16s::divisor#0 ]
Added variable div16s::return#2 to live range equivalence class [ div16s::return#2 ]
Added variable test_16s::res#0 to live range equivalence class [ test_16s::res#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable divr16s::dividend#0 to live range equivalence class [ divr16s::dividend#0 ]
Added variable divr16s::divisor#0 to live range equivalence class [ divr16s::divisor#0 ]
Added variable divr16s::return#3 to live range equivalence class [ divr16s::return#3 ]
Added variable div16s::return#0 to live range equivalence class [ div16s::return#0 ]
Added variable divr16u::return#3 to live range equivalence class [ divr16u::return#3 ]
Added variable divr16s::resultu#0 to live range equivalence class [ divr16s::resultu#0 ]
Added variable divr16s::divisoru#1 to live range equivalence class [ divr16s::divisoru#1 ]
Added variable divr16s::dividendu#1 to live range equivalence class [ divr16s::dividendu#1 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Added variable rem16u#0 to live range equivalence class [ rem16u#0 ]
Added variable test_8s::dividend#0 to live range equivalence class [ test_8s::dividend#0 ]
Added variable test_8s::divisor#0 to live range equivalence class [ test_8s::divisor#0 ]
Added variable div8s::dividend#0 to live range equivalence class [ div8s::dividend#0 ]
Added variable div8s::divisor#0 to live range equivalence class [ div8s::divisor#0 ]
Added variable div8s::return#3 to live range equivalence class [ div8s::return#3 ]
Added variable test_8s::res#0 to live range equivalence class [ test_8s::res#0 ]
Added variable div8u::return#2 to live range equivalence class [ div8u::return#2 ]
Added variable div8s::resultu#0 to live range equivalence class [ div8s::resultu#0 ]
Added variable div8s::divisoru#1 to live range equivalence class [ div8s::divisoru#1 ]
Added variable div8s::dividendu#1 to live range equivalence class [ div8s::dividendu#1 ]
Added variable divr8u::divisor#0 to live range equivalence class [ divr8u::divisor#0 ]
Added variable divr8u::return#0 to live range equivalence class [ divr8u::return#0 ]
Added variable div8u::return#0 to live range equivalence class [ div8u::return#0 ]
Added variable divr8u::$1 to live range equivalence class [ divr8u::$1 ]
Added variable rem8u#18 to live range equivalence class [ rem8u#18 ]
Added variable test_16u::$11 to live range equivalence class [ test_16u::$11 ]
Added variable test_16u::dividend#0 to live range equivalence class [ test_16u::dividend#0 ]
Added variable test_16u::divisor#0 to live range equivalence class [ test_16u::divisor#0 ]
Added variable div16u::dividend#0 to live range equivalence class [ div16u::dividend#0 ]
Added variable div16u::divisor#0 to live range equivalence class [ div16u::divisor#0 ]
Added variable div16u::return#2 to live range equivalence class [ div16u::return#2 ]
Added variable test_16u::res#0 to live range equivalence class [ test_16u::res#0 ]
Added variable divr16u::return#2 to live range equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to live range equivalence class [ div16u::return#0 ]
Added variable test_8u::dividend#0 to live range equivalence class [ test_8u::dividend#0 ]
Added variable test_8u::divisor#0 to live range equivalence class [ test_8u::divisor#0 ]
Added variable div8u::return#3 to live range equivalence class [ div8u::return#3 ]
Added variable test_8u::res#0 to live range equivalence class [ test_8u::res#0 ]
Complete equivalence classes
[ test_16s::i#10 test_16s::i#1 ]
[ print_line_cursor#21 print_line_cursor#41 print_line_cursor#0 print_line_cursor#43 ]
[ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 ]
[ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
[ print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 ]
[ print_char_cursor#141 print_char_cursor#85 print_char_cursor#138 print_char_cursor#135 print_char_cursor#160 print_char_cursor#18 print_char_cursor#142 print_char_cursor#169 print_char_cursor#144 print_char_cursor#164 print_char_cursor#187 ]
[ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ]
[ print_str::str#13 print_str::str#16 print_str::str#0 ]
[ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
[ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
[ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
[ divr16s::return#2 divr16s::return#6 divr16s::return#1 ]
[ rem16s#12 rem16s#38 rem16s#1 ]
[ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ]
[ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ test_8s::i#10 test_8s::i#1 ]
[ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ]
[ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
[ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
[ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
[ div8s::return#2 div8s::return#6 div8s::return#1 ]
[ rem8s#10 rem8s#33 rem8s#1 ]
[ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
[ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
[ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
[ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
[ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
[ divr8u::i#2 divr8u::i#1 ]
[ test_16u::i#10 test_16u::i#1 ]
[ test_8u::i#10 test_8u::i#1 ]
[ memset::dst#2 memset::dst#1 ]
[ test_16s::$11 ]
[ test_16s::dividend#0 ]
[ test_16s::divisor#0 ]
[ div16s::dividend#0 ]
[ div16s::divisor#0 ]
[ div16s::return#2 ]
[ test_16s::res#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ divr16s::dividend#0 ]
[ divr16s::divisor#0 ]
[ divr16s::return#3 ]
[ div16s::return#0 ]
[ divr16u::return#3 ]
[ divr16s::resultu#0 ]
[ divr16s::divisoru#1 ]
[ divr16s::dividendu#1 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#0 ]
[ test_8s::dividend#0 ]
[ test_8s::divisor#0 ]
[ div8s::dividend#0 ]
[ div8s::divisor#0 ]
[ div8s::return#3 ]
[ test_8s::res#0 ]
[ div8u::return#2 ]
[ div8s::resultu#0 ]
[ div8s::divisoru#1 ]
[ div8s::dividendu#1 ]
[ divr8u::divisor#0 ]
[ divr8u::return#0 ]
[ div8u::return#0 ]
[ divr8u::$1 ]
[ rem8u#18 ]
[ test_16u::$11 ]
[ test_16u::dividend#0 ]
[ test_16u::divisor#0 ]
[ div16u::dividend#0 ]
[ div16u::divisor#0 ]
[ div16u::return#2 ]
[ test_16u::res#0 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
[ test_8u::dividend#0 ]
[ test_8u::divisor#0 ]
[ div8u::return#3 ]
[ test_8u::res#0 ]
Allocated zp[1]:2 [ test_16s::i#10 test_16s::i#1 ]
Allocated zp[2]:3 [ print_line_cursor#21 print_line_cursor#41 print_line_cursor#0 print_line_cursor#43 ]
Allocated zp[2]:5 [ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 ]
Allocated zp[1]:7 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
Allocated zp[2]:8 [ print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 ]
Allocated zp[2]:10 [ print_char_cursor#141 print_char_cursor#85 print_char_cursor#138 print_char_cursor#135 print_char_cursor#160 print_char_cursor#18 print_char_cursor#142 print_char_cursor#169 print_char_cursor#144 print_char_cursor#164 print_char_cursor#187 ]
Allocated zp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ]
Allocated zp[2]:13 [ print_str::str#13 print_str::str#16 print_str::str#0 ]
Allocated zp[2]:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
Allocated zp[2]:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
Allocated zp[1]:19 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
Allocated zp[2]:20 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 ]
Allocated zp[2]:22 [ rem16s#12 rem16s#38 rem16s#1 ]
Allocated zp[2]:24 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ]
Allocated zp[2]:26 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:28 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ]
Allocated zp[2]:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[1]:32 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[1]:33 [ test_8s::i#10 test_8s::i#1 ]
Allocated zp[1]:34 [ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ]
Allocated zp[1]:35 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
Allocated zp[1]:36 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
Allocated zp[1]:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Allocated zp[1]:38 [ div8s::return#2 div8s::return#6 div8s::return#1 ]
Allocated zp[1]:39 [ rem8s#10 rem8s#33 rem8s#1 ]
Allocated zp[1]:40 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
Allocated zp[1]:41 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
Allocated zp[1]:42 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Allocated zp[1]:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Allocated zp[1]:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Allocated zp[1]:45 [ divr8u::i#2 divr8u::i#1 ]
Allocated zp[1]:46 [ test_16u::i#10 test_16u::i#1 ]
Allocated zp[1]:47 [ test_8u::i#10 test_8u::i#1 ]
Allocated zp[2]:48 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:50 [ test_16s::$11 ]
Allocated zp[2]:51 [ test_16s::dividend#0 ]
Allocated zp[2]:53 [ test_16s::divisor#0 ]
Allocated zp[2]:55 [ div16s::dividend#0 ]
Allocated zp[2]:57 [ div16s::divisor#0 ]
Allocated zp[2]:59 [ div16s::return#2 ]
Allocated zp[2]:61 [ test_16s::res#0 ]
Allocated zp[1]:63 [ print_uchar::$0 ]
Allocated zp[1]:64 [ print_uchar::$2 ]
Allocated zp[2]:65 [ divr16s::dividend#0 ]
Allocated zp[2]:67 [ divr16s::divisor#0 ]
Allocated zp[2]:69 [ divr16s::return#3 ]
Allocated zp[2]:71 [ div16s::return#0 ]
Allocated zp[2]:73 [ divr16u::return#3 ]
Allocated zp[2]:75 [ divr16s::resultu#0 ]
Allocated zp[2]:77 [ divr16s::divisoru#1 ]
Allocated zp[2]:79 [ divr16s::dividendu#1 ]
Allocated zp[1]:81 [ divr16u::$1 ]
Allocated zp[1]:82 [ divr16u::$2 ]
Allocated zp[2]:83 [ rem16u#0 ]
Allocated zp[1]:85 [ test_8s::dividend#0 ]
Allocated zp[1]:86 [ test_8s::divisor#0 ]
Allocated zp[1]:87 [ div8s::dividend#0 ]
Allocated zp[1]:88 [ div8s::divisor#0 ]
Allocated zp[1]:89 [ div8s::return#3 ]
Allocated zp[1]:90 [ test_8s::res#0 ]
Allocated zp[1]:91 [ div8u::return#2 ]
Allocated zp[1]:92 [ div8s::resultu#0 ]
Allocated zp[1]:93 [ div8s::divisoru#1 ]
Allocated zp[1]:94 [ div8s::dividendu#1 ]
Allocated zp[1]:95 [ divr8u::divisor#0 ]
Allocated zp[1]:96 [ divr8u::return#0 ]
Allocated zp[1]:97 [ div8u::return#0 ]
Allocated zp[1]:98 [ divr8u::$1 ]
Allocated zp[1]:99 [ rem8u#18 ]
Allocated zp[1]:100 [ test_16u::$11 ]
Allocated zp[2]:101 [ test_16u::dividend#0 ]
Allocated zp[2]:103 [ test_16u::divisor#0 ]
Allocated zp[2]:105 [ div16u::dividend#0 ]
Allocated zp[2]:107 [ div16u::divisor#0 ]
Allocated zp[2]:109 [ div16u::return#2 ]
Allocated zp[2]:111 [ test_16u::res#0 ]
Allocated zp[2]:113 [ divr16u::return#2 ]
Allocated zp[2]:115 [ div16u::return#0 ]
Allocated zp[1]:117 [ test_8u::dividend#0 ]
Allocated zp[1]:118 [ test_8u::divisor#0 ]
Allocated zp[1]:119 [ div8u::return#3 ]
Allocated zp[1]:120 [ test_8u::res#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test the binary division library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_screen = $400
  .label print_line_cursor = 3
  .label print_char_cursor = $a
  // Remainder after unsigned 16-bit division
  .label rem16u = $53
  // Remainder after signed 8 bit division
  .label rem8s = $27
  // Remainder after signed 16 bit division
  .label rem16s = $16
  // Remainder after signed 8 bit division
  .label rem8u = $63
  // main
main: {
    // [1] call print_cls 
    // [281] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call test_8u 
    // [252] phi from main::@1 to test_8u [phi:main::@1->test_8u]
  test_8u_from___b1:
    jsr test_8u
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call test_16u 
    // [216] phi from main::@2 to test_16u [phi:main::@2->test_16u]
  test_16u_from___b2:
    jsr test_16u
    // [6] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [7] call test_8s 
    // [129] phi from main::@3 to test_8s [phi:main::@3->test_8s]
  test_8s_from___b3:
    jsr test_8s
    // [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [9] call test_16s 
    // [11] phi from main::@4 to test_16s [phi:main::@4->test_16s]
  test_16s_from___b4:
    jsr test_16s
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // test_16s
test_16s: {
    .label __11 = $32
    .label dividend = $33
    .label divisor = $35
    .label res = $3d
    .label i = 2
    // [12] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  __b1_from_test_16s:
    // [12] phi (byte) test_16s::i#10 = (byte) 0 [phi:test_16s->test_16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [12] phi from test_16s::@10 to test_16s::@1 [phi:test_16s::@10->test_16s::@1]
  __b1_from___b10:
    // [12] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@10->test_16s::@1#0] -- register_copy 
    jmp __b1
    // test_16s::@1
  __b1:
    // [13] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z __11
    // [14] (signed word) test_16s::dividend#0 ← *((const signed word*) test_16s::dividends + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __11
    lda dividends,y
    sta.z dividend
    lda dividends+1,y
    sta.z dividend+1
    // [15] (signed word) test_16s::divisor#0 ← *((const signed word*) test_16s::divisors + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __11
    lda divisors,y
    sta.z divisor
    lda divisors+1,y
    sta.z divisor+1
    // [16] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 -- vwsz1=vwsz2 
    lda.z dividend
    sta.z div16s.dividend
    lda.z dividend+1
    sta.z div16s.dividend+1
    // [17] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 -- vwsz1=vwsz2 
    lda.z divisor
    sta.z div16s.divisor
    lda.z divisor+1
    sta.z div16s.divisor+1
    // [18] call div16s 
    jsr div16s
    // [19] (signed word) div16s::return#2 ← (signed word) div16s::return#0 -- vwsz1=vwsz2 
    lda.z div16s.return
    sta.z div16s.return_1
    lda.z div16s.return+1
    sta.z div16s.return_1+1
    jmp __b2
    // test_16s::@2
  __b2:
    // [20] (signed word) test_16s::res#0 ← (signed word) div16s::return#2 -- vwsz1=vwsz2 
    lda.z div16s.return_1
    sta.z res
    lda.z div16s.return_1+1
    sta.z res+1
    // [21] (signed word) print_sint::w#1 ← (signed word) test_16s::dividend#0 -- vwsz1=vwsz2 
    lda.z dividend
    sta.z print_sint.w
    lda.z dividend+1
    sta.z print_sint.w+1
    // [22] (byte*) print_char_cursor#160 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [23] call print_sint 
    // [46] phi from test_16s::@2 to print_sint [phi:test_16s::@2->print_sint]
  print_sint_from___b2:
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#160 [phi:test_16s::@2->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#1 [phi:test_16s::@2->print_sint#1] -- register_copy 
    jsr print_sint
    // [24] phi from test_16s::@2 to test_16s::@3 [phi:test_16s::@2->test_16s::@3]
  __b3_from___b2:
    jmp __b3
    // test_16s::@3
  __b3:
    // [25] call print_str 
    // [75] phi from test_16s::@3 to print_str [phi:test_16s::@3->print_str]
  print_str_from___b3:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_16s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // test_16s::@4
  __b4:
    // [26] (signed word) print_sint::w#2 ← (signed word) test_16s::divisor#0 -- vwsz1=vwsz2 
    lda.z divisor
    sta.z print_sint.w
    lda.z divisor+1
    sta.z print_sint.w+1
    // [27] call print_sint 
    // [46] phi from test_16s::@4 to print_sint [phi:test_16s::@4->print_sint]
  print_sint_from___b4:
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#18 [phi:test_16s::@4->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#2 [phi:test_16s::@4->print_sint#1] -- register_copy 
    jsr print_sint
    // [28] phi from test_16s::@4 to test_16s::@5 [phi:test_16s::@4->test_16s::@5]
  __b5_from___b4:
    jmp __b5
    // test_16s::@5
  __b5:
    // [29] call print_str 
    // [75] phi from test_16s::@5 to print_str [phi:test_16s::@5->print_str]
  print_str_from___b5:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_16s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b6
    // test_16s::@6
  __b6:
    // [30] (signed word) print_sint::w#3 ← (signed word) test_16s::res#0 -- vwsz1=vwsz2 
    lda.z res
    sta.z print_sint.w
    lda.z res+1
    sta.z print_sint.w+1
    // [31] call print_sint 
    // [46] phi from test_16s::@6 to print_sint [phi:test_16s::@6->print_sint]
  print_sint_from___b6:
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#18 [phi:test_16s::@6->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#3 [phi:test_16s::@6->print_sint#1] -- register_copy 
    jsr print_sint
    // [32] phi from test_16s::@6 to test_16s::@7 [phi:test_16s::@6->test_16s::@7]
  __b7_from___b6:
    jmp __b7
    // test_16s::@7
  __b7:
    // [33] call print_str 
    // [75] phi from test_16s::@7 to print_str [phi:test_16s::@7->print_str]
  print_str_from___b7:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_16s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b8
    // test_16s::@8
  __b8:
    // [34] (signed word) print_sint::w#4 ← (signed word) rem16s#12 -- vwsz1=vwsz2 
    lda.z rem16s
    sta.z print_sint.w
    lda.z rem16s+1
    sta.z print_sint.w+1
    // [35] call print_sint 
    // [46] phi from test_16s::@8 to print_sint [phi:test_16s::@8->print_sint]
  print_sint_from___b8:
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#18 [phi:test_16s::@8->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#4 [phi:test_16s::@8->print_sint#1] -- register_copy 
    jsr print_sint
    // [36] phi from test_16s::@8 to test_16s::@9 [phi:test_16s::@8->test_16s::@9]
  __b9_from___b8:
    jmp __b9
    // test_16s::@9
  __b9:
    // [37] call print_ln 
    // [41] phi from test_16s::@9 to print_ln [phi:test_16s::@9->print_ln]
  print_ln_from___b9:
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#0 [phi:test_16s::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b10
    // test_16s::@10
  __b10:
    // [38] (byte) test_16s::i#1 ← ++ (byte) test_16s::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [39] if((byte) test_16s::i#1!=(byte) 6) goto test_16s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1_from___b10
    jmp __breturn
    // test_16s::@return
  __breturn:
    // [40] return 
    rts
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
  // print_ln
// Print a newline
print_ln: {
    // [42] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [42] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#41 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [43] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#21 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [44] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#18) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [45] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(5) w)
print_sint: {
    .label w = 5
    // [47] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [48] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [49] call print_char 
    // [57] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#135 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [50] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [50] phi (signed word) print_sint::w#7 = (signed word) print_sint::w#10 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [51] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7 -- vwuz1=vwuz2 
    lda.z w
    sta.z print_uint.w
    lda.z w+1
    sta.z print_uint.w+1
    // [52] call print_uint 
    // [61] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [53] return 
    rts
    // [54] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [55] call print_char 
    // [57] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#135 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [56] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#10 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_char
// Print a single char
// print_char(byte zp(7) ch)
print_char: {
    .label ch = 7
    // [58] *((byte*) print_char_cursor#85) ← (byte) print_char::ch#7 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [59] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#85 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [60] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(8) w)
print_uint: {
    .label w = 8
    // [62] (byte) print_uchar::b#1 ← > (word) print_uint::w#5 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar.b
    // [63] call print_uchar 
    // [67] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#141 [phi:print_uint->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [64] (byte) print_uchar::b#2 ← < (word) print_uint::w#5 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar.b
    // [65] call print_uchar 
    // [67] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [66] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp($c) b)
print_uchar: {
    .label __0 = $3f
    .label __2 = $40
    .label b = $c
    // [68] (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [69] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [70] call print_char 
  // Table of hexadecimal digits
    // [57] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#142 [phi:print_uchar->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [71] (byte~) print_uchar::$2 ← (byte) print_uchar::b#7 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [72] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [73] call print_char 
    // [57] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#18 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [74] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($d) str)
print_str: {
    .label str = $d
    // [76] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [76] phi (byte*) print_str::str#13 = (byte*) print_str::str#16 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [77] if((byte) 0!=*((byte*) print_str::str#13)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [78] return 
    rts
    // print_str::@2
  __b2:
    // [79] (byte) print_char::ch#0 ← *((byte*) print_str::str#13) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [80] call print_char 
    // [57] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#18 [phi:print_str::@2->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [81] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zp($37) dividend, signed word zp($39) divisor)
div16s: {
    .label return = $47
    .label dividend = $37
    .label divisor = $39
    .label return_1 = $3b
    // [82] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 -- vwsz1=vwsz2 
    lda.z dividend
    sta.z divr16s.dividend
    lda.z dividend+1
    sta.z divr16s.dividend+1
    // [83] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 -- vwsz1=vwsz2 
    lda.z divisor
    sta.z divr16s.divisor
    lda.z divisor+1
    sta.z divr16s.divisor+1
    // [84] call divr16s 
    jsr divr16s
    // [85] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2 -- vwsz1=vwsz2 
    lda.z divr16s.return
    sta.z divr16s.return_1
    lda.z divr16s.return+1
    sta.z divr16s.return_1+1
    jmp __b1
    // div16s::@1
  __b1:
    // [86] (signed word) div16s::return#0 ← (signed word) divr16s::return#3 -- vwsz1=vwsz2 
    lda.z divr16s.return_1
    sta.z return
    lda.z divr16s.return_1+1
    sta.z return+1
    jmp __breturn
    // div16s::@return
  __breturn:
    // [87] return 
    rts
}
  // divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zp($41) dividend, signed word zp($43) divisor)
divr16s: {
    .label dividendu = $4f
    .label divisoru = $4d
    .label neg = $13
    .label resultu = $4b
    .label return = $14
    .label dividend = $41
    .label divisor = $43
    .label return_1 = $45
    .label dividendu_1 = $f
    .label divisoru_1 = $11
    // [88] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda.z dividend+1
    bmi __b1
    jmp __b6
    // divr16s::@6
  __b6:
    // [89] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 -- vwuz1=vwuz2 
    lda.z dividend
    sta.z dividendu_1
    lda.z dividend+1
    sta.z dividendu_1+1
    // [90] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
  __b2_from___b6:
    // [90] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
    // [90] phi (byte) divr16s::neg#3 = (byte) 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z neg
    jmp __b2
    // divr16s::@2
  __b2:
    // [91] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda.z divisor+1
    bmi __b3
    jmp __b7
    // divr16s::@7
  __b7:
    // [92] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 -- vwuz1=vwuz2 
    lda.z divisor
    sta.z divisoru_1
    lda.z divisor+1
    sta.z divisoru_1+1
    // [93] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
  __b4_from___b3:
  __b4_from___b7:
    // [93] phi (byte) divr16s::neg#4 = (byte) divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
    // [93] phi (word) divr16s::divisoru#3 = (word) divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
    jmp __b4
    // divr16s::@4
  __b4:
    // [94] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3 -- vwuz1=vwuz2 
    lda.z dividendu_1
    sta.z divr16u.dividend
    lda.z dividendu_1+1
    sta.z divr16u.dividend+1
    // [95] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3 -- vwuz1=vwuz2 
    lda.z divisoru_1
    sta.z divr16u.divisor
    lda.z divisoru_1+1
    sta.z divr16u.divisor+1
    // [96] call divr16u 
    // [111] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
  divr16u_from___b4:
    // [111] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#1 [phi:divr16s::@4->divr16u#0] -- register_copy 
    // [111] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#2 [phi:divr16s::@4->divr16u#1] -- register_copy 
    jsr divr16u
    // [97] (word) divr16u::return#3 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z divr16u.return_2
    lda.z divr16u.return+1
    sta.z divr16u.return_2+1
    jmp __b9
    // divr16s::@9
  __b9:
    // [98] (word) divr16s::resultu#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda.z divr16u.return_2
    sta.z resultu
    lda.z divr16u.return_2+1
    sta.z resultu+1
    // [99] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5 -- vbuz1_eq_0_then_la1 
    lda.z neg
    cmp #0
    beq __b5
    jmp __b8
    // divr16s::@8
  __b8:
    // [100] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc.z rem16u
    sta.z rem16s
    lda #0
    sbc.z rem16u+1
    sta.z rem16s+1
    // [101] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc.z resultu
    sta.z return
    lda #0
    sbc.z resultu+1
    sta.z return+1
    // [102] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
  __breturn_from___b5:
  __breturn_from___b8:
    // [102] phi (signed word) rem16s#12 = (signed word) rem16s#38 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
    // [102] phi (signed word) divr16s::return#2 = (signed word) divr16s::return#6 [phi:divr16s::@5/divr16s::@8->divr16s::@return#1] -- register_copy 
    jmp __breturn
    // divr16s::@return
  __breturn:
    // [103] return 
    rts
    // divr16s::@5
  __b5:
    // [104] (signed word) divr16s::return#6 ← (signed word)(word) divr16s::resultu#0 -- vwsz1=vwsz2 
    lda.z resultu
    sta.z return
    lda.z resultu+1
    sta.z return+1
    // [105] (signed word) rem16s#38 ← (signed word)(word) rem16u#0 -- vwsz1=vwsz2 
    lda.z rem16u
    sta.z rem16s
    lda.z rem16u+1
    sta.z rem16s+1
    jmp __breturn_from___b5
    // divr16s::@3
  __b3:
    // [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc.z divisor
    sta.z divisoru
    lda #0
    sbc.z divisor+1
    sta.z divisoru+1
    // [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #1
    eor.z neg
    sta.z neg
    // [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 -- vwuz1=vwuz2 
    lda.z divisoru
    sta.z divisoru_1
    lda.z divisoru+1
    sta.z divisoru_1+1
    jmp __b4_from___b3
    // divr16s::@1
  __b1:
    // [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc.z dividend
    sta.z dividendu
    lda #0
    sbc.z dividend+1
    sta.z dividendu+1
    // [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 -- vwuz1=vwuz2 
    lda.z dividendu
    sta.z dividendu_1
    lda.z dividendu+1
    sta.z dividendu_1+1
    // [90] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
  __b2_from___b1:
    // [90] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
    // [90] phi (byte) divr16s::neg#3 = (byte) 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta.z neg
    jmp __b2
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($1c) dividend, word zp($18) divisor, word zp($1a) rem)
divr16u: {
    .label __1 = $51
    .label __2 = $52
    .label rem = $1a
    .label dividend = $1c
    .label quotient = $1e
    .label i = $20
    .label return = $1e
    .label divisor = $18
    .label return_1 = $71
    .label return_2 = $49
    // [112] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [112] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [112] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [112] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#5 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [112] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [112] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [112] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [112] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [113] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [114] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuz1=_hi_vwuz2 
    lda.z dividend+1
    sta.z __1
    // [115] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z __1
    sta.z __2
    // [116] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda.z __2
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [118] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [118] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [119] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [120] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [121] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda.z rem+1
    cmp.z divisor+1
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp.z divisor
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [122] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [123] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z rem
    sec
    sbc.z divisor
    sta.z rem
    lda.z rem+1
    sbc.z divisor+1
    sta.z rem+1
    // [124] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [124] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [124] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [125] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [126] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z i
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [127] (word) rem16u#0 ← (word) divr16u::rem#11 -- vwuz1=vwuz2 
    lda.z rem
    sta.z rem16u
    lda.z rem+1
    sta.z rem16u+1
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [128] return 
    rts
}
  // test_8s
test_8s: {
    .label dividend = $55
    .label divisor = $56
    .label res = $5a
    .label i = $21
    // [130] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  __b1_from_test_8s:
    // [130] phi (byte) test_8s::i#10 = (byte) 0 [phi:test_8s->test_8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [130] phi from test_8s::@10 to test_8s::@1 [phi:test_8s::@10->test_8s::@1]
  __b1_from___b10:
    // [130] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@10->test_8s::@1#0] -- register_copy 
    jmp __b1
    // test_8s::@1
  __b1:
    // [131] (signed byte) test_8s::dividend#0 ← *((const signed byte*) test_8s::dividends + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda dividends,y
    sta.z dividend
    // [132] (signed byte) test_8s::divisor#0 ← *((const signed byte*) test_8s::divisors + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda divisors,y
    sta.z divisor
    // [133] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 -- vbsz1=vbsz2 
    lda.z dividend
    sta.z div8s.dividend
    // [134] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 -- vbsz1=vbsz2 
    lda.z divisor
    sta.z div8s.divisor
    // [135] call div8s 
    jsr div8s
    // [136] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 -- vbsz1=vbsz2 
    lda.z div8s.return
    sta.z div8s.return_1
    jmp __b2
    // test_8s::@2
  __b2:
    // [137] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 -- vbsz1=vbsz2 
    lda.z div8s.return_1
    sta.z res
    // [138] (signed byte) print_schar::b#1 ← (signed byte) test_8s::dividend#0 -- vbsz1=vbsz2 
    lda.z dividend
    sta.z print_schar.b
    // [139] (byte*) print_char_cursor#164 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [140] call print_schar 
    // [158] phi from test_8s::@2 to print_schar [phi:test_8s::@2->print_schar]
  print_schar_from___b2:
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#164 [phi:test_8s::@2->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#1 [phi:test_8s::@2->print_schar#1] -- register_copy 
    jsr print_schar
    // [141] phi from test_8s::@2 to test_8s::@3 [phi:test_8s::@2->test_8s::@3]
  __b3_from___b2:
    jmp __b3
    // test_8s::@3
  __b3:
    // [142] call print_str 
    // [75] phi from test_8s::@3 to print_str [phi:test_8s::@3->print_str]
  print_str_from___b3:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_8s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // test_8s::@4
  __b4:
    // [143] (signed byte) print_schar::b#2 ← (signed byte) test_8s::divisor#0 -- vbsz1=vbsz2 
    lda.z divisor
    sta.z print_schar.b
    // [144] call print_schar 
    // [158] phi from test_8s::@4 to print_schar [phi:test_8s::@4->print_schar]
  print_schar_from___b4:
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:test_8s::@4->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#2 [phi:test_8s::@4->print_schar#1] -- register_copy 
    jsr print_schar
    // [145] phi from test_8s::@4 to test_8s::@5 [phi:test_8s::@4->test_8s::@5]
  __b5_from___b4:
    jmp __b5
    // test_8s::@5
  __b5:
    // [146] call print_str 
    // [75] phi from test_8s::@5 to print_str [phi:test_8s::@5->print_str]
  print_str_from___b5:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_8s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b6
    // test_8s::@6
  __b6:
    // [147] (signed byte) print_schar::b#3 ← (signed byte) test_8s::res#0 -- vbsz1=vbsz2 
    lda.z res
    sta.z print_schar.b
    // [148] call print_schar 
    // [158] phi from test_8s::@6 to print_schar [phi:test_8s::@6->print_schar]
  print_schar_from___b6:
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:test_8s::@6->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#3 [phi:test_8s::@6->print_schar#1] -- register_copy 
    jsr print_schar
    // [149] phi from test_8s::@6 to test_8s::@7 [phi:test_8s::@6->test_8s::@7]
  __b7_from___b6:
    jmp __b7
    // test_8s::@7
  __b7:
    // [150] call print_str 
    // [75] phi from test_8s::@7 to print_str [phi:test_8s::@7->print_str]
  print_str_from___b7:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_8s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b8
    // test_8s::@8
  __b8:
    // [151] (signed byte) print_schar::b#4 ← (signed byte) rem8s#10 -- vbsz1=vbsz2 
    lda.z rem8s
    sta.z print_schar.b
    // [152] call print_schar 
    // [158] phi from test_8s::@8 to print_schar [phi:test_8s::@8->print_schar]
  print_schar_from___b8:
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:test_8s::@8->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#4 [phi:test_8s::@8->print_schar#1] -- register_copy 
    jsr print_schar
    // [153] phi from test_8s::@8 to test_8s::@9 [phi:test_8s::@8->test_8s::@9]
  __b9_from___b8:
    jmp __b9
    // test_8s::@9
  __b9:
    // [154] call print_ln 
    // [41] phi from test_8s::@9 to print_ln [phi:test_8s::@9->print_ln]
  print_ln_from___b9:
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#0 [phi:test_8s::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b10
    // test_8s::@10
  __b10:
    // [155] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [156] if((byte) test_8s::i#1!=(byte) 6) goto test_8s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1_from___b10
    jmp __breturn
    // test_8s::@return
  __breturn:
    // [157] return 
    rts
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte zp($22) b)
print_schar: {
    .label b = $22
    // [159] if((signed byte) print_schar::b#10<(signed byte) 0) goto print_schar::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1_from_print_schar
    // [160] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [161] call print_char 
    // [57] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#138 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [162] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [162] phi (signed byte) print_schar::b#7 = (signed byte) print_schar::b#10 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [163] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#7 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_uchar.b
    // [164] call print_uchar 
    // [67] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
  print_uchar_from___b2:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [165] return 
    rts
    // [166] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [167] call print_char 
    // [57] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#138 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [168] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#10 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2_from___b4
}
  // div8s
// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div8s(signed byte zp($57) dividend, signed byte zp($58) divisor)
div8s: {
    .label dividendu = $5e
    .label divisoru = $5d
    .label neg = $25
    .label resultu = $5c
    .label return = $26
    .label dividend = $57
    .label divisor = $58
    .label return_1 = $59
    .label dividendu_1 = $23
    .label divisoru_1 = $24
    // [169] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1 -- vbsz1_lt_0_then_la1 
    lda.z dividend
    bmi __b1
    jmp __b6
    // div8s::@6
  __b6:
    // [170] (byte) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0 -- vbuz1=vbuz2 
    lda.z dividend
    sta.z dividendu_1
    // [171] phi from div8s::@6 to div8s::@2 [phi:div8s::@6->div8s::@2]
  __b2_from___b6:
    // [171] phi (byte) div8s::dividendu#3 = (byte) div8s::dividendu#8 [phi:div8s::@6->div8s::@2#0] -- register_copy 
    // [171] phi (byte) div8s::neg#3 = (byte) 0 [phi:div8s::@6->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z neg
    jmp __b2
    // div8s::@2
  __b2:
    // [172] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3 -- vbsz1_lt_0_then_la1 
    lda.z divisor
    bmi __b3
    jmp __b7
    // div8s::@7
  __b7:
    // [173] (byte) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0 -- vbuz1=vbuz2 
    lda.z divisor
    sta.z divisoru_1
    // [174] phi from div8s::@3 div8s::@7 to div8s::@4 [phi:div8s::@3/div8s::@7->div8s::@4]
  __b4_from___b3:
  __b4_from___b7:
    // [174] phi (byte) div8s::neg#4 = (byte) div8s::neg#2 [phi:div8s::@3/div8s::@7->div8s::@4#0] -- register_copy 
    // [174] phi (byte) div8s::divisoru#3 = (byte) div8s::divisoru#4 [phi:div8s::@3/div8s::@7->div8s::@4#1] -- register_copy 
    jmp __b4
    // div8s::@4
  __b4:
    // [175] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 -- vbuz1=vbuz2 
    lda.z dividendu_1
    sta.z div8u.dividend
    // [176] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3 -- vbuz1=vbuz2 
    lda.z divisoru_1
    sta.z div8u.divisor
    // [177] call div8u 
    // [192] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  div8u_from___b4:
    // [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
    // [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
    // [178] (byte) div8u::return#2 ← (byte) div8u::return#0 -- vbuz1=vbuz2 
    lda.z div8u.return
    sta.z div8u.return_1
    jmp __b9
    // div8s::@9
  __b9:
    // [179] (byte) div8s::resultu#0 ← (byte) div8u::return#2 -- vbuz1=vbuz2 
    lda.z div8u.return_1
    sta.z resultu
    // [180] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5 -- vbuz1_eq_0_then_la1 
    lda.z neg
    cmp #0
    beq __b5
    jmp __b8
    // div8s::@8
  __b8:
    // [181] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#18 -- vbsz1=_neg_vbsz2 
    lda.z rem8u
    eor #$ff
    clc
    adc #1
    sta.z rem8s
    // [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 -- vbsz1=_neg_vbsz2 
    lda.z resultu
    eor #$ff
    clc
    adc #1
    sta.z return
    // [183] phi from div8s::@5 div8s::@8 to div8s::@return [phi:div8s::@5/div8s::@8->div8s::@return]
  __breturn_from___b5:
  __breturn_from___b8:
    // [183] phi (signed byte) rem8s#10 = (signed byte) rem8s#33 [phi:div8s::@5/div8s::@8->div8s::@return#0] -- register_copy 
    // [183] phi (signed byte) div8s::return#2 = (signed byte) div8s::return#6 [phi:div8s::@5/div8s::@8->div8s::@return#1] -- register_copy 
    jmp __breturn
    // div8s::@return
  __breturn:
    // [184] return 
    rts
    // div8s::@5
  __b5:
    // [185] (signed byte) div8s::return#6 ← (signed byte)(byte) div8s::resultu#0 -- vbsz1=vbsz2 
    lda.z resultu
    sta.z return
    // [186] (signed byte) rem8s#33 ← (signed byte)(byte) rem8u#18 -- vbsz1=vbsz2 
    lda.z rem8u
    sta.z rem8s
    jmp __breturn_from___b5
    // div8s::@3
  __b3:
    // [187] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 -- vbsz1=_neg_vbsz2 
    lda.z divisor
    eor #$ff
    clc
    adc #1
    sta.z divisoru
    // [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #1
    eor.z neg
    sta.z neg
    // [189] (byte) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisoru#1 -- vbuz1=vbuz2 
    lda.z divisoru
    sta.z divisoru_1
    jmp __b4_from___b3
    // div8s::@1
  __b1:
    // [190] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 -- vbsz1=_neg_vbsz2 
    lda.z dividend
    eor #$ff
    clc
    adc #1
    sta.z dividendu
    // [191] (byte) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividendu#1 -- vbuz1=vbuz2 
    lda.z dividendu
    sta.z dividendu_1
    // [171] phi from div8s::@1 to div8s::@2 [phi:div8s::@1->div8s::@2]
  __b2_from___b1:
    // [171] phi (byte) div8s::dividendu#3 = (byte) div8s::dividendu#7 [phi:div8s::@1->div8s::@2#0] -- register_copy 
    // [171] phi (byte) div8s::neg#3 = (byte) 1 [phi:div8s::@1->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta.z neg
    jmp __b2
}
  // div8u
// Performs division on two 8 bit unsigned chars
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
// div8u(byte zp($28) dividend, byte zp($29) divisor)
div8u: {
    .label return = $61
    .label dividend = $28
    .label divisor = $29
    .label return_1 = $5b
    .label return_2 = $77
    // [193] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 -- vbuz1=vbuz2 
    lda.z dividend
    sta.z divr8u.dividend
    // [194] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 -- vbuz1=vbuz2 
    lda.z divisor
    sta.z divr8u.divisor
    // [195] call divr8u 
    // [199] phi from div8u to divr8u [phi:div8u->divr8u]
  divr8u_from_div8u:
    jsr divr8u
    // [196] (byte) divr8u::return#0 ← (byte) divr8u::return#1 -- vbuz1=vbuz2 
    lda.z divr8u.return_1
    sta.z divr8u.return
    jmp __b1
    // div8u::@1
  __b1:
    // [197] (byte) div8u::return#0 ← (byte) divr8u::return#0 -- vbuz1=vbuz2 
    lda.z divr8u.return
    sta.z return
    jmp __breturn
    // div8u::@return
  __breturn:
    // [198] return 
    rts
}
  // divr8u
// Performs division on two 8 bit unsigned chars and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
// divr8u(byte zp($2b) dividend, byte zp($5f) divisor, byte zp($2a) rem)
divr8u: {
    .label __1 = $62
    .label dividend = $2b
    .label divisor = $5f
    .label return = $60
    .label rem = $2a
    .label quotient = $2c
    .label i = $2d
    .label return_1 = $2c
    // [200] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  __b1_from_divr8u:
    // [200] phi (byte) divr8u::i#2 = (byte) 0 [phi:divr8u->divr8u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [200] phi (byte) divr8u::quotient#3 = (byte) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z quotient
    // [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
    // [200] phi (byte) divr8u::rem#4 = (byte) 0 [phi:divr8u->divr8u::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z rem
    jmp __b1
    // [200] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  __b1_from___b3:
    // [200] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
    // [200] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
    // [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
    // [200] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    jmp __b1
    // divr8u::@1
  __b1:
    // [201] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z rem
    // [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z dividend
    sta.z __1
    // [203] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2 -- vbuz1_eq_0_then_la1 
    lda.z __1
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr8u::@4
  __b4:
    // [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 -- vbuz1=vbuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [205] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [205] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    jmp __b2
    // divr8u::@2
  __b2:
    // [206] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z dividend
    // [207] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z quotient
    // [208] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda.z rem
    cmp.z divisor
    bcc __b3_from___b2
    jmp __b5
    // divr8u::@5
  __b5:
    // [209] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 -- vbuz1=_inc_vbuz1 
    inc.z quotient
    // [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z rem
    sec
    sbc.z divisor
    sta.z rem
    // [211] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [211] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
    // [211] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    jmp __b3
    // divr8u::@3
  __b3:
    // [212] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [213] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b1_from___b3
    jmp __b6
    // divr8u::@6
  __b6:
    // [214] (byte) rem8u#18 ← (byte) divr8u::rem#10 -- vbuz1=vbuz2 
    lda.z rem
    sta.z rem8u
    jmp __breturn
    // divr8u::@return
  __breturn:
    // [215] return 
    rts
}
  // test_16u
test_16u: {
    .label __11 = $64
    .label dividend = $65
    .label divisor = $67
    .label res = $6f
    .label i = $2e
    // [217] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  __b1_from_test_16u:
    // [217] phi (byte) test_16u::i#10 = (byte) 0 [phi:test_16u->test_16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [217] phi from test_16u::@10 to test_16u::@1 [phi:test_16u::@10->test_16u::@1]
  __b1_from___b10:
    // [217] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@10->test_16u::@1#0] -- register_copy 
    jmp __b1
    // test_16u::@1
  __b1:
    // [218] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z __11
    // [219] (word) test_16u::dividend#0 ← *((const word*) test_16u::dividends + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __11
    lda dividends,y
    sta.z dividend
    lda dividends+1,y
    sta.z dividend+1
    // [220] (word) test_16u::divisor#0 ← *((const word*) test_16u::divisors + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __11
    lda divisors,y
    sta.z divisor
    lda divisors+1,y
    sta.z divisor+1
    // [221] (word) div16u::dividend#0 ← (word) test_16u::dividend#0 -- vwuz1=vwuz2 
    lda.z dividend
    sta.z div16u.dividend
    lda.z dividend+1
    sta.z div16u.dividend+1
    // [222] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 -- vwuz1=vwuz2 
    lda.z divisor
    sta.z div16u.divisor
    lda.z divisor+1
    sta.z div16u.divisor+1
    // [223] call div16u 
    jsr div16u
    // [224] (word) div16u::return#2 ← (word) div16u::return#0 -- vwuz1=vwuz2 
    lda.z div16u.return
    sta.z div16u.return_1
    lda.z div16u.return+1
    sta.z div16u.return_1+1
    jmp __b2
    // test_16u::@2
  __b2:
    // [225] (word) test_16u::res#0 ← (word) div16u::return#2 -- vwuz1=vwuz2 
    lda.z div16u.return_1
    sta.z res
    lda.z div16u.return_1+1
    sta.z res+1
    // [226] (word) print_uint::w#1 ← (word) test_16u::dividend#0 -- vwuz1=vwuz2 
    lda.z dividend
    sta.z print_uint.w
    lda.z dividend+1
    sta.z print_uint.w+1
    // [227] (byte*) print_char_cursor#169 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [228] call print_uint 
    // [61] phi from test_16u::@2 to print_uint [phi:test_16u::@2->print_uint]
  print_uint_from___b2:
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#169 [phi:test_16u::@2->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#1 [phi:test_16u::@2->print_uint#1] -- register_copy 
    jsr print_uint
    // [229] phi from test_16u::@2 to test_16u::@3 [phi:test_16u::@2->test_16u::@3]
  __b3_from___b2:
    jmp __b3
    // test_16u::@3
  __b3:
    // [230] call print_str 
    // [75] phi from test_16u::@3 to print_str [phi:test_16u::@3->print_str]
  print_str_from___b3:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_16u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // test_16u::@4
  __b4:
    // [231] (word) print_uint::w#2 ← (word) test_16u::divisor#0 -- vwuz1=vwuz2 
    lda.z divisor
    sta.z print_uint.w
    lda.z divisor+1
    sta.z print_uint.w+1
    // [232] call print_uint 
    // [61] phi from test_16u::@4 to print_uint [phi:test_16u::@4->print_uint]
  print_uint_from___b4:
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:test_16u::@4->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#2 [phi:test_16u::@4->print_uint#1] -- register_copy 
    jsr print_uint
    // [233] phi from test_16u::@4 to test_16u::@5 [phi:test_16u::@4->test_16u::@5]
  __b5_from___b4:
    jmp __b5
    // test_16u::@5
  __b5:
    // [234] call print_str 
    // [75] phi from test_16u::@5 to print_str [phi:test_16u::@5->print_str]
  print_str_from___b5:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_16u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b6
    // test_16u::@6
  __b6:
    // [235] (word) print_uint::w#3 ← (word) test_16u::res#0 -- vwuz1=vwuz2 
    lda.z res
    sta.z print_uint.w
    lda.z res+1
    sta.z print_uint.w+1
    // [236] call print_uint 
    // [61] phi from test_16u::@6 to print_uint [phi:test_16u::@6->print_uint]
  print_uint_from___b6:
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:test_16u::@6->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#3 [phi:test_16u::@6->print_uint#1] -- register_copy 
    jsr print_uint
    // [237] phi from test_16u::@6 to test_16u::@7 [phi:test_16u::@6->test_16u::@7]
  __b7_from___b6:
    jmp __b7
    // test_16u::@7
  __b7:
    // [238] call print_str 
    // [75] phi from test_16u::@7 to print_str [phi:test_16u::@7->print_str]
  print_str_from___b7:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_16u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b8
    // test_16u::@8
  __b8:
    // [239] (word) print_uint::w#4 ← (word) rem16u#0 -- vwuz1=vwuz2 
    lda.z rem16u
    sta.z print_uint.w
    lda.z rem16u+1
    sta.z print_uint.w+1
    // [240] call print_uint 
    // [61] phi from test_16u::@8 to print_uint [phi:test_16u::@8->print_uint]
  print_uint_from___b8:
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:test_16u::@8->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#4 [phi:test_16u::@8->print_uint#1] -- register_copy 
    jsr print_uint
    // [241] phi from test_16u::@8 to test_16u::@9 [phi:test_16u::@8->test_16u::@9]
  __b9_from___b8:
    jmp __b9
    // test_16u::@9
  __b9:
    // [242] call print_ln 
    // [41] phi from test_16u::@9 to print_ln [phi:test_16u::@9->print_ln]
  print_ln_from___b9:
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#0 [phi:test_16u::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b10
    // test_16u::@10
  __b10:
    // [243] (byte) test_16u::i#1 ← ++ (byte) test_16u::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [244] if((byte) test_16u::i#1!=(byte) 6) goto test_16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1_from___b10
    jmp __breturn
    // test_16u::@return
  __breturn:
    // [245] return 
    rts
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
// div16u(word zp($69) dividend, word zp($6b) divisor)
div16u: {
    .label return = $73
    .label dividend = $69
    .label divisor = $6b
    .label return_1 = $6d
    // [246] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 -- vwuz1=vwuz2 
    lda.z dividend
    sta.z divr16u.dividend
    lda.z dividend+1
    sta.z divr16u.dividend+1
    // [247] (word) divr16u::divisor#0 ← (word) div16u::divisor#0 -- vwuz1=vwuz2 
    lda.z divisor
    sta.z divr16u.divisor
    lda.z divisor+1
    sta.z divr16u.divisor+1
    // [248] call divr16u 
    // [111] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    // [111] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#0 [phi:div16u->divr16u#0] -- register_copy 
    // [111] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#1 [phi:div16u->divr16u#1] -- register_copy 
    jsr divr16u
    // [249] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z divr16u.return_1
    lda.z divr16u.return+1
    sta.z divr16u.return_1+1
    jmp __b1
    // div16u::@1
  __b1:
    // [250] (word) div16u::return#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return_1
    sta.z return
    lda.z divr16u.return_1+1
    sta.z return+1
    jmp __breturn
    // div16u::@return
  __breturn:
    // [251] return 
    rts
}
  // test_8u
test_8u: {
    .label dividend = $75
    .label divisor = $76
    .label res = $78
    .label i = $2f
    // [253] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  __b1_from_test_8u:
    // [253] phi (byte*) print_line_cursor#43 = (const byte*) print_screen#0 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [253] phi (byte*) print_char_cursor#144 = (const byte*) print_screen#0 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [253] phi (byte) test_8u::i#10 = (byte) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // test_8u::@1
  __b1:
    // [254] (byte) test_8u::dividend#0 ← *((const byte*) test_8u::dividends + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda dividends,y
    sta.z dividend
    // [255] (byte) test_8u::divisor#0 ← *((const byte*) test_8u::divisors + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda divisors,y
    sta.z divisor
    // [256] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 -- vbuz1=vbuz2 
    lda.z dividend
    sta.z div8u.dividend
    // [257] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 -- vbuz1=vbuz2 
    lda.z divisor
    sta.z div8u.divisor
    // [258] call div8u 
    // [192] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  div8u_from___b1:
    // [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
    // [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
    // [259] (byte) div8u::return#3 ← (byte) div8u::return#0 -- vbuz1=vbuz2 
    lda.z div8u.return
    sta.z div8u.return_2
    jmp __b2
    // test_8u::@2
  __b2:
    // [260] (byte) test_8u::res#0 ← (byte) div8u::return#3 -- vbuz1=vbuz2 
    lda.z div8u.return_2
    sta.z res
    // [261] (byte) print_uchar::b#3 ← (byte) test_8u::dividend#0 -- vbuz1=vbuz2 
    lda.z dividend
    sta.z print_uchar.b
    // [262] call print_uchar 
    // [67] phi from test_8u::@2 to print_uchar [phi:test_8u::@2->print_uchar]
  print_uchar_from___b2:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#144 [phi:test_8u::@2->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#3 [phi:test_8u::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [263] phi from test_8u::@2 to test_8u::@3 [phi:test_8u::@2->test_8u::@3]
  __b3_from___b2:
    jmp __b3
    // test_8u::@3
  __b3:
    // [264] call print_str 
    // [75] phi from test_8u::@3 to print_str [phi:test_8u::@3->print_str]
  print_str_from___b3:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_8u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // test_8u::@4
  __b4:
    // [265] (byte) print_uchar::b#4 ← (byte) test_8u::divisor#0 -- vbuz1=vbuz2 
    lda.z divisor
    sta.z print_uchar.b
    // [266] call print_uchar 
    // [67] phi from test_8u::@4 to print_uchar [phi:test_8u::@4->print_uchar]
  print_uchar_from___b4:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:test_8u::@4->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#4 [phi:test_8u::@4->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [267] phi from test_8u::@4 to test_8u::@5 [phi:test_8u::@4->test_8u::@5]
  __b5_from___b4:
    jmp __b5
    // test_8u::@5
  __b5:
    // [268] call print_str 
    // [75] phi from test_8u::@5 to print_str [phi:test_8u::@5->print_str]
  print_str_from___b5:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_8u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b6
    // test_8u::@6
  __b6:
    // [269] (byte) print_uchar::b#5 ← (byte) test_8u::res#0 -- vbuz1=vbuz2 
    lda.z res
    sta.z print_uchar.b
    // [270] call print_uchar 
    // [67] phi from test_8u::@6 to print_uchar [phi:test_8u::@6->print_uchar]
  print_uchar_from___b6:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:test_8u::@6->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#5 [phi:test_8u::@6->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [271] phi from test_8u::@6 to test_8u::@7 [phi:test_8u::@6->test_8u::@7]
  __b7_from___b6:
    jmp __b7
    // test_8u::@7
  __b7:
    // [272] call print_str 
    // [75] phi from test_8u::@7 to print_str [phi:test_8u::@7->print_str]
  print_str_from___b7:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_8u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b8
    // test_8u::@8
  __b8:
    // [273] (byte) print_uchar::b#6 ← (byte) rem8u#18 -- vbuz1=vbuz2 
    lda.z rem8u
    sta.z print_uchar.b
    // [274] call print_uchar 
    // [67] phi from test_8u::@8 to print_uchar [phi:test_8u::@8->print_uchar]
  print_uchar_from___b8:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:test_8u::@8->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#6 [phi:test_8u::@8->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [275] phi from test_8u::@8 to test_8u::@9 [phi:test_8u::@8->test_8u::@9]
  __b9_from___b8:
    jmp __b9
    // test_8u::@9
  __b9:
    // [276] call print_ln 
    // [41] phi from test_8u::@9 to print_ln [phi:test_8u::@9->print_ln]
  print_ln_from___b9:
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#43 [phi:test_8u::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b10
    // test_8u::@10
  __b10:
    // [277] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [278] if((byte) test_8u::i#1!=(byte) 6) goto test_8u::@11 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b11
    jmp __breturn
    // test_8u::@return
  __breturn:
    // [279] return 
    rts
    // test_8u::@11
  __b11:
    // [280] (byte*) print_char_cursor#187 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [253] phi from test_8u::@11 to test_8u::@1 [phi:test_8u::@11->test_8u::@1]
  __b1_from___b11:
    // [253] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#0 [phi:test_8u::@11->test_8u::@1#0] -- register_copy 
    // [253] phi (byte*) print_char_cursor#144 = (byte*) print_char_cursor#187 [phi:test_8u::@11->test_8u::@1#1] -- register_copy 
    // [253] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@11->test_8u::@1#2] -- register_copy 
    jmp __b1
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [282] call memset 
    // [284] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [283] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $30
    // [285] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [285] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [286] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [287] return 
    rts
    // memset::@2
  __b2:
    // [288] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [289] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [285] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [285] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  str: .text " / "
  .byte 0
  str1: .text " = "
  .byte 0
  str2: .text " "
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [13] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 [ test_16s::i#10 test_16s::$11 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::$11 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ test_16s::i#10 test_16s::i#1 ]
Statement [14] (signed word) test_16s::dividend#0 ← *((const signed word*) test_16s::dividends + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:50 [ test_16s::$11 ]
Statement [15] (signed word) test_16s::divisor#0 ← *((const signed word*) test_16s::divisors + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [16] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [17] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [19] (signed word) div16s::return#2 ← (signed word) div16s::return#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#0 rem16s#12 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [20] (signed word) test_16s::res#0 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  ) always clobbers reg byte a 
Statement [21] (signed word) print_sint::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_line_cursor#0 rem16s#12 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  ) always clobbers reg byte a 
Statement [22] (byte*) print_char_cursor#160 ← (byte*) print_line_cursor#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_char_cursor#160 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_char_cursor#160 print_line_cursor#0 rem16s#12 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  ) always clobbers reg byte a 
Statement [26] (signed word) print_sint::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 print_sint::w#2 rem16s#12 print_char_cursor#18 ] ( test_16s:9 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 print_sint::w#2 rem16s#12 print_char_cursor#18 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [30] (signed word) print_sint::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#0 print_sint::w#3 rem16s#12 print_char_cursor#18 ] ( test_16s:9 [ test_16s::i#10 print_line_cursor#0 print_sint::w#3 rem16s#12 print_char_cursor#18 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [34] (signed word) print_sint::w#4 ← (signed word) rem16s#12 [ test_16s::i#10 print_line_cursor#0 print_sint::w#4 print_char_cursor#18 ] ( test_16s:9 [ test_16s::i#10 print_line_cursor#0 print_sint::w#4 print_char_cursor#18 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [43] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#21 + (byte) $28 [ print_line_cursor#0 print_char_cursor#18 ] ( test_16s:9::print_ln:37 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8s:7::print_ln:154 [ test_8s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_16u:5::print_ln:242 [ test_16u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8u:3::print_ln:276 [ test_8u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#41 = print_line_cursor#43 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:33 [ test_8s::i#10 test_8s::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ test_16u::i#10 test_16u::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:47 [ test_8u::i#10 test_8u::i#1 ]
Statement [44] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#18) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#18 ] ( test_16s:9::print_ln:37 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8s:7::print_ln:154 [ test_8s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_16u:5::print_ln:242 [ test_16u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8u:3::print_ln:276 [ test_8u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#41 = print_line_cursor#43 } }  ) always clobbers reg byte a 
Statement [47] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1 [ print_sint::w#10 print_char_cursor#135 ] ( test_16s:9::print_sint:23 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  test_16s:9::print_sint:27 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:31 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:35 [ test_16s::i#10 print_line_cursor#0 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [51] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7 [ print_char_cursor#18 print_uint::w#0 ] ( test_16s:9::print_sint:23 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 } }  test_16s:9::print_sint:27 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 } { print_uint::w#0 = print_uint::w#5 } }  test_16s:9::print_sint:31 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 } { print_uint::w#0 = print_uint::w#5 } }  test_16s:9::print_sint:35 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 } { print_uint::w#0 = print_uint::w#5 } }  ) always clobbers reg byte a 
Statement [56] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#10 [ print_char_cursor#18 print_sint::w#0 ] ( test_16s:9::print_sint:23 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  test_16s:9::print_sint:27 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:31 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:35 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [58] *((byte*) print_char_cursor#85) ← (byte) print_char::ch#7 [ print_char_cursor#85 ] ( test_16s:9::print_sint:23::print_char:49 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 print_char_cursor#85 } }  test_16s:9::print_sint:27::print_char:49 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:31::print_char:49 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:35::print_char:49 [ test_16s::i#10 print_line_cursor#0 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:23::print_char:55 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 print_char_cursor#85 } }  test_16s:9::print_sint:27::print_char:55 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:31::print_char:55 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:35::print_char:55 [ test_16s::i#10 print_line_cursor#0 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:63::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63::print_char:70 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 print_line_cursor#0 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65::print_char:70 [ print_line_cursor#0 test_16u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:262::print_char:70 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:266::print_char:70 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:270::print_char:70 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:274::print_char:70 [ print_line_cursor#43 test_8u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_uint:232::print_uchar:63::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63::print_char:73 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65::print_char:73 [ print_line_cursor#0 test_16u::i#10 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:262::print_char:73 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#85 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_uchar:266::print_char:73 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#85 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:270::print_char:73 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#85 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:274::print_char:73 [ print_line_cursor#43 test_8u::i#10 print_char_cursor#85 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_str:25::print_char:80 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:29::print_char:80 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:33::print_char:80 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:142::print_char:80 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:146::print_char:80 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:150::print_char:80 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:230::print_char:80 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:234::print_char:80 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:238::print_char:80 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:264::print_char:80 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:268::print_char:80 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:272::print_char:80 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_schar:140::print_char:161 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 print_char_cursor#85 } }  test_8s:7::print_schar:144::print_char:161 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:148::print_char:161 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:152::print_char:161 [ print_line_cursor#0 test_8s::i#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:140::print_char:167 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 print_char_cursor#85 } }  test_8s:7::print_schar:144::print_char:167 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:148::print_char:167 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:152::print_char:167 [ print_line_cursor#0 test_8s::i#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ test_16s::i#10 test_16s::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ]
Removing always clobbered register reg byte y as potential for zp[1]:46 [ test_16u::i#10 test_16u::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:33 [ test_8s::i#10 test_8s::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:86 [ test_8s::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:90 [ test_8s::res#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:39 [ rem8s#10 rem8s#33 rem8s#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:99 [ rem8u#18 ]
Removing always clobbered register reg byte y as potential for zp[1]:47 [ test_8u::i#10 test_8u::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:118 [ test_8u::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:120 [ test_8u::res#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:34 [ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ]
Statement [68] (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (byte) 4 [ print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] ( test_16s:9::print_sint:23::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65 [ print_line_cursor#0 test_16u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:262 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:266 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:270 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:274 [ print_line_cursor#43 test_8u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ]
Removing always clobbered register reg byte a as potential for zp[1]:86 [ test_8s::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:90 [ test_8s::res#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:39 [ rem8s#10 rem8s#33 rem8s#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:99 [ rem8u#18 ]
Removing always clobbered register reg byte a as potential for zp[1]:118 [ test_8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:120 [ test_8u::res#0 ]
Statement [71] (byte~) print_uchar::$2 ← (byte) print_uchar::b#7 & (byte) $f [ print_char_cursor#18 print_uchar::$2 ] ( test_16s:9::print_sint:23::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_uint:232::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65 [ print_line_cursor#0 test_16u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:262 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_uchar:266 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:270 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:274 [ print_line_cursor#43 test_8u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [77] if((byte) 0!=*((byte*) print_str::str#13)) goto print_str::@2 [ print_char_cursor#18 print_str::str#13 ] ( test_16s:9::print_str:25 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_str::str#13 ] { }  test_16s:9::print_str:29 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_str::str#13 ] { }  test_16s:9::print_str:33 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_str::str#13 ] { }  test_8s:7::print_str:142 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_str::str#13 ] { }  test_8s:7::print_str:146 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_str::str#13 ] { }  test_8s:7::print_str:150 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_str::str#13 ] { }  test_16u:5::print_str:230 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_16u:5::print_str:234 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_16u:5::print_str:238 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#18 print_str::str#13 ] { }  test_8u:3::print_str:264 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_8u:3::print_str:268 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_8u:3::print_str:272 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#18 print_str::str#13 ] { }  ) always clobbers reg byte a reg byte y 
Statement [79] (byte) print_char::ch#0 ← *((byte*) print_str::str#13) [ print_char_cursor#18 print_char::ch#0 print_str::str#13 ] ( test_16s:9::print_str:25 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:29 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:33 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:142 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:146 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:150 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:230 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:234 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:238 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:264 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:268 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:272 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  ) always clobbers reg byte a reg byte y 
Statement [82] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 [ div16s::divisor#0 divr16s::dividend#0 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 div16s::divisor#0 divr16s::dividend#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [83] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 [ divr16s::dividend#0 divr16s::divisor#0 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividend#0 divr16s::divisor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [85] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2 [ rem16s#12 divr16s::return#3 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 rem16s#12 divr16s::return#3 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [86] (signed word) div16s::return#0 ← (signed word) divr16s::return#3 [ div16s::return#0 rem16s#12 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 div16s::return#0 rem16s#12 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [88] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 [ divr16s::dividend#0 divr16s::divisor#0 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividend#0 divr16s::divisor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [89] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#8 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::dividendu#8 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [91] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 [ divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
Statement [92] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [94] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3 [ divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [95] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3 [ divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [97] (word) divr16u::return#3 ← (word) divr16u::return#0 [ divr16s::neg#4 divr16u::return#3 rem16u#0 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::return#3 rem16u#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [98] (word) divr16s::resultu#0 ← (word) divr16u::return#3 [ divr16s::neg#4 divr16s::resultu#0 rem16u#0 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16s::resultu#0 rem16u#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [100] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 [ divr16s::resultu#0 rem16s#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::resultu#0 rem16s#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [101] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 [ rem16s#1 divr16s::return#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 rem16s#1 divr16s::return#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [104] (signed word) divr16s::return#6 ← (signed word)(word) divr16s::resultu#0 [ rem16u#0 divr16s::return#6 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 rem16u#0 divr16s::return#6 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [105] (signed word) rem16s#38 ← (signed word)(word) rem16u#0 [ divr16s::return#6 rem16s#38 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::return#6 rem16s#38 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 [ divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 [ divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::dividendu#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 [ divr16s::divisor#0 divr16s::dividendu#7 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::dividendu#7 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:32 [ divr16u::i#2 divr16u::i#1 ]
Statement [121] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [123] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [127] (word) rem16u#0 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#0 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::return#0 rem16u#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::return#0 rem16u#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [139] (byte*) print_char_cursor#164 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_schar::b#1 print_char_cursor#164 rem8s#10 ] ( test_8s:7 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_schar::b#1 print_char_cursor#164 rem8s#10 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:34 [ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ]
Statement [168] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#10 [ print_char_cursor#18 print_schar::b#0 ] ( test_8s:7::print_schar:140 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } }  test_8s:7::print_schar:144 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 } }  test_8s:7::print_schar:148 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 } }  test_8s:7::print_schar:152 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [181] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#18 [ div8s::resultu#0 rem8s#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:85 [ test_8s::dividend#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:92 [ div8s::resultu#0 ]
Statement [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#1 div8s::return#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#1 div8s::return#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [187] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:35 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
Statement [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:93 [ div8s::divisoru#1 ]
Statement [190] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:88 [ div8s::divisor#0 ]
Statement [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( test_8s:7::div8s:135::div8u:177::divr8u:195 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } { div8u::dividend#0 = div8u::dividend#2 div8s::dividendu#3 divr8u::dividend#0 } { div8u::divisor#0 = div8u::divisor#2 div8s::divisoru#3 divr8u::divisor#0 } { div8u::return#0 = div8u::return#2 } { divr8u::return#0 = divr8u::return#1 } }  test_8u:3::div8u:258::divr8u:195 [ print_line_cursor#43 print_char_cursor#144 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] { { div8u::dividend#1 = div8u::dividend#2 test_8u::dividend#0 divr8u::dividend#0 } { div8u::divisor#1 = div8u::divisor#2 test_8u::divisor#0 divr8u::divisor#0 } { div8u::return#0 = div8u::return#3 } { divr8u::return#0 = divr8u::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:95 [ divr8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:45 [ divr8u::i#2 divr8u::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:117 [ test_8u::dividend#0 ]
Statement [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( test_8s:7::div8s:135::div8u:177::divr8u:195 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } { div8u::dividend#0 = div8u::dividend#2 div8s::dividendu#3 divr8u::dividend#0 } { div8u::divisor#0 = div8u::divisor#2 div8s::divisoru#3 divr8u::divisor#0 } { div8u::return#0 = div8u::return#2 } { divr8u::return#0 = divr8u::return#1 } }  test_8u:3::div8u:258::divr8u:195 [ print_line_cursor#43 print_char_cursor#144 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] { { div8u::dividend#1 = div8u::dividend#2 test_8u::dividend#0 divr8u::dividend#0 } { div8u::divisor#1 = div8u::divisor#2 test_8u::divisor#0 divr8u::divisor#0 } { div8u::return#0 = div8u::return#3 } { divr8u::return#0 = divr8u::return#1 } }  ) always clobbers reg byte a 
Statement [218] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 [ print_line_cursor#0 test_16u::i#10 test_16u::$11 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::$11 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [219] (word) test_16u::dividend#0 ← *((const word*) test_16u::dividends + (byte~) test_16u::$11) [ print_line_cursor#0 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:100 [ test_16u::$11 ]
Statement [220] (word) test_16u::divisor#0 ← *((const word*) test_16u::divisors + (byte~) test_16u::$11) [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [221] (word) div16u::dividend#0 ← (word) test_16u::dividend#0 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [222] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [224] (word) div16u::return#2 ← (word) div16u::return#0 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] ( test_16u:5 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [225] (word) test_16u::res#0 ← (word) div16u::return#2 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } }  ) always clobbers reg byte a 
Statement [226] (word) print_uint::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#0 print_uint::w#1 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 print_uint::w#1 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } }  ) always clobbers reg byte a 
Statement [227] (byte*) print_char_cursor#169 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 print_uint::w#1 print_char_cursor#169 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 print_uint::w#1 print_char_cursor#169 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } }  ) always clobbers reg byte a 
Statement [231] (word) print_uint::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#2 rem16u#0 test_16u::i#10 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#2 rem16u#0 test_16u::i#10 test_16u::res#0 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [235] (word) print_uint::w#3 ← (word) test_16u::res#0 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#3 rem16u#0 test_16u::i#10 ] ( test_16u:5 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#3 rem16u#0 test_16u::i#10 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [239] (word) print_uint::w#4 ← (word) rem16u#0 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#4 test_16u::i#10 ] ( test_16u:5 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#4 test_16u::i#10 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [246] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 [ divr16u::dividend#1 div16u::divisor#0 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 div16u::divisor#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [247] (word) divr16u::divisor#0 ← (word) div16u::divisor#0 [ divr16u::dividend#1 divr16u::divisor#0 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [249] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#0 divr16u::return#2 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#0 divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [250] (word) div16u::return#0 ← (word) divr16u::return#2 [ rem16u#0 div16u::return#0 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#0 div16u::return#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [280] (byte*) print_char_cursor#187 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 test_8u::i#1 print_char_cursor#187 ] ( test_8u:3 [ print_line_cursor#0 test_8u::i#1 print_char_cursor#187 ] { }  ) always clobbers reg byte a 
Statement [286] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:282 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [288] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:282 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [13] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 [ test_16s::i#10 test_16s::$11 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::$11 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [14] (signed word) test_16s::dividend#0 ← *((const signed word*) test_16s::dividends + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [15] (signed word) test_16s::divisor#0 ← *((const signed word*) test_16s::divisors + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [16] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [17] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [19] (signed word) div16s::return#2 ← (signed word) div16s::return#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#0 rem16s#12 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [20] (signed word) test_16s::res#0 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  ) always clobbers reg byte a 
Statement [21] (signed word) print_sint::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_line_cursor#0 rem16s#12 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  ) always clobbers reg byte a 
Statement [22] (byte*) print_char_cursor#160 ← (byte*) print_line_cursor#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_char_cursor#160 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_char_cursor#160 print_line_cursor#0 rem16s#12 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  ) always clobbers reg byte a 
Statement [26] (signed word) print_sint::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 print_sint::w#2 rem16s#12 print_char_cursor#18 ] ( test_16s:9 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 print_sint::w#2 rem16s#12 print_char_cursor#18 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [30] (signed word) print_sint::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#0 print_sint::w#3 rem16s#12 print_char_cursor#18 ] ( test_16s:9 [ test_16s::i#10 print_line_cursor#0 print_sint::w#3 rem16s#12 print_char_cursor#18 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [34] (signed word) print_sint::w#4 ← (signed word) rem16s#12 [ test_16s::i#10 print_line_cursor#0 print_sint::w#4 print_char_cursor#18 ] ( test_16s:9 [ test_16s::i#10 print_line_cursor#0 print_sint::w#4 print_char_cursor#18 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [43] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#21 + (byte) $28 [ print_line_cursor#0 print_char_cursor#18 ] ( test_16s:9::print_ln:37 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8s:7::print_ln:154 [ test_8s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_16u:5::print_ln:242 [ test_16u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8u:3::print_ln:276 [ test_8u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#41 = print_line_cursor#43 } }  ) always clobbers reg byte a 
Statement [44] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#18) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#18 ] ( test_16s:9::print_ln:37 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8s:7::print_ln:154 [ test_8s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_16u:5::print_ln:242 [ test_16u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8u:3::print_ln:276 [ test_8u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#41 = print_line_cursor#43 } }  ) always clobbers reg byte a 
Statement [47] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1 [ print_sint::w#10 print_char_cursor#135 ] ( test_16s:9::print_sint:23 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  test_16s:9::print_sint:27 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:31 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:35 [ test_16s::i#10 print_line_cursor#0 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [51] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7 [ print_char_cursor#18 print_uint::w#0 ] ( test_16s:9::print_sint:23 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 } }  test_16s:9::print_sint:27 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 } { print_uint::w#0 = print_uint::w#5 } }  test_16s:9::print_sint:31 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 } { print_uint::w#0 = print_uint::w#5 } }  test_16s:9::print_sint:35 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 } { print_uint::w#0 = print_uint::w#5 } }  ) always clobbers reg byte a 
Statement [56] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#10 [ print_char_cursor#18 print_sint::w#0 ] ( test_16s:9::print_sint:23 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  test_16s:9::print_sint:27 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:31 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:35 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [58] *((byte*) print_char_cursor#85) ← (byte) print_char::ch#7 [ print_char_cursor#85 ] ( test_16s:9::print_sint:23::print_char:49 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 print_char_cursor#85 } }  test_16s:9::print_sint:27::print_char:49 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:31::print_char:49 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:35::print_char:49 [ test_16s::i#10 print_line_cursor#0 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:23::print_char:55 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 print_char_cursor#85 } }  test_16s:9::print_sint:27::print_char:55 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:31::print_char:55 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:35::print_char:55 [ test_16s::i#10 print_line_cursor#0 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:63::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63::print_char:70 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 print_line_cursor#0 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65::print_char:70 [ print_line_cursor#0 test_16u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:262::print_char:70 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:266::print_char:70 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:270::print_char:70 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:274::print_char:70 [ print_line_cursor#43 test_8u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_uint:232::print_uchar:63::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63::print_char:73 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65::print_char:73 [ print_line_cursor#0 test_16u::i#10 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:262::print_char:73 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#85 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_uchar:266::print_char:73 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#85 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:270::print_char:73 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#85 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:274::print_char:73 [ print_line_cursor#43 test_8u::i#10 print_char_cursor#85 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_str:25::print_char:80 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:29::print_char:80 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:33::print_char:80 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:142::print_char:80 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:146::print_char:80 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:150::print_char:80 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:230::print_char:80 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:234::print_char:80 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:238::print_char:80 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:264::print_char:80 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:268::print_char:80 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:272::print_char:80 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_schar:140::print_char:161 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 print_char_cursor#85 } }  test_8s:7::print_schar:144::print_char:161 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:148::print_char:161 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:152::print_char:161 [ print_line_cursor#0 test_8s::i#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:140::print_char:167 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 print_char_cursor#85 } }  test_8s:7::print_schar:144::print_char:167 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:148::print_char:167 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:152::print_char:167 [ print_line_cursor#0 test_8s::i#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  ) always clobbers reg byte y 
Statement [68] (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (byte) 4 [ print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] ( test_16s:9::print_sint:23::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65 [ print_line_cursor#0 test_16u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:262 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:266 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:270 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:274 [ print_line_cursor#43 test_8u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [71] (byte~) print_uchar::$2 ← (byte) print_uchar::b#7 & (byte) $f [ print_char_cursor#18 print_uchar::$2 ] ( test_16s:9::print_sint:23::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_uint:232::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65 [ print_line_cursor#0 test_16u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:262 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_uchar:266 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:270 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:274 [ print_line_cursor#43 test_8u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [77] if((byte) 0!=*((byte*) print_str::str#13)) goto print_str::@2 [ print_char_cursor#18 print_str::str#13 ] ( test_16s:9::print_str:25 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_str::str#13 ] { }  test_16s:9::print_str:29 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_str::str#13 ] { }  test_16s:9::print_str:33 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_str::str#13 ] { }  test_8s:7::print_str:142 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_str::str#13 ] { }  test_8s:7::print_str:146 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_str::str#13 ] { }  test_8s:7::print_str:150 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_str::str#13 ] { }  test_16u:5::print_str:230 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_16u:5::print_str:234 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_16u:5::print_str:238 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#18 print_str::str#13 ] { }  test_8u:3::print_str:264 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_8u:3::print_str:268 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_8u:3::print_str:272 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#18 print_str::str#13 ] { }  ) always clobbers reg byte a reg byte y 
Statement [79] (byte) print_char::ch#0 ← *((byte*) print_str::str#13) [ print_char_cursor#18 print_char::ch#0 print_str::str#13 ] ( test_16s:9::print_str:25 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:29 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:33 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:142 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:146 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:150 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:230 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:234 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:238 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:264 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:268 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:272 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  ) always clobbers reg byte a reg byte y 
Statement [82] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 [ div16s::divisor#0 divr16s::dividend#0 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 div16s::divisor#0 divr16s::dividend#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [83] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 [ divr16s::dividend#0 divr16s::divisor#0 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividend#0 divr16s::divisor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [85] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2 [ rem16s#12 divr16s::return#3 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 rem16s#12 divr16s::return#3 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [86] (signed word) div16s::return#0 ← (signed word) divr16s::return#3 [ div16s::return#0 rem16s#12 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 div16s::return#0 rem16s#12 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [88] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 [ divr16s::dividend#0 divr16s::divisor#0 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividend#0 divr16s::divisor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [89] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#8 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::dividendu#8 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [91] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 [ divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [92] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [94] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3 [ divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [95] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3 [ divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [97] (word) divr16u::return#3 ← (word) divr16u::return#0 [ divr16s::neg#4 divr16u::return#3 rem16u#0 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::return#3 rem16u#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [98] (word) divr16s::resultu#0 ← (word) divr16u::return#3 [ divr16s::neg#4 divr16s::resultu#0 rem16u#0 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16s::resultu#0 rem16u#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [100] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 [ divr16s::resultu#0 rem16s#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::resultu#0 rem16s#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [101] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 [ rem16s#1 divr16s::return#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 rem16s#1 divr16s::return#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [104] (signed word) divr16s::return#6 ← (signed word)(word) divr16s::resultu#0 [ rem16u#0 divr16s::return#6 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 rem16u#0 divr16s::return#6 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [105] (signed word) rem16s#38 ← (signed word)(word) rem16u#0 [ divr16s::return#6 rem16s#38 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::return#6 rem16s#38 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 [ divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 [ divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::dividendu#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 [ divr16s::divisor#0 divr16s::dividendu#7 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::dividendu#7 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [121] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [123] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [127] (word) rem16u#0 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#0 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::return#0 rem16u#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::return#0 rem16u#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [139] (byte*) print_char_cursor#164 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_schar::b#1 print_char_cursor#164 rem8s#10 ] ( test_8s:7 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_schar::b#1 print_char_cursor#164 rem8s#10 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } }  ) always clobbers reg byte a 
Statement [168] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#10 [ print_char_cursor#18 print_schar::b#0 ] ( test_8s:7::print_schar:140 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } }  test_8s:7::print_schar:144 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 } }  test_8s:7::print_schar:148 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 } }  test_8s:7::print_schar:152 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [181] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#18 [ div8s::resultu#0 rem8s#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#1 div8s::return#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#1 div8s::return#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [187] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [190] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( test_8s:7::div8s:135::div8u:177::divr8u:195 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } { div8u::dividend#0 = div8u::dividend#2 div8s::dividendu#3 divr8u::dividend#0 } { div8u::divisor#0 = div8u::divisor#2 div8s::divisoru#3 divr8u::divisor#0 } { div8u::return#0 = div8u::return#2 } { divr8u::return#0 = divr8u::return#1 } }  test_8u:3::div8u:258::divr8u:195 [ print_line_cursor#43 print_char_cursor#144 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] { { div8u::dividend#1 = div8u::dividend#2 test_8u::dividend#0 divr8u::dividend#0 } { div8u::divisor#1 = div8u::divisor#2 test_8u::divisor#0 divr8u::divisor#0 } { div8u::return#0 = div8u::return#3 } { divr8u::return#0 = divr8u::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:42 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Statement [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( test_8s:7::div8s:135::div8u:177::divr8u:195 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } { div8u::dividend#0 = div8u::dividend#2 div8s::dividendu#3 divr8u::dividend#0 } { div8u::divisor#0 = div8u::divisor#2 div8s::divisoru#3 divr8u::divisor#0 } { div8u::return#0 = div8u::return#2 } { divr8u::return#0 = divr8u::return#1 } }  test_8u:3::div8u:258::divr8u:195 [ print_line_cursor#43 print_char_cursor#144 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] { { div8u::dividend#1 = div8u::dividend#2 test_8u::dividend#0 divr8u::dividend#0 } { div8u::divisor#1 = div8u::divisor#2 test_8u::divisor#0 divr8u::divisor#0 } { div8u::return#0 = div8u::return#3 } { divr8u::return#0 = divr8u::return#1 } }  ) always clobbers reg byte a 
Statement [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( test_8s:7::div8s:135::div8u:177::divr8u:195 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } { div8u::dividend#0 = div8u::dividend#2 div8s::dividendu#3 divr8u::dividend#0 } { div8u::divisor#0 = div8u::divisor#2 div8s::divisoru#3 divr8u::divisor#0 } { div8u::return#0 = div8u::return#2 } { divr8u::return#0 = divr8u::return#1 } }  test_8u:3::div8u:258::divr8u:195 [ print_line_cursor#43 print_char_cursor#144 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] { { div8u::dividend#1 = div8u::dividend#2 test_8u::dividend#0 divr8u::dividend#0 } { div8u::divisor#1 = div8u::divisor#2 test_8u::divisor#0 divr8u::divisor#0 } { div8u::return#0 = div8u::return#3 } { divr8u::return#0 = divr8u::return#1 } }  ) always clobbers reg byte a 
Statement [218] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 [ print_line_cursor#0 test_16u::i#10 test_16u::$11 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::$11 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [219] (word) test_16u::dividend#0 ← *((const word*) test_16u::dividends + (byte~) test_16u::$11) [ print_line_cursor#0 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [220] (word) test_16u::divisor#0 ← *((const word*) test_16u::divisors + (byte~) test_16u::$11) [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [221] (word) div16u::dividend#0 ← (word) test_16u::dividend#0 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [222] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [224] (word) div16u::return#2 ← (word) div16u::return#0 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] ( test_16u:5 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [225] (word) test_16u::res#0 ← (word) div16u::return#2 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } }  ) always clobbers reg byte a 
Statement [226] (word) print_uint::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#0 print_uint::w#1 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 print_uint::w#1 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } }  ) always clobbers reg byte a 
Statement [227] (byte*) print_char_cursor#169 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 print_uint::w#1 print_char_cursor#169 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 print_uint::w#1 print_char_cursor#169 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } }  ) always clobbers reg byte a 
Statement [231] (word) print_uint::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#2 rem16u#0 test_16u::i#10 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#2 rem16u#0 test_16u::i#10 test_16u::res#0 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [235] (word) print_uint::w#3 ← (word) test_16u::res#0 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#3 rem16u#0 test_16u::i#10 ] ( test_16u:5 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#3 rem16u#0 test_16u::i#10 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [239] (word) print_uint::w#4 ← (word) rem16u#0 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#4 test_16u::i#10 ] ( test_16u:5 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#4 test_16u::i#10 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [246] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 [ divr16u::dividend#1 div16u::divisor#0 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 div16u::divisor#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [247] (word) divr16u::divisor#0 ← (word) div16u::divisor#0 [ divr16u::dividend#1 divr16u::divisor#0 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [249] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#0 divr16u::return#2 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#0 divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [250] (word) div16u::return#0 ← (word) divr16u::return#2 [ rem16u#0 div16u::return#0 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#0 div16u::return#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [280] (byte*) print_char_cursor#187 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 test_8u::i#1 print_char_cursor#187 ] ( test_8u:3 [ print_line_cursor#0 test_8u::i#1 print_char_cursor#187 ] { }  ) always clobbers reg byte a 
Statement [286] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:282 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [288] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:282 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [13] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 [ test_16s::i#10 test_16s::$11 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::$11 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [14] (signed word) test_16s::dividend#0 ← *((const signed word*) test_16s::dividends + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::$11 test_16s::dividend#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [15] (signed word) test_16s::divisor#0 ← *((const signed word*) test_16s::divisors + (byte~) test_16s::$11) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [16] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [17] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#0 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [19] (signed word) div16s::return#2 ← (signed word) div16s::return#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#0 rem16s#12 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [20] (signed word) test_16s::res#0 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  ) always clobbers reg byte a 
Statement [21] (signed word) print_sint::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_line_cursor#0 rem16s#12 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  ) always clobbers reg byte a 
Statement [22] (byte*) print_char_cursor#160 ← (byte*) print_line_cursor#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_char_cursor#160 print_line_cursor#0 rem16s#12 ] ( test_16s:9 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sint::w#1 print_char_cursor#160 print_line_cursor#0 rem16s#12 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  ) always clobbers reg byte a 
Statement [26] (signed word) print_sint::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 print_sint::w#2 rem16s#12 print_char_cursor#18 ] ( test_16s:9 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 print_sint::w#2 rem16s#12 print_char_cursor#18 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [30] (signed word) print_sint::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#0 print_sint::w#3 rem16s#12 print_char_cursor#18 ] ( test_16s:9 [ test_16s::i#10 print_line_cursor#0 print_sint::w#3 rem16s#12 print_char_cursor#18 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [34] (signed word) print_sint::w#4 ← (signed word) rem16s#12 [ test_16s::i#10 print_line_cursor#0 print_sint::w#4 print_char_cursor#18 ] ( test_16s:9 [ test_16s::i#10 print_line_cursor#0 print_sint::w#4 print_char_cursor#18 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [43] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#21 + (byte) $28 [ print_line_cursor#0 print_char_cursor#18 ] ( test_16s:9::print_ln:37 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8s:7::print_ln:154 [ test_8s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_16u:5::print_ln:242 [ test_16u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8u:3::print_ln:276 [ test_8u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#41 = print_line_cursor#43 } }  ) always clobbers reg byte a 
Statement [44] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#18) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#18 ] ( test_16s:9::print_ln:37 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8s:7::print_ln:154 [ test_8s::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_16u:5::print_ln:242 [ test_16u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#0 = print_line_cursor#41 } }  test_8u:3::print_ln:276 [ test_8u::i#10 print_line_cursor#0 print_char_cursor#18 ] { { print_line_cursor#41 = print_line_cursor#43 } }  ) always clobbers reg byte a 
Statement [47] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1 [ print_sint::w#10 print_char_cursor#135 ] ( test_16s:9::print_sint:23 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  test_16s:9::print_sint:27 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:31 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:35 [ test_16s::i#10 print_line_cursor#0 print_sint::w#10 print_char_cursor#135 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [51] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7 [ print_char_cursor#18 print_uint::w#0 ] ( test_16s:9::print_sint:23 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 } }  test_16s:9::print_sint:27 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 } { print_uint::w#0 = print_uint::w#5 } }  test_16s:9::print_sint:31 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 } { print_uint::w#0 = print_uint::w#5 } }  test_16s:9::print_sint:35 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 print_uint::w#0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 } { print_uint::w#0 = print_uint::w#5 } }  ) always clobbers reg byte a 
Statement [56] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#10 [ print_char_cursor#18 print_sint::w#0 ] ( test_16s:9::print_sint:23 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } }  test_16s:9::print_sint:27 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:31 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 } }  test_16s:9::print_sint:35 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 print_sint::w#0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [58] *((byte*) print_char_cursor#85) ← (byte) print_char::ch#7 [ print_char_cursor#85 ] ( test_16s:9::print_sint:23::print_char:49 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 print_char_cursor#85 } }  test_16s:9::print_sint:27::print_char:49 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:31::print_char:49 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:35::print_char:49 [ test_16s::i#10 print_line_cursor#0 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:23::print_char:55 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 print_char_cursor#85 } }  test_16s:9::print_sint:27::print_char:55 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:31::print_char:55 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:35::print_char:55 [ test_16s::i#10 print_line_cursor#0 print_sint::w#10 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#85 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63::print_char:70 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:63::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63::print_char:70 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65::print_char:70 [ test_16s::i#10 print_line_cursor#0 print_uchar::b#7 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65::print_char:70 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65::print_char:70 [ print_line_cursor#0 test_16u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164::print_char:70 [ print_line_cursor#0 test_8s::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:262::print_char:70 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:266::print_char:70 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:270::print_char:70 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:274::print_char:70 [ print_line_cursor#43 test_8u::i#10 print_uchar::b#7 print_char_cursor#85 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63::print_char:73 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_uint:232::print_uchar:63::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63::print_char:73 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#85 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65::print_char:73 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#85 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#85 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#85 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65::print_char:73 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#85 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65::print_char:73 [ print_line_cursor#0 test_16u::i#10 print_char_cursor#85 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164::print_char:73 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:262::print_char:73 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#85 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_uchar:266::print_char:73 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#85 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:270::print_char:73 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#85 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:274::print_char:73 [ print_line_cursor#43 test_8u::i#10 print_char_cursor#85 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_str:25::print_char:80 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:29::print_char:80 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:33::print_char:80 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:142::print_char:80 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:146::print_char:80 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:150::print_char:80 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:230::print_char:80 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:234::print_char:80 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:238::print_char:80 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:264::print_char:80 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:268::print_char:80 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:272::print_char:80 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_str::str#13 print_char_cursor#85 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_schar:140::print_char:161 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 print_char_cursor#85 } }  test_8s:7::print_schar:144::print_char:161 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:148::print_char:161 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:152::print_char:161 [ print_line_cursor#0 test_8s::i#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:140::print_char:167 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 print_char_cursor#85 } }  test_8s:7::print_schar:144::print_char:167 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:148::print_char:167 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  test_8s:7::print_schar:152::print_char:167 [ print_line_cursor#0 test_8s::i#10 print_schar::b#10 print_char_cursor#85 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#85 } }  ) always clobbers reg byte y 
Statement [68] (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (byte) 4 [ print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] ( test_16s:9::print_sint:23::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65 [ print_line_cursor#0 test_16u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:262 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:266 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:270 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  test_8u:3::print_uchar:274 [ print_line_cursor#43 test_8u::i#10 print_char_cursor#142 print_uchar::b#7 print_uchar::$0 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#5 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [71] (byte~) print_uchar::$2 ← (byte) print_uchar::b#7 & (byte) $f [ print_char_cursor#18 print_uchar::$2 ] ( test_16s:9::print_sint:23::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:63 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:63 [ test_16s::i#10 print_line_cursor#0 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 print_char_cursor#142 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_uint:232::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:63 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:63 [ print_line_cursor#0 test_16u::i#10 print_uint::w#5 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#1 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:23::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#1 = print_sint::w#10 test_16s::dividend#0 } { print_char_cursor#135 = print_char_cursor#160 } { print_uint::w#0 = print_uint::w#5 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:27::print_uint:52::print_uchar:65 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#2 test_16s::divisor#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:31::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#3 test_16s::res#0 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16s:9::print_sint:35::print_uint:52::print_uchar:65 [ test_16s::i#10 print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { print_sint::w#10 = print_sint::w#4 rem16s#12 } { print_char_cursor#135 = print_char_cursor#18 print_char_cursor#141 print_char_cursor#142 print_char_cursor#85 } { print_uint::w#0 = print_uint::w#5 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:228::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } { print_uchar::b#2 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:232::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:236::print_uchar:65 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_16u:5::print_uint:240::print_uchar:65 [ print_line_cursor#0 test_16u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#2 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:140::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } { print_uchar::b#0 = print_uchar::b#7 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:144::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:148::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8s:7::print_schar:152::print_uchar:164 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 print_char_cursor#142 print_char_cursor#85 } { print_uchar::b#0 = print_uchar::b#7 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:262 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#3 = print_uchar::b#7 test_8u::dividend#0 } { print_char_cursor#142 = print_char_cursor#144 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_uchar:266 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#4 = print_uchar::b#7 test_8u::divisor#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:270 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#5 = print_uchar::b#7 test_8u::res#0 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  test_8u:3::print_uchar:274 [ print_line_cursor#43 test_8u::i#10 print_char_cursor#18 print_uchar::$2 ] { { print_uchar::b#6 = print_uchar::b#7 rem8u#18 } { print_char_cursor#142 = print_char_cursor#18 print_char_cursor#85 } { print_char::ch#6 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [77] if((byte) 0!=*((byte*) print_str::str#13)) goto print_str::@2 [ print_char_cursor#18 print_str::str#13 ] ( test_16s:9::print_str:25 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_str::str#13 ] { }  test_16s:9::print_str:29 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_str::str#13 ] { }  test_16s:9::print_str:33 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_str::str#13 ] { }  test_8s:7::print_str:142 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_str::str#13 ] { }  test_8s:7::print_str:146 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_str::str#13 ] { }  test_8s:7::print_str:150 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_str::str#13 ] { }  test_16u:5::print_str:230 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_16u:5::print_str:234 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_16u:5::print_str:238 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#18 print_str::str#13 ] { }  test_8u:3::print_str:264 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_8u:3::print_str:268 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#18 print_str::str#13 ] { }  test_8u:3::print_str:272 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#18 print_str::str#13 ] { }  ) always clobbers reg byte a reg byte y 
Statement [79] (byte) print_char::ch#0 ← *((byte*) print_str::str#13) [ print_char_cursor#18 print_char::ch#0 print_str::str#13 ] ( test_16s:9::print_str:25 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:29 [ test_16s::i#10 test_16s::res#0 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16s:9::print_str:33 [ test_16s::i#10 print_line_cursor#0 rem16s#12 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:142 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:146 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8s:7::print_str:150 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:230 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:234 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_16u:5::print_str:238 [ print_line_cursor#0 rem16u#0 test_16u::i#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:264 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:268 [ print_line_cursor#43 rem8u#18 test_8u::i#10 test_8u::res#0 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  test_8u:3::print_str:272 [ print_line_cursor#43 rem8u#18 test_8u::i#10 print_char_cursor#18 print_char::ch#0 print_str::str#13 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#85 } }  ) always clobbers reg byte a reg byte y 
Statement [82] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 [ div16s::divisor#0 divr16s::dividend#0 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 div16s::divisor#0 divr16s::dividend#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [83] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 [ divr16s::dividend#0 divr16s::divisor#0 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividend#0 divr16s::divisor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [85] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2 [ rem16s#12 divr16s::return#3 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 rem16s#12 divr16s::return#3 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [86] (signed word) div16s::return#0 ← (signed word) divr16s::return#3 [ div16s::return#0 rem16s#12 ] ( test_16s:9::div16s:18 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 div16s::return#0 rem16s#12 ] { { div16s::dividend#0 = test_16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 } { div16s::return#0 = div16s::return#2 } }  ) always clobbers reg byte a 
Statement [88] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 [ divr16s::dividend#0 divr16s::divisor#0 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividend#0 divr16s::divisor#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [89] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#8 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::dividendu#8 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [91] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 [ divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [92] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [94] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3 [ divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#2 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [95] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3 [ divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::dividend#2 divr16u::divisor#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [97] (word) divr16u::return#3 ← (word) divr16u::return#0 [ divr16s::neg#4 divr16u::return#3 rem16u#0 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::return#3 rem16u#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [98] (word) divr16s::resultu#0 ← (word) divr16u::return#3 [ divr16s::neg#4 divr16s::resultu#0 rem16u#0 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16s::resultu#0 rem16u#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [100] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 [ divr16s::resultu#0 rem16s#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::resultu#0 rem16s#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [101] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 [ rem16s#1 divr16s::return#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 rem16s#1 divr16s::return#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [104] (signed word) divr16s::return#6 ← (signed word)(word) divr16s::resultu#0 [ rem16u#0 divr16s::return#6 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 rem16u#0 divr16s::return#6 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [105] (signed word) rem16s#38 ← (signed word)(word) rem16u#0 [ divr16s::return#6 rem16s#38 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::return#6 rem16s#38 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 [ divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 [ divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#1 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::dividendu#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 [ divr16s::divisor#0 divr16s::dividendu#7 ] ( test_16s:9::div16s:18::divr16s:84 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::divisor#0 divr16s::dividendu#7 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } }  ) always clobbers reg byte a 
Statement [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [121] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [123] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 [ divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#6 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [127] (word) rem16u#0 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#0 ] ( test_16s:9::div16s:18::divr16s:84::divr16u:96 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#0 divr16s::neg#4 divr16u::return#0 rem16u#0 ] { { div16s::dividend#0 = test_16s::dividend#0 divr16s::dividend#0 } { div16s::divisor#0 = test_16s::divisor#0 divr16s::divisor#0 } { div16s::return#0 = div16s::return#2 } { divr16s::return#2 = divr16s::return#3 } { divr16u::dividend#2 = divr16u::dividend#5 divr16s::dividendu#3 } { divr16u::divisor#1 = divr16u::divisor#6 divr16s::divisoru#3 } { divr16u::return#0 = divr16u::return#3 } }  test_16u:5::div16u:223::divr16u:248 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::return#0 rem16u#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [139] (byte*) print_char_cursor#164 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_schar::b#1 print_char_cursor#164 rem8s#10 ] ( test_8s:7 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_schar::b#1 print_char_cursor#164 rem8s#10 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } }  ) always clobbers reg byte a 
Statement [168] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#10 [ print_char_cursor#18 print_schar::b#0 ] ( test_8s:7::print_schar:140 [ print_line_cursor#0 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#1 = print_schar::b#10 test_8s::dividend#0 } { print_char_cursor#138 = print_char_cursor#164 } }  test_8s:7::print_schar:144 [ print_line_cursor#0 test_8s::i#10 test_8s::res#0 rem8s#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#10 = print_schar::b#2 test_8s::divisor#0 } { print_char_cursor#138 = print_char_cursor#18 } }  test_8s:7::print_schar:148 [ print_line_cursor#0 test_8s::i#10 rem8s#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#10 = print_schar::b#3 test_8s::res#0 } { print_char_cursor#138 = print_char_cursor#18 } }  test_8s:7::print_schar:152 [ print_line_cursor#0 test_8s::i#10 print_char_cursor#18 print_schar::b#0 ] { { print_schar::b#10 = print_schar::b#4 rem8s#10 } { print_char_cursor#138 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [181] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#18 [ div8s::resultu#0 rem8s#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#1 div8s::return#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#1 div8s::return#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [187] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::divisoru#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [190] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#1 ] ( test_8s:7::div8s:135 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } }  ) always clobbers reg byte a 
Statement [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( test_8s:7::div8s:135::div8u:177::divr8u:195 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } { div8u::dividend#0 = div8u::dividend#2 div8s::dividendu#3 divr8u::dividend#0 } { div8u::divisor#0 = div8u::divisor#2 div8s::divisoru#3 divr8u::divisor#0 } { div8u::return#0 = div8u::return#2 } { divr8u::return#0 = divr8u::return#1 } }  test_8u:3::div8u:258::divr8u:195 [ print_line_cursor#43 print_char_cursor#144 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] { { div8u::dividend#1 = div8u::dividend#2 test_8u::dividend#0 divr8u::dividend#0 } { div8u::divisor#1 = div8u::divisor#2 test_8u::divisor#0 divr8u::divisor#0 } { div8u::return#0 = div8u::return#3 } { divr8u::return#0 = divr8u::return#1 } }  ) always clobbers reg byte a 
Statement [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( test_8s:7::div8s:135::div8u:177::divr8u:195 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } { div8u::dividend#0 = div8u::dividend#2 div8s::dividendu#3 divr8u::dividend#0 } { div8u::divisor#0 = div8u::divisor#2 div8s::divisoru#3 divr8u::divisor#0 } { div8u::return#0 = div8u::return#2 } { divr8u::return#0 = divr8u::return#1 } }  test_8u:3::div8u:258::divr8u:195 [ print_line_cursor#43 print_char_cursor#144 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] { { div8u::dividend#1 = div8u::dividend#2 test_8u::dividend#0 divr8u::dividend#0 } { div8u::divisor#1 = div8u::divisor#2 test_8u::divisor#0 divr8u::divisor#0 } { div8u::return#0 = div8u::return#3 } { divr8u::return#0 = divr8u::return#1 } }  ) always clobbers reg byte a 
Statement [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( test_8s:7::div8s:135::div8u:177::divr8u:195 [ print_line_cursor#0 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] { { div8s::dividend#0 = test_8s::dividend#0 } { div8s::divisor#0 = test_8s::divisor#0 } { div8s::return#2 = div8s::return#3 } { div8u::dividend#0 = div8u::dividend#2 div8s::dividendu#3 divr8u::dividend#0 } { div8u::divisor#0 = div8u::divisor#2 div8s::divisoru#3 divr8u::divisor#0 } { div8u::return#0 = div8u::return#2 } { divr8u::return#0 = divr8u::return#1 } }  test_8u:3::div8u:258::divr8u:195 [ print_line_cursor#43 print_char_cursor#144 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] { { div8u::dividend#1 = div8u::dividend#2 test_8u::dividend#0 divr8u::dividend#0 } { div8u::divisor#1 = div8u::divisor#2 test_8u::divisor#0 divr8u::divisor#0 } { div8u::return#0 = div8u::return#3 } { divr8u::return#0 = divr8u::return#1 } }  ) always clobbers reg byte a 
Statement [218] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 [ print_line_cursor#0 test_16u::i#10 test_16u::$11 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::$11 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [219] (word) test_16u::dividend#0 ← *((const word*) test_16u::dividends + (byte~) test_16u::$11) [ print_line_cursor#0 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::$11 test_16u::dividend#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [220] (word) test_16u::divisor#0 ← *((const word*) test_16u::divisors + (byte~) test_16u::$11) [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [221] (word) div16u::dividend#0 ← (word) test_16u::dividend#0 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [222] (word) div16u::divisor#0 ← (word) test_16u::divisor#0 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] ( test_16u:5 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#0 div16u::divisor#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [224] (word) div16u::return#2 ← (word) div16u::return#0 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] ( test_16u:5 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#2 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [225] (word) test_16u::res#0 ← (word) div16u::return#2 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 rem16u#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } }  ) always clobbers reg byte a 
Statement [226] (word) print_uint::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#0 print_uint::w#1 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 print_uint::w#1 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } }  ) always clobbers reg byte a 
Statement [227] (byte*) print_char_cursor#169 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 print_uint::w#1 print_char_cursor#169 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 print_uint::w#1 print_char_cursor#169 rem16u#0 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] { { print_uint::w#1 = print_uint::w#5 test_16u::dividend#0 } { print_char_cursor#141 = print_char_cursor#169 } }  ) always clobbers reg byte a 
Statement [231] (word) print_uint::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#2 rem16u#0 test_16u::i#10 test_16u::res#0 ] ( test_16u:5 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#2 rem16u#0 test_16u::i#10 test_16u::res#0 ] { { print_uint::w#2 = print_uint::w#5 test_16u::divisor#0 } { print_char_cursor#141 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [235] (word) print_uint::w#3 ← (word) test_16u::res#0 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#3 rem16u#0 test_16u::i#10 ] ( test_16u:5 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#3 rem16u#0 test_16u::i#10 ] { { print_uint::w#3 = print_uint::w#5 test_16u::res#0 } { print_char_cursor#141 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [239] (word) print_uint::w#4 ← (word) rem16u#0 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#4 test_16u::i#10 ] ( test_16u:5 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#4 test_16u::i#10 ] { { print_uint::w#4 = print_uint::w#5 rem16u#0 } { print_char_cursor#141 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [246] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 [ divr16u::dividend#1 div16u::divisor#0 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 div16u::divisor#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [247] (word) divr16u::divisor#0 ← (word) div16u::divisor#0 [ divr16u::dividend#1 divr16u::divisor#0 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [249] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#0 divr16u::return#2 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#0 divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 div16u::dividend#0 test_16u::dividend#0 } { divr16u::divisor#0 = divr16u::divisor#6 div16u::divisor#0 test_16u::divisor#0 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [250] (word) div16u::return#0 ← (word) divr16u::return#2 [ rem16u#0 div16u::return#0 ] ( test_16u:5::div16u:223 [ print_line_cursor#0 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#0 div16u::return#0 ] { { div16u::dividend#0 = test_16u::dividend#0 } { div16u::divisor#0 = test_16u::divisor#0 } { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [280] (byte*) print_char_cursor#187 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 test_8u::i#1 print_char_cursor#187 ] ( test_8u:3 [ print_line_cursor#0 test_8u::i#1 print_char_cursor#187 ] { }  ) always clobbers reg byte a 
Statement [286] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:282 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [288] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:282 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ test_16s::i#10 test_16s::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ print_line_cursor#21 print_line_cursor#41 print_line_cursor#0 print_line_cursor#43 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:8 [ print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ print_char_cursor#141 print_char_cursor#85 print_char_cursor#138 print_char_cursor#135 print_char_cursor#160 print_char_cursor#18 print_char_cursor#142 print_char_cursor#169 print_char_cursor#144 print_char_cursor#164 print_char_cursor#187 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ] : zp[1]:12 , reg byte x , 
Potential registers zp[2]:13 [ print_str::str#13 print_str::str#16 print_str::str#0 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] : zp[2]:17 , 
Potential registers zp[1]:19 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[2]:20 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ rem16s#12 rem16s#38 rem16s#1 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:26 , 
Potential registers zp[2]:28 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] : zp[2]:28 , 
Potential registers zp[2]:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:30 , 
Potential registers zp[1]:32 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:32 , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ test_8s::i#10 test_8s::i#1 ] : zp[1]:33 , reg byte x , 
Potential registers zp[1]:34 [ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ] : zp[1]:34 , reg byte x , 
Potential registers zp[1]:35 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] : zp[1]:35 , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] : zp[1]:37 , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ div8s::return#2 div8s::return#6 div8s::return#1 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ rem8s#10 rem8s#33 rem8s#1 ] : zp[1]:39 , reg byte x , 
Potential registers zp[1]:40 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] : zp[1]:42 , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] : zp[1]:43 , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] : zp[1]:44 , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ divr8u::i#2 divr8u::i#1 ] : zp[1]:45 , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ test_16u::i#10 test_16u::i#1 ] : zp[1]:46 , reg byte x , 
Potential registers zp[1]:47 [ test_8u::i#10 test_8u::i#1 ] : zp[1]:47 , reg byte x , 
Potential registers zp[2]:48 [ memset::dst#2 memset::dst#1 ] : zp[2]:48 , 
Potential registers zp[1]:50 [ test_16s::$11 ] : zp[1]:50 , reg byte x , reg byte y , 
Potential registers zp[2]:51 [ test_16s::dividend#0 ] : zp[2]:51 , 
Potential registers zp[2]:53 [ test_16s::divisor#0 ] : zp[2]:53 , 
Potential registers zp[2]:55 [ div16s::dividend#0 ] : zp[2]:55 , 
Potential registers zp[2]:57 [ div16s::divisor#0 ] : zp[2]:57 , 
Potential registers zp[2]:59 [ div16s::return#2 ] : zp[2]:59 , 
Potential registers zp[2]:61 [ test_16s::res#0 ] : zp[2]:61 , 
Potential registers zp[1]:63 [ print_uchar::$0 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:64 [ print_uchar::$2 ] : zp[1]:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:65 [ divr16s::dividend#0 ] : zp[2]:65 , 
Potential registers zp[2]:67 [ divr16s::divisor#0 ] : zp[2]:67 , 
Potential registers zp[2]:69 [ divr16s::return#3 ] : zp[2]:69 , 
Potential registers zp[2]:71 [ div16s::return#0 ] : zp[2]:71 , 
Potential registers zp[2]:73 [ divr16u::return#3 ] : zp[2]:73 , 
Potential registers zp[2]:75 [ divr16s::resultu#0 ] : zp[2]:75 , 
Potential registers zp[2]:77 [ divr16s::divisoru#1 ] : zp[2]:77 , 
Potential registers zp[2]:79 [ divr16s::dividendu#1 ] : zp[2]:79 , 
Potential registers zp[1]:81 [ divr16u::$1 ] : zp[1]:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:82 [ divr16u::$2 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:83 [ rem16u#0 ] : zp[2]:83 , 
Potential registers zp[1]:85 [ test_8s::dividend#0 ] : zp[1]:85 , reg byte x , reg byte y , 
Potential registers zp[1]:86 [ test_8s::divisor#0 ] : zp[1]:86 , reg byte x , 
Potential registers zp[1]:87 [ div8s::dividend#0 ] : zp[1]:87 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:88 [ div8s::divisor#0 ] : zp[1]:88 , reg byte x , reg byte y , 
Potential registers zp[1]:89 [ div8s::return#3 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:90 [ test_8s::res#0 ] : zp[1]:90 , reg byte x , 
Potential registers zp[1]:91 [ div8u::return#2 ] : zp[1]:91 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:92 [ div8s::resultu#0 ] : zp[1]:92 , reg byte x , reg byte y , 
Potential registers zp[1]:93 [ div8s::divisoru#1 ] : zp[1]:93 , reg byte x , reg byte y , 
Potential registers zp[1]:94 [ div8s::dividendu#1 ] : zp[1]:94 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:95 [ divr8u::divisor#0 ] : zp[1]:95 , reg byte x , reg byte y , 
Potential registers zp[1]:96 [ divr8u::return#0 ] : zp[1]:96 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:97 [ div8u::return#0 ] : zp[1]:97 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:98 [ divr8u::$1 ] : zp[1]:98 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:99 [ rem8u#18 ] : zp[1]:99 , reg byte x , 
Potential registers zp[1]:100 [ test_16u::$11 ] : zp[1]:100 , reg byte x , reg byte y , 
Potential registers zp[2]:101 [ test_16u::dividend#0 ] : zp[2]:101 , 
Potential registers zp[2]:103 [ test_16u::divisor#0 ] : zp[2]:103 , 
Potential registers zp[2]:105 [ div16u::dividend#0 ] : zp[2]:105 , 
Potential registers zp[2]:107 [ div16u::divisor#0 ] : zp[2]:107 , 
Potential registers zp[2]:109 [ div16u::return#2 ] : zp[2]:109 , 
Potential registers zp[2]:111 [ test_16u::res#0 ] : zp[2]:111 , 
Potential registers zp[2]:113 [ divr16u::return#2 ] : zp[2]:113 , 
Potential registers zp[2]:115 [ div16u::return#0 ] : zp[2]:115 , 
Potential registers zp[1]:117 [ test_8u::dividend#0 ] : zp[1]:117 , reg byte x , reg byte y , 
Potential registers zp[1]:118 [ test_8u::divisor#0 ] : zp[1]:118 , reg byte x , 
Potential registers zp[1]:119 [ div8u::return#3 ] : zp[1]:119 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:120 [ test_8u::res#0 ] : zp[1]:120 , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [divr16u] 87,533,342.42: zp[2]:26 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 31,787,289.18: zp[2]:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 20,000,002: zp[1]:81 [ divr16u::$1 ] 20,000,002: zp[1]:82 [ divr16u::$2 ] 16,538,463.19: zp[1]:32 [ divr16u::i#2 divr16u::i#1 ] 6,922,005.82: zp[2]:28 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] 1,272,691.75: zp[2]:24 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ] 20,002: zp[2]:73 [ divr16u::return#3 ] 2,002: zp[2]:113 [ divr16u::return#2 ] 
Uplift Scope [divr8u] 90,033,342.67: zp[1]:42 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] 32,858,812.98: zp[1]:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] 20,000,002: zp[1]:98 [ divr8u::$1 ] 16,666,668.33: zp[1]:45 [ divr8u::i#2 divr8u::i#1 ] 7,553,334.92: zp[1]:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] 1,250,625.19: zp[1]:95 [ divr8u::divisor#0 ] 20,002: zp[1]:96 [ divr8u::return#0 ] 
Uplift Scope [print_char] 1,900,010: zp[1]:7 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] 
Uplift Scope [] 1,214,484.4: zp[2]:10 [ print_char_cursor#141 print_char_cursor#85 print_char_cursor#138 print_char_cursor#135 print_char_cursor#160 print_char_cursor#18 print_char_cursor#142 print_char_cursor#169 print_char_cursor#144 print_char_cursor#164 print_char_cursor#187 ] 205,365.91: zp[2]:3 [ print_line_cursor#21 print_line_cursor#41 print_line_cursor#0 print_line_cursor#43 ] 30,916.77: zp[2]:22 [ rem16s#12 rem16s#38 rem16s#1 ] 3,850.08: zp[1]:99 [ rem8u#18 ] 3,707.48: zp[2]:83 [ rem16u#0 ] 3,119.83: zp[1]:39 [ rem8s#10 rem8s#33 rem8s#1 ] 
Uplift Scope [print_uchar] 200,002: zp[1]:63 [ print_uchar::$0 ] 200,002: zp[1]:64 [ print_uchar::$2 ] 98,166.25: zp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ] 
Uplift Scope [print_str] 301,254.25: zp[2]:13 [ print_str::str#13 print_str::str#16 print_str::str#0 ] 
Uplift Scope [divr16s] 55,005.5: zp[2]:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] 44,290.14: zp[2]:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] 37,004: zp[2]:20 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 ] 20,002: zp[1]:19 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] 10,001: zp[2]:79 [ divr16s::dividendu#1 ] 7,001: zp[2]:65 [ divr16s::dividend#0 ] 5,000.5: zp[2]:77 [ divr16s::divisoru#1 ] 3,333.67: zp[2]:75 [ divr16s::resultu#0 ] 3,000.43: zp[2]:67 [ divr16s::divisor#0 ] 2,002: zp[2]:69 [ divr16s::return#3 ] 
Uplift Scope [div8u] 12,205: zp[1]:40 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] 7,755.5: zp[1]:41 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] 2,775.75: zp[1]:97 [ div8u::return#0 ] 2,002: zp[1]:91 [ div8u::return#2 ] 202: zp[1]:119 [ div8u::return#3 ] 
Uplift Scope [div8s] 5,505.5: zp[1]:36 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] 4,433: zp[1]:35 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] 3,704: zp[1]:38 [ div8s::return#2 div8s::return#6 div8s::return#1 ] 2,002: zp[1]:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] 1,001: zp[1]:94 [ div8s::dividendu#1 ] 701: zp[1]:87 [ div8s::dividend#0 ] 500.5: zp[1]:93 [ div8s::divisoru#1 ] 333.67: zp[1]:92 [ div8s::resultu#0 ] 300.43: zp[1]:88 [ div8s::divisor#0 ] 202: zp[1]:89 [ div8s::return#3 ] 
Uplift Scope [print_uint] 9,844.67: zp[2]:8 [ print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 ] 
Uplift Scope [print_sint] 5,278.83: zp[2]:5 [ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 ] 
Uplift Scope [print_schar] 5,278.83: zp[1]:34 [ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ] 
Uplift Scope [memset] 3,336.67: zp[2]:48 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [div16u] 551: zp[2]:105 [ div16u::dividend#0 ] 551: zp[2]:107 [ div16u::divisor#0 ] 367.33: zp[2]:115 [ div16u::return#0 ] 202: zp[2]:109 [ div16u::return#2 ] 
Uplift Scope [div16s] 551: zp[2]:55 [ div16s::dividend#0 ] 551: zp[2]:57 [ div16s::divisor#0 ] 367.33: zp[2]:71 [ div16s::return#0 ] 202: zp[2]:59 [ div16s::return#2 ] 
Uplift Scope [test_16u] 163.15: zp[1]:46 [ test_16u::i#10 test_16u::i#1 ] 151.5: zp[1]:100 [ test_16u::$11 ] 43.29: zp[2]:101 [ test_16u::dividend#0 ] 27.55: zp[2]:103 [ test_16u::divisor#0 ] 20.2: zp[2]:111 [ test_16u::res#0 ] 
Uplift Scope [test_16s] 163.15: zp[1]:2 [ test_16s::i#10 test_16s::i#1 ] 151.5: zp[1]:50 [ test_16s::$11 ] 43.29: zp[2]:51 [ test_16s::dividend#0 ] 27.55: zp[2]:53 [ test_16s::divisor#0 ] 20.2: zp[2]:61 [ test_16s::res#0 ] 
Uplift Scope [test_8s] 167.66: zp[1]:33 [ test_8s::i#10 test_8s::i#1 ] 43.29: zp[1]:85 [ test_8s::dividend#0 ] 27.55: zp[1]:86 [ test_8s::divisor#0 ] 20.2: zp[1]:90 [ test_8s::res#0 ] 
Uplift Scope [test_8u] 117.83: zp[1]:47 [ test_8u::i#10 test_8u::i#1 ] 43.29: zp[1]:117 [ test_8u::dividend#0 ] 30.3: zp[1]:118 [ test_8u::divisor#0 ] 22.44: zp[1]:120 [ test_8u::res#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [main] 

Uplifting [divr16u] best 43458 combination zp[2]:26 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:28 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] zp[2]:24 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ] zp[2]:73 [ divr16u::return#3 ] zp[2]:113 [ divr16u::return#2 ] 
Uplifting [divr8u] best 41055 combination reg byte y [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] zp[1]:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] reg byte a [ divr8u::$1 ] reg byte x [ divr8u::i#2 divr8u::i#1 ] zp[1]:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] zp[1]:95 [ divr8u::divisor#0 ] zp[1]:96 [ divr8u::return#0 ] 
Limited combination testing to 100 combinations of 3888 possible.
Uplifting [print_char] best 40734 combination reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] 
Uplifting [] best 40667 combination zp[2]:10 [ print_char_cursor#141 print_char_cursor#85 print_char_cursor#138 print_char_cursor#135 print_char_cursor#160 print_char_cursor#18 print_char_cursor#142 print_char_cursor#169 print_char_cursor#144 print_char_cursor#164 print_char_cursor#187 ] zp[2]:3 [ print_line_cursor#21 print_line_cursor#41 print_line_cursor#0 print_line_cursor#43 ] zp[2]:22 [ rem16s#12 rem16s#38 rem16s#1 ] reg byte x [ rem8u#18 ] zp[2]:83 [ rem16u#0 ] reg byte x [ rem8s#10 rem8s#33 rem8s#1 ] 
Uplifting [print_uchar] best 40659 combination reg byte a [ print_uchar::$0 ] reg byte a [ print_uchar::$2 ] zp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ] 
Uplifting [print_str] best 40659 combination zp[2]:13 [ print_str::str#13 print_str::str#16 print_str::str#0 ] 
Uplifting [divr16s] best 40648 combination zp[2]:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] zp[2]:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] zp[2]:20 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 ] reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] zp[2]:79 [ divr16s::dividendu#1 ] zp[2]:65 [ divr16s::dividend#0 ] zp[2]:77 [ divr16s::divisoru#1 ] zp[2]:75 [ divr16s::resultu#0 ] zp[2]:67 [ divr16s::divisor#0 ] zp[2]:69 [ divr16s::return#3 ] 
Uplifting [div8u] best 40534 combination reg byte x [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] reg byte a [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] reg byte a [ div8u::return#0 ] reg byte a [ div8u::return#2 ] zp[1]:119 [ div8u::return#3 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [div8s] best 40480 combination reg byte a [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] reg byte x [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] reg byte a [ div8s::return#2 div8s::return#6 div8s::return#1 ] zp[1]:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] zp[1]:94 [ div8s::dividendu#1 ] zp[1]:87 [ div8s::dividend#0 ] zp[1]:93 [ div8s::divisoru#1 ] zp[1]:92 [ div8s::resultu#0 ] zp[1]:88 [ div8s::divisor#0 ] zp[1]:89 [ div8s::return#3 ] 
Limited combination testing to 100 combinations of 248832 possible.
Uplifting [print_uint] best 40480 combination zp[2]:8 [ print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 ] 
Uplifting [print_sint] best 40480 combination zp[2]:5 [ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 ] 
Uplifting [print_schar] best 40480 combination zp[1]:34 [ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ] 
Uplifting [memset] best 40480 combination zp[2]:48 [ memset::dst#2 memset::dst#1 ] 
Uplifting [div16u] best 40480 combination zp[2]:105 [ div16u::dividend#0 ] zp[2]:107 [ div16u::divisor#0 ] zp[2]:115 [ div16u::return#0 ] zp[2]:109 [ div16u::return#2 ] 
Uplifting [div16s] best 40480 combination zp[2]:55 [ div16s::dividend#0 ] zp[2]:57 [ div16s::divisor#0 ] zp[2]:71 [ div16s::return#0 ] zp[2]:59 [ div16s::return#2 ] 
Uplifting [test_16u] best 40410 combination zp[1]:46 [ test_16u::i#10 test_16u::i#1 ] reg byte x [ test_16u::$11 ] zp[2]:101 [ test_16u::dividend#0 ] zp[2]:103 [ test_16u::divisor#0 ] zp[2]:111 [ test_16u::res#0 ] 
Uplifting [test_16s] best 40340 combination zp[1]:2 [ test_16s::i#10 test_16s::i#1 ] reg byte x [ test_16s::$11 ] zp[2]:51 [ test_16s::dividend#0 ] zp[2]:53 [ test_16s::divisor#0 ] zp[2]:61 [ test_16s::res#0 ] 
Uplifting [test_8s] best 40340 combination zp[1]:33 [ test_8s::i#10 test_8s::i#1 ] zp[1]:85 [ test_8s::dividend#0 ] zp[1]:86 [ test_8s::divisor#0 ] zp[1]:90 [ test_8s::res#0 ] 
Uplifting [test_8u] best 40340 combination zp[1]:47 [ test_8u::i#10 test_8u::i#1 ] zp[1]:117 [ test_8u::dividend#0 ] zp[1]:118 [ test_8u::divisor#0 ] zp[1]:120 [ test_8u::res#0 ] 
Uplifting [RADIX] best 40340 combination 
Uplifting [print_ln] best 40340 combination 
Uplifting [print_cls] best 40340 combination 
Uplifting [main] best 40340 combination 
Attempting to uplift remaining variables inzp[1]:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Uplifting [divr8u] best 40340 combination zp[1]:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] 
Attempting to uplift remaining variables inzp[1]:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Uplifting [divr8u] best 40340 combination zp[1]:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] 
Attempting to uplift remaining variables inzp[1]:95 [ divr8u::divisor#0 ]
Uplifting [divr8u] best 40340 combination zp[1]:95 [ divr8u::divisor#0 ] 
Attempting to uplift remaining variables inzp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ]
Uplifting [print_uchar] best 40340 combination zp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ] 
Attempting to uplift remaining variables inzp[1]:96 [ divr8u::return#0 ]
Uplifting [divr8u] best 40334 combination reg byte a [ divr8u::return#0 ] 
Attempting to uplift remaining variables inzp[1]:34 [ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ]
Uplifting [print_schar] best 40334 combination zp[1]:34 [ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ] 
Attempting to uplift remaining variables inzp[1]:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Uplifting [div8s] best 40334 combination zp[1]:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] 
Attempting to uplift remaining variables inzp[1]:94 [ div8s::dividendu#1 ]
Uplifting [div8s] best 40330 combination reg byte a [ div8s::dividendu#1 ] 
Attempting to uplift remaining variables inzp[1]:87 [ div8s::dividend#0 ]
Uplifting [div8s] best 40295 combination reg byte x [ div8s::dividend#0 ] 
Attempting to uplift remaining variables inzp[1]:93 [ div8s::divisoru#1 ]
Uplifting [div8s] best 40293 combination reg byte y [ div8s::divisoru#1 ] 
Attempting to uplift remaining variables inzp[1]:92 [ div8s::resultu#0 ]
Uplifting [div8s] best 40290 combination reg byte y [ div8s::resultu#0 ] 
Attempting to uplift remaining variables inzp[1]:88 [ div8s::divisor#0 ]
Uplifting [div8s] best 40257 combination reg byte y [ div8s::divisor#0 ] 
Attempting to uplift remaining variables inzp[1]:89 [ div8s::return#3 ]
Uplifting [div8s] best 40197 combination reg byte a [ div8s::return#3 ] 
Attempting to uplift remaining variables inzp[1]:119 [ div8u::return#3 ]
Uplifting [div8u] best 40137 combination reg byte a [ div8u::return#3 ] 
Attempting to uplift remaining variables inzp[1]:33 [ test_8s::i#10 test_8s::i#1 ]
Uplifting [test_8s] best 40137 combination zp[1]:33 [ test_8s::i#10 test_8s::i#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ test_16s::i#10 test_16s::i#1 ]
Uplifting [test_16s] best 40137 combination zp[1]:2 [ test_16s::i#10 test_16s::i#1 ] 
Attempting to uplift remaining variables inzp[1]:46 [ test_16u::i#10 test_16u::i#1 ]
Uplifting [test_16u] best 40137 combination zp[1]:46 [ test_16u::i#10 test_16u::i#1 ] 
Attempting to uplift remaining variables inzp[1]:47 [ test_8u::i#10 test_8u::i#1 ]
Uplifting [test_8u] best 40137 combination zp[1]:47 [ test_8u::i#10 test_8u::i#1 ] 
Attempting to uplift remaining variables inzp[1]:85 [ test_8s::dividend#0 ]
Uplifting [test_8s] best 40137 combination zp[1]:85 [ test_8s::dividend#0 ] 
Attempting to uplift remaining variables inzp[1]:117 [ test_8u::dividend#0 ]
Uplifting [test_8u] best 40137 combination zp[1]:117 [ test_8u::dividend#0 ] 
Attempting to uplift remaining variables inzp[1]:118 [ test_8u::divisor#0 ]
Uplifting [test_8u] best 40137 combination zp[1]:118 [ test_8u::divisor#0 ] 
Attempting to uplift remaining variables inzp[1]:86 [ test_8s::divisor#0 ]
Uplifting [test_8s] best 40137 combination zp[1]:86 [ test_8s::divisor#0 ] 
Attempting to uplift remaining variables inzp[1]:120 [ test_8u::res#0 ]
Uplifting [test_8u] best 40137 combination zp[1]:120 [ test_8u::res#0 ] 
Attempting to uplift remaining variables inzp[1]:90 [ test_8s::res#0 ]
Uplifting [test_8s] best 40137 combination zp[1]:90 [ test_8s::res#0 ] 
Coalescing zero page register [ zp[2]:20 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 ] ] with [ zp[2]:75 [ divr16s::resultu#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:22 [ rem16s#12 rem16s#38 rem16s#1 ] ] with [ zp[2]:83 [ rem16u#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:5 [ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 ] ] with [ zp[2]:8 [ print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:5 [ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 ] ] with [ zp[2]:51 [ test_16s::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 ] ] with [ zp[1]:34 [ print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ] ] - score: 1
Coalescing zero page register [ zp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 ] ] with [ zp[1]:117 [ test_8u::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] ] with [ zp[2]:28 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] ] with [ zp[2]:65 [ divr16s::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividend#0 ] ] with [ zp[2]:79 [ divr16s::dividendu#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] ] with [ zp[2]:24 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 ] ] with [ zp[2]:67 [ divr16s::divisor#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisor#0 ] ] with [ zp[2]:77 [ divr16s::divisoru#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:20 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 ] ] with [ zp[2]:69 [ divr16s::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:73 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 ] ] with [ zp[2]:113 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:53 [ test_16s::divisor#0 ] ] with [ zp[2]:57 [ div16s::divisor#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:59 [ div16s::return#2 ] ] with [ zp[2]:61 [ test_16s::res#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:59 [ div16s::return#2 test_16s::res#0 ] ] with [ zp[2]:71 [ div16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:101 [ test_16u::dividend#0 ] ] with [ zp[2]:105 [ div16u::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:103 [ test_16u::divisor#0 ] ] with [ zp[2]:107 [ div16u::divisor#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:109 [ div16u::return#2 ] ] with [ zp[2]:111 [ test_16u::res#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:109 [ div16u::return#2 test_16u::res#0 ] ] with [ zp[2]:115 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:5 [ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 test_16s::dividend#0 ] ] with [ zp[2]:55 [ div16s::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:5 [ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 test_16s::dividend#0 div16s::dividend#0 ] ] with [ zp[2]:101 [ test_16u::dividend#0 div16u::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:12 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 test_8u::dividend#0 ] ] with [ zp[1]:85 [ test_8s::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisor#0 divr16s::divisoru#1 ] ] with [ zp[2]:103 [ test_16u::divisor#0 div16u::divisor#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:20 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 divr16s::return#3 ] ] with [ zp[2]:30 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:20 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 ] ] with [ zp[2]:59 [ div16s::return#2 test_16s::res#0 div16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ rem16s#12 rem16s#38 rem16s#1 rem16u#0 ] ] with [ zp[2]:26 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:20 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 div16s::return#2 test_16s::res#0 div16s::return#0 ] ] with [ zp[2]:109 [ div16u::return#2 test_16u::res#0 div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 ] ] with [ zp[2]:10 [ print_char_cursor#141 print_char_cursor#85 print_char_cursor#138 print_char_cursor#135 print_char_cursor#160 print_char_cursor#18 print_char_cursor#142 print_char_cursor#169 print_char_cursor#144 print_char_cursor#164 print_char_cursor#187 ] ]
Coalescing zero page register [ zp[1]:33 [ test_8s::i#10 test_8s::i#1 ] ] with [ zp[1]:2 [ test_16s::i#10 test_16s::i#1 ] ]
Coalescing zero page register [ zp[1]:46 [ test_16u::i#10 test_16u::i#1 ] ] with [ zp[1]:37 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] ]
Coalescing zero page register [ zp[2]:48 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:3 [ print_line_cursor#21 print_line_cursor#41 print_line_cursor#0 print_line_cursor#43 ] ]
Coalescing zero page register [ zp[1]:86 [ test_8s::divisor#0 ] ] with [ zp[1]:47 [ test_8u::i#10 test_8u::i#1 ] ]
Coalescing zero page register [ zp[1]:90 [ test_8s::res#0 ] ] with [ zp[1]:43 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] ]
Coalescing zero page register [ zp[1]:118 [ test_8u::divisor#0 ] ] with [ zp[1]:95 [ divr8u::divisor#0 ] ]
Coalescing zero page register [ zp[1]:120 [ test_8u::res#0 ] ] with [ zp[1]:44 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] ]
Allocated (was zp[2]:5) zp[2]:2 [ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 test_16s::dividend#0 div16s::dividend#0 test_16u::dividend#0 div16u::dividend#0 ]
Allocated (was zp[1]:12) zp[1]:4 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 test_8u::dividend#0 test_8s::dividend#0 ]
Allocated (was zp[2]:13) zp[2]:5 [ print_str::str#13 print_str::str#16 print_str::str#0 ]
Allocated (was zp[2]:15) zp[2]:7 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 print_char_cursor#141 print_char_cursor#85 print_char_cursor#138 print_char_cursor#135 print_char_cursor#160 print_char_cursor#18 print_char_cursor#142 print_char_cursor#169 print_char_cursor#144 print_char_cursor#164 print_char_cursor#187 ]
Allocated (was zp[2]:17) zp[2]:9 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisor#0 divr16s::divisoru#1 test_16u::divisor#0 div16u::divisor#0 ]
Allocated (was zp[2]:20) zp[2]:11 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 div16s::return#2 test_16s::res#0 div16s::return#0 div16u::return#2 test_16u::res#0 div16u::return#0 ]
Allocated (was zp[2]:22) zp[2]:13 [ rem16s#12 rem16s#38 rem16s#1 rem16u#0 divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated (was zp[1]:33) zp[1]:15 [ test_8s::i#10 test_8s::i#1 test_16s::i#10 test_16s::i#1 ]
Allocated (was zp[1]:46) zp[1]:16 [ test_16u::i#10 test_16u::i#1 div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Allocated (was zp[2]:48) zp[2]:17 [ memset::dst#2 memset::dst#1 print_line_cursor#21 print_line_cursor#41 print_line_cursor#0 print_line_cursor#43 ]
Allocated (was zp[2]:53) zp[2]:19 [ test_16s::divisor#0 div16s::divisor#0 ]
Allocated (was zp[1]:86) zp[1]:21 [ test_8s::divisor#0 test_8u::i#10 test_8u::i#1 ]
Allocated (was zp[1]:90) zp[1]:22 [ test_8s::res#0 divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Allocated (was zp[1]:118) zp[1]:23 [ test_8u::divisor#0 divr8u::divisor#0 ]
Allocated (was zp[1]:120) zp[1]:24 [ test_8u::res#0 divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test the binary division library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_screen = $400
  .label print_line_cursor = $11
  .label print_char_cursor = 7
  // Remainder after unsigned 16-bit division
  .label rem16u = $d
  // Remainder after signed 16 bit division
  .label rem16s = $d
  // main
main: {
    // [1] call print_cls 
    // [281] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call test_8u 
    // [252] phi from main::@1 to test_8u [phi:main::@1->test_8u]
  test_8u_from___b1:
    jsr test_8u
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call test_16u 
    // [216] phi from main::@2 to test_16u [phi:main::@2->test_16u]
  test_16u_from___b2:
    jsr test_16u
    // [6] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [7] call test_8s 
    // [129] phi from main::@3 to test_8s [phi:main::@3->test_8s]
  test_8s_from___b3:
    jsr test_8s
    // [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [9] call test_16s 
    // [11] phi from main::@4 to test_16s [phi:main::@4->test_16s]
  test_16s_from___b4:
    jsr test_16s
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // test_16s
test_16s: {
    .label dividend = 2
    .label divisor = $13
    .label res = $b
    .label i = $f
    // [12] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  __b1_from_test_16s:
    // [12] phi (byte) test_16s::i#10 = (byte) 0 [phi:test_16s->test_16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [12] phi from test_16s::@10 to test_16s::@1 [phi:test_16s::@10->test_16s::@1]
  __b1_from___b10:
    // [12] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@10->test_16s::@1#0] -- register_copy 
    jmp __b1
    // test_16s::@1
  __b1:
    // [13] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda.z i
    asl
    tax
    // [14] (signed word) test_16s::dividend#0 ← *((const signed word*) test_16s::dividends + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuxx 
    lda dividends,x
    sta.z dividend
    lda dividends+1,x
    sta.z dividend+1
    // [15] (signed word) test_16s::divisor#0 ← *((const signed word*) test_16s::divisors + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuxx 
    lda divisors,x
    sta.z divisor
    lda divisors+1,x
    sta.z divisor+1
    // [16] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
    // [17] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
    // [18] call div16s 
    jsr div16s
    // [19] (signed word) div16s::return#2 ← (signed word) div16s::return#0
    jmp __b2
    // test_16s::@2
  __b2:
    // [20] (signed word) test_16s::res#0 ← (signed word) div16s::return#2
    // [21] (signed word) print_sint::w#1 ← (signed word) test_16s::dividend#0
    // [22] (byte*) print_char_cursor#160 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [23] call print_sint 
    // [46] phi from test_16s::@2 to print_sint [phi:test_16s::@2->print_sint]
  print_sint_from___b2:
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#160 [phi:test_16s::@2->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#1 [phi:test_16s::@2->print_sint#1] -- register_copy 
    jsr print_sint
    // [24] phi from test_16s::@2 to test_16s::@3 [phi:test_16s::@2->test_16s::@3]
  __b3_from___b2:
    jmp __b3
    // test_16s::@3
  __b3:
    // [25] call print_str 
    // [75] phi from test_16s::@3 to print_str [phi:test_16s::@3->print_str]
  print_str_from___b3:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_16s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // test_16s::@4
  __b4:
    // [26] (signed word) print_sint::w#2 ← (signed word) test_16s::divisor#0 -- vwsz1=vwsz2 
    lda.z divisor
    sta.z print_sint.w
    lda.z divisor+1
    sta.z print_sint.w+1
    // [27] call print_sint 
    // [46] phi from test_16s::@4 to print_sint [phi:test_16s::@4->print_sint]
  print_sint_from___b4:
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#18 [phi:test_16s::@4->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#2 [phi:test_16s::@4->print_sint#1] -- register_copy 
    jsr print_sint
    // [28] phi from test_16s::@4 to test_16s::@5 [phi:test_16s::@4->test_16s::@5]
  __b5_from___b4:
    jmp __b5
    // test_16s::@5
  __b5:
    // [29] call print_str 
    // [75] phi from test_16s::@5 to print_str [phi:test_16s::@5->print_str]
  print_str_from___b5:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_16s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b6
    // test_16s::@6
  __b6:
    // [30] (signed word) print_sint::w#3 ← (signed word) test_16s::res#0 -- vwsz1=vwsz2 
    lda.z res
    sta.z print_sint.w
    lda.z res+1
    sta.z print_sint.w+1
    // [31] call print_sint 
    // [46] phi from test_16s::@6 to print_sint [phi:test_16s::@6->print_sint]
  print_sint_from___b6:
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#18 [phi:test_16s::@6->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#3 [phi:test_16s::@6->print_sint#1] -- register_copy 
    jsr print_sint
    // [32] phi from test_16s::@6 to test_16s::@7 [phi:test_16s::@6->test_16s::@7]
  __b7_from___b6:
    jmp __b7
    // test_16s::@7
  __b7:
    // [33] call print_str 
    // [75] phi from test_16s::@7 to print_str [phi:test_16s::@7->print_str]
  print_str_from___b7:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_16s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b8
    // test_16s::@8
  __b8:
    // [34] (signed word) print_sint::w#4 ← (signed word) rem16s#12 -- vwsz1=vwsz2 
    lda.z rem16s
    sta.z print_sint.w
    lda.z rem16s+1
    sta.z print_sint.w+1
    // [35] call print_sint 
    // [46] phi from test_16s::@8 to print_sint [phi:test_16s::@8->print_sint]
  print_sint_from___b8:
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#18 [phi:test_16s::@8->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#4 [phi:test_16s::@8->print_sint#1] -- register_copy 
    jsr print_sint
    // [36] phi from test_16s::@8 to test_16s::@9 [phi:test_16s::@8->test_16s::@9]
  __b9_from___b8:
    jmp __b9
    // test_16s::@9
  __b9:
    // [37] call print_ln 
    // [41] phi from test_16s::@9 to print_ln [phi:test_16s::@9->print_ln]
  print_ln_from___b9:
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#0 [phi:test_16s::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b10
    // test_16s::@10
  __b10:
    // [38] (byte) test_16s::i#1 ← ++ (byte) test_16s::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [39] if((byte) test_16s::i#1!=(byte) 6) goto test_16s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1_from___b10
    jmp __breturn
    // test_16s::@return
  __breturn:
    // [40] return 
    rts
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
  // print_ln
// Print a newline
print_ln: {
    // [42] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [42] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#41 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [43] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#21 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [44] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#18) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [45] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(2) w)
print_sint: {
    .label w = 2
    // [47] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [48] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [49] call print_char 
    // [57] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#135 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [50] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [50] phi (signed word) print_sint::w#7 = (signed word) print_sint::w#10 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [51] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7
    // [52] call print_uint 
    // [61] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [53] return 
    rts
    // [54] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [55] call print_char 
    // [57] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#135 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [56] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#10 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [58] *((byte*) print_char_cursor#85) ← (byte) print_char::ch#7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [59] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#85 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [60] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(2) w)
print_uint: {
    .label w = 2
    // [62] (byte) print_uchar::b#1 ← > (word) print_uint::w#5 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar.b
    // [63] call print_uchar 
    // [67] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#141 [phi:print_uint->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [64] (byte) print_uchar::b#2 ← < (word) print_uint::w#5 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar.b
    // [65] call print_uchar 
    // [67] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [66] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp(4) b)
print_uchar: {
    .label b = 4
    // [68] (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // [69] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [70] call print_char 
  // Table of hexadecimal digits
    // [57] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#142 [phi:print_uchar->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [71] (byte~) print_uchar::$2 ← (byte) print_uchar::b#7 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // [72] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [73] call print_char 
    // [57] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#18 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [74] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(5) str)
print_str: {
    .label str = 5
    // [76] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [76] phi (byte*) print_str::str#13 = (byte*) print_str::str#16 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [77] if((byte) 0!=*((byte*) print_str::str#13)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [78] return 
    rts
    // print_str::@2
  __b2:
    // [79] (byte) print_char::ch#0 ← *((byte*) print_str::str#13) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [80] call print_char 
    // [57] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#18 [phi:print_str::@2->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [81] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zp(2) dividend, signed word zp($13) divisor)
div16s: {
    .label return = $b
    .label dividend = 2
    .label divisor = $13
    // [82] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 -- vwsz1=vwsz2 
    lda.z dividend
    sta.z divr16s.dividend
    lda.z dividend+1
    sta.z divr16s.dividend+1
    // [83] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 -- vwsz1=vwsz2 
    lda.z divisor
    sta.z divr16s.divisor
    lda.z divisor+1
    sta.z divr16s.divisor+1
    // [84] call divr16s 
    jsr divr16s
    // [85] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
    jmp __b1
    // div16s::@1
  __b1:
    // [86] (signed word) div16s::return#0 ← (signed word) divr16s::return#3
    jmp __breturn
    // div16s::@return
  __breturn:
    // [87] return 
    rts
}
  // divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zp(7) dividend, signed word zp(9) divisor)
divr16s: {
    .label dividendu = 7
    .label divisoru = 9
    .label resultu = $b
    .label return = $b
    .label dividend = 7
    .label divisor = 9
    // [88] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda.z dividend+1
    bmi __b1
    jmp __b6
    // divr16s::@6
  __b6:
    // [89] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
    // [90] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
  __b2_from___b6:
    // [90] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
    // [90] phi (byte) divr16s::neg#3 = (byte) 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // divr16s::@2
  __b2:
    // [91] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda.z divisor+1
    bmi __b3
    jmp __b7
    // divr16s::@7
  __b7:
    // [92] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
    // [93] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
  __b4_from___b3:
  __b4_from___b7:
    // [93] phi (byte) divr16s::neg#4 = (byte) divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
    // [93] phi (word) divr16s::divisoru#3 = (word) divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
    jmp __b4
    // divr16s::@4
  __b4:
    // [94] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3
    // [95] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3
    // [96] call divr16u 
    // [111] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
  divr16u_from___b4:
    // [111] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#1 [phi:divr16s::@4->divr16u#0] -- register_copy 
    // [111] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#2 [phi:divr16s::@4->divr16u#1] -- register_copy 
    jsr divr16u
    // [97] (word) divr16u::return#3 ← (word) divr16u::return#0
    jmp __b9
    // divr16s::@9
  __b9:
    // [98] (word) divr16s::resultu#0 ← (word) divr16u::return#3
    // [99] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b5
    jmp __b8
    // divr16s::@8
  __b8:
    // [100] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z rem16s
    sta.z rem16s
    lda #0
    sbc.z rem16s+1
    sta.z rem16s+1
    // [101] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    // [102] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
  __breturn_from___b5:
  __breturn_from___b8:
    // [102] phi (signed word) rem16s#12 = (signed word) rem16s#38 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
    // [102] phi (signed word) divr16s::return#2 = (signed word) divr16s::return#6 [phi:divr16s::@5/divr16s::@8->divr16s::@return#1] -- register_copy 
    jmp __breturn
    // divr16s::@return
  __breturn:
    // [103] return 
    rts
    // divr16s::@5
  __b5:
    // [104] (signed word) divr16s::return#6 ← (signed word)(word) divr16s::resultu#0
    // [105] (signed word) rem16s#38 ← (signed word)(word) rem16u#0
    jmp __breturn_from___b5
    // divr16s::@3
  __b3:
    // [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z divisoru
    sta.z divisoru
    lda #0
    sbc.z divisoru+1
    sta.z divisoru+1
    // [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
    // [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
    jmp __b4_from___b3
    // divr16s::@1
  __b1:
    // [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z dividendu
    sta.z dividendu
    lda #0
    sbc.z dividendu+1
    sta.z dividendu+1
    // [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
    // [90] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
  __b2_from___b1:
    // [90] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
    // [90] phi (byte) divr16s::neg#3 = (byte) 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp __b2
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp(7) dividend, word zp(9) divisor, word zp($d) rem)
divr16u: {
    .label rem = $d
    .label dividend = 7
    .label quotient = $b
    .label return = $b
    .label divisor = 9
    // [112] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [112] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [112] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [112] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#5 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [112] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [112] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [112] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [112] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [113] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [114] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // [115] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [116] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [118] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [118] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [119] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [120] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [121] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda.z rem+1
    cmp.z divisor+1
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp.z divisor
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [122] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [123] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z rem
    sec
    sbc.z divisor
    sta.z rem
    lda.z rem+1
    sbc.z divisor+1
    sta.z rem+1
    // [124] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [124] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [124] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [125] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [126] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [127] (word) rem16u#0 ← (word) divr16u::rem#11
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [128] return 
    rts
}
  // test_8s
test_8s: {
    .label dividend = 4
    .label divisor = $15
    .label res = $16
    .label i = $f
    // [130] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  __b1_from_test_8s:
    // [130] phi (byte) test_8s::i#10 = (byte) 0 [phi:test_8s->test_8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [130] phi from test_8s::@10 to test_8s::@1 [phi:test_8s::@10->test_8s::@1]
  __b1_from___b10:
    // [130] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@10->test_8s::@1#0] -- register_copy 
    jmp __b1
    // test_8s::@1
  __b1:
    // [131] (signed byte) test_8s::dividend#0 ← *((const signed byte*) test_8s::dividends + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda dividends,y
    sta.z dividend
    // [132] (signed byte) test_8s::divisor#0 ← *((const signed byte*) test_8s::divisors + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda divisors,y
    sta.z divisor
    // [133] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 -- vbsxx=vbsz1 
    ldx.z dividend
    // [134] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 -- vbsyy=vbsz1 
    ldy.z divisor
    // [135] call div8s 
    jsr div8s
    // [136] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
    jmp __b2
    // test_8s::@2
  __b2:
    // [137] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 -- vbsz1=vbsaa 
    sta.z res
    // [138] (signed byte) print_schar::b#1 ← (signed byte) test_8s::dividend#0
    // [139] (byte*) print_char_cursor#164 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [140] call print_schar 
    // [158] phi from test_8s::@2 to print_schar [phi:test_8s::@2->print_schar]
  print_schar_from___b2:
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#164 [phi:test_8s::@2->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#1 [phi:test_8s::@2->print_schar#1] -- register_copy 
    jsr print_schar
    // [141] phi from test_8s::@2 to test_8s::@3 [phi:test_8s::@2->test_8s::@3]
  __b3_from___b2:
    jmp __b3
    // test_8s::@3
  __b3:
    // [142] call print_str 
    // [75] phi from test_8s::@3 to print_str [phi:test_8s::@3->print_str]
  print_str_from___b3:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_8s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // test_8s::@4
  __b4:
    // [143] (signed byte) print_schar::b#2 ← (signed byte) test_8s::divisor#0 -- vbsz1=vbsz2 
    lda.z divisor
    sta.z print_schar.b
    // [144] call print_schar 
    // [158] phi from test_8s::@4 to print_schar [phi:test_8s::@4->print_schar]
  print_schar_from___b4:
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:test_8s::@4->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#2 [phi:test_8s::@4->print_schar#1] -- register_copy 
    jsr print_schar
    // [145] phi from test_8s::@4 to test_8s::@5 [phi:test_8s::@4->test_8s::@5]
  __b5_from___b4:
    jmp __b5
    // test_8s::@5
  __b5:
    // [146] call print_str 
    // [75] phi from test_8s::@5 to print_str [phi:test_8s::@5->print_str]
  print_str_from___b5:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_8s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b6
    // test_8s::@6
  __b6:
    // [147] (signed byte) print_schar::b#3 ← (signed byte) test_8s::res#0 -- vbsz1=vbsz2 
    lda.z res
    sta.z print_schar.b
    // [148] call print_schar 
    // [158] phi from test_8s::@6 to print_schar [phi:test_8s::@6->print_schar]
  print_schar_from___b6:
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:test_8s::@6->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#3 [phi:test_8s::@6->print_schar#1] -- register_copy 
    jsr print_schar
    // [149] phi from test_8s::@6 to test_8s::@7 [phi:test_8s::@6->test_8s::@7]
  __b7_from___b6:
    jmp __b7
    // test_8s::@7
  __b7:
    // [150] call print_str 
    // [75] phi from test_8s::@7 to print_str [phi:test_8s::@7->print_str]
  print_str_from___b7:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_8s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b8
    // test_8s::@8
  __b8:
    // [151] (signed byte) print_schar::b#4 ← (signed byte) rem8s#10 -- vbsz1=vbsxx 
    stx.z print_schar.b
    // [152] call print_schar 
    // [158] phi from test_8s::@8 to print_schar [phi:test_8s::@8->print_schar]
  print_schar_from___b8:
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:test_8s::@8->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#4 [phi:test_8s::@8->print_schar#1] -- register_copy 
    jsr print_schar
    // [153] phi from test_8s::@8 to test_8s::@9 [phi:test_8s::@8->test_8s::@9]
  __b9_from___b8:
    jmp __b9
    // test_8s::@9
  __b9:
    // [154] call print_ln 
    // [41] phi from test_8s::@9 to print_ln [phi:test_8s::@9->print_ln]
  print_ln_from___b9:
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#0 [phi:test_8s::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b10
    // test_8s::@10
  __b10:
    // [155] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [156] if((byte) test_8s::i#1!=(byte) 6) goto test_8s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1_from___b10
    jmp __breturn
    // test_8s::@return
  __breturn:
    // [157] return 
    rts
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte zp(4) b)
print_schar: {
    .label b = 4
    // [159] if((signed byte) print_schar::b#10<(signed byte) 0) goto print_schar::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1_from_print_schar
    // [160] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [161] call print_char 
    // [57] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#138 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [162] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [162] phi (signed byte) print_schar::b#7 = (signed byte) print_schar::b#10 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [163] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#7
    // [164] call print_uchar 
    // [67] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
  print_uchar_from___b2:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [165] return 
    rts
    // [166] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [167] call print_char 
    // [57] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#138 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [168] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#10 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2_from___b4
}
  // div8s
// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div8s(signed byte register(X) dividend, signed byte register(Y) divisor)
div8s: {
    .label neg = $10
    // [169] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    jmp __b6
    // div8s::@6
  __b6:
    // [170] (byte) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0
    // [171] phi from div8s::@6 to div8s::@2 [phi:div8s::@6->div8s::@2]
  __b2_from___b6:
    // [171] phi (byte) div8s::dividendu#3 = (byte) div8s::dividendu#8 [phi:div8s::@6->div8s::@2#0] -- register_copy 
    // [171] phi (byte) div8s::neg#3 = (byte) 0 [phi:div8s::@6->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z neg
    jmp __b2
    // div8s::@2
  __b2:
    // [172] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3 -- vbsyy_lt_0_then_la1 
    cpy #0
    bmi __b3
    jmp __b7
    // div8s::@7
  __b7:
    // [173] (byte) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0 -- vbuaa=vbuyy 
    tya
    // [174] phi from div8s::@3 div8s::@7 to div8s::@4 [phi:div8s::@3/div8s::@7->div8s::@4]
  __b4_from___b3:
  __b4_from___b7:
    // [174] phi (byte) div8s::neg#4 = (byte) div8s::neg#2 [phi:div8s::@3/div8s::@7->div8s::@4#0] -- register_copy 
    // [174] phi (byte) div8s::divisoru#3 = (byte) div8s::divisoru#4 [phi:div8s::@3/div8s::@7->div8s::@4#1] -- register_copy 
    jmp __b4
    // div8s::@4
  __b4:
    // [175] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3
    // [176] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
    // [177] call div8u 
    // [192] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  div8u_from___b4:
    // [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
    // [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
    // [178] (byte) div8u::return#2 ← (byte) div8u::return#0
    jmp __b9
    // div8s::@9
  __b9:
    // [179] (byte) div8s::resultu#0 ← (byte) div8u::return#2 -- vbuyy=vbuaa 
    tay
    // [180] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5 -- vbuz1_eq_0_then_la1 
    lda.z neg
    cmp #0
    beq __b5
    jmp __b8
    // div8s::@8
  __b8:
    // [181] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#18 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    // [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
    // [183] phi from div8s::@5 div8s::@8 to div8s::@return [phi:div8s::@5/div8s::@8->div8s::@return]
  __breturn_from___b5:
  __breturn_from___b8:
    // [183] phi (signed byte) rem8s#10 = (signed byte) rem8s#33 [phi:div8s::@5/div8s::@8->div8s::@return#0] -- register_copy 
    // [183] phi (signed byte) div8s::return#2 = (signed byte) div8s::return#6 [phi:div8s::@5/div8s::@8->div8s::@return#1] -- register_copy 
    jmp __breturn
    // div8s::@return
  __breturn:
    // [184] return 
    rts
    // div8s::@5
  __b5:
    // [185] (signed byte) div8s::return#6 ← (signed byte)(byte) div8s::resultu#0 -- vbsaa=vbsyy 
    tya
    // [186] (signed byte) rem8s#33 ← (signed byte)(byte) rem8u#18
    jmp __breturn_from___b5
    // div8s::@3
  __b3:
    // [187] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 -- vbsyy=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
    tay
    // [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #1
    eor.z neg
    sta.z neg
    // [189] (byte) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisoru#1 -- vbuaa=vbuyy 
    tya
    jmp __b4_from___b3
    // div8s::@1
  __b1:
    // [190] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [191] (byte) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividendu#1 -- vbuxx=vbuaa 
    tax
    // [171] phi from div8s::@1 to div8s::@2 [phi:div8s::@1->div8s::@2]
  __b2_from___b1:
    // [171] phi (byte) div8s::dividendu#3 = (byte) div8s::dividendu#7 [phi:div8s::@1->div8s::@2#0] -- register_copy 
    // [171] phi (byte) div8s::neg#3 = (byte) 1 [phi:div8s::@1->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta.z neg
    jmp __b2
}
  // div8u
// Performs division on two 8 bit unsigned chars
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
// div8u(byte register(X) dividend, byte register(A) divisor)
div8u: {
    // [193] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 -- vbuz1=vbuxx 
    stx.z divr8u.dividend
    // [194] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 -- vbuz1=vbuaa 
    sta.z divr8u.divisor
    // [195] call divr8u 
    // [199] phi from div8u to divr8u [phi:div8u->divr8u]
  divr8u_from_div8u:
    jsr divr8u
    // [196] (byte) divr8u::return#0 ← (byte) divr8u::return#1 -- vbuaa=vbuz1 
    lda.z divr8u.return
    jmp __b1
    // div8u::@1
  __b1:
    // [197] (byte) div8u::return#0 ← (byte) divr8u::return#0
    jmp __breturn
    // div8u::@return
  __breturn:
    // [198] return 
    rts
}
  // divr8u
// Performs division on two 8 bit unsigned chars and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
// divr8u(byte zp($16) dividend, byte zp($17) divisor, byte register(Y) rem)
divr8u: {
    .label dividend = $16
    .label divisor = $17
    .label quotient = $18
    .label return = $18
    // [200] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  __b1_from_divr8u:
    // [200] phi (byte) divr8u::i#2 = (byte) 0 [phi:divr8u->divr8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [200] phi (byte) divr8u::quotient#3 = (byte) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z quotient
    // [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
    // [200] phi (byte) divr8u::rem#4 = (byte) 0 [phi:divr8u->divr8u::@1#3] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [200] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  __b1_from___b3:
    // [200] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
    // [200] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
    // [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
    // [200] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    jmp __b1
    // divr8u::@1
  __b1:
    // [201] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte) 1 -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
    // [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z dividend
    // [203] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr8u::@4
  __b4:
    // [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 -- vbuyy=vbuyy_bor_vbuc1 
    tya
    ora #1
    tay
    // [205] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [205] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    jmp __b2
    // divr8u::@2
  __b2:
    // [206] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z dividend
    // [207] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z quotient
    // [208] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z divisor
    bcc __b3_from___b2
    jmp __b5
    // divr8u::@5
  __b5:
    // [209] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 -- vbuz1=_inc_vbuz1 
    inc.z quotient
    // [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc.z divisor
    tay
    // [211] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [211] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
    // [211] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    jmp __b3
    // divr8u::@3
  __b3:
    // [212] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [213] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1_from___b3
    jmp __b6
    // divr8u::@6
  __b6:
    // [214] (byte) rem8u#18 ← (byte) divr8u::rem#10 -- vbuxx=vbuyy 
    tya
    tax
    jmp __breturn
    // divr8u::@return
  __breturn:
    // [215] return 
    rts
}
  // test_16u
test_16u: {
    .label dividend = 2
    .label divisor = 9
    .label res = $b
    .label i = $10
    // [217] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  __b1_from_test_16u:
    // [217] phi (byte) test_16u::i#10 = (byte) 0 [phi:test_16u->test_16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [217] phi from test_16u::@10 to test_16u::@1 [phi:test_16u::@10->test_16u::@1]
  __b1_from___b10:
    // [217] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@10->test_16u::@1#0] -- register_copy 
    jmp __b1
    // test_16u::@1
  __b1:
    // [218] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda.z i
    asl
    tax
    // [219] (word) test_16u::dividend#0 ← *((const word*) test_16u::dividends + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuxx 
    lda dividends,x
    sta.z dividend
    lda dividends+1,x
    sta.z dividend+1
    // [220] (word) test_16u::divisor#0 ← *((const word*) test_16u::divisors + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuxx 
    lda divisors,x
    sta.z divisor
    lda divisors+1,x
    sta.z divisor+1
    // [221] (word) div16u::dividend#0 ← (word) test_16u::dividend#0
    // [222] (word) div16u::divisor#0 ← (word) test_16u::divisor#0
    // [223] call div16u 
    jsr div16u
    // [224] (word) div16u::return#2 ← (word) div16u::return#0
    jmp __b2
    // test_16u::@2
  __b2:
    // [225] (word) test_16u::res#0 ← (word) div16u::return#2
    // [226] (word) print_uint::w#1 ← (word) test_16u::dividend#0
    // [227] (byte*) print_char_cursor#169 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [228] call print_uint 
    // [61] phi from test_16u::@2 to print_uint [phi:test_16u::@2->print_uint]
  print_uint_from___b2:
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#169 [phi:test_16u::@2->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#1 [phi:test_16u::@2->print_uint#1] -- register_copy 
    jsr print_uint
    // [229] phi from test_16u::@2 to test_16u::@3 [phi:test_16u::@2->test_16u::@3]
  __b3_from___b2:
    jmp __b3
    // test_16u::@3
  __b3:
    // [230] call print_str 
    // [75] phi from test_16u::@3 to print_str [phi:test_16u::@3->print_str]
  print_str_from___b3:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_16u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // test_16u::@4
  __b4:
    // [231] (word) print_uint::w#2 ← (word) test_16u::divisor#0 -- vwuz1=vwuz2 
    lda.z divisor
    sta.z print_uint.w
    lda.z divisor+1
    sta.z print_uint.w+1
    // [232] call print_uint 
    // [61] phi from test_16u::@4 to print_uint [phi:test_16u::@4->print_uint]
  print_uint_from___b4:
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:test_16u::@4->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#2 [phi:test_16u::@4->print_uint#1] -- register_copy 
    jsr print_uint
    // [233] phi from test_16u::@4 to test_16u::@5 [phi:test_16u::@4->test_16u::@5]
  __b5_from___b4:
    jmp __b5
    // test_16u::@5
  __b5:
    // [234] call print_str 
    // [75] phi from test_16u::@5 to print_str [phi:test_16u::@5->print_str]
  print_str_from___b5:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_16u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b6
    // test_16u::@6
  __b6:
    // [235] (word) print_uint::w#3 ← (word) test_16u::res#0 -- vwuz1=vwuz2 
    lda.z res
    sta.z print_uint.w
    lda.z res+1
    sta.z print_uint.w+1
    // [236] call print_uint 
    // [61] phi from test_16u::@6 to print_uint [phi:test_16u::@6->print_uint]
  print_uint_from___b6:
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:test_16u::@6->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#3 [phi:test_16u::@6->print_uint#1] -- register_copy 
    jsr print_uint
    // [237] phi from test_16u::@6 to test_16u::@7 [phi:test_16u::@6->test_16u::@7]
  __b7_from___b6:
    jmp __b7
    // test_16u::@7
  __b7:
    // [238] call print_str 
    // [75] phi from test_16u::@7 to print_str [phi:test_16u::@7->print_str]
  print_str_from___b7:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_16u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b8
    // test_16u::@8
  __b8:
    // [239] (word) print_uint::w#4 ← (word) rem16u#0 -- vwuz1=vwuz2 
    lda.z rem16u
    sta.z print_uint.w
    lda.z rem16u+1
    sta.z print_uint.w+1
    // [240] call print_uint 
    // [61] phi from test_16u::@8 to print_uint [phi:test_16u::@8->print_uint]
  print_uint_from___b8:
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:test_16u::@8->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#4 [phi:test_16u::@8->print_uint#1] -- register_copy 
    jsr print_uint
    // [241] phi from test_16u::@8 to test_16u::@9 [phi:test_16u::@8->test_16u::@9]
  __b9_from___b8:
    jmp __b9
    // test_16u::@9
  __b9:
    // [242] call print_ln 
    // [41] phi from test_16u::@9 to print_ln [phi:test_16u::@9->print_ln]
  print_ln_from___b9:
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#0 [phi:test_16u::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b10
    // test_16u::@10
  __b10:
    // [243] (byte) test_16u::i#1 ← ++ (byte) test_16u::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [244] if((byte) test_16u::i#1!=(byte) 6) goto test_16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1_from___b10
    jmp __breturn
    // test_16u::@return
  __breturn:
    // [245] return 
    rts
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
// div16u(word zp(2) dividend, word zp(9) divisor)
div16u: {
    .label return = $b
    .label dividend = 2
    .label divisor = 9
    // [246] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 -- vwuz1=vwuz2 
    lda.z dividend
    sta.z divr16u.dividend
    lda.z dividend+1
    sta.z divr16u.dividend+1
    // [247] (word) divr16u::divisor#0 ← (word) div16u::divisor#0
    // [248] call divr16u 
    // [111] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    // [111] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#0 [phi:div16u->divr16u#0] -- register_copy 
    // [111] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#1 [phi:div16u->divr16u#1] -- register_copy 
    jsr divr16u
    // [249] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp __b1
    // div16u::@1
  __b1:
    // [250] (word) div16u::return#0 ← (word) divr16u::return#2
    jmp __breturn
    // div16u::@return
  __breturn:
    // [251] return 
    rts
}
  // test_8u
test_8u: {
    .label dividend = 4
    .label divisor = $17
    .label res = $18
    .label i = $15
    // [253] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  __b1_from_test_8u:
    // [253] phi (byte*) print_line_cursor#43 = (const byte*) print_screen#0 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [253] phi (byte*) print_char_cursor#144 = (const byte*) print_screen#0 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [253] phi (byte) test_8u::i#10 = (byte) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // test_8u::@1
  __b1:
    // [254] (byte) test_8u::dividend#0 ← *((const byte*) test_8u::dividends + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda dividends,y
    sta.z dividend
    // [255] (byte) test_8u::divisor#0 ← *((const byte*) test_8u::divisors + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda divisors,y
    sta.z divisor
    // [256] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 -- vbuxx=vbuz1 
    ldx.z dividend
    // [257] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 -- vbuaa=vbuz1 
    lda.z divisor
    // [258] call div8u 
    // [192] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  div8u_from___b1:
    // [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
    // [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
    // [259] (byte) div8u::return#3 ← (byte) div8u::return#0
    jmp __b2
    // test_8u::@2
  __b2:
    // [260] (byte) test_8u::res#0 ← (byte) div8u::return#3 -- vbuz1=vbuaa 
    sta.z res
    // [261] (byte) print_uchar::b#3 ← (byte) test_8u::dividend#0
    // [262] call print_uchar 
    // [67] phi from test_8u::@2 to print_uchar [phi:test_8u::@2->print_uchar]
  print_uchar_from___b2:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#144 [phi:test_8u::@2->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#3 [phi:test_8u::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [263] phi from test_8u::@2 to test_8u::@3 [phi:test_8u::@2->test_8u::@3]
  __b3_from___b2:
    jmp __b3
    // test_8u::@3
  __b3:
    // [264] call print_str 
    // [75] phi from test_8u::@3 to print_str [phi:test_8u::@3->print_str]
  print_str_from___b3:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_8u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b4
    // test_8u::@4
  __b4:
    // [265] (byte) print_uchar::b#4 ← (byte) test_8u::divisor#0 -- vbuz1=vbuz2 
    lda.z divisor
    sta.z print_uchar.b
    // [266] call print_uchar 
    // [67] phi from test_8u::@4 to print_uchar [phi:test_8u::@4->print_uchar]
  print_uchar_from___b4:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:test_8u::@4->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#4 [phi:test_8u::@4->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [267] phi from test_8u::@4 to test_8u::@5 [phi:test_8u::@4->test_8u::@5]
  __b5_from___b4:
    jmp __b5
    // test_8u::@5
  __b5:
    // [268] call print_str 
    // [75] phi from test_8u::@5 to print_str [phi:test_8u::@5->print_str]
  print_str_from___b5:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_8u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b6
    // test_8u::@6
  __b6:
    // [269] (byte) print_uchar::b#5 ← (byte) test_8u::res#0 -- vbuz1=vbuz2 
    lda.z res
    sta.z print_uchar.b
    // [270] call print_uchar 
    // [67] phi from test_8u::@6 to print_uchar [phi:test_8u::@6->print_uchar]
  print_uchar_from___b6:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:test_8u::@6->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#5 [phi:test_8u::@6->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [271] phi from test_8u::@6 to test_8u::@7 [phi:test_8u::@6->test_8u::@7]
  __b7_from___b6:
    jmp __b7
    // test_8u::@7
  __b7:
    // [272] call print_str 
    // [75] phi from test_8u::@7 to print_str [phi:test_8u::@7->print_str]
  print_str_from___b7:
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_8u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b8
    // test_8u::@8
  __b8:
    // [273] (byte) print_uchar::b#6 ← (byte) rem8u#18 -- vbuz1=vbuxx 
    stx.z print_uchar.b
    // [274] call print_uchar 
    // [67] phi from test_8u::@8 to print_uchar [phi:test_8u::@8->print_uchar]
  print_uchar_from___b8:
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:test_8u::@8->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#6 [phi:test_8u::@8->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [275] phi from test_8u::@8 to test_8u::@9 [phi:test_8u::@8->test_8u::@9]
  __b9_from___b8:
    jmp __b9
    // test_8u::@9
  __b9:
    // [276] call print_ln 
    // [41] phi from test_8u::@9 to print_ln [phi:test_8u::@9->print_ln]
  print_ln_from___b9:
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#43 [phi:test_8u::@9->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b10
    // test_8u::@10
  __b10:
    // [277] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [278] if((byte) test_8u::i#1!=(byte) 6) goto test_8u::@11 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b11
    jmp __breturn
    // test_8u::@return
  __breturn:
    // [279] return 
    rts
    // test_8u::@11
  __b11:
    // [280] (byte*) print_char_cursor#187 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [253] phi from test_8u::@11 to test_8u::@1 [phi:test_8u::@11->test_8u::@1]
  __b1_from___b11:
    // [253] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#0 [phi:test_8u::@11->test_8u::@1#0] -- register_copy 
    // [253] phi (byte*) print_char_cursor#144 = (byte*) print_char_cursor#187 [phi:test_8u::@11->test_8u::@1#1] -- register_copy 
    // [253] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@11->test_8u::@1#2] -- register_copy 
    jmp __b1
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [282] call memset 
    // [284] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [283] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $11
    // [285] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [285] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [286] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [287] return 
    rts
    // memset::@2
  __b2:
    // [288] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [289] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [285] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [285] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  str: .text " / "
  .byte 0
  str1: .text " = "
  .byte 0
  str2: .text " "
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction ldy.z i
Replacing instruction ldy.z divisor with TAY
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction ldy.z i
Removing instruction lda.z divisor
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b10 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from_print_sint with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __breturn_from___b5 with __breturn
Replacing label __b4_from___b3 with __b4
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Replacing label __b1_from___b10 with __b1
Replacing label __b1_from_print_schar with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __breturn_from___b5 with __breturn
Replacing label __b4_from___b3 with __b4
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Replacing label __b1_from___b10 with __b1
Removing instruction __b1_from_main:
Removing instruction test_8u_from___b1:
Removing instruction __b2_from___b1:
Removing instruction test_16u_from___b2:
Removing instruction __b3_from___b2:
Removing instruction test_8s_from___b3:
Removing instruction __b4_from___b3:
Removing instruction test_16s_from___b4:
Removing instruction __b1_from___b10:
Removing instruction __b3_from___b2:
Removing instruction print_str_from___b3:
Removing instruction __b5_from___b4:
Removing instruction print_str_from___b5:
Removing instruction __b7_from___b6:
Removing instruction print_str_from___b7:
Removing instruction __b9_from___b8:
Removing instruction print_ln_from___b9:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b3_from_print_sint:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uint_from___b2:
Removing instruction __b1_from_print_sint:
Removing instruction print_char_from___b1:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b2_from___b6:
Removing instruction __b7:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b7:
Removing instruction divr16u_from___b4:
Removing instruction __breturn_from___b5:
Removing instruction __breturn_from___b8:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __breturn:
Removing instruction __b1_from___b10:
Removing instruction __b3_from___b2:
Removing instruction print_str_from___b3:
Removing instruction __b5_from___b4:
Removing instruction print_str_from___b5:
Removing instruction __b7_from___b6:
Removing instruction print_str_from___b7:
Removing instruction __b9_from___b8:
Removing instruction print_ln_from___b9:
Removing instruction __b3_from_print_schar:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uchar_from___b2:
Removing instruction __b1_from_print_schar:
Removing instruction print_char_from___b1:
Removing instruction __b2_from___b6:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b7:
Removing instruction div8u_from___b4:
Removing instruction __breturn_from___b5:
Removing instruction __breturn_from___b8:
Removing instruction __breturn:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __b1_from___b10:
Removing instruction __b3_from___b2:
Removing instruction print_str_from___b3:
Removing instruction __b5_from___b4:
Removing instruction print_str_from___b5:
Removing instruction __b7_from___b6:
Removing instruction print_str_from___b7:
Removing instruction __b9_from___b8:
Removing instruction print_ln_from___b9:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction print_str_from___b3:
Removing instruction __b5_from___b4:
Removing instruction print_str_from___b5:
Removing instruction __b7_from___b6:
Removing instruction print_str_from___b7:
Removing instruction __b9_from___b8:
Removing instruction print_ln_from___b9:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_cls_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1_from_test_16s:
Removing instruction __b2:
Removing instruction print_sint_from___b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction print_sint_from___b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction print_sint_from___b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction print_sint_from___b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b1:
Removing instruction __b6:
Removing instruction __b9:
Removing instruction __b8:
Removing instruction __b2_from___b1:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1_from_test_8s:
Removing instruction __b2:
Removing instruction print_schar_from___b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction print_schar_from___b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction print_schar_from___b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction print_schar_from___b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b9:
Removing instruction __b8:
Removing instruction __b2_from___b1:
Removing instruction divr8u_from_div8u:
Removing instruction __b1:
Removing instruction __b1_from_divr8u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __b1_from_test_16u:
Removing instruction __b2:
Removing instruction print_uint_from___b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction print_uint_from___b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction print_uint_from___b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction print_uint_from___b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __breturn:
Removing instruction divr16u_from_div16u:
Removing instruction __b1:
Removing instruction __b1_from_test_8u:
Removing instruction div8u_from___b1:
Removing instruction __b2:
Removing instruction print_uchar_from___b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction print_uchar_from___b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction print_uchar_from___b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction print_uchar_from___b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __breturn:
Removing instruction __b1_from___b11:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __breturn in beq __b5
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b5:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(label) div16s::@1
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0 dividend zp[2]:2 551.0
(signed word) div16s::divisor
(signed word) div16s::divisor#0 divisor zp[2]:19 551.0
(signed word) div16s::return
(signed word) div16s::return#0 return zp[2]:11 367.33333333333337
(signed word) div16s::return#2 return zp[2]:11 202.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0 dividend zp[2]:2 551.0
(word) div16u::divisor
(word) div16u::divisor#0 divisor zp[2]:9 551.0
(word) div16u::return
(word) div16u::return#0 return zp[2]:11 367.33333333333337
(word) div16u::return#2 return zp[2]:11 202.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(label) div8s::@1
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@6
(label) div8s::@7
(label) div8s::@8
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 reg byte x 701.0
(byte) div8s::dividendu
(signed byte) div8s::dividendu#1 reg byte a 1001.0
(byte) div8s::dividendu#3 reg byte x 429.0
(byte) div8s::dividendu#7 reg byte x 2002.0
(byte) div8s::dividendu#8 reg byte x 2002.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 reg byte y 300.42857142857144
(byte) div8s::divisoru
(signed byte) div8s::divisoru#1 reg byte y 500.5
(byte) div8s::divisoru#3 reg byte a 1501.5
(byte) div8s::divisoru#4 reg byte a 2002.0
(byte) div8s::divisoru#5 reg byte a 2002.0
(byte) div8s::neg
(byte) div8s::neg#2 neg zp[1]:16 1001.0
(byte) div8s::neg#3 neg zp[1]:16 500.5
(byte) div8s::neg#4 neg zp[1]:16 500.5
(byte) div8s::resultu
(byte) div8s::resultu#0 reg byte y 333.6666666666667
(signed byte) div8s::return
(signed byte) div8s::return#1 reg byte a 2002.0
(signed byte) div8s::return#2 reg byte a 701.0
(signed byte) div8s::return#3 reg byte a 202.0
(signed byte) div8s::return#6 reg byte a 1001.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(label) div8u::@1
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0 reg byte x 1001.0
(byte) div8u::dividend#1 reg byte x 101.0
(byte) div8u::dividend#2 reg byte x 11103.0
(byte) div8u::divisor
(byte) div8u::divisor#0 reg byte a 2002.0
(byte) div8u::divisor#1 reg byte a 202.0
(byte) div8u::divisor#2 reg byte a 5551.5
(byte) div8u::return
(byte) div8u::return#0 reg byte a 2775.75
(byte) div8u::return#2 reg byte a 2002.0
(byte) div8u::return#3 reg byte a 202.0
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(label) divr16s::@1
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@6
(label) divr16s::@7
(label) divr16s::@8
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0 dividend zp[2]:7 7001.0
(word) divr16s::dividendu
(signed word) divr16s::dividendu#1 dividendu zp[2]:7 10001.0
(word) divr16s::dividendu#3 dividendu zp[2]:7 4286.142857142857
(word) divr16s::dividendu#7 dividendu zp[2]:7 20002.0
(word) divr16s::dividendu#8 dividendu zp[2]:7 20002.0
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0 divisor zp[2]:9 3000.4285714285716
(word) divr16s::divisoru
(signed word) divr16s::divisoru#1 divisoru zp[2]:9 5000.5
(word) divr16s::divisoru#3 divisoru zp[2]:9 15001.5
(word) divr16s::divisoru#4 divisoru zp[2]:9 20002.0
(word) divr16s::divisoru#5 divisoru zp[2]:9 20002.0
(byte) divr16s::neg
(byte) divr16s::neg#2 reg byte y 10001.0
(byte) divr16s::neg#3 reg byte y 5000.5
(byte) divr16s::neg#4 reg byte y 5000.5
(signed word) divr16s::rem
(word) divr16s::remu
(word) divr16s::resultu
(word) divr16s::resultu#0 resultu zp[2]:11 3333.6666666666665
(signed word) divr16s::return
(signed word) divr16s::return#1 return zp[2]:11 20002.0
(signed word) divr16s::return#2 return zp[2]:11 7001.0
(signed word) divr16s::return#3 return zp[2]:11 2002.0
(signed word) divr16s::return#6 return zp[2]:11 10001.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 2.0000002E7
(byte~) divr16u::$2 reg byte a 2.0000002E7
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp[2]:7 2500000.25
(word) divr16u::dividend#1 dividend zp[2]:7 1001.0
(word) divr16u::dividend#2 dividend zp[2]:7 10001.0
(word) divr16u::dividend#3 dividend zp[2]:7 4300000.571428571
(word) divr16u::dividend#5 dividend zp[2]:7 111003.0
(word) divr16u::divisor
(word) divr16u::divisor#0 divisor zp[2]:9 2002.0
(word) divr16u::divisor#1 divisor zp[2]:9 20002.0
(word) divr16u::divisor#6 divisor zp[2]:9 1250687.75
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 1.50000015E7
(byte) divr16u::i#2 reg byte x 1538461.6923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp[2]:11 1.50000015E7
(word) divr16u::quotient#2 quotient zp[2]:11 1.0000001E7
(word) divr16u::quotient#3 quotient zp[2]:11 2500000.25
(word) divr16u::rem
(word) divr16u::rem#0 rem zp[2]:13 7500000.75
(word) divr16u::rem#1 rem zp[2]:13 2.0000002E7
(word) divr16u::rem#11 rem zp[2]:13 1.0033334666666666E7
(word) divr16u::rem#2 rem zp[2]:13 2.0000002E7
(word) divr16u::rem#5 rem zp[2]:13 2.0000002E7
(word) divr16u::rem#6 rem zp[2]:13 1.0000001E7
(word) divr16u::return
(word) divr16u::return#0 return zp[2]:11 4287286.428571429
(word) divr16u::return#2 return zp[2]:11 2002.0
(word) divr16u::return#3 return zp[2]:11 20002.0
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 reg byte a 2.0000002E7
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0 dividend zp[1]:22 36667.33333333333
(byte) divr8u::dividend#1 dividend zp[1]:22 2500000.25
(byte) divr8u::dividend#2 dividend zp[1]:22 5016667.333333333
(byte) divr8u::divisor
(byte) divr8u::divisor#0 divisor zp[1]:23 1250625.1875
(byte) divr8u::i
(byte) divr8u::i#1 reg byte x 1.50000015E7
(byte) divr8u::i#2 reg byte x 1666666.8333333333
(byte) divr8u::quotient
(byte) divr8u::quotient#1 quotient zp[1]:24 1.50000015E7
(byte) divr8u::quotient#2 quotient zp[1]:24 1.0000001E7
(byte) divr8u::quotient#3 quotient zp[1]:24 2857143.1428571427
(byte) divr8u::rem
(byte) divr8u::rem#1 reg byte y 1.0000001E7
(byte) divr8u::rem#10 reg byte y 1.0033334666666666E7
(byte) divr8u::rem#2 reg byte y 2.0000002E7
(byte) divr8u::rem#3 reg byte y 2.0000002E7
(byte) divr8u::rem#4 reg byte y 2.0000002E7
(byte) divr8u::rem#5 reg byte y 1.0000001E7
(byte) divr8u::return
(byte) divr8u::return#0 reg byte a 20002.0
(byte) divr8u::return#1 return zp[1]:24 5001667.333333333
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:17 2002.0
(byte*) memset::dst#2 dst zp[2]:17 1334.6666666666667
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_screen#0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 200002.0
(byte) print_char::ch#5 reg byte a 200002.0
(byte) print_char::ch#6 reg byte a 200002.0
(byte) print_char::ch#7 reg byte a 1300004.0
(byte*) print_char_cursor
(byte*) print_char_cursor#135 print_char_cursor zp[2]:7 601.5
(byte*) print_char_cursor#138 print_char_cursor zp[2]:7 601.5
(byte*) print_char_cursor#141 print_char_cursor zp[2]:7 5703.0
(byte*) print_char_cursor#142 print_char_cursor zp[2]:7 40469.333333333314
(byte*) print_char_cursor#144 print_char_cursor zp[2]:7 22.444444444444443
(byte*) print_char_cursor#160 print_char_cursor zp[2]:7 202.0
(byte*) print_char_cursor#164 print_char_cursor zp[2]:7 202.0
(byte*) print_char_cursor#169 print_char_cursor zp[2]:7 202.0
(byte*) print_char_cursor#18 print_char_cursor zp[2]:7 14274.119565217386
(byte*) print_char_cursor#187 print_char_cursor zp[2]:7 202.0
(byte*) print_char_cursor#85 print_char_cursor zp[2]:7 1152004.5
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0 print_line_cursor zp[2]:17 2949.127450980392
(byte*) print_line_cursor#21 print_line_cursor zp[2]:17 201003.0
(byte*) print_line_cursor#41 print_line_cursor zp[2]:17 1405.0
(byte*) print_line_cursor#43 print_line_cursor zp[2]:17 8.782608695652174
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_schar((signed byte) print_schar::b)
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0 b zp[1]:4 2002.0
(signed byte) print_schar::b#1 b zp[1]:4 101.0
(signed byte) print_schar::b#10 b zp[1]:4 567.8333333333334
(signed byte) print_schar::b#2 b zp[1]:4 202.0
(signed byte) print_schar::b#3 b zp[1]:4 202.0
(signed byte) print_schar::b#4 b zp[1]:4 202.0
(signed byte) print_schar::b#7 b zp[1]:4 2002.0
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_sint((signed word) print_sint::w)
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0 w zp[2]:2 2002.0
(signed word) print_sint::w#1 w zp[2]:2 101.0
(signed word) print_sint::w#10 w zp[2]:2 567.8333333333334
(signed word) print_sint::w#2 w zp[2]:2 202.0
(signed word) print_sint::w#3 w zp[2]:2 202.0
(signed word) print_sint::w#4 w zp[2]:2 202.0
(signed word) print_sint::w#7 w zp[2]:2 2002.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:5 200002.0
(byte*) print_str::str#13 str zp[2]:5 100251.25
(byte*) print_str::str#16 str zp[2]:5 1001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 200002.0
(byte~) print_uchar::$2 reg byte a 200002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 b zp[1]:4 2002.0
(byte) print_uchar::b#1 b zp[1]:4 20002.0
(byte) print_uchar::b#2 b zp[1]:4 20002.0
(byte) print_uchar::b#3 b zp[1]:4 202.0
(byte) print_uchar::b#4 b zp[1]:4 202.0
(byte) print_uchar::b#5 b zp[1]:4 202.0
(byte) print_uchar::b#6 b zp[1]:4 202.0
(byte) print_uchar::b#7 b zp[1]:4 55352.25
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:2 2002.0
(word) print_uint::w#1 w zp[2]:2 101.0
(word) print_uint::w#2 w zp[2]:2 202.0
(word) print_uint::w#3 w zp[2]:2 202.0
(word) print_uint::w#4 w zp[2]:2 202.0
(word) print_uint::w#5 w zp[2]:2 7135.666666666666
(signed word) rem16s
(signed word) rem16s#1 rem16s zp[2]:13 10001.0
(signed word) rem16s#12 rem16s zp[2]:13 913.7727272727273
(signed word) rem16s#38 rem16s zp[2]:13 20002.0
(word) rem16u
(word) rem16u#0 rem16u zp[2]:13 3707.4814814814818
(signed byte) rem8s
(signed byte) rem8s#1 reg byte x 1001.0
(signed byte) rem8s#10 reg byte x 116.83333333333334
(signed byte) rem8s#33 reg byte x 2002.0
(byte) rem8u
(byte) rem8u#18 reg byte x 3850.076923076923
(const byte*) str[(byte) 4]  = (byte*) " / "
(const byte*) str1[(byte) 4]  = (byte*) " = "
(const byte*) str2[(byte) 2]  = (byte*) " "
(void()) test_16s()
(byte~) test_16s::$11 reg byte x 151.5
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@2
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 dividend zp[2]:2 43.285714285714285
(const signed word*) test_16s::dividends[]  = { (signed word) $7fff, (signed word) $7fff, (signed word) -$7fff, (signed word) -$7fff, (signed word) $7fff, (signed word) -$7fff }
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 divisor zp[2]:19 27.545454545454547
(const signed word*) test_16s::divisors[]  = { (signed word) 5, (signed word) -7, (signed word) $b, (signed word) -$d, (signed word) -$11, (signed word) $13 }
(byte) test_16s::i
(byte) test_16s::i#1 i zp[1]:15 151.5
(byte) test_16s::i#10 i zp[1]:15 11.653846153846153
(signed word) test_16s::res
(signed word) test_16s::res#0 res zp[2]:11 20.2
(void()) test_16u()
(byte~) test_16u::$11 reg byte x 151.5
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@2
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0 dividend zp[2]:2 43.285714285714285
(const word*) test_16u::dividends[]  = { (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff }
(word) test_16u::divisor
(word) test_16u::divisor#0 divisor zp[2]:9 27.545454545454547
(const word*) test_16u::divisors[]  = { (word) 5, (word) 7, (word) $b, (word) $d, (word) $11, (word) $13 }
(byte) test_16u::i
(byte) test_16u::i#1 i zp[1]:16 151.5
(byte) test_16u::i#10 i zp[1]:16 11.653846153846153
(word) test_16u::res
(word) test_16u::res#0 res zp[2]:11 20.2
(void()) test_8s()
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@2
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 dividend zp[1]:4 43.285714285714285
(const signed byte*) test_8s::dividends[]  = { (signed byte) $7f, (signed byte) -$7f, (signed byte) -$7f, (signed byte) $7f, (signed byte) $7f, (signed byte) $7f }
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 divisor zp[1]:21 27.545454545454547
(const signed byte*) test_8s::divisors[]  = { (signed byte) 5, (signed byte) 7, (signed byte) -$b, (signed byte) -$d, (signed byte) $11, (signed byte) $13 }
(byte) test_8s::i
(byte) test_8s::i#1 i zp[1]:15 151.5
(byte) test_8s::i#10 i zp[1]:15 16.16
(signed byte) test_8s::res
(signed byte) test_8s::res#0 res zp[1]:22 20.2
(void()) test_8u()
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@2
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0 dividend zp[1]:4 43.285714285714285
(const byte*) test_8u::dividends[]  = { (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff }
(byte) test_8u::divisor
(byte) test_8u::divisor#0 divisor zp[1]:23 30.299999999999997
(const byte*) test_8u::divisors[]  = { (byte) 5, (byte) 7, (byte) $b, (byte) $d, (byte) $11, (byte) $13 }
(byte) test_8u::i
(byte) test_8u::i#1 i zp[1]:21 101.0
(byte) test_8u::i#10 i zp[1]:21 16.833333333333332
(byte) test_8u::res
(byte) test_8u::res#0 res zp[1]:24 22.444444444444443

zp[2]:2 [ print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 test_16s::dividend#0 div16s::dividend#0 test_16u::dividend#0 div16u::dividend#0 ]
reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
zp[1]:4 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 test_8u::dividend#0 test_8s::dividend#0 ]
zp[2]:5 [ print_str::str#13 print_str::str#16 print_str::str#0 ]
zp[2]:7 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 print_char_cursor#141 print_char_cursor#85 print_char_cursor#138 print_char_cursor#135 print_char_cursor#160 print_char_cursor#18 print_char_cursor#142 print_char_cursor#169 print_char_cursor#144 print_char_cursor#164 print_char_cursor#187 ]
zp[2]:9 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisor#0 divr16s::divisoru#1 test_16u::divisor#0 div16u::divisor#0 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
zp[2]:11 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 div16s::return#2 test_16s::res#0 div16s::return#0 div16u::return#2 test_16u::res#0 div16u::return#0 ]
zp[2]:13 [ rem16s#12 rem16s#38 rem16s#1 rem16u#0 divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[1]:15 [ test_8s::i#10 test_8s::i#1 test_16s::i#10 test_16s::i#1 ]
reg byte x [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
reg byte a [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
reg byte a [ div8s::return#2 div8s::return#6 div8s::return#1 ]
reg byte x [ rem8s#10 rem8s#33 rem8s#1 ]
reg byte x [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
reg byte a [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
reg byte y [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
reg byte x [ divr8u::i#2 divr8u::i#1 ]
zp[1]:16 [ test_16u::i#10 test_16u::i#1 div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
zp[2]:17 [ memset::dst#2 memset::dst#1 print_line_cursor#21 print_line_cursor#41 print_line_cursor#0 print_line_cursor#43 ]
reg byte x [ test_16s::$11 ]
zp[2]:19 [ test_16s::divisor#0 div16s::divisor#0 ]
reg byte a [ print_uchar::$0 ]
reg byte a [ print_uchar::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp[1]:21 [ test_8s::divisor#0 test_8u::i#10 test_8u::i#1 ]
reg byte x [ div8s::dividend#0 ]
reg byte y [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
zp[1]:22 [ test_8s::res#0 divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
reg byte a [ div8u::return#2 ]
reg byte y [ div8s::resultu#0 ]
reg byte y [ div8s::divisoru#1 ]
reg byte a [ div8s::dividendu#1 ]
reg byte a [ divr8u::return#0 ]
reg byte a [ div8u::return#0 ]
reg byte a [ divr8u::$1 ]
reg byte x [ rem8u#18 ]
reg byte x [ test_16u::$11 ]
zp[1]:23 [ test_8u::divisor#0 divr8u::divisor#0 ]
reg byte a [ div8u::return#3 ]
zp[1]:24 [ test_8u::res#0 divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]


FINAL ASSEMBLER
Score: 31337

  // File Comments
// Test the binary division library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_screen = $400
  .label print_line_cursor = $11
  .label print_char_cursor = 7
  // Remainder after unsigned 16-bit division
  .label rem16u = $d
  // Remainder after signed 16 bit division
  .label rem16s = $d
  // main
main: {
    // print_cls()
    // [1] call print_cls 
    // [281] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // test_8u()
    // [3] call test_8u 
    // [252] phi from main::@1 to test_8u [phi:main::@1->test_8u]
    jsr test_8u
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // test_16u()
    // [5] call test_16u 
    // [216] phi from main::@2 to test_16u [phi:main::@2->test_16u]
    jsr test_16u
    // [6] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // test_8s()
    // [7] call test_8s 
    // [129] phi from main::@3 to test_8s [phi:main::@3->test_8s]
    jsr test_8s
    // [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // test_16s()
    // [9] call test_16s 
    // [11] phi from main::@4 to test_16s [phi:main::@4->test_16s]
    jsr test_16s
    // main::@return
    // }
    // [10] return 
    rts
}
  // test_16s
test_16s: {
    .label dividend = 2
    .label divisor = $13
    .label res = $b
    .label i = $f
    // [12] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
    // [12] phi (byte) test_16s::i#10 = (byte) 0 [phi:test_16s->test_16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [12] phi from test_16s::@10 to test_16s::@1 [phi:test_16s::@10->test_16s::@1]
    // [12] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@10->test_16s::@1#0] -- register_copy 
    // test_16s::@1
  __b1:
    // dividend = dividends[i]
    // [13] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda.z i
    asl
    tax
    // [14] (signed word) test_16s::dividend#0 ← *((const signed word*) test_16s::dividends + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuxx 
    lda dividends,x
    sta.z dividend
    lda dividends+1,x
    sta.z dividend+1
    // divisor = divisors[i]
    // [15] (signed word) test_16s::divisor#0 ← *((const signed word*) test_16s::divisors + (byte~) test_16s::$11) -- vwsz1=pwsc1_derefidx_vbuxx 
    lda divisors,x
    sta.z divisor
    lda divisors+1,x
    sta.z divisor+1
    // div16s(dividend, divisor)
    // [16] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
    // [17] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
    // [18] call div16s 
    jsr div16s
    // [19] (signed word) div16s::return#2 ← (signed word) div16s::return#0
    // test_16s::@2
    // res = div16s(dividend, divisor)
    // [20] (signed word) test_16s::res#0 ← (signed word) div16s::return#2
    // print_sint(dividend)
    // [21] (signed word) print_sint::w#1 ← (signed word) test_16s::dividend#0
    // [22] (byte*) print_char_cursor#160 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_sint(dividend)
    // [23] call print_sint 
    // [46] phi from test_16s::@2 to print_sint [phi:test_16s::@2->print_sint]
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#160 [phi:test_16s::@2->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#1 [phi:test_16s::@2->print_sint#1] -- register_copy 
    jsr print_sint
    // [24] phi from test_16s::@2 to test_16s::@3 [phi:test_16s::@2->test_16s::@3]
    // test_16s::@3
    // print_str(" / ")
    // [25] call print_str 
    // [75] phi from test_16s::@3 to print_str [phi:test_16s::@3->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_16s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // test_16s::@4
    // print_sint(divisor)
    // [26] (signed word) print_sint::w#2 ← (signed word) test_16s::divisor#0 -- vwsz1=vwsz2 
    lda.z divisor
    sta.z print_sint.w
    lda.z divisor+1
    sta.z print_sint.w+1
    // [27] call print_sint 
    // [46] phi from test_16s::@4 to print_sint [phi:test_16s::@4->print_sint]
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#18 [phi:test_16s::@4->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#2 [phi:test_16s::@4->print_sint#1] -- register_copy 
    jsr print_sint
    // [28] phi from test_16s::@4 to test_16s::@5 [phi:test_16s::@4->test_16s::@5]
    // test_16s::@5
    // print_str(" = ")
    // [29] call print_str 
    // [75] phi from test_16s::@5 to print_str [phi:test_16s::@5->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_16s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // test_16s::@6
    // print_sint(res)
    // [30] (signed word) print_sint::w#3 ← (signed word) test_16s::res#0 -- vwsz1=vwsz2 
    lda.z res
    sta.z print_sint.w
    lda.z res+1
    sta.z print_sint.w+1
    // [31] call print_sint 
    // [46] phi from test_16s::@6 to print_sint [phi:test_16s::@6->print_sint]
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#18 [phi:test_16s::@6->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#3 [phi:test_16s::@6->print_sint#1] -- register_copy 
    jsr print_sint
    // [32] phi from test_16s::@6 to test_16s::@7 [phi:test_16s::@6->test_16s::@7]
    // test_16s::@7
    // print_str(" ")
    // [33] call print_str 
    // [75] phi from test_16s::@7 to print_str [phi:test_16s::@7->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_16s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // test_16s::@8
    // print_sint(rem16s)
    // [34] (signed word) print_sint::w#4 ← (signed word) rem16s#12 -- vwsz1=vwsz2 
    lda.z rem16s
    sta.z print_sint.w
    lda.z rem16s+1
    sta.z print_sint.w+1
    // [35] call print_sint 
    // [46] phi from test_16s::@8 to print_sint [phi:test_16s::@8->print_sint]
    // [46] phi (byte*) print_char_cursor#135 = (byte*) print_char_cursor#18 [phi:test_16s::@8->print_sint#0] -- register_copy 
    // [46] phi (signed word) print_sint::w#10 = (signed word) print_sint::w#4 [phi:test_16s::@8->print_sint#1] -- register_copy 
    jsr print_sint
    // [36] phi from test_16s::@8 to test_16s::@9 [phi:test_16s::@8->test_16s::@9]
    // test_16s::@9
    // print_ln()
    // [37] call print_ln 
    // [41] phi from test_16s::@9 to print_ln [phi:test_16s::@9->print_ln]
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#0 [phi:test_16s::@9->print_ln#0] -- register_copy 
    jsr print_ln
    // test_16s::@10
    // for( byte i: 0..5)
    // [38] (byte) test_16s::i#1 ← ++ (byte) test_16s::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [39] if((byte) test_16s::i#1!=(byte) 6) goto test_16s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1
    // test_16s::@return
    // }
    // [40] return 
    rts
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
  // print_ln
// Print a newline
print_ln: {
    // [42] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [42] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#41 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [43] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#21 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [44] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#18) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [45] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(2) w)
print_sint: {
    .label w = 2
    // if(w<0)
    // [47] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [48] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
    // print_sint::@3
    // print_char(' ')
    // [49] call print_char 
    // [57] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#135 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [50] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
    // [50] phi (signed word) print_sint::w#7 = (signed word) print_sint::w#10 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    // print_sint::@2
  __b2:
    // print_uint((unsigned int)w)
    // [51] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7
    // [52] call print_uint 
    // [61] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    // print_sint::@return
    // }
    // [53] return 
    rts
    // [54] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
    // print_sint::@1
  __b1:
    // print_char('-')
    // [55] call print_char 
    // [57] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#135 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sint::@4
    // w = -w
    // [56] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#10 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [58] *((byte*) print_char_cursor#85) ← (byte) print_char::ch#7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [59] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#85 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [60] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(2) w)
print_uint: {
    .label w = 2
    // print_uchar(>w)
    // [62] (byte) print_uchar::b#1 ← > (word) print_uint::w#5 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar.b
    // [63] call print_uchar 
    // [67] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#141 [phi:print_uint->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(<w)
    // [64] (byte) print_uchar::b#2 ← < (word) print_uint::w#5 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar.b
    // [65] call print_uchar 
    // [67] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@return
    // }
    // [66] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp(4) b)
print_uchar: {
    .label b = 4
    // b>>4
    // [68] (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [69] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [70] call print_char 
  // Table of hexadecimal digits
    // [57] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#142 [phi:print_uchar->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [71] (byte~) print_uchar::$2 ← (byte) print_uchar::b#7 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // print_char(print_hextab[b&$f])
    // [72] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [73] call print_char 
    // [57] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#18 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [74] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(5) str)
print_str: {
    .label str = 5
    // [76] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [76] phi (byte*) print_str::str#13 = (byte*) print_str::str#16 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [77] if((byte) 0!=*((byte*) print_str::str#13)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [78] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [79] (byte) print_char::ch#0 ← *((byte*) print_str::str#13) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [80] call print_char 
    // [57] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#18 [phi:print_str::@2->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [81] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zp(2) dividend, signed word zp($13) divisor)
div16s: {
    .label return = $b
    .label dividend = 2
    .label divisor = $13
    // divr16s(dividend, divisor, 0)
    // [82] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 -- vwsz1=vwsz2 
    lda.z dividend
    sta.z divr16s.dividend
    lda.z dividend+1
    sta.z divr16s.dividend+1
    // [83] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 -- vwsz1=vwsz2 
    lda.z divisor
    sta.z divr16s.divisor
    lda.z divisor+1
    sta.z divr16s.divisor+1
    // [84] call divr16s 
    jsr divr16s
    // [85] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
    // div16s::@1
    // [86] (signed word) div16s::return#0 ← (signed word) divr16s::return#3
    // div16s::@return
    // }
    // [87] return 
    rts
}
  // divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zp(7) dividend, signed word zp(9) divisor)
divr16s: {
    .label dividendu = 7
    .label divisoru = 9
    .label resultu = $b
    .label return = $b
    .label dividend = 7
    .label divisor = 9
    // if(dividend<0 || rem<0)
    // [88] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda.z dividend+1
    bmi __b1
    // divr16s::@6
    // [89] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
    // [90] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
    // [90] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
    // [90] phi (byte) divr16s::neg#3 = (byte) 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
    // divr16s::@2
  __b2:
    // if(divisor<0)
    // [91] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda.z divisor+1
    bmi __b3
    // divr16s::@7
    // [92] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
    // [93] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
    // [93] phi (byte) divr16s::neg#4 = (byte) divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
    // [93] phi (word) divr16s::divisoru#3 = (word) divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
    // divr16s::@4
  __b4:
    // divr16u(dividendu, divisoru, remu)
    // [94] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3
    // [95] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3
    // [96] call divr16u 
    // [111] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
    // [111] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#1 [phi:divr16s::@4->divr16u#0] -- register_copy 
    // [111] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#2 [phi:divr16s::@4->divr16u#1] -- register_copy 
    jsr divr16u
    // divr16u(dividendu, divisoru, remu)
    // [97] (word) divr16u::return#3 ← (word) divr16u::return#0
    // divr16s::@9
    // resultu = divr16u(dividendu, divisoru, remu)
    // [98] (word) divr16s::resultu#0 ← (word) divr16u::return#3
    // if(neg==0)
    // [99] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __breturn
    // divr16s::@8
    // rem16s = -(signed int)rem16u
    // [100] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z rem16s
    sta.z rem16s
    lda #0
    sbc.z rem16s+1
    sta.z rem16s+1
    // return -(signed int)resultu;
    // [101] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    // [102] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
    // [102] phi (signed word) rem16s#12 = (signed word) rem16s#38 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
    // [102] phi (signed word) divr16s::return#2 = (signed word) divr16s::return#6 [phi:divr16s::@5/divr16s::@8->divr16s::@return#1] -- register_copy 
    // divr16s::@return
  __breturn:
    // }
    // [103] return 
    rts
    // divr16s::@5
    // [104] (signed word) divr16s::return#6 ← (signed word)(word) divr16s::resultu#0
    // [105] (signed word) rem16s#38 ← (signed word)(word) rem16u#0
    // divr16s::@3
  __b3:
    // -divisor
    // [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z divisoru
    sta.z divisoru
    lda #0
    sbc.z divisoru+1
    sta.z divisoru+1
    // neg = neg ^ 1
    // [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
    // [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
    jmp __b4
    // divr16s::@1
  __b1:
    // -dividend
    // [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z dividendu
    sta.z dividendu
    lda #0
    sbc.z dividendu+1
    sta.z dividendu+1
    // [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
    // [90] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
    // [90] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
    // [90] phi (byte) divr16s::neg#3 = (byte) 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp __b2
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp(7) dividend, word zp(9) divisor, word zp($d) rem)
divr16u: {
    .label rem = $d
    .label dividend = 7
    .label quotient = $b
    .label return = $b
    .label divisor = 9
    // [112] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [112] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [112] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [112] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#5 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    sta.z rem
    sta.z rem+1
    // [112] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [112] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [112] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [112] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [113] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // >dividend
    // [114] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // >dividend & $80
    // [115] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (>dividend & $80) != 0 )
    // [116] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [118] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [118] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [119] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [120] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [121] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda.z rem+1
    cmp.z divisor+1
    bcc __b3
    bne !+
    lda.z rem
    cmp.z divisor
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [122] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [123] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z rem
    sec
    sbc.z divisor
    sta.z rem
    lda.z rem+1
    sbc.z divisor+1
    sta.z rem+1
    // [124] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [124] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [124] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [125] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [126] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@6
    // rem16u = rem
    // [127] (word) rem16u#0 ← (word) divr16u::rem#11
    // divr16u::@return
    // }
    // [128] return 
    rts
}
  // test_8s
test_8s: {
    .label dividend = 4
    .label divisor = $15
    .label res = $16
    .label i = $f
    // [130] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
    // [130] phi (byte) test_8s::i#10 = (byte) 0 [phi:test_8s->test_8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [130] phi from test_8s::@10 to test_8s::@1 [phi:test_8s::@10->test_8s::@1]
    // [130] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@10->test_8s::@1#0] -- register_copy 
    // test_8s::@1
  __b1:
    // dividend = dividends[i]
    // [131] (signed byte) test_8s::dividend#0 ← *((const signed byte*) test_8s::dividends + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda dividends,y
    sta.z dividend
    // divisor = divisors[i]
    // [132] (signed byte) test_8s::divisor#0 ← *((const signed byte*) test_8s::divisors + (byte) test_8s::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    lda divisors,y
    sta.z divisor
    // div8s(dividend, divisor)
    // [133] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 -- vbsxx=vbsz1 
    ldx.z dividend
    // [134] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 -- vbsyy=vbsz1 
    tay
    // [135] call div8s 
    jsr div8s
    // [136] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
    // test_8s::@2
    // res = div8s(dividend, divisor)
    // [137] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 -- vbsz1=vbsaa 
    sta.z res
    // print_schar(dividend)
    // [138] (signed byte) print_schar::b#1 ← (signed byte) test_8s::dividend#0
    // [139] (byte*) print_char_cursor#164 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_schar(dividend)
    // [140] call print_schar 
    // [158] phi from test_8s::@2 to print_schar [phi:test_8s::@2->print_schar]
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#164 [phi:test_8s::@2->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#1 [phi:test_8s::@2->print_schar#1] -- register_copy 
    jsr print_schar
    // [141] phi from test_8s::@2 to test_8s::@3 [phi:test_8s::@2->test_8s::@3]
    // test_8s::@3
    // print_str(" / ")
    // [142] call print_str 
    // [75] phi from test_8s::@3 to print_str [phi:test_8s::@3->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_8s::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // test_8s::@4
    // print_schar(divisor)
    // [143] (signed byte) print_schar::b#2 ← (signed byte) test_8s::divisor#0 -- vbsz1=vbsz2 
    lda.z divisor
    sta.z print_schar.b
    // [144] call print_schar 
    // [158] phi from test_8s::@4 to print_schar [phi:test_8s::@4->print_schar]
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:test_8s::@4->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#2 [phi:test_8s::@4->print_schar#1] -- register_copy 
    jsr print_schar
    // [145] phi from test_8s::@4 to test_8s::@5 [phi:test_8s::@4->test_8s::@5]
    // test_8s::@5
    // print_str(" = ")
    // [146] call print_str 
    // [75] phi from test_8s::@5 to print_str [phi:test_8s::@5->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_8s::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // test_8s::@6
    // print_schar(res)
    // [147] (signed byte) print_schar::b#3 ← (signed byte) test_8s::res#0 -- vbsz1=vbsz2 
    lda.z res
    sta.z print_schar.b
    // [148] call print_schar 
    // [158] phi from test_8s::@6 to print_schar [phi:test_8s::@6->print_schar]
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:test_8s::@6->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#3 [phi:test_8s::@6->print_schar#1] -- register_copy 
    jsr print_schar
    // [149] phi from test_8s::@6 to test_8s::@7 [phi:test_8s::@6->test_8s::@7]
    // test_8s::@7
    // print_str(" ")
    // [150] call print_str 
    // [75] phi from test_8s::@7 to print_str [phi:test_8s::@7->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_8s::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // test_8s::@8
    // print_schar(rem8s)
    // [151] (signed byte) print_schar::b#4 ← (signed byte) rem8s#10 -- vbsz1=vbsxx 
    stx.z print_schar.b
    // [152] call print_schar 
    // [158] phi from test_8s::@8 to print_schar [phi:test_8s::@8->print_schar]
    // [158] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:test_8s::@8->print_schar#0] -- register_copy 
    // [158] phi (signed byte) print_schar::b#10 = (signed byte) print_schar::b#4 [phi:test_8s::@8->print_schar#1] -- register_copy 
    jsr print_schar
    // [153] phi from test_8s::@8 to test_8s::@9 [phi:test_8s::@8->test_8s::@9]
    // test_8s::@9
    // print_ln()
    // [154] call print_ln 
    // [41] phi from test_8s::@9 to print_ln [phi:test_8s::@9->print_ln]
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#0 [phi:test_8s::@9->print_ln#0] -- register_copy 
    jsr print_ln
    // test_8s::@10
    // for( byte i: 0..5 )
    // [155] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [156] if((byte) test_8s::i#1!=(byte) 6) goto test_8s::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1
    // test_8s::@return
    // }
    // [157] return 
    rts
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte zp(4) b)
print_schar: {
    .label b = 4
    // if(b<0)
    // [159] if((signed byte) print_schar::b#10<(signed byte) 0) goto print_schar::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1
    // [160] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
    // print_schar::@3
    // print_char(' ')
    // [161] call print_char 
    // [57] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#138 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [162] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
    // [162] phi (signed byte) print_schar::b#7 = (signed byte) print_schar::b#10 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    // print_schar::@2
  __b2:
    // print_uchar((char)b)
    // [163] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#7
    // [164] call print_uchar 
    // [67] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_schar::@return
    // }
    // [165] return 
    rts
    // [166] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
    // print_schar::@1
  __b1:
    // print_char('-')
    // [167] call print_char 
    // [57] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
    // [57] phi (byte*) print_char_cursor#85 = (byte*) print_char_cursor#138 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [57] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_schar::@4
    // b = -b
    // [168] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#10 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2
}
  // div8s
// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div8s(signed byte register(X) dividend, signed byte register(Y) divisor)
div8s: {
    .label neg = $10
    // if(dividend<0)
    // [169] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    // div8s::@6
    // [170] (byte) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0
    // [171] phi from div8s::@6 to div8s::@2 [phi:div8s::@6->div8s::@2]
    // [171] phi (byte) div8s::dividendu#3 = (byte) div8s::dividendu#8 [phi:div8s::@6->div8s::@2#0] -- register_copy 
    // [171] phi (byte) div8s::neg#3 = (byte) 0 [phi:div8s::@6->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z neg
    // div8s::@2
  __b2:
    // if(divisor<0)
    // [172] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3 -- vbsyy_lt_0_then_la1 
    cpy #0
    bmi __b3
    // div8s::@7
    // [173] (byte) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0 -- vbuaa=vbuyy 
    tya
    // [174] phi from div8s::@3 div8s::@7 to div8s::@4 [phi:div8s::@3/div8s::@7->div8s::@4]
    // [174] phi (byte) div8s::neg#4 = (byte) div8s::neg#2 [phi:div8s::@3/div8s::@7->div8s::@4#0] -- register_copy 
    // [174] phi (byte) div8s::divisoru#3 = (byte) div8s::divisoru#4 [phi:div8s::@3/div8s::@7->div8s::@4#1] -- register_copy 
    // div8s::@4
  __b4:
    // div8u(dividendu, divisoru)
    // [175] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3
    // [176] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
    // [177] call div8u 
    // [192] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
    // [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
    // [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
    // div8u(dividendu, divisoru)
    // [178] (byte) div8u::return#2 ← (byte) div8u::return#0
    // div8s::@9
    // resultu = div8u(dividendu, divisoru)
    // [179] (byte) div8s::resultu#0 ← (byte) div8u::return#2 -- vbuyy=vbuaa 
    tay
    // if(neg==0)
    // [180] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5 -- vbuz1_eq_0_then_la1 
    lda.z neg
    cmp #0
    beq __b5
    // div8s::@8
    // rem8s = -(signed char)rem8u
    // [181] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#18 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    // return -(signed char)resultu;
    // [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
    // [183] phi from div8s::@5 div8s::@8 to div8s::@return [phi:div8s::@5/div8s::@8->div8s::@return]
    // [183] phi (signed byte) rem8s#10 = (signed byte) rem8s#33 [phi:div8s::@5/div8s::@8->div8s::@return#0] -- register_copy 
    // [183] phi (signed byte) div8s::return#2 = (signed byte) div8s::return#6 [phi:div8s::@5/div8s::@8->div8s::@return#1] -- register_copy 
    // div8s::@return
    // }
    // [184] return 
    rts
    // div8s::@5
  __b5:
    // [185] (signed byte) div8s::return#6 ← (signed byte)(byte) div8s::resultu#0 -- vbsaa=vbsyy 
    tya
    // [186] (signed byte) rem8s#33 ← (signed byte)(byte) rem8u#18
    rts
    // div8s::@3
  __b3:
    // -divisor
    // [187] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0 -- vbsyy=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
    tay
    // neg = neg ^ 1
    // [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #1
    eor.z neg
    sta.z neg
    // [189] (byte) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisoru#1 -- vbuaa=vbuyy 
    tya
    jmp __b4
    // div8s::@1
  __b1:
    // -dividend
    // [190] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [191] (byte) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividendu#1 -- vbuxx=vbuaa 
    tax
    // [171] phi from div8s::@1 to div8s::@2 [phi:div8s::@1->div8s::@2]
    // [171] phi (byte) div8s::dividendu#3 = (byte) div8s::dividendu#7 [phi:div8s::@1->div8s::@2#0] -- register_copy 
    // [171] phi (byte) div8s::neg#3 = (byte) 1 [phi:div8s::@1->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta.z neg
    jmp __b2
}
  // div8u
// Performs division on two 8 bit unsigned chars
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
// div8u(byte register(X) dividend, byte register(A) divisor)
div8u: {
    // divr8u(dividend, divisor, 0)
    // [193] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 -- vbuz1=vbuxx 
    stx.z divr8u.dividend
    // [194] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 -- vbuz1=vbuaa 
    sta.z divr8u.divisor
    // [195] call divr8u 
    // [199] phi from div8u to divr8u [phi:div8u->divr8u]
    jsr divr8u
    // divr8u(dividend, divisor, 0)
    // [196] (byte) divr8u::return#0 ← (byte) divr8u::return#1 -- vbuaa=vbuz1 
    lda.z divr8u.return
    // div8u::@1
    // [197] (byte) div8u::return#0 ← (byte) divr8u::return#0
    // div8u::@return
    // }
    // [198] return 
    rts
}
  // divr8u
// Performs division on two 8 bit unsigned chars and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
// divr8u(byte zp($16) dividend, byte zp($17) divisor, byte register(Y) rem)
divr8u: {
    .label dividend = $16
    .label divisor = $17
    .label quotient = $18
    .label return = $18
    // [200] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
    // [200] phi (byte) divr8u::i#2 = (byte) 0 [phi:divr8u->divr8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [200] phi (byte) divr8u::quotient#3 = (byte) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    txa
    sta.z quotient
    // [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
    // [200] phi (byte) divr8u::rem#4 = (byte) 0 [phi:divr8u->divr8u::@1#3] -- vbuyy=vbuc1 
    tay
    // [200] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
    // [200] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
    // [200] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
    // [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
    // [200] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    // divr8u::@1
  __b1:
    // rem = rem << 1
    // [201] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte) 1 -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
    // dividend & $80
    // [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z dividend
    // if( (dividend & $80) != 0 )
    // [203] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr8u::@4
    // rem = rem | 1
    // [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1 -- vbuyy=vbuyy_bor_vbuc1 
    tya
    ora #1
    tay
    // [205] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
    // [205] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    // divr8u::@2
  __b2:
    // dividend = dividend << 1
    // [206] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z dividend
    // quotient = quotient << 1
    // [207] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z quotient
    // if(rem>=divisor)
    // [208] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z divisor
    bcc __b3
    // divr8u::@5
    // quotient++;
    // [209] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 -- vbuz1=_inc_vbuz1 
    inc.z quotient
    // rem = rem - divisor
    // [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc.z divisor
    tay
    // [211] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
    // [211] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
    // [211] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    // divr8u::@3
  __b3:
    // for( char i : 0..7)
    // [212] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [213] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1
    // divr8u::@6
    // rem8u = rem
    // [214] (byte) rem8u#18 ← (byte) divr8u::rem#10 -- vbuxx=vbuyy 
    tya
    tax
    // divr8u::@return
    // }
    // [215] return 
    rts
}
  // test_16u
test_16u: {
    .label dividend = 2
    .label divisor = 9
    .label res = $b
    .label i = $10
    // [217] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
    // [217] phi (byte) test_16u::i#10 = (byte) 0 [phi:test_16u->test_16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [217] phi from test_16u::@10 to test_16u::@1 [phi:test_16u::@10->test_16u::@1]
    // [217] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@10->test_16u::@1#0] -- register_copy 
    // test_16u::@1
  __b1:
    // dividend = dividends[i]
    // [218] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda.z i
    asl
    tax
    // [219] (word) test_16u::dividend#0 ← *((const word*) test_16u::dividends + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuxx 
    lda dividends,x
    sta.z dividend
    lda dividends+1,x
    sta.z dividend+1
    // divisor = divisors[i]
    // [220] (word) test_16u::divisor#0 ← *((const word*) test_16u::divisors + (byte~) test_16u::$11) -- vwuz1=pwuc1_derefidx_vbuxx 
    lda divisors,x
    sta.z divisor
    lda divisors+1,x
    sta.z divisor+1
    // div16u(dividend, divisor)
    // [221] (word) div16u::dividend#0 ← (word) test_16u::dividend#0
    // [222] (word) div16u::divisor#0 ← (word) test_16u::divisor#0
    // [223] call div16u 
    jsr div16u
    // [224] (word) div16u::return#2 ← (word) div16u::return#0
    // test_16u::@2
    // res = div16u(dividend, divisor)
    // [225] (word) test_16u::res#0 ← (word) div16u::return#2
    // print_uint(dividend)
    // [226] (word) print_uint::w#1 ← (word) test_16u::dividend#0
    // [227] (byte*) print_char_cursor#169 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_uint(dividend)
    // [228] call print_uint 
    // [61] phi from test_16u::@2 to print_uint [phi:test_16u::@2->print_uint]
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#169 [phi:test_16u::@2->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#1 [phi:test_16u::@2->print_uint#1] -- register_copy 
    jsr print_uint
    // [229] phi from test_16u::@2 to test_16u::@3 [phi:test_16u::@2->test_16u::@3]
    // test_16u::@3
    // print_str(" / ")
    // [230] call print_str 
    // [75] phi from test_16u::@3 to print_str [phi:test_16u::@3->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_16u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // test_16u::@4
    // print_uint(divisor)
    // [231] (word) print_uint::w#2 ← (word) test_16u::divisor#0 -- vwuz1=vwuz2 
    lda.z divisor
    sta.z print_uint.w
    lda.z divisor+1
    sta.z print_uint.w+1
    // [232] call print_uint 
    // [61] phi from test_16u::@4 to print_uint [phi:test_16u::@4->print_uint]
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:test_16u::@4->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#2 [phi:test_16u::@4->print_uint#1] -- register_copy 
    jsr print_uint
    // [233] phi from test_16u::@4 to test_16u::@5 [phi:test_16u::@4->test_16u::@5]
    // test_16u::@5
    // print_str(" = ")
    // [234] call print_str 
    // [75] phi from test_16u::@5 to print_str [phi:test_16u::@5->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_16u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // test_16u::@6
    // print_uint(res)
    // [235] (word) print_uint::w#3 ← (word) test_16u::res#0 -- vwuz1=vwuz2 
    lda.z res
    sta.z print_uint.w
    lda.z res+1
    sta.z print_uint.w+1
    // [236] call print_uint 
    // [61] phi from test_16u::@6 to print_uint [phi:test_16u::@6->print_uint]
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:test_16u::@6->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#3 [phi:test_16u::@6->print_uint#1] -- register_copy 
    jsr print_uint
    // [237] phi from test_16u::@6 to test_16u::@7 [phi:test_16u::@6->test_16u::@7]
    // test_16u::@7
    // print_str(" ")
    // [238] call print_str 
    // [75] phi from test_16u::@7 to print_str [phi:test_16u::@7->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_16u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // test_16u::@8
    // print_uint(rem16u)
    // [239] (word) print_uint::w#4 ← (word) rem16u#0 -- vwuz1=vwuz2 
    lda.z rem16u
    sta.z print_uint.w
    lda.z rem16u+1
    sta.z print_uint.w+1
    // [240] call print_uint 
    // [61] phi from test_16u::@8 to print_uint [phi:test_16u::@8->print_uint]
    // [61] phi (byte*) print_char_cursor#141 = (byte*) print_char_cursor#18 [phi:test_16u::@8->print_uint#0] -- register_copy 
    // [61] phi (word) print_uint::w#5 = (word) print_uint::w#4 [phi:test_16u::@8->print_uint#1] -- register_copy 
    jsr print_uint
    // [241] phi from test_16u::@8 to test_16u::@9 [phi:test_16u::@8->test_16u::@9]
    // test_16u::@9
    // print_ln()
    // [242] call print_ln 
    // [41] phi from test_16u::@9 to print_ln [phi:test_16u::@9->print_ln]
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#0 [phi:test_16u::@9->print_ln#0] -- register_copy 
    jsr print_ln
    // test_16u::@10
    // for( byte i : 0..5)
    // [243] (byte) test_16u::i#1 ← ++ (byte) test_16u::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [244] if((byte) test_16u::i#1!=(byte) 6) goto test_16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1
    // test_16u::@return
    // }
    // [245] return 
    rts
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
// div16u(word zp(2) dividend, word zp(9) divisor)
div16u: {
    .label return = $b
    .label dividend = 2
    .label divisor = 9
    // divr16u(dividend, divisor, 0)
    // [246] (word) divr16u::dividend#1 ← (word) div16u::dividend#0 -- vwuz1=vwuz2 
    lda.z dividend
    sta.z divr16u.dividend
    lda.z dividend+1
    sta.z divr16u.dividend+1
    // [247] (word) divr16u::divisor#0 ← (word) div16u::divisor#0
    // [248] call divr16u 
    // [111] phi from div16u to divr16u [phi:div16u->divr16u]
    // [111] phi (word) divr16u::divisor#6 = (word) divr16u::divisor#0 [phi:div16u->divr16u#0] -- register_copy 
    // [111] phi (word) divr16u::dividend#5 = (word) divr16u::dividend#1 [phi:div16u->divr16u#1] -- register_copy 
    jsr divr16u
    // divr16u(dividend, divisor, 0)
    // [249] (word) divr16u::return#2 ← (word) divr16u::return#0
    // div16u::@1
    // [250] (word) div16u::return#0 ← (word) divr16u::return#2
    // div16u::@return
    // }
    // [251] return 
    rts
}
  // test_8u
test_8u: {
    .label dividend = 4
    .label divisor = $17
    .label res = $18
    .label i = $15
    // [253] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
    // [253] phi (byte*) print_line_cursor#43 = (const byte*) print_screen#0 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [253] phi (byte*) print_char_cursor#144 = (const byte*) print_screen#0 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [253] phi (byte) test_8u::i#10 = (byte) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // test_8u::@1
  __b1:
    // dividend = dividends[i]
    // [254] (byte) test_8u::dividend#0 ← *((const byte*) test_8u::dividends + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda dividends,y
    sta.z dividend
    // divisor = divisors[i]
    // [255] (byte) test_8u::divisor#0 ← *((const byte*) test_8u::divisors + (byte) test_8u::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda divisors,y
    sta.z divisor
    // div8u(dividend, divisor)
    // [256] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 -- vbuxx=vbuz1 
    ldx.z dividend
    // [257] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 -- vbuaa=vbuz1 
    // [258] call div8u 
    // [192] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
    // [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
    // [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
    // div8u(dividend, divisor)
    // [259] (byte) div8u::return#3 ← (byte) div8u::return#0
    // test_8u::@2
    // res = div8u(dividend, divisor)
    // [260] (byte) test_8u::res#0 ← (byte) div8u::return#3 -- vbuz1=vbuaa 
    sta.z res
    // print_uchar(dividend)
    // [261] (byte) print_uchar::b#3 ← (byte) test_8u::dividend#0
    // [262] call print_uchar 
    // [67] phi from test_8u::@2 to print_uchar [phi:test_8u::@2->print_uchar]
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#144 [phi:test_8u::@2->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#3 [phi:test_8u::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [263] phi from test_8u::@2 to test_8u::@3 [phi:test_8u::@2->test_8u::@3]
    // test_8u::@3
    // print_str(" / ")
    // [264] call print_str 
    // [75] phi from test_8u::@3 to print_str [phi:test_8u::@3->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str [phi:test_8u::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // test_8u::@4
    // print_uchar(divisor)
    // [265] (byte) print_uchar::b#4 ← (byte) test_8u::divisor#0 -- vbuz1=vbuz2 
    lda.z divisor
    sta.z print_uchar.b
    // [266] call print_uchar 
    // [67] phi from test_8u::@4 to print_uchar [phi:test_8u::@4->print_uchar]
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:test_8u::@4->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#4 [phi:test_8u::@4->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [267] phi from test_8u::@4 to test_8u::@5 [phi:test_8u::@4->test_8u::@5]
    // test_8u::@5
    // print_str(" = ")
    // [268] call print_str 
    // [75] phi from test_8u::@5 to print_str [phi:test_8u::@5->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str1 [phi:test_8u::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // test_8u::@6
    // print_uchar(res)
    // [269] (byte) print_uchar::b#5 ← (byte) test_8u::res#0 -- vbuz1=vbuz2 
    lda.z res
    sta.z print_uchar.b
    // [270] call print_uchar 
    // [67] phi from test_8u::@6 to print_uchar [phi:test_8u::@6->print_uchar]
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:test_8u::@6->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#5 [phi:test_8u::@6->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [271] phi from test_8u::@6 to test_8u::@7 [phi:test_8u::@6->test_8u::@7]
    // test_8u::@7
    // print_str(" ")
    // [272] call print_str 
    // [75] phi from test_8u::@7 to print_str [phi:test_8u::@7->print_str]
    // [75] phi (byte*) print_str::str#16 = (const byte*) str2 [phi:test_8u::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // test_8u::@8
    // print_uchar(rem8u)
    // [273] (byte) print_uchar::b#6 ← (byte) rem8u#18 -- vbuz1=vbuxx 
    stx.z print_uchar.b
    // [274] call print_uchar 
    // [67] phi from test_8u::@8 to print_uchar [phi:test_8u::@8->print_uchar]
    // [67] phi (byte*) print_char_cursor#142 = (byte*) print_char_cursor#18 [phi:test_8u::@8->print_uchar#0] -- register_copy 
    // [67] phi (byte) print_uchar::b#7 = (byte) print_uchar::b#6 [phi:test_8u::@8->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [275] phi from test_8u::@8 to test_8u::@9 [phi:test_8u::@8->test_8u::@9]
    // test_8u::@9
    // print_ln()
    // [276] call print_ln 
    // [41] phi from test_8u::@9 to print_ln [phi:test_8u::@9->print_ln]
    // [41] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#43 [phi:test_8u::@9->print_ln#0] -- register_copy 
    jsr print_ln
    // test_8u::@10
    // for( byte i: 0..5 )
    // [277] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [278] if((byte) test_8u::i#1!=(byte) 6) goto test_8u::@11 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b11
    // test_8u::@return
    // }
    // [279] return 
    rts
    // test_8u::@11
  __b11:
    // [280] (byte*) print_char_cursor#187 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [253] phi from test_8u::@11 to test_8u::@1 [phi:test_8u::@11->test_8u::@1]
    // [253] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#0 [phi:test_8u::@11->test_8u::@1#0] -- register_copy 
    // [253] phi (byte*) print_char_cursor#144 = (byte*) print_char_cursor#187 [phi:test_8u::@11->test_8u::@1#1] -- register_copy 
    // [253] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@11->test_8u::@1#2] -- register_copy 
    jmp __b1
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [282] call memset 
    // [284] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [283] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $11
    // [285] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [285] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [286] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [287] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [288] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [289] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [285] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [285] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  str: .text " / "
  .byte 0
  str1: .text " = "
  .byte 0
  str2: .text " "
  .byte 0

