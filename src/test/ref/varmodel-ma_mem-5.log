
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  SCREEN[main::i] = '*'
  main::$0 = main::i < 4
  main::i = ++ main::i
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
void main()
bool~ main::$0
byte main::i loadstore

Adding number conversion cast (unumber) 4 in main::$0 = main::i < 4
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Condition not simple main::$0 [4] if(main::$0) goto main::@1
Introduced intermediate condition variable main::$1 = main::i
Simple Condition main::$0 [4] if(main::$1<4) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::i = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] SCREEN[main::i] = '*'
  [2] main::$1 = main::i
  [3] main::i = ++ main::i
  [4] if(main::$1<4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$1 11.0
byte main::i loadstore 9.200000000000001

Initial phi equivalence classes
Added variable main::i to live range equivalence class [ main::i ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i ]
[ main::$1 ]
Allocated mem[1] [ main::i ]
Allocated zp[1]:2 [ main::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::i = 0 [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a 
Statement [1] SCREEN[main::i] = '*' [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a reg byte y 
Potential registers mem[1] [ main::i ] : mem[1] , 
Potential registers zp[1]:2 [ main::$1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 11: zp[1]:2 [ main::$1 ] 9.2: mem[1] [ main::i ] 
Uplift Scope [] 

Uplifting [main] best 300 combination reg byte a [ main::$1 ] mem[1] [ main::i ] 
Uplifting [] best 300 combination 
Attempting to uplift remaining variables inmem[1] [ main::i ]
Uplifting [main] best 300 combination mem[1] [ main::i ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test memory model
// Demonstrates problem where post-increase on __ma memory variables is performed to early
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [0] main::i = 0 -- vbum1=vbuc1 
    lda #0
    sta i
    jmp __b1
    // main::@1
  __b1:
    // [1] SCREEN[main::i] = '*' -- pbuc1_derefidx_vbum1=vbuc2 
    lda #'*'
    ldy i
    sta SCREEN,y
    // [2] main::$1 = main::i -- vbuaa=vbum1 
    lda i
    // [3] main::i = ++ main::i -- vbum1=_inc_vbum1 
    inc i
    // [4] if(main::$1<4) goto main::@1 -- vbuaa_lt_vbuc1_then_la1 
    cmp #4
    bcc __b1
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
    i: .byte 0
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda i with TYA
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
byte~ main::$1 reg byte a 11.0
byte main::i loadstore mem[1] 9.200000000000001

mem[1] [ main::i ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 247

  // File Comments
// Test memory model
// Demonstrates problem where post-increase on __ma memory variables is performed to early
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // i=0
    // [0] main::i = 0 -- vbum1=vbuc1 
    lda #0
    sta i
    // main::@1
  __b1:
    // SCREEN[i] = '*'
    // [1] SCREEN[main::i] = '*' -- pbuc1_derefidx_vbum1=vbuc2 
    lda #'*'
    ldy i
    sta SCREEN,y
    // i++<4
    // [2] main::$1 = main::i -- vbuaa=vbum1 
    tya
    // while(i++<4)
    // [3] main::i = ++ main::i -- vbum1=_inc_vbum1 
    inc i
    // [4] if(main::$1<4) goto main::@1 -- vbuaa_lt_vbuc1_then_la1 
    cmp #4
    bcc __b1
    // main::@return
    // }
    // [5] return 
    rts
    i: .byte 0
}
  // File Data

