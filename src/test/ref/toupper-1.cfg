
(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  [8] *((byte*) 53272) ← (byte) $17
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [10] (byte) main::c#2 ← phi( main/(byte) 0 main::@4/(byte) main::c#1 )
  [11] (byte) cputc::c#0 ← (byte) main::c#2
  [12] call cputc 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [13] (byte) main::c#1 ← ++ (byte) main::c#2
  [14] if((byte) main::c#1!=(byte) 0) goto main::@1
  to:main::wherey1
main::wherey1: scope:[main]  from main::@4
  [15] (byte) main::wherey1_return#0 ← (byte) conio_cursor_y
  to:main::@3
main::@3: scope:[main]  from main::wherey1
  [16] (byte) gotoxy::y#2 ← (byte) main::wherey1_return#0 + (byte) 2
  [17] call gotoxy 
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  [18] (byte) main::c1#2 ← phi( main::@3/(byte) 0 main::@6/(byte) main::c1#1 )
  [19] (byte) toupper::ch#0 ← (byte) main::c1#2
  [20] call toupper 
  [21] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:main::@5
main::@5: scope:[main]  from main::@2
  [22] (byte) cputc::c#1 ← (byte) toupper::return#3
  [23] call cputc 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [24] (byte) main::c1#1 ← ++ (byte) main::c1#2
  [25] if((byte) main::c1#1!=(byte) 0) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@6
  [26] return 
  to:@return

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [27] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [28] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) COLORRAM clrscr::@5/(byte*) clrscr::line_cols#1 )
  [28] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) DEFAULT_SCREEN clrscr::@5/(byte*) clrscr::line_text#1 )
  [28] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [29] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [30] (byte) conio_cursor_x ← (byte) 0
  [31] (byte) conio_cursor_y ← (byte) 0
  [32] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [33] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [34] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [35] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [36] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [37] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [38] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [39] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [40] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [41] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE
  [42] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from main::@1 main::@5
  [43] (byte) cputc::c#2 ← phi( main::@1/(byte) cputc::c#0 main::@5/(byte) cputc::c#1 )
  [44] if((byte) cputc::c#2==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [45] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#2
  [46] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE
  [47] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [48] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [49] phi()
  [50] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [51] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [52] phi()
  [53] call cputln 
  to:cputc::@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@3
  [54] if((byte) gotoxy::y#2<(byte) $19+(byte) 1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [55] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [56] (byte) gotoxy::y#4 ← phi( gotoxy::@3/(byte) gotoxy::y#2 gotoxy/(byte) 0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [57] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [58] (byte) conio_cursor_y ← (byte) gotoxy::y#4
  [59] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#4
  [60] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2
  [61] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7
  [62] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3
  [63] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0
  [64] (byte*) conio_line_text ← (byte*~) gotoxy::$5
  [65] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0
  [66] (byte*) conio_line_color ← (byte*~) gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [67] return 
  to:@return

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from main::@2
  [68] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [69] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [70] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [71] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [72] return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [73] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28
  [74] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28
  [75] (byte) conio_cursor_x ← (byte) 0
  [76] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [77] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [78] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [79] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [80] phi()
  [81] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [82] phi()
  [83] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [84] phi()
  [85] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [86] phi()
  [87] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [88] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28
  [89] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28
  [90] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [91] return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [92] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN cscroll::@2/(void*)(const nomodify byte*) COLORRAM )
  [92] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) COLORRAM+(byte) $28 )
  [93] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [94] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [95] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [96] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [96] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [97] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [98] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [99] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [100] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [101] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [102] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) LIGHT_BLUE )
  [102] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [103] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [104] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [105] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [106] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [107] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [108] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [109] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2
