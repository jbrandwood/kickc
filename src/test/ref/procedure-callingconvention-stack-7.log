Culled Empty Block (label) @1
Culled Empty Block (label) printline::@4
Culled Empty Block (label) printline::@3
Culled Empty Block (label) printline::@5
Culled Empty Block (label) printline::@6
Calling convention STACK_CALL adding prepare/execute/finalize for call printline 
Calling convention STACK_CALL adding prepare/execute/finalize for call main 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2

__stackcall (void()) main()
main: scope:[main]  from
  (byte) main::val ← (byte) 0
  (byte) main::val ← *((const byte*) SCREEN)
  callexecute printline 
  *((const byte*) SCREEN + (number) $50) ← (byte) main::val
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

__stackcall (void()) printline()
printline: scope:[printline]  from
  (byte) printline::i ← (byte) 0
  to:printline::@1
printline::@1: scope:[printline]  from printline printline::@2
  (bool~) printline::$0 ← (byte) printline::i < (number) $28
  if((bool~) printline::$0) goto printline::@2
  to:printline::@return
printline::@2: scope:[printline]  from printline::@1
  *((const byte*) SCREEN + (byte) printline::i) ← (byte) '*'
  (byte) printline::i ← ++ (byte) printline::i
  to:printline::@1
printline::@return: scope:[printline]  from printline::@1
  return 
  to:@return
@2: scope:[]  from @begin
  callexecute main 
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @2
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
__stackcall (void()) main()
(label) main::@return
(byte) main::val loadstore
__stackcall (void()) printline()
(bool~) printline::$0
(label) printline::@1
(label) printline::@2
(label) printline::@return
(byte) printline::i loadstore

Adding number conversion cast (unumber) $50 in *((const byte*) SCREEN + (number) $50) ← (byte) main::val
Adding number conversion cast (unumber) $28 in (bool~) printline::$0 ← (byte) printline::i < (number) $28
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $50
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $50
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) printline::$0 [7] if((byte) printline::i<(byte) $28) goto printline::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Consolidated array index constant in *(SCREEN+$50)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to printline:11 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] callexecute main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

__stackcall (void()) printline()
printline: scope:[printline]  from
  [4] (byte) printline::i ← (byte) 0
  to:printline::@1
printline::@1: scope:[printline]  from printline printline::@2
  [5] if((byte) printline::i<(byte) $28) goto printline::@2
  to:printline::@return
printline::@return: scope:[printline]  from printline::@1
  [6] return 
  to:@return
printline::@2: scope:[printline]  from printline::@1
  [7] *((const byte*) SCREEN + (byte) printline::i) ← (byte) '*'
  [8] (byte) printline::i ← ++ (byte) printline::i
  to:printline::@1

__stackcall (void()) main()
main: scope:[main]  from
  [9] (byte) main::val ← (byte) 0
  [10] (byte) main::val ← *((const byte*) SCREEN)
  [11] callexecute printline 
  [12] *((const byte*) SCREEN+(byte) $50) ← (byte) main::val
  to:main::@return
main::@return: scope:[main]  from main
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
__stackcall (void()) main()
(byte) main::val loadstore 3.0
__stackcall (void()) printline()
(byte) printline::i loadstore 11.5

Initial phi equivalence classes
Added variable printline::i to live range equivalence class [ printline::i ]
Added variable main::val to live range equivalence class [ main::val ]
Complete equivalence classes
[ printline::i ]
[ main::val ]
Allocated zp[1]:2 [ printline::i ]
Allocated zp[1]:3 [ main::val ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test a procedure with calling convention stack
// Illustrates live ranges for main::val and printline::i
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] callexecute main  -- jsr 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // printline
printline: {
    .label i = 2
    // [4] (byte) printline::i ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printline::@1
  __b1:
    // [5] if((byte) printline::i<(byte) $28) goto printline::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$28
    bcc __b2
    jmp __breturn
    // printline::@return
  __breturn:
    // [6] return 
    rts
    // printline::@2
  __b2:
    // [7] *((const byte*) SCREEN + (byte) printline::i) ← (byte) '*' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'*'
    ldy.z i
    sta SCREEN,y
    // [8] (byte) printline::i ← ++ (byte) printline::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // main
main: {
    .label val = 3
    // [9] (byte) main::val ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z val
    // [10] (byte) main::val ← *((const byte*) SCREEN) -- vbuz1=_deref_pbuc1 
    lda SCREEN
    sta.z val
    // [11] callexecute printline  -- jsr 
    jsr printline
    // [12] *((const byte*) SCREEN+(byte) $50) ← (byte) main::val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN+$50
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (byte) printline::i ← (byte) 0 [ printline::i ] ( main:2::printline:11 [ main::val printline::i ] ) always clobbers reg byte a 
Statement [5] if((byte) printline::i<(byte) $28) goto printline::@2 [ printline::i ] ( main:2::printline:11 [ main::val printline::i ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN + (byte) printline::i) ← (byte) '*' [ printline::i ] ( main:2::printline:11 [ main::val printline::i ] ) always clobbers reg byte a reg byte y 
Statement [9] (byte) main::val ← (byte) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] (byte) main::val ← *((const byte*) SCREEN) [ main::val ] ( main:2 [ main::val ] ) always clobbers reg byte a 
Statement [12] *((const byte*) SCREEN+(byte) $50) ← (byte) main::val [ ] ( main:2 [ ] ) always clobbers reg byte a 
Potential registers zp[1]:2 [ printline::i ] : zp[1]:2 , 
Potential registers zp[1]:3 [ main::val ] : zp[1]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [printline] 11.5: zp[1]:2 [ printline::i ] 
Uplift Scope [main] 3: zp[1]:3 [ main::val ] 
Uplift Scope [] 

Uplifting [printline] best 345 combination zp[1]:2 [ printline::i ] 
Uplifting [main] best 345 combination zp[1]:3 [ main::val ] 
Uplifting [] best 345 combination 
Attempting to uplift remaining variables inzp[1]:2 [ printline::i ]
Uplifting [printline] best 345 combination zp[1]:2 [ printline::i ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::val ]
Uplifting [main] best 345 combination zp[1]:3 [ main::val ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a procedure with calling convention stack
// Illustrates live ranges for main::val and printline::i
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] callexecute main  -- jsr 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // printline
printline: {
    .label i = 2
    // [4] (byte) printline::i ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printline::@1
  __b1:
    // [5] if((byte) printline::i<(byte) $28) goto printline::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$28
    bcc __b2
    jmp __breturn
    // printline::@return
  __breturn:
    // [6] return 
    rts
    // printline::@2
  __b2:
    // [7] *((const byte*) SCREEN + (byte) printline::i) ← (byte) '*' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'*'
    ldy.z i
    sta SCREEN,y
    // [8] (byte) printline::i ← ++ (byte) printline::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // main
main: {
    .label val = 3
    // [9] (byte) main::val ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z val
    // [10] (byte) main::val ← *((const byte*) SCREEN) -- vbuz1=_deref_pbuc1 
    lda SCREEN
    sta.z val
    // [11] callexecute printline  -- jsr 
    jsr printline
    // [12] *((const byte*) SCREEN+(byte) $50) ← (byte) main::val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN+$50
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
__stackcall (void()) main()
(label) main::@return
(byte) main::val loadstore zp[1]:3 3.0
__stackcall (void()) printline()
(label) printline::@1
(label) printline::@2
(label) printline::@return
(byte) printline::i loadstore zp[1]:2 11.5

zp[1]:2 [ printline::i ]
zp[1]:3 [ main::val ]


FINAL ASSEMBLER
Score: 297

  // File Comments
// Test a procedure with calling convention stack
// Illustrates live ranges for main::val and printline::i
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] callexecute main  -- jsr 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // printline
printline: {
    .label i = 2
    // i=0
    // [4] (byte) printline::i ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // printline::@1
  __b1:
    // for(char i=0; i<40; i++)
    // [5] if((byte) printline::i<(byte) $28) goto printline::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$28
    bcc __b2
    // printline::@return
    // }
    // [6] return 
    rts
    // printline::@2
  __b2:
    // SCREEN[i] = '*'
    // [7] *((const byte*) SCREEN + (byte) printline::i) ← (byte) '*' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'*'
    ldy.z i
    sta SCREEN,y
    // for(char i=0; i<40; i++)
    // [8] (byte) printline::i ← ++ (byte) printline::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // main
main: {
    .label val = 3
    // val
    // [9] (byte) main::val ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z val
    // val = *SCREEN
    // [10] (byte) main::val ← *((const byte*) SCREEN) -- vbuz1=_deref_pbuc1 
    lda SCREEN
    sta.z val
    // printline()
    // [11] callexecute printline  -- jsr 
    jsr printline
    // SCREEN[80] = val
    // [12] *((const byte*) SCREEN+(byte) $50) ← (byte) main::val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN+$50
    // main::@return
    // }
    // [13] return 
    rts
}
  // File Data

