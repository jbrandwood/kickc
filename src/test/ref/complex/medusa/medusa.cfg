
(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK
  [1] call memcpy 
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call memcpy 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@2
  [4] *((const byte*) SCREEN+(word) $3e7) ← *((const byte*) SCREEN+(word) $3e7) ^ (byte) $e
  to:main::@1

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from main main::@2
  [5] (void*) memcpy::destination#2 ← phi( main/(void*)(const byte*) SCREEN main::@2/(void*)(const nomodify byte*) COLS )
  [5] (void*) memcpy::source#2 ← phi( main/(void*)(const byte*) MEDUSA_SCREEN main::@2/(void*)(const byte*) MEDUSA_COLORS )
  [6] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word) $3e8
  [7] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [8] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [9] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [9] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [10] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [11] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [12] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [13] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [14] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1
