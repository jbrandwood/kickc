Fixing pointer array-indexing *((signed word[]) words + (byte) main::j)
Fixing pointer array-indexing *((signed word[]) words + (byte) sub::idx)
Fixing pointer array-indexing *((signed word[]) words + (byte) sub::idx)
Adding pointer type conversion cast (byte*) print_screen in (byte*) print_screen ← (number) $400
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) main::@4
Culled Empty Block (label) @20

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@12
print_ln: scope:[print_ln]  from main::@9
  (byte*) print_char_cursor#40 ← phi( main::@9/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#17 ← phi( main::@9/(byte*) print_line_cursor#19 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#21 ← phi( print_ln/(byte*) print_char_cursor#40 print_ln::@1/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#21
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#10 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#1 ← (byte*) print_line_cursor#10
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#22 ← phi( print_ln::@2/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#11 ← phi( print_ln::@2/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#22
  return 
  to:@return
print_sword: scope:[print_sword]  from main::@3
  (byte*) print_char_cursor#48 ← phi( main::@3/(byte*) print_char_cursor#46 )
  (signed word) print_sword::w#2 ← phi( main::@3/(signed word) print_sword::w#1 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (number) 0
  (bool~) print_sword::$1 ← ! (bool~) print_sword::$0
  if((bool~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  (byte*) print_char_cursor#41 ← phi( print_sword/(byte*) print_char_cursor#48 print_sword::@4/(byte*) print_char_cursor#4 )
  (signed word) print_sword::w#3 ← phi( print_sword/(signed word) print_sword::w#2 print_sword::@4/(signed word) print_sword::w#0 )
  (word~) print_sword::$2 ← ((word)) (signed word) print_sword::w#3
  (word) print_word::w#0 ← (word~) print_sword::$2
  call print_word 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@1
  (byte*) print_char_cursor#23 ← phi( print_sword::@1/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#23
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#5 ← phi( print_sword/(signed word) print_sword::w#2 )
  (byte*) print_char_cursor#42 ← phi( print_sword/(byte*) print_char_cursor#48 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  (signed word) print_sword::w#4 ← phi( print_sword::@2/(signed word) print_sword::w#5 )
  (byte*) print_char_cursor#24 ← phi( print_sword::@2/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#24
  (signed word~) print_sword::$5 ← - (signed word) print_sword::w#4
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$5
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@3
  (byte*) print_char_cursor#25 ← phi( print_sword::@3/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#25
  return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1
  (byte*) print_char_cursor#43 ← phi( print_sword::@1/(byte*) print_char_cursor#41 )
  (word) print_word::w#1 ← phi( print_sword::@1/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#1
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#2 ← phi( print_word/(word) print_word::w#1 )
  (byte*) print_char_cursor#26 ← phi( print_word/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#26
  (byte~) print_word::$2 ← < (word) print_word::w#2
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#27 ← phi( print_word::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#27
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#28 ← phi( print_word::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#28
  return 
  to:@return
@12: scope:[]  from @begin
  (byte*) print_screen#12 ← phi( @begin/(byte*) print_screen#0 )
  (byte*) print_char_cursor#51 ← phi( @begin/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#24 ← phi( @begin/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@19
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) print_char_cursor#44 ← phi( print_word/(byte*) print_char_cursor#43 print_word::@1/(byte*) print_char_cursor#6 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
  (byte) print_char::ch#1 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#29 ← phi( print_byte/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#29
  (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
  (byte) print_char::ch#2 ← *((byte[]) print_hextab#0 + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#30 ← phi( print_byte::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#30
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#31 ← phi( print_byte::@2/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#31
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sword::@2
  (byte*) print_char_cursor#32 ← phi( print_byte/(byte*) print_char_cursor#44 print_byte::@1/(byte*) print_char_cursor#9 print_sword::@2/(byte*) print_char_cursor#42 )
  (byte) print_char::ch#3 ← phi( print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#32) ← (byte) print_char::ch#3
  (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#32
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#33 ← phi( print_char/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#33
  return 
  to:@return
print_cls: scope:[print_cls]  from main::@2
  (byte*) print_screen#1 ← phi( main::@2/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#14 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#34 ← phi( print_cls::@2/(byte*) print_char_cursor#14 )
  (byte*) print_line_cursor#12 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#34
  return 
  to:@return
@19: scope:[]  from @12
  (byte*) print_screen#11 ← phi( @12/(byte*) print_screen#12 )
  (byte*) print_char_cursor#50 ← phi( @12/(byte*) print_char_cursor#51 )
  (byte*) print_line_cursor#23 ← phi( @12/(byte*) print_line_cursor#24 )
  (signed word[]) words#0 ← { (number) -$6000, (number) -$600, (number) -$60, (number) -6, (number) 0, (number) 6, (number) $60, (number) $600, (number) $6000 }
  to:@21
main: scope:[main]  from @21
  (byte*) print_char_cursor#55 ← phi( @21/(byte*) print_char_cursor#47 )
  (byte*) print_line_cursor#28 ← phi( @21/(byte*) print_line_cursor#20 )
  (byte*) print_screen#9 ← phi( @21/(byte*) print_screen#10 )
  (byte) main::i#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte*) print_char_cursor#54 ← phi( main/(byte*) print_char_cursor#55 main::@7/(byte*) print_char_cursor#49 )
  (byte*) print_line_cursor#27 ← phi( main/(byte*) print_line_cursor#28 main::@7/(byte*) print_line_cursor#21 )
  (byte*) print_screen#8 ← phi( main/(byte*) print_screen#9 main::@7/(byte*) print_screen#5 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) sub::idx#0 ← (byte) main::i#2
  (byte) sub::s#0 ← (number) $80
  call sub 
  to:main::@5
main::@5: scope:[main]  from main::@1
  (byte*) print_char_cursor#53 ← phi( main::@1/(byte*) print_char_cursor#54 )
  (byte*) print_line_cursor#26 ← phi( main::@1/(byte*) print_line_cursor#27 )
  (byte*) print_screen#7 ← phi( main::@1/(byte*) print_screen#8 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte) sub::idx#1 ← (byte) main::i#3
  (byte) sub::s#1 ← (number) $40
  call sub 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) print_char_cursor#52 ← phi( main::@5/(byte*) print_char_cursor#53 )
  (byte*) print_line_cursor#25 ← phi( main::@5/(byte*) print_line_cursor#26 )
  (byte*) print_screen#6 ← phi( main::@5/(byte*) print_screen#7 )
  (byte) main::i#4 ← phi( main::@5/(byte) main::i#3 )
  (byte) sub::idx#2 ← (byte) main::i#4
  (byte) sub::s#2 ← (number) $40
  call sub 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) print_char_cursor#49 ← phi( main::@6/(byte*) print_char_cursor#52 )
  (byte*) print_line_cursor#21 ← phi( main::@6/(byte*) print_line_cursor#25 )
  (byte*) print_screen#5 ← phi( main::@6/(byte*) print_screen#6 )
  (byte) main::i#5 ← phi( main::@6/(byte) main::i#4 )
  (byte) main::i#1 ← (byte) main::i#5 + rangenext(0,8)
  (bool~) main::$4 ← (byte) main::i#1 != rangelast(0,8)
  if((bool~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@7
  (byte*) print_char_cursor#45 ← phi( main::@7/(byte*) print_char_cursor#49 )
  (byte*) print_line_cursor#18 ← phi( main::@7/(byte*) print_line_cursor#21 )
  (byte*) print_screen#4 ← phi( main::@7/(byte*) print_screen#5 )
  call print_cls 
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte*) print_char_cursor#35 ← phi( main::@2/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#13 ← phi( main::@2/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#35
  (byte) main::j#0 ← (number) 0
  to:main::@3
main::@3: scope:[main]  from main::@10 main::@8
  (byte*) print_line_cursor#22 ← phi( main::@10/(byte*) print_line_cursor#6 main::@8/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#46 ← phi( main::@10/(byte*) print_char_cursor#18 main::@8/(byte*) print_char_cursor#16 )
  (byte) main::j#2 ← phi( main::@10/(byte) main::j#1 main::@8/(byte) main::j#0 )
  (byte~) main::$8 ← (byte) main::j#2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) print_sword::w#1 ← *((signed word[]) words#0 + (byte~) main::$8)
  call print_sword 
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::j#4 ← phi( main::@3/(byte) main::j#2 )
  (byte*) print_line_cursor#19 ← phi( main::@3/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#36 ← phi( main::@3/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#36
  call print_ln 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) main::j#3 ← phi( main::@9/(byte) main::j#4 )
  (byte*) print_char_cursor#37 ← phi( main::@9/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#14 ← phi( main::@9/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#37
  (byte) main::j#1 ← (byte) main::j#3 + rangenext(0,8)
  (bool~) main::$7 ← (byte) main::j#1 != rangelast(0,8)
  if((bool~) main::$7) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@10
  (byte*) print_char_cursor#38 ← phi( main::@10/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#15 ← phi( main::@10/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#38
  return 
  to:@return
sub: scope:[sub]  from main::@1 main::@5 main::@6
  (byte) sub::s#3 ← phi( main::@1/(byte) sub::s#0 main::@5/(byte) sub::s#1 main::@6/(byte) sub::s#2 )
  (byte) sub::idx#3 ← phi( main::@1/(byte) sub::idx#0 main::@5/(byte) sub::idx#1 main::@6/(byte) sub::idx#2 )
  (byte~) sub::$0 ← (byte) sub::idx#3 * (const byte) SIZEOF_SIGNED_WORD
  *((signed word[]) words#0 + (byte~) sub::$0) ← *((signed word[]) words#0 + (byte~) sub::$0) - (byte) sub::s#3
  to:sub::@return
sub::@return: scope:[sub]  from sub
  return 
  to:@return
@21: scope:[]  from @19
  (byte*) print_screen#10 ← phi( @19/(byte*) print_screen#11 )
  (byte*) print_char_cursor#47 ← phi( @19/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#20 ← phi( @19/(byte*) print_line_cursor#23 )
  call main 
  to:@22
@22: scope:[]  from @21
  (byte*) print_char_cursor#39 ← phi( @21/(byte*) print_char_cursor#19 )
  (byte*) print_line_cursor#16 ← phi( @21/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#39
  to:@end
@end: scope:[]  from @22

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @12
(label) @19
(label) @21
(label) @22
(label) @begin
(label) @end
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(void()) main()
(bool~) main::$4
(bool~) main::$7
(byte~) main::$8
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::j#4
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#11
(byte*) print_screen#12
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(bool~) print_sword::$1
(word~) print_sword::$2
(signed word~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(void()) sub((byte) sub::idx , (byte) sub::s)
(byte~) sub::$0
(label) sub::@return
(byte) sub::idx
(byte) sub::idx#0
(byte) sub::idx#1
(byte) sub::idx#2
(byte) sub::idx#3
(byte) sub::s
(byte) sub::s#0
(byte) sub::s#1
(byte) sub::s#2
(byte) sub::s#3
(signed word[]) words
(signed word[]) words#0

Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
Adding number conversion cast (unumber) 0 in (byte) main::i#0 ← (number) 0
Adding number conversion cast (unumber) $80 in (byte) sub::s#0 ← (number) $80
Adding number conversion cast (unumber) $40 in (byte) sub::s#1 ← (number) $40
Adding number conversion cast (unumber) $40 in (byte) sub::s#2 ← (number) $40
Adding number conversion cast (unumber) 0 in (byte) main::j#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (signed word) to elements in (signed word[]) words#0 ← { (signed word)(number) -$6000, (signed word)(number) -$600, (signed word)(number) -$60, (signed word)(number) -6, (signed word)(number) 0, (signed word)(number) 6, (signed word)(number) $60, (signed word)(number) $600, (signed word)(number) $6000 }
Successful SSA optimization PassNAddArrayNumberTypeConversions
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word~) print_sword::$2 ← (word)(signed word) print_sword::w#3
Inlining cast (byte) main::i#0 ← (unumber)(number) 0
Inlining cast (byte) sub::s#0 ← (unumber)(number) $80
Inlining cast (byte) sub::s#1 ← (unumber)(number) $40
Inlining cast (byte) sub::s#2 ← (unumber)(number) $40
Inlining cast (byte) main::j#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast -$6000
Simplifying constant integer cast -$600
Simplifying constant integer cast -$60
Simplifying constant integer cast -6
Simplifying constant integer cast 0
Simplifying constant integer cast 6
Simplifying constant integer cast $60
Simplifying constant integer cast $600
Simplifying constant integer cast $6000
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f
Inversing boolean not [17] (bool~) print_sword::$1 ← (signed word) print_sword::w#2 >= (signed byte) 0 from [16] (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (signed byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#24 (byte*) print_char_cursor#51 (byte*) print_screen#12 (byte*) print_line_cursor#23 (byte*) print_char_cursor#50 (byte*) print_screen#11 (byte*) print_line_cursor#20 (byte*) print_char_cursor#47 (byte*) print_screen#10 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#10 (byte*) print_char_cursor#1 (byte*) print_line_cursor#11 (byte*) print_char_cursor#22 (byte*) print_line_cursor#2 (byte*) print_char_cursor#2 
Alias (word) print_word::w#0 = (word~) print_sword::$2 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#3 (byte*) print_char_cursor#25 (byte*) print_char_cursor#5 
Alias (byte*) print_char_cursor#42 = (byte*) print_char_cursor#48 
Alias (signed word) print_sword::w#2 = (signed word) print_sword::w#5 (signed word) print_sword::w#4 
Alias (byte*) print_char_cursor#24 = (byte*) print_char_cursor#4 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$5 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#1 = (word) print_word::w#2 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#6 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#7 (byte*) print_char_cursor#28 (byte*) print_char_cursor#8 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#9 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#30 (byte*) print_char_cursor#31 (byte*) print_char_cursor#11 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#33 (byte*) print_char_cursor#13 
Alias (byte*) print_line_cursor#12 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#14 (byte*) print_char_cursor#34 (byte*) print_line_cursor#4 (byte*) print_char_cursor#15 
Alias (byte) main::i#2 = (byte) main::i#3 (byte) main::i#4 (byte) main::i#5 
Alias (byte*) print_screen#4 = (byte*) print_screen#7 (byte*) print_screen#8 (byte*) print_screen#6 (byte*) print_screen#5 
Alias (byte*) print_line_cursor#18 = (byte*) print_line_cursor#26 (byte*) print_line_cursor#27 (byte*) print_line_cursor#25 (byte*) print_line_cursor#21 
Alias (byte*) print_char_cursor#45 = (byte*) print_char_cursor#53 (byte*) print_char_cursor#54 (byte*) print_char_cursor#52 (byte*) print_char_cursor#49 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#35 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#22 
Alias (byte) main::j#2 = (byte) main::j#4 (byte) main::j#3 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#36 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#6 (byte*) print_line_cursor#15 (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#37 (byte*) print_char_cursor#38 (byte*) print_char_cursor#19 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#39 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_char_cursor#21
Self Phi Eliminated (byte*) print_line_cursor#12
Self Phi Eliminated (byte*) print_screen#4
Self Phi Eliminated (byte*) print_line_cursor#18
Self Phi Eliminated (byte*) print_char_cursor#45
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#40 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#40
Identical Phi Values (signed word) print_sword::w#2 (signed word) print_sword::w#1
Identical Phi Values (byte*) print_char_cursor#42 (byte*) print_char_cursor#46
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#27
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#12
Identical Phi Values (word) print_word::w#1 (word) print_word::w#0
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_char_cursor#41
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_screen#1 (byte*) print_screen#4
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_screen#1
Identical Phi Values (byte*) print_screen#9 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#28 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#55 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_screen#4 (byte*) print_screen#9
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#28
Identical Phi Values (byte*) print_char_cursor#45 (byte*) print_char_cursor#55
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#14
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#18
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_ln::$1 [8] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1
Simple Condition (bool~) print_sword::$1 [18] if((signed word) print_sword::w#1>=(signed byte) 0) goto print_sword::@1
Simple Condition (bool~) print_cls::$1 [78] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) main::$4 [105] if((byte) main::i#1!=rangelast(0,8)) goto main::@1
Simple Condition (bool~) main::$7 [124] if((byte) main::j#1!=rangelast(0,8)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [87] (signed word[]) words#0 ← { (signed word) -$6000, (signed word) -$600, (signed word) -$60, (signed word) -6, (signed word) 0, (signed word) 6, (signed word) $60, (signed word) $600, (signed word) $6000 }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte[]) print_hextab#0 = $0
Constant (const signed word[]) words#0 = { -$6000, -$600, -$60, -6, 0, 6, $60, $600, $6000 }
Constant (const byte) main::i#0 = 0
Constant (const byte) sub::s#0 = $80
Constant (const byte) sub::s#1 = $40
Constant (const byte) sub::s#2 = $40
Constant (const byte) main::j#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [103] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [105] if(main::i#1!=rangelast(0,8)) goto main::@1 to (number) 9
Resolved ranged next value [122] main::j#1 ← ++ main::j#2 to ++
Resolved ranged comparison value [124] if(main::j#1!=rangelast(0,8)) goto main::@3 to (number) 9
Adding number conversion cast (unumber) 9 in if((byte) main::i#1!=(number) 9) goto main::@1
Adding number conversion cast (unumber) 9 in if((byte) main::j#1!=(number) 9) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 9
Simplifying constant integer cast 9
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 9
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [31] (byte*~) print_cls::$0 ← (const byte*) print_line_cursor#0 + (word) $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [6] (word) print_word::w#0 ← (word)(signed word) print_sword::w#3 keeping print_sword::w#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [44] (byte~) main::$8 ← (byte) main::j#2 * (const byte) SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [52] (byte~) sub::$0 ← (byte) sub::idx#3 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) sub::s#0
Inlining constant with var siblings (const byte) sub::s#1
Inlining constant with var siblings (const byte) sub::s#2
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined print_cls::$0 = (byte*) 1024+(word) $3e8
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined main::i#0 = (byte) 0
Constant inlined sub::s#0 = (byte) $80
Constant inlined sub::s#1 = (byte) $40
Constant inlined sub::s#2 = (byte) $40
Constant inlined main::j#0 = (byte) 0
Constant inlined print_cls::sc#0 = (byte*) 1024
Constant inlined $0 = (const byte[]) print_hextab#0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_sword::@5(between print_sword and print_sword::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting main::@11(between main::@7 and main::@1)
Added new block during phi lifting main::@12(between main::@10 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @12
Adding NOP phi() at start of @19
Adding NOP phi() at start of @21
Adding NOP phi() at start of @22
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_sword::@3
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@2
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to sub:11 sub:14 sub:17 print_cls:21 print_sword:26 print_ln:28 
Calls in [print_sword] to print_char:45 print_word:50 
Calls in [print_word] to print_byte:58 print_byte:62 
Calls in [print_byte] to print_char:70 print_char:75 

Created 14 initial phi equivalence classes
Coalesced [10] sub::idx#4 ← sub::idx#0
Coalesced [13] sub::idx#5 ← sub::idx#1
Coalesced [16] sub::idx#6 ← sub::idx#2
Coalesced [32] main::j#5 ← main::j#1
Not coalescing [33] print_char_cursor#63 ← print_line_cursor#1
Coalesced [34] print_line_cursor#31 ← print_line_cursor#1
Coalesced [35] main::i#6 ← main::i#1
Coalesced [36] print_line_cursor#29 ← print_line_cursor#19
Coalesced (already) [42] print_line_cursor#30 ← print_line_cursor#1
Coalesced [44] print_char_cursor#62 ← print_char_cursor#46
Coalesced [47] print_sword::w#7 ← print_sword::w#0
Coalesced [48] print_char_cursor#57 ← print_char_cursor#12
Coalesced [53] print_sword::w#6 ← print_sword::w#1
Coalesced [54] print_char_cursor#56 ← print_char_cursor#46
Coalesced [56] print_byte::b#4 ← print_byte::b#0
Coalesced [57] print_char_cursor#58 ← print_char_cursor#41
Coalesced [60] print_byte::b#5 ← print_byte::b#1
Coalesced (already) [61] print_char_cursor#59 ← print_char_cursor#12
Coalesced [68] print_char::ch#4 ← print_char::ch#1
Coalesced (already) [69] print_char_cursor#60 ← print_char_cursor#44
Coalesced [73] print_char::ch#5 ← print_char::ch#2
Coalesced (already) [74] print_char_cursor#61 ← print_char_cursor#12
Coalesced [89] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 10 phi equivalence classes
Culled Empty Block (label) @12
Culled Empty Block (label) @19
Culled Empty Block (label) @22
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@11
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sword::@3
Culled Empty Block (label) print_sword::@5
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) print_cls::@3
Renumbering block @21 to @1
Renumbering block print_sword::@4 to print_sword::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block main::@9 to main::@7
Renumbering block main::@10 to main::@8
Renumbering block main::@12 to main::@9
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_sword::@2
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@6/(byte) main::i#1 )
  [6] (byte) sub::idx#0 ← (byte) main::i#2
  [7] call sub 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [8] (byte) sub::idx#1 ← (byte) main::i#2
  [9] call sub 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] (byte) sub::idx#2 ← (byte) main::i#2
  [11] call sub 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [12] (byte) main::i#1 ← ++ (byte) main::i#2
  [13] if((byte) main::i#1!=(byte) 9) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@6
  [14] phi()
  [15] call print_cls 
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@9
  [16] (byte*) print_line_cursor#19 ← phi( main::@9/(byte*) print_line_cursor#1 main::@2/(byte*) 1024 )
  [16] (byte*) print_char_cursor#46 ← phi( main::@9/(byte*~) print_char_cursor#63 main::@2/(byte*) 1024 )
  [16] (byte) main::j#2 ← phi( main::@9/(byte) main::j#1 main::@2/(byte) 0 )
  [17] (byte~) main::$8 ← (byte) main::j#2 << (byte) 1
  [18] (signed word) print_sword::w#1 ← *((const signed word[]) words#0 + (byte~) main::$8)
  [19] call print_sword 
  to:main::@7
main::@7: scope:[main]  from main::@3
  [20] phi()
  [21] call print_ln 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [22] (byte) main::j#1 ← ++ (byte) main::j#2
  [23] if((byte) main::j#1!=(byte) 9) goto main::@9
  to:main::@return
main::@return: scope:[main]  from main::@8
  [24] return 
  to:@return
main::@9: scope:[main]  from main::@8
  [25] (byte*~) print_char_cursor#63 ← (byte*) print_line_cursor#1
  to:main::@3
print_ln: scope:[print_ln]  from main::@7
  [26] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [27] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#19 print_ln::@1/(byte*) print_line_cursor#1 )
  [28] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28
  [29] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [30] return 
  to:@return
print_sword: scope:[print_sword]  from main::@3
  [31] if((signed word) print_sword::w#1>=(signed byte) 0) goto print_sword::@1
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [32] phi()
  [33] call print_char 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@2
  [34] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@3
  [35] (byte*) print_char_cursor#41 ← phi( print_sword/(byte*) print_char_cursor#46 print_sword::@3/(byte*) print_char_cursor#12 )
  [35] (signed word) print_sword::w#3 ← phi( print_sword/(signed word) print_sword::w#1 print_sword::@3/(signed word) print_sword::w#0 )
  [36] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [37] return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1
  [38] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3
  [39] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [40] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3
  [41] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [42] return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [43] (byte*) print_char_cursor#44 ← phi( print_word/(byte*) print_char_cursor#41 print_word::@1/(byte*) print_char_cursor#12 )
  [43] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [44] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4
  [45] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [46] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [47] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
  [48] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [49] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [50] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sword::@2
  [51] (byte*) print_char_cursor#32 ← phi( print_byte/(byte*) print_char_cursor#44 print_byte::@1/(byte*) print_char_cursor#12 print_sword::@2/(byte*) print_char_cursor#46 )
  [51] (byte) print_char::ch#3 ← phi( print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) '-' )
  [52] *((byte*) print_char_cursor#32) ← (byte) print_char::ch#3
  [53] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#32
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [54] return 
  to:@return
print_cls: scope:[print_cls]  from main::@2
  [55] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [56] (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) 1024 print_cls::@1/(byte*) print_cls::sc#1 )
  [57] *((byte*) print_cls::sc#2) ← (byte) ' '
  [58] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [59] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [60] return 
  to:@return
sub: scope:[sub]  from main::@1 main::@4 main::@5
  [61] (byte) sub::s#3 ← phi( main::@1/(byte) $80 main::@4/(byte) $40 main::@5/(byte) $40 )
  [61] (byte) sub::idx#3 ← phi( main::@1/(byte) sub::idx#0 main::@4/(byte) sub::idx#1 main::@5/(byte) sub::idx#2 )
  [62] (byte~) sub::$0 ← (byte) sub::idx#3 << (byte) 1
  [63] *((const signed word[]) words#0 + (byte~) sub::$0) ← *((const signed word[]) words#0 + (byte~) sub::$0) - (byte) sub::s#3
  to:sub::@return
sub::@return: scope:[sub]  from sub
  [64] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$8 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 7.857142857142857
(byte) main::j
(byte) main::j#1 11.0
(byte) main::j#2 5.5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 4.0
(byte) print_char::ch#3 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 5.190476190476189
(byte*) print_char_cursor#32 5.0
(byte*) print_char_cursor#41 3.0
(byte*) print_char_cursor#44 2.0
(byte*) print_char_cursor#46 3.0
(byte*~) print_char_cursor#63 22.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 46.42857142857143
(byte*) print_line_cursor#19 2.1666666666666665
(byte*) print_line_cursor#9 204.0
(void()) print_ln()
(byte*) print_screen
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 4.25
(signed word) print_sword::w#3 1.3333333333333333
(void()) print_word((word) print_word::w)
(word) print_word::w
(void()) sub((byte) sub::idx , (byte) sub::s)
(byte~) sub::$0 6.0
(byte) sub::idx
(byte) sub::idx#0 22.0
(byte) sub::idx#1 22.0
(byte) sub::idx#2 22.0
(byte) sub::idx#3 35.0
(byte) sub::s
(byte) sub::s#3 1.0
(signed word[]) words

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
[ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
[ print_char_cursor#32 print_char_cursor#44 print_char_cursor#41 print_char_cursor#46 print_char_cursor#63 print_char_cursor#12 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ]
[ sub::s#3 ]
Added variable main::$8 to zero page equivalence class [ main::$8 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable sub::$0 to zero page equivalence class [ sub::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
[ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
[ print_char_cursor#32 print_char_cursor#44 print_char_cursor#41 print_char_cursor#46 print_char_cursor#63 print_char_cursor#12 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ]
[ sub::s#3 ]
[ main::$8 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ sub::$0 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Allocated zp ZP_WORD:4 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
Allocated zp ZP_WORD:6 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
Allocated zp ZP_BYTE:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_BYTE:9 [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
Allocated zp ZP_WORD:10 [ print_char_cursor#32 print_char_cursor#44 print_char_cursor#41 print_char_cursor#46 print_char_cursor#63 print_char_cursor#12 ]
Allocated zp ZP_WORD:12 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:14 [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ]
Allocated zp ZP_BYTE:15 [ sub::s#3 ]
Allocated zp ZP_BYTE:16 [ main::$8 ]
Allocated zp ZP_BYTE:17 [ print_byte::$0 ]
Allocated zp ZP_BYTE:18 [ print_byte::$2 ]
Allocated zp ZP_BYTE:19 [ sub::$0 ]

INITIAL ASM
//SEG0 File Comments
// Tests that signed indexed subtract works as intended
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_line_cursor = 4
  .label print_char_cursor = $a
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label _8 = $10
    .label i = 2
    .label j = 3
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG13 [5] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte) sub::idx#0 ← (byte) main::i#2 -- vbuz1=vbuz2 
    lda i
    sta sub.idx
  //SEG17 [7] call sub 
  //SEG18 [61] phi from main::@1 to sub [phi:main::@1->sub]
  sub_from_b1:
  //SEG19 [61] phi (byte) sub::s#3 = (byte) $80 [phi:main::@1->sub#0] -- vbuz1=vbuc1 
    lda #$80
    sta sub.s
  //SEG20 [61] phi (byte) sub::idx#3 = (byte) sub::idx#0 [phi:main::@1->sub#1] -- register_copy 
    jsr sub
    jmp b4
  //SEG21 main::@4
  b4:
  //SEG22 [8] (byte) sub::idx#1 ← (byte) main::i#2 -- vbuz1=vbuz2 
    lda i
    sta sub.idx
  //SEG23 [9] call sub 
  //SEG24 [61] phi from main::@4 to sub [phi:main::@4->sub]
  sub_from_b4:
  //SEG25 [61] phi (byte) sub::s#3 = (byte) $40 [phi:main::@4->sub#0] -- vbuz1=vbuc1 
    lda #$40
    sta sub.s
  //SEG26 [61] phi (byte) sub::idx#3 = (byte) sub::idx#1 [phi:main::@4->sub#1] -- register_copy 
    jsr sub
    jmp b5
  //SEG27 main::@5
  b5:
  //SEG28 [10] (byte) sub::idx#2 ← (byte) main::i#2 -- vbuz1=vbuz2 
    lda i
    sta sub.idx
  //SEG29 [11] call sub 
  //SEG30 [61] phi from main::@5 to sub [phi:main::@5->sub]
  sub_from_b5:
  //SEG31 [61] phi (byte) sub::s#3 = (byte) $40 [phi:main::@5->sub#0] -- vbuz1=vbuc1 
    lda #$40
    sta sub.s
  //SEG32 [61] phi (byte) sub::idx#3 = (byte) sub::idx#2 [phi:main::@5->sub#1] -- register_copy 
    jsr sub
    jmp b6
  //SEG33 main::@6
  b6:
  //SEG34 [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG35 [13] if((byte) main::i#1!=(byte) 9) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp i
    bne b1_from_b6
  //SEG36 [14] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
    jmp b2
  //SEG37 main::@2
  b2:
  //SEG38 [15] call print_cls 
  //SEG39 [55] phi from main::@2 to print_cls [phi:main::@2->print_cls]
  print_cls_from_b2:
    jsr print_cls
  //SEG40 [16] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG41 [16] phi (byte*) print_line_cursor#19 = (byte*) 1024 [phi:main::@2->main::@3#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG42 [16] phi (byte*) print_char_cursor#46 = (byte*) 1024 [phi:main::@2->main::@3#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG43 [16] phi (byte) main::j#2 = (byte) 0 [phi:main::@2->main::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b3
  //SEG44 main::@3
  b3:
  //SEG45 [17] (byte~) main::$8 ← (byte) main::j#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda j
    asl
    sta _8
  //SEG46 [18] (signed word) print_sword::w#1 ← *((const signed word[]) words#0 + (byte~) main::$8) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy _8
    lda words,y
    sta print_sword.w
    lda words+1,y
    sta print_sword.w+1
  //SEG47 [19] call print_sword 
    jsr print_sword
  //SEG48 [20] phi from main::@3 to main::@7 [phi:main::@3->main::@7]
  b7_from_b3:
    jmp b7
  //SEG49 main::@7
  b7:
  //SEG50 [21] call print_ln 
  //SEG51 [26] phi from main::@7 to print_ln [phi:main::@7->print_ln]
  print_ln_from_b7:
    jsr print_ln
    jmp b8
  //SEG52 main::@8
  b8:
  //SEG53 [22] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG54 [23] if((byte) main::j#1!=(byte) 9) goto main::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp j
    bne b9
    jmp breturn
  //SEG55 main::@return
  breturn:
  //SEG56 [24] return 
    rts
  //SEG57 main::@9
  b9:
  //SEG58 [25] (byte*~) print_char_cursor#63 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG59 [16] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
  b3_from_b9:
  //SEG60 [16] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@9->main::@3#0] -- register_copy 
  //SEG61 [16] phi (byte*) print_char_cursor#46 = (byte*~) print_char_cursor#63 [phi:main::@9->main::@3#1] -- register_copy 
  //SEG62 [16] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@9->main::@3#2] -- register_copy 
    jmp b3
}
//SEG63 print_ln
// Print a newline
print_ln: {
  //SEG64 [27] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG65 [27] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG66 print_ln::@1
  b1:
  //SEG67 [28] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG68 [29] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG69 print_ln::@return
  breturn:
  //SEG70 [30] return 
    rts
}
//SEG71 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(6) w)
print_sword: {
    .label w = 6
  //SEG72 [31] if((signed word) print_sword::w#1>=(signed byte) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG73 [32] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG74 print_sword::@2
  b2:
  //SEG75 [33] call print_char 
  //SEG76 [51] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG77 [51] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#46 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG78 [51] phi (byte) print_char::ch#3 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b3
  //SEG79 print_sword::@3
  b3:
  //SEG80 [34] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG81 [35] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  b1_from_print_sword:
  b1_from_b3:
  //SEG82 [35] phi (byte*) print_char_cursor#41 = (byte*) print_char_cursor#46 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG83 [35] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG84 print_sword::@1
  b1:
  //SEG85 [36] call print_word 
    jsr print_word
    jmp breturn
  //SEG86 print_sword::@return
  breturn:
  //SEG87 [37] return 
    rts
}
//SEG88 print_word
// Print a word as HEX
print_word: {
  //SEG89 [38] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG90 [39] call print_byte 
  //SEG91 [43] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG92 [43] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#41 [phi:print_word->print_byte#0] -- register_copy 
  //SEG93 [43] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG94 print_word::@1
  b1:
  //SEG95 [40] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG96 [41] call print_byte 
  //SEG97 [43] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG98 [43] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG99 [43] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG100 print_word::@return
  breturn:
  //SEG101 [42] return 
    rts
}
//SEG102 print_byte
// Print a byte as HEX
// print_byte(byte zeropage(8) b)
print_byte: {
    .label _0 = $11
    .label _2 = $12
    .label b = 8
  //SEG103 [44] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG104 [45] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG105 [46] call print_char 
  //SEG106 [51] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG107 [51] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#44 [phi:print_byte->print_char#0] -- register_copy 
  //SEG108 [51] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG109 print_byte::@1
  b1:
  //SEG110 [47] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG111 [48] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG112 [49] call print_char 
  //SEG113 [51] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG114 [51] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG115 [51] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG116 print_byte::@return
  breturn:
  //SEG117 [50] return 
    rts
}
//SEG118 print_char
// Print a single char
// print_char(byte zeropage(9) ch)
print_char: {
    .label ch = 9
  //SEG119 [52] *((byte*) print_char_cursor#32) ← (byte) print_char::ch#3 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG120 [53] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#32 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG121 print_char::@return
  breturn:
  //SEG122 [54] return 
    rts
}
//SEG123 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $c
  //SEG124 [56] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG125 [56] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG126 [56] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG127 [56] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG128 print_cls::@1
  b1:
  //SEG129 [57] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG130 [58] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG131 [59] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG132 print_cls::@return
  breturn:
  //SEG133 [60] return 
    rts
}
//SEG134 sub
// sub(byte zeropage($e) idx, byte zeropage($f) s)
sub: {
    .label _0 = $13
    .label idx = $e
    .label s = $f
  //SEG135 [62] (byte~) sub::$0 ← (byte) sub::idx#3 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda idx
    asl
    sta _0
  //SEG136 [63] *((const signed word[]) words#0 + (byte~) sub::$0) ← *((const signed word[]) words#0 + (byte~) sub::$0) - (byte) sub::s#3 -- pwsc1_derefidx_vbuz1=pwsc1_derefidx_vbuz1_minus_vbuz2 
    ldx _0
    sec
    lda words,x
    sbc s
    sta words,x
    bcs !+
    dec words+1,x
  !:
    jmp breturn
  //SEG137 sub::@return
  breturn:
  //SEG138 [64] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  words: .word -$6000, -$600, -$60, -6, 0, 6, $60, $600, $6000

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [17] (byte~) main::$8 ← (byte) main::j#2 << (byte) 1 [ main::j#2 print_char_cursor#46 print_line_cursor#19 main::$8 ] ( main:2 [ main::j#2 print_char_cursor#46 print_line_cursor#19 main::$8 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Statement [18] (signed word) print_sword::w#1 ← *((const signed word[]) words#0 + (byte~) main::$8) [ main::j#2 print_char_cursor#46 print_line_cursor#19 print_sword::w#1 ] ( main:2 [ main::j#2 print_char_cursor#46 print_line_cursor#19 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [25] (byte*~) print_char_cursor#63 ← (byte*) print_line_cursor#1 [ main::j#1 print_char_cursor#63 print_line_cursor#1 ] ( main:2 [ main::j#1 print_char_cursor#63 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [28] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:21 [ main::j#2 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [29] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:21 [ main::j#2 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [31] if((signed word) print_sword::w#1>=(signed byte) 0) goto print_sword::@1 [ print_char_cursor#46 print_sword::w#1 ] ( main:2::print_sword:19 [ main::j#2 print_line_cursor#19 print_char_cursor#46 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [34] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 [ print_char_cursor#12 print_sword::w#0 ] ( main:2::print_sword:19 [ main::j#2 print_line_cursor#19 print_char_cursor#12 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [38] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3 [ print_sword::w#3 print_char_cursor#41 print_byte::b#0 ] ( main:2::print_sword:19::print_word:36 [ main::j#2 print_line_cursor#19 print_sword::w#3 print_char_cursor#41 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [40] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3 [ print_char_cursor#12 print_byte::b#1 ] ( main:2::print_sword:19::print_word:36 [ main::j#2 print_line_cursor#19 print_char_cursor#12 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [44] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_byte::b#2 print_char_cursor#44 print_byte::$0 ] ( main:2::print_sword:19::print_word:36::print_byte:39 [ main::j#2 print_line_cursor#19 print_sword::w#3 print_byte::b#2 print_char_cursor#44 print_byte::$0 ] main:2::print_sword:19::print_word:36::print_byte:41 [ main::j#2 print_line_cursor#19 print_byte::b#2 print_char_cursor#44 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [47] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_sword:19::print_word:36::print_byte:39 [ main::j#2 print_line_cursor#19 print_sword::w#3 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:19::print_word:36::print_byte:41 [ main::j#2 print_line_cursor#19 print_char_cursor#12 print_byte::$2 ] ) always clobbers reg byte a 
Statement [52] *((byte*) print_char_cursor#32) ← (byte) print_char::ch#3 [ print_char_cursor#32 ] ( main:2::print_sword:19::print_char:33 [ main::j#2 print_line_cursor#19 print_sword::w#1 print_char_cursor#32 ] main:2::print_sword:19::print_word:36::print_byte:39::print_char:46 [ main::j#2 print_line_cursor#19 print_sword::w#3 print_byte::b#2 print_char_cursor#32 ] main:2::print_sword:19::print_word:36::print_byte:41::print_char:46 [ main::j#2 print_line_cursor#19 print_byte::b#2 print_char_cursor#32 ] main:2::print_sword:19::print_word:36::print_byte:39::print_char:49 [ main::j#2 print_line_cursor#19 print_sword::w#3 print_char_cursor#32 ] main:2::print_sword:19::print_word:36::print_byte:41::print_char:49 [ main::j#2 print_line_cursor#19 print_char_cursor#32 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [57] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:15 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [59] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:15 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [62] (byte~) sub::$0 ← (byte) sub::idx#3 << (byte) 1 [ sub::s#3 sub::$0 ] ( main:2::sub:7 [ main::i#2 sub::s#3 sub::$0 ] main:2::sub:9 [ main::i#2 sub::s#3 sub::$0 ] main:2::sub:11 [ main::i#2 sub::s#3 sub::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ sub::s#3 ]
Statement [63] *((const signed word[]) words#0 + (byte~) sub::$0) ← *((const signed word[]) words#0 + (byte~) sub::$0) - (byte) sub::s#3 [ ] ( main:2::sub:7 [ main::i#2 ] main:2::sub:9 [ main::i#2 ] main:2::sub:11 [ main::i#2 ] ) always clobbers reg byte a 
Statement [17] (byte~) main::$8 ← (byte) main::j#2 << (byte) 1 [ main::j#2 print_char_cursor#46 print_line_cursor#19 main::$8 ] ( main:2 [ main::j#2 print_char_cursor#46 print_line_cursor#19 main::$8 ] ) always clobbers reg byte a 
Statement [18] (signed word) print_sword::w#1 ← *((const signed word[]) words#0 + (byte~) main::$8) [ main::j#2 print_char_cursor#46 print_line_cursor#19 print_sword::w#1 ] ( main:2 [ main::j#2 print_char_cursor#46 print_line_cursor#19 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [25] (byte*~) print_char_cursor#63 ← (byte*) print_line_cursor#1 [ main::j#1 print_char_cursor#63 print_line_cursor#1 ] ( main:2 [ main::j#1 print_char_cursor#63 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [28] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:21 [ main::j#2 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [29] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:21 [ main::j#2 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [31] if((signed word) print_sword::w#1>=(signed byte) 0) goto print_sword::@1 [ print_char_cursor#46 print_sword::w#1 ] ( main:2::print_sword:19 [ main::j#2 print_line_cursor#19 print_char_cursor#46 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [34] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 [ print_char_cursor#12 print_sword::w#0 ] ( main:2::print_sword:19 [ main::j#2 print_line_cursor#19 print_char_cursor#12 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [38] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3 [ print_sword::w#3 print_char_cursor#41 print_byte::b#0 ] ( main:2::print_sword:19::print_word:36 [ main::j#2 print_line_cursor#19 print_sword::w#3 print_char_cursor#41 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [40] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3 [ print_char_cursor#12 print_byte::b#1 ] ( main:2::print_sword:19::print_word:36 [ main::j#2 print_line_cursor#19 print_char_cursor#12 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [44] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_byte::b#2 print_char_cursor#44 print_byte::$0 ] ( main:2::print_sword:19::print_word:36::print_byte:39 [ main::j#2 print_line_cursor#19 print_sword::w#3 print_byte::b#2 print_char_cursor#44 print_byte::$0 ] main:2::print_sword:19::print_word:36::print_byte:41 [ main::j#2 print_line_cursor#19 print_byte::b#2 print_char_cursor#44 print_byte::$0 ] ) always clobbers reg byte a 
Statement [47] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_sword:19::print_word:36::print_byte:39 [ main::j#2 print_line_cursor#19 print_sword::w#3 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:19::print_word:36::print_byte:41 [ main::j#2 print_line_cursor#19 print_char_cursor#12 print_byte::$2 ] ) always clobbers reg byte a 
Statement [52] *((byte*) print_char_cursor#32) ← (byte) print_char::ch#3 [ print_char_cursor#32 ] ( main:2::print_sword:19::print_char:33 [ main::j#2 print_line_cursor#19 print_sword::w#1 print_char_cursor#32 ] main:2::print_sword:19::print_word:36::print_byte:39::print_char:46 [ main::j#2 print_line_cursor#19 print_sword::w#3 print_byte::b#2 print_char_cursor#32 ] main:2::print_sword:19::print_word:36::print_byte:41::print_char:46 [ main::j#2 print_line_cursor#19 print_byte::b#2 print_char_cursor#32 ] main:2::print_sword:19::print_word:36::print_byte:39::print_char:49 [ main::j#2 print_line_cursor#19 print_sword::w#3 print_char_cursor#32 ] main:2::print_sword:19::print_word:36::print_byte:41::print_char:49 [ main::j#2 print_line_cursor#19 print_char_cursor#32 ] ) always clobbers reg byte y 
Statement [57] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:15 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [59] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:15 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [62] (byte~) sub::$0 ← (byte) sub::idx#3 << (byte) 1 [ sub::s#3 sub::$0 ] ( main:2::sub:7 [ main::i#2 sub::s#3 sub::$0 ] main:2::sub:9 [ main::i#2 sub::s#3 sub::$0 ] main:2::sub:11 [ main::i#2 sub::s#3 sub::$0 ] ) always clobbers reg byte a 
Statement [63] *((const signed word[]) words#0 + (byte~) sub::$0) ← *((const signed word[]) words#0 + (byte~) sub::$0) - (byte) sub::s#3 [ ] ( main:2::sub:7 [ main::i#2 ] main:2::sub:9 [ main::i#2 ] main:2::sub:11 [ main::i#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::j#2 main::j#1 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_WORD:4 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_WORD:6 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_BYTE:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:8 , reg byte x , 
Potential registers zp ZP_BYTE:9 [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:10 [ print_char_cursor#32 print_char_cursor#44 print_char_cursor#41 print_char_cursor#46 print_char_cursor#63 print_char_cursor#12 ] : zp ZP_WORD:10 , 
Potential registers zp ZP_WORD:12 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:12 , 
Potential registers zp ZP_BYTE:14 [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ sub::s#3 ] : zp ZP_BYTE:15 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ main::$8 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ print_byte::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ print_byte::$2 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ sub::$0 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 252.6: zp ZP_WORD:4 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] 40.19: zp ZP_WORD:10 [ print_char_cursor#32 print_char_cursor#44 print_char_cursor#41 print_char_cursor#46 print_char_cursor#63 print_char_cursor#12 ] 
Uplift Scope [sub] 101: zp ZP_BYTE:14 [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ] 6: zp ZP_BYTE:19 [ sub::$0 ] 1: zp ZP_BYTE:15 [ sub::s#3 ] 
Uplift Scope [main] 24.36: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:16 [ main::$8 ] 16.5: zp ZP_BYTE:3 [ main::j#2 main::j#1 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:12 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_byte] 10: zp ZP_BYTE:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:17 [ print_byte::$0 ] 4: zp ZP_BYTE:18 [ print_byte::$2 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:9 [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ] 
Uplift Scope [print_sword] 9.58: zp ZP_WORD:6 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] 
Uplift Scope [print_ln] 
Uplift Scope [print_word] 

Uplifting [] best 6545 combination zp ZP_WORD:4 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] zp ZP_WORD:10 [ print_char_cursor#32 print_char_cursor#44 print_char_cursor#41 print_char_cursor#46 print_char_cursor#63 print_char_cursor#12 ] 
Uplifting [sub] best 6442 combination reg byte a [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ] reg byte a [ sub::$0 ] reg byte x [ sub::s#3 ] 
Uplifting [main] best 6182 combination reg byte y [ main::i#2 main::i#1 ] reg byte a [ main::$8 ] reg byte x [ main::j#2 main::j#1 ] 
Uplifting [print_cls] best 6182 combination zp ZP_WORD:12 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_byte] best 6174 combination zp ZP_BYTE:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_char] best 6162 combination reg byte a [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ] 
Uplifting [print_sword] best 6162 combination zp ZP_WORD:6 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] 
Uplifting [print_ln] best 6162 combination 
Uplifting [print_word] best 6162 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Uplifting [print_byte] best 6162 combination zp ZP_BYTE:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 
Allocated (was zp ZP_WORD:4) zp ZP_WORD:2 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
Allocated (was zp ZP_WORD:6) zp ZP_WORD:4 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
Allocated (was zp ZP_BYTE:8) zp ZP_BYTE:6 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated (was zp ZP_WORD:10) zp ZP_WORD:7 [ print_char_cursor#32 print_char_cursor#44 print_char_cursor#41 print_char_cursor#46 print_char_cursor#63 print_char_cursor#12 ]
Allocated (was zp ZP_WORD:12) zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests that signed indexed subtract works as intended
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_line_cursor = 2
  .label print_char_cursor = 7
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG13 [5] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte) sub::idx#0 ← (byte) main::i#2 -- vbuaa=vbuyy 
    tya
  //SEG17 [7] call sub 
  //SEG18 [61] phi from main::@1 to sub [phi:main::@1->sub]
  sub_from_b1:
  //SEG19 [61] phi (byte) sub::s#3 = (byte) $80 [phi:main::@1->sub#0] -- vbuxx=vbuc1 
    ldx #$80
  //SEG20 [61] phi (byte) sub::idx#3 = (byte) sub::idx#0 [phi:main::@1->sub#1] -- register_copy 
    jsr sub
    jmp b4
  //SEG21 main::@4
  b4:
  //SEG22 [8] (byte) sub::idx#1 ← (byte) main::i#2 -- vbuaa=vbuyy 
    tya
  //SEG23 [9] call sub 
  //SEG24 [61] phi from main::@4 to sub [phi:main::@4->sub]
  sub_from_b4:
  //SEG25 [61] phi (byte) sub::s#3 = (byte) $40 [phi:main::@4->sub#0] -- vbuxx=vbuc1 
    ldx #$40
  //SEG26 [61] phi (byte) sub::idx#3 = (byte) sub::idx#1 [phi:main::@4->sub#1] -- register_copy 
    jsr sub
    jmp b5
  //SEG27 main::@5
  b5:
  //SEG28 [10] (byte) sub::idx#2 ← (byte) main::i#2 -- vbuaa=vbuyy 
    tya
  //SEG29 [11] call sub 
  //SEG30 [61] phi from main::@5 to sub [phi:main::@5->sub]
  sub_from_b5:
  //SEG31 [61] phi (byte) sub::s#3 = (byte) $40 [phi:main::@5->sub#0] -- vbuxx=vbuc1 
    ldx #$40
  //SEG32 [61] phi (byte) sub::idx#3 = (byte) sub::idx#2 [phi:main::@5->sub#1] -- register_copy 
    jsr sub
    jmp b6
  //SEG33 main::@6
  b6:
  //SEG34 [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG35 [13] if((byte) main::i#1!=(byte) 9) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #9
    bne b1_from_b6
  //SEG36 [14] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
    jmp b2
  //SEG37 main::@2
  b2:
  //SEG38 [15] call print_cls 
  //SEG39 [55] phi from main::@2 to print_cls [phi:main::@2->print_cls]
  print_cls_from_b2:
    jsr print_cls
  //SEG40 [16] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG41 [16] phi (byte*) print_line_cursor#19 = (byte*) 1024 [phi:main::@2->main::@3#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG42 [16] phi (byte*) print_char_cursor#46 = (byte*) 1024 [phi:main::@2->main::@3#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG43 [16] phi (byte) main::j#2 = (byte) 0 [phi:main::@2->main::@3#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG44 main::@3
  b3:
  //SEG45 [17] (byte~) main::$8 ← (byte) main::j#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG46 [18] (signed word) print_sword::w#1 ← *((const signed word[]) words#0 + (byte~) main::$8) -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda words,y
    sta print_sword.w
    lda words+1,y
    sta print_sword.w+1
  //SEG47 [19] call print_sword 
    jsr print_sword
  //SEG48 [20] phi from main::@3 to main::@7 [phi:main::@3->main::@7]
  b7_from_b3:
    jmp b7
  //SEG49 main::@7
  b7:
  //SEG50 [21] call print_ln 
  //SEG51 [26] phi from main::@7 to print_ln [phi:main::@7->print_ln]
  print_ln_from_b7:
    jsr print_ln
    jmp b8
  //SEG52 main::@8
  b8:
  //SEG53 [22] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG54 [23] if((byte) main::j#1!=(byte) 9) goto main::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #9
    bne b9
    jmp breturn
  //SEG55 main::@return
  breturn:
  //SEG56 [24] return 
    rts
  //SEG57 main::@9
  b9:
  //SEG58 [25] (byte*~) print_char_cursor#63 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG59 [16] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
  b3_from_b9:
  //SEG60 [16] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@9->main::@3#0] -- register_copy 
  //SEG61 [16] phi (byte*) print_char_cursor#46 = (byte*~) print_char_cursor#63 [phi:main::@9->main::@3#1] -- register_copy 
  //SEG62 [16] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@9->main::@3#2] -- register_copy 
    jmp b3
}
//SEG63 print_ln
// Print a newline
print_ln: {
  //SEG64 [27] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG65 [27] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG66 print_ln::@1
  b1:
  //SEG67 [28] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG68 [29] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG69 print_ln::@return
  breturn:
  //SEG70 [30] return 
    rts
}
//SEG71 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(4) w)
print_sword: {
    .label w = 4
  //SEG72 [31] if((signed word) print_sword::w#1>=(signed byte) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG73 [32] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG74 print_sword::@2
  b2:
  //SEG75 [33] call print_char 
  //SEG76 [51] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG77 [51] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#46 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG78 [51] phi (byte) print_char::ch#3 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b3
  //SEG79 print_sword::@3
  b3:
  //SEG80 [34] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG81 [35] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  b1_from_print_sword:
  b1_from_b3:
  //SEG82 [35] phi (byte*) print_char_cursor#41 = (byte*) print_char_cursor#46 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG83 [35] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG84 print_sword::@1
  b1:
  //SEG85 [36] call print_word 
    jsr print_word
    jmp breturn
  //SEG86 print_sword::@return
  breturn:
  //SEG87 [37] return 
    rts
}
//SEG88 print_word
// Print a word as HEX
print_word: {
  //SEG89 [38] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG90 [39] call print_byte 
  //SEG91 [43] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG92 [43] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#41 [phi:print_word->print_byte#0] -- register_copy 
  //SEG93 [43] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG94 print_word::@1
  b1:
  //SEG95 [40] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG96 [41] call print_byte 
  //SEG97 [43] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG98 [43] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG99 [43] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG100 print_word::@return
  breturn:
  //SEG101 [42] return 
    rts
}
//SEG102 print_byte
// Print a byte as HEX
// print_byte(byte zeropage(6) b)
print_byte: {
    .label b = 6
  //SEG103 [44] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG104 [45] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG105 [46] call print_char 
  //SEG106 [51] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG107 [51] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#44 [phi:print_byte->print_char#0] -- register_copy 
  //SEG108 [51] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG109 print_byte::@1
  b1:
  //SEG110 [47] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG111 [48] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG112 [49] call print_char 
  //SEG113 [51] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG114 [51] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG115 [51] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG116 print_byte::@return
  breturn:
  //SEG117 [50] return 
    rts
}
//SEG118 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG119 [52] *((byte*) print_char_cursor#32) ← (byte) print_char::ch#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG120 [53] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#32 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG121 print_char::@return
  breturn:
  //SEG122 [54] return 
    rts
}
//SEG123 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 9
  //SEG124 [56] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG125 [56] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG126 [56] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG127 [56] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG128 print_cls::@1
  b1:
  //SEG129 [57] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG130 [58] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG131 [59] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG132 print_cls::@return
  breturn:
  //SEG133 [60] return 
    rts
}
//SEG134 sub
// sub(byte register(A) idx, byte register(X) s)
sub: {
  //SEG135 [62] (byte~) sub::$0 ← (byte) sub::idx#3 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG136 [63] *((const signed word[]) words#0 + (byte~) sub::$0) ← *((const signed word[]) words#0 + (byte~) sub::$0) - (byte) sub::s#3 -- pwsc1_derefidx_vbuaa=pwsc1_derefidx_vbuaa_minus_vbuxx 
    sec
    stx $ff
    tax
    lda words,x
    sbc $ff
    sta words,x
    bcs !+
    dec words+1,x
  !:
    jmp breturn
  //SEG137 sub::@return
  breturn:
  //SEG138 [64] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  words: .word -$6000, -$600, -$60, -6, 0, 6, $60, $600, $6000

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b6 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_print_sword with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b6:
Removing instruction b2_from_b6:
Removing instruction print_cls_from_b2:
Removing instruction b7_from_b3:
Removing instruction print_ln_from_b7:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b2_from_print_sword:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sword:
Removing instruction b1_from_b3:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction sub_from_b1:
Removing instruction b4:
Removing instruction sub_from_b4:
Removing instruction b5:
Removing instruction sub_from_b5:
Removing instruction b6:
Removing instruction b2:
Removing instruction b3_from_b2:
Removing instruction b7:
Removing instruction b8:
Removing instruction breturn:
Removing instruction b3_from_b9:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$8 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 7.857142857142857
(byte) main::j
(byte) main::j#1 reg byte x 11.0
(byte) main::j#2 reg byte x 5.5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp ZP_BYTE:6 4.0
(byte) print_byte::b#1 b zp ZP_BYTE:6 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:6 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 print_char_cursor zp ZP_WORD:7 5.190476190476189
(byte*) print_char_cursor#32 print_char_cursor zp ZP_WORD:7 5.0
(byte*) print_char_cursor#41 print_char_cursor zp ZP_WORD:7 3.0
(byte*) print_char_cursor#44 print_char_cursor zp ZP_WORD:7 2.0
(byte*) print_char_cursor#46 print_char_cursor zp ZP_WORD:7 3.0
(byte*~) print_char_cursor#63 print_char_cursor zp ZP_WORD:7 22.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:9 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:9 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:2 46.42857142857143
(byte*) print_line_cursor#19 print_line_cursor zp ZP_WORD:2 2.1666666666666665
(byte*) print_line_cursor#9 print_line_cursor zp ZP_WORD:2 204.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:4 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:4 4.25
(signed word) print_sword::w#3 w zp ZP_WORD:4 1.3333333333333333
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(void()) sub((byte) sub::idx , (byte) sub::s)
(byte~) sub::$0 reg byte a 6.0
(label) sub::@return
(byte) sub::idx
(byte) sub::idx#0 reg byte a 22.0
(byte) sub::idx#1 reg byte a 22.0
(byte) sub::idx#2 reg byte a 22.0
(byte) sub::idx#3 reg byte a 35.0
(byte) sub::s
(byte) sub::s#3 reg byte x 1.0
(signed word[]) words
(const signed word[]) words#0 words = { (signed word) -$6000, (signed word) -$600, (signed word) -$60, (signed word) -6, (signed word) 0, (signed word) 6, (signed word) $60, (signed word) $600, (signed word) $6000 }

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ main::j#2 main::j#1 ]
zp ZP_WORD:2 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
zp ZP_WORD:4 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
zp ZP_BYTE:6 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
zp ZP_WORD:7 [ print_char_cursor#32 print_char_cursor#44 print_char_cursor#41 print_char_cursor#46 print_char_cursor#63 print_char_cursor#12 ]
zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ]
reg byte a [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ]
reg byte x [ sub::s#3 ]
reg byte a [ main::$8 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ sub::$0 ]


FINAL ASSEMBLER
Score: 5265

//SEG0 File Comments
// Tests that signed indexed subtract works as intended
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_line_cursor = 2
  .label print_char_cursor = 7
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG13 [5] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte) sub::idx#0 ← (byte) main::i#2 -- vbuaa=vbuyy 
    tya
  //SEG17 [7] call sub 
  //SEG18 [61] phi from main::@1 to sub [phi:main::@1->sub]
  //SEG19 [61] phi (byte) sub::s#3 = (byte) $80 [phi:main::@1->sub#0] -- vbuxx=vbuc1 
    ldx #$80
  //SEG20 [61] phi (byte) sub::idx#3 = (byte) sub::idx#0 [phi:main::@1->sub#1] -- register_copy 
    jsr sub
  //SEG21 main::@4
  //SEG22 [8] (byte) sub::idx#1 ← (byte) main::i#2 -- vbuaa=vbuyy 
    tya
  //SEG23 [9] call sub 
  //SEG24 [61] phi from main::@4 to sub [phi:main::@4->sub]
  //SEG25 [61] phi (byte) sub::s#3 = (byte) $40 [phi:main::@4->sub#0] -- vbuxx=vbuc1 
    ldx #$40
  //SEG26 [61] phi (byte) sub::idx#3 = (byte) sub::idx#1 [phi:main::@4->sub#1] -- register_copy 
    jsr sub
  //SEG27 main::@5
  //SEG28 [10] (byte) sub::idx#2 ← (byte) main::i#2 -- vbuaa=vbuyy 
    tya
  //SEG29 [11] call sub 
  //SEG30 [61] phi from main::@5 to sub [phi:main::@5->sub]
  //SEG31 [61] phi (byte) sub::s#3 = (byte) $40 [phi:main::@5->sub#0] -- vbuxx=vbuc1 
    ldx #$40
  //SEG32 [61] phi (byte) sub::idx#3 = (byte) sub::idx#2 [phi:main::@5->sub#1] -- register_copy 
    jsr sub
  //SEG33 main::@6
  //SEG34 [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG35 [13] if((byte) main::i#1!=(byte) 9) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #9
    bne b1
  //SEG36 [14] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG37 main::@2
  //SEG38 [15] call print_cls 
  //SEG39 [55] phi from main::@2 to print_cls [phi:main::@2->print_cls]
    jsr print_cls
  //SEG40 [16] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG41 [16] phi (byte*) print_line_cursor#19 = (byte*) 1024 [phi:main::@2->main::@3#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG42 [16] phi (byte*) print_char_cursor#46 = (byte*) 1024 [phi:main::@2->main::@3#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG43 [16] phi (byte) main::j#2 = (byte) 0 [phi:main::@2->main::@3#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG44 main::@3
  b3:
  //SEG45 [17] (byte~) main::$8 ← (byte) main::j#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG46 [18] (signed word) print_sword::w#1 ← *((const signed word[]) words#0 + (byte~) main::$8) -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda words,y
    sta print_sword.w
    lda words+1,y
    sta print_sword.w+1
  //SEG47 [19] call print_sword 
    jsr print_sword
  //SEG48 [20] phi from main::@3 to main::@7 [phi:main::@3->main::@7]
  //SEG49 main::@7
  //SEG50 [21] call print_ln 
  //SEG51 [26] phi from main::@7 to print_ln [phi:main::@7->print_ln]
    jsr print_ln
  //SEG52 main::@8
  //SEG53 [22] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG54 [23] if((byte) main::j#1!=(byte) 9) goto main::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #9
    bne b9
  //SEG55 main::@return
  //SEG56 [24] return 
    rts
  //SEG57 main::@9
  b9:
  //SEG58 [25] (byte*~) print_char_cursor#63 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG59 [16] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
  //SEG60 [16] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@9->main::@3#0] -- register_copy 
  //SEG61 [16] phi (byte*) print_char_cursor#46 = (byte*~) print_char_cursor#63 [phi:main::@9->main::@3#1] -- register_copy 
  //SEG62 [16] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@9->main::@3#2] -- register_copy 
    jmp b3
}
//SEG63 print_ln
// Print a newline
print_ln: {
  //SEG64 [27] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG65 [27] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG66 print_ln::@1
  b1:
  //SEG67 [28] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG68 [29] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG69 print_ln::@return
  //SEG70 [30] return 
    rts
}
//SEG71 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(4) w)
print_sword: {
    .label w = 4
  //SEG72 [31] if((signed word) print_sword::w#1>=(signed byte) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1
  //SEG73 [32] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  //SEG74 print_sword::@2
  //SEG75 [33] call print_char 
  //SEG76 [51] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  //SEG77 [51] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#46 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG78 [51] phi (byte) print_char::ch#3 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG79 print_sword::@3
  //SEG80 [34] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG81 [35] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  //SEG82 [35] phi (byte*) print_char_cursor#41 = (byte*) print_char_cursor#46 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG83 [35] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
  //SEG84 print_sword::@1
  b1:
  //SEG85 [36] call print_word 
    jsr print_word
  //SEG86 print_sword::@return
  //SEG87 [37] return 
    rts
}
//SEG88 print_word
// Print a word as HEX
print_word: {
  //SEG89 [38] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG90 [39] call print_byte 
  //SEG91 [43] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG92 [43] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#41 [phi:print_word->print_byte#0] -- register_copy 
  //SEG93 [43] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG94 print_word::@1
  //SEG95 [40] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG96 [41] call print_byte 
  //SEG97 [43] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG98 [43] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG99 [43] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG100 print_word::@return
  //SEG101 [42] return 
    rts
}
//SEG102 print_byte
// Print a byte as HEX
// print_byte(byte zeropage(6) b)
print_byte: {
    .label b = 6
  //SEG103 [44] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG104 [45] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG105 [46] call print_char 
  //SEG106 [51] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG107 [51] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#44 [phi:print_byte->print_char#0] -- register_copy 
  //SEG108 [51] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG109 print_byte::@1
  //SEG110 [47] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG111 [48] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG112 [49] call print_char 
  //SEG113 [51] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG114 [51] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG115 [51] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG116 print_byte::@return
  //SEG117 [50] return 
    rts
}
//SEG118 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG119 [52] *((byte*) print_char_cursor#32) ← (byte) print_char::ch#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG120 [53] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#32 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG121 print_char::@return
  //SEG122 [54] return 
    rts
}
//SEG123 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 9
  //SEG124 [56] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG125 [56] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG126 [56] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG127 [56] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG128 print_cls::@1
  b1:
  //SEG129 [57] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG130 [58] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG131 [59] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG132 print_cls::@return
  //SEG133 [60] return 
    rts
}
//SEG134 sub
// sub(byte register(A) idx, byte register(X) s)
sub: {
  //SEG135 [62] (byte~) sub::$0 ← (byte) sub::idx#3 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG136 [63] *((const signed word[]) words#0 + (byte~) sub::$0) ← *((const signed word[]) words#0 + (byte~) sub::$0) - (byte) sub::s#3 -- pwsc1_derefidx_vbuaa=pwsc1_derefidx_vbuaa_minus_vbuxx 
    sec
    stx $ff
    tax
    lda words,x
    sbc $ff
    sta words,x
    bcs !+
    dec words+1,x
  !:
  //SEG137 sub::@return
  //SEG138 [64] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  words: .word -$6000, -$600, -$60, -6, 0, 6, $60, $600, $6000

