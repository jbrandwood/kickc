Resolved forward reference c2 to (volatile byte) c2

CONTROL FLOW GRAPH SSA

(void()) _init()
_init: scope:[_init]  from _start
  (volatile byte) c1 ← (byte) 'o'
  (volatile byte) c2 ← (byte) 'k'
  to:_init::@return
_init::@return: scope:[_init]  from _init
  return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  *((const nomodify byte*) SCREEN + (number) 0) ← (volatile byte) c1
  *((const nomodify byte*) SCREEN + (number) 1) ← (volatile byte) c2
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call _init 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _init()
(label) _init::@return
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(volatile byte) c1 loadstore
(volatile byte) c2 loadstore
(void()) main()
(label) main::@return

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (volatile byte) c1
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SCREEN + (number) 1) ← (volatile byte) c2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero SCREEN in [3] *((const nomodify byte*) SCREEN + (byte) 0) ← (volatile byte) c1
Successful SSA optimization PassNSimplifyExpressionWithZero
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of _start::@2
CALL GRAPH
Calls in [_start] to _init:1 main:3 

Does this handle main() / _start() correctly?
Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) _start::@2
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Does this handle main() / _start() correctly?

FINAL CONTROL FLOW GRAPH

(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  [1] call _init 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  [2] phi()
  [3] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [4] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [5] *((const nomodify byte*) SCREEN) ← (volatile byte) c1
  [6] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) c2
  to:main::@return
main::@return: scope:[main]  from main
  [7] return 
  to:@return

(void()) _init()
_init: scope:[_init]  from _start
  [8] (volatile byte) c1 ← (byte) 'o'
  [9] (volatile byte) c2 ← (byte) 'k'
  to:_init::@return
_init::@return: scope:[_init]  from _init
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) _init()
(void()) _start()
(volatile byte) c1 loadstore 4.4
(volatile byte) c2 loadstore 4.4
(void()) main()

Initial phi equivalence classes
Added variable c1 to live range equivalence class [ c1 ]
Added variable c2 to live range equivalence class [ c2 ]
Complete equivalence classes
[ c1 ]
[ c2 ]
Allocated zp[1]:2 [ c1 ]
Allocated zp[1]:3 [ c2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests static initialization code
// Currently placed outside any function scope and pushed into @begin block.
// To be put into an initializer function.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label c1 = 2
  .label c2 = 3
  // _start
_start: {
    // [1] call _init 
    jsr _init
    // [2] phi from _start to _start::@1 [phi:_start->_start::@1]
  __b1_from__start:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    // [5] *((const nomodify byte*) SCREEN) ← (volatile byte) c1 -- _deref_pbuc1=vbuz1 
    lda.z c1
    sta SCREEN
    // [6] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) c2 -- _deref_pbuc1=vbuz1 
    lda.z c2
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // _init
_init: {
    // [8] (volatile byte) c1 ← (byte) 'o' -- vbuz1=vbuc1 
    // Initialize a volatile ZP-variable (will be done in the initializer)
    lda #'o'
    sta.z c1
    // [9] (volatile byte) c2 ← (byte) 'k' -- vbuz1=vbuc1 
    // Initialize another volatile ZP-variable (will be done in the initializer)
    lda #'k'
    sta.z c2
    jmp __breturn
    // _init::@return
  __breturn:
    // [10] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] *((const nomodify byte*) SCREEN) ← (volatile byte) c1 [ c2 ] ( main:3 [ c2 ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) c2 [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [8] (volatile byte) c1 ← (byte) 'o' [ c1 ] ( _init:1 [ c1 ] { }  ) always clobbers reg byte a 
Statement [9] (volatile byte) c2 ← (byte) 'k' [ c1 c2 ] ( _init:1 [ c1 c2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ c1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ c2 ] : zp[1]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 4.4: zp[1]:2 [ c1 ] 4.4: zp[1]:3 [ c2 ] 
Uplift Scope [_init] 
Uplift Scope [main] 
Uplift Scope [_start] 

Uplifting [] best 66 combination zp[1]:2 [ c1 ] zp[1]:3 [ c2 ] 
Uplifting [_init] best 66 combination 
Uplifting [main] best 66 combination 
Uplifting [_start] best 66 combination 
Attempting to uplift remaining variables inzp[1]:2 [ c1 ]
Uplifting [] best 66 combination zp[1]:2 [ c1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ c2 ]
Uplifting [] best 66 combination zp[1]:3 [ c2 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests static initialization code
// Currently placed outside any function scope and pushed into @begin block.
// To be put into an initializer function.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label c1 = 2
  .label c2 = 3
  // _start
_start: {
    // [1] call _init 
    jsr _init
    // [2] phi from _start to _start::@1 [phi:_start->_start::@1]
  __b1_from__start:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    // [5] *((const nomodify byte*) SCREEN) ← (volatile byte) c1 -- _deref_pbuc1=vbuz1 
    lda.z c1
    sta SCREEN
    // [6] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) c2 -- _deref_pbuc1=vbuz1 
    lda.z c2
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // _init
_init: {
    // [8] (volatile byte) c1 ← (byte) 'o' -- vbuz1=vbuc1 
    // Initialize a volatile ZP-variable (will be done in the initializer)
    lda #'o'
    sta.z c1
    // [9] (volatile byte) c2 ← (byte) 'k' -- vbuz1=vbuc1 
    // Initialize another volatile ZP-variable (will be done in the initializer)
    lda #'k'
    sta.z c2
    jmp __breturn
    // _init::@return
  __breturn:
    // [10] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from__start:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) _init()
(label) _init::@return
(void()) _start()
(label) _start::@1
(label) _start::@return
(volatile byte) c1 loadstore zp[1]:2 4.4
(volatile byte) c2 loadstore zp[1]:3 4.4
(void()) main()
(label) main::@return

zp[1]:2 [ c1 ]
zp[1]:3 [ c2 ]


FINAL ASSEMBLER
Score: 54

  // File Comments
// Tests static initialization code
// Currently placed outside any function scope and pushed into @begin block.
// To be put into an initializer function.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label c1 = 2
  .label c2 = 3
  // _start
_start: {
    // [1] call _init 
    jsr _init
    // [2] phi from _start to _start::@1 [phi:_start->_start::@1]
    // _start::@1
    // [3] call main 
    jsr main
    // _start::@return
    // [4] return 
    rts
}
  // main
main: {
    // SCREEN[0] = c1
    // [5] *((const nomodify byte*) SCREEN) ← (volatile byte) c1 -- _deref_pbuc1=vbuz1 
    lda.z c1
    sta SCREEN
    // SCREEN[1] = c2
    // [6] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) c2 -- _deref_pbuc1=vbuz1 
    lda.z c2
    sta SCREEN+1
    // main::@return
    // }
    // [7] return 
    rts
}
  // _init
_init: {
    // c1 = 'o'
    // [8] (volatile byte) c1 ← (byte) 'o' -- vbuz1=vbuc1 
    // Initialize a volatile ZP-variable (will be done in the initializer)
    lda #'o'
    sta.z c1
    // c2 = 'k'
    // [9] (volatile byte) c2 ← (byte) 'k' -- vbuz1=vbuc1 
    // Initialize another volatile ZP-variable (will be done in the initializer)
    lda #'k'
    sta.z c2
    // _init::@return
    // [10] return 
    rts
}
  // File Data

