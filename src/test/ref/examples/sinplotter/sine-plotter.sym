(label) @1
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (byte*) 53281
(byte*) BITMAP
(const byte*) BITMAP#0 BITMAP = (byte*) 8192
(byte) BLACK
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = (byte*) 56576
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = (byte*) 56578
(byte*) D011
(const byte*) D011#0 D011 = (byte*) 53265
(byte*) D016
(const byte*) D016#0 D016 = (byte*) 53270
(byte*) D018
(const byte*) D018#0 D018 = (byte*) 53272
(dword) PI2_u4f28
(const dword) PI2_u4f28#0 PI2_u4f28 = (dword) $6487ed51
(dword) PI_HALF_u4f28
(const dword) PI_HALF_u4f28#0 PI_HALF_u4f28 = (dword) $1921fb54
(dword) PI_u4f28
(const dword) PI_u4f28#0 PI_u4f28 = (dword) $3243f6a9
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = (byte*) 1
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = (byte*) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte) 7
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte) 5
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(word) SIN_SIZE
(const word) SIN_SIZE#0 SIN_SIZE = (word) $200
(const byte) SIZEOF_SIGNED_WORD SIZEOF_SIGNED_WORD = (byte) 2
(byte) VIC_BMM
(const byte) VIC_BMM#0 VIC_BMM = (byte) $20
(byte) VIC_CSEL
(const byte) VIC_CSEL#0 VIC_CSEL = (byte) 8
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte) $10
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte) 8
(byte) WHITE
(const byte) WHITE#0 WHITE = (byte) 1
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(label) bitmap_clear::@1
(label) bitmap_clear::@return
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::col
(const byte) bitmap_clear::col#0 col = (const byte) WHITE#0*(byte) $10
(byte) bitmap_clear::fgcol
(byte*) bitmap_gfx
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(byte~) bitmap_init::$4 reg byte a 22.0
(byte~) bitmap_init::$5 reg byte a 22.0
(byte~) bitmap_init::$6 reg byte a 22.0
(byte~) bitmap_init::$7 $7 zp ZP_BYTE:67 5.5
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@return
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte a 11.0
(byte) bitmap_init::bits#3 reg byte a 16.5
(byte) bitmap_init::bits#4 reg byte a 7.333333333333333
(byte*) bitmap_init::gfx
(byte*) bitmap_init::screen
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 16.5
(byte) bitmap_init::x#2 reg byte x 5.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 16.5
(byte) bitmap_init::y#2 reg byte x 5.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp ZP_WORD:47 22.0
(byte*) bitmap_init::yoffs#2 yoffs zp ZP_WORD:47 6.875
(byte*) bitmap_init::yoffs#4 yoffs zp ZP_WORD:47 11.0
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$1 $1 zp ZP_WORD:51 4.0
(byte~) bitmap_plot::$2 reg byte a 4.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 plotter zp ZP_WORD:49 1.0
(byte*) bitmap_plot::plotter#1 plotter zp ZP_WORD:49 3.0
(word) bitmap_plot::x
(word) bitmap_plot::x#0 x zp ZP_WORD:4 11.0
(word) bitmap_plot::x#1 x zp ZP_WORD:4 11.0
(word) bitmap_plot::x#2 x zp ZP_WORD:4 6.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte x 22.0
(byte) bitmap_plot::y#1 reg byte x 22.0
(byte) bitmap_plot::y#2 reg byte x 26.0
(byte[$100]) bitmap_plot_bit
(const byte[$100]) bitmap_plot_bit#0 bitmap_plot_bit = { fill( $100, 0) }
(byte[$100]) bitmap_plot_yhi
(const byte[$100]) bitmap_plot_yhi#0 bitmap_plot_yhi = { fill( $100, 0) }
(byte[$100]) bitmap_plot_ylo
(const byte[$100]) bitmap_plot_ylo#0 bitmap_plot_ylo = { fill( $100, 0) }
(byte*) bitmap_screen
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(label) div32u16u::@1
(label) div32u16u::@2
(label) div32u16u::@return
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 quotient_hi zp ZP_WORD:65 0.8
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 quotient_lo zp ZP_WORD:41 4.0
(dword) div32u16u::return
(dword) div32u16u::return#0 return zp ZP_DWORD:53 1.3333333333333333
(dword) div32u16u::return#2 return zp ZP_DWORD:53 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:39 2.75
(word) divr16u::dividend#3 dividend zp ZP_WORD:39 5.0
(word) divr16u::dividend#5 dividend zp ZP_WORD:39 2.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:41 16.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:41 11.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:41 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:37 8.25
(word) divr16u::rem#1 rem zp ZP_WORD:37 22.0
(word) divr16u::rem#10 rem zp ZP_WORD:37 4.0
(word) divr16u::rem#11 rem zp ZP_WORD:37 11.666666666666666
(word) divr16u::rem#2 rem zp ZP_WORD:37 22.0
(word) divr16u::rem#4 rem zp ZP_WORD:37 4.0
(word) divr16u::rem#5 rem zp ZP_WORD:37 24.0
(word) divr16u::rem#6 rem zp ZP_WORD:37 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:41 5.285714285714286
(word) divr16u::return#2 return zp ZP_WORD:41 4.0
(word) divr16u::return#3 return zp ZP_WORD:41 4.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::toD0181
(word~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(number~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(number~) main::toD0181_$6
(number~) main::toD0181_$7
(number~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) SCREEN#0&(word) $3fff*(byte) 4|>(word)(const byte*) BITMAP#0/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(label) main::vicSelectGfxBank1
(byte~) main::vicSelectGfxBank1_$0
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(label) main::vicSelectGfxBank1_toDd001
(word~) main::vicSelectGfxBank1_toDd001_$0
(byte~) main::vicSelectGfxBank1_toDd001_$1
(number~) main::vicSelectGfxBank1_toDd001_$2
(number~) main::vicSelectGfxBank1_toDd001_$3
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(const byte) main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte) 3
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(byte) memset::c#3 reg byte x 1.375
(byte*) memset::dst
(byte*) memset::dst#1 dst zp ZP_WORD:45 16.5
(byte*) memset::dst#2 dst zp ZP_WORD:45 17.5
(byte*~) memset::dst#3 dst zp ZP_WORD:45 4.0
(byte*) memset::end
(byte*) memset::end#0 end zp ZP_WORD:43 2.1666666666666665
(word) memset::num
(word) memset::num#2 num zp ZP_WORD:43 2.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp ZP_WORD:45
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$16 $16 zp ZP_WORD:59 4.0
(word~) mul16s::$9 $9 zp ZP_WORD:59 4.0
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@4
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::a#0 a zp ZP_WORD:33 2.6
(signed word) mul16s::b
(dword) mul16s::m
(dword) mul16s::m#0 m zp ZP_DWORD:16 2.0
(dword) mul16s::m#1 m zp ZP_DWORD:16 4.0
(dword) mul16s::m#4 m zp ZP_DWORD:16 4.0
(signed dword) mul16s::return
(signed dword) mul16s::return#0 return zp ZP_DWORD:16 4.333333333333333
(signed dword) mul16s::return#2 return zp ZP_DWORD:16 22.0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte~) mul16u::$1 reg byte a 202.0
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0 a zp ZP_WORD:22 101.0
(word) mul16u::a#1 a zp ZP_WORD:22 4.0
(word) mul16u::a#2 a zp ZP_WORD:22 2.0
(word) mul16u::a#3 a zp ZP_WORD:22 67.66666666666666
(word) mul16u::a#6 a zp ZP_WORD:22 6.0
(word) mul16u::b
(word) mul16u::b#1 b zp ZP_WORD:20 4.0
(dword) mul16u::mb
(dword) mul16u::mb#0 mb zp ZP_DWORD:24 4.0
(dword) mul16u::mb#1 mb zp ZP_DWORD:24 202.0
(dword) mul16u::mb#2 mb zp ZP_DWORD:24 43.57142857142858
(dword) mul16u::res
(dword) mul16u::res#1 res zp ZP_DWORD:16 202.0
(dword) mul16u::res#2 res zp ZP_DWORD:16 43.85714285714286
(dword) mul16u::res#6 res zp ZP_DWORD:16 101.0
(dword) mul16u::return
(dword) mul16u::return#2 return zp ZP_DWORD:16 4.0
(dword) mul16u::return#3 return zp ZP_DWORD:16 4.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 $0 zp ZP_DWORD:16 4.0
(dword~) mulu16_sel::$1 $1 zp ZP_DWORD:16 4.0
(label) mulu16_sel::@1
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0 return zp ZP_WORD:63 4.0
(word) mulu16_sel::return#1 return#1 zp ZP_WORD:35 4.0
(word) mulu16_sel::return#10 return#10 zp ZP_WORD:35 4.0
(word) mulu16_sel::return#11 return zp ZP_WORD:63 4.0
(word) mulu16_sel::return#12 return zp ZP_WORD:63 1.714285714285714
(word) mulu16_sel::return#2 return zp ZP_WORD:63 4.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#5 reg byte x 0.3333333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 v1 zp ZP_WORD:35 2.0
(word) mulu16_sel::v1#1 v1 zp ZP_WORD:35 2.0
(word) mulu16_sel::v1#2 v1 zp ZP_WORD:35 4.0
(word) mulu16_sel::v1#3 v1 zp ZP_WORD:35 2.0
(word) mulu16_sel::v1#4 v1 zp ZP_WORD:35 2.0
(word) mulu16_sel::v1#5 v1 zp ZP_WORD:35 12.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 v2 zp ZP_WORD:20 4.0
(word) mulu16_sel::v2#1 v2 zp ZP_WORD:20 4.0
(word) mulu16_sel::v2#3 v2 zp ZP_WORD:20 4.0
(word) mulu16_sel::v2#4 v2 zp ZP_WORD:20 4.0
(word) mulu16_sel::v2#5 v2 zp ZP_WORD:20 5.0
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:37 0.8
(void()) render_sine()
(signed word*~) render_sine::$0 $0 zp ZP_WORD:6 22.0
(word~) render_sine::$10 $10 zp ZP_WORD:6 22.0
(word~) render_sine::$11 $11 zp ZP_WORD:6 22.0
(signed word*~) render_sine::$3 $3 zp ZP_WORD:6 22.0
(label) render_sine::@1
(label) render_sine::@2
(label) render_sine::@3
(label) render_sine::@4
(label) render_sine::@5
(label) render_sine::@6
(label) render_sine::@7
(label) render_sine::@return
(signed word) render_sine::sin2_val
(signed word) render_sine::sin2_val#0 sin2_val zp ZP_WORD:6 22.0
(word) render_sine::sin_idx
(word) render_sine::sin_idx#1 sin_idx zp ZP_WORD:2 16.5
(word) render_sine::sin_idx#2 sin_idx zp ZP_WORD:2 1.76
(signed word) render_sine::sin_val
(signed word) render_sine::sin_val#0 sin_val zp ZP_WORD:6 22.0
(word) render_sine::xpos
(word) render_sine::xpos#1 xpos zp ZP_WORD:4 11.0
(word) render_sine::xpos#3 xpos zp ZP_WORD:4 2.0952380952380953
(word) render_sine::xpos#8 xpos zp ZP_WORD:4 7.333333333333333
(byte) render_sine::ypos
(byte) render_sine::ypos#0 reg byte x 11.0
(byte) render_sine::ypos2
(byte) render_sine::ypos2#0 reg byte x 11.0
(signed word[$200]) sin
(const signed word[$200]) sin#0 sin = { fill( $200, 0) }
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$4 $4 zp ZP_DWORD:29 4.0
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@7
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 isUpper zp ZP_BYTE:28 0.06060606060606061
(signed word) sin16s::return
(signed word) sin16s::return#0 return zp ZP_WORD:33 22.0
(signed word) sin16s::return#1 return zp ZP_WORD:33 5.0
(signed word~) sin16s::return#5 return zp ZP_WORD:33 4.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 sinx zp ZP_WORD:33 4.0
(word) sin16s::usinx
(word) sin16s::usinx#0 usinx zp ZP_WORD:33 0.3333333333333333
(word) sin16s::usinx#1 usinx zp ZP_WORD:33 1.0
(dword) sin16s::x
(dword) sin16s::x#0 x zp ZP_DWORD:29 8.5
(dword) sin16s::x#1 x zp ZP_DWORD:29 4.0
(dword) sin16s::x#2 x zp ZP_DWORD:29 4.0
(dword) sin16s::x#4 x zp ZP_DWORD:29 5.0
(dword) sin16s::x#6 x zp ZP_DWORD:29 6.0
(word) sin16s::x1
(word) sin16s::x1#0 x1 zp ZP_WORD:61 0.6363636363636365
(word) sin16s::x2
(word) sin16s::x2#0 x2 zp ZP_WORD:35 4.0
(word) sin16s::x3
(word) sin16s::x3#0 x3 zp ZP_WORD:35 1.0
(word) sin16s::x3_6
(word) sin16s::x3_6#0 x3_6 zp ZP_WORD:63 4.0
(word) sin16s::x4
(word) sin16s::x4#0 x4 zp ZP_WORD:35 4.0
(word) sin16s::x5
(word) sin16s::x5#0 x5 zp ZP_WORD:63 4.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 x5_128 zp ZP_WORD:63 4.0
(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
(signed dword~) sin16s_gen2::$5 $5 zp ZP_DWORD:16 22.0
(word~) sin16s_gen2::$8 $8 zp ZP_WORD:57 11.0
(label) sin16s_gen2::@1
(label) sin16s_gen2::@2
(label) sin16s_gen2::@3
(label) sin16s_gen2::@4
(label) sin16s_gen2::@return
(signed word) sin16s_gen2::ampl
(const signed word) sin16s_gen2::ampl#0 ampl = (const signed word) sin16s_gen2::max#0-(const signed word) sin16s_gen2::min#0
(word) sin16s_gen2::i
(word) sin16s_gen2::i#1 i zp ZP_WORD:14 16.5
(word) sin16s_gen2::i#2 i zp ZP_WORD:14 1.8333333333333333
(signed word) sin16s_gen2::max
(const signed word) sin16s_gen2::max#0 max = (signed word) $140
(signed word) sin16s_gen2::min
(const signed word) sin16s_gen2::min#0 min = (signed word) -$140
(signed word) sin16s_gen2::offs
(signed word*) sin16s_gen2::sintab
(signed word*) sin16s_gen2::sintab#0 sintab zp ZP_WORD:12 5.5
(signed word*) sin16s_gen2::sintab#2 sintab zp ZP_WORD:12 3.3000000000000003
(dword) sin16s_gen2::step
(dword) sin16s_gen2::step#0 step zp ZP_DWORD:53 0.8666666666666666
(word) sin16s_gen2::wavelength
(dword) sin16s_gen2::x
(dword) sin16s_gen2::x#1 x zp ZP_DWORD:8 7.333333333333333
(dword) sin16s_gen2::x#2 x zp ZP_DWORD:8 3.0
(signed word[$200]) sin2
(const signed word[$200]) sin2#0 sin2 = kickasm {{ .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }
 }}
(byte()) wrap_y((signed word) wrap_y::y)
(label) wrap_y::@1
(label) wrap_y::@2
(label) wrap_y::@3
(label) wrap_y::@4
(label) wrap_y::@5
(label) wrap_y::@return
(byte) wrap_y::return
(byte) wrap_y::return#0 reg byte a 22.0
(byte) wrap_y::return#1 reg byte a 22.0
(byte) wrap_y::return#2 reg byte a 6.0
(signed word) wrap_y::y
(signed word) wrap_y::y#0 y zp ZP_WORD:6 22.0
(signed word) wrap_y::y#1 y zp ZP_WORD:6 22.0
(signed word) wrap_y::y#2 y zp ZP_WORD:6 202.0
(signed word) wrap_y::y#3 y zp ZP_WORD:6 202.0
(signed word) wrap_y::y#4 y zp ZP_WORD:6 203.0
(signed word) wrap_y::y#6 y zp ZP_WORD:6 202.0
(signed word) wrap_y::y#9 y zp ZP_WORD:6 24.0

zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ]
zp ZP_WORD:4 [ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ]
reg byte x [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
zp ZP_WORD:6 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$10 render_sine::$0 render_sine::$11 render_sine::$3 ]
zp ZP_DWORD:8 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
zp ZP_WORD:12 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
zp ZP_WORD:14 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
zp ZP_DWORD:16 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$5 mulu16_sel::$0 mulu16_sel::$1 ]
zp ZP_WORD:20 [ mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
zp ZP_WORD:22 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
zp ZP_DWORD:24 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp ZP_BYTE:28 [ sin16s::isUpper#2 ]
zp ZP_DWORD:29 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$4 ]
zp ZP_WORD:33 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 ]
zp ZP_WORD:35 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ]
reg byte x [ mulu16_sel::select#5 ]
zp ZP_WORD:37 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 ]
zp ZP_WORD:39 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
zp ZP_WORD:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp ZP_WORD:43 [ memset::num#2 memset::end#0 ]
zp ZP_WORD:45 [ memset::str#3 memset::dst#2 memset::dst#3 memset::dst#1 ]
reg byte x [ memset::c#3 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp ZP_WORD:47 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
reg byte a [ wrap_y::return#0 ]
reg byte x [ render_sine::ypos#0 ]
reg byte a [ wrap_y::return#1 ]
reg byte x [ render_sine::ypos2#0 ]
zp ZP_WORD:49 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 ]
zp ZP_WORD:51 [ bitmap_plot::$1 ]
reg byte a [ bitmap_plot::$2 ]
reg byte a [ wrap_y::return#2 ]
zp ZP_DWORD:53 [ div32u16u::return#2 sin16s_gen2::step#0 div32u16u::return#0 ]
zp ZP_WORD:57 [ sin16s_gen2::$8 ]
zp ZP_WORD:59 [ mul16s::$9 mul16s::$16 ]
reg byte a [ mul16u::$1 ]
zp ZP_WORD:61 [ sin16s::x1#0 ]
zp ZP_WORD:63 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
zp ZP_WORD:65 [ div32u16u::quotient_hi#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp ZP_BYTE:67 [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
