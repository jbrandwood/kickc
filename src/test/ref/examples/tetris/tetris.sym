(label) @8
(label) @begin
(label) @end
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) COLS
(const byte*) COLS#0 COLS = ((byte*))(word/dword/signed dword) 55296
(byte) DARK_GREY
(const byte) DARK_GREY#0 DARK_GREY = (byte/signed byte/word/signed word/dword/signed dword) 11
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte[4*4]) current_piece
(const byte[4*4]) current_piece#0 current_piece = { fill( 4*4, 0) }
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(label) fill::@1
(label) fill::@return
(byte*) fill::addr
(byte*) fill::addr#0 addr zp ZP_WORD:4 2.0
(byte*) fill::addr#1 addr zp ZP_WORD:4 16.5
(byte*) fill::addr#2 addr zp ZP_WORD:4 17.5
(byte*) fill::end
(byte*) fill::end#0 end zp ZP_WORD:6 2.6
(word) fill::size
(byte*) fill::start
(byte) fill::val
(byte) fill::val#3 reg byte x 1.8333333333333333
(void()) init()
(byte~) init::$4 reg byte a 22.0
(byte*~) init::$7 $7 zp ZP_WORD:6 202.0
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@5
(label) init::@7
(label) init::@return
(byte) init::c
(byte) init::c#1 reg byte x 151.5
(byte) init::c#2 reg byte x 101.0
(byte) init::i
(byte) init::i#1 reg byte x 16.5
(byte) init::i#2 reg byte x 8.25
(byte) init::l
(byte) init::l#1 l zp ZP_BYTE:2 16.5
(byte) init::l#4 l zp ZP_BYTE:2 3.142857142857143
(byte*) init::li
(byte*) init::li#1 li zp ZP_WORD:4 7.333333333333333
(byte*) init::li#2 li zp ZP_WORD:4 11.0
(byte*) init::line
(byte*) init::line#1 line zp ZP_WORD:4 7.333333333333333
(byte*) init::line#4 line zp ZP_WORD:4 20.499999999999996
(void()) main()
(label) main::@2
(label) main::@7
(label) main::@8
(byte[20*10]) playfield
(const byte[20*10]) playfield#0 playfield = { fill( 20*10, 0) }
(void()) render_current_piece()
(label) render_current_piece::@return
(void()) render_playfield()
(byte~) render_playfield::$0 reg byte a 22.0
(byte*~) render_playfield::$1 $1 zp ZP_WORD:6 202.0
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#1 reg byte x 151.5
(byte) render_playfield::c#2 reg byte x 75.75
(byte) render_playfield::i
(byte) render_playfield::i#1 i zp ZP_BYTE:3 42.599999999999994
(byte) render_playfield::i#2 i zp ZP_BYTE:3 104.66666666666666
(byte) render_playfield::i#3 i zp ZP_BYTE:3 7.333333333333333
(byte) render_playfield::l
(byte) render_playfield::l#1 l zp ZP_BYTE:2 16.5
(byte) render_playfield::l#2 l zp ZP_BYTE:2 3.666666666666667
(byte*) render_playfield::line
(byte*) render_playfield::line#0 line zp ZP_WORD:4 16.0
(byte*[20]) screen_lines
(const byte*[20]) screen_lines#0 screen_lines = { fill( 20, 0) }

zp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 init::l#4 init::l#1 ]
reg byte x [ render_playfield::c#2 render_playfield::c#1 ]
zp ZP_BYTE:3 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
reg byte x [ init::i#2 init::i#1 ]
zp ZP_WORD:4 [ init::li#2 init::li#1 init::line#4 init::line#1 fill::addr#2 fill::addr#0 fill::addr#1 render_playfield::line#0 ]
reg byte x [ init::c#2 init::c#1 ]
reg byte x [ fill::val#3 ]
reg byte a [ render_playfield::$0 ]
zp ZP_WORD:6 [ render_playfield::$1 init::$7 fill::end#0 ]
reg byte a [ init::$4 ]
