PARSING src/test/java/dk/camelot64/kickc/test/kc/loopnest.kc
byte* SCREEN = $0400;

void main() {
  byte i=100;
  do {
    nest();
  } while (--i>0);
}

void nest() {
  byte j=100;
  do {
    *SCREEN = j;
  } while (--j>0);
}

Adding pre/post-modifier (byte) main::i ← -- (byte) main::i
Adding pre/post-modifier (byte) nest::j ← -- (byte) nest::j
SYMBOLS
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(void()) main()
(void~) main::$0
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(void()) nest()
(bool~) nest::$0
(label) nest::@1
(label) nest::@2
(label) nest::@return
(byte) nest::j

Promoting word/signed word/dword/signed dword to byte* in SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 100
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$0 ← call nest 
  (byte) main::i ← -- (byte) main::i
  (bool~) main::$1 ← (byte) main::i > (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) main::$1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
nest: scope:[nest]  from
  (byte) nest::j ← (byte/signed byte/word/signed word/dword/signed dword) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  *((byte*) SCREEN) ← (byte) nest::j
  (byte) nest::j ← -- (byte) nest::j
  (bool~) nest::$0 ← (byte) nest::j > (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) nest::$0) goto nest::@1
  to:nest::@2
nest::@2: scope:[nest]  from nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@2
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@end
@end: scope:[]  from @2

Eliminating unused variable - keeping the call (void~) main::$0
Removing empty block main::@2
Removing empty block @1
Removing empty block nest::@2
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN#4 ← phi( @2/(byte*) SCREEN#6 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#3 ← phi( main/(byte*) SCREEN#4 main::@3/(byte*) SCREEN#5 )
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest 
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (bool~) main::$1 ← (byte) main::i#1 > (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte*) SCREEN#2 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) nest::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (bool~) nest::$0 ← (byte) nest::j#1 > (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(void()) nest()
(bool~) nest::$0
(label) nest::@1
(label) nest::@return
(byte) nest::j
(byte) nest::j#0
(byte) nest::j#1
(byte) nest::j#2

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @3
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte*) SCREEN#3 = (byte*) SCREEN#5 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#6 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) SCREEN#3
Self Phi Eliminated (byte*) SCREEN#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) SCREEN#4 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN#3 (byte*) SCREEN#4
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#3
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#2
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) main::$1 if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1
Simple Condition (bool~) nest::$0 if((byte) nest::j#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto nest::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte) main::i#0 = 100
Constant (const byte) nest::j#0 = 100
Successful SSA optimization Pass2ConstantIdentification
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) nest::j#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 100
Constant inlined nest::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 100
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Added new block during phi lifting nest::@3(between nest::@1 and nest::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of nest
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to nest:6 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 2 initial phi equivalence classes
Coalesced [10] main::i#4 ← main::i#1
Coalesced [17] nest::j#3 ← nest::j#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@4
Culled Empty Block (label) nest::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of nest
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@2
@2: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @2
  [3] phi() [ ] ( )
main: scope:[main]  from @2
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 100 main::@3/(byte) main::i#1 ) [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [6] call nest  [ main::i#2 ] ( main:2 [ main::i#2 ] )
  to:main::@3
main::@3: scope:[main]  from main::@1
  [7] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  [8] if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@3
  [9] return  [ ] ( main:2 [ ] )
  to:@return
nest: scope:[nest]  from main::@1
  [10] phi() [ ] ( main:2::nest:6 [ main::i#2 ] )
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  [11] (byte) nest::j#2 ← phi( nest/(byte/signed byte/word/signed word/dword/signed dword) 100 nest::@1/(byte) nest::j#1 ) [ nest::j#2 ] ( main:2::nest:6 [ main::i#2 nest::j#2 ] )
  [12] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] ( main:2::nest:6 [ main::i#2 nest::j#2 ] )
  [13] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] ( main:2::nest:6 [ main::i#2 nest::j#1 ] )
  [14] if((byte) nest::j#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto nest::@1 [ nest::j#1 ] ( main:2::nest:6 [ main::i#2 nest::j#1 ] )
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  [15] return  [ ] ( main:2::nest:6 [ main::i#2 ] )
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0
(void()) nest()
(byte) nest::j
(byte) nest::j#1 151.5
(byte) nest::j#2 151.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ nest::j#2 nest::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ nest::j#2 nest::j#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ nest::j#2 nest::j#1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG4 @2
b2:
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label i = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 100 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #$64
    sta i
    jmp b1
  //SEG12 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] call nest  [ main::i#2 ] ( main:2 [ main::i#2 ] )
  //SEG16 [10] phi from main::@1 to nest [phi:main::@1->nest]
  nest_from_b1:
    jsr nest
    jmp b3
  //SEG17 main::@3
  b3:
  //SEG18 [7] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuz1=_dec_vbuz1 
    dec i
  //SEG19 [8] if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuz1_gt_0_then_la1 
    lda i
    bne b1_from_b3
    jmp breturn
  //SEG20 main::@return
  breturn:
  //SEG21 [9] return  [ ] ( main:2 [ ] )
    rts
}
//SEG22 nest
nest: {
    .label j = 3
  //SEG23 [11] phi from nest to nest::@1 [phi:nest->nest::@1]
  b1_from_nest:
  //SEG24 [11] phi (byte) nest::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 100 [phi:nest->nest::@1#0] -- vbuz1=vbuc1 
    lda #$64
    sta j
    jmp b1
  //SEG25 [11] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  b1_from_b1:
  //SEG26 [11] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
    jmp b1
  //SEG27 nest::@1
  b1:
  //SEG28 [12] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] ( main:2::nest:6 [ main::i#2 nest::j#2 ] ) -- _deref_pbuc1=vbuz1 
    lda j
    sta SCREEN
  //SEG29 [13] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] ( main:2::nest:6 [ main::i#2 nest::j#1 ] ) -- vbuz1=_dec_vbuz1 
    dec j
  //SEG30 [14] if((byte) nest::j#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto nest::@1 [ nest::j#1 ] ( main:2::nest:6 [ main::i#2 nest::j#1 ] ) -- vbuz1_gt_0_then_la1 
    lda j
    bne b1_from_b1
    jmp breturn
  //SEG31 nest::@return
  breturn:
  //SEG32 [15] return  [ ] ( main:2::nest:6 [ main::i#2 ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ nest::j#2 nest::j#1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [nest] 303: zp ZP_BYTE:3 [ nest::j#2 nest::j#1 ] 
Uplift Scope [main] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [nest] best 2428 combination reg byte x [ nest::j#2 nest::j#1 ] 
Uplifting [main] best 2358 combination reg byte y [ main::i#2 main::i#1 ] 
Uplifting [] best 2358 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG4 @2
b2:
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 100 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #$64
    jmp b1
  //SEG12 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] call nest  [ main::i#2 ] ( main:2 [ main::i#2 ] )
  //SEG16 [10] phi from main::@1 to nest [phi:main::@1->nest]
  nest_from_b1:
    jsr nest
    jmp b3
  //SEG17 main::@3
  b3:
  //SEG18 [7] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuyy=_dec_vbuyy 
    dey
  //SEG19 [8] if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuyy_gt_0_then_la1 
    cpy #0
    bne b1_from_b3
    jmp breturn
  //SEG20 main::@return
  breturn:
  //SEG21 [9] return  [ ] ( main:2 [ ] )
    rts
}
//SEG22 nest
nest: {
  //SEG23 [11] phi from nest to nest::@1 [phi:nest->nest::@1]
  b1_from_nest:
  //SEG24 [11] phi (byte) nest::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 100 [phi:nest->nest::@1#0] -- vbuxx=vbuc1 
    ldx #$64
    jmp b1
  //SEG25 [11] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  b1_from_b1:
  //SEG26 [11] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
    jmp b1
  //SEG27 nest::@1
  b1:
  //SEG28 [12] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] ( main:2::nest:6 [ main::i#2 nest::j#2 ] ) -- _deref_pbuc1=vbuxx 
    stx SCREEN
  //SEG29 [13] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] ( main:2::nest:6 [ main::i#2 nest::j#1 ] ) -- vbuxx=_dec_vbuxx 
    dex
  //SEG30 [14] if((byte) nest::j#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto nest::@1 [ nest::j#1 ] ( main:2::nest:6 [ main::i#2 nest::j#1 ] ) -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b1_from_b1
    jmp breturn
  //SEG31 nest::@return
  breturn:
  //SEG32 [15] return  [ ] ( main:2::nest:6 [ main::i#2 ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b3 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b2_from_bbegin:
Removing instruction main_from_b2:
Removing instruction bend_from_b2:
Removing instruction b1_from_b3:
Removing instruction nest_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b2:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_nest:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(void()) main()
(label) main::@1
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 11.0
(void()) nest()
(label) nest::@1
(label) nest::@return
(byte) nest::j
(byte) nest::j#1 reg byte x 151.5
(byte) nest::j#2 reg byte x 151.5

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ nest::j#2 nest::j#1 ]


FINAL ASSEMBLER
Score: 1359

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
//SEG4 @2
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 100 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #$64
  //SEG12 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] call nest  [ main::i#2 ] ( main:2 [ main::i#2 ] )
  //SEG16 [10] phi from main::@1 to nest [phi:main::@1->nest]
    jsr nest
  //SEG17 main::@3
  //SEG18 [7] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuyy=_dec_vbuyy 
    dey
  //SEG19 [8] if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuyy_gt_0_then_la1 
    cpy #0
    bne b1
  //SEG20 main::@return
  //SEG21 [9] return  [ ] ( main:2 [ ] )
    rts
}
//SEG22 nest
nest: {
  //SEG23 [11] phi from nest to nest::@1 [phi:nest->nest::@1]
  //SEG24 [11] phi (byte) nest::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 100 [phi:nest->nest::@1#0] -- vbuxx=vbuc1 
    ldx #$64
  //SEG25 [11] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  //SEG26 [11] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
  //SEG27 nest::@1
  b1:
  //SEG28 [12] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] ( main:2::nest:6 [ main::i#2 nest::j#2 ] ) -- _deref_pbuc1=vbuxx 
    stx SCREEN
  //SEG29 [13] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] ( main:2::nest:6 [ main::i#2 nest::j#1 ] ) -- vbuxx=_dec_vbuxx 
    dex
  //SEG30 [14] if((byte) nest::j#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto nest::@1 [ nest::j#1 ] ( main:2::nest:6 [ main::i#2 nest::j#1 ] ) -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b1
  //SEG31 nest::@return
  //SEG32 [15] return  [ ] ( main:2::nest:6 [ main::i#2 ] )
    rts
}

