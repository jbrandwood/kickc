Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call vicSelectGfxBank SCREEN 
Inlined call main::$1 = call toD018 SCREEN BITMAP 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  divr16u::divisor#6 = phi( div32u16u/divr16u::divisor#0, div32u16u::@1/divr16u::divisor#1 )
  divr16u::dividend#5 = phi( div32u16u/divr16u::dividend#1, div32u16u::@1/divr16u::dividend#2 )
  divr16u::rem#10 = phi( div32u16u/divr16u::rem#3, div32u16u::@1/divr16u::rem#4 )
  divr16u::quotient#0 = 0
  divr16u::i#0 = 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  divr16u::i#5 = phi( divr16u/divr16u::i#0, divr16u::@3/divr16u::i#1 )
  divr16u::divisor#4 = phi( divr16u/divr16u::divisor#6, divr16u::@3/divr16u::divisor#7 )
  divr16u::quotient#6 = phi( divr16u/divr16u::quotient#0, divr16u::@3/divr16u::quotient#8 )
  divr16u::dividend#3 = phi( divr16u/divr16u::dividend#5, divr16u::@3/divr16u::dividend#6 )
  divr16u::rem#5 = phi( divr16u/divr16u::rem#10, divr16u::@3/divr16u::rem#11 )
  divr16u::$0 = divr16u::rem#5 << 1
  divr16u::rem#0 = divr16u::$0
  divr16u::$1 = > divr16u::dividend#3
  divr16u::$2 = divr16u::$1 & $80
  divr16u::$3 = divr16u::$2 != 0
  divr16u::$4 = ! divr16u::$3
  if(divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  divr16u::i#3 = phi( divr16u::@1/divr16u::i#5, divr16u::@4/divr16u::i#6 )
  divr16u::divisor#2 = phi( divr16u::@1/divr16u::divisor#4, divr16u::@4/divr16u::divisor#5 )
  divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  divr16u::quotient#3 = phi( divr16u::@1/divr16u::quotient#6, divr16u::@4/divr16u::quotient#7 )
  divr16u::dividend#4 = phi( divr16u::@1/divr16u::dividend#3, divr16u::@4/divr16u::dividend#7 )
  divr16u::$6 = divr16u::dividend#4 << 1
  divr16u::dividend#0 = divr16u::$6
  divr16u::$7 = divr16u::quotient#3 << 1
  divr16u::quotient#1 = divr16u::$7
  divr16u::$8 = divr16u::rem#6 >= divr16u::divisor#2
  divr16u::$9 = ! divr16u::$8
  if(divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  divr16u::i#6 = phi( divr16u::@1/divr16u::i#5 )
  divr16u::divisor#5 = phi( divr16u::@1/divr16u::divisor#4 )
  divr16u::quotient#7 = phi( divr16u::@1/divr16u::quotient#6 )
  divr16u::dividend#7 = phi( divr16u::@1/divr16u::dividend#3 )
  divr16u::rem#7 = phi( divr16u::@1/divr16u::rem#0 )
  divr16u::$5 = divr16u::rem#7 | 1
  divr16u::rem#1 = divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  divr16u::divisor#7 = phi( divr16u::@2/divr16u::divisor#2, divr16u::@5/divr16u::divisor#3 )
  divr16u::quotient#8 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  divr16u::dividend#6 = phi( divr16u::@2/divr16u::dividend#0, divr16u::@5/divr16u::dividend#8 )
  divr16u::rem#11 = phi( divr16u::@2/divr16u::rem#6, divr16u::@5/divr16u::rem#2 )
  divr16u::i#2 = phi( divr16u::@2/divr16u::i#3, divr16u::@5/divr16u::i#4 )
  divr16u::i#1 = divr16u::i#2 + rangenext(0,$f)
  divr16u::$11 = divr16u::i#1 != rangelast(0,$f)
  if(divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  divr16u::dividend#8 = phi( divr16u::@2/divr16u::dividend#0 )
  divr16u::i#4 = phi( divr16u::@2/divr16u::i#3 )
  divr16u::divisor#3 = phi( divr16u::@2/divr16u::divisor#2 )
  divr16u::rem#8 = phi( divr16u::@2/divr16u::rem#6 )
  divr16u::quotient#4 = phi( divr16u::@2/divr16u::quotient#1 )
  divr16u::quotient#2 = ++ divr16u::quotient#4
  divr16u::$10 = divr16u::rem#8 - divr16u::divisor#3
  divr16u::rem#2 = divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  divr16u::quotient#5 = phi( divr16u::@3/divr16u::quotient#8 )
  divr16u::rem#9 = phi( divr16u::@3/divr16u::rem#11 )
  rem16u#0 = divr16u::rem#9
  divr16u::return#0 = divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  rem16u#12 = phi( divr16u::@6/rem16u#0 )
  divr16u::return#4 = phi( divr16u::@6/divr16u::return#0 )
  divr16u::return#1 = divr16u::return#4
  rem16u#1 = rem16u#12
  return 
  to:@return

dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen2
  rem16u#22 = phi( sin16s_gen2/rem16u#23 )
  div32u16u::divisor#1 = phi( sin16s_gen2/div32u16u::divisor#0 )
  div32u16u::dividend#1 = phi( sin16s_gen2/div32u16u::dividend#0 )
  div32u16u::$0 = > div32u16u::dividend#1
  divr16u::dividend#1 = div32u16u::$0
  divr16u::divisor#0 = div32u16u::divisor#1
  divr16u::rem#3 = 0
  call divr16u 
  divr16u::return#2 = divr16u::return#1
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  div32u16u::divisor#2 = phi( div32u16u/div32u16u::divisor#1 )
  div32u16u::dividend#2 = phi( div32u16u/div32u16u::dividend#1 )
  rem16u#13 = phi( div32u16u/rem16u#1 )
  divr16u::return#5 = phi( div32u16u/divr16u::return#2 )
  div32u16u::$1 = divr16u::return#5
  rem16u#2 = rem16u#13
  div32u16u::quotient_hi#0 = div32u16u::$1
  div32u16u::$2 = < div32u16u::dividend#2
  divr16u::dividend#2 = div32u16u::$2
  divr16u::divisor#1 = div32u16u::divisor#2
  divr16u::rem#4 = rem16u#2
  call divr16u 
  divr16u::return#3 = divr16u::return#1
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  div32u16u::quotient_hi#1 = phi( div32u16u::@1/div32u16u::quotient_hi#0 )
  rem16u#14 = phi( div32u16u::@1/rem16u#1 )
  divr16u::return#6 = phi( div32u16u::@1/divr16u::return#3 )
  div32u16u::$3 = divr16u::return#6
  rem16u#3 = rem16u#14
  div32u16u::quotient_lo#0 = div32u16u::$3
  div32u16u::quotient#0 = (dword){ div32u16u::quotient_hi#1, div32u16u::quotient_lo#0 }
  div32u16u::return#0 = div32u16u::quotient#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  rem16u#15 = phi( div32u16u::@2/rem16u#3 )
  div32u16u::return#3 = phi( div32u16u::@2/div32u16u::return#0 )
  div32u16u::return#1 = div32u16u::return#3
  rem16u#4 = rem16u#15
  return 
  to:@return

dword mul16u(word mul16u::a , word mul16u::b)
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  mul16u::a#6 = phi( mul16s/mul16u::a#1, mulu16_sel/mul16u::a#2 )
  mul16u::b#2 = phi( mul16s/mul16u::b#0, mulu16_sel/mul16u::b#1 )
  mul16u::res#0 = 0
  mul16u::mb#0 = (dword)mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  mul16u::mb#5 = phi( mul16u/mul16u::mb#0, mul16u::@4/mul16u::mb#1 )
  mul16u::res#4 = phi( mul16u/mul16u::res#0, mul16u::@4/mul16u::res#6 )
  mul16u::a#3 = phi( mul16u/mul16u::a#6, mul16u::@4/mul16u::a#0 )
  mul16u::$0 = mul16u::a#3 != 0
  if(mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  mul16u::res#5 = phi( mul16u::@1/mul16u::res#4 )
  mul16u::mb#4 = phi( mul16u::@1/mul16u::mb#5 )
  mul16u::a#4 = phi( mul16u::@1/mul16u::a#3 )
  mul16u::$1 = mul16u::a#4 & 1
  mul16u::$2 = mul16u::$1 != 0
  mul16u::$3 = ! mul16u::$2
  if(mul16u::$3) goto mul16u::@4
  to:mul16u::@5
mul16u::@3: scope:[mul16u]  from mul16u::@1
  mul16u::res#2 = phi( mul16u::@1/mul16u::res#4 )
  mul16u::return#0 = mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@5
  mul16u::res#6 = phi( mul16u::@2/mul16u::res#5, mul16u::@5/mul16u::res#1 )
  mul16u::mb#2 = phi( mul16u::@2/mul16u::mb#4, mul16u::@5/mul16u::mb#3 )
  mul16u::a#5 = phi( mul16u::@2/mul16u::a#4, mul16u::@5/mul16u::a#7 )
  mul16u::$5 = mul16u::a#5 >> 1
  mul16u::a#0 = mul16u::$5
  mul16u::$6 = mul16u::mb#2 << 1
  mul16u::mb#1 = mul16u::$6
  to:mul16u::@1
mul16u::@5: scope:[mul16u]  from mul16u::@2
  mul16u::a#7 = phi( mul16u::@2/mul16u::a#4 )
  mul16u::mb#3 = phi( mul16u::@2/mul16u::mb#4 )
  mul16u::res#3 = phi( mul16u::@2/mul16u::res#5 )
  mul16u::$4 = mul16u::res#3 + mul16u::mb#3
  mul16u::res#1 = mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  mul16u::return#4 = phi( mul16u::@3/mul16u::return#0 )
  mul16u::return#1 = mul16u::return#4
  return 
  to:@return

signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
mul16s: scope:[mul16s]  from sin16s_gen2::@4
  mul16s::b#1 = phi( sin16s_gen2::@4/mul16s::b#0 )
  mul16s::a#1 = phi( sin16s_gen2::@4/mul16s::a#0 )
  mul16u::a#1 = (word)mul16s::a#1
  mul16u::b#0 = (word)mul16s::b#1
  call mul16u 
  mul16u::return#2 = mul16u::return#1
  to:mul16s::@5
mul16s::@5: scope:[mul16s]  from mul16s
  mul16s::b#4 = phi( mul16s/mul16s::b#1 )
  mul16s::a#2 = phi( mul16s/mul16s::a#1 )
  mul16u::return#5 = phi( mul16s/mul16u::return#2 )
  mul16s::$0 = mul16u::return#5
  mul16s::m#0 = mul16s::$0
  mul16s::$1 = mul16s::a#2 < 0
  mul16s::$2 = ! mul16s::$1
  if(mul16s::$2) goto mul16s::@1
  to:mul16s::@3
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@5
  mul16s::a#4 = phi( mul16s::@3/mul16s::a#5, mul16s::@5/mul16s::a#2 )
  mul16s::m#6 = phi( mul16s::@3/mul16s::m#1, mul16s::@5/mul16s::m#0 )
  mul16s::b#2 = phi( mul16s::@3/mul16s::b#3, mul16s::@5/mul16s::b#4 )
  mul16s::$3 = mul16s::b#2 < 0
  mul16s::$4 = ! mul16s::$3
  if(mul16s::$4) goto mul16s::@2
  to:mul16s::@4
mul16s::@3: scope:[mul16s]  from mul16s::@5
  mul16s::a#5 = phi( mul16s::@5/mul16s::a#2 )
  mul16s::b#3 = phi( mul16s::@5/mul16s::b#4 )
  mul16s::m#3 = phi( mul16s::@5/mul16s::m#0 )
  mul16s::$6 = > mul16s::m#3
  mul16s::$13 = (word)mul16s::b#3
  mul16s::$7 = mul16s::$6 - mul16s::$13
  mul16s::$11 = mul16s::$7
  mul16s::m#1 = mul16s::m#3 hi= mul16s::$11
  to:mul16s::@1
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  mul16s::m#4 = phi( mul16s::@1/mul16s::m#6, mul16s::@4/mul16s::m#2 )
  mul16s::return#0 = (signed dword)mul16s::m#4
  to:mul16s::@return
mul16s::@4: scope:[mul16s]  from mul16s::@1
  mul16s::a#3 = phi( mul16s::@1/mul16s::a#4 )
  mul16s::m#5 = phi( mul16s::@1/mul16s::m#6 )
  mul16s::$9 = > mul16s::m#5
  mul16s::$14 = (word)mul16s::a#3
  mul16s::$10 = mul16s::$9 - mul16s::$14
  mul16s::$12 = mul16s::$10
  mul16s::m#2 = mul16s::m#5 hi= mul16s::$12
  to:mul16s::@2
mul16s::@return: scope:[mul16s]  from mul16s::@2
  mul16s::return#3 = phi( mul16s::@2/mul16s::return#0 )
  mul16s::return#1 = mul16s::return#3
  return 
  to:@return

void sin16s_gen2(signed word* sin16s_gen2::sintab , word sin16s_gen2::wavelength , signed word sin16s_gen2::min , signed word sin16s_gen2::max)
sin16s_gen2: scope:[sin16s_gen2]  from main::@6
  sin16s_gen2::sintab#7 = phi( main::@6/sin16s_gen2::sintab#1 )
  rem16u#23 = phi( main::@6/rem16u#25 )
  sin16s_gen2::wavelength#1 = phi( main::@6/sin16s_gen2::wavelength#0 )
  sin16s_gen2::min#1 = phi( main::@6/sin16s_gen2::min#0 )
  sin16s_gen2::max#1 = phi( main::@6/sin16s_gen2::max#0 )
  sin16s_gen2::$0 = sin16s_gen2::max#1 - sin16s_gen2::min#1
  sin16s_gen2::ampl#0 = sin16s_gen2::$0
  sin16s_gen2::$1 = sin16s_gen2::ampl#0 >> 1
  sin16s_gen2::$2 = sin16s_gen2::min#1 + sin16s_gen2::$1
  sin16s_gen2::offs#0 = sin16s_gen2::$2
  div32u16u::dividend#0 = PI2_u4f28
  div32u16u::divisor#0 = sin16s_gen2::wavelength#1
  call div32u16u 
  div32u16u::return#2 = div32u16u::return#1
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  sin16s_gen2::sintab#6 = phi( sin16s_gen2/sin16s_gen2::sintab#7 )
  sin16s_gen2::offs#5 = phi( sin16s_gen2/sin16s_gen2::offs#0 )
  sin16s_gen2::ampl#4 = phi( sin16s_gen2/sin16s_gen2::ampl#0 )
  sin16s_gen2::wavelength#3 = phi( sin16s_gen2/sin16s_gen2::wavelength#1 )
  rem16u#16 = phi( sin16s_gen2/rem16u#4 )
  div32u16u::return#4 = phi( sin16s_gen2/div32u16u::return#2 )
  sin16s_gen2::$3 = div32u16u::return#4
  rem16u#5 = rem16u#16
  sin16s_gen2::step#0 = sin16s_gen2::$3
  sin16s_gen2::x#0 = 0
  sin16s_gen2::i#0 = 0
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  sin16s_gen2::step#4 = phi( sin16s_gen2::@3/sin16s_gen2::step#0, sin16s_gen2::@5/sin16s_gen2::step#1 )
  sin16s_gen2::sintab#5 = phi( sin16s_gen2::@3/sin16s_gen2::sintab#6, sin16s_gen2::@5/sin16s_gen2::sintab#0 )
  sin16s_gen2::offs#4 = phi( sin16s_gen2::@3/sin16s_gen2::offs#5, sin16s_gen2::@5/sin16s_gen2::offs#1 )
  sin16s_gen2::ampl#3 = phi( sin16s_gen2::@3/sin16s_gen2::ampl#4, sin16s_gen2::@5/sin16s_gen2::ampl#5 )
  rem16u#24 = phi( sin16s_gen2::@3/rem16u#5, sin16s_gen2::@5/rem16u#28 )
  sin16s_gen2::x#4 = phi( sin16s_gen2::@3/sin16s_gen2::x#0, sin16s_gen2::@5/sin16s_gen2::x#1 )
  sin16s_gen2::wavelength#2 = phi( sin16s_gen2::@3/sin16s_gen2::wavelength#3, sin16s_gen2::@5/sin16s_gen2::wavelength#4 )
  sin16s_gen2::i#2 = phi( sin16s_gen2::@3/sin16s_gen2::i#0, sin16s_gen2::@5/sin16s_gen2::i#1 )
  sin16s_gen2::$4 = sin16s_gen2::i#2 < sin16s_gen2::wavelength#2
  if(sin16s_gen2::$4) goto sin16s_gen2::@2
  to:sin16s_gen2::@return
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2::@1
  rem16u#34 = phi( sin16s_gen2::@1/rem16u#24 )
  sin16s_gen2::wavelength#6 = phi( sin16s_gen2::@1/sin16s_gen2::wavelength#2 )
  sin16s_gen2::i#5 = phi( sin16s_gen2::@1/sin16s_gen2::i#2 )
  sin16s_gen2::step#3 = phi( sin16s_gen2::@1/sin16s_gen2::step#4 )
  sin16s_gen2::sintab#4 = phi( sin16s_gen2::@1/sin16s_gen2::sintab#5 )
  sin16s_gen2::offs#3 = phi( sin16s_gen2::@1/sin16s_gen2::offs#4 )
  sin16s_gen2::ampl#2 = phi( sin16s_gen2::@1/sin16s_gen2::ampl#3 )
  sin16s_gen2::x#2 = phi( sin16s_gen2::@1/sin16s_gen2::x#4 )
  sin16s::x#0 = sin16s_gen2::x#2
  call sin16s 
  sin16s::return#0 = sin16s::return#2
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@2
  rem16u#32 = phi( sin16s_gen2::@2/rem16u#34 )
  sin16s_gen2::wavelength#5 = phi( sin16s_gen2::@2/sin16s_gen2::wavelength#6 )
  sin16s_gen2::i#4 = phi( sin16s_gen2::@2/sin16s_gen2::i#5 )
  sin16s_gen2::step#2 = phi( sin16s_gen2::@2/sin16s_gen2::step#3 )
  sin16s_gen2::x#5 = phi( sin16s_gen2::@2/sin16s_gen2::x#2 )
  sin16s_gen2::sintab#3 = phi( sin16s_gen2::@2/sin16s_gen2::sintab#4 )
  sin16s_gen2::offs#2 = phi( sin16s_gen2::@2/sin16s_gen2::offs#3 )
  sin16s_gen2::ampl#1 = phi( sin16s_gen2::@2/sin16s_gen2::ampl#2 )
  sin16s::return#3 = phi( sin16s_gen2::@2/sin16s::return#0 )
  sin16s_gen2::$5 = sin16s::return#3
  mul16s::a#0 = sin16s_gen2::$5
  mul16s::b#0 = sin16s_gen2::ampl#1
  call mul16s 
  mul16s::return#2 = mul16s::return#1
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  sin16s_gen2::ampl#5 = phi( sin16s_gen2::@4/sin16s_gen2::ampl#1 )
  rem16u#28 = phi( sin16s_gen2::@4/rem16u#32 )
  sin16s_gen2::wavelength#4 = phi( sin16s_gen2::@4/sin16s_gen2::wavelength#5 )
  sin16s_gen2::i#3 = phi( sin16s_gen2::@4/sin16s_gen2::i#4 )
  sin16s_gen2::step#1 = phi( sin16s_gen2::@4/sin16s_gen2::step#2 )
  sin16s_gen2::x#3 = phi( sin16s_gen2::@4/sin16s_gen2::x#5 )
  sin16s_gen2::sintab#2 = phi( sin16s_gen2::@4/sin16s_gen2::sintab#3 )
  sin16s_gen2::offs#1 = phi( sin16s_gen2::@4/sin16s_gen2::offs#2 )
  mul16s::return#4 = phi( sin16s_gen2::@4/mul16s::return#2 )
  sin16s_gen2::$6 = mul16s::return#4
  sin16s_gen2::$7 = > sin16s_gen2::$6
  sin16s_gen2::$10 = (signed word)sin16s_gen2::$7
  sin16s_gen2::$8 = sin16s_gen2::offs#1 + sin16s_gen2::$10
  *sin16s_gen2::sintab#2 = sin16s_gen2::$8
  sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_SIGNED_WORD
  sin16s_gen2::$9 = sin16s_gen2::x#3 + sin16s_gen2::step#1
  sin16s_gen2::x#1 = sin16s_gen2::$9
  sin16s_gen2::i#1 = ++ sin16s_gen2::i#3
  to:sin16s_gen2::@1
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@1
  rem16u#17 = phi( sin16s_gen2::@1/rem16u#24 )
  rem16u#6 = rem16u#17
  return 
  to:@return

signed word sin16s(dword sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen2::@2
  sin16s::x#3 = phi( sin16s_gen2::@2/sin16s::x#0 )
  sin16s::isUpper#0 = 0
  sin16s::$0 = sin16s::x#3 >= PI_u4f28
  sin16s::$1 = ! sin16s::$0
  if(sin16s::$1) goto sin16s::@1
  to:sin16s::@4
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  sin16s::isUpper#8 = phi( sin16s/sin16s::isUpper#0, sin16s::@4/sin16s::isUpper#1 )
  sin16s::x#4 = phi( sin16s/sin16s::x#3, sin16s::@4/sin16s::x#1 )
  sin16s::$2 = sin16s::x#4 >= PI_HALF_u4f28
  sin16s::$3 = ! sin16s::$2
  if(sin16s::$3) goto sin16s::@2
  to:sin16s::@5
sin16s::@4: scope:[sin16s]  from sin16s
  sin16s::x#5 = phi( sin16s/sin16s::x#3 )
  sin16s::$16 = sin16s::x#5 - PI_u4f28
  sin16s::x#1 = sin16s::$16
  sin16s::isUpper#1 = 1
  to:sin16s::@1
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  sin16s::isUpper#7 = phi( sin16s::@1/sin16s::isUpper#8, sin16s::@5/sin16s::isUpper#9 )
  sin16s::x#6 = phi( sin16s::@1/sin16s::x#4, sin16s::@5/sin16s::x#2 )
  sin16s::$4 = sin16s::x#6 << 3
  sin16s::$5 = > sin16s::$4
  sin16s::x1#0 = sin16s::$5
  mulu16_sel::v1#0 = sin16s::x1#0
  mulu16_sel::v2#0 = sin16s::x1#0
  mulu16_sel::select#0 = 0
  call mulu16_sel 
  mulu16_sel::return#0 = mulu16_sel::return#6
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  sin16s::isUpper#6 = phi( sin16s::@2/sin16s::isUpper#7 )
  sin16s::x1#1 = phi( sin16s::@2/sin16s::x1#0 )
  mulu16_sel::return#7 = phi( sin16s::@2/mulu16_sel::return#0 )
  sin16s::$6 = mulu16_sel::return#7
  sin16s::x2#0 = sin16s::$6
  mulu16_sel::v1#1 = sin16s::x2#0
  mulu16_sel::v2#1 = sin16s::x1#1
  mulu16_sel::select#1 = 1
  call mulu16_sel 
  mulu16_sel::return#1 = mulu16_sel::return#6
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  sin16s::isUpper#5 = phi( sin16s::@7/sin16s::isUpper#6 )
  sin16s::x1#4 = phi( sin16s::@7/sin16s::x1#1 )
  mulu16_sel::return#8 = phi( sin16s::@7/mulu16_sel::return#1 )
  sin16s::$7 = mulu16_sel::return#8
  sin16s::x3#0 = sin16s::$7
  mulu16_sel::v1#2 = sin16s::x3#0
  mulu16_sel::v2#2 = $10000/6
  mulu16_sel::select#2 = 1
  call mulu16_sel 
  mulu16_sel::return#2 = mulu16_sel::return#6
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  sin16s::isUpper#4 = phi( sin16s::@8/sin16s::isUpper#5 )
  sin16s::x3#1 = phi( sin16s::@8/sin16s::x3#0 )
  sin16s::x1#2 = phi( sin16s::@8/sin16s::x1#4 )
  mulu16_sel::return#9 = phi( sin16s::@8/mulu16_sel::return#2 )
  sin16s::$8 = mulu16_sel::return#9
  sin16s::x3_6#0 = sin16s::$8
  sin16s::$9 = sin16s::x1#2 - sin16s::x3_6#0
  sin16s::usinx#0 = sin16s::$9
  mulu16_sel::v1#3 = sin16s::x3#1
  mulu16_sel::v2#3 = sin16s::x1#2
  mulu16_sel::select#3 = 0
  call mulu16_sel 
  mulu16_sel::return#3 = mulu16_sel::return#6
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  sin16s::isUpper#3 = phi( sin16s::@9/sin16s::isUpper#4 )
  sin16s::usinx#4 = phi( sin16s::@9/sin16s::usinx#0 )
  sin16s::x1#3 = phi( sin16s::@9/sin16s::x1#2 )
  mulu16_sel::return#10 = phi( sin16s::@9/mulu16_sel::return#3 )
  sin16s::$10 = mulu16_sel::return#10
  sin16s::x4#0 = sin16s::$10
  mulu16_sel::v1#4 = sin16s::x4#0
  mulu16_sel::v2#4 = sin16s::x1#3
  mulu16_sel::select#4 = 0
  call mulu16_sel 
  mulu16_sel::return#4 = mulu16_sel::return#6
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  sin16s::isUpper#2 = phi( sin16s::@10/sin16s::isUpper#3 )
  sin16s::usinx#2 = phi( sin16s::@10/sin16s::usinx#4 )
  mulu16_sel::return#11 = phi( sin16s::@10/mulu16_sel::return#4 )
  sin16s::$11 = mulu16_sel::return#11
  sin16s::x5#0 = sin16s::$11
  sin16s::$12 = sin16s::x5#0 >> 4
  sin16s::x5_128#0 = sin16s::$12
  sin16s::$13 = sin16s::usinx#2 + sin16s::x5_128#0
  sin16s::usinx#1 = sin16s::$13
  sin16s::sinx#0 = (signed word)sin16s::usinx#1
  sin16s::$14 = sin16s::isUpper#2 != 0
  sin16s::$15 = ! sin16s::$14
  if(sin16s::$15) goto sin16s::@3
  to:sin16s::@6
sin16s::@5: scope:[sin16s]  from sin16s::@1
  sin16s::isUpper#9 = phi( sin16s::@1/sin16s::isUpper#8 )
  sin16s::x#7 = phi( sin16s::@1/sin16s::x#4 )
  sin16s::$17 = PI_u4f28 - sin16s::x#7
  sin16s::x#2 = sin16s::$17
  to:sin16s::@2
sin16s::@3: scope:[sin16s]  from sin16s::@11 sin16s::@6
  sin16s::sinx#2 = phi( sin16s::@11/sin16s::sinx#0, sin16s::@6/sin16s::sinx#1 )
  sin16s::return#1 = sin16s::sinx#2
  to:sin16s::@return
sin16s::@6: scope:[sin16s]  from sin16s::@11
  sin16s::usinx#3 = phi( sin16s::@11/sin16s::usinx#1 )
  sin16s::$18 = - (signed word)sin16s::usinx#3
  sin16s::sinx#1 = sin16s::$18
  to:sin16s::@3
sin16s::@return: scope:[sin16s]  from sin16s::@3
  sin16s::return#4 = phi( sin16s::@3/sin16s::return#1 )
  sin16s::return#2 = sin16s::return#4
  return 
  to:@return

word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  mulu16_sel::select#6 = phi( sin16s::@10/mulu16_sel::select#4, sin16s::@2/mulu16_sel::select#0, sin16s::@7/mulu16_sel::select#1, sin16s::@8/mulu16_sel::select#2, sin16s::@9/mulu16_sel::select#3 )
  mulu16_sel::v2#5 = phi( sin16s::@10/mulu16_sel::v2#4, sin16s::@2/mulu16_sel::v2#0, sin16s::@7/mulu16_sel::v2#1, sin16s::@8/mulu16_sel::v2#2, sin16s::@9/mulu16_sel::v2#3 )
  mulu16_sel::v1#5 = phi( sin16s::@10/mulu16_sel::v1#4, sin16s::@2/mulu16_sel::v1#0, sin16s::@7/mulu16_sel::v1#1, sin16s::@8/mulu16_sel::v1#2, sin16s::@9/mulu16_sel::v1#3 )
  mul16u::a#2 = mulu16_sel::v1#5
  mul16u::b#1 = mulu16_sel::v2#5
  call mul16u 
  mul16u::return#3 = mul16u::return#1
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  mulu16_sel::select#5 = phi( mulu16_sel/mulu16_sel::select#6 )
  mul16u::return#6 = phi( mulu16_sel/mul16u::return#3 )
  mulu16_sel::$0 = mul16u::return#6
  mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5
  mulu16_sel::$2 = > mulu16_sel::$1
  mulu16_sel::return#5 = mulu16_sel::$2
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  mulu16_sel::return#12 = phi( mulu16_sel::@1/mulu16_sel::return#5 )
  mulu16_sel::return#6 = mulu16_sel::return#12
  return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  memset::c#5 = phi( bitmap_clear/memset::c#0, bitmap_clear::@1/memset::c#1 )
  memset::str#4 = phi( bitmap_clear/memset::str#0, bitmap_clear::@1/memset::str#1 )
  memset::num#2 = phi( bitmap_clear/memset::num#0, bitmap_clear::@1/memset::num#1 )
  memset::$0 = memset::num#2 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#2 = phi( memset/memset::str#4, memset::@3/memset::str#5 )
  memset::return#0 = memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#4 = phi( memset/memset::c#5 )
  memset::num#3 = phi( memset/memset::num#2 )
  memset::str#3 = phi( memset/memset::str#4 )
  memset::$4 = (byte*)memset::str#3
  memset::$2 = memset::$4 + memset::num#3
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#3 = phi( memset::@2/memset::c#4, memset::@4/memset::c#2 )
  memset::str#5 = phi( memset::@2/memset::str#3, memset::@4/memset::str#6 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#6 = phi( memset::@3/memset::str#5 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#2 = phi( memset::@3/memset::c#3 )
  *memset::dst#3 = memset::c#2
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#4 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#4
  return 
  to:@return

void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from main::@4
  bitmap_init::screen#1 = phi( main::@4/bitmap_init::screen#0 )
  bitmap_init::gfx#1 = phi( main::@4/bitmap_init::gfx#0 )
  bitmap_gfx#0 = bitmap_init::gfx#1
  bitmap_screen#0 = bitmap_init::screen#1
  bitmap_init::bits#0 = $80
  bitmap_init::x#0 = 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  bitmap_screen#28 = phi( bitmap_init/bitmap_screen#0, bitmap_init::@2/bitmap_screen#25 )
  bitmap_gfx#29 = phi( bitmap_init/bitmap_gfx#0, bitmap_init::@2/bitmap_gfx#26 )
  bitmap_init::gfx#4 = phi( bitmap_init/bitmap_init::gfx#1, bitmap_init::@2/bitmap_init::gfx#3 )
  bitmap_init::x#2 = phi( bitmap_init/bitmap_init::x#0, bitmap_init::@2/bitmap_init::x#1 )
  bitmap_init::bits#3 = phi( bitmap_init/bitmap_init::bits#0, bitmap_init::@2/bitmap_init::bits#4 )
  bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
  bitmap_init::$0 = bitmap_init::bits#1 == 0
  bitmap_init::$1 = ! bitmap_init::$0
  if(bitmap_init::$1) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  bitmap_screen#25 = phi( bitmap_init::@1/bitmap_screen#28, bitmap_init::@3/bitmap_screen#29 )
  bitmap_gfx#26 = phi( bitmap_init::@1/bitmap_gfx#29, bitmap_init::@3/bitmap_gfx#30 )
  bitmap_init::gfx#3 = phi( bitmap_init::@1/bitmap_init::gfx#4, bitmap_init::@3/bitmap_init::gfx#5 )
  bitmap_init::bits#4 = phi( bitmap_init::@1/bitmap_init::bits#1, bitmap_init::@3/bitmap_init::bits#2 )
  bitmap_init::x#3 = phi( bitmap_init::@1/bitmap_init::x#2, bitmap_init::@3/bitmap_init::x#4 )
  bitmap_init::x#1 = bitmap_init::x#3 + rangenext(0,$ff)
  bitmap_init::$2 = bitmap_init::x#1 != rangelast(0,$ff)
  if(bitmap_init::$2) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  bitmap_screen#29 = phi( bitmap_init::@1/bitmap_screen#28 )
  bitmap_gfx#30 = phi( bitmap_init::@1/bitmap_gfx#29 )
  bitmap_init::gfx#5 = phi( bitmap_init::@1/bitmap_init::gfx#4 )
  bitmap_init::x#4 = phi( bitmap_init::@1/bitmap_init::x#2 )
  bitmap_init::bits#2 = $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  bitmap_screen#22 = phi( bitmap_init::@2/bitmap_screen#25 )
  bitmap_gfx#23 = phi( bitmap_init::@2/bitmap_gfx#26 )
  bitmap_init::gfx#2 = phi( bitmap_init::@2/bitmap_init::gfx#3 )
  bitmap_init::yoffs#0 = bitmap_init::gfx#2
  bitmap_init::y#0 = 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  bitmap_screen#17 = phi( bitmap_init::@4/bitmap_screen#22, bitmap_init::@6/bitmap_screen#13 )
  bitmap_gfx#18 = phi( bitmap_init::@4/bitmap_gfx#23, bitmap_init::@6/bitmap_gfx#13 )
  bitmap_init::yoffs#2 = phi( bitmap_init::@4/bitmap_init::yoffs#0, bitmap_init::@6/bitmap_init::yoffs#4 )
  bitmap_init::y#2 = phi( bitmap_init::@4/bitmap_init::y#0, bitmap_init::@6/bitmap_init::y#1 )
  bitmap_init::$3 = bitmap_init::y#2 & 7
  bitmap_init::$4 = < bitmap_init::yoffs#2
  bitmap_init::$5 = bitmap_init::$3 | bitmap_init::$4
  bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5
  bitmap_init::$6 = > bitmap_init::yoffs#2
  bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6
  bitmap_init::$7 = bitmap_init::y#2 & 7
  bitmap_init::$8 = bitmap_init::$7 == 7
  bitmap_init::$9 = ! bitmap_init::$8
  if(bitmap_init::$9) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  bitmap_screen#13 = phi( bitmap_init::@5/bitmap_screen#17, bitmap_init::@7/bitmap_screen#18 )
  bitmap_gfx#13 = phi( bitmap_init::@5/bitmap_gfx#18, bitmap_init::@7/bitmap_gfx#19 )
  bitmap_init::yoffs#4 = phi( bitmap_init::@5/bitmap_init::yoffs#2, bitmap_init::@7/bitmap_init::yoffs#1 )
  bitmap_init::y#3 = phi( bitmap_init::@5/bitmap_init::y#2, bitmap_init::@7/bitmap_init::y#4 )
  bitmap_init::y#1 = bitmap_init::y#3 + rangenext(0,$ff)
  bitmap_init::$11 = bitmap_init::y#1 != rangelast(0,$ff)
  if(bitmap_init::$11) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  bitmap_screen#18 = phi( bitmap_init::@5/bitmap_screen#17 )
  bitmap_gfx#19 = phi( bitmap_init::@5/bitmap_gfx#18 )
  bitmap_init::y#4 = phi( bitmap_init::@5/bitmap_init::y#2 )
  bitmap_init::yoffs#3 = phi( bitmap_init::@5/bitmap_init::yoffs#2 )
  bitmap_init::$10 = bitmap_init::yoffs#3 + $28*8
  bitmap_init::yoffs#1 = bitmap_init::$10
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  bitmap_screen#7 = phi( bitmap_init::@6/bitmap_screen#13 )
  bitmap_gfx#7 = phi( bitmap_init::@6/bitmap_gfx#13 )
  bitmap_gfx#1 = bitmap_gfx#7
  bitmap_screen#1 = bitmap_screen#7
  return 
  to:@return

void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@5
  bitmap_gfx#14 = phi( main::@5/bitmap_gfx#2 )
  bitmap_screen#8 = phi( main::@5/bitmap_screen#2 )
  bitmap_clear::bgcol#1 = phi( main::@5/bitmap_clear::bgcol#0 )
  bitmap_clear::fgcol#1 = phi( main::@5/bitmap_clear::fgcol#0 )
  bitmap_clear::$0 = bitmap_clear::fgcol#1 * $10
  bitmap_clear::$1 = bitmap_clear::$0 + bitmap_clear::bgcol#1
  bitmap_clear::col#0 = bitmap_clear::$1
  memset::str#0 = (void*)bitmap_screen#8
  memset::c#0 = bitmap_clear::col#0
  memset::num#0 = $3e8
  call memset 
  memset::return#2 = memset::return#1
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  bitmap_gfx#8 = phi( bitmap_clear/bitmap_gfx#14 )
  memset::str#1 = (void*)bitmap_gfx#8
  memset::c#1 = 0
  memset::num#1 = $1f40
  call memset 
  memset::return#3 = memset::return#1
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@2
  return 
  to:@return

void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from render_sine::@5 render_sine::@7
  bitmap_plot::x#2 = phi( render_sine::@5/bitmap_plot::x#0, render_sine::@7/bitmap_plot::x#1 )
  bitmap_plot::y#2 = phi( render_sine::@5/bitmap_plot::y#0, render_sine::@7/bitmap_plot::y#1 )
  bitmap_plot::plotter#0 = (byte*){ bitmap_plot_yhi[bitmap_plot::y#2], bitmap_plot_ylo[bitmap_plot::y#2] }
  bitmap_plot::$0 = bitmap_plot::x#2 & $fff8
  bitmap_plot::plotter#1 = bitmap_plot::plotter#0 + bitmap_plot::$0
  bitmap_plot::$1 = < bitmap_plot::x#2
  *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1]
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  rem16u#42 = phi( __start::@1/rem16u#27 )
  bitmap_screen#34 = phi( __start::@1/bitmap_screen#16 )
  bitmap_gfx#35 = phi( __start::@1/bitmap_gfx#17 )
  asm { sei  }
  *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  *PROCPORT = PROCPORT_RAM_IO
  *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3
  main::vicSelectGfxBank1_gfx#0 = SCREEN
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  rem16u#41 = phi( main/rem16u#42 )
  bitmap_screen#33 = phi( main/bitmap_screen#34 )
  bitmap_gfx#34 = phi( main/bitmap_gfx#35 )
  main::vicSelectGfxBank1_gfx#1 = phi( main/main::vicSelectGfxBank1_gfx#0 )
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  main::vicSelectGfxBank1_toDd001_gfx#0 = main::vicSelectGfxBank1_gfx#1
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  rem16u#40 = phi( main::vicSelectGfxBank1/rem16u#41 )
  bitmap_screen#32 = phi( main::vicSelectGfxBank1/bitmap_screen#33 )
  bitmap_gfx#33 = phi( main::vicSelectGfxBank1/bitmap_gfx#34 )
  main::vicSelectGfxBank1_toDd001_gfx#1 = phi( main::vicSelectGfxBank1/main::vicSelectGfxBank1_toDd001_gfx#0 )
  main::vicSelectGfxBank1_toDd001_$0 = > (word)main::vicSelectGfxBank1_toDd001_gfx#1
  main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
  main::vicSelectGfxBank1_toDd001_$2 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
  main::vicSelectGfxBank1_toDd001_return#0 = main::vicSelectGfxBank1_toDd001_$2
  to:main::vicSelectGfxBank1_toDd001_@return
main::vicSelectGfxBank1_toDd001_@return: scope:[main]  from main::vicSelectGfxBank1_toDd001
  rem16u#39 = phi( main::vicSelectGfxBank1_toDd001/rem16u#40 )
  bitmap_screen#31 = phi( main::vicSelectGfxBank1_toDd001/bitmap_screen#32 )
  bitmap_gfx#32 = phi( main::vicSelectGfxBank1_toDd001/bitmap_gfx#33 )
  main::vicSelectGfxBank1_toDd001_return#2 = phi( main::vicSelectGfxBank1_toDd001/main::vicSelectGfxBank1_toDd001_return#0 )
  main::vicSelectGfxBank1_toDd001_return#1 = main::vicSelectGfxBank1_toDd001_return#2
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001_@return
  rem16u#38 = phi( main::vicSelectGfxBank1_toDd001_@return/rem16u#39 )
  bitmap_screen#30 = phi( main::vicSelectGfxBank1_toDd001_@return/bitmap_screen#31 )
  bitmap_gfx#31 = phi( main::vicSelectGfxBank1_toDd001_@return/bitmap_gfx#32 )
  main::vicSelectGfxBank1_toDd001_return#3 = phi( main::vicSelectGfxBank1_toDd001_@return/main::vicSelectGfxBank1_toDd001_return#1 )
  main::vicSelectGfxBank1_$0 = main::vicSelectGfxBank1_toDd001_return#3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = main::vicSelectGfxBank1_$0
  to:main::@3
main::@3: scope:[main]  from main::vicSelectGfxBank1_@1
  rem16u#37 = phi( main::vicSelectGfxBank1_@1/rem16u#38 )
  bitmap_screen#26 = phi( main::vicSelectGfxBank1_@1/bitmap_screen#30 )
  bitmap_gfx#27 = phi( main::vicSelectGfxBank1_@1/bitmap_gfx#31 )
  *D016 = VICII_CSEL
  main::toD0181_screen#0 = SCREEN
  main::toD0181_gfx#0 = BITMAP
  to:main::toD0181
main::toD0181: scope:[main]  from main::@3
  rem16u#36 = phi( main::@3/rem16u#37 )
  bitmap_screen#23 = phi( main::@3/bitmap_screen#26 )
  bitmap_gfx#24 = phi( main::@3/bitmap_gfx#27 )
  main::toD0181_gfx#1 = phi( main::@3/main::toD0181_gfx#0 )
  main::toD0181_screen#1 = phi( main::@3/main::toD0181_screen#0 )
  main::toD0181_$7 = (word)main::toD0181_screen#1
  main::toD0181_$0 = main::toD0181_$7 & $3fff
  main::toD0181_$1 = main::toD0181_$0 * 4
  main::toD0181_$2 = > main::toD0181_$1
  main::toD0181_$3 = > (word)main::toD0181_gfx#1
  main::toD0181_$4 = main::toD0181_$3 / 4
  main::toD0181_$5 = main::toD0181_$4 & $f
  main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
  main::toD0181_return#0 = main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  rem16u#35 = phi( main::toD0181/rem16u#36 )
  bitmap_screen#19 = phi( main::toD0181/bitmap_screen#23 )
  bitmap_gfx#20 = phi( main::toD0181/bitmap_gfx#24 )
  main::toD0181_return#2 = phi( main::toD0181/main::toD0181_return#0 )
  main::toD0181_return#1 = main::toD0181_return#2
  to:main::@4
main::@4: scope:[main]  from main::toD0181_@return
  rem16u#33 = phi( main::toD0181_@return/rem16u#35 )
  bitmap_screen#14 = phi( main::toD0181_@return/bitmap_screen#19 )
  bitmap_gfx#15 = phi( main::toD0181_@return/bitmap_gfx#20 )
  main::toD0181_return#3 = phi( main::toD0181_@return/main::toD0181_return#1 )
  main::$1 = main::toD0181_return#3
  *D018 = main::$1
  bitmap_init::gfx#0 = BITMAP
  bitmap_init::screen#0 = SCREEN
  call bitmap_init 
  to:main::@5
main::@5: scope:[main]  from main::@4
  rem16u#29 = phi( main::@4/rem16u#33 )
  bitmap_screen#9 = phi( main::@4/bitmap_screen#1 )
  bitmap_gfx#9 = phi( main::@4/bitmap_gfx#1 )
  bitmap_gfx#2 = bitmap_gfx#9
  bitmap_screen#2 = bitmap_screen#9
  bitmap_clear::bgcol#0 = BLACK
  bitmap_clear::fgcol#0 = WHITE
  call bitmap_clear 
  to:main::@6
main::@6: scope:[main]  from main::@5
  bitmap_screen#27 = phi( main::@5/bitmap_screen#2 )
  bitmap_gfx#28 = phi( main::@5/bitmap_gfx#2 )
  rem16u#25 = phi( main::@5/rem16u#29 )
  sin16s_gen2::sintab#1 = sin
  sin16s_gen2::wavelength#0 = SIN_SIZE
  sin16s_gen2::min#0 = -$140
  sin16s_gen2::max#0 = $140
  call sin16s_gen2 
  to:main::@7
main::@7: scope:[main]  from main::@6
  bitmap_screen#24 = phi( main::@6/bitmap_screen#27 )
  bitmap_gfx#25 = phi( main::@6/bitmap_gfx#28 )
  rem16u#18 = phi( main::@6/rem16u#6 )
  rem16u#7 = rem16u#18
  call render_sine 
  to:main::@8
main::@8: scope:[main]  from main::@7
  rem16u#31 = phi( main::@7/rem16u#7 )
  bitmap_screen#21 = phi( main::@7/bitmap_screen#24 )
  bitmap_gfx#22 = phi( main::@7/bitmap_gfx#25 )
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@8
  rem16u#26 = phi( main::@2/rem16u#30, main::@8/rem16u#31 )
  bitmap_screen#15 = phi( main::@2/bitmap_screen#20, main::@8/bitmap_screen#21 )
  bitmap_gfx#16 = phi( main::@2/bitmap_gfx#21, main::@8/bitmap_gfx#22 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  rem16u#30 = phi( main::@1/rem16u#26 )
  bitmap_screen#20 = phi( main::@1/bitmap_screen#15 )
  bitmap_gfx#21 = phi( main::@1/bitmap_gfx#16 )
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = ++ *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR)
  to:main::@1
main::@return: scope:[main]  from main::@1
  rem16u#19 = phi( main::@1/rem16u#26 )
  bitmap_screen#10 = phi( main::@1/bitmap_screen#15 )
  bitmap_gfx#10 = phi( main::@1/bitmap_gfx#16 )
  bitmap_gfx#3 = bitmap_gfx#10
  bitmap_screen#3 = bitmap_screen#10
  rem16u#8 = rem16u#19
  return 
  to:@return

void render_sine()
render_sine: scope:[render_sine]  from main::@7
  render_sine::xpos#0 = 0
  render_sine::sin_idx#0 = 0
  to:render_sine::@1
render_sine::@1: scope:[render_sine]  from render_sine render_sine::@3
  render_sine::xpos#8 = phi( render_sine/render_sine::xpos#0, render_sine::@3/render_sine::xpos#9 )
  render_sine::sin_idx#2 = phi( render_sine/render_sine::sin_idx#0, render_sine::@3/render_sine::sin_idx#1 )
  render_sine::$0 = render_sine::sin_idx#2 < SIN_SIZE
  if(render_sine::$0) goto render_sine::@2
  to:render_sine::@return
render_sine::@2: scope:[render_sine]  from render_sine::@1
  render_sine::xpos#6 = phi( render_sine::@1/render_sine::xpos#8 )
  render_sine::sin_idx#3 = phi( render_sine::@1/render_sine::sin_idx#2 )
  render_sine::$10 = render_sine::sin_idx#3 * SIZEOF_SIGNED_WORD
  render_sine::$1 = sin + render_sine::$10
  render_sine::sin_val#0 = *render_sine::$1
  wrap_y::y#0 = render_sine::sin_val#0
  call wrap_y 
  wrap_y::return#0 = wrap_y::return#3
  to:render_sine::@5
render_sine::@5: scope:[render_sine]  from render_sine::@2
  render_sine::sin_idx#6 = phi( render_sine::@2/render_sine::sin_idx#3 )
  render_sine::xpos#3 = phi( render_sine::@2/render_sine::xpos#6 )
  wrap_y::return#4 = phi( render_sine::@2/wrap_y::return#0 )
  render_sine::$2 = wrap_y::return#4
  render_sine::ypos#0 = render_sine::$2
  bitmap_plot::x#0 = render_sine::xpos#3
  bitmap_plot::y#0 = render_sine::ypos#0
  call bitmap_plot 
  to:render_sine::@6
render_sine::@6: scope:[render_sine]  from render_sine::@5
  render_sine::xpos#7 = phi( render_sine::@5/render_sine::xpos#3 )
  render_sine::sin_idx#4 = phi( render_sine::@5/render_sine::sin_idx#6 )
  render_sine::$11 = render_sine::sin_idx#4 * SIZEOF_SIGNED_WORD
  render_sine::$4 = sin2 + render_sine::$11
  render_sine::sin2_val#0 = *render_sine::$4
  render_sine::$5 = render_sine::sin2_val#0 + $a
  wrap_y::y#1 = render_sine::$5
  call wrap_y 
  wrap_y::return#1 = wrap_y::return#3
  to:render_sine::@7
render_sine::@7: scope:[render_sine]  from render_sine::@6
  render_sine::sin_idx#9 = phi( render_sine::@6/render_sine::sin_idx#4 )
  render_sine::xpos#4 = phi( render_sine::@6/render_sine::xpos#7 )
  wrap_y::return#5 = phi( render_sine::@6/wrap_y::return#1 )
  render_sine::$6 = wrap_y::return#5
  render_sine::ypos2#0 = render_sine::$6
  bitmap_plot::x#1 = render_sine::xpos#4
  bitmap_plot::y#1 = render_sine::ypos2#0
  call bitmap_plot 
  to:render_sine::@8
render_sine::@8: scope:[render_sine]  from render_sine::@7
  render_sine::sin_idx#8 = phi( render_sine::@7/render_sine::sin_idx#9 )
  render_sine::xpos#5 = phi( render_sine::@7/render_sine::xpos#4 )
  render_sine::xpos#1 = ++ render_sine::xpos#5
  render_sine::$8 = render_sine::xpos#1 == $140
  render_sine::$9 = ! render_sine::$8
  if(render_sine::$9) goto render_sine::@3
  to:render_sine::@4
render_sine::@3: scope:[render_sine]  from render_sine::@4 render_sine::@8
  render_sine::xpos#9 = phi( render_sine::@4/render_sine::xpos#2, render_sine::@8/render_sine::xpos#1 )
  render_sine::sin_idx#5 = phi( render_sine::@4/render_sine::sin_idx#7, render_sine::@8/render_sine::sin_idx#8 )
  render_sine::sin_idx#1 = ++ render_sine::sin_idx#5
  to:render_sine::@1
render_sine::@4: scope:[render_sine]  from render_sine::@8
  render_sine::sin_idx#7 = phi( render_sine::@8/render_sine::sin_idx#8 )
  render_sine::xpos#2 = 0
  to:render_sine::@3
render_sine::@return: scope:[render_sine]  from render_sine::@1
  return 
  to:@return

byte wrap_y(signed word wrap_y::y)
wrap_y: scope:[wrap_y]  from render_sine::@2 render_sine::@6
  wrap_y::y#9 = phi( render_sine::@2/wrap_y::y#0, render_sine::@6/wrap_y::y#1 )
  to:wrap_y::@1
wrap_y::@1: scope:[wrap_y]  from wrap_y wrap_y::@2
  wrap_y::y#4 = phi( wrap_y/wrap_y::y#9, wrap_y::@2/wrap_y::y#2 )
  wrap_y::$0 = wrap_y::y#4 >= $c8
  if(wrap_y::$0) goto wrap_y::@2
  to:wrap_y::@3
wrap_y::@2: scope:[wrap_y]  from wrap_y::@1
  wrap_y::y#5 = phi( wrap_y::@1/wrap_y::y#4 )
  wrap_y::y#2 = wrap_y::y#5 - $c8
  to:wrap_y::@1
wrap_y::@3: scope:[wrap_y]  from wrap_y::@1 wrap_y::@4
  wrap_y::y#6 = phi( wrap_y::@1/wrap_y::y#4, wrap_y::@4/wrap_y::y#3 )
  wrap_y::$1 = wrap_y::y#6 < 0
  if(wrap_y::$1) goto wrap_y::@4
  to:wrap_y::@5
wrap_y::@4: scope:[wrap_y]  from wrap_y::@3
  wrap_y::y#7 = phi( wrap_y::@3/wrap_y::y#6 )
  wrap_y::y#3 = wrap_y::y#7 + $c8
  to:wrap_y::@3
wrap_y::@5: scope:[wrap_y]  from wrap_y::@3
  wrap_y::y#8 = phi( wrap_y::@3/wrap_y::y#6 )
  wrap_y::return#2 = (byte)wrap_y::y#8
  to:wrap_y::@return
wrap_y::@return: scope:[wrap_y]  from wrap_y::@5
  wrap_y::return#6 = phi( wrap_y::@5/wrap_y::return#2 )
  wrap_y::return#3 = wrap_y::return#6
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  rem16u#9 = 0
  bitmap_screen#4 = (byte*) 0
  bitmap_gfx#4 = (byte*) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  rem16u#27 = phi( __start::__init1/rem16u#9 )
  bitmap_screen#16 = phi( __start::__init1/bitmap_screen#4 )
  bitmap_gfx#17 = phi( __start::__init1/bitmap_gfx#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  rem16u#20 = phi( __start::@1/rem16u#8 )
  bitmap_screen#11 = phi( __start::@1/bitmap_screen#3 )
  bitmap_gfx#11 = phi( __start::@1/bitmap_gfx#3 )
  bitmap_gfx#5 = bitmap_gfx#11
  bitmap_screen#5 = bitmap_screen#11
  rem16u#10 = rem16u#20
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  bitmap_gfx#12 = phi( __start::@2/bitmap_gfx#5 )
  bitmap_screen#12 = phi( __start::@2/bitmap_screen#5 )
  rem16u#21 = phi( __start::@2/rem16u#10 )
  rem16u#11 = rem16u#21
  bitmap_screen#6 = bitmap_screen#12
  bitmap_gfx#6 = bitmap_gfx#12
  return 
  to:@return

SYMBOL TABLE SSA
const byte* BITMAP = (byte*)$2000
const nomodify byte BLACK = 0
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*)$dd00
const nomodify byte* D011 = (byte*)$d011
const nomodify byte* D016 = (byte*)$d016
const nomodify byte* D018 = (byte*)$d018
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A = 0
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const nomodify dword PI2_u4f28 = $6487ed51
const nomodify dword PI_HALF_u4f28 = $1921fb54
const nomodify dword PI_u4f28 = $3243f6a9
const nomodify byte* PROCPORT = (byte*)1
const nomodify byte* PROCPORT_DDR = (byte*)0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_IO = 5
const byte* SCREEN = (byte*)$400
const nomodify word SIN_SIZE = $200
const byte SIZEOF_SIGNED_WORD = 2
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*)$d000
const nomodify byte VICII_BMM = $20
const nomodify byte VICII_CSEL = 8
const nomodify byte VICII_DEN = $10
const nomodify byte VICII_RSEL = 8
const nomodify byte WHITE = 1
void __start()
void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
number~ bitmap_clear::$0
number~ bitmap_clear::$1
byte bitmap_clear::bgcol
byte bitmap_clear::bgcol#0
byte bitmap_clear::bgcol#1
byte bitmap_clear::col
byte bitmap_clear::col#0
byte bitmap_clear::fgcol
byte bitmap_clear::fgcol#0
byte bitmap_clear::fgcol#1
byte* bitmap_gfx
byte* bitmap_gfx#0
byte* bitmap_gfx#1
byte* bitmap_gfx#10
byte* bitmap_gfx#11
byte* bitmap_gfx#12
byte* bitmap_gfx#13
byte* bitmap_gfx#14
byte* bitmap_gfx#15
byte* bitmap_gfx#16
byte* bitmap_gfx#17
byte* bitmap_gfx#18
byte* bitmap_gfx#19
byte* bitmap_gfx#2
byte* bitmap_gfx#20
byte* bitmap_gfx#21
byte* bitmap_gfx#22
byte* bitmap_gfx#23
byte* bitmap_gfx#24
byte* bitmap_gfx#25
byte* bitmap_gfx#26
byte* bitmap_gfx#27
byte* bitmap_gfx#28
byte* bitmap_gfx#29
byte* bitmap_gfx#3
byte* bitmap_gfx#30
byte* bitmap_gfx#31
byte* bitmap_gfx#32
byte* bitmap_gfx#33
byte* bitmap_gfx#34
byte* bitmap_gfx#35
byte* bitmap_gfx#4
byte* bitmap_gfx#5
byte* bitmap_gfx#6
byte* bitmap_gfx#7
byte* bitmap_gfx#8
byte* bitmap_gfx#9
void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
bool~ bitmap_init::$0
bool~ bitmap_init::$1
byte*~ bitmap_init::$10
bool~ bitmap_init::$11
bool~ bitmap_init::$2
number~ bitmap_init::$3
byte~ bitmap_init::$4
number~ bitmap_init::$5
byte~ bitmap_init::$6
number~ bitmap_init::$7
bool~ bitmap_init::$8
bool~ bitmap_init::$9
byte bitmap_init::bits
byte bitmap_init::bits#0
byte bitmap_init::bits#1
byte bitmap_init::bits#2
byte bitmap_init::bits#3
byte bitmap_init::bits#4
byte* bitmap_init::gfx
byte* bitmap_init::gfx#0
byte* bitmap_init::gfx#1
byte* bitmap_init::gfx#2
byte* bitmap_init::gfx#3
byte* bitmap_init::gfx#4
byte* bitmap_init::gfx#5
byte* bitmap_init::screen
byte* bitmap_init::screen#0
byte* bitmap_init::screen#1
byte bitmap_init::x
byte bitmap_init::x#0
byte bitmap_init::x#1
byte bitmap_init::x#2
byte bitmap_init::x#3
byte bitmap_init::x#4
byte bitmap_init::y
byte bitmap_init::y#0
byte bitmap_init::y#1
byte bitmap_init::y#2
byte bitmap_init::y#3
byte bitmap_init::y#4
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#0
byte* bitmap_init::yoffs#1
byte* bitmap_init::yoffs#2
byte* bitmap_init::yoffs#3
byte* bitmap_init::yoffs#4
void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
number~ bitmap_plot::$0
byte~ bitmap_plot::$1
byte* bitmap_plot::plotter
byte* bitmap_plot::plotter#0
byte* bitmap_plot::plotter#1
word bitmap_plot::x
word bitmap_plot::x#0
word bitmap_plot::x#1
word bitmap_plot::x#2
byte bitmap_plot::y
byte bitmap_plot::y#0
byte bitmap_plot::y#1
byte bitmap_plot::y#2
const to_nomodify byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
byte* bitmap_screen
byte* bitmap_screen#0
byte* bitmap_screen#1
byte* bitmap_screen#10
byte* bitmap_screen#11
byte* bitmap_screen#12
byte* bitmap_screen#13
byte* bitmap_screen#14
byte* bitmap_screen#15
byte* bitmap_screen#16
byte* bitmap_screen#17
byte* bitmap_screen#18
byte* bitmap_screen#19
byte* bitmap_screen#2
byte* bitmap_screen#20
byte* bitmap_screen#21
byte* bitmap_screen#22
byte* bitmap_screen#23
byte* bitmap_screen#24
byte* bitmap_screen#25
byte* bitmap_screen#26
byte* bitmap_screen#27
byte* bitmap_screen#28
byte* bitmap_screen#29
byte* bitmap_screen#3
byte* bitmap_screen#30
byte* bitmap_screen#31
byte* bitmap_screen#32
byte* bitmap_screen#33
byte* bitmap_screen#34
byte* bitmap_screen#4
byte* bitmap_screen#5
byte* bitmap_screen#6
byte* bitmap_screen#7
byte* bitmap_screen#8
byte* bitmap_screen#9
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
word~ div32u16u::$0
word~ div32u16u::$1
word~ div32u16u::$2
word~ div32u16u::$3
dword div32u16u::dividend
dword div32u16u::dividend#0
dword div32u16u::dividend#1
dword div32u16u::dividend#2
word div32u16u::divisor
word div32u16u::divisor#0
word div32u16u::divisor#1
word div32u16u::divisor#2
dword div32u16u::quotient
dword div32u16u::quotient#0
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0
word div32u16u::quotient_hi#1
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0
dword div32u16u::return
dword div32u16u::return#0
dword div32u16u::return#1
dword div32u16u::return#2
dword div32u16u::return#3
dword div32u16u::return#4
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
word~ divr16u::$0
byte~ divr16u::$1
word~ divr16u::$10
bool~ divr16u::$11
number~ divr16u::$2
bool~ divr16u::$3
bool~ divr16u::$4
number~ divr16u::$5
word~ divr16u::$6
word~ divr16u::$7
bool~ divr16u::$8
bool~ divr16u::$9
word divr16u::dividend
word divr16u::dividend#0
word divr16u::dividend#1
word divr16u::dividend#2
word divr16u::dividend#3
word divr16u::dividend#4
word divr16u::dividend#5
word divr16u::dividend#6
word divr16u::dividend#7
word divr16u::dividend#8
word divr16u::divisor
word divr16u::divisor#0
word divr16u::divisor#1
word divr16u::divisor#2
word divr16u::divisor#3
word divr16u::divisor#4
word divr16u::divisor#5
word divr16u::divisor#6
word divr16u::divisor#7
byte divr16u::i
byte divr16u::i#0
byte divr16u::i#1
byte divr16u::i#2
byte divr16u::i#3
byte divr16u::i#4
byte divr16u::i#5
byte divr16u::i#6
word divr16u::quotient
word divr16u::quotient#0
word divr16u::quotient#1
word divr16u::quotient#2
word divr16u::quotient#3
word divr16u::quotient#4
word divr16u::quotient#5
word divr16u::quotient#6
word divr16u::quotient#7
word divr16u::quotient#8
word divr16u::rem
word divr16u::rem#0
word divr16u::rem#1
word divr16u::rem#10
word divr16u::rem#11
word divr16u::rem#2
word divr16u::rem#3
word divr16u::rem#4
word divr16u::rem#5
word divr16u::rem#6
word divr16u::rem#7
word divr16u::rem#8
word divr16u::rem#9
word divr16u::return
word divr16u::return#0
word divr16u::return#1
word divr16u::return#2
word divr16u::return#3
word divr16u::return#4
word divr16u::return#5
word divr16u::return#6
void main()
byte~ main::$1
number~ main::toD0181_$0
number~ main::toD0181_$1
number~ main::toD0181_$2
byte~ main::toD0181_$3
number~ main::toD0181_$4
number~ main::toD0181_$5
number~ main::toD0181_$6
word~ main::toD0181_$7
byte* main::toD0181_gfx
byte* main::toD0181_gfx#0
byte* main::toD0181_gfx#1
byte main::toD0181_return
byte main::toD0181_return#0
byte main::toD0181_return#1
byte main::toD0181_return#2
byte main::toD0181_return#3
byte* main::toD0181_screen
byte* main::toD0181_screen#0
byte* main::toD0181_screen#1
byte~ main::vicSelectGfxBank1_$0
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_gfx#0
byte* main::vicSelectGfxBank1_gfx#1
byte~ main::vicSelectGfxBank1_toDd001_$0
number~ main::vicSelectGfxBank1_toDd001_$1
number~ main::vicSelectGfxBank1_toDd001_$2
byte* main::vicSelectGfxBank1_toDd001_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx#0
byte* main::vicSelectGfxBank1_toDd001_gfx#1
byte main::vicSelectGfxBank1_toDd001_return
byte main::vicSelectGfxBank1_toDd001_return#0
byte main::vicSelectGfxBank1_toDd001_return#1
byte main::vicSelectGfxBank1_toDd001_return#2
byte main::vicSelectGfxBank1_toDd001_return#3
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte memset::c#5
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
word memset::num#3
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::return#4
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void* memset::str#6
signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
dword~ mul16s::$0
bool~ mul16s::$1
word~ mul16s::$10
word~ mul16s::$11
word~ mul16s::$12
word~ mul16s::$13
word~ mul16s::$14
bool~ mul16s::$2
bool~ mul16s::$3
bool~ mul16s::$4
word~ mul16s::$6
word~ mul16s::$7
word~ mul16s::$9
signed word mul16s::a
signed word mul16s::a#0
signed word mul16s::a#1
signed word mul16s::a#2
signed word mul16s::a#3
signed word mul16s::a#4
signed word mul16s::a#5
signed word mul16s::b
signed word mul16s::b#0
signed word mul16s::b#1
signed word mul16s::b#2
signed word mul16s::b#3
signed word mul16s::b#4
dword mul16s::m
dword mul16s::m#0
dword mul16s::m#1
dword mul16s::m#2
dword mul16s::m#3
dword mul16s::m#4
dword mul16s::m#5
dword mul16s::m#6
signed dword mul16s::return
signed dword mul16s::return#0
signed dword mul16s::return#1
signed dword mul16s::return#2
signed dword mul16s::return#3
signed dword mul16s::return#4
dword mul16u(word mul16u::a , word mul16u::b)
bool~ mul16u::$0
number~ mul16u::$1
bool~ mul16u::$2
bool~ mul16u::$3
dword~ mul16u::$4
word~ mul16u::$5
dword~ mul16u::$6
word mul16u::a
word mul16u::a#0
word mul16u::a#1
word mul16u::a#2
word mul16u::a#3
word mul16u::a#4
word mul16u::a#5
word mul16u::a#6
word mul16u::a#7
word mul16u::b
word mul16u::b#0
word mul16u::b#1
word mul16u::b#2
dword mul16u::mb
dword mul16u::mb#0
dword mul16u::mb#1
dword mul16u::mb#2
dword mul16u::mb#3
dword mul16u::mb#4
dword mul16u::mb#5
dword mul16u::res
dword mul16u::res#0
dword mul16u::res#1
dword mul16u::res#2
dword mul16u::res#3
dword mul16u::res#4
dword mul16u::res#5
dword mul16u::res#6
dword mul16u::return
dword mul16u::return#0
dword mul16u::return#1
dword mul16u::return#2
dword mul16u::return#3
dword mul16u::return#4
dword mul16u::return#5
dword mul16u::return#6
word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
dword~ mulu16_sel::$0
dword~ mulu16_sel::$1
word~ mulu16_sel::$2
word mulu16_sel::return
word mulu16_sel::return#0
word mulu16_sel::return#1
word mulu16_sel::return#10
word mulu16_sel::return#11
word mulu16_sel::return#12
word mulu16_sel::return#2
word mulu16_sel::return#3
word mulu16_sel::return#4
word mulu16_sel::return#5
word mulu16_sel::return#6
word mulu16_sel::return#7
word mulu16_sel::return#8
word mulu16_sel::return#9
byte mulu16_sel::select
byte mulu16_sel::select#0
byte mulu16_sel::select#1
byte mulu16_sel::select#2
byte mulu16_sel::select#3
byte mulu16_sel::select#4
byte mulu16_sel::select#5
byte mulu16_sel::select#6
word mulu16_sel::v1
word mulu16_sel::v1#0
word mulu16_sel::v1#1
word mulu16_sel::v1#2
word mulu16_sel::v1#3
word mulu16_sel::v1#4
word mulu16_sel::v1#5
word mulu16_sel::v2
word mulu16_sel::v2#0
word mulu16_sel::v2#1
word mulu16_sel::v2#2
word mulu16_sel::v2#3
word mulu16_sel::v2#4
word mulu16_sel::v2#5
word rem16u
word rem16u#0
word rem16u#1
word rem16u#10
word rem16u#11
word rem16u#12
word rem16u#13
word rem16u#14
word rem16u#15
word rem16u#16
word rem16u#17
word rem16u#18
word rem16u#19
word rem16u#2
word rem16u#20
word rem16u#21
word rem16u#22
word rem16u#23
word rem16u#24
word rem16u#25
word rem16u#26
word rem16u#27
word rem16u#28
word rem16u#29
word rem16u#3
word rem16u#30
word rem16u#31
word rem16u#32
word rem16u#33
word rem16u#34
word rem16u#35
word rem16u#36
word rem16u#37
word rem16u#38
word rem16u#39
word rem16u#4
word rem16u#40
word rem16u#41
word rem16u#42
word rem16u#5
word rem16u#6
word rem16u#7
word rem16u#8
word rem16u#9
void render_sine()
bool~ render_sine::$0
signed word*~ render_sine::$1
word~ render_sine::$10
word~ render_sine::$11
byte~ render_sine::$2
signed word*~ render_sine::$4
number~ render_sine::$5
byte~ render_sine::$6
bool~ render_sine::$8
bool~ render_sine::$9
signed word render_sine::sin2_val
signed word render_sine::sin2_val#0
word render_sine::sin_idx
word render_sine::sin_idx#0
word render_sine::sin_idx#1
word render_sine::sin_idx#2
word render_sine::sin_idx#3
word render_sine::sin_idx#4
word render_sine::sin_idx#5
word render_sine::sin_idx#6
word render_sine::sin_idx#7
word render_sine::sin_idx#8
word render_sine::sin_idx#9
signed word render_sine::sin_val
signed word render_sine::sin_val#0
word render_sine::xpos
word render_sine::xpos#0
word render_sine::xpos#1
word render_sine::xpos#2
word render_sine::xpos#3
word render_sine::xpos#4
word render_sine::xpos#5
word render_sine::xpos#6
word render_sine::xpos#7
word render_sine::xpos#8
word render_sine::xpos#9
byte render_sine::ypos
byte render_sine::ypos#0
byte render_sine::ypos2
byte render_sine::ypos2#0
const signed word* sin[$200]  = { fill( $200, 0) }
signed word sin16s(dword sin16s::x)
bool~ sin16s::$0
bool~ sin16s::$1
word~ sin16s::$10
word~ sin16s::$11
word~ sin16s::$12
word~ sin16s::$13
bool~ sin16s::$14
bool~ sin16s::$15
dword~ sin16s::$16
dword~ sin16s::$17
signed word~ sin16s::$18
bool~ sin16s::$2
bool~ sin16s::$3
dword~ sin16s::$4
word~ sin16s::$5
word~ sin16s::$6
word~ sin16s::$7
word~ sin16s::$8
word~ sin16s::$9
byte sin16s::isUpper
byte sin16s::isUpper#0
byte sin16s::isUpper#1
byte sin16s::isUpper#2
byte sin16s::isUpper#3
byte sin16s::isUpper#4
byte sin16s::isUpper#5
byte sin16s::isUpper#6
byte sin16s::isUpper#7
byte sin16s::isUpper#8
byte sin16s::isUpper#9
signed word sin16s::return
signed word sin16s::return#0
signed word sin16s::return#1
signed word sin16s::return#2
signed word sin16s::return#3
signed word sin16s::return#4
signed word sin16s::sinx
signed word sin16s::sinx#0
signed word sin16s::sinx#1
signed word sin16s::sinx#2
word sin16s::usinx
word sin16s::usinx#0
word sin16s::usinx#1
word sin16s::usinx#2
word sin16s::usinx#3
word sin16s::usinx#4
dword sin16s::x
dword sin16s::x#0
dword sin16s::x#1
dword sin16s::x#2
dword sin16s::x#3
dword sin16s::x#4
dword sin16s::x#5
dword sin16s::x#6
dword sin16s::x#7
word sin16s::x1
word sin16s::x1#0
word sin16s::x1#1
word sin16s::x1#2
word sin16s::x1#3
word sin16s::x1#4
word sin16s::x2
word sin16s::x2#0
word sin16s::x3
word sin16s::x3#0
word sin16s::x3#1
word sin16s::x3_6
word sin16s::x3_6#0
word sin16s::x4
word sin16s::x4#0
word sin16s::x5
word sin16s::x5#0
word sin16s::x5_128
word sin16s::x5_128#0
void sin16s_gen2(signed word* sin16s_gen2::sintab , word sin16s_gen2::wavelength , signed word sin16s_gen2::min , signed word sin16s_gen2::max)
signed word~ sin16s_gen2::$0
signed word~ sin16s_gen2::$1
signed word~ sin16s_gen2::$10
signed word~ sin16s_gen2::$2
dword~ sin16s_gen2::$3
bool~ sin16s_gen2::$4
signed word~ sin16s_gen2::$5
signed dword~ sin16s_gen2::$6
word~ sin16s_gen2::$7
signed word~ sin16s_gen2::$8
dword~ sin16s_gen2::$9
signed word sin16s_gen2::ampl
signed word sin16s_gen2::ampl#0
signed word sin16s_gen2::ampl#1
signed word sin16s_gen2::ampl#2
signed word sin16s_gen2::ampl#3
signed word sin16s_gen2::ampl#4
signed word sin16s_gen2::ampl#5
word sin16s_gen2::i
word sin16s_gen2::i#0
word sin16s_gen2::i#1
word sin16s_gen2::i#2
word sin16s_gen2::i#3
word sin16s_gen2::i#4
word sin16s_gen2::i#5
signed word sin16s_gen2::max
signed word sin16s_gen2::max#0
signed word sin16s_gen2::max#1
signed word sin16s_gen2::min
signed word sin16s_gen2::min#0
signed word sin16s_gen2::min#1
signed word sin16s_gen2::offs
signed word sin16s_gen2::offs#0
signed word sin16s_gen2::offs#1
signed word sin16s_gen2::offs#2
signed word sin16s_gen2::offs#3
signed word sin16s_gen2::offs#4
signed word sin16s_gen2::offs#5
signed word* sin16s_gen2::sintab
signed word* sin16s_gen2::sintab#0
signed word* sin16s_gen2::sintab#1
signed word* sin16s_gen2::sintab#2
signed word* sin16s_gen2::sintab#3
signed word* sin16s_gen2::sintab#4
signed word* sin16s_gen2::sintab#5
signed word* sin16s_gen2::sintab#6
signed word* sin16s_gen2::sintab#7
dword sin16s_gen2::step
dword sin16s_gen2::step#0
dword sin16s_gen2::step#1
dword sin16s_gen2::step#2
dword sin16s_gen2::step#3
dword sin16s_gen2::step#4
word sin16s_gen2::wavelength
word sin16s_gen2::wavelength#0
word sin16s_gen2::wavelength#1
word sin16s_gen2::wavelength#2
word sin16s_gen2::wavelength#3
word sin16s_gen2::wavelength#4
word sin16s_gen2::wavelength#5
word sin16s_gen2::wavelength#6
dword sin16s_gen2::x
dword sin16s_gen2::x#0
dword sin16s_gen2::x#1
dword sin16s_gen2::x#2
dword sin16s_gen2::x#3
dword sin16s_gen2::x#4
dword sin16s_gen2::x#5
const signed word* sin2[$200]  = kickasm {{ .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }
 }}
byte wrap_y(signed word wrap_y::y)
bool~ wrap_y::$0
bool~ wrap_y::$1
byte wrap_y::return
byte wrap_y::return#0
byte wrap_y::return#1
byte wrap_y::return#2
byte wrap_y::return#3
byte wrap_y::return#4
byte wrap_y::return#5
byte wrap_y::return#6
signed word wrap_y::y
signed word wrap_y::y#0
signed word wrap_y::y#1
signed word wrap_y::y#2
signed word wrap_y::y#3
signed word wrap_y::y#4
signed word wrap_y::y#5
signed word wrap_y::y#6
signed word wrap_y::y#7
signed word wrap_y::y#8
signed word wrap_y::y#9

Fixing inline constructor with div32u16u::$4 = (word)div32u16u::quotient_hi#1 dw= (word)div32u16u::quotient_lo#0
Fixing inline constructor with bitmap_plot::$2 = (byte)bitmap_plot_yhi[bitmap_plot::y#2] w= (byte)bitmap_plot_ylo[bitmap_plot::y#2]
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 1 in divr16u::$0 = divr16u::rem#5 << 1
Adding number conversion cast (unumber) $80 in divr16u::$2 = divr16u::$1 & $80
Adding number conversion cast (unumber) divr16u::$2 in divr16u::$2 = divr16u::$1 & (unumber)$80
Adding number conversion cast (unumber) 0 in divr16u::$3 = divr16u::$2 != 0
Adding number conversion cast (unumber) 1 in divr16u::$6 = divr16u::dividend#4 << 1
Adding number conversion cast (unumber) 1 in divr16u::$7 = divr16u::quotient#3 << 1
Adding number conversion cast (unumber) 1 in divr16u::$5 = divr16u::rem#7 | 1
Adding number conversion cast (unumber) divr16u::$5 in divr16u::$5 = divr16u::rem#7 | (unumber)1
Adding number conversion cast (unumber) 0 in divr16u::rem#3 = 0
Adding number conversion cast (unumber) 0 in mul16u::$0 = mul16u::a#3 != 0
Adding number conversion cast (unumber) 1 in mul16u::$1 = mul16u::a#4 & 1
Adding number conversion cast (unumber) mul16u::$1 in mul16u::$1 = mul16u::a#4 & (unumber)1
Adding number conversion cast (unumber) 0 in mul16u::$2 = mul16u::$1 != 0
Adding number conversion cast (unumber) 1 in mul16u::$5 = mul16u::a#5 >> 1
Adding number conversion cast (unumber) 1 in mul16u::$6 = mul16u::mb#2 << 1
Adding number conversion cast (snumber) 0 in mul16s::$1 = mul16s::a#2 < 0
Adding number conversion cast (snumber) 0 in mul16s::$3 = mul16s::b#2 < 0
Adding number conversion cast (snumber) 1 in sin16s_gen2::$1 = sin16s_gen2::ampl#0 >> 1
Adding number conversion cast (unumber) 1 in sin16s::isUpper#1 = 1
Adding number conversion cast (unumber) 3 in sin16s::$4 = sin16s::x#6 << 3
Adding number conversion cast (unumber) 0 in mulu16_sel::select#0 = 0
Adding number conversion cast (unumber) 1 in mulu16_sel::select#1 = 1
Adding number conversion cast (unumber) $10000/6 in mulu16_sel::v2#2 = $10000/6
Adding number conversion cast (unumber) 1 in mulu16_sel::select#2 = 1
Adding number conversion cast (unumber) 0 in mulu16_sel::select#3 = 0
Adding number conversion cast (unumber) 0 in mulu16_sel::select#4 = 0
Adding number conversion cast (unumber) 4 in sin16s::$12 = sin16s::x5#0 >> 4
Adding number conversion cast (unumber) 0 in sin16s::$14 = sin16s::isUpper#2 != 0
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#2 > 0
Adding number conversion cast (unumber) 1 in bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
Adding number conversion cast (unumber) 0 in bitmap_init::$0 = bitmap_init::bits#1 == 0
Adding number conversion cast (unumber) $80 in bitmap_init::bits#2 = $80
Adding number conversion cast (unumber) 7 in bitmap_init::$3 = bitmap_init::y#2 & 7
Adding number conversion cast (unumber) bitmap_init::$3 in bitmap_init::$3 = bitmap_init::y#2 & (unumber)7
Adding number conversion cast (unumber) bitmap_init::$5 in bitmap_init::$5 = bitmap_init::$3 | bitmap_init::$4
Adding number conversion cast (unumber) 7 in bitmap_init::$7 = bitmap_init::y#2 & 7
Adding number conversion cast (unumber) bitmap_init::$7 in bitmap_init::$7 = bitmap_init::y#2 & (unumber)7
Adding number conversion cast (unumber) 7 in bitmap_init::$8 = bitmap_init::$7 == 7
Adding number conversion cast (unumber) $28*8 in bitmap_init::$10 = bitmap_init::yoffs#3 + $28*8
Adding number conversion cast (unumber) $10 in bitmap_clear::$0 = bitmap_clear::fgcol#1 * $10
Adding number conversion cast (unumber) bitmap_clear::$0 in bitmap_clear::$0 = bitmap_clear::fgcol#1 * (unumber)$10
Adding number conversion cast (unumber) bitmap_clear::$1 in bitmap_clear::$1 = bitmap_clear::$0 + bitmap_clear::bgcol#1
Adding number conversion cast (unumber) 0 in memset::c#1 = 0
Adding number conversion cast (unumber) $fff8 in bitmap_plot::$0 = bitmap_plot::x#2 & $fff8
Adding number conversion cast (unumber) bitmap_plot::$0 in bitmap_plot::$0 = bitmap_plot::x#2 & (unumber)$fff8
Adding number conversion cast (unumber) VICII_BMM|VICII_DEN|VICII_RSEL|3 in *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3
Adding number conversion cast (unumber) 3 in *D011 = ((unumber)) VICII_BMM|VICII_DEN|VICII_RSEL|3
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) $40 in main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
Adding number conversion cast (unumber) main::vicSelectGfxBank1_toDd001_$1 in main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / (unumber)$40
Adding number conversion cast (unumber) 3 in main::vicSelectGfxBank1_toDd001_$2 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
Adding number conversion cast (unumber) main::vicSelectGfxBank1_toDd001_$2 in main::vicSelectGfxBank1_toDd001_$2 = (unumber)3 ^ main::vicSelectGfxBank1_toDd001_$1
Adding number conversion cast (unumber) $3fff in main::toD0181_$0 = main::toD0181_$7 & $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in main::toD0181_$0 = main::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0181_$1 = main::toD0181_$0 * 4
Adding number conversion cast (unumber) main::toD0181_$1 in main::toD0181_$1 = main::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0181_$2 in main::toD0181_$2 = > main::toD0181_$1
Adding number conversion cast (unumber) 4 in main::toD0181_$4 = main::toD0181_$3 / 4
Adding number conversion cast (unumber) main::toD0181_$4 in main::toD0181_$4 = main::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0181_$5 = main::toD0181_$4 & $f
Adding number conversion cast (unumber) main::toD0181_$5 in main::toD0181_$5 = main::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0181_$6 in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Adding number conversion cast (snumber) -$140 in sin16s_gen2::min#0 = -$140
Adding number conversion cast (snumber) $140 in sin16s_gen2::max#0 = $140
Adding number conversion cast (snumber) $a in render_sine::$5 = render_sine::sin2_val#0 + $a
Adding number conversion cast (snumber) render_sine::$5 in render_sine::$5 = render_sine::sin2_val#0 + (snumber)$a
Adding number conversion cast (unumber) $140 in render_sine::$8 = render_sine::xpos#1 == $140
Adding number conversion cast (unumber) 0 in render_sine::xpos#2 = 0
Adding number conversion cast (snumber) $c8 in wrap_y::$0 = wrap_y::y#4 >= $c8
Adding number conversion cast (snumber) $c8 in wrap_y::y#2 = wrap_y::y#5 - $c8
Adding number conversion cast (snumber) 0 in wrap_y::$1 = wrap_y::y#6 < 0
Adding number conversion cast (snumber) $c8 in wrap_y::y#3 = wrap_y::y#7 + $c8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast divr16u::rem#3 = (unumber)0
Inlining cast sin16s::isUpper#1 = (unumber)1
Inlining cast mulu16_sel::select#0 = (unumber)0
Inlining cast mulu16_sel::select#1 = (unumber)1
Inlining cast mulu16_sel::v2#2 = (unumber)$10000/6
Inlining cast mulu16_sel::select#2 = (unumber)1
Inlining cast mulu16_sel::select#3 = (unumber)0
Inlining cast mulu16_sel::select#4 = (unumber)0
Inlining cast memset::dst#0 = (byte*)memset::str#3
Inlining cast bitmap_init::bits#2 = (unumber)$80
Inlining cast memset::c#1 = (unumber)0
Inlining cast *D011 = (unumber)VICII_BMM|VICII_DEN|VICII_RSEL|(unumber)3
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast sin16s_gen2::min#0 = (snumber)-$140
Inlining cast sin16s_gen2::max#0 = (snumber)$140
Inlining cast render_sine::xpos#2 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53270
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 8192
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast div32u16u::quotient_hi#1
Simplifying constant integer cast div32u16u::quotient_lo#0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast bitmap_plot_yhi[bitmap_plot::y#2]
Simplifying constant integer cast bitmap_plot_ylo[bitmap_plot::y#2]
Simplifying constant integer cast $fff8
Simplifying constant integer cast VICII_BMM|VICII_DEN|VICII_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast -$140
Simplifying constant integer cast $140
Simplifying constant integer cast $a
Simplifying constant integer cast $140
Simplifying constant integer cast 0
Simplifying constant integer cast $c8
Simplifying constant integer cast $c8
Simplifying constant integer cast 0
Simplifying constant integer cast $c8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $fff8
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized signed number type (signed word) -$140
Finalized signed number type (signed word) $140
Finalized signed number type (signed byte) $a
Finalized unsigned number type (word) $140
Finalized unsigned number type (byte) 0
Finalized signed number type (signed word) $c8
Finalized signed number type (signed word) $c8
Finalized signed number type (signed byte) 0
Finalized signed number type (signed word) $c8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in divr16u::$2 = divr16u::$1 & $80
Inferred type updated to word in divr16u::$5 = divr16u::rem#7 | 1
Inferred type updated to byte in mul16u::$1 = mul16u::a#4 & 1
Inferred type updated to byte in bitmap_init::$3 = bitmap_init::y#2 & 7
Inferred type updated to byte in bitmap_init::$5 = bitmap_init::$3 | bitmap_init::$4
Inferred type updated to byte in bitmap_init::$7 = bitmap_init::y#2 & 7
Inferred type updated to byte in bitmap_clear::$0 = bitmap_clear::fgcol#1 * $10
Inferred type updated to byte in bitmap_clear::$1 = bitmap_clear::$0 + bitmap_clear::bgcol#1
Inferred type updated to word in bitmap_plot::$0 = bitmap_plot::x#2 & $fff8
Inferred type updated to byte in main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
Inferred type updated to byte in main::vicSelectGfxBank1_toDd001_$2 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
Inferred type updated to word in main::toD0181_$0 = main::toD0181_$7 & $3fff
Inferred type updated to word in main::toD0181_$1 = main::toD0181_$0 * 4
Inferred type updated to byte in main::toD0181_$2 = > main::toD0181_$1
Inferred type updated to byte in main::toD0181_$4 = main::toD0181_$3 / 4
Inferred type updated to byte in main::toD0181_$5 = main::toD0181_$4 & $f
Inferred type updated to byte in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Inferred type updated to signed word in render_sine::$5 = render_sine::sin2_val#0 + $a
Adding pointer type conversion cast (byte*) bitmap_plot::$2 in bitmap_plot::$2 = bitmap_plot_yhi[bitmap_plot::y#2] w= bitmap_plot_ylo[bitmap_plot::y#2]
Successful SSA optimization PassNAddTypeConversionAssignment
Inversing boolean not [9] divr16u::$4 = divr16u::$2 == 0 from [8] divr16u::$3 = divr16u::$2 != 0
Inversing boolean not [17] divr16u::$9 = divr16u::rem#6 < divr16u::divisor#2 from [16] divr16u::$8 = divr16u::rem#6 >= divr16u::divisor#2
Inversing boolean not [74] mul16u::$3 = mul16u::$1 == 0 from [73] mul16u::$2 = mul16u::$1 != 0
Inversing boolean not [98] mul16s::$2 = mul16s::a#2 >= 0 from [97] mul16s::$1 = mul16s::a#2 < 0
Inversing boolean not [102] mul16s::$4 = mul16s::b#2 >= 0 from [101] mul16s::$3 = mul16s::b#2 < 0
Inversing boolean not [166] sin16s::$1 = sin16s::x#3 < PI_u4f28 from [165] sin16s::$0 = sin16s::x#3 >= PI_u4f28
Inversing boolean not [170] sin16s::$3 = sin16s::x#4 < PI_HALF_u4f28 from [169] sin16s::$2 = sin16s::x#4 >= PI_HALF_u4f28
Inversing boolean not [228] sin16s::$15 = sin16s::isUpper#2 == 0 from [227] sin16s::$14 = sin16s::isUpper#2 != 0
Inversing boolean not [256] memset::$1 = memset::num#2 <= 0 from [255] memset::$0 = memset::num#2 > 0
Inversing boolean not [283] bitmap_init::$1 = bitmap_init::bits#1 != 0 from [282] bitmap_init::$0 = bitmap_init::bits#1 == 0
Inversing boolean not [303] bitmap_init::$9 = bitmap_init::$7 != 7 from [302] bitmap_init::$8 = bitmap_init::$7 == 7
Inversing boolean not [442] render_sine::$9 = render_sine::xpos#1 != $140 from [441] render_sine::$8 = render_sine::xpos#1 == $140
Successful SSA optimization Pass2UnaryNotSimplification
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#7 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#8 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#3 = divr16u::dividend#7 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#4 = divr16u::divisor#5 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#6 = divr16u::rem#8 
Alias divr16u::divisor#2 = divr16u::divisor#3 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::rem#11 = divr16u::rem#9 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#4 divr16u::return#1 
Alias rem16u#0 = rem16u#12 rem16u#1 
Alias divr16u::dividend#1 = div32u16u::$0 
Alias divr16u::return#2 = divr16u::return#5 
Alias div32u16u::dividend#1 = div32u16u::dividend#2 
Alias div32u16u::divisor#1 = div32u16u::divisor#2 
Alias rem16u#13 = rem16u#2 
Alias div32u16u::quotient_hi#0 = div32u16u::$1 div32u16u::quotient_hi#1 
Alias divr16u::dividend#2 = div32u16u::$2 
Alias divr16u::return#3 = divr16u::return#6 
Alias rem16u#14 = rem16u#3 rem16u#15 rem16u#4 
Alias div32u16u::quotient_lo#0 = div32u16u::$3 
Alias div32u16u::return#0 = div32u16u::quotient#0 div32u16u::$4 div32u16u::return#3 div32u16u::return#1 
Alias mul16u::a#3 = mul16u::a#4 mul16u::a#7 
Alias mul16u::mb#3 = mul16u::mb#4 mul16u::mb#5 
Alias mul16u::res#2 = mul16u::res#5 mul16u::res#4 mul16u::return#0 mul16u::res#3 mul16u::return#4 mul16u::return#1 
Alias mul16u::a#0 = mul16u::$5 
Alias mul16u::mb#1 = mul16u::$6 
Alias mul16u::res#1 = mul16u::$4 
Alias mul16u::return#2 = mul16u::return#5 
Alias mul16s::a#1 = mul16s::a#2 mul16s::a#5 
Alias mul16s::b#1 = mul16s::b#4 mul16s::b#3 
Alias mul16s::m#0 = mul16s::$0 mul16s::m#3 
Alias mul16s::$11 = mul16s::$7 
Alias mul16s::m#5 = mul16s::m#6 
Alias mul16s::a#3 = mul16s::a#4 
Alias mul16s::$12 = mul16s::$10 
Alias mul16s::return#0 = mul16s::return#3 mul16s::return#1 
Alias sin16s_gen2::ampl#0 = sin16s_gen2::$0 sin16s_gen2::ampl#4 
Alias sin16s_gen2::offs#0 = sin16s_gen2::$2 sin16s_gen2::offs#5 
Alias div32u16u::return#2 = div32u16u::return#4 
Alias sin16s_gen2::wavelength#1 = sin16s_gen2::wavelength#3 
Alias sin16s_gen2::sintab#6 = sin16s_gen2::sintab#7 
Alias rem16u#16 = rem16u#5 
Alias sin16s_gen2::step#0 = sin16s_gen2::$3 
Alias sin16s_gen2::x#2 = sin16s_gen2::x#4 sin16s_gen2::x#5 sin16s_gen2::x#3 
Alias sin16s_gen2::ampl#1 = sin16s_gen2::ampl#2 sin16s_gen2::ampl#3 sin16s_gen2::ampl#5 
Alias sin16s_gen2::offs#1 = sin16s_gen2::offs#3 sin16s_gen2::offs#4 sin16s_gen2::offs#2 
Alias sin16s_gen2::sintab#2 = sin16s_gen2::sintab#4 sin16s_gen2::sintab#5 sin16s_gen2::sintab#3 
Alias sin16s_gen2::step#1 = sin16s_gen2::step#3 sin16s_gen2::step#4 sin16s_gen2::step#2 
Alias sin16s_gen2::i#2 = sin16s_gen2::i#5 sin16s_gen2::i#4 sin16s_gen2::i#3 
Alias sin16s_gen2::wavelength#2 = sin16s_gen2::wavelength#6 sin16s_gen2::wavelength#5 sin16s_gen2::wavelength#4 
Alias rem16u#17 = rem16u#34 rem16u#24 rem16u#32 rem16u#28 rem16u#6 
Alias sin16s::return#0 = sin16s::return#3 
Alias mul16s::a#0 = sin16s_gen2::$5 
Alias mul16s::return#2 = mul16s::return#4 
Alias sin16s_gen2::x#1 = sin16s_gen2::$9 
Alias sin16s::x#3 = sin16s::x#5 
Alias sin16s::x#1 = sin16s::$16 
Alias sin16s::x1#0 = sin16s::$5 sin16s::x1#1 sin16s::x1#4 sin16s::x1#2 sin16s::x1#3 
Alias mulu16_sel::return#0 = mulu16_sel::return#7 
Alias sin16s::isUpper#2 = sin16s::isUpper#6 sin16s::isUpper#7 sin16s::isUpper#5 sin16s::isUpper#4 sin16s::isUpper#3 
Alias sin16s::x2#0 = sin16s::$6 
Alias mulu16_sel::return#1 = mulu16_sel::return#8 
Alias sin16s::x3#0 = sin16s::$7 sin16s::x3#1 
Alias mulu16_sel::return#2 = mulu16_sel::return#9 
Alias sin16s::x3_6#0 = sin16s::$8 
Alias sin16s::usinx#0 = sin16s::$9 sin16s::usinx#4 sin16s::usinx#2 
Alias mulu16_sel::return#10 = mulu16_sel::return#3 
Alias sin16s::x4#0 = sin16s::$10 
Alias mulu16_sel::return#11 = mulu16_sel::return#4 
Alias sin16s::x5#0 = sin16s::$11 
Alias sin16s::x5_128#0 = sin16s::$12 
Alias sin16s::usinx#1 = sin16s::$13 sin16s::usinx#3 
Alias sin16s::x#4 = sin16s::x#7 
Alias sin16s::isUpper#8 = sin16s::isUpper#9 
Alias sin16s::x#2 = sin16s::$17 
Alias sin16s::return#1 = sin16s::sinx#2 sin16s::return#4 sin16s::return#2 
Alias sin16s::sinx#1 = sin16s::$18 
Alias mul16u::return#3 = mul16u::return#6 
Alias mulu16_sel::select#5 = mulu16_sel::select#6 
Alias mulu16_sel::return#12 = mulu16_sel::return#5 mulu16_sel::$2 mulu16_sel::return#6 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias bitmap_init::x#2 = bitmap_init::x#4 
Alias bitmap_init::gfx#4 = bitmap_init::gfx#5 
Alias bitmap_gfx#29 = bitmap_gfx#30 
Alias bitmap_screen#28 = bitmap_screen#29 
Alias bitmap_init::gfx#2 = bitmap_init::gfx#3 bitmap_init::yoffs#0 
Alias bitmap_gfx#23 = bitmap_gfx#26 
Alias bitmap_screen#22 = bitmap_screen#25 
Alias bitmap_init::yoffs#2 = bitmap_init::yoffs#3 
Alias bitmap_init::y#2 = bitmap_init::y#4 
Alias bitmap_gfx#18 = bitmap_gfx#19 
Alias bitmap_screen#17 = bitmap_screen#18 
Alias bitmap_init::yoffs#1 = bitmap_init::$10 
Alias bitmap_gfx#1 = bitmap_gfx#7 bitmap_gfx#13 
Alias bitmap_screen#1 = bitmap_screen#7 bitmap_screen#13 
Alias bitmap_clear::col#0 = bitmap_clear::$1 
Alias bitmap_gfx#14 = bitmap_gfx#8 
Alias bitmap_plot::plotter#0 = bitmap_plot::$2 
Alias main::vicSelectGfxBank1_gfx#0 = main::vicSelectGfxBank1_gfx#1 main::vicSelectGfxBank1_toDd001_gfx#0 main::vicSelectGfxBank1_toDd001_gfx#1 
Alias bitmap_gfx#15 = bitmap_gfx#34 bitmap_gfx#35 bitmap_gfx#33 bitmap_gfx#32 bitmap_gfx#31 bitmap_gfx#27 bitmap_gfx#24 bitmap_gfx#20 
Alias bitmap_screen#14 = bitmap_screen#33 bitmap_screen#34 bitmap_screen#32 bitmap_screen#31 bitmap_screen#30 bitmap_screen#26 bitmap_screen#23 bitmap_screen#19 
Alias rem16u#25 = rem16u#41 rem16u#42 rem16u#40 rem16u#39 rem16u#38 rem16u#37 rem16u#36 rem16u#35 rem16u#33 rem16u#29 
Alias main::vicSelectGfxBank1_toDd001_return#0 = main::vicSelectGfxBank1_toDd001_$2 main::vicSelectGfxBank1_toDd001_return#2 main::vicSelectGfxBank1_toDd001_return#1 main::vicSelectGfxBank1_toDd001_return#3 main::vicSelectGfxBank1_$0 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$1 
Alias bitmap_gfx#2 = bitmap_gfx#9 bitmap_gfx#28 bitmap_gfx#25 bitmap_gfx#22 
Alias bitmap_screen#2 = bitmap_screen#9 bitmap_screen#27 bitmap_screen#24 bitmap_screen#21 
Alias rem16u#18 = rem16u#7 rem16u#31 
Alias bitmap_gfx#10 = bitmap_gfx#21 bitmap_gfx#16 bitmap_gfx#3 
Alias bitmap_screen#10 = bitmap_screen#20 bitmap_screen#15 bitmap_screen#3 
Alias rem16u#19 = rem16u#30 rem16u#26 rem16u#8 
Alias render_sine::sin_idx#2 = render_sine::sin_idx#3 render_sine::sin_idx#6 render_sine::sin_idx#4 render_sine::sin_idx#9 render_sine::sin_idx#8 render_sine::sin_idx#7 
Alias render_sine::xpos#3 = render_sine::xpos#6 render_sine::xpos#8 render_sine::xpos#7 render_sine::xpos#4 render_sine::xpos#5 
Alias wrap_y::return#0 = wrap_y::return#4 
Alias render_sine::ypos#0 = render_sine::$2 
Alias wrap_y::y#1 = render_sine::$5 
Alias wrap_y::return#1 = wrap_y::return#5 
Alias render_sine::ypos2#0 = render_sine::$6 
Alias wrap_y::y#4 = wrap_y::y#5 
Alias wrap_y::y#6 = wrap_y::y#7 wrap_y::y#8 
Alias wrap_y::return#2 = wrap_y::return#6 wrap_y::return#3 
Alias bitmap_gfx#17 = bitmap_gfx#4 
Alias bitmap_screen#16 = bitmap_screen#4 
Alias rem16u#27 = rem16u#9 
Alias bitmap_gfx#11 = bitmap_gfx#5 bitmap_gfx#12 bitmap_gfx#6 
Alias bitmap_screen#11 = bitmap_screen#5 bitmap_screen#12 bitmap_screen#6 
Alias rem16u#10 = rem16u#20 rem16u#21 rem16u#11 
Successful SSA optimization Pass2AliasElimination
Alias divr16u::dividend#3 = divr16u::dividend#4 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#2 = divr16u::divisor#4 divr16u::divisor#7 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#6 
Alias mul16u::a#3 = mul16u::a#5 
Alias mul16u::mb#2 = mul16u::mb#3 
Alias mul16s::b#1 = mul16s::b#2 
Alias mul16s::a#1 = mul16s::a#3 
Alias sin16s::isUpper#2 = sin16s::isUpper#8 
Alias bitmap_init::x#2 = bitmap_init::x#3 
Alias bitmap_init::gfx#2 = bitmap_init::gfx#4 
Alias bitmap_gfx#23 = bitmap_gfx#29 
Alias bitmap_screen#22 = bitmap_screen#28 
Alias bitmap_init::y#2 = bitmap_init::y#3 
Alias bitmap_gfx#1 = bitmap_gfx#18 
Alias bitmap_screen#1 = bitmap_screen#17 
Alias render_sine::sin_idx#2 = render_sine::sin_idx#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values divr16u::divisor#2 divr16u::divisor#6
Identical Phi Values div32u16u::dividend#1 div32u16u::dividend#0
Identical Phi Values div32u16u::divisor#1 div32u16u::divisor#0
Identical Phi Values rem16u#22 rem16u#23
Identical Phi Values rem16u#13 rem16u#0
Identical Phi Values rem16u#14 rem16u#0
Identical Phi Values mul16s::a#1 mul16s::a#0
Identical Phi Values mul16s::b#1 mul16s::b#0
Identical Phi Values sin16s_gen2::max#1 sin16s_gen2::max#0
Identical Phi Values sin16s_gen2::min#1 sin16s_gen2::min#0
Identical Phi Values sin16s_gen2::wavelength#1 sin16s_gen2::wavelength#0
Identical Phi Values rem16u#23 rem16u#25
Identical Phi Values sin16s_gen2::sintab#6 sin16s_gen2::sintab#1
Identical Phi Values rem16u#16 rem16u#14
Identical Phi Values sin16s_gen2::wavelength#2 sin16s_gen2::wavelength#1
Identical Phi Values rem16u#17 rem16u#16
Identical Phi Values sin16s_gen2::ampl#1 sin16s_gen2::ampl#0
Identical Phi Values sin16s_gen2::offs#1 sin16s_gen2::offs#0
Identical Phi Values sin16s_gen2::step#1 sin16s_gen2::step#0
Identical Phi Values sin16s::x#3 sin16s::x#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#5 memset::str#3
Identical Phi Values memset::c#2 memset::c#4
Identical Phi Values bitmap_init::gfx#1 bitmap_init::gfx#0
Identical Phi Values bitmap_init::screen#1 bitmap_init::screen#0
Identical Phi Values bitmap_init::gfx#2 bitmap_init::gfx#1
Identical Phi Values bitmap_gfx#23 bitmap_gfx#0
Identical Phi Values bitmap_screen#22 bitmap_screen#0
Identical Phi Values bitmap_gfx#1 bitmap_gfx#23
Identical Phi Values bitmap_screen#1 bitmap_screen#22
Identical Phi Values bitmap_clear::fgcol#1 bitmap_clear::fgcol#0
Identical Phi Values bitmap_clear::bgcol#1 bitmap_clear::bgcol#0
Identical Phi Values bitmap_screen#8 bitmap_screen#2
Identical Phi Values bitmap_gfx#14 bitmap_gfx#2
Identical Phi Values bitmap_gfx#15 bitmap_gfx#17
Identical Phi Values bitmap_screen#14 bitmap_screen#16
Identical Phi Values rem16u#25 rem16u#27
Identical Phi Values bitmap_gfx#2 bitmap_gfx#1
Identical Phi Values bitmap_screen#2 bitmap_screen#1
Identical Phi Values rem16u#18 rem16u#17
Identical Phi Values bitmap_gfx#10 bitmap_gfx#2
Identical Phi Values bitmap_screen#10 bitmap_screen#2
Identical Phi Values rem16u#19 rem16u#18
Identical Phi Values bitmap_gfx#11 bitmap_gfx#10
Identical Phi Values bitmap_screen#11 bitmap_screen#10
Identical Phi Values rem16u#10 rem16u#19
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [301] bitmap_init::$7 = bitmap_init::y#2 & 7
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition divr16u::$4 [8] if(divr16u::$2==0) goto divr16u::@2
Simple Condition divr16u::$9 [13] if(divr16u::rem#6<divr16u::divisor#6) goto divr16u::@3
Simple Condition divr16u::$11 [18] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition mul16u::$0 [45] if(mul16u::a#3!=0) goto mul16u::@2
Simple Condition mul16u::$3 [48] if(mul16u::$1==0) goto mul16u::@4
Simple Condition mul16s::$2 [61] if(mul16s::a#0>=0) goto mul16s::@1
Simple Condition mul16s::$4 [64] if(mul16s::b#0>=0) goto mul16s::@2
Simple Condition sin16s_gen2::$4 [90] if(sin16s_gen2::i#2<sin16s_gen2::wavelength#0) goto sin16s_gen2::@2
Simple Condition sin16s::$1 [110] if(sin16s::x#0<PI_u4f28) goto sin16s::@1
Simple Condition sin16s::$3 [113] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2
Simple Condition sin16s::$15 [154] if(sin16s::isUpper#2==0) goto sin16s::@3
Simple Condition memset::$1 [170] if(memset::num#2<=0) goto memset::@1
Simple Condition memset::$3 [177] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition bitmap_init::$1 [190] if(bitmap_init::bits#1!=0) goto bitmap_init::@2
Simple Condition bitmap_init::$2 [194] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition bitmap_init::$9 [206] if(bitmap_init::$7!=7) goto bitmap_init::@6
Simple Condition bitmap_init::$11 [210] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition render_sine::$0 [280] if(render_sine::sin_idx#2<SIN_SIZE) goto render_sine::@2
Simple Condition render_sine::$9 [303] if(render_sine::xpos#1!=$140) goto render_sine::@3
Simple Condition wrap_y::$0 [311] if(wrap_y::y#4>=$c8) goto wrap_y::@2
Simple Condition wrap_y::$1 [315] if(wrap_y::y#6<0) goto wrap_y::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [132] mulu16_sel::v2#2 = (unumber)$10000/6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant divr16u::quotient#0 = 0
Constant divr16u::i#0 = 0
Constant divr16u::rem#3 = 0
Constant mul16u::res#0 = 0
Constant div32u16u::dividend#0 = PI2_u4f28
Constant sin16s_gen2::x#0 = 0
Constant sin16s_gen2::i#0 = 0
Constant sin16s::isUpper#0 = 0
Constant sin16s::isUpper#1 = 1
Constant mulu16_sel::select#0 = 0
Constant mulu16_sel::select#1 = 1
Constant mulu16_sel::v2#2 = (unumber)$10000/6
Constant mulu16_sel::select#2 = 1
Constant mulu16_sel::select#3 = 0
Constant mulu16_sel::select#4 = 0
Constant bitmap_init::bits#0 = $80
Constant bitmap_init::x#0 = 0
Constant bitmap_init::bits#2 = $80
Constant bitmap_init::y#0 = 0
Constant memset::num#0 = $3e8
Constant memset::c#1 = 0
Constant memset::num#1 = $1f40
Constant main::vicSelectGfxBank1_gfx#0 = SCREEN
Constant main::toD0181_screen#0 = SCREEN
Constant main::toD0181_gfx#0 = BITMAP
Constant bitmap_init::gfx#0 = BITMAP
Constant bitmap_init::screen#0 = SCREEN
Constant bitmap_clear::bgcol#0 = BLACK
Constant bitmap_clear::fgcol#0 = WHITE
Constant sin16s_gen2::sintab#1 = sin
Constant sin16s_gen2::wavelength#0 = SIN_SIZE
Constant sin16s_gen2::min#0 = -$140
Constant sin16s_gen2::max#0 = $140
Constant render_sine::xpos#0 = 0
Constant render_sine::sin_idx#0 = 0
Constant render_sine::xpos#2 = 0
Constant rem16u#27 = 0
Constant bitmap_screen#16 = (byte*) 0
Constant bitmap_gfx#17 = (byte*) 0
Successful SSA optimization Pass2ConstantIdentification
Constant div32u16u::divisor#0 = sin16s_gen2::wavelength#0
Constant bitmap_gfx#0 = bitmap_init::gfx#0
Constant bitmap_screen#0 = bitmap_init::screen#0
Constant main::toD0181_$7 = (word)main::toD0181_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant divr16u::divisor#0 = div32u16u::divisor#0
Constant divr16u::divisor#1 = div32u16u::divisor#0
Constant memset::str#0 = (void*)bitmap_screen#0
Constant memset::str#1 = (void*)bitmap_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::vicSelectGfxBank1_gfx#0 in [242] main::vicSelectGfxBank1_toDd001_$0 = > (word)main::vicSelectGfxBank1_gfx#0
Constant value identified (word)main::toD0181_gfx#0 in [253] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [273] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [16] divr16u::i#1 = ++ divr16u::i#2 to ++
Resolved ranged comparison value [18] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to $10
Resolved ranged next value [192] bitmap_init::x#1 = ++ bitmap_init::x#2 to ++
Resolved ranged comparison value [194] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to 0
Resolved ranged next value [208] bitmap_init::y#1 = ++ bitmap_init::y#2 to ++
Resolved ranged comparison value [210] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to 0
Simplifying expression containing zero bitmap_clear::$0 in [215] bitmap_clear::col#0 = bitmap_clear::$0 + bitmap_clear::bgcol#0
Simplifying expression containing zero (byte*)CIA2 in [245] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = main::vicSelectGfxBank1_toDd001_return#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable memset::return#2 and assignment [167] memset::return#2 = memset::str#3
Eliminating unused variable memset::return#3 and assignment [169] memset::return#3 = memset::str#3
Eliminating unused constant bitmap_clear::bgcol#0
Eliminating unused constant OFFSET_STRUCT_MOS6526_CIA_PORT_A
Eliminating unused constant rem16u#27
Eliminating unused constant bitmap_screen#16
Eliminating unused constant bitmap_gfx#17
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant BLACK
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $10 in [13] if(divr16u::i#1!=$10) goto divr16u::@1
Adding number conversion cast (unumber) 0 in [148] if(bitmap_init::x#1!=0) goto bitmap_init::@1
Adding number conversion cast (unumber) 0 in [160] if(bitmap_init::y#1!=0) goto bitmap_init::@5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [171] bitmap_plot::plotter#0 = (byte*)bitmap_plot::$3
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias bitmap_init::$7 = bitmap_init::$3 
Alias bitmap_clear::col#0 = bitmap_clear::$0 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [18] divr16u::dividend#1 = > div32u16u::dividend#0
Constant right-side identified [22] divr16u::dividend#2 = < div32u16u::dividend#0
Constant right-side identified [59] sin16s_gen2::ampl#0 = sin16s_gen2::max#0 - sin16s_gen2::min#0
Constant right-side identified [162] bitmap_clear::col#0 = bitmap_clear::fgcol#0 * $10
Constant right-side identified [180] main::vicSelectGfxBank1_toDd001_$0 = > (word)main::vicSelectGfxBank1_gfx#0
Constant right-side identified [185] main::toD0181_$0 = main::toD0181_$7 & $3fff
Constant right-side identified [188] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant divr16u::dividend#1 = >div32u16u::dividend#0
Constant divr16u::dividend#2 = <div32u16u::dividend#0
Constant sin16s_gen2::ampl#0 = sin16s_gen2::max#0-sin16s_gen2::min#0
Constant bitmap_clear::col#0 = bitmap_clear::fgcol#0*$10
Constant main::vicSelectGfxBank1_toDd001_$0 = >(word)main::vicSelectGfxBank1_gfx#0
Constant main::toD0181_$0 = main::toD0181_$7&$3fff
Constant main::toD0181_$3 = >(word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant mul16s::b#0 = sin16s_gen2::ampl#0
Constant memset::c#0 = bitmap_clear::col#0
Successful SSA optimization Pass2ConstantIdentification
Constant mul16u::b#0 = (word)mul16s::b#0
Constant mul16s::$13 = (word)mul16s::b#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [47] if(mul16s::b#0>=0) goto mul16s::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating variable mul16s::$9 from unused block mul16s::@4
Eliminating variable mul16s::$14 from unused block mul16s::@4
Eliminating variable mul16s::$12 from unused block mul16s::@4
Eliminating variable mul16s::m#2 from unused block mul16s::@4
Removing PHI-reference to removed block (mul16s::@4) in block mul16s::@2
Removing unused block mul16s::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias mul16s::m#4 = mul16s::m#5 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [49] sin16s_gen2::$1 = sin16s_gen2::ampl#0 >> 1
Constant right-side identified [166] main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
Constant right-side identified [170] main::toD0181_$1 = main::toD0181_$0 * 4
Constant right-side identified [172] main::toD0181_$4 = main::toD0181_$3 / 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant sin16s_gen2::$1 = sin16s_gen2::ampl#0>>1
Constant main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0/$40
Constant main::toD0181_$1 = main::toD0181_$0*4
Constant main::toD0181_$4 = main::toD0181_$3/4
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero main::vicSelectGfxBank1_toDd001_$0/$40 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero 3 in [167] main::vicSelectGfxBank1_toDd001_return#0 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::vicSelectGfxBank1_toDd001_$0
Eliminating unused constant main::vicSelectGfxBank1_toDd001_$1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant main::vicSelectGfxBank1_gfx#0
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [49] sin16s_gen2::offs#0 = sin16s_gen2::min#0 + sin16s_gen2::$1
Constant right-side identified [168] main::toD0181_$2 = > main::toD0181_$1
Constant right-side identified [169] main::toD0181_$5 = main::toD0181_$4 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant sin16s_gen2::offs#0 = sin16s_gen2::min#0+sin16s_gen2::$1
Constant main::vicSelectGfxBank1_toDd001_return#0 = 3
Constant main::toD0181_$2 = >main::toD0181_$1
Constant main::toD0181_$5 = main::toD0181_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero sin16s_gen2::min#0+sin16s_gen2::$1 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero sin16s_gen2::$10 in [64] sin16s_gen2::$8 = sin16s_gen2::offs#0 + sin16s_gen2::$10
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant sin16s_gen2::$1
Eliminating unused constant sin16s_gen2::offs#0
Successful SSA optimization PassNEliminateUnusedVars
Alias sin16s_gen2::$8 = sin16s_gen2::$10 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [165] main::toD0181_return#0 = main::toD0181_$2 | main::toD0181_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [62] sin16s_gen2::$8 = (signed word)sin16s_gen2::$7 keeping sin16s_gen2::$8
Inlining Noop Cast [152] bitmap_plot::plotter#0 = (byte*)bitmap_plot::$3 keeping bitmap_plot::plotter#0
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [102] sin16s::sinx#0 = (signed word)sin16s::usinx#1 keeping sin16s::usinx#1
Inlining Noop Cast [119] memset::$4 = (byte*)memset::str#3 keeping memset::str#3
Inlining Noop Cast [121] memset::dst#0 = (byte*)memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [173] render_sine::$10 = render_sine::sin_idx#2 * SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [183] render_sine::$11 = render_sine::sin_idx#2 * SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings divr16u::quotient#0
Inlining constant with var siblings divr16u::i#0
Inlining constant with var siblings divr16u::rem#3
Inlining constant with var siblings divr16u::divisor#0
Inlining constant with var siblings divr16u::divisor#1
Inlining constant with var siblings divr16u::dividend#1
Inlining constant with var siblings divr16u::dividend#2
Inlining constant with var siblings mul16u::res#0
Inlining constant with var siblings mul16u::b#0
Inlining constant with var siblings sin16s_gen2::x#0
Inlining constant with var siblings sin16s_gen2::i#0
Inlining constant with var siblings sin16s_gen2::sintab#1
Inlining constant with var siblings sin16s::isUpper#0
Inlining constant with var siblings sin16s::isUpper#1
Inlining constant with var siblings mulu16_sel::select#0
Inlining constant with var siblings mulu16_sel::select#1
Inlining constant with var siblings mulu16_sel::v2#2
Inlining constant with var siblings mulu16_sel::select#2
Inlining constant with var siblings mulu16_sel::select#3
Inlining constant with var siblings mulu16_sel::select#4
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::c#1
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings memset::str#0
Inlining constant with var siblings memset::str#1
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings bitmap_init::bits#0
Inlining constant with var siblings bitmap_init::x#0
Inlining constant with var siblings bitmap_init::bits#2
Inlining constant with var siblings bitmap_init::y#0
Inlining constant with var siblings render_sine::xpos#0
Inlining constant with var siblings render_sine::sin_idx#0
Inlining constant with var siblings render_sine::xpos#2
Constant inlined bitmap_init::screen#0 = SCREEN
Constant inlined divr16u::rem#3 = 0
Constant inlined bitmap_init::gfx#0 = BITMAP
Constant inlined sin16s_gen2::i#0 = 0
Constant inlined sin16s::isUpper#0 = 0
Constant inlined memset::num#1 = $1f40
Constant inlined memset::num#0 = $3e8
Constant inlined mul16u::b#0 = (word)sin16s_gen2::ampl#0
Constant inlined mulu16_sel::select#4 = 0
Constant inlined mulu16_sel::select#2 = 1
Constant inlined mulu16_sel::select#3 = 0
Constant inlined mulu16_sel::select#0 = 0
Constant inlined sin16s::isUpper#1 = 1
Constant inlined mulu16_sel::select#1 = 1
Constant inlined mul16s::$13 = (word)sin16s_gen2::ampl#0
Constant inlined mul16s::b#0 = sin16s_gen2::ampl#0
Constant inlined main::toD0181_$7 = (word)SCREEN
Constant inlined main::toD0181_$2 = >(word)SCREEN&$3fff*4
Constant inlined sin16s_gen2::wavelength#0 = SIN_SIZE
Constant inlined main::toD0181_$1 = (word)SCREEN&$3fff*4
Constant inlined main::toD0181_$0 = (word)SCREEN&$3fff
Constant inlined bitmap_gfx#0 = BITMAP
Constant inlined main::toD0181_$5 = >(word)BITMAP/4&$f
Constant inlined main::toD0181_$4 = >(word)BITMAP/4
Constant inlined main::toD0181_$3 = >(word)BITMAP
Constant inlined sin16s_gen2::sintab#1 = sin
Constant inlined memset::c#0 = bitmap_clear::col#0
Constant inlined bitmap_init::x#0 = 0
Constant inlined memset::c#1 = 0
Constant inlined main::toD0181_screen#0 = SCREEN
Constant inlined main::toD0181_gfx#0 = BITMAP
Constant inlined divr16u::i#0 = 0
Constant inlined div32u16u::dividend#0 = PI2_u4f28
Constant inlined bitmap_init::bits#0 = $80
Constant inlined render_sine::xpos#0 = 0
Constant inlined bitmap_init::bits#2 = $80
Constant inlined divr16u::quotient#0 = 0
Constant inlined sin16s_gen2::x#0 = 0
Constant inlined mul16u::res#0 = 0
Constant inlined divr16u::divisor#1 = SIN_SIZE
Constant inlined divr16u::divisor#0 = SIN_SIZE
Constant inlined memset::str#1 = (void*)BITMAP
Constant inlined render_sine::sin_idx#0 = 0
Constant inlined memset::str#0 = (void*)SCREEN
Constant inlined bitmap_clear::fgcol#0 = WHITE
Constant inlined divr16u::dividend#1 = >PI2_u4f28
Constant inlined divr16u::dividend#2 = <PI2_u4f28
Constant inlined render_sine::xpos#2 = 0
Constant inlined bitmap_screen#0 = SCREEN
Constant inlined mulu16_sel::v2#2 = (word)$10000/6
Constant inlined bitmap_init::y#0 = 0
Constant inlined div32u16u::divisor#0 = SIN_SIZE
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values divr16u::divisor#6 SIN_SIZE
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [178] render_sine::$11 = render_sine::sin_idx#2 << 1
Successful SSA optimization Pass2DuplicateRValueIdentification
Alias render_sine::$11 = render_sine::$10 
Successful SSA optimization Pass2AliasElimination
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (dword) $10000
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul16u::@6(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting mul16s::@6(between mul16s::@5 and mul16s::@1)
Added new block during phi lifting sin16s::@12(between sin16s and sin16s::@1)
Fixing phi predecessor for sin16s::isUpper#2 to new block ( sin16s -> sin16s::@12 ) during phi lifting.
Added new block during phi lifting sin16s::@13(between sin16s::@1 and sin16s::@2)
Added new block during phi lifting sin16s::@14(between sin16s::@11 and sin16s::@3)
Added new block during phi lifting bitmap_init::@8(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting render_sine::@9(between render_sine::@8 and render_sine::@3)
Added new block during phi lifting wrap_y::@6(between wrap_y::@1 and wrap_y::@3)
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001_@return
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of bitmap_init::@4
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of bitmap_clear::@2
Adding NOP phi() at start of sin16s_gen2
Adding NOP phi() at start of render_sine
Adding NOP phi() at start of render_sine::@4
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of mul16u::@3
CALL GRAPH
Calls in [main] to bitmap_init:12 bitmap_clear:14 sin16s_gen2:16 render_sine:18 
Calls in [bitmap_clear] to memset:53 memset:55 
Calls in [sin16s_gen2] to div32u16u:59 sin16s:66 mul16s:69 
Calls in [render_sine] to wrap_y:89 bitmap_plot:96 wrap_y:101 bitmap_plot:108 
Calls in [div32u16u] to divr16u:129 divr16u:134 
Calls in [sin16s] to mulu16_sel:153 mulu16_sel:160 mulu16_sel:165 mulu16_sel:173 mulu16_sel:180 
Calls in [mul16s] to mul16u:195 
Calls in [mulu16_sel] to mul16u:262 

Created 44 initial phi equivalence classes
Coalesced [41] bitmap_init::yoffs#7 = bitmap_init::yoffs#1
Coalesced [46] bitmap_init::y#5 = bitmap_init::y#1
Coalesced [47] bitmap_init::yoffs#5 = bitmap_init::yoffs#4
Coalesced (already) [48] bitmap_init::yoffs#6 = bitmap_init::yoffs#2
Coalesced [49] bitmap_init::bits#5 = bitmap_init::bits#4
Coalesced [50] bitmap_init::x#5 = bitmap_init::x#1
Coalesced [51] bitmap_init::bits#6 = bitmap_init::bits#1
Coalesced [77] sin16s_gen2::i#6 = sin16s_gen2::i#1
Coalesced [78] sin16s_gen2::x#6 = sin16s_gen2::x#1
Coalesced [79] sin16s_gen2::sintab#8 = sin16s_gen2::sintab#0
Coalesced [88] wrap_y::y#10 = wrap_y::y#0
Coalesced [94] bitmap_plot::y#3 = bitmap_plot::y#0
Coalesced [95] bitmap_plot::x#3 = bitmap_plot::x#0
Coalesced [100] wrap_y::y#11 = wrap_y::y#1
Coalesced [106] bitmap_plot::y#4 = bitmap_plot::y#1
Coalesced [107] bitmap_plot::x#4 = bitmap_plot::x#1
Coalesced [114] render_sine::sin_idx#10 = render_sine::sin_idx#1
Coalesced [115] render_sine::xpos#10 = render_sine::xpos#9
Coalesced [116] render_sine::xpos#11 = render_sine::xpos#1
Coalesced [127] memset::dst#5 = memset::dst#1
Coalesced [133] divr16u::rem#12 = divr16u::rem#4
Coalesced [141] sin16s::x#9 = sin16s::x#1
Coalesced [145] sin16s::x#11 = sin16s::x#2
Coalesced [151] mulu16_sel::v1#7 = mulu16_sel::v1#0
Coalesced [152] mulu16_sel::v2#7 = mulu16_sel::v2#0
Coalesced [158] mulu16_sel::v1#8 = mulu16_sel::v1#1
Coalesced [159] mulu16_sel::v2#8 = mulu16_sel::v2#1
Coalesced [164] mulu16_sel::v1#9 = mulu16_sel::v1#2
Coalesced [171] mulu16_sel::v1#10 = mulu16_sel::v1#3
Coalesced [172] mulu16_sel::v2#9 = mulu16_sel::v2#3
Coalesced [178] mulu16_sel::v1#6 = mulu16_sel::v1#4
Coalesced [179] mulu16_sel::v2#6 = mulu16_sel::v2#4
Coalesced [187] sin16s::return#6 = sin16s::sinx#1
Coalesced [191] sin16s::x#10 = sin16s::x#4
Coalesced [192] sin16s::x#8 = sin16s::x#0
Coalesced [194] mul16u::a#8 = mul16u::a#1
Coalesced [202] mul16s::m#7 = mul16s::m#1
Coalesced [206] mul16s::m#8 = mul16s::m#0
Coalesced [208] wrap_y::y#12 = wrap_y::y#9
Coalesced [211] wrap_y::y#14 = wrap_y::y#4
Coalesced [217] wrap_y::y#15 = wrap_y::y#3
Coalesced [219] wrap_y::y#13 = wrap_y::y#2
Coalesced [228] divr16u::rem#13 = divr16u::rem#10
Coalesced [229] divr16u::dividend#9 = divr16u::dividend#5
Coalesced [236] divr16u::rem#16 = divr16u::rem#1
Coalesced [243] divr16u::rem#18 = divr16u::rem#2
Coalesced [244] divr16u::return#8 = divr16u::quotient#2
Coalesced [250] divr16u::rem#14 = divr16u::rem#11
Coalesced [251] divr16u::dividend#10 = divr16u::dividend#0
Coalesced [252] divr16u::quotient#9 = divr16u::return#0
Coalesced [253] divr16u::i#7 = divr16u::i#1
Coalesced [254] divr16u::rem#17 = divr16u::rem#6
Coalesced [255] divr16u::return#7 = divr16u::quotient#1
Coalesced [256] divr16u::rem#15 = divr16u::rem#0
Coalesced [260] mul16u::b#3 = mul16u::b#1
Coalesced [261] mul16u::a#9 = mul16u::a#2
Coalesced [270] mul16u::a#10 = mul16u::a#6
Coalesced [271] mul16u::mb#6 = mul16u::mb#0
Coalesced [279] mul16u::res#9 = mul16u::res#1
Coalesced [283] mul16u::a#11 = mul16u::a#0
Coalesced [284] mul16u::res#7 = mul16u::res#6
Coalesced [285] mul16u::mb#7 = mul16u::mb#1
Coalesced (already) [286] mul16u::res#8 = mul16u::res#2
Coalesced down to 31 phi equivalence classes
Culled Empty Block label main::vicSelectGfxBank1_toDd001_@return
Culled Empty Block label main::toD0181_@return
Culled Empty Block label main::@8
Culled Empty Block label main::@1
Culled Empty Block label bitmap_init::@3
Culled Empty Block label bitmap_init::@4
Culled Empty Block label bitmap_init::@10
Culled Empty Block label bitmap_init::@11
Culled Empty Block label bitmap_init::@8
Culled Empty Block label bitmap_clear::@2
Culled Empty Block label render_sine::@4
Culled Empty Block label memset::@1
Culled Empty Block label sin16s::@13
Culled Empty Block label sin16s::@12
Culled Empty Block label mul16s::@6
Culled Empty Block label wrap_y::@6
Culled Empty Block label divr16u::@7
Culled Empty Block label divr16u::@9
Culled Empty Block label divr16u::@8
Culled Empty Block label mul16u::@3
Culled Empty Block label mul16u::@6
Renumbering block mul16u::@4 to mul16u::@3
Renumbering block mul16u::@5 to mul16u::@4
Renumbering block mul16s::@5 to mul16s::@4
Renumbering block sin16s::@14 to sin16s::@12
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@9 to bitmap_init::@6
Renumbering block main::@2 to main::@1
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block render_sine::@5 to render_sine::@4
Renumbering block render_sine::@6 to render_sine::@5
Renumbering block render_sine::@7 to render_sine::@6
Renumbering block render_sine::@8 to render_sine::@7
Renumbering block render_sine::@9 to render_sine::@8
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of sin16s_gen2
Adding NOP phi() at start of render_sine
Adding NOP phi() at start of render_sine::@8
Adding NOP phi() at start of div32u16u

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  [2] *PROCPORT = PROCPORT_RAM_IO
  [3] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [4] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [5] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [6] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0
  to:main::@2
main::@2: scope:[main]  from main::vicSelectGfxBank1_@1
  [7] *D016 = VICII_CSEL
  to:main::toD0181
main::toD0181: scope:[main]  from main::@2
  [8] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [9] *D018 = main::toD0181_return#0
  [10] call bitmap_init 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] phi()
  [12] call bitmap_clear 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [13] phi()
  [14] call sin16s_gen2 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [15] phi()
  [16] call render_sine 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@6
  [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = ++ *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR)
  to:main::@1

void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from main::@3
  [18] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [19] bitmap_init::x#2 = phi( bitmap_init/0, bitmap_init::@2/bitmap_init::x#1 )
  [19] bitmap_init::bits#3 = phi( bitmap_init/$80, bitmap_init::@2/bitmap_init::bits#4 )
  [20] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  [21] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
  [22] if(bitmap_init::bits#1!=0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [23] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [24] bitmap_init::bits#4 = phi( bitmap_init::@6/bitmap_init::bits#1, bitmap_init::@1/$80 )
  [25] bitmap_init::x#1 = ++ bitmap_init::x#2
  [26] if(bitmap_init::x#1!=0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [27] bitmap_init::yoffs#2 = phi( bitmap_init::@2/BITMAP, bitmap_init::@4/bitmap_init::yoffs#4 )
  [27] bitmap_init::y#2 = phi( bitmap_init::@2/0, bitmap_init::@4/bitmap_init::y#1 )
  [28] bitmap_init::$7 = bitmap_init::y#2 & 7
  [29] bitmap_init::$4 = < bitmap_init::yoffs#2
  [30] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4
  [31] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5
  [32] bitmap_init::$6 = > bitmap_init::yoffs#2
  [33] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6
  [34] if(bitmap_init::$7!=7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [35] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [36] bitmap_init::yoffs#4 = phi( bitmap_init::@3/bitmap_init::yoffs#2, bitmap_init::@5/bitmap_init::yoffs#1 )
  [37] bitmap_init::y#1 = ++ bitmap_init::y#2
  [38] if(bitmap_init::y#1!=0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [39] return 
  to:@return

void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@4
  [40] phi()
  [41] call memset 
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  [42] phi()
  [43] call memset 
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@1
  [44] return 
  to:@return

void sin16s_gen2(signed word* sin16s_gen2::sintab , word sin16s_gen2::wavelength , signed word sin16s_gen2::min , signed word sin16s_gen2::max)
sin16s_gen2: scope:[sin16s_gen2]  from main::@5
  [45] phi()
  [46] call div32u16u 
  [47] div32u16u::return#2 = div32u16u::return#0
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  [48] sin16s_gen2::step#0 = div32u16u::return#2
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  [49] sin16s_gen2::sintab#2 = phi( sin16s_gen2::@3/sin, sin16s_gen2::@5/sin16s_gen2::sintab#0 )
  [49] sin16s_gen2::x#2 = phi( sin16s_gen2::@3/0, sin16s_gen2::@5/sin16s_gen2::x#1 )
  [49] sin16s_gen2::i#2 = phi( sin16s_gen2::@3/0, sin16s_gen2::@5/sin16s_gen2::i#1 )
  [50] if(sin16s_gen2::i#2<SIN_SIZE) goto sin16s_gen2::@2
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [51] return 
  to:@return
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [52] sin16s::x#0 = sin16s_gen2::x#2
  [53] call sin16s 
  [54] sin16s::return#0 = sin16s::return#1
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@2
  [55] mul16s::a#0 = sin16s::return#0
  [56] call mul16s 
  [57] mul16s::return#2 = mul16s::return#0
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  [58] sin16s_gen2::$6 = mul16s::return#2
  [59] sin16s_gen2::$8 = > sin16s_gen2::$6
  [60] *sin16s_gen2::sintab#2 = (signed word)sin16s_gen2::$8
  [61] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_SIGNED_WORD
  [62] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0
  [63] sin16s_gen2::i#1 = ++ sin16s_gen2::i#2
  to:sin16s_gen2::@1

void render_sine()
render_sine: scope:[render_sine]  from main::@6
  [64] phi()
  to:render_sine::@1
render_sine::@1: scope:[render_sine]  from render_sine render_sine::@3
  [65] render_sine::xpos#3 = phi( render_sine/0, render_sine::@3/render_sine::xpos#9 )
  [65] render_sine::sin_idx#2 = phi( render_sine/0, render_sine::@3/render_sine::sin_idx#1 )
  [66] if(render_sine::sin_idx#2<SIN_SIZE) goto render_sine::@2
  to:render_sine::@return
render_sine::@return: scope:[render_sine]  from render_sine::@1
  [67] return 
  to:@return
render_sine::@2: scope:[render_sine]  from render_sine::@1
  [68] render_sine::$11 = render_sine::sin_idx#2 << 1
  [69] render_sine::$1 = sin + render_sine::$11
  [70] render_sine::sin_val#0 = *render_sine::$1
  [71] wrap_y::y#0 = render_sine::sin_val#0
  [72] call wrap_y 
  [73] wrap_y::return#0 = wrap_y::return#2
  to:render_sine::@4
render_sine::@4: scope:[render_sine]  from render_sine::@2
  [74] render_sine::ypos#0 = wrap_y::return#0
  [75] bitmap_plot::x#0 = render_sine::xpos#3
  [76] bitmap_plot::y#0 = render_sine::ypos#0
  [77] call bitmap_plot 
  to:render_sine::@5
render_sine::@5: scope:[render_sine]  from render_sine::@4
  [78] render_sine::$4 = sin2 + render_sine::$11
  [79] render_sine::sin2_val#0 = *render_sine::$4
  [80] wrap_y::y#1 = render_sine::sin2_val#0 + $a
  [81] call wrap_y 
  [82] wrap_y::return#1 = wrap_y::return#2
  to:render_sine::@6
render_sine::@6: scope:[render_sine]  from render_sine::@5
  [83] render_sine::ypos2#0 = wrap_y::return#1
  [84] bitmap_plot::x#1 = render_sine::xpos#3
  [85] bitmap_plot::y#1 = render_sine::ypos2#0
  [86] call bitmap_plot 
  to:render_sine::@7
render_sine::@7: scope:[render_sine]  from render_sine::@6
  [87] render_sine::xpos#1 = ++ render_sine::xpos#3
  [88] if(render_sine::xpos#1!=$140) goto render_sine::@8
  to:render_sine::@3
render_sine::@8: scope:[render_sine]  from render_sine::@7
  [89] phi()
  to:render_sine::@3
render_sine::@3: scope:[render_sine]  from render_sine::@7 render_sine::@8
  [90] render_sine::xpos#9 = phi( render_sine::@7/0, render_sine::@8/render_sine::xpos#1 )
  [91] render_sine::sin_idx#1 = ++ render_sine::sin_idx#2
  to:render_sine::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  [92] memset::c#4 = phi( bitmap_clear/bitmap_clear::col#0, bitmap_clear::@1/0 )
  [92] memset::str#3 = phi( bitmap_clear/(void*)SCREEN, bitmap_clear::@1/(void*)BITMAP )
  [92] memset::num#2 = phi( bitmap_clear/$3e8, bitmap_clear::@1/$1f40 )
  [93] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [94] memset::end#0 = (byte*)memset::str#3 + memset::num#2
  [95] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [96] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [97] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [98] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [99] *memset::dst#2 = memset::c#4
  [100] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen2
  [101] phi()
  [102] call divr16u 
  [103] divr16u::return#2 = divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [104] div32u16u::quotient_hi#0 = divr16u::return#2
  [105] divr16u::rem#4 = rem16u#0
  [106] call divr16u 
  [107] divr16u::return#3 = divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [108] div32u16u::quotient_lo#0 = divr16u::return#3
  [109] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [110] return 
  to:@return

signed word sin16s(dword sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen2::@2
  [111] if(sin16s::x#0<PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [112] sin16s::x#1 = sin16s::x#0 - PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [113] sin16s::isUpper#2 = phi( sin16s/0, sin16s::@4/1 )
  [113] sin16s::x#4 = phi( sin16s/sin16s::x#0, sin16s::@4/sin16s::x#1 )
  [114] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [115] sin16s::x#2 = PI_u4f28 - sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [116] sin16s::x#6 = phi( sin16s::@1/sin16s::x#4, sin16s::@5/sin16s::x#2 )
  [117] sin16s::$4 = sin16s::x#6 << 3
  [118] sin16s::x1#0 = > sin16s::$4
  [119] mulu16_sel::v1#0 = sin16s::x1#0
  [120] mulu16_sel::v2#0 = sin16s::x1#0
  [121] call mulu16_sel 
  [122] mulu16_sel::return#0 = mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [123] sin16s::x2#0 = mulu16_sel::return#0
  [124] mulu16_sel::v1#1 = sin16s::x2#0
  [125] mulu16_sel::v2#1 = sin16s::x1#0
  [126] call mulu16_sel 
  [127] mulu16_sel::return#1 = mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [128] sin16s::x3#0 = mulu16_sel::return#1
  [129] mulu16_sel::v1#2 = sin16s::x3#0
  [130] call mulu16_sel 
  [131] mulu16_sel::return#2 = mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [132] sin16s::x3_6#0 = mulu16_sel::return#2
  [133] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0
  [134] mulu16_sel::v1#3 = sin16s::x3#0
  [135] mulu16_sel::v2#3 = sin16s::x1#0
  [136] call mulu16_sel 
  [137] mulu16_sel::return#10 = mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [138] sin16s::x4#0 = mulu16_sel::return#10
  [139] mulu16_sel::v1#4 = sin16s::x4#0
  [140] mulu16_sel::v2#4 = sin16s::x1#0
  [141] call mulu16_sel 
  [142] mulu16_sel::return#11 = mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [143] sin16s::x5#0 = mulu16_sel::return#11
  [144] sin16s::x5_128#0 = sin16s::x5#0 >> 4
  [145] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0
  [146] if(sin16s::isUpper#2==0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [147] sin16s::sinx#1 = - (signed word)sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [148] sin16s::return#1 = phi( sin16s::@12/sin16s::return#5, sin16s::@6/sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [149] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [150] sin16s::return#5 = (signed word)sin16s::usinx#1
  to:sin16s::@3

signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
mul16s: scope:[mul16s]  from sin16s_gen2::@4
  [151] mul16u::a#1 = (word)mul16s::a#0
  [152] call mul16u 
  [153] mul16u::return#2 = mul16u::res#2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s
  [154] mul16s::m#0 = mul16u::return#2
  [155] if(mul16s::a#0>=0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@4
  [156] mul16s::$6 = > mul16s::m#0
  [157] mul16s::$11 = mul16s::$6 - (word)sin16s_gen2::ampl#0
  [158] mul16s::m#1 = mul16s::m#0 hi= mul16s::$11
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@4
  [159] mul16s::m#4 = phi( mul16s::@3/mul16s::m#1, mul16s::@4/mul16s::m#0 )
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1
  [160] mul16s::return#0 = (signed dword)mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [161] return 
  to:@return

byte wrap_y(signed word wrap_y::y)
wrap_y: scope:[wrap_y]  from render_sine::@2 render_sine::@5
  [162] wrap_y::y#9 = phi( render_sine::@2/wrap_y::y#0, render_sine::@5/wrap_y::y#1 )
  to:wrap_y::@1
wrap_y::@1: scope:[wrap_y]  from wrap_y wrap_y::@2
  [163] wrap_y::y#4 = phi( wrap_y/wrap_y::y#9, wrap_y::@2/wrap_y::y#2 )
  [164] if(wrap_y::y#4>=$c8) goto wrap_y::@2
  to:wrap_y::@3
wrap_y::@3: scope:[wrap_y]  from wrap_y::@1 wrap_y::@4
  [165] wrap_y::y#6 = phi( wrap_y::@1/wrap_y::y#4, wrap_y::@4/wrap_y::y#3 )
  [166] if(wrap_y::y#6<0) goto wrap_y::@4
  to:wrap_y::@5
wrap_y::@5: scope:[wrap_y]  from wrap_y::@3
  [167] wrap_y::return#2 = (byte)wrap_y::y#6
  to:wrap_y::@return
wrap_y::@return: scope:[wrap_y]  from wrap_y::@5
  [168] return 
  to:@return
wrap_y::@4: scope:[wrap_y]  from wrap_y::@3
  [169] wrap_y::y#3 = wrap_y::y#6 + $c8
  to:wrap_y::@3
wrap_y::@2: scope:[wrap_y]  from wrap_y::@1
  [170] wrap_y::y#2 = wrap_y::y#4 - $c8
  to:wrap_y::@1

void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from render_sine::@4 render_sine::@6
  [171] bitmap_plot::x#2 = phi( render_sine::@4/bitmap_plot::x#0, render_sine::@6/bitmap_plot::x#1 )
  [171] bitmap_plot::y#2 = phi( render_sine::@4/bitmap_plot::y#0, render_sine::@6/bitmap_plot::y#1 )
  [172] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#2] w= bitmap_plot_ylo[bitmap_plot::y#2]
  [173] bitmap_plot::$0 = bitmap_plot::x#2 & $fff8
  [174] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0
  [175] bitmap_plot::$1 = < bitmap_plot::x#2
  [176] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1]
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [177] return 
  to:@return

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [178] divr16u::dividend#5 = phi( div32u16u/>PI2_u4f28, div32u16u::@1/<PI2_u4f28 )
  [178] divr16u::rem#10 = phi( div32u16u/0, div32u16u::@1/divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [179] divr16u::i#2 = phi( divr16u/0, divr16u::@3/divr16u::i#1 )
  [179] divr16u::quotient#3 = phi( divr16u/0, divr16u::@3/divr16u::return#0 )
  [179] divr16u::dividend#3 = phi( divr16u/divr16u::dividend#5, divr16u::@3/divr16u::dividend#0 )
  [179] divr16u::rem#5 = phi( divr16u/divr16u::rem#10, divr16u::@3/divr16u::rem#11 )
  [180] divr16u::rem#0 = divr16u::rem#5 << 1
  [181] divr16u::$1 = > divr16u::dividend#3
  [182] divr16u::$2 = divr16u::$1 & $80
  [183] if(divr16u::$2==0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [184] divr16u::rem#1 = divr16u::rem#0 | 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [185] divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  [186] divr16u::dividend#0 = divr16u::dividend#3 << 1
  [187] divr16u::quotient#1 = divr16u::quotient#3 << 1
  [188] if(divr16u::rem#6<SIN_SIZE) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [189] divr16u::quotient#2 = ++ divr16u::quotient#1
  [190] divr16u::rem#2 = divr16u::rem#6 - SIN_SIZE
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [191] divr16u::return#0 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  [191] divr16u::rem#11 = phi( divr16u::@2/divr16u::rem#6, divr16u::@5/divr16u::rem#2 )
  [192] divr16u::i#1 = ++ divr16u::i#2
  [193] if(divr16u::i#1!=$10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [194] rem16u#0 = divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [195] return 
  to:@return

word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [196] mulu16_sel::select#5 = phi( sin16s::@10/0, sin16s::@2/0, sin16s::@7/1, sin16s::@8/1, sin16s::@9/0 )
  [196] mulu16_sel::v2#5 = phi( sin16s::@10/mulu16_sel::v2#4, sin16s::@2/mulu16_sel::v2#0, sin16s::@7/mulu16_sel::v2#1, sin16s::@8/(word)$10000/6, sin16s::@9/mulu16_sel::v2#3 )
  [196] mulu16_sel::v1#5 = phi( sin16s::@10/mulu16_sel::v1#4, sin16s::@2/mulu16_sel::v1#0, sin16s::@7/mulu16_sel::v1#1, sin16s::@8/mulu16_sel::v1#2, sin16s::@9/mulu16_sel::v1#3 )
  [197] mul16u::a#2 = mulu16_sel::v1#5
  [198] mul16u::b#1 = mulu16_sel::v2#5
  [199] call mul16u 
  [200] mul16u::return#3 = mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [201] mulu16_sel::$0 = mul16u::return#3
  [202] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5
  [203] mulu16_sel::return#12 = > mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [204] return 
  to:@return

dword mul16u(word mul16u::a , word mul16u::b)
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  [205] mul16u::a#6 = phi( mul16s/mul16u::a#1, mulu16_sel/mul16u::a#2 )
  [205] mul16u::b#2 = phi( mul16s/(word)sin16s_gen2::ampl#0, mulu16_sel/mul16u::b#1 )
  [206] mul16u::mb#0 = (dword)mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [207] mul16u::mb#2 = phi( mul16u/mul16u::mb#0, mul16u::@3/mul16u::mb#1 )
  [207] mul16u::res#2 = phi( mul16u/0, mul16u::@3/mul16u::res#6 )
  [207] mul16u::a#3 = phi( mul16u/mul16u::a#6, mul16u::@3/mul16u::a#0 )
  [208] if(mul16u::a#3!=0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [209] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [210] mul16u::$1 = mul16u::a#3 & 1
  [211] if(mul16u::$1==0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [212] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [213] mul16u::res#6 = phi( mul16u::@2/mul16u::res#2, mul16u::@4/mul16u::res#1 )
  [214] mul16u::a#0 = mul16u::a#3 >> 1
  [215] mul16u::mb#1 = mul16u::mb#2 << 1
  to:mul16u::@1


VARIABLE REGISTER WEIGHTS
void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
byte bitmap_clear::bgcol
byte bitmap_clear::col
byte bitmap_clear::fgcol
byte* bitmap_gfx
void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
byte~ bitmap_init::$4 202.0
byte~ bitmap_init::$5 202.0
byte~ bitmap_init::$6 202.0
byte~ bitmap_init::$7 50.5
byte bitmap_init::bits
byte bitmap_init::bits#1 101.0
byte bitmap_init::bits#3 151.5
byte bitmap_init::bits#4 67.33333333333333
byte* bitmap_init::gfx
byte* bitmap_init::screen
byte bitmap_init::x
byte bitmap_init::x#1 151.5
byte bitmap_init::x#2 50.5
byte bitmap_init::y
byte bitmap_init::y#1 151.5
byte bitmap_init::y#2 50.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 202.0
byte* bitmap_init::yoffs#2 63.125
byte* bitmap_init::yoffs#4 101.0
void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
word~ bitmap_plot::$0 2002.0
byte~ bitmap_plot::$1 2002.0
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 500.5
byte* bitmap_plot::plotter#1 1501.5
word bitmap_plot::x
word bitmap_plot::x#0 101.0
word bitmap_plot::x#1 101.0
word bitmap_plot::x#2 551.0
byte bitmap_plot::y
byte bitmap_plot::y#0 202.0
byte bitmap_plot::y#1 202.0
byte bitmap_plot::y#2 2204.0
byte* bitmap_screen
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
word div32u16u::divisor
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 40.4
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 202.0
dword div32u16u::return
dword div32u16u::return#0 37.33333333333333
dword div32u16u::return#2 22.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 20002.0
byte~ divr16u::$2 20002.0
word divr16u::dividend
word divr16u::dividend#0 2500.25
word divr16u::dividend#3 4429.142857142857
word divr16u::dividend#5 1001.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 15001.5
byte divr16u::i#2 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 15001.5
word divr16u::quotient#2 10001.0
word divr16u::quotient#3 2500.25
word divr16u::rem
word divr16u::rem#0 7500.75
word divr16u::rem#1 20002.0
word divr16u::rem#10 1102.0
word divr16u::rem#11 10334.666666666666
word divr16u::rem#2 20002.0
word divr16u::rem#4 202.0
word divr16u::rem#5 21003.0
word divr16u::rem#6 10001.0
word divr16u::return
word divr16u::return#0 4315.0
word divr16u::return#2 202.0
word divr16u::return#3 202.0
void main()
byte* main::toD0181_gfx
byte main::toD0181_return
byte* main::toD0181_screen
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx
byte main::vicSelectGfxBank1_toDd001_return
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 125.125
byte* memset::dst
byte* memset::dst#1 2002.0
byte* memset::dst#2 1368.3333333333335
byte* memset::dst#4 202.0
byte* memset::end
byte* memset::end#0 183.66666666666669
word memset::num
word memset::num#2 101.0
void* memset::return
void* memset::str
void* memset::str#3
signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
word~ mul16s::$11 2002.0
word~ mul16s::$6 2002.0
signed word mul16s::a
signed word mul16s::a#0 220.39999999999998
signed word mul16s::b
dword mul16s::m
dword mul16s::m#0 1001.0
dword mul16s::m#1 2002.0
dword mul16s::m#4 2002.0
signed dword mul16s::return
signed dword mul16s::return#0 367.33333333333337
signed dword mul16s::return#2 202.0
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 2.0000002E7
word mul16u::a
word mul16u::a#0 1.0000001E7
word mul16u::a#1 2002.0
word mul16u::a#2 10001.0
word mul16u::a#3 6683334.166666666
word mul16u::a#6 55501.5
word mul16u::b
word mul16u::b#1 20002.0
word mul16u::b#2 10001.0
dword mul16u::mb
dword mul16u::mb#0 200002.0
dword mul16u::mb#1 2.0000002E7
dword mul16u::mb#2 4300000.571428571
dword mul16u::res
dword mul16u::res#1 2.0000002E7
dword mul16u::res#2 4287286.428571429
dword mul16u::res#6 1.0000001E7
dword mul16u::return
dword mul16u::return#2 2002.0
dword mul16u::return#3 20002.0
word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
dword~ mulu16_sel::$0 20002.0
dword~ mulu16_sel::$1 20002.0
word mulu16_sel::return
word mulu16_sel::return#0 2002.0
word mulu16_sel::return#1 2002.0
word mulu16_sel::return#10 2002.0
word mulu16_sel::return#11 2002.0
word mulu16_sel::return#12 2143.714285714286
word mulu16_sel::return#2 2002.0
byte mulu16_sel::select
byte mulu16_sel::select#5 1666.8333333333333
word mulu16_sel::v1
word mulu16_sel::v1#0 1001.0
word mulu16_sel::v1#1 1001.0
word mulu16_sel::v1#2 2002.0
word mulu16_sel::v1#3 1001.0
word mulu16_sel::v1#4 1001.0
word mulu16_sel::v1#5 15006.0
word mulu16_sel::v2
word mulu16_sel::v2#0 2002.0
word mulu16_sel::v2#1 2002.0
word mulu16_sel::v2#3 2002.0
word mulu16_sel::v2#4 2002.0
word mulu16_sel::v2#5 7002.5
word rem16u
word rem16u#0 220.39999999999998
void render_sine()
signed word*~ render_sine::$1 202.0
word~ render_sine::$11 30.299999999999997
signed word*~ render_sine::$4 202.0
signed word render_sine::sin2_val
signed word render_sine::sin2_val#0 202.0
word render_sine::sin_idx
word render_sine::sin_idx#1 202.0
word render_sine::sin_idx#2 16.16
signed word render_sine::sin_val
signed word render_sine::sin_val#0 202.0
word render_sine::xpos
word render_sine::xpos#1 101.0
word render_sine::xpos#3 19.238095238095237
word render_sine::xpos#9 101.0
byte render_sine::ypos
byte render_sine::ypos#0 101.0
byte render_sine::ypos2
byte render_sine::ypos2#0 101.0
signed word sin16s(dword sin16s::x)
dword~ sin16s::$4 2002.0
byte sin16s::isUpper
byte sin16s::isUpper#2 30.333333333333332
signed word sin16s::return
signed word sin16s::return#0 202.0
signed word sin16s::return#1 701.0
signed word sin16s::return#5 2002.0
signed word sin16s::sinx
signed word sin16s::sinx#1 2002.0
word sin16s::usinx
word sin16s::usinx#0 166.83333333333334
word sin16s::usinx#1 500.5
dword sin16s::x
dword sin16s::x#0 1552.0
dword sin16s::x#1 2002.0
dword sin16s::x#2 2002.0
dword sin16s::x#4 2502.5
dword sin16s::x#6 3003.0
word sin16s::x1
word sin16s::x1#0 318.5
word sin16s::x2
word sin16s::x2#0 2002.0
word sin16s::x3
word sin16s::x3#0 500.5
word sin16s::x3_6
word sin16s::x3_6#0 2002.0
word sin16s::x4
word sin16s::x4#0 2002.0
word sin16s::x5
word sin16s::x5#0 2002.0
word sin16s::x5_128
word sin16s::x5_128#0 2002.0
void sin16s_gen2(signed word* sin16s_gen2::sintab , word sin16s_gen2::wavelength , signed word sin16s_gen2::min , signed word sin16s_gen2::max)
signed dword~ sin16s_gen2::$6 202.0
word~ sin16s_gen2::$8 101.0
signed word sin16s_gen2::ampl
word sin16s_gen2::i
word sin16s_gen2::i#1 202.0
word sin16s_gen2::i#2 23.307692307692307
signed word sin16s_gen2::max
signed word sin16s_gen2::min
signed word sin16s_gen2::offs
signed word* sin16s_gen2::sintab
signed word* sin16s_gen2::sintab#0 67.33333333333333
signed word* sin16s_gen2::sintab#2 27.545454545454547
dword sin16s_gen2::step
dword sin16s_gen2::step#0 7.466666666666667
word sin16s_gen2::wavelength
dword sin16s_gen2::x
dword sin16s_gen2::x#1 101.0
dword sin16s_gen2::x#2 25.25
byte wrap_y(signed word wrap_y::y)
byte wrap_y::return
byte wrap_y::return#0 202.0
byte wrap_y::return#1 202.0
byte wrap_y::return#2 300.75
signed word wrap_y::y
signed word wrap_y::y#0 202.0
signed word wrap_y::y#1 202.0
signed word wrap_y::y#2 200002.0
signed word wrap_y::y#3 200002.0
signed word wrap_y::y#4 200502.5
signed word wrap_y::y#6 200002.0
signed word wrap_y::y#9 1203.0

Initial phi equivalence classes
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
[ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
[ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
[ render_sine::sin_idx#2 render_sine::sin_idx#1 ]
[ render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ mul16s::m#4 mul16s::m#1 mul16s::m#0 ]
[ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ]
[ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
[ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
[ mulu16_sel::select#5 ]
[ mul16u::b#2 mul16u::b#1 ]
[ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Added variable bitmap_init::$7 to live range equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$4 to live range equivalence class [ bitmap_init::$4 ]
Added variable bitmap_init::$5 to live range equivalence class [ bitmap_init::$5 ]
Added variable bitmap_init::$6 to live range equivalence class [ bitmap_init::$6 ]
Added variable div32u16u::return#2 to live range equivalence class [ div32u16u::return#2 ]
Added variable sin16s_gen2::step#0 to live range equivalence class [ sin16s_gen2::step#0 ]
Added variable sin16s::return#0 to live range equivalence class [ sin16s::return#0 ]
Added variable mul16s::a#0 to live range equivalence class [ mul16s::a#0 ]
Added variable mul16s::return#2 to live range equivalence class [ mul16s::return#2 ]
Added variable sin16s_gen2::$6 to live range equivalence class [ sin16s_gen2::$6 ]
Added variable sin16s_gen2::$8 to live range equivalence class [ sin16s_gen2::$8 ]
Added variable render_sine::$11 to live range equivalence class [ render_sine::$11 ]
Added variable render_sine::$1 to live range equivalence class [ render_sine::$1 ]
Added variable render_sine::sin_val#0 to live range equivalence class [ render_sine::sin_val#0 ]
Added variable wrap_y::return#0 to live range equivalence class [ wrap_y::return#0 ]
Added variable render_sine::ypos#0 to live range equivalence class [ render_sine::ypos#0 ]
Added variable render_sine::$4 to live range equivalence class [ render_sine::$4 ]
Added variable render_sine::sin2_val#0 to live range equivalence class [ render_sine::sin2_val#0 ]
Added variable wrap_y::return#1 to live range equivalence class [ wrap_y::return#1 ]
Added variable render_sine::ypos2#0 to live range equivalence class [ render_sine::ypos2#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable divr16u::return#2 to live range equivalence class [ divr16u::return#2 ]
Added variable div32u16u::quotient_hi#0 to live range equivalence class [ div32u16u::quotient_hi#0 ]
Added variable divr16u::return#3 to live range equivalence class [ divr16u::return#3 ]
Added variable div32u16u::quotient_lo#0 to live range equivalence class [ div32u16u::quotient_lo#0 ]
Added variable div32u16u::return#0 to live range equivalence class [ div32u16u::return#0 ]
Added variable sin16s::$4 to live range equivalence class [ sin16s::$4 ]
Added variable sin16s::x1#0 to live range equivalence class [ sin16s::x1#0 ]
Added variable mulu16_sel::return#0 to live range equivalence class [ mulu16_sel::return#0 ]
Added variable sin16s::x2#0 to live range equivalence class [ sin16s::x2#0 ]
Added variable mulu16_sel::return#1 to live range equivalence class [ mulu16_sel::return#1 ]
Added variable sin16s::x3#0 to live range equivalence class [ sin16s::x3#0 ]
Added variable mulu16_sel::return#2 to live range equivalence class [ mulu16_sel::return#2 ]
Added variable sin16s::x3_6#0 to live range equivalence class [ sin16s::x3_6#0 ]
Added variable sin16s::usinx#0 to live range equivalence class [ sin16s::usinx#0 ]
Added variable mulu16_sel::return#10 to live range equivalence class [ mulu16_sel::return#10 ]
Added variable sin16s::x4#0 to live range equivalence class [ sin16s::x4#0 ]
Added variable mulu16_sel::return#11 to live range equivalence class [ mulu16_sel::return#11 ]
Added variable sin16s::x5#0 to live range equivalence class [ sin16s::x5#0 ]
Added variable sin16s::x5_128#0 to live range equivalence class [ sin16s::x5_128#0 ]
Added variable sin16s::usinx#1 to live range equivalence class [ sin16s::usinx#1 ]
Added variable mul16u::return#2 to live range equivalence class [ mul16u::return#2 ]
Added variable mul16s::$6 to live range equivalence class [ mul16s::$6 ]
Added variable mul16s::$11 to live range equivalence class [ mul16s::$11 ]
Added variable mul16s::return#0 to live range equivalence class [ mul16s::return#0 ]
Added variable wrap_y::return#2 to live range equivalence class [ wrap_y::return#2 ]
Added variable bitmap_plot::plotter#0 to live range equivalence class [ bitmap_plot::plotter#0 ]
Added variable bitmap_plot::$0 to live range equivalence class [ bitmap_plot::$0 ]
Added variable bitmap_plot::plotter#1 to live range equivalence class [ bitmap_plot::plotter#1 ]
Added variable bitmap_plot::$1 to live range equivalence class [ bitmap_plot::$1 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Added variable rem16u#0 to live range equivalence class [ rem16u#0 ]
Added variable mul16u::return#3 to live range equivalence class [ mul16u::return#3 ]
Added variable mulu16_sel::$0 to live range equivalence class [ mulu16_sel::$0 ]
Added variable mulu16_sel::$1 to live range equivalence class [ mulu16_sel::$1 ]
Added variable mulu16_sel::return#12 to live range equivalence class [ mulu16_sel::return#12 ]
Added variable mul16u::$1 to live range equivalence class [ mul16u::$1 ]
Complete equivalence classes
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
[ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
[ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
[ render_sine::sin_idx#2 render_sine::sin_idx#1 ]
[ render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ mul16s::m#4 mul16s::m#1 mul16s::m#0 ]
[ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ]
[ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
[ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
[ mulu16_sel::select#5 ]
[ mul16u::b#2 mul16u::b#1 ]
[ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ bitmap_init::$7 ]
[ bitmap_init::$4 ]
[ bitmap_init::$5 ]
[ bitmap_init::$6 ]
[ div32u16u::return#2 ]
[ sin16s_gen2::step#0 ]
[ sin16s::return#0 ]
[ mul16s::a#0 ]
[ mul16s::return#2 ]
[ sin16s_gen2::$6 ]
[ sin16s_gen2::$8 ]
[ render_sine::$11 ]
[ render_sine::$1 ]
[ render_sine::sin_val#0 ]
[ wrap_y::return#0 ]
[ render_sine::ypos#0 ]
[ render_sine::$4 ]
[ render_sine::sin2_val#0 ]
[ wrap_y::return#1 ]
[ render_sine::ypos2#0 ]
[ memset::end#0 ]
[ divr16u::return#2 ]
[ div32u16u::quotient_hi#0 ]
[ divr16u::return#3 ]
[ div32u16u::quotient_lo#0 ]
[ div32u16u::return#0 ]
[ sin16s::$4 ]
[ sin16s::x1#0 ]
[ mulu16_sel::return#0 ]
[ sin16s::x2#0 ]
[ mulu16_sel::return#1 ]
[ sin16s::x3#0 ]
[ mulu16_sel::return#2 ]
[ sin16s::x3_6#0 ]
[ sin16s::usinx#0 ]
[ mulu16_sel::return#10 ]
[ sin16s::x4#0 ]
[ mulu16_sel::return#11 ]
[ sin16s::x5#0 ]
[ sin16s::x5_128#0 ]
[ sin16s::usinx#1 ]
[ mul16u::return#2 ]
[ mul16s::$6 ]
[ mul16s::$11 ]
[ mul16s::return#0 ]
[ wrap_y::return#2 ]
[ bitmap_plot::plotter#0 ]
[ bitmap_plot::$0 ]
[ bitmap_plot::plotter#1 ]
[ bitmap_plot::$1 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#0 ]
[ mul16u::return#3 ]
[ mulu16_sel::$0 ]
[ mulu16_sel::$1 ]
[ mulu16_sel::return#12 ]
[ mul16u::$1 ]
Allocated zp[1]:2 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp[1]:3 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp[1]:4 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp[2]:5 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp[2]:7 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
Allocated zp[4]:9 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
Allocated zp[2]:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
Allocated zp[2]:15 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ]
Allocated zp[2]:17 [ render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 ]
Allocated zp[2]:19 [ memset::num#2 ]
Allocated zp[2]:21 [ memset::str#3 ]
Allocated zp[1]:23 [ memset::c#4 ]
Allocated zp[2]:24 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:26 [ sin16s::isUpper#2 ]
Allocated zp[4]:27 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated zp[2]:31 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
Allocated zp[4]:33 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ]
Allocated zp[2]:37 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ]
Allocated zp[1]:39 [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
Allocated zp[2]:40 [ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ]
Allocated zp[2]:42 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:44 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
Allocated zp[2]:46 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[1]:48 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
Allocated zp[2]:51 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
Allocated zp[1]:53 [ mulu16_sel::select#5 ]
Allocated zp[2]:54 [ mul16u::b#2 mul16u::b#1 ]
Allocated zp[2]:56 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
Allocated zp[4]:58 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp[4]:62 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated zp[1]:66 [ bitmap_init::$7 ]
Allocated zp[1]:67 [ bitmap_init::$4 ]
Allocated zp[1]:68 [ bitmap_init::$5 ]
Allocated zp[1]:69 [ bitmap_init::$6 ]
Allocated zp[4]:70 [ div32u16u::return#2 ]
Allocated zp[4]:74 [ sin16s_gen2::step#0 ]
Allocated zp[2]:78 [ sin16s::return#0 ]
Allocated zp[2]:80 [ mul16s::a#0 ]
Allocated zp[4]:82 [ mul16s::return#2 ]
Allocated zp[4]:86 [ sin16s_gen2::$6 ]
Allocated zp[2]:90 [ sin16s_gen2::$8 ]
Allocated zp[2]:92 [ render_sine::$11 ]
Allocated zp[2]:94 [ render_sine::$1 ]
Allocated zp[2]:96 [ render_sine::sin_val#0 ]
Allocated zp[1]:98 [ wrap_y::return#0 ]
Allocated zp[1]:99 [ render_sine::ypos#0 ]
Allocated zp[2]:100 [ render_sine::$4 ]
Allocated zp[2]:102 [ render_sine::sin2_val#0 ]
Allocated zp[1]:104 [ wrap_y::return#1 ]
Allocated zp[1]:105 [ render_sine::ypos2#0 ]
Allocated zp[2]:106 [ memset::end#0 ]
Allocated zp[2]:108 [ divr16u::return#2 ]
Allocated zp[2]:110 [ div32u16u::quotient_hi#0 ]
Allocated zp[2]:112 [ divr16u::return#3 ]
Allocated zp[2]:114 [ div32u16u::quotient_lo#0 ]
Allocated zp[4]:116 [ div32u16u::return#0 ]
Allocated zp[4]:120 [ sin16s::$4 ]
Allocated zp[2]:124 [ sin16s::x1#0 ]
Allocated zp[2]:126 [ mulu16_sel::return#0 ]
Allocated zp[2]:128 [ sin16s::x2#0 ]
Allocated zp[2]:130 [ mulu16_sel::return#1 ]
Allocated zp[2]:132 [ sin16s::x3#0 ]
Allocated zp[2]:134 [ mulu16_sel::return#2 ]
Allocated zp[2]:136 [ sin16s::x3_6#0 ]
Allocated zp[2]:138 [ sin16s::usinx#0 ]
Allocated zp[2]:140 [ mulu16_sel::return#10 ]
Allocated zp[2]:142 [ sin16s::x4#0 ]
Allocated zp[2]:144 [ mulu16_sel::return#11 ]
Allocated zp[2]:146 [ sin16s::x5#0 ]
Allocated zp[2]:148 [ sin16s::x5_128#0 ]
Allocated zp[2]:150 [ sin16s::usinx#1 ]
Allocated zp[4]:152 [ mul16u::return#2 ]
Allocated zp[2]:156 [ mul16s::$6 ]
Allocated zp[2]:158 [ mul16s::$11 ]
Allocated zp[4]:160 [ mul16s::return#0 ]
Allocated zp[1]:164 [ wrap_y::return#2 ]
Allocated zp[2]:165 [ bitmap_plot::plotter#0 ]
Allocated zp[2]:167 [ bitmap_plot::$0 ]
Allocated zp[2]:169 [ bitmap_plot::plotter#1 ]
Allocated zp[1]:171 [ bitmap_plot::$1 ]
Allocated zp[1]:172 [ divr16u::$1 ]
Allocated zp[1]:173 [ divr16u::$2 ]
Allocated zp[2]:174 [ rem16u#0 ]
Allocated zp[4]:176 [ mul16u::return#3 ]
Allocated zp[4]:180 [ mulu16_sel::$0 ]
Allocated zp[4]:184 [ mulu16_sel::$1 ]
Allocated zp[2]:188 [ mulu16_sel::return#12 ]
Allocated zp[1]:190 [ mul16u::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:67 [ bitmap_init::$4 ] has ALU potential.
Statement [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *PROCPORT = PROCPORT_RAM_IO [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *D016 = VICII_CSEL [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [9] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [35] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( bitmap_init:10 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [47] div32u16u::return#2 = div32u16u::return#0 [ div32u16u::return#2 ] ( sin16s_gen2:14 [ div32u16u::return#2 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [48] sin16s_gen2::step#0 = div32u16u::return#2 [ sin16s_gen2::step#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 ] { }  ) always clobbers reg byte a 
Statement [50] if(sin16s_gen2::i#2<SIN_SIZE) goto sin16s_gen2::@2 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [52] sin16s::x#0 = sin16s_gen2::x#2 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [54] sin16s::return#0 = sin16s::return#1 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [55] mul16s::a#0 = sin16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [57] mul16s::return#2 = mul16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#2 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#2 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [58] sin16s_gen2::$6 = mul16s::return#2 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$6 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$6 ] { }  ) always clobbers reg byte a 
Statement [59] sin16s_gen2::$8 = > sin16s_gen2::$6 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$8 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$8 ] { }  ) always clobbers reg byte a 
Statement [60] *sin16s_gen2::sintab#2 = (signed word)sin16s_gen2::$8 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [61] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_SIGNED_WORD [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [62] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [66] if(render_sine::sin_idx#2<SIN_SIZE) goto render_sine::@2 [ render_sine::sin_idx#2 render_sine::xpos#3 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 ] { }  ) always clobbers reg byte a 
Statement [68] render_sine::$11 = render_sine::sin_idx#2 << 1 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [69] render_sine::$1 = sin + render_sine::$11 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::$1 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::$1 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [70] render_sine::sin_val#0 = *render_sine::$1 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::sin_val#0 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::sin_val#0 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [71] wrap_y::y#0 = render_sine::sin_val#0 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#0 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#0 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [75] bitmap_plot::x#0 = render_sine::xpos#3 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::ypos#0 bitmap_plot::x#0 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::ypos#0 bitmap_plot::x#0 ] { { bitmap_plot::y#0 = bitmap_plot::y#2 render_sine::ypos#0 } { bitmap_plot::x#0 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:99 [ render_sine::ypos#0 ]
Statement [78] render_sine::$4 = sin2 + render_sine::$11 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$4 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$4 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [79] render_sine::sin2_val#0 = *render_sine::$4 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin2_val#0 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin2_val#0 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [80] wrap_y::y#1 = render_sine::sin2_val#0 + $a [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#1 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#1 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [84] bitmap_plot::x#1 = render_sine::xpos#3 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos2#0 bitmap_plot::x#1 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos2#0 bitmap_plot::x#1 ] { { bitmap_plot::y#1 = bitmap_plot::y#2 render_sine::ypos2#0 } { bitmap_plot::x#1 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:105 [ render_sine::ypos2#0 ]
Statement [88] if(render_sine::xpos#1!=$140) goto render_sine::@8 [ render_sine::sin_idx#2 render_sine::xpos#1 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#1 ] { }  ) always clobbers reg byte a 
Statement [93] if(memset::num#2<=0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( bitmap_clear:12::memset:41 [ memset::num#2 memset::str#3 memset::c#4 ] { }  bitmap_clear:12::memset:43 [ memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ memset::c#4 ]
Statement [94] memset::end#0 = (byte*)memset::str#3 + memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( bitmap_clear:12::memset:41 [ memset::str#3 memset::c#4 memset::end#0 ] { }  bitmap_clear:12::memset:43 [ memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [95] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( bitmap_clear:12::memset:41 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  bitmap_clear:12::memset:43 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [97] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:12::memset:41 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:12::memset:43 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [99] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:12::memset:41 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:12::memset:43 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:23 [ memset::c#4 ]
Statement [103] divr16u::return#2 = divr16u::return#0 [ divr16u::return#2 rem16u#0 ] ( sin16s_gen2:14::div32u16u:46 [ divr16u::return#2 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [104] div32u16u::quotient_hi#0 = divr16u::return#2 [ div32u16u::quotient_hi#0 rem16u#0 ] ( sin16s_gen2:14::div32u16u:46 [ div32u16u::quotient_hi#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [105] divr16u::rem#4 = rem16u#0 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ( sin16s_gen2:14::div32u16u:46 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [107] divr16u::return#3 = divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( sin16s_gen2:14::div32u16u:46 [ div32u16u::quotient_hi#0 divr16u::return#3 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [108] div32u16u::quotient_lo#0 = divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( sin16s_gen2:14::div32u16u:46 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [109] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( sin16s_gen2:14::div32u16u:46 [ div32u16u::return#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [111] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 [ sin16s::x#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [112] sin16s::x#1 = sin16s::x#0 - PI_u4f28 [ sin16s::x#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [114] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#4 sin16s::isUpper#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:26 [ sin16s::isUpper#2 ]
Statement [115] sin16s::x#2 = PI_u4f28 - sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [117] sin16s::$4 = sin16s::x#6 << 3 [ sin16s::isUpper#2 sin16s::$4 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::$4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [118] sin16s::x1#0 = > sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [119] mulu16_sel::v1#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [120] mulu16_sel::v2#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [122] mulu16_sel::return#0 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [123] sin16s::x2#0 = mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [124] mulu16_sel::v1#1 = sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [125] mulu16_sel::v2#1 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [127] mulu16_sel::return#1 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [128] sin16s::x3#0 = mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [129] mulu16_sel::v1#2 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [131] mulu16_sel::return#2 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [132] sin16s::x3_6#0 = mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [133] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [134] mulu16_sel::v1#3 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [135] mulu16_sel::v2#3 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [137] mulu16_sel::return#10 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [138] sin16s::x4#0 = mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [139] mulu16_sel::v1#4 = sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [140] mulu16_sel::v2#4 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [142] mulu16_sel::return#11 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [143] sin16s::x5#0 = mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [144] sin16s::x5_128#0 = sin16s::x5#0 >> 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [145] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [147] sin16s::sinx#1 = - (signed word)sin16s::usinx#1 [ sin16s::sinx#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::sinx#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [150] sin16s::return#5 = (signed word)sin16s::usinx#1 [ sin16s::return#5 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [151] mul16u::a#1 = (word)mul16s::a#0 [ mul16s::a#0 mul16u::a#1 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::a#1 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [153] mul16u::return#2 = mul16u::res#2 [ mul16s::a#0 mul16u::return#2 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::return#2 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [154] mul16s::m#0 = mul16u::return#2 [ mul16s::a#0 mul16s::m#0 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16s::m#0 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [155] if(mul16s::a#0>=0) goto mul16s::@1 [ mul16s::m#0 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#0 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [156] mul16s::$6 = > mul16s::m#0 [ mul16s::m#0 mul16s::$6 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#0 mul16s::$6 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [157] mul16s::$11 = mul16s::$6 - (word)sin16s_gen2::ampl#0 [ mul16s::m#0 mul16s::$11 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#0 mul16s::$11 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [158] mul16s::m#1 = mul16s::m#0 hi= mul16s::$11 [ mul16s::m#1 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#1 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [160] mul16s::return#0 = (signed dword)mul16s::m#4 [ mul16s::return#0 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#0 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [164] if(wrap_y::y#4>=$c8) goto wrap_y::@2 [ wrap_y::y#4 ] ( render_sine:16::wrap_y:72 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#4 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  render_sine:16::wrap_y:81 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#4 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [166] if(wrap_y::y#6<0) goto wrap_y::@4 [ wrap_y::y#6 ] ( render_sine:16::wrap_y:72 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#6 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  render_sine:16::wrap_y:81 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#6 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [167] wrap_y::return#2 = (byte)wrap_y::y#6 [ wrap_y::return#2 ] ( render_sine:16::wrap_y:72 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::return#2 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  render_sine:16::wrap_y:81 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::return#2 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [169] wrap_y::y#3 = wrap_y::y#6 + $c8 [ wrap_y::y#3 ] ( render_sine:16::wrap_y:72 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#3 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  render_sine:16::wrap_y:81 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#3 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [170] wrap_y::y#2 = wrap_y::y#4 - $c8 [ wrap_y::y#2 ] ( render_sine:16::wrap_y:72 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#2 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  render_sine:16::wrap_y:81 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#2 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [172] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#2] w= bitmap_plot_ylo[bitmap_plot::y#2] [ bitmap_plot::x#2 bitmap_plot::plotter#0 ] ( render_sine:16::bitmap_plot:77 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 bitmap_plot::x#2 bitmap_plot::plotter#0 ] { { bitmap_plot::y#0 = bitmap_plot::y#2 render_sine::ypos#0 } { bitmap_plot::x#0 = bitmap_plot::x#2 render_sine::xpos#3 } }  render_sine:16::bitmap_plot:86 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::plotter#0 ] { { bitmap_plot::y#1 = bitmap_plot::y#2 render_sine::ypos2#0 } { bitmap_plot::x#1 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a 
Statement [173] bitmap_plot::$0 = bitmap_plot::x#2 & $fff8 [ bitmap_plot::x#2 bitmap_plot::plotter#0 bitmap_plot::$0 ] ( render_sine:16::bitmap_plot:77 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 bitmap_plot::x#2 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#0 = bitmap_plot::y#2 render_sine::ypos#0 } { bitmap_plot::x#0 = bitmap_plot::x#2 render_sine::xpos#3 } }  render_sine:16::bitmap_plot:86 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#1 = bitmap_plot::y#2 render_sine::ypos2#0 } { bitmap_plot::x#1 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a 
Statement [174] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0 [ bitmap_plot::x#2 bitmap_plot::plotter#1 ] ( render_sine:16::bitmap_plot:77 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 bitmap_plot::x#2 bitmap_plot::plotter#1 ] { { bitmap_plot::y#0 = bitmap_plot::y#2 render_sine::ypos#0 } { bitmap_plot::x#0 = bitmap_plot::x#2 render_sine::xpos#3 } }  render_sine:16::bitmap_plot:86 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::plotter#1 ] { { bitmap_plot::y#1 = bitmap_plot::y#2 render_sine::ypos2#0 } { bitmap_plot::x#1 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a 
Statement [176] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1] [ ] ( render_sine:16::bitmap_plot:77 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 ] { { bitmap_plot::y#0 = bitmap_plot::y#2 render_sine::ypos#0 } { bitmap_plot::x#0 = bitmap_plot::x#2 render_sine::xpos#3 } }  render_sine:16::bitmap_plot:86 [ render_sine::sin_idx#2 render_sine::xpos#3 ] { { bitmap_plot::y#1 = bitmap_plot::y#2 render_sine::ypos2#0 } { bitmap_plot::x#1 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a reg byte y 
Statement [184] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( sin16s_gen2:14::div32u16u:46::divr16u:102 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen2:14::div32u16u:46::divr16u:106 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:48 [ divr16u::i#2 divr16u::i#1 ]
Statement [188] if(divr16u::rem#6<SIN_SIZE) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( sin16s_gen2:14::div32u16u:46::divr16u:102 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen2:14::div32u16u:46::divr16u:106 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [190] divr16u::rem#2 = divr16u::rem#6 - SIN_SIZE [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( sin16s_gen2:14::div32u16u:46::divr16u:102 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen2:14::div32u16u:46::divr16u:106 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [194] rem16u#0 = divr16u::rem#11 [ divr16u::return#0 rem16u#0 ] ( sin16s_gen2:14::div32u16u:46::divr16u:102 [ divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen2:14::div32u16u:46::divr16u:106 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [197] mul16u::a#2 = mulu16_sel::v1#5 [ mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:53 [ mulu16_sel::select#5 ]
Statement [198] mul16u::b#1 = mulu16_sel::v2#5 [ mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [200] mul16u::return#3 = mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#3 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [201] mulu16_sel::$0 = mul16u::return#3 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [202] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 [ mulu16_sel::$1 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [203] mulu16_sel::return#12 = > mulu16_sel::$1 [ mulu16_sel::return#12 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [206] mul16u::mb#0 = (dword)mul16u::b#2 [ mul16u::a#6 mul16u::mb#0 ] ( sin16s_gen2:14::mul16s:56::mul16u:152 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::a#6 mul16u::mb#0 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:121::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [208] if(mul16u::a#3!=0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ( sin16s_gen2:14::mul16s:56::mul16u:152 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:121::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [210] mul16u::$1 = mul16u::a#3 & 1 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ( sin16s_gen2:14::mul16s:56::mul16u:152 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:121::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [212] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 [ mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ( sin16s_gen2:14::mul16s:56::mul16u:152 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:121::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *PROCPORT = PROCPORT_RAM_IO [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *D016 = VICII_CSEL [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [9] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [28] bitmap_init::$7 = bitmap_init::y#2 & 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( bitmap_init:10 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] { }  ) always clobbers reg byte a 
Statement [35] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( bitmap_init:10 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Statement [47] div32u16u::return#2 = div32u16u::return#0 [ div32u16u::return#2 ] ( sin16s_gen2:14 [ div32u16u::return#2 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [48] sin16s_gen2::step#0 = div32u16u::return#2 [ sin16s_gen2::step#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 ] { }  ) always clobbers reg byte a 
Statement [50] if(sin16s_gen2::i#2<SIN_SIZE) goto sin16s_gen2::@2 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [52] sin16s::x#0 = sin16s_gen2::x#2 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [54] sin16s::return#0 = sin16s::return#1 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [55] mul16s::a#0 = sin16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [57] mul16s::return#2 = mul16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#2 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#2 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [58] sin16s_gen2::$6 = mul16s::return#2 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$6 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$6 ] { }  ) always clobbers reg byte a 
Statement [59] sin16s_gen2::$8 = > sin16s_gen2::$6 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$8 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$8 ] { }  ) always clobbers reg byte a 
Statement [60] *sin16s_gen2::sintab#2 = (signed word)sin16s_gen2::$8 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [61] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_SIGNED_WORD [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [62] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ( sin16s_gen2:14 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [66] if(render_sine::sin_idx#2<SIN_SIZE) goto render_sine::@2 [ render_sine::sin_idx#2 render_sine::xpos#3 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 ] { }  ) always clobbers reg byte a 
Statement [68] render_sine::$11 = render_sine::sin_idx#2 << 1 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [69] render_sine::$1 = sin + render_sine::$11 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::$1 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::$1 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [70] render_sine::sin_val#0 = *render_sine::$1 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::sin_val#0 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::sin_val#0 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [71] wrap_y::y#0 = render_sine::sin_val#0 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#0 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#0 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [75] bitmap_plot::x#0 = render_sine::xpos#3 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::ypos#0 bitmap_plot::x#0 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 render_sine::ypos#0 bitmap_plot::x#0 ] { { bitmap_plot::y#0 = bitmap_plot::y#2 render_sine::ypos#0 } { bitmap_plot::x#0 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a 
Statement [78] render_sine::$4 = sin2 + render_sine::$11 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$4 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$4 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [79] render_sine::sin2_val#0 = *render_sine::$4 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin2_val#0 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin2_val#0 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [80] wrap_y::y#1 = render_sine::sin2_val#0 + $a [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#1 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#1 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [84] bitmap_plot::x#1 = render_sine::xpos#3 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos2#0 bitmap_plot::x#1 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos2#0 bitmap_plot::x#1 ] { { bitmap_plot::y#1 = bitmap_plot::y#2 render_sine::ypos2#0 } { bitmap_plot::x#1 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a 
Statement [88] if(render_sine::xpos#1!=$140) goto render_sine::@8 [ render_sine::sin_idx#2 render_sine::xpos#1 ] ( render_sine:16 [ render_sine::sin_idx#2 render_sine::xpos#1 ] { }  ) always clobbers reg byte a 
Statement [93] if(memset::num#2<=0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( bitmap_clear:12::memset:41 [ memset::num#2 memset::str#3 memset::c#4 ] { }  bitmap_clear:12::memset:43 [ memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Statement [94] memset::end#0 = (byte*)memset::str#3 + memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( bitmap_clear:12::memset:41 [ memset::str#3 memset::c#4 memset::end#0 ] { }  bitmap_clear:12::memset:43 [ memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [95] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( bitmap_clear:12::memset:41 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  bitmap_clear:12::memset:43 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [97] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:12::memset:41 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:12::memset:43 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [99] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:12::memset:41 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:12::memset:43 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [103] divr16u::return#2 = divr16u::return#0 [ divr16u::return#2 rem16u#0 ] ( sin16s_gen2:14::div32u16u:46 [ divr16u::return#2 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [104] div32u16u::quotient_hi#0 = divr16u::return#2 [ div32u16u::quotient_hi#0 rem16u#0 ] ( sin16s_gen2:14::div32u16u:46 [ div32u16u::quotient_hi#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [105] divr16u::rem#4 = rem16u#0 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ( sin16s_gen2:14::div32u16u:46 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [107] divr16u::return#3 = divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( sin16s_gen2:14::div32u16u:46 [ div32u16u::quotient_hi#0 divr16u::return#3 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [108] div32u16u::quotient_lo#0 = divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( sin16s_gen2:14::div32u16u:46 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [109] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( sin16s_gen2:14::div32u16u:46 [ div32u16u::return#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [111] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 [ sin16s::x#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [112] sin16s::x#1 = sin16s::x#0 - PI_u4f28 [ sin16s::x#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [114] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#4 sin16s::isUpper#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [115] sin16s::x#2 = PI_u4f28 - sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [117] sin16s::$4 = sin16s::x#6 << 3 [ sin16s::isUpper#2 sin16s::$4 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::$4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [118] sin16s::x1#0 = > sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [119] mulu16_sel::v1#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [120] mulu16_sel::v2#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [122] mulu16_sel::return#0 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [123] sin16s::x2#0 = mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [124] mulu16_sel::v1#1 = sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [125] mulu16_sel::v2#1 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [127] mulu16_sel::return#1 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [128] sin16s::x3#0 = mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [129] mulu16_sel::v1#2 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [131] mulu16_sel::return#2 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [132] sin16s::x3_6#0 = mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [133] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [134] mulu16_sel::v1#3 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [135] mulu16_sel::v2#3 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [137] mulu16_sel::return#10 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [138] sin16s::x4#0 = mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [139] mulu16_sel::v1#4 = sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [140] mulu16_sel::v2#4 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [142] mulu16_sel::return#11 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [143] sin16s::x5#0 = mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [144] sin16s::x5_128#0 = sin16s::x5#0 >> 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [145] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [147] sin16s::sinx#1 = - (signed word)sin16s::usinx#1 [ sin16s::sinx#1 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::sinx#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [150] sin16s::return#5 = (signed word)sin16s::usinx#1 [ sin16s::return#5 ] ( sin16s_gen2:14::sin16s:53 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [151] mul16u::a#1 = (word)mul16s::a#0 [ mul16s::a#0 mul16u::a#1 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::a#1 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [153] mul16u::return#2 = mul16u::res#2 [ mul16s::a#0 mul16u::return#2 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::return#2 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [154] mul16s::m#0 = mul16u::return#2 [ mul16s::a#0 mul16s::m#0 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16s::m#0 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [155] if(mul16s::a#0>=0) goto mul16s::@1 [ mul16s::m#0 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#0 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [156] mul16s::$6 = > mul16s::m#0 [ mul16s::m#0 mul16s::$6 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#0 mul16s::$6 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [157] mul16s::$11 = mul16s::$6 - (word)sin16s_gen2::ampl#0 [ mul16s::m#0 mul16s::$11 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#0 mul16s::$11 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [158] mul16s::m#1 = mul16s::m#0 hi= mul16s::$11 [ mul16s::m#1 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#1 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [160] mul16s::return#0 = (signed dword)mul16s::m#4 [ mul16s::return#0 ] ( sin16s_gen2:14::mul16s:56 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#0 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [164] if(wrap_y::y#4>=$c8) goto wrap_y::@2 [ wrap_y::y#4 ] ( render_sine:16::wrap_y:72 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#4 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  render_sine:16::wrap_y:81 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#4 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [166] if(wrap_y::y#6<0) goto wrap_y::@4 [ wrap_y::y#6 ] ( render_sine:16::wrap_y:72 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#6 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  render_sine:16::wrap_y:81 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#6 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [167] wrap_y::return#2 = (byte)wrap_y::y#6 [ wrap_y::return#2 ] ( render_sine:16::wrap_y:72 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::return#2 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  render_sine:16::wrap_y:81 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::return#2 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [169] wrap_y::y#3 = wrap_y::y#6 + $c8 [ wrap_y::y#3 ] ( render_sine:16::wrap_y:72 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#3 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  render_sine:16::wrap_y:81 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#3 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [170] wrap_y::y#2 = wrap_y::y#4 - $c8 [ wrap_y::y#2 ] ( render_sine:16::wrap_y:72 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 wrap_y::y#2 ] { { wrap_y::y#0 = wrap_y::y#9 render_sine::sin_val#0 } { wrap_y::return#0 = wrap_y::return#2 } }  render_sine:16::wrap_y:81 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#2 ] { { wrap_y::y#1 = wrap_y::y#9 } { wrap_y::return#1 = wrap_y::return#2 } }  ) always clobbers reg byte a 
Statement [172] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#2] w= bitmap_plot_ylo[bitmap_plot::y#2] [ bitmap_plot::x#2 bitmap_plot::plotter#0 ] ( render_sine:16::bitmap_plot:77 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 bitmap_plot::x#2 bitmap_plot::plotter#0 ] { { bitmap_plot::y#0 = bitmap_plot::y#2 render_sine::ypos#0 } { bitmap_plot::x#0 = bitmap_plot::x#2 render_sine::xpos#3 } }  render_sine:16::bitmap_plot:86 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::plotter#0 ] { { bitmap_plot::y#1 = bitmap_plot::y#2 render_sine::ypos2#0 } { bitmap_plot::x#1 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a 
Statement [173] bitmap_plot::$0 = bitmap_plot::x#2 & $fff8 [ bitmap_plot::x#2 bitmap_plot::plotter#0 bitmap_plot::$0 ] ( render_sine:16::bitmap_plot:77 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 bitmap_plot::x#2 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#0 = bitmap_plot::y#2 render_sine::ypos#0 } { bitmap_plot::x#0 = bitmap_plot::x#2 render_sine::xpos#3 } }  render_sine:16::bitmap_plot:86 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { bitmap_plot::y#1 = bitmap_plot::y#2 render_sine::ypos2#0 } { bitmap_plot::x#1 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a 
Statement [174] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0 [ bitmap_plot::x#2 bitmap_plot::plotter#1 ] ( render_sine:16::bitmap_plot:77 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 bitmap_plot::x#2 bitmap_plot::plotter#1 ] { { bitmap_plot::y#0 = bitmap_plot::y#2 render_sine::ypos#0 } { bitmap_plot::x#0 = bitmap_plot::x#2 render_sine::xpos#3 } }  render_sine:16::bitmap_plot:86 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::plotter#1 ] { { bitmap_plot::y#1 = bitmap_plot::y#2 render_sine::ypos2#0 } { bitmap_plot::x#1 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a 
Statement [176] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1] [ ] ( render_sine:16::bitmap_plot:77 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$11 ] { { bitmap_plot::y#0 = bitmap_plot::y#2 render_sine::ypos#0 } { bitmap_plot::x#0 = bitmap_plot::x#2 render_sine::xpos#3 } }  render_sine:16::bitmap_plot:86 [ render_sine::sin_idx#2 render_sine::xpos#3 ] { { bitmap_plot::y#1 = bitmap_plot::y#2 render_sine::ypos2#0 } { bitmap_plot::x#1 = bitmap_plot::x#2 render_sine::xpos#3 } }  ) always clobbers reg byte a reg byte y 
Statement [184] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( sin16s_gen2:14::div32u16u:46::divr16u:102 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen2:14::div32u16u:46::divr16u:106 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [188] if(divr16u::rem#6<SIN_SIZE) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( sin16s_gen2:14::div32u16u:46::divr16u:102 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen2:14::div32u16u:46::divr16u:106 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [190] divr16u::rem#2 = divr16u::rem#6 - SIN_SIZE [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( sin16s_gen2:14::div32u16u:46::divr16u:102 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen2:14::div32u16u:46::divr16u:106 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [194] rem16u#0 = divr16u::rem#11 [ divr16u::return#0 rem16u#0 ] ( sin16s_gen2:14::div32u16u:46::divr16u:102 [ divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen2:14::div32u16u:46::divr16u:106 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [197] mul16u::a#2 = mulu16_sel::v1#5 [ mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [198] mul16u::b#1 = mulu16_sel::v2#5 [ mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::b#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [200] mul16u::return#3 = mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#3 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [201] mulu16_sel::$0 = mul16u::return#3 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [202] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 [ mulu16_sel::$1 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [203] mulu16_sel::return#12 = > mulu16_sel::$1 [ mulu16_sel::return#12 ] ( sin16s_gen2:14::sin16s:53::mulu16_sel:121 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [206] mul16u::mb#0 = (dword)mul16u::b#2 [ mul16u::a#6 mul16u::mb#0 ] ( sin16s_gen2:14::mul16s:56::mul16u:152 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::a#6 mul16u::mb#0 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:121::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [208] if(mul16u::a#3!=0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ( sin16s_gen2:14::mul16s:56::mul16u:152 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:121::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [210] mul16u::$1 = mul16u::a#3 & 1 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ( sin16s_gen2:14::mul16s:56::mul16u:152 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:121::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [212] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 [ mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ( sin16s_gen2:14::mul16s:56::mul16u:152 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { mul16s::a#0 = sin16s::return#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::a#1 = mul16u::a#6 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:121::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#2 = mul16u::a#6 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:126::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:130::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:136::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#3 = mul16u::res#2 } }  sin16s_gen2:14::sin16s:53::mulu16_sel:141::mul16u:199 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#1 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#2 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] : zp[2]:7 , 
Potential registers zp[4]:9 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] : zp[4]:9 , 
Potential registers zp[2]:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ memset::num#2 ] : zp[2]:19 , 
Potential registers zp[2]:21 [ memset::str#3 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ memset::c#4 ] : zp[1]:23 , reg byte x , 
Potential registers zp[2]:24 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:24 , 
Potential registers zp[1]:26 [ sin16s::isUpper#2 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[4]:27 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] : zp[4]:27 , 
Potential registers zp[2]:31 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] : zp[2]:31 , 
Potential registers zp[4]:33 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] : zp[4]:33 , 
Potential registers zp[2]:37 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ] : zp[2]:37 , 
Potential registers zp[1]:39 [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ] : zp[1]:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:40 [ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:46 , 
Potential registers zp[1]:48 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:48 , reg byte x , reg byte y , 
Potential registers zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] : zp[2]:49 , 
Potential registers zp[2]:51 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] : zp[2]:51 , 
Potential registers zp[1]:53 [ mulu16_sel::select#5 ] : zp[1]:53 , reg byte x , reg byte y , 
Potential registers zp[2]:54 [ mul16u::b#2 mul16u::b#1 ] : zp[2]:54 , 
Potential registers zp[2]:56 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ] : zp[2]:56 , 
Potential registers zp[4]:58 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp[4]:58 , 
Potential registers zp[4]:62 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] : zp[4]:62 , 
Potential registers zp[1]:66 [ bitmap_init::$7 ] : zp[1]:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ bitmap_init::$4 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:68 [ bitmap_init::$5 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ bitmap_init::$6 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:70 [ div32u16u::return#2 ] : zp[4]:70 , 
Potential registers zp[4]:74 [ sin16s_gen2::step#0 ] : zp[4]:74 , 
Potential registers zp[2]:78 [ sin16s::return#0 ] : zp[2]:78 , 
Potential registers zp[2]:80 [ mul16s::a#0 ] : zp[2]:80 , 
Potential registers zp[4]:82 [ mul16s::return#2 ] : zp[4]:82 , 
Potential registers zp[4]:86 [ sin16s_gen2::$6 ] : zp[4]:86 , 
Potential registers zp[2]:90 [ sin16s_gen2::$8 ] : zp[2]:90 , 
Potential registers zp[2]:92 [ render_sine::$11 ] : zp[2]:92 , 
Potential registers zp[2]:94 [ render_sine::$1 ] : zp[2]:94 , 
Potential registers zp[2]:96 [ render_sine::sin_val#0 ] : zp[2]:96 , 
Potential registers zp[1]:98 [ wrap_y::return#0 ] : zp[1]:98 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:99 [ render_sine::ypos#0 ] : zp[1]:99 , reg byte x , reg byte y , 
Potential registers zp[2]:100 [ render_sine::$4 ] : zp[2]:100 , 
Potential registers zp[2]:102 [ render_sine::sin2_val#0 ] : zp[2]:102 , 
Potential registers zp[1]:104 [ wrap_y::return#1 ] : zp[1]:104 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:105 [ render_sine::ypos2#0 ] : zp[1]:105 , reg byte x , reg byte y , 
Potential registers zp[2]:106 [ memset::end#0 ] : zp[2]:106 , 
Potential registers zp[2]:108 [ divr16u::return#2 ] : zp[2]:108 , 
Potential registers zp[2]:110 [ div32u16u::quotient_hi#0 ] : zp[2]:110 , 
Potential registers zp[2]:112 [ divr16u::return#3 ] : zp[2]:112 , 
Potential registers zp[2]:114 [ div32u16u::quotient_lo#0 ] : zp[2]:114 , 
Potential registers zp[4]:116 [ div32u16u::return#0 ] : zp[4]:116 , 
Potential registers zp[4]:120 [ sin16s::$4 ] : zp[4]:120 , 
Potential registers zp[2]:124 [ sin16s::x1#0 ] : zp[2]:124 , 
Potential registers zp[2]:126 [ mulu16_sel::return#0 ] : zp[2]:126 , 
Potential registers zp[2]:128 [ sin16s::x2#0 ] : zp[2]:128 , 
Potential registers zp[2]:130 [ mulu16_sel::return#1 ] : zp[2]:130 , 
Potential registers zp[2]:132 [ sin16s::x3#0 ] : zp[2]:132 , 
Potential registers zp[2]:134 [ mulu16_sel::return#2 ] : zp[2]:134 , 
Potential registers zp[2]:136 [ sin16s::x3_6#0 ] : zp[2]:136 , 
Potential registers zp[2]:138 [ sin16s::usinx#0 ] : zp[2]:138 , 
Potential registers zp[2]:140 [ mulu16_sel::return#10 ] : zp[2]:140 , 
Potential registers zp[2]:142 [ sin16s::x4#0 ] : zp[2]:142 , 
Potential registers zp[2]:144 [ mulu16_sel::return#11 ] : zp[2]:144 , 
Potential registers zp[2]:146 [ sin16s::x5#0 ] : zp[2]:146 , 
Potential registers zp[2]:148 [ sin16s::x5_128#0 ] : zp[2]:148 , 
Potential registers zp[2]:150 [ sin16s::usinx#1 ] : zp[2]:150 , 
Potential registers zp[4]:152 [ mul16u::return#2 ] : zp[4]:152 , 
Potential registers zp[2]:156 [ mul16s::$6 ] : zp[2]:156 , 
Potential registers zp[2]:158 [ mul16s::$11 ] : zp[2]:158 , 
Potential registers zp[4]:160 [ mul16s::return#0 ] : zp[4]:160 , 
Potential registers zp[1]:164 [ wrap_y::return#2 ] : zp[1]:164 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:165 [ bitmap_plot::plotter#0 ] : zp[2]:165 , 
Potential registers zp[2]:167 [ bitmap_plot::$0 ] : zp[2]:167 , 
Potential registers zp[2]:169 [ bitmap_plot::plotter#1 ] : zp[2]:169 , 
Potential registers zp[1]:171 [ bitmap_plot::$1 ] : zp[1]:171 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:172 [ divr16u::$1 ] : zp[1]:172 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:173 [ divr16u::$2 ] : zp[1]:173 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:174 [ rem16u#0 ] : zp[2]:174 , 
Potential registers zp[4]:176 [ mul16u::return#3 ] : zp[4]:176 , 
Potential registers zp[4]:180 [ mulu16_sel::$0 ] : zp[4]:180 , 
Potential registers zp[4]:184 [ mulu16_sel::$1 ] : zp[4]:184 , 
Potential registers zp[2]:188 [ mulu16_sel::return#12 ] : zp[2]:188 , 
Potential registers zp[1]:190 [ mul16u::$1 ] : zp[1]:190 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul16u] 34,287,289.43: zp[4]:58 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 24,500,004.57: zp[4]:62 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] 20,000,002: zp[1]:190 [ mul16u::$1 ] 16,750,839.67: zp[2]:56 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ] 30,003: zp[2]:54 [ mul16u::b#2 mul16u::b#1 ] 20,002: zp[4]:176 [ mul16u::return#3 ] 2,002: zp[4]:152 [ mul16u::return#2 ] 
Uplift Scope [wrap_y] 802,115.5: zp[2]:37 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ] 300.75: zp[1]:164 [ wrap_y::return#2 ] 202: zp[1]:98 [ wrap_y::return#0 ] 202: zp[1]:104 [ wrap_y::return#1 ] 
Uplift Scope [divr16u] 90,147.42: zp[2]:42 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 31,817.75: zp[2]:46 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 20,002: zp[1]:172 [ divr16u::$1 ] 20,002: zp[1]:173 [ divr16u::$2 ] 16,540.12: zp[1]:48 [ divr16u::i#2 divr16u::i#1 ] 7,930.39: zp[2]:44 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] 202: zp[2]:108 [ divr16u::return#2 ] 202: zp[2]:112 [ divr16u::return#3 ] 
Uplift Scope [mulu16_sel] 21,012: zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] 20,002: zp[4]:180 [ mulu16_sel::$0 ] 20,002: zp[4]:184 [ mulu16_sel::$1 ] 15,010.5: zp[2]:51 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] 2,143.71: zp[2]:188 [ mulu16_sel::return#12 ] 2,002: zp[2]:126 [ mulu16_sel::return#0 ] 2,002: zp[2]:130 [ mulu16_sel::return#1 ] 2,002: zp[2]:134 [ mulu16_sel::return#2 ] 2,002: zp[2]:140 [ mulu16_sel::return#10 ] 2,002: zp[2]:144 [ mulu16_sel::return#11 ] 1,666.83: zp[1]:53 [ mulu16_sel::select#5 ] 
Uplift Scope [sin16s] 11,061.5: zp[4]:27 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] 4,705: zp[2]:31 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] 2,002: zp[4]:120 [ sin16s::$4 ] 2,002: zp[2]:128 [ sin16s::x2#0 ] 2,002: zp[2]:136 [ sin16s::x3_6#0 ] 2,002: zp[2]:142 [ sin16s::x4#0 ] 2,002: zp[2]:146 [ sin16s::x5#0 ] 2,002: zp[2]:148 [ sin16s::x5_128#0 ] 500.5: zp[2]:132 [ sin16s::x3#0 ] 500.5: zp[2]:150 [ sin16s::usinx#1 ] 318.5: zp[2]:124 [ sin16s::x1#0 ] 202: zp[2]:78 [ sin16s::return#0 ] 166.83: zp[2]:138 [ sin16s::usinx#0 ] 30.33: zp[1]:26 [ sin16s::isUpper#2 ] 
Uplift Scope [mul16s] 5,005: zp[4]:33 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] 2,002: zp[2]:156 [ mul16s::$6 ] 2,002: zp[2]:158 [ mul16s::$11 ] 367.33: zp[4]:160 [ mul16s::return#0 ] 220.4: zp[2]:80 [ mul16s::a#0 ] 202: zp[4]:82 [ mul16s::return#2 ] 
Uplift Scope [bitmap_plot] 2,608: zp[1]:39 [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ] 2,002: zp[2]:167 [ bitmap_plot::$0 ] 2,002: zp[1]:171 [ bitmap_plot::$1 ] 1,501.5: zp[2]:169 [ bitmap_plot::plotter#1 ] 753: zp[2]:40 [ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] 500.5: zp[2]:165 [ bitmap_plot::plotter#0 ] 
Uplift Scope [memset] 3,572.33: zp[2]:24 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 183.67: zp[2]:106 [ memset::end#0 ] 125.12: zp[1]:23 [ memset::c#4 ] 101: zp[2]:19 [ memset::num#2 ] 0: zp[2]:21 [ memset::str#3 ] 
Uplift Scope [bitmap_init] 366.12: zp[2]:5 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 319.83: zp[1]:2 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 202: zp[1]:3 [ bitmap_init::x#2 bitmap_init::x#1 ] 202: zp[1]:4 [ bitmap_init::y#2 bitmap_init::y#1 ] 202: zp[1]:67 [ bitmap_init::$4 ] 202: zp[1]:68 [ bitmap_init::$5 ] 202: zp[1]:69 [ bitmap_init::$6 ] 50.5: zp[1]:66 [ bitmap_init::$7 ] 
Uplift Scope [render_sine] 221.24: zp[2]:17 [ render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 ] 218.16: zp[2]:15 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ] 202: zp[2]:94 [ render_sine::$1 ] 202: zp[2]:96 [ render_sine::sin_val#0 ] 202: zp[2]:100 [ render_sine::$4 ] 202: zp[2]:102 [ render_sine::sin2_val#0 ] 101: zp[1]:99 [ render_sine::ypos#0 ] 101: zp[1]:105 [ render_sine::ypos2#0 ] 30.3: zp[2]:92 [ render_sine::$11 ] 
Uplift Scope [sin16s_gen2] 225.31: zp[2]:7 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] 202: zp[4]:86 [ sin16s_gen2::$6 ] 126.25: zp[4]:9 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] 101: zp[2]:90 [ sin16s_gen2::$8 ] 94.88: zp[2]:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] 7.47: zp[4]:74 [ sin16s_gen2::step#0 ] 
Uplift Scope [div32u16u] 202: zp[2]:114 [ div32u16u::quotient_lo#0 ] 40.4: zp[2]:110 [ div32u16u::quotient_hi#0 ] 37.33: zp[4]:116 [ div32u16u::return#0 ] 22: zp[4]:70 [ div32u16u::return#2 ] 
Uplift Scope [] 220.4: zp[2]:174 [ rem16u#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [bitmap_clear] 
Uplift Scope [main] 

Uplifting [mul16u] best 30901 combination zp[4]:58 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp[4]:62 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp[2]:56 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ] zp[2]:54 [ mul16u::b#2 mul16u::b#1 ] zp[4]:176 [ mul16u::return#3 ] zp[4]:152 [ mul16u::return#2 ] 
Uplifting [wrap_y] best 30718 combination zp[2]:37 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ] reg byte a [ wrap_y::return#2 ] reg byte a [ wrap_y::return#0 ] reg byte a [ wrap_y::return#1 ] 
Uplifting [divr16u] best 30528 combination zp[2]:42 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:46 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:44 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] zp[2]:108 [ divr16u::return#2 ] zp[2]:112 [ divr16u::return#3 ] 
Uplifting [mulu16_sel] best 30510 combination zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] zp[4]:180 [ mulu16_sel::$0 ] zp[4]:184 [ mulu16_sel::$1 ] zp[2]:51 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] zp[2]:188 [ mulu16_sel::return#12 ] zp[2]:126 [ mulu16_sel::return#0 ] zp[2]:130 [ mulu16_sel::return#1 ] zp[2]:134 [ mulu16_sel::return#2 ] zp[2]:140 [ mulu16_sel::return#10 ] zp[2]:144 [ mulu16_sel::return#11 ] reg byte x [ mulu16_sel::select#5 ] 
Uplifting [sin16s] best 30503 combination zp[4]:27 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] zp[2]:31 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] zp[4]:120 [ sin16s::$4 ] zp[2]:128 [ sin16s::x2#0 ] zp[2]:136 [ sin16s::x3_6#0 ] zp[2]:142 [ sin16s::x4#0 ] zp[2]:146 [ sin16s::x5#0 ] zp[2]:148 [ sin16s::x5_128#0 ] zp[2]:132 [ sin16s::x3#0 ] zp[2]:150 [ sin16s::usinx#1 ] zp[2]:124 [ sin16s::x1#0 ] zp[2]:78 [ sin16s::return#0 ] zp[2]:138 [ sin16s::usinx#0 ] reg byte y [ sin16s::isUpper#2 ] 
Uplifting [mul16s] best 30503 combination zp[4]:33 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] zp[2]:156 [ mul16s::$6 ] zp[2]:158 [ mul16s::$11 ] zp[4]:160 [ mul16s::return#0 ] zp[2]:80 [ mul16s::a#0 ] zp[4]:82 [ mul16s::return#2 ] 
Uplifting [bitmap_plot] best 30434 combination reg byte x [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ] zp[2]:167 [ bitmap_plot::$0 ] reg byte x [ bitmap_plot::$1 ] zp[2]:169 [ bitmap_plot::plotter#1 ] zp[2]:40 [ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] zp[2]:165 [ bitmap_plot::plotter#0 ] 
Uplifting [memset] best 30418 combination zp[2]:24 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:106 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:19 [ memset::num#2 ] zp[2]:21 [ memset::str#3 ] 
Uplifting [bitmap_init] best 29968 combination zp[2]:5 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] reg byte a [ bitmap_init::$4 ] zp[1]:68 [ bitmap_init::$5 ] zp[1]:69 [ bitmap_init::$6 ] zp[1]:66 [ bitmap_init::$7 ] 
Limited combination testing to 100 combinations of 15360 possible.
Uplifting [render_sine] best 29888 combination zp[2]:17 [ render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 ] zp[2]:15 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ] zp[2]:94 [ render_sine::$1 ] zp[2]:96 [ render_sine::sin_val#0 ] zp[2]:100 [ render_sine::$4 ] zp[2]:102 [ render_sine::sin2_val#0 ] reg byte x [ render_sine::ypos#0 ] reg byte x [ render_sine::ypos2#0 ] zp[2]:92 [ render_sine::$11 ] 
Uplifting [sin16s_gen2] best 29888 combination zp[2]:7 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] zp[4]:86 [ sin16s_gen2::$6 ] zp[4]:9 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] zp[2]:90 [ sin16s_gen2::$8 ] zp[2]:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] zp[4]:74 [ sin16s_gen2::step#0 ] 
Uplifting [div32u16u] best 29888 combination zp[2]:114 [ div32u16u::quotient_lo#0 ] zp[2]:110 [ div32u16u::quotient_hi#0 ] zp[4]:116 [ div32u16u::return#0 ] zp[4]:70 [ div32u16u::return#2 ] 
Uplifting [] best 29888 combination zp[2]:174 [ rem16u#0 ] 
Uplifting [MOS6526_CIA] best 29888 combination 
Uplifting [MOS6569_VICII] best 29888 combination 
Uplifting [MOS6581_SID] best 29888 combination 
Uplifting [bitmap_clear] best 29888 combination 
Uplifting [main] best 29888 combination 
Attempting to uplift remaining variables inzp[1]:68 [ bitmap_init::$5 ]
Uplifting [bitmap_init] best 29828 combination reg byte a [ bitmap_init::$5 ] 
Attempting to uplift remaining variables inzp[1]:69 [ bitmap_init::$6 ]
Uplifting [bitmap_init] best 29768 combination reg byte a [ bitmap_init::$6 ] 
Attempting to uplift remaining variables inzp[1]:66 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 29768 combination zp[1]:66 [ bitmap_init::$7 ] 
Coalescing zero page register [ zp[2]:17 [ render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 ] ] with [ zp[2]:40 [ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:31 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] ] with [ zp[2]:150 [ sin16s::usinx#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:42 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp[2]:174 [ rem16u#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] ] with [ zp[2]:132 [ sin16s::x3#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:19 [ memset::num#2 ] ] with [ zp[2]:106 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ memset::str#3 ] ] with [ zp[2]:24 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 ] ] with [ zp[2]:78 [ sin16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:33 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] ] with [ zp[4]:152 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[4]:33 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 ] ] with [ zp[4]:160 [ mul16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ] ] with [ zp[2]:96 [ render_sine::sin_val#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 ] ] with [ zp[2]:102 [ render_sine::sin2_val#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:46 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:108 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:46 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp[2]:112 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 ] ] with [ zp[2]:128 [ sin16s::x2#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 ] ] with [ zp[2]:142 [ sin16s::x4#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] ] with [ zp[2]:54 [ mul16u::b#2 mul16u::b#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:58 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp[4]:176 [ mul16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[4]:70 [ div32u16u::return#2 ] ] with [ zp[4]:74 [ sin16s_gen2::step#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:70 [ div32u16u::return#2 sin16s_gen2::step#0 ] ] with [ zp[4]:116 [ div32u16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:82 [ mul16s::return#2 ] ] with [ zp[4]:86 [ sin16s_gen2::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:92 [ render_sine::$11 ] ] with [ zp[2]:100 [ render_sine::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:126 [ mulu16_sel::return#0 ] ] with [ zp[2]:188 [ mulu16_sel::return#12 ] ] - score: 1
Coalescing zero page register [ zp[2]:134 [ mulu16_sel::return#2 ] ] with [ zp[2]:136 [ sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:144 [ mulu16_sel::return#11 ] ] with [ zp[2]:146 [ sin16s::x5#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:156 [ mul16s::$6 ] ] with [ zp[2]:158 [ mul16s::$11 ] ] - score: 1
Coalescing zero page register [ zp[2]:165 [ bitmap_plot::plotter#0 ] ] with [ zp[2]:169 [ bitmap_plot::plotter#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:180 [ mulu16_sel::$0 ] ] with [ zp[4]:184 [ mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 ] ] with [ zp[2]:80 [ mul16s::a#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 ] ] with [ zp[2]:138 [ sin16s::usinx#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:33 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 ] ] with [ zp[4]:58 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[4]:33 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 ] ] with [ zp[4]:82 [ mul16s::return#2 sin16s_gen2::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 ] ] with [ zp[2]:94 [ render_sine::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:46 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 ] ] with [ zp[2]:114 [ div32u16u::quotient_lo#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 ] ] with [ zp[2]:130 [ mulu16_sel::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 ] ] with [ zp[2]:140 [ mulu16_sel::return#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:126 [ mulu16_sel::return#0 mulu16_sel::return#12 ] ] with [ zp[2]:134 [ mulu16_sel::return#2 sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:126 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 ] ] with [ zp[2]:144 [ mulu16_sel::return#11 sin16s::x5#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:33 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$6 ] ] with [ zp[4]:180 [ mulu16_sel::$0 mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:126 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 ] ] with [ zp[2]:148 [ sin16s::x5_128#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] ] with [ zp[2]:5 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Coalescing zero page register [ zp[2]:15 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ] ] with [ zp[2]:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] ]
Coalescing zero page register [ zp[2]:19 [ memset::num#2 memset::end#0 ] ] with [ zp[2]:17 [ render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] ]
Coalescing zero page register [ zp[2]:31 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 ] ] with [ zp[2]:21 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:42 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 ] ] with [ zp[2]:37 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$1 ] ]
Coalescing zero page register [ zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ] ] with [ zp[2]:44 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] ]
Coalescing zero page register [ zp[2]:51 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#2 mul16u::b#1 ] ] with [ zp[2]:46 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ] ]
Coalescing zero page register [ zp[2]:90 [ sin16s_gen2::$8 ] ] with [ zp[2]:56 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ] ]
Coalescing zero page register [ zp[2]:110 [ div32u16u::quotient_hi#0 ] ] with [ zp[2]:92 [ render_sine::$11 render_sine::$4 ] ]
Coalescing zero page register [ zp[4]:120 [ sin16s::$4 ] ] with [ zp[4]:62 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] ]
Coalescing zero page register [ zp[2]:156 [ mul16s::$6 mul16s::$11 ] ] with [ zp[2]:124 [ sin16s::x1#0 ] ]
Coalescing zero page register [ zp[2]:165 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 ] ] with [ zp[2]:126 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ] ]
Coalescing zero page register [ zp[2]:19 [ memset::num#2 memset::end#0 render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] ] with [ zp[2]:7 [ sin16s_gen2::i#2 sin16s_gen2::i#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Coalescing zero page register [ zp[2]:42 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$1 ] ] with [ zp[2]:31 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:156 [ mul16s::$6 mul16s::$11 sin16s::x1#0 ] ] with [ zp[2]:110 [ div32u16u::quotient_hi#0 render_sine::$11 render_sine::$4 ] ]
Coalescing zero page register [ zp[2]:167 [ bitmap_plot::$0 ] ] with [ zp[2]:49 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] ]
Allocated (was zp[4]:9) zp[4]:2 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
Allocated (was zp[2]:15) zp[2]:6 [ render_sine::sin_idx#2 render_sine::sin_idx#1 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
Allocated (was zp[2]:19) zp[2]:8 [ memset::num#2 memset::end#0 render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 sin16s_gen2::i#2 sin16s_gen2::i#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated (was zp[4]:27) zp[4]:10 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated (was zp[4]:33) zp[4]:14 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$6 mulu16_sel::$0 mulu16_sel::$1 ]
Allocated (was zp[2]:42) zp[2]:18 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$1 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[2]:51) zp[2]:20 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#2 mul16u::b#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
Allocated (was zp[1]:66) zp[1]:22 [ bitmap_init::$7 ]
Allocated (was zp[4]:70) zp[4]:23 [ div32u16u::return#2 sin16s_gen2::step#0 div32u16u::return#0 ]
Allocated (was zp[2]:90) zp[2]:27 [ sin16s_gen2::$8 mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
Allocated (was zp[4]:120) zp[4]:29 [ sin16s::$4 mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated (was zp[2]:156) zp[2]:33 [ mul16s::$6 mul16s::$11 sin16s::x1#0 div32u16u::quotient_hi#0 render_sine::$11 render_sine::$4 ]
Allocated (was zp[2]:165) zp[2]:35 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
Allocated (was zp[2]:167) zp[2]:37 [ bitmap_plot::$0 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Generate a big sine and plot it on a bitmap
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sine-plotter.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const VICII_BMM = $20
  .const VICII_DEN = $10
  .const VICII_RSEL = 8
  .const VICII_CSEL = 8
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  .const WHITE = 1
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  .const SIN_SIZE = $200
  .const SIZEOF_SIGNED_WORD = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .label D011 = $d011
  .label D016 = $d016
  .label D018 = $d018
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  .label SCREEN = $400
  .label BITMAP = $2000
  // Remainder after unsigned 16-bit division
  .label rem16u = $12
.segment Code
  // main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>BITMAP)/4&$f
    // asm { sei  }
    sei
    // [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [2] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [3] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3 -- _deref_pbuc1=vbuc2 
    lda #VICII_BMM|VICII_DEN|VICII_RSEL|3
    sta D011
    jmp vicSelectGfxBank1
    // main::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [4] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [5] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1___b1
    // main::vicSelectGfxBank1_@1
  vicSelectGfxBank1___b1:
    // [6] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    jmp __b2
    // main::@2
  __b2:
    // [7] *D016 = VICII_CSEL -- _deref_pbuc1=vbuc2 
    lda #VICII_CSEL
    sta D016
    // [8] phi from main::@2 to main::toD0181 [phi:main::@2->main::toD0181]
  toD0181_from___b2:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b3
    // main::@3
  __b3:
    // [9] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [10] call bitmap_init 
    // [18] phi from main::@3 to bitmap_init [phi:main::@3->bitmap_init]
  bitmap_init_from___b3:
    jsr bitmap_init
    // [11] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [12] call bitmap_clear 
    // [40] phi from main::@4 to bitmap_clear [phi:main::@4->bitmap_clear]
  bitmap_clear_from___b4:
    jsr bitmap_clear
    // [13] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [14] call sin16s_gen2 
    // [45] phi from main::@5 to sin16s_gen2 [phi:main::@5->sin16s_gen2]
  sin16s_gen2_from___b5:
    jsr sin16s_gen2
    // [15] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [16] call render_sine 
    // [64] phi from main::@6 to render_sine [phi:main::@6->render_sine]
  render_sine_from___b6:
    jsr render_sine
    jmp __b1
    // main::@1
  __b1:
    // [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = ++ *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    jmp __b1
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label __7 = $16
    .label yoffs = 8
    // [19] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [19] phi bitmap_init::x#2 = 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [19] phi bitmap_init::bits#3 = $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    jmp __b1
    // [19] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [19] phi bitmap_init::x#2 = bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [19] phi bitmap_init::bits#3 = bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [20] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // [21] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // [22] if(bitmap_init::bits#1!=0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b6_from___b1
    // [24] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [24] phi bitmap_init::bits#4 = $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    jmp __b2
    // [23] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [24] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [24] phi bitmap_init::bits#4 = bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [25] bitmap_init::x#1 = ++ bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [26] if(bitmap_init::x#1!=0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    // [27] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [27] phi bitmap_init::yoffs#2 = BITMAP [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta.z yoffs
    lda #>BITMAP
    sta.z yoffs+1
    // [27] phi bitmap_init::y#2 = 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [27] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [27] phi bitmap_init::yoffs#2 = bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [27] phi bitmap_init::y#2 = bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [28] bitmap_init::$7 = bitmap_init::y#2 & 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __7
    // [29] bitmap_init::$4 = < bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // [30] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __7
    // [31] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // [32] bitmap_init::$6 = > bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // [33] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // [34] if(bitmap_init::$7!=7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [35] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [36] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [36] phi bitmap_init::yoffs#4 = bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [37] bitmap_init::y#1 = ++ bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [38] if(bitmap_init::y#1!=0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [39] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE*$10
    // [41] call memset 
    // [92] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
  memset_from_bitmap_clear:
    // [92] phi memset::c#4 = bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [92] phi memset::str#3 = (void*)SCREEN [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [92] phi memset::num#2 = $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [42] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [43] call memset 
    // [92] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
  memset_from___b1:
    // [92] phi memset::c#4 = 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [92] phi memset::str#3 = (void*)BITMAP [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP
    sta.z memset.str
    lda #>BITMAP
    sta.z memset.str+1
    // [92] phi memset::num#2 = $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [44] return 
    rts
}
  // sin16s_gen2
// Generate signed int sine table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sine points in a total sine wavelength (the size of the table)
// sin16s_gen2(signed word* zp(6) sintab)
sin16s_gen2: {
    .const min = -$140
    .const max = $140
    .label ampl = max-min
    .label __6 = $e
    .label __8 = $1b
    .label step = $17
    .label sintab = 6
    // u[4.28]
    // Iterate over the table
    .label x = 2
    .label i = 8
    // [46] call div32u16u 
    // [101] phi from sin16s_gen2 to div32u16u [phi:sin16s_gen2->div32u16u]
  div32u16u_from_sin16s_gen2:
    jsr div32u16u
    // [47] div32u16u::return#2 = div32u16u::return#0
    jmp __b3
    // sin16s_gen2::@3
  __b3:
    // [48] sin16s_gen2::step#0 = div32u16u::return#2
    // [49] phi from sin16s_gen2::@3 to sin16s_gen2::@1 [phi:sin16s_gen2::@3->sin16s_gen2::@1]
  __b1_from___b3:
    // [49] phi sin16s_gen2::sintab#2 = sin [phi:sin16s_gen2::@3->sin16s_gen2::@1#0] -- pwsz1=pwsc1 
    lda #<sin
    sta.z sintab
    lda #>sin
    sta.z sintab+1
    // [49] phi sin16s_gen2::x#2 = 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    lda #<0>>$10
    sta.z x+2
    lda #>0>>$10
    sta.z x+3
    // [49] phi sin16s_gen2::i#2 = 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.28]
    // sin16s_gen2::@1
  __b1:
    // [50] if(sin16s_gen2::i#2<SIN_SIZE) goto sin16s_gen2::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>SIN_SIZE
    bcc __b2
    bne !+
    lda.z i
    cmp #<SIN_SIZE
    bcc __b2
  !:
    jmp __breturn
    // sin16s_gen2::@return
  __breturn:
    // [51] return 
    rts
    // sin16s_gen2::@2
  __b2:
    // [52] sin16s::x#0 = sin16s_gen2::x#2 -- vduz1=vduz2 
    lda.z x
    sta.z sin16s.x
    lda.z x+1
    sta.z sin16s.x+1
    lda.z x+2
    sta.z sin16s.x+2
    lda.z x+3
    sta.z sin16s.x+3
    // [53] call sin16s 
    jsr sin16s
    // [54] sin16s::return#0 = sin16s::return#1
    jmp __b4
    // sin16s_gen2::@4
  __b4:
    // [55] mul16s::a#0 = sin16s::return#0
    // [56] call mul16s 
    jsr mul16s
    // [57] mul16s::return#2 = mul16s::return#0
    jmp __b5
    // sin16s_gen2::@5
  __b5:
    // [58] sin16s_gen2::$6 = mul16s::return#2
    // [59] sin16s_gen2::$8 = > sin16s_gen2::$6 -- vwuz1=_hi_vdsz2 
    lda.z __6+2
    sta.z __8
    lda.z __6+3
    sta.z __8+1
    // [60] *sin16s_gen2::sintab#2 = (signed word)sin16s_gen2::$8 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z __8
    sta (sintab),y
    iny
    lda.z __8+1
    sta (sintab),y
    // [61] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc.z sintab
    sta.z sintab
    bcc !+
    inc.z sintab+1
  !:
    // [62] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0 -- vduz1=vduz1_plus_vduz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    lda.z x+2
    adc.z step+2
    sta.z x+2
    lda.z x+3
    adc.z step+3
    sta.z x+3
    // [63] sin16s_gen2::i#1 = ++ sin16s_gen2::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [49] phi from sin16s_gen2::@5 to sin16s_gen2::@1 [phi:sin16s_gen2::@5->sin16s_gen2::@1]
  __b1_from___b5:
    // [49] phi sin16s_gen2::sintab#2 = sin16s_gen2::sintab#0 [phi:sin16s_gen2::@5->sin16s_gen2::@1#0] -- register_copy 
    // [49] phi sin16s_gen2::x#2 = sin16s_gen2::x#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#1] -- register_copy 
    // [49] phi sin16s_gen2::i#2 = sin16s_gen2::i#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#2] -- register_copy 
    jmp __b1
}
  // render_sine
render_sine: {
    .label __1 = $12
    .label __4 = $21
    .label __11 = $21
    .label sin_val = $12
    .label sin2_val = $12
    .label xpos = 8
    .label sin_idx = 6
    // [65] phi from render_sine to render_sine::@1 [phi:render_sine->render_sine::@1]
  __b1_from_render_sine:
    // [65] phi render_sine::xpos#3 = 0 [phi:render_sine->render_sine::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z xpos
    lda #>0
    sta.z xpos+1
    // [65] phi render_sine::sin_idx#2 = 0 [phi:render_sine->render_sine::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z sin_idx
    lda #>0
    sta.z sin_idx+1
    jmp __b1
    // render_sine::@1
  __b1:
    // [66] if(render_sine::sin_idx#2<SIN_SIZE) goto render_sine::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z sin_idx+1
    cmp #>SIN_SIZE
    bcc __b2
    bne !+
    lda.z sin_idx
    cmp #<SIN_SIZE
    bcc __b2
  !:
    jmp __breturn
    // render_sine::@return
  __breturn:
    // [67] return 
    rts
    // render_sine::@2
  __b2:
    // [68] render_sine::$11 = render_sine::sin_idx#2 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z sin_idx
    asl
    sta.z __11
    lda.z sin_idx+1
    rol
    sta.z __11+1
    // [69] render_sine::$1 = sin + render_sine::$11 -- pwsz1=pwsc1_plus_vwuz2 
    clc
    lda.z __11
    adc #<sin
    sta.z __1
    lda.z __11+1
    adc #>sin
    sta.z __1+1
    // [70] render_sine::sin_val#0 = *render_sine::$1 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sin_val),y
    pha
    iny
    lda (sin_val),y
    sta.z sin_val+1
    pla
    sta.z sin_val
    // [71] wrap_y::y#0 = render_sine::sin_val#0
    // [72] call wrap_y 
    // [162] phi from render_sine::@2 to wrap_y [phi:render_sine::@2->wrap_y]
  wrap_y_from___b2:
    // [162] phi wrap_y::y#9 = wrap_y::y#0 [phi:render_sine::@2->wrap_y#0] -- register_copy 
    jsr wrap_y
    // [73] wrap_y::return#0 = wrap_y::return#2
    jmp __b4
    // render_sine::@4
  __b4:
    // [74] render_sine::ypos#0 = wrap_y::return#0 -- vbuxx=vbuaa 
    tax
    // [75] bitmap_plot::x#0 = render_sine::xpos#3
    // [76] bitmap_plot::y#0 = render_sine::ypos#0
    // [77] call bitmap_plot 
    // [171] phi from render_sine::@4 to bitmap_plot [phi:render_sine::@4->bitmap_plot]
  bitmap_plot_from___b4:
    // [171] phi bitmap_plot::x#2 = bitmap_plot::x#0 [phi:render_sine::@4->bitmap_plot#0] -- register_copy 
    // [171] phi bitmap_plot::y#2 = bitmap_plot::y#0 [phi:render_sine::@4->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b5
    // render_sine::@5
  __b5:
    // [78] render_sine::$4 = sin2 + render_sine::$11 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda.z __4
    adc #<sin2
    sta.z __4
    lda.z __4+1
    adc #>sin2
    sta.z __4+1
    // [79] render_sine::sin2_val#0 = *render_sine::$4 -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (__4),y
    sta.z sin2_val
    iny
    lda (__4),y
    sta.z sin2_val+1
    // [80] wrap_y::y#1 = render_sine::sin2_val#0 + $a -- vwsz1=vwsz1_plus_vbsc1 
    clc
    lda.z wrap_y.y
    adc #<$a
    sta.z wrap_y.y
    lda.z wrap_y.y+1
    adc #>$a
    sta.z wrap_y.y+1
    // [81] call wrap_y 
    // [162] phi from render_sine::@5 to wrap_y [phi:render_sine::@5->wrap_y]
  wrap_y_from___b5:
    // [162] phi wrap_y::y#9 = wrap_y::y#1 [phi:render_sine::@5->wrap_y#0] -- register_copy 
    jsr wrap_y
    // [82] wrap_y::return#1 = wrap_y::return#2
    jmp __b6
    // render_sine::@6
  __b6:
    // [83] render_sine::ypos2#0 = wrap_y::return#1 -- vbuxx=vbuaa 
    tax
    // [84] bitmap_plot::x#1 = render_sine::xpos#3
    // [85] bitmap_plot::y#1 = render_sine::ypos2#0
    // [86] call bitmap_plot 
    // [171] phi from render_sine::@6 to bitmap_plot [phi:render_sine::@6->bitmap_plot]
  bitmap_plot_from___b6:
    // [171] phi bitmap_plot::x#2 = bitmap_plot::x#1 [phi:render_sine::@6->bitmap_plot#0] -- register_copy 
    // [171] phi bitmap_plot::y#2 = bitmap_plot::y#1 [phi:render_sine::@6->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b7
    // render_sine::@7
  __b7:
    // [87] render_sine::xpos#1 = ++ render_sine::xpos#3 -- vwuz1=_inc_vwuz1 
    inc.z xpos
    bne !+
    inc.z xpos+1
  !:
    // [88] if(render_sine::xpos#1!=$140) goto render_sine::@8 -- vwuz1_neq_vwuc1_then_la1 
    lda.z xpos+1
    cmp #>$140
    bne __b8_from___b7
    lda.z xpos
    cmp #<$140
    bne __b8_from___b7
    // [90] phi from render_sine::@7 to render_sine::@3 [phi:render_sine::@7->render_sine::@3]
  __b3_from___b7:
    // [90] phi render_sine::xpos#9 = 0 [phi:render_sine::@7->render_sine::@3#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z xpos
    lda #>0
    sta.z xpos+1
    jmp __b3
    // [89] phi from render_sine::@7 to render_sine::@8 [phi:render_sine::@7->render_sine::@8]
  __b8_from___b7:
    jmp __b8
    // render_sine::@8
  __b8:
    // [90] phi from render_sine::@8 to render_sine::@3 [phi:render_sine::@8->render_sine::@3]
  __b3_from___b8:
    // [90] phi render_sine::xpos#9 = render_sine::xpos#1 [phi:render_sine::@8->render_sine::@3#0] -- register_copy 
    jmp __b3
    // render_sine::@3
  __b3:
    // [91] render_sine::sin_idx#1 = ++ render_sine::sin_idx#2 -- vwuz1=_inc_vwuz1 
    inc.z sin_idx
    bne !+
    inc.z sin_idx+1
  !:
    // [65] phi from render_sine::@3 to render_sine::@1 [phi:render_sine::@3->render_sine::@1]
  __b1_from___b3:
    // [65] phi render_sine::xpos#3 = render_sine::xpos#9 [phi:render_sine::@3->render_sine::@1#0] -- register_copy 
    // [65] phi render_sine::sin_idx#2 = render_sine::sin_idx#1 [phi:render_sine::@3->render_sine::@1#1] -- register_copy 
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($12) str, byte register(X) c, word zp(8) num)
memset: {
    .label end = 8
    .label dst = $12
    .label num = 8
    .label str = $12
    // [93] if(memset::num#2<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [94] memset::end#0 = (byte*)memset::str#3 + memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [95] memset::dst#4 = (byte*)memset::str#3
    // [96] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [96] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [97] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [98] return 
    rts
    // memset::@3
  __b3:
    // [99] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [100] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $21
    .label quotient_lo = $14
    .label return = $17
    // [102] call divr16u 
    // [178] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
    // [178] phi divr16u::dividend#5 = >PI2_u4f28 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta.z divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta.z divr16u.dividend+1
    // [178] phi divr16u::rem#10 = 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    lda #>0
    sta.z divr16u.rem+1
    jsr divr16u
    // [103] divr16u::return#2 = divr16u::return#0
    jmp __b1
    // div32u16u::@1
  __b1:
    // [104] div32u16u::quotient_hi#0 = divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z quotient_hi
    lda.z divr16u.return+1
    sta.z quotient_hi+1
    // [105] divr16u::rem#4 = rem16u#0
    // [106] call divr16u 
    // [178] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  divr16u_from___b1:
    // [178] phi divr16u::dividend#5 = <PI2_u4f28 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta.z divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta.z divr16u.dividend+1
    // [178] phi divr16u::rem#10 = divr16u::rem#4 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // [107] divr16u::return#3 = divr16u::return#0
    jmp __b2
    // div32u16u::@2
  __b2:
    // [108] div32u16u::quotient_lo#0 = divr16u::return#3
    // [109] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    jmp __breturn
    // div32u16u::@return
  __breturn:
    // [110] return 
    rts
}
  // sin16s
// Calculate signed int sine sin(x)
// x: unsigned long input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed int sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zp($a) x)
sin16s: {
    .label __4 = $1d
    .label x = $a
    .label return = $12
    .label x1 = $21
    .label x2 = $25
    .label x3 = $25
    .label x3_6 = $23
    .label usinx = $12
    .label x4 = $25
    .label x5 = $23
    .label x5_128 = $23
    .label sinx = $12
    // [111] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_u4f28>>$10
    bcc __b1_from_sin16s
    bne !+
    lda.z x+2
    cmp #<PI_u4f28>>$10
    bcc __b1_from_sin16s
    bne !+
    lda.z x+1
    cmp #>PI_u4f28
    bcc __b1_from_sin16s
    bne !+
    lda.z x
    cmp #<PI_u4f28
    bcc __b1_from_sin16s
  !:
    jmp __b4
    // sin16s::@4
  __b4:
    // [112] sin16s::x#1 = sin16s::x#0 - PI_u4f28 -- vduz1=vduz1_minus_vduc1 
    lda.z x
    sec
    sbc #<PI_u4f28
    sta.z x
    lda.z x+1
    sbc #>PI_u4f28
    sta.z x+1
    lda.z x+2
    sbc #<PI_u4f28>>$10
    sta.z x+2
    lda.z x+3
    sbc #>PI_u4f28>>$10
    sta.z x+3
    // [113] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  __b1_from___b4:
    // [113] phi sin16s::isUpper#2 = 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [113] phi sin16s::x#4 = sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp __b1
    // [113] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  __b1_from_sin16s:
    // [113] phi sin16s::isUpper#2 = 0 [phi:sin16s->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [113] phi sin16s::x#4 = sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp __b1
    // sin16s::@1
  __b1:
    // [114] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc __b2_from___b1
    bne !+
    lda.z x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc __b2_from___b1
    bne !+
    lda.z x+1
    cmp #>PI_HALF_u4f28
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f28
    bcc __b2_from___b1
  !:
    jmp __b5
    // sin16s::@5
  __b5:
    // [115] sin16s::x#2 = PI_u4f28 - sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f28
    sbc.z x+1
    sta.z x+1
    lda #<PI_u4f28>>$10
    sbc.z x+2
    sta.z x+2
    lda #>PI_u4f28>>$10
    sbc.z x+3
    sta.z x+3
    // [116] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  __b2_from___b1:
  __b2_from___b5:
    // [116] phi sin16s::x#6 = sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp __b2
    // sin16s::@2
  __b2:
    // [117] sin16s::$4 = sin16s::x#6 << 3 -- vduz1=vduz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    lda.z x+2
    rol
    sta.z __4+2
    lda.z x+3
    rol
    sta.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    // [118] sin16s::x1#0 = > sin16s::$4 -- vwuz1=_hi_vduz2 
    lda.z __4+2
    sta.z x1
    lda.z __4+3
    sta.z x1+1
    // [119] mulu16_sel::v1#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v1
    lda.z x1+1
    sta.z mulu16_sel.v1+1
    // [120] mulu16_sel::v2#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [121] call mulu16_sel 
    // [196] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from___b2:
    // [196] phi mulu16_sel::select#5 = 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [196] phi mulu16_sel::v2#5 = mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [196] phi mulu16_sel::v1#5 = mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [122] mulu16_sel::return#0 = mulu16_sel::return#12
    jmp __b7
    // sin16s::@7
  __b7:
    // [123] sin16s::x2#0 = mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z x2
    lda.z mulu16_sel.return+1
    sta.z x2+1
    // [124] mulu16_sel::v1#1 = sin16s::x2#0
    // [125] mulu16_sel::v2#1 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [126] call mulu16_sel 
    // [196] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
  mulu16_sel_from___b7:
    // [196] phi mulu16_sel::select#5 = 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [196] phi mulu16_sel::v2#5 = mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [196] phi mulu16_sel::v1#5 = mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [127] mulu16_sel::return#1 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    jmp __b8
    // sin16s::@8
  __b8:
    // [128] sin16s::x3#0 = mulu16_sel::return#1
    // [129] mulu16_sel::v1#2 = sin16s::x3#0
    // [130] call mulu16_sel 
    // [196] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from___b8:
    // [196] phi mulu16_sel::select#5 = 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [196] phi mulu16_sel::v2#5 = (word)$10000/6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta.z mulu16_sel.v2
    lda #>$10000/6
    sta.z mulu16_sel.v2+1
    // [196] phi mulu16_sel::v1#5 = mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [131] mulu16_sel::return#2 = mulu16_sel::return#12
    jmp __b9
    // sin16s::@9
  __b9:
    // [132] sin16s::x3_6#0 = mulu16_sel::return#2
    // [133] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    lda.z x1+1
    sbc.z x3_6+1
    sta.z usinx+1
    // [134] mulu16_sel::v1#3 = sin16s::x3#0
    // [135] mulu16_sel::v2#3 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [136] call mulu16_sel 
    // [196] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from___b9:
    // [196] phi mulu16_sel::select#5 = 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [196] phi mulu16_sel::v2#5 = mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [196] phi mulu16_sel::v1#5 = mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [137] mulu16_sel::return#10 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    jmp __b10
    // sin16s::@10
  __b10:
    // [138] sin16s::x4#0 = mulu16_sel::return#10
    // [139] mulu16_sel::v1#4 = sin16s::x4#0
    // [140] mulu16_sel::v2#4 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [141] call mulu16_sel 
    // [196] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from___b10:
    // [196] phi mulu16_sel::select#5 = 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [196] phi mulu16_sel::v2#5 = mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [196] phi mulu16_sel::v1#5 = mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [142] mulu16_sel::return#11 = mulu16_sel::return#12
    jmp __b11
    // sin16s::@11
  __b11:
    // [143] sin16s::x5#0 = mulu16_sel::return#11
    // [144] sin16s::x5_128#0 = sin16s::x5#0 >> 4 -- vwuz1=vwuz1_ror_4 
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    // [145] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx
    lda.z usinx+1
    adc.z x5_128+1
    sta.z usinx+1
    // [146] if(sin16s::isUpper#2==0) goto sin16s::@12 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b12
    jmp __b6
    // sin16s::@6
  __b6:
    // [147] sin16s::sinx#1 = - (signed word)sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z sinx
    sta.z sinx
    lda #0
    sbc.z sinx+1
    sta.z sinx+1
    // [148] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
  __b3_from___b12:
  __b3_from___b6:
    // [148] phi sin16s::return#1 = sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp __b3
    // sin16s::@3
  __b3:
    jmp __breturn
    // sin16s::@return
  __breturn:
    // [149] return 
    rts
    // sin16s::@12
  __b12:
    // [150] sin16s::return#5 = (signed word)sin16s::usinx#1
    jmp __b3_from___b12
}
  // mul16s
// Multiply of two signed ints to a signed long
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zp($12) a)
mul16s: {
    .label __6 = $21
    .label __11 = $21
    .label m = $e
    .label return = $e
    .label a = $12
    // [151] mul16u::a#1 = (word)mul16s::a#0 -- vwuz1=vwuz2 
    lda.z a
    sta.z mul16u.a
    lda.z a+1
    sta.z mul16u.a+1
    // [152] call mul16u 
    // [205] phi from mul16s to mul16u [phi:mul16s->mul16u]
  mul16u_from_mul16s:
    // [205] phi mul16u::a#6 = mul16u::a#1 [phi:mul16s->mul16u#0] -- register_copy 
    // [205] phi mul16u::b#2 = (word)sin16s_gen2::ampl#0 [phi:mul16s->mul16u#1] -- vwuz1=vwuc1 
    lda #<sin16s_gen2.ampl
    sta.z mul16u.b
    lda #>sin16s_gen2.ampl
    sta.z mul16u.b+1
    jsr mul16u
    // [153] mul16u::return#2 = mul16u::res#2
    jmp __b4
    // mul16s::@4
  __b4:
    // [154] mul16s::m#0 = mul16u::return#2
    // [155] if(mul16s::a#0>=0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1_from___b4
    jmp __b3
    // mul16s::@3
  __b3:
    // [156] mul16s::$6 = > mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // [157] mul16s::$11 = mul16s::$6 - (word)sin16s_gen2::ampl#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z __11
    sec
    sbc #<sin16s_gen2.ampl
    sta.z __11
    lda.z __11+1
    sbc #>sin16s_gen2.ampl
    sta.z __11+1
    // [158] mul16s::m#1 = mul16s::m#0 hi= mul16s::$11 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [159] phi from mul16s::@3 mul16s::@4 to mul16s::@1 [phi:mul16s::@3/mul16s::@4->mul16s::@1]
  __b1_from___b3:
  __b1_from___b4:
    // [159] phi mul16s::m#4 = mul16s::m#1 [phi:mul16s::@3/mul16s::@4->mul16s::@1#0] -- register_copy 
    jmp __b1
    // mul16s::@1
  __b1:
    jmp __b2
    // mul16s::@2
  __b2:
    // [160] mul16s::return#0 = (signed dword)mul16s::m#4
    jmp __breturn
    // mul16s::@return
  __breturn:
    // [161] return 
    rts
}
  // wrap_y
// wrap_y(signed word zp($12) y)
wrap_y: {
    .label y = $12
    // [163] phi from wrap_y wrap_y::@2 to wrap_y::@1 [phi:wrap_y/wrap_y::@2->wrap_y::@1]
  __b1_from_wrap_y:
  __b1_from___b2:
    // [163] phi wrap_y::y#4 = wrap_y::y#9 [phi:wrap_y/wrap_y::@2->wrap_y::@1#0] -- register_copy 
    jmp __b1
    // wrap_y::@1
  __b1:
    // [164] if(wrap_y::y#4>=$c8) goto wrap_y::@2 -- vwsz1_ge_vwsc1_then_la1 
    lda.z y
    cmp #<$c8
    lda.z y+1
    sbc #>$c8
    bvc !+
    eor #$80
  !:
    bpl __b2
    // [165] phi from wrap_y::@1 wrap_y::@4 to wrap_y::@3 [phi:wrap_y::@1/wrap_y::@4->wrap_y::@3]
  __b3_from___b1:
  __b3_from___b4:
    // [165] phi wrap_y::y#6 = wrap_y::y#4 [phi:wrap_y::@1/wrap_y::@4->wrap_y::@3#0] -- register_copy 
    jmp __b3
    // wrap_y::@3
  __b3:
    // [166] if(wrap_y::y#6<0) goto wrap_y::@4 -- vwsz1_lt_0_then_la1 
    lda.z y+1
    bmi __b4
    jmp __b5
    // wrap_y::@5
  __b5:
    // [167] wrap_y::return#2 = (byte)wrap_y::y#6 -- vbuaa=_byte_vwsz1 
    lda.z y
    jmp __breturn
    // wrap_y::@return
  __breturn:
    // [168] return 
    rts
    // wrap_y::@4
  __b4:
    // [169] wrap_y::y#3 = wrap_y::y#6 + $c8 -- vwsz1=vwsz1_plus_vwsc1 
    clc
    lda.z y
    adc #<$c8
    sta.z y
    lda.z y+1
    adc #>$c8
    sta.z y+1
    jmp __b3_from___b4
    // wrap_y::@2
  __b2:
    // [170] wrap_y::y#2 = wrap_y::y#4 - $c8 -- vwsz1=vwsz1_minus_vwsc1 
    lda.z y
    sec
    sbc #<$c8
    sta.z y
    lda.z y+1
    sbc #>$c8
    sta.z y+1
    jmp __b1_from___b2
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zp(8) x, byte register(X) y)
bitmap_plot: {
    .label __0 = $25
    .label plotter = $23
    .label x = 8
    // [172] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#2] w= bitmap_plot_ylo[bitmap_plot::y#2] -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta.z plotter+1
    lda bitmap_plot_ylo,x
    sta.z plotter
    // [173] bitmap_plot::$0 = bitmap_plot::x#2 & $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __0
    lda.z x+1
    and #>$fff8
    sta.z __0+1
    // [174] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z __0
    sta.z plotter
    lda.z plotter+1
    adc.z __0+1
    sta.z plotter+1
    // [175] bitmap_plot::$1 = < bitmap_plot::x#2 -- vbuxx=_lo_vwuz1 
    ldx.z x
    // [176] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1] -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    ldy #0
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [177] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($25) dividend, word zp($12) rem)
divr16u: {
    .label rem = $12
    .label dividend = $25
    .label quotient = $14
    .label return = $14
    // [179] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [179] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [179] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [179] phi divr16u::dividend#3 = divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [179] phi divr16u::rem#5 = divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp __b1
    // [179] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [179] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [179] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [179] phi divr16u::dividend#3 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [179] phi divr16u::rem#5 = divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [180] divr16u::rem#0 = divr16u::rem#5 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [181] divr16u::$1 = > divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // [182] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [183] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [184] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [185] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [185] phi divr16u::rem#6 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [186] divr16u::dividend#0 = divr16u::dividend#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [187] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [188] if(divr16u::rem#6<SIN_SIZE) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>SIN_SIZE
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<SIN_SIZE
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [189] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [190] divr16u::rem#2 = divr16u::rem#6 - SIN_SIZE -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<SIN_SIZE
    sta.z rem
    lda.z rem+1
    sbc #>SIN_SIZE
    sta.z rem+1
    // [191] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [191] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [191] phi divr16u::rem#11 = divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [192] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [193] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [194] rem16u#0 = divr16u::rem#11
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [195] return 
    rts
}
  // mulu16_sel
// Calculate val*val for two unsigned int values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zp($25) v1, word zp($14) v2, byte register(X) select)
mulu16_sel: {
    .label __0 = $e
    .label __1 = $e
    .label v1 = $25
    .label v2 = $14
    .label return = $23
    .label return_1 = $25
    // [197] mul16u::a#2 = mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda.z v1
    sta.z mul16u.a
    lda.z v1+1
    sta.z mul16u.a+1
    // [198] mul16u::b#1 = mulu16_sel::v2#5
    // [199] call mul16u 
    // [205] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
  mul16u_from_mulu16_sel:
    // [205] phi mul16u::a#6 = mul16u::a#2 [phi:mulu16_sel->mul16u#0] -- register_copy 
    // [205] phi mul16u::b#2 = mul16u::b#1 [phi:mulu16_sel->mul16u#1] -- register_copy 
    jsr mul16u
    // [200] mul16u::return#3 = mul16u::res#2
    jmp __b1
    // mulu16_sel::@1
  __b1:
    // [201] mulu16_sel::$0 = mul16u::return#3
    // [202] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    rol.z __1+2
    rol.z __1+3
    dex
    bne !-
  !e:
    // [203] mulu16_sel::return#12 = > mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda.z __1+2
    sta.z return
    lda.z __1+3
    sta.z return+1
    jmp __breturn
    // mulu16_sel::@return
  __breturn:
    // [204] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($1b) a, word zp($14) b)
mul16u: {
    .label mb = $1d
    .label a = $1b
    .label res = $e
    .label return = $e
    .label b = $14
    // [206] mul16u::mb#0 = (dword)mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [207] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  __b1_from_mul16u:
    // [207] phi mul16u::mb#2 = mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [207] phi mul16u::res#2 = 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [207] phi mul16u::a#3 = mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp __b1
    // mul16u::@1
  __b1:
    // [208] if(mul16u::a#3!=0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    ora.z a+1
    bne __b2
    jmp __breturn
    // mul16u::@return
  __breturn:
    // [209] return 
    rts
    // mul16u::@2
  __b2:
    // [210] mul16u::$1 = mul16u::a#3 & 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // [211] if(mul16u::$1==0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul16u::@4
  __b4:
    // [212] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [213] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [213] phi mul16u::res#6 = mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp __b3
    // mul16u::@3
  __b3:
    // [214] mul16u::a#0 = mul16u::a#3 >> 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // [215] mul16u::mb#1 = mul16u::mb#2 << 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [207] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  __b1_from___b3:
    // [207] phi mul16u::mb#2 = mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [207] phi mul16u::res#2 = mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [207] phi mul16u::a#3 = mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  .align $100
  sin: .fill 2*$200, 0
sin2:
.for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1___b1
Removing instruction jmp __b2
Removing instruction jmp toD0181
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction ldy #0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b6_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b8_from___b7 with __b3
Replacing label __b8_from___b7 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b12 with __b3
Replacing label __b1_from___b4 with __b2
Replacing label __b3_from___b4 with __b3
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction toD0181_from___b2:
Removing instruction toD0181:
Removing instruction __b4_from___b3:
Removing instruction bitmap_clear_from___b4:
Removing instruction __b5_from___b4:
Removing instruction sin16s_gen2_from___b5:
Removing instruction __b6_from___b5:
Removing instruction render_sine_from___b6:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b1:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b1_from_bitmap_clear:
Removing instruction memset_from___b1:
Removing instruction __b1_from___b3:
Removing instruction __b8_from___b7:
Removing instruction __b8:
Removing instruction __b3_from___b8:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b5:
Removing instruction mulu16_sel_from___b8:
Removing instruction __b3_from___b12:
Removing instruction __b3_from___b6:
Removing instruction __breturn:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b4:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_wrap_y:
Removing instruction __b1_from___b2:
Removing instruction __b3_from___b1:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1___b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction bitmap_init_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1_from_bitmap_init:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction memset_from_bitmap_clear:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction div32u16u_from_sin16s_gen2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b1_from_render_sine:
Removing instruction __breturn:
Removing instruction wrap_y_from___b2:
Removing instruction __b4:
Removing instruction bitmap_plot_from___b4:
Removing instruction __b5:
Removing instruction wrap_y_from___b5:
Removing instruction __b6:
Removing instruction bitmap_plot_from___b6:
Removing instruction __b7:
Removing instruction __b3_from___b7:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Removing instruction divr16u_from_div32u16u:
Removing instruction __b1:
Removing instruction divr16u_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b5:
Removing instruction mulu16_sel_from___b2:
Removing instruction __b7:
Removing instruction mulu16_sel_from___b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction mulu16_sel_from___b9:
Removing instruction __b10:
Removing instruction mulu16_sel_from___b10:
Removing instruction __b11:
Removing instruction __b6:
Removing instruction mul16u_from_mul16s:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction mul16u_from_mulu16_sel:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_mul16u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b3 in beq __b12
Replacing jump to rts with rts in jmp __b3
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from_sin16s to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b3
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b12:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
const byte* BITMAP = (byte*) 8192
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*) 56576
const nomodify byte* D011 = (byte*) 53265
const nomodify byte* D016 = (byte*) 53270
const nomodify byte* D018 = (byte*) 53272
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const nomodify dword PI2_u4f28 = $6487ed51
const nomodify dword PI_HALF_u4f28 = $1921fb54
const nomodify dword PI_u4f28 = $3243f6a9
const nomodify byte* PROCPORT = (byte*) 1
const nomodify byte* PROCPORT_DDR = (byte*) 0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_IO = 5
const byte* SCREEN = (byte*) 1024
const nomodify word SIN_SIZE = $200
const byte SIZEOF_SIGNED_WORD = 2
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
const nomodify byte VICII_BMM = $20
const nomodify byte VICII_CSEL = 8
const nomodify byte VICII_DEN = $10
const nomodify byte VICII_RSEL = 8
const nomodify byte WHITE = 1
void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
byte bitmap_clear::bgcol
byte bitmap_clear::col
const byte bitmap_clear::col#0 col = WHITE*$10
byte bitmap_clear::fgcol
byte* bitmap_gfx
void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
byte~ bitmap_init::$4 reg byte a 202.0
byte~ bitmap_init::$5 reg byte a 202.0
byte~ bitmap_init::$6 reg byte a 202.0
byte~ bitmap_init::$7 zp[1]:22 50.5
byte bitmap_init::bits
byte bitmap_init::bits#1 reg byte a 101.0
byte bitmap_init::bits#3 reg byte a 151.5
byte bitmap_init::bits#4 reg byte a 67.33333333333333
byte* bitmap_init::gfx
byte* bitmap_init::screen
byte bitmap_init::x
byte bitmap_init::x#1 reg byte x 151.5
byte bitmap_init::x#2 reg byte x 50.5
byte bitmap_init::y
byte bitmap_init::y#1 reg byte x 151.5
byte bitmap_init::y#2 reg byte x 50.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 yoffs zp[2]:8 202.0
byte* bitmap_init::yoffs#2 yoffs zp[2]:8 63.125
byte* bitmap_init::yoffs#4 yoffs zp[2]:8 101.0
void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
word~ bitmap_plot::$0 zp[2]:37 2002.0
byte~ bitmap_plot::$1 reg byte x 2002.0
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 plotter zp[2]:35 500.5
byte* bitmap_plot::plotter#1 plotter zp[2]:35 1501.5
word bitmap_plot::x
word bitmap_plot::x#0 x zp[2]:8 101.0
word bitmap_plot::x#1 x zp[2]:8 101.0
word bitmap_plot::x#2 x zp[2]:8 551.0
byte bitmap_plot::y
byte bitmap_plot::y#0 reg byte x 202.0
byte bitmap_plot::y#1 reg byte x 202.0
byte bitmap_plot::y#2 reg byte x 2204.0
const to_nomodify byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
const to_nomodify byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
byte* bitmap_screen
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
word div32u16u::divisor
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 quotient_hi zp[2]:33 40.4
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 quotient_lo zp[2]:20 202.0
dword div32u16u::return
dword div32u16u::return#0 return zp[4]:23 37.33333333333333
dword div32u16u::return#2 return zp[4]:23 22.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 20002.0
byte~ divr16u::$2 reg byte a 20002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:37 2500.25
word divr16u::dividend#3 dividend zp[2]:37 4429.142857142857
word divr16u::dividend#5 dividend zp[2]:37 1001.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 15001.5
byte divr16u::i#2 reg byte x 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:20 15001.5
word divr16u::quotient#2 quotient zp[2]:20 10001.0
word divr16u::quotient#3 quotient zp[2]:20 2500.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:18 7500.75
word divr16u::rem#1 rem zp[2]:18 20002.0
word divr16u::rem#10 rem zp[2]:18 1102.0
word divr16u::rem#11 rem zp[2]:18 10334.666666666666
word divr16u::rem#2 rem zp[2]:18 20002.0
word divr16u::rem#4 rem zp[2]:18 202.0
word divr16u::rem#5 rem zp[2]:18 21003.0
word divr16u::rem#6 rem zp[2]:18 10001.0
word divr16u::return
word divr16u::return#0 return zp[2]:20 4315.0
word divr16u::return#2 return zp[2]:20 202.0
word divr16u::return#3 return zp[2]:20 202.0
void main()
byte* main::toD0181_gfx
byte main::toD0181_return
const byte main::toD0181_return#0 toD0181_return = >(word)SCREEN&$3fff*4|>(word)BITMAP/4&$f
byte* main::toD0181_screen
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx
byte main::vicSelectGfxBank1_toDd001_return
const byte main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = 3
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 125.125
byte* memset::dst
byte* memset::dst#1 dst zp[2]:18 2002.0
byte* memset::dst#2 dst zp[2]:18 1368.3333333333335
byte* memset::dst#4 dst zp[2]:18 202.0
byte* memset::end
byte* memset::end#0 end zp[2]:8 183.66666666666669
word memset::num
word memset::num#2 num zp[2]:8 101.0
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:18
signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
word~ mul16s::$11 zp[2]:33 2002.0
word~ mul16s::$6 zp[2]:33 2002.0
signed word mul16s::a
signed word mul16s::a#0 a zp[2]:18 220.39999999999998
signed word mul16s::b
dword mul16s::m
dword mul16s::m#0 m zp[4]:14 1001.0
dword mul16s::m#1 m zp[4]:14 2002.0
dword mul16s::m#4 m zp[4]:14 2002.0
signed dword mul16s::return
signed dword mul16s::return#0 return zp[4]:14 367.33333333333337
signed dword mul16s::return#2 return zp[4]:14 202.0
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 reg byte a 2.0000002E7
word mul16u::a
word mul16u::a#0 a zp[2]:27 1.0000001E7
word mul16u::a#1 a zp[2]:27 2002.0
word mul16u::a#2 a zp[2]:27 10001.0
word mul16u::a#3 a zp[2]:27 6683334.166666666
word mul16u::a#6 a zp[2]:27 55501.5
word mul16u::b
word mul16u::b#1 b zp[2]:20 20002.0
word mul16u::b#2 b zp[2]:20 10001.0
dword mul16u::mb
dword mul16u::mb#0 mb zp[4]:29 200002.0
dword mul16u::mb#1 mb zp[4]:29 2.0000002E7
dword mul16u::mb#2 mb zp[4]:29 4300000.571428571
dword mul16u::res
dword mul16u::res#1 res zp[4]:14 2.0000002E7
dword mul16u::res#2 res zp[4]:14 4287286.428571429
dword mul16u::res#6 res zp[4]:14 1.0000001E7
dword mul16u::return
dword mul16u::return#2 return zp[4]:14 2002.0
dword mul16u::return#3 return zp[4]:14 20002.0
word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
dword~ mulu16_sel::$0 zp[4]:14 20002.0
dword~ mulu16_sel::$1 zp[4]:14 20002.0
word mulu16_sel::return
word mulu16_sel::return#0 return zp[2]:35 2002.0
word mulu16_sel::return#1 return_1 zp[2]:37 2002.0
word mulu16_sel::return#10 return_1 zp[2]:37 2002.0
word mulu16_sel::return#11 return zp[2]:35 2002.0
word mulu16_sel::return#12 return zp[2]:35 2143.714285714286
word mulu16_sel::return#2 return zp[2]:35 2002.0
byte mulu16_sel::select
byte mulu16_sel::select#5 reg byte x 1666.8333333333333
word mulu16_sel::v1
word mulu16_sel::v1#0 v1 zp[2]:37 1001.0
word mulu16_sel::v1#1 v1 zp[2]:37 1001.0
word mulu16_sel::v1#2 v1 zp[2]:37 2002.0
word mulu16_sel::v1#3 v1 zp[2]:37 1001.0
word mulu16_sel::v1#4 v1 zp[2]:37 1001.0
word mulu16_sel::v1#5 v1 zp[2]:37 15006.0
word mulu16_sel::v2
word mulu16_sel::v2#0 v2 zp[2]:20 2002.0
word mulu16_sel::v2#1 v2 zp[2]:20 2002.0
word mulu16_sel::v2#3 v2 zp[2]:20 2002.0
word mulu16_sel::v2#4 v2 zp[2]:20 2002.0
word mulu16_sel::v2#5 v2 zp[2]:20 7002.5
word rem16u
word rem16u#0 rem16u zp[2]:18 220.39999999999998
void render_sine()
signed word*~ render_sine::$1 zp[2]:18 202.0
word~ render_sine::$11 zp[2]:33 30.299999999999997
signed word*~ render_sine::$4 zp[2]:33 202.0
signed word render_sine::sin2_val
signed word render_sine::sin2_val#0 sin2_val zp[2]:18 202.0
word render_sine::sin_idx
word render_sine::sin_idx#1 sin_idx zp[2]:6 202.0
word render_sine::sin_idx#2 sin_idx zp[2]:6 16.16
signed word render_sine::sin_val
signed word render_sine::sin_val#0 sin_val zp[2]:18 202.0
word render_sine::xpos
word render_sine::xpos#1 xpos zp[2]:8 101.0
word render_sine::xpos#3 xpos zp[2]:8 19.238095238095237
word render_sine::xpos#9 xpos zp[2]:8 101.0
byte render_sine::ypos
byte render_sine::ypos#0 reg byte x 101.0
byte render_sine::ypos2
byte render_sine::ypos2#0 reg byte x 101.0
const signed word* sin[$200]  = { fill( $200, 0) }
signed word sin16s(dword sin16s::x)
dword~ sin16s::$4 zp[4]:29 2002.0
byte sin16s::isUpper
byte sin16s::isUpper#2 reg byte y 30.333333333333332
signed word sin16s::return
signed word sin16s::return#0 return zp[2]:18 202.0
signed word sin16s::return#1 return zp[2]:18 701.0
signed word sin16s::return#5 return zp[2]:18 2002.0
signed word sin16s::sinx
signed word sin16s::sinx#1 sinx zp[2]:18 2002.0
word sin16s::usinx
word sin16s::usinx#0 usinx zp[2]:18 166.83333333333334
word sin16s::usinx#1 usinx zp[2]:18 500.5
dword sin16s::x
dword sin16s::x#0 x zp[4]:10 1552.0
dword sin16s::x#1 x zp[4]:10 2002.0
dword sin16s::x#2 x zp[4]:10 2002.0
dword sin16s::x#4 x zp[4]:10 2502.5
dword sin16s::x#6 x zp[4]:10 3003.0
word sin16s::x1
word sin16s::x1#0 x1 zp[2]:33 318.5
word sin16s::x2
word sin16s::x2#0 x2 zp[2]:37 2002.0
word sin16s::x3
word sin16s::x3#0 x3 zp[2]:37 500.5
word sin16s::x3_6
word sin16s::x3_6#0 x3_6 zp[2]:35 2002.0
word sin16s::x4
word sin16s::x4#0 x4 zp[2]:37 2002.0
word sin16s::x5
word sin16s::x5#0 x5 zp[2]:35 2002.0
word sin16s::x5_128
word sin16s::x5_128#0 x5_128 zp[2]:35 2002.0
void sin16s_gen2(signed word* sin16s_gen2::sintab , word sin16s_gen2::wavelength , signed word sin16s_gen2::min , signed word sin16s_gen2::max)
signed dword~ sin16s_gen2::$6 zp[4]:14 202.0
word~ sin16s_gen2::$8 zp[2]:27 101.0
signed word sin16s_gen2::ampl
const signed word sin16s_gen2::ampl#0 ampl = sin16s_gen2::max#0-sin16s_gen2::min#0
word sin16s_gen2::i
word sin16s_gen2::i#1 i zp[2]:8 202.0
word sin16s_gen2::i#2 i zp[2]:8 23.307692307692307
signed word sin16s_gen2::max
const signed word sin16s_gen2::max#0 max = $140
signed word sin16s_gen2::min
const signed word sin16s_gen2::min#0 min = -$140
signed word sin16s_gen2::offs
signed word* sin16s_gen2::sintab
signed word* sin16s_gen2::sintab#0 sintab zp[2]:6 67.33333333333333
signed word* sin16s_gen2::sintab#2 sintab zp[2]:6 27.545454545454547
dword sin16s_gen2::step
dword sin16s_gen2::step#0 step zp[4]:23 7.466666666666667
word sin16s_gen2::wavelength
dword sin16s_gen2::x
dword sin16s_gen2::x#1 x zp[4]:2 101.0
dword sin16s_gen2::x#2 x zp[4]:2 25.25
const signed word* sin2[$200]  = kickasm {{ .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }
 }}
byte wrap_y(signed word wrap_y::y)
byte wrap_y::return
byte wrap_y::return#0 reg byte a 202.0
byte wrap_y::return#1 reg byte a 202.0
byte wrap_y::return#2 reg byte a 300.75
signed word wrap_y::y
signed word wrap_y::y#0 y zp[2]:18 202.0
signed word wrap_y::y#1 y zp[2]:18 202.0
signed word wrap_y::y#2 y zp[2]:18 200002.0
signed word wrap_y::y#3 y zp[2]:18 200002.0
signed word wrap_y::y#4 y zp[2]:18 200502.5
signed word wrap_y::y#6 y zp[2]:18 200002.0
signed word wrap_y::y#9 y zp[2]:18 1203.0

reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[4]:2 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
zp[2]:6 [ render_sine::sin_idx#2 render_sine::sin_idx#1 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
zp[2]:8 [ memset::num#2 memset::end#0 render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 sin16s_gen2::i#2 sin16s_gen2::i#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
reg byte x [ memset::c#4 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:10 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
zp[4]:14 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$6 mulu16_sel::$0 mulu16_sel::$1 ]
reg byte x [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
zp[2]:18 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$1 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:20 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#2 mul16u::b#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte x [ mulu16_sel::select#5 ]
zp[1]:22 [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
zp[4]:23 [ div32u16u::return#2 sin16s_gen2::step#0 div32u16u::return#0 ]
zp[2]:27 [ sin16s_gen2::$8 mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
reg byte a [ wrap_y::return#0 ]
reg byte x [ render_sine::ypos#0 ]
reg byte a [ wrap_y::return#1 ]
reg byte x [ render_sine::ypos2#0 ]
zp[4]:29 [ sin16s::$4 mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[2]:33 [ mul16s::$6 mul16s::$11 sin16s::x1#0 div32u16u::quotient_hi#0 render_sine::$11 render_sine::$4 ]
reg byte a [ wrap_y::return#2 ]
zp[2]:35 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
zp[2]:37 [ bitmap_plot::$0 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
reg byte x [ bitmap_plot::$1 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mul16u::$1 ]


FINAL ASSEMBLER
Score: 24554

  // File Comments
// Generate a big sine and plot it on a bitmap
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sine-plotter.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const VICII_BMM = $20
  .const VICII_DEN = $10
  .const VICII_RSEL = 8
  .const VICII_CSEL = 8
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  .const WHITE = 1
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  .const SIN_SIZE = $200
  .const SIZEOF_SIGNED_WORD = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .label D011 = $d011
  .label D016 = $d016
  .label D018 = $d018
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  .label SCREEN = $400
  .label BITMAP = $2000
  // Remainder after unsigned 16-bit division
  .label rem16u = $12
.segment Code
  // main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>BITMAP)/4&$f
    // asm
    // asm { sei  }
    sei
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [2] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3
    // [3] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3 -- _deref_pbuc1=vbuc2 
    lda #VICII_BMM|VICII_DEN|VICII_RSEL|3
    sta D011
    // main::vicSelectGfxBank1
    // CIA2->PORT_A_DDR = %00000011
    // [4] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [5] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
    // main::vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_@1
    // CIA2->PORT_A = toDd00(gfx)
    // [6] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    // main::@2
    // *D016 = VICII_CSEL
    // [7] *D016 = VICII_CSEL -- _deref_pbuc1=vbuc2 
    lda #VICII_CSEL
    sta D016
    // [8] phi from main::@2 to main::toD0181 [phi:main::@2->main::toD0181]
    // main::toD0181
    // main::@3
    // *D018 = toD018(SCREEN, BITMAP)
    // [9] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // bitmap_init(BITMAP, SCREEN)
    // [10] call bitmap_init 
    // [18] phi from main::@3 to bitmap_init [phi:main::@3->bitmap_init]
    jsr bitmap_init
    // [11] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // bitmap_clear(BLACK, WHITE)
    // [12] call bitmap_clear 
    // [40] phi from main::@4 to bitmap_clear [phi:main::@4->bitmap_clear]
    jsr bitmap_clear
    // [13] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // sin16s_gen2(sin, SIN_SIZE, -320, 320)
    // [14] call sin16s_gen2 
    // [45] phi from main::@5 to sin16s_gen2 [phi:main::@5->sin16s_gen2]
    jsr sin16s_gen2
    // [15] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // render_sine()
    // [16] call render_sine 
    // [64] phi from main::@6 to render_sine [phi:main::@6->render_sine]
    jsr render_sine
    // main::@1
  __b1:
    // (VICII->BG_COLOR)++;
    // [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = ++ *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    jmp __b1
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label __7 = $16
    .label yoffs = 8
    // [19] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
    // [19] phi bitmap_init::x#2 = 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [19] phi bitmap_init::bits#3 = $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    // [19] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
    // [19] phi bitmap_init::x#2 = bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [19] phi bitmap_init::bits#3 = bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    // bitmap_init::@1
  __b1:
    // bitmap_plot_bit[x] = bits
    // [20] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // bits >>= 1
    // [21] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // if(bits==0)
    // [22] if(bitmap_init::bits#1!=0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b2
    // [24] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
    // [24] phi bitmap_init::bits#4 = $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    // [23] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
    // bitmap_init::@6
    // [24] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
    // [24] phi bitmap_init::bits#4 = bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    // bitmap_init::@2
  __b2:
    // for(char x : 0..255)
    // [25] bitmap_init::x#1 = ++ bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [26] if(bitmap_init::x#1!=0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [27] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
    // [27] phi bitmap_init::yoffs#2 = BITMAP [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta.z yoffs
    lda #>BITMAP
    sta.z yoffs+1
    // [27] phi bitmap_init::y#2 = 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    // [27] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
    // [27] phi bitmap_init::yoffs#2 = bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [27] phi bitmap_init::y#2 = bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    // bitmap_init::@3
  __b3:
    // y&$7
    // [28] bitmap_init::$7 = bitmap_init::y#2 & 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __7
    // <yoffs
    // [29] bitmap_init::$4 = < bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // y&$7 | <yoffs
    // [30] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __7
    // bitmap_plot_ylo[y] = y&$7 | <yoffs
    // [31] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // >yoffs
    // [32] bitmap_init::$6 = > bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // bitmap_plot_yhi[y] = >yoffs
    // [33] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // if((y&$7)==7)
    // [34] if(bitmap_init::$7!=7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4
    // bitmap_init::@5
    // yoffs = yoffs + 40*8
    // [35] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [36] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
    // [36] phi bitmap_init::yoffs#4 = bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    // bitmap_init::@4
  __b4:
    // for(char y : 0..255)
    // [37] bitmap_init::y#1 = ++ bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [38] if(bitmap_init::y#1!=0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // bitmap_init::@return
    // }
    // [39] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE*$10
    // memset(bitmap_screen, col, 1000uw)
    // [41] call memset 
    // [92] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
    // [92] phi memset::c#4 = bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [92] phi memset::str#3 = (void*)SCREEN [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [92] phi memset::num#2 = $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [42] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
    // bitmap_clear::@1
    // memset(bitmap_gfx, 0, 8000uw)
    // [43] call memset 
    // [92] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
    // [92] phi memset::c#4 = 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [92] phi memset::str#3 = (void*)BITMAP [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP
    sta.z memset.str
    lda #>BITMAP
    sta.z memset.str+1
    // [92] phi memset::num#2 = $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    // bitmap_clear::@return
    // }
    // [44] return 
    rts
}
  // sin16s_gen2
// Generate signed int sine table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sine points in a total sine wavelength (the size of the table)
// sin16s_gen2(signed word* zp(6) sintab)
sin16s_gen2: {
    .const min = -$140
    .const max = $140
    .label ampl = max-min
    .label __6 = $e
    .label __8 = $1b
    .label step = $17
    .label sintab = 6
    // u[4.28]
    // Iterate over the table
    .label x = 2
    .label i = 8
    // div32u16u(PI2_u4f28, wavelength)
    // [46] call div32u16u 
    // [101] phi from sin16s_gen2 to div32u16u [phi:sin16s_gen2->div32u16u]
    jsr div32u16u
    // div32u16u(PI2_u4f28, wavelength)
    // [47] div32u16u::return#2 = div32u16u::return#0
    // sin16s_gen2::@3
    // step = div32u16u(PI2_u4f28, wavelength)
    // [48] sin16s_gen2::step#0 = div32u16u::return#2
    // [49] phi from sin16s_gen2::@3 to sin16s_gen2::@1 [phi:sin16s_gen2::@3->sin16s_gen2::@1]
    // [49] phi sin16s_gen2::sintab#2 = sin [phi:sin16s_gen2::@3->sin16s_gen2::@1#0] -- pwsz1=pwsc1 
    lda #<sin
    sta.z sintab
    lda #>sin
    sta.z sintab+1
    // [49] phi sin16s_gen2::x#2 = 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z x
    sta.z x+1
    lda #<0>>$10
    sta.z x+2
    lda #>0>>$10
    sta.z x+3
    // [49] phi sin16s_gen2::i#2 = 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
  // u[4.28]
    // sin16s_gen2::@1
  __b1:
    // for( unsigned int i=0; i<wavelength; i++)
    // [50] if(sin16s_gen2::i#2<SIN_SIZE) goto sin16s_gen2::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>SIN_SIZE
    bcc __b2
    bne !+
    lda.z i
    cmp #<SIN_SIZE
    bcc __b2
  !:
    // sin16s_gen2::@return
    // }
    // [51] return 
    rts
    // sin16s_gen2::@2
  __b2:
    // sin16s(x)
    // [52] sin16s::x#0 = sin16s_gen2::x#2 -- vduz1=vduz2 
    lda.z x
    sta.z sin16s.x
    lda.z x+1
    sta.z sin16s.x+1
    lda.z x+2
    sta.z sin16s.x+2
    lda.z x+3
    sta.z sin16s.x+3
    // [53] call sin16s 
    jsr sin16s
    // [54] sin16s::return#0 = sin16s::return#1
    // sin16s_gen2::@4
    // mul16s(sin16s(x), ampl)
    // [55] mul16s::a#0 = sin16s::return#0
    // [56] call mul16s 
    jsr mul16s
    // [57] mul16s::return#2 = mul16s::return#0
    // sin16s_gen2::@5
    // [58] sin16s_gen2::$6 = mul16s::return#2
    // >mul16s(sin16s(x), ampl)
    // [59] sin16s_gen2::$8 = > sin16s_gen2::$6 -- vwuz1=_hi_vdsz2 
    lda.z __6+2
    sta.z __8
    lda.z __6+3
    sta.z __8+1
    // *sintab++ = offs + (signed int)>mul16s(sin16s(x), ampl)
    // [60] *sin16s_gen2::sintab#2 = (signed word)sin16s_gen2::$8 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z __8
    sta (sintab),y
    iny
    lda.z __8+1
    sta (sintab),y
    // *sintab++ = offs + (signed int)>mul16s(sin16s(x), ampl);
    // [61] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc.z sintab
    sta.z sintab
    bcc !+
    inc.z sintab+1
  !:
    // x = x + step
    // [62] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0 -- vduz1=vduz1_plus_vduz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    lda.z x+2
    adc.z step+2
    sta.z x+2
    lda.z x+3
    adc.z step+3
    sta.z x+3
    // for( unsigned int i=0; i<wavelength; i++)
    // [63] sin16s_gen2::i#1 = ++ sin16s_gen2::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [49] phi from sin16s_gen2::@5 to sin16s_gen2::@1 [phi:sin16s_gen2::@5->sin16s_gen2::@1]
    // [49] phi sin16s_gen2::sintab#2 = sin16s_gen2::sintab#0 [phi:sin16s_gen2::@5->sin16s_gen2::@1#0] -- register_copy 
    // [49] phi sin16s_gen2::x#2 = sin16s_gen2::x#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#1] -- register_copy 
    // [49] phi sin16s_gen2::i#2 = sin16s_gen2::i#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#2] -- register_copy 
    jmp __b1
}
  // render_sine
render_sine: {
    .label __1 = $12
    .label __4 = $21
    .label __11 = $21
    .label sin_val = $12
    .label sin2_val = $12
    .label xpos = 8
    .label sin_idx = 6
    // [65] phi from render_sine to render_sine::@1 [phi:render_sine->render_sine::@1]
    // [65] phi render_sine::xpos#3 = 0 [phi:render_sine->render_sine::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z xpos
    sta.z xpos+1
    // [65] phi render_sine::sin_idx#2 = 0 [phi:render_sine->render_sine::@1#1] -- vwuz1=vwuc1 
    sta.z sin_idx
    sta.z sin_idx+1
    // render_sine::@1
  __b1:
    // for(unsigned int sin_idx=0; sin_idx<SIN_SIZE; sin_idx++)
    // [66] if(render_sine::sin_idx#2<SIN_SIZE) goto render_sine::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z sin_idx+1
    cmp #>SIN_SIZE
    bcc __b2
    bne !+
    lda.z sin_idx
    cmp #<SIN_SIZE
    bcc __b2
  !:
    // render_sine::@return
    // }
    // [67] return 
    rts
    // render_sine::@2
  __b2:
    // sin+sin_idx
    // [68] render_sine::$11 = render_sine::sin_idx#2 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z sin_idx
    asl
    sta.z __11
    lda.z sin_idx+1
    rol
    sta.z __11+1
    // [69] render_sine::$1 = sin + render_sine::$11 -- pwsz1=pwsc1_plus_vwuz2 
    clc
    lda.z __11
    adc #<sin
    sta.z __1
    lda.z __11+1
    adc #>sin
    sta.z __1+1
    // sin_val = *(sin+sin_idx)
    // [70] render_sine::sin_val#0 = *render_sine::$1 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sin_val),y
    pha
    iny
    lda (sin_val),y
    sta.z sin_val+1
    pla
    sta.z sin_val
    // wrap_y(sin_val)
    // [71] wrap_y::y#0 = render_sine::sin_val#0
    // [72] call wrap_y 
    // [162] phi from render_sine::@2 to wrap_y [phi:render_sine::@2->wrap_y]
    // [162] phi wrap_y::y#9 = wrap_y::y#0 [phi:render_sine::@2->wrap_y#0] -- register_copy 
    jsr wrap_y
    // wrap_y(sin_val)
    // [73] wrap_y::return#0 = wrap_y::return#2
    // render_sine::@4
    // ypos = wrap_y(sin_val)
    // [74] render_sine::ypos#0 = wrap_y::return#0 -- vbuxx=vbuaa 
    tax
    // bitmap_plot(xpos,ypos)
    // [75] bitmap_plot::x#0 = render_sine::xpos#3
    // [76] bitmap_plot::y#0 = render_sine::ypos#0
    // [77] call bitmap_plot 
    // [171] phi from render_sine::@4 to bitmap_plot [phi:render_sine::@4->bitmap_plot]
    // [171] phi bitmap_plot::x#2 = bitmap_plot::x#0 [phi:render_sine::@4->bitmap_plot#0] -- register_copy 
    // [171] phi bitmap_plot::y#2 = bitmap_plot::y#0 [phi:render_sine::@4->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // render_sine::@5
    // sin2+sin_idx
    // [78] render_sine::$4 = sin2 + render_sine::$11 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda.z __4
    adc #<sin2
    sta.z __4
    lda.z __4+1
    adc #>sin2
    sta.z __4+1
    // sin2_val = *(sin2+sin_idx)
    // [79] render_sine::sin2_val#0 = *render_sine::$4 -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (__4),y
    sta.z sin2_val
    iny
    lda (__4),y
    sta.z sin2_val+1
    // wrap_y(sin2_val+10)
    // [80] wrap_y::y#1 = render_sine::sin2_val#0 + $a -- vwsz1=vwsz1_plus_vbsc1 
    clc
    lda.z wrap_y.y
    adc #<$a
    sta.z wrap_y.y
    lda.z wrap_y.y+1
    adc #>$a
    sta.z wrap_y.y+1
    // [81] call wrap_y 
    // [162] phi from render_sine::@5 to wrap_y [phi:render_sine::@5->wrap_y]
    // [162] phi wrap_y::y#9 = wrap_y::y#1 [phi:render_sine::@5->wrap_y#0] -- register_copy 
    jsr wrap_y
    // wrap_y(sin2_val+10)
    // [82] wrap_y::return#1 = wrap_y::return#2
    // render_sine::@6
    // ypos2 = wrap_y(sin2_val+10)
    // [83] render_sine::ypos2#0 = wrap_y::return#1 -- vbuxx=vbuaa 
    tax
    // bitmap_plot(xpos,ypos2)
    // [84] bitmap_plot::x#1 = render_sine::xpos#3
    // [85] bitmap_plot::y#1 = render_sine::ypos2#0
    // [86] call bitmap_plot 
    // [171] phi from render_sine::@6 to bitmap_plot [phi:render_sine::@6->bitmap_plot]
    // [171] phi bitmap_plot::x#2 = bitmap_plot::x#1 [phi:render_sine::@6->bitmap_plot#0] -- register_copy 
    // [171] phi bitmap_plot::y#2 = bitmap_plot::y#1 [phi:render_sine::@6->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // render_sine::@7
    // xpos++;
    // [87] render_sine::xpos#1 = ++ render_sine::xpos#3 -- vwuz1=_inc_vwuz1 
    inc.z xpos
    bne !+
    inc.z xpos+1
  !:
    // if(xpos==320)
    // [88] if(render_sine::xpos#1!=$140) goto render_sine::@8 -- vwuz1_neq_vwuc1_then_la1 
    lda.z xpos+1
    cmp #>$140
    bne __b3
    lda.z xpos
    cmp #<$140
    bne __b3
    // [90] phi from render_sine::@7 to render_sine::@3 [phi:render_sine::@7->render_sine::@3]
    // [90] phi render_sine::xpos#9 = 0 [phi:render_sine::@7->render_sine::@3#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z xpos
    sta.z xpos+1
    // [89] phi from render_sine::@7 to render_sine::@8 [phi:render_sine::@7->render_sine::@8]
    // render_sine::@8
    // [90] phi from render_sine::@8 to render_sine::@3 [phi:render_sine::@8->render_sine::@3]
    // [90] phi render_sine::xpos#9 = render_sine::xpos#1 [phi:render_sine::@8->render_sine::@3#0] -- register_copy 
    // render_sine::@3
  __b3:
    // for(unsigned int sin_idx=0; sin_idx<SIN_SIZE; sin_idx++)
    // [91] render_sine::sin_idx#1 = ++ render_sine::sin_idx#2 -- vwuz1=_inc_vwuz1 
    inc.z sin_idx
    bne !+
    inc.z sin_idx+1
  !:
    // [65] phi from render_sine::@3 to render_sine::@1 [phi:render_sine::@3->render_sine::@1]
    // [65] phi render_sine::xpos#3 = render_sine::xpos#9 [phi:render_sine::@3->render_sine::@1#0] -- register_copy 
    // [65] phi render_sine::sin_idx#2 = render_sine::sin_idx#1 [phi:render_sine::@3->render_sine::@1#1] -- register_copy 
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($12) str, byte register(X) c, word zp(8) num)
memset: {
    .label end = 8
    .label dst = $12
    .label num = 8
    .label str = $12
    // if(num>0)
    // [93] if(memset::num#2<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // end = (char*)str + num
    // [94] memset::end#0 = (byte*)memset::str#3 + memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [95] memset::dst#4 = (byte*)memset::str#3
    // [96] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [96] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [97] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [98] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [99] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [100] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $21
    .label quotient_lo = $14
    .label return = $17
    // divr16u(>dividend, divisor, 0)
    // [102] call divr16u 
    // [178] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
    // [178] phi divr16u::dividend#5 = >PI2_u4f28 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta.z divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta.z divr16u.dividend+1
    // [178] phi divr16u::rem#10 = 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    sta.z divr16u.rem+1
    jsr divr16u
    // divr16u(>dividend, divisor, 0)
    // [103] divr16u::return#2 = divr16u::return#0
    // div32u16u::@1
    // quotient_hi = divr16u(>dividend, divisor, 0)
    // [104] div32u16u::quotient_hi#0 = divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z quotient_hi
    lda.z divr16u.return+1
    sta.z quotient_hi+1
    // divr16u(<dividend, divisor, rem16u)
    // [105] divr16u::rem#4 = rem16u#0
    // [106] call divr16u 
    // [178] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
    // [178] phi divr16u::dividend#5 = <PI2_u4f28 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta.z divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta.z divr16u.dividend+1
    // [178] phi divr16u::rem#10 = divr16u::rem#4 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // divr16u(<dividend, divisor, rem16u)
    // [107] divr16u::return#3 = divr16u::return#0
    // div32u16u::@2
    // quotient_lo = divr16u(<dividend, divisor, rem16u)
    // [108] div32u16u::quotient_lo#0 = divr16u::return#3
    // quotient = { quotient_hi, quotient_lo}
    // [109] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    // div32u16u::@return
    // }
    // [110] return 
    rts
}
  // sin16s
// Calculate signed int sine sin(x)
// x: unsigned long input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed int sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zp($a) x)
sin16s: {
    .label __4 = $1d
    .label x = $a
    .label return = $12
    .label x1 = $21
    .label x2 = $25
    .label x3 = $25
    .label x3_6 = $23
    .label usinx = $12
    .label x4 = $25
    .label x5 = $23
    .label x5_128 = $23
    .label sinx = $12
    // if(x >= PI_u4f28 )
    // [111] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_u4f28>>$10
    bcc __b4
    bne !+
    lda.z x+2
    cmp #<PI_u4f28>>$10
    bcc __b4
    bne !+
    lda.z x+1
    cmp #>PI_u4f28
    bcc __b4
    bne !+
    lda.z x
    cmp #<PI_u4f28
    bcc __b4
  !:
    // sin16s::@4
    // x = x - PI_u4f28
    // [112] sin16s::x#1 = sin16s::x#0 - PI_u4f28 -- vduz1=vduz1_minus_vduc1 
    lda.z x
    sec
    sbc #<PI_u4f28
    sta.z x
    lda.z x+1
    sbc #>PI_u4f28
    sta.z x+1
    lda.z x+2
    sbc #<PI_u4f28>>$10
    sta.z x+2
    lda.z x+3
    sbc #>PI_u4f28>>$10
    sta.z x+3
    // [113] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
    // [113] phi sin16s::isUpper#2 = 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [113] phi sin16s::x#4 = sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp __b1
    // [113] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  __b4:
    // [113] phi sin16s::isUpper#2 = 0 [phi:sin16s->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [113] phi sin16s::x#4 = sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    // sin16s::@1
  __b1:
    // if(x >= PI_HALF_u4f28 )
    // [114] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc __b2
    bne !+
    lda.z x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc __b2
    bne !+
    lda.z x+1
    cmp #>PI_HALF_u4f28
    bcc __b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f28
    bcc __b2
  !:
    // sin16s::@5
    // x = PI_u4f28 - x
    // [115] sin16s::x#2 = PI_u4f28 - sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f28
    sbc.z x+1
    sta.z x+1
    lda #<PI_u4f28>>$10
    sbc.z x+2
    sta.z x+2
    lda #>PI_u4f28>>$10
    sbc.z x+3
    sta.z x+3
    // [116] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
    // [116] phi sin16s::x#6 = sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    // sin16s::@2
  __b2:
    // x<<3
    // [117] sin16s::$4 = sin16s::x#6 << 3 -- vduz1=vduz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    lda.z x+2
    rol
    sta.z __4+2
    lda.z x+3
    rol
    sta.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    // x1 = >x<<3
    // [118] sin16s::x1#0 = > sin16s::$4 -- vwuz1=_hi_vduz2 
    lda.z __4+2
    sta.z x1
    lda.z __4+3
    sta.z x1+1
    // mulu16_sel(x1, x1, 0)
    // [119] mulu16_sel::v1#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v1
    lda.z x1+1
    sta.z mulu16_sel.v1+1
    // [120] mulu16_sel::v2#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [121] call mulu16_sel 
    // [196] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
    // [196] phi mulu16_sel::select#5 = 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [196] phi mulu16_sel::v2#5 = mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [196] phi mulu16_sel::v1#5 = mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x1, x1, 0)
    // [122] mulu16_sel::return#0 = mulu16_sel::return#12
    // sin16s::@7
    // x2 = mulu16_sel(x1, x1, 0)
    // [123] sin16s::x2#0 = mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z x2
    lda.z mulu16_sel.return+1
    sta.z x2+1
    // mulu16_sel(x2, x1, 1)
    // [124] mulu16_sel::v1#1 = sin16s::x2#0
    // [125] mulu16_sel::v2#1 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [126] call mulu16_sel 
    // [196] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
    // [196] phi mulu16_sel::select#5 = 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [196] phi mulu16_sel::v2#5 = mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [196] phi mulu16_sel::v1#5 = mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x2, x1, 1)
    // [127] mulu16_sel::return#1 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    // sin16s::@8
    // x3 = mulu16_sel(x2, x1, 1)
    // [128] sin16s::x3#0 = mulu16_sel::return#1
    // mulu16_sel(x3, $10000/6, 1)
    // [129] mulu16_sel::v1#2 = sin16s::x3#0
    // [130] call mulu16_sel 
    // [196] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
    // [196] phi mulu16_sel::select#5 = 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [196] phi mulu16_sel::v2#5 = (word)$10000/6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta.z mulu16_sel.v2
    lda #>$10000/6
    sta.z mulu16_sel.v2+1
    // [196] phi mulu16_sel::v1#5 = mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x3, $10000/6, 1)
    // [131] mulu16_sel::return#2 = mulu16_sel::return#12
    // sin16s::@9
    // x3_6 = mulu16_sel(x3, $10000/6, 1)
    // [132] sin16s::x3_6#0 = mulu16_sel::return#2
    // usinx = x1 - x3_6
    // [133] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    lda.z x1+1
    sbc.z x3_6+1
    sta.z usinx+1
    // mulu16_sel(x3, x1, 0)
    // [134] mulu16_sel::v1#3 = sin16s::x3#0
    // [135] mulu16_sel::v2#3 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [136] call mulu16_sel 
    // [196] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
    // [196] phi mulu16_sel::select#5 = 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [196] phi mulu16_sel::v2#5 = mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [196] phi mulu16_sel::v1#5 = mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x3, x1, 0)
    // [137] mulu16_sel::return#10 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    // sin16s::@10
    // x4 = mulu16_sel(x3, x1, 0)
    // [138] sin16s::x4#0 = mulu16_sel::return#10
    // mulu16_sel(x4, x1, 0)
    // [139] mulu16_sel::v1#4 = sin16s::x4#0
    // [140] mulu16_sel::v2#4 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [141] call mulu16_sel 
    // [196] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
    // [196] phi mulu16_sel::select#5 = 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [196] phi mulu16_sel::v2#5 = mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [196] phi mulu16_sel::v1#5 = mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x4, x1, 0)
    // [142] mulu16_sel::return#11 = mulu16_sel::return#12
    // sin16s::@11
    // x5 = mulu16_sel(x4, x1, 0)
    // [143] sin16s::x5#0 = mulu16_sel::return#11
    // x5_128 = x5>>4
    // [144] sin16s::x5_128#0 = sin16s::x5#0 >> 4 -- vwuz1=vwuz1_ror_4 
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    // usinx = usinx + x5_128
    // [145] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx
    lda.z usinx+1
    adc.z x5_128+1
    sta.z usinx+1
    // if(isUpper!=0)
    // [146] if(sin16s::isUpper#2==0) goto sin16s::@12 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b3
    // sin16s::@6
    // sinx = -(signed int)usinx
    // [147] sin16s::sinx#1 = - (signed word)sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z sinx
    sta.z sinx
    lda #0
    sbc.z sinx+1
    sta.z sinx+1
    // [148] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
    // [148] phi sin16s::return#1 = sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    // sin16s::@3
  __b3:
    // sin16s::@return
    // }
    // [149] return 
    rts
    // sin16s::@12
    // [150] sin16s::return#5 = (signed word)sin16s::usinx#1
}
  // mul16s
// Multiply of two signed ints to a signed long
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zp($12) a)
mul16s: {
    .label __6 = $21
    .label __11 = $21
    .label m = $e
    .label return = $e
    .label a = $12
    // mul16u((unsigned int)a, (unsigned int) b)
    // [151] mul16u::a#1 = (word)mul16s::a#0 -- vwuz1=vwuz2 
    lda.z a
    sta.z mul16u.a
    lda.z a+1
    sta.z mul16u.a+1
    // [152] call mul16u 
    // [205] phi from mul16s to mul16u [phi:mul16s->mul16u]
    // [205] phi mul16u::a#6 = mul16u::a#1 [phi:mul16s->mul16u#0] -- register_copy 
    // [205] phi mul16u::b#2 = (word)sin16s_gen2::ampl#0 [phi:mul16s->mul16u#1] -- vwuz1=vwuc1 
    lda #<sin16s_gen2.ampl
    sta.z mul16u.b
    lda #>sin16s_gen2.ampl
    sta.z mul16u.b+1
    jsr mul16u
    // mul16u((unsigned int)a, (unsigned int) b)
    // [153] mul16u::return#2 = mul16u::res#2
    // mul16s::@4
    // m = mul16u((unsigned int)a, (unsigned int) b)
    // [154] mul16s::m#0 = mul16u::return#2
    // if(a<0)
    // [155] if(mul16s::a#0>=0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b2
    // mul16s::@3
    // >m
    // [156] mul16s::$6 = > mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // >m = (>m)-(unsigned int)b
    // [157] mul16s::$11 = mul16s::$6 - (word)sin16s_gen2::ampl#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z __11
    sec
    sbc #<sin16s_gen2.ampl
    sta.z __11
    lda.z __11+1
    sbc #>sin16s_gen2.ampl
    sta.z __11+1
    // [158] mul16s::m#1 = mul16s::m#0 hi= mul16s::$11 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [159] phi from mul16s::@3 mul16s::@4 to mul16s::@1 [phi:mul16s::@3/mul16s::@4->mul16s::@1]
    // [159] phi mul16s::m#4 = mul16s::m#1 [phi:mul16s::@3/mul16s::@4->mul16s::@1#0] -- register_copy 
    // mul16s::@1
    // mul16s::@2
  __b2:
    // return (signed long)m;
    // [160] mul16s::return#0 = (signed dword)mul16s::m#4
    // mul16s::@return
    // }
    // [161] return 
    rts
}
  // wrap_y
// wrap_y(signed word zp($12) y)
wrap_y: {
    .label y = $12
    // [163] phi from wrap_y wrap_y::@2 to wrap_y::@1 [phi:wrap_y/wrap_y::@2->wrap_y::@1]
    // [163] phi wrap_y::y#4 = wrap_y::y#9 [phi:wrap_y/wrap_y::@2->wrap_y::@1#0] -- register_copy 
    // wrap_y::@1
  __b1:
    // while(y>=200)
    // [164] if(wrap_y::y#4>=$c8) goto wrap_y::@2 -- vwsz1_ge_vwsc1_then_la1 
    lda.z y
    cmp #<$c8
    lda.z y+1
    sbc #>$c8
    bvc !+
    eor #$80
  !:
    bpl __b2
    // [165] phi from wrap_y::@1 wrap_y::@4 to wrap_y::@3 [phi:wrap_y::@1/wrap_y::@4->wrap_y::@3]
    // [165] phi wrap_y::y#6 = wrap_y::y#4 [phi:wrap_y::@1/wrap_y::@4->wrap_y::@3#0] -- register_copy 
    // wrap_y::@3
  __b3:
    // while(y<0)
    // [166] if(wrap_y::y#6<0) goto wrap_y::@4 -- vwsz1_lt_0_then_la1 
    lda.z y+1
    bmi __b4
    // wrap_y::@5
    // return (char)y;
    // [167] wrap_y::return#2 = (byte)wrap_y::y#6 -- vbuaa=_byte_vwsz1 
    lda.z y
    // wrap_y::@return
    // }
    // [168] return 
    rts
    // wrap_y::@4
  __b4:
    // y += 200
    // [169] wrap_y::y#3 = wrap_y::y#6 + $c8 -- vwsz1=vwsz1_plus_vwsc1 
    clc
    lda.z y
    adc #<$c8
    sta.z y
    lda.z y+1
    adc #>$c8
    sta.z y+1
    jmp __b3
    // wrap_y::@2
  __b2:
    // y -= 200
    // [170] wrap_y::y#2 = wrap_y::y#4 - $c8 -- vwsz1=vwsz1_minus_vwsc1 
    lda.z y
    sec
    sbc #<$c8
    sta.z y
    lda.z y+1
    sbc #>$c8
    sta.z y+1
    jmp __b1
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zp(8) x, byte register(X) y)
bitmap_plot: {
    .label __0 = $25
    .label plotter = $23
    .label x = 8
    // plotter = (char*) { bitmap_plot_yhi[y], bitmap_plot_ylo[y] }
    // [172] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#2] w= bitmap_plot_ylo[bitmap_plot::y#2] -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta.z plotter+1
    lda bitmap_plot_ylo,x
    sta.z plotter
    // x & $fff8
    // [173] bitmap_plot::$0 = bitmap_plot::x#2 & $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __0
    lda.z x+1
    and #>$fff8
    sta.z __0+1
    // plotter += ( x & $fff8 )
    // [174] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z __0
    sta.z plotter
    lda.z plotter+1
    adc.z __0+1
    sta.z plotter+1
    // <x
    // [175] bitmap_plot::$1 = < bitmap_plot::x#2 -- vbuxx=_lo_vwuz1 
    ldx.z x
    // *plotter |= bitmap_plot_bit[<x]
    // [176] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1] -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    sta (plotter),y
    // bitmap_plot::@return
    // }
    // [177] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($25) dividend, word zp($12) rem)
divr16u: {
    .label rem = $12
    .label dividend = $25
    .label quotient = $14
    .label return = $14
    // [179] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [179] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [179] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [179] phi divr16u::dividend#3 = divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [179] phi divr16u::rem#5 = divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    // [179] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [179] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [179] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [179] phi divr16u::dividend#3 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [179] phi divr16u::rem#5 = divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [180] divr16u::rem#0 = divr16u::rem#5 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // >dividend
    // [181] divr16u::$1 = > divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // >dividend & $80
    // [182] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (>dividend & $80) != 0 )
    // [183] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [184] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [185] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [185] phi divr16u::rem#6 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [186] divr16u::dividend#0 = divr16u::dividend#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [187] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [188] if(divr16u::rem#6<SIN_SIZE) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>SIN_SIZE
    bcc __b3
    bne !+
    lda.z rem
    cmp #<SIN_SIZE
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [189] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [190] divr16u::rem#2 = divr16u::rem#6 - SIN_SIZE -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<SIN_SIZE
    sta.z rem
    lda.z rem+1
    sbc #>SIN_SIZE
    sta.z rem+1
    // [191] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [191] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [191] phi divr16u::rem#11 = divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [192] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [193] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@6
    // rem16u = rem
    // [194] rem16u#0 = divr16u::rem#11
    // divr16u::@return
    // }
    // [195] return 
    rts
}
  // mulu16_sel
// Calculate val*val for two unsigned int values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zp($25) v1, word zp($14) v2, byte register(X) select)
mulu16_sel: {
    .label __0 = $e
    .label __1 = $e
    .label v1 = $25
    .label v2 = $14
    .label return = $23
    .label return_1 = $25
    // mul16u(v1, v2)
    // [197] mul16u::a#2 = mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda.z v1
    sta.z mul16u.a
    lda.z v1+1
    sta.z mul16u.a+1
    // [198] mul16u::b#1 = mulu16_sel::v2#5
    // [199] call mul16u 
    // [205] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
    // [205] phi mul16u::a#6 = mul16u::a#2 [phi:mulu16_sel->mul16u#0] -- register_copy 
    // [205] phi mul16u::b#2 = mul16u::b#1 [phi:mulu16_sel->mul16u#1] -- register_copy 
    jsr mul16u
    // mul16u(v1, v2)
    // [200] mul16u::return#3 = mul16u::res#2
    // mulu16_sel::@1
    // [201] mulu16_sel::$0 = mul16u::return#3
    // mul16u(v1, v2)<<select
    // [202] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    rol.z __1+2
    rol.z __1+3
    dex
    bne !-
  !e:
    // >mul16u(v1, v2)<<select
    // [203] mulu16_sel::return#12 = > mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda.z __1+2
    sta.z return
    lda.z __1+3
    sta.z return+1
    // mulu16_sel::@return
    // }
    // [204] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($1b) a, word zp($14) b)
mul16u: {
    .label mb = $1d
    .label a = $1b
    .label res = $e
    .label return = $e
    .label b = $14
    // mb = b
    // [206] mul16u::mb#0 = (dword)mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [207] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
    // [207] phi mul16u::mb#2 = mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [207] phi mul16u::res#2 = 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    sta.z res
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [207] phi mul16u::a#3 = mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    // mul16u::@1
  __b1:
    // while(a!=0)
    // [208] if(mul16u::a#3!=0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    ora.z a+1
    bne __b2
    // mul16u::@return
    // }
    // [209] return 
    rts
    // mul16u::@2
  __b2:
    // a&1
    // [210] mul16u::$1 = mul16u::a#3 & 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // if( (a&1) != 0)
    // [211] if(mul16u::$1==0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul16u::@4
    // res = res + mb
    // [212] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [213] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
    // [213] phi mul16u::res#6 = mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    // mul16u::@3
  __b3:
    // a = a>>1
    // [214] mul16u::a#0 = mul16u::a#3 >> 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // mb = mb<<1
    // [215] mul16u::mb#1 = mul16u::mb#2 << 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [207] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
    // [207] phi mul16u::mb#2 = mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [207] phi mul16u::res#2 = mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [207] phi mul16u::a#3 = mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  .align $100
  sin: .fill 2*$200, 0
sin2:
.for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }


