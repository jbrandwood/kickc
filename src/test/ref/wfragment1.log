Fixing pointer array-indexing *((word[MAX_OBJECTS]) OBJ_WORLD_X + (byte) move_enemy::obj_slot)
Fixing pointer array-indexing *((word[MAX_OBJECTS]) OBJ_WORLD_X + (byte) move_enemy::obj_slot)

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@19
@19: scope:[]  from @begin
  (byte) MAX_OBJECTS#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 ← { fill( MAX_OBJECTS#0, 0) }
  to:@22
main: scope:[main]  from @22
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (byte) move_enemy::obj_slot#0 ← (byte) main::i#2
  call move_enemy 
  (bool) move_enemy::return#0 ← (bool) move_enemy::return#2
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,5)
  (bool~) main::$1 ← (byte) main::i#1 != rangelast(0,5)
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
move_enemy: scope:[move_enemy]  from main::@1
  (byte) move_enemy::obj_slot#1 ← phi( main::@1/(byte) move_enemy::obj_slot#0 )
  (byte) move_enemy::$0 ← (byte) move_enemy::obj_slot#1 * (const byte) SIZEOF_WORD
  *((word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) ← *((word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) - (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool) move_enemy::return#1 ← true
  to:move_enemy::@return
move_enemy::@return: scope:[move_enemy]  from move_enemy
  (bool) move_enemy::return#3 ← phi( move_enemy/(bool) move_enemy::return#1 )
  (bool) move_enemy::return#2 ← (bool) move_enemy::return#3
  return 
  to:@return
@22: scope:[]  from @19
  call main 
  to:@23
@23: scope:[]  from @22
  to:@end
@end: scope:[]  from @23

SYMBOL TABLE SSA
(label) @19
(label) @22
(label) @23
(label) @begin
(label) @end
(byte) MAX_OBJECTS
(byte) MAX_OBJECTS#0
(word[MAX_OBJECTS#0]) OBJ_WORLD_X
(word[MAX_OBJECTS#0]) OBJ_WORLD_X#0
(const byte) SIZEOF_WORD = (byte/signed byte/word/signed word/dword/signed dword) 2
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(bool()) move_enemy((byte) move_enemy::obj_slot)
(byte) move_enemy::$0
(label) move_enemy::@return
(byte) move_enemy::obj_slot
(byte) move_enemy::obj_slot#0
(byte) move_enemy::obj_slot#1
(bool) move_enemy::return
(bool) move_enemy::return#0
(bool) move_enemy::return#1
(bool) move_enemy::return#2
(bool) move_enemy::return#3

Culled Empty Block (label) @23
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (bool) move_enemy::return#1 = (bool) move_enemy::return#3 (bool) move_enemy::return#2 
Successful SSA optimization Pass2AliasElimination
Redundant Phi (byte) move_enemy::obj_slot#1 (byte) move_enemy::obj_slot#0
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) main::$1 [10] if((byte) main::i#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) MAX_OBJECTS#0 = $10
Constant (const byte) main::i#0 = 0
Constant (const bool) move_enemy::return#1 = true
Successful SSA optimization Pass2ConstantIdentification
Constant (const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 = { fill( MAX_OBJECTS#0, 0) }
Constant (const bool) move_enemy::return#0 = move_enemy::return#1
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const bool) move_enemy::return#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const bool) move_enemy::return#1
Successful SSA optimization PassNEliminateUnusedVars
Resolved ranged next value main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value if(main::i#1!=rangelast(0,5)) goto main::@1 to (byte/signed byte/word/signed word/dword/signed dword) 6
Rewriting multiplication to use shift (byte) move_enemy::$0 ← (byte) move_enemy::obj_slot#0 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Culled Empty Block (label) @19
Successful SSA optimization Pass2CullEmptyBlocks
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @22
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to move_enemy:7 

Created 1 initial phi equivalence classes
Coalesced [11] main::i#4 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@4
Renumbering block @22 to @1
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@2/(byte) main::i#1 )
  [6] (byte) move_enemy::obj_slot#0 ← (byte) main::i#2
  [7] call move_enemy 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (byte) main::i#1 ← ++ (byte) main::i#2
  [9] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return
move_enemy: scope:[move_enemy]  from main::@1
  [11] (byte) move_enemy::$0 ← (byte) move_enemy::obj_slot#0 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [12] *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) ← *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) - (byte/signed byte/word/signed word/dword/signed dword) 1
  to:move_enemy::@return
move_enemy::@return: scope:[move_enemy]  from move_enemy
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) MAX_OBJECTS
(word[MAX_OBJECTS#0]) OBJ_WORLD_X
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0
(bool()) move_enemy((byte) move_enemy::obj_slot)
(byte) move_enemy::$0 6.0
(byte) move_enemy::obj_slot
(byte) move_enemy::obj_slot#0 13.0
(bool) move_enemy::return

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable move_enemy::obj_slot#0 to zero page equivalence class [ move_enemy::obj_slot#0 ]
Added variable move_enemy::$0 to zero page equivalence class [ move_enemy::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ move_enemy::obj_slot#0 ]
[ move_enemy::$0 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ move_enemy::obj_slot#0 ]
Allocated zp ZP_BYTE:4 [ move_enemy::$0 ]

INITIAL ASM
//SEG0 File Comments
// Adding a missing word-fragment for Travis Fisher
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const MAX_OBJECTS = $10
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label i = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte) move_enemy::obj_slot#0 ← (byte) main::i#2 -- vbuz1=vbuz2 
    lda i
    sta move_enemy.obj_slot
  //SEG17 [7] call move_enemy 
    jsr move_enemy
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [8] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG20 [9] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp i
    bne b1_from_b2
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [10] return 
    rts
}
//SEG23 move_enemy
// move_enemy(byte zeropage(3) obj_slot)
move_enemy: {
    .label _0 = 4
    .label obj_slot = 3
  //SEG24 [11] (byte) move_enemy::$0 ← (byte) move_enemy::obj_slot#0 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda obj_slot
    asl
    sta _0
  //SEG25 [12] *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) ← *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) - (byte/signed byte/word/signed word/dword/signed dword) 1 -- pwuc1_derefidx_vbuz1=pwuc1_derefidx_vbuz1_minus_1 
    ldx _0
    lda OBJ_WORLD_X,x
    bne !+
    dec OBJ_WORLD_X+1,x
  !:
    dec OBJ_WORLD_X,x
    jmp breturn
  //SEG26 move_enemy::@return
  breturn:
  //SEG27 [13] return 
    rts
}
  OBJ_WORLD_X: .fill 2*MAX_OBJECTS, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] (byte) move_enemy::$0 ← (byte) move_enemy::obj_slot#0 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ move_enemy::$0 ] ( main:2::move_enemy:7 [ main::i#2 move_enemy::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [12] *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) ← *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) - (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::move_enemy:7 [ main::i#2 ] ) always clobbers reg byte a 
Statement [11] (byte) move_enemy::$0 ← (byte) move_enemy::obj_slot#0 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ move_enemy::$0 ] ( main:2::move_enemy:7 [ main::i#2 move_enemy::$0 ] ) always clobbers reg byte a 
Statement [12] *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) ← *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) - (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::move_enemy:7 [ main::i#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ move_enemy::obj_slot#0 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ move_enemy::$0 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [move_enemy] 13: zp ZP_BYTE:3 [ move_enemy::obj_slot#0 ] 6: zp ZP_BYTE:4 [ move_enemy::$0 ] 
Uplift Scope [] 

Uplifting [main] best 354 combination reg byte y [ main::i#2 main::i#1 ] 
Uplifting [move_enemy] best 319 combination reg byte y [ move_enemy::obj_slot#0 ] reg byte a [ move_enemy::$0 ] 
Uplifting [] best 319 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Adding a missing word-fragment for Travis Fisher
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const MAX_OBJECTS = $10
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte) move_enemy::obj_slot#0 ← (byte) main::i#2
  //SEG17 [7] call move_enemy 
    jsr move_enemy
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [8] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG20 [9] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #6
    bne b1_from_b2
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [10] return 
    rts
}
//SEG23 move_enemy
// move_enemy(byte register(Y) obj_slot)
move_enemy: {
  //SEG24 [11] (byte) move_enemy::$0 ← (byte) move_enemy::obj_slot#0 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuyy_rol_1 
    tya
    asl
  //SEG25 [12] *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) ← *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) - (byte/signed byte/word/signed word/dword/signed dword) 1 -- pwuc1_derefidx_vbuaa=pwuc1_derefidx_vbuaa_minus_1 
    tax
    lda OBJ_WORLD_X,x
    bne !+
    dec OBJ_WORLD_X+1,x
  !:
    dec OBJ_WORLD_X,x
    jmp breturn
  //SEG26 move_enemy::@return
  breturn:
  //SEG27 [13] return 
    rts
}
  OBJ_WORLD_X: .fill 2*MAX_OBJECTS, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b2 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) MAX_OBJECTS
(const byte) MAX_OBJECTS#0 MAX_OBJECTS = (byte/signed byte/word/signed word/dword/signed dword) $10
(word[MAX_OBJECTS#0]) OBJ_WORLD_X
(const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 OBJ_WORLD_X = { fill( MAX_OBJECTS#0, 0) }
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 11.0
(bool()) move_enemy((byte) move_enemy::obj_slot)
(byte) move_enemy::$0 reg byte a 6.0
(label) move_enemy::@return
(byte) move_enemy::obj_slot
(byte) move_enemy::obj_slot#0 reg byte y 13.0
(bool) move_enemy::return

reg byte y [ main::i#2 main::i#1 ]
reg byte y [ move_enemy::obj_slot#0 ]
reg byte a [ move_enemy::$0 ]


FINAL ASSEMBLER
Score: 184

//SEG0 File Comments
// Adding a missing word-fragment for Travis Fisher
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const MAX_OBJECTS = $10
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte) move_enemy::obj_slot#0 ← (byte) main::i#2
  //SEG17 [7] call move_enemy 
    jsr move_enemy
  //SEG18 main::@2
  //SEG19 [8] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG20 [9] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #6
    bne b1
  //SEG21 main::@return
  //SEG22 [10] return 
    rts
}
//SEG23 move_enemy
// move_enemy(byte register(Y) obj_slot)
move_enemy: {
  //SEG24 [11] (byte) move_enemy::$0 ← (byte) move_enemy::obj_slot#0 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuyy_rol_1 
    tya
    asl
  //SEG25 [12] *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) ← *((const word[MAX_OBJECTS#0]) OBJ_WORLD_X#0 + (byte) move_enemy::$0) - (byte/signed byte/word/signed word/dword/signed dword) 1 -- pwuc1_derefidx_vbuaa=pwuc1_derefidx_vbuaa_minus_1 
    tax
    lda OBJ_WORLD_X,x
    bne !+
    dec OBJ_WORLD_X+1,x
  !:
    dec OBJ_WORLD_X,x
  //SEG26 move_enemy::@return
  //SEG27 [13] return 
    rts
}
  OBJ_WORLD_X: .fill 2*MAX_OBJECTS, 0

