@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:@2
@2: scope:[]  from @1
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @2
  [7] phi()

(void()) main()
main: scope:[main]  from @2
  [8] phi()
  [9] call memset 
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [10] (byte*) main::sc#8 ← phi( main::@5/(byte*) main::sc#10 main/(const nomodify byte*) SCREEN )
  [10] (word) main::count#11 ← phi( main::@5/(word) main::count#10 main/(word) 0 )
  [10] (signed byte) main::y#2 ← phi( main::@5/(signed byte) main::y#1 main/(signed byte) 0 )
  [11] if((signed byte) main::y#2<(signed byte) $19) goto main::@3
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call gotoxy 
  to:main::@8
main::@8: scope:[main]  from main::@2
  [14] (word) printf_uint::uvalue#0 ← (word) main::count#11
  [15] call printf_uint 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [16] phi()
  [17] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@9
  [18] return 
  to:@return
main::@3: scope:[main]  from main::@1 main::@6
  [19] (word) main::count#10 ← phi( main::@1/(word) main::count#11 main::@6/(word) main::count#12 )
  [19] (byte*) main::sc#10 ← phi( main::@1/(byte*) main::sc#8 main::@6/(byte*) main::sc#1 )
  [19] (signed byte) main::x#2 ← phi( main::@1/(signed byte) 0 main::@6/(signed byte) main::x#1 )
  [20] if((signed byte) main::x#2<(signed byte) $28) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3
  [21] (signed byte) main::y#1 ← ++ (signed byte) main::y#2
  to:main::@1
main::@4: scope:[main]  from main::@3
  [22] (signed byte~) main::$5 ← (signed byte) main::x#2 << (byte) 1
  [23] (signed byte) main::xd#0 ← (signed byte~) main::$5 - (signed byte) $27
  [24] (signed byte~) main::$7 ← (signed byte) main::y#2 << (byte) 1
  [25] (signed byte) main::yd#0 ← (signed byte~) main::$7 - (signed byte) $18
  [26] (signed byte) mul8s::a#0 ← (signed byte) main::xd#0
  [27] (signed byte) mul8s::b#0 ← (signed byte) main::xd#0
  [28] call mul8s 
  to:main::@10
main::@10: scope:[main]  from main::@4
  [29] (signed word~) main::$9 ← (signed word)(word) mul8s::m#4
  [30] (signed byte) mul8s::a#1 ← (signed byte) main::yd#0
  [31] (signed byte) mul8s::b#1 ← (signed byte) main::yd#0
  [32] call mul8s 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [33] (signed word~) main::$10 ← (signed word)(word) mul8s::m#4
  [34] (signed word) main::dist_sq#0 ← (signed word~) main::$9 + (signed word~) main::$10
  [35] if((signed word) main::dist_sq#0>=(signed word)(number) 2*(number) 9*(number) 2*(number) 9) goto main::@6
  to:main::@7
main::@7: scope:[main]  from main::@11
  [36] *((byte*) main::sc#10) ← (byte) '*'
  [37] (word) main::count#1 ← ++ (word) main::count#10
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@7
  [38] (word) main::count#12 ← phi( main::@11/(word) main::count#10 main::@7/(word) main::count#1 )
  [39] (byte*) main::sc#1 ← ++ (byte*) main::sc#10
  [40] (signed byte) main::x#1 ← ++ (signed byte) main::x#2
  to:main::@3

(signed word()) mul8s((signed byte) mul8s::a , (signed byte) mul8s::b)
mul8s: scope:[mul8s]  from main::@10 main::@4
  [41] (signed byte) mul8s::b#2 ← phi( main::@10/(signed byte) mul8s::b#1 main::@4/(signed byte) mul8s::b#0 )
  [41] (signed byte) mul8s::a#2 ← phi( main::@10/(signed byte) mul8s::a#1 main::@4/(signed byte) mul8s::a#0 )
  [42] (byte) mul8u::a#1 ← (byte)(signed byte) mul8s::a#2
  [43] (byte) mul8u::b#0 ← (byte)(signed byte) mul8s::b#2
  [44] call mul8u 
  [45] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mul8s::@5
mul8s::@5: scope:[mul8s]  from mul8s
  [46] (word) mul8s::m#0 ← (word) mul8u::return#2
  [47] if((signed byte) mul8s::a#2>=(signed byte) 0) goto mul8s::@1
  to:mul8s::@3
mul8s::@3: scope:[mul8s]  from mul8s::@5
  [48] (byte~) mul8s::$6 ← > (word) mul8s::m#0
  [49] (byte~) mul8s::$11 ← (byte~) mul8s::$6 - (byte)(signed byte) mul8s::b#2
  [50] (word) mul8s::m#1 ← (word) mul8s::m#0 hi= (byte~) mul8s::$11
  to:mul8s::@1
mul8s::@1: scope:[mul8s]  from mul8s::@3 mul8s::@5
  [51] (word) mul8s::m#5 ← phi( mul8s::@3/(word) mul8s::m#1 mul8s::@5/(word) mul8s::m#0 )
  [52] if((signed byte) mul8s::b#2>=(signed byte) 0) goto mul8s::@2
  to:mul8s::@4
mul8s::@4: scope:[mul8s]  from mul8s::@1
  [53] (byte~) mul8s::$9 ← > (word) mul8s::m#5
  [54] (byte~) mul8s::$12 ← (byte~) mul8s::$9 - (byte)(signed byte) mul8s::a#2
  [55] (word) mul8s::m#2 ← (word) mul8s::m#5 hi= (byte~) mul8s::$12
  to:mul8s::@2
mul8s::@2: scope:[mul8s]  from mul8s::@1 mul8s::@4
  [56] (word) mul8s::m#4 ← phi( mul8s::@1/(word) mul8s::m#5 mul8s::@4/(word) mul8s::m#2 )
  to:mul8s::@return
mul8s::@return: scope:[mul8s]  from mul8s::@2
  [57] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mul8s
  [58] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [59] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [59] (word) mul8u::res#2 ← phi( mul8u/(word) 0 mul8u::@3/(word) mul8u::res#6 )
  [59] (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#1 mul8u::@3/(byte) mul8u::a#0 )
  [60] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [61] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [62] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1
  [63] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [64] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [65] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [66] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1
  [67] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@9 printf_number_buffer::@2
  [68] (to_nomodify byte*) cputs::s#4 ← phi( main::@9/(const byte*) main::s printf_number_buffer::@2/(const byte*) printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [69] (to_nomodify byte*) cputs::s#3 ← phi( cputs/(to_nomodify byte*) cputs::s#4 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [70] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#3)
  [71] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#3
  [72] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [73] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [74] (byte) cputc::c#0 ← (byte) cputs::c#1
  [75] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [76] (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@3/(byte) cputc::c#2 )
  [77] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [78] *((byte*) conio_cursor_text) ← (byte) cputc::c#3
  [79] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [80] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [81] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [82] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [83] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [84] (byte) conio_cursor_x ← (byte) 0
  [85] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [86] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [87] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [88] phi()
  [89] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [90] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x
  [91] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0
  [92] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [93] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0
  [94] (byte*) conio_cursor_color ← (byte*~) cputln::$2
  [95] (byte) conio_cursor_x ← (byte) 0
  [96] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [97] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [98] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [99] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [100] phi()
  [101] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [102] phi()
  [103] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [104] phi()
  [105] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [106] phi()
  [107] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [108] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [109] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [110] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [111] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [112] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [113] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4 main
  [114] (byte) memset::c#5 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT main/(byte) ' ' )
  [114] (void*) memset::str#4 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 main/(void*)(const nomodify byte*) SCREEN )
  [114] (word) memset::num#3 ← phi( cscroll::@3/(byte) $28 cscroll::@4/(byte) $28 main/(word) $3e8 )
  [115] if((word) memset::num#3<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [116] (byte*) memset::end#0 ← (byte*)(void*) memset::str#4 + (word) memset::num#3
  [117] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#4
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [118] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [119] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [120] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [121] *((byte*) memset::dst#2) ← (byte) memset::c#5
  [122] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [123] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [123] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [124] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [125] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [126] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [127] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [127] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [128] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [129] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [130] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [131] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [132] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@8
  [133] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [134] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [135] (word) utoa::value#1 ← (word) printf_uint::uvalue#0
  [136] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [137] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [138] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [139] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [140] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [141] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [142] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0
  [143] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [144] phi()
  [145] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [146] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [147] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [148] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [148] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [148] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [148] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [149] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [150] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [151] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [152] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [153] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [154] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [155] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [156] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [157] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [158] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [159] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [159] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [159] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [160] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [161] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [162] (word) utoa_append::value#0 ← (word) utoa::value#2
  [163] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [164] call utoa_append 
  [165] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [166] (word) utoa::value#0 ← (word) utoa_append::return#0
  [167] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [168] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [169] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [169] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [170] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [171] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [172] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [173] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [174] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@2
  [175] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [176] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [177] (byte) conio_cursor_y ← (const byte) gotoxy::y#2
  [178] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [179] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  [180] return 
  to:@return
