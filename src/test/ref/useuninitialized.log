Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte) b#5 ← phi( _start::@1/(byte) b#9 )
  (number~) main::$0 ← (byte) b#5 + (number) 1
  (byte) s#0 ← (number~) main::$0
  (byte) b#0 ← (number) 3
  *((const byte*) main::screen) ← (byte) b#0
  (byte*~) main::$1 ← (const byte*) main::screen + (number) 1
  *((byte*~) main::$1) ← (byte) s#0
  to:main::@return
main::@return: scope:[main]  from main
  (byte) b#6 ← phi( main/(byte) b#0 )
  (byte) s#5 ← phi( main/(byte) s#0 )
  (byte) s#1 ← (byte) s#5
  (byte) b#1 ← (byte) b#6
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte) b#2 ← (byte) 0
  (byte) s#2 ← (byte) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte) s#8 ← phi( _start::_init1/(byte) s#2 )
  (byte) b#9 ← phi( _start::_init1/(byte) b#2 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte) b#7 ← phi( _start::@1/(byte) b#1 )
  (byte) s#6 ← phi( _start::@1/(byte) s#1 )
  (byte) s#3 ← (byte) s#6
  (byte) b#3 ← (byte) b#7
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte) s#7 ← phi( _start::@2/(byte) s#3 )
  (byte) b#8 ← phi( _start::@2/(byte) b#3 )
  (byte) b#4 ← (byte) b#8
  (byte) s#4 ← (byte) s#7
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(byte) b
(byte) b#0
(byte) b#1
(byte) b#2
(byte) b#3
(byte) b#4
(byte) b#5
(byte) b#6
(byte) b#7
(byte) b#8
(byte) b#9
(void()) main()
(number~) main::$0
(byte*~) main::$1
(label) main::@return
(const byte*) main::screen = (byte*)(number) $400
(byte) s
(byte) s#0
(byte) s#1
(byte) s#2
(byte) s#3
(byte) s#4
(byte) s#5
(byte) s#6
(byte) s#7
(byte) s#8

Adding number conversion cast (unumber) 1 in (number~) main::$0 ← (byte) b#5 + (number) 1
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (byte) b#5 + (unumber)(number) 1
Adding number conversion cast (unumber) 3 in (byte) b#0 ← (number) 3
Adding number conversion cast (unumber) 1 in (byte*~) main::$1 ← (const byte*) main::screen + (number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) b#0 ← (unumber)(number) 3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) b#5 + (byte) 1
Alias s#0 = main::$0 s#5 s#1 
Alias b#0 = b#6 b#1 
Alias b#2 = b#9 
Alias s#2 = s#8 
Alias s#3 = s#6 s#7 s#4 
Alias b#3 = b#7 b#8 b#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) b#5 (byte) b#2
Identical Phi Values (byte) s#3 (byte) s#0
Identical Phi Values (byte) b#3 (byte) b#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [4] (byte*~) main::$1 ← (const byte*) main::screen + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) b#0 = 3
Constant (const byte*) main::$1 = main::screen+1
Constant (const byte) b#2 = 0
Constant (const byte) s#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero 1 in [1] (byte) s#0 ← (const byte) b#2 + (byte) 1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) b#2
Eliminating unused constant (const byte) s#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant (const byte) s#0 = 1
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$1 = (const byte*) main::screen+(byte) 1
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) main::screen) ← (const byte) b#0
  [1] *((const byte*) main::screen+(byte) 1) ← (const byte) s#0
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) b
(void()) main()
(byte) s

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Use an uninitialized variable - should use the default value (0)!
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 3
  .const s = 1
  // main
main: {
    .label screen = $400
    // [0] *((const byte*) main::screen) ← (const byte) b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    // [1] *((const byte*) main::screen+(byte) 1) ← (const byte) s#0 -- _deref_pbuc1=vbuc2 
    lda #s
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) main::screen) ← (const byte) b#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const byte*) main::screen+(byte) 1) ← (const byte) s#0 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Use an uninitialized variable - should use the default value (0)!
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 3
  .const s = 1
  // main
main: {
    .label screen = $400
    // [0] *((const byte*) main::screen) ← (const byte) b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    // [1] *((const byte*) main::screen+(byte) 1) ← (const byte) s#0 -- _deref_pbuc1=vbuc2 
    lda #s
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(byte) b
(const byte) b#0 b = (byte) 3
(void()) main()
(label) main::@return
(const byte*) main::screen = (byte*) 1024
(byte) s
(const byte) s#0 s = (byte) 1



FINAL ASSEMBLER
Score: 18

  // File Comments
// Use an uninitialized variable - should use the default value (0)!
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 3
  .const s = 1
  // main
main: {
    .label screen = $400
    // *screen = b
    // [0] *((const byte*) main::screen) ← (const byte) b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    // *(screen+1) = s
    // [1] *((const byte*) main::screen+(byte) 1) ← (const byte) s#0 -- _deref_pbuc1=vbuc2 
    lda #s
    sta screen+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

