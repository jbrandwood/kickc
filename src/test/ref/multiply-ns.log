Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte*~) main::$0 ← (byte*) main::SCREEN#0 + (number) 0*(number) $28
  (number~) main::$1 ← (byte) main::i#2 * (number) 1
  *((byte*~) main::$0 + (byte) main::i#2) ← (number~) main::$1
  (byte*~) main::$2 ← (byte*) main::SCREEN#0 + (number) 1*(number) $28
  (number~) main::$3 ← (byte) main::i#2 * (number) 2
  *((byte*~) main::$2 + (byte) main::i#2) ← (number~) main::$3
  (byte*~) main::$4 ← (byte*) main::SCREEN#0 + (number) 2*(number) $28
  (number~) main::$5 ← (byte) main::i#2 * (number) 3
  *((byte*~) main::$4 + (byte) main::i#2) ← (number~) main::$5
  (byte*~) main::$6 ← (byte*) main::SCREEN#0 + (number) 3*(number) $28
  (number~) main::$7 ← (byte) main::i#2 * (number) 4
  *((byte*~) main::$6 + (byte) main::i#2) ← (number~) main::$7
  (byte*~) main::$8 ← (byte*) main::SCREEN#0 + (number) 4*(number) $28
  (number~) main::$9 ← (byte) main::i#2 * (number) 5
  *((byte*~) main::$8 + (byte) main::i#2) ← (number~) main::$9
  (byte*~) main::$10 ← (byte*) main::SCREEN#0 + (number) 5*(number) $28
  (number~) main::$11 ← (byte) main::i#2 * (number) 6
  *((byte*~) main::$10 + (byte) main::i#2) ← (number~) main::$11
  (byte*~) main::$12 ← (byte*) main::SCREEN#0 + (number) 6*(number) $28
  (number~) main::$13 ← (byte) main::i#2 * (number) 7
  *((byte*~) main::$12 + (byte) main::i#2) ← (number~) main::$13
  (byte*~) main::$14 ← (byte*) main::SCREEN#0 + (number) 7*(number) $28
  (number~) main::$15 ← (byte) main::i#2 * (number) 8
  *((byte*~) main::$14 + (byte) main::i#2) ← (number~) main::$15
  (byte*~) main::$16 ← (byte*) main::SCREEN#0 + (number) 8*(number) $28
  (number~) main::$17 ← (byte) main::i#2 * (number) 9
  *((byte*~) main::$16 + (byte) main::i#2) ← (number~) main::$17
  (byte*~) main::$18 ← (byte*) main::SCREEN#0 + (number) 9*(number) $28
  (number~) main::$19 ← (byte) main::i#2 * (number) $a
  *((byte*~) main::$18 + (byte) main::i#2) ← (number~) main::$19
  (byte*~) main::$20 ← (byte*) main::SCREEN#0 + (number) $a*(number) $28
  (number~) main::$21 ← (byte) main::i#2 * (number) $b
  *((byte*~) main::$20 + (byte) main::i#2) ← (number~) main::$21
  (byte*~) main::$22 ← (byte*) main::SCREEN#0 + (number) $b*(number) $28
  (number~) main::$23 ← (byte) main::i#2 * (number) $c
  *((byte*~) main::$22 + (byte) main::i#2) ← (number~) main::$23
  (byte*~) main::$24 ← (byte*) main::SCREEN#0 + (number) $c*(number) $28
  (number~) main::$25 ← (byte) main::i#2 * (number) $d
  *((byte*~) main::$24 + (byte) main::i#2) ← (number~) main::$25
  (byte*~) main::$26 ← (byte*) main::SCREEN#0 + (number) $d*(number) $28
  (number~) main::$27 ← (byte) main::i#2 * (number) $e
  *((byte*~) main::$26 + (byte) main::i#2) ← (number~) main::$27
  (byte*~) main::$28 ← (byte*) main::SCREEN#0 + (number) $e*(number) $28
  (number~) main::$29 ← (byte) main::i#2 * (number) $f
  *((byte*~) main::$28 + (byte) main::i#2) ← (number~) main::$29
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$11)
  (bool~) main::$30 ← (byte) main::i#1 != rangelast(0,$11)
  if((bool~) main::$30) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte*~) main::$0
(number~) main::$1
(byte*~) main::$10
(number~) main::$11
(byte*~) main::$12
(number~) main::$13
(byte*~) main::$14
(number~) main::$15
(byte*~) main::$16
(number~) main::$17
(byte*~) main::$18
(number~) main::$19
(byte*~) main::$2
(byte*~) main::$20
(number~) main::$21
(byte*~) main::$22
(number~) main::$23
(byte*~) main::$24
(number~) main::$25
(byte*~) main::$26
(number~) main::$27
(byte*~) main::$28
(number~) main::$29
(number~) main::$3
(bool~) main::$30
(byte*~) main::$4
(number~) main::$5
(byte*~) main::$6
(number~) main::$7
(byte*~) main::$8
(number~) main::$9
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2

Adding number conversion cast (unumber) 0*$28 in (byte*~) main::$0 ← (byte*) main::SCREEN#0 + (number) 0*(number) $28
Adding number conversion cast (unumber) 1 in (number~) main::$1 ← (byte) main::i#2 * (number) 1
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) main::i#2 * (unumber)(number) 1
Adding number conversion cast (unumber) 1*$28 in (byte*~) main::$2 ← (byte*) main::SCREEN#0 + (number) 1*(number) $28
Adding number conversion cast (unumber) 2 in (number~) main::$3 ← (byte) main::i#2 * (number) 2
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← (byte) main::i#2 * (unumber)(number) 2
Adding number conversion cast (unumber) 2*$28 in (byte*~) main::$4 ← (byte*) main::SCREEN#0 + (number) 2*(number) $28
Adding number conversion cast (unumber) 3 in (number~) main::$5 ← (byte) main::i#2 * (number) 3
Adding number conversion cast (unumber) main::$5 in (number~) main::$5 ← (byte) main::i#2 * (unumber)(number) 3
Adding number conversion cast (unumber) 3*$28 in (byte*~) main::$6 ← (byte*) main::SCREEN#0 + (number) 3*(number) $28
Adding number conversion cast (unumber) 4 in (number~) main::$7 ← (byte) main::i#2 * (number) 4
Adding number conversion cast (unumber) main::$7 in (number~) main::$7 ← (byte) main::i#2 * (unumber)(number) 4
Adding number conversion cast (unumber) 4*$28 in (byte*~) main::$8 ← (byte*) main::SCREEN#0 + (number) 4*(number) $28
Adding number conversion cast (unumber) 5 in (number~) main::$9 ← (byte) main::i#2 * (number) 5
Adding number conversion cast (unumber) main::$9 in (number~) main::$9 ← (byte) main::i#2 * (unumber)(number) 5
Adding number conversion cast (unumber) 5*$28 in (byte*~) main::$10 ← (byte*) main::SCREEN#0 + (number) 5*(number) $28
Adding number conversion cast (unumber) 6 in (number~) main::$11 ← (byte) main::i#2 * (number) 6
Adding number conversion cast (unumber) main::$11 in (number~) main::$11 ← (byte) main::i#2 * (unumber)(number) 6
Adding number conversion cast (unumber) 6*$28 in (byte*~) main::$12 ← (byte*) main::SCREEN#0 + (number) 6*(number) $28
Adding number conversion cast (unumber) 7 in (number~) main::$13 ← (byte) main::i#2 * (number) 7
Adding number conversion cast (unumber) main::$13 in (number~) main::$13 ← (byte) main::i#2 * (unumber)(number) 7
Adding number conversion cast (unumber) 7*$28 in (byte*~) main::$14 ← (byte*) main::SCREEN#0 + (number) 7*(number) $28
Adding number conversion cast (unumber) 8 in (number~) main::$15 ← (byte) main::i#2 * (number) 8
Adding number conversion cast (unumber) main::$15 in (number~) main::$15 ← (byte) main::i#2 * (unumber)(number) 8
Adding number conversion cast (unumber) 8*$28 in (byte*~) main::$16 ← (byte*) main::SCREEN#0 + (number) 8*(number) $28
Adding number conversion cast (unumber) 9 in (number~) main::$17 ← (byte) main::i#2 * (number) 9
Adding number conversion cast (unumber) main::$17 in (number~) main::$17 ← (byte) main::i#2 * (unumber)(number) 9
Adding number conversion cast (unumber) 9*$28 in (byte*~) main::$18 ← (byte*) main::SCREEN#0 + (number) 9*(number) $28
Adding number conversion cast (unumber) $a in (number~) main::$19 ← (byte) main::i#2 * (number) $a
Adding number conversion cast (unumber) main::$19 in (number~) main::$19 ← (byte) main::i#2 * (unumber)(number) $a
Adding number conversion cast (unumber) $a*$28 in (byte*~) main::$20 ← (byte*) main::SCREEN#0 + (number) $a*(number) $28
Adding number conversion cast (unumber) $b in (number~) main::$21 ← (byte) main::i#2 * (number) $b
Adding number conversion cast (unumber) main::$21 in (number~) main::$21 ← (byte) main::i#2 * (unumber)(number) $b
Adding number conversion cast (unumber) $b*$28 in (byte*~) main::$22 ← (byte*) main::SCREEN#0 + (number) $b*(number) $28
Adding number conversion cast (unumber) $c in (number~) main::$23 ← (byte) main::i#2 * (number) $c
Adding number conversion cast (unumber) main::$23 in (number~) main::$23 ← (byte) main::i#2 * (unumber)(number) $c
Adding number conversion cast (unumber) $c*$28 in (byte*~) main::$24 ← (byte*) main::SCREEN#0 + (number) $c*(number) $28
Adding number conversion cast (unumber) $d in (number~) main::$25 ← (byte) main::i#2 * (number) $d
Adding number conversion cast (unumber) main::$25 in (number~) main::$25 ← (byte) main::i#2 * (unumber)(number) $d
Adding number conversion cast (unumber) $d*$28 in (byte*~) main::$26 ← (byte*) main::SCREEN#0 + (number) $d*(number) $28
Adding number conversion cast (unumber) $e in (number~) main::$27 ← (byte) main::i#2 * (number) $e
Adding number conversion cast (unumber) main::$27 in (number~) main::$27 ← (byte) main::i#2 * (unumber)(number) $e
Adding number conversion cast (unumber) $e*$28 in (byte*~) main::$28 ← (byte*) main::SCREEN#0 + (number) $e*(number) $28
Adding number conversion cast (unumber) $f in (number~) main::$29 ← (byte) main::i#2 * (number) $f
Adding number conversion cast (unumber) main::$29 in (number~) main::$29 ← (byte) main::i#2 * (unumber)(number) $f
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast $b
Simplifying constant integer cast $c
Simplifying constant integer cast $d
Simplifying constant integer cast $e
Simplifying constant integer cast $f
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $d
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) $f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$1 ← (byte) main::i#2 * (byte) 1
Inferred type updated to byte in (unumber~) main::$3 ← (byte) main::i#2 * (byte) 2
Inferred type updated to byte in (unumber~) main::$5 ← (byte) main::i#2 * (byte) 3
Inferred type updated to byte in (unumber~) main::$7 ← (byte) main::i#2 * (byte) 4
Inferred type updated to byte in (unumber~) main::$9 ← (byte) main::i#2 * (byte) 5
Inferred type updated to byte in (unumber~) main::$11 ← (byte) main::i#2 * (byte) 6
Inferred type updated to byte in (unumber~) main::$13 ← (byte) main::i#2 * (byte) 7
Inferred type updated to byte in (unumber~) main::$15 ← (byte) main::i#2 * (byte) 8
Inferred type updated to byte in (unumber~) main::$17 ← (byte) main::i#2 * (byte) 9
Inferred type updated to byte in (unumber~) main::$19 ← (byte) main::i#2 * (byte) $a
Inferred type updated to byte in (unumber~) main::$21 ← (byte) main::i#2 * (byte) $b
Inferred type updated to byte in (unumber~) main::$23 ← (byte) main::i#2 * (byte) $c
Inferred type updated to byte in (unumber~) main::$25 ← (byte) main::i#2 * (byte) $d
Inferred type updated to byte in (unumber~) main::$27 ← (byte) main::i#2 * (byte) $e
Inferred type updated to byte in (unumber~) main::$29 ← (byte) main::i#2 * (byte) $f
Simple Condition (bool~) main::$30 [50] if((byte) main::i#1!=rangelast(0,$11)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [48] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [50] if(main::i#1!=rangelast(0,$11)) goto main::@1 to (number) $12
Simplifying constant evaluating to zero (byte)(number) 0*(number) $28 in [3] (byte*~) main::$0 ← (const byte*) main::SCREEN#0 + (byte)(number) 0*(number) $28
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN#0 in [3] (byte*~) main::$0 ← (const byte*) main::SCREEN#0 + (byte) 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Adding number conversion cast (unumber) $12 in if((byte) main::i#1!=(number) $12) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $12
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $12
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [4] (byte*~) main::$2 ← (const byte*) main::SCREEN#0 + (byte)(number) 1*(number) $28
Constant right-side identified [7] (byte*~) main::$4 ← (const byte*) main::SCREEN#0 + (byte)(number) 2*(number) $28
Constant right-side identified [10] (byte*~) main::$6 ← (const byte*) main::SCREEN#0 + (byte)(number) 3*(number) $28
Constant right-side identified [13] (byte*~) main::$8 ← (const byte*) main::SCREEN#0 + (byte)(number) 4*(number) $28
Constant right-side identified [16] (byte*~) main::$10 ← (const byte*) main::SCREEN#0 + (byte)(number) 5*(number) $28
Constant right-side identified [19] (byte*~) main::$12 ← (const byte*) main::SCREEN#0 + (byte)(number) 6*(number) $28
Constant right-side identified [22] (byte*~) main::$14 ← (const byte*) main::SCREEN#0 + (word)(number) 7*(number) $28
Constant right-side identified [25] (byte*~) main::$16 ← (const byte*) main::SCREEN#0 + (word)(number) 8*(number) $28
Constant right-side identified [28] (byte*~) main::$18 ← (const byte*) main::SCREEN#0 + (word)(number) 9*(number) $28
Constant right-side identified [31] (byte*~) main::$20 ← (const byte*) main::SCREEN#0 + (word)(number) $a*(number) $28
Constant right-side identified [34] (byte*~) main::$22 ← (const byte*) main::SCREEN#0 + (word)(number) $b*(number) $28
Constant right-side identified [37] (byte*~) main::$24 ← (const byte*) main::SCREEN#0 + (word)(number) $c*(number) $28
Constant right-side identified [40] (byte*~) main::$26 ← (const byte*) main::SCREEN#0 + (word)(number) $d*(number) $28
Constant right-side identified [43] (byte*~) main::$28 ← (const byte*) main::SCREEN#0 + (word)(number) $e*(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$0 = main::SCREEN#0
Constant (const byte*) main::$2 = main::SCREEN#0+(byte)1*$28
Constant (const byte*) main::$4 = main::SCREEN#0+(byte)2*$28
Constant (const byte*) main::$6 = main::SCREEN#0+(byte)3*$28
Constant (const byte*) main::$8 = main::SCREEN#0+(byte)4*$28
Constant (const byte*) main::$10 = main::SCREEN#0+(byte)5*$28
Constant (const byte*) main::$12 = main::SCREEN#0+(byte)6*$28
Constant (const byte*) main::$14 = main::SCREEN#0+(word)7*$28
Constant (const byte*) main::$16 = main::SCREEN#0+(word)8*$28
Constant (const byte*) main::$18 = main::SCREEN#0+(word)9*$28
Constant (const byte*) main::$20 = main::SCREEN#0+(word)$a*$28
Constant (const byte*) main::$22 = main::SCREEN#0+(word)$b*$28
Constant (const byte*) main::$24 = main::SCREEN#0+(word)$c*$28
Constant (const byte*) main::$26 = main::SCREEN#0+(word)$d*$28
Constant (const byte*) main::$28 = main::SCREEN#0+(word)$e*$28
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to remove identity multiply/divide [1] (byte~) main::$1 ← (byte) main::i#2 * (byte) 1
Rewriting multiplication to use shift [3] (byte~) main::$3 ← (byte) main::i#2 * (byte) 2
Rewriting multiplication to use shift and addition[5] (byte~) main::$5 ← (byte) main::i#2 * (byte) 3
Rewriting multiplication to use shift [7] (byte~) main::$7 ← (byte) main::i#2 * (byte) 4
Rewriting multiplication to use shift and addition[9] (byte~) main::$9 ← (byte) main::i#2 * (byte) 5
Rewriting multiplication to use shift and addition[11] (byte~) main::$11 ← (byte) main::i#2 * (byte) 6
Rewriting multiplication to use shift and addition[13] (byte~) main::$13 ← (byte) main::i#2 * (byte) 7
Rewriting multiplication to use shift [15] (byte~) main::$15 ← (byte) main::i#2 * (byte) 8
Rewriting multiplication to use shift and addition[17] (byte~) main::$17 ← (byte) main::i#2 * (byte) 9
Rewriting multiplication to use shift and addition[19] (byte~) main::$19 ← (byte) main::i#2 * (byte) $a
Rewriting multiplication to use shift and addition[21] (byte~) main::$21 ← (byte) main::i#2 * (byte) $b
Rewriting multiplication to use shift and addition[23] (byte~) main::$23 ← (byte) main::i#2 * (byte) $c
Rewriting multiplication to use shift and addition[25] (byte~) main::$25 ← (byte) main::i#2 * (byte) $d
Rewriting multiplication to use shift and addition[27] (byte~) main::$27 ← (byte) main::i#2 * (byte) $e
Rewriting multiplication to use shift and addition[29] (byte~) main::$29 ← (byte) main::i#2 * (byte) $f
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::$12 = (const byte*) main::SCREEN#0+(byte)(number) 6*(number) $28
Constant inlined main::$24 = (const byte*) main::SCREEN#0+(word)(number) $c*(number) $28
Constant inlined main::$14 = (const byte*) main::SCREEN#0+(word)(number) 7*(number) $28
Constant inlined main::$26 = (const byte*) main::SCREEN#0+(word)(number) $d*(number) $28
Constant inlined main::$20 = (const byte*) main::SCREEN#0+(word)(number) $a*(number) $28
Constant inlined main::$10 = (const byte*) main::SCREEN#0+(byte)(number) 5*(number) $28
Constant inlined main::$22 = (const byte*) main::SCREEN#0+(word)(number) $b*(number) $28
Constant inlined main::$16 = (const byte*) main::SCREEN#0+(word)(number) 8*(number) $28
Constant inlined main::$2 = (const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28
Constant inlined main::$28 = (const byte*) main::SCREEN#0+(word)(number) $e*(number) $28
Constant inlined main::$18 = (const byte*) main::SCREEN#0+(word)(number) 9*(number) $28
Constant inlined main::$0 = (const byte*) main::SCREEN#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::$6 = (const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28
Constant inlined main::$4 = (const byte*) main::SCREEN#0+(byte)(number) 2*(number) $28
Constant inlined main::$8 = (const byte*) main::SCREEN#0+(byte)(number) 4*(number) $28
Successful SSA optimization Pass2ConstantInlining
Alias (byte) main::i#2 = (byte~) main::$1 
Alias (byte~) main::$5 = (byte) main::$32 
Alias (byte~) main::$9 = (byte) main::$34 
Alias (byte~) main::$11 = (byte) main::$37 
Alias (byte~) main::$13 = (byte) main::$41 
Alias (byte~) main::$17 = (byte) main::$43 
Alias (byte~) main::$19 = (byte) main::$46 
Alias (byte~) main::$21 = (byte) main::$50 
Alias (byte~) main::$23 = (byte) main::$53 
Alias (byte~) main::$25 = (byte) main::$57 
Alias (byte~) main::$27 = (byte) main::$62 
Alias (byte~) main::$29 = (byte) main::$68 
Successful SSA optimization Pass2AliasElimination
Identified duplicate assignment right side [5] (byte) main::$31 ← (byte) main::i#2 << (byte) 1
Identified duplicate assignment right side [11] (byte) main::$33 ← (byte) main::i#2 << (byte) 2
Identified duplicate assignment right side [15] (byte) main::$35 ← (byte) main::i#2 << (byte) 1
Identified duplicate assignment right side [20] (byte) main::$38 ← (byte) main::i#2 << (byte) 1
Identified duplicate assignment right side [28] (byte) main::$42 ← (byte) main::i#2 << (byte) 3
Identified duplicate assignment right side [32] (byte) main::$44 ← (byte) main::i#2 << (byte) 2
Identified duplicate assignment right side [37] (byte) main::$47 ← (byte) main::i#2 << (byte) 2
Identified duplicate assignment right side [43] (byte) main::$51 ← (byte) main::i#2 << (byte) 1
Identified duplicate assignment right side [48] (byte) main::$54 ← (byte) main::i#2 << (byte) 1
Identified duplicate assignment right side [54] (byte) main::$58 ← (byte) main::i#2 << (byte) 1
Identified duplicate assignment right side [61] (byte) main::$63 ← (byte) main::i#2 << (byte) 1
Successful SSA optimization Pass2DuplicateRValueIdentification
Alias (byte) main::$31 = (byte~) main::$3 (byte) main::$35 (byte) main::$38 (byte) main::$51 (byte) main::$54 (byte) main::$58 (byte) main::$63 
Alias (byte) main::$33 = (byte~) main::$7 (byte) main::$44 (byte) main::$47 
Alias (byte) main::$42 = (byte~) main::$15 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [55] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2
  [7] (byte) main::$31 ← (byte) main::i#2 << (byte) 1
  [8] *((const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28 + (byte) main::i#2) ← (byte) main::$31
  [9] (byte~) main::$5 ← (byte) main::$31 + (byte) main::i#2
  [10] *((const byte*) main::SCREEN#0+(byte)(number) 2*(number) $28 + (byte) main::i#2) ← (byte~) main::$5
  [11] (byte) main::$33 ← (byte) main::i#2 << (byte) 2
  [12] *((const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28 + (byte) main::i#2) ← (byte) main::$33
  [13] (byte~) main::$9 ← (byte) main::$33 + (byte) main::i#2
  [14] *((const byte*) main::SCREEN#0+(byte)(number) 4*(number) $28 + (byte) main::i#2) ← (byte~) main::$9
  [15] (byte) main::$36 ← (byte) main::$31 + (byte) main::i#2
  [16] (byte~) main::$11 ← (byte) main::$36 << (byte) 1
  [17] *((const byte*) main::SCREEN#0+(byte)(number) 5*(number) $28 + (byte) main::i#2) ← (byte~) main::$11
  [18] (byte) main::$39 ← (byte) main::$31 + (byte) main::i#2
  [19] (byte) main::$40 ← (byte) main::$39 << (byte) 1
  [20] (byte~) main::$13 ← (byte) main::$40 + (byte) main::i#2
  [21] *((const byte*) main::SCREEN#0+(byte)(number) 6*(number) $28 + (byte) main::i#2) ← (byte~) main::$13
  [22] (byte) main::$42 ← (byte) main::i#2 << (byte) 3
  [23] *((const byte*) main::SCREEN#0+(word)(number) 7*(number) $28 + (byte) main::i#2) ← (byte) main::$42
  [24] (byte~) main::$17 ← (byte) main::$42 + (byte) main::i#2
  [25] *((const byte*) main::SCREEN#0+(word)(number) 8*(number) $28 + (byte) main::i#2) ← (byte~) main::$17
  [26] (byte) main::$45 ← (byte) main::$33 + (byte) main::i#2
  [27] (byte~) main::$19 ← (byte) main::$45 << (byte) 1
  [28] *((const byte*) main::SCREEN#0+(word)(number) 9*(number) $28 + (byte) main::i#2) ← (byte~) main::$19
  [29] (byte) main::$48 ← (byte) main::$33 + (byte) main::i#2
  [30] (byte) main::$49 ← (byte) main::$48 << (byte) 1
  [31] (byte~) main::$21 ← (byte) main::$49 + (byte) main::i#2
  [32] *((const byte*) main::SCREEN#0+(word)(number) $a*(number) $28 + (byte) main::i#2) ← (byte~) main::$21
  [33] (byte) main::$52 ← (byte) main::$31 + (byte) main::i#2
  [34] (byte~) main::$23 ← (byte) main::$52 << (byte) 2
  [35] *((const byte*) main::SCREEN#0+(word)(number) $b*(number) $28 + (byte) main::i#2) ← (byte~) main::$23
  [36] (byte) main::$55 ← (byte) main::$31 + (byte) main::i#2
  [37] (byte) main::$56 ← (byte) main::$55 << (byte) 2
  [38] (byte~) main::$25 ← (byte) main::$56 + (byte) main::i#2
  [39] *((const byte*) main::SCREEN#0+(word)(number) $c*(number) $28 + (byte) main::i#2) ← (byte~) main::$25
  [40] (byte) main::$59 ← (byte) main::$31 + (byte) main::i#2
  [41] (byte) main::$60 ← (byte) main::$59 << (byte) 1
  [42] (byte) main::$61 ← (byte) main::$60 + (byte) main::i#2
  [43] (byte~) main::$27 ← (byte) main::$61 << (byte) 1
  [44] *((const byte*) main::SCREEN#0+(word)(number) $d*(number) $28 + (byte) main::i#2) ← (byte~) main::$27
  [45] (byte) main::$64 ← (byte) main::$31 + (byte) main::i#2
  [46] (byte) main::$65 ← (byte) main::$64 << (byte) 1
  [47] (byte) main::$66 ← (byte) main::$65 + (byte) main::i#2
  [48] (byte) main::$67 ← (byte) main::$66 << (byte) 1
  [49] (byte~) main::$29 ← (byte) main::$67 + (byte) main::i#2
  [50] *((const byte*) main::SCREEN#0+(word)(number) $e*(number) $28 + (byte) main::i#2) ← (byte~) main::$29
  [51] (byte) main::i#1 ← ++ (byte) main::i#2
  [52] if((byte) main::i#1!=(byte) $12) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [53] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$11 22.0
(byte~) main::$13 22.0
(byte~) main::$17 22.0
(byte~) main::$19 22.0
(byte~) main::$21 22.0
(byte~) main::$23 22.0
(byte~) main::$25 22.0
(byte~) main::$27 22.0
(byte~) main::$29 22.0
(byte) main::$31 2.605263157894737
(byte) main::$33 3.055555555555556
(byte) main::$36 22.0
(byte) main::$39 22.0
(byte) main::$40 22.0
(byte) main::$42 16.5
(byte) main::$45 22.0
(byte) main::$48 22.0
(byte) main::$49 22.0
(byte~) main::$5 22.0
(byte) main::$52 22.0
(byte) main::$55 22.0
(byte) main::$56 22.0
(byte) main::$59 22.0
(byte) main::$60 22.0
(byte) main::$61 22.0
(byte) main::$64 22.0
(byte) main::$65 22.0
(byte) main::$66 22.0
(byte) main::$67 22.0
(byte~) main::$9 22.0
(byte*) main::SCREEN
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 9.086956521739129

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$31 to zero page equivalence class [ main::$31 ]
Added variable main::$5 to zero page equivalence class [ main::$5 ]
Added variable main::$33 to zero page equivalence class [ main::$33 ]
Added variable main::$9 to zero page equivalence class [ main::$9 ]
Added variable main::$36 to zero page equivalence class [ main::$36 ]
Added variable main::$11 to zero page equivalence class [ main::$11 ]
Added variable main::$39 to zero page equivalence class [ main::$39 ]
Added variable main::$40 to zero page equivalence class [ main::$40 ]
Added variable main::$13 to zero page equivalence class [ main::$13 ]
Added variable main::$42 to zero page equivalence class [ main::$42 ]
Added variable main::$17 to zero page equivalence class [ main::$17 ]
Added variable main::$45 to zero page equivalence class [ main::$45 ]
Added variable main::$19 to zero page equivalence class [ main::$19 ]
Added variable main::$48 to zero page equivalence class [ main::$48 ]
Added variable main::$49 to zero page equivalence class [ main::$49 ]
Added variable main::$21 to zero page equivalence class [ main::$21 ]
Added variable main::$52 to zero page equivalence class [ main::$52 ]
Added variable main::$23 to zero page equivalence class [ main::$23 ]
Added variable main::$55 to zero page equivalence class [ main::$55 ]
Added variable main::$56 to zero page equivalence class [ main::$56 ]
Added variable main::$25 to zero page equivalence class [ main::$25 ]
Added variable main::$59 to zero page equivalence class [ main::$59 ]
Added variable main::$60 to zero page equivalence class [ main::$60 ]
Added variable main::$61 to zero page equivalence class [ main::$61 ]
Added variable main::$27 to zero page equivalence class [ main::$27 ]
Added variable main::$64 to zero page equivalence class [ main::$64 ]
Added variable main::$65 to zero page equivalence class [ main::$65 ]
Added variable main::$66 to zero page equivalence class [ main::$66 ]
Added variable main::$67 to zero page equivalence class [ main::$67 ]
Added variable main::$29 to zero page equivalence class [ main::$29 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$31 ]
[ main::$5 ]
[ main::$33 ]
[ main::$9 ]
[ main::$36 ]
[ main::$11 ]
[ main::$39 ]
[ main::$40 ]
[ main::$13 ]
[ main::$42 ]
[ main::$17 ]
[ main::$45 ]
[ main::$19 ]
[ main::$48 ]
[ main::$49 ]
[ main::$21 ]
[ main::$52 ]
[ main::$23 ]
[ main::$55 ]
[ main::$56 ]
[ main::$25 ]
[ main::$59 ]
[ main::$60 ]
[ main::$61 ]
[ main::$27 ]
[ main::$64 ]
[ main::$65 ]
[ main::$66 ]
[ main::$67 ]
[ main::$29 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::$31 ]
Allocated zp ZP_BYTE:4 [ main::$5 ]
Allocated zp ZP_BYTE:5 [ main::$33 ]
Allocated zp ZP_BYTE:6 [ main::$9 ]
Allocated zp ZP_BYTE:7 [ main::$36 ]
Allocated zp ZP_BYTE:8 [ main::$11 ]
Allocated zp ZP_BYTE:9 [ main::$39 ]
Allocated zp ZP_BYTE:10 [ main::$40 ]
Allocated zp ZP_BYTE:11 [ main::$13 ]
Allocated zp ZP_BYTE:12 [ main::$42 ]
Allocated zp ZP_BYTE:13 [ main::$17 ]
Allocated zp ZP_BYTE:14 [ main::$45 ]
Allocated zp ZP_BYTE:15 [ main::$19 ]
Allocated zp ZP_BYTE:16 [ main::$48 ]
Allocated zp ZP_BYTE:17 [ main::$49 ]
Allocated zp ZP_BYTE:18 [ main::$21 ]
Allocated zp ZP_BYTE:19 [ main::$52 ]
Allocated zp ZP_BYTE:20 [ main::$23 ]
Allocated zp ZP_BYTE:21 [ main::$55 ]
Allocated zp ZP_BYTE:22 [ main::$56 ]
Allocated zp ZP_BYTE:23 [ main::$25 ]
Allocated zp ZP_BYTE:24 [ main::$59 ]
Allocated zp ZP_BYTE:25 [ main::$60 ]
Allocated zp ZP_BYTE:26 [ main::$61 ]
Allocated zp ZP_BYTE:27 [ main::$27 ]
Allocated zp ZP_BYTE:28 [ main::$64 ]
Allocated zp ZP_BYTE:29 [ main::$65 ]
Allocated zp ZP_BYTE:30 [ main::$66 ]
Allocated zp ZP_BYTE:31 [ main::$67 ]
Allocated zp ZP_BYTE:32 [ main::$29 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Check that multiplication by constants is converted to shift/add
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label _5 = 4
    .label _9 = 6
    .label _11 = 8
    .label _13 = $b
    .label _17 = $d
    .label _19 = $f
    .label _21 = $12
    .label _23 = $14
    .label _25 = $17
    .label _27 = $1b
    .label _29 = $20
    .label i = 2
    .label _31 = 3
    .label _33 = 5
    .label _36 = 7
    .label _39 = 9
    .label _40 = $a
    .label _42 = $c
    .label _45 = $e
    .label _48 = $10
    .label _49 = $11
    .label _52 = $13
    .label _55 = $15
    .label _56 = $16
    .label _59 = $18
    .label _60 = $19
    .label _61 = $1a
    .label _64 = $1c
    .label _65 = $1d
    .label _66 = $1e
    .label _67 = $1f
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z i
    tya
    sta SCREEN,y
    // [7] (byte) main::$31 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z _31
    // [8] *((const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28 + (byte) main::i#2) ← (byte) main::$31 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _31
    ldy.z i
    sta SCREEN+1*$28,y
    // [9] (byte~) main::$5 ← (byte) main::$31 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _31
    clc
    adc.z i
    sta.z _5
    // [10] *((const byte*) main::SCREEN#0+(byte)(number) 2*(number) $28 + (byte) main::i#2) ← (byte~) main::$5 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _5
    ldy.z i
    sta SCREEN+2*$28,y
    // [11] (byte) main::$33 ← (byte) main::i#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z i
    asl
    asl
    sta.z _33
    // [12] *((const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28 + (byte) main::i#2) ← (byte) main::$33 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _33
    ldy.z i
    sta SCREEN+3*$28,y
    // [13] (byte~) main::$9 ← (byte) main::$33 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _33
    clc
    adc.z i
    sta.z _9
    // [14] *((const byte*) main::SCREEN#0+(byte)(number) 4*(number) $28 + (byte) main::i#2) ← (byte~) main::$9 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _9
    ldy.z i
    sta SCREEN+4*$28,y
    // [15] (byte) main::$36 ← (byte) main::$31 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _31
    clc
    adc.z i
    sta.z _36
    // [16] (byte~) main::$11 ← (byte) main::$36 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z _36
    asl
    sta.z _11
    // [17] *((const byte*) main::SCREEN#0+(byte)(number) 5*(number) $28 + (byte) main::i#2) ← (byte~) main::$11 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _11
    ldy.z i
    sta SCREEN+5*$28,y
    // [18] (byte) main::$39 ← (byte) main::$31 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _31
    clc
    adc.z i
    sta.z _39
    // [19] (byte) main::$40 ← (byte) main::$39 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z _39
    asl
    sta.z _40
    // [20] (byte~) main::$13 ← (byte) main::$40 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _40
    clc
    adc.z i
    sta.z _13
    // [21] *((const byte*) main::SCREEN#0+(byte)(number) 6*(number) $28 + (byte) main::i#2) ← (byte~) main::$13 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _13
    ldy.z i
    sta SCREEN+6*$28,y
    // [22] (byte) main::$42 ← (byte) main::i#2 << (byte) 3 -- vbuz1=vbuz2_rol_3 
    lda.z i
    asl
    asl
    asl
    sta.z _42
    // [23] *((const byte*) main::SCREEN#0+(word)(number) 7*(number) $28 + (byte) main::i#2) ← (byte) main::$42 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _42
    ldy.z i
    sta SCREEN+7*$28,y
    // [24] (byte~) main::$17 ← (byte) main::$42 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _42
    clc
    adc.z i
    sta.z _17
    // [25] *((const byte*) main::SCREEN#0+(word)(number) 8*(number) $28 + (byte) main::i#2) ← (byte~) main::$17 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _17
    ldy.z i
    sta SCREEN+8*$28,y
    // [26] (byte) main::$45 ← (byte) main::$33 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _33
    clc
    adc.z i
    sta.z _45
    // [27] (byte~) main::$19 ← (byte) main::$45 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z _45
    asl
    sta.z _19
    // [28] *((const byte*) main::SCREEN#0+(word)(number) 9*(number) $28 + (byte) main::i#2) ← (byte~) main::$19 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _19
    ldy.z i
    sta SCREEN+9*$28,y
    // [29] (byte) main::$48 ← (byte) main::$33 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _33
    clc
    adc.z i
    sta.z _48
    // [30] (byte) main::$49 ← (byte) main::$48 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z _48
    asl
    sta.z _49
    // [31] (byte~) main::$21 ← (byte) main::$49 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _49
    clc
    adc.z i
    sta.z _21
    // [32] *((const byte*) main::SCREEN#0+(word)(number) $a*(number) $28 + (byte) main::i#2) ← (byte~) main::$21 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _21
    ldy.z i
    sta SCREEN+$a*$28,y
    // [33] (byte) main::$52 ← (byte) main::$31 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _31
    clc
    adc.z i
    sta.z _52
    // [34] (byte~) main::$23 ← (byte) main::$52 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z _52
    asl
    asl
    sta.z _23
    // [35] *((const byte*) main::SCREEN#0+(word)(number) $b*(number) $28 + (byte) main::i#2) ← (byte~) main::$23 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _23
    ldy.z i
    sta SCREEN+$b*$28,y
    // [36] (byte) main::$55 ← (byte) main::$31 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _31
    clc
    adc.z i
    sta.z _55
    // [37] (byte) main::$56 ← (byte) main::$55 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z _55
    asl
    asl
    sta.z _56
    // [38] (byte~) main::$25 ← (byte) main::$56 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _56
    clc
    adc.z i
    sta.z _25
    // [39] *((const byte*) main::SCREEN#0+(word)(number) $c*(number) $28 + (byte) main::i#2) ← (byte~) main::$25 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _25
    ldy.z i
    sta SCREEN+$c*$28,y
    // [40] (byte) main::$59 ← (byte) main::$31 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _31
    clc
    adc.z i
    sta.z _59
    // [41] (byte) main::$60 ← (byte) main::$59 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z _59
    asl
    sta.z _60
    // [42] (byte) main::$61 ← (byte) main::$60 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _60
    clc
    adc.z i
    sta.z _61
    // [43] (byte~) main::$27 ← (byte) main::$61 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z _61
    asl
    sta.z _27
    // [44] *((const byte*) main::SCREEN#0+(word)(number) $d*(number) $28 + (byte) main::i#2) ← (byte~) main::$27 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _27
    ldy.z i
    sta SCREEN+$d*$28,y
    // [45] (byte) main::$64 ← (byte) main::$31 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _31
    clc
    adc.z i
    sta.z _64
    // [46] (byte) main::$65 ← (byte) main::$64 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z _64
    asl
    sta.z _65
    // [47] (byte) main::$66 ← (byte) main::$65 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _65
    clc
    adc.z i
    sta.z _66
    // [48] (byte) main::$67 ← (byte) main::$66 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z _66
    asl
    sta.z _67
    // [49] (byte~) main::$29 ← (byte) main::$67 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _67
    clc
    adc.z i
    sta.z _29
    // [50] *((const byte*) main::SCREEN#0+(word)(number) $e*(number) $28 + (byte) main::i#2) ← (byte~) main::$29 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _29
    ldy.z i
    sta SCREEN+$e*$28,y
    // [51] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [52] if((byte) main::i#1!=(byte) $12) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$12
    cmp.z i
    bne b1_from_b1
    jmp breturn
    // main::@return
  breturn:
    // [53] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte) main::$31 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$31 ] ( main:2 [ main::i#2 main::$31 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [9] (byte~) main::$5 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$5 ] ( main:2 [ main::i#2 main::$31 main::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::$31 ]
Statement [11] (byte) main::$33 ← (byte) main::i#2 << (byte) 2 [ main::i#2 main::$31 main::$33 ] ( main:2 [ main::i#2 main::$31 main::$33 ] ) always clobbers reg byte a 
Statement [13] (byte~) main::$9 ← (byte) main::$33 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$9 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$9 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ main::$33 ]
Statement [15] (byte) main::$36 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$36 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$36 ] ) always clobbers reg byte a 
Statement [16] (byte~) main::$11 ← (byte) main::$36 << (byte) 1 [ main::i#2 main::$31 main::$33 main::$11 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$11 ] ) always clobbers reg byte a 
Statement [18] (byte) main::$39 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$39 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$39 ] ) always clobbers reg byte a 
Statement [19] (byte) main::$40 ← (byte) main::$39 << (byte) 1 [ main::i#2 main::$31 main::$33 main::$40 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$40 ] ) always clobbers reg byte a 
Statement [20] (byte~) main::$13 ← (byte) main::$40 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$13 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$13 ] ) always clobbers reg byte a 
Statement [22] (byte) main::$42 ← (byte) main::i#2 << (byte) 3 [ main::i#2 main::$31 main::$33 main::$42 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$42 ] ) always clobbers reg byte a 
Statement [24] (byte~) main::$17 ← (byte) main::$42 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$17 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$17 ] ) always clobbers reg byte a 
Statement [26] (byte) main::$45 ← (byte) main::$33 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$45 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$45 ] ) always clobbers reg byte a 
Statement [27] (byte~) main::$19 ← (byte) main::$45 << (byte) 1 [ main::i#2 main::$31 main::$33 main::$19 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$19 ] ) always clobbers reg byte a 
Statement [29] (byte) main::$48 ← (byte) main::$33 + (byte) main::i#2 [ main::i#2 main::$31 main::$48 ] ( main:2 [ main::i#2 main::$31 main::$48 ] ) always clobbers reg byte a 
Statement [30] (byte) main::$49 ← (byte) main::$48 << (byte) 1 [ main::i#2 main::$31 main::$49 ] ( main:2 [ main::i#2 main::$31 main::$49 ] ) always clobbers reg byte a 
Statement [31] (byte~) main::$21 ← (byte) main::$49 + (byte) main::i#2 [ main::i#2 main::$31 main::$21 ] ( main:2 [ main::i#2 main::$31 main::$21 ] ) always clobbers reg byte a 
Statement [33] (byte) main::$52 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$52 ] ( main:2 [ main::i#2 main::$31 main::$52 ] ) always clobbers reg byte a 
Statement [34] (byte~) main::$23 ← (byte) main::$52 << (byte) 2 [ main::i#2 main::$31 main::$23 ] ( main:2 [ main::i#2 main::$31 main::$23 ] ) always clobbers reg byte a 
Statement [36] (byte) main::$55 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$55 ] ( main:2 [ main::i#2 main::$31 main::$55 ] ) always clobbers reg byte a 
Statement [37] (byte) main::$56 ← (byte) main::$55 << (byte) 2 [ main::i#2 main::$31 main::$56 ] ( main:2 [ main::i#2 main::$31 main::$56 ] ) always clobbers reg byte a 
Statement [38] (byte~) main::$25 ← (byte) main::$56 + (byte) main::i#2 [ main::i#2 main::$31 main::$25 ] ( main:2 [ main::i#2 main::$31 main::$25 ] ) always clobbers reg byte a 
Statement [40] (byte) main::$59 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$59 ] ( main:2 [ main::i#2 main::$31 main::$59 ] ) always clobbers reg byte a 
Statement [41] (byte) main::$60 ← (byte) main::$59 << (byte) 1 [ main::i#2 main::$31 main::$60 ] ( main:2 [ main::i#2 main::$31 main::$60 ] ) always clobbers reg byte a 
Statement [42] (byte) main::$61 ← (byte) main::$60 + (byte) main::i#2 [ main::i#2 main::$31 main::$61 ] ( main:2 [ main::i#2 main::$31 main::$61 ] ) always clobbers reg byte a 
Statement [43] (byte~) main::$27 ← (byte) main::$61 << (byte) 1 [ main::i#2 main::$31 main::$27 ] ( main:2 [ main::i#2 main::$31 main::$27 ] ) always clobbers reg byte a 
Statement [45] (byte) main::$64 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$64 ] ( main:2 [ main::i#2 main::$64 ] ) always clobbers reg byte a 
Statement [46] (byte) main::$65 ← (byte) main::$64 << (byte) 1 [ main::i#2 main::$65 ] ( main:2 [ main::i#2 main::$65 ] ) always clobbers reg byte a 
Statement [47] (byte) main::$66 ← (byte) main::$65 + (byte) main::i#2 [ main::i#2 main::$66 ] ( main:2 [ main::i#2 main::$66 ] ) always clobbers reg byte a 
Statement [48] (byte) main::$67 ← (byte) main::$66 << (byte) 1 [ main::i#2 main::$67 ] ( main:2 [ main::i#2 main::$67 ] ) always clobbers reg byte a 
Statement [49] (byte~) main::$29 ← (byte) main::$67 + (byte) main::i#2 [ main::i#2 main::$29 ] ( main:2 [ main::i#2 main::$29 ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [7] (byte) main::$31 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$31 ] ( main:2 [ main::i#2 main::$31 ] ) always clobbers reg byte a 
Statement [8] *((const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28 + (byte) main::i#2) ← (byte) main::$31 [ main::i#2 main::$31 ] ( main:2 [ main::i#2 main::$31 ] ) always clobbers reg byte a 
Statement [9] (byte~) main::$5 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$5 ] ( main:2 [ main::i#2 main::$31 main::$5 ] ) always clobbers reg byte a 
Statement [11] (byte) main::$33 ← (byte) main::i#2 << (byte) 2 [ main::i#2 main::$31 main::$33 ] ( main:2 [ main::i#2 main::$31 main::$33 ] ) always clobbers reg byte a 
Statement [12] *((const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28 + (byte) main::i#2) ← (byte) main::$33 [ main::i#2 main::$31 main::$33 ] ( main:2 [ main::i#2 main::$31 main::$33 ] ) always clobbers reg byte a 
Statement [13] (byte~) main::$9 ← (byte) main::$33 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$9 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$9 ] ) always clobbers reg byte a 
Statement [15] (byte) main::$36 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$36 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$36 ] ) always clobbers reg byte a 
Statement [16] (byte~) main::$11 ← (byte) main::$36 << (byte) 1 [ main::i#2 main::$31 main::$33 main::$11 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$11 ] ) always clobbers reg byte a 
Statement [18] (byte) main::$39 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$39 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$39 ] ) always clobbers reg byte a 
Statement [19] (byte) main::$40 ← (byte) main::$39 << (byte) 1 [ main::i#2 main::$31 main::$33 main::$40 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$40 ] ) always clobbers reg byte a 
Statement [20] (byte~) main::$13 ← (byte) main::$40 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$13 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$13 ] ) always clobbers reg byte a 
Statement [22] (byte) main::$42 ← (byte) main::i#2 << (byte) 3 [ main::i#2 main::$31 main::$33 main::$42 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$42 ] ) always clobbers reg byte a 
Statement [24] (byte~) main::$17 ← (byte) main::$42 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$17 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$17 ] ) always clobbers reg byte a 
Statement [26] (byte) main::$45 ← (byte) main::$33 + (byte) main::i#2 [ main::i#2 main::$31 main::$33 main::$45 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$45 ] ) always clobbers reg byte a 
Statement [27] (byte~) main::$19 ← (byte) main::$45 << (byte) 1 [ main::i#2 main::$31 main::$33 main::$19 ] ( main:2 [ main::i#2 main::$31 main::$33 main::$19 ] ) always clobbers reg byte a 
Statement [29] (byte) main::$48 ← (byte) main::$33 + (byte) main::i#2 [ main::i#2 main::$31 main::$48 ] ( main:2 [ main::i#2 main::$31 main::$48 ] ) always clobbers reg byte a 
Statement [30] (byte) main::$49 ← (byte) main::$48 << (byte) 1 [ main::i#2 main::$31 main::$49 ] ( main:2 [ main::i#2 main::$31 main::$49 ] ) always clobbers reg byte a 
Statement [31] (byte~) main::$21 ← (byte) main::$49 + (byte) main::i#2 [ main::i#2 main::$31 main::$21 ] ( main:2 [ main::i#2 main::$31 main::$21 ] ) always clobbers reg byte a 
Statement [33] (byte) main::$52 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$52 ] ( main:2 [ main::i#2 main::$31 main::$52 ] ) always clobbers reg byte a 
Statement [34] (byte~) main::$23 ← (byte) main::$52 << (byte) 2 [ main::i#2 main::$31 main::$23 ] ( main:2 [ main::i#2 main::$31 main::$23 ] ) always clobbers reg byte a 
Statement [36] (byte) main::$55 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$55 ] ( main:2 [ main::i#2 main::$31 main::$55 ] ) always clobbers reg byte a 
Statement [37] (byte) main::$56 ← (byte) main::$55 << (byte) 2 [ main::i#2 main::$31 main::$56 ] ( main:2 [ main::i#2 main::$31 main::$56 ] ) always clobbers reg byte a 
Statement [38] (byte~) main::$25 ← (byte) main::$56 + (byte) main::i#2 [ main::i#2 main::$31 main::$25 ] ( main:2 [ main::i#2 main::$31 main::$25 ] ) always clobbers reg byte a 
Statement [40] (byte) main::$59 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$31 main::$59 ] ( main:2 [ main::i#2 main::$31 main::$59 ] ) always clobbers reg byte a 
Statement [41] (byte) main::$60 ← (byte) main::$59 << (byte) 1 [ main::i#2 main::$31 main::$60 ] ( main:2 [ main::i#2 main::$31 main::$60 ] ) always clobbers reg byte a 
Statement [42] (byte) main::$61 ← (byte) main::$60 + (byte) main::i#2 [ main::i#2 main::$31 main::$61 ] ( main:2 [ main::i#2 main::$31 main::$61 ] ) always clobbers reg byte a 
Statement [43] (byte~) main::$27 ← (byte) main::$61 << (byte) 1 [ main::i#2 main::$31 main::$27 ] ( main:2 [ main::i#2 main::$31 main::$27 ] ) always clobbers reg byte a 
Statement [45] (byte) main::$64 ← (byte) main::$31 + (byte) main::i#2 [ main::i#2 main::$64 ] ( main:2 [ main::i#2 main::$64 ] ) always clobbers reg byte a 
Statement [46] (byte) main::$65 ← (byte) main::$64 << (byte) 1 [ main::i#2 main::$65 ] ( main:2 [ main::i#2 main::$65 ] ) always clobbers reg byte a 
Statement [47] (byte) main::$66 ← (byte) main::$65 + (byte) main::i#2 [ main::i#2 main::$66 ] ( main:2 [ main::i#2 main::$66 ] ) always clobbers reg byte a 
Statement [48] (byte) main::$67 ← (byte) main::$66 << (byte) 1 [ main::i#2 main::$67 ] ( main:2 [ main::i#2 main::$67 ] ) always clobbers reg byte a 
Statement [49] (byte~) main::$29 ← (byte) main::$67 + (byte) main::i#2 [ main::i#2 main::$29 ] ( main:2 [ main::i#2 main::$29 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::$31 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$5 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::$33 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::$9 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::$36 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ main::$11 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ main::$39 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ main::$40 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ main::$13 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ main::$42 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ main::$17 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ main::$45 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ main::$19 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ main::$48 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ main::$49 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ main::$21 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ main::$52 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ main::$23 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ main::$55 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ main::$56 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ main::$25 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ main::$59 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ main::$60 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ main::$61 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ main::$27 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ main::$64 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ main::$65 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ main::$66 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ main::$67 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ main::$29 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 25.59: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:4 [ main::$5 ] 22: zp ZP_BYTE:6 [ main::$9 ] 22: zp ZP_BYTE:7 [ main::$36 ] 22: zp ZP_BYTE:8 [ main::$11 ] 22: zp ZP_BYTE:9 [ main::$39 ] 22: zp ZP_BYTE:10 [ main::$40 ] 22: zp ZP_BYTE:11 [ main::$13 ] 22: zp ZP_BYTE:13 [ main::$17 ] 22: zp ZP_BYTE:14 [ main::$45 ] 22: zp ZP_BYTE:15 [ main::$19 ] 22: zp ZP_BYTE:16 [ main::$48 ] 22: zp ZP_BYTE:17 [ main::$49 ] 22: zp ZP_BYTE:18 [ main::$21 ] 22: zp ZP_BYTE:19 [ main::$52 ] 22: zp ZP_BYTE:20 [ main::$23 ] 22: zp ZP_BYTE:21 [ main::$55 ] 22: zp ZP_BYTE:22 [ main::$56 ] 22: zp ZP_BYTE:23 [ main::$25 ] 22: zp ZP_BYTE:24 [ main::$59 ] 22: zp ZP_BYTE:25 [ main::$60 ] 22: zp ZP_BYTE:26 [ main::$61 ] 22: zp ZP_BYTE:27 [ main::$27 ] 22: zp ZP_BYTE:28 [ main::$64 ] 22: zp ZP_BYTE:29 [ main::$65 ] 22: zp ZP_BYTE:30 [ main::$66 ] 22: zp ZP_BYTE:31 [ main::$67 ] 22: zp ZP_BYTE:32 [ main::$29 ] 16.5: zp ZP_BYTE:12 [ main::$42 ] 3.06: zp ZP_BYTE:5 [ main::$33 ] 2.61: zp ZP_BYTE:3 [ main::$31 ] 
Uplift Scope [] 

Uplifting [] best 4933 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 4193 combination reg byte x [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ main::$5 ]
Uplifting [main] best 4133 combination reg byte a [ main::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::$9 ]
Uplifting [main] best 4073 combination reg byte a [ main::$9 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ main::$36 ]
Uplifting [main] best 4013 combination reg byte a [ main::$36 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ main::$11 ]
Uplifting [main] best 3953 combination reg byte a [ main::$11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ main::$39 ]
Uplifting [main] best 3893 combination reg byte a [ main::$39 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ main::$40 ]
Uplifting [main] best 3873 combination reg byte a [ main::$40 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ main::$13 ]
Uplifting [main] best 3813 combination reg byte a [ main::$13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ main::$17 ]
Uplifting [main] best 3753 combination reg byte a [ main::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ main::$45 ]
Uplifting [main] best 3693 combination reg byte a [ main::$45 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ main::$19 ]
Uplifting [main] best 3633 combination reg byte a [ main::$19 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ main::$48 ]
Uplifting [main] best 3573 combination reg byte a [ main::$48 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ main::$49 ]
Uplifting [main] best 3553 combination reg byte a [ main::$49 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ main::$21 ]
Uplifting [main] best 3493 combination reg byte a [ main::$21 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ main::$52 ]
Uplifting [main] best 3433 combination reg byte a [ main::$52 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ main::$23 ]
Uplifting [main] best 3373 combination reg byte a [ main::$23 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ main::$55 ]
Uplifting [main] best 3313 combination reg byte a [ main::$55 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ main::$56 ]
Uplifting [main] best 3293 combination reg byte a [ main::$56 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ main::$25 ]
Uplifting [main] best 3233 combination reg byte a [ main::$25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ main::$59 ]
Uplifting [main] best 3173 combination reg byte a [ main::$59 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ main::$60 ]
Uplifting [main] best 3153 combination reg byte a [ main::$60 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ main::$61 ]
Uplifting [main] best 3093 combination reg byte a [ main::$61 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ main::$27 ]
Uplifting [main] best 3033 combination reg byte a [ main::$27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ main::$64 ]
Uplifting [main] best 2973 combination reg byte a [ main::$64 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ main::$65 ]
Uplifting [main] best 2953 combination reg byte a [ main::$65 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ main::$66 ]
Uplifting [main] best 2893 combination reg byte a [ main::$66 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ main::$67 ]
Uplifting [main] best 2873 combination reg byte a [ main::$67 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ main::$29 ]
Uplifting [main] best 2813 combination reg byte a [ main::$29 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ main::$42 ]
Uplifting [main] best 2763 combination reg byte a [ main::$42 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ main::$33 ]
Uplifting [main] best 2763 combination zp ZP_BYTE:5 [ main::$33 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ main::$31 ]
Uplifting [main] best 2763 combination zp ZP_BYTE:3 [ main::$31 ] 
Allocated (was zp ZP_BYTE:3) zp ZP_BYTE:2 [ main::$31 ]
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:3 [ main::$33 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Check that multiplication by constants is converted to shift/add
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label _31 = 2
    .label _33 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN,x
    // [7] (byte) main::$31 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta.z _31
    // [8] *((const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28 + (byte) main::i#2) ← (byte) main::$31 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z _31
    sta SCREEN+1*$28,x
    // [9] (byte~) main::$5 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [10] *((const byte*) main::SCREEN#0+(byte)(number) 2*(number) $28 + (byte) main::i#2) ← (byte~) main::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+2*$28,x
    // [11] (byte) main::$33 ← (byte) main::i#2 << (byte) 2 -- vbuz1=vbuxx_rol_2 
    txa
    asl
    asl
    sta.z _33
    // [12] *((const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28 + (byte) main::i#2) ← (byte) main::$33 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z _33
    sta SCREEN+3*$28,x
    // [13] (byte~) main::$9 ← (byte) main::$33 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _33
    // [14] *((const byte*) main::SCREEN#0+(byte)(number) 4*(number) $28 + (byte) main::i#2) ← (byte~) main::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+4*$28,x
    // [15] (byte) main::$36 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [16] (byte~) main::$11 ← (byte) main::$36 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [17] *((const byte*) main::SCREEN#0+(byte)(number) 5*(number) $28 + (byte) main::i#2) ← (byte~) main::$11 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+5*$28,x
    // [18] (byte) main::$39 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [19] (byte) main::$40 ← (byte) main::$39 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [20] (byte~) main::$13 ← (byte) main::$40 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [21] *((const byte*) main::SCREEN#0+(byte)(number) 6*(number) $28 + (byte) main::i#2) ← (byte~) main::$13 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+6*$28,x
    // [22] (byte) main::$42 ← (byte) main::i#2 << (byte) 3 -- vbuaa=vbuxx_rol_3 
    txa
    asl
    asl
    asl
    // [23] *((const byte*) main::SCREEN#0+(word)(number) 7*(number) $28 + (byte) main::i#2) ← (byte) main::$42 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+7*$28,x
    // [24] (byte~) main::$17 ← (byte) main::$42 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [25] *((const byte*) main::SCREEN#0+(word)(number) 8*(number) $28 + (byte) main::i#2) ← (byte~) main::$17 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+8*$28,x
    // [26] (byte) main::$45 ← (byte) main::$33 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _33
    // [27] (byte~) main::$19 ← (byte) main::$45 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [28] *((const byte*) main::SCREEN#0+(word)(number) 9*(number) $28 + (byte) main::i#2) ← (byte~) main::$19 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+9*$28,x
    // [29] (byte) main::$48 ← (byte) main::$33 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _33
    // [30] (byte) main::$49 ← (byte) main::$48 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [31] (byte~) main::$21 ← (byte) main::$49 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [32] *((const byte*) main::SCREEN#0+(word)(number) $a*(number) $28 + (byte) main::i#2) ← (byte~) main::$21 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$a*$28,x
    // [33] (byte) main::$52 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [34] (byte~) main::$23 ← (byte) main::$52 << (byte) 2 -- vbuaa=vbuaa_rol_2 
    asl
    asl
    // [35] *((const byte*) main::SCREEN#0+(word)(number) $b*(number) $28 + (byte) main::i#2) ← (byte~) main::$23 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$b*$28,x
    // [36] (byte) main::$55 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [37] (byte) main::$56 ← (byte) main::$55 << (byte) 2 -- vbuaa=vbuaa_rol_2 
    asl
    asl
    // [38] (byte~) main::$25 ← (byte) main::$56 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [39] *((const byte*) main::SCREEN#0+(word)(number) $c*(number) $28 + (byte) main::i#2) ← (byte~) main::$25 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$c*$28,x
    // [40] (byte) main::$59 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [41] (byte) main::$60 ← (byte) main::$59 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [42] (byte) main::$61 ← (byte) main::$60 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [43] (byte~) main::$27 ← (byte) main::$61 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [44] *((const byte*) main::SCREEN#0+(word)(number) $d*(number) $28 + (byte) main::i#2) ← (byte~) main::$27 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$d*$28,x
    // [45] (byte) main::$64 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [46] (byte) main::$65 ← (byte) main::$64 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [47] (byte) main::$66 ← (byte) main::$65 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [48] (byte) main::$67 ← (byte) main::$66 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [49] (byte~) main::$29 ← (byte) main::$67 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [50] *((const byte*) main::SCREEN#0+(word)(number) $e*(number) $28 + (byte) main::i#2) ← (byte~) main::$29 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$e*$28,x
    // [51] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [52] if((byte) main::i#1!=(byte) $12) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$12
    bne b1_from_b1
    jmp breturn
    // main::@return
  breturn:
    // [53] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z _31
Removing instruction lda.z _33
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [102] bne b1 to beq

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$11 reg byte a 22.0
(byte~) main::$13 reg byte a 22.0
(byte~) main::$17 reg byte a 22.0
(byte~) main::$19 reg byte a 22.0
(byte~) main::$21 reg byte a 22.0
(byte~) main::$23 reg byte a 22.0
(byte~) main::$25 reg byte a 22.0
(byte~) main::$27 reg byte a 22.0
(byte~) main::$29 reg byte a 22.0
(byte) main::$31 $31 zp ZP_BYTE:2 2.605263157894737
(byte) main::$33 $33 zp ZP_BYTE:3 3.055555555555556
(byte) main::$36 reg byte a 22.0
(byte) main::$39 reg byte a 22.0
(byte) main::$40 reg byte a 22.0
(byte) main::$42 reg byte a 16.5
(byte) main::$45 reg byte a 22.0
(byte) main::$48 reg byte a 22.0
(byte) main::$49 reg byte a 22.0
(byte~) main::$5 reg byte a 22.0
(byte) main::$52 reg byte a 22.0
(byte) main::$55 reg byte a 22.0
(byte) main::$56 reg byte a 22.0
(byte) main::$59 reg byte a 22.0
(byte) main::$60 reg byte a 22.0
(byte) main::$61 reg byte a 22.0
(byte) main::$64 reg byte a 22.0
(byte) main::$65 reg byte a 22.0
(byte) main::$66 reg byte a 22.0
(byte) main::$67 reg byte a 22.0
(byte~) main::$9 reg byte a 22.0
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 9.086956521739129

reg byte x [ main::i#2 main::i#1 ]
zp ZP_BYTE:2 [ main::$31 ]
reg byte a [ main::$5 ]
zp ZP_BYTE:3 [ main::$33 ]
reg byte a [ main::$9 ]
reg byte a [ main::$36 ]
reg byte a [ main::$11 ]
reg byte a [ main::$39 ]
reg byte a [ main::$40 ]
reg byte a [ main::$13 ]
reg byte a [ main::$42 ]
reg byte a [ main::$17 ]
reg byte a [ main::$45 ]
reg byte a [ main::$19 ]
reg byte a [ main::$48 ]
reg byte a [ main::$49 ]
reg byte a [ main::$21 ]
reg byte a [ main::$52 ]
reg byte a [ main::$23 ]
reg byte a [ main::$55 ]
reg byte a [ main::$56 ]
reg byte a [ main::$25 ]
reg byte a [ main::$59 ]
reg byte a [ main::$60 ]
reg byte a [ main::$61 ]
reg byte a [ main::$27 ]
reg byte a [ main::$64 ]
reg byte a [ main::$65 ]
reg byte a [ main::$66 ]
reg byte a [ main::$67 ]
reg byte a [ main::$29 ]


FINAL ASSEMBLER
Score: 2631

  // File Comments
// Check that multiplication by constants is converted to shift/add
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    .label _31 = 2
    .label _33 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  b1:
    // (SCREEN+0*40)[i] = i*1
    // [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN,x
    // i*2
    // [7] (byte) main::$31 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta.z _31
    // (SCREEN+1*40)[i] = i*2
    // [8] *((const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28 + (byte) main::i#2) ← (byte) main::$31 -- pbuc1_derefidx_vbuxx=vbuz1 
    sta SCREEN+1*$28,x
    // i*3
    // [9] (byte~) main::$5 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // (SCREEN+2*40)[i] = i*3
    // [10] *((const byte*) main::SCREEN#0+(byte)(number) 2*(number) $28 + (byte) main::i#2) ← (byte~) main::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+2*$28,x
    // i*4
    // [11] (byte) main::$33 ← (byte) main::i#2 << (byte) 2 -- vbuz1=vbuxx_rol_2 
    txa
    asl
    asl
    sta.z _33
    // (SCREEN+3*40)[i] = i*4
    // [12] *((const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28 + (byte) main::i#2) ← (byte) main::$33 -- pbuc1_derefidx_vbuxx=vbuz1 
    sta SCREEN+3*$28,x
    // i*5
    // [13] (byte~) main::$9 ← (byte) main::$33 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _33
    // (SCREEN+4*40)[i] = i*5
    // [14] *((const byte*) main::SCREEN#0+(byte)(number) 4*(number) $28 + (byte) main::i#2) ← (byte~) main::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+4*$28,x
    // i*6
    // [15] (byte) main::$36 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [16] (byte~) main::$11 ← (byte) main::$36 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // (SCREEN+5*40)[i] = i*6
    // [17] *((const byte*) main::SCREEN#0+(byte)(number) 5*(number) $28 + (byte) main::i#2) ← (byte~) main::$11 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+5*$28,x
    // i*7
    // [18] (byte) main::$39 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [19] (byte) main::$40 ← (byte) main::$39 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [20] (byte~) main::$13 ← (byte) main::$40 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // (SCREEN+6*40)[i] = i*7
    // [21] *((const byte*) main::SCREEN#0+(byte)(number) 6*(number) $28 + (byte) main::i#2) ← (byte~) main::$13 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+6*$28,x
    // i*8
    // [22] (byte) main::$42 ← (byte) main::i#2 << (byte) 3 -- vbuaa=vbuxx_rol_3 
    txa
    asl
    asl
    asl
    // (SCREEN+7*40)[i] = i*8
    // [23] *((const byte*) main::SCREEN#0+(word)(number) 7*(number) $28 + (byte) main::i#2) ← (byte) main::$42 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+7*$28,x
    // i*9
    // [24] (byte~) main::$17 ← (byte) main::$42 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // (SCREEN+8*40)[i] = i*9
    // [25] *((const byte*) main::SCREEN#0+(word)(number) 8*(number) $28 + (byte) main::i#2) ← (byte~) main::$17 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+8*$28,x
    // i*10
    // [26] (byte) main::$45 ← (byte) main::$33 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _33
    // [27] (byte~) main::$19 ← (byte) main::$45 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // (SCREEN+9*40)[i] = i*10
    // [28] *((const byte*) main::SCREEN#0+(word)(number) 9*(number) $28 + (byte) main::i#2) ← (byte~) main::$19 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+9*$28,x
    // i*11
    // [29] (byte) main::$48 ← (byte) main::$33 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _33
    // [30] (byte) main::$49 ← (byte) main::$48 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [31] (byte~) main::$21 ← (byte) main::$49 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // (SCREEN+10*40)[i] = i*11
    // [32] *((const byte*) main::SCREEN#0+(word)(number) $a*(number) $28 + (byte) main::i#2) ← (byte~) main::$21 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$a*$28,x
    // i*12
    // [33] (byte) main::$52 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [34] (byte~) main::$23 ← (byte) main::$52 << (byte) 2 -- vbuaa=vbuaa_rol_2 
    asl
    asl
    // (SCREEN+11*40)[i] = i*12
    // [35] *((const byte*) main::SCREEN#0+(word)(number) $b*(number) $28 + (byte) main::i#2) ← (byte~) main::$23 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$b*$28,x
    // i*13
    // [36] (byte) main::$55 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [37] (byte) main::$56 ← (byte) main::$55 << (byte) 2 -- vbuaa=vbuaa_rol_2 
    asl
    asl
    // [38] (byte~) main::$25 ← (byte) main::$56 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // (SCREEN+12*40)[i] = i*13
    // [39] *((const byte*) main::SCREEN#0+(word)(number) $c*(number) $28 + (byte) main::i#2) ← (byte~) main::$25 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$c*$28,x
    // i*14
    // [40] (byte) main::$59 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [41] (byte) main::$60 ← (byte) main::$59 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [42] (byte) main::$61 ← (byte) main::$60 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [43] (byte~) main::$27 ← (byte) main::$61 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // (SCREEN+13*40)[i] = i*14
    // [44] *((const byte*) main::SCREEN#0+(word)(number) $d*(number) $28 + (byte) main::i#2) ← (byte~) main::$27 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$d*$28,x
    // i*15
    // [45] (byte) main::$64 ← (byte) main::$31 + (byte) main::i#2 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z _31
    // [46] (byte) main::$65 ← (byte) main::$64 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [47] (byte) main::$66 ← (byte) main::$65 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [48] (byte) main::$67 ← (byte) main::$66 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [49] (byte~) main::$29 ← (byte) main::$67 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // (SCREEN+14*40)[i] = i*15
    // [50] *((const byte*) main::SCREEN#0+(word)(number) $e*(number) $28 + (byte) main::i#2) ← (byte~) main::$29 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$e*$28,x
    // for(byte i: 0..17)
    // [51] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [52] if((byte) main::i#1!=(byte) $12) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$12
    beq !b1+
    jmp b1
  !b1:
    // main::@return
    // }
    // [53] return 
    rts
}
  // File Data

