@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const byte*) GHOST_BYTE) ← (byte) 0
  asm { sei  }
  [6] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR
  [7] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) & (byte) $7f
  [8] *((const byte*) RASTER) ← (byte) $fa
  [9] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER
  [10] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1()
  asm { cli  }
  to:main::@return
main::@return: scope:[main]  from main
  [12] return 
  to:@return

interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
irq_bottom_2: scope:[irq_bottom_2]  from
  [13] *((const byte*) BORDERCOL) ← (const byte) WHITE
  [14] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) | (const byte) VIC_RSEL
  [15] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER
  [16] *((const byte*) RASTER) ← (byte) $fa
  [17] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1()
  [18] *((const byte*) BORDERCOL) ← (const byte) RED
  to:irq_bottom_2::@return
irq_bottom_2::@return: scope:[irq_bottom_2]  from irq_bottom_2
  [19] return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq_bottom_1()
irq_bottom_1: scope:[irq_bottom_1]  from
  [20] *((const byte*) BORDERCOL) ← (const byte) WHITE
  [21] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) & (byte) $ff^(const byte) VIC_RSEL
  [22] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER
  [23] *((const byte*) RASTER) ← (byte) $fd
  [24] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
  [25] *((const byte*) BORDERCOL) ← (const byte) RED
  to:irq_bottom_1::@return
irq_bottom_1::@return: scope:[irq_bottom_1]  from irq_bottom_1
  [26] return 
  to:@return
