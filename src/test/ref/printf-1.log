Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list (void~) main::$1 ← call printf_string (byte*) "cml" (struct printf_format_string){ (number) $a, (number) 0 } 
Added struct type cast to parameter value list (void~) main::$3 ← call printf_string (byte*) "rules" (struct printf_format_string){ (number) $a, (number) 0 } 
Added struct type cast to parameter value list (void~) main::$5 ← call printf_string (byte*) "cml" (struct printf_format_string){ (number) $a, (number) 1 } 
Added struct type cast to parameter value list (void~) main::$7 ← call printf_string (byte*) "rules" (struct printf_format_string){ (number) $a, (number) 1 } 
Eliminating unused variable with no statement (struct printf_buffer_number) printf_buffer

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  (word) memcpy::num#2 ← phi( cscroll::@3/(word) memcpy::num#0 cscroll::@4/(word) memcpy::num#1 )
  (void*) memcpy::destination#2 ← phi( cscroll::@3/(void*) memcpy::destination#0 cscroll::@4/(void*) memcpy::destination#1 )
  (void*) memcpy::source#2 ← phi( cscroll::@3/(void*) memcpy::source#0 cscroll::@4/(void*) memcpy::source#1 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#2
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#2
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#2
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#4 ← phi( memcpy/(void*) memcpy::destination#2 memcpy::@2/(void*) memcpy::destination#5 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#5 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#3 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#4 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#4
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  (byte) memset::c#5 ← phi( cscroll::@5/(byte) memset::c#0 cscroll::@6/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( cscroll::@5/(void*) memset::str#0 cscroll::@6/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( cscroll::@5/(word) memset::num#0 cscroll::@6/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_string::@3
  (byte*) strlen::str#4 ← phi( printf_string::@3/(byte*) strlen::str#1 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#4 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#3 ← phi( strlen::@1/(byte*) strlen::str#2 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#3 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) conio_cursor_x ← (byte) 0
  (byte) conio_cursor_y ← (byte) 0
  (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  (byte) conio_scroll_enable ← (byte) 1
  to:@2

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  (byte*) clrscr::line_text#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) clrscr::line_cols#0 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) clrscr::l#0 ← (byte) 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@6
  (byte*) clrscr::line_cols#6 ← phi( clrscr/(byte*) clrscr::line_cols#0 clrscr::@6/(byte*) clrscr::line_cols#1 )
  (byte*) clrscr::line_text#6 ← phi( clrscr/(byte*) clrscr::line_text#0 clrscr::@6/(byte*) clrscr::line_text#1 )
  (byte) clrscr::l#2 ← phi( clrscr/(byte) clrscr::l#0 clrscr::@6/(byte) clrscr::l#1 )
  (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (number) $19
  if((bool~) clrscr::$0) goto clrscr::@2
  to:clrscr::@3
clrscr::@2: scope:[clrscr]  from clrscr::@1
  (byte) clrscr::l#5 ← phi( clrscr::@1/(byte) clrscr::l#2 )
  (byte*) clrscr::line_cols#5 ← phi( clrscr::@1/(byte*) clrscr::line_cols#6 )
  (byte*) clrscr::line_text#5 ← phi( clrscr::@1/(byte*) clrscr::line_text#6 )
  (byte) clrscr::c#0 ← (byte) 0
  to:clrscr::@4
clrscr::@3: scope:[clrscr]  from clrscr::@1
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← (number) 0
  (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@4: scope:[clrscr]  from clrscr::@2 clrscr::@5
  (byte) clrscr::l#4 ← phi( clrscr::@2/(byte) clrscr::l#5 clrscr::@5/(byte) clrscr::l#6 )
  (byte*) clrscr::line_cols#4 ← phi( clrscr::@2/(byte*) clrscr::line_cols#5 clrscr::@5/(byte*) clrscr::line_cols#2 )
  (byte*) clrscr::line_text#4 ← phi( clrscr::@2/(byte*) clrscr::line_text#5 clrscr::@5/(byte*) clrscr::line_text#2 )
  (byte) clrscr::c#2 ← phi( clrscr::@2/(byte) clrscr::c#0 clrscr::@5/(byte) clrscr::c#1 )
  (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (number) $28
  if((bool~) clrscr::$1) goto clrscr::@5
  to:clrscr::@6
clrscr::@5: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#6 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#2 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte) clrscr::c#3 ← phi( clrscr::@4/(byte) clrscr::c#2 )
  (byte*) clrscr::line_text#2 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  *((byte*) clrscr::line_text#2 + (byte) clrscr::c#3) ← (byte) ' '
  *((byte*) clrscr::line_cols#2 + (byte) clrscr::c#3) ← (byte) conio_textcolor
  (byte) clrscr::c#1 ← ++ (byte) clrscr::c#3
  to:clrscr::@4
clrscr::@6: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#3 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#3 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte*) clrscr::line_text#3 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (number) $28
  (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (number) $28
  (byte) clrscr::l#1 ← ++ (byte) clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@3
  return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2
  (byte) gotoxy::x#4 ← phi( cscroll::@2/(byte) gotoxy::x#1 )
  (byte) gotoxy::y#2 ← phi( cscroll::@2/(byte) gotoxy::y#1 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::y#2 > (number) $19
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::y#4 ← phi( gotoxy/(byte) gotoxy::y#2 gotoxy::@3/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#2 ← phi( gotoxy/(byte) gotoxy::x#4 gotoxy::@3/(byte) gotoxy::x#5 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::x#2 >= (number) $28
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::x#5 ← phi( gotoxy/(byte) gotoxy::x#4 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#3 ← phi( gotoxy::@1/(byte) gotoxy::y#4 gotoxy::@4/(byte) gotoxy::y#5 )
  (byte) gotoxy::x#3 ← phi( gotoxy::@1/(byte) gotoxy::x#2 gotoxy::@4/(byte) gotoxy::x#0 )
  (byte) conio_cursor_x ← (byte) gotoxy::x#3
  (byte) conio_cursor_y ← (byte) gotoxy::y#3
  (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#3
  (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (number) $28
  (number~) gotoxy::$5 ← (number~) gotoxy::$4 + (byte) gotoxy::x#3
  (word) gotoxy::offset#0 ← (number~) gotoxy::$5
  (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  (byte*) conio_cursor_text ← (byte*~) gotoxy::$6
  (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  (byte*) conio_cursor_color ← (byte*~) gotoxy::$7
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::y#5 ← phi( gotoxy::@1/(byte) gotoxy::y#4 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_padding::@2
  (byte) cputc::c#2 ← phi( cputs::@2/(byte) cputc::c#0 printf_padding::@2/(byte) cputc::c#1 )
  (bool~) cputc::$0 ← (byte) cputc::c#2 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  (byte) cputc::c#3 ← phi( cputc/(byte) cputc::c#2 )
  *((byte*) conio_cursor_text) ← (byte) cputc::c#3
  (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  *((byte*) conio_cursor_color) ← (byte) conio_textcolor
  (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
  (bool~) cputc::$2 ← ! (bool~) cputc::$1
  if((bool~) cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 main::@2 main::@4 main::@6
  (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x
  (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (number) $28
  (byte*) conio_cursor_text ← (byte*~) cputln::$1
  (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x
  (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (number) $28
  (byte*) conio_cursor_color ← (byte*~) cputln::$3
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
  (bool~) cscroll::$1 ← ! (bool~) cscroll::$0
  if((bool~) cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  (bool~) cscroll::$9 ← (number) 0 != (byte) conio_scroll_enable
  if((bool~) cscroll::$9) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  (void*) memcpy::destination#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
  (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
  (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  (void*) memcpy::destination#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
  (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
  (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#3 ← (void*) memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
  (byte) memset::c#1 ← (byte) conio_textcolor
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (number) $28
  (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (number) $28
  (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number) 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from printf_string::@2
  (to_nomodify byte*) cputs::s#3 ← phi( printf_string::@2/(to_nomodify byte*) cputs::s#1 )
  (byte) cputs::c#0 ← (byte) 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  (to_nomodify byte*) cputs::s#2 ← phi( cputs/(to_nomodify byte*) cputs::s#3 cputs::@3/(to_nomodify byte*) cputs::s#4 )
  (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
  if((bool~) cputs::$1) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (to_nomodify byte*) cputs::s#5 ← phi( cputs::@1/(to_nomodify byte*) cputs::s#0 )
  (byte) cputs::c#2 ← phi( cputs::@1/(byte) cputs::c#1 )
  (byte) cputc::c#0 ← (byte) cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  (to_nomodify byte*) cputs::s#4 ← phi( cputs::@2/(to_nomodify byte*) cputs::s#5 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_string::@5 printf_string::@6
  (byte) printf_padding::pad#4 ← phi( printf_string::@5/(byte) printf_padding::pad#0 printf_string::@6/(byte) printf_padding::pad#1 )
  (byte) printf_padding::length#3 ← phi( printf_string::@5/(byte) printf_padding::length#0 printf_string::@6/(byte) printf_padding::length#1 )
  (byte) printf_padding::i#0 ← (byte) 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  (byte) printf_padding::pad#3 ← phi( printf_padding/(byte) printf_padding::pad#4 printf_padding::@3/(byte) printf_padding::pad#5 )
  (byte) printf_padding::length#2 ← phi( printf_padding/(byte) printf_padding::length#3 printf_padding::@3/(byte) printf_padding::length#4 )
  (byte) printf_padding::i#2 ← phi( printf_padding/(byte) printf_padding::i#0 printf_padding::@3/(byte) printf_padding::i#1 )
  (bool~) printf_padding::$0 ← (byte) printf_padding::i#2 < (byte) printf_padding::length#2
  if((bool~) printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  (byte) printf_padding::length#5 ← phi( printf_padding::@1/(byte) printf_padding::length#2 )
  (byte) printf_padding::i#4 ← phi( printf_padding::@1/(byte) printf_padding::i#2 )
  (byte) printf_padding::pad#2 ← phi( printf_padding::@1/(byte) printf_padding::pad#3 )
  (byte) cputc::c#1 ← (byte) printf_padding::pad#2
  call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  (byte) printf_padding::pad#5 ← phi( printf_padding::@2/(byte) printf_padding::pad#2 )
  (byte) printf_padding::length#4 ← phi( printf_padding::@2/(byte) printf_padding::length#5 )
  (byte) printf_padding::i#3 ← phi( printf_padding::@2/(byte) printf_padding::i#4 )
  (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@1 main::@3 main::@5 main::@7
  (byte*) printf_string::str#6 ← phi( main::@1/(byte*) printf_string::str#0 main::@3/(byte*) printf_string::str#1 main::@5/(byte*) printf_string::str#2 main::@7/(byte*) printf_string::str#3 )
  (byte) printf_string::format_justify_left#6 ← phi( main::@1/(byte) printf_string::format_justify_left#0 main::@3/(byte) printf_string::format_justify_left#1 main::@5/(byte) printf_string::format_justify_left#2 main::@7/(byte) printf_string::format_justify_left#3 )
  (byte) printf_string::format_min_length#4 ← phi( main::@1/(byte) printf_string::format_min_length#0 main::@3/(byte) printf_string::format_min_length#1 main::@5/(byte) printf_string::format_min_length#2 main::@7/(byte) printf_string::format_min_length#3 )
  (signed byte) printf_string::padding#0 ← (signed byte) 0
  (bool~) printf_string::$14 ← (number) 0 != (byte) printf_string::format_min_length#4
  (bool~) printf_string::$0 ← ! (bool~) printf_string::$14
  if((bool~) printf_string::$0) goto printf_string::@1
  to:printf_string::@3
printf_string::@1: scope:[printf_string]  from printf_string printf_string::@4 printf_string::@7
  (byte*) printf_string::str#7 ← phi( printf_string/(byte*) printf_string::str#6 printf_string::@4/(byte*) printf_string::str#9 printf_string::@7/(byte*) printf_string::str#10 )
  (signed byte) printf_string::padding#3 ← phi( printf_string/(signed byte) printf_string::padding#0 printf_string::@4/(signed byte) printf_string::padding#2 printf_string::@7/(signed byte) printf_string::padding#1 )
  (byte) printf_string::format_justify_left#4 ← phi( printf_string/(byte) printf_string::format_justify_left#6 printf_string::@4/(byte) printf_string::format_justify_left#7 printf_string::@7/(byte) printf_string::format_justify_left#8 )
  (bool~) printf_string::$15 ← (number) 0 != (byte) printf_string::format_justify_left#4
  (bool~) printf_string::$1 ← ! (bool~) printf_string::$15
  (bool~) printf_string::$2 ← (bool~) printf_string::$1 && (signed byte) printf_string::padding#3
  (bool~) printf_string::$3 ← ! (bool~) printf_string::$2
  if((bool~) printf_string::$3) goto printf_string::@2
  to:printf_string::@5
printf_string::@3: scope:[printf_string]  from printf_string
  (byte) printf_string::format_justify_left#10 ← phi( printf_string/(byte) printf_string::format_justify_left#6 )
  (byte) printf_string::format_min_length#6 ← phi( printf_string/(byte) printf_string::format_min_length#4 )
  (byte*) printf_string::str#4 ← phi( printf_string/(byte*) printf_string::str#6 )
  (byte*) strlen::str#1 ← (byte*) printf_string::str#4
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:printf_string::@7
printf_string::@7: scope:[printf_string]  from printf_string::@3
  (byte*) printf_string::str#10 ← phi( printf_string::@3/(byte*) printf_string::str#4 )
  (byte) printf_string::format_justify_left#8 ← phi( printf_string::@3/(byte) printf_string::format_justify_left#10 )
  (byte) printf_string::format_min_length#5 ← phi( printf_string::@3/(byte) printf_string::format_min_length#6 )
  (word) strlen::return#4 ← phi( printf_string::@3/(word) strlen::return#2 )
  (word~) printf_string::$9 ← (word) strlen::return#4
  (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$9
  (signed byte~) printf_string::$13 ← (signed byte)(byte) printf_string::format_min_length#5
  (signed byte~) printf_string::$10 ← (signed byte~) printf_string::$13 - (signed byte) printf_string::len#0
  (signed byte) printf_string::padding#1 ← (signed byte~) printf_string::$10
  (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (number) 0
  (bool~) printf_string::$12 ← ! (bool~) printf_string::$11
  if((bool~) printf_string::$12) goto printf_string::@1
  to:printf_string::@4
printf_string::@4: scope:[printf_string]  from printf_string::@7
  (byte*) printf_string::str#9 ← phi( printf_string::@7/(byte*) printf_string::str#10 )
  (byte) printf_string::format_justify_left#7 ← phi( printf_string::@7/(byte) printf_string::format_justify_left#8 )
  (signed byte) printf_string::padding#2 ← (number) 0
  to:printf_string::@1
printf_string::@2: scope:[printf_string]  from printf_string::@1 printf_string::@9
  (signed byte) printf_string::padding#7 ← phi( printf_string::@1/(signed byte) printf_string::padding#3 printf_string::@9/(signed byte) printf_string::padding#8 )
  (byte) printf_string::format_justify_left#9 ← phi( printf_string::@1/(byte) printf_string::format_justify_left#4 printf_string::@9/(byte) printf_string::format_justify_left#11 )
  (byte*) printf_string::str#5 ← phi( printf_string::@1/(byte*) printf_string::str#7 printf_string::@9/(byte*) printf_string::str#8 )
  (to_nomodify byte*) cputs::s#1 ← (byte*) printf_string::str#5
  call cputs 
  to:printf_string::@8
printf_string::@8: scope:[printf_string]  from printf_string::@2
  (signed byte) printf_string::padding#4 ← phi( printf_string::@2/(signed byte) printf_string::padding#7 )
  (byte) printf_string::format_justify_left#5 ← phi( printf_string::@2/(byte) printf_string::format_justify_left#9 )
  (bool~) printf_string::$6 ← (byte) printf_string::format_justify_left#5 && (signed byte) printf_string::padding#4
  (bool~) printf_string::$7 ← ! (bool~) printf_string::$6
  if((bool~) printf_string::$7) goto printf_string::@return
  to:printf_string::@6
printf_string::@5: scope:[printf_string]  from printf_string::@1
  (byte) printf_string::format_justify_left#12 ← phi( printf_string::@1/(byte) printf_string::format_justify_left#4 )
  (byte*) printf_string::str#11 ← phi( printf_string::@1/(byte*) printf_string::str#7 )
  (signed byte) printf_string::padding#5 ← phi( printf_string::@1/(signed byte) printf_string::padding#3 )
  (byte) printf_padding::pad#0 ← (byte) ' '
  (byte) printf_padding::length#0 ← (byte)(signed byte) printf_string::padding#5
  call printf_padding 
  to:printf_string::@9
printf_string::@9: scope:[printf_string]  from printf_string::@5
  (signed byte) printf_string::padding#8 ← phi( printf_string::@5/(signed byte) printf_string::padding#5 )
  (byte) printf_string::format_justify_left#11 ← phi( printf_string::@5/(byte) printf_string::format_justify_left#12 )
  (byte*) printf_string::str#8 ← phi( printf_string::@5/(byte*) printf_string::str#11 )
  to:printf_string::@2
printf_string::@6: scope:[printf_string]  from printf_string::@8
  (signed byte) printf_string::padding#6 ← phi( printf_string::@8/(signed byte) printf_string::padding#4 )
  (byte) printf_padding::pad#1 ← (byte) ' '
  (byte) printf_padding::length#1 ← (byte)(signed byte) printf_string::padding#6
  call printf_padding 
  to:printf_string::@10
printf_string::@10: scope:[printf_string]  from printf_string::@6
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@10 printf_string::@8
  return 
  to:@return

(void()) main()
main: scope:[main]  from @2
  call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) printf_string::str#0 ← (const byte*) main::str
  (byte) printf_string::format_min_length#0 ← (number) $a
  (byte) printf_string::format_justify_left#0 ← (number) 0
  call printf_string 
  to:main::@2
main::@2: scope:[main]  from main::@1
  call cputln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) printf_string::str#1 ← (const byte*) main::str1
  (byte) printf_string::format_min_length#1 ← (number) $a
  (byte) printf_string::format_justify_left#1 ← (number) 0
  call printf_string 
  to:main::@4
main::@4: scope:[main]  from main::@3
  call cputln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) printf_string::str#2 ← (const byte*) main::str2
  (byte) printf_string::format_min_length#2 ← (number) $a
  (byte) printf_string::format_justify_left#2 ← (number) 1
  call printf_string 
  to:main::@6
main::@6: scope:[main]  from main::@5
  call cputln 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) printf_string::str#3 ← (const byte*) main::str3
  (byte) printf_string::format_min_length#3 ← (number) $a
  (byte) printf_string::format_justify_left#3 ← (number) 1
  call printf_string 
  to:main::@8
main::@8: scope:[main]  from main::@7
  to:main::@return
main::@return: scope:[main]  from main::@8
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*)(number) $d800
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*)(number) $400
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) clrscr()
(bool~) clrscr::$0
(bool~) clrscr::$1
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@6
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#0
(byte) clrscr::c#1
(byte) clrscr::c#2
(byte) clrscr::c#3
(byte) clrscr::l
(byte) clrscr::l#0
(byte) clrscr::l#1
(byte) clrscr::l#2
(byte) clrscr::l#3
(byte) clrscr::l#4
(byte) clrscr::l#5
(byte) clrscr::l#6
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#0
(byte*) clrscr::line_cols#1
(byte*) clrscr::line_cols#2
(byte*) clrscr::line_cols#3
(byte*) clrscr::line_cols#4
(byte*) clrscr::line_cols#5
(byte*) clrscr::line_cols#6
(byte*) clrscr::line_text
(byte*) clrscr::line_text#0
(byte*) clrscr::line_text#1
(byte*) clrscr::line_text#2
(byte*) clrscr::line_text#3
(byte*) clrscr::line_text#4
(byte*) clrscr::line_text#5
(byte*) clrscr::line_text#6
(byte*) conio_cursor_color loadstore
(byte*) conio_cursor_text loadstore
(byte) conio_cursor_x loadstore
(byte) conio_cursor_y loadstore
(byte) conio_scroll_enable loadstore
(byte) conio_textcolor loadstore
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(bool~) cputc::$1
(bool~) cputc::$2
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(byte) cputc::c#3
(void()) cputln()
(byte*~) cputln::$0
(byte*~) cputln::$1
(byte*~) cputln::$2
(byte*~) cputln::$3
(label) cputln::@1
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(bool~) cputs::$1
(label) cputs::@1
(label) cputs::@2
(label) cputs::@3
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#0
(byte) cputs::c#1
(byte) cputs::c#2
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0
(to_nomodify byte*) cputs::s#1
(to_nomodify byte*) cputs::s#2
(to_nomodify byte*) cputs::s#3
(to_nomodify byte*) cputs::s#4
(to_nomodify byte*) cputs::s#5
(void()) cscroll()
(bool~) cscroll::$0
(bool~) cscroll::$1
(byte*~) cscroll::$7
(byte*~) cscroll::$8
(bool~) cscroll::$9
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@return
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(number~) gotoxy::$4
(number~) gotoxy::$5
(byte*~) gotoxy::$6
(byte*~) gotoxy::$7
(word~) gotoxy::$8
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::offset
(word) gotoxy::offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(const byte*) main::str[(byte) 4]  = (byte*) "cml"
(const byte*) main::str1[(byte) 6]  = (byte*) "rules"
(const byte*) main::str2[(byte) 4]  = (byte*) "cml"
(const byte*) main::str3[(byte) 6]  = (byte*) "rules"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(void*) memcpy::destination#5
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(word) memcpy::num#2
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::return#4
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(bool~) printf_padding::$0
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#0
(byte) printf_padding::i#1
(byte) printf_padding::i#2
(byte) printf_padding::i#3
(byte) printf_padding::i#4
(byte) printf_padding::length
(byte) printf_padding::length#0
(byte) printf_padding::length#1
(byte) printf_padding::length#2
(byte) printf_padding::length#3
(byte) printf_padding::length#4
(byte) printf_padding::length#5
(byte) printf_padding::pad
(byte) printf_padding::pad#0
(byte) printf_padding::pad#1
(byte) printf_padding::pad#2
(byte) printf_padding::pad#3
(byte) printf_padding::pad#4
(byte) printf_padding::pad#5
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(bool~) printf_string::$0
(bool~) printf_string::$1
(signed byte~) printf_string::$10
(bool~) printf_string::$11
(bool~) printf_string::$12
(signed byte~) printf_string::$13
(bool~) printf_string::$14
(bool~) printf_string::$15
(bool~) printf_string::$2
(bool~) printf_string::$3
(bool~) printf_string::$6
(bool~) printf_string::$7
(word~) printf_string::$9
(label) printf_string::@1
(label) printf_string::@10
(label) printf_string::@2
(label) printf_string::@3
(label) printf_string::@4
(label) printf_string::@5
(label) printf_string::@6
(label) printf_string::@7
(label) printf_string::@8
(label) printf_string::@9
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_justify_left#0
(byte) printf_string::format_justify_left#1
(byte) printf_string::format_justify_left#10
(byte) printf_string::format_justify_left#11
(byte) printf_string::format_justify_left#12
(byte) printf_string::format_justify_left#2
(byte) printf_string::format_justify_left#3
(byte) printf_string::format_justify_left#4
(byte) printf_string::format_justify_left#5
(byte) printf_string::format_justify_left#6
(byte) printf_string::format_justify_left#7
(byte) printf_string::format_justify_left#8
(byte) printf_string::format_justify_left#9
(byte) printf_string::format_min_length
(byte) printf_string::format_min_length#0
(byte) printf_string::format_min_length#1
(byte) printf_string::format_min_length#2
(byte) printf_string::format_min_length#3
(byte) printf_string::format_min_length#4
(byte) printf_string::format_min_length#5
(byte) printf_string::format_min_length#6
(signed byte) printf_string::len
(signed byte) printf_string::len#0
(signed byte) printf_string::padding
(signed byte) printf_string::padding#0
(signed byte) printf_string::padding#1
(signed byte) printf_string::padding#2
(signed byte) printf_string::padding#3
(signed byte) printf_string::padding#4
(signed byte) printf_string::padding#5
(signed byte) printf_string::padding#6
(signed byte) printf_string::padding#7
(signed byte) printf_string::padding#8
(byte*) printf_string::str
(byte*) printf_string::str#0
(byte*) printf_string::str#1
(byte*) printf_string::str#10
(byte*) printf_string::str#11
(byte*) printf_string::str#2
(byte*) printf_string::str#3
(byte*) printf_string::str#4
(byte*) printf_string::str#5
(byte*) printf_string::str#6
(byte*) printf_string::str#7
(byte*) printf_string::str#8
(byte*) printf_string::str#9
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
Adding number conversion cast (unumber) $19 in (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (number) $19
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_y ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (number) $28
Adding number conversion cast (unumber) $28 in (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (number) $28
Adding number conversion cast (unumber) $19 in (bool~) gotoxy::$0 ← (byte) gotoxy::y#2 > (number) $19
Adding number conversion cast (unumber) $28 in (bool~) gotoxy::$2 ← (byte) gotoxy::x#2 >= (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (number) $28
Adding number conversion cast (unumber) gotoxy::$4 in (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (unumber)(number) $28
Adding number conversion cast (unumber) gotoxy::$5 in (number~) gotoxy::$5 ← (unumber~) gotoxy::$4 + (byte) gotoxy::x#3
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $28 in (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (number) $28
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
Adding number conversion cast (unumber) 0 in (bool~) cscroll::$9 ← (number) 0 != (byte) conio_scroll_enable
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#0 ← (number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$14 ← (number) 0 != (byte) printf_string::format_min_length#4
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$15 ← (number) 0 != (byte) printf_string::format_justify_left#4
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_string::padding#2 ← (number) 0
Adding number conversion cast (unumber) $a in (byte) printf_string::format_min_length#0 ← (number) $a
Adding number conversion cast (unumber) 0 in (byte) printf_string::format_justify_left#0 ← (number) 0
Adding number conversion cast (unumber) $a in (byte) printf_string::format_min_length#1 ← (number) $a
Adding number conversion cast (unumber) 0 in (byte) printf_string::format_justify_left#1 ← (number) 0
Adding number conversion cast (unumber) $a in (byte) printf_string::format_min_length#2 ← (number) $a
Adding number conversion cast (unumber) 1 in (byte) printf_string::format_justify_left#2 ← (number) 1
Adding number conversion cast (unumber) $a in (byte) printf_string::format_min_length#3 ← (number) $a
Adding number conversion cast (unumber) 1 in (byte) printf_string::format_justify_left#3 ← (number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_y ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memset::num#0 ← (unumber)(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#1 ← (unumber)(number) 0
Inlining cast (signed byte) printf_string::padding#2 ← (snumber)(number) 0
Inlining cast (byte) printf_string::format_min_length#0 ← (unumber)(number) $a
Inlining cast (byte) printf_string::format_justify_left#0 ← (unumber)(number) 0
Inlining cast (byte) printf_string::format_min_length#1 ← (unumber)(number) $a
Inlining cast (byte) printf_string::format_justify_left#1 ← (unumber)(number) 0
Inlining cast (byte) printf_string::format_min_length#2 ← (unumber)(number) $a
Inlining cast (byte) printf_string::format_justify_left#2 ← (unumber)(number) 1
Inlining cast (byte) printf_string::format_min_length#3 ← (unumber)(number) $a
Inlining cast (byte) printf_string::format_justify_left#3 ← (unumber)(number) 1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in (unumber~) gotoxy::$4 ← (word~) gotoxy::$8 * (byte) $28
Inferred type updated to word in (unumber~) gotoxy::$5 ← (word~) gotoxy::$4 + (byte) gotoxy::x#3
Inversing boolean not [20] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [19] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [83] (bool~) gotoxy::$1 ← (byte) gotoxy::y#2 <= (byte) $19 from [82] (bool~) gotoxy::$0 ← (byte) gotoxy::y#2 > (byte) $19
Inversing boolean not [87] (bool~) gotoxy::$3 ← (byte) gotoxy::x#2 < (byte) $28 from [86] (bool~) gotoxy::$2 ← (byte) gotoxy::x#2 >= (byte) $28
Inversing boolean not [116] (bool~) cputc::$2 ← (byte) conio_cursor_x != (byte) $28 from [115] (bool~) cputc::$1 ← (byte) conio_cursor_x == (byte) $28
Inversing boolean not [133] (bool~) cscroll::$1 ← (byte) conio_cursor_y != (byte) $19 from [132] (bool~) cscroll::$0 ← (byte) conio_cursor_y == (byte) $19
Inversing boolean not [192] (bool~) printf_string::$0 ← (byte) 0 == (byte) printf_string::format_min_length#4 from [191] (bool~) printf_string::$14 ← (byte) 0 != (byte) printf_string::format_min_length#4
Inversing boolean not [196] (bool~) printf_string::$1 ← (byte) 0 == (byte) printf_string::format_justify_left#4 from [195] (bool~) printf_string::$15 ← (byte) 0 != (byte) printf_string::format_justify_left#4
Inversing boolean not [211] (bool~) printf_string::$12 ← (signed byte) printf_string::padding#1 >= (signed byte) 0 from [210] (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (signed byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias gotoxy::x#4 = gotoxy::x#5 
Alias gotoxy::offset#0 = gotoxy::$5 
Alias gotoxy::y#4 = gotoxy::y#5 
Alias cputc::c#2 = cputc::c#3 
Alias cputs::c#1 = cputs::c#2 
Alias cputs::s#0 = cputs::s#5 cputs::s#4 
Alias printf_padding::pad#2 = printf_padding::pad#3 printf_padding::pad#5 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#2 = printf_padding::length#5 printf_padding::length#4 
Alias printf_string::str#10 = printf_string::str#4 printf_string::str#6 printf_string::str#9 
Alias printf_string::format_min_length#4 = printf_string::format_min_length#6 printf_string::format_min_length#5 
Alias printf_string::format_justify_left#10 = printf_string::format_justify_left#6 printf_string::format_justify_left#8 printf_string::format_justify_left#7 
Alias strlen::return#2 = strlen::return#4 
Alias printf_string::padding#1 = printf_string::$10 
Alias printf_string::format_justify_left#5 = printf_string::format_justify_left#9 
Alias printf_string::padding#4 = printf_string::padding#7 printf_string::padding#6 
Alias printf_string::padding#3 = printf_string::padding#5 printf_string::padding#8 
Alias printf_string::str#11 = printf_string::str#7 printf_string::str#8 
Alias printf_string::format_justify_left#11 = printf_string::format_justify_left#12 printf_string::format_justify_left#4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Alias gotoxy::x#2 = gotoxy::x#4 
Alias gotoxy::y#3 = gotoxy::y#4 
Alias printf_string::format_justify_left#10 = printf_string::format_justify_left#11 printf_string::format_justify_left#5 
Alias printf_string::str#10 = printf_string::str#11 printf_string::str#5 
Alias printf_string::padding#3 = printf_string::padding#4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#3 (void*) memcpy::destination#2
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) strlen::str#4 (byte*) strlen::str#1
Identical Phi Values (byte*) clrscr::line_text#2 (byte*) clrscr::line_text#5
Identical Phi Values (byte*) clrscr::line_cols#2 (byte*) clrscr::line_cols#5
Identical Phi Values (byte) clrscr::l#3 (byte) clrscr::l#2
Identical Phi Values (byte) gotoxy::y#2 (byte) gotoxy::y#1
Identical Phi Values (byte) gotoxy::x#2 (byte) gotoxy::x#1
Identical Phi Values (to_nomodify byte*) cputs::s#3 (to_nomodify byte*) cputs::s#1
Identical Phi Values (byte) printf_padding::length#2 (byte) printf_padding::length#3
Identical Phi Values (byte) printf_padding::pad#2 (byte) printf_padding::pad#4
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [7] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [14] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [21] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) strlen::$0 [29] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
Simple Condition (bool~) clrscr::$0 [44] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@2
Simple Condition (bool~) clrscr::$1 [52] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@5
Simple Condition (bool~) gotoxy::$1 [62] if((byte) gotoxy::y#1<=(byte) $19) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [65] if((byte) gotoxy::x#1<(byte) $28) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [81] if((byte) cputc::c#2==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$2 [89] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
Simple Condition (bool~) cscroll::$1 [105] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
Simple Condition (bool~) cscroll::$9 [107] if((byte) 0!=(byte) conio_scroll_enable) goto cscroll::@3
Simple Condition (bool~) cputs::$1 [143] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
Simple Condition (bool~) printf_padding::$0 [151] if((byte) printf_padding::i#2<(byte) printf_padding::length#3) goto printf_padding::@2
Simple Condition (bool~) printf_string::$0 [159] if((byte) 0==(byte) printf_string::format_min_length#4) goto printf_string::@1
Simple Condition (bool~) printf_string::$12 [173] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [163] (bool~) printf_string::$3 ← ! (bool~) printf_string::$2
Rewriting && if()-condition to two if()s [162] (bool~) printf_string::$2 ← (bool~) printf_string::$1 && (signed byte) printf_string::padding#3
Rewriting ! if()-condition to reversed if() [178] (bool~) printf_string::$7 ← ! (bool~) printf_string::$6
Rewriting && if()-condition to two if()s [177] (bool~) printf_string::$6 ← (byte) printf_string::format_justify_left#10 && (signed byte) printf_string::padding#3
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) printf_string::format_justify_left#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_string::padding#3
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_string::padding#3
Constant right-side identified [110] (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Constant right-side identified [115] (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) strlen::len#0 = 0
Constant (const byte*) clrscr::line_text#0 = CONIO_SCREEN_TEXT
Constant (const byte*) clrscr::line_cols#0 = CONIO_SCREEN_COLORS
Constant (const byte) clrscr::l#0 = 0
Constant (const byte) clrscr::c#0 = 0
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#0 = 0
Constant (const void*) memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant (const void*) memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant (const word) memcpy::num#0 = (unumber)$19*$28-$28
Constant (const void*) memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant (const void*) memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant (const word) memcpy::num#1 = (unumber)$19*$28-$28
Constant (const void*) memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $28
Constant (const void*) memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant (const word) memset::num#1 = $28
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) gotoxy::y#1 = 0
Constant (const byte) cputs::c#0 = 0
Constant (const byte) printf_padding::i#0 = 0
Constant (const signed byte) printf_string::padding#0 = 0
Constant (const signed byte) printf_string::padding#2 = 0
Constant (const byte) printf_padding::pad#0 = ' '
Constant (const byte) printf_padding::pad#1 = ' '
Constant (const byte*) printf_string::str#0 = main::str
Constant (const byte) printf_string::format_min_length#0 = $a
Constant (const byte) printf_string::format_justify_left#0 = 0
Constant (const byte*) printf_string::str#1 = main::str1
Constant (const byte) printf_string::format_min_length#1 = $a
Constant (const byte) printf_string::format_justify_left#1 = 0
Constant (const byte*) printf_string::str#2 = main::str2
Constant (const byte) printf_string::format_min_length#2 = $a
Constant (const byte) printf_string::format_justify_left#2 = 1
Constant (const byte*) printf_string::str#3 = main::str3
Constant (const byte) printf_string::format_min_length#3 = $a
Constant (const byte) printf_string::format_justify_left#3 = 1
Constant (const byte) conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant (const byte) conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) memset::c#1 = conio_textcolor
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [62] if((const byte) gotoxy::y#1<=(byte) $19) goto gotoxy::@1
if() condition always true - replacing block destination [65] if((const byte) gotoxy::x#1<(byte) $28) goto gotoxy::@2
if() condition always true - replacing block destination [107] if((byte) 0!=(const byte) conio_scroll_enable) goto cscroll::@3
Successful SSA optimization Pass2ConstantIfs
Consolidated constant strings into (const byte*) main::str
Consolidated constant strings into (const byte*) main::str1
Successful SSA optimization Pass2ConstantStringConsolidation
Eliminating unused variable (void*) memcpy::return#2 and assignment [82] (void*) memcpy::return#2 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memcpy::return#3 and assignment [84] (void*) memcpy::return#3 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memset::return#2 and assignment [86] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [88] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused constant (const byte) cputs::c#0
Eliminating unused constant (const byte) conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) gotoxy::y#3 from unused block gotoxy::@1
Eliminating variable (byte) gotoxy::x#3 from unused block gotoxy::@2
Eliminating variable (word~) gotoxy::$8 from unused block gotoxy::@2
Eliminating variable (word~) gotoxy::$4 from unused block gotoxy::@2
Eliminating variable (word) gotoxy::offset#0 from unused block gotoxy::@2
Eliminating variable (byte*~) gotoxy::$6 from unused block gotoxy::@2
Eliminating variable (byte*~) gotoxy::$7 from unused block gotoxy::@2
Removing unused procedure gotoxy
Removing unused procedure block gotoxy
Removing PHI-reference to removed block (gotoxy) in block gotoxy::@1
Removing unused procedure block gotoxy::@1
Removing PHI-reference to removed block (gotoxy::@1) in block gotoxy::@2
Removing unused procedure block gotoxy::@3
Removing unused procedure block gotoxy::@2
Removing unused procedure block gotoxy::@4
Removing unused procedure block gotoxy::@return
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$16 ← (number) 0 != (byte) printf_string::format_justify_left#10
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$17 ← (number) 0 != (signed byte) printf_string::padding#3
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$18 ← (number) 0 != (signed byte) printf_string::padding#3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$3 cscroll::$8 
Simple Condition (bool~) printf_string::$1 [97] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@11
Simple Condition (bool~) printf_string::$16 [109] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@12
Simple Condition (bool~) printf_string::$17 [126] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@5
Simple Condition (bool~) printf_string::$18 [128] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@6
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [97] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@2
Negating conditional jump and destination [109] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$3 cscroll::$8 
Inlining Noop Cast [1] (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [2] (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [3] (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [13] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [15] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [102] (signed byte~) printf_string::$13 ← (signed byte)(byte) printf_string::format_min_length#4 keeping printf_string::format_min_length#4
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const void*) memcpy::destination#0
Inlining constant with var siblings (const void*) memcpy::source#0
Inlining constant with var siblings (const word) memcpy::num#0
Inlining constant with var siblings (const void*) memcpy::destination#1
Inlining constant with var siblings (const void*) memcpy::source#1
Inlining constant with var siblings (const word) memcpy::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) strlen::len#0
Inlining constant with var siblings (const byte*) clrscr::line_text#0
Inlining constant with var siblings (const byte*) clrscr::line_cols#0
Inlining constant with var siblings (const byte) clrscr::l#0
Inlining constant with var siblings (const byte) clrscr::c#0
Inlining constant with var siblings (const byte) printf_padding::i#0
Inlining constant with var siblings (const byte) printf_padding::pad#0
Inlining constant with var siblings (const byte) printf_padding::pad#1
Inlining constant with var siblings (const signed byte) printf_string::padding#0
Inlining constant with var siblings (const signed byte) printf_string::padding#2
Inlining constant with var siblings (const byte*) printf_string::str#0
Inlining constant with var siblings (const byte) printf_string::format_min_length#0
Inlining constant with var siblings (const byte) printf_string::format_justify_left#0
Inlining constant with var siblings (const byte*) printf_string::str#1
Inlining constant with var siblings (const byte) printf_string::format_min_length#1
Inlining constant with var siblings (const byte) printf_string::format_justify_left#1
Inlining constant with var siblings (const byte*) printf_string::str#2
Inlining constant with var siblings (const byte) printf_string::format_min_length#2
Inlining constant with var siblings (const byte) printf_string::format_justify_left#2
Inlining constant with var siblings (const byte*) printf_string::str#3
Inlining constant with var siblings (const byte) printf_string::format_min_length#3
Inlining constant with var siblings (const byte) printf_string::format_justify_left#3
Constant inlined main::str2 = (const byte*) main::str
Constant inlined main::str3 = (const byte*) main::str1
Constant inlined printf_string::format_min_length#3 = (byte) $a
Constant inlined conio_textcolor = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
Constant inlined memcpy::destination#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined memset::num#1 = (byte) $28
Constant inlined memcpy::destination#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
Constant inlined memset::num#0 = (byte) $28
Constant inlined clrscr::l#0 = (byte) 0
Constant inlined strlen::len#0 = (word) 0
Constant inlined printf_string::format_min_length#0 = (byte) $a
Constant inlined printf_string::format_min_length#1 = (byte) $a
Constant inlined printf_string::format_min_length#2 = (byte) $a
Constant inlined memcpy::source#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28
Constant inlined printf_string::str#0 = (const byte*) main::str
Constant inlined printf_string::str#3 = (const byte*) main::str1
Constant inlined printf_string::str#2 = (const byte*) main::str
Constant inlined printf_string::str#1 = (const byte*) main::str1
Constant inlined memset::str#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28
Constant inlined printf_padding::pad#0 = (byte) ' '
Constant inlined memset::str#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28
Constant inlined printf_padding::i#0 = (byte) 0
Constant inlined printf_padding::pad#1 = (byte) ' '
Constant inlined clrscr::line_text#0 = (const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined memcpy::source#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28
Constant inlined memcpy::num#1 = (word)(number) $19*(number) $28-(number) $28
Constant inlined memcpy::num#0 = (word)(number) $19*(number) $28-(number) $28
Constant inlined printf_string::padding#0 = (signed byte) 0
Constant inlined printf_string::padding#2 = (signed byte) 0
Constant inlined memset::c#0 = (byte) ' '
Constant inlined memset::c#1 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
Constant inlined clrscr::c#0 = (byte) 0
Constant inlined printf_string::format_justify_left#1 = (byte) 0
Constant inlined clrscr::line_cols#0 = (const nomodify byte*) CONIO_SCREEN_COLORS
Constant inlined printf_string::format_justify_left#0 = (byte) 0
Constant inlined printf_string::format_justify_left#3 = (byte) 1
Constant inlined printf_string::format_justify_left#2 = (byte) 1
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$3 cscroll::$8 
Identical Phi Values (word) memcpy::num#2 (word)(number) $19*(number) $28-(number) $28
Identical Phi Values (word) memset::num#2 (byte) $28
Identical Phi Values (byte) printf_string::format_min_length#4 (byte) $a
Successful SSA optimization Pass2IdenticalPhiElimination
Constant value identified (signed byte)$a in [97] (signed byte) printf_string::padding#1 ← (signed byte)(byte) $a - (signed byte) printf_string::len#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [9] if((byte) $28<=(byte) 0) goto memset::@1
Removing PHI-reference to removed block (printf_string) in block printf_string::@1
if() condition always false - eliminating [89] if((byte) 0==(byte) $a) goto printf_string::@1
Successful SSA optimization Pass2ConstantIfs
Simplifying constant integer cast $a
Successful SSA optimization PassNCastSimplification
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$3 cscroll::$8 
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$3 cscroll::$8 
Added new block during phi lifting printf_string::@13(between printf_string::@7 and printf_string::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of printf_string::@4
Adding NOP phi() at start of printf_string::@10
Adding NOP phi() at start of printf_string::@9
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of strlen::@3
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@2
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to clrscr:10 printf_string:12 cputln:14 printf_string:16 cputln:18 printf_string:20 cputln:22 printf_string:24 
Calls in [printf_string] to strlen:29 cputs:40 printf_padding:46 printf_padding:50 
Calls in [printf_padding] to cputc:59 
Calls in [cputc] to cscroll:72 cputln:76 
Calls in [cputln] to cscroll:86 
Calls in [cscroll] to memcpy:92 memcpy:94 memset:96 memset:98 
Calls in [cputs] to cputc:136 

Created 21 initial phi equivalence classes
Coalesced [45] printf_padding::length#7 ← printf_padding::length#1
Coalesced [49] printf_padding::length#6 ← printf_padding::length#0
Coalesced [52] printf_string::padding#9 ← printf_string::padding#1
Coalesced [58] cputc::c#5 ← cputc::c#1
Coalesced [61] printf_padding::i#5 ← printf_padding::i#1
Coalesced [114] memset::dst#5 ← memset::dst#1
Coalesced [126] memcpy::src#5 ← memcpy::src#1
Coalesced [127] memcpy::dst#5 ← memcpy::dst#1
Coalesced [128] cputs::s#6 ← cputs::s#1
Coalesced [135] cputc::c#4 ← cputc::c#0
Coalesced [137] cputs::s#7 ← cputs::s#0
Coalesced [138] strlen::str#5 ← strlen::str#1
Coalesced [145] strlen::str#6 ← strlen::str#0
Coalesced [146] strlen::len#5 ← strlen::len#1
Coalesced [161] clrscr::l#7 ← clrscr::l#1
Coalesced [162] clrscr::line_text#7 ← clrscr::line_text#1
Coalesced [163] clrscr::line_cols#7 ← clrscr::line_cols#1
Coalesced [167] clrscr::c#4 ← clrscr::c#1
Coalesced down to 21 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@8
Culled Empty Block (label) printf_string::@4
Culled Empty Block (label) printf_string::@10
Culled Empty Block (label) printf_string::@9
Culled Empty Block (label) cputc::@5
Culled Empty Block (label) cputc::@4
Culled Empty Block (label) cputln::@1
Culled Empty Block (label) cscroll::@1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) cputs::@3
Culled Empty Block (label) strlen::@3
Culled Empty Block (label) clrscr::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block clrscr::@3 to clrscr::@2
Renumbering block clrscr::@4 to clrscr::@3
Renumbering block clrscr::@5 to clrscr::@4
Renumbering block clrscr::@6 to clrscr::@5
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block printf_string::@5 to printf_string::@4
Renumbering block printf_string::@6 to printf_string::@5
Renumbering block printf_string::@7 to printf_string::@6
Renumbering block printf_string::@8 to printf_string::@7
Renumbering block printf_string::@11 to printf_string::@8
Renumbering block printf_string::@12 to printf_string::@9
Renumbering block printf_string::@13 to printf_string::@10
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of printf_string::@10
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cputs
Adding NOP phi() at start of strlen
Adding NOP phi() at start of clrscr

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:@2
@2: scope:[]  from @1
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @2
  [7] phi()

(void()) main()
main: scope:[main]  from @2
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call printf_string 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call cputln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call printf_string 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] phi()
  [17] call cputln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] phi()
  [19] call printf_string 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [20] phi()
  [21] call cputln 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [22] phi()
  [23] call printf_string 
  to:main::@return
main::@return: scope:[main]  from main::@7
  [24] return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@1 main::@3 main::@5 main::@7
  [25] (byte*) printf_string::str#10 ← phi( main::@1/(const byte*) main::str main::@3/(const byte*) main::str1 main::@5/(const byte*) main::str main::@7/(const byte*) main::str1 )
  [25] (byte) printf_string::format_justify_left#10 ← phi( main::@1/(byte) 0 main::@3/(byte) 0 main::@5/(byte) 1 main::@7/(byte) 1 )
  to:printf_string::@3
printf_string::@3: scope:[printf_string]  from printf_string
  [26] (byte*) strlen::str#1 ← (byte*) printf_string::str#10
  [27] call strlen 
  [28] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_string::@6
printf_string::@6: scope:[printf_string]  from printf_string::@3
  [29] (word~) printf_string::$9 ← (word) strlen::return#2
  [30] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$9
  [31] (signed byte) printf_string::padding#1 ← (signed byte) $a - (signed byte) printf_string::len#0
  [32] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@10
  to:printf_string::@1
printf_string::@10: scope:[printf_string]  from printf_string::@6
  [33] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string::@10 printf_string::@6
  [34] (signed byte) printf_string::padding#3 ← phi( printf_string::@6/(signed byte) 0 printf_string::@10/(signed byte) printf_string::padding#1 )
  [35] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@2
  to:printf_string::@8
printf_string::@8: scope:[printf_string]  from printf_string::@1
  [36] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@4
  to:printf_string::@2
printf_string::@4: scope:[printf_string]  from printf_string::@8
  [37] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_string::padding#3
  [38] call printf_padding 
  to:printf_string::@2
printf_string::@2: scope:[printf_string]  from printf_string::@1 printf_string::@4 printf_string::@8
  [39] (to_nomodify byte*) cputs::s#1 ← (byte*) printf_string::str#10
  [40] call cputs 
  to:printf_string::@7
printf_string::@7: scope:[printf_string]  from printf_string::@2
  [41] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@return
  to:printf_string::@9
printf_string::@9: scope:[printf_string]  from printf_string::@7
  [42] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@5
  to:printf_string::@return
printf_string::@5: scope:[printf_string]  from printf_string::@9
  [43] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_string::padding#3
  [44] call printf_padding 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@5 printf_string::@7 printf_string::@9
  [45] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_string::@4 printf_string::@5
  [46] (byte) printf_padding::pad#4 ← phi( printf_string::@4/(byte) ' ' printf_string::@5/(byte) ' ' )
  [46] (byte) printf_padding::length#3 ← phi( printf_string::@4/(byte) printf_padding::length#0 printf_string::@5/(byte) printf_padding::length#1 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [47] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [48] if((byte) printf_padding::i#2<(byte) printf_padding::length#3) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [49] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [50] (byte) cputc::c#1 ← (byte) printf_padding::pad#4
  [51] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [52] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_padding::@2
  [53] (byte) cputc::c#2 ← phi( cputs::@2/(byte) cputc::c#0 printf_padding::@2/(byte) cputc::c#1 )
  [54] if((byte) cputc::c#2==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#2
  [56] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [58] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [59] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [61] (byte) conio_cursor_x ← (byte) 0
  [62] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [63] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [64] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [65] phi()
  [66] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 main::@2 main::@4 main::@6
  [67] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x
  [68] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28
  [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x
  [71] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28
  [72] (byte*) conio_cursor_color ← (byte*~) cputln::$3
  [73] (byte) conio_cursor_x ← (byte) 0
  [74] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [75] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [76] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [77] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [78] phi()
  [79] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [80] phi()
  [81] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [82] phi()
  [83] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [84] phi()
  [85] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [86] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [87] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [88] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [89] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [90] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [91] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [92] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT )
  [92] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [93] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [94] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [95] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [96] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [97] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [98] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [99] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [100] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [100] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [101] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [102] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [103] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [104] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [104] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [105] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [106] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [107] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [108] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [109] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from printf_string::@2
  [110] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [111] (to_nomodify byte*) cputs::s#2 ← phi( cputs/(to_nomodify byte*) cputs::s#1 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [112] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  [113] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  [114] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [115] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [116] (byte) cputc::c#0 ← (byte) cputs::c#1
  [117] call cputc 
  to:cputs::@1

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_string::@3
  [118] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [119] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [119] (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#1 strlen::@2/(byte*) strlen::str#0 )
  [120] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [121] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [122] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [123] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [124] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [125] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_COLORS clrscr::@5/(byte*) clrscr::line_cols#1 )
  [125] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_TEXT clrscr::@5/(byte*) clrscr::line_text#1 )
  [125] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [126] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [127] (byte) conio_cursor_x ← (byte) 0
  [128] (byte) conio_cursor_y ← (byte) 0
  [129] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [130] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [131] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [132] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [133] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [134] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [135] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [136] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [137] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [138] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [139] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3

null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc

VARIABLE REGISTER WEIGHTS
(void()) clrscr()
(byte) clrscr::c
(byte) clrscr::c#1 20002.0
(byte) clrscr::c#2 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 2002.0
(byte) clrscr::l#2 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 1001.0
(byte*) clrscr::line_cols#5 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 667.3333333333334
(byte*) clrscr::line_text#5 1714.7142857142858
(byte*) conio_cursor_color loadstore 253410.3409090909
(byte*) conio_cursor_text loadstore 250563.03370786516
(byte) conio_cursor_x loadstore 44738.289473684206
(byte) conio_cursor_y loadstore 346237.7419354838
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 20002.0
(byte) cputc::c#1 20002.0
(byte) cputc::c#2 110002.0
(void()) cputln()
(byte*~) cputln::$0 2000002.0
(byte*~) cputln::$1 2000002.0
(byte*~) cputln::$2 2000002.0
(byte*~) cputln::$3 2000002.0
(void()) cputs((to_nomodify byte*) cputs::s)
(byte) cputs::c
(byte) cputs::c#1 10001.0
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 5000.5
(to_nomodify byte*) cputs::s#1 551.0
(to_nomodify byte*) cputs::s#2 15502.0
(void()) cscroll()
(byte*~) cscroll::$7 2.0000002E7
(byte*~) cscroll::$8 2.0000002E7
(void()) main()
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(void*) memcpy::destination#2
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.0000000001E10
(byte*) memcpy::dst#2 1.0033333334666666E10
(byte*) memcpy::dst#4 2.00000002E8
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#1 2.0000000002E10
(byte*) memcpy::src#2 1.002500000125E10
(byte*) memcpy::src#4 1.00000001E8
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 1.26250000025E9
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1.4285714287142856E9
(byte*) memset::dst
(byte*) memset::dst#1 2.0000000002E10
(byte*) memset::dst#2 1.3366666668333332E10
(byte*) memset::dst#4 2.00000002E8
(byte*) memset::end
(byte*) memset::end#0 1.6833333336666665E9
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(byte) printf_padding::i
(byte) printf_padding::i#1 20002.0
(byte) printf_padding::i#2 7500.75
(byte) printf_padding::length
(byte) printf_padding::length#0 202.0
(byte) printf_padding::length#1 202.0
(byte) printf_padding::length#3 1700.5
(byte) printf_padding::pad
(byte) printf_padding::pad#4 1666.8333333333333
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(word~) printf_string::$9 101.0
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_justify_left#10 12.625
(byte) printf_string::format_min_length
(signed byte) printf_string::len
(signed byte) printf_string::len#0 202.0
(signed byte) printf_string::padding
(signed byte) printf_string::padding#1 101.0
(signed byte) printf_string::padding#3 33.666666666666664
(byte*) printf_string::str
(byte*) printf_string::str#10 14.428571428571429
(word()) strlen((byte*) strlen::str)
(word) strlen::len
(word) strlen::len#1 10001.0
(word) strlen::len#2 5025.75
(word) strlen::return
(word) strlen::return#2 202.0
(byte*) strlen::str
(byte*) strlen::str#0 20002.0
(byte*) strlen::str#1 551.0
(byte*) strlen::str#2 10334.666666666666

Initial phi equivalence classes
[ printf_string::format_justify_left#10 ]
[ printf_string::str#10 ]
[ printf_string::padding#3 printf_string::padding#1 ]
[ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
[ printf_padding::pad#4 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ cputc::c#2 cputc::c#0 cputc::c#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ cputs::s#2 cputs::s#1 cputs::s#0 ]
[ strlen::str#2 strlen::str#1 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_cursor_text to live range equivalence class [ conio_cursor_text ]
Added variable conio_cursor_color to live range equivalence class [ conio_cursor_color ]
Added variable strlen::return#2 to live range equivalence class [ strlen::return#2 ]
Added variable printf_string::$9 to live range equivalence class [ printf_string::$9 ]
Added variable printf_string::len#0 to live range equivalence class [ printf_string::len#0 ]
Added variable cputln::$0 to live range equivalence class [ cputln::$0 ]
Added variable cputln::$1 to live range equivalence class [ cputln::$1 ]
Added variable cputln::$2 to live range equivalence class [ cputln::$2 ]
Added variable cputln::$3 to live range equivalence class [ cputln::$3 ]
Added variable cscroll::$7 to live range equivalence class [ cscroll::$7 ]
Added variable cscroll::$8 to live range equivalence class [ cscroll::$8 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Complete equivalence classes
[ printf_string::format_justify_left#10 ]
[ printf_string::str#10 ]
[ printf_string::padding#3 printf_string::padding#1 ]
[ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
[ printf_padding::pad#4 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ cputc::c#2 cputc::c#0 cputc::c#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ cputs::s#2 cputs::s#1 cputs::s#0 ]
[ strlen::str#2 strlen::str#1 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_cursor_text ]
[ conio_cursor_color ]
[ strlen::return#2 ]
[ printf_string::$9 ]
[ printf_string::len#0 ]
[ cputln::$0 ]
[ cputln::$1 ]
[ cputln::$2 ]
[ cputln::$3 ]
[ cscroll::$7 ]
[ cscroll::$8 ]
[ memset::end#0 ]
[ memcpy::src_end#0 ]
[ cputs::c#1 ]
Allocated zp[1]:2 [ printf_string::format_justify_left#10 ]
Allocated zp[2]:3 [ printf_string::str#10 ]
Allocated zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ]
Allocated zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
Allocated zp[1]:7 [ printf_padding::pad#4 ]
Allocated zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated zp[1]:9 [ cputc::c#2 cputc::c#0 cputc::c#1 ]
Allocated zp[2]:10 [ memset::str#3 ]
Allocated zp[1]:12 [ memset::c#4 ]
Allocated zp[2]:13 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:15 [ memcpy::source#2 ]
Allocated zp[2]:17 [ memcpy::destination#2 ]
Allocated zp[2]:19 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:21 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[2]:23 [ cputs::s#2 cputs::s#1 cputs::s#0 ]
Allocated zp[2]:25 [ strlen::str#2 strlen::str#1 strlen::str#0 ]
Allocated zp[2]:27 [ strlen::len#2 strlen::len#1 ]
Allocated zp[1]:29 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[2]:30 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[2]:32 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[1]:34 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[1]:35 [ conio_cursor_x ]
Allocated zp[1]:36 [ conio_cursor_y ]
Allocated zp[2]:37 [ conio_cursor_text ]
Allocated zp[2]:39 [ conio_cursor_color ]
Allocated zp[2]:41 [ strlen::return#2 ]
Allocated zp[2]:43 [ printf_string::$9 ]
Allocated zp[1]:45 [ printf_string::len#0 ]
Allocated zp[2]:46 [ cputln::$0 ]
Allocated zp[2]:48 [ cputln::$1 ]
Allocated zp[2]:50 [ cputln::$2 ]
Allocated zp[2]:52 [ cputln::$3 ]
Allocated zp[2]:54 [ cscroll::$7 ]
Allocated zp[2]:56 [ cscroll::$8 ]
Allocated zp[2]:58 [ memset::end#0 ]
Allocated zp[2]:60 [ memcpy::src_end#0 ]
Allocated zp[1]:62 [ cputs::c#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests printf implementation
// Format a string
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  .label conio_cursor_x = $23
  .label conio_cursor_y = $24
  .label conio_cursor_text = $25
  .label conio_cursor_color = $27
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [6] call main 
  // [8] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [7] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [9] call clrscr 
    // [124] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [11] call printf_string 
    // [25] phi from main::@1 to printf_string [phi:main::@1->printf_string]
  printf_string_from___b1:
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@1->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@1->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call cputln 
    jsr cputln
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [15] call printf_string 
    // [25] phi from main::@3 to printf_string [phi:main::@3->printf_string]
  printf_string_from___b3:
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@3->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@3->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [16] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [17] call cputln 
    jsr cputln
    // [18] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [19] call printf_string 
    // [25] phi from main::@5 to printf_string [phi:main::@5->printf_string]
  printf_string_from___b5:
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@5->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@5->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [20] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [21] call cputln 
    jsr cputln
    // [22] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [23] call printf_string 
    // [25] phi from main::@7 to printf_string [phi:main::@7->printf_string]
  printf_string_from___b7:
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@7->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@7->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    jmp __breturn
    // main::@return
  __breturn:
    // [24] return 
    rts
    str: .text "cml"
    .byte 0
    str1: .text "rules"
    .byte 0
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
// printf_string(byte* zp(3) str, byte zp(2) format_justify_left)
printf_string: {
    .label __9 = $2b
    .label len = $2d
    .label padding = 5
    .label str = 3
    .label format_justify_left = 2
    jmp __b3
    // printf_string::@3
  __b3:
    // [26] (byte*) strlen::str#1 ← (byte*) printf_string::str#10 -- pbuz1=pbuz2 
    lda.z str
    sta.z strlen.str
    lda.z str+1
    sta.z strlen.str+1
    // [27] call strlen 
    // [118] phi from printf_string::@3 to strlen [phi:printf_string::@3->strlen]
  strlen_from___b3:
    jsr strlen
    // [28] (word) strlen::return#2 ← (word) strlen::len#2 -- vwuz1=vwuz2 
    lda.z strlen.len
    sta.z strlen.return
    lda.z strlen.len+1
    sta.z strlen.return+1
    jmp __b6
    // printf_string::@6
  __b6:
    // [29] (word~) printf_string::$9 ← (word) strlen::return#2 -- vwuz1=vwuz2 
    lda.z strlen.return
    sta.z __9
    lda.z strlen.return+1
    sta.z __9+1
    // [30] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$9 -- vbsz1=_sbyte_vwuz2 
    lda.z __9
    sta.z len
    // [31] (signed byte) printf_string::padding#1 ← (signed byte) $a - (signed byte) printf_string::len#0 -- vbsz1=vbsc1_minus_vbsz2 
    lda #$a
    sec
    sbc.z len
    sta.z padding
    // [32] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@10 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b10_from___b6
    // [34] phi from printf_string::@6 to printf_string::@1 [phi:printf_string::@6->printf_string::@1]
  __b1_from___b6:
    // [34] phi (signed byte) printf_string::padding#3 = (signed byte) 0 [phi:printf_string::@6->printf_string::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [33] phi from printf_string::@6 to printf_string::@10 [phi:printf_string::@6->printf_string::@10]
  __b10_from___b6:
    jmp __b10
    // printf_string::@10
  __b10:
    // [34] phi from printf_string::@10 to printf_string::@1 [phi:printf_string::@10->printf_string::@1]
  __b1_from___b10:
    // [34] phi (signed byte) printf_string::padding#3 = (signed byte) printf_string::padding#1 [phi:printf_string::@10->printf_string::@1#0] -- register_copy 
    jmp __b1
    // printf_string::@1
  __b1:
    // [35] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b8
    // printf_string::@8
  __b8:
    // [36] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@4 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b4
    jmp __b2
    // printf_string::@4
  __b4:
    // [37] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [38] call printf_padding 
    // [46] phi from printf_string::@4 to printf_padding [phi:printf_string::@4->printf_padding]
  printf_padding_from___b4:
    // [46] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@4->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [46] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#0 [phi:printf_string::@4->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_string::@2
  __b2:
    // [39] (to_nomodify byte*) cputs::s#1 ← (byte*) printf_string::str#10 -- pbuz1=pbuz2 
    lda.z str
    sta.z cputs.s
    lda.z str+1
    sta.z cputs.s+1
    // [40] call cputs 
    // [110] phi from printf_string::@2 to cputs [phi:printf_string::@2->cputs]
  cputs_from___b2:
    jsr cputs
    jmp __b7
    // printf_string::@7
  __b7:
    // [41] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b9
    // printf_string::@9
  __b9:
    // [42] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@5 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b5
    jmp __breturn
    // printf_string::@5
  __b5:
    // [43] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [44] call printf_padding 
    // [46] phi from printf_string::@5 to printf_padding [phi:printf_string::@5->printf_padding]
  printf_padding_from___b5:
    // [46] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@5->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [46] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#1 [phi:printf_string::@5->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [45] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp(7) pad, byte zp(6) length)
printf_padding: {
    .label i = 8
    .label length = 6
    .label pad = 7
    // [47] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [47] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [48] if((byte) printf_padding::i#2<(byte) printf_padding::length#3) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [49] return 
    rts
    // printf_padding::@2
  __b2:
    // [50] (byte) cputc::c#1 ← (byte) printf_padding::pad#4 -- vbuz1=vbuz2 
    lda.z pad
    sta.z cputc.c
    // [51] call cputc 
    // [53] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
  cputc_from___b2:
    // [53] phi (byte) cputc::c#2 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_padding::@3
  __b3:
    // [52] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [47] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [47] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp(9) c)
cputc: {
    .label c = 9
    // [54] if((byte) cputc::c#2==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#2 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (conio_cursor_text),y
    // [56] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // [58] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [59] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    jmp __b3
    // cputc::@3
  __b3:
    // [61] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [62] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [63] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputc::@return
  __breturn:
    // [64] return 
    rts
    // [65] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [66] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    .label __0 = $2e
    .label __1 = $30
    .label __2 = $32
    .label __3 = $34
    // [67] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x -- pbuz1=pbuz2_minus_vbuz3 
    sec
    lda.z conio_cursor_text
    sbc.z conio_cursor_x
    sta.z __0
    lda.z conio_cursor_text+1
    sbc #0
    sta.z __0+1
    // [68] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z __0
    sta.z __1
    lda #0
    adc.z __0+1
    sta.z __1+1
    // [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1 -- pbuz1=pbuz2 
    lda.z __1
    sta.z conio_cursor_text
    lda.z __1+1
    sta.z conio_cursor_text+1
    // [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x -- pbuz1=pbuz2_minus_vbuz3 
    sec
    lda.z conio_cursor_color
    sbc.z conio_cursor_x
    sta.z __2
    lda.z conio_cursor_color+1
    sbc #0
    sta.z __2+1
    // [71] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z __2
    sta.z __3
    lda #0
    adc.z __2+1
    sta.z __3+1
    // [72] (byte*) conio_cursor_color ← (byte*~) cputln::$3 -- pbuz1=pbuz2 
    lda.z __3
    sta.z conio_cursor_color
    lda.z __3+1
    sta.z conio_cursor_color+1
    // [73] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [74] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [75] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [76] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $36
    .label __8 = $38
    // [77] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [78] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [79] call memcpy 
    // [100] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [100] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [100] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [80] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [81] call memcpy 
    // [100] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [100] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [100] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [82] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [83] call memset 
    // [92] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [92] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [92] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [84] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [85] call memset 
    // [92] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [92] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta.z memset.c
    // [92] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [86] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z conio_cursor_text
    sec
    sbc #<$28
    sta.z __7
    lda.z conio_cursor_text+1
    sbc #>$28
    sta.z __7+1
    // [87] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 -- pbuz1=pbuz2 
    lda.z __7
    sta.z conio_cursor_text
    lda.z __7+1
    sta.z conio_cursor_text+1
    // [88] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z conio_cursor_color
    sec
    sbc #<$28
    sta.z __8
    lda.z conio_cursor_color+1
    sbc #>$28
    sta.z __8+1
    // [89] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 -- pbuz1=pbuz2 
    lda.z __8
    sta.z conio_cursor_color
    lda.z __8+1
    sta.z conio_cursor_color+1
    // [90] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [91] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($a) str, byte zp($c) c)
memset: {
    .label end = $3a
    .label dst = $d
    .label str = $a
    .label c = $c
    jmp __b1
    // memset::@1
  __b1:
    // [93] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [94] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [95] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [95] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [96] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [97] return 
    rts
    // memset::@3
  __b3:
    // [98] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [99] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($11) destination, void* zp($f) source)
memcpy: {
    .label src_end = $3c
    .label dst = $15
    .label src = $13
    .label source = $f
    .label destination = $11
    // [101] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [102] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 -- pbuz1=pbuz2 
    lda.z source
    sta.z src
    lda.z source+1
    sta.z src+1
    // [103] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 -- pbuz1=pbuz2 
    lda.z destination
    sta.z dst
    lda.z destination+1
    sta.z dst+1
    // [104] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [104] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [104] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [105] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [106] return 
    rts
    // memcpy::@2
  __b2:
    // [107] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [108] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [109] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($17) s)
cputs: {
    .label c = $3e
    .label s = $17
    // [111] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [111] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#1 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [112] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [113] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [114] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [115] return 
    rts
    // cputs::@2
  __b2:
    // [116] (byte) cputc::c#0 ← (byte) cputs::c#1 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [117] call cputc 
    // [53] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [53] phi (byte) cputc::c#2 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($19) str)
strlen: {
    .label len = $1b
    .label str = $19
    .label return = $29
    // [119] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [119] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [119] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    jmp __b1
    // strlen::@1
  __b1:
    // [120] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [121] return 
    rts
    // strlen::@2
  __b2:
    // [122] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [123] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [119] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [119] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [119] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label c = $22
    .label line_text = $1e
    .label line_cols = $20
    .label l = $1d
    // [125] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [125] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [125] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [125] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // clrscr::@1
  __b1:
    // [126] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [127] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [128] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [129] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [130] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [131] return 
    rts
    // [132] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [132] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b3
    // clrscr::@3
  __b3:
    // [133] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [134] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [135] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [136] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [125] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [125] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [125] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [125] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [137] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z c
    sta (line_text),y
    // [138] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy.z c
    sta (line_cols),y
    // [139] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [132] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [132] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [26] (byte*) strlen::str#1 ← (byte*) printf_string::str#10 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ printf_string::format_justify_left#10 ]
Statement [28] (word) strlen::return#2 ← (word) strlen::len#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [29] (word~) printf_string::$9 ← (word) strlen::return#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::$9 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::$9 ] { }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::$9 ] { }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::$9 ] { }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::$9 ] { }  ) always clobbers reg byte a 
Statement [30] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$9 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  ) always clobbers reg byte a 
Statement [31] (signed byte) printf_string::padding#1 ← (signed byte) $a - (signed byte) printf_string::len#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  ) always clobbers reg byte a 
Statement [39] (to_nomodify byte*) cputs::s#1 ← (byte*) printf_string::str#10 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#1 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#1 ] { { cputs::s#1 = printf_string::str#10 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ]
Statement [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ printf_string::format_justify_left#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:7 [ printf_padding::pad#4 ]
Removing always clobbered register reg byte y as potential for zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ printf_padding::pad#4 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [61] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [67] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] ( main:6::cputln:13 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { }  main:6::cputln:17 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { }  main:6::cputln:21 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [68] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] ( main:6::cputln:13 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { }  main:6::cputln:17 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { }  main:6::cputln:21 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputln:13 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x [ conio_cursor_y conio_cursor_text cputln::$2 ] ( main:6::cputln:13 [ conio_cursor_y conio_cursor_text cputln::$2 ] { }  main:6::cputln:17 [ conio_cursor_y conio_cursor_text cputln::$2 ] { }  main:6::cputln:21 [ conio_cursor_y conio_cursor_text cputln::$2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [71] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28 [ conio_cursor_y conio_cursor_text cputln::$3 ] ( main:6::cputln:13 [ conio_cursor_y conio_cursor_text cputln::$3 ] { }  main:6::cputln:17 [ conio_cursor_y conio_cursor_text cputln::$3 ] { }  main:6::cputln:21 [ conio_cursor_y conio_cursor_text cputln::$3 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$3 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$3 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$3 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$3 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [72] (byte*) conio_cursor_color ← (byte*~) cputln::$3 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputln:13 [ conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17 [ conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21 [ conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [73] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputln:13 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [77] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [86] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 [ conio_cursor_y conio_cursor_color cscroll::$7 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { }  main:6::cputln:17::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { }  main:6::cputln:21::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [87] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [88] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 [ conio_cursor_y conio_cursor_text cscroll::$8 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { }  main:6::cputln:17::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { }  main:6::cputln:21::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [89] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [93] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::cputln:17::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::cputln:21::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::cputln:17::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::cputln:21::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ memset::c#4 ]
Statement [94] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::cputln:17::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::cputln:21::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::cputln:17::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::cputln:21::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [96] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:17::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:21::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:17::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:21::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [98] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:17::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:21::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:17::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:21::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:12 [ memset::c#4 ]
Statement [101] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::cputln:17::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::cputln:21::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::cputln:17::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::cputln:21::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [102] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::cputln:17::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::cputln:21::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::cputln:17::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::cputln:21::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [103] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::cputln:17::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::cputln:21::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::cputln:17::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::cputln:21::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [105] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:17::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:21::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:17::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:21::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [107] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:17::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:21::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:17::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:21::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [112] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] ( main:6::printf_string:11::cputs:40 [ printf_string::format_justify_left#10 printf_string::padding#3 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:15::cputs:40 [ printf_string::format_justify_left#10 printf_string::padding#3 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:19::cputs:40 [ printf_string::format_justify_left#10 printf_string::padding#3 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:23::cputs:40 [ printf_string::format_justify_left#10 printf_string::padding#3 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] { { cputs::s#1 = printf_string::str#10 } }  ) always clobbers reg byte a reg byte y 
Statement [120] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:6::printf_string:11::strlen:27 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:15::strlen:27 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:19::strlen:27 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:23::strlen:27 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [127] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( main:6::clrscr:9 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [128] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [129] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [130] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [134] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:29 [ clrscr::l#2 clrscr::l#1 ]
Statement [135] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [137] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:34 [ clrscr::c#2 clrscr::c#1 ]
Statement [138] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [26] (byte*) strlen::str#1 ← (byte*) printf_string::str#10 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [28] (word) strlen::return#2 ← (word) strlen::len#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [29] (word~) printf_string::$9 ← (word) strlen::return#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::$9 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::$9 ] { }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::$9 ] { }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::$9 ] { }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::$9 ] { }  ) always clobbers reg byte a 
Statement [30] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$9 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  ) always clobbers reg byte a 
Statement [31] (signed byte) printf_string::padding#1 ← (signed byte) $a - (signed byte) printf_string::len#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  ) always clobbers reg byte a 
Statement [39] (to_nomodify byte*) cputs::s#1 ← (byte*) printf_string::str#10 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#1 ] ( main:6::printf_string:11 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:15 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:23 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#1 ] { { cputs::s#1 = printf_string::str#10 } }  ) always clobbers reg byte a 
Statement [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte y 
Statement [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [61] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [67] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] ( main:6::cputln:13 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { }  main:6::cputln:17 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { }  main:6::cputln:21 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [68] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] ( main:6::cputln:13 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { }  main:6::cputln:17 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { }  main:6::cputln:21 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputln:13 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x [ conio_cursor_y conio_cursor_text cputln::$2 ] ( main:6::cputln:13 [ conio_cursor_y conio_cursor_text cputln::$2 ] { }  main:6::cputln:17 [ conio_cursor_y conio_cursor_text cputln::$2 ] { }  main:6::cputln:21 [ conio_cursor_y conio_cursor_text cputln::$2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [71] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28 [ conio_cursor_y conio_cursor_text cputln::$3 ] ( main:6::cputln:13 [ conio_cursor_y conio_cursor_text cputln::$3 ] { }  main:6::cputln:17 [ conio_cursor_y conio_cursor_text cputln::$3 ] { }  main:6::cputln:21 [ conio_cursor_y conio_cursor_text cputln::$3 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$3 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$3 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$3 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$3 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text cputln::$3 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [72] (byte*) conio_cursor_color ← (byte*~) cputln::$3 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputln:13 [ conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17 [ conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21 [ conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [73] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputln:13 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [77] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [86] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 [ conio_cursor_y conio_cursor_color cscroll::$7 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { }  main:6::cputln:17::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { }  main:6::cputln:21::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [87] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [88] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 [ conio_cursor_y conio_cursor_text cscroll::$8 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { }  main:6::cputln:17::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { }  main:6::cputln:21::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [89] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:17::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::cputln:21::cscroll:75 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [93] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::cputln:17::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::cputln:21::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::cputln:17::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::cputln:21::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [94] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::cputln:17::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::cputln:21::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::cputln:17::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::cputln:21::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [96] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:17::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:21::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:17::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:21::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [98] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:17::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:21::cscroll:75::memset:83 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:83 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:83 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:17::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::cputln:21::cscroll:75::memset:85 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memset:85 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memset:85 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [101] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::cputln:17::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::cputln:21::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::cputln:17::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::cputln:21::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [102] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::cputln:17::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::cputln:21::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::cputln:17::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::cputln:21::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [103] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::cputln:17::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::cputln:21::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::cputln:17::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::cputln:21::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [105] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:17::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:21::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:17::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:21::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [107] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:17::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:21::cscroll:75::memcpy:79 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:79 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:79 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:11::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cscroll:63::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cscroll:63::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::cputln:13::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:17::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::cputln:21::cscroll:75::memcpy:81 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_string:11::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:38::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:15::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:19::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:23::printf_padding:44::cputc:51::cputln:66::cscroll:75::memcpy:81 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { cputc::c#1 = cputc::c#2 printf_padding::pad#4 } }  main:6::printf_string:11::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:15::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:19::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  main:6::printf_string:23::cputs:40::cputc:117::cputln:66::cscroll:75::memcpy:81 [ printf_string::format_justify_left#10 printf_string::padding#3 cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputs::s#1 = printf_string::str#10 } { cputc::c#0 = cputc::c#2 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [112] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] ( main:6::printf_string:11::cputs:40 [ printf_string::format_justify_left#10 printf_string::padding#3 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:15::cputs:40 [ printf_string::format_justify_left#10 printf_string::padding#3 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:19::cputs:40 [ printf_string::format_justify_left#10 printf_string::padding#3 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] { { cputs::s#1 = printf_string::str#10 } }  main:6::printf_string:23::cputs:40 [ printf_string::format_justify_left#10 printf_string::padding#3 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] { { cputs::s#1 = printf_string::str#10 } }  ) always clobbers reg byte a reg byte y 
Statement [120] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:6::printf_string:11::strlen:27 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:15::strlen:27 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:19::strlen:27 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_string:23::strlen:27 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [127] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( main:6::clrscr:9 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [128] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [129] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [130] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [134] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [135] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [137] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [138] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ printf_string::format_justify_left#10 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ printf_string::str#10 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ] : zp[1]:6 , reg byte x , 
Potential registers zp[1]:7 [ printf_padding::pad#4 ] : zp[1]:7 , reg byte x , 
Potential registers zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ] : zp[1]:8 , reg byte x , 
Potential registers zp[1]:9 [ cputc::c#2 cputc::c#0 cputc::c#1 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:10 [ memset::str#3 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ memset::c#4 ] : zp[1]:12 , reg byte x , 
Potential registers zp[2]:13 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ memcpy::source#2 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ memcpy::destination#2 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:19 , 
Potential registers zp[2]:21 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ cputs::s#2 cputs::s#1 cputs::s#0 ] : zp[2]:23 , 
Potential registers zp[2]:25 [ strlen::str#2 strlen::str#1 strlen::str#0 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ strlen::len#2 strlen::len#1 ] : zp[2]:27 , 
Potential registers zp[1]:29 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:29 , reg byte x , reg byte y , 
Potential registers zp[2]:30 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:30 , 
Potential registers zp[2]:32 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:32 , 
Potential registers zp[1]:34 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:34 , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ conio_cursor_x ] : zp[1]:35 , 
Potential registers zp[1]:36 [ conio_cursor_y ] : zp[1]:36 , 
Potential registers zp[2]:37 [ conio_cursor_text ] : zp[2]:37 , 
Potential registers zp[2]:39 [ conio_cursor_color ] : zp[2]:39 , 
Potential registers zp[2]:41 [ strlen::return#2 ] : zp[2]:41 , 
Potential registers zp[2]:43 [ printf_string::$9 ] : zp[2]:43 , 
Potential registers zp[1]:45 [ printf_string::len#0 ] : zp[1]:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:46 [ cputln::$0 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ cputln::$1 ] : zp[2]:48 , 
Potential registers zp[2]:50 [ cputln::$2 ] : zp[2]:50 , 
Potential registers zp[2]:52 [ cputln::$3 ] : zp[2]:52 , 
Potential registers zp[2]:54 [ cscroll::$7 ] : zp[2]:54 , 
Potential registers zp[2]:56 [ cscroll::$8 ] : zp[2]:56 , 
Potential registers zp[2]:58 [ memset::end#0 ] : zp[2]:58 , 
Potential registers zp[2]:60 [ memcpy::src_end#0 ] : zp[2]:60 , 
Potential registers zp[1]:62 [ cputs::c#1 ] : zp[1]:62 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 30,125,000,004.25: zp[2]:19 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 20,233,333,337.67: zp[2]:21 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 1,262,500,000.25: zp[2]:60 [ memcpy::src_end#0 ] 0: zp[2]:15 [ memcpy::source#2 ] 0: zp[2]:17 [ memcpy::destination#2 ] 
Uplift Scope [memset] 33,566,666,672.33: zp[2]:13 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 1,683,333,333.67: zp[2]:58 [ memset::end#0 ] 1,428,571,428.71: zp[1]:12 [ memset::c#4 ] 0: zp[2]:10 [ memset::str#3 ] 
Uplift Scope [cscroll] 20,000,002: zp[2]:54 [ cscroll::$7 ] 20,000,002: zp[2]:56 [ cscroll::$8 ] 
Uplift Scope [cputln] 2,000,002: zp[2]:46 [ cputln::$0 ] 2,000,002: zp[2]:48 [ cputln::$1 ] 2,000,002: zp[2]:50 [ cputln::$2 ] 2,000,002: zp[2]:52 [ cputln::$3 ] 
Uplift Scope [] 346,237.74: zp[1]:36 [ conio_cursor_y ] 253,410.34: zp[2]:39 [ conio_cursor_color ] 250,563.03: zp[2]:37 [ conio_cursor_text ] 44,738.29: zp[1]:35 [ conio_cursor_x ] 
Uplift Scope [cputc] 150,006: zp[1]:9 [ cputc::c#2 cputc::c#0 cputc::c#1 ] 
Uplift Scope [strlen] 30,887.67: zp[2]:25 [ strlen::str#2 strlen::str#1 strlen::str#0 ] 15,026.75: zp[2]:27 [ strlen::len#2 strlen::len#1 ] 202: zp[2]:41 [ strlen::return#2 ] 
Uplift Scope [clrscr] 32,503.25: zp[1]:34 [ clrscr::c#2 clrscr::c#1 ] 2,501.38: zp[2]:32 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 2,382.05: zp[2]:30 [ clrscr::line_text#5 clrscr::line_text#1 ] 2,335.67: zp[1]:29 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [printf_padding] 27,502.75: zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ] 2,104.5: zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ] 1,666.83: zp[1]:7 [ printf_padding::pad#4 ] 
Uplift Scope [cputs] 21,053.5: zp[2]:23 [ cputs::s#2 cputs::s#1 cputs::s#0 ] 10,001: zp[1]:62 [ cputs::c#1 ] 
Uplift Scope [printf_string] 202: zp[1]:45 [ printf_string::len#0 ] 134.67: zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ] 101: zp[2]:43 [ printf_string::$9 ] 14.43: zp[2]:3 [ printf_string::str#10 ] 12.62: zp[1]:2 [ printf_string::format_justify_left#10 ] 
Uplift Scope [RADIX] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [main] 

Uplifting [memcpy] best 19623 combination zp[2]:19 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:21 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:60 [ memcpy::src_end#0 ] zp[2]:15 [ memcpy::source#2 ] zp[2]:17 [ memcpy::destination#2 ] 
Uplifting [memset] best 19517 combination zp[2]:13 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:58 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:10 [ memset::str#3 ] 
Uplifting [cscroll] best 19517 combination zp[2]:54 [ cscroll::$7 ] zp[2]:56 [ cscroll::$8 ] 
Uplifting [cputln] best 19517 combination zp[2]:46 [ cputln::$0 ] zp[2]:48 [ cputln::$1 ] zp[2]:50 [ cputln::$2 ] zp[2]:52 [ cputln::$3 ] 
Uplifting [] best 19517 combination zp[1]:36 [ conio_cursor_y ] zp[2]:39 [ conio_cursor_color ] zp[2]:37 [ conio_cursor_text ] zp[1]:35 [ conio_cursor_x ] 
Uplifting [cputc] best 19451 combination reg byte a [ cputc::c#2 cputc::c#0 cputc::c#1 ] 
Uplifting [strlen] best 19451 combination zp[2]:25 [ strlen::str#2 strlen::str#1 strlen::str#0 ] zp[2]:27 [ strlen::len#2 strlen::len#1 ] zp[2]:41 [ strlen::return#2 ] 
Uplifting [clrscr] best 17861 combination reg byte y [ clrscr::c#2 clrscr::c#1 ] zp[2]:32 [ clrscr::line_cols#5 clrscr::line_cols#1 ] zp[2]:30 [ clrscr::line_text#5 clrscr::line_text#1 ] reg byte x [ clrscr::l#2 clrscr::l#1 ] 
Uplifting [printf_padding] best 17861 combination zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ] zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ] zp[1]:7 [ printf_padding::pad#4 ] 
Uplifting [cputs] best 17771 combination zp[2]:23 [ cputs::s#2 cputs::s#1 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [printf_string] best 17767 combination reg byte a [ printf_string::len#0 ] zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ] zp[2]:43 [ printf_string::$9 ] zp[2]:3 [ printf_string::str#10 ] zp[1]:2 [ printf_string::format_justify_left#10 ] 
Uplifting [RADIX] best 17767 combination 
Uplifting [printf_format_number] best 17767 combination 
Uplifting [printf_buffer_number] best 17767 combination 
Uplifting [printf_format_string] best 17767 combination 
Uplifting [main] best 17767 combination 
Attempting to uplift remaining variables inzp[1]:36 [ conio_cursor_y ]
Uplifting [] best 17767 combination zp[1]:36 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:35 [ conio_cursor_x ]
Uplifting [] best 17767 combination zp[1]:35 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ]
Uplifting [printf_padding] best 17767 combination zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ] 
Attempting to uplift remaining variables inzp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
Uplifting [printf_padding] best 17767 combination zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ] 
Attempting to uplift remaining variables inzp[1]:7 [ printf_padding::pad#4 ]
Uplifting [printf_padding] best 17767 combination zp[1]:7 [ printf_padding::pad#4 ] 
Attempting to uplift remaining variables inzp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ]
Uplifting [printf_string] best 17767 combination zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ printf_string::format_justify_left#10 ]
Uplifting [printf_string] best 17767 combination zp[1]:2 [ printf_string::format_justify_left#10 ] 
Coalescing zero page register [ zp[2]:37 [ conio_cursor_text ] ] with [ zp[2]:54 [ cscroll::$7 ] ] - score: 2
Coalescing zero page register [ zp[2]:39 [ conio_cursor_color ] ] with [ zp[2]:56 [ cscroll::$8 ] ] - score: 2
Coalescing zero page register [ zp[2]:3 [ printf_string::str#10 ] ] with [ zp[2]:23 [ cputs::s#2 cputs::s#1 cputs::s#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ memset::str#3 ] ] with [ zp[2]:13 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ memcpy::source#2 ] ] with [ zp[2]:19 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ memcpy::destination#2 ] ] with [ zp[2]:21 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:27 [ strlen::len#2 strlen::len#1 ] ] with [ zp[2]:41 [ strlen::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ conio_cursor_text cscroll::$7 ] ] with [ zp[2]:46 [ cputln::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ conio_cursor_text cscroll::$7 cputln::$0 ] ] with [ zp[2]:48 [ cputln::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:39 [ conio_cursor_color cscroll::$8 ] ] with [ zp[2]:50 [ cputln::$2 ] ] - score: 1
Coalescing zero page register [ zp[2]:39 [ conio_cursor_color cscroll::$8 cputln::$2 ] ] with [ zp[2]:52 [ cputln::$3 ] ] - score: 1
Coalescing zero page register [ zp[2]:27 [ strlen::len#2 strlen::len#1 strlen::return#2 ] ] with [ zp[2]:43 [ printf_string::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:10 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:25 [ strlen::str#2 strlen::str#1 strlen::str#0 ] ] with [ zp[2]:17 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[2]:30 [ clrscr::line_text#5 clrscr::line_text#1 ] ] with [ zp[2]:3 [ printf_string::str#10 cputs::s#2 cputs::s#1 cputs::s#0 ] ]
Coalescing zero page register [ zp[2]:32 [ clrscr::line_cols#5 clrscr::line_cols#1 ] ] with [ zp[2]:27 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_string::$9 ] ]
Coalescing zero page register [ zp[2]:60 [ memcpy::src_end#0 ] ] with [ zp[2]:58 [ memset::end#0 ] ]
Coalescing zero page register [ zp[2]:32 [ clrscr::line_cols#5 clrscr::line_cols#1 strlen::len#2 strlen::len#1 strlen::return#2 printf_string::$9 ] ] with [ zp[2]:15 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Allocated (was zp[1]:5) zp[1]:3 [ printf_string::padding#3 printf_string::padding#1 ]
Allocated (was zp[1]:6) zp[1]:4 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
Allocated (was zp[1]:7) zp[1]:5 [ printf_padding::pad#4 ]
Allocated (was zp[1]:8) zp[1]:6 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated (was zp[2]:25) zp[2]:7 [ strlen::str#2 strlen::str#1 strlen::str#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated (was zp[2]:30) zp[2]:9 [ clrscr::line_text#5 clrscr::line_text#1 printf_string::str#10 cputs::s#2 cputs::s#1 cputs::s#0 ]
Allocated (was zp[2]:32) zp[2]:11 [ clrscr::line_cols#5 clrscr::line_cols#1 strlen::len#2 strlen::len#1 strlen::return#2 printf_string::$9 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[1]:35) zp[1]:13 [ conio_cursor_x ]
Allocated (was zp[1]:36) zp[1]:14 [ conio_cursor_y ]
Allocated (was zp[2]:37) zp[2]:15 [ conio_cursor_text cscroll::$7 cputln::$0 cputln::$1 ]
Allocated (was zp[2]:39) zp[2]:17 [ conio_cursor_color cscroll::$8 cputln::$2 cputln::$3 ]
Allocated (was zp[2]:60) zp[2]:19 [ memcpy::src_end#0 memset::end#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests printf implementation
// Format a string
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  .label conio_cursor_x = $d
  .label conio_cursor_y = $e
  .label conio_cursor_text = $f
  .label conio_cursor_color = $11
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [6] call main 
  // [8] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [7] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [9] call clrscr 
    // [124] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [11] call printf_string 
    // [25] phi from main::@1 to printf_string [phi:main::@1->printf_string]
  printf_string_from___b1:
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@1->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@1->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call cputln 
    jsr cputln
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [15] call printf_string 
    // [25] phi from main::@3 to printf_string [phi:main::@3->printf_string]
  printf_string_from___b3:
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@3->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@3->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [16] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [17] call cputln 
    jsr cputln
    // [18] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [19] call printf_string 
    // [25] phi from main::@5 to printf_string [phi:main::@5->printf_string]
  printf_string_from___b5:
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@5->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@5->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [20] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [21] call cputln 
    jsr cputln
    // [22] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [23] call printf_string 
    // [25] phi from main::@7 to printf_string [phi:main::@7->printf_string]
  printf_string_from___b7:
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@7->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@7->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    jmp __breturn
    // main::@return
  __breturn:
    // [24] return 
    rts
    str: .text "cml"
    .byte 0
    str1: .text "rules"
    .byte 0
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
// printf_string(byte* zp(9) str, byte zp(2) format_justify_left)
printf_string: {
    .label __9 = $b
    .label padding = 3
    .label str = 9
    .label format_justify_left = 2
    jmp __b3
    // printf_string::@3
  __b3:
    // [26] (byte*) strlen::str#1 ← (byte*) printf_string::str#10 -- pbuz1=pbuz2 
    lda.z str
    sta.z strlen.str
    lda.z str+1
    sta.z strlen.str+1
    // [27] call strlen 
    // [118] phi from printf_string::@3 to strlen [phi:printf_string::@3->strlen]
  strlen_from___b3:
    jsr strlen
    // [28] (word) strlen::return#2 ← (word) strlen::len#2
    jmp __b6
    // printf_string::@6
  __b6:
    // [29] (word~) printf_string::$9 ← (word) strlen::return#2
    // [30] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$9 -- vbsaa=_sbyte_vwuz1 
    lda.z __9
    // [31] (signed byte) printf_string::padding#1 ← (signed byte) $a - (signed byte) printf_string::len#0 -- vbsz1=vbsc1_minus_vbsaa 
    eor #$ff
    clc
    adc #$a+1
    sta.z padding
    // [32] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@10 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b10_from___b6
    // [34] phi from printf_string::@6 to printf_string::@1 [phi:printf_string::@6->printf_string::@1]
  __b1_from___b6:
    // [34] phi (signed byte) printf_string::padding#3 = (signed byte) 0 [phi:printf_string::@6->printf_string::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [33] phi from printf_string::@6 to printf_string::@10 [phi:printf_string::@6->printf_string::@10]
  __b10_from___b6:
    jmp __b10
    // printf_string::@10
  __b10:
    // [34] phi from printf_string::@10 to printf_string::@1 [phi:printf_string::@10->printf_string::@1]
  __b1_from___b10:
    // [34] phi (signed byte) printf_string::padding#3 = (signed byte) printf_string::padding#1 [phi:printf_string::@10->printf_string::@1#0] -- register_copy 
    jmp __b1
    // printf_string::@1
  __b1:
    // [35] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b8
    // printf_string::@8
  __b8:
    // [36] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@4 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b4
    jmp __b2
    // printf_string::@4
  __b4:
    // [37] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [38] call printf_padding 
    // [46] phi from printf_string::@4 to printf_padding [phi:printf_string::@4->printf_padding]
  printf_padding_from___b4:
    // [46] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@4->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [46] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#0 [phi:printf_string::@4->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_string::@2
  __b2:
    // [39] (to_nomodify byte*) cputs::s#1 ← (byte*) printf_string::str#10
    // [40] call cputs 
    // [110] phi from printf_string::@2 to cputs [phi:printf_string::@2->cputs]
  cputs_from___b2:
    jsr cputs
    jmp __b7
    // printf_string::@7
  __b7:
    // [41] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b9
    // printf_string::@9
  __b9:
    // [42] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@5 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b5
    jmp __breturn
    // printf_string::@5
  __b5:
    // [43] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [44] call printf_padding 
    // [46] phi from printf_string::@5 to printf_padding [phi:printf_string::@5->printf_padding]
  printf_padding_from___b5:
    // [46] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@5->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [46] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#1 [phi:printf_string::@5->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [45] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp(5) pad, byte zp(4) length)
printf_padding: {
    .label i = 6
    .label length = 4
    .label pad = 5
    // [47] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [47] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [48] if((byte) printf_padding::i#2<(byte) printf_padding::length#3) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [49] return 
    rts
    // printf_padding::@2
  __b2:
    // [50] (byte) cputc::c#1 ← (byte) printf_padding::pad#4 -- vbuaa=vbuz1 
    lda.z pad
    // [51] call cputc 
    // [53] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
  cputc_from___b2:
    // [53] phi (byte) cputc::c#2 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_padding::@3
  __b3:
    // [52] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [47] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [47] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [54] if((byte) cputc::c#2==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // [56] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // [58] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [59] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    jmp __b3
    // cputc::@3
  __b3:
    // [61] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [62] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [63] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputc::@return
  __breturn:
    // [64] return 
    rts
    // [65] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [66] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    .label __0 = $f
    .label __1 = $f
    .label __2 = $11
    .label __3 = $11
    // [67] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __0
    sbc.z conio_cursor_x
    sta.z __0
    bcs !+
    dec.z __0+1
  !:
    // [68] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __1
    sta.z __1
    bcc !+
    inc.z __1+1
  !:
    // [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1
    // [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __2
    sbc.z conio_cursor_x
    sta.z __2
    bcs !+
    dec.z __2+1
  !:
    // [71] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __3
    sta.z __3
    bcc !+
    inc.z __3+1
  !:
    // [72] (byte*) conio_cursor_color ← (byte*~) cputln::$3
    // [73] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [74] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [75] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [76] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $f
    .label __8 = $11
    // [77] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [78] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [79] call memcpy 
    // [100] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [100] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [100] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [80] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [81] call memcpy 
    // [100] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [100] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [100] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [82] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [83] call memset 
    // [92] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [92] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [92] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [84] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [85] call memset 
    // [92] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [92] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #CONIO_TEXTCOLOR_DEFAULT
    // [92] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [86] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __7
    sec
    sbc #<$28
    sta.z __7
    lda.z __7+1
    sbc #>$28
    sta.z __7+1
    // [87] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
    // [88] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // [89] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
    // [90] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [91] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($b) str, byte register(X) c)
memset: {
    .label end = $13
    .label dst = $b
    .label str = $b
    jmp __b1
    // memset::@1
  __b1:
    // [93] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [94] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [95] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [95] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [96] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [97] return 
    rts
    // memset::@3
  __b3:
    // [98] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [99] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(7) destination, void* zp($b) source)
memcpy: {
    .label src_end = $13
    .label dst = 7
    .label src = $b
    .label source = $b
    .label destination = 7
    // [101] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [102] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [103] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [104] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [104] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [104] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [105] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [106] return 
    rts
    // memcpy::@2
  __b2:
    // [107] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [108] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [109] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(9) s)
cputs: {
    .label s = 9
    // [111] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [111] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#1 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [112] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [113] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [114] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [115] return 
    rts
    // cputs::@2
  __b2:
    // [116] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [117] call cputc 
    // [53] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [53] phi (byte) cputc::c#2 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp(7) str)
strlen: {
    .label len = $b
    .label str = 7
    .label return = $b
    // [119] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [119] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [119] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    jmp __b1
    // strlen::@1
  __b1:
    // [120] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [121] return 
    rts
    // strlen::@2
  __b2:
    // [122] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [123] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [119] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [119] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [119] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 9
    .label line_cols = $b
    // [125] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [125] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [125] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [125] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // clrscr::@1
  __b1:
    // [126] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [127] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [128] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [129] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [130] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [131] return 
    rts
    // [132] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [132] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // clrscr::@3
  __b3:
    // [133] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [134] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [135] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [136] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [125] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [125] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [125] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [125] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [137] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // [138] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta (line_cols),y
    // [139] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [132] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [132] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b8
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b9
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda.z padding
Removing instruction ldy #0
Removing instruction lda #>0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b10_from___b6 with __b1
Replacing label __b1_from_cputc with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from___b2 with __b1
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction main_from___b2:
Removing instruction __bend_from___b2:
Removing instruction __b1_from_main:
Removing instruction printf_string_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction printf_string_from___b3:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b4:
Removing instruction printf_string_from___b5:
Removing instruction __b6_from___b5:
Removing instruction __b7_from___b6:
Removing instruction printf_string_from___b7:
Removing instruction __b10_from___b6:
Removing instruction __b10:
Removing instruction __b1_from___b10:
Removing instruction cputs_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Removing instruction cputc_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction clrscr_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction strlen_from___b3:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction __b8:
Removing instruction printf_padding_from___b4:
Removing instruction __b7:
Removing instruction __b9:
Removing instruction printf_padding_from___b5:
Removing instruction __b1_from_printf_padding:
Removing instruction __breturn:
Removing instruction cputc_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_strlen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_clrscr:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b3_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*) 55296
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*) 1024
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#1 reg byte y 20002.0
(byte) clrscr::c#2 reg byte y 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 reg byte x 2002.0
(byte) clrscr::l#2 reg byte x 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 line_cols zp[2]:11 1001.0
(byte*) clrscr::line_cols#5 line_cols zp[2]:11 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 line_text zp[2]:9 667.3333333333334
(byte*) clrscr::line_text#5 line_text zp[2]:9 1714.7142857142858
(byte*) conio_cursor_color loadstore zp[2]:17 253410.3409090909
(byte*) conio_cursor_text loadstore zp[2]:15 250563.03370786516
(byte) conio_cursor_x loadstore zp[1]:13 44738.289473684206
(byte) conio_cursor_y loadstore zp[1]:14 346237.7419354838
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte a 20002.0
(byte) cputc::c#1 reg byte a 20002.0
(byte) cputc::c#2 reg byte a 110002.0
(void()) cputln()
(byte*~) cputln::$0 zp[2]:15 2000002.0
(byte*~) cputln::$1 zp[2]:15 2000002.0
(byte*~) cputln::$2 zp[2]:17 2000002.0
(byte*~) cputln::$3 zp[2]:17 2000002.0
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 reg byte a 10001.0
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:9 5000.5
(to_nomodify byte*) cputs::s#1 s zp[2]:9 551.0
(to_nomodify byte*) cputs::s#2 s zp[2]:9 15502.0
(void()) cscroll()
(byte*~) cscroll::$7 zp[2]:15 2.0000002E7
(byte*~) cscroll::$8 zp[2]:17 2.0000002E7
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(const byte*) main::str[(byte) 4]  = (byte*) "cml"
(const byte*) main::str1[(byte) 6]  = (byte*) "rules"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#2 destination zp[2]:7
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:7 1.0000000001E10
(byte*) memcpy::dst#2 dst zp[2]:7 1.0033333334666666E10
(byte*) memcpy::dst#4 dst zp[2]:7 2.00000002E8
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2 source zp[2]:11
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:11 2.0000000002E10
(byte*) memcpy::src#2 src zp[2]:11 1.002500000125E10
(byte*) memcpy::src#4 src zp[2]:11 1.00000001E8
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 src_end zp[2]:19 1.26250000025E9
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1.4285714287142856E9
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:11 2.0000000002E10
(byte*) memset::dst#2 dst zp[2]:11 1.3366666668333332E10
(byte*) memset::dst#4 dst zp[2]:11 2.00000002E8
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:19 1.6833333336666665E9
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:11
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#1 i zp[1]:6 20002.0
(byte) printf_padding::i#2 i zp[1]:6 7500.75
(byte) printf_padding::length
(byte) printf_padding::length#0 length zp[1]:4 202.0
(byte) printf_padding::length#1 length zp[1]:4 202.0
(byte) printf_padding::length#3 length zp[1]:4 1700.5
(byte) printf_padding::pad
(byte) printf_padding::pad#4 pad zp[1]:5 1666.8333333333333
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(word~) printf_string::$9 zp[2]:11 101.0
(label) printf_string::@1
(label) printf_string::@10
(label) printf_string::@2
(label) printf_string::@3
(label) printf_string::@4
(label) printf_string::@5
(label) printf_string::@6
(label) printf_string::@7
(label) printf_string::@8
(label) printf_string::@9
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_justify_left#10 format_justify_left zp[1]:2 12.625
(byte) printf_string::format_min_length
(signed byte) printf_string::len
(signed byte) printf_string::len#0 reg byte a 202.0
(signed byte) printf_string::padding
(signed byte) printf_string::padding#1 padding zp[1]:3 101.0
(signed byte) printf_string::padding#3 padding zp[1]:3 33.666666666666664
(byte*) printf_string::str
(byte*) printf_string::str#10 str zp[2]:9 14.428571428571429
(word()) strlen((byte*) strlen::str)
(label) strlen::@1
(label) strlen::@2
(label) strlen::@return
(word) strlen::len
(word) strlen::len#1 len zp[2]:11 10001.0
(word) strlen::len#2 len zp[2]:11 5025.75
(word) strlen::return
(word) strlen::return#2 return zp[2]:11 202.0
(byte*) strlen::str
(byte*) strlen::str#0 str zp[2]:7 20002.0
(byte*) strlen::str#1 str zp[2]:7 551.0
(byte*) strlen::str#2 str zp[2]:7 10334.666666666666

zp[1]:2 [ printf_string::format_justify_left#10 ]
zp[1]:3 [ printf_string::padding#3 printf_string::padding#1 ]
zp[1]:4 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
zp[1]:5 [ printf_padding::pad#4 ]
zp[1]:6 [ printf_padding::i#2 printf_padding::i#1 ]
reg byte a [ cputc::c#2 cputc::c#0 cputc::c#1 ]
reg byte x [ memset::c#4 ]
zp[2]:7 [ strlen::str#2 strlen::str#1 strlen::str#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
zp[2]:9 [ clrscr::line_text#5 clrscr::line_text#1 printf_string::str#10 cputs::s#2 cputs::s#1 cputs::s#0 ]
zp[2]:11 [ clrscr::line_cols#5 clrscr::line_cols#1 strlen::len#2 strlen::len#1 strlen::return#2 printf_string::$9 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[1]:13 [ conio_cursor_x ]
zp[1]:14 [ conio_cursor_y ]
zp[2]:15 [ conio_cursor_text cscroll::$7 cputln::$0 cputln::$1 ]
zp[2]:17 [ conio_cursor_color cscroll::$8 cputln::$2 cputln::$3 ]
reg byte a [ printf_string::len#0 ]
zp[2]:19 [ memcpy::src_end#0 memset::end#0 ]
reg byte a [ cputs::c#1 ]


FINAL ASSEMBLER
Score: 15198

  // File Comments
// Tests printf implementation
// Format a string
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  .label conio_cursor_x = $d
  .label conio_cursor_y = $e
  .label conio_cursor_text = $f
  .label conio_cursor_color = $11
  // @begin
__bbegin:
  // @1
  // conio_cursor_x = 0
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // conio_cursor_y = 0
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  sta.z conio_cursor_y
  // conio_cursor_text = CONIO_SCREEN_TEXT
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // conio_cursor_color = CONIO_SCREEN_COLORS
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [6] call main 
  // [8] phi from @2 to main [phi:@2->main]
  jsr main
  rts
  // [7] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    // clrscr()
    // [9] call clrscr 
    // [124] phi from main to clrscr [phi:main->clrscr]
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // printf_string( "cml", { 10, 0 } )
    // [11] call printf_string 
    // [25] phi from main::@1 to printf_string [phi:main::@1->printf_string]
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@1->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@1->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // cputln()
    // [13] call cputln 
    jsr cputln
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // printf_string( "rules", { 10, 0 } )
    // [15] call printf_string 
    // [25] phi from main::@3 to printf_string [phi:main::@3->printf_string]
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@3->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@3->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [16] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // cputln()
    // [17] call cputln 
    jsr cputln
    // [18] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // printf_string( "cml", { 10, 1 } )
    // [19] call printf_string 
    // [25] phi from main::@5 to printf_string [phi:main::@5->printf_string]
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@5->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@5->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [20] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // cputln()
    // [21] call cputln 
    jsr cputln
    // [22] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // printf_string( "rules", { 10, 1 } )
    // [23] call printf_string 
    // [25] phi from main::@7 to printf_string [phi:main::@7->printf_string]
    // [25] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@7->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [25] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@7->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    // main::@return
    // }
    // [24] return 
    rts
    str: .text "cml"
    .byte 0
    str1: .text "rules"
    .byte 0
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
// printf_string(byte* zp(9) str, byte zp(2) format_justify_left)
printf_string: {
    .label __9 = $b
    .label padding = 3
    .label str = 9
    .label format_justify_left = 2
    // printf_string::@3
    // strlen(str)
    // [26] (byte*) strlen::str#1 ← (byte*) printf_string::str#10 -- pbuz1=pbuz2 
    lda.z str
    sta.z strlen.str
    lda.z str+1
    sta.z strlen.str+1
    // [27] call strlen 
    // [118] phi from printf_string::@3 to strlen [phi:printf_string::@3->strlen]
    jsr strlen
    // strlen(str)
    // [28] (word) strlen::return#2 ← (word) strlen::len#2
    // printf_string::@6
    // [29] (word~) printf_string::$9 ← (word) strlen::return#2
    // len = (signed char)strlen(str)
    // [30] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$9 -- vbsaa=_sbyte_vwuz1 
    lda.z __9
    // padding = (signed char)format.min_length  - len
    // [31] (signed byte) printf_string::padding#1 ← (signed byte) $a - (signed byte) printf_string::len#0 -- vbsz1=vbsc1_minus_vbsaa 
    eor #$ff
    clc
    adc #$a+1
    sta.z padding
    // if(padding<0)
    // [32] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@10 -- vbsz1_ge_0_then_la1 
    cmp #0
    bpl __b1
    // [34] phi from printf_string::@6 to printf_string::@1 [phi:printf_string::@6->printf_string::@1]
    // [34] phi (signed byte) printf_string::padding#3 = (signed byte) 0 [phi:printf_string::@6->printf_string::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    // [33] phi from printf_string::@6 to printf_string::@10 [phi:printf_string::@6->printf_string::@10]
    // printf_string::@10
    // [34] phi from printf_string::@10 to printf_string::@1 [phi:printf_string::@10->printf_string::@1]
    // [34] phi (signed byte) printf_string::padding#3 = (signed byte) printf_string::padding#1 [phi:printf_string::@10->printf_string::@1#0] -- register_copy 
    // printf_string::@1
  __b1:
    // if(!format.justify_left && padding)
    // [35] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    // printf_string::@8
    // [36] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@4 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b4
    jmp __b2
    // printf_string::@4
  __b4:
    // printf_padding(' ',(char)padding)
    // [37] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [38] call printf_padding 
    // [46] phi from printf_string::@4 to printf_padding [phi:printf_string::@4->printf_padding]
    // [46] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@4->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [46] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#0 [phi:printf_string::@4->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_string::@2
  __b2:
    // cputs(str)
    // [39] (to_nomodify byte*) cputs::s#1 ← (byte*) printf_string::str#10
    // [40] call cputs 
    // [110] phi from printf_string::@2 to cputs [phi:printf_string::@2->cputs]
    jsr cputs
    // printf_string::@7
    // if(format.justify_left && padding)
    // [41] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    // printf_string::@9
    // [42] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@5 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b5
    rts
    // printf_string::@5
  __b5:
    // printf_padding(' ',(char)padding)
    // [43] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [44] call printf_padding 
    // [46] phi from printf_string::@5 to printf_padding [phi:printf_string::@5->printf_padding]
    // [46] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@5->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [46] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#1 [phi:printf_string::@5->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_string::@return
  __breturn:
    // }
    // [45] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp(5) pad, byte zp(4) length)
printf_padding: {
    .label i = 6
    .label length = 4
    .label pad = 5
    // [47] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
    // [47] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // printf_padding::@1
  __b1:
    // for(char i=0;i<length; i++)
    // [48] if((byte) printf_padding::i#2<(byte) printf_padding::length#3) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    // printf_padding::@return
    // }
    // [49] return 
    rts
    // printf_padding::@2
  __b2:
    // cputc(pad)
    // [50] (byte) cputc::c#1 ← (byte) printf_padding::pad#4 -- vbuaa=vbuz1 
    lda.z pad
    // [51] call cputc 
    // [53] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
    // [53] phi (byte) cputc::c#2 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    // printf_padding::@3
    // for(char i=0;i<length; i++)
    // [52] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [47] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
    // [47] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [54] if((byte) cputc::c#2==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // *conio_cursor_text++ = c
    // [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // *conio_cursor_text++ = c;
    // [56] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // *conio_cursor_color++ = conio_textcolor
    // [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // *conio_cursor_color++ = conio_textcolor;
    // [58] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [59] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // cputc::@3
    // conio_cursor_x = 0
    // [61] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // ++conio_cursor_y;
    // [62] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [63] call cscroll 
    jsr cscroll
    // cputc::@return
  __breturn:
    // }
    // [64] return 
    rts
    // [65] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [66] call cputln 
    jsr cputln
    rts
}
  // cputln
// Print a newline
cputln: {
    .label __0 = $f
    .label __1 = $f
    .label __2 = $11
    .label __3 = $11
    // conio_cursor_text - conio_cursor_x
    // [67] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __0
    sbc.z conio_cursor_x
    sta.z __0
    bcs !+
    dec.z __0+1
  !:
    // conio_cursor_text - conio_cursor_x + CONIO_WIDTH
    // [68] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __1
    sta.z __1
    bcc !+
    inc.z __1+1
  !:
    // conio_cursor_text =  conio_cursor_text - conio_cursor_x + CONIO_WIDTH
    // [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1
    // conio_cursor_color - conio_cursor_x
    // [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __2
    sbc.z conio_cursor_x
    sta.z __2
    bcs !+
    dec.z __2+1
  !:
    // conio_cursor_color - conio_cursor_x + CONIO_WIDTH
    // [71] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __3
    sta.z __3
    bcc !+
    inc.z __3+1
  !:
    // conio_cursor_color = conio_cursor_color - conio_cursor_x + CONIO_WIDTH
    // [72] (byte*) conio_cursor_color ← (byte*~) cputln::$3
    // conio_cursor_x = 0
    // [73] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [74] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [75] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [76] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $f
    .label __8 = $11
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [77] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [78] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [79] call memcpy 
    // [100] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [100] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [100] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [80] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [81] call memcpy 
    // [100] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [100] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [100] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [82] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [83] call memset 
    // [92] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [92] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [92] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [84] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [85] call memset 
    // [92] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [92] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #CONIO_TEXTCOLOR_DEFAULT
    // [92] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_cursor_text-CONIO_WIDTH
    // [86] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __7
    sec
    sbc #<$28
    sta.z __7
    lda.z __7+1
    sbc #>$28
    sta.z __7+1
    // conio_cursor_text = conio_cursor_text-CONIO_WIDTH
    // [87] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
    // conio_cursor_color-CONIO_WIDTH
    // [88] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // conio_cursor_color = conio_cursor_color-CONIO_WIDTH
    // [89] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
    // conio_cursor_y--;
    // [90] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [91] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($b) str, byte register(X) c)
memset: {
    .label end = $13
    .label dst = $b
    .label str = $b
    // memset::@1
    // end = (char*)str + num
    // [93] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [94] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [95] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [95] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [96] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [97] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [98] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [99] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(7) destination, void* zp($b) source)
memcpy: {
    .label src_end = $13
    .label dst = 7
    .label src = $b
    .label source = $b
    .label destination = 7
    // src_end = (char*)source+num
    // [101] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [102] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [103] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [104] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [104] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [104] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [105] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [106] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [107] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [108] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [109] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(9) s)
cputs: {
    .label s = 9
    // [111] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [111] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#1 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // cputs::@1
  __b1:
    // c=*s++
    // [112] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // while(c=*s++)
    // [113] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [114] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [115] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [116] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [117] call cputc 
    // [53] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
    // [53] phi (byte) cputc::c#2 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp(7) str)
strlen: {
    .label len = $b
    .label str = 7
    .label return = $b
    // [119] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
    // [119] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    sta.z len+1
    // [119] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    // strlen::@1
  __b1:
    // while(*str)
    // [120] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // strlen::@return
    // }
    // [121] return 
    rts
    // strlen::@2
  __b2:
    // len++;
    // [122] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // str++;
    // [123] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [119] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
    // [119] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [119] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 9
    .label line_cols = $b
    // [125] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [125] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [125] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [125] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [126] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b2
    // clrscr::@2
    // conio_cursor_x = 0
    // [127] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [128] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_cursor_text = CONIO_SCREEN_TEXT
    // [129] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // conio_cursor_color = CONIO_SCREEN_COLORS
    // [130] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    // clrscr::@return
    // }
    // [131] return 
    rts
    // [132] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b2:
    // [132] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // clrscr::@3
  __b3:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [133] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    // clrscr::@5
    // line_text += CONIO_WIDTH
    // [134] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [135] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [136] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [125] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
    // [125] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [125] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [125] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // line_text[c] = ' '
    // [137] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [138] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [139] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [132] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
    // [132] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data

