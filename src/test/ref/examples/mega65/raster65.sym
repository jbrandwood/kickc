const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const nomodify byte CIA_INTERRUPT_CLEAR = $7f
const nomodify byte* COLORRAM = (byte*) 55296
const nomodify byte* DEFAULT_SCREEN = (byte*) 1024
const byte* GREETING[]  = "   DOUBLEFLASH        ADTBM          SY2002          TAYGER         SERIOUSLY   LIBI IN PARADIZE       LGB          BLUEWAYSW        SAUSAGE       BIT SHIFTER     INDIOCOLIFA     GRUMPYNINJA      0-LIMITS         CHEVERON     DR. COMMODORE "
const nomodify byte GREET_COUNT = $f
const nomodify byte GREET_ROW = $14
const nomodify void()** HARDWARE_IRQ = (void()**) 65534
const nomodify byte IRQ_RASTER = 1
const nomodify byte IRQ_Y = $16
const nomodify byte LOGO_ROW = 3
const byte* MEGA_LOGO[]  = { $20, $20, $20, $20, $20, $cf, $cf, $cf, $20, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $20, $cf, $cf, $20, $cf, $20, $cf, $20, $20, $20, $cf, $cf, $20, $20, $20, $20, $cf, $cf, $20, $20, $20, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $20, $20, $cf, $20, $cf, $cf, $cf, $cf, $cf, $20, $cf, $cf, $20, $cf, $cf, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $20, $20, $20, $cf, $20, $20, $20, $cf, $cf, $cf, $20, $cf, $cf, $cf, $cf, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $cf, $20, $20, $20, $20, $cf, $cf, $20, $cf, $cf, $cf, $20, $20, $cf, $cf, $cf, $20, $20, $cf, $20, $20, $20, $cf }
const byte OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL = $5a
const byte OFFSET_STRUCT_MEGA65_VICIV_CONTROLB = $31
const byte OFFSET_STRUCT_MEGA65_VICIV_CONTROLC = $54
const byte OFFSET_STRUCT_MEGA65_VICIV_RASLINE0 = $6f
const byte OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO = $5c
const byte OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO = $4c
const byte OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS4569_VICIII_KEY = $2f
const byte OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
const byte OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
const byte OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const nomodify byte* PALETTE_BLUE = (byte*) 54016
const nomodify byte* PALETTE_GREEN = (byte*) 53760
const nomodify byte* PALETTE_RED = (byte*) 53504
const byte* PAL_BLUE[]  = { 0, $f3, $d4, $b5, $a6, $97, $88, $79, $1a, $fa, $eb, $ec, $bd, $be, $af, $ff, 0, 0, 0, 0, $c0, $b1, $a2, $a3, $34, $35, $26, $27, $f7, $f8, $f9, $ea, 0, 0, $30, $11, $22, $13, $14, 5, $b5, $96, $97, $98, $79, $6a, $5b, $4c, $81, $42, $43, $34, 5, 6, $f6, $f7, $78, $69, $5a, $5b, $4c, $3d, $1e, $f, $17, $c7, $a8, $89, $5a, $5b, $3c, $1d, $ad, $9e, $7f, $ff, $ff, $ff, $ff, $ff, $78, 9, $e9, $ca, $ab, $7c, $5d, $5e, $de, $cf, $ff, $ff, $ff, $ff, $ff, $ff, $59, $a, $ca, $bb, $8c, $6d, $3e, $2f, $bf, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $49, $f9, $da, $ab, $7c, $5d, $2e, $2f, $af, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $48, $d8, $b9, $aa, $7b, $5c, $2d, $2e, $be, $9f, $ff, $ff, $ff, $ff, $ff, $ff, 7, $97, $88, $69, $4a, $2b, $1c, $2d, $9d, $7e, $6f, $ff, $ff, $ff, $ff, $ff, $81, $62, $53, $44, 5, 6, $f6, $e7, $78, $69, $5a, $5b, $3c, $2d, $2e, $1f, 0, 0, 0, 0, $b0, $b1, $a2, $b3, $44, $35, $36, $37, 8, $f8, $a, $b, 0, 0, 0, 0, 0, $70, $61, $62, $f2, $e3, $d4, $c5, $b6, $b7, $b8, $99, 0, 0, 0, 0, 0, 0, $f0, $f1, $82, $83, $84, $85, $66, $57, $58, $59, 0, 0, 0, 0, 0, $70, $61, $62, $e2, $e3, $d4, $d5, $b6, $a7, $b8, $a9, 0, 0, 0, 0, $a0, $b1, $a2, $a3, $44, $35, $26, $37, $f7, $19, $f9, $fa }
const byte* PAL_GREEN[]  = { 0, $e3, $c4, $b5, $96, $87, $78, $79, $a, $fa, $eb, $dc, $bd, $ae, $af, $ff, $e2, $b3, $a4, $85, $76, $67, $48, $49, $d9, $da, $bb, $bc, $8d, $8e, $7f, $ff, $42, 3, 4, $e4, $d5, $c6, $b7, $a8, $39, $3a, $1b, $2c, $fc, $fd, $de, $df, $61, $32, $13, 4, $e4, $e5, $d6, $d7, $78, $59, $4a, $4b, $2c, $1d, $e, $fe, $e0, $b1, $a2, $93, $74, $75, $56, $57, $e7, $d8, $79, $ca, $ab, $9c, $9d, $8e, $f0, $d1, $c2, $a3, $84, $85, $76, $77, 8, 9, $f9, $fa, $db, $cc, $bd, $ae, $61, $22, $23, $14, $f4, $e5, $d6, $c7, $58, $59, $3a, $3b, $1c, $d, $fd, $fe, $92, $53, $44, $35, $16, $f6, $e7, $e8, $79, $6a, $5b, $4c, $2d, $3e, $1f, $ef, $53, $14, 5, $e5, $c6, $b7, $a8, $99, $2a, $2b, $c, $d, $dd, $ce, $cf, $ff, $f3, $b4, $95, $86, $57, $38, $29, $1a, $ba, $ab, $9c, $8d, $6e, $5f, $ff, $ff, $95, $56, $27, $18, $e8, $d9, $ca, $bb, $4c, $3d, $2e, $1f, $ef, $ff, $ff, $ff, $c5, $86, $57, $38, $19, $a, $ea, $db, $6c, $5d, $3e, $3f, $ef, $ff, $ff, $ff, $65, $26, 7, $e7, $c8, $b9, $9a, $9b, $2c, $1d, $fd, $fe, $cf, $ff, $ff, $ff, $b4, $75, $56, $37, $28, $19, $e9, $ea, $7b, $6c, $5d, $4e, $2f, $ff, $ff, $ff, $c3, $94, $75, $56, $47, $38, $19, $1a, $aa, $ab, $7c, $7d, $5e, $4f, $ff, $ff, $e2, $a3, $94, $85, $76, $67, $38, $49, $d9, $ca, $ab, $bc, $7d, $7e, $6f, $ff }
const byte* PAL_RED[]  = { 0, $f3, $d4, $b5, $a6, $97, $88, $79, $1a, $fa, $eb, $ec, $bd, $be, $af, $ff, $16, $c6, $a7, $88, $49, $5a, $2b, $1c, $ac, $ad, $8e, $8f, $ff, $ff, $ff, $ff, $c6, $77, $48, $29, $e9, $fa, $cb, $cc, $5d, $4e, $2f, $ff, $ff, $ff, $ff, $ff, $57, $18, $f8, $d9, $aa, $8b, $6c, $5d, $ed, $de, $cf, $ff, $ff, $ff, $ff, $ff, $26, $e6, $b7, $a8, $69, $5a, $3b, $3c, $dc, $cd, $ae, $9f, $ff, $ff, $ff, $ff, $65, $16, $17, $f7, $d8, $b9, $9a, $8b, $2c, $d, $fd, $ee, $cf, $ff, $ff, $ff, $64, $15, 6, $e6, $c7, $a8, $99, $8a, $1b, $c, $fc, $fd, $ee, $cf, $ff, $ff, $12, $d2, $d3, $b4, $95, $86, $77, $78, 9, $69, $ea, $fb, $dc, $ad, $ae, $af, $f0, $c1, $c2, $a3, $84, $85, $76, $67, 8, $f8, $e9, $da, $db, $bc, $bd, $ae, $40, $11, $12, $f2, $e3, $d4, $c5, $c6, $47, $38, $39, $2a, $1b, $c, $d, $ed, 0, 0, $f0, $d1, $c2, $b3, $a4, $95, $36, $27, $28, $29, $f9, $ea, $eb, $ec, $70, $41, $22, $23, $f3, $f4, $e5, $e6, $77, $78, $69, $7a, $3b, $3c, $3d, $3e, $a1, $82, $63, $54, $35, $26, 7, 8, $98, $99, $8a, $7b, $5c, $5d, $3e, $3f, $33, 4, $d4, $d5, $a6, $a7, $88, $89, $1a, $ab, $fb, $ec, $cd, $be, $af, $ff, $b4, $85, $56, $47, $18, 9, $f9, $ea, $7b, $7c, $5d, $5e, $2f, $ef, $ff, $ff, 6, $d6, $a7, $98, $59, $4a, $2b, $2c, $bc, $ad, $8e, $8f, $ff, $ff, $ff, $ff }
const nomodify byte* PROCPORT = (byte*) 1
const nomodify byte* PROCPORT_DDR = (byte*) 0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_IO = 5
const nomodify byte RASTER_LINES = $d8
const nomodify byte SCROLL_BLACKBARS = $13
const nomodify byte SCROLL_ROW = $d
const byte* SCROLL_TEXT[]  = "    THIS SMALL MEGA65 RASTER INTRO ... WAS MADE BY DEFT IN 2015 ... AND BROUGHT BACK TO LIFE 5 YEARS LATER IN 2020 ... BECAUSE THE MEGA65 HARDWARE CHANGED SO MUCH IN THE PAST 5 YEARS ... UNFORTUNATELY MY ASSEMBLER SKILLS DID NOT SO THIS IS THE FIRST APPROACH TO GET BETTER ... HOPEFULLY DR.MUTTI WILL HAVE TO SCOLD ME LESS ... THE PAST 5 YEARS HAVE BEEN AN UNFORGETTABLE & UNIQUE RIDE ... IF YOU DO WATCH THIS DEMO ON YOUR VERY OWN MEGA65 THERE IS ENOUGH EVIDENCE OF WHAT WE ACTUALLY ACHIEVED ... BELOW ARE THE GREETINGS TO DEAR AND VERY SPECIAL PEOPLE WHO HELPED TO GET THERE ... THANK YOU SO MUCH FOR YOUR SUPPORT AND FOR NOT GIVING UP ... DUAL SID TUNE BY RAYDEN OF ALPHA FLIGHT ... THIS SCROLLY WILL NOW RESTART           *WRAP*                    "
const nomodify byte SCROLL_Y = $66
const byte* SINUS[$100]  = kickasm {{ .fill 256, 91.5 + 91.5*sin(i*2*PI/256)
 }}
const byte SIZEOF_BYTE = 1
const byte* SONG[]  = kickasm {{ .import c64 "DiscoZak_2SID_patched.prg"
 }}
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
const nomodify struct MOS4569_VICIII* VICIII = (struct MOS4569_VICIII*) 53248
const nomodify struct MEGA65_VICIV* VICIV = (struct MEGA65_VICIV*) 53248
void __start()
volatile byte greet_idx loadstore zp[1]:11 0.6153846153846154
volatile byte greet_zoomx loadstore zp[1]:10 1.3939393939393938
interrupt(HARDWARE_STACK) void irq()
byte~ irq::$10 reg byte a 22.0
byte~ irq::$26 reg byte a 22.0
byte~ irq::$27 reg byte a 22.0
byte~ irq::$29 reg byte a 22.0
byte~ irq::$33 reg byte a 4.0
byte irq::barcnt
byte irq::barcnt#1 barcnt zp[1]:2 22.0
byte irq::barcnt#2 barcnt zp[1]:2 2.588235294117647
byte irq::barcol
byte irq::barcol#0 reg byte z 22.0
byte irq::barcol#1 reg byte z 101.0
byte irq::barcol#2 reg byte z 75.75
byte irq::barcol#3 reg byte z 103.75
byte irq::barcol#4 reg byte z 151.5
byte irq::col
byte irq::col#0 reg byte a 16.5
byte irq::col1
byte irq::col1#0 reg byte a 16.5
byte irq::col1#1 reg byte a 12.833333333333334
byte irq::greet_offset
byte irq::greet_offset#0 reg byte y 4.0
byte irq::greet_offset#1 reg byte y 11.0
byte irq::greet_offset#2 reg byte y 8.75
byte irq::i
byte irq::i#1 reg byte x 22.0
byte irq::i#2 reg byte x 9.307692307692307
byte irq::i1
byte irq::i1#1 reg byte y 202.0
byte irq::i1#2 reg byte y 60.599999999999994
byte irq::i2
byte irq::i2#1 reg byte y 202.0
byte irq::i2#2 reg byte y 60.599999999999994
byte irq::i3
byte irq::i3#1 reg byte x 22.0
byte irq::i3#2 reg byte x 11.0
byte irq::i4
byte irq::i4#1 reg byte x 22.0
byte irq::i4#2 reg byte x 8.8
byte irq::i5
byte irq::i5#1 reg byte x 22.0
byte irq::i5#2 reg byte x 18.333333333333332
byte irq::idx
byte irq::idx#0 reg byte x 11.0
byte irq::idx#1 reg byte x 67.33333333333333
byte irq::idx#2 reg byte x 101.0
byte irq::idx#3 reg byte x 138.33333333333331
byte irq::idx#4 reg byte x 101.0
byte irq::l
byte irq::l#1 reg byte x 22.0
byte irq::l#2 reg byte x 14.666666666666666
byte irq::line
byte irq::line#1 reg byte z 22.0
byte irq::line#10 reg byte z 3.259259259259259
byte irq::nxt
byte irq::nxt#0 reg byte a 2.0
byte irq::nxt#1 reg byte a 4.0
byte irq::nxt#2 reg byte a 6.0
byte irq::raster
byte irq::raster#0 reg byte a 56.0
byte irq::sin_bar
byte irq::sin_bar#0 sin_bar zp[1]:3 4.0
byte irq::sin_bar#1 sin_bar zp[1]:3 11.0
byte irq::sin_bar#2 sin_bar zp[1]:3 2.1875
byte irq::sin_col
byte irq::sin_col#0 reg byte y 4.0
byte irq::sin_col#1 reg byte y 11.0
byte irq::sin_col#2 reg byte y 3.833333333333333
byte irq::wobble_idx
byte irq::wobble_idx#0 reg byte x 4.0
byte irq::wobble_idx#1 reg byte x 11.0
byte irq::wobble_idx#10 reg byte x 4.590909090909091
byte irq::wobble_idx#7 reg byte x 22.0
byte irq::zoomval
byte irq::zoomval#0 reg byte a 11.0
void main()
byte main::i
byte main::i#1 reg byte x 151.5
byte main::i#2 reg byte x 202.0
byte main::i1
byte main::i1#1 reg byte x 202.0
byte main::i1#2 reg byte x 168.33333333333331
byte main::i2
byte main::i2#1 reg byte x 202.0
byte main::i2#2 reg byte x 134.66666666666666
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:4 2002.0
byte* memset::dst#2 dst zp[2]:4 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = (word)$28*$19
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)DEFAULT_SCREEN
const byte* rasters[RASTER_LINES]  = { fill( RASTER_LINES, 0) }
volatile byte* scroll_ptr loadstore zp[2]:8 0.1276595744680851
volatile byte scroll_soft loadstore zp[1]:7 0.2441860465116279
volatile byte sin_idx loadstore zp[1]:6 0.22641509433962262
const void()* songInit = (void()*)SONG
const void()* songPlay = (void()*)SONG+3

reg byte z [ irq::line#10 irq::line#1 ]
reg byte x [ irq::wobble_idx#10 irq::wobble_idx#0 irq::wobble_idx#7 irq::wobble_idx#1 ]
reg byte x [ irq::i#2 irq::i#1 ]
reg byte y [ irq::sin_col#2 irq::sin_col#1 irq::sin_col#0 ]
reg byte x [ irq::l#2 irq::l#1 ]
zp[1]:2 [ irq::barcnt#2 irq::barcnt#1 ]
zp[1]:3 [ irq::sin_bar#2 irq::sin_bar#0 irq::sin_bar#1 ]
reg byte x [ irq::i3#2 irq::i3#1 ]
reg byte x [ irq::i4#2 irq::i4#1 ]
reg byte y [ irq::greet_offset#2 irq::greet_offset#0 irq::greet_offset#1 ]
reg byte x [ irq::i5#2 irq::i5#1 ]
reg byte a [ irq::nxt#2 irq::nxt#0 irq::nxt#1 ]
reg byte y [ irq::i1#2 irq::i1#1 ]
reg byte y [ irq::i2#2 irq::i2#1 ]
reg byte z [ irq::barcol#4 irq::barcol#3 irq::barcol#0 irq::barcol#1 irq::barcol#2 ]
reg byte x [ irq::idx#4 irq::idx#3 irq::idx#0 irq::idx#1 irq::idx#2 ]
reg byte x [ main::i1#2 main::i1#1 ]
reg byte x [ main::i2#2 main::i2#1 ]
reg byte x [ main::i#2 main::i#1 ]
zp[2]:4 [ memset::dst#2 memset::dst#1 ]
zp[1]:6 [ sin_idx ]
zp[1]:7 [ scroll_soft ]
zp[2]:8 [ scroll_ptr ]
zp[1]:10 [ greet_zoomx ]
zp[1]:11 [ greet_idx ]
reg byte a [ irq::$33 ]
reg byte a [ irq::$29 ]
reg byte a [ irq::$26 ]
reg byte a [ irq::$27 ]
reg byte a [ irq::col1#0 ]
reg byte a [ irq::col1#1 ]
reg byte a [ irq::col#0 ]
reg byte a [ irq::zoomval#0 ]
reg byte a [ irq::$10 ]
reg byte a [ irq::raster#0 ]
