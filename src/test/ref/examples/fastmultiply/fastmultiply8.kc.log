
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@11
print_sbyte_at: scope:[print_sbyte_at]  from main::@1 main::@10 main::@2
  (byte*) print_sbyte_at::at#5 ← phi( main::@1/(byte*) print_sbyte_at::at#0 main::@10/(byte*) print_sbyte_at::at#2 main::@2/(byte*) print_sbyte_at::at#1 )
  (signed byte) print_sbyte_at::b#4 ← phi( main::@1/(signed byte) print_sbyte_at::b#1 main::@10/(signed byte) print_sbyte_at::b#3 main::@2/(signed byte) print_sbyte_at::b#2 )
  (bool~) print_sbyte_at::$0 ← (signed byte) print_sbyte_at::b#4 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) print_sbyte_at::$1 ← ! (bool~) print_sbyte_at::$0
  if((bool~) print_sbyte_at::$1) goto print_sbyte_at::@1
  to:print_sbyte_at::@2
print_sbyte_at::@1: scope:[print_sbyte_at]  from print_sbyte_at print_sbyte_at::@4
  (byte*) print_sbyte_at::at#3 ← phi( print_sbyte_at/(byte*) print_sbyte_at::at#5 print_sbyte_at::@4/(byte*) print_sbyte_at::at#6 )
  (signed byte) print_sbyte_at::b#5 ← phi( print_sbyte_at/(signed byte) print_sbyte_at::b#4 print_sbyte_at::@4/(signed byte) print_sbyte_at::b#0 )
  (byte~) print_sbyte_at::$4 ← ((byte)) (signed byte) print_sbyte_at::b#5
  (byte*~) print_sbyte_at::$5 ← (byte*) print_sbyte_at::at#3 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) print_byte_at::b#0 ← (byte~) print_sbyte_at::$4
  (byte*) print_byte_at::at#0 ← (byte*~) print_sbyte_at::$5
  call print_byte_at 
  to:print_sbyte_at::@3
print_sbyte_at::@3: scope:[print_sbyte_at]  from print_sbyte_at::@1
  to:print_sbyte_at::@return
print_sbyte_at::@2: scope:[print_sbyte_at]  from print_sbyte_at
  (signed byte) print_sbyte_at::b#7 ← phi( print_sbyte_at/(signed byte) print_sbyte_at::b#4 )
  (byte*) print_sbyte_at::at#4 ← phi( print_sbyte_at/(byte*) print_sbyte_at::at#5 )
  (byte) print_char_at::ch#0 ← (byte) '-'
  (byte*) print_char_at::at#0 ← (byte*) print_sbyte_at::at#4
  call print_char_at 
  to:print_sbyte_at::@4
print_sbyte_at::@4: scope:[print_sbyte_at]  from print_sbyte_at::@2
  (byte*) print_sbyte_at::at#6 ← phi( print_sbyte_at::@2/(byte*) print_sbyte_at::at#4 )
  (signed byte) print_sbyte_at::b#6 ← phi( print_sbyte_at::@2/(signed byte) print_sbyte_at::b#7 )
  (signed byte~) print_sbyte_at::$3 ← - (signed byte) print_sbyte_at::b#6
  (signed byte) print_sbyte_at::b#0 ← (signed byte~) print_sbyte_at::$3
  to:print_sbyte_at::@1
print_sbyte_at::@return: scope:[print_sbyte_at]  from print_sbyte_at::@3
  return 
  to:@return
@11: scope:[]  from @begin
  (byte*) print_screen#7 ← phi( @begin/(byte*) print_screen#0 )
  (byte[]) print_hextab#0 ← (const string) $2
  to:@17
print_byte_at: scope:[print_byte_at]  from print_sbyte_at::@1
  (byte*) print_byte_at::at#1 ← phi( print_sbyte_at::@1/(byte*) print_byte_at::at#0 )
  (byte) print_byte_at::b#1 ← phi( print_sbyte_at::@1/(byte) print_byte_at::b#0 )
  (byte~) print_byte_at::$0 ← (byte) print_byte_at::b#1 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) print_char_at::ch#1 ← *((byte[]) print_hextab#0 + (byte~) print_byte_at::$0)
  (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#1
  call print_char_at 
  to:print_byte_at::@1
print_byte_at::@1: scope:[print_byte_at]  from print_byte_at
  (byte*) print_byte_at::at#2 ← phi( print_byte_at/(byte*) print_byte_at::at#1 )
  (byte) print_byte_at::b#2 ← phi( print_byte_at/(byte) print_byte_at::b#1 )
  (byte~) print_byte_at::$2 ← (byte) print_byte_at::b#2 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte*~) print_byte_at::$3 ← (byte*) print_byte_at::at#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) print_char_at::ch#2 ← *((byte[]) print_hextab#0 + (byte~) print_byte_at::$2)
  (byte*) print_char_at::at#2 ← (byte*~) print_byte_at::$3
  call print_char_at 
  to:print_byte_at::@2
print_byte_at::@2: scope:[print_byte_at]  from print_byte_at::@1
  to:print_byte_at::@return
print_byte_at::@return: scope:[print_byte_at]  from print_byte_at::@2
  return 
  to:@return
print_char_at: scope:[print_char_at]  from print_byte_at print_byte_at::@1 print_sbyte_at::@2
  (byte*) print_char_at::at#3 ← phi( print_byte_at/(byte*) print_char_at::at#1 print_byte_at::@1/(byte*) print_char_at::at#2 print_sbyte_at::@2/(byte*) print_char_at::at#0 )
  (byte) print_char_at::ch#3 ← phi( print_byte_at/(byte) print_char_at::ch#1 print_byte_at::@1/(byte) print_char_at::ch#2 print_sbyte_at::@2/(byte) print_char_at::ch#0 )
  *((byte*) print_char_at::at#3) ← (byte) print_char_at::ch#3
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (word/signed word/dword/signed dword) 1000
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  return 
  to:@return
@17: scope:[]  from @11
  (byte*) print_screen#6 ← phi( @11/(byte*) print_screen#7 )
  (signed byte/signed word/signed dword~) $0 ← - (byte/signed byte/word/signed word/dword/signed dword) 95
  (signed byte/signed word/signed dword~) $1 ← - (byte/signed byte/word/signed word/dword/signed dword) 64
  (signed byte[]) vals#0 ← { (signed byte/signed word/signed dword~) $0, (signed byte/signed word/signed dword~) $1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/signed byte/word/signed word/dword/signed dword) 95 }
  to:@18
main: scope:[main]  from @19
  (signed byte*) cp#12 ← phi( @19/(signed byte*) cp#13 )
  (signed byte*) bp#12 ← phi( @19/(signed byte*) bp#13 )
  (signed byte*) ap#12 ← phi( @19/(signed byte*) ap#13 )
  (byte*) print_screen#3 ← phi( @19/(byte*) print_screen#4 )
  call print_cls 
  to:main::@7
main::@7: scope:[main]  from main
  (signed byte*) cp#11 ← phi( main/(signed byte*) cp#12 )
  (signed byte*) bp#11 ← phi( main/(signed byte*) bp#12 )
  (signed byte*) ap#11 ← phi( main/(signed byte*) ap#12 )
  (byte*) main::at_line#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*~) main::$1 ← (byte*) main::at_line#0 + (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte*) main::at#0 ← (byte*~) main::$1
  (byte) main::k#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main::@7 main::@8
  (signed byte*) cp#10 ← phi( main::@7/(signed byte*) cp#11 main::@8/(signed byte*) cp#9 )
  (signed byte*) bp#10 ← phi( main::@7/(signed byte*) bp#11 main::@8/(signed byte*) bp#9 )
  (signed byte*) ap#10 ← phi( main::@7/(signed byte*) ap#11 main::@8/(signed byte*) ap#9 )
  (byte*) main::at_line#7 ← phi( main::@7/(byte*) main::at_line#0 main::@8/(byte*) main::at_line#5 )
  (byte*) main::at#4 ← phi( main::@7/(byte*) main::at#0 main::@8/(byte*) main::at#1 )
  (byte) main::k#2 ← phi( main::@7/(byte) main::k#0 main::@8/(byte) main::k#1 )
  (signed byte) print_sbyte_at::b#1 ← *((signed byte[]) vals#0 + (byte) main::k#2)
  (byte*) print_sbyte_at::at#0 ← (byte*) main::at#4
  call print_sbyte_at 
  to:main::@8
main::@8: scope:[main]  from main::@1
  (signed byte*) cp#9 ← phi( main::@1/(signed byte*) cp#10 )
  (signed byte*) bp#9 ← phi( main::@1/(signed byte*) bp#10 )
  (signed byte*) ap#9 ← phi( main::@1/(signed byte*) ap#10 )
  (byte*) main::at_line#5 ← phi( main::@1/(byte*) main::at_line#7 )
  (byte) main::k#3 ← phi( main::@1/(byte) main::k#2 )
  (byte*) main::at#5 ← phi( main::@1/(byte*) main::at#4 )
  (byte*) main::at#1 ← (byte*) main::at#5 + (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) main::k#1 ← (byte) main::k#3 + rangenext(0,4)
  (bool~) main::$3 ← (byte) main::k#1 != rangelast(0,4)
  if((bool~) main::$3) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@8
  (signed byte*) cp#7 ← phi( main::@8/(signed byte*) cp#9 )
  (signed byte*) bp#7 ← phi( main::@8/(signed byte*) bp#9 )
  (signed byte*) ap#7 ← phi( main::@8/(signed byte*) ap#9 )
  (byte*) main::at_line#3 ← phi( main::@8/(byte*) main::at_line#5 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@5
  (signed byte*) cp#5 ← phi( main::@4/(signed byte*) cp#7 main::@5/(signed byte*) cp#8 )
  (signed byte*) bp#5 ← phi( main::@4/(signed byte*) bp#7 main::@5/(signed byte*) bp#8 )
  (signed byte*) ap#5 ← phi( main::@4/(signed byte*) ap#7 main::@5/(signed byte*) ap#8 )
  (byte) main::i#2 ← phi( main::@4/(byte) main::i#0 main::@5/(byte) main::i#1 )
  (byte*) main::at_line#2 ← phi( main::@4/(byte*) main::at_line#3 main::@5/(byte*) main::at_line#4 )
  (byte*) main::at_line#1 ← (byte*) main::at_line#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) main::at#2 ← (byte*) main::at_line#1
  (signed byte) print_sbyte_at::b#2 ← *((signed byte[]) vals#0 + (byte) main::i#2)
  (byte*) print_sbyte_at::at#1 ← (byte*) main::at#2
  call print_sbyte_at 
  to:main::@9
main::@9: scope:[main]  from main::@2
  (byte*) main::at_line#10 ← phi( main::@2/(byte*) main::at_line#1 )
  (signed byte*) cp#4 ← phi( main::@2/(signed byte*) cp#5 )
  (signed byte*) bp#4 ← phi( main::@2/(signed byte*) bp#5 )
  (signed byte*) ap#4 ← phi( main::@2/(signed byte*) ap#5 )
  (byte) main::i#6 ← phi( main::@2/(byte) main::i#2 )
  (byte*) main::at#9 ← phi( main::@2/(byte*) main::at#2 )
  (byte) main::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@3
main::@3: scope:[main]  from main::@11 main::@9
  (byte*) main::at_line#9 ← phi( main::@11/(byte*) main::at_line#6 main::@9/(byte*) main::at_line#10 )
  (signed byte*) cp#2 ← phi( main::@11/(signed byte*) cp#3 main::@9/(signed byte*) cp#4 )
  (signed byte*) bp#2 ← phi( main::@11/(signed byte*) bp#3 main::@9/(signed byte*) bp#4 )
  (signed byte*) ap#2 ← phi( main::@11/(signed byte*) ap#3 main::@9/(signed byte*) ap#4 )
  (byte) main::j#2 ← phi( main::@11/(byte) main::j#1 main::@9/(byte) main::j#0 )
  (byte) main::i#3 ← phi( main::@11/(byte) main::i#5 main::@9/(byte) main::i#6 )
  (byte*) main::at#6 ← phi( main::@11/(byte*) main::at#8 main::@9/(byte*) main::at#9 )
  (byte*) main::at#3 ← (byte*) main::at#6 + (byte/signed byte/word/signed word/dword/signed dword) 4
  (signed byte) fmul8::a#0 ← *((signed byte[]) vals#0 + (byte) main::i#3)
  (signed byte) fmul8::b#0 ← *((signed byte[]) vals#0 + (byte) main::j#2)
  call fmul8 
  (signed byte) fmul8::return#0 ← (signed byte) fmul8::return#2
  to:main::@10
main::@10: scope:[main]  from main::@3
  (byte*) main::at_line#8 ← phi( main::@3/(byte*) main::at_line#9 )
  (signed byte*) cp#6 ← phi( main::@3/(signed byte*) cp#2 )
  (signed byte*) bp#6 ← phi( main::@3/(signed byte*) bp#2 )
  (signed byte*) ap#6 ← phi( main::@3/(signed byte*) ap#2 )
  (byte) main::i#7 ← phi( main::@3/(byte) main::i#3 )
  (byte) main::j#4 ← phi( main::@3/(byte) main::j#2 )
  (byte*) main::at#7 ← phi( main::@3/(byte*) main::at#3 )
  (signed byte) fmul8::return#3 ← phi( main::@3/(signed byte) fmul8::return#0 )
  (signed byte~) main::$5 ← (signed byte) fmul8::return#3
  (signed byte) main::r#0 ← (signed byte~) main::$5
  (signed byte) print_sbyte_at::b#3 ← (signed byte) main::r#0
  (byte*) print_sbyte_at::at#2 ← (byte*) main::at#7
  call print_sbyte_at 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte*) main::at_line#6 ← phi( main::@10/(byte*) main::at_line#8 )
  (signed byte*) cp#3 ← phi( main::@10/(signed byte*) cp#6 )
  (signed byte*) bp#3 ← phi( main::@10/(signed byte*) bp#6 )
  (signed byte*) ap#3 ← phi( main::@10/(signed byte*) ap#6 )
  (byte) main::i#5 ← phi( main::@10/(byte) main::i#7 )
  (byte*) main::at#8 ← phi( main::@10/(byte*) main::at#7 )
  (byte) main::j#3 ← phi( main::@10/(byte) main::j#4 )
  (byte) main::j#1 ← (byte) main::j#3 + rangenext(0,4)
  (bool~) main::$7 ← (byte) main::j#1 != rangelast(0,4)
  if((bool~) main::$7) goto main::@3
  to:main::@5
main::@5: scope:[main]  from main::@11
  (signed byte*) cp#8 ← phi( main::@11/(signed byte*) cp#3 )
  (signed byte*) bp#8 ← phi( main::@11/(signed byte*) bp#3 )
  (signed byte*) ap#8 ← phi( main::@11/(signed byte*) ap#3 )
  (byte*) main::at_line#4 ← phi( main::@11/(byte*) main::at_line#6 )
  (byte) main::i#4 ← phi( main::@11/(byte) main::i#5 )
  (byte) main::i#1 ← (byte) main::i#4 + rangenext(0,4)
  (bool~) main::$8 ← (byte) main::i#1 != rangelast(0,4)
  if((bool~) main::$8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@18: scope:[]  from @17
  (byte*) print_screen#5 ← phi( @17/(byte*) print_screen#6 )
  (signed byte*) ap#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 253
  (signed byte*) bp#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 254
  (signed byte*) cp#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 255
  to:@19
fmul8: scope:[fmul8]  from main::@3
  (signed byte*) cp#1 ← phi( main::@3/(signed byte*) cp#2 )
  (signed byte*) bp#1 ← phi( main::@3/(signed byte*) bp#2 )
  (signed byte) fmul8::b#1 ← phi( main::@3/(signed byte) fmul8::b#0 )
  (signed byte*) ap#1 ← phi( main::@3/(signed byte*) ap#2 )
  (signed byte) fmul8::a#1 ← phi( main::@3/(signed byte) fmul8::a#0 )
  *((signed byte*) ap#1) ← (signed byte) fmul8::a#1
  *((signed byte*) bp#1) ← (signed byte) fmul8::b#1
  asm { ldaap staA1+1 eor#$ff staA2+1 ldxbp sec A1: ldamulf_sqr1,x A2: sbcmulf_sqr2,x stacp  }
  (signed byte) fmul8::return#1 ← *((signed byte*) cp#1)
  to:fmul8::@return
fmul8::@return: scope:[fmul8]  from fmul8
  (signed byte) fmul8::return#4 ← phi( fmul8/(signed byte) fmul8::return#1 )
  (signed byte) fmul8::return#2 ← (signed byte) fmul8::return#4
  return 
  to:@return
@19: scope:[]  from @18
  (signed byte*) cp#13 ← phi( @18/(signed byte*) cp#0 )
  (signed byte*) bp#13 ← phi( @18/(signed byte*) bp#0 )
  (signed byte*) ap#13 ← phi( @18/(signed byte*) ap#0 )
  (byte*) print_screen#4 ← phi( @18/(byte*) print_screen#5 )
  (byte*) mulf_sqr1#0 ← ((byte*)) (word/signed word/dword/signed dword) 8192
  (byte*) mulf_sqr2#0 ← ((byte*)) (word/signed word/dword/signed dword) 8704
  kickasm(location (byte*) mulf_sqr1#0) {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
  kickasm(location (byte*) mulf_sqr2#0) {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
  call main 
  to:@20
@20: scope:[]  from @19
  to:@end
@end: scope:[]  from @20

SYMBOL TABLE SSA
(signed byte/signed word/signed dword~) $0
(signed byte/signed word/signed dword~) $1
(const string) $2 = (string) "0123456789abcdef"
(label) @11
(label) @17
(label) @18
(label) @19
(label) @20
(label) @begin
(label) @end
(signed byte*) ap
(signed byte*) ap#0
(signed byte*) ap#1
(signed byte*) ap#10
(signed byte*) ap#11
(signed byte*) ap#12
(signed byte*) ap#13
(signed byte*) ap#2
(signed byte*) ap#3
(signed byte*) ap#4
(signed byte*) ap#5
(signed byte*) ap#6
(signed byte*) ap#7
(signed byte*) ap#8
(signed byte*) ap#9
(signed byte*) bp
(signed byte*) bp#0
(signed byte*) bp#1
(signed byte*) bp#10
(signed byte*) bp#11
(signed byte*) bp#12
(signed byte*) bp#13
(signed byte*) bp#2
(signed byte*) bp#3
(signed byte*) bp#4
(signed byte*) bp#5
(signed byte*) bp#6
(signed byte*) bp#7
(signed byte*) bp#8
(signed byte*) bp#9
(signed byte*) cp
(signed byte*) cp#0
(signed byte*) cp#1
(signed byte*) cp#10
(signed byte*) cp#11
(signed byte*) cp#12
(signed byte*) cp#13
(signed byte*) cp#2
(signed byte*) cp#3
(signed byte*) cp#4
(signed byte*) cp#5
(signed byte*) cp#6
(signed byte*) cp#7
(signed byte*) cp#8
(signed byte*) cp#9
(signed byte()) fmul8((signed byte) fmul8::a , (signed byte) fmul8::b)
(label) fmul8::@return
(signed byte) fmul8::a
(signed byte) fmul8::a#0
(signed byte) fmul8::a#1
(signed byte) fmul8::b
(signed byte) fmul8::b#0
(signed byte) fmul8::b#1
(signed byte) fmul8::return
(signed byte) fmul8::return#0
(signed byte) fmul8::return#1
(signed byte) fmul8::return#2
(signed byte) fmul8::return#3
(signed byte) fmul8::return#4
(void()) main()
(byte*~) main::$1
(bool~) main::$3
(signed byte~) main::$5
(bool~) main::$7
(bool~) main::$8
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte*) main::at
(byte*) main::at#0
(byte*) main::at#1
(byte*) main::at#2
(byte*) main::at#3
(byte*) main::at#4
(byte*) main::at#5
(byte*) main::at#6
(byte*) main::at#7
(byte*) main::at#8
(byte*) main::at#9
(byte*) main::at_line
(byte*) main::at_line#0
(byte*) main::at_line#1
(byte*) main::at_line#10
(byte*) main::at_line#2
(byte*) main::at_line#3
(byte*) main::at_line#4
(byte*) main::at_line#5
(byte*) main::at_line#6
(byte*) main::at_line#7
(byte*) main::at_line#8
(byte*) main::at_line#9
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::j#4
(byte) main::k
(byte) main::k#0
(byte) main::k#1
(byte) main::k#2
(byte) main::k#3
(signed byte) main::r
(signed byte) main::r#0
(byte*) mulf_sqr1
(byte*) mulf_sqr1#0
(byte*) mulf_sqr2
(byte*) mulf_sqr2#0
(void()) print_byte_at((byte) print_byte_at::b , (byte*) print_byte_at::at)
(byte~) print_byte_at::$0
(byte~) print_byte_at::$2
(byte*~) print_byte_at::$3
(label) print_byte_at::@1
(label) print_byte_at::@2
(label) print_byte_at::@return
(byte*) print_byte_at::at
(byte*) print_byte_at::at#0
(byte*) print_byte_at::at#1
(byte*) print_byte_at::at#2
(byte) print_byte_at::b
(byte) print_byte_at::b#0
(byte) print_byte_at::b#1
(byte) print_byte_at::b#2
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(label) print_char_at::@return
(byte*) print_char_at::at
(byte*) print_char_at::at#0
(byte*) print_char_at::at#1
(byte*) print_char_at::at#2
(byte*) print_char_at::at#3
(byte) print_char_at::ch
(byte) print_char_at::ch#0
(byte) print_char_at::ch#1
(byte) print_char_at::ch#2
(byte) print_char_at::ch#3
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(void()) print_sbyte_at((signed byte) print_sbyte_at::b , (byte*) print_sbyte_at::at)
(bool~) print_sbyte_at::$0
(bool~) print_sbyte_at::$1
(signed byte~) print_sbyte_at::$3
(byte~) print_sbyte_at::$4
(byte*~) print_sbyte_at::$5
(label) print_sbyte_at::@1
(label) print_sbyte_at::@2
(label) print_sbyte_at::@3
(label) print_sbyte_at::@4
(label) print_sbyte_at::@return
(byte*) print_sbyte_at::at
(byte*) print_sbyte_at::at#0
(byte*) print_sbyte_at::at#1
(byte*) print_sbyte_at::at#2
(byte*) print_sbyte_at::at#3
(byte*) print_sbyte_at::at#4
(byte*) print_sbyte_at::at#5
(byte*) print_sbyte_at::at#6
(signed byte) print_sbyte_at::b
(signed byte) print_sbyte_at::b#0
(signed byte) print_sbyte_at::b#1
(signed byte) print_sbyte_at::b#2
(signed byte) print_sbyte_at::b#3
(signed byte) print_sbyte_at::b#4
(signed byte) print_sbyte_at::b#5
(signed byte) print_sbyte_at::b#6
(signed byte) print_sbyte_at::b#7
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(signed byte[]) vals
(signed byte[]) vals#0

Culled Empty Block (label) print_sbyte_at::@3
Culled Empty Block (label) print_byte_at::@2
Culled Empty Block (label) @20
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (bool~) print_sbyte_at::$1 ← (signed byte) print_sbyte_at::b#4 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) print_sbyte_at::$0 ← (signed byte) print_sbyte_at::b#4 < (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) print_byte_at::b#0 = (byte~) print_sbyte_at::$4 
Alias (byte*) print_byte_at::at#0 = (byte*~) print_sbyte_at::$5 
Alias (byte*) print_sbyte_at::at#4 = (byte*) print_sbyte_at::at#5 (byte*) print_sbyte_at::at#6 
Alias (signed byte) print_sbyte_at::b#4 = (signed byte) print_sbyte_at::b#7 (signed byte) print_sbyte_at::b#6 
Alias (signed byte) print_sbyte_at::b#0 = (signed byte~) print_sbyte_at::$3 
Alias (byte*) print_screen#0 = (byte*) print_screen#7 (byte*) print_screen#6 (byte*) print_screen#5 (byte*) print_screen#4 
Alias (byte) print_byte_at::b#1 = (byte) print_byte_at::b#2 
Alias (byte*) print_byte_at::at#1 = (byte*) print_byte_at::at#2 
Alias (byte*) print_char_at::at#2 = (byte*~) print_byte_at::$3 
Alias (signed byte*) ap#11 = (signed byte*) ap#12 
Alias (signed byte*) bp#11 = (signed byte*) bp#12 
Alias (signed byte*) cp#11 = (signed byte*) cp#12 
Alias (byte*) main::at#0 = (byte*~) main::$1 
Alias (byte*) main::at#4 = (byte*) main::at#5 
Alias (byte) main::k#2 = (byte) main::k#3 
Alias (byte*) main::at_line#3 = (byte*) main::at_line#5 (byte*) main::at_line#7 
Alias (signed byte*) ap#10 = (signed byte*) ap#9 (signed byte*) ap#7 
Alias (signed byte*) bp#10 = (signed byte*) bp#9 (signed byte*) bp#7 
Alias (signed byte*) cp#10 = (signed byte*) cp#9 (signed byte*) cp#7 
Alias (byte*) main::at#2 = (byte*) main::at_line#1 (byte*) main::at#9 (byte*) main::at_line#10 
Alias (byte) main::i#2 = (byte) main::i#6 
Alias (signed byte*) ap#4 = (signed byte*) ap#5 
Alias (signed byte*) bp#4 = (signed byte*) bp#5 
Alias (signed byte*) cp#4 = (signed byte*) cp#5 
Alias (signed byte) fmul8::return#0 = (signed byte) fmul8::return#3 
Alias (byte*) main::at#3 = (byte*) main::at#7 (byte*) main::at#8 
Alias (byte) main::j#2 = (byte) main::j#4 (byte) main::j#3 
Alias (byte) main::i#3 = (byte) main::i#7 (byte) main::i#5 (byte) main::i#4 
Alias (signed byte*) ap#2 = (signed byte*) ap#6 (signed byte*) ap#3 (signed byte*) ap#8 
Alias (signed byte*) bp#2 = (signed byte*) bp#6 (signed byte*) bp#3 (signed byte*) bp#8 
Alias (signed byte*) cp#2 = (signed byte*) cp#6 (signed byte*) cp#3 (signed byte*) cp#8 
Alias (byte*) main::at_line#4 = (byte*) main::at_line#8 (byte*) main::at_line#9 (byte*) main::at_line#6 
Alias (signed byte) main::r#0 = (signed byte~) main::$5 
Alias (signed byte) fmul8::return#1 = (signed byte) fmul8::return#4 (signed byte) fmul8::return#2 
Alias (signed byte*) ap#0 = (signed byte*) ap#13 
Alias (signed byte*) bp#0 = (signed byte*) bp#13 
Alias (signed byte*) cp#0 = (signed byte*) cp#13 
Successful SSA optimization Pass2AliasElimination
Alias (byte*) print_sbyte_at::at#3 = (byte*) print_sbyte_at::at#4 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_screen#2
Self Phi Eliminated (byte*) main::at_line#3
Self Phi Eliminated (signed byte*) ap#10
Self Phi Eliminated (signed byte*) bp#10
Self Phi Eliminated (signed byte*) cp#10
Self Phi Eliminated (byte) main::i#3
Self Phi Eliminated (signed byte*) ap#2
Self Phi Eliminated (signed byte*) bp#2
Self Phi Eliminated (signed byte*) cp#2
Self Phi Eliminated (byte*) main::at_line#4
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) print_byte_at::b#1 (byte) print_byte_at::b#0
Redundant Phi (byte*) print_byte_at::at#1 (byte*) print_byte_at::at#0
Redundant Phi (byte*) print_screen#1 (byte*) print_screen#3
Redundant Phi (byte*) print_screen#2 (byte*) print_screen#1
Redundant Phi (byte*) print_screen#3 (byte*) print_screen#0
Redundant Phi (signed byte*) ap#11 (signed byte*) ap#0
Redundant Phi (signed byte*) bp#11 (signed byte*) bp#0
Redundant Phi (signed byte*) cp#11 (signed byte*) cp#0
Redundant Phi (byte*) main::at_line#3 (byte*) main::at_line#0
Redundant Phi (signed byte*) ap#10 (signed byte*) ap#11
Redundant Phi (signed byte*) bp#10 (signed byte*) bp#11
Redundant Phi (signed byte*) cp#10 (signed byte*) cp#11
Redundant Phi (byte) main::i#3 (byte) main::i#2
Redundant Phi (signed byte*) ap#2 (signed byte*) ap#4
Redundant Phi (signed byte*) bp#2 (signed byte*) bp#4
Redundant Phi (signed byte*) cp#2 (signed byte*) cp#4
Redundant Phi (byte*) main::at_line#4 (byte*) main::at#2
Redundant Phi (signed byte) fmul8::a#1 (signed byte) fmul8::a#0
Redundant Phi (signed byte*) ap#1 (signed byte*) ap#2
Redundant Phi (signed byte) fmul8::b#1 (signed byte) fmul8::b#0
Redundant Phi (signed byte*) bp#1 (signed byte*) bp#2
Redundant Phi (signed byte*) cp#1 (signed byte*) cp#2
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) print_sbyte_at::$1 if((signed byte) print_sbyte_at::b#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte_at::@1
Simple Condition (bool~) print_cls::$1 if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) main::$3 if((byte) main::k#1!=rangelast(0,4)) goto main::@1
Simple Condition (bool~) main::$7 if((byte) main::j#1!=rangelast(0,4)) goto main::@3
Simple Condition (bool~) main::$8 if((byte) main::i#1!=rangelast(0,4)) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_screen#0 = ((byte*))1024
Constant (const byte) print_char_at::ch#0 = '-'
Constant (const byte[]) print_hextab#0 = $2
Constant (const signed byte/signed word/signed dword) $0 = -95
Constant (const signed byte/signed word/signed dword) $1 = -64
Constant (const byte*) main::at_line#0 = ((byte*))1024
Constant (const byte) main::k#0 = 0
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#0 = 0
Constant (const signed byte*) ap#0 = ((signed byte*))253
Constant (const signed byte*) bp#0 = ((signed byte*))254
Constant (const signed byte*) cp#0 = ((signed byte*))255
Constant (const byte*) mulf_sqr1#0 = ((byte*))8192
Constant (const byte*) mulf_sqr2#0 = ((byte*))8704
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_screen#0
Constant (const byte*) print_cls::$0 = print_screen#0+1000
Constant (const signed byte[]) vals#0 = { $0, $1, 0, 64, 95 }
Constant (const byte*) main::at#0 = main::at_line#0+4
Successful SSA optimization Pass2ConstantIdentification
Eliminating Noop Cast (byte) print_byte_at::b#0 ← ((byte)) (signed byte) print_sbyte_at::b#5
Successful SSA optimization Pass2NopCastElimination
Resolved ranged next value main::k#1 ← ++ main::k#2 to ++
Resolved ranged comparison value if(main::k#1!=rangelast(0,4)) goto main::@1 to (byte/signed byte/word/signed word/dword/signed dword) 5
Resolved ranged next value main::j#1 ← ++ main::j#2 to ++
Resolved ranged comparison value if(main::j#1!=rangelast(0,4)) goto main::@3 to (byte/signed byte/word/signed word/dword/signed dword) 5
Resolved ranged next value main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value if(main::i#1!=rangelast(0,4)) goto main::@2 to (byte/signed byte/word/signed word/dword/signed dword) 5
Culled Empty Block (label) @11
Culled Empty Block (label) @17
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@9
Culled Empty Block (label) @18
Successful SSA optimization Pass2CullEmptyBlocks
Self Phi Eliminated (signed byte*) ap#4
Self Phi Eliminated (signed byte*) bp#4
Self Phi Eliminated (signed byte*) cp#4
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (signed byte*) ap#4 (const signed byte*) ap#0
Redundant Phi (signed byte*) bp#4 (const signed byte*) bp#0
Redundant Phi (signed byte*) cp#4 (const signed byte*) cp#0
Successful SSA optimization Pass2RedundantPhiElimination
Inlining constant with var siblings (const byte) print_char_at::ch#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) main::at_line#0
Inlining constant with var siblings (const byte) main::k#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte*) main::at#0
Constant inlined print_cls::$0 = (const byte*) print_screen#0+(word/signed word/dword/signed dword) 1000
Constant inlined print_char_at::ch#0 = (byte) '-'
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::k#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined $0 = -(byte/signed byte/word/signed word/dword/signed dword) 95
Constant inlined print_cls::sc#0 = (const byte*) print_screen#0
Constant inlined $1 = -(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined main::at_line#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Constant inlined main::at#0 = ((byte*))(word/signed word/dword/signed dword) 1024+(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $2 = (const byte[]) print_hextab#0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@12(between main::@8 and main::@1)
Added new block during phi lifting main::@13(between main::@5 and main::@2)
Added new block during phi lifting main::@14(between main::@11 and main::@3)
Added new block during phi lifting print_sbyte_at::@5(between print_sbyte_at and print_sbyte_at::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_cls:6 print_sbyte_at:12 print_sbyte_at:22 fmul8:28 print_sbyte_at:35 
Calls in [print_sbyte_at] to print_char_at:51 print_byte_at:56 
Calls in [print_byte_at] to print_char_at:64 print_char_at:70 

Created 12 initial phi equivalence classes
Coalesced [10] print_sbyte_at::b#8 ← print_sbyte_at::b#1
Coalesced [11] print_sbyte_at::at#7 ← print_sbyte_at::at#0
Coalesced [20] print_sbyte_at::b#10 ← print_sbyte_at::b#2
Coalesced [21] print_sbyte_at::at#9 ← print_sbyte_at::at#1
Not coalescing [23] main::at#12 ← main::at#2
Coalesced [33] print_sbyte_at::b#9 ← print_sbyte_at::b#3
Coalesced [34] print_sbyte_at::at#8 ← print_sbyte_at::at#2
Coalesced [41] main::at_line#11 ← main::at#2
Coalesced [42] main::i#8 ← main::i#1
Coalesced [43] main::at#11 ← main::at#3
Coalesced [44] main::j#5 ← main::j#1
Coalesced [45] main::k#4 ← main::k#1
Coalesced [46] main::at#10 ← main::at#1
Coalesced [50] print_char_at::at#6 ← print_char_at::at#0
Coalesced [53] print_sbyte_at::b#12 ← print_sbyte_at::b#0
Coalesced [58] print_sbyte_at::b#11 ← print_sbyte_at::b#4
Coalesced [62] print_char_at::ch#4 ← print_char_at::ch#1
Coalesced [63] print_char_at::at#4 ← print_char_at::at#1
Coalesced [68] print_char_at::ch#5 ← print_char_at::ch#2
Coalesced [69] print_char_at::at#5 ← print_char_at::at#2
Coalesced [86] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 11 phi equivalence classes
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@14
Culled Empty Block (label) main::@12
Culled Empty Block (label) print_sbyte_at::@5
Culled Empty Block (label) print_cls::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@19
@19: scope:[]  from @begin
  kickasm(location (const byte*) mulf_sqr1#0) {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
  kickasm(location (const byte*) mulf_sqr2#0) {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
  [3] call main  [ ] ( )
  to:@end
@end: scope:[]  from @19
  [4] phi() [ ] ( )
main: scope:[main]  from @19
  [5] phi() [ ] ( main:3 [ ] )
  [6] call print_cls  [ ] ( main:3 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@8
  [7] (byte*) main::at#4 ← phi( main/((byte*))(word/signed word/dword/signed dword) 1024+(byte/signed byte/word/signed word/dword/signed dword) 4 main::@8/(byte*) main::at#1 ) [ main::k#2 main::at#4 ] ( main:3 [ main::k#2 main::at#4 ] )
  [7] (byte) main::k#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@8/(byte) main::k#1 ) [ main::k#2 main::at#4 ] ( main:3 [ main::k#2 main::at#4 ] )
  [8] (signed byte) print_sbyte_at::b#1 ← *((const signed byte[]) vals#0 + (byte) main::k#2) [ main::k#2 main::at#4 print_sbyte_at::b#1 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 ] )
  [9] (byte*) print_sbyte_at::at#0 ← (byte*) main::at#4 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] )
  [10] call print_sbyte_at  [ main::k#2 main::at#4 ] ( main:3 [ main::k#2 main::at#4 ] )
  to:main::@8
main::@8: scope:[main]  from main::@1
  [11] (byte*) main::at#1 ← (byte*) main::at#4 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::k#2 main::at#1 ] ( main:3 [ main::k#2 main::at#1 ] )
  [12] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 main::at#1 ] ( main:3 [ main::k#1 main::at#1 ] )
  [13] if((byte) main::k#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@1 [ main::k#1 main::at#1 ] ( main:3 [ main::k#1 main::at#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@5 main::@8
  [14] (byte) main::i#2 ← phi( main::@8/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@5/(byte) main::i#1 ) [ main::at_line#2 main::i#2 ] ( main:3 [ main::at_line#2 main::i#2 ] )
  [14] (byte*) main::at_line#2 ← phi( main::@8/((byte*))(word/signed word/dword/signed dword) 1024 main::@5/(byte*) main::at#2 ) [ main::at_line#2 main::i#2 ] ( main:3 [ main::at_line#2 main::i#2 ] )
  [15] (byte*) main::at#2 ← (byte*) main::at_line#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ main::i#2 main::at#2 ] ( main:3 [ main::i#2 main::at#2 ] )
  [16] (signed byte) print_sbyte_at::b#2 ← *((const signed byte[]) vals#0 + (byte) main::i#2) [ main::i#2 main::at#2 print_sbyte_at::b#2 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 ] )
  [17] (byte*) print_sbyte_at::at#1 ← (byte*) main::at#2 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] )
  [18] call print_sbyte_at  [ main::i#2 main::at#2 ] ( main:3 [ main::i#2 main::at#2 ] )
  [19] (byte*~) main::at#12 ← (byte*) main::at#2 [ main::i#2 main::at#2 main::at#12 ] ( main:3 [ main::i#2 main::at#2 main::at#12 ] )
  to:main::@3
main::@3: scope:[main]  from main::@11 main::@2
  [20] (byte) main::j#2 ← phi( main::@11/(byte) main::j#1 main::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ main::i#2 main::at#2 main::at#6 main::j#2 ] ( main:3 [ main::i#2 main::at#2 main::at#6 main::j#2 ] )
  [20] (byte*) main::at#6 ← phi( main::@11/(byte*) main::at#3 main::@2/(byte*~) main::at#12 ) [ main::i#2 main::at#2 main::at#6 main::j#2 ] ( main:3 [ main::i#2 main::at#2 main::at#6 main::j#2 ] )
  [21] (byte*) main::at#3 ← (byte*) main::at#6 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  [22] (signed byte) fmul8::a#0 ← *((const signed byte[]) vals#0 + (byte) main::i#2) [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 ] )
  [23] (signed byte) fmul8::b#0 ← *((const signed byte[]) vals#0 + (byte) main::j#2) [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 fmul8::b#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 fmul8::b#0 ] )
  [24] call fmul8  [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] )
  [25] (signed byte) fmul8::return#0 ← (signed byte) fmul8::return#1 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#0 ] )
  to:main::@10
main::@10: scope:[main]  from main::@3
  [26] (signed byte) main::r#0 ← (signed byte) fmul8::return#0 [ main::i#2 main::at#2 main::j#2 main::at#3 main::r#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 main::r#0 ] )
  [27] (signed byte) print_sbyte_at::b#3 ← (signed byte) main::r#0 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 ] )
  [28] (byte*) print_sbyte_at::at#2 ← (byte*) main::at#3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] )
  [29] call print_sbyte_at  [ main::i#2 main::at#2 main::j#2 main::at#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  to:main::@11
main::@11: scope:[main]  from main::@10
  [30] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ( main:3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] )
  [31] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ( main:3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] )
  to:main::@5
main::@5: scope:[main]  from main::@11
  [32] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::at#2 main::i#1 ] ( main:3 [ main::at#2 main::i#1 ] )
  [33] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@2 [ main::at#2 main::i#1 ] ( main:3 [ main::at#2 main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@5
  [34] return  [ ] ( main:3 [ ] )
  to:@return
print_sbyte_at: scope:[print_sbyte_at]  from main::@1 main::@10 main::@2
  [35] (byte*) print_sbyte_at::at#3 ← phi( main::@1/(byte*) print_sbyte_at::at#0 main::@10/(byte*) print_sbyte_at::at#2 main::@2/(byte*) print_sbyte_at::at#1 ) [ print_sbyte_at::b#4 print_sbyte_at::at#3 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] )
  [35] (signed byte) print_sbyte_at::b#4 ← phi( main::@1/(signed byte) print_sbyte_at::b#1 main::@10/(signed byte) print_sbyte_at::b#3 main::@2/(signed byte) print_sbyte_at::b#2 ) [ print_sbyte_at::b#4 print_sbyte_at::at#3 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] )
  [36] if((signed byte) print_sbyte_at::b#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte_at::@1 [ print_sbyte_at::b#4 print_sbyte_at::at#3 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] )
  to:print_sbyte_at::@2
print_sbyte_at::@2: scope:[print_sbyte_at]  from print_sbyte_at
  [37] (byte*) print_char_at::at#0 ← (byte*) print_sbyte_at::at#3 [ print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] )
  [38] call print_char_at  [ print_sbyte_at::b#4 print_sbyte_at::at#3 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] )
  to:print_sbyte_at::@4
print_sbyte_at::@4: scope:[print_sbyte_at]  from print_sbyte_at::@2
  [39] (signed byte) print_sbyte_at::b#0 ← - (signed byte) print_sbyte_at::b#4 [ print_sbyte_at::at#3 print_sbyte_at::b#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::at#3 print_sbyte_at::b#0 ] )
  to:print_sbyte_at::@1
print_sbyte_at::@1: scope:[print_sbyte_at]  from print_sbyte_at print_sbyte_at::@4
  [40] (signed byte) print_sbyte_at::b#5 ← phi( print_sbyte_at/(signed byte) print_sbyte_at::b#4 print_sbyte_at::@4/(signed byte) print_sbyte_at::b#0 ) [ print_sbyte_at::at#3 print_sbyte_at::b#5 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::at#3 print_sbyte_at::b#5 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::at#3 print_sbyte_at::b#5 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::at#3 print_sbyte_at::b#5 ] )
  [41] (byte*) print_byte_at::at#0 ← (byte*) print_sbyte_at::at#3 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_sbyte_at::b#5 print_byte_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] )
  [42] call print_byte_at  [ ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  to:print_sbyte_at::@return
print_sbyte_at::@return: scope:[print_sbyte_at]  from print_sbyte_at::@1
  [43] return  [ ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  to:@return
print_byte_at: scope:[print_byte_at]  from print_sbyte_at::@1
  [44] (byte~) print_byte_at::$0 ← (byte)(signed byte) print_sbyte_at::b#5 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] )
  [45] (byte) print_char_at::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$0) [ print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] )
  [46] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#0 [ print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] )
  [47] call print_char_at  [ print_sbyte_at::b#5 print_byte_at::at#0 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] )
  to:print_byte_at::@1
print_byte_at::@1: scope:[print_byte_at]  from print_byte_at
  [48] (byte~) print_byte_at::$2 ← (byte)(signed byte) print_sbyte_at::b#5 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_byte_at::at#0 print_byte_at::$2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::at#0 print_byte_at::$2 ] )
  [49] (byte*) print_char_at::at#2 ← (byte*) print_byte_at::at#0 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_byte_at::$2 print_char_at::at#2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::$2 print_char_at::at#2 ] )
  [50] (byte) print_char_at::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$2) [ print_char_at::at#2 print_char_at::ch#2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_char_at::at#2 print_char_at::ch#2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_char_at::at#2 print_char_at::ch#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_char_at::at#2 print_char_at::ch#2 ] )
  [51] call print_char_at  [ ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  to:print_byte_at::@return
print_byte_at::@return: scope:[print_byte_at]  from print_byte_at::@1
  [52] return  [ ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  to:@return
print_char_at: scope:[print_char_at]  from print_byte_at print_byte_at::@1 print_sbyte_at::@2
  [53] (byte*) print_char_at::at#3 ← phi( print_byte_at/(byte*) print_char_at::at#1 print_byte_at::@1/(byte*) print_char_at::at#2 print_sbyte_at::@2/(byte*) print_char_at::at#0 ) [ print_char_at::ch#3 print_char_at::at#3 ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 print_char_at::ch#3 print_char_at::at#3 ] )
  [53] (byte) print_char_at::ch#3 ← phi( print_byte_at/(byte) print_char_at::ch#1 print_byte_at::@1/(byte) print_char_at::ch#2 print_sbyte_at::@2/(byte) '-' ) [ print_char_at::ch#3 print_char_at::at#3 ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 print_char_at::ch#3 print_char_at::at#3 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 print_char_at::ch#3 print_char_at::at#3 ] )
  [54] *((byte*) print_char_at::at#3) ← (byte) print_char_at::ch#3 [ ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  [55] return  [ ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  to:@return
fmul8: scope:[fmul8]  from main::@3
  [56] *((const signed byte*) ap#0) ← (signed byte) fmul8::a#0 [ fmul8::b#0 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::b#0 ] )
  [57] *((const signed byte*) bp#0) ← (signed byte) fmul8::b#0 [ ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  asm { ldaap staA1+1 eor#$ff staA2+1 ldxbp sec A1: ldamulf_sqr1,x A2: sbcmulf_sqr2,x stacp  }
  [59] (signed byte) fmul8::return#1 ← *((const signed byte*) cp#0) [ fmul8::return#1 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] )
  to:fmul8::@return
fmul8::@return: scope:[fmul8]  from fmul8
  [60] return  [ fmul8::return#1 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] )
  to:@return
print_cls: scope:[print_cls]  from main
  [61] phi() [ ] ( main:3::print_cls:6 [ ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [62] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) print_screen#0 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:3::print_cls:6 [ print_cls::sc#2 ] )
  [63] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:3::print_cls:6 [ print_cls::sc#2 ] )
  [64] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:3::print_cls:6 [ print_cls::sc#1 ] )
  [65] if((byte*) print_cls::sc#1!=(const byte*) print_screen#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:3::print_cls:6 [ print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [66] return  [ ] ( main:3::print_cls:6 [ ] )
  to:@return


VARIABLE REGISTER WEIGHTS
(signed byte*) ap
(signed byte*) bp
(signed byte*) cp
(signed byte()) fmul8((signed byte) fmul8::a , (signed byte) fmul8::b)
(signed byte) fmul8::a
(signed byte) fmul8::a#0 51.5
(signed byte) fmul8::b
(signed byte) fmul8::b#0 51.5
(signed byte) fmul8::return
(signed byte) fmul8::return#0 202.0
(signed byte) fmul8::return#1 34.33333333333333
(void()) main()
(byte*) main::at
(byte*) main::at#1 7.333333333333333
(byte*~) main::at#12 22.0
(byte*) main::at#2 2.3157894736842106
(byte*) main::at#3 27.545454545454547
(byte*) main::at#4 8.25
(byte*) main::at#6 213.0
(byte*) main::at_line
(byte*) main::at_line#2 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 7.444444444444445
(byte) main::j
(byte) main::j#1 151.5
(byte) main::j#2 30.299999999999997
(byte) main::k
(byte) main::k#1 16.5
(byte) main::k#2 6.6000000000000005
(signed byte) main::r
(signed byte) main::r#0 202.0
(byte*) mulf_sqr1
(byte*) mulf_sqr2
(void()) print_byte_at((byte) print_byte_at::b , (byte*) print_byte_at::at)
(byte~) print_byte_at::$0 4.0
(byte~) print_byte_at::$2 2.0
(byte*) print_byte_at::at
(byte*) print_byte_at::at#0 1.0
(byte) print_byte_at::b
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(byte*) print_char_at::at
(byte*) print_char_at::at#0 4.0
(byte*) print_char_at::at#1 4.0
(byte*) print_char_at::at#2 2.0
(byte*) print_char_at::at#3 8.0
(byte) print_char_at::ch
(byte) print_char_at::ch#1 2.0
(byte) print_char_at::ch#2 4.0
(byte) print_char_at::ch#3 6.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(void()) print_sbyte_at((signed byte) print_sbyte_at::b , (byte*) print_sbyte_at::at)
(byte*) print_sbyte_at::at
(byte*) print_sbyte_at::at#0 22.0
(byte*) print_sbyte_at::at#1 22.0
(byte*) print_sbyte_at::at#2 202.0
(byte*) print_sbyte_at::at#3 21.16666666666666
(signed byte) print_sbyte_at::b
(signed byte) print_sbyte_at::b#0 4.0
(signed byte) print_sbyte_at::b#1 11.0
(signed byte) print_sbyte_at::b#2 11.0
(signed byte) print_sbyte_at::b#3 101.0
(signed byte) print_sbyte_at::b#4 32.25
(signed byte) print_sbyte_at::b#5 0.6666666666666666
(byte*) print_screen
(signed byte[]) vals

Initial phi equivalence classes
[ main::k#2 main::k#1 ]
[ main::at#4 main::at#1 ]
[ main::at_line#2 main::at#2 ]
[ main::i#2 main::i#1 ]
[ main::at#6 main::at#3 main::at#12 ]
[ main::j#2 main::j#1 ]
[ print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 ]
[ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ]
[ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ]
[ print_char_at::at#3 print_char_at::at#1 print_char_at::at#2 print_char_at::at#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable fmul8::a#0 to zero page equivalence class [ fmul8::a#0 ]
Added variable fmul8::b#0 to zero page equivalence class [ fmul8::b#0 ]
Added variable fmul8::return#0 to zero page equivalence class [ fmul8::return#0 ]
Added variable main::r#0 to zero page equivalence class [ main::r#0 ]
Added variable print_byte_at::at#0 to zero page equivalence class [ print_byte_at::at#0 ]
Added variable print_byte_at::$0 to zero page equivalence class [ print_byte_at::$0 ]
Added variable print_byte_at::$2 to zero page equivalence class [ print_byte_at::$2 ]
Added variable fmul8::return#1 to zero page equivalence class [ fmul8::return#1 ]
Complete equivalence classes
[ main::k#2 main::k#1 ]
[ main::at#4 main::at#1 ]
[ main::at_line#2 main::at#2 ]
[ main::i#2 main::i#1 ]
[ main::at#6 main::at#3 main::at#12 ]
[ main::j#2 main::j#1 ]
[ print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 ]
[ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ]
[ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ]
[ print_char_at::at#3 print_char_at::at#1 print_char_at::at#2 print_char_at::at#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ fmul8::a#0 ]
[ fmul8::b#0 ]
[ fmul8::return#0 ]
[ main::r#0 ]
[ print_byte_at::at#0 ]
[ print_byte_at::$0 ]
[ print_byte_at::$2 ]
[ fmul8::return#1 ]
Allocated zp ZP_BYTE:2 [ main::k#2 main::k#1 ]
Allocated zp ZP_WORD:3 [ main::at#4 main::at#1 ]
Allocated zp ZP_WORD:5 [ main::at_line#2 main::at#2 ]
Allocated zp ZP_BYTE:7 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:8 [ main::at#6 main::at#3 main::at#12 ]
Allocated zp ZP_BYTE:10 [ main::j#2 main::j#1 ]
Allocated zp ZP_WORD:11 [ print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 ]
Allocated zp ZP_BYTE:13 [ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ]
Allocated zp ZP_BYTE:14 [ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ]
Allocated zp ZP_WORD:15 [ print_char_at::at#3 print_char_at::at#1 print_char_at::at#2 print_char_at::at#0 ]
Allocated zp ZP_WORD:17 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:19 [ fmul8::a#0 ]
Allocated zp ZP_BYTE:20 [ fmul8::b#0 ]
Allocated zp ZP_BYTE:21 [ fmul8::return#0 ]
Allocated zp ZP_BYTE:22 [ main::r#0 ]
Allocated zp ZP_WORD:23 [ print_byte_at::at#0 ]
Allocated zp ZP_BYTE:25 [ print_byte_at::$0 ]
Allocated zp ZP_BYTE:26 [ print_byte_at::$2 ]
Allocated zp ZP_BYTE:27 [ fmul8::return#1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_screen = $400
  .label ap = $fd
  .label bp = $fe
  .label cp = $ff
  .label mulf_sqr1 = $2000
  .label mulf_sqr2 = $2200
//SEG2 @begin
bbegin:
  jmp b19
//SEG3 @19
b19:
//SEG4 kickasm(location (const byte*) mulf_sqr1#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((i*i)/256) }     	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }     	.if(i>351) { .byte round(((512-i)*(512-i))/256) }     }  }}
//SEG5 kickasm(location (const byte*) mulf_sqr2#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }     	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }     	.if(i>351) { .byte round(((i-511)*(i-511))/256) }       }  }}
//SEG6 [3] call main  [ ] ( )
//SEG7 [5] phi from @19 to main [phi:@19->main]
main_from_b19:
  jsr main
//SEG8 [4] phi from @19 to @end [phi:@19->@end]
bend_from_b19:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label at = 3
    .label k = 2
    .label at_2 = 5
    .label at_3 = 8
    .label r = $16
    .label j = $a
    .label i = 7
    .label at_line = 5
    .label at_6 = 8
    .label at_12 = 8
  //SEG11 [6] call print_cls  [ ] ( main:3 [ ] )
  //SEG12 [61] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [7] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG14 [7] phi (byte*) main::at#4 = ((byte*))(word/signed word/dword/signed dword) 1024+(byte/signed byte/word/signed word/dword/signed dword) 4 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400+4
    sta at
    lda #>$400+4
    sta at+1
  //SEG15 [7] phi (byte) main::k#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta k
    jmp b1
  //SEG16 [7] phi from main::@8 to main::@1 [phi:main::@8->main::@1]
  b1_from_b8:
  //SEG17 [7] phi (byte*) main::at#4 = (byte*) main::at#1 [phi:main::@8->main::@1#0] -- register_copy 
  //SEG18 [7] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@8->main::@1#1] -- register_copy 
    jmp b1
  //SEG19 main::@1
  b1:
  //SEG20 [8] (signed byte) print_sbyte_at::b#1 ← *((const signed byte[]) vals#0 + (byte) main::k#2) [ main::k#2 main::at#4 print_sbyte_at::b#1 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy k
    lda vals,y
    sta print_sbyte_at.b
  //SEG21 [9] (byte*) print_sbyte_at::at#0 ← (byte*) main::at#4 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] ) -- pbuz1=pbuz2 
    lda at
    sta print_sbyte_at.at
    lda at+1
    sta print_sbyte_at.at+1
  //SEG22 [10] call print_sbyte_at  [ main::k#2 main::at#4 ] ( main:3 [ main::k#2 main::at#4 ] )
  //SEG23 [35] phi from main::@1 to print_sbyte_at [phi:main::@1->print_sbyte_at]
  print_sbyte_at_from_b1:
  //SEG24 [35] phi (byte*) print_sbyte_at::at#3 = (byte*) print_sbyte_at::at#0 [phi:main::@1->print_sbyte_at#0] -- register_copy 
  //SEG25 [35] phi (signed byte) print_sbyte_at::b#4 = (signed byte) print_sbyte_at::b#1 [phi:main::@1->print_sbyte_at#1] -- register_copy 
    jsr print_sbyte_at
    jmp b8
  //SEG26 main::@8
  b8:
  //SEG27 [11] (byte*) main::at#1 ← (byte*) main::at#4 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::k#2 main::at#1 ] ( main:3 [ main::k#2 main::at#1 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda at
    clc
    adc #4
    sta at
    bcc !+
    inc at+1
  !:
  //SEG28 [12] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 main::at#1 ] ( main:3 [ main::k#1 main::at#1 ] ) -- vbuz1=_inc_vbuz1 
    inc k
  //SEG29 [13] if((byte) main::k#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@1 [ main::k#1 main::at#1 ] ( main:3 [ main::k#1 main::at#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda k
    cmp #5
    bne b1_from_b8
  //SEG30 [14] phi from main::@8 to main::@2 [phi:main::@8->main::@2]
  b2_from_b8:
  //SEG31 [14] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@8->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG32 [14] phi (byte*) main::at_line#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main::@8->main::@2#1] -- pbuz1=pbuc1 
    lda #<$400
    sta at_line
    lda #>$400
    sta at_line+1
    jmp b2
  //SEG33 [14] phi from main::@5 to main::@2 [phi:main::@5->main::@2]
  b2_from_b5:
  //SEG34 [14] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@2#0] -- register_copy 
  //SEG35 [14] phi (byte*) main::at_line#2 = (byte*) main::at#2 [phi:main::@5->main::@2#1] -- register_copy 
    jmp b2
  //SEG36 main::@2
  b2:
  //SEG37 [15] (byte*) main::at#2 ← (byte*) main::at_line#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ main::i#2 main::at#2 ] ( main:3 [ main::i#2 main::at#2 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda at_2
    clc
    adc #$28
    sta at_2
    bcc !+
    inc at_2+1
  !:
  //SEG38 [16] (signed byte) print_sbyte_at::b#2 ← *((const signed byte[]) vals#0 + (byte) main::i#2) [ main::i#2 main::at#2 print_sbyte_at::b#2 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda vals,y
    sta print_sbyte_at.b
  //SEG39 [17] (byte*) print_sbyte_at::at#1 ← (byte*) main::at#2 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ) -- pbuz1=pbuz2 
    lda at_2
    sta print_sbyte_at.at
    lda at_2+1
    sta print_sbyte_at.at+1
  //SEG40 [18] call print_sbyte_at  [ main::i#2 main::at#2 ] ( main:3 [ main::i#2 main::at#2 ] )
  //SEG41 [35] phi from main::@2 to print_sbyte_at [phi:main::@2->print_sbyte_at]
  print_sbyte_at_from_b2:
  //SEG42 [35] phi (byte*) print_sbyte_at::at#3 = (byte*) print_sbyte_at::at#1 [phi:main::@2->print_sbyte_at#0] -- register_copy 
  //SEG43 [35] phi (signed byte) print_sbyte_at::b#4 = (signed byte) print_sbyte_at::b#2 [phi:main::@2->print_sbyte_at#1] -- register_copy 
    jsr print_sbyte_at
  //SEG44 [19] (byte*~) main::at#12 ← (byte*) main::at#2 [ main::i#2 main::at#2 main::at#12 ] ( main:3 [ main::i#2 main::at#2 main::at#12 ] ) -- pbuz1=pbuz2 
    lda at_2
    sta at_12
    lda at_2+1
    sta at_12+1
  //SEG45 [20] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG46 [20] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG47 [20] phi (byte*) main::at#6 = (byte*~) main::at#12 [phi:main::@2->main::@3#1] -- register_copy 
    jmp b3
  //SEG48 [20] phi from main::@11 to main::@3 [phi:main::@11->main::@3]
  b3_from_b11:
  //SEG49 [20] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@11->main::@3#0] -- register_copy 
  //SEG50 [20] phi (byte*) main::at#6 = (byte*) main::at#3 [phi:main::@11->main::@3#1] -- register_copy 
    jmp b3
  //SEG51 main::@3
  b3:
  //SEG52 [21] (byte*) main::at#3 ← (byte*) main::at#6 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda at_3
    clc
    adc #4
    sta at_3
    bcc !+
    inc at_3+1
  !:
  //SEG53 [22] (signed byte) fmul8::a#0 ← *((const signed byte[]) vals#0 + (byte) main::i#2) [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda vals,y
    sta fmul8.a
  //SEG54 [23] (signed byte) fmul8::b#0 ← *((const signed byte[]) vals#0 + (byte) main::j#2) [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 fmul8::b#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 fmul8::b#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy j
    lda vals,y
    sta fmul8.b
  //SEG55 [24] call fmul8  [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] )
    jsr fmul8
  //SEG56 [25] (signed byte) fmul8::return#0 ← (signed byte) fmul8::return#1 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#0 ] ) -- vbsz1=vbsz2 
    lda fmul8.return_1
    sta fmul8.return
    jmp b10
  //SEG57 main::@10
  b10:
  //SEG58 [26] (signed byte) main::r#0 ← (signed byte) fmul8::return#0 [ main::i#2 main::at#2 main::j#2 main::at#3 main::r#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 main::r#0 ] ) -- vbsz1=vbsz2 
    lda fmul8.return
    sta r
  //SEG59 [27] (signed byte) print_sbyte_at::b#3 ← (signed byte) main::r#0 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 ] ) -- vbsz1=vbsz2 
    lda r
    sta print_sbyte_at.b
  //SEG60 [28] (byte*) print_sbyte_at::at#2 ← (byte*) main::at#3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] ) -- pbuz1=pbuz2 
    lda at_3
    sta print_sbyte_at.at
    lda at_3+1
    sta print_sbyte_at.at+1
  //SEG61 [29] call print_sbyte_at  [ main::i#2 main::at#2 main::j#2 main::at#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  //SEG62 [35] phi from main::@10 to print_sbyte_at [phi:main::@10->print_sbyte_at]
  print_sbyte_at_from_b10:
  //SEG63 [35] phi (byte*) print_sbyte_at::at#3 = (byte*) print_sbyte_at::at#2 [phi:main::@10->print_sbyte_at#0] -- register_copy 
  //SEG64 [35] phi (signed byte) print_sbyte_at::b#4 = (signed byte) print_sbyte_at::b#3 [phi:main::@10->print_sbyte_at#1] -- register_copy 
    jsr print_sbyte_at
    jmp b11
  //SEG65 main::@11
  b11:
  //SEG66 [30] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ( main:3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ) -- vbuz1=_inc_vbuz1 
    inc j
  //SEG67 [31] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ( main:3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #5
    bne b3_from_b11
    jmp b5
  //SEG68 main::@5
  b5:
  //SEG69 [32] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::at#2 main::i#1 ] ( main:3 [ main::at#2 main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG70 [33] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@2 [ main::at#2 main::i#1 ] ( main:3 [ main::at#2 main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #5
    bne b2_from_b5
    jmp breturn
  //SEG71 main::@return
  breturn:
  //SEG72 [34] return  [ ] ( main:3 [ ] )
    rts
}
//SEG73 print_sbyte_at
print_sbyte_at: {
    .label b = $d
    .label at = $b
  //SEG74 [36] if((signed byte) print_sbyte_at::b#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte_at::@1 [ print_sbyte_at::b#4 print_sbyte_at::at#3 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1_from_print_sbyte_at
    jmp b2
  //SEG75 print_sbyte_at::@2
  b2:
  //SEG76 [37] (byte*) print_char_at::at#0 ← (byte*) print_sbyte_at::at#3 [ print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ) -- pbuz1=pbuz2 
    lda at
    sta print_char_at.at
    lda at+1
    sta print_char_at.at+1
  //SEG77 [38] call print_char_at  [ print_sbyte_at::b#4 print_sbyte_at::at#3 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] )
  //SEG78 [53] phi from print_sbyte_at::@2 to print_char_at [phi:print_sbyte_at::@2->print_char_at]
  print_char_at_from_b2:
  //SEG79 [53] phi (byte*) print_char_at::at#3 = (byte*) print_char_at::at#0 [phi:print_sbyte_at::@2->print_char_at#0] -- register_copy 
  //SEG80 [53] phi (byte) print_char_at::ch#3 = (byte) '-' [phi:print_sbyte_at::@2->print_char_at#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char_at.ch
    jsr print_char_at
    jmp b4
  //SEG81 print_sbyte_at::@4
  b4:
  //SEG82 [39] (signed byte) print_sbyte_at::b#0 ← - (signed byte) print_sbyte_at::b#4 [ print_sbyte_at::at#3 print_sbyte_at::b#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::at#3 print_sbyte_at::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG83 [40] phi from print_sbyte_at print_sbyte_at::@4 to print_sbyte_at::@1 [phi:print_sbyte_at/print_sbyte_at::@4->print_sbyte_at::@1]
  b1_from_print_sbyte_at:
  b1_from_b4:
  //SEG84 [40] phi (signed byte) print_sbyte_at::b#5 = (signed byte) print_sbyte_at::b#4 [phi:print_sbyte_at/print_sbyte_at::@4->print_sbyte_at::@1#0] -- register_copy 
    jmp b1
  //SEG85 print_sbyte_at::@1
  b1:
  //SEG86 [41] (byte*) print_byte_at::at#0 ← (byte*) print_sbyte_at::at#3 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_sbyte_at::b#5 print_byte_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] ) -- pbuz1=pbuz2_plus_1 
    lda at
    clc
    adc #1
    sta print_byte_at.at
    lda at+1
    adc #0
    sta print_byte_at.at+1
  //SEG87 [42] call print_byte_at  [ ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    jsr print_byte_at
    jmp breturn
  //SEG88 print_sbyte_at::@return
  breturn:
  //SEG89 [43] return  [ ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    rts
}
//SEG90 print_byte_at
print_byte_at: {
    .label _0 = $19
    .label _2 = $1a
    .label at = $17
  //SEG91 [44] (byte~) print_byte_at::$0 ← (byte)(signed byte) print_sbyte_at::b#5 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ) -- vbuz1=vbuz2_ror_4 
    lda print_sbyte_at.b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG92 [45] (byte) print_char_at::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$0) [ print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char_at.ch
  //SEG93 [46] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#0 [ print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] ) -- pbuz1=pbuz2 
    lda at
    sta print_char_at.at
    lda at+1
    sta print_char_at.at+1
  //SEG94 [47] call print_char_at  [ print_sbyte_at::b#5 print_byte_at::at#0 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] )
  //SEG95 [53] phi from print_byte_at to print_char_at [phi:print_byte_at->print_char_at]
  print_char_at_from_print_byte_at:
  //SEG96 [53] phi (byte*) print_char_at::at#3 = (byte*) print_char_at::at#1 [phi:print_byte_at->print_char_at#0] -- register_copy 
  //SEG97 [53] phi (byte) print_char_at::ch#3 = (byte) print_char_at::ch#1 [phi:print_byte_at->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp b1
  //SEG98 print_byte_at::@1
  b1:
  //SEG99 [48] (byte~) print_byte_at::$2 ← (byte)(signed byte) print_sbyte_at::b#5 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_byte_at::at#0 print_byte_at::$2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::at#0 print_byte_at::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and print_sbyte_at.b
    sta _2
  //SEG100 [49] (byte*) print_char_at::at#2 ← (byte*) print_byte_at::at#0 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_byte_at::$2 print_char_at::at#2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::$2 print_char_at::at#2 ] ) -- pbuz1=pbuz2_plus_1 
    lda at
    clc
    adc #1
    sta print_char_at.at
    lda at+1
    adc #0
    sta print_char_at.at+1
  //SEG101 [50] (byte) print_char_at::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$2) [ print_char_at::at#2 print_char_at::ch#2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_char_at::at#2 print_char_at::ch#2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_char_at::at#2 print_char_at::ch#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_char_at::at#2 print_char_at::ch#2 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char_at.ch
  //SEG102 [51] call print_char_at  [ ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  //SEG103 [53] phi from print_byte_at::@1 to print_char_at [phi:print_byte_at::@1->print_char_at]
  print_char_at_from_b1:
  //SEG104 [53] phi (byte*) print_char_at::at#3 = (byte*) print_char_at::at#2 [phi:print_byte_at::@1->print_char_at#0] -- register_copy 
  //SEG105 [53] phi (byte) print_char_at::ch#3 = (byte) print_char_at::ch#2 [phi:print_byte_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp breturn
  //SEG106 print_byte_at::@return
  breturn:
  //SEG107 [52] return  [ ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    rts
}
//SEG108 print_char_at
print_char_at: {
    .label at = $f
    .label ch = $e
  //SEG109 [54] *((byte*) print_char_at::at#3) ← (byte) print_char_at::ch#3 [ ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (at),y
    jmp breturn
  //SEG110 print_char_at::@return
  breturn:
  //SEG111 [55] return  [ ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    rts
}
//SEG112 fmul8
fmul8: {
    .label a = $13
    .label b = $14
    .label return = $15
    .label return_1 = $1b
  //SEG113 [56] *((const signed byte*) ap#0) ← (signed byte) fmul8::a#0 [ fmul8::b#0 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::b#0 ] ) -- _deref_pbsc1=vbsz1 
    lda a
    sta ap
  //SEG114 [57] *((const signed byte*) bp#0) ← (signed byte) fmul8::b#0 [ ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) -- _deref_pbsc1=vbsz1 
    lda b
    sta bp
  //SEG115 asm { ldaap staA1+1 eor#$ff staA2+1 ldxbp sec A1: ldamulf_sqr1,x A2: sbcmulf_sqr2,x stacp  }
    lda ap
    sta A1+1
    eor #$ff
    sta A2+1
    ldx bp
    sec
  A1:
    lda mulf_sqr1,x
  A2:
    sbc mulf_sqr2,x
    sta cp
  //SEG116 [59] (signed byte) fmul8::return#1 ← *((const signed byte*) cp#0) [ fmul8::return#1 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] ) -- vbsz1=_deref_pbsc1 
    lda cp
    sta return_1
    jmp breturn
  //SEG117 fmul8::@return
  breturn:
  //SEG118 [60] return  [ fmul8::return#1 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] )
    rts
}
//SEG119 print_cls
print_cls: {
    .label sc = $11
  //SEG120 [62] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG121 [62] phi (byte*) print_cls::sc#2 = (const byte*) print_screen#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta sc
    lda #>print_screen
    sta sc+1
    jmp b1
  //SEG122 [62] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG123 [62] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG124 print_cls::@1
  b1:
  //SEG125 [63] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:3::print_cls:6 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG126 [64] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:3::print_cls:6 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG127 [65] if((byte*) print_cls::sc#1!=(const byte*) print_screen#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:3::print_cls:6 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_screen+$3e8
    bne b1_from_b1
    lda sc
    cmp #<print_screen+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG128 print_cls::@return
  breturn:
  //SEG129 [66] return  [ ] ( main:3::print_cls:6 [ ] )
    rts
}
  print_hextab: .text "0123456789abcdef"
  vals: .byte -$5f, -$40, 0, $40, $5f
.pc = mulf_sqr1 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }

.pc = mulf_sqr2 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] (byte*) print_sbyte_at::at#0 ← (byte*) main::at#4 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::k#2 main::k#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ]
Statement [11] (byte*) main::at#1 ← (byte*) main::at#4 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::k#2 main::at#1 ] ( main:3 [ main::k#2 main::at#1 ] ) always clobbers reg byte a 
Statement [15] (byte*) main::at#2 ← (byte*) main::at_line#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ main::i#2 main::at#2 ] ( main:3 [ main::i#2 main::at#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ main::i#2 main::i#1 ]
Statement [17] (byte*) print_sbyte_at::at#1 ← (byte*) main::at#2 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ) always clobbers reg byte a 
Statement [19] (byte*~) main::at#12 ← (byte*) main::at#2 [ main::i#2 main::at#2 main::at#12 ] ( main:3 [ main::i#2 main::at#2 main::at#12 ] ) always clobbers reg byte a 
Statement [21] (byte*) main::at#3 ← (byte*) main::at#6 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ main::j#2 main::j#1 ]
Statement [28] (byte*) print_sbyte_at::at#2 ← (byte*) main::at#3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] ) always clobbers reg byte a 
Statement [37] (byte*) print_char_at::at#0 ← (byte*) print_sbyte_at::at#3 [ print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ) always clobbers reg byte a 
Statement [39] (signed byte) print_sbyte_at::b#0 ← - (signed byte) print_sbyte_at::b#4 [ print_sbyte_at::at#3 print_sbyte_at::b#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::at#3 print_sbyte_at::b#0 ] ) always clobbers reg byte a 
Statement [41] (byte*) print_byte_at::at#0 ← (byte*) print_sbyte_at::at#3 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_sbyte_at::b#5 print_byte_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] ) always clobbers reg byte a 
Statement [44] (byte~) print_byte_at::$0 ← (byte)(signed byte) print_sbyte_at::b#5 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ) always clobbers reg byte a 
Statement [46] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#0 [ print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ]
Statement [48] (byte~) print_byte_at::$2 ← (byte)(signed byte) print_sbyte_at::b#5 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_byte_at::at#0 print_byte_at::$2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::at#0 print_byte_at::$2 ] ) always clobbers reg byte a 
Statement [49] (byte*) print_char_at::at#2 ← (byte*) print_byte_at::at#0 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_byte_at::$2 print_char_at::at#2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::$2 print_char_at::at#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:26 [ print_byte_at::$2 ]
Statement [54] *((byte*) print_char_at::at#3) ← (byte) print_char_at::ch#3 [ ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::k#2 main::k#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:13 [ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:7 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ main::j#2 main::j#1 ]
Statement asm { ldaap staA1+1 eor#$ff staA2+1 ldxbp sec A1: ldamulf_sqr1,x A2: sbcmulf_sqr2,x stacp  } always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:7 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:10 [ main::j#2 main::j#1 ]
Statement [63] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:3::print_cls:6 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [65] if((byte*) print_cls::sc#1!=(const byte*) print_screen#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:3::print_cls:6 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [8] (signed byte) print_sbyte_at::b#1 ← *((const signed byte[]) vals#0 + (byte) main::k#2) [ main::k#2 main::at#4 print_sbyte_at::b#1 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 ] ) always clobbers reg byte a 
Statement [9] (byte*) print_sbyte_at::at#0 ← (byte*) main::at#4 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] ) always clobbers reg byte a 
Statement [11] (byte*) main::at#1 ← (byte*) main::at#4 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::k#2 main::at#1 ] ( main:3 [ main::k#2 main::at#1 ] ) always clobbers reg byte a 
Statement [15] (byte*) main::at#2 ← (byte*) main::at_line#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ main::i#2 main::at#2 ] ( main:3 [ main::i#2 main::at#2 ] ) always clobbers reg byte a 
Statement [16] (signed byte) print_sbyte_at::b#2 ← *((const signed byte[]) vals#0 + (byte) main::i#2) [ main::i#2 main::at#2 print_sbyte_at::b#2 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 ] ) always clobbers reg byte a 
Statement [17] (byte*) print_sbyte_at::at#1 ← (byte*) main::at#2 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ) always clobbers reg byte a 
Statement [19] (byte*~) main::at#12 ← (byte*) main::at#2 [ main::i#2 main::at#2 main::at#12 ] ( main:3 [ main::i#2 main::at#2 main::at#12 ] ) always clobbers reg byte a 
Statement [21] (byte*) main::at#3 ← (byte*) main::at#6 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) always clobbers reg byte a 
Statement [28] (byte*) print_sbyte_at::at#2 ← (byte*) main::at#3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] ) always clobbers reg byte a 
Statement [31] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ( main:3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ) always clobbers reg byte a 
Statement [33] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@2 [ main::at#2 main::i#1 ] ( main:3 [ main::at#2 main::i#1 ] ) always clobbers reg byte a 
Statement [37] (byte*) print_char_at::at#0 ← (byte*) print_sbyte_at::at#3 [ print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ) always clobbers reg byte a 
Statement [39] (signed byte) print_sbyte_at::b#0 ← - (signed byte) print_sbyte_at::b#4 [ print_sbyte_at::at#3 print_sbyte_at::b#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::at#3 print_sbyte_at::b#0 ] ) always clobbers reg byte a 
Statement [41] (byte*) print_byte_at::at#0 ← (byte*) print_sbyte_at::at#3 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_sbyte_at::b#5 print_byte_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] ) always clobbers reg byte a 
Statement [44] (byte~) print_byte_at::$0 ← (byte)(signed byte) print_sbyte_at::b#5 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ) always clobbers reg byte a 
Statement [46] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#0 [ print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] ) always clobbers reg byte a 
Statement [48] (byte~) print_byte_at::$2 ← (byte)(signed byte) print_sbyte_at::b#5 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_byte_at::at#0 print_byte_at::$2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::at#0 print_byte_at::$2 ] ) always clobbers reg byte a 
Statement [49] (byte*) print_char_at::at#2 ← (byte*) print_byte_at::at#0 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_byte_at::$2 print_char_at::at#2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::$2 print_char_at::at#2 ] ) always clobbers reg byte a 
Statement [54] *((byte*) print_char_at::at#3) ← (byte) print_char_at::ch#3 [ ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) always clobbers reg byte a reg byte y 
Statement asm { ldaap staA1+1 eor#$ff staA2+1 ldxbp sec A1: ldamulf_sqr1,x A2: sbcmulf_sqr2,x stacp  } always clobbers reg byte a reg byte x 
Statement [63] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:3::print_cls:6 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [65] if((byte*) print_cls::sc#1!=(const byte*) print_screen#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:3::print_cls:6 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::k#2 main::k#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ main::at#4 main::at#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_WORD:5 [ main::at_line#2 main::at#2 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_BYTE:7 [ main::i#2 main::i#1 ] : zp ZP_BYTE:7 , 
Potential registers zp ZP_WORD:8 [ main::at#6 main::at#3 main::at#12 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ main::j#2 main::j#1 ] : zp ZP_BYTE:10 , 
Potential registers zp ZP_WORD:11 [ print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_BYTE:13 [ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ] : zp ZP_BYTE:13 , reg byte x , 
Potential registers zp ZP_BYTE:14 [ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:15 [ print_char_at::at#3 print_char_at::at#1 print_char_at::at#2 print_char_at::at#0 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_WORD:17 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_BYTE:19 [ fmul8::a#0 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ fmul8::b#0 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ fmul8::return#0 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ main::r#0 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:23 [ print_byte_at::at#0 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_BYTE:25 [ print_byte_at::$0 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ print_byte_at::$2 ] : zp ZP_BYTE:26 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ fmul8::return#1 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 262.55: zp ZP_WORD:8 [ main::at#6 main::at#3 main::at#12 ] 202: zp ZP_BYTE:22 [ main::r#0 ] 181.8: zp ZP_BYTE:10 [ main::j#2 main::j#1 ] 24.32: zp ZP_WORD:5 [ main::at_line#2 main::at#2 ] 23.94: zp ZP_BYTE:7 [ main::i#2 main::i#1 ] 23.1: zp ZP_BYTE:2 [ main::k#2 main::k#1 ] 15.58: zp ZP_WORD:3 [ main::at#4 main::at#1 ] 
Uplift Scope [print_sbyte_at] 267.17: zp ZP_WORD:11 [ print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 ] 159.92: zp ZP_BYTE:13 [ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ] 
Uplift Scope [fmul8] 202: zp ZP_BYTE:21 [ fmul8::return#0 ] 51.5: zp ZP_BYTE:19 [ fmul8::a#0 ] 51.5: zp ZP_BYTE:20 [ fmul8::b#0 ] 34.33: zp ZP_BYTE:27 [ fmul8::return#1 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:17 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_char_at] 18: zp ZP_WORD:15 [ print_char_at::at#3 print_char_at::at#1 print_char_at::at#2 print_char_at::at#0 ] 12: zp ZP_BYTE:14 [ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ] 
Uplift Scope [print_byte_at] 4: zp ZP_BYTE:25 [ print_byte_at::$0 ] 2: zp ZP_BYTE:26 [ print_byte_at::$2 ] 1: zp ZP_WORD:23 [ print_byte_at::at#0 ] 
Uplift Scope [] 

Uplifting [main] best 12721 combination zp ZP_WORD:8 [ main::at#6 main::at#3 main::at#12 ] reg byte a [ main::r#0 ] zp ZP_BYTE:10 [ main::j#2 main::j#1 ] zp ZP_WORD:5 [ main::at_line#2 main::at#2 ] zp ZP_BYTE:7 [ main::i#2 main::i#1 ] reg byte x [ main::k#2 main::k#1 ] zp ZP_WORD:3 [ main::at#4 main::at#1 ] 
Uplifting [print_sbyte_at] best 12721 combination zp ZP_WORD:11 [ print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 ] zp ZP_BYTE:13 [ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ] 
Uplifting [fmul8] best 11517 combination reg byte a [ fmul8::return#0 ] reg byte a [ fmul8::a#0 ] reg byte y [ fmul8::b#0 ] zp ZP_BYTE:27 [ fmul8::return#1 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [print_cls] best 11517 combination zp ZP_WORD:17 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_char_at] best 11517 combination zp ZP_WORD:15 [ print_char_at::at#3 print_char_at::at#1 print_char_at::at#2 print_char_at::at#0 ] zp ZP_BYTE:14 [ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ] 
Uplifting [print_byte_at] best 11509 combination reg byte a [ print_byte_at::$0 ] reg byte y [ print_byte_at::$2 ] zp ZP_WORD:23 [ print_byte_at::at#0 ] 
Uplifting [] best 11509 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ main::j#2 main::j#1 ]
Uplifting [main] best 11509 combination zp ZP_BYTE:10 [ main::j#2 main::j#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ]
Uplifting [print_sbyte_at] best 11509 combination zp ZP_BYTE:13 [ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ fmul8::return#1 ]
Uplifting [fmul8] best 11206 combination reg byte a [ fmul8::return#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ main::i#2 main::i#1 ]
Uplifting [main] best 11206 combination zp ZP_BYTE:7 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ]
Uplifting [print_char_at] best 11206 combination zp ZP_BYTE:14 [ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:15 [ print_char_at::at#3 print_char_at::at#1 print_char_at::at#2 print_char_at::at#0 ] ] with [ zp ZP_WORD:23 [ print_byte_at::at#0 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:3 [ main::at#4 main::at#1 ] ] with [ zp ZP_WORD:11 [ print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:3 [ main::at#4 main::at#1 print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 ] ] with [ zp ZP_WORD:8 [ main::at#6 main::at#3 main::at#12 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:3 [ main::at#4 main::at#1 print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 main::at#6 main::at#3 main::at#12 ] ] with [ zp ZP_WORD:17 [ print_cls::sc#2 print_cls::sc#1 ] ]
Allocated (was zp ZP_WORD:3) zp ZP_WORD:2 [ main::at#4 main::at#1 print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 main::at#6 main::at#3 main::at#12 print_cls::sc#2 print_cls::sc#1 ]
Allocated (was zp ZP_WORD:5) zp ZP_WORD:4 [ main::at_line#2 main::at#2 ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
Allocated (was zp ZP_BYTE:10) zp ZP_BYTE:7 [ main::j#2 main::j#1 ]
Allocated (was zp ZP_BYTE:13) zp ZP_BYTE:8 [ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ]
Allocated (was zp ZP_BYTE:14) zp ZP_BYTE:9 [ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ]
Allocated (was zp ZP_WORD:15) zp ZP_WORD:10 [ print_char_at::at#3 print_char_at::at#1 print_char_at::at#2 print_char_at::at#0 print_byte_at::at#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_screen = $400
  .label ap = $fd
  .label bp = $fe
  .label cp = $ff
  .label mulf_sqr1 = $2000
  .label mulf_sqr2 = $2200
//SEG2 @begin
bbegin:
  jmp b19
//SEG3 @19
b19:
//SEG4 kickasm(location (const byte*) mulf_sqr1#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((i*i)/256) }     	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }     	.if(i>351) { .byte round(((512-i)*(512-i))/256) }     }  }}
//SEG5 kickasm(location (const byte*) mulf_sqr2#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }     	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }     	.if(i>351) { .byte round(((i-511)*(i-511))/256) }       }  }}
//SEG6 [3] call main  [ ] ( )
//SEG7 [5] phi from @19 to main [phi:@19->main]
main_from_b19:
  jsr main
//SEG8 [4] phi from @19 to @end [phi:@19->@end]
bend_from_b19:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label at = 2
    .label at_2 = 4
    .label j = 7
    .label i = 6
    .label at_line = 4
  //SEG11 [6] call print_cls  [ ] ( main:3 [ ] )
  //SEG12 [61] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [7] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG14 [7] phi (byte*) main::at#4 = ((byte*))(word/signed word/dword/signed dword) 1024+(byte/signed byte/word/signed word/dword/signed dword) 4 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400+4
    sta at
    lda #>$400+4
    sta at+1
  //SEG15 [7] phi (byte) main::k#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG16 [7] phi from main::@8 to main::@1 [phi:main::@8->main::@1]
  b1_from_b8:
  //SEG17 [7] phi (byte*) main::at#4 = (byte*) main::at#1 [phi:main::@8->main::@1#0] -- register_copy 
  //SEG18 [7] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@8->main::@1#1] -- register_copy 
    jmp b1
  //SEG19 main::@1
  b1:
  //SEG20 [8] (signed byte) print_sbyte_at::b#1 ← *((const signed byte[]) vals#0 + (byte) main::k#2) [ main::k#2 main::at#4 print_sbyte_at::b#1 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 ] ) -- vbsz1=pbsc1_derefidx_vbuxx 
    lda vals,x
    sta print_sbyte_at.b
  //SEG21 [9] (byte*) print_sbyte_at::at#0 ← (byte*) main::at#4 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] )
    // (byte*) print_sbyte_at::at#0 = (byte*) main::at#4  // register copy zp ZP_WORD:2
  //SEG22 [10] call print_sbyte_at  [ main::k#2 main::at#4 ] ( main:3 [ main::k#2 main::at#4 ] )
  //SEG23 [35] phi from main::@1 to print_sbyte_at [phi:main::@1->print_sbyte_at]
  print_sbyte_at_from_b1:
  //SEG24 [35] phi (byte*) print_sbyte_at::at#3 = (byte*) print_sbyte_at::at#0 [phi:main::@1->print_sbyte_at#0] -- register_copy 
  //SEG25 [35] phi (signed byte) print_sbyte_at::b#4 = (signed byte) print_sbyte_at::b#1 [phi:main::@1->print_sbyte_at#1] -- register_copy 
    jsr print_sbyte_at
    jmp b8
  //SEG26 main::@8
  b8:
  //SEG27 [11] (byte*) main::at#1 ← (byte*) main::at#4 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::k#2 main::at#1 ] ( main:3 [ main::k#2 main::at#1 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda at
    clc
    adc #4
    sta at
    bcc !+
    inc at+1
  !:
  //SEG28 [12] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 main::at#1 ] ( main:3 [ main::k#1 main::at#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG29 [13] if((byte) main::k#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@1 [ main::k#1 main::at#1 ] ( main:3 [ main::k#1 main::at#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b1_from_b8
  //SEG30 [14] phi from main::@8 to main::@2 [phi:main::@8->main::@2]
  b2_from_b8:
  //SEG31 [14] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@8->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG32 [14] phi (byte*) main::at_line#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main::@8->main::@2#1] -- pbuz1=pbuc1 
    lda #<$400
    sta at_line
    lda #>$400
    sta at_line+1
    jmp b2
  //SEG33 [14] phi from main::@5 to main::@2 [phi:main::@5->main::@2]
  b2_from_b5:
  //SEG34 [14] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@2#0] -- register_copy 
  //SEG35 [14] phi (byte*) main::at_line#2 = (byte*) main::at#2 [phi:main::@5->main::@2#1] -- register_copy 
    jmp b2
  //SEG36 main::@2
  b2:
  //SEG37 [15] (byte*) main::at#2 ← (byte*) main::at_line#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ main::i#2 main::at#2 ] ( main:3 [ main::i#2 main::at#2 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda at_2
    clc
    adc #$28
    sta at_2
    bcc !+
    inc at_2+1
  !:
  //SEG38 [16] (signed byte) print_sbyte_at::b#2 ← *((const signed byte[]) vals#0 + (byte) main::i#2) [ main::i#2 main::at#2 print_sbyte_at::b#2 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda vals,y
    sta print_sbyte_at.b
  //SEG39 [17] (byte*) print_sbyte_at::at#1 ← (byte*) main::at#2 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ) -- pbuz1=pbuz2 
    lda at_2
    sta print_sbyte_at.at
    lda at_2+1
    sta print_sbyte_at.at+1
  //SEG40 [18] call print_sbyte_at  [ main::i#2 main::at#2 ] ( main:3 [ main::i#2 main::at#2 ] )
  //SEG41 [35] phi from main::@2 to print_sbyte_at [phi:main::@2->print_sbyte_at]
  print_sbyte_at_from_b2:
  //SEG42 [35] phi (byte*) print_sbyte_at::at#3 = (byte*) print_sbyte_at::at#1 [phi:main::@2->print_sbyte_at#0] -- register_copy 
  //SEG43 [35] phi (signed byte) print_sbyte_at::b#4 = (signed byte) print_sbyte_at::b#2 [phi:main::@2->print_sbyte_at#1] -- register_copy 
    jsr print_sbyte_at
  //SEG44 [19] (byte*~) main::at#12 ← (byte*) main::at#2 [ main::i#2 main::at#2 main::at#12 ] ( main:3 [ main::i#2 main::at#2 main::at#12 ] ) -- pbuz1=pbuz2 
    lda at_2
    sta at
    lda at_2+1
    sta at+1
  //SEG45 [20] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG46 [20] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG47 [20] phi (byte*) main::at#6 = (byte*~) main::at#12 [phi:main::@2->main::@3#1] -- register_copy 
    jmp b3
  //SEG48 [20] phi from main::@11 to main::@3 [phi:main::@11->main::@3]
  b3_from_b11:
  //SEG49 [20] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@11->main::@3#0] -- register_copy 
  //SEG50 [20] phi (byte*) main::at#6 = (byte*) main::at#3 [phi:main::@11->main::@3#1] -- register_copy 
    jmp b3
  //SEG51 main::@3
  b3:
  //SEG52 [21] (byte*) main::at#3 ← (byte*) main::at#6 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda at
    clc
    adc #4
    sta at
    bcc !+
    inc at+1
  !:
  //SEG53 [22] (signed byte) fmul8::a#0 ← *((const signed byte[]) vals#0 + (byte) main::i#2) [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 ] ) -- vbsaa=pbsc1_derefidx_vbuz1 
    ldy i
    lda vals,y
  //SEG54 [23] (signed byte) fmul8::b#0 ← *((const signed byte[]) vals#0 + (byte) main::j#2) [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 fmul8::b#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 fmul8::b#0 ] ) -- vbsyy=pbsc1_derefidx_vbuz1 
    ldx j
    ldy vals,x
  //SEG55 [24] call fmul8  [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] )
    jsr fmul8
  //SEG56 [25] (signed byte) fmul8::return#0 ← (signed byte) fmul8::return#1 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#0 ] )
    // (signed byte) fmul8::return#0 = (signed byte) fmul8::return#1  // register copy reg byte a
    jmp b10
  //SEG57 main::@10
  b10:
  //SEG58 [26] (signed byte) main::r#0 ← (signed byte) fmul8::return#0 [ main::i#2 main::at#2 main::j#2 main::at#3 main::r#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 main::r#0 ] )
    // (signed byte) main::r#0 = (signed byte) fmul8::return#0  // register copy reg byte a
  //SEG59 [27] (signed byte) print_sbyte_at::b#3 ← (signed byte) main::r#0 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 ] ) -- vbsz1=vbsaa 
    sta print_sbyte_at.b
  //SEG60 [28] (byte*) print_sbyte_at::at#2 ← (byte*) main::at#3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] )
    // (byte*) print_sbyte_at::at#2 = (byte*) main::at#3  // register copy zp ZP_WORD:2
  //SEG61 [29] call print_sbyte_at  [ main::i#2 main::at#2 main::j#2 main::at#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  //SEG62 [35] phi from main::@10 to print_sbyte_at [phi:main::@10->print_sbyte_at]
  print_sbyte_at_from_b10:
  //SEG63 [35] phi (byte*) print_sbyte_at::at#3 = (byte*) print_sbyte_at::at#2 [phi:main::@10->print_sbyte_at#0] -- register_copy 
  //SEG64 [35] phi (signed byte) print_sbyte_at::b#4 = (signed byte) print_sbyte_at::b#3 [phi:main::@10->print_sbyte_at#1] -- register_copy 
    jsr print_sbyte_at
    jmp b11
  //SEG65 main::@11
  b11:
  //SEG66 [30] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ( main:3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ) -- vbuz1=_inc_vbuz1 
    inc j
  //SEG67 [31] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ( main:3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #5
    bne b3_from_b11
    jmp b5
  //SEG68 main::@5
  b5:
  //SEG69 [32] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::at#2 main::i#1 ] ( main:3 [ main::at#2 main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG70 [33] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@2 [ main::at#2 main::i#1 ] ( main:3 [ main::at#2 main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #5
    bne b2_from_b5
    jmp breturn
  //SEG71 main::@return
  breturn:
  //SEG72 [34] return  [ ] ( main:3 [ ] )
    rts
}
//SEG73 print_sbyte_at
print_sbyte_at: {
    .label b = 8
    .label at = 2
  //SEG74 [36] if((signed byte) print_sbyte_at::b#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte_at::@1 [ print_sbyte_at::b#4 print_sbyte_at::at#3 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1_from_print_sbyte_at
    jmp b2
  //SEG75 print_sbyte_at::@2
  b2:
  //SEG76 [37] (byte*) print_char_at::at#0 ← (byte*) print_sbyte_at::at#3 [ print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ) -- pbuz1=pbuz2 
    lda at
    sta print_char_at.at
    lda at+1
    sta print_char_at.at+1
  //SEG77 [38] call print_char_at  [ print_sbyte_at::b#4 print_sbyte_at::at#3 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] )
  //SEG78 [53] phi from print_sbyte_at::@2 to print_char_at [phi:print_sbyte_at::@2->print_char_at]
  print_char_at_from_b2:
  //SEG79 [53] phi (byte*) print_char_at::at#3 = (byte*) print_char_at::at#0 [phi:print_sbyte_at::@2->print_char_at#0] -- register_copy 
  //SEG80 [53] phi (byte) print_char_at::ch#3 = (byte) '-' [phi:print_sbyte_at::@2->print_char_at#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char_at.ch
    jsr print_char_at
    jmp b4
  //SEG81 print_sbyte_at::@4
  b4:
  //SEG82 [39] (signed byte) print_sbyte_at::b#0 ← - (signed byte) print_sbyte_at::b#4 [ print_sbyte_at::at#3 print_sbyte_at::b#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::at#3 print_sbyte_at::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG83 [40] phi from print_sbyte_at print_sbyte_at::@4 to print_sbyte_at::@1 [phi:print_sbyte_at/print_sbyte_at::@4->print_sbyte_at::@1]
  b1_from_print_sbyte_at:
  b1_from_b4:
  //SEG84 [40] phi (signed byte) print_sbyte_at::b#5 = (signed byte) print_sbyte_at::b#4 [phi:print_sbyte_at/print_sbyte_at::@4->print_sbyte_at::@1#0] -- register_copy 
    jmp b1
  //SEG85 print_sbyte_at::@1
  b1:
  //SEG86 [41] (byte*) print_byte_at::at#0 ← (byte*) print_sbyte_at::at#3 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_sbyte_at::b#5 print_byte_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] ) -- pbuz1=pbuz2_plus_1 
    lda at
    clc
    adc #1
    sta print_byte_at.at
    lda at+1
    adc #0
    sta print_byte_at.at+1
  //SEG87 [42] call print_byte_at  [ ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    jsr print_byte_at
    jmp breturn
  //SEG88 print_sbyte_at::@return
  breturn:
  //SEG89 [43] return  [ ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    rts
}
//SEG90 print_byte_at
print_byte_at: {
    .label at = $a
  //SEG91 [44] (byte~) print_byte_at::$0 ← (byte)(signed byte) print_sbyte_at::b#5 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ) -- vbuaa=vbuz1_ror_4 
    lda print_sbyte_at.b
    lsr
    lsr
    lsr
    lsr
  //SEG92 [45] (byte) print_char_at::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$0) [ print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] ) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    sta print_char_at.ch
  //SEG93 [46] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#0 [ print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] )
    // (byte*) print_char_at::at#1 = (byte*) print_byte_at::at#0  // register copy zp ZP_WORD:10
  //SEG94 [47] call print_char_at  [ print_sbyte_at::b#5 print_byte_at::at#0 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] )
  //SEG95 [53] phi from print_byte_at to print_char_at [phi:print_byte_at->print_char_at]
  print_char_at_from_print_byte_at:
  //SEG96 [53] phi (byte*) print_char_at::at#3 = (byte*) print_char_at::at#1 [phi:print_byte_at->print_char_at#0] -- register_copy 
  //SEG97 [53] phi (byte) print_char_at::ch#3 = (byte) print_char_at::ch#1 [phi:print_byte_at->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp b1
  //SEG98 print_byte_at::@1
  b1:
  //SEG99 [48] (byte~) print_byte_at::$2 ← (byte)(signed byte) print_sbyte_at::b#5 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_byte_at::at#0 print_byte_at::$2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::at#0 print_byte_at::$2 ] ) -- vbuyy=vbuz1_band_vbuc1 
    lda #$f
    and print_sbyte_at.b
    tay
  //SEG100 [49] (byte*) print_char_at::at#2 ← (byte*) print_byte_at::at#0 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_byte_at::$2 print_char_at::at#2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::$2 print_char_at::at#2 ] ) -- pbuz1=pbuz1_plus_1 
    inc print_char_at.at
    bne !+
    inc print_char_at.at+1
  !:
  //SEG101 [50] (byte) print_char_at::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$2) [ print_char_at::at#2 print_char_at::ch#2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_char_at::at#2 print_char_at::ch#2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_char_at::at#2 print_char_at::ch#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_char_at::at#2 print_char_at::ch#2 ] ) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda print_hextab,y
    sta print_char_at.ch
  //SEG102 [51] call print_char_at  [ ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  //SEG103 [53] phi from print_byte_at::@1 to print_char_at [phi:print_byte_at::@1->print_char_at]
  print_char_at_from_b1:
  //SEG104 [53] phi (byte*) print_char_at::at#3 = (byte*) print_char_at::at#2 [phi:print_byte_at::@1->print_char_at#0] -- register_copy 
  //SEG105 [53] phi (byte) print_char_at::ch#3 = (byte) print_char_at::ch#2 [phi:print_byte_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp breturn
  //SEG106 print_byte_at::@return
  breturn:
  //SEG107 [52] return  [ ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    rts
}
//SEG108 print_char_at
print_char_at: {
    .label at = $a
    .label ch = 9
  //SEG109 [54] *((byte*) print_char_at::at#3) ← (byte) print_char_at::ch#3 [ ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (at),y
    jmp breturn
  //SEG110 print_char_at::@return
  breturn:
  //SEG111 [55] return  [ ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    rts
}
//SEG112 fmul8
fmul8: {
  //SEG113 [56] *((const signed byte*) ap#0) ← (signed byte) fmul8::a#0 [ fmul8::b#0 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::b#0 ] ) -- _deref_pbsc1=vbsaa 
    sta ap
  //SEG114 [57] *((const signed byte*) bp#0) ← (signed byte) fmul8::b#0 [ ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) -- _deref_pbsc1=vbsyy 
    tya
    sta bp
  //SEG115 asm { ldaap staA1+1 eor#$ff staA2+1 ldxbp sec A1: ldamulf_sqr1,x A2: sbcmulf_sqr2,x stacp  }
    lda ap
    sta A1+1
    eor #$ff
    sta A2+1
    ldx bp
    sec
  A1:
    lda mulf_sqr1,x
  A2:
    sbc mulf_sqr2,x
    sta cp
  //SEG116 [59] (signed byte) fmul8::return#1 ← *((const signed byte*) cp#0) [ fmul8::return#1 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] ) -- vbsaa=_deref_pbsc1 
    lda cp
    jmp breturn
  //SEG117 fmul8::@return
  breturn:
  //SEG118 [60] return  [ fmul8::return#1 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] )
    rts
}
//SEG119 print_cls
print_cls: {
    .label sc = 2
  //SEG120 [62] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG121 [62] phi (byte*) print_cls::sc#2 = (const byte*) print_screen#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta sc
    lda #>print_screen
    sta sc+1
    jmp b1
  //SEG122 [62] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG123 [62] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG124 print_cls::@1
  b1:
  //SEG125 [63] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:3::print_cls:6 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG126 [64] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:3::print_cls:6 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG127 [65] if((byte*) print_cls::sc#1!=(const byte*) print_screen#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:3::print_cls:6 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_screen+$3e8
    bne b1_from_b1
    lda sc
    cmp #<print_screen+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG128 print_cls::@return
  breturn:
  //SEG129 [66] return  [ ] ( main:3::print_cls:6 [ ] )
    rts
}
  print_hextab: .text "0123456789abcdef"
  vals: .byte -$5f, -$40, 0, $40, $5f
.pc = mulf_sqr1 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }

.pc = mulf_sqr2 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b19
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b8
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda cp
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b8 with b1
Replacing label b3_from_b11 with b3
Replacing label b2_from_b5 with b2
Replacing label b1_from_print_sbyte_at with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction main_from_b19:
Removing instruction bend_from_b19:
Removing instruction b1_from_b8:
Removing instruction b2_from_b5:
Removing instruction b3_from_b11:
Removing instruction b1_from_print_sbyte_at:
Removing instruction b1_from_b4:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b19:
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1_from_main:
Removing instruction print_sbyte_at_from_b1:
Removing instruction b8:
Removing instruction b2_from_b8:
Removing instruction print_sbyte_at_from_b2:
Removing instruction b3_from_b2:
Removing instruction b10:
Removing instruction print_sbyte_at_from_b10:
Removing instruction b11:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b2:
Removing instruction print_char_at_from_b2:
Removing instruction b4:
Removing instruction breturn:
Removing instruction print_char_at_from_print_byte_at:
Removing instruction b1:
Removing instruction print_char_at_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @19
(label) @begin
(label) @end
(signed byte*) ap
(const signed byte*) ap#0 ap = ((signed byte*))(byte/word/signed word/dword/signed dword) 253
(signed byte*) bp
(const signed byte*) bp#0 bp = ((signed byte*))(byte/word/signed word/dword/signed dword) 254
(signed byte*) cp
(const signed byte*) cp#0 cp = ((signed byte*))(byte/word/signed word/dword/signed dword) 255
(signed byte()) fmul8((signed byte) fmul8::a , (signed byte) fmul8::b)
(label) fmul8::@return
(signed byte) fmul8::a
(signed byte) fmul8::a#0 reg byte a 51.5
(signed byte) fmul8::b
(signed byte) fmul8::b#0 reg byte y 51.5
(signed byte) fmul8::return
(signed byte) fmul8::return#0 reg byte a 202.0
(signed byte) fmul8::return#1 reg byte a 34.33333333333333
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@8
(label) main::@return
(byte*) main::at
(byte*) main::at#1 at zp ZP_WORD:2 7.333333333333333
(byte*~) main::at#12 at zp ZP_WORD:2 22.0
(byte*) main::at#2 at#2 zp ZP_WORD:4 2.3157894736842106
(byte*) main::at#3 at zp ZP_WORD:2 27.545454545454547
(byte*) main::at#4 at zp ZP_WORD:2 8.25
(byte*) main::at#6 at zp ZP_WORD:2 213.0
(byte*) main::at_line
(byte*) main::at_line#2 at_line zp ZP_WORD:4 22.0
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:6 16.5
(byte) main::i#2 i zp ZP_BYTE:6 7.444444444444445
(byte) main::j
(byte) main::j#1 j zp ZP_BYTE:7 151.5
(byte) main::j#2 j zp ZP_BYTE:7 30.299999999999997
(byte) main::k
(byte) main::k#1 reg byte x 16.5
(byte) main::k#2 reg byte x 6.6000000000000005
(signed byte) main::r
(signed byte) main::r#0 reg byte a 202.0
(byte*) mulf_sqr1
(const byte*) mulf_sqr1#0 mulf_sqr1 = ((byte*))(word/signed word/dword/signed dword) 8192
(byte*) mulf_sqr2
(const byte*) mulf_sqr2#0 mulf_sqr2 = ((byte*))(word/signed word/dword/signed dword) 8704
(void()) print_byte_at((byte) print_byte_at::b , (byte*) print_byte_at::at)
(byte~) print_byte_at::$0 reg byte a 4.0
(byte~) print_byte_at::$2 reg byte y 2.0
(label) print_byte_at::@1
(label) print_byte_at::@return
(byte*) print_byte_at::at
(byte*) print_byte_at::at#0 at zp ZP_WORD:10 1.0
(byte) print_byte_at::b
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(label) print_char_at::@return
(byte*) print_char_at::at
(byte*) print_char_at::at#0 at zp ZP_WORD:10 4.0
(byte*) print_char_at::at#1 at zp ZP_WORD:10 4.0
(byte*) print_char_at::at#2 at zp ZP_WORD:10 2.0
(byte*) print_char_at::at#3 at zp ZP_WORD:10 8.0
(byte) print_char_at::ch
(byte) print_char_at::ch#1 ch zp ZP_BYTE:9 2.0
(byte) print_char_at::ch#2 ch zp ZP_BYTE:9 4.0
(byte) print_char_at::ch#3 ch zp ZP_BYTE:9 6.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:2 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:2 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(void()) print_sbyte_at((signed byte) print_sbyte_at::b , (byte*) print_sbyte_at::at)
(label) print_sbyte_at::@1
(label) print_sbyte_at::@2
(label) print_sbyte_at::@4
(label) print_sbyte_at::@return
(byte*) print_sbyte_at::at
(byte*) print_sbyte_at::at#0 at zp ZP_WORD:2 22.0
(byte*) print_sbyte_at::at#1 at zp ZP_WORD:2 22.0
(byte*) print_sbyte_at::at#2 at zp ZP_WORD:2 202.0
(byte*) print_sbyte_at::at#3 at zp ZP_WORD:2 21.16666666666666
(signed byte) print_sbyte_at::b
(signed byte) print_sbyte_at::b#0 b zp ZP_BYTE:8 4.0
(signed byte) print_sbyte_at::b#1 b zp ZP_BYTE:8 11.0
(signed byte) print_sbyte_at::b#2 b zp ZP_BYTE:8 11.0
(signed byte) print_sbyte_at::b#3 b zp ZP_BYTE:8 101.0
(signed byte) print_sbyte_at::b#4 b zp ZP_BYTE:8 32.25
(signed byte) print_sbyte_at::b#5 b zp ZP_BYTE:8 0.6666666666666666
(byte*) print_screen
(const byte*) print_screen#0 print_screen = ((byte*))(word/signed word/dword/signed dword) 1024
(signed byte[]) vals
(const signed byte[]) vals#0 vals = { -(byte/signed byte/word/signed word/dword/signed dword) 95, -(byte/signed byte/word/signed word/dword/signed dword) 64, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/signed byte/word/signed word/dword/signed dword) 95 }

reg byte x [ main::k#2 main::k#1 ]
zp ZP_WORD:2 [ main::at#4 main::at#1 print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 main::at#6 main::at#3 main::at#12 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:4 [ main::at_line#2 main::at#2 ]
zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
zp ZP_BYTE:7 [ main::j#2 main::j#1 ]
zp ZP_BYTE:8 [ print_sbyte_at::b#5 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 print_sbyte_at::b#0 ]
zp ZP_BYTE:9 [ print_char_at::ch#3 print_char_at::ch#1 print_char_at::ch#2 ]
zp ZP_WORD:10 [ print_char_at::at#3 print_char_at::at#1 print_char_at::at#2 print_char_at::at#0 print_byte_at::at#0 ]
reg byte a [ fmul8::a#0 ]
reg byte y [ fmul8::b#0 ]
reg byte a [ fmul8::return#0 ]
reg byte a [ main::r#0 ]
reg byte a [ print_byte_at::$0 ]
reg byte y [ print_byte_at::$2 ]
reg byte a [ fmul8::return#1 ]


FINAL ASSEMBLER
Score: 8361

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_screen = $400
  .label ap = $fd
  .label bp = $fe
  .label cp = $ff
  .label mulf_sqr1 = $2000
  .label mulf_sqr2 = $2200
//SEG2 @begin
//SEG3 @19
//SEG4 kickasm(location (const byte*) mulf_sqr1#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((i*i)/256) }     	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }     	.if(i>351) { .byte round(((512-i)*(512-i))/256) }     }  }}
//SEG5 kickasm(location (const byte*) mulf_sqr2#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }     	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }     	.if(i>351) { .byte round(((i-511)*(i-511))/256) }       }  }}
//SEG6 [3] call main  [ ] ( )
//SEG7 [5] phi from @19 to main [phi:@19->main]
  jsr main
//SEG8 [4] phi from @19 to @end [phi:@19->@end]
//SEG9 @end
//SEG10 main
main: {
    .label at = 2
    .label at_2 = 4
    .label j = 7
    .label i = 6
    .label at_line = 4
  //SEG11 [6] call print_cls  [ ] ( main:3 [ ] )
  //SEG12 [61] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG13 [7] phi from main to main::@1 [phi:main->main::@1]
  //SEG14 [7] phi (byte*) main::at#4 = ((byte*))(word/signed word/dword/signed dword) 1024+(byte/signed byte/word/signed word/dword/signed dword) 4 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400+4
    sta at
    lda #>$400+4
    sta at+1
  //SEG15 [7] phi (byte) main::k#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG16 [7] phi from main::@8 to main::@1 [phi:main::@8->main::@1]
  //SEG17 [7] phi (byte*) main::at#4 = (byte*) main::at#1 [phi:main::@8->main::@1#0] -- register_copy 
  //SEG18 [7] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@8->main::@1#1] -- register_copy 
  //SEG19 main::@1
  b1:
  //SEG20 [8] (signed byte) print_sbyte_at::b#1 ← *((const signed byte[]) vals#0 + (byte) main::k#2) [ main::k#2 main::at#4 print_sbyte_at::b#1 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 ] ) -- vbsz1=pbsc1_derefidx_vbuxx 
    lda vals,x
    sta print_sbyte_at.b
  //SEG21 [9] (byte*) print_sbyte_at::at#0 ← (byte*) main::at#4 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] ( main:3 [ main::k#2 main::at#4 print_sbyte_at::b#1 print_sbyte_at::at#0 ] )
    // (byte*) print_sbyte_at::at#0 = (byte*) main::at#4  // register copy zp ZP_WORD:2
  //SEG22 [10] call print_sbyte_at  [ main::k#2 main::at#4 ] ( main:3 [ main::k#2 main::at#4 ] )
  //SEG23 [35] phi from main::@1 to print_sbyte_at [phi:main::@1->print_sbyte_at]
  //SEG24 [35] phi (byte*) print_sbyte_at::at#3 = (byte*) print_sbyte_at::at#0 [phi:main::@1->print_sbyte_at#0] -- register_copy 
  //SEG25 [35] phi (signed byte) print_sbyte_at::b#4 = (signed byte) print_sbyte_at::b#1 [phi:main::@1->print_sbyte_at#1] -- register_copy 
    jsr print_sbyte_at
  //SEG26 main::@8
  //SEG27 [11] (byte*) main::at#1 ← (byte*) main::at#4 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::k#2 main::at#1 ] ( main:3 [ main::k#2 main::at#1 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda at
    clc
    adc #4
    sta at
    bcc !+
    inc at+1
  !:
  //SEG28 [12] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 main::at#1 ] ( main:3 [ main::k#1 main::at#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG29 [13] if((byte) main::k#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@1 [ main::k#1 main::at#1 ] ( main:3 [ main::k#1 main::at#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b1
  //SEG30 [14] phi from main::@8 to main::@2 [phi:main::@8->main::@2]
  //SEG31 [14] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@8->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG32 [14] phi (byte*) main::at_line#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main::@8->main::@2#1] -- pbuz1=pbuc1 
    lda #<$400
    sta at_line
    lda #>$400
    sta at_line+1
  //SEG33 [14] phi from main::@5 to main::@2 [phi:main::@5->main::@2]
  //SEG34 [14] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@2#0] -- register_copy 
  //SEG35 [14] phi (byte*) main::at_line#2 = (byte*) main::at#2 [phi:main::@5->main::@2#1] -- register_copy 
  //SEG36 main::@2
  b2:
  //SEG37 [15] (byte*) main::at#2 ← (byte*) main::at_line#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ main::i#2 main::at#2 ] ( main:3 [ main::i#2 main::at#2 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda at_2
    clc
    adc #$28
    sta at_2
    bcc !+
    inc at_2+1
  !:
  //SEG38 [16] (signed byte) print_sbyte_at::b#2 ← *((const signed byte[]) vals#0 + (byte) main::i#2) [ main::i#2 main::at#2 print_sbyte_at::b#2 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda vals,y
    sta print_sbyte_at.b
  //SEG39 [17] (byte*) print_sbyte_at::at#1 ← (byte*) main::at#2 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ( main:3 [ main::i#2 main::at#2 print_sbyte_at::b#2 print_sbyte_at::at#1 ] ) -- pbuz1=pbuz2 
    lda at_2
    sta print_sbyte_at.at
    lda at_2+1
    sta print_sbyte_at.at+1
  //SEG40 [18] call print_sbyte_at  [ main::i#2 main::at#2 ] ( main:3 [ main::i#2 main::at#2 ] )
  //SEG41 [35] phi from main::@2 to print_sbyte_at [phi:main::@2->print_sbyte_at]
  //SEG42 [35] phi (byte*) print_sbyte_at::at#3 = (byte*) print_sbyte_at::at#1 [phi:main::@2->print_sbyte_at#0] -- register_copy 
  //SEG43 [35] phi (signed byte) print_sbyte_at::b#4 = (signed byte) print_sbyte_at::b#2 [phi:main::@2->print_sbyte_at#1] -- register_copy 
    jsr print_sbyte_at
  //SEG44 [19] (byte*~) main::at#12 ← (byte*) main::at#2 [ main::i#2 main::at#2 main::at#12 ] ( main:3 [ main::i#2 main::at#2 main::at#12 ] ) -- pbuz1=pbuz2 
    lda at_2
    sta at
    lda at_2+1
    sta at+1
  //SEG45 [20] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG46 [20] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG47 [20] phi (byte*) main::at#6 = (byte*~) main::at#12 [phi:main::@2->main::@3#1] -- register_copy 
  //SEG48 [20] phi from main::@11 to main::@3 [phi:main::@11->main::@3]
  //SEG49 [20] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@11->main::@3#0] -- register_copy 
  //SEG50 [20] phi (byte*) main::at#6 = (byte*) main::at#3 [phi:main::@11->main::@3#1] -- register_copy 
  //SEG51 main::@3
  b3:
  //SEG52 [21] (byte*) main::at#3 ← (byte*) main::at#6 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda at
    clc
    adc #4
    sta at
    bcc !+
    inc at+1
  !:
  //SEG53 [22] (signed byte) fmul8::a#0 ← *((const signed byte[]) vals#0 + (byte) main::i#2) [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 ] ) -- vbsaa=pbsc1_derefidx_vbuz1 
    ldy i
    lda vals,y
  //SEG54 [23] (signed byte) fmul8::b#0 ← *((const signed byte[]) vals#0 + (byte) main::j#2) [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 fmul8::b#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::a#0 fmul8::b#0 ] ) -- vbsyy=pbsc1_derefidx_vbuz1 
    ldx j
    ldy vals,x
  //SEG55 [24] call fmul8  [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] )
    jsr fmul8
  //SEG56 [25] (signed byte) fmul8::return#0 ← (signed byte) fmul8::return#1 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#0 ] )
    // (signed byte) fmul8::return#0 = (signed byte) fmul8::return#1  // register copy reg byte a
  //SEG57 main::@10
  //SEG58 [26] (signed byte) main::r#0 ← (signed byte) fmul8::return#0 [ main::i#2 main::at#2 main::j#2 main::at#3 main::r#0 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 main::r#0 ] )
    // (signed byte) main::r#0 = (signed byte) fmul8::return#0  // register copy reg byte a
  //SEG59 [27] (signed byte) print_sbyte_at::b#3 ← (signed byte) main::r#0 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 ] ) -- vbsz1=vbsaa 
    sta print_sbyte_at.b
  //SEG60 [28] (byte*) print_sbyte_at::at#2 ← (byte*) main::at#3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#3 print_sbyte_at::at#2 ] )
    // (byte*) print_sbyte_at::at#2 = (byte*) main::at#3  // register copy zp ZP_WORD:2
  //SEG61 [29] call print_sbyte_at  [ main::i#2 main::at#2 main::j#2 main::at#3 ] ( main:3 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  //SEG62 [35] phi from main::@10 to print_sbyte_at [phi:main::@10->print_sbyte_at]
  //SEG63 [35] phi (byte*) print_sbyte_at::at#3 = (byte*) print_sbyte_at::at#2 [phi:main::@10->print_sbyte_at#0] -- register_copy 
  //SEG64 [35] phi (signed byte) print_sbyte_at::b#4 = (signed byte) print_sbyte_at::b#3 [phi:main::@10->print_sbyte_at#1] -- register_copy 
    jsr print_sbyte_at
  //SEG65 main::@11
  //SEG66 [30] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ( main:3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ) -- vbuz1=_inc_vbuz1 
    inc j
  //SEG67 [31] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ( main:3 [ main::i#2 main::at#2 main::at#3 main::j#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #5
    bne b3
  //SEG68 main::@5
  //SEG69 [32] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::at#2 main::i#1 ] ( main:3 [ main::at#2 main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG70 [33] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@2 [ main::at#2 main::i#1 ] ( main:3 [ main::at#2 main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #5
    bne b2
  //SEG71 main::@return
  //SEG72 [34] return  [ ] ( main:3 [ ] )
    rts
}
//SEG73 print_sbyte_at
print_sbyte_at: {
    .label b = 8
    .label at = 2
  //SEG74 [36] if((signed byte) print_sbyte_at::b#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte_at::@1 [ print_sbyte_at::b#4 print_sbyte_at::at#3 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1
  //SEG75 print_sbyte_at::@2
  //SEG76 [37] (byte*) print_char_at::at#0 ← (byte*) print_sbyte_at::at#3 [ print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 print_char_at::at#0 ] ) -- pbuz1=pbuz2 
    lda at
    sta print_char_at.at
    lda at+1
    sta print_char_at.at+1
  //SEG77 [38] call print_char_at  [ print_sbyte_at::b#4 print_sbyte_at::at#3 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] )
  //SEG78 [53] phi from print_sbyte_at::@2 to print_char_at [phi:print_sbyte_at::@2->print_char_at]
  //SEG79 [53] phi (byte*) print_char_at::at#3 = (byte*) print_char_at::at#0 [phi:print_sbyte_at::@2->print_char_at#0] -- register_copy 
  //SEG80 [53] phi (byte) print_char_at::ch#3 = (byte) '-' [phi:print_sbyte_at::@2->print_char_at#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char_at.ch
    jsr print_char_at
  //SEG81 print_sbyte_at::@4
  //SEG82 [39] (signed byte) print_sbyte_at::b#0 ← - (signed byte) print_sbyte_at::b#4 [ print_sbyte_at::at#3 print_sbyte_at::b#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::at#3 print_sbyte_at::b#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::at#3 print_sbyte_at::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG83 [40] phi from print_sbyte_at print_sbyte_at::@4 to print_sbyte_at::@1 [phi:print_sbyte_at/print_sbyte_at::@4->print_sbyte_at::@1]
  //SEG84 [40] phi (signed byte) print_sbyte_at::b#5 = (signed byte) print_sbyte_at::b#4 [phi:print_sbyte_at/print_sbyte_at::@4->print_sbyte_at::@1#0] -- register_copy 
  //SEG85 print_sbyte_at::@1
  b1:
  //SEG86 [41] (byte*) print_byte_at::at#0 ← (byte*) print_sbyte_at::at#3 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_sbyte_at::b#5 print_byte_at::at#0 ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] ) -- pbuz1=pbuz2_plus_1 
    lda at
    clc
    adc #1
    sta print_byte_at.at
    lda at+1
    adc #0
    sta print_byte_at.at+1
  //SEG87 [42] call print_byte_at  [ ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    jsr print_byte_at
  //SEG88 print_sbyte_at::@return
  //SEG89 [43] return  [ ] ( main:3::print_sbyte_at:10 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    rts
}
//SEG90 print_byte_at
print_byte_at: {
    .label at = $a
  //SEG91 [44] (byte~) print_byte_at::$0 ← (byte)(signed byte) print_sbyte_at::b#5 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_byte_at::$0 ] ) -- vbuaa=vbuz1_ror_4 
    lda print_sbyte_at.b
    lsr
    lsr
    lsr
    lsr
  //SEG92 [45] (byte) print_char_at::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$0) [ print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 ] ) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    sta print_char_at.ch
  //SEG93 [46] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#0 [ print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 print_char_at::ch#1 print_char_at::at#1 ] )
    // (byte*) print_char_at::at#1 = (byte*) print_byte_at::at#0  // register copy zp ZP_WORD:10
  //SEG94 [47] call print_char_at  [ print_sbyte_at::b#5 print_byte_at::at#0 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] )
  //SEG95 [53] phi from print_byte_at to print_char_at [phi:print_byte_at->print_char_at]
  //SEG96 [53] phi (byte*) print_char_at::at#3 = (byte*) print_char_at::at#1 [phi:print_byte_at->print_char_at#0] -- register_copy 
  //SEG97 [53] phi (byte) print_char_at::ch#3 = (byte) print_char_at::ch#1 [phi:print_byte_at->print_char_at#1] -- register_copy 
    jsr print_char_at
  //SEG98 print_byte_at::@1
  //SEG99 [48] (byte~) print_byte_at::$2 ← (byte)(signed byte) print_sbyte_at::b#5 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_byte_at::at#0 print_byte_at::$2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::at#0 print_byte_at::$2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::at#0 print_byte_at::$2 ] ) -- vbuyy=vbuz1_band_vbuc1 
    lda #$f
    and print_sbyte_at.b
    tay
  //SEG100 [49] (byte*) print_char_at::at#2 ← (byte*) print_byte_at::at#0 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ print_byte_at::$2 print_char_at::at#2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_byte_at::$2 print_char_at::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_byte_at::$2 print_char_at::at#2 ] ) -- pbuz1=pbuz1_plus_1 
    inc print_char_at.at
    bne !+
    inc print_char_at.at+1
  !:
  //SEG101 [50] (byte) print_char_at::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$2) [ print_char_at::at#2 print_char_at::ch#2 ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 print_char_at::at#2 print_char_at::ch#2 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 print_char_at::at#2 print_char_at::ch#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 print_char_at::at#2 print_char_at::ch#2 ] ) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda print_hextab,y
    sta print_char_at.ch
  //SEG102 [51] call print_char_at  [ ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
  //SEG103 [53] phi from print_byte_at::@1 to print_char_at [phi:print_byte_at::@1->print_char_at]
  //SEG104 [53] phi (byte*) print_char_at::at#3 = (byte*) print_char_at::at#2 [phi:print_byte_at::@1->print_char_at#0] -- register_copy 
  //SEG105 [53] phi (byte) print_char_at::ch#3 = (byte) print_char_at::ch#2 [phi:print_byte_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
  //SEG106 print_byte_at::@return
  //SEG107 [52] return  [ ] ( main:3::print_sbyte_at:10::print_byte_at:42 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    rts
}
//SEG108 print_char_at
print_char_at: {
    .label at = $a
    .label ch = 9
  //SEG109 [54] *((byte*) print_char_at::at#3) ← (byte) print_char_at::ch#3 [ ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (at),y
  //SEG110 print_char_at::@return
  //SEG111 [55] return  [ ] ( main:3::print_sbyte_at:10::print_char_at:38 [ main::k#2 main::at#4 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:18::print_char_at:38 [ main::i#2 main::at#2 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:29::print_char_at:38 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#4 print_sbyte_at::at#3 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:47 [ main::k#2 main::at#4 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:47 [ main::i#2 main::at#2 main::j#2 main::at#3 print_sbyte_at::b#5 print_byte_at::at#0 ] main:3::print_sbyte_at:10::print_byte_at:42::print_char_at:51 [ main::k#2 main::at#4 ] main:3::print_sbyte_at:18::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 ] main:3::print_sbyte_at:29::print_byte_at:42::print_char_at:51 [ main::i#2 main::at#2 main::j#2 main::at#3 ] )
    rts
}
//SEG112 fmul8
fmul8: {
  //SEG113 [56] *((const signed byte*) ap#0) ← (signed byte) fmul8::a#0 [ fmul8::b#0 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::b#0 ] ) -- _deref_pbsc1=vbsaa 
    sta ap
  //SEG114 [57] *((const signed byte*) bp#0) ← (signed byte) fmul8::b#0 [ ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 ] ) -- _deref_pbsc1=vbsyy 
    tya
    sta bp
  //SEG115 asm { ldaap staA1+1 eor#$ff staA2+1 ldxbp sec A1: ldamulf_sqr1,x A2: sbcmulf_sqr2,x stacp  }
    lda ap
    sta A1+1
    eor #$ff
    sta A2+1
    ldx bp
    sec
  A1:
    lda mulf_sqr1,x
  A2:
    sbc mulf_sqr2,x
    sta cp
  //SEG116 [59] (signed byte) fmul8::return#1 ← *((const signed byte*) cp#0) [ fmul8::return#1 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] ) -- vbsaa=_deref_pbsc1 
  //SEG117 fmul8::@return
  //SEG118 [60] return  [ fmul8::return#1 ] ( main:3::fmul8:24 [ main::i#2 main::at#2 main::j#2 main::at#3 fmul8::return#1 ] )
    rts
}
//SEG119 print_cls
print_cls: {
    .label sc = 2
  //SEG120 [62] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG121 [62] phi (byte*) print_cls::sc#2 = (const byte*) print_screen#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta sc
    lda #>print_screen
    sta sc+1
  //SEG122 [62] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG123 [62] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG124 print_cls::@1
  b1:
  //SEG125 [63] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:3::print_cls:6 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG126 [64] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:3::print_cls:6 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG127 [65] if((byte*) print_cls::sc#1!=(const byte*) print_screen#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:3::print_cls:6 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_screen+$3e8
    bne b1
    lda sc
    cmp #<print_screen+$3e8
    bne b1
  //SEG128 print_cls::@return
  //SEG129 [66] return  [ ] ( main:3::print_cls:6 [ ] )
    rts
}
  print_hextab: .text "0123456789abcdef"
  vals: .byte -$5f, -$40, 0, $40, $5f
.pc = mulf_sqr1 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }

.pc = mulf_sqr2 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }


