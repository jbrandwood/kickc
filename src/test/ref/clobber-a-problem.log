Resolved forward reference irq to __interrupt(hardware_clobber) void irq()
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  *KERNEL_IRQ = &irq
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

__interrupt(hardware_clobber) void irq()
irq: scope:[irq]  from
  *BORDER_COLOR = DARK_GREY
  irq_raster_next = irq_raster_next + $15
  irq::raster_next#0 = irq_raster_next
  irq::$0 = irq::raster_next#0 & 7
  irq::$1 = irq::$0 == 0
  irq::$2 = ! irq::$1
  if(irq::$2) goto irq::@1
  to:irq::@2
irq::@1: scope:[irq]  from irq irq::@2
  irq::raster_next#2 = phi( irq/irq::raster_next#0, irq::@2/irq::raster_next#1 )
  *RASTER = irq::raster_next#2
  *BORDER_COLOR = BLACK
  to:irq::@return
irq::@2: scope:[irq]  from irq
  irq::raster_next#3 = phi( irq/irq::raster_next#0 )
  irq::raster_next#1 = irq::raster_next#3 - 1
  to:irq::@1
irq::@return: scope:[irq]  from irq::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  irq_raster_next = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte BLACK = 0
const byte* BORDER_COLOR = (byte*)$d020
const byte DARK_GREY = $b
const nomodify void()** KERNEL_IRQ = (void()**)$314
const byte* RASTER = (byte*)$d012
void __start()
__interrupt(hardware_clobber) void irq()
number~ irq::$0
bool~ irq::$1
bool~ irq::$2
byte irq::raster_next
byte irq::raster_next#0
byte irq::raster_next#1
byte irq::raster_next#2
byte irq::raster_next#3
volatile byte irq_raster_next loadstore
void main()

Adding number conversion cast (unumber) $15 in irq_raster_next = irq_raster_next + $15
Adding number conversion cast (unumber) 7 in irq::$0 = irq::raster_next#0 & 7
Adding number conversion cast (unumber) irq::$0 in irq::$0 = irq::raster_next#0 & (unumber)7
Adding number conversion cast (unumber) 0 in irq::$1 = irq::$0 == 0
Adding number conversion cast (unumber) 1 in irq::raster_next#1 = irq::raster_next#3 - 1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53266
Simplifying constant integer cast $15
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in irq::$0 = irq::raster_next#0 & 7
Inversing boolean not [7] irq::$2 = irq::$0 != 0 from [6] irq::$1 = irq::$0 == 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias irq::raster_next#0 = irq::raster_next#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition irq::$2 [7] if(irq::$0!=0) goto irq::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Added new block during phi lifting irq::@3(between irq and irq::@1)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
CALL GRAPH
Calls in [__start] to main:3 

Created 1 initial phi equivalence classes
Coalesced [12] irq::raster_next#5 = irq::raster_next#1
Coalesced [17] irq::raster_next#4 = irq::raster_next#0
Coalesced down to 1 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label irq::@3
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] irq_raster_next = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

__interrupt(hardware_clobber) void irq()
irq: scope:[irq]  from
  [5] *BORDER_COLOR = DARK_GREY
  [6] irq_raster_next = irq_raster_next + $15
  [7] irq::raster_next#0 = irq_raster_next
  [8] irq::$0 = irq::raster_next#0 & 7
  [9] if(irq::$0!=0) goto irq::@1
  to:irq::@2
irq::@2: scope:[irq]  from irq
  [10] irq::raster_next#1 = irq::raster_next#0 - 1
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@2
  [11] irq::raster_next#2 = phi( irq/irq::raster_next#0, irq::@2/irq::raster_next#1 )
  [12] *RASTER = irq::raster_next#2
  [13] *BORDER_COLOR = BLACK
  to:irq::@return
irq::@return: scope:[irq]  from irq::@1
  [14] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [15] *KERNEL_IRQ = &irq
  to:main::@return
main::@return: scope:[main]  from main
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
__interrupt(hardware_clobber) void irq()
byte~ irq::$0 4.0
byte irq::raster_next
byte irq::raster_next#0 2.6666666666666665
byte irq::raster_next#1 4.0
byte irq::raster_next#2 6.0
volatile byte irq_raster_next loadstore 4.0
void main()

Initial phi equivalence classes
[ irq::raster_next#2 irq::raster_next#0 irq::raster_next#1 ]
Added variable irq_raster_next to live range equivalence class [ irq_raster_next ]
Added variable irq::$0 to live range equivalence class [ irq::$0 ]
Complete equivalence classes
[ irq::raster_next#2 irq::raster_next#0 irq::raster_next#1 ]
[ irq_raster_next ]
[ irq::$0 ]
Allocated zp[1]:2 [ irq::raster_next#2 irq::raster_next#0 irq::raster_next#1 ]
Allocated zp[1]:3 [ irq_raster_next ]
Allocated zp[1]:4 [ irq::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] irq_raster_next = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *BORDER_COLOR = DARK_GREY [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Statement [6] irq_raster_next = irq_raster_next + $15 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [13] *BORDER_COLOR = BLACK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [14] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [15] *KERNEL_IRQ = &irq [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ irq::raster_next#2 irq::raster_next#0 irq::raster_next#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ irq_raster_next ] : zp[1]:3 , 
Potential registers zp[1]:4 [ irq::$0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [irq] 12.67: zp[1]:2 [ irq::raster_next#2 irq::raster_next#0 irq::raster_next#1 ] 4: zp[1]:4 [ irq::$0 ] 
Uplift Scope [] 4: zp[1]:3 [ irq_raster_next ] 
Uplift Scope [main] 
Uplift Scope [__start] 

Uplifting [irq] best 360 combination reg byte x [ irq::raster_next#2 irq::raster_next#0 irq::raster_next#1 ] reg byte a [ irq::$0 ] 
Uplifting [] best 360 combination zp[1]:3 [ irq_raster_next ] 
Uplifting [main] best 360 combination 
Uplifting [__start] best 360 combination 
Attempting to uplift remaining variables inzp[1]:3 [ irq_raster_next ]
Uplifting [] best 360 combination zp[1]:3 [ irq_raster_next ] 
Allocated (was zp[1]:3) zp[1]:2 [ irq_raster_next ]
Interrupt procedure irq clobbers AXcnzP

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="clobber-a-problem.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const DARK_GREY = $b
  .const BLACK = 0
  .label KERNEL_IRQ = $314
  .label BORDER_COLOR = $d020
  .label RASTER = $d012
  .label irq_raster_next = 2
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] irq_raster_next = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_raster_next
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // irq
irq: {
    // interrupt(isr_hardware_clobber_entry) -- isr_hardware_all_entry 
    sta rega+1
    stx regx+1
    // [5] *BORDER_COLOR = DARK_GREY -- _deref_pbuc1=vbuc2 
    lda #DARK_GREY
    sta BORDER_COLOR
    // [6] irq_raster_next = irq_raster_next + $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$15]
    stx.z irq_raster_next
    // [7] irq::raster_next#0 = irq_raster_next -- vbuxx=vbuz1 
    // Setup next interrupt
    ldx.z irq_raster_next
    // [8] irq::$0 = irq::raster_next#0 & 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
    // [9] if(irq::$0!=0) goto irq::@1 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b1_from_irq
    jmp __b2
    // irq::@2
  __b2:
    // [10] irq::raster_next#1 = irq::raster_next#0 - 1 -- vbuxx=vbuxx_minus_1 
    dex
    // [11] phi from irq irq::@2 to irq::@1 [phi:irq/irq::@2->irq::@1]
  __b1_from_irq:
  __b1_from___b2:
    // [11] phi irq::raster_next#2 = irq::raster_next#0 [phi:irq/irq::@2->irq::@1#0] -- register_copy 
    jmp __b1
    // irq::@1
  __b1:
    // [12] *RASTER = irq::raster_next#2 -- _deref_pbuc1=vbuxx 
    stx RASTER
    // [13] *BORDER_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDER_COLOR
    jmp __breturn
    // irq::@return
  __breturn:
    // [14] return 
    // interrupt(isr_hardware_clobber_exit) -- isr_hardware_all_exit 
  rega:
    lda #0
  regx:
    ldx #0
    rti
}
  // main
main: {
    // [15] *KERNEL_IRQ = &irq -- _deref_qprc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    jmp __breturn
    // main::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldx.z irq_raster_next
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from_irq with __b1
Removing instruction __b1_from___init1:
Removing instruction __b1_from_irq:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte BLACK = 0
const byte* BORDER_COLOR = (byte*) 53280
const byte DARK_GREY = $b
const nomodify void()** KERNEL_IRQ = (void()**) 788
const byte* RASTER = (byte*) 53266
void __start()
__interrupt(hardware_clobber) void irq()
byte~ irq::$0 reg byte a 4.0
byte irq::raster_next
byte irq::raster_next#0 reg byte x 2.6666666666666665
byte irq::raster_next#1 reg byte x 4.0
byte irq::raster_next#2 reg byte x 6.0
volatile byte irq_raster_next loadstore zp[1]:2 4.0
void main()

reg byte x [ irq::raster_next#2 irq::raster_next#0 irq::raster_next#1 ]
zp[1]:2 [ irq_raster_next ]
reg byte a [ irq::$0 ]


FINAL ASSEMBLER
Score: 249

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="clobber-a-problem.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const DARK_GREY = $b
  .const BLACK = 0
  .label KERNEL_IRQ = $314
  .label BORDER_COLOR = $d020
  .label RASTER = $d012
  .label irq_raster_next = 2
.segment Code
  // __start
__start: {
    // __start::__init1
    // irq_raster_next = 0
    // [1] irq_raster_next = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_raster_next
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main 
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // irq
irq: {
    // interrupt(isr_hardware_clobber_entry) -- isr_hardware_all_entry 
    sta rega+1
    stx regx+1
    // *BORDER_COLOR = DARK_GREY
    // [5] *BORDER_COLOR = DARK_GREY -- _deref_pbuc1=vbuc2 
    lda #DARK_GREY
    sta BORDER_COLOR
    // irq_raster_next += 21
    // [6] irq_raster_next = irq_raster_next + $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$15]
    stx.z irq_raster_next
    // raster_next = irq_raster_next
    // [7] irq::raster_next#0 = irq_raster_next -- vbuxx=vbuz1 
  // Setup next interrupt
    // raster_next&7
    // [8] irq::$0 = irq::raster_next#0 & 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
    // if((raster_next&7)==0)
    // [9] if(irq::$0!=0) goto irq::@1 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b1
    // irq::@2
    // raster_next -=1
    // [10] irq::raster_next#1 = irq::raster_next#0 - 1 -- vbuxx=vbuxx_minus_1 
    dex
    // [11] phi from irq irq::@2 to irq::@1 [phi:irq/irq::@2->irq::@1]
    // [11] phi irq::raster_next#2 = irq::raster_next#0 [phi:irq/irq::@2->irq::@1#0] -- register_copy 
    // irq::@1
  __b1:
    // *RASTER = raster_next
    // [12] *RASTER = irq::raster_next#2 -- _deref_pbuc1=vbuxx 
    stx RASTER
    // *BORDER_COLOR = BLACK
    // [13] *BORDER_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDER_COLOR
    // irq::@return
    // }
    // [14] return 
    // interrupt(isr_hardware_clobber_exit) -- isr_hardware_all_exit 
  rega:
    lda #0
  regx:
    ldx #0
    rti
}
  // main
main: {
    // *KERNEL_IRQ = &irq
    // [15] *KERNEL_IRQ = &irq -- _deref_qprc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    // main::@return
    // }
    // [16] return 
    rts
}
  // File Data

