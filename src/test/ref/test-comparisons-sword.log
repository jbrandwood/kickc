Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Fixing pointer array-indexing *((const signed word*) swords + (byte) main::i)
Fixing pointer array-indexing *((const signed word*) swords + (byte) main::j)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) strlen::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_lines::str)
Warning! Adding boolean cast to non-boolean condition (byte) print_str_lines::ch
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_at::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte) print_str_lines::ch
Identified constant variable (byte*) HEAP_TOP
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) print_sword::@4
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) @38
Culled Empty Block (label) @39
Culled Empty Block (label) @40
Culled Empty Block (label) @41
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@14
Culled Empty Block (label) @42
Culled Empty Block (label) compare::@6
Culled Empty Block (label) compare::@7
Culled Empty Block (label) compare::@19
Culled Empty Block (label) compare::@8
Culled Empty Block (label) compare::@21
Culled Empty Block (label) compare::@9
Culled Empty Block (label) compare::@23
Culled Empty Block (label) compare::@10
Culled Empty Block (label) compare::@25
Culled Empty Block (label) compare::@27

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@17

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@4/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#2
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@5/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@5/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$4 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#5 ← phi( memset::@4/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@17: scope:[]  from @begin
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@43

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from compare::@35
  (byte*) print_char_cursor#69 ← phi( compare::@35/(byte*) print_char_cursor#23 )
  (byte*) print_str::str#4 ← phi( compare::@35/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#56 ← phi( print_str/(byte*) print_char_cursor#69 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#4 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← (number) 0 != *((byte*) print_str::str#2)
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#29 ← phi( print_str::@1/(byte*) print_char_cursor#56 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  *((byte*) print_char_cursor#29) ← *((byte*) print_str::str#3)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#29
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#30 ← phi( print_str::@1/(byte*) print_char_cursor#56 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#30
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@5
  (byte*) print_char_cursor#57 ← phi( main::@5/(byte*) print_char_cursor#65 )
  (byte*) print_line_cursor#17 ← phi( main::@5/(byte*) print_line_cursor#19 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#31 ← phi( print_ln/(byte*) print_char_cursor#57 print_ln::@1/(byte*) print_char_cursor#31 )
  (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#31
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#10 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#10
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#32 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#11 ← phi( print_ln::@2/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#32
  return 
  to:@return

(void()) print_sword((signed word) print_sword::w)
print_sword: scope:[print_sword]  from compare::@11 compare::@36
  (byte*) print_char_cursor#70 ← phi( compare::@11/(byte*) print_char_cursor#67 compare::@36/(byte*) print_char_cursor#24 )
  (signed word) print_sword::w#3 ← phi( compare::@11/(signed word) print_sword::w#1 compare::@36/(signed word) print_sword::w#2 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (number) 0
  if((bool~) print_sword::$0) goto print_sword::@1
  to:print_sword::@3
print_sword::@1: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#6 ← phi( print_sword/(signed word) print_sword::w#3 )
  (byte*) print_char_cursor#58 ← phi( print_sword/(byte*) print_char_cursor#70 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@5
print_sword::@5: scope:[print_sword]  from print_sword::@1
  (signed word) print_sword::w#4 ← phi( print_sword::@1/(signed word) print_sword::w#6 )
  (byte*) print_char_cursor#33 ← phi( print_sword::@1/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#33
  (signed word~) print_sword::$5 ← - (signed word) print_sword::w#4
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$5
  to:print_sword::@2
print_sword::@3: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#8 ← phi( print_sword/(signed word) print_sword::w#3 )
  (byte*) print_char_cursor#59 ← phi( print_sword/(byte*) print_char_cursor#70 )
  (byte) print_char::ch#1 ← (byte) ' '
  call print_char 
  to:print_sword::@6
print_sword::@6: scope:[print_sword]  from print_sword::@3
  (signed word) print_sword::w#7 ← phi( print_sword::@3/(signed word) print_sword::w#8 )
  (byte*) print_char_cursor#34 ← phi( print_sword::@3/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#34
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword::@5 print_sword::@6
  (byte*) print_char_cursor#60 ← phi( print_sword::@5/(byte*) print_char_cursor#5 print_sword::@6/(byte*) print_char_cursor#6 )
  (signed word) print_sword::w#5 ← phi( print_sword::@5/(signed word) print_sword::w#0 print_sword::@6/(signed word) print_sword::w#7 )
  (word~) print_sword::$1 ← ((word)) (signed word) print_sword::w#5
  (word) print_word::w#0 ← (word~) print_sword::$1
  call print_word 
  to:print_sword::@7
print_sword::@7: scope:[print_sword]  from print_sword::@2
  (byte*) print_char_cursor#35 ← phi( print_sword::@2/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#35
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@7
  (byte*) print_char_cursor#36 ← phi( print_sword::@7/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#36
  return 
  to:@return

(void()) print_word((word) print_word::w)
print_word: scope:[print_word]  from print_sword::@2
  (byte*) print_char_cursor#61 ← phi( print_sword::@2/(byte*) print_char_cursor#60 )
  (word) print_word::w#1 ← phi( print_sword::@2/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#1
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#2 ← phi( print_word/(word) print_word::w#1 )
  (byte*) print_char_cursor#37 ← phi( print_word/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#37
  (byte~) print_word::$2 ← < (word) print_word::w#2
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#38 ← phi( print_word::@1/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#38
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#39 ← phi( print_word::@2/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#39
  return 
  to:@return

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) print_char_cursor#62 ← phi( print_word/(byte*) print_char_cursor#61 print_word::@1/(byte*) print_char_cursor#9 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
  (byte) print_char::ch#2 ← *((const byte*) print_hextab + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#40 ← phi( print_byte/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#40
  (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
  (byte) print_char::ch#3 ← *((const byte*) print_hextab + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#41 ← phi( print_byte::@1/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#41
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#42 ← phi( print_byte::@2/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#42
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from compare::@37 print_byte print_byte::@1 print_sword::@1 print_sword::@3
  (byte*) print_char_cursor#43 ← phi( compare::@37/(byte*) print_char_cursor#25 print_byte/(byte*) print_char_cursor#62 print_byte::@1/(byte*) print_char_cursor#12 print_sword::@1/(byte*) print_char_cursor#58 print_sword::@3/(byte*) print_char_cursor#59 )
  (byte) print_char::ch#5 ← phi( compare::@37/(byte) print_char::ch#4 print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sword::@1/(byte) print_char::ch#0 print_sword::@3/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#43) ← (byte) print_char::ch#5
  (byte*) print_char_cursor#15 ← ++ (byte*) print_char_cursor#43
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#44 ← phi( print_char/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#44
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#2
  (byte*) print_char_cursor#17 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#45 ← phi( print_cls::@1/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#12 ← phi( print_cls::@1/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#45
  return 
  to:@return

(void()) main()
main: scope:[main]  from @43
  (byte*) print_char_cursor#63 ← phi( @43/(byte*) print_char_cursor#68 )
  (byte*) print_line_cursor#18 ← phi( @43/(byte*) print_line_cursor#21 )
  (byte*) print_screen#3 ← phi( @43/(byte*) print_screen#4 )
  call print_cls 
  to:main::@15
main::@15: scope:[main]  from main
  (byte*) print_char_cursor#46 ← phi( main/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#46
  (byte) main::s#0 ← (byte) 0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@7
  (byte*) print_line_cursor#28 ← phi( main::@15/(byte*) print_line_cursor#5 main::@7/(byte*) print_line_cursor#23 )
  (byte) main::s#7 ← phi( main::@15/(byte) main::s#0 main::@7/(byte) main::s#10 )
  (byte*) print_char_cursor#81 ← phi( main::@15/(byte*) print_char_cursor#19 main::@7/(byte*) print_char_cursor#73 )
  (byte) main::i#2 ← phi( main::@15/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte~) main::$8 ← (byte) main::i#2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) main::w1#0 ← *((const signed word*) swords + (byte~) main::$8)
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  (byte) main::i#10 ← phi( main::@1/(byte) main::i#2 main::@6/(byte) main::i#4 )
  (byte*) print_line_cursor#26 ← phi( main::@1/(byte*) print_line_cursor#28 main::@6/(byte*) print_line_cursor#25 )
  (byte) main::s#5 ← phi( main::@1/(byte) main::s#7 main::@6/(byte) main::s#8 )
  (byte*) print_char_cursor#71 ← phi( main::@1/(byte*) print_char_cursor#81 main::@6/(byte*) print_char_cursor#82 )
  (signed word) main::w1#2 ← phi( main::@1/(signed word) main::w1#0 main::@6/(signed word) main::w1#4 )
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#0 main::@6/(byte) main::j#1 )
  (byte~) main::$9 ← (byte) main::j#2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) main::w2#0 ← *((const signed word*) swords + (byte~) main::$9)
  (byte) main::op#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  (byte) main::i#8 ← phi( main::@2/(byte) main::i#10 main::@4/(byte) main::i#5 )
  (byte*) print_line_cursor#24 ← phi( main::@2/(byte*) print_line_cursor#26 main::@4/(byte*) print_line_cursor#27 )
  (byte) main::j#7 ← phi( main::@2/(byte) main::j#2 main::@4/(byte) main::j#4 )
  (byte) main::s#4 ← phi( main::@2/(byte) main::s#5 main::@4/(byte) main::s#6 )
  (byte*) print_char_cursor#64 ← phi( main::@2/(byte*) print_char_cursor#71 main::@4/(byte*) print_char_cursor#72 )
  (byte) main::op#2 ← phi( main::@2/(byte) main::op#0 main::@4/(byte) main::op#1 )
  (signed word) main::w2#1 ← phi( main::@2/(signed word) main::w2#0 main::@4/(signed word) main::w2#2 )
  (signed word) main::w1#1 ← phi( main::@2/(signed word) main::w1#2 main::@4/(signed word) main::w1#3 )
  (signed word) compare::w1#0 ← (signed word) main::w1#1
  (signed word) compare::w2#0 ← (signed word) main::w2#1
  (byte) compare::op#0 ← (byte) main::op#2
  call compare 
  to:main::@16
main::@16: scope:[main]  from main::@3
  (byte) main::i#6 ← phi( main::@3/(byte) main::i#8 )
  (byte*) print_line_cursor#22 ← phi( main::@3/(byte*) print_line_cursor#24 )
  (byte) main::j#5 ← phi( main::@3/(byte) main::j#7 )
  (signed word) main::w2#3 ← phi( main::@3/(signed word) main::w2#1 )
  (signed word) main::w1#5 ← phi( main::@3/(signed word) main::w1#1 )
  (byte) main::op#4 ← phi( main::@3/(byte) main::op#2 )
  (byte) main::s#3 ← phi( main::@3/(byte) main::s#4 )
  (byte*) print_char_cursor#47 ← phi( main::@3/(byte*) print_char_cursor#27 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#47
  (byte) main::s#1 ← ++ (byte) main::s#3
  (bool~) main::$2 ← (byte) main::s#1 == (number) 3
  (bool~) main::$3 ← ! (bool~) main::$2
  if((bool~) main::$3) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@16 main::@17
  (byte*) print_line_cursor#27 ← phi( main::@16/(byte*) print_line_cursor#22 main::@17/(byte*) print_line_cursor#6 )
  (byte) main::i#5 ← phi( main::@16/(byte) main::i#6 main::@17/(byte) main::i#7 )
  (byte) main::s#6 ← phi( main::@16/(byte) main::s#1 main::@17/(byte) main::s#9 )
  (byte*) print_char_cursor#72 ← phi( main::@16/(byte*) print_char_cursor#20 main::@17/(byte*) print_char_cursor#21 )
  (byte) main::j#4 ← phi( main::@16/(byte) main::j#5 main::@17/(byte) main::j#6 )
  (signed word) main::w2#2 ← phi( main::@16/(signed word) main::w2#3 main::@17/(signed word) main::w2#4 )
  (signed word) main::w1#3 ← phi( main::@16/(signed word) main::w1#5 main::@17/(signed word) main::w1#6 )
  (byte) main::op#3 ← phi( main::@16/(byte) main::op#4 main::@17/(byte) main::op#5 )
  (byte) main::op#1 ← (byte) main::op#3 + rangenext(0,5)
  (bool~) main::$5 ← (byte) main::op#1 != rangelast(0,5)
  if((bool~) main::$5) goto main::@3
  to:main::@6
main::@5: scope:[main]  from main::@16
  (byte) main::i#9 ← phi( main::@16/(byte) main::i#6 )
  (byte) main::j#8 ← phi( main::@16/(byte) main::j#5 )
  (signed word) main::w2#5 ← phi( main::@16/(signed word) main::w2#3 )
  (signed word) main::w1#7 ← phi( main::@16/(signed word) main::w1#5 )
  (byte) main::op#6 ← phi( main::@16/(byte) main::op#4 )
  (byte*) print_char_cursor#65 ← phi( main::@16/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#19 ← phi( main::@16/(byte*) print_line_cursor#22 )
  (byte) main::s#2 ← (number) 0
  call print_ln 
  to:main::@17
main::@17: scope:[main]  from main::@5
  (byte) main::i#7 ← phi( main::@5/(byte) main::i#9 )
  (byte) main::s#9 ← phi( main::@5/(byte) main::s#2 )
  (byte) main::j#6 ← phi( main::@5/(byte) main::j#8 )
  (signed word) main::w2#4 ← phi( main::@5/(signed word) main::w2#5 )
  (signed word) main::w1#6 ← phi( main::@5/(signed word) main::w1#7 )
  (byte) main::op#5 ← phi( main::@5/(byte) main::op#6 )
  (byte*) print_char_cursor#48 ← phi( main::@5/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#14 ← phi( main::@5/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#48
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte*) print_line_cursor#25 ← phi( main::@4/(byte*) print_line_cursor#27 )
  (byte) main::s#8 ← phi( main::@4/(byte) main::s#6 )
  (byte*) print_char_cursor#82 ← phi( main::@4/(byte*) print_char_cursor#72 )
  (signed word) main::w1#4 ← phi( main::@4/(signed word) main::w1#3 )
  (byte) main::i#4 ← phi( main::@4/(byte) main::i#5 )
  (byte) main::j#3 ← phi( main::@4/(byte) main::j#4 )
  (byte) main::j#1 ← (byte) main::j#3 + rangenext(0,2)
  (bool~) main::$6 ← (byte) main::j#1 != rangelast(0,2)
  if((bool~) main::$6) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::s#10 ← phi( main::@6/(byte) main::s#8 )
  (byte*) print_char_cursor#73 ← phi( main::@6/(byte*) print_char_cursor#82 )
  (byte*) print_line_cursor#23 ← phi( main::@6/(byte*) print_line_cursor#25 )
  (byte) main::i#3 ← phi( main::@6/(byte) main::i#4 )
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,2)
  (bool~) main::$7 ← (byte) main::i#1 != rangelast(0,2)
  if((bool~) main::$7) goto main::@1
  to:main::@9
main::@9: scope:[main]  from main::@7 main::@9
  (byte*) print_char_cursor#66 ← phi( main::@7/(byte*) print_char_cursor#73 main::@9/(byte*) print_char_cursor#66 )
  (byte*) print_line_cursor#20 ← phi( main::@7/(byte*) print_line_cursor#23 main::@9/(byte*) print_line_cursor#20 )
  if(true) goto main::@9
  to:main::@return
main::@return: scope:[main]  from main::@9
  (byte*) print_char_cursor#49 ← phi( main::@9/(byte*) print_char_cursor#66 )
  (byte*) print_line_cursor#15 ← phi( main::@9/(byte*) print_line_cursor#20 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#49
  return 
  to:@return

(void()) compare((signed word) compare::w1 , (signed word) compare::w2 , (byte) compare::op)
compare: scope:[compare]  from main::@3
  (byte*) print_char_cursor#96 ← phi( main::@3/(byte*) print_char_cursor#64 )
  (signed word) compare::w2#8 ← phi( main::@3/(signed word) compare::w2#0 )
  (signed word) compare::w1#8 ← phi( main::@3/(signed word) compare::w1#0 )
  (byte) compare::op#1 ← phi( main::@3/(byte) compare::op#0 )
  (byte) compare::r#0 ← (const byte) FF
  (byte*) compare::ops#0 ← (byte*) 0
  (bool~) compare::$0 ← (byte) compare::op#1 == (const byte) LT
  if((bool~) compare::$0) goto compare::@1
  to:compare::@12
compare::@1: scope:[compare]  from compare
  (byte) compare::r#24 ← phi( compare/(byte) compare::r#0 )
  (byte*) print_char_cursor#94 ← phi( compare/(byte*) print_char_cursor#96 )
  (signed word) compare::w2#1 ← phi( compare/(signed word) compare::w2#8 )
  (signed word) compare::w1#1 ← phi( compare/(signed word) compare::w1#8 )
  (bool~) compare::$21 ← (signed word) compare::w1#1 < (signed word) compare::w2#1
  (bool~) compare::$22 ← ! (bool~) compare::$21
  if((bool~) compare::$22) goto compare::@34
  to:compare::@28
compare::@12: scope:[compare]  from compare
  (byte*) compare::ops#13 ← phi( compare/(byte*) compare::ops#0 )
  (byte) compare::r#25 ← phi( compare/(byte) compare::r#0 )
  (byte*) print_char_cursor#97 ← phi( compare/(byte*) print_char_cursor#96 )
  (signed word) compare::w2#9 ← phi( compare/(signed word) compare::w2#8 )
  (signed word) compare::w1#9 ← phi( compare/(signed word) compare::w1#8 )
  (byte) compare::op#2 ← phi( compare/(byte) compare::op#1 )
  (bool~) compare::$1 ← (byte) compare::op#2 == (const byte) LE
  if((bool~) compare::$1) goto compare::@2
  to:compare::@13
compare::@2: scope:[compare]  from compare::@12
  (byte) compare::r#23 ← phi( compare::@12/(byte) compare::r#25 )
  (byte*) print_char_cursor#92 ← phi( compare::@12/(byte*) print_char_cursor#97 )
  (signed word) compare::w2#2 ← phi( compare::@12/(signed word) compare::w2#9 )
  (signed word) compare::w1#2 ← phi( compare::@12/(signed word) compare::w1#9 )
  (bool~) compare::$19 ← (signed word) compare::w1#2 <= (signed word) compare::w2#2
  (bool~) compare::$20 ← ! (bool~) compare::$19
  if((bool~) compare::$20) goto compare::@33
  to:compare::@26
compare::@13: scope:[compare]  from compare::@12
  (byte) compare::r#26 ← phi( compare::@12/(byte) compare::r#25 )
  (byte*) compare::ops#12 ← phi( compare::@12/(byte*) compare::ops#13 )
  (byte*) print_char_cursor#98 ← phi( compare::@12/(byte*) print_char_cursor#97 )
  (signed word) compare::w2#10 ← phi( compare::@12/(signed word) compare::w2#9 )
  (signed word) compare::w1#10 ← phi( compare::@12/(signed word) compare::w1#9 )
  (byte) compare::op#3 ← phi( compare::@12/(byte) compare::op#2 )
  (bool~) compare::$2 ← (byte) compare::op#3 == (const byte) GT
  if((bool~) compare::$2) goto compare::@3
  to:compare::@14
compare::@3: scope:[compare]  from compare::@13
  (byte) compare::r#22 ← phi( compare::@13/(byte) compare::r#26 )
  (byte*) print_char_cursor#91 ← phi( compare::@13/(byte*) print_char_cursor#98 )
  (signed word) compare::w2#3 ← phi( compare::@13/(signed word) compare::w2#10 )
  (signed word) compare::w1#3 ← phi( compare::@13/(signed word) compare::w1#10 )
  (bool~) compare::$17 ← (signed word) compare::w1#3 > (signed word) compare::w2#3
  (bool~) compare::$18 ← ! (bool~) compare::$17
  if((bool~) compare::$18) goto compare::@32
  to:compare::@24
compare::@14: scope:[compare]  from compare::@13
  (byte) compare::r#27 ← phi( compare::@13/(byte) compare::r#26 )
  (byte*) compare::ops#11 ← phi( compare::@13/(byte*) compare::ops#12 )
  (byte*) print_char_cursor#99 ← phi( compare::@13/(byte*) print_char_cursor#98 )
  (signed word) compare::w2#11 ← phi( compare::@13/(signed word) compare::w2#10 )
  (signed word) compare::w1#11 ← phi( compare::@13/(signed word) compare::w1#10 )
  (byte) compare::op#4 ← phi( compare::@13/(byte) compare::op#3 )
  (bool~) compare::$3 ← (byte) compare::op#4 == (const byte) GE
  if((bool~) compare::$3) goto compare::@4
  to:compare::@15
compare::@4: scope:[compare]  from compare::@14
  (byte) compare::r#21 ← phi( compare::@14/(byte) compare::r#27 )
  (byte*) print_char_cursor#89 ← phi( compare::@14/(byte*) print_char_cursor#99 )
  (signed word) compare::w2#4 ← phi( compare::@14/(signed word) compare::w2#11 )
  (signed word) compare::w1#4 ← phi( compare::@14/(signed word) compare::w1#11 )
  (bool~) compare::$15 ← (signed word) compare::w1#4 >= (signed word) compare::w2#4
  (bool~) compare::$16 ← ! (bool~) compare::$15
  if((bool~) compare::$16) goto compare::@31
  to:compare::@22
compare::@15: scope:[compare]  from compare::@14
  (byte) compare::r#18 ← phi( compare::@14/(byte) compare::r#27 )
  (byte*) compare::ops#10 ← phi( compare::@14/(byte*) compare::ops#11 )
  (byte*) print_char_cursor#83 ← phi( compare::@14/(byte*) print_char_cursor#99 )
  (signed word) compare::w2#12 ← phi( compare::@14/(signed word) compare::w2#11 )
  (signed word) compare::w1#12 ← phi( compare::@14/(signed word) compare::w1#11 )
  (byte) compare::op#5 ← phi( compare::@14/(byte) compare::op#4 )
  (bool~) compare::$4 ← (byte) compare::op#5 == (const byte) EQ
  if((bool~) compare::$4) goto compare::@5
  to:compare::@16
compare::@5: scope:[compare]  from compare::@15
  (byte) compare::r#20 ← phi( compare::@15/(byte) compare::r#18 )
  (byte*) print_char_cursor#87 ← phi( compare::@15/(byte*) print_char_cursor#83 )
  (signed word) compare::w2#5 ← phi( compare::@15/(signed word) compare::w2#12 )
  (signed word) compare::w1#5 ← phi( compare::@15/(signed word) compare::w1#12 )
  (bool~) compare::$13 ← (signed word) compare::w1#5 == (signed word) compare::w2#5
  (bool~) compare::$14 ← ! (bool~) compare::$13
  if((bool~) compare::$14) goto compare::@30
  to:compare::@20
compare::@16: scope:[compare]  from compare::@15
  (byte) compare::r#11 ← phi( compare::@15/(byte) compare::r#18 )
  (byte*) compare::ops#9 ← phi( compare::@15/(byte*) compare::ops#10 )
  (byte*) print_char_cursor#74 ← phi( compare::@15/(byte*) print_char_cursor#83 )
  (signed word) compare::w2#13 ← phi( compare::@15/(signed word) compare::w2#12 )
  (signed word) compare::w1#13 ← phi( compare::@15/(signed word) compare::w1#12 )
  (byte) compare::op#6 ← phi( compare::@15/(byte) compare::op#5 )
  (bool~) compare::$5 ← (byte) compare::op#6 == (const byte) NE
  (bool~) compare::$6 ← ! (bool~) compare::$5
  if((bool~) compare::$6) goto compare::@11
  to:compare::@17
compare::@17: scope:[compare]  from compare::@16
  (byte) compare::r#19 ← phi( compare::@16/(byte) compare::r#11 )
  (byte*) print_char_cursor#84 ← phi( compare::@16/(byte*) print_char_cursor#74 )
  (signed word) compare::w2#6 ← phi( compare::@16/(signed word) compare::w2#13 )
  (signed word) compare::w1#6 ← phi( compare::@16/(signed word) compare::w1#13 )
  (bool~) compare::$11 ← (signed word) compare::w1#6 != (signed word) compare::w2#6
  (bool~) compare::$12 ← ! (bool~) compare::$11
  if((bool~) compare::$12) goto compare::@29
  to:compare::@18
compare::@29: scope:[compare]  from compare::@17 compare::@18
  (byte) compare::r#12 ← phi( compare::@17/(byte) compare::r#19 compare::@18/(byte) compare::r#1 )
  (signed word) compare::w2#16 ← phi( compare::@17/(signed word) compare::w2#6 compare::@18/(signed word) compare::w2#22 )
  (byte*) print_char_cursor#75 ← phi( compare::@17/(byte*) print_char_cursor#84 compare::@18/(byte*) print_char_cursor#85 )
  (signed word) compare::w1#14 ← phi( compare::@17/(signed word) compare::w1#6 compare::@18/(signed word) compare::w1#20 )
  (byte*) compare::ops#1 ← (const byte*) compare::$23
  to:compare::@11
compare::@18: scope:[compare]  from compare::@17
  (signed word) compare::w2#22 ← phi( compare::@17/(signed word) compare::w2#6 )
  (byte*) print_char_cursor#85 ← phi( compare::@17/(byte*) print_char_cursor#84 )
  (signed word) compare::w1#20 ← phi( compare::@17/(signed word) compare::w1#6 )
  (byte) compare::r#1 ← (const byte) TT
  to:compare::@29
compare::@30: scope:[compare]  from compare::@20 compare::@5
  (byte) compare::r#13 ← phi( compare::@20/(byte) compare::r#2 compare::@5/(byte) compare::r#20 )
  (signed word) compare::w2#17 ← phi( compare::@20/(signed word) compare::w2#23 compare::@5/(signed word) compare::w2#5 )
  (byte*) print_char_cursor#76 ← phi( compare::@20/(byte*) print_char_cursor#86 compare::@5/(byte*) print_char_cursor#87 )
  (signed word) compare::w1#15 ← phi( compare::@20/(signed word) compare::w1#21 compare::@5/(signed word) compare::w1#5 )
  (byte*) compare::ops#2 ← (const byte*) compare::$24
  to:compare::@11
compare::@20: scope:[compare]  from compare::@5
  (signed word) compare::w2#23 ← phi( compare::@5/(signed word) compare::w2#5 )
  (byte*) print_char_cursor#86 ← phi( compare::@5/(byte*) print_char_cursor#87 )
  (signed word) compare::w1#21 ← phi( compare::@5/(signed word) compare::w1#5 )
  (byte) compare::r#2 ← (const byte) TT
  to:compare::@30
compare::@31: scope:[compare]  from compare::@22 compare::@4
  (byte) compare::r#14 ← phi( compare::@22/(byte) compare::r#3 compare::@4/(byte) compare::r#21 )
  (signed word) compare::w2#18 ← phi( compare::@22/(signed word) compare::w2#24 compare::@4/(signed word) compare::w2#4 )
  (byte*) print_char_cursor#77 ← phi( compare::@22/(byte*) print_char_cursor#88 compare::@4/(byte*) print_char_cursor#89 )
  (signed word) compare::w1#16 ← phi( compare::@22/(signed word) compare::w1#22 compare::@4/(signed word) compare::w1#4 )
  (byte*) compare::ops#3 ← (const byte*) compare::$25
  to:compare::@11
compare::@22: scope:[compare]  from compare::@4
  (signed word) compare::w2#24 ← phi( compare::@4/(signed word) compare::w2#4 )
  (byte*) print_char_cursor#88 ← phi( compare::@4/(byte*) print_char_cursor#89 )
  (signed word) compare::w1#22 ← phi( compare::@4/(signed word) compare::w1#4 )
  (byte) compare::r#3 ← (const byte) TT
  to:compare::@31
compare::@32: scope:[compare]  from compare::@24 compare::@3
  (byte) compare::r#15 ← phi( compare::@24/(byte) compare::r#4 compare::@3/(byte) compare::r#22 )
  (signed word) compare::w2#19 ← phi( compare::@24/(signed word) compare::w2#25 compare::@3/(signed word) compare::w2#3 )
  (byte*) print_char_cursor#78 ← phi( compare::@24/(byte*) print_char_cursor#90 compare::@3/(byte*) print_char_cursor#91 )
  (signed word) compare::w1#17 ← phi( compare::@24/(signed word) compare::w1#23 compare::@3/(signed word) compare::w1#3 )
  (byte*) compare::ops#4 ← (const byte*) compare::$26
  to:compare::@11
compare::@24: scope:[compare]  from compare::@3
  (signed word) compare::w2#25 ← phi( compare::@3/(signed word) compare::w2#3 )
  (byte*) print_char_cursor#90 ← phi( compare::@3/(byte*) print_char_cursor#91 )
  (signed word) compare::w1#23 ← phi( compare::@3/(signed word) compare::w1#3 )
  (byte) compare::r#4 ← (const byte) TT
  to:compare::@32
compare::@33: scope:[compare]  from compare::@2 compare::@26
  (byte) compare::r#16 ← phi( compare::@2/(byte) compare::r#23 compare::@26/(byte) compare::r#5 )
  (signed word) compare::w2#20 ← phi( compare::@2/(signed word) compare::w2#2 compare::@26/(signed word) compare::w2#26 )
  (byte*) print_char_cursor#79 ← phi( compare::@2/(byte*) print_char_cursor#92 compare::@26/(byte*) print_char_cursor#93 )
  (signed word) compare::w1#18 ← phi( compare::@2/(signed word) compare::w1#2 compare::@26/(signed word) compare::w1#24 )
  (byte*) compare::ops#5 ← (const byte*) compare::$27
  to:compare::@11
compare::@26: scope:[compare]  from compare::@2
  (signed word) compare::w2#26 ← phi( compare::@2/(signed word) compare::w2#2 )
  (byte*) print_char_cursor#93 ← phi( compare::@2/(byte*) print_char_cursor#92 )
  (signed word) compare::w1#24 ← phi( compare::@2/(signed word) compare::w1#2 )
  (byte) compare::r#5 ← (const byte) TT
  to:compare::@33
compare::@11: scope:[compare]  from compare::@16 compare::@29 compare::@30 compare::@31 compare::@32 compare::@33 compare::@34
  (byte) compare::r#10 ← phi( compare::@16/(byte) compare::r#11 compare::@29/(byte) compare::r#12 compare::@30/(byte) compare::r#13 compare::@31/(byte) compare::r#14 compare::@32/(byte) compare::r#15 compare::@33/(byte) compare::r#16 compare::@34/(byte) compare::r#17 )
  (signed word) compare::w2#15 ← phi( compare::@16/(signed word) compare::w2#13 compare::@29/(signed word) compare::w2#16 compare::@30/(signed word) compare::w2#17 compare::@31/(signed word) compare::w2#18 compare::@32/(signed word) compare::w2#19 compare::@33/(signed word) compare::w2#20 compare::@34/(signed word) compare::w2#21 )
  (byte*) compare::ops#8 ← phi( compare::@16/(byte*) compare::ops#9 compare::@29/(byte*) compare::ops#1 compare::@30/(byte*) compare::ops#2 compare::@31/(byte*) compare::ops#3 compare::@32/(byte*) compare::ops#4 compare::@33/(byte*) compare::ops#5 compare::@34/(byte*) compare::ops#6 )
  (byte*) print_char_cursor#67 ← phi( compare::@16/(byte*) print_char_cursor#74 compare::@29/(byte*) print_char_cursor#75 compare::@30/(byte*) print_char_cursor#76 compare::@31/(byte*) print_char_cursor#77 compare::@32/(byte*) print_char_cursor#78 compare::@33/(byte*) print_char_cursor#79 compare::@34/(byte*) print_char_cursor#80 )
  (signed word) compare::w1#7 ← phi( compare::@16/(signed word) compare::w1#13 compare::@29/(signed word) compare::w1#14 compare::@30/(signed word) compare::w1#15 compare::@31/(signed word) compare::w1#16 compare::@32/(signed word) compare::w1#17 compare::@33/(signed word) compare::w1#18 compare::@34/(signed word) compare::w1#19 )
  (signed word) print_sword::w#1 ← (signed word) compare::w1#7
  call print_sword 
  to:compare::@35
compare::@35: scope:[compare]  from compare::@11
  (byte) compare::r#9 ← phi( compare::@11/(byte) compare::r#10 )
  (signed word) compare::w2#14 ← phi( compare::@11/(signed word) compare::w2#15 )
  (byte*) compare::ops#7 ← phi( compare::@11/(byte*) compare::ops#8 )
  (byte*) print_char_cursor#50 ← phi( compare::@11/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#50
  (byte*) print_str::str#1 ← (byte*) compare::ops#7
  call print_str 
  to:compare::@36
compare::@36: scope:[compare]  from compare::@35
  (byte) compare::r#8 ← phi( compare::@35/(byte) compare::r#9 )
  (signed word) compare::w2#7 ← phi( compare::@35/(signed word) compare::w2#14 )
  (byte*) print_char_cursor#51 ← phi( compare::@35/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#51
  (signed word) print_sword::w#2 ← (signed word) compare::w2#7
  call print_sword 
  to:compare::@37
compare::@37: scope:[compare]  from compare::@36
  (byte) compare::r#7 ← phi( compare::@36/(byte) compare::r#8 )
  (byte*) print_char_cursor#52 ← phi( compare::@36/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#52
  (byte) print_char::ch#4 ← (byte) compare::r#7
  call print_char 
  to:compare::@38
compare::@38: scope:[compare]  from compare::@37
  (byte*) print_char_cursor#53 ← phi( compare::@37/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#53
  to:compare::@return
compare::@34: scope:[compare]  from compare::@1 compare::@28
  (byte) compare::r#17 ← phi( compare::@1/(byte) compare::r#24 compare::@28/(byte) compare::r#6 )
  (signed word) compare::w2#21 ← phi( compare::@1/(signed word) compare::w2#1 compare::@28/(signed word) compare::w2#27 )
  (byte*) print_char_cursor#80 ← phi( compare::@1/(byte*) print_char_cursor#94 compare::@28/(byte*) print_char_cursor#95 )
  (signed word) compare::w1#19 ← phi( compare::@1/(signed word) compare::w1#1 compare::@28/(signed word) compare::w1#25 )
  (byte*) compare::ops#6 ← (const byte*) compare::$28
  to:compare::@11
compare::@28: scope:[compare]  from compare::@1
  (signed word) compare::w2#27 ← phi( compare::@1/(signed word) compare::w2#1 )
  (byte*) print_char_cursor#95 ← phi( compare::@1/(byte*) print_char_cursor#94 )
  (signed word) compare::w1#25 ← phi( compare::@1/(signed word) compare::w1#1 )
  (byte) compare::r#6 ← (const byte) TT
  to:compare::@34
compare::@return: scope:[compare]  from compare::@38
  (byte*) print_char_cursor#54 ← phi( compare::@38/(byte*) print_char_cursor#26 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#54
  return 
  to:@return
@43: scope:[]  from @17
  (byte*) print_screen#4 ← phi( @17/(byte*) print_screen#0 )
  (byte*) print_char_cursor#68 ← phi( @17/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#21 ← phi( @17/(byte*) print_line_cursor#0 )
  call main 
  to:@44
@44: scope:[]  from @43
  (byte*) print_char_cursor#55 ← phi( @43/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#16 ← phi( @43/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#55
  to:@end
@end: scope:[]  from @44

SYMBOL TABLE SSA
(label) @17
(label) @43
(label) @44
(label) @begin
(label) @end
(const byte) EQ = (byte) 4
(const byte) FF = (byte) $57
(const byte) GE = (byte) 3
(const byte) GT = (byte) 2
(const byte) LE = (byte) 1
(const byte) LT = (byte) 0
(const byte) NE = (byte) 5
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const byte) TT = (byte) $51
(void()) compare((signed word) compare::w1 , (signed word) compare::w2 , (byte) compare::op)
(bool~) compare::$0
(bool~) compare::$1
(bool~) compare::$11
(bool~) compare::$12
(bool~) compare::$13
(bool~) compare::$14
(bool~) compare::$15
(bool~) compare::$16
(bool~) compare::$17
(bool~) compare::$18
(bool~) compare::$19
(bool~) compare::$2
(bool~) compare::$20
(bool~) compare::$21
(bool~) compare::$22
(const byte*) compare::$23[(byte) 3]  = (byte*) "!="
(const byte*) compare::$24[(byte) 3]  = (byte*) "=="
(const byte*) compare::$25[(byte) 3]  = (byte*) ">="
(const byte*) compare::$26[(byte) 3]  = (byte*) "> "
(const byte*) compare::$27[(byte) 3]  = (byte*) "<="
(const byte*) compare::$28[(byte) 3]  = (byte*) "< "
(bool~) compare::$3
(bool~) compare::$4
(bool~) compare::$5
(bool~) compare::$6
(label) compare::@1
(label) compare::@11
(label) compare::@12
(label) compare::@13
(label) compare::@14
(label) compare::@15
(label) compare::@16
(label) compare::@17
(label) compare::@18
(label) compare::@2
(label) compare::@20
(label) compare::@22
(label) compare::@24
(label) compare::@26
(label) compare::@28
(label) compare::@29
(label) compare::@3
(label) compare::@30
(label) compare::@31
(label) compare::@32
(label) compare::@33
(label) compare::@34
(label) compare::@35
(label) compare::@36
(label) compare::@37
(label) compare::@38
(label) compare::@4
(label) compare::@5
(label) compare::@return
(byte) compare::op
(byte) compare::op#0
(byte) compare::op#1
(byte) compare::op#2
(byte) compare::op#3
(byte) compare::op#4
(byte) compare::op#5
(byte) compare::op#6
(byte*) compare::ops
(byte*) compare::ops#0
(byte*) compare::ops#1
(byte*) compare::ops#10
(byte*) compare::ops#11
(byte*) compare::ops#12
(byte*) compare::ops#13
(byte*) compare::ops#2
(byte*) compare::ops#3
(byte*) compare::ops#4
(byte*) compare::ops#5
(byte*) compare::ops#6
(byte*) compare::ops#7
(byte*) compare::ops#8
(byte*) compare::ops#9
(byte) compare::r
(byte) compare::r#0
(byte) compare::r#1
(byte) compare::r#10
(byte) compare::r#11
(byte) compare::r#12
(byte) compare::r#13
(byte) compare::r#14
(byte) compare::r#15
(byte) compare::r#16
(byte) compare::r#17
(byte) compare::r#18
(byte) compare::r#19
(byte) compare::r#2
(byte) compare::r#20
(byte) compare::r#21
(byte) compare::r#22
(byte) compare::r#23
(byte) compare::r#24
(byte) compare::r#25
(byte) compare::r#26
(byte) compare::r#27
(byte) compare::r#3
(byte) compare::r#4
(byte) compare::r#5
(byte) compare::r#6
(byte) compare::r#7
(byte) compare::r#8
(byte) compare::r#9
(signed word) compare::w1
(signed word) compare::w1#0
(signed word) compare::w1#1
(signed word) compare::w1#10
(signed word) compare::w1#11
(signed word) compare::w1#12
(signed word) compare::w1#13
(signed word) compare::w1#14
(signed word) compare::w1#15
(signed word) compare::w1#16
(signed word) compare::w1#17
(signed word) compare::w1#18
(signed word) compare::w1#19
(signed word) compare::w1#2
(signed word) compare::w1#20
(signed word) compare::w1#21
(signed word) compare::w1#22
(signed word) compare::w1#23
(signed word) compare::w1#24
(signed word) compare::w1#25
(signed word) compare::w1#3
(signed word) compare::w1#4
(signed word) compare::w1#5
(signed word) compare::w1#6
(signed word) compare::w1#7
(signed word) compare::w1#8
(signed word) compare::w1#9
(signed word) compare::w2
(signed word) compare::w2#0
(signed word) compare::w2#1
(signed word) compare::w2#10
(signed word) compare::w2#11
(signed word) compare::w2#12
(signed word) compare::w2#13
(signed word) compare::w2#14
(signed word) compare::w2#15
(signed word) compare::w2#16
(signed word) compare::w2#17
(signed word) compare::w2#18
(signed word) compare::w2#19
(signed word) compare::w2#2
(signed word) compare::w2#20
(signed word) compare::w2#21
(signed word) compare::w2#22
(signed word) compare::w2#23
(signed word) compare::w2#24
(signed word) compare::w2#25
(signed word) compare::w2#26
(signed word) compare::w2#27
(signed word) compare::w2#3
(signed word) compare::w2#4
(signed word) compare::w2#5
(signed word) compare::w2#6
(signed word) compare::w2#7
(signed word) compare::w2#8
(signed word) compare::w2#9
(void()) main()
(bool~) main::$2
(bool~) main::$3
(bool~) main::$5
(bool~) main::$6
(bool~) main::$7
(byte~) main::$8
(byte~) main::$9
(label) main::@1
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::j#4
(byte) main::j#5
(byte) main::j#6
(byte) main::j#7
(byte) main::j#8
(byte) main::op
(byte) main::op#0
(byte) main::op#1
(byte) main::op#2
(byte) main::op#3
(byte) main::op#4
(byte) main::op#5
(byte) main::op#6
(byte) main::s
(byte) main::s#0
(byte) main::s#1
(byte) main::s#10
(byte) main::s#2
(byte) main::s#3
(byte) main::s#4
(byte) main::s#5
(byte) main::s#6
(byte) main::s#7
(byte) main::s#8
(byte) main::s#9
(signed word) main::w1
(signed word) main::w1#0
(signed word) main::w1#1
(signed word) main::w1#2
(signed word) main::w1#3
(signed word) main::w1#4
(signed word) main::w1#5
(signed word) main::w1#6
(signed word) main::w1#7
(signed word) main::w2
(signed word) main::w2#0
(signed word) main::w2#1
(signed word) main::w2#2
(signed word) main::w2#3
(signed word) main::w2#4
(signed word) main::w2#5
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(word~) print_sword::$1
(signed word~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@5
(label) print_sword::@6
(label) print_sword::@7
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(signed word) print_sword::w#6
(signed word) print_sword::w#7
(signed word) print_sword::w#8
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(const signed word*) swords[]  = { (signed word) -$6fed, (signed word) $12, (signed word) $7fed }

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$0 ← (number) 0 != *((byte*) print_str::str#2)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) 3 in (bool~) main::$2 ← (byte) main::s#1 == (number) 3
Adding number conversion cast (unumber) 0 in (byte) main::s#2 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word~) print_sword::$1 ← (word)(signed word) print_sword::w#5
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) main::s#2 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [141] (bool~) main::$3 ← (byte) main::s#1 != (byte) 3 from [140] (bool~) main::$2 ← (byte) main::s#1 == (byte) 3
Inversing boolean not [174] (bool~) compare::$22 ← (signed word) compare::w1#1 >= (signed word) compare::w2#1 from [173] (bool~) compare::$21 ← (signed word) compare::w1#1 < (signed word) compare::w2#1
Inversing boolean not [181] (bool~) compare::$20 ← (signed word) compare::w1#2 > (signed word) compare::w2#2 from [180] (bool~) compare::$19 ← (signed word) compare::w1#2 <= (signed word) compare::w2#2
Inversing boolean not [188] (bool~) compare::$18 ← (signed word) compare::w1#3 <= (signed word) compare::w2#3 from [187] (bool~) compare::$17 ← (signed word) compare::w1#3 > (signed word) compare::w2#3
Inversing boolean not [195] (bool~) compare::$16 ← (signed word) compare::w1#4 < (signed word) compare::w2#4 from [194] (bool~) compare::$15 ← (signed word) compare::w1#4 >= (signed word) compare::w2#4
Inversing boolean not [202] (bool~) compare::$14 ← (signed word) compare::w1#5 != (signed word) compare::w2#5 from [201] (bool~) compare::$13 ← (signed word) compare::w1#5 == (signed word) compare::w2#5
Inversing boolean not [206] (bool~) compare::$6 ← (byte) compare::op#6 != (const byte) NE from [205] (bool~) compare::$5 ← (byte) compare::op#6 == (const byte) NE
Inversing boolean not [210] (bool~) compare::$12 ← (signed word) compare::w1#6 == (signed word) compare::w2#6 from [209] (bool~) compare::$11 ← (signed word) compare::w1#6 != (signed word) compare::w2#6
Successful SSA optimization Pass2UnaryNotSimplification
Alias (void*) memset::return#0 = (void*) memset::str#1 (void*) memset::return#3 (void*) memset::return#1 
Alias (void*) memset::str#2 = (void*) memset::str#3 
Alias (word) memset::num#1 = (word) memset::num#2 
Alias (byte) memset::c#3 = (byte) memset::c#4 
Alias (byte*) memset::end#0 = (byte*~) memset::$3 
Alias (byte) memset::c#1 = (byte) memset::c#2 
Alias (byte*) memset::dst#2 = (byte*) memset::dst#3 
Alias (byte*) memset::end#1 = (byte*) memset::end#2 
Alias (void*) memset::str#4 = (void*) memset::str#5 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#21 (byte*) print_char_cursor#68 (byte*) print_screen#4 
Alias (byte*) print_str::str#2 = (byte*) print_str::str#3 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#29 (byte*) print_char_cursor#56 (byte*) print_char_cursor#30 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#10 (byte*) print_char_cursor#3 (byte*) print_line_cursor#11 (byte*) print_char_cursor#32 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (byte*) print_char_cursor#58 = (byte*) print_char_cursor#70 (byte*) print_char_cursor#59 
Alias (signed word) print_sword::w#3 = (signed word) print_sword::w#6 (signed word) print_sword::w#4 (signed word) print_sword::w#8 (signed word) print_sword::w#7 
Alias (byte*) print_char_cursor#33 = (byte*) print_char_cursor#5 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$5 
Alias (byte*) print_char_cursor#34 = (byte*) print_char_cursor#6 
Alias (word) print_word::w#0 = (word~) print_sword::$1 
Alias (byte*) print_char_cursor#35 = (byte*) print_char_cursor#7 (byte*) print_char_cursor#36 (byte*) print_char_cursor#8 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#1 = (word) print_word::w#2 
Alias (byte*) print_char_cursor#37 = (byte*) print_char_cursor#9 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#38 (byte*) print_char_cursor#39 (byte*) print_char_cursor#11 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#40 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#41 (byte*) print_char_cursor#42 (byte*) print_char_cursor#14 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#44 (byte*) print_char_cursor#16 
Alias (byte*) print_line_cursor#12 = (byte*) print_screen#2 (byte*) print_screen#1 (byte*) print_line_cursor#3 (byte*) print_char_cursor#17 (byte*) print_char_cursor#45 (byte*) print_line_cursor#4 (byte*) print_char_cursor#18 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#46 
Alias (byte) main::s#3 = (byte) main::s#4 
Alias (byte) main::op#2 = (byte) main::op#4 (byte) main::op#6 (byte) main::op#5 
Alias (signed word) main::w1#1 = (signed word) main::w1#5 (signed word) main::w1#7 (signed word) main::w1#6 
Alias (signed word) main::w2#1 = (signed word) main::w2#3 (signed word) main::w2#5 (signed word) main::w2#4 
Alias (byte) main::j#5 = (byte) main::j#7 (byte) main::j#8 (byte) main::j#6 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#22 (byte*) print_line_cursor#24 
Alias (byte) main::i#6 = (byte) main::i#8 (byte) main::i#9 (byte) main::i#7 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#47 (byte*) print_char_cursor#65 
Alias (byte) main::s#2 = (byte) main::s#9 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#6 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#48 
Alias (byte) main::j#3 = (byte) main::j#4 
Alias (byte) main::i#3 = (byte) main::i#4 (byte) main::i#5 
Alias (signed word) main::w1#3 = (signed word) main::w1#4 
Alias (byte*) print_char_cursor#72 = (byte*) print_char_cursor#82 (byte*) print_char_cursor#73 
Alias (byte) main::s#10 = (byte) main::s#8 (byte) main::s#6 
Alias (byte*) print_line_cursor#23 = (byte*) print_line_cursor#25 (byte*) print_line_cursor#27 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#20 (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#49 (byte*) print_char_cursor#66 
Alias (signed word) compare::w1#1 = (signed word) compare::w1#8 (signed word) compare::w1#9 (signed word) compare::w1#2 (signed word) compare::w1#10 (signed word) compare::w1#3 (signed word) compare::w1#11 (signed word) compare::w1#4 (signed word) compare::w1#12 (signed word) compare::w1#5 (signed word) compare::w1#13 (signed word) compare::w1#6 (signed word) compare::w1#20 (signed word) compare::w1#21 (signed word) compare::w1#22 (signed word) compare::w1#23 (signed word) compare::w1#24 (signed word) compare::w1#25 
Alias (signed word) compare::w2#1 = (signed word) compare::w2#8 (signed word) compare::w2#9 (signed word) compare::w2#2 (signed word) compare::w2#10 (signed word) compare::w2#3 (signed word) compare::w2#11 (signed word) compare::w2#4 (signed word) compare::w2#12 (signed word) compare::w2#5 (signed word) compare::w2#13 (signed word) compare::w2#6 (signed word) compare::w2#22 (signed word) compare::w2#23 (signed word) compare::w2#24 (signed word) compare::w2#25 (signed word) compare::w2#26 (signed word) compare::w2#27 
Alias (byte*) print_char_cursor#74 = (byte*) print_char_cursor#94 (byte*) print_char_cursor#96 (byte*) print_char_cursor#97 (byte*) print_char_cursor#92 (byte*) print_char_cursor#98 (byte*) print_char_cursor#91 (byte*) print_char_cursor#99 (byte*) print_char_cursor#89 (byte*) print_char_cursor#83 (byte*) print_char_cursor#87 (byte*) print_char_cursor#84 (byte*) print_char_cursor#85 (byte*) print_char_cursor#86 (byte*) print_char_cursor#88 (byte*) print_char_cursor#90 (byte*) print_char_cursor#93 (byte*) print_char_cursor#95 
Alias (byte) compare::r#0 = (byte) compare::r#24 (byte) compare::r#25 (byte) compare::r#23 (byte) compare::r#26 (byte) compare::r#22 (byte) compare::r#27 (byte) compare::r#21 (byte) compare::r#18 (byte) compare::r#20 (byte) compare::r#11 (byte) compare::r#19 
Alias (byte) compare::op#1 = (byte) compare::op#2 (byte) compare::op#3 (byte) compare::op#4 (byte) compare::op#5 (byte) compare::op#6 
Alias (byte*) compare::ops#0 = (byte*) compare::ops#13 (byte*) compare::ops#12 (byte*) compare::ops#11 (byte*) compare::ops#10 (byte*) compare::ops#9 
Alias (byte*) compare::ops#7 = (byte*) compare::ops#8 
Alias (signed word) compare::w2#14 = (signed word) compare::w2#15 (signed word) compare::w2#7 
Alias (byte) compare::r#10 = (byte) compare::r#9 (byte) compare::r#8 (byte) compare::r#7 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#50 
Alias (byte*) print_char_cursor#24 = (byte*) print_char_cursor#51 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#52 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#53 (byte*) print_char_cursor#54 (byte*) print_char_cursor#27 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#55 
Successful SSA optimization Pass2AliasElimination
Alias (byte) main::op#2 = (byte) main::op#3 
Alias (signed word) main::w1#1 = (signed word) main::w1#3 
Alias (signed word) main::w2#1 = (signed word) main::w2#2 
Alias (byte) main::j#3 = (byte) main::j#5 
Alias (byte) main::i#3 = (byte) main::i#6 
Alias (signed word) compare::w1#1 = (signed word) compare::w1#14 (signed word) compare::w1#15 (signed word) compare::w1#16 (signed word) compare::w1#17 (signed word) compare::w1#18 (signed word) compare::w1#19 
Alias (byte*) print_char_cursor#74 = (byte*) print_char_cursor#75 (byte*) print_char_cursor#76 (byte*) print_char_cursor#77 (byte*) print_char_cursor#78 (byte*) print_char_cursor#79 (byte*) print_char_cursor#80 
Alias (signed word) compare::w2#1 = (signed word) compare::w2#16 (signed word) compare::w2#17 (signed word) compare::w2#18 (signed word) compare::w2#19 (signed word) compare::w2#20 (signed word) compare::w2#21 
Successful SSA optimization Pass2AliasElimination
Alias (signed word) compare::w1#1 = (signed word) compare::w1#7 
Alias (byte*) print_char_cursor#67 = (byte*) print_char_cursor#74 
Alias (signed word) compare::w2#1 = (signed word) compare::w2#14 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_str::str#4 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#69 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#57 (byte*) print_char_cursor#20
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#57
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_char_cursor#15
Identical Phi Values (byte*) print_char_cursor#34 (byte*) print_char_cursor#15
Identical Phi Values (byte*) print_char_cursor#35 (byte*) print_char_cursor#10
Identical Phi Values (word) print_word::w#1 (word) print_word::w#0
Identical Phi Values (byte*) print_char_cursor#61 (byte*) print_char_cursor#60
Identical Phi Values (byte*) print_char_cursor#37 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_char_cursor#15
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#15
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#63 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_line_cursor#12
Identical Phi Values (signed word) main::w1#1 (signed word) main::w1#2
Identical Phi Values (signed word) main::w2#1 (signed word) main::w2#0
Identical Phi Values (byte) main::j#3 (byte) main::j#2
Identical Phi Values (byte) main::i#3 (byte) main::i#10
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#26
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#23
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#72
Identical Phi Values (byte) compare::op#1 (byte) compare::op#0
Identical Phi Values (signed word) compare::w1#1 (signed word) compare::w1#0
Identical Phi Values (signed word) compare::w2#1 (signed word) compare::w2#0
Identical Phi Values (byte*) print_char_cursor#67 (byte*) print_char_cursor#64
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#35
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#35
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#15
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#22
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#60 (byte*) print_char_cursor#15
Identical Phi Values (signed word) main::w1#2 (signed word) main::w1#0
Identical Phi Values (byte) main::i#10 (byte) main::i#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#62 (byte*) print_char_cursor#15
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) print_str::$0 [17] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [26] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#15) goto print_ln::@1
Simple Condition (bool~) print_sword::$0 [30] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1
Simple Condition (bool~) main::$3 [93] if((byte) main::s#1!=(byte) 3) goto main::@4
Simple Condition (bool~) main::$5 [97] if((byte) main::op#1!=rangelast(0,5)) goto main::@3
Simple Condition (bool~) main::$6 [103] if((byte) main::j#1!=rangelast(0,2)) goto main::@2
Simple Condition (bool~) main::$7 [106] if((byte) main::i#1!=rangelast(0,2)) goto main::@1
Simple Condition (bool~) compare::$0 [114] if((byte) compare::op#0==(const byte) LT) goto compare::@1
Simple Condition (bool~) compare::$22 [116] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@34
Simple Condition (bool~) compare::$1 [118] if((byte) compare::op#0==(const byte) LE) goto compare::@2
Simple Condition (bool~) compare::$20 [120] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@33
Simple Condition (bool~) compare::$2 [122] if((byte) compare::op#0==(const byte) GT) goto compare::@3
Simple Condition (bool~) compare::$18 [124] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@32
Simple Condition (bool~) compare::$3 [126] if((byte) compare::op#0==(const byte) GE) goto compare::@4
Simple Condition (bool~) compare::$16 [128] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@31
Simple Condition (bool~) compare::$4 [130] if((byte) compare::op#0==(const byte) EQ) goto compare::@5
Simple Condition (bool~) compare::$14 [132] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@30
Simple Condition (bool~) compare::$6 [134] if((byte) compare::op#0!=(const byte) NE) goto compare::@11
Simple Condition (bool~) compare::$12 [136] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@29
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = ' '
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte) main::s#0 = 0
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#0 = 0
Constant (const byte) main::op#0 = 0
Constant (const byte) main::s#2 = 0
Constant (const byte) compare::r#0 = FF
Constant (const byte*) compare::ops#0 = (byte*) 0
Constant (const byte*) compare::ops#1 = compare::$23
Constant (const byte) compare::r#1 = TT
Constant (const byte*) compare::ops#2 = compare::$24
Constant (const byte) compare::r#2 = TT
Constant (const byte*) compare::ops#3 = compare::$25
Constant (const byte) compare::r#3 = TT
Constant (const byte*) compare::ops#4 = compare::$26
Constant (const byte) compare::r#4 = TT
Constant (const byte*) compare::ops#5 = compare::$27
Constant (const byte) compare::r#5 = TT
Constant (const byte*) compare::ops#6 = compare::$28
Constant (const byte) compare::r#6 = TT
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$2 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
if() condition always true - replacing block destination [108] if(true) goto main::@9
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [95] main::op#1 ← ++ main::op#2 to ++
Resolved ranged comparison value [97] if(main::op#1!=rangelast(0,5)) goto main::@3 to (number) 6
Resolved ranged next value [101] main::j#1 ← ++ main::j#2 to ++
Resolved ranged comparison value [103] if(main::j#1!=rangelast(0,2)) goto main::@2 to (number) 3
Resolved ranged next value [104] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [106] if(main::i#1!=rangelast(0,2)) goto main::@1 to (number) 3
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 6 in if((byte) main::op#1!=(number) 6) goto main::@3
Adding number conversion cast (unumber) 3 in if((byte) main::j#1!=(number) 3) goto main::@2
Adding number conversion cast (unumber) 3 in if((byte) main::i#1!=(number) 3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$2 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$2+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [45] (byte~) main::$8 ← (byte) main::i#2 * (const byte) SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [48] (byte~) main::$9 ← (byte) main::j#2 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::op#0
Inlining constant with var siblings (const byte) main::s#2
Inlining constant with var siblings (const byte) compare::r#0
Inlining constant with var siblings (const byte*) compare::ops#0
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte) compare::r#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte) compare::r#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte) compare::r#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte) compare::r#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte) compare::r#5
Inlining constant with var siblings (const byte*) compare::ops#6
Inlining constant with var siblings (const byte) compare::r#6
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined compare::ops#0 = (byte*) 0
Constant inlined compare::r#1 = (const byte) TT
Constant inlined compare::r#0 = (const byte) FF
Constant inlined compare::r#3 = (const byte) TT
Constant inlined compare::r#2 = (const byte) TT
Constant inlined compare::r#5 = (const byte) TT
Constant inlined compare::r#4 = (const byte) TT
Constant inlined memset::$2 = (byte*)(const void*) memset::str#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::j#0 = (byte) 0
Constant inlined main::op#0 = (byte) 0
Constant inlined main::s#0 = (byte) 0
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined main::s#2 = (byte) 0
Constant inlined compare::$23 = (const byte*) compare::ops#1
Constant inlined compare::$24 = (const byte*) compare::ops#2
Constant inlined compare::r#6 = (const byte) TT
Constant inlined compare::$25 = (const byte*) compare::ops#3
Constant inlined compare::$26 = (const byte*) compare::ops#4
Constant inlined compare::$27 = (const byte*) compare::ops#5
Constant inlined compare::$28 = (const byte*) compare::ops#6
Constant inlined print_char::ch#1 = (byte) ' '
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte*) compare::ops#6
Eliminating unused constant (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte*) compare::ops#6
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@18(between main::@7 and main::@1)
Added new block during phi lifting main::@19(between main::@6 and main::@2)
Added new block during phi lifting main::@20(between main::@4 and main::@3)
Added new block during phi lifting main::@21(between main::@16 and main::@4)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @17
Adding NOP phi() at start of @43
Adding NOP phi() at start of @44
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of compare::@18
Adding NOP phi() at start of compare::@38
Adding NOP phi() at start of compare::@20
Adding NOP phi() at start of compare::@22
Adding NOP phi() at start of compare::@24
Adding NOP phi() at start of compare::@26
Adding NOP phi() at start of compare::@28
Adding NOP phi() at start of print_sword::@7
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_cls:7 compare:25 print_ln:29 
Calls in [compare] to print_sword:76 print_str:78 print_sword:82 print_char:86 
Calls in [print_sword] to print_char:116 print_word:120 print_char:124 
Calls in [print_word] to print_byte:129 print_byte:132 
Calls in [print_byte] to print_char:140 print_char:145 
Calls in [print_cls] to memset:159 

Created 33 initial phi equivalence classes
Coalesced [12] print_char_cursor#110 ← print_char_cursor#81
Coalesced [13] main::s#12 ← main::s#7
Coalesced [14] print_line_cursor#32 ← print_line_cursor#28
Coalesced [18] print_char_cursor#112 ← print_char_cursor#71
Coalesced [19] main::s#14 ← main::s#5
Coalesced [20] print_line_cursor#34 ← print_line_cursor#26
Not coalescing [30] print_char_cursor#115 ← print_line_cursor#1
Coalesced [31] print_line_cursor#37 ← print_line_cursor#1
Coalesced [40] main::i#11 ← main::i#1
Coalesced [41] print_char_cursor#109 ← print_char_cursor#72
Coalesced [42] main::s#11 ← main::s#10
Coalesced [43] print_line_cursor#31 ← print_line_cursor#23
Coalesced [44] main::j#9 ← main::j#1
Coalesced (already) [45] print_char_cursor#111 ← print_char_cursor#72
Coalesced (already) [46] main::s#13 ← main::s#10
Coalesced (already) [47] print_line_cursor#33 ← print_line_cursor#23
Coalesced [48] main::op#7 ← main::op#1
Coalesced (already) [49] print_char_cursor#113 ← print_char_cursor#72
Coalesced (already) [50] main::s#15 ← main::s#10
Coalesced (already) [51] print_line_cursor#35 ← print_line_cursor#23
Coalesced [52] print_char_cursor#114 ← print_char_cursor#15
Coalesced [53] main::s#16 ← main::s#1
Coalesced (already) [54] print_line_cursor#36 ← print_line_cursor#19
Coalesced [55] print_line_cursor#29 ← print_line_cursor#19
Coalesced (already) [61] print_line_cursor#30 ← print_line_cursor#1
Coalesced [71] compare::r#28 ← compare::r#12
Coalesced [74] print_sword::w#9 ← print_sword::w#1
Coalesced [75] print_char_cursor#102 ← print_char_cursor#64
Coalesced [80] print_sword::w#10 ← print_sword::w#2
Coalesced [81] print_char_cursor#103 ← print_char_cursor#2
Coalesced [84] print_char::ch#6 ← print_char::ch#4
Coalesced [85] print_char_cursor#104 ← print_char_cursor#15
Coalesced [92] compare::r#29 ← compare::r#13
Coalesced [96] compare::r#30 ← compare::r#14
Coalesced [100] compare::r#31 ← compare::r#15
Coalesced [104] compare::r#32 ← compare::r#16
Coalesced [108] compare::r#33 ← compare::r#17
Coalesced (already) [115] print_char_cursor#108 ← print_char_cursor#58
Coalesced [117] print_sword::w#12 ← print_sword::w#3
Coalesced (already) [123] print_char_cursor#107 ← print_char_cursor#58
Coalesced [126] print_sword::w#11 ← print_sword::w#0
Coalesced [128] print_byte::b#4 ← print_byte::b#0
Coalesced [131] print_byte::b#5 ← print_byte::b#1
Coalesced [138] print_char::ch#7 ← print_char::ch#2
Coalesced (already) [139] print_char_cursor#105 ← print_char_cursor#15
Coalesced [143] print_char::ch#8 ← print_char::ch#3
Coalesced (already) [144] print_char_cursor#106 ← print_char_cursor#15
Coalesced [148] print_str::str#5 ← print_str::str#1
Coalesced (already) [149] print_char_cursor#100 ← print_char_cursor#15
Coalesced [156] print_str::str#6 ← print_str::str#0
Coalesced [157] print_char_cursor#101 ← print_char_cursor#1
Coalesced [170] memset::dst#4 ← memset::dst#1
Coalesced down to 13 phi equivalence classes
Culled Empty Block (label) @17
Culled Empty Block (label) @44
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@18
Culled Empty Block (label) main::@19
Culled Empty Block (label) main::@20
Culled Empty Block (label) main::@21
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) compare::@38
Culled Empty Block (label) print_sword::@6
Culled Empty Block (label) print_sword::@7
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block @43 to @1
Renumbering block memset::@4 to memset::@1
Renumbering block memset::@5 to memset::@2
Renumbering block print_sword::@5 to print_sword::@4
Renumbering block main::@9 to main::@8
Renumbering block main::@16 to main::@9
Renumbering block main::@17 to main::@10
Renumbering block compare::@11 to compare::@6
Renumbering block compare::@12 to compare::@7
Renumbering block compare::@13 to compare::@8
Renumbering block compare::@14 to compare::@9
Renumbering block compare::@15 to compare::@10
Renumbering block compare::@16 to compare::@11
Renumbering block compare::@17 to compare::@12
Renumbering block compare::@18 to compare::@13
Renumbering block compare::@20 to compare::@14
Renumbering block compare::@22 to compare::@15
Renumbering block compare::@24 to compare::@16
Renumbering block compare::@26 to compare::@17
Renumbering block compare::@28 to compare::@18
Renumbering block compare::@29 to compare::@19
Renumbering block compare::@30 to compare::@20
Renumbering block compare::@31 to compare::@21
Renumbering block compare::@32 to compare::@22
Renumbering block compare::@33 to compare::@23
Renumbering block compare::@34 to compare::@24
Renumbering block compare::@35 to compare::@25
Renumbering block compare::@36 to compare::@26
Renumbering block compare::@37 to compare::@27
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of compare::@13
Adding NOP phi() at start of compare::@14
Adding NOP phi() at start of compare::@15
Adding NOP phi() at start of compare::@16
Adding NOP phi() at start of compare::@17
Adding NOP phi() at start of compare::@18
Adding NOP phi() at start of print_sword::@3
Adding NOP phi() at start of print_sword::@1
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@7
  [6] (byte*) print_line_cursor#28 ← phi( main/(byte*) 1024 main::@7/(byte*) print_line_cursor#23 )
  [6] (byte) main::s#7 ← phi( main/(byte) 0 main::@7/(byte) main::s#10 )
  [6] (byte*) print_char_cursor#81 ← phi( main/(byte*) 1024 main::@7/(byte*) print_char_cursor#72 )
  [6] (byte) main::i#2 ← phi( main/(byte) 0 main::@7/(byte) main::i#1 )
  [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1
  [8] (signed word) main::w1#0 ← *((const signed word*) swords + (byte~) main::$8)
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [9] (byte*) print_line_cursor#26 ← phi( main::@1/(byte*) print_line_cursor#28 main::@6/(byte*) print_line_cursor#23 )
  [9] (byte) main::s#5 ← phi( main::@1/(byte) main::s#7 main::@6/(byte) main::s#10 )
  [9] (byte*) print_char_cursor#71 ← phi( main::@1/(byte*) print_char_cursor#81 main::@6/(byte*) print_char_cursor#72 )
  [9] (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@6/(byte) main::j#1 )
  [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1
  [11] (signed word) main::w2#0 ← *((const signed word*) swords + (byte~) main::$9)
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [12] (byte*) print_line_cursor#19 ← phi( main::@2/(byte*) print_line_cursor#26 main::@4/(byte*) print_line_cursor#23 )
  [12] (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 main::@4/(byte) main::s#10 )
  [12] (byte*) print_char_cursor#64 ← phi( main::@2/(byte*) print_char_cursor#71 main::@4/(byte*) print_char_cursor#72 )
  [12] (byte) main::op#2 ← phi( main::@2/(byte) 0 main::@4/(byte) main::op#1 )
  [13] (signed word) compare::w1#0 ← (signed word) main::w1#0
  [14] (signed word) compare::w2#0 ← (signed word) main::w2#0
  [15] (byte) compare::op#0 ← (byte) main::op#2
  [16] call compare 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [17] (byte) main::s#1 ← ++ (byte) main::s#3
  [18] if((byte) main::s#1!=(byte) 3) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@9
  [19] phi()
  [20] call print_ln 
  to:main::@10
main::@10: scope:[main]  from main::@5
  [21] (byte*) print_char_cursor#115 ← (byte*) print_line_cursor#1
  to:main::@4
main::@4: scope:[main]  from main::@10 main::@9
  [22] (byte*) print_line_cursor#23 ← phi( main::@9/(byte*) print_line_cursor#19 main::@10/(byte*) print_line_cursor#1 )
  [22] (byte) main::s#10 ← phi( main::@9/(byte) main::s#1 main::@10/(byte) 0 )
  [22] (byte*) print_char_cursor#72 ← phi( main::@9/(byte*) print_char_cursor#15 main::@10/(byte*) print_char_cursor#115 )
  [23] (byte) main::op#1 ← ++ (byte) main::op#2
  [24] if((byte) main::op#1!=(byte) 6) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@4
  [25] (byte) main::j#1 ← ++ (byte) main::j#2
  [26] if((byte) main::j#1!=(byte) 3) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  [27] (byte) main::i#1 ← ++ (byte) main::i#2
  [28] if((byte) main::i#1!=(byte) 3) goto main::@1
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  [29] phi()
  to:main::@8

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@5
  [30] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [31] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#19 print_ln::@1/(byte*) print_line_cursor#1 )
  [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28
  [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#15) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [34] return 
  to:@return

(void()) compare((signed word) compare::w1 , (signed word) compare::w2 , (byte) compare::op)
compare: scope:[compare]  from main::@3
  [35] if((byte) compare::op#0==(const byte) LT) goto compare::@1
  to:compare::@7
compare::@7: scope:[compare]  from compare
  [36] if((byte) compare::op#0==(const byte) LE) goto compare::@2
  to:compare::@8
compare::@8: scope:[compare]  from compare::@7
  [37] if((byte) compare::op#0==(const byte) GT) goto compare::@3
  to:compare::@9
compare::@9: scope:[compare]  from compare::@8
  [38] if((byte) compare::op#0==(const byte) GE) goto compare::@4
  to:compare::@10
compare::@10: scope:[compare]  from compare::@9
  [39] if((byte) compare::op#0==(const byte) EQ) goto compare::@5
  to:compare::@11
compare::@11: scope:[compare]  from compare::@10
  [40] if((byte) compare::op#0!=(const byte) NE) goto compare::@6
  to:compare::@12
compare::@12: scope:[compare]  from compare::@11
  [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@19
  to:compare::@13
compare::@13: scope:[compare]  from compare::@12
  [42] phi()
  to:compare::@19
compare::@19: scope:[compare]  from compare::@12 compare::@13
  [43] (byte) compare::r#12 ← phi( compare::@12/(const byte) FF compare::@13/(const byte) TT )
  to:compare::@6
compare::@6: scope:[compare]  from compare::@11 compare::@19 compare::@20 compare::@21 compare::@22 compare::@23 compare::@24
  [44] (byte) compare::r#10 ← phi( compare::@11/(const byte) FF compare::@19/(byte) compare::r#12 compare::@20/(byte) compare::r#13 compare::@21/(byte) compare::r#14 compare::@22/(byte) compare::r#15 compare::@23/(byte) compare::r#16 compare::@24/(byte) compare::r#17 )
  [44] (byte*) compare::ops#7 ← phi( compare::@11/(byte*) 0 compare::@19/(const byte*) compare::ops#1 compare::@20/(const byte*) compare::ops#2 compare::@21/(const byte*) compare::ops#3 compare::@22/(const byte*) compare::ops#4 compare::@23/(const byte*) compare::ops#5 compare::@24/(const byte*) compare::ops#6 )
  [45] (signed word) print_sword::w#1 ← (signed word) compare::w1#0
  [46] call print_sword 
  to:compare::@25
compare::@25: scope:[compare]  from compare::@6
  [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7
  [48] call print_str 
  to:compare::@26
compare::@26: scope:[compare]  from compare::@25
  [49] (signed word) print_sword::w#2 ← (signed word) compare::w2#0
  [50] call print_sword 
  to:compare::@27
compare::@27: scope:[compare]  from compare::@26
  [51] (byte) print_char::ch#4 ← (byte) compare::r#10
  [52] call print_char 
  to:compare::@return
compare::@return: scope:[compare]  from compare::@27
  [53] return 
  to:@return
compare::@5: scope:[compare]  from compare::@10
  [54] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@20
  to:compare::@14
compare::@14: scope:[compare]  from compare::@5
  [55] phi()
  to:compare::@20
compare::@20: scope:[compare]  from compare::@14 compare::@5
  [56] (byte) compare::r#13 ← phi( compare::@14/(const byte) TT compare::@5/(const byte) FF )
  to:compare::@6
compare::@4: scope:[compare]  from compare::@9
  [57] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@21
  to:compare::@15
compare::@15: scope:[compare]  from compare::@4
  [58] phi()
  to:compare::@21
compare::@21: scope:[compare]  from compare::@15 compare::@4
  [59] (byte) compare::r#14 ← phi( compare::@15/(const byte) TT compare::@4/(const byte) FF )
  to:compare::@6
compare::@3: scope:[compare]  from compare::@8
  [60] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@22
  to:compare::@16
compare::@16: scope:[compare]  from compare::@3
  [61] phi()
  to:compare::@22
compare::@22: scope:[compare]  from compare::@16 compare::@3
  [62] (byte) compare::r#15 ← phi( compare::@16/(const byte) TT compare::@3/(const byte) FF )
  to:compare::@6
compare::@2: scope:[compare]  from compare::@7
  [63] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@23
  to:compare::@17
compare::@17: scope:[compare]  from compare::@2
  [64] phi()
  to:compare::@23
compare::@23: scope:[compare]  from compare::@17 compare::@2
  [65] (byte) compare::r#16 ← phi( compare::@2/(const byte) FF compare::@17/(const byte) TT )
  to:compare::@6
compare::@1: scope:[compare]  from compare
  [66] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@24
  to:compare::@18
compare::@18: scope:[compare]  from compare::@1
  [67] phi()
  to:compare::@24
compare::@24: scope:[compare]  from compare::@1 compare::@18
  [68] (byte) compare::r#17 ← phi( compare::@1/(const byte) FF compare::@18/(const byte) TT )
  to:compare::@6

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from compare::@27 print_byte print_byte::@1 print_sword::@1 print_sword::@3
  [69] (byte*) print_char_cursor#43 ← phi( compare::@27/(byte*) print_char_cursor#15 print_byte/(byte*) print_char_cursor#15 print_byte::@1/(byte*) print_char_cursor#15 print_sword::@1/(byte*) print_char_cursor#58 print_sword::@3/(byte*) print_char_cursor#58 )
  [69] (byte) print_char::ch#5 ← phi( compare::@27/(byte) print_char::ch#4 print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sword::@1/(byte) '-' print_sword::@3/(byte) ' ' )
  [70] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#5
  [71] (byte*) print_char_cursor#15 ← ++ (byte*) print_char_cursor#43
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [72] return 
  to:@return

(void()) print_sword((signed word) print_sword::w)
print_sword: scope:[print_sword]  from compare::@26 compare::@6
  [73] (byte*) print_char_cursor#58 ← phi( compare::@6/(byte*) print_char_cursor#64 compare::@26/(byte*) print_char_cursor#2 )
  [73] (signed word) print_sword::w#3 ← phi( compare::@6/(signed word) print_sword::w#1 compare::@26/(signed word) print_sword::w#2 )
  [74] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword
  [75] phi()
  [76] call print_char 
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword::@3 print_sword::@4
  [77] (signed word) print_sword::w#5 ← phi( print_sword::@4/(signed word) print_sword::w#0 print_sword::@3/(signed word) print_sword::w#3 )
  [78] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5
  [79] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@2
  [80] return 
  to:@return
print_sword::@1: scope:[print_sword]  from print_sword
  [81] phi()
  [82] call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@1
  [83] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3
  to:print_sword::@2

(void()) print_word((word) print_word::w)
print_word: scope:[print_word]  from print_sword::@2
  [84] (byte) print_byte::b#0 ← > (word) print_word::w#0
  [85] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [86] (byte) print_byte::b#1 ← < (word) print_word::w#0
  [87] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [88] return 
  to:@return

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_word print_word::@1
  [89] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [90] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4
  [91] (byte) print_char::ch#2 ← *((const byte*) print_hextab + (byte~) print_byte::$0)
  [92] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [93] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
  [94] (byte) print_char::ch#3 ← *((const byte*) print_hextab + (byte~) print_byte::$2)
  [95] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [96] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from compare::@25
  [97] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [98] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#15 print_str::@2/(byte*) print_char_cursor#1 )
  [98] (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#1 print_str::@2/(byte*) print_str::str#0 )
  [99] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [100] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [101] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2)
  [102] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [103] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [104] phi()
  [105] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [106] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [107] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [108] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [109] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [110] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [111] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [112] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(void()) compare((signed word) compare::w1 , (signed word) compare::w2 , (byte) compare::op)
(byte) compare::op
(byte) compare::op#0 168.8333333333334
(byte*) compare::ops
(byte*) compare::ops#7 0.6666666666666666
(byte) compare::r
(byte) compare::r#10 1.9999999999999996
(byte) compare::r#12 2.0
(byte) compare::r#13 2.0
(byte) compare::r#14 2.0
(byte) compare::r#15 2.0
(byte) compare::r#16 2.0
(byte) compare::r#17 2.0
(signed word) compare::w1
(signed word) compare::w1#0 36.249999999999986
(signed word) compare::w2
(signed word) compare::w2#0 32.741935483870954
(void()) main()
(byte~) main::$8 22.0
(byte~) main::$9 202.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 1.5714285714285716
(byte) main::j
(byte) main::j#1 151.5
(byte) main::j#2 18.9375
(byte) main::op
(byte) main::op#1 1501.5
(byte) main::op#2 273.0
(byte) main::s
(byte) main::s#1 1501.5
(byte) main::s#10 302.0
(byte) main::s#3 420.59999999999997
(byte) main::s#5 71.0
(byte) main::s#7 7.333333333333333
(signed word) main::w1
(signed word) main::w1#0 53.26315789473684
(signed word) main::w2
(signed word) main::w2#0 78.71428571428571
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 22.0
(byte*) memset::dst#2 14.666666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#2 4.0
(byte) print_char::ch#3 4.0
(byte) print_char::ch#4 4.0
(byte) print_char::ch#5 8.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 10001.0
(byte*) print_char_cursor#115 2002.0
(byte*) print_char_cursor#15 297.62162162162167
(byte*) print_char_cursor#2 5001.166666666666
(byte*) print_char_cursor#43 7.0
(byte*) print_char_cursor#58 2.0
(byte*) print_char_cursor#64 36.800000000000004
(byte*) print_char_cursor#71 71.0
(byte*) print_char_cursor#72 445.0
(byte*) print_char_cursor#81 7.333333333333333
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#1 6401.0
(byte*) print_line_cursor#19 233.8888888888889
(byte*) print_line_cursor#23 445.0
(byte*) print_line_cursor#26 71.0
(byte*) print_line_cursor#28 7.333333333333333
(byte*) print_line_cursor#9 20004.0
(void()) print_ln()
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 20002.0
(byte*) print_str::str#1 2.0
(byte*) print_str::str#2 10001.5
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 4.0
(signed word) print_sword::w#2 4.0
(signed word) print_sword::w#3 1.6666666666666665
(signed word) print_sword::w#5 4.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 2.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::op#2 main::op#1 ]
[ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#26 print_line_cursor#28 print_line_cursor#23 print_line_cursor#1 ]
[ compare::ops#7 ]
[ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
[ print_char::ch#5 print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#43 print_char_cursor#64 print_char_cursor#71 print_char_cursor#81 print_char_cursor#72 print_char_cursor#15 print_char_cursor#115 print_char_cursor#58 print_char_cursor#2 print_char_cursor#1 ]
[ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_str::str#2 print_str::str#1 print_str::str#0 ]
[ memset::dst#2 memset::dst#1 ]
Added variable main::$8 to live range equivalence class [ main::$8 ]
Added variable main::w1#0 to live range equivalence class [ main::w1#0 ]
Added variable main::$9 to live range equivalence class [ main::$9 ]
Added variable main::w2#0 to live range equivalence class [ main::w2#0 ]
Added variable compare::w1#0 to live range equivalence class [ compare::w1#0 ]
Added variable compare::w2#0 to live range equivalence class [ compare::w2#0 ]
Added variable compare::op#0 to live range equivalence class [ compare::op#0 ]
Added variable print_word::w#0 to live range equivalence class [ print_word::w#0 ]
Added variable print_byte::$0 to live range equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to live range equivalence class [ print_byte::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::op#2 main::op#1 ]
[ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#26 print_line_cursor#28 print_line_cursor#23 print_line_cursor#1 ]
[ compare::ops#7 ]
[ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
[ print_char::ch#5 print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#43 print_char_cursor#64 print_char_cursor#71 print_char_cursor#81 print_char_cursor#72 print_char_cursor#15 print_char_cursor#115 print_char_cursor#58 print_char_cursor#2 print_char_cursor#1 ]
[ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_str::str#2 print_str::str#1 print_str::str#0 ]
[ memset::dst#2 memset::dst#1 ]
[ main::$8 ]
[ main::w1#0 ]
[ main::$9 ]
[ main::w2#0 ]
[ compare::w1#0 ]
[ compare::w2#0 ]
[ compare::op#0 ]
[ print_word::w#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::j#2 main::j#1 ]
Allocated zp[1]:4 [ main::op#2 main::op#1 ]
Allocated zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Allocated zp[2]:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#26 print_line_cursor#28 print_line_cursor#23 print_line_cursor#1 ]
Allocated zp[2]:8 [ compare::ops#7 ]
Allocated zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Allocated zp[1]:11 [ print_char::ch#5 print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
Allocated zp[2]:12 [ print_char_cursor#43 print_char_cursor#64 print_char_cursor#71 print_char_cursor#81 print_char_cursor#72 print_char_cursor#15 print_char_cursor#115 print_char_cursor#58 print_char_cursor#2 print_char_cursor#1 ]
Allocated zp[2]:14 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ]
Allocated zp[1]:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp[2]:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ]
Allocated zp[2]:19 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:21 [ main::$8 ]
Allocated zp[2]:22 [ main::w1#0 ]
Allocated zp[1]:24 [ main::$9 ]
Allocated zp[2]:25 [ main::w2#0 ]
Allocated zp[2]:27 [ compare::w1#0 ]
Allocated zp[2]:29 [ compare::w2#0 ]
Allocated zp[1]:31 [ compare::op#0 ]
Allocated zp[2]:32 [ print_word::w#0 ]
Allocated zp[1]:34 [ print_byte::$0 ]
Allocated zp[1]:35 [ print_byte::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test signed word comparisons
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const LT = 0
  .const LE = 1
  .const GT = 2
  .const GE = 3
  .const EQ = 4
  .const NE = 5
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_char_cursor = $c
  .label print_line_cursor = 6
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __8 = $15
    .label __9 = $18
    .label w1 = $16
    .label w2 = $19
    .label s = 5
    .label op = 4
    .label j = 3
    .label i = 2
    // [5] call print_cls 
    // [104] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte*) print_line_cursor#28 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [6] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [6] phi (byte*) print_char_cursor#81 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [6] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  __b1_from___b7:
    // [6] phi (byte*) print_line_cursor#28 = (byte*) print_line_cursor#23 [phi:main::@7->main::@1#0] -- register_copy 
    // [6] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
    // [6] phi (byte*) print_char_cursor#81 = (byte*) print_char_cursor#72 [phi:main::@7->main::@1#2] -- register_copy 
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z __8
    // [8] (signed word) main::w1#0 ← *((const signed word*) swords + (byte~) main::$8) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __8
    lda swords,y
    sta.z w1
    lda swords+1,y
    sta.z w1+1
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [9] phi (byte*) print_line_cursor#26 = (byte*) print_line_cursor#28 [phi:main::@1->main::@2#0] -- register_copy 
    // [9] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
    // [9] phi (byte*) print_char_cursor#71 = (byte*) print_char_cursor#81 [phi:main::@1->main::@2#2] -- register_copy 
    // [9] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b2
    // [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [9] phi (byte*) print_line_cursor#26 = (byte*) print_line_cursor#23 [phi:main::@6->main::@2#0] -- register_copy 
    // [9] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
    // [9] phi (byte*) print_char_cursor#71 = (byte*) print_char_cursor#72 [phi:main::@6->main::@2#2] -- register_copy 
    // [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z j
    asl
    sta.z __9
    // [11] (signed word) main::w2#0 ← *((const signed word*) swords + (byte~) main::$9) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __9
    lda swords,y
    sta.z w2
    lda swords+1,y
    sta.z w2+1
    // [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#26 [phi:main::@2->main::@3#0] -- register_copy 
    // [12] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
    // [12] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#71 [phi:main::@2->main::@3#2] -- register_copy 
    // [12] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta.z op
    jmp __b3
    // [12] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#23 [phi:main::@4->main::@3#0] -- register_copy 
    // [12] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
    // [12] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#72 [phi:main::@4->main::@3#2] -- register_copy 
    // [12] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [13] (signed word) compare::w1#0 ← (signed word) main::w1#0 -- vwsz1=vwsz2 
    lda.z w1
    sta.z compare.w1
    lda.z w1+1
    sta.z compare.w1+1
    // [14] (signed word) compare::w2#0 ← (signed word) main::w2#0 -- vwsz1=vwsz2 
    lda.z w2
    sta.z compare.w2
    lda.z w2+1
    sta.z compare.w2+1
    // [15] (byte) compare::op#0 ← (byte) main::op#2 -- vbuz1=vbuz2 
    lda.z op
    sta.z compare.op
    // [16] call compare 
    jsr compare
    jmp __b9
    // main::@9
  __b9:
    // [17] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [18] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z s
    bne __b4_from___b9
    // [19] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  __b5_from___b9:
    jmp __b5
    // main::@5
  __b5:
    // [20] call print_ln 
    // [30] phi from main::@5 to print_ln [phi:main::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b10
    // main::@10
  __b10:
    // [21] (byte*) print_char_cursor#115 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [22] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
  __b4_from___b10:
    // [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:main::@10->main::@4#0] -- register_copy 
    // [22] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [22] phi (byte*) print_char_cursor#72 = (byte*) print_char_cursor#115 [phi:main::@10->main::@4#2] -- register_copy 
    jmp __b4
    // [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  __b4_from___b9:
    // [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#19 [phi:main::@9->main::@4#0] -- register_copy 
    // [22] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
    // [22] phi (byte*) print_char_cursor#72 = (byte*) print_char_cursor#15 [phi:main::@9->main::@4#2] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [23] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuz1=_inc_vbuz1 
    inc.z op
    // [24] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z op
    bne __b3_from___b4
    jmp __b6
    // main::@6
  __b6:
    // [25] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [26] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z j
    bne __b2_from___b6
    jmp __b7
    // main::@7
  __b7:
    // [27] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [28] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne __b1_from___b7
    // [29] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  __b8_from___b7:
  __b8_from___b8:
    jmp __b8
  // loop forever
    // main::@8
  __b8:
    jmp __b8_from___b8
}
  // print_ln
// Print a newline
print_ln: {
    // [31] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [31] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#15) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [34] return 
    rts
}
  // compare
// Compare two words using an operator
// compare(signed word zp($1b) w1, signed word zp($1d) w2, byte zp($1f) op)
compare: {
    .label w1 = $1b
    .label w2 = $1d
    .label op = $1f
    .label ops = 8
    .label r = $a
    // [35] if((byte) compare::op#0==(const byte) LT) goto compare::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #LT
    cmp.z op
    beq __b1
    jmp __b7
    // compare::@7
  __b7:
    // [36] if((byte) compare::op#0==(const byte) LE) goto compare::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #LE
    cmp.z op
    beq __b2
    jmp __b8
    // compare::@8
  __b8:
    // [37] if((byte) compare::op#0==(const byte) GT) goto compare::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #GT
    cmp.z op
    beq __b3
    jmp __b9
    // compare::@9
  __b9:
    // [38] if((byte) compare::op#0==(const byte) GE) goto compare::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #GE
    cmp.z op
    beq __b4
    jmp __b10
    // compare::@10
  __b10:
    // [39] if((byte) compare::op#0==(const byte) EQ) goto compare::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda #EQ
    cmp.z op
    beq __b5
    jmp __b11
    // compare::@11
  __b11:
    // [40] if((byte) compare::op#0!=(const byte) NE) goto compare::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #NE
    cmp.z op
    bne __b6_from___b11
    jmp __b12
    // compare::@12
  __b12:
    // [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@19 -- vwsz1_eq_vwsz2_then_la1 
    lda.z w1
    cmp.z w2
    bne !+
    lda.z w1+1
    cmp.z w2+1
    beq __b19_from___b12
  !:
    // [42] phi from compare::@12 to compare::@13 [phi:compare::@12->compare::@13]
  __b13_from___b12:
    jmp __b13
    // compare::@13
  __b13:
    // [43] phi from compare::@13 to compare::@19 [phi:compare::@13->compare::@19]
  __b19_from___b13:
    // [43] phi (byte) compare::r#12 = (const byte) TT [phi:compare::@13->compare::@19#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b19
    // [43] phi from compare::@12 to compare::@19 [phi:compare::@12->compare::@19]
  __b19_from___b12:
    // [43] phi (byte) compare::r#12 = (const byte) FF [phi:compare::@12->compare::@19#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b19
    // compare::@19
  __b19:
    // [44] phi from compare::@19 to compare::@6 [phi:compare::@19->compare::@6]
  __b6_from___b19:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#12 [phi:compare::@19->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#1 [phi:compare::@19->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta.z ops
    lda #>ops_1
    sta.z ops+1
    jmp __b6
    // [44] phi from compare::@11 to compare::@6 [phi:compare::@11->compare::@6]
  __b6_from___b11:
    // [44] phi (byte) compare::r#10 = (const byte) FF [phi:compare::@11->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // [44] phi (byte*) compare::ops#7 = (byte*) 0 [phi:compare::@11->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta.z ops
    lda #>0
    sta.z ops+1
    jmp __b6
    // compare::@6
  __b6:
    // [45] (signed word) print_sword::w#1 ← (signed word) compare::w1#0 -- vwsz1=vwsz2 
    lda.z w1
    sta.z print_sword.w
    lda.z w1+1
    sta.z print_sword.w+1
    // [46] call print_sword 
    // [73] phi from compare::@6 to print_sword [phi:compare::@6->print_sword]
  print_sword_from___b6:
    // [73] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#64 [phi:compare::@6->print_sword#0] -- register_copy 
    // [73] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:compare::@6->print_sword#1] -- register_copy 
    jsr print_sword
    jmp __b25
    // compare::@25
  __b25:
    // [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7 -- pbuz1=pbuz2 
    lda.z ops
    sta.z print_str.str
    lda.z ops+1
    sta.z print_str.str+1
    // [48] call print_str 
    // [97] phi from compare::@25 to print_str [phi:compare::@25->print_str]
  print_str_from___b25:
    jsr print_str
    jmp __b26
    // compare::@26
  __b26:
    // [49] (signed word) print_sword::w#2 ← (signed word) compare::w2#0 -- vwsz1=vwsz2 
    lda.z w2
    sta.z print_sword.w
    lda.z w2+1
    sta.z print_sword.w+1
    // [50] call print_sword 
    // [73] phi from compare::@26 to print_sword [phi:compare::@26->print_sword]
  print_sword_from___b26:
    // [73] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#2 [phi:compare::@26->print_sword#0] -- register_copy 
    // [73] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:compare::@26->print_sword#1] -- register_copy 
    jsr print_sword
    jmp __b27
    // compare::@27
  __b27:
    // [51] (byte) print_char::ch#4 ← (byte) compare::r#10 -- vbuz1=vbuz2 
    lda.z r
    sta.z print_char.ch
    // [52] call print_char 
    // [69] phi from compare::@27 to print_char [phi:compare::@27->print_char]
  print_char_from___b27:
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#15 [phi:compare::@27->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) print_char::ch#4 [phi:compare::@27->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // compare::@return
  __breturn:
    // [53] return 
    rts
    // compare::@5
  __b5:
    // [54] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@20 -- vwsz1_neq_vwsz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bne __b20_from___b5
    lda.z w1
    cmp.z w2
    bne __b20_from___b5
    // [55] phi from compare::@5 to compare::@14 [phi:compare::@5->compare::@14]
  __b14_from___b5:
    jmp __b14
    // compare::@14
  __b14:
    // [56] phi from compare::@14 to compare::@20 [phi:compare::@14->compare::@20]
  __b20_from___b14:
    // [56] phi (byte) compare::r#13 = (const byte) TT [phi:compare::@14->compare::@20#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b20
    // [56] phi from compare::@5 to compare::@20 [phi:compare::@5->compare::@20]
  __b20_from___b5:
    // [56] phi (byte) compare::r#13 = (const byte) FF [phi:compare::@5->compare::@20#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b20
    // compare::@20
  __b20:
    // [44] phi from compare::@20 to compare::@6 [phi:compare::@20->compare::@6]
  __b6_from___b20:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#13 [phi:compare::@20->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#2 [phi:compare::@20->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta.z ops
    lda #>ops_2
    sta.z ops+1
    jmp __b6
    // compare::@4
  __b4:
    // [57] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@21 -- vwsz1_lt_vwsz2_then_la1 
    lda.z w1
    cmp.z w2
    lda.z w1+1
    sbc.z w2+1
    bvc !+
    eor #$80
  !:
    bmi __b21_from___b4
  !e:
    // [58] phi from compare::@4 to compare::@15 [phi:compare::@4->compare::@15]
  __b15_from___b4:
    jmp __b15
    // compare::@15
  __b15:
    // [59] phi from compare::@15 to compare::@21 [phi:compare::@15->compare::@21]
  __b21_from___b15:
    // [59] phi (byte) compare::r#14 = (const byte) TT [phi:compare::@15->compare::@21#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b21
    // [59] phi from compare::@4 to compare::@21 [phi:compare::@4->compare::@21]
  __b21_from___b4:
    // [59] phi (byte) compare::r#14 = (const byte) FF [phi:compare::@4->compare::@21#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b21
    // compare::@21
  __b21:
    // [44] phi from compare::@21 to compare::@6 [phi:compare::@21->compare::@6]
  __b6_from___b21:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#14 [phi:compare::@21->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#3 [phi:compare::@21->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta.z ops
    lda #>ops_3
    sta.z ops+1
    jmp __b6
    // compare::@3
  __b3:
    // [60] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@22 -- vwsz1_le_vwsz2_then_la1 
    lda.z w2
    cmp.z w1
    lda.z w2+1
    sbc.z w1+1
    bvc !+
    eor #$80
  !:
    bpl __b22_from___b3
    // [61] phi from compare::@3 to compare::@16 [phi:compare::@3->compare::@16]
  __b16_from___b3:
    jmp __b16
    // compare::@16
  __b16:
    // [62] phi from compare::@16 to compare::@22 [phi:compare::@16->compare::@22]
  __b22_from___b16:
    // [62] phi (byte) compare::r#15 = (const byte) TT [phi:compare::@16->compare::@22#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b22
    // [62] phi from compare::@3 to compare::@22 [phi:compare::@3->compare::@22]
  __b22_from___b3:
    // [62] phi (byte) compare::r#15 = (const byte) FF [phi:compare::@3->compare::@22#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b22
    // compare::@22
  __b22:
    // [44] phi from compare::@22 to compare::@6 [phi:compare::@22->compare::@6]
  __b6_from___b22:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#15 [phi:compare::@22->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#4 [phi:compare::@22->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta.z ops
    lda #>ops_4
    sta.z ops+1
    jmp __b6
    // compare::@2
  __b2:
    // [63] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@23 -- vwsz1_gt_vwsz2_then_la1 
    lda.z w2
    cmp.z w1
    lda.z w2+1
    sbc.z w1+1
    bvc !+
    eor #$80
  !:
    bmi __b23_from___b2
  !e:
    // [64] phi from compare::@2 to compare::@17 [phi:compare::@2->compare::@17]
  __b17_from___b2:
    jmp __b17
    // compare::@17
  __b17:
    // [65] phi from compare::@17 to compare::@23 [phi:compare::@17->compare::@23]
  __b23_from___b17:
    // [65] phi (byte) compare::r#16 = (const byte) TT [phi:compare::@17->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b23
    // [65] phi from compare::@2 to compare::@23 [phi:compare::@2->compare::@23]
  __b23_from___b2:
    // [65] phi (byte) compare::r#16 = (const byte) FF [phi:compare::@2->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b23
    // compare::@23
  __b23:
    // [44] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
  __b6_from___b23:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#16 [phi:compare::@23->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#5 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta.z ops
    lda #>ops_5
    sta.z ops+1
    jmp __b6
    // compare::@1
  __b1:
    // [66] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@24 -- vwsz1_ge_vwsz2_then_la1 
    lda.z w1
    cmp.z w2
    lda.z w1+1
    sbc.z w2+1
    bvc !+
    eor #$80
  !:
    bpl __b24_from___b1
    // [67] phi from compare::@1 to compare::@18 [phi:compare::@1->compare::@18]
  __b18_from___b1:
    jmp __b18
    // compare::@18
  __b18:
    // [68] phi from compare::@18 to compare::@24 [phi:compare::@18->compare::@24]
  __b24_from___b18:
    // [68] phi (byte) compare::r#17 = (const byte) TT [phi:compare::@18->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b24
    // [68] phi from compare::@1 to compare::@24 [phi:compare::@1->compare::@24]
  __b24_from___b1:
    // [68] phi (byte) compare::r#17 = (const byte) FF [phi:compare::@1->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b24
    // compare::@24
  __b24:
    // [44] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
  __b6_from___b24:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@24->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#6 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta.z ops
    lda #>ops_6
    sta.z ops+1
    jmp __b6
    ops_1: .text "!="
    .byte 0
    ops_2: .text "=="
    .byte 0
    ops_3: .text ">="
    .byte 0
    ops_4: .text "> "
    .byte 0
    ops_5: .text "<="
    .byte 0
    ops_6: .text "< "
    .byte 0
}
  // print_char
// Print a single char
// print_char(byte zp($b) ch)
print_char: {
    .label ch = $b
    // [70] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [71] (byte*) print_char_cursor#15 ← ++ (byte*) print_char_cursor#43 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [72] return 
    rts
}
  // print_sword
// Print a signed word as HEX
// print_sword(signed word zp($e) w)
print_sword: {
    .label w = $e
    // [74] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sword
    // [75] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
  __b3_from_print_sword:
    jmp __b3
    // print_sword::@3
  __b3:
    // [76] call print_char 
    // [69] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
  print_char_from___b3:
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#58 [phi:print_sword::@3->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [77] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [77] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    jmp __b2
    // print_sword::@2
  __b2:
    // [78] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5 -- vwuz1=vwuz2 
    lda.z w
    sta.z print_word.w
    lda.z w+1
    sta.z print_word.w+1
    // [79] call print_word 
    jsr print_word
    jmp __breturn
    // print_sword::@return
  __breturn:
    // [80] return 
    rts
    // [81] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
  __b1_from_print_sword:
    jmp __b1
    // print_sword::@1
  __b1:
    // [82] call print_char 
    // [69] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
  print_char_from___b1:
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#58 [phi:print_sword::@1->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_sword::@4
  __b4:
    // [83] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_word
// Print a word as HEX
// print_word(word zp($20) w)
print_word: {
    .label w = $20
    // [84] (byte) print_byte::b#0 ← > (word) print_word::w#0 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [85] call print_byte 
    // [89] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [89] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#0] -- register_copy 
    jsr print_byte
    jmp __b1
    // print_word::@1
  __b1:
    // [86] (byte) print_byte::b#1 ← < (word) print_word::w#0 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [87] call print_byte 
    // [89] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from___b1:
    // [89] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#0] -- register_copy 
    jsr print_byte
    jmp __breturn
    // print_word::@return
  __breturn:
    // [88] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zp($10) b)
print_byte: {
    .label __0 = $22
    .label __2 = $23
    .label b = $10
    // [90] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [91] (byte) print_char::ch#2 ← *((const byte*) print_hextab + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [92] call print_char 
    // [69] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#15 [phi:print_byte->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_byte::@1
  __b1:
    // [93] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [94] (byte) print_char::ch#3 ← *((const byte*) print_hextab + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [95] call print_char 
    // [69] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from___b1:
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#15 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_byte::@return
  __breturn:
    // [96] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($11) str)
print_str: {
    .label str = $11
    // [98] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  __b1_from_print_str:
  __b1_from___b2:
    // [98] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#15 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [98] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [99] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [100] return 
    rts
    // print_str::@2
  __b2:
    // [101] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
    // [102] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [103] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [105] call memset 
    // [107] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [106] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $13
    // [108] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [108] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [109] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [110] return 
    rts
    // memset::@2
  __b2:
    // [111] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [112] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [108] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [108] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  swords: .word -$6fed, $12, $7fed

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 [ main::i#2 print_char_cursor#81 main::s#7 print_line_cursor#28 main::$8 ] ( main:2 [ main::i#2 print_char_cursor#81 main::s#7 print_line_cursor#28 main::$8 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Statement [8] (signed word) main::w1#0 ← *((const signed word*) swords + (byte~) main::$8) [ main::i#2 print_char_cursor#81 main::s#7 print_line_cursor#28 main::w1#0 ] ( main:2 [ main::i#2 print_char_cursor#81 main::s#7 print_line_cursor#28 main::w1#0 ] ) always clobbers reg byte a 
Statement [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#71 main::s#5 print_line_cursor#26 main::$9 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#71 main::s#5 print_line_cursor#26 main::$9 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::j#2 main::j#1 ]
Statement [11] (signed word) main::w2#0 ← *((const signed word*) swords + (byte~) main::$9) [ main::i#2 main::w1#0 main::j#2 print_char_cursor#71 main::s#5 print_line_cursor#26 main::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#71 main::s#5 print_line_cursor#26 main::w2#0 ] ) always clobbers reg byte a 
Statement [13] (signed word) compare::w1#0 ← (signed word) main::w1#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#64 main::s#3 print_line_cursor#19 compare::w1#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#64 main::s#3 print_line_cursor#19 compare::w1#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::op#2 main::op#1 ]
Statement [14] (signed word) compare::w2#0 ← (signed word) main::w2#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#64 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#64 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [21] (byte*) print_char_cursor#115 ← (byte*) print_line_cursor#1 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#115 print_line_cursor#1 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#115 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#15 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#15 ] ) always clobbers reg byte a 
Statement [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#15) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#15 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#15 ] ) always clobbers reg byte a 
Statement [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@19 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [45] (signed word) print_sword::w#1 ← (signed word) compare::w1#0 [ print_char_cursor#64 compare::w2#0 compare::ops#7 compare::r#10 print_sword::w#1 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w2#0 compare::ops#7 compare::r#10 print_sword::w#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Statement [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7 [ compare::w2#0 print_char_cursor#15 compare::r#10 print_str::str#1 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 print_char_cursor#15 compare::r#10 print_str::str#1 ] ) always clobbers reg byte a 
Statement [49] (signed word) print_sword::w#2 ← (signed word) compare::w2#0 [ compare::r#10 print_sword::w#2 print_char_cursor#2 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#2 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [54] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@20 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [57] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@21 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [60] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@22 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [63] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@23 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [66] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@24 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [70] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#5 [ print_char_cursor#43 ] ( main:2::compare:16::print_char:52 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_char:76 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_char:76 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_char:82 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_char:82 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:85::print_char:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:85::print_char:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#0 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:87::print_char:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:87::print_char:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:85::print_char:95 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:85::print_char:95 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#0 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:87::print_char:95 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:87::print_char:95 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#43 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ main::op#2 main::op#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Removing always clobbered register reg byte y as potential for zp[1]:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [74] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1 [ print_char_cursor#58 print_sword::w#3 ] ( main:2::compare:16::print_sword:46 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#58 print_sword::w#3 ] main:2::compare:16::print_sword:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#58 print_sword::w#3 ] ) always clobbers reg byte a 
Statement [78] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5 [ print_char_cursor#15 print_word::w#0 ] ( main:2::compare:16::print_sword:46 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_word::w#0 ] main:2::compare:16::print_sword:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_word::w#0 ] ) always clobbers reg byte a 
Statement [83] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 [ print_char_cursor#15 print_sword::w#0 ] ( main:2::compare:16::print_sword:46 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_sword::w#0 ] main:2::compare:16::print_sword:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [84] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ print_char_cursor#15 print_word::w#0 print_byte::b#0 ] ( main:2::compare:16::print_sword:46::print_word:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_word::w#0 print_byte::b#0 ] main:2::compare:16::print_sword:50::print_word:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_word::w#0 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [86] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ print_char_cursor#15 print_byte::b#1 ] ( main:2::compare:16::print_sword:46::print_word:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_byte::b#1 ] main:2::compare:16::print_sword:50::print_word:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [90] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_char_cursor#15 print_byte::b#2 print_byte::$0 ] ( main:2::compare:16::print_sword:46::print_word:79::print_byte:85 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 print_char_cursor#15 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:85 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#0 print_char_cursor#15 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_byte::b#2 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [93] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#15 print_byte::$2 ] ( main:2::compare:16::print_sword:46::print_word:79::print_byte:85 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 print_char_cursor#15 print_byte::$2 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:85 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#0 print_char_cursor#15 print_byte::$2 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_byte::$2 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_byte::$2 ] ) always clobbers reg byte a 
Statement [99] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:48 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [101] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:48 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [109] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:105 [ memset::dst#2 ] ) always clobbers reg byte a 
Statement [111] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:105 [ memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 [ main::i#2 print_char_cursor#81 main::s#7 print_line_cursor#28 main::$8 ] ( main:2 [ main::i#2 print_char_cursor#81 main::s#7 print_line_cursor#28 main::$8 ] ) always clobbers reg byte a 
Statement [8] (signed word) main::w1#0 ← *((const signed word*) swords + (byte~) main::$8) [ main::i#2 print_char_cursor#81 main::s#7 print_line_cursor#28 main::w1#0 ] ( main:2 [ main::i#2 print_char_cursor#81 main::s#7 print_line_cursor#28 main::w1#0 ] ) always clobbers reg byte a 
Statement [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#71 main::s#5 print_line_cursor#26 main::$9 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#71 main::s#5 print_line_cursor#26 main::$9 ] ) always clobbers reg byte a 
Statement [11] (signed word) main::w2#0 ← *((const signed word*) swords + (byte~) main::$9) [ main::i#2 main::w1#0 main::j#2 print_char_cursor#71 main::s#5 print_line_cursor#26 main::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#71 main::s#5 print_line_cursor#26 main::w2#0 ] ) always clobbers reg byte a 
Statement [13] (signed word) compare::w1#0 ← (signed word) main::w1#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#64 main::s#3 print_line_cursor#19 compare::w1#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#64 main::s#3 print_line_cursor#19 compare::w1#0 ] ) always clobbers reg byte a 
Statement [14] (signed word) compare::w2#0 ← (signed word) main::w2#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#64 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#64 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [21] (byte*) print_char_cursor#115 ← (byte*) print_line_cursor#1 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#115 print_line_cursor#1 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#115 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#15 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#15 ] ) always clobbers reg byte a 
Statement [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#15) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#15 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#15 ] ) always clobbers reg byte a 
Statement [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@19 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [45] (signed word) print_sword::w#1 ← (signed word) compare::w1#0 [ print_char_cursor#64 compare::w2#0 compare::ops#7 compare::r#10 print_sword::w#1 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w2#0 compare::ops#7 compare::r#10 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7 [ compare::w2#0 print_char_cursor#15 compare::r#10 print_str::str#1 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 print_char_cursor#15 compare::r#10 print_str::str#1 ] ) always clobbers reg byte a 
Statement [49] (signed word) print_sword::w#2 ← (signed word) compare::w2#0 [ compare::r#10 print_sword::w#2 print_char_cursor#2 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#2 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [54] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@20 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [57] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@21 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [60] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@22 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [63] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@23 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [66] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@24 [ print_char_cursor#64 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#64 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [70] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#5 [ print_char_cursor#43 ] ( main:2::compare:16::print_char:52 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_char:76 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_char:76 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_char:82 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_char:82 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:85::print_char:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:85::print_char:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#0 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:87::print_char:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:87::print_char:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:85::print_char:95 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:85::print_char:95 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#0 print_char_cursor#43 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:87::print_char:95 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:87::print_char:95 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#43 ] ) always clobbers reg byte y 
Statement [74] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1 [ print_char_cursor#58 print_sword::w#3 ] ( main:2::compare:16::print_sword:46 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#58 print_sword::w#3 ] main:2::compare:16::print_sword:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#58 print_sword::w#3 ] ) always clobbers reg byte a 
Statement [78] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5 [ print_char_cursor#15 print_word::w#0 ] ( main:2::compare:16::print_sword:46 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_word::w#0 ] main:2::compare:16::print_sword:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_word::w#0 ] ) always clobbers reg byte a 
Statement [83] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 [ print_char_cursor#15 print_sword::w#0 ] ( main:2::compare:16::print_sword:46 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_sword::w#0 ] main:2::compare:16::print_sword:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [84] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ print_char_cursor#15 print_word::w#0 print_byte::b#0 ] ( main:2::compare:16::print_sword:46::print_word:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_word::w#0 print_byte::b#0 ] main:2::compare:16::print_sword:50::print_word:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_word::w#0 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [86] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ print_char_cursor#15 print_byte::b#1 ] ( main:2::compare:16::print_sword:46::print_word:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_byte::b#1 ] main:2::compare:16::print_sword:50::print_word:79 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [90] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_char_cursor#15 print_byte::b#2 print_byte::$0 ] ( main:2::compare:16::print_sword:46::print_word:79::print_byte:85 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 print_char_cursor#15 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:85 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#0 print_char_cursor#15 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_byte::b#2 print_byte::$0 ] ) always clobbers reg byte a 
Statement [93] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#15 print_byte::$2 ] ( main:2::compare:16::print_sword:46::print_word:79::print_byte:85 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_word::w#0 print_char_cursor#15 print_byte::$2 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:85 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_word::w#0 print_char_cursor#15 print_byte::$2 ] main:2::compare:16::print_sword:46::print_word:79::print_byte:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#15 print_byte::$2 ] main:2::compare:16::print_sword:50::print_word:79::print_byte:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#15 print_byte::$2 ] ) always clobbers reg byte a 
Statement [99] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:48 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [101] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:48 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [109] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:105 [ memset::dst#2 ] ) always clobbers reg byte a 
Statement [111] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:105 [ memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::j#2 main::j#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ main::op#2 main::op#1 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[2]:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#26 print_line_cursor#28 print_line_cursor#23 print_line_cursor#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ compare::ops#7 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:11 [ print_char::ch#5 print_char::ch#4 print_char::ch#2 print_char::ch#3 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:12 [ print_char_cursor#43 print_char_cursor#64 print_char_cursor#71 print_char_cursor#81 print_char_cursor#72 print_char_cursor#15 print_char_cursor#115 print_char_cursor#58 print_char_cursor#2 print_char_cursor#1 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ] : zp[2]:14 , 
Potential registers zp[1]:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp[1]:16 , reg byte x , 
Potential registers zp[2]:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ memset::dst#2 memset::dst#1 ] : zp[2]:19 , 
Potential registers zp[1]:21 [ main::$8 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:22 [ main::w1#0 ] : zp[2]:22 , 
Potential registers zp[1]:24 [ main::$9 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:25 [ main::w2#0 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ compare::w1#0 ] : zp[2]:27 , 
Potential registers zp[2]:29 [ compare::w2#0 ] : zp[2]:29 , 
Potential registers zp[1]:31 [ compare::op#0 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:32 [ print_word::w#0 ] : zp[2]:32 , 
Potential registers zp[1]:34 [ print_byte::$0 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ print_byte::$2 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 27,162.22: zp[2]:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#26 print_line_cursor#28 print_line_cursor#23 print_line_cursor#1 ] 17,870.92: zp[2]:12 [ print_char_cursor#43 print_char_cursor#64 print_char_cursor#71 print_char_cursor#81 print_char_cursor#72 print_char_cursor#15 print_char_cursor#115 print_char_cursor#58 print_char_cursor#2 print_char_cursor#1 ] 
Uplift Scope [print_str] 30,005.5: zp[2]:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] 
Uplift Scope [main] 2,302.43: zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] 1,774.5: zp[1]:4 [ main::op#2 main::op#1 ] 202: zp[1]:24 [ main::$9 ] 170.44: zp[1]:3 [ main::j#2 main::j#1 ] 78.71: zp[2]:25 [ main::w2#0 ] 53.26: zp[2]:22 [ main::w1#0 ] 22: zp[1]:21 [ main::$8 ] 18.07: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [compare] 168.83: zp[1]:31 [ compare::op#0 ] 36.25: zp[2]:27 [ compare::w1#0 ] 32.74: zp[2]:29 [ compare::w2#0 ] 14: zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] 0.67: zp[2]:8 [ compare::ops#7 ] 
Uplift Scope [memset] 36.67: zp[2]:19 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [print_char] 20: zp[1]:11 [ print_char::ch#5 print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplift Scope [print_byte] 10: zp[1]:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp[1]:34 [ print_byte::$0 ] 4: zp[1]:35 [ print_byte::$2 ] 
Uplift Scope [print_sword] 17.67: zp[2]:14 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ] 
Uplift Scope [print_word] 2: zp[2]:32 [ print_word::w#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 

Uplifting [] best 1156365 combination zp[2]:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#26 print_line_cursor#28 print_line_cursor#23 print_line_cursor#1 ] zp[2]:12 [ print_char_cursor#43 print_char_cursor#64 print_char_cursor#71 print_char_cursor#81 print_char_cursor#72 print_char_cursor#15 print_char_cursor#115 print_char_cursor#58 print_char_cursor#2 print_char_cursor#1 ] 
Uplifting [print_str] best 1156365 combination zp[2]:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] 
Uplifting [main] best 1143925 combination zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] reg byte x [ main::op#2 main::op#1 ] reg byte a [ main::$9 ] zp[1]:3 [ main::j#2 main::j#1 ] zp[2]:25 [ main::w2#0 ] zp[2]:22 [ main::w1#0 ] reg byte a [ main::$8 ] zp[1]:2 [ main::i#2 main::i#1 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [compare] best 1140907 combination reg byte x [ compare::op#0 ] zp[2]:27 [ compare::w1#0 ] zp[2]:29 [ compare::w2#0 ] zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] zp[2]:8 [ compare::ops#7 ] 
Uplifting [memset] best 1140907 combination zp[2]:19 [ memset::dst#2 memset::dst#1 ] 
Uplifting [print_char] best 1140889 combination reg byte a [ print_char::ch#5 print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplifting [print_byte] best 1140881 combination zp[1]:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_sword] best 1140881 combination zp[2]:14 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ] 
Uplifting [print_word] best 1140881 combination zp[2]:32 [ print_word::w#0 ] 
Uplifting [RADIX] best 1140881 combination 
Uplifting [print_ln] best 1140881 combination 
Uplifting [print_cls] best 1140881 combination 
Attempting to uplift remaining variables inzp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Uplifting [main] best 1140881 combination zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::j#2 main::j#1 ]
Uplifting [main] best 1140881 combination zp[1]:3 [ main::j#2 main::j#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 1140881 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Uplifting [compare] best 1140881 combination zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] 
Attempting to uplift remaining variables inzp[1]:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Uplifting [print_byte] best 1140881 combination zp[1]:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 
Coalescing zero page register [ zp[2]:8 [ compare::ops#7 ] ] with [ zp[2]:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 ] ] with [ zp[2]:27 [ compare::w1#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 compare::w1#0 ] ] with [ zp[2]:32 [ print_word::w#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ main::w2#0 ] ] with [ zp[2]:29 [ compare::w2#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#26 print_line_cursor#28 print_line_cursor#23 print_line_cursor#1 ] ]
Allocated (was zp[1]:5) zp[1]:4 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Allocated (was zp[2]:8) zp[2]:5 [ compare::ops#7 print_str::str#2 print_str::str#1 print_str::str#0 ]
Allocated (was zp[1]:10) zp[1]:7 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Allocated (was zp[2]:12) zp[2]:8 [ print_char_cursor#43 print_char_cursor#64 print_char_cursor#71 print_char_cursor#81 print_char_cursor#72 print_char_cursor#15 print_char_cursor#115 print_char_cursor#58 print_char_cursor#2 print_char_cursor#1 ]
Allocated (was zp[2]:14) zp[2]:10 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 compare::w1#0 print_word::w#0 ]
Allocated (was zp[1]:16) zp[1]:12 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated (was zp[2]:19) zp[2]:13 [ memset::dst#2 memset::dst#1 print_line_cursor#9 print_line_cursor#19 print_line_cursor#26 print_line_cursor#28 print_line_cursor#23 print_line_cursor#1 ]
Allocated (was zp[2]:22) zp[2]:15 [ main::w1#0 ]
Allocated (was zp[2]:25) zp[2]:17 [ main::w2#0 compare::w2#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test signed word comparisons
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const LT = 0
  .const LE = 1
  .const GT = 2
  .const GE = 3
  .const EQ = 4
  .const NE = 5
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_char_cursor = 8
  .label print_line_cursor = $d
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label w1 = $f
    .label w2 = $11
    .label s = 4
    .label j = 3
    .label i = 2
    // [5] call print_cls 
    // [104] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte*) print_line_cursor#28 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [6] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [6] phi (byte*) print_char_cursor#81 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [6] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  __b1_from___b7:
    // [6] phi (byte*) print_line_cursor#28 = (byte*) print_line_cursor#23 [phi:main::@7->main::@1#0] -- register_copy 
    // [6] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
    // [6] phi (byte*) print_char_cursor#81 = (byte*) print_char_cursor#72 [phi:main::@7->main::@1#2] -- register_copy 
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [8] (signed word) main::w1#0 ← *((const signed word*) swords + (byte~) main::$8) -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda swords,y
    sta.z w1
    lda swords+1,y
    sta.z w1+1
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [9] phi (byte*) print_line_cursor#26 = (byte*) print_line_cursor#28 [phi:main::@1->main::@2#0] -- register_copy 
    // [9] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
    // [9] phi (byte*) print_char_cursor#71 = (byte*) print_char_cursor#81 [phi:main::@1->main::@2#2] -- register_copy 
    // [9] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b2
    // [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [9] phi (byte*) print_line_cursor#26 = (byte*) print_line_cursor#23 [phi:main::@6->main::@2#0] -- register_copy 
    // [9] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
    // [9] phi (byte*) print_char_cursor#71 = (byte*) print_char_cursor#72 [phi:main::@6->main::@2#2] -- register_copy 
    // [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z j
    asl
    // [11] (signed word) main::w2#0 ← *((const signed word*) swords + (byte~) main::$9) -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda swords,y
    sta.z w2
    lda swords+1,y
    sta.z w2+1
    // [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#26 [phi:main::@2->main::@3#0] -- register_copy 
    // [12] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
    // [12] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#71 [phi:main::@2->main::@3#2] -- register_copy 
    // [12] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [12] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#23 [phi:main::@4->main::@3#0] -- register_copy 
    // [12] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
    // [12] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#72 [phi:main::@4->main::@3#2] -- register_copy 
    // [12] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [13] (signed word) compare::w1#0 ← (signed word) main::w1#0 -- vwsz1=vwsz2 
    lda.z w1
    sta.z compare.w1
    lda.z w1+1
    sta.z compare.w1+1
    // [14] (signed word) compare::w2#0 ← (signed word) main::w2#0
    // [15] (byte) compare::op#0 ← (byte) main::op#2
    // [16] call compare 
    jsr compare
    jmp __b9
    // main::@9
  __b9:
    // [17] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [18] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z s
    bne __b4_from___b9
    // [19] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  __b5_from___b9:
    jmp __b5
    // main::@5
  __b5:
    // [20] call print_ln 
    // [30] phi from main::@5 to print_ln [phi:main::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b10
    // main::@10
  __b10:
    // [21] (byte*) print_char_cursor#115 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [22] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
  __b4_from___b10:
    // [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:main::@10->main::@4#0] -- register_copy 
    // [22] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [22] phi (byte*) print_char_cursor#72 = (byte*) print_char_cursor#115 [phi:main::@10->main::@4#2] -- register_copy 
    jmp __b4
    // [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  __b4_from___b9:
    // [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#19 [phi:main::@9->main::@4#0] -- register_copy 
    // [22] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
    // [22] phi (byte*) print_char_cursor#72 = (byte*) print_char_cursor#15 [phi:main::@9->main::@4#2] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [23] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuxx=_inc_vbuxx 
    inx
    // [24] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b3_from___b4
    jmp __b6
    // main::@6
  __b6:
    // [25] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [26] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z j
    bne __b2_from___b6
    jmp __b7
    // main::@7
  __b7:
    // [27] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [28] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne __b1_from___b7
    // [29] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  __b8_from___b7:
  __b8_from___b8:
    jmp __b8
  // loop forever
    // main::@8
  __b8:
    jmp __b8_from___b8
}
  // print_ln
// Print a newline
print_ln: {
    // [31] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [31] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#15) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [34] return 
    rts
}
  // compare
// Compare two words using an operator
// compare(signed word zp($a) w1, signed word zp($11) w2, byte register(X) op)
compare: {
    .label w1 = $a
    .label w2 = $11
    .label ops = 5
    .label r = 7
    // [35] if((byte) compare::op#0==(const byte) LT) goto compare::@1 -- vbuxx_eq_vbuc1_then_la1 
    cpx #LT
    beq __b1
    jmp __b7
    // compare::@7
  __b7:
    // [36] if((byte) compare::op#0==(const byte) LE) goto compare::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #LE
    beq __b2
    jmp __b8
    // compare::@8
  __b8:
    // [37] if((byte) compare::op#0==(const byte) GT) goto compare::@3 -- vbuxx_eq_vbuc1_then_la1 
    cpx #GT
    beq __b3
    jmp __b9
    // compare::@9
  __b9:
    // [38] if((byte) compare::op#0==(const byte) GE) goto compare::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #GE
    beq __b4
    jmp __b10
    // compare::@10
  __b10:
    // [39] if((byte) compare::op#0==(const byte) EQ) goto compare::@5 -- vbuxx_eq_vbuc1_then_la1 
    cpx #EQ
    beq __b5
    jmp __b11
    // compare::@11
  __b11:
    // [40] if((byte) compare::op#0!=(const byte) NE) goto compare::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NE
    bne __b6_from___b11
    jmp __b12
    // compare::@12
  __b12:
    // [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@19 -- vwsz1_eq_vwsz2_then_la1 
    lda.z w1
    cmp.z w2
    bne !+
    lda.z w1+1
    cmp.z w2+1
    beq __b19_from___b12
  !:
    // [42] phi from compare::@12 to compare::@13 [phi:compare::@12->compare::@13]
  __b13_from___b12:
    jmp __b13
    // compare::@13
  __b13:
    // [43] phi from compare::@13 to compare::@19 [phi:compare::@13->compare::@19]
  __b19_from___b13:
    // [43] phi (byte) compare::r#12 = (const byte) TT [phi:compare::@13->compare::@19#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b19
    // [43] phi from compare::@12 to compare::@19 [phi:compare::@12->compare::@19]
  __b19_from___b12:
    // [43] phi (byte) compare::r#12 = (const byte) FF [phi:compare::@12->compare::@19#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b19
    // compare::@19
  __b19:
    // [44] phi from compare::@19 to compare::@6 [phi:compare::@19->compare::@6]
  __b6_from___b19:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#12 [phi:compare::@19->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#1 [phi:compare::@19->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta.z ops
    lda #>ops_1
    sta.z ops+1
    jmp __b6
    // [44] phi from compare::@11 to compare::@6 [phi:compare::@11->compare::@6]
  __b6_from___b11:
    // [44] phi (byte) compare::r#10 = (const byte) FF [phi:compare::@11->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // [44] phi (byte*) compare::ops#7 = (byte*) 0 [phi:compare::@11->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta.z ops
    lda #>0
    sta.z ops+1
    jmp __b6
    // compare::@6
  __b6:
    // [45] (signed word) print_sword::w#1 ← (signed word) compare::w1#0
    // [46] call print_sword 
    // [73] phi from compare::@6 to print_sword [phi:compare::@6->print_sword]
  print_sword_from___b6:
    // [73] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#64 [phi:compare::@6->print_sword#0] -- register_copy 
    // [73] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:compare::@6->print_sword#1] -- register_copy 
    jsr print_sword
    jmp __b25
    // compare::@25
  __b25:
    // [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7
    // [48] call print_str 
    // [97] phi from compare::@25 to print_str [phi:compare::@25->print_str]
  print_str_from___b25:
    jsr print_str
    jmp __b26
    // compare::@26
  __b26:
    // [49] (signed word) print_sword::w#2 ← (signed word) compare::w2#0 -- vwsz1=vwsz2 
    lda.z w2
    sta.z print_sword.w
    lda.z w2+1
    sta.z print_sword.w+1
    // [50] call print_sword 
    // [73] phi from compare::@26 to print_sword [phi:compare::@26->print_sword]
  print_sword_from___b26:
    // [73] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#2 [phi:compare::@26->print_sword#0] -- register_copy 
    // [73] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:compare::@26->print_sword#1] -- register_copy 
    jsr print_sword
    jmp __b27
    // compare::@27
  __b27:
    // [51] (byte) print_char::ch#4 ← (byte) compare::r#10 -- vbuaa=vbuz1 
    lda.z r
    // [52] call print_char 
    // [69] phi from compare::@27 to print_char [phi:compare::@27->print_char]
  print_char_from___b27:
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#15 [phi:compare::@27->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) print_char::ch#4 [phi:compare::@27->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // compare::@return
  __breturn:
    // [53] return 
    rts
    // compare::@5
  __b5:
    // [54] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@20 -- vwsz1_neq_vwsz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bne __b20_from___b5
    lda.z w1
    cmp.z w2
    bne __b20_from___b5
    // [55] phi from compare::@5 to compare::@14 [phi:compare::@5->compare::@14]
  __b14_from___b5:
    jmp __b14
    // compare::@14
  __b14:
    // [56] phi from compare::@14 to compare::@20 [phi:compare::@14->compare::@20]
  __b20_from___b14:
    // [56] phi (byte) compare::r#13 = (const byte) TT [phi:compare::@14->compare::@20#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b20
    // [56] phi from compare::@5 to compare::@20 [phi:compare::@5->compare::@20]
  __b20_from___b5:
    // [56] phi (byte) compare::r#13 = (const byte) FF [phi:compare::@5->compare::@20#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b20
    // compare::@20
  __b20:
    // [44] phi from compare::@20 to compare::@6 [phi:compare::@20->compare::@6]
  __b6_from___b20:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#13 [phi:compare::@20->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#2 [phi:compare::@20->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta.z ops
    lda #>ops_2
    sta.z ops+1
    jmp __b6
    // compare::@4
  __b4:
    // [57] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@21 -- vwsz1_lt_vwsz2_then_la1 
    lda.z w1
    cmp.z w2
    lda.z w1+1
    sbc.z w2+1
    bvc !+
    eor #$80
  !:
    bmi __b21_from___b4
  !e:
    // [58] phi from compare::@4 to compare::@15 [phi:compare::@4->compare::@15]
  __b15_from___b4:
    jmp __b15
    // compare::@15
  __b15:
    // [59] phi from compare::@15 to compare::@21 [phi:compare::@15->compare::@21]
  __b21_from___b15:
    // [59] phi (byte) compare::r#14 = (const byte) TT [phi:compare::@15->compare::@21#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b21
    // [59] phi from compare::@4 to compare::@21 [phi:compare::@4->compare::@21]
  __b21_from___b4:
    // [59] phi (byte) compare::r#14 = (const byte) FF [phi:compare::@4->compare::@21#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b21
    // compare::@21
  __b21:
    // [44] phi from compare::@21 to compare::@6 [phi:compare::@21->compare::@6]
  __b6_from___b21:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#14 [phi:compare::@21->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#3 [phi:compare::@21->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta.z ops
    lda #>ops_3
    sta.z ops+1
    jmp __b6
    // compare::@3
  __b3:
    // [60] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@22 -- vwsz1_le_vwsz2_then_la1 
    lda.z w2
    cmp.z w1
    lda.z w2+1
    sbc.z w1+1
    bvc !+
    eor #$80
  !:
    bpl __b22_from___b3
    // [61] phi from compare::@3 to compare::@16 [phi:compare::@3->compare::@16]
  __b16_from___b3:
    jmp __b16
    // compare::@16
  __b16:
    // [62] phi from compare::@16 to compare::@22 [phi:compare::@16->compare::@22]
  __b22_from___b16:
    // [62] phi (byte) compare::r#15 = (const byte) TT [phi:compare::@16->compare::@22#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b22
    // [62] phi from compare::@3 to compare::@22 [phi:compare::@3->compare::@22]
  __b22_from___b3:
    // [62] phi (byte) compare::r#15 = (const byte) FF [phi:compare::@3->compare::@22#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b22
    // compare::@22
  __b22:
    // [44] phi from compare::@22 to compare::@6 [phi:compare::@22->compare::@6]
  __b6_from___b22:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#15 [phi:compare::@22->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#4 [phi:compare::@22->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta.z ops
    lda #>ops_4
    sta.z ops+1
    jmp __b6
    // compare::@2
  __b2:
    // [63] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@23 -- vwsz1_gt_vwsz2_then_la1 
    lda.z w2
    cmp.z w1
    lda.z w2+1
    sbc.z w1+1
    bvc !+
    eor #$80
  !:
    bmi __b23_from___b2
  !e:
    // [64] phi from compare::@2 to compare::@17 [phi:compare::@2->compare::@17]
  __b17_from___b2:
    jmp __b17
    // compare::@17
  __b17:
    // [65] phi from compare::@17 to compare::@23 [phi:compare::@17->compare::@23]
  __b23_from___b17:
    // [65] phi (byte) compare::r#16 = (const byte) TT [phi:compare::@17->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b23
    // [65] phi from compare::@2 to compare::@23 [phi:compare::@2->compare::@23]
  __b23_from___b2:
    // [65] phi (byte) compare::r#16 = (const byte) FF [phi:compare::@2->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b23
    // compare::@23
  __b23:
    // [44] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
  __b6_from___b23:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#16 [phi:compare::@23->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#5 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta.z ops
    lda #>ops_5
    sta.z ops+1
    jmp __b6
    // compare::@1
  __b1:
    // [66] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@24 -- vwsz1_ge_vwsz2_then_la1 
    lda.z w1
    cmp.z w2
    lda.z w1+1
    sbc.z w2+1
    bvc !+
    eor #$80
  !:
    bpl __b24_from___b1
    // [67] phi from compare::@1 to compare::@18 [phi:compare::@1->compare::@18]
  __b18_from___b1:
    jmp __b18
    // compare::@18
  __b18:
    // [68] phi from compare::@18 to compare::@24 [phi:compare::@18->compare::@24]
  __b24_from___b18:
    // [68] phi (byte) compare::r#17 = (const byte) TT [phi:compare::@18->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b24
    // [68] phi from compare::@1 to compare::@24 [phi:compare::@1->compare::@24]
  __b24_from___b1:
    // [68] phi (byte) compare::r#17 = (const byte) FF [phi:compare::@1->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b24
    // compare::@24
  __b24:
    // [44] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
  __b6_from___b24:
    // [44] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@24->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#6 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta.z ops
    lda #>ops_6
    sta.z ops+1
    jmp __b6
    ops_1: .text "!="
    .byte 0
    ops_2: .text "=="
    .byte 0
    ops_3: .text ">="
    .byte 0
    ops_4: .text "> "
    .byte 0
    ops_5: .text "<="
    .byte 0
    ops_6: .text "< "
    .byte 0
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [70] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [71] (byte*) print_char_cursor#15 ← ++ (byte*) print_char_cursor#43 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [72] return 
    rts
}
  // print_sword
// Print a signed word as HEX
// print_sword(signed word zp($a) w)
print_sword: {
    .label w = $a
    // [74] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sword
    // [75] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
  __b3_from_print_sword:
    jmp __b3
    // print_sword::@3
  __b3:
    // [76] call print_char 
    // [69] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
  print_char_from___b3:
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#58 [phi:print_sword::@3->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [77] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [77] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    jmp __b2
    // print_sword::@2
  __b2:
    // [78] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5
    // [79] call print_word 
    jsr print_word
    jmp __breturn
    // print_sword::@return
  __breturn:
    // [80] return 
    rts
    // [81] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
  __b1_from_print_sword:
    jmp __b1
    // print_sword::@1
  __b1:
    // [82] call print_char 
    // [69] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
  print_char_from___b1:
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#58 [phi:print_sword::@1->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sword::@4
  __b4:
    // [83] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_word
// Print a word as HEX
// print_word(word zp($a) w)
print_word: {
    .label w = $a
    // [84] (byte) print_byte::b#0 ← > (word) print_word::w#0 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [85] call print_byte 
    // [89] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [89] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#0] -- register_copy 
    jsr print_byte
    jmp __b1
    // print_word::@1
  __b1:
    // [86] (byte) print_byte::b#1 ← < (word) print_word::w#0 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [87] call print_byte 
    // [89] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from___b1:
    // [89] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#0] -- register_copy 
    jsr print_byte
    jmp __breturn
    // print_word::@return
  __breturn:
    // [88] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zp($c) b)
print_byte: {
    .label b = $c
    // [90] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // [91] (byte) print_char::ch#2 ← *((const byte*) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [92] call print_char 
    // [69] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#15 [phi:print_byte->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_byte::@1
  __b1:
    // [93] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // [94] (byte) print_char::ch#3 ← *((const byte*) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [95] call print_char 
    // [69] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from___b1:
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#15 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_byte::@return
  __breturn:
    // [96] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(5) str)
print_str: {
    .label str = 5
    // [98] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  __b1_from_print_str:
  __b1_from___b2:
    // [98] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#15 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [98] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [99] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [100] return 
    rts
    // print_str::@2
  __b2:
    // [101] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
    // [102] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [103] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [105] call memset 
    // [107] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [106] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $d
    // [108] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [108] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [109] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [110] return 
    rts
    // memset::@2
  __b2:
    // [111] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [112] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [108] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [108] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  swords: .word -$6fed, $12, $7fed

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b9
Removing instruction jmp __b5
Removing instruction jmp __b10
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b19
Removing instruction jmp __b6
Removing instruction jmp __b25
Removing instruction jmp __b26
Removing instruction jmp __b27
Removing instruction jmp __breturn
Removing instruction jmp __b14
Removing instruction jmp __b20
Removing instruction jmp __b15
Removing instruction jmp __b21
Removing instruction jmp __b16
Removing instruction jmp __b22
Removing instruction jmp __b17
Removing instruction jmp __b23
Removing instruction jmp __b18
Removing instruction jmp __b24
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __bbegin with __b1
Replacing label __b4_from___b9 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b2_from___b6 with __b2
Replacing label __b1_from___b7 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from_print_sword with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b7:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b5_from___b9:
Removing instruction print_ln_from___b5:
Removing instruction __b4_from___b9:
Removing instruction __b8_from___b7:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b13_from___b12:
Removing instruction __b19_from___b13:
Removing instruction __b6_from___b19:
Removing instruction print_sword_from___b6:
Removing instruction print_str_from___b25:
Removing instruction __b14_from___b5:
Removing instruction __b20_from___b14:
Removing instruction __b6_from___b20:
Removing instruction __b15_from___b4:
Removing instruction __b21_from___b15:
Removing instruction __b6_from___b21:
Removing instruction __b16_from___b3:
Removing instruction __b22_from___b16:
Removing instruction __b6_from___b22:
Removing instruction __b17_from___b2:
Removing instruction __b23_from___b17:
Removing instruction __b6_from___b23:
Removing instruction __b18_from___b1:
Removing instruction __b24_from___b18:
Removing instruction __b6_from___b24:
Removing instruction __b3_from_print_sword:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_print_sword:
Removing instruction print_char_from___b1:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction print_cls_from_main:
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b9:
Removing instruction __b5:
Removing instruction __b10:
Removing instruction __b4_from___b10:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b25:
Removing instruction __b26:
Removing instruction print_sword_from___b26:
Removing instruction __b27:
Removing instruction print_char_from___b27:
Removing instruction __breturn:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction print_byte_from_print_word:
Removing instruction __b1:
Removing instruction print_byte_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_byte:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label __b8_from___b8 to b1
Relabelling long label __b19_from___b12 to b1
Relabelling long label __b6_from___b11 to b2
Relabelling long label __b20_from___b5 to b3
Relabelling long label __b21_from___b4 to b4
Relabelling long label __b22_from___b3 to b5
Relabelling long label __b23_from___b2 to b6
Relabelling long label __b24_from___b1 to b7
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #3
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [114] beq __b1 to bne
Fixing long branch [118] beq __b2 to bne
Fixing long branch [122] beq __b3 to bne

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) EQ = (byte) 4
(const byte) FF = (byte) $57
(const byte) GE = (byte) 3
(const byte) GT = (byte) 2
(const byte) LE = (byte) 1
(const byte) LT = (byte) 0
(const byte) NE = (byte) 5
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte) TT = (byte) $51
(void()) compare((signed word) compare::w1 , (signed word) compare::w2 , (byte) compare::op)
(label) compare::@1
(label) compare::@10
(label) compare::@11
(label) compare::@12
(label) compare::@13
(label) compare::@14
(label) compare::@15
(label) compare::@16
(label) compare::@17
(label) compare::@18
(label) compare::@19
(label) compare::@2
(label) compare::@20
(label) compare::@21
(label) compare::@22
(label) compare::@23
(label) compare::@24
(label) compare::@25
(label) compare::@26
(label) compare::@27
(label) compare::@3
(label) compare::@4
(label) compare::@5
(label) compare::@6
(label) compare::@7
(label) compare::@8
(label) compare::@9
(label) compare::@return
(byte) compare::op
(byte) compare::op#0 reg byte x 168.8333333333334
(byte*) compare::ops
(const byte*) compare::ops#1 ops_1 = (byte*) "!="
(const byte*) compare::ops#2 ops_2 = (byte*) "=="
(const byte*) compare::ops#3 ops_3 = (byte*) ">="
(const byte*) compare::ops#4 ops_4 = (byte*) "> "
(const byte*) compare::ops#5 ops_5 = (byte*) "<="
(const byte*) compare::ops#6 ops_6 = (byte*) "< "
(byte*) compare::ops#7 ops zp[2]:5 0.6666666666666666
(byte) compare::r
(byte) compare::r#10 r zp[1]:7 1.9999999999999996
(byte) compare::r#12 r zp[1]:7 2.0
(byte) compare::r#13 r zp[1]:7 2.0
(byte) compare::r#14 r zp[1]:7 2.0
(byte) compare::r#15 r zp[1]:7 2.0
(byte) compare::r#16 r zp[1]:7 2.0
(byte) compare::r#17 r zp[1]:7 2.0
(signed word) compare::w1
(signed word) compare::w1#0 w1 zp[2]:10 36.249999999999986
(signed word) compare::w2
(signed word) compare::w2#0 w2 zp[2]:17 32.741935483870954
(void()) main()
(byte~) main::$8 reg byte a 22.0
(byte~) main::$9 reg byte a 202.0
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::i
(byte) main::i#1 i zp[1]:2 16.5
(byte) main::i#2 i zp[1]:2 1.5714285714285716
(byte) main::j
(byte) main::j#1 j zp[1]:3 151.5
(byte) main::j#2 j zp[1]:3 18.9375
(byte) main::op
(byte) main::op#1 reg byte x 1501.5
(byte) main::op#2 reg byte x 273.0
(byte) main::s
(byte) main::s#1 s zp[1]:4 1501.5
(byte) main::s#10 s zp[1]:4 302.0
(byte) main::s#3 s zp[1]:4 420.59999999999997
(byte) main::s#5 s zp[1]:4 71.0
(byte) main::s#7 s zp[1]:4 7.333333333333333
(signed word) main::w1
(signed word) main::w1#0 w1 zp[2]:15 53.26315789473684
(signed word) main::w2
(signed word) main::w2#0 w2 zp[2]:17 78.71428571428571
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:13 22.0
(byte*) memset::dst#2 dst zp[2]:13 14.666666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp[1]:12 4.0
(byte) print_byte::b#1 b zp[1]:12 4.0
(byte) print_byte::b#2 b zp[1]:12 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 4.0
(byte) print_char::ch#5 reg byte a 8.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp[2]:8 10001.0
(byte*) print_char_cursor#115 print_char_cursor zp[2]:8 2002.0
(byte*) print_char_cursor#15 print_char_cursor zp[2]:8 297.62162162162167
(byte*) print_char_cursor#2 print_char_cursor zp[2]:8 5001.166666666666
(byte*) print_char_cursor#43 print_char_cursor zp[2]:8 7.0
(byte*) print_char_cursor#58 print_char_cursor zp[2]:8 2.0
(byte*) print_char_cursor#64 print_char_cursor zp[2]:8 36.800000000000004
(byte*) print_char_cursor#71 print_char_cursor zp[2]:8 71.0
(byte*) print_char_cursor#72 print_char_cursor zp[2]:8 445.0
(byte*) print_char_cursor#81 print_char_cursor zp[2]:8 7.333333333333333
(void()) print_cls()
(label) print_cls::@return
(const byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:13 6401.0
(byte*) print_line_cursor#19 print_line_cursor zp[2]:13 233.8888888888889
(byte*) print_line_cursor#23 print_line_cursor zp[2]:13 445.0
(byte*) print_line_cursor#26 print_line_cursor zp[2]:13 71.0
(byte*) print_line_cursor#28 print_line_cursor zp[2]:13 7.333333333333333
(byte*) print_line_cursor#9 print_line_cursor zp[2]:13 20004.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:5 20002.0
(byte*) print_str::str#1 str zp[2]:5 2.0
(byte*) print_str::str#2 str zp[2]:5 10001.5
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp[2]:10 4.0
(signed word) print_sword::w#1 w zp[2]:10 4.0
(signed word) print_sword::w#2 w zp[2]:10 4.0
(signed word) print_sword::w#3 w zp[2]:10 1.6666666666666665
(signed word) print_sword::w#5 w zp[2]:10 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp[2]:10 2.0
(const signed word*) swords[]  = { (signed word) -$6fed, (signed word) $12, (signed word) $7fed }

zp[1]:2 [ main::i#2 main::i#1 ]
zp[1]:3 [ main::j#2 main::j#1 ]
reg byte x [ main::op#2 main::op#1 ]
zp[1]:4 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
zp[2]:5 [ compare::ops#7 print_str::str#2 print_str::str#1 print_str::str#0 ]
zp[1]:7 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
reg byte a [ print_char::ch#5 print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp[2]:8 [ print_char_cursor#43 print_char_cursor#64 print_char_cursor#71 print_char_cursor#81 print_char_cursor#72 print_char_cursor#15 print_char_cursor#115 print_char_cursor#58 print_char_cursor#2 print_char_cursor#1 ]
zp[2]:10 [ print_sword::w#5 print_sword::w#0 print_sword::w#3 print_sword::w#1 print_sword::w#2 compare::w1#0 print_word::w#0 ]
zp[1]:12 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
zp[2]:13 [ memset::dst#2 memset::dst#1 print_line_cursor#9 print_line_cursor#19 print_line_cursor#26 print_line_cursor#28 print_line_cursor#23 print_line_cursor#1 ]
reg byte a [ main::$8 ]
zp[2]:15 [ main::w1#0 ]
reg byte a [ main::$9 ]
zp[2]:17 [ main::w2#0 compare::w2#0 ]
reg byte x [ compare::op#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]


FINAL ASSEMBLER
Score: 966665

  // File Comments
// Test signed word comparisons
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const LT = 0
  .const LE = 1
  .const GT = 2
  .const GE = 3
  .const EQ = 4
  .const NE = 5
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_char_cursor = 8
  .label print_line_cursor = $d
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label w1 = $f
    .label w2 = $11
    .label s = 4
    .label j = 3
    .label i = 2
    // print_cls()
    // [5] call print_cls 
    // [104] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // [6] phi (byte*) print_line_cursor#28 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [6] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [6] phi (byte*) print_char_cursor#81 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [6] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
    // [6] phi (byte*) print_line_cursor#28 = (byte*) print_line_cursor#23 [phi:main::@7->main::@1#0] -- register_copy 
    // [6] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
    // [6] phi (byte*) print_char_cursor#81 = (byte*) print_char_cursor#72 [phi:main::@7->main::@1#2] -- register_copy 
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
    // main::@1
  __b1:
    // w1 = swords[i]
    // [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [8] (signed word) main::w1#0 ← *((const signed word*) swords + (byte~) main::$8) -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda swords,y
    sta.z w1
    lda swords+1,y
    sta.z w1+1
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [9] phi (byte*) print_line_cursor#26 = (byte*) print_line_cursor#28 [phi:main::@1->main::@2#0] -- register_copy 
    // [9] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
    // [9] phi (byte*) print_char_cursor#71 = (byte*) print_char_cursor#81 [phi:main::@1->main::@2#2] -- register_copy 
    // [9] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    // [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
    // [9] phi (byte*) print_line_cursor#26 = (byte*) print_line_cursor#23 [phi:main::@6->main::@2#0] -- register_copy 
    // [9] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
    // [9] phi (byte*) print_char_cursor#71 = (byte*) print_char_cursor#72 [phi:main::@6->main::@2#2] -- register_copy 
    // [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
    // main::@2
  __b2:
    // w2 = swords[j]
    // [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z j
    asl
    // [11] (signed word) main::w2#0 ← *((const signed word*) swords + (byte~) main::$9) -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda swords,y
    sta.z w2
    lda swords+1,y
    sta.z w2+1
    // [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#26 [phi:main::@2->main::@3#0] -- register_copy 
    // [12] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
    // [12] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#71 [phi:main::@2->main::@3#2] -- register_copy 
    // [12] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuxx=vbuc1 
    ldx #0
    // [12] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#23 [phi:main::@4->main::@3#0] -- register_copy 
    // [12] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
    // [12] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#72 [phi:main::@4->main::@3#2] -- register_copy 
    // [12] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
    // main::@3
  __b3:
    // compare(w1,w2,op)
    // [13] (signed word) compare::w1#0 ← (signed word) main::w1#0 -- vwsz1=vwsz2 
    lda.z w1
    sta.z compare.w1
    lda.z w1+1
    sta.z compare.w1+1
    // [14] (signed word) compare::w2#0 ← (signed word) main::w2#0
    // [15] (byte) compare::op#0 ← (byte) main::op#2
    // [16] call compare 
    jsr compare
    // main::@9
    // if(++s==3)
    // [17] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [18] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z s
    bne __b4
    // [19] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
    // main::@5
    // print_ln()
    // [20] call print_ln 
    // [30] phi from main::@5 to print_ln [phi:main::@5->print_ln]
    jsr print_ln
    // main::@10
    // [21] (byte*) print_char_cursor#115 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [22] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
    // [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:main::@10->main::@4#0] -- register_copy 
    // [22] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [22] phi (byte*) print_char_cursor#72 = (byte*) print_char_cursor#115 [phi:main::@10->main::@4#2] -- register_copy 
    // [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
    // [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#19 [phi:main::@9->main::@4#0] -- register_copy 
    // [22] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
    // [22] phi (byte*) print_char_cursor#72 = (byte*) print_char_cursor#15 [phi:main::@9->main::@4#2] -- register_copy 
    // main::@4
  __b4:
    // for( byte op: 0..5 )
    // [23] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuxx=_inc_vbuxx 
    inx
    // [24] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b3
    // main::@6
    // for( byte j: 0..2)
    // [25] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [26] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z j
    bne __b2
    // main::@7
    // for( byte i: 0..2)
    // [27] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [28] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    cmp.z i
    bne __b1
    // [29] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  b1:
  // loop forever
    // main::@8
    jmp b1
}
  // print_ln
// Print a newline
print_ln: {
    // [31] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [31] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#15) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [34] return 
    rts
}
  // compare
// Compare two words using an operator
// compare(signed word zp($a) w1, signed word zp($11) w2, byte register(X) op)
compare: {
    .label w1 = $a
    .label w2 = $11
    .label ops = 5
    .label r = 7
    // if(op==LT)
    // [35] if((byte) compare::op#0==(const byte) LT) goto compare::@1 -- vbuxx_eq_vbuc1_then_la1 
    cpx #LT
    bne !__b1+
    jmp __b1
  !__b1:
    // compare::@7
    // if(op==LE)
    // [36] if((byte) compare::op#0==(const byte) LE) goto compare::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #LE
    bne !__b2+
    jmp __b2
  !__b2:
    // compare::@8
    // if(op==GT)
    // [37] if((byte) compare::op#0==(const byte) GT) goto compare::@3 -- vbuxx_eq_vbuc1_then_la1 
    cpx #GT
    bne !__b3+
    jmp __b3
  !__b3:
    // compare::@9
    // if(op==GE)
    // [38] if((byte) compare::op#0==(const byte) GE) goto compare::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #GE
    beq __b4
    // compare::@10
    // if(op==EQ)
    // [39] if((byte) compare::op#0==(const byte) EQ) goto compare::@5 -- vbuxx_eq_vbuc1_then_la1 
    cpx #EQ
    beq __b5
    // compare::@11
    // if(op==NE)
    // [40] if((byte) compare::op#0!=(const byte) NE) goto compare::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NE
    bne b2
    // compare::@12
    // if(w1!=w2)
    // [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@19 -- vwsz1_eq_vwsz2_then_la1 
    lda.z w1
    cmp.z w2
    bne !+
    lda.z w1+1
    cmp.z w2+1
    beq b1
  !:
    // [42] phi from compare::@12 to compare::@13 [phi:compare::@12->compare::@13]
    // compare::@13
    // [43] phi from compare::@13 to compare::@19 [phi:compare::@13->compare::@19]
    // [43] phi (byte) compare::r#12 = (const byte) TT [phi:compare::@13->compare::@19#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b19
    // [43] phi from compare::@12 to compare::@19 [phi:compare::@12->compare::@19]
  b1:
    // [43] phi (byte) compare::r#12 = (const byte) FF [phi:compare::@12->compare::@19#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@19
  __b19:
    // [44] phi from compare::@19 to compare::@6 [phi:compare::@19->compare::@6]
    // [44] phi (byte) compare::r#10 = (byte) compare::r#12 [phi:compare::@19->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#1 [phi:compare::@19->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta.z ops
    lda #>ops_1
    sta.z ops+1
    jmp __b6
    // [44] phi from compare::@11 to compare::@6 [phi:compare::@11->compare::@6]
  b2:
    // [44] phi (byte) compare::r#10 = (const byte) FF [phi:compare::@11->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // [44] phi (byte*) compare::ops#7 = (byte*) 0 [phi:compare::@11->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta.z ops
    sta.z ops+1
    // compare::@6
  __b6:
    // print_sword(w1)
    // [45] (signed word) print_sword::w#1 ← (signed word) compare::w1#0
    // [46] call print_sword 
    // [73] phi from compare::@6 to print_sword [phi:compare::@6->print_sword]
    // [73] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#64 [phi:compare::@6->print_sword#0] -- register_copy 
    // [73] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:compare::@6->print_sword#1] -- register_copy 
    jsr print_sword
    // compare::@25
    // print_str(ops)
    // [47] (byte*) print_str::str#1 ← (byte*) compare::ops#7
    // [48] call print_str 
    // [97] phi from compare::@25 to print_str [phi:compare::@25->print_str]
    jsr print_str
    // compare::@26
    // print_sword(w2)
    // [49] (signed word) print_sword::w#2 ← (signed word) compare::w2#0 -- vwsz1=vwsz2 
    lda.z w2
    sta.z print_sword.w
    lda.z w2+1
    sta.z print_sword.w+1
    // [50] call print_sword 
    // [73] phi from compare::@26 to print_sword [phi:compare::@26->print_sword]
    // [73] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#2 [phi:compare::@26->print_sword#0] -- register_copy 
    // [73] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:compare::@26->print_sword#1] -- register_copy 
    jsr print_sword
    // compare::@27
    // print_char(r)
    // [51] (byte) print_char::ch#4 ← (byte) compare::r#10 -- vbuaa=vbuz1 
    lda.z r
    // [52] call print_char 
    // [69] phi from compare::@27 to print_char [phi:compare::@27->print_char]
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#15 [phi:compare::@27->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) print_char::ch#4 [phi:compare::@27->print_char#1] -- register_copy 
    jsr print_char
    // compare::@return
    // }
    // [53] return 
    rts
    // compare::@5
  __b5:
    // if(w1==w2)
    // [54] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@20 -- vwsz1_neq_vwsz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bne b3
    lda.z w1
    cmp.z w2
    bne b3
    // [55] phi from compare::@5 to compare::@14 [phi:compare::@5->compare::@14]
    // compare::@14
    // [56] phi from compare::@14 to compare::@20 [phi:compare::@14->compare::@20]
    // [56] phi (byte) compare::r#13 = (const byte) TT [phi:compare::@14->compare::@20#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b20
    // [56] phi from compare::@5 to compare::@20 [phi:compare::@5->compare::@20]
  b3:
    // [56] phi (byte) compare::r#13 = (const byte) FF [phi:compare::@5->compare::@20#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@20
  __b20:
    // [44] phi from compare::@20 to compare::@6 [phi:compare::@20->compare::@6]
    // [44] phi (byte) compare::r#10 = (byte) compare::r#13 [phi:compare::@20->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#2 [phi:compare::@20->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta.z ops
    lda #>ops_2
    sta.z ops+1
    jmp __b6
    // compare::@4
  __b4:
    // if(w1>=w2)
    // [57] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@21 -- vwsz1_lt_vwsz2_then_la1 
    lda.z w1
    cmp.z w2
    lda.z w1+1
    sbc.z w2+1
    bvc !+
    eor #$80
  !:
    bmi b4
  !e:
    // [58] phi from compare::@4 to compare::@15 [phi:compare::@4->compare::@15]
    // compare::@15
    // [59] phi from compare::@15 to compare::@21 [phi:compare::@15->compare::@21]
    // [59] phi (byte) compare::r#14 = (const byte) TT [phi:compare::@15->compare::@21#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b21
    // [59] phi from compare::@4 to compare::@21 [phi:compare::@4->compare::@21]
  b4:
    // [59] phi (byte) compare::r#14 = (const byte) FF [phi:compare::@4->compare::@21#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@21
  __b21:
    // [44] phi from compare::@21 to compare::@6 [phi:compare::@21->compare::@6]
    // [44] phi (byte) compare::r#10 = (byte) compare::r#14 [phi:compare::@21->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#3 [phi:compare::@21->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta.z ops
    lda #>ops_3
    sta.z ops+1
    jmp __b6
    // compare::@3
  __b3:
    // if(w1>w2)
    // [60] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@22 -- vwsz1_le_vwsz2_then_la1 
    lda.z w2
    cmp.z w1
    lda.z w2+1
    sbc.z w1+1
    bvc !+
    eor #$80
  !:
    bpl b5
    // [61] phi from compare::@3 to compare::@16 [phi:compare::@3->compare::@16]
    // compare::@16
    // [62] phi from compare::@16 to compare::@22 [phi:compare::@16->compare::@22]
    // [62] phi (byte) compare::r#15 = (const byte) TT [phi:compare::@16->compare::@22#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b22
    // [62] phi from compare::@3 to compare::@22 [phi:compare::@3->compare::@22]
  b5:
    // [62] phi (byte) compare::r#15 = (const byte) FF [phi:compare::@3->compare::@22#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@22
  __b22:
    // [44] phi from compare::@22 to compare::@6 [phi:compare::@22->compare::@6]
    // [44] phi (byte) compare::r#10 = (byte) compare::r#15 [phi:compare::@22->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#4 [phi:compare::@22->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta.z ops
    lda #>ops_4
    sta.z ops+1
    jmp __b6
    // compare::@2
  __b2:
    // if(w1<=w2)
    // [63] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@23 -- vwsz1_gt_vwsz2_then_la1 
    lda.z w2
    cmp.z w1
    lda.z w2+1
    sbc.z w1+1
    bvc !+
    eor #$80
  !:
    bmi b6
  !e:
    // [64] phi from compare::@2 to compare::@17 [phi:compare::@2->compare::@17]
    // compare::@17
    // [65] phi from compare::@17 to compare::@23 [phi:compare::@17->compare::@23]
    // [65] phi (byte) compare::r#16 = (const byte) TT [phi:compare::@17->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b23
    // [65] phi from compare::@2 to compare::@23 [phi:compare::@2->compare::@23]
  b6:
    // [65] phi (byte) compare::r#16 = (const byte) FF [phi:compare::@2->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@23
  __b23:
    // [44] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
    // [44] phi (byte) compare::r#10 = (byte) compare::r#16 [phi:compare::@23->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#5 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta.z ops
    lda #>ops_5
    sta.z ops+1
    jmp __b6
    // compare::@1
  __b1:
    // if(w1<w2)
    // [66] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@24 -- vwsz1_ge_vwsz2_then_la1 
    lda.z w1
    cmp.z w2
    lda.z w1+1
    sbc.z w2+1
    bvc !+
    eor #$80
  !:
    bpl b7
    // [67] phi from compare::@1 to compare::@18 [phi:compare::@1->compare::@18]
    // compare::@18
    // [68] phi from compare::@18 to compare::@24 [phi:compare::@18->compare::@24]
    // [68] phi (byte) compare::r#17 = (const byte) TT [phi:compare::@18->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b24
    // [68] phi from compare::@1 to compare::@24 [phi:compare::@1->compare::@24]
  b7:
    // [68] phi (byte) compare::r#17 = (const byte) FF [phi:compare::@1->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@24
  __b24:
    // [44] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
    // [44] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@24->compare::@6#0] -- register_copy 
    // [44] phi (byte*) compare::ops#7 = (const byte*) compare::ops#6 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta.z ops
    lda #>ops_6
    sta.z ops+1
    jmp __b6
    ops_1: .text "!="
    .byte 0
    ops_2: .text "=="
    .byte 0
    ops_3: .text ">="
    .byte 0
    ops_4: .text "> "
    .byte 0
    ops_5: .text "<="
    .byte 0
    ops_6: .text "< "
    .byte 0
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [70] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [71] (byte*) print_char_cursor#15 ← ++ (byte*) print_char_cursor#43 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [72] return 
    rts
}
  // print_sword
// Print a signed word as HEX
// print_sword(signed word zp($a) w)
print_sword: {
    .label w = $a
    // if(w<0)
    // [74] if((signed word) print_sword::w#3<(signed byte) 0) goto print_sword::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [75] phi from print_sword to print_sword::@3 [phi:print_sword->print_sword::@3]
    // print_sword::@3
    // print_char(' ')
    // [76] call print_char 
    // [69] phi from print_sword::@3 to print_char [phi:print_sword::@3->print_char]
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#58 [phi:print_sword::@3->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sword::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [77] phi from print_sword::@3 print_sword::@4 to print_sword::@2 [phi:print_sword::@3/print_sword::@4->print_sword::@2]
    // [77] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:print_sword::@3/print_sword::@4->print_sword::@2#0] -- register_copy 
    // print_sword::@2
  __b2:
    // print_word((word)w)
    // [78] (word) print_word::w#0 ← (word)(signed word) print_sword::w#5
    // [79] call print_word 
    jsr print_word
    // print_sword::@return
    // }
    // [80] return 
    rts
    // [81] phi from print_sword to print_sword::@1 [phi:print_sword->print_sword::@1]
    // print_sword::@1
  __b1:
    // print_char('-')
    // [82] call print_char 
    // [69] phi from print_sword::@1 to print_char [phi:print_sword::@1->print_char]
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#58 [phi:print_sword::@1->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sword::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sword::@4
    // w = -w
    // [83] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_word
// Print a word as HEX
// print_word(word zp($a) w)
print_word: {
    .label w = $a
    // print_byte(>w)
    // [84] (byte) print_byte::b#0 ← > (word) print_word::w#0 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_byte.b
    // [85] call print_byte 
    // [89] phi from print_word to print_byte [phi:print_word->print_byte]
    // [89] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#0] -- register_copy 
    jsr print_byte
    // print_word::@1
    // print_byte(<w)
    // [86] (byte) print_byte::b#1 ← < (word) print_word::w#0 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_byte.b
    // [87] call print_byte 
    // [89] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
    // [89] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#0] -- register_copy 
    jsr print_byte
    // print_word::@return
    // }
    // [88] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zp($c) b)
print_byte: {
    .label b = $c
    // b>>4
    // [90] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [91] (byte) print_char::ch#2 ← *((const byte*) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [92] call print_char 
    // [69] phi from print_byte to print_char [phi:print_byte->print_char]
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#15 [phi:print_byte->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@1
    // b&$f
    // [93] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // print_char(print_hextab[b&$f])
    // [94] (byte) print_char::ch#3 ← *((const byte*) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [95] call print_char 
    // [69] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
    // [69] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#15 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [69] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@return
    // }
    // [96] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(5) str)
print_str: {
    .label str = 5
    // [98] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
    // [98] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#15 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [98] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [99] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [100] return 
    rts
    // print_str::@2
  __b2:
    // *(print_char_cursor++) = *(str++)
    // [101] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
    // *(print_char_cursor++) = *(str++);
    // [102] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [103] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [105] call memset 
    // [107] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [106] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $d
    // [108] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [108] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [109] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [110] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [111] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [112] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [108] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [108] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  swords: .word -$6fed, $12, $7fed

