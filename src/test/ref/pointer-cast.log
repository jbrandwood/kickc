Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  *((char *)ub_screen) = ub
  main::$20 = (signed char *)ub_screen
  main::$0 = main::$20 + 1
  *main::$0 = sb
  main::$12 = 1 * SIZEOF_UNSIGNED_INT
  main::$21 = (unsigned int *)ub_screen
  main::$1 = main::$21 + main::$12
  *main::$1 = uw
  main::$13 = 2 * SIZEOF_INT
  main::$22 = (int *)ub_screen
  main::$2 = main::$22 + main::$13
  *main::$2 = sw
  *((char *)sb_screen) = ub
  main::$23 = (signed char *)sb_screen
  main::$3 = main::$23 + 1
  *main::$3 = sb
  main::$14 = 1 * SIZEOF_UNSIGNED_INT
  main::$24 = (unsigned int *)sb_screen
  main::$4 = main::$24 + main::$14
  *main::$4 = uw
  main::$15 = 2 * SIZEOF_INT
  main::$25 = (int *)sb_screen
  main::$5 = main::$25 + main::$15
  *main::$5 = sw
  *((char *)uw_screen) = ub
  main::$26 = (signed char *)uw_screen
  main::$6 = main::$26 + 1
  *main::$6 = sb
  main::$16 = 1 * SIZEOF_UNSIGNED_INT
  main::$27 = (unsigned int *)uw_screen
  main::$7 = main::$27 + main::$16
  *main::$7 = uw
  main::$17 = 2 * SIZEOF_INT
  main::$28 = (int *)uw_screen
  main::$8 = main::$28 + main::$17
  *main::$8 = sw
  *((char *)sw_screen) = ub
  main::$29 = (signed char *)sw_screen
  main::$9 = main::$29 + 1
  *main::$9 = sb
  main::$18 = 1 * SIZEOF_UNSIGNED_INT
  main::$30 = (unsigned int *)sw_screen
  main::$10 = main::$30 + main::$18
  *main::$10 = uw
  main::$19 = 2 * SIZEOF_INT
  main::$31 = (int *)sw_screen
  main::$11 = main::$31 + main::$19
  *main::$11 = sw
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant char SIZEOF_INT = 2
__constant char SIZEOF_UNSIGNED_INT = 2
void __start()
void main()
signed char *main::$0
unsigned int *main::$1
unsigned int *main::$10
int *main::$11
number main::$12
number main::$13
number main::$14
number main::$15
number main::$16
number main::$17
number main::$18
number main::$19
int *main::$2
signed char *main::$20
unsigned int *main::$21
int *main::$22
signed char *main::$23
unsigned int *main::$24
int *main::$25
signed char *main::$26
unsigned int *main::$27
int *main::$28
signed char *main::$29
signed char *main::$3
unsigned int *main::$30
int *main::$31
unsigned int *main::$4
int *main::$5
signed char *main::$6
unsigned int *main::$7
int *main::$8
signed char *main::$9
__constant signed char sb = -$29
__constant signed char *sb_screen = (signed char *)$428
__constant int sw = -$3000
__constant int *sw_screen = (int *)$478
__constant char ub = $29
__constant char *ub_screen = (char *)$400
__constant unsigned int uw = $3000
__constant unsigned int *uw_screen = (unsigned int *)$450

Adding number conversion cast (unumber) 1 in main::$0 = main::$20 + 1
Adding number conversion cast (unumber) 1 in main::$12 = 1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) main::$12 in main::$12 = (unumber)1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) 2 in main::$13 = 2 * SIZEOF_INT
Adding number conversion cast (unumber) main::$13 in main::$13 = (unumber)2 * SIZEOF_INT
Adding number conversion cast (unumber) 1 in main::$3 = main::$23 + 1
Adding number conversion cast (unumber) 1 in main::$14 = 1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) main::$14 in main::$14 = (unumber)1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) 2 in main::$15 = 2 * SIZEOF_INT
Adding number conversion cast (unumber) main::$15 in main::$15 = (unumber)2 * SIZEOF_INT
Adding number conversion cast (unumber) 1 in main::$6 = main::$26 + 1
Adding number conversion cast (unumber) 1 in main::$16 = 1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) main::$16 in main::$16 = (unumber)1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) 2 in main::$17 = 2 * SIZEOF_INT
Adding number conversion cast (unumber) main::$17 in main::$17 = (unumber)2 * SIZEOF_INT
Adding number conversion cast (unumber) 1 in main::$9 = main::$29 + 1
Adding number conversion cast (unumber) 1 in main::$18 = 1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) main::$18 in main::$18 = (unumber)1 * SIZEOF_UNSIGNED_INT
Adding number conversion cast (unumber) 2 in main::$19 = 2 * SIZEOF_INT
Adding number conversion cast (unumber) main::$19 in main::$19 = (unumber)2 * SIZEOF_INT
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant pointer cast (signed char *) 1064
Simplifying constant pointer cast (unsigned int *) 1104
Simplifying constant pointer cast (int *) 1144
Simplifying constant integer cast ub_screen
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast sb_screen
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast uw_screen
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast sw_screen
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in main::$12 = 1 * SIZEOF_UNSIGNED_INT
Inferred type updated to char in main::$13 = 2 * SIZEOF_INT
Inferred type updated to char in main::$14 = 1 * SIZEOF_UNSIGNED_INT
Inferred type updated to char in main::$15 = 2 * SIZEOF_INT
Inferred type updated to char in main::$16 = 1 * SIZEOF_UNSIGNED_INT
Inferred type updated to char in main::$17 = 2 * SIZEOF_INT
Inferred type updated to char in main::$18 = 1 * SIZEOF_UNSIGNED_INT
Inferred type updated to char in main::$19 = 2 * SIZEOF_INT
Constant right-side identified [1] main::$20 = (signed char *)ub_screen
Constant right-side identified [4] main::$12 = 1 * SIZEOF_UNSIGNED_INT
Constant right-side identified [5] main::$21 = (unsigned int *)ub_screen
Constant right-side identified [8] main::$13 = 2 * SIZEOF_INT
Constant right-side identified [9] main::$22 = (int *)ub_screen
Constant right-side identified [16] main::$14 = 1 * SIZEOF_UNSIGNED_INT
Constant right-side identified [17] main::$24 = (unsigned int *)sb_screen
Constant right-side identified [20] main::$15 = 2 * SIZEOF_INT
Constant right-side identified [21] main::$25 = (int *)sb_screen
Constant right-side identified [25] main::$26 = (signed char *)uw_screen
Constant right-side identified [28] main::$16 = 1 * SIZEOF_UNSIGNED_INT
Constant right-side identified [32] main::$17 = 2 * SIZEOF_INT
Constant right-side identified [33] main::$28 = (int *)uw_screen
Constant right-side identified [37] main::$29 = (signed char *)sw_screen
Constant right-side identified [40] main::$18 = 1 * SIZEOF_UNSIGNED_INT
Constant right-side identified [41] main::$30 = (unsigned int *)sw_screen
Constant right-side identified [44] main::$19 = 2 * SIZEOF_INT
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$20 = (signed char *)ub_screen
Constant main::$12 = 1*SIZEOF_UNSIGNED_INT
Constant main::$21 = (unsigned int *)ub_screen
Constant main::$13 = 2*SIZEOF_INT
Constant main::$22 = (int *)ub_screen
Constant main::$23 = sb_screen
Constant main::$14 = 1*SIZEOF_UNSIGNED_INT
Constant main::$24 = (unsigned int *)sb_screen
Constant main::$15 = 2*SIZEOF_INT
Constant main::$25 = (int *)sb_screen
Constant main::$26 = (signed char *)uw_screen
Constant main::$16 = 1*SIZEOF_UNSIGNED_INT
Constant main::$27 = uw_screen
Constant main::$17 = 2*SIZEOF_INT
Constant main::$28 = (int *)uw_screen
Constant main::$29 = (signed char *)sw_screen
Constant main::$18 = 1*SIZEOF_UNSIGNED_INT
Constant main::$30 = (unsigned int *)sw_screen
Constant main::$19 = 2*SIZEOF_INT
Constant main::$31 = sw_screen
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (char *)sb_screen in [12] *((char *)sb_screen) = ub
Constant value identified (char *)uw_screen in [24] *((char *)uw_screen) = ub
Constant value identified (char *)sw_screen in [36] *((char *)sw_screen) = ub
Successful SSA optimization Pass2ConstantValues
Converting *(pointer+n) to pointer[n] [3] *main::$0 = sb  -- main::$20[1]
Converting *(pointer+n) to pointer[n] [7] *main::$1 = uw  -- main::$21[main::$12]
Converting *(pointer+n) to pointer[n] [11] *main::$2 = sw  -- main::$22[main::$13]
Converting *(pointer+n) to pointer[n] [15] *main::$3 = sb  -- main::$23[1]
Converting *(pointer+n) to pointer[n] [19] *main::$4 = uw  -- main::$24[main::$14]
Converting *(pointer+n) to pointer[n] [23] *main::$5 = sw  -- main::$25[main::$15]
Converting *(pointer+n) to pointer[n] [27] *main::$6 = sb  -- main::$26[1]
Converting *(pointer+n) to pointer[n] [31] *main::$7 = uw  -- main::$27[main::$16]
Converting *(pointer+n) to pointer[n] [35] *main::$8 = sw  -- main::$28[main::$17]
Converting *(pointer+n) to pointer[n] [39] *main::$9 = sb  -- main::$29[1]
Converting *(pointer+n) to pointer[n] [43] *main::$10 = uw  -- main::$30[main::$18]
Converting *(pointer+n) to pointer[n] [47] *main::$11 = sw  -- main::$31[main::$19]
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable main::$0 and assignment [1] main::$0 = main::$20 + 1
Eliminating unused variable main::$1 and assignment [3] main::$1 = main::$21 + main::$12
Eliminating unused variable main::$2 and assignment [5] main::$2 = main::$22 + main::$13
Eliminating unused variable main::$3 and assignment [8] main::$3 = main::$23 + 1
Eliminating unused variable main::$4 and assignment [10] main::$4 = main::$24 + main::$14
Eliminating unused variable main::$5 and assignment [12] main::$5 = main::$25 + main::$15
Eliminating unused variable main::$6 and assignment [15] main::$6 = main::$26 + 1
Eliminating unused variable main::$7 and assignment [17] main::$7 = main::$27 + main::$16
Eliminating unused variable main::$8 and assignment [19] main::$8 = main::$28 + main::$17
Eliminating unused variable main::$9 and assignment [22] main::$9 = main::$29 + 1
Eliminating unused variable main::$10 and assignment [24] main::$10 = main::$30 + main::$18
Eliminating unused variable main::$11 and assignment [26] main::$11 = main::$31 + main::$19
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$23 = sb_screen
Constant inlined main::$12 = 1*SIZEOF_UNSIGNED_INT
Constant inlined main::$13 = 2*SIZEOF_INT
Constant inlined main::$24 = (unsigned int *)sb_screen
Constant inlined main::$14 = 1*SIZEOF_UNSIGNED_INT
Constant inlined main::$25 = (int *)sb_screen
Constant inlined main::$15 = 2*SIZEOF_INT
Constant inlined main::$26 = (signed char *)uw_screen
Constant inlined main::$30 = (unsigned int *)sw_screen
Constant inlined main::$31 = sw_screen
Constant inlined main::$20 = (signed char *)ub_screen
Constant inlined main::$21 = (unsigned int *)ub_screen
Constant inlined main::$22 = (int *)ub_screen
Constant inlined main::$27 = uw_screen
Constant inlined main::$16 = 1*SIZEOF_UNSIGNED_INT
Constant inlined main::$17 = 2*SIZEOF_INT
Constant inlined main::$28 = (int *)uw_screen
Constant inlined main::$29 = (signed char *)sw_screen
Constant inlined main::$18 = 1*SIZEOF_UNSIGNED_INT
Constant inlined main::$19 = 2*SIZEOF_INT
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((signed char *)ub_screen+1)
Consolidated array index constant in *((unsigned int *)ub_screen+1*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *((int *)ub_screen+2*SIZEOF_INT)
Consolidated array index constant in *(sb_screen+1)
Consolidated array index constant in *((unsigned int *)sb_screen+1*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *((int *)sb_screen+2*SIZEOF_INT)
Consolidated array index constant in *((signed char *)uw_screen+1)
Consolidated array index constant in *(uw_screen+1*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *((int *)uw_screen+2*SIZEOF_INT)
Consolidated array index constant in *((signed char *)sw_screen+1)
Consolidated array index constant in *((unsigned int *)sw_screen+1*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(sw_screen+2*SIZEOF_INT)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *ub_screen = ub
  [1] *((signed char *)ub_screen+1) = sb
  [2] *((unsigned int *)ub_screen+1*SIZEOF_UNSIGNED_INT) = uw
  [3] *((int *)ub_screen+2*SIZEOF_INT) = sw
  [4] *((char *)sb_screen) = ub
  [5] *(sb_screen+1) = sb
  [6] *((unsigned int *)sb_screen+1*SIZEOF_UNSIGNED_INT) = uw
  [7] *((int *)sb_screen+2*SIZEOF_INT) = sw
  [8] *((char *)uw_screen) = ub
  [9] *((signed char *)uw_screen+1) = sb
  [10] *(uw_screen+1*SIZEOF_UNSIGNED_INT) = uw
  [11] *((int *)uw_screen+2*SIZEOF_INT) = sw
  [12] *((char *)sw_screen) = ub
  [13] *((signed char *)sw_screen+1) = sb
  [14] *((unsigned int *)sw_screen+1*SIZEOF_UNSIGNED_INT) = uw
  [15] *(sw_screen+2*SIZEOF_INT) = sw
  to:main::@return
main::@return: scope:[main]  from main
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *ub_screen = ub [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((signed char *)ub_screen+1) = sb [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((unsigned int *)ub_screen+1*SIZEOF_UNSIGNED_INT) = uw [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((int *)ub_screen+2*SIZEOF_INT) = sw [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((char *)sb_screen) = ub [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *(sb_screen+1) = sb [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *((unsigned int *)sb_screen+1*SIZEOF_UNSIGNED_INT) = uw [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *((int *)sb_screen+2*SIZEOF_INT) = sw [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((char *)uw_screen) = ub [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [9] *((signed char *)uw_screen+1) = sb [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *(uw_screen+1*SIZEOF_UNSIGNED_INT) = uw [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] *((int *)uw_screen+2*SIZEOF_INT) = sw [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [12] *((char *)sw_screen) = ub [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [13] *((signed char *)sw_screen+1) = sb [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [14] *((unsigned int *)sw_screen+1*SIZEOF_UNSIGNED_INT) = uw [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [15] *(sw_screen+2*SIZEOF_INT) = sw [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 153 combination 
Uplifting [] best 153 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests casting pointer types to other pointer types
  // Upstart
  // Commodore 64 PRG executable file
.file [name="pointer-cast.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_UNSIGNED_INT = 2
  .const SIZEOF_INT = 2
  .const ub = $29
  .const sb = -$29
  .const uw = $3000
  .const sw = -$3000
  .label ub_screen = $400
  .label sb_screen = $428
  .label uw_screen = $450
  .label sw_screen = $478
.segment Code
  // main
main: {
    // [0] *ub_screen = ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta ub_screen
    // [1] *((signed char *)ub_screen+1) = sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta ub_screen+1
    // [2] *((unsigned int *)ub_screen+1*SIZEOF_UNSIGNED_INT) = uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta ub_screen+1*SIZEOF_UNSIGNED_INT
    lda #>uw
    sta ub_screen+1*SIZEOF_UNSIGNED_INT+1
    // [3] *((int *)ub_screen+2*SIZEOF_INT) = sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta ub_screen+2*SIZEOF_INT
    lda #>sw
    sta ub_screen+2*SIZEOF_INT+1
    // [4] *((char *)sb_screen) = ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sb_screen
    // [5] *(sb_screen+1) = sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sb_screen+1
    // [6] *((unsigned int *)sb_screen+1*SIZEOF_UNSIGNED_INT) = uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sb_screen+1*SIZEOF_UNSIGNED_INT
    lda #>uw
    sta sb_screen+1*SIZEOF_UNSIGNED_INT+1
    // [7] *((int *)sb_screen+2*SIZEOF_INT) = sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sb_screen+2*SIZEOF_INT
    lda #>sw
    sta sb_screen+2*SIZEOF_INT+1
    // [8] *((char *)uw_screen) = ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta uw_screen
    // [9] *((signed char *)uw_screen+1) = sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta uw_screen+1
    // [10] *(uw_screen+1*SIZEOF_UNSIGNED_INT) = uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta uw_screen+1*SIZEOF_UNSIGNED_INT
    lda #>uw
    sta uw_screen+1*SIZEOF_UNSIGNED_INT+1
    // [11] *((int *)uw_screen+2*SIZEOF_INT) = sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta uw_screen+2*SIZEOF_INT
    lda #>sw
    sta uw_screen+2*SIZEOF_INT+1
    // [12] *((char *)sw_screen) = ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sw_screen
    // [13] *((signed char *)sw_screen+1) = sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sw_screen+1
    // [14] *((unsigned int *)sw_screen+1*SIZEOF_UNSIGNED_INT) = uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sw_screen+1*SIZEOF_UNSIGNED_INT
    lda #>uw
    sta sw_screen+1*SIZEOF_UNSIGNED_INT+1
    // [15] *(sw_screen+2*SIZEOF_INT) = sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sw_screen+2*SIZEOF_INT
    lda #>sw
    sta sw_screen+2*SIZEOF_INT+1
    jmp __breturn
    // main::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char SIZEOF_INT = 2
__constant char SIZEOF_UNSIGNED_INT = 2
void main()
__constant signed char sb = -$29
__constant signed char *sb_screen = (signed char *) 1064
__constant int sw = -$3000
__constant int *sw_screen = (int *) 1144
__constant char ub = $29
__constant char *ub_screen = (char *) 1024
__constant unsigned int uw = $3000
__constant unsigned int *uw_screen = (unsigned int *) 1104



FINAL ASSEMBLER
Score: 150

  // File Comments
// Tests casting pointer types to other pointer types
  // Upstart
  // Commodore 64 PRG executable file
.file [name="pointer-cast.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_UNSIGNED_INT = 2
  .const SIZEOF_INT = 2
  .const ub = $29
  .const sb = -$29
  .const uw = $3000
  .const sw = -$3000
  .label ub_screen = $400
  .label sb_screen = $428
  .label uw_screen = $450
  .label sw_screen = $478
.segment Code
  // main
main: {
    // *((byte*)ub_screen) = ub
    // [0] *ub_screen = ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta ub_screen
    // *((signed byte*)ub_screen+1) = sb
    // [1] *((signed char *)ub_screen+1) = sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta ub_screen+1
    // *((word*)ub_screen+1)= uw
    // [2] *((unsigned int *)ub_screen+1*SIZEOF_UNSIGNED_INT) = uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta ub_screen+1*SIZEOF_UNSIGNED_INT
    lda #>uw
    sta ub_screen+1*SIZEOF_UNSIGNED_INT+1
    // *((signed word*)ub_screen+2) = sw
    // [3] *((int *)ub_screen+2*SIZEOF_INT) = sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta ub_screen+2*SIZEOF_INT
    lda #>sw
    sta ub_screen+2*SIZEOF_INT+1
    // *((byte*)sb_screen) = ub
    // [4] *((char *)sb_screen) = ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sb_screen
    // *((signed byte*)sb_screen+1) = sb
    // [5] *(sb_screen+1) = sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sb_screen+1
    // *((word*)sb_screen+1)= uw
    // [6] *((unsigned int *)sb_screen+1*SIZEOF_UNSIGNED_INT) = uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sb_screen+1*SIZEOF_UNSIGNED_INT
    lda #>uw
    sta sb_screen+1*SIZEOF_UNSIGNED_INT+1
    // *((signed word*)sb_screen+2) = sw
    // [7] *((int *)sb_screen+2*SIZEOF_INT) = sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sb_screen+2*SIZEOF_INT
    lda #>sw
    sta sb_screen+2*SIZEOF_INT+1
    // *((byte*)uw_screen) = ub
    // [8] *((char *)uw_screen) = ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta uw_screen
    // *((signed byte*)uw_screen+1) = sb
    // [9] *((signed char *)uw_screen+1) = sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta uw_screen+1
    // *((word*)uw_screen+1)= uw
    // [10] *(uw_screen+1*SIZEOF_UNSIGNED_INT) = uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta uw_screen+1*SIZEOF_UNSIGNED_INT
    lda #>uw
    sta uw_screen+1*SIZEOF_UNSIGNED_INT+1
    // *((signed word*)uw_screen+2) = sw
    // [11] *((int *)uw_screen+2*SIZEOF_INT) = sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta uw_screen+2*SIZEOF_INT
    lda #>sw
    sta uw_screen+2*SIZEOF_INT+1
    // *((byte*)sw_screen) = ub
    // [12] *((char *)sw_screen) = ub -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sw_screen
    // *((signed byte*)sw_screen+1) = sb
    // [13] *((signed char *)sw_screen+1) = sb -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sw_screen+1
    // *((word*)sw_screen+1)= uw
    // [14] *((unsigned int *)sw_screen+1*SIZEOF_UNSIGNED_INT) = uw -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sw_screen+1*SIZEOF_UNSIGNED_INT
    lda #>uw
    sta sw_screen+1*SIZEOF_UNSIGNED_INT+1
    // *((signed word*)sw_screen+2) = sw
    // [15] *(sw_screen+2*SIZEOF_INT) = sw -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sw_screen+2*SIZEOF_INT
    lda #>sw
    sta sw_screen+2*SIZEOF_INT+1
    // main::@return
    // }
    // [16] return 
    rts
}
  // File Data

