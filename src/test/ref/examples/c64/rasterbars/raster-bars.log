Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  asm { sei  }
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@4
  main::$0 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $a
  if(main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  main::$1 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $b
  if(main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  call raster 
  to:main::@4
main::@4: scope:[main]  from main::@3
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return

void raster()
raster: scope:[raster]  from main::@3
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  raster::i#0 = 0
  raster::col#0 = rastercols[raster::i#0]
  to:raster::@1
raster::@1: scope:[raster]  from raster raster::@1
  raster::i#2 = phi( raster/raster::i#0, raster::@1/raster::i#1 )
  raster::col#2 = phi( raster/raster::col#0, raster::@1/raster::col#1 )
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = raster::col#2
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = raster::col#2
  raster::i#1 = ++ raster::i#2
  raster::col#1 = rastercols[raster::i#1]
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  raster::$0 = raster::col#1 != $ff
  if(raster::$0) goto raster::@1
  to:raster::@return
raster::@return: scope:[raster]  from raster::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
constant byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
constant byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
constant struct MOS6569_VICII* const VICII = (struct MOS6569_VICII*)$d000
void __start()
void main()
bool~ main::$0
bool~ main::$1
void raster()
bool~ raster::$0
byte raster::col
byte raster::col#0
byte raster::col#1
byte raster::col#2
byte raster::i
byte raster::i#0
byte raster::i#1
byte raster::i#2
constant byte* rastercols[]  = { $b, 0, $b, $b, $c, $b, $c, $c, $f, $c, $f, $f, 1, $f, 1, 1, $f, 1, $f, $f, $c, $f, $c, $c, $b, $c, $b, $b, 0, $b, 0, $ff }

Adding number conversion cast (unumber) $a in main::$0 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $a
Adding number conversion cast (unumber) $b in main::$1 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $b
Adding number conversion cast (unumber) $ff in raster::$0 = raster::col#1 != $ff
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant integer cast $a
Simplifying constant integer cast $b
Simplifying constant integer cast $ff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $ff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition main::$0 [2] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$a) goto main::@1
Simple Condition main::$1 [4] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$b) goto main::@2
Simple Condition raster::$0 [18] if(raster::col#1!=$ff) goto raster::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant raster::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [6] if(true) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero rastercols in [10] raster::col#0 = rastercols[raster::i#0]
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings raster::i#0
Constant inlined raster::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting raster::@2(between raster::@1 and raster::@1)
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
CALL GRAPH
Calls in [main] to raster:4 

Created 2 initial phi equivalence classes
Coalesced [8] raster::col#3 = raster::col#0
Coalesced [17] raster::col#4 = raster::col#1
Coalesced [18] raster::i#3 = raster::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label raster::@2
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@3
  [1] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$a) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [2] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$b) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [3] phi()
  [4] call raster 
  to:main::@1

void raster()
raster: scope:[raster]  from main::@3
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  [6] raster::col#0 = *rastercols
  to:raster::@1
raster::@1: scope:[raster]  from raster raster::@1
  [7] raster::i#2 = phi( raster/0, raster::@1/raster::i#1 )
  [7] raster::col#2 = phi( raster/raster::col#0, raster::@1/raster::col#1 )
  [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = raster::col#2
  [9] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = raster::col#2
  [10] raster::i#1 = ++ raster::i#2
  [11] raster::col#1 = rastercols[raster::i#1]
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  [13] if(raster::col#1!=$ff) goto raster::@1
  to:raster::@return
raster::@return: scope:[raster]  from raster::@1
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
void raster()
byte raster::col
byte raster::col#0 202.0
byte raster::col#1 10001.0
byte raster::col#2 15052.0
byte raster::i
byte raster::i#1 7500.75
byte raster::i#2 6667.333333333333

Initial phi equivalence classes
[ raster::col#2 raster::col#0 raster::col#1 ]
[ raster::i#2 raster::i#1 ]
Complete equivalence classes
[ raster::col#2 raster::col#0 raster::col#1 ]
[ raster::i#2 raster::i#1 ]
Allocated zp[1]:2 [ raster::col#2 raster::col#0 raster::col#1 ]
Allocated zp[1]:3 [ raster::i#2 raster::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$a) goto main::@1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$b) goto main::@2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ raster::col#2 raster::col#0 raster::col#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ raster::i#2 raster::i#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [raster] 25,255: zp[1]:2 [ raster::col#2 raster::col#0 raster::col#1 ] 14,168.08: zp[1]:3 [ raster::i#2 raster::i#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [raster] best 9573 combination reg byte a [ raster::col#2 raster::col#0 raster::col#1 ] reg byte x [ raster::i#2 raster::i#1 ] 
Uplifting [MOS6526_CIA] best 9573 combination 
Uplifting [MOS6569_VICII] best 9573 combination 
Uplifting [MOS6581_SID] best 9573 combination 
Uplifting [main] best 9573 combination 
Uplifting [] best 9573 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
/// @file
/// @brief Commodore 64 Registers and Constants
/// @file
/// @brief The MOS 6526 Complex Interface Adapter (CIA)
///
/// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
  // Commodore 64 PRG executable file
.file [name="raster-bars.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  /// The VIC-II MOS 6567/6569
  .label VICII = $d000
.segment Code
  // main
main: {
    // asm { sei  }
    sei
    jmp __b1
    // main::@1
  __b1:
    // [1] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$a) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$a
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b1
    jmp __b2
    // main::@2
  __b2:
    // [2] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$b) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$b
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b2
    // [3] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [4] call raster 
    jsr raster
    jmp __b1
}
  // raster
raster: {
    // asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    // [6] raster::col#0 = *rastercols -- vbuaa=_deref_pbuc1 
    lda rastercols
    // [7] phi from raster to raster::@1 [phi:raster->raster::@1]
  __b1_from_raster:
    // [7] phi raster::i#2 = 0 [phi:raster->raster::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [7] phi raster::col#2 = raster::col#0 [phi:raster->raster::@1#1] -- register_copy 
    jmp __b1
    // [7] phi from raster::@1 to raster::@1 [phi:raster::@1->raster::@1]
  __b1_from___b1:
    // [7] phi raster::i#2 = raster::i#1 [phi:raster::@1->raster::@1#0] -- register_copy 
    // [7] phi raster::col#2 = raster::col#1 [phi:raster::@1->raster::@1#1] -- register_copy 
    jmp __b1
    // raster::@1
  __b1:
    // [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = raster::col#2 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [9] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = raster::col#2 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [10] raster::i#1 = ++ raster::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [11] raster::col#1 = rastercols[raster::i#1] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda rastercols,x
    // asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    // [13] if(raster::col#1!=$ff) goto raster::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$ff
    bne __b1_from___b1
    jmp __breturn
    // raster::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data
.segment Data
  rastercols: .byte $b, 0, $b, $b, $c, $b, $c, $c, $f, $c, $f, $f, 1, $f, 1, 1, $f, 1, $f, $f, $c, $f, $c, $c, $b, $c, $b, $b, 0, $b, 0, $ff

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b3_from___b2:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b3:
Removing instruction __b1_from_raster:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
constant byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
constant byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
constant byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
constant struct MOS6569_VICII* const VICII = (struct MOS6569_VICII*) 53248
void main()
void raster()
byte raster::col
byte raster::col#0 reg byte a 202.0
byte raster::col#1 reg byte a 10001.0
byte raster::col#2 reg byte a 15052.0
byte raster::i
byte raster::i#1 reg byte x 7500.75
byte raster::i#2 reg byte x 6667.333333333333
constant byte* rastercols[]  = { $b, 0, $b, $b, $c, $b, $c, $c, $f, $c, $f, $f, 1, $f, 1, 1, $f, 1, $f, $f, $c, $f, $c, $c, $b, $c, $b, $b, 0, $b, 0, $ff }

reg byte a [ raster::col#2 raster::col#0 raster::col#1 ]
reg byte x [ raster::i#2 raster::i#1 ]


FINAL ASSEMBLER
Score: 8340

  // File Comments
/// @file
/// @brief Commodore 64 Registers and Constants
/// @file
/// @brief The MOS 6526 Complex Interface Adapter (CIA)
///
/// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
  // Commodore 64 PRG executable file
.file [name="raster-bars.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  /// The VIC-II MOS 6567/6569
  .label VICII = $d000
.segment Code
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // main::@1
  __b1:
    // while (VICII->RASTER!=$a)
    // [1] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$a) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$a
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b1
    // main::@2
  __b2:
    // while (VICII->RASTER!=$b)
    // [2] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$b) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$b
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b2
    // [3] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // raster()
    // [4] call raster 
    jsr raster
    jmp __b1
}
  // raster
raster: {
    // asm
    // asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    // char col = rastercols[i]
    // [6] raster::col#0 = *rastercols -- vbuaa=_deref_pbuc1 
    lda rastercols
    // [7] phi from raster to raster::@1 [phi:raster->raster::@1]
    // [7] phi raster::i#2 = 0 [phi:raster->raster::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [7] phi raster::col#2 = raster::col#0 [phi:raster->raster::@1#1] -- register_copy 
    // [7] phi from raster::@1 to raster::@1 [phi:raster::@1->raster::@1]
    // [7] phi raster::i#2 = raster::i#1 [phi:raster::@1->raster::@1#0] -- register_copy 
    // [7] phi raster::col#2 = raster::col#1 [phi:raster::@1->raster::@1#1] -- register_copy 
    // raster::@1
  __b1:
    // VICII->BG_COLOR = col
    // [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = raster::col#2 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // VICII->BORDER_COLOR = col
    // [9] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = raster::col#2 -- _deref_pbuc1=vbuaa 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // col  = rastercols[++i];
    // [10] raster::i#1 = ++ raster::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // col  = rastercols[++i]
    // [11] raster::col#1 = rastercols[raster::i#1] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda rastercols,x
    // asm
    // asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    // while (col!=$ff)
    // [13] if(raster::col#1!=$ff) goto raster::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$ff
    bne __b1
    // raster::@return
    // }
    // [14] return 
    rts
}
  // File Data
.segment Data
  rastercols: .byte $b, 0, $b, $b, $c, $b, $c, $c, $f, $c, $f, $f, 1, $f, 1, 1, $f, 1, $f, $f, $c, $f, $c, $c, $b, $c, $b, $b, 0, $b, 0, $ff

