
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/(byte)$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy 
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [16] tod_init::tod_TENTHS#0 = *((byte*)&TOD_ZERO)
  [17] tod_init::tod_SEC#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [18] tod_init::tod_MIN#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [19] tod_init::tod_HOURS#0 = *((byte*)&TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [20] call tod_init 
  to:main::@1
main::@1: scope:[main]  from main main::@10
  [21] main::i#2 = phi( main::@10/main::i#1, main/0 )
  [22] if(main::i#2<$2710) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [23] phi()
  [24] call gotoxy 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [25] phi()
  [26] call tod_read 
  [27] tod_read::return_TENTHS#2 = tod_read::return_TENTHS#0
  [28] tod_read::return_SEC#2 = tod_read::return_SEC#0
  [29] tod_read::return_MIN#2 = tod_read::return_MIN#0
  [30] tod_read::return_HOURS#2 = tod_read::return_HOURS#0
  to:main::@7
main::@7: scope:[main]  from main::@6
  [31] tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2
  [32] tod_str::tod_SEC#0 = tod_read::return_SEC#2
  [33] tod_str::tod_MIN#0 = tod_read::return_MIN#2
  [34] tod_str::tod_HOURS#0 = tod_read::return_HOURS#2
  [35] call tod_str 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [36] phi()
  [37] call cputs 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [38] phi()
  [39] call printf_string 
  to:main::@return
main::@return: scope:[main]  from main::@9
  [40] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [41] main::$6 = main::i#2 & $7f
  [42] if(main::$6!=0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@2
  [43] phi()
  [44] call gotoxy 
  to:main::@11
main::@11: scope:[main]  from main::@5
  [45] printf_uint::uvalue#0 = main::i#2
  [46] call printf_uint 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [47] phi()
  [48] call gotoxy 
  to:main::@4
main::@4: scope:[main]  from main::@12 main::@2
  [49] phi()
  [50] call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@4
  [51] main::i#1 = ++ main::i#2
  to:main::@1

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1 main::@12 main::@3 main::@5
  [52] gotoxy::y#6 = phi( conio_c64_init::@1/gotoxy::y#2, main::@12/0, main::@3/$16, main::@5/$10 )
  [53] if(gotoxy::y#6<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [54] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [55] gotoxy::y#7 = phi( gotoxy::@3/gotoxy::y#6, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [56] conio_cursor_x = 0
  [57] conio_cursor_y = gotoxy::y#7
  [58] gotoxy::$7 = (word)gotoxy::y#7
  [59] gotoxy::$8 = gotoxy::$7 << 2
  [60] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [61] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [62] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [63] conio_line_text = gotoxy::$5
  [64] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [65] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [66] return 
  to:@return

void tod_init(byte tod_init::tod_TENTHS , byte tod_init::tod_SEC , byte tod_init::tod_MIN , byte tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  [67] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | $80
  [68] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & $7f
  [69] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) = tod_init::tod_HOURS#0
  [70] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) = tod_init::tod_MIN#0
  [71] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) = tod_init::tod_SEC#0
  [72] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) = tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [73] return 
  to:@return

struct TIME_OF_DAY tod_read()
tod_read: scope:[tod_read]  from main::@6
  [74] tod_read::return_HOURS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [75] tod_read::return_MIN#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [76] tod_read::return_SEC#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [77] tod_read::return_TENTHS#0 = *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [78] return 
  to:@return

byte* tod_str(byte tod_str::tod_TENTHS , byte tod_str::tod_SEC , byte tod_str::tod_MIN , byte tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@7
  [79] tod_str::$0 = tod_str::tod_HOURS#0 >> 4
  [80] tod_str::$1 = '0' + tod_str::$0
  [81] *tod_buffer = tod_str::$1
  [82] tod_str::$2 = tod_str::tod_HOURS#0 & $f
  [83] tod_str::$3 = '0' + tod_str::$2
  [84] *(tod_buffer+1) = tod_str::$3
  [85] tod_str::$4 = tod_str::tod_MIN#0 >> 4
  [86] tod_str::$5 = '0' + tod_str::$4
  [87] *(tod_buffer+3) = tod_str::$5
  [88] tod_str::$6 = tod_str::tod_MIN#0 & $f
  [89] tod_str::$7 = '0' + tod_str::$6
  [90] *(tod_buffer+4) = tod_str::$7
  [91] tod_str::$8 = tod_str::tod_SEC#0 >> 4
  [92] tod_str::$9 = '0' + tod_str::$8
  [93] *(tod_buffer+6) = tod_str::$9
  [94] tod_str::$10 = tod_str::tod_SEC#0 & $f
  [95] tod_str::$11 = '0' + tod_str::$10
  [96] *(tod_buffer+7) = tod_str::$11
  [97] tod_str::$12 = tod_str::tod_TENTHS#0 >> 4
  [98] tod_str::$13 = '0' + tod_str::$12
  [99] *(tod_buffer+9) = tod_str::$13
  [100] tod_str::$14 = tod_str::tod_TENTHS#0 & $f
  [101] tod_str::$15 = '0' + tod_str::$14
  [102] *(tod_buffer+$a) = tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [103] return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@4 main::@8 printf_number_buffer::@2 printf_string::@1
  [104] cputs::s#6 = phi( main::@4/main::s1, main::@8/main::s, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0, printf_string::@1/tod_buffer )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [105] cputs::s#5 = phi( cputs/cputs::s#6, cputs::@2/cputs::s#0 )
  [106] cputs::c#1 = *cputs::s#5
  [107] cputs::s#0 = ++ cputs::s#5
  [108] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [109] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [110] cputc::c#0 = cputs::c#1
  [111] call cputc 
  to:cputs::@1

void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@9
  [112] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [113] phi()
  [114] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [115] return 
  to:@return

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@11
  [116] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [117] *((byte*)&printf_buffer) = 0
  [118] utoa::value#1 = printf_uint::uvalue#0
  [119] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [120] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [121] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [122] return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [123] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@3/cputc::c#2 )
  [124] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [125] conio_line_text[conio_cursor_x] = cputc::c#3
  [126] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [127] conio_cursor_x = ++ conio_cursor_x
  [128] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [129] phi()
  [130] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [131] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [132] phi()
  [133] call cputln 
  to:cputc::@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [134] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [135] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [135] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [135] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [135] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [136] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [137] utoa::$11 = (byte)utoa::value#2
  [138] *utoa::buffer#11 = DIGITS[utoa::$11]
  [139] utoa::buffer#3 = ++ utoa::buffer#11
  [140] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [141] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [142] utoa::$10 = utoa::digit#2 << 1
  [143] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [144] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [145] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [146] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [146] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [146] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [147] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [148] utoa_append::buffer#0 = utoa::buffer#11
  [149] utoa_append::value#0 = utoa::value#2
  [150] utoa_append::sub#0 = utoa::digit_value#0
  [151] call utoa_append 
  [152] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [153] utoa::value#0 = utoa_append::return#0
  [154] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [155] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [156] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [157] cputc::c#2 = printf_number_buffer::buffer_sign#0
  [158] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [159] phi()
  [160] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [161] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [162] conio_line_text = conio_line_text + $28
  [163] conio_line_color = conio_line_color + $28
  [164] conio_cursor_x = 0
  [165] conio_cursor_y = ++ conio_cursor_y
  [166] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [167] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [168] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [169] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [169] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [170] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [171] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [172] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [173] utoa_append::digit#1 = ++ utoa_append::digit#2
  [174] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [175] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [176] phi()
  [177] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [178] phi()
  [179] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [180] phi()
  [181] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [182] phi()
  [183] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [184] conio_line_text = conio_line_text - $28
  [185] conio_line_color = conio_line_color - $28
  [186] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [187] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [188] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [188] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [189] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [190] memcpy::src#4 = (byte*)memcpy::source#2
  [191] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [192] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [192] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [193] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [194] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [195] *memcpy::dst#2 = *memcpy::src#2
  [196] memcpy::dst#1 = ++ memcpy::dst#2
  [197] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [198] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [198] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [199] memset::end#0 = (byte*)memset::str#3 + $28
  [200] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [201] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [202] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [203] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [204] *memset::dst#2 = memset::c#4
  [205] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
