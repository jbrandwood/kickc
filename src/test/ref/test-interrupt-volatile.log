Resolved forward reference irq to interrupt(KERNEL_MIN)(void()) irq()
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Culled Empty Block (label) @1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (number) $314
  (byte*) BGCOL#0 ← ((byte*)) (number) $d020
  (byte) col#0 ← (number) 0
  to:@2
main: scope:[main]  from @2
  (byte) col#10 ← phi( @2/(byte) col#9 )
  (void()*~) main::$0 ← & interrupt(KERNEL_MIN)(void()) irq()
  *((void()**) KERNEL_IRQ#0) ← (void()*~) main::$0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) col#8 ← phi( main/(byte) col#10 main::@2/(byte) col#1 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) col#4 ← phi( main::@1/(byte) col#8 )
  (byte) col#1 ← ++ (byte) col#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) col#5 ← phi( main::@1/(byte) col#8 )
  (byte) col#2 ← (byte) col#5
  return 
  to:@return
irq: scope:[irq]  from
  (byte) col#6 ← phi( @2/(byte) col#9 )
  asm { lda$dc0d  }
  *((byte*) BGCOL#0) ← (byte) col#6
  to:irq::@return
irq::@return: scope:[irq]  from irq
  return 
  to:@return
@2: scope:[]  from @begin
  (byte) col#9 ← phi( @begin/(byte) col#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte) col#7 ← phi( @2/(byte) col#2 )
  (byte) col#3 ← (byte) col#7
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(byte) col
(byte) col#0
(byte) col#1
(byte) col#10
(byte) col#2
(byte) col#3
(byte) col#4
(byte) col#5
(byte) col#6
(byte) col#7
(byte) col#8
(byte) col#9
interrupt(KERNEL_MIN)(void()) irq()
(label) irq::@return
(void()) main()
(void()*~) main::$0
(label) main::@1
(label) main::@2
(label) main::@return

Adding number conversion cast (unumber) 0 in (byte) col#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (void()**) KERNEL_IRQ#0 ← (void()**)(number) $314
Inlining cast (byte*) BGCOL#0 ← (byte*)(number) $d020
Inlining cast (byte) col#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 53280
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte) col#2 = (byte) col#4 (byte) col#8 (byte) col#5 
Alias (byte) col#0 = (byte) col#9 
Alias (byte) col#3 = (byte) col#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) col#10 (byte) col#0
Identical Phi Values (byte) col#6 (byte) col#0
Identical Phi Values (byte) col#3 (byte) col#2
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [4] (void()*~) main::$0 ← & interrupt(KERNEL_MIN)(void()) irq()
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const void()**) KERNEL_IRQ#0 = (void()**) 788
Constant (const byte*) BGCOL#0 = (byte*) 53280
Constant (const void()*) main::$0 = &irq
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [7] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Constant inlined main::$0 = &interrupt(KERNEL_MIN)(void()) irq()
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [6] col#11 ← col#0
Coalesced [9] col#12 ← col#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @3
Renumbering block @2 to @1
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] (byte) col#0 ← (byte) 0
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) col#2 ← phi( main/(byte) col#0 main::@2/(byte) col#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] (byte) col#1 ← ++ (byte) col#2
  to:main::@1
irq: scope:[irq]  from
  asm { lda$dc0d  }
  [8] *((const byte*) BGCOL#0) ← (byte) col#0
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(void()**) KERNEL_IRQ
(byte) col
(byte) col#0 1.5
(byte) col#1 22.0
(byte) col#2 24.0
interrupt(KERNEL_MIN)(void()) irq()
(void()) main()

Initial phi equivalence classes
[ col#2 col#0 col#1 ]
Complete equivalence classes
[ col#2 col#0 col#1 ]
Allocated zp ZP_BYTE:2 [ col#2 col#0 col#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label BGCOL = $d020
  .label col = 2
  // @begin
bbegin:
  // [0] (byte) col#0 ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z col
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    // [5] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
  b1_from_main:
  b1_from_b2:
    // [5] phi (byte) col#2 = (byte) col#0 [phi:main/main::@2->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    jmp b2
    // main::@2
  b2:
    // [6] (byte) col#1 ← ++ (byte) col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    jmp b1_from_b2
}
  // irq
irq: {
    // entry interrupt(KERNEL_MIN)
    // asm { lda$dc0d  }
    lda $dc0d
    // [8] *((const byte*) BGCOL#0) ← (byte) col#0 -- _deref_pbuc1=vbuz1 
    lda.z col
    sta BGCOL
    jmp breturn
    // irq::@return
  breturn:
    // [9] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (byte) col#0 ← (byte) 0 [ col#0 ] (  [ col#0 ] ) always clobbers reg byte a 
Statement [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() [ col#0 ] ( main:2 [ col#0 ] ) always clobbers reg byte a 
Statement asm { lda$dc0d  } always clobbers reg byte a 
Statement [8] *((const byte*) BGCOL#0) ← (byte) col#0 [ ] (  [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ col#2 col#0 col#1 ] : zp ZP_BYTE:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 47.5: zp ZP_BYTE:2 [ col#2 col#0 col#1 ] 
Uplift Scope [main] 
Uplift Scope [irq] 

Uplifting [] best 186 combination zp ZP_BYTE:2 [ col#2 col#0 col#1 ] 
Uplifting [main] best 186 combination 
Uplifting [irq] best 186 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ col#2 col#0 col#1 ]
Uplifting [] best 186 combination zp ZP_BYTE:2 [ col#2 col#0 col#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label BGCOL = $d020
  .label col = 2
  // @begin
bbegin:
  // [0] (byte) col#0 ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z col
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    // [5] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
  b1_from_main:
  b1_from_b2:
    // [5] phi (byte) col#2 = (byte) col#0 [phi:main/main::@2->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    jmp b2
    // main::@2
  b2:
    // [6] (byte) col#1 ← ++ (byte) col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    jmp b1_from_b2
}
  // irq
irq: {
    // entry interrupt(KERNEL_MIN)
    // asm { lda$dc0d  }
    lda $dc0d
    // [8] *((const byte*) BGCOL#0) ← (byte) col#0 -- _deref_pbuc1=vbuz1 
    lda.z col
    sta BGCOL
    jmp breturn
    // irq::@return
  breturn:
    // [9] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b2 with b2
Removing instruction b1_from_bbegin:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction b1_from_b2:
Removing instruction b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (byte*) 53280
(void()**) KERNEL_IRQ
(const void()**) KERNEL_IRQ#0 KERNEL_IRQ = (void()**) 788
(byte) col
(byte) col#0 col zp ZP_BYTE:2 1.5
(byte) col#1 col zp ZP_BYTE:2 22.0
(byte) col#2 col zp ZP_BYTE:2 24.0
interrupt(KERNEL_MIN)(void()) irq()
(label) irq::@return
(void()) main()
(label) main::@1
(label) main::@2

zp ZP_BYTE:2 [ col#2 col#0 col#1 ]


FINAL ASSEMBLER
Score: 123

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label BGCOL = $d020
  .label col = 2
  // @begin
bbegin:
  // col = 0
  // [0] (byte) col#0 ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z col
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  jsr main
  rts
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // *KERNEL_IRQ = &irq
    // [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    // [5] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
    // [5] phi (byte) col#2 = (byte) col#0 [phi:main/main::@2->main::@1#0] -- register_copy 
    // main::@1
    // main::@2
  b2:
    // col++;
    // [6] (byte) col#1 ← ++ (byte) col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    jmp b2
}
  // irq
irq: {
    // entry interrupt(KERNEL_MIN)
    // asm
    // asm { lda$dc0d  }
    lda $dc0d
    // *BGCOL = col
    // [8] *((const byte*) BGCOL#0) ← (byte) col#0 -- _deref_pbuc1=vbuz1 
    lda.z col
    sta BGCOL
    // irq::@return
    // }
    // [9] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data

