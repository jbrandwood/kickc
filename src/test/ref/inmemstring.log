Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte*) main::cursor#0 ← (const byte*) SCREEN
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) main::cursor#2 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#1 )
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#4 )
  *((byte*) main::cursor#2) ← *((const byte*) TEXT + (byte) main::i#3)
  (byte) main::i#1 ← ++ (byte) main::i#3
  (bool~) main::$0 ← (byte) main::i#1 == (number) 8
  (bool~) main::$1 ← ! (bool~) main::$0
  if((bool~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#1 main::@3/(byte) main::i#2 )
  (byte*) main::cursor#3 ← phi( main::@1/(byte*) main::cursor#2 main::@3/(byte*) main::cursor#4 )
  (byte*) main::cursor#1 ← ++ (byte*) main::cursor#3
  (byte*~) main::$2 ← (const byte*) SCREEN + (number) $3e8
  (bool~) main::$3 ← (byte*) main::cursor#1 < (byte*~) main::$2
  if((bool~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) main::cursor#4 ← phi( main::@1/(byte*) main::cursor#2 )
  (byte) main::i#2 ← (number) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) SCREEN = (byte*)(number) $400
(const byte*) TEXT[]  = (byte*) "camelot "z
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) main()
(bool~) main::$0
(bool~) main::$1
(byte*~) main::$2
(bool~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::cursor
(byte*) main::cursor#0
(byte*) main::cursor#1
(byte*) main::cursor#2
(byte*) main::cursor#3
(byte*) main::cursor#4
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4

Adding number conversion cast (unumber) 8 in (bool~) main::$0 ← (byte) main::i#1 == (number) 8
Adding number conversion cast (unumber) $3e8 in (byte*~) main::$2 ← (const byte*) SCREEN + (number) $3e8
Adding number conversion cast (unumber) 0 in (byte) main::i#2 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::i#2 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 8
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [6] (bool~) main::$1 ← (byte) main::i#1 != (byte) 8 from [5] (bool~) main::$0 ← (byte) main::i#1 == (byte) 8
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::cursor#2 = main::cursor#4 
Successful SSA optimization Pass2AliasElimination
Alias main::cursor#2 = main::cursor#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [6] if((byte) main::i#1!=(byte) 8) goto main::@2
Simple Condition (bool~) main::$3 [11] if((byte*) main::cursor#1<(byte*~) main::$2) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [9] (byte*~) main::$2 ← (const byte*) SCREEN + (word) $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::cursor#0 = SCREEN
Constant (const byte) main::i#0 = 0
Constant (const byte*) main::$2 = SCREEN+$3e8
Constant (const byte) main::i#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte*) main::cursor#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#2
Constant inlined main::i#0 = (byte) 0
Constant inlined main::i#2 = (byte) 0
Constant inlined main::cursor#0 = (const byte*) SCREEN
Constant inlined main::$2 = (const byte*) SCREEN+(word) $3e8
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@2 and main::@1)
Added new block during phi lifting main::@5(between main::@1 and main::@2)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [10] main::i#5 ← main::i#4
Coalesced [11] main::cursor#5 ← main::cursor#1
Coalesced [12] main::i#6 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@4
Renumbering block main::@5 to main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte*) main::cursor#2 ← phi( main/(const byte*) SCREEN main::@2/(byte*) main::cursor#1 )
  [1] (byte) main::i#3 ← phi( main/(byte) 0 main::@2/(byte) main::i#4 )
  [2] *((byte*) main::cursor#2) ← *((const byte*) TEXT + (byte) main::i#3)
  [3] (byte) main::i#1 ← ++ (byte) main::i#3
  [4] if((byte) main::i#1!=(byte) 8) goto main::@3
  to:main::@2
main::@3: scope:[main]  from main::@1
  [5] phi()
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [6] (byte) main::i#4 ← phi( main::@3/(byte) main::i#1 main::@1/(byte) 0 )
  [7] (byte*) main::cursor#1 ← ++ (byte*) main::cursor#2
  [8] if((byte*) main::cursor#1<(const byte*) SCREEN+(word) $3e8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::cursor
(byte*) main::cursor#1 16.5
(byte*) main::cursor#2 5.5
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#3 16.5
(byte) main::i#4 7.333333333333333

Initial phi equivalence classes
[ main::i#3 main::i#4 main::i#1 ]
[ main::cursor#2 main::cursor#1 ]
Complete equivalence classes
[ main::i#3 main::i#4 main::i#1 ]
[ main::cursor#2 main::cursor#1 ]
Allocated zp[1]:2 [ main::i#3 main::i#4 main::i#1 ]
Allocated zp[2]:3 [ main::cursor#2 main::cursor#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label i = 2
    .label cursor = 3
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte*) main::cursor#2 = (const byte*) SCREEN [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z cursor
    lda #>SCREEN
    sta.z cursor+1
    // [1] phi (byte) main::i#3 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte*) main::cursor#2 = (byte*) main::cursor#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi (byte) main::i#3 = (byte) main::i#4 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((byte*) main::cursor#2) ← *((const byte*) TEXT + (byte) main::i#3) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda TEXT,y
    ldy #0
    sta (cursor),y
    // [3] (byte) main::i#1 ← ++ (byte) main::i#3 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [4] if((byte) main::i#1!=(byte) 8) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b3_from___b1
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [6] phi (byte) main::i#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b2
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [6] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [6] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@3->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] (byte*) main::cursor#1 ← ++ (byte*) main::cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z cursor
    bne !+
    inc.z cursor+1
  !:
    // [8] if((byte*) main::cursor#1<(const byte*) SCREEN+(word) $3e8) goto main::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda.z cursor+1
    cmp #>SCREEN+$3e8
    bcc __b1_from___b2
    bne !+
    lda.z cursor
    cmp #<SCREEN+$3e8
    bcc __b1_from___b2
  !:
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
  TEXT: .text "camelot "

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] *((byte*) main::cursor#2) ← *((const byte*) TEXT + (byte) main::i#3) [ main::i#3 main::cursor#2 ] (  [ main::i#3 main::cursor#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#3 main::i#4 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#3 main::i#4 main::i#1 ]
Statement [8] if((byte*) main::cursor#1<(const byte*) SCREEN+(word) $3e8) goto main::@1 [ main::i#4 main::cursor#1 ] (  [ main::i#4 main::cursor#1 ] { }  ) always clobbers reg byte a 
Statement [2] *((byte*) main::cursor#2) ← *((const byte*) TEXT + (byte) main::i#3) [ main::i#3 main::cursor#2 ] (  [ main::i#3 main::cursor#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [8] if((byte*) main::cursor#1<(const byte*) SCREEN+(word) $3e8) goto main::@1 [ main::i#4 main::cursor#1 ] (  [ main::i#4 main::cursor#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#3 main::i#4 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ main::cursor#2 main::cursor#1 ] : zp[2]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 34.83: zp[1]:2 [ main::i#3 main::i#4 main::i#1 ] 22: zp[2]:3 [ main::cursor#2 main::cursor#1 ] 
Uplift Scope [] 

Uplifting [main] best 816 combination reg byte x [ main::i#3 main::i#4 main::i#1 ] zp[2]:3 [ main::cursor#2 main::cursor#1 ] 
Uplifting [] best 816 combination 
Allocated (was zp[2]:3) zp[2]:2 [ main::cursor#2 main::cursor#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label cursor = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte*) main::cursor#2 = (const byte*) SCREEN [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z cursor
    lda #>SCREEN
    sta.z cursor+1
    // [1] phi (byte) main::i#3 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte*) main::cursor#2 = (byte*) main::cursor#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi (byte) main::i#3 = (byte) main::i#4 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((byte*) main::cursor#2) ← *((const byte*) TEXT + (byte) main::i#3) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda TEXT,x
    ldy #0
    sta (cursor),y
    // [3] (byte) main::i#1 ← ++ (byte) main::i#3 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if((byte) main::i#1!=(byte) 8) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3_from___b1
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [6] phi (byte) main::i#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [6] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [6] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@3->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] (byte*) main::cursor#1 ← ++ (byte*) main::cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z cursor
    bne !+
    inc.z cursor+1
  !:
    // [8] if((byte*) main::cursor#1<(const byte*) SCREEN+(word) $3e8) goto main::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda.z cursor+1
    cmp #>SCREEN+$3e8
    bcc __b1_from___b2
    bne !+
    lda.z cursor
    cmp #<SCREEN+$3e8
    bcc __b1_from___b2
  !:
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
  TEXT: .text "camelot "

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Removing instruction __b3_from___b1:
Removing instruction __b3:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const byte*) SCREEN = (byte*) 1024
(const byte*) TEXT[]  = (byte*) "camelot "z
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::cursor
(byte*) main::cursor#1 cursor zp[2]:2 16.5
(byte*) main::cursor#2 cursor zp[2]:2 5.5
(byte) main::i
(byte) main::i#1 reg byte x 11.0
(byte) main::i#3 reg byte x 16.5
(byte) main::i#4 reg byte x 7.333333333333333

reg byte x [ main::i#3 main::i#4 main::i#1 ]
zp[2]:2 [ main::cursor#2 main::cursor#1 ]


FINAL ASSEMBLER
Score: 636

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label cursor = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte*) main::cursor#2 = (const byte*) SCREEN [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z cursor
    lda #>SCREEN
    sta.z cursor+1
    // [1] phi (byte) main::i#3 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi (byte*) main::cursor#2 = (byte*) main::cursor#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi (byte) main::i#3 = (byte) main::i#4 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // *cursor = TEXT[i]
    // [2] *((byte*) main::cursor#2) ← *((const byte*) TEXT + (byte) main::i#3) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda TEXT,x
    ldy #0
    sta (cursor),y
    // if(++i==8)
    // [3] (byte) main::i#1 ← ++ (byte) main::i#3 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if((byte) main::i#1!=(byte) 8) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b2
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [6] phi (byte) main::i#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // [6] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [6] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@3->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // while(++cursor<SCREEN+1000)
    // [7] (byte*) main::cursor#1 ← ++ (byte*) main::cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z cursor
    bne !+
    inc.z cursor+1
  !:
    // [8] if((byte*) main::cursor#1<(const byte*) SCREEN+(word) $3e8) goto main::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda.z cursor+1
    cmp #>SCREEN+$3e8
    bcc __b1
    bne !+
    lda.z cursor
    cmp #<SCREEN+$3e8
    bcc __b1
  !:
    // main::@return
    // }
    // [9] return 
    rts
}
  // File Data
  TEXT: .text "camelot "

