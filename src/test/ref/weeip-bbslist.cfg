
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

__stackcall void cputc(char c)
cputc: scope:[cputc]  from printf_number_buffer::@3
  [16] cputc::c#0 = stackidx(char,cputc::OFFSET_STACK_C)
  [17] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [18] conio_line_text[conio_cursor_x] = cputc::c#0
  [19] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [20] conio_cursor_x = ++ conio_cursor_x
  [21] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [22] phi()
  [23] call cputln
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [24] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [25] phi()
  [26] call cputln
  to:cputc::@return

void main()
main: scope:[main]  from __start::@1
  [27] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = $17
  to:main::@1
main::@1: scope:[main]  from main main::@8
  [28] main::bbs#2 = phi( main/bbs_list, main::@8/main::bbs#1 )
  [29] if((char *)0!=*((char **)main::bbs#2)) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [30] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [31] printf_string::str#0 = *((char **)main::bbs#2)
  [32] call printf_string
  to:main::@3
main::@3: scope:[main]  from main::@2
  [33] phi()
  [34] call printf_str
  to:main::@4
main::@4: scope:[main]  from main::@3
  [35] printf_string::str#1 = ((char **)main::bbs#2)[OFFSET_STRUCT_BBS_HOST_NAME]
  [36] call printf_string
  to:main::@5
main::@5: scope:[main]  from main::@4
  [37] phi()
  [38] call printf_str
  to:main::@6
main::@6: scope:[main]  from main::@5
  [39] printf_uint::uvalue#0 = ((unsigned int *)main::bbs#2)[OFFSET_STRUCT_BBS_PORT_NUMBER]
  [40] call printf_uint
  to:main::@7
main::@7: scope:[main]  from main::@6
  [41] phi()
  [42] call printf_str
  to:main::@8
main::@8: scope:[main]  from main::@7
  [43] main::bbs#1 = main::bbs#2 + SIZEOF_STRUCT_BBS
  to:main::@1

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [44] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [45] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [46] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [47] conio_cursor_x = gotoxy::x#2
  [48] conio_cursor_y = gotoxy::y#4
  [49] gotoxy::$7 = (unsigned int)gotoxy::y#4
  [50] gotoxy::$8 = gotoxy::$7 << 2
  [51] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [52] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [53] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [54] conio_line_text = gotoxy::$5
  [55] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [56] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [57] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [58] conio_line_text = conio_line_text + $28
  [59] conio_line_color = conio_line_color + $28
  [60] conio_cursor_x = 0
  [61] conio_cursor_y = ++ conio_cursor_y
  [62] call cscroll
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [63] return 
  to:@return

void printf_string(void (*putc)(char) , char *str , char format_min_length , char format_justify_left)
printf_string: scope:[printf_string]  from main::@2 main::@4
  [64] printf_string::str#2 = phi( main::@2/printf_string::str#0, main::@4/printf_string::str#1 )
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [65] printf_str::s#2 = printf_string::str#2
  [66] call printf_str
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [67] return 
  to:@return

void printf_str(void (*putc)(char) , const char *s)
printf_str: scope:[printf_str]  from main::@3 main::@5 main::@7 printf_number_buffer::@2 printf_string::@1
  [68] printf_str::putc#7 = phi( main::@3/&cputc, main::@5/&cputc, main::@7/&cputc, printf_number_buffer::@2/printf_uint::putc#0, printf_string::@1/&cputc )
  [68] printf_str::s#7 = phi( main::@3/main::s, main::@5/main::s, main::@7/main::s2, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0, printf_string::@1/printf_str::s#2 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [69] printf_str::s#6 = phi( printf_str/printf_str::s#7, printf_str::@2/printf_str::s#0 )
  [70] printf_str::c#1 = *printf_str::s#6
  [71] printf_str::s#0 = ++ printf_str::s#6
  [72] if(0!=printf_str::c#1) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [73] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [74] stackpush(char) = printf_str::c#1
  [75] callexecute *printf_str::putc#7 
  sideeffect stackpullpadding(1)
  to:printf_str::@1

void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uint: scope:[printf_uint]  from main::@6
  [77] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [78] *((char *)&printf_buffer) = 0
  [79] utoa::value#1 = printf_uint::uvalue#0
  [80] call utoa
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [81] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer)
  [82] call printf_number_buffer
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [83] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [84] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [85] phi()
  [86] call memcpy
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [87] phi()
  [88] call memcpy
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [89] phi()
  [90] call memset
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [91] phi()
  [92] call memset
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [93] conio_line_text = conio_line_text - $28
  [94] conio_line_color = conio_line_color - $28
  [95] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [96] return 
  to:@return

void utoa(unsigned int value , char *buffer , char radix)
utoa: scope:[utoa]  from printf_uint::@1
  [97] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [98] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [98] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [98] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [98] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [99] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [100] utoa::$11 = (char)utoa::value#2
  [101] *utoa::buffer#11 = DIGITS[utoa::$11]
  [102] utoa::buffer#3 = ++ utoa::buffer#11
  [103] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [104] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [105] utoa::$10 = utoa::digit#2 << 1
  [106] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [107] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [108] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [109] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [109] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [109] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [110] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [111] utoa_append::buffer#0 = utoa::buffer#11
  [112] utoa_append::value#0 = utoa::value#2
  [113] utoa_append::sub#0 = utoa::digit_value#0
  [114] call utoa_append
  [115] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [116] utoa::value#0 = utoa_append::return#0
  [117] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [118] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [119] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [120] stackpush(char) = printf_number_buffer::buffer_sign#0
  [121] callexecute cputc 
  sideeffect stackpullpadding(1)
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [123] phi()
  [124] call printf_str
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [125] return 
  to:@return

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [126] memcpy::destination#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN, cscroll::@2/(void *)COLORRAM )
  [126] memcpy::source#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN+$28, cscroll::@2/(void *)COLORRAM+$28 )
  [127] memcpy::src_end#0 = (char *)memcpy::source#2 + (unsigned int)$19*$28-$28
  [128] memcpy::src#4 = (char *)memcpy::source#2
  [129] memcpy::dst#4 = (char *)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [130] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [130] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [131] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [132] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [133] *memcpy::dst#2 = *memcpy::src#2
  [134] memcpy::dst#1 = ++ memcpy::dst#2
  [135] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [136] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [136] memset::str#3 = phi( cscroll::@3/(void *)DEFAULT_SCREEN+(unsigned int)$19*$28-$28, cscroll::@4/(void *)COLORRAM+(unsigned int)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [137] memset::end#0 = (char *)memset::str#3 + $28
  [138] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [139] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [140] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [141] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [142] *memset::dst#2 = memset::c#4
  [143] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [144] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [145] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [145] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [146] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [147] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [148] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [149] utoa_append::digit#1 = ++ utoa_append::digit#2
  [150] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1
