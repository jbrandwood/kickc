Adding pointer type conversion cast (byte*) main::SCREEN in (byte*) main::SCREEN ← (number) $400
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  (byte*~) main::$0 ← (byte*) main::SCREEN#0 + (number) $27
  (byte*) main::sc#0 ← (byte*~) main::$0
  (byte) main::i#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) main::sc#2 ← phi( main/(byte*) main::sc#0 main::@1/(byte*) main::sc#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte*) main::sc#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (byte*) main::sc#1 ← -- (byte*) main::sc#2
  (bool~) main::$1 ← (byte) main::i#1 < (number) $28
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte*~) main::$0
(bool~) main::$1
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte*) main::sc
(byte*) main::sc#0
(byte*) main::sc#1
(byte*) main::sc#2

Adding number conversion cast (unumber) $27 in (byte*~) main::$0 ← (byte*) main::SCREEN#0 + (number) $27
Adding number conversion cast (unumber) 0 in (byte) main::i#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) main::$1 ← (byte) main::i#1 < (number) $28
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Inlining cast (byte) main::i#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $27
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte*) main::sc#0 = (byte*~) main::$0 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [9] if((byte) main::i#1<(byte) $28) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (byte*) main::sc#0 ← (const byte*) main::SCREEN#0 + (byte) $27
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::sc#0 = main::SCREEN#0+$27
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) main::sc#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::sc#0 = (const byte*) main::SCREEN#0+(byte) $27
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [12] main::i#3 ← main::i#1
Coalesced [13] main::sc#3 ← main::sc#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte*) main::sc#2 ← phi( main/(const byte*) main::SCREEN#0+(byte) $27 main::@1/(byte*) main::sc#1 )
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] *((byte*) main::sc#2) ← (byte) main::i#2
  [7] (byte) main::i#1 ← ++ (byte) main::i#2
  [8] (byte*) main::sc#1 ← -- (byte*) main::sc#2
  [9] if((byte) main::i#1<(byte) $28) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::SCREEN
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#2 16.5
(byte*) main::sc
(byte*) main::sc#1 11.0
(byte*) main::sc#2 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::sc#2 main::sc#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::sc#2 main::sc#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:3 [ main::sc#2 main::sc#1 ]

INITIAL ASM
//SEG0 File Comments
// Test a for-loop with two iterating variables
// Illustrates that for()-loops currently cannot contain two variable declarations.
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label SCREEN = $400
    .label i = 2
    .label sc = 3
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte*) main::sc#2 = (const byte*) main::SCREEN#0+(byte) $27 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$27
    sta sc
    lda #>SCREEN+$27
    sta sc+1
  //SEG13 [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG14 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG15 [5] phi (byte*) main::sc#2 = (byte*) main::sc#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG16 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp b1
  //SEG17 main::@1
  b1:
  //SEG18 [6] *((byte*) main::sc#2) ← (byte) main::i#2 -- _deref_pbuz1=vbuz2 
    lda i
    ldy #0
    sta (sc),y
  //SEG19 [7] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG20 [8] (byte*) main::sc#1 ← -- (byte*) main::sc#2 -- pbuz1=_dec_pbuz1 
    lda sc
    bne !+
    dec sc+1
  !:
    dec sc
  //SEG21 [9] if((byte) main::i#1<(byte) $28) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$28
    bcc b1_from_b1
    jmp breturn
  //SEG22 main::@return
  breturn:
  //SEG23 [10] return 
    rts
}
//SEG24 File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((byte*) main::sc#2) ← (byte) main::i#2 [ main::i#2 main::sc#2 ] ( main:2 [ main::i#2 main::sc#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [8] (byte*) main::sc#1 ← -- (byte*) main::sc#2 [ main::i#1 main::sc#1 ] ( main:2 [ main::i#1 main::sc#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [6] *((byte*) main::sc#2) ← (byte) main::i#2 [ main::i#2 main::sc#2 ] ( main:2 [ main::i#2 main::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [8] (byte*) main::sc#1 ← -- (byte*) main::sc#2 [ main::i#1 main::sc#1 ] ( main:2 [ main::i#1 main::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ main::sc#2 main::sc#1 ] : zp ZP_WORD:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_WORD:3 [ main::sc#2 main::sc#1 ] 
Uplift Scope [] 

Uplifting [main] best 548 combination reg byte x [ main::i#2 main::i#1 ] zp ZP_WORD:3 [ main::sc#2 main::sc#1 ] 
Uplifting [] best 548 combination 
Allocated (was zp ZP_WORD:3) zp ZP_WORD:2 [ main::sc#2 main::sc#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test a for-loop with two iterating variables
// Illustrates that for()-loops currently cannot contain two variable declarations.
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label SCREEN = $400
    .label sc = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte*) main::sc#2 = (const byte*) main::SCREEN#0+(byte) $27 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$27
    sta sc
    lda #>SCREEN+$27
    sta sc+1
  //SEG13 [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG14 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG15 [5] phi (byte*) main::sc#2 = (byte*) main::sc#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG16 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp b1
  //SEG17 main::@1
  b1:
  //SEG18 [6] *((byte*) main::sc#2) ← (byte) main::i#2 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (sc),y
  //SEG19 [7] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG20 [8] (byte*) main::sc#1 ← -- (byte*) main::sc#2 -- pbuz1=_dec_pbuz1 
    lda sc
    bne !+
    dec sc+1
  !:
    dec sc
  //SEG21 [9] if((byte) main::i#1<(byte) $28) goto main::@1 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc b1_from_b1
    jmp breturn
  //SEG22 main::@return
  breturn:
  //SEG23 [10] return 
    rts
}
//SEG24 File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024
(byte) main::i
(byte) main::i#1 reg byte x 11.0
(byte) main::i#2 reg byte x 16.5
(byte*) main::sc
(byte*) main::sc#1 sc zp ZP_WORD:2 11.0
(byte*) main::sc#2 sc zp ZP_WORD:2 11.0

reg byte x [ main::i#2 main::i#1 ]
zp ZP_WORD:2 [ main::sc#2 main::sc#1 ]


FINAL ASSEMBLER
Score: 446

//SEG0 File Comments
// Test a for-loop with two iterating variables
// Illustrates that for()-loops currently cannot contain two variable declarations.
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label SCREEN = $400
    .label sc = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte*) main::sc#2 = (const byte*) main::SCREEN#0+(byte) $27 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$27
    sta sc
    lda #>SCREEN+$27
    sta sc+1
  //SEG13 [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG14 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG15 [5] phi (byte*) main::sc#2 = (byte*) main::sc#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG16 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
  //SEG17 main::@1
  b1:
  //SEG18 [6] *((byte*) main::sc#2) ← (byte) main::i#2 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (sc),y
  //SEG19 [7] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG20 [8] (byte*) main::sc#1 ← -- (byte*) main::sc#2 -- pbuz1=_dec_pbuz1 
    lda sc
    bne !+
    dec sc+1
  !:
    dec sc
  //SEG21 [9] if((byte) main::i#1<(byte) $28) goto main::@1 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc b1
  //SEG22 main::@return
  //SEG23 [10] return 
    rts
}
//SEG24 File Data

