Culled Empty Block (label) @1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2

(void()) main()
main: scope:[main]  from @2
  (byte) print::c#0 ← (byte) 'a'
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) print::c#1 ← (byte) 'b'
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

(void()) print((byte) print::c)
print: scope:[print]  from main main::@1
  (byte) print::c#2 ← phi( main/(byte) print::c#0 main::@1/(byte) print::c#1 )
  *((const byte*) SCREEN) ← (byte) print::c#2
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) print((byte) print::c)
(label) print::@return
(byte) print::c
(byte) print::c#0
(byte) print::c#1
(byte) print::c#2

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Constant (const byte) print::c#0 = 'a'
Constant (const byte) print::c#1 = 'b'
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) print::c#0
Inlining constant with var siblings (const byte) print::c#1
Constant inlined print::c#0 = (byte) 'a'
Constant inlined print::c#1 = (byte) 'b'
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print:6 print:8 

Created 1 initial phi equivalence classes
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@2
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call print 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return

(void()) print((byte) print::c)
print: scope:[print]  from main main::@1
  [9] (byte) print::c#2 ← phi( main/(byte) 'a' main::@1/(byte) 'b' )
  [10] *((const byte*) SCREEN) ← (byte) print::c#2
  to:print::@return
print::@return: scope:[print]  from print
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(void()) print((byte) print::c)
(byte) print::c
(byte) print::c#2 2.0

Initial phi equivalence classes
[ print::c#2 ]
Complete equivalence classes
[ print::c#2 ]
Allocated zp[1]:2 [ print::c#2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test that a nomodify parameter works
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print 
    // [9] phi from main to print [phi:main->print]
  print_from_main:
    // [9] phi (byte) print::c#2 = (byte) 'a' [phi:main->print#0] -- vbuz1=vbuc1 
    lda #'a'
    sta.z print.c
    jsr print
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call print 
    // [9] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [9] phi (byte) print::c#2 = (byte) 'b' [phi:main::@1->print#0] -- vbuz1=vbuc1 
    lda #'b'
    sta.z print.c
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // print
// print(byte zp(2) c)
print: {
    .label c = 2
    // [10] *((const byte*) SCREEN) ← (byte) print::c#2 -- _deref_pbuc1=vbuz1 
    lda.z c
    sta SCREEN
    jmp __breturn
    // print::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ print::c#2 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 2: zp[1]:2 [ print::c#2 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [print] best 53 combination reg byte a [ print::c#2 ] 
Uplifting [main] best 53 combination 
Uplifting [] best 53 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test that a nomodify parameter works
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print 
    // [9] phi from main to print [phi:main->print]
  print_from_main:
    // [9] phi (byte) print::c#2 = (byte) 'a' [phi:main->print#0] -- vbuaa=vbuc1 
    lda #'a'
    jsr print
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call print 
    // [9] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [9] phi (byte) print::c#2 = (byte) 'b' [phi:main::@1->print#0] -- vbuaa=vbuc1 
    lda #'b'
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // print
// print(byte register(A) c)
print: {
    // [10] *((const byte*) SCREEN) ← (byte) print::c#2 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    jmp __breturn
    // print::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction print_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@return
(void()) print((byte) print::c)
(label) print::@return
(byte) print::c
(byte) print::c#2 reg byte a 2.0

reg byte a [ print::c#2 ]


FINAL ASSEMBLER
Score: 32

  // File Comments
// Test that a nomodify parameter works
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // print('a')
    // [5] call print 
    // [9] phi from main to print [phi:main->print]
    // [9] phi (byte) print::c#2 = (byte) 'a' [phi:main->print#0] -- vbuaa=vbuc1 
    lda #'a'
    jsr print
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print('b')
    // [7] call print 
    // [9] phi from main::@1 to print [phi:main::@1->print]
    // [9] phi (byte) print::c#2 = (byte) 'b' [phi:main::@1->print#0] -- vbuaa=vbuc1 
    lda #'b'
    jsr print
    // main::@return
    // }
    // [8] return 
    rts
}
  // print
// print(byte register(A) c)
print: {
    // *SCREEN = c
    // [10] *((const byte*) SCREEN) ← (byte) print::c#2 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // print::@return
    // }
    // [11] return 
    rts
}
  // File Data

