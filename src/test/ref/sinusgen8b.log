Identified literal word (dword) { div32u16u::quotient_hi, div32u16u::quotient_lo } in (dword) div32u16u::quotient ← { (word) div32u16u::quotient_hi, (word) div32u16u::quotient_lo }
Adding pointer type conversion cast (byte*) print_screen in (byte*) print_screen ← (number) $400
Fixing pointer increment (signed word*) sin16s_gen::sintab ← ++ (signed word*) sin16s_gen::sintab
Fixing pointer increment (signed word*) sin16s_gen2::sintab ← ++ (signed word*) sin16s_gen2::sintab
Fixing pointer addition (signed word*~) main::$4 ← (signed word[$c0]) main::sintabw + (word~) main::$3
Identified constant variable (word) main::wavelength
Culled Empty Block (label) @1
Culled Empty Block (label) divr16u::@7
Culled Empty Block (label) @3
Culled Empty Block (label) div16u::@1
Culled Empty Block (label) @4
Culled Empty Block (label) div32u16u::@1
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) mul8u::@5
Culled Empty Block (label) mul8u::@6
Culled Empty Block (label) mul8u::@8
Culled Empty Block (label) mul8u::@9
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) mul16u::@5
Culled Empty Block (label) mul16u::@6
Culled Empty Block (label) mul16u::@8
Culled Empty Block (label) mul16u::@9
Culled Empty Block (label) @12
Culled Empty Block (label) sin16s_gen::@2
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) sin8s_gen::@2
Culled Empty Block (label) @16
Culled Empty Block (label) sin16s::@7
Culled Empty Block (label) @17
Culled Empty Block (label) sin8s::@9
Culled Empty Block (label) @18
Culled Empty Block (label) mulu16_sel::@1
Culled Empty Block (label) @19
Culled Empty Block (label) mulu8_sel::@1
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) print_sbyte::@4
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) @38
Culled Empty Block (label) @39
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  (word) rem16u#0 ← (number) 0
  to:@13
divr16u: scope:[divr16u]  from div16u div32u16u div32u16u::@2
  (word) divr16u::divisor#7 ← phi( div16u/(word) divr16u::divisor#0 div32u16u/(word) divr16u::divisor#1 div32u16u::@2/(word) divr16u::divisor#2 )
  (word) divr16u::dividend#6 ← phi( div16u/(word) divr16u::dividend#1 div32u16u/(word) divr16u::dividend#2 div32u16u::@2/(word) divr16u::dividend#3 )
  (word) divr16u::rem#11 ← phi( div16u/(word) divr16u::rem#3 div32u16u/(word) divr16u::rem#4 div32u16u::@2/(word) divr16u::rem#5 )
  (word) divr16u::quotient#0 ← (number) 0
  (byte) divr16u::i#0 ← (byte) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#5 ← phi( divr16u/(word) divr16u::divisor#7 divr16u::@3/(word) divr16u::divisor#8 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#4 ← phi( divr16u/(word) divr16u::dividend#6 divr16u::@3/(word) divr16u::dividend#7 )
  (word) divr16u::rem#6 ← phi( divr16u/(word) divr16u::rem#11 divr16u::@3/(word) divr16u::rem#12 )
  (word~) divr16u::$0 ← (word) divr16u::rem#6 << (number) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#4
  (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
  (bool~) divr16u::$3 ← (number~) divr16u::$2 != (number) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#3 ← phi( divr16u::@1/(word) divr16u::divisor#5 divr16u::@4/(word) divr16u::divisor#6 )
  (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#5 ← phi( divr16u::@1/(word) divr16u::dividend#4 divr16u::@4/(word) divr16u::dividend#8 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#5 << (number) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#7 >= (word) divr16u::divisor#3
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#6 ← phi( divr16u::@1/(word) divr16u::divisor#5 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#8 ← phi( divr16u::@1/(word) divr16u::dividend#4 )
  (word) divr16u::rem#8 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (number~) divr16u::$5 ← (word) divr16u::rem#8 | (number) 1
  (word) divr16u::rem#1 ← (number~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#8 ← phi( divr16u::@2/(word) divr16u::divisor#3 divr16u::@5/(word) divr16u::divisor#4 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#7 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#9 )
  (word) divr16u::rem#12 ← phi( divr16u::@2/(word) divr16u::rem#7 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#9 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#4 ← phi( divr16u::@2/(word) divr16u::divisor#3 )
  (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#7 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#9 - (word) divr16u::divisor#4
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#10 ← phi( divr16u::@3/(word) divr16u::rem#12 )
  (word) rem16u#1 ← (word) divr16u::rem#10
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#16 ← phi( divr16u::@6/(word) rem16u#1 )
  (word) divr16u::return#5 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#5
  (word) rem16u#2 ← (word) rem16u#16
  return 
  to:@return
div16u: scope:[div16u]  from sin8s_gen
  (word) rem16u#30 ← phi( sin8s_gen/(word) rem16u#34 )
  (word) div16u::divisor#1 ← phi( sin8s_gen/(word) div16u::divisor#0 )
  (word) div16u::dividend#1 ← phi( sin8s_gen/(word) div16u::dividend#0 )
  (word) divr16u::dividend#1 ← (word) div16u::dividend#1
  (word) divr16u::divisor#0 ← (word) div16u::divisor#1
  (word) divr16u::rem#3 ← (number) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  (word) rem16u#17 ← phi( div16u/(word) rem16u#2 )
  (word) divr16u::return#6 ← phi( div16u/(word) divr16u::return#2 )
  (word~) div16u::$0 ← (word) divr16u::return#6
  (word) rem16u#3 ← (word) rem16u#17
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  (word) rem16u#18 ← phi( div16u::@2/(word) rem16u#3 )
  (word) div16u::return#3 ← phi( div16u::@2/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#3
  (word) rem16u#4 ← (word) rem16u#18
  return 
  to:@return
div32u16u: scope:[div32u16u]  from sin16s_gen
  (word) rem16u#31 ← phi( sin16s_gen/(word) rem16u#32 )
  (word) div32u16u::divisor#1 ← phi( sin16s_gen/(word) div32u16u::divisor#0 )
  (dword) div32u16u::dividend#1 ← phi( sin16s_gen/(dword) div32u16u::dividend#0 )
  (word~) div32u16u::$0 ← > (dword) div32u16u::dividend#1
  (word) divr16u::dividend#2 ← (word~) div32u16u::$0
  (word) divr16u::divisor#1 ← (word) div32u16u::divisor#1
  (word) divr16u::rem#4 ← (number) 0
  call divr16u 
  (word) divr16u::return#3 ← (word) divr16u::return#1
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u
  (word) div32u16u::divisor#2 ← phi( div32u16u/(word) div32u16u::divisor#1 )
  (dword) div32u16u::dividend#2 ← phi( div32u16u/(dword) div32u16u::dividend#1 )
  (word) rem16u#19 ← phi( div32u16u/(word) rem16u#2 )
  (word) divr16u::return#7 ← phi( div32u16u/(word) divr16u::return#3 )
  (word~) div32u16u::$1 ← (word) divr16u::return#7
  (word) rem16u#5 ← (word) rem16u#19
  (word) div32u16u::quotient_hi#0 ← (word~) div32u16u::$1
  (word~) div32u16u::$2 ← < (dword) div32u16u::dividend#2
  (word) divr16u::dividend#3 ← (word~) div32u16u::$2
  (word) divr16u::divisor#2 ← (word) div32u16u::divisor#2
  (word) divr16u::rem#5 ← (word) rem16u#5
  call divr16u 
  (word) divr16u::return#4 ← (word) divr16u::return#1
  to:div32u16u::@3
div32u16u::@3: scope:[div32u16u]  from div32u16u::@2
  (word) div32u16u::quotient_hi#1 ← phi( div32u16u::@2/(word) div32u16u::quotient_hi#0 )
  (word) rem16u#20 ← phi( div32u16u::@2/(word) rem16u#2 )
  (word) divr16u::return#8 ← phi( div32u16u::@2/(word) divr16u::return#4 )
  (word~) div32u16u::$3 ← (word) divr16u::return#8
  (word) rem16u#6 ← (word) rem16u#20
  (word) div32u16u::quotient_lo#0 ← (word~) div32u16u::$3
  (dword) div32u16u::quotient#0 ← ((dword)) { (word) div32u16u::quotient_hi#1, (word) div32u16u::quotient_lo#0 }
  (dword) div32u16u::return#0 ← (dword) div32u16u::quotient#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@3
  (word) rem16u#21 ← phi( div32u16u::@3/(word) rem16u#6 )
  (dword) div32u16u::return#3 ← phi( div32u16u::@3/(dword) div32u16u::return#0 )
  (dword) div32u16u::return#1 ← (dword) div32u16u::return#3
  (word) rem16u#7 ← (word) rem16u#21
  return 
  to:@return
mul8u: scope:[mul8u]  from mulu8_sel
  (byte) mul8u::a#5 ← phi( mulu8_sel/(byte) mul8u::a#1 )
  (byte) mul8u::b#1 ← phi( mulu8_sel/(byte) mul8u::b#0 )
  (word) mul8u::res#0 ← (number) 0
  (word) mul8u::mb#0 ← (byte) mul8u::b#1
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#5 mul8u::@4/(byte) mul8u::a#0 )
  (bool~) mul8u::$0 ← (byte) mul8u::a#2 != (number) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#3 ← phi( mul8u::@1/(byte) mul8u::a#2 )
  (number~) mul8u::$1 ← (byte) mul8u::a#3 & (number) 1
  (bool~) mul8u::$2 ← (number~) mul8u::$1 != (number) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@7
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@7
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@7/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@7/(word) mul8u::mb#3 )
  (byte) mul8u::a#4 ← phi( mul8u::@2/(byte) mul8u::a#3 mul8u::@7/(byte) mul8u::a#6 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#4 >> (number) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@7: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#6 ← phi( mul8u::@2/(byte) mul8u::a#3 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#3 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#3
  return 
  to:@return
mul16u: scope:[mul16u]  from mulu16_sel
  (word) mul16u::a#5 ← phi( mulu16_sel/(word) mul16u::a#1 )
  (word) mul16u::b#1 ← phi( mulu16_sel/(word) mul16u::b#0 )
  (dword) mul16u::res#0 ← (number) 0
  (dword) mul16u::mb#0 ← (word) mul16u::b#1
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  (dword) mul16u::mb#5 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  (dword) mul16u::res#4 ← phi( mul16u/(dword) mul16u::res#0 mul16u::@4/(dword) mul16u::res#6 )
  (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#5 mul16u::@4/(word) mul16u::a#0 )
  (bool~) mul16u::$0 ← (word) mul16u::a#2 != (number) 0
  if((bool~) mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#5 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::mb#4 ← phi( mul16u::@1/(dword) mul16u::mb#5 )
  (word) mul16u::a#3 ← phi( mul16u::@1/(word) mul16u::a#2 )
  (number~) mul16u::$1 ← (word) mul16u::a#3 & (number) 1
  (bool~) mul16u::$2 ← (number~) mul16u::$1 != (number) 0
  (bool~) mul16u::$3 ← ! (bool~) mul16u::$2
  if((bool~) mul16u::$3) goto mul16u::@4
  to:mul16u::@7
mul16u::@3: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#2 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::return#0 ← (dword) mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@7
  (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#5 mul16u::@7/(dword) mul16u::res#1 )
  (dword) mul16u::mb#2 ← phi( mul16u::@2/(dword) mul16u::mb#4 mul16u::@7/(dword) mul16u::mb#3 )
  (word) mul16u::a#4 ← phi( mul16u::@2/(word) mul16u::a#3 mul16u::@7/(word) mul16u::a#6 )
  (word~) mul16u::$5 ← (word) mul16u::a#4 >> (number) 1
  (word) mul16u::a#0 ← (word~) mul16u::$5
  (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (number) 1
  (dword) mul16u::mb#1 ← (dword~) mul16u::$6
  to:mul16u::@1
mul16u::@7: scope:[mul16u]  from mul16u::@2
  (word) mul16u::a#6 ← phi( mul16u::@2/(word) mul16u::a#3 )
  (dword) mul16u::mb#3 ← phi( mul16u::@2/(dword) mul16u::mb#4 )
  (dword) mul16u::res#3 ← phi( mul16u::@2/(dword) mul16u::res#5 )
  (dword~) mul16u::$4 ← (dword) mul16u::res#3 + (dword) mul16u::mb#3
  (dword) mul16u::res#1 ← (dword~) mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  (dword) mul16u::return#3 ← phi( mul16u::@3/(dword) mul16u::return#0 )
  (dword) mul16u::return#1 ← (dword) mul16u::return#3
  return 
  to:@return
@13: scope:[]  from @2
  (word) rem16u#45 ← phi( @2/(word) rem16u#0 )
  (dword) PI2_u4f28#0 ← (number) $6487ed51
  (dword) PI_u4f28#0 ← (number) $3243f6a9
  (dword) PI_HALF_u4f28#0 ← (number) $1921fb54
  (word) PI2_u4f12#0 ← (number) $6488
  (word) PI_u4f12#0 ← (number) $3244
  (word) PI_HALF_u4f12#0 ← (number) $1922
  to:@20
sin16s_gen: scope:[sin16s_gen]  from main::@3
  (signed word*) sin16s_gen::sintab#5 ← phi( main::@3/(signed word*) sin16s_gen::sintab#1 )
  (word) rem16u#32 ← phi( main::@3/(word) rem16u#12 )
  (word) sin16s_gen::wavelength#1 ← phi( main::@3/(word) sin16s_gen::wavelength#0 )
  (dword) div32u16u::dividend#0 ← (dword) PI2_u4f28#0
  (word) div32u16u::divisor#0 ← (word) sin16s_gen::wavelength#1
  call div32u16u 
  (dword) div32u16u::return#2 ← (dword) div32u16u::return#1
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  (word) sin16s_gen::wavelength#4 ← phi( sin16s_gen/(word) sin16s_gen::wavelength#1 )
  (signed word*) sin16s_gen::sintab#4 ← phi( sin16s_gen/(signed word*) sin16s_gen::sintab#5 )
  (word) rem16u#22 ← phi( sin16s_gen/(word) rem16u#7 )
  (dword) div32u16u::return#4 ← phi( sin16s_gen/(dword) div32u16u::return#2 )
  (dword~) sin16s_gen::$0 ← (dword) div32u16u::return#4
  (word) rem16u#8 ← (word) rem16u#22
  (dword) sin16s_gen::step#0 ← (dword~) sin16s_gen::$0
  (dword) sin16s_gen::x#0 ← (number) 0
  (word) sin16s_gen::i#0 ← (number) 0
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  (word) rem16u#39 ← phi( sin16s_gen::@3/(word) rem16u#8 sin16s_gen::@4/(word) rem16u#33 )
  (word) sin16s_gen::wavelength#3 ← phi( sin16s_gen::@3/(word) sin16s_gen::wavelength#4 sin16s_gen::@4/(word) sin16s_gen::wavelength#2 )
  (word) sin16s_gen::i#3 ← phi( sin16s_gen::@3/(word) sin16s_gen::i#0 sin16s_gen::@4/(word) sin16s_gen::i#1 )
  (dword) sin16s_gen::step#2 ← phi( sin16s_gen::@3/(dword) sin16s_gen::step#0 sin16s_gen::@4/(dword) sin16s_gen::step#1 )
  (signed word*) sin16s_gen::sintab#3 ← phi( sin16s_gen::@3/(signed word*) sin16s_gen::sintab#4 sin16s_gen::@4/(signed word*) sin16s_gen::sintab#0 )
  (dword) sin16s_gen::x#2 ← phi( sin16s_gen::@3/(dword) sin16s_gen::x#0 sin16s_gen::@4/(dword) sin16s_gen::x#1 )
  (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2
  call sin16s 
  (signed word) sin16s::return#0 ← (signed word) sin16s::return#2
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@1
  (word) rem16u#33 ← phi( sin16s_gen::@1/(word) rem16u#39 )
  (word) sin16s_gen::wavelength#2 ← phi( sin16s_gen::@1/(word) sin16s_gen::wavelength#3 )
  (word) sin16s_gen::i#2 ← phi( sin16s_gen::@1/(word) sin16s_gen::i#3 )
  (dword) sin16s_gen::step#1 ← phi( sin16s_gen::@1/(dword) sin16s_gen::step#2 )
  (dword) sin16s_gen::x#3 ← phi( sin16s_gen::@1/(dword) sin16s_gen::x#2 )
  (signed word*) sin16s_gen::sintab#2 ← phi( sin16s_gen::@1/(signed word*) sin16s_gen::sintab#3 )
  (signed word) sin16s::return#3 ← phi( sin16s_gen::@1/(signed word) sin16s::return#0 )
  (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#3
  *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1
  (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  (dword~) sin16s_gen::$2 ← (dword) sin16s_gen::x#3 + (dword) sin16s_gen::step#1
  (dword) sin16s_gen::x#1 ← (dword~) sin16s_gen::$2
  (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2
  (bool~) sin16s_gen::$3 ← (word) sin16s_gen::i#1 < (word) sin16s_gen::wavelength#2
  if((bool~) sin16s_gen::$3) goto sin16s_gen::@1
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@4
  (word) rem16u#23 ← phi( sin16s_gen::@4/(word) rem16u#33 )
  (word) rem16u#9 ← (word) rem16u#23
  return 
  to:@return
sin8s_gen: scope:[sin8s_gen]  from main
  (signed byte*) sin8s_gen::sintab#5 ← phi( main/(signed byte*) sin8s_gen::sintab#1 )
  (word) rem16u#34 ← phi( main/(word) rem16u#36 )
  (word) sin8s_gen::wavelength#1 ← phi( main/(word) sin8s_gen::wavelength#0 )
  (word) div16u::dividend#0 ← (word) PI2_u4f12#0
  (word) div16u::divisor#0 ← (word) sin8s_gen::wavelength#1
  call div16u 
  (word) div16u::return#2 ← (word) div16u::return#1
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen
  (word) sin8s_gen::wavelength#4 ← phi( sin8s_gen/(word) sin8s_gen::wavelength#1 )
  (signed byte*) sin8s_gen::sintab#4 ← phi( sin8s_gen/(signed byte*) sin8s_gen::sintab#5 )
  (word) rem16u#24 ← phi( sin8s_gen/(word) rem16u#4 )
  (word) div16u::return#4 ← phi( sin8s_gen/(word) div16u::return#2 )
  (word~) sin8s_gen::$0 ← (word) div16u::return#4
  (word) rem16u#10 ← (word) rem16u#24
  (word) sin8s_gen::step#0 ← (word~) sin8s_gen::$0
  (word) sin8s_gen::x#0 ← (number) 0
  (word) sin8s_gen::i#0 ← (number) 0
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@3 sin8s_gen::@4
  (word) rem16u#40 ← phi( sin8s_gen::@3/(word) rem16u#10 sin8s_gen::@4/(word) rem16u#35 )
  (word) sin8s_gen::wavelength#3 ← phi( sin8s_gen::@3/(word) sin8s_gen::wavelength#4 sin8s_gen::@4/(word) sin8s_gen::wavelength#2 )
  (word) sin8s_gen::i#3 ← phi( sin8s_gen::@3/(word) sin8s_gen::i#0 sin8s_gen::@4/(word) sin8s_gen::i#1 )
  (word) sin8s_gen::step#2 ← phi( sin8s_gen::@3/(word) sin8s_gen::step#0 sin8s_gen::@4/(word) sin8s_gen::step#1 )
  (signed byte*) sin8s_gen::sintab#3 ← phi( sin8s_gen::@3/(signed byte*) sin8s_gen::sintab#4 sin8s_gen::@4/(signed byte*) sin8s_gen::sintab#0 )
  (word) sin8s_gen::x#2 ← phi( sin8s_gen::@3/(word) sin8s_gen::x#0 sin8s_gen::@4/(word) sin8s_gen::x#1 )
  (word) sin8s::x#0 ← (word) sin8s_gen::x#2
  call sin8s 
  (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#2
  to:sin8s_gen::@4
sin8s_gen::@4: scope:[sin8s_gen]  from sin8s_gen::@1
  (word) rem16u#35 ← phi( sin8s_gen::@1/(word) rem16u#40 )
  (word) sin8s_gen::wavelength#2 ← phi( sin8s_gen::@1/(word) sin8s_gen::wavelength#3 )
  (word) sin8s_gen::i#2 ← phi( sin8s_gen::@1/(word) sin8s_gen::i#3 )
  (word) sin8s_gen::step#1 ← phi( sin8s_gen::@1/(word) sin8s_gen::step#2 )
  (word) sin8s_gen::x#3 ← phi( sin8s_gen::@1/(word) sin8s_gen::x#2 )
  (signed byte*) sin8s_gen::sintab#2 ← phi( sin8s_gen::@1/(signed byte*) sin8s_gen::sintab#3 )
  (signed byte) sin8s::return#3 ← phi( sin8s_gen::@1/(signed byte) sin8s::return#0 )
  (signed byte~) sin8s_gen::$1 ← (signed byte) sin8s::return#3
  *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$1
  (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2
  (word~) sin8s_gen::$2 ← (word) sin8s_gen::x#3 + (word) sin8s_gen::step#1
  (word) sin8s_gen::x#1 ← (word~) sin8s_gen::$2
  (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2
  (bool~) sin8s_gen::$3 ← (word) sin8s_gen::i#1 < (word) sin8s_gen::wavelength#2
  if((bool~) sin8s_gen::$3) goto sin8s_gen::@1
  to:sin8s_gen::@return
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@4
  (word) rem16u#25 ← phi( sin8s_gen::@4/(word) rem16u#35 )
  (word) rem16u#11 ← (word) rem16u#25
  return 
  to:@return
sin16s: scope:[sin16s]  from sin16s_gen::@1
  (dword) sin16s::x#3 ← phi( sin16s_gen::@1/(dword) sin16s::x#0 )
  (byte) sin16s::isUpper#0 ← (number) 0
  (bool~) sin16s::$0 ← (dword) sin16s::x#3 >= (dword) PI_u4f28#0
  (bool~) sin16s::$1 ← ! (bool~) sin16s::$0
  if((bool~) sin16s::$1) goto sin16s::@1
  to:sin16s::@4
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  (byte) sin16s::isUpper#8 ← phi( sin16s/(byte) sin16s::isUpper#0 sin16s::@4/(byte) sin16s::isUpper#1 )
  (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#3 sin16s::@4/(dword) sin16s::x#1 )
  (bool~) sin16s::$2 ← (dword) sin16s::x#4 >= (dword) PI_HALF_u4f28#0
  (bool~) sin16s::$3 ← ! (bool~) sin16s::$2
  if((bool~) sin16s::$3) goto sin16s::@2
  to:sin16s::@5
sin16s::@4: scope:[sin16s]  from sin16s
  (dword) sin16s::x#5 ← phi( sin16s/(dword) sin16s::x#3 )
  (dword~) sin16s::$17 ← (dword) sin16s::x#5 - (dword) PI_u4f28#0
  (dword) sin16s::x#1 ← (dword~) sin16s::$17
  (byte) sin16s::isUpper#1 ← (number) 1
  to:sin16s::@1
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  (byte) sin16s::isUpper#7 ← phi( sin16s::@1/(byte) sin16s::isUpper#8 sin16s::@5/(byte) sin16s::isUpper#9 )
  (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (number) 3
  (word~) sin16s::$5 ← > (dword~) sin16s::$4
  (word) sin16s::x1#0 ← (word~) sin16s::$5
  (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  (byte) mulu16_sel::select#0 ← (number) 0
  call mulu16_sel 
  (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#6
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@2
  (byte) sin16s::isUpper#6 ← phi( sin16s::@2/(byte) sin16s::isUpper#7 )
  (word) sin16s::x1#1 ← phi( sin16s::@2/(word) sin16s::x1#0 )
  (word) mulu16_sel::return#7 ← phi( sin16s::@2/(word) mulu16_sel::return#0 )
  (word~) sin16s::$6 ← (word) mulu16_sel::return#7
  (word) sin16s::x2#0 ← (word~) sin16s::$6
  (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  (word) mulu16_sel::v2#1 ← (word) sin16s::x1#1
  (byte) mulu16_sel::select#1 ← (number) 1
  call mulu16_sel 
  (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#6
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  (byte) sin16s::isUpper#5 ← phi( sin16s::@8/(byte) sin16s::isUpper#6 )
  (word) sin16s::x1#4 ← phi( sin16s::@8/(word) sin16s::x1#1 )
  (word) mulu16_sel::return#8 ← phi( sin16s::@8/(word) mulu16_sel::return#1 )
  (word~) sin16s::$7 ← (word) mulu16_sel::return#8
  (word) sin16s::x3#0 ← (word~) sin16s::$7
  (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  (word) mulu16_sel::v2#2 ← (number) $10000/(number) 6
  (byte) mulu16_sel::select#2 ← (number) 1
  call mulu16_sel 
  (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#6
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  (byte) sin16s::isUpper#4 ← phi( sin16s::@9/(byte) sin16s::isUpper#5 )
  (word) sin16s::x3#1 ← phi( sin16s::@9/(word) sin16s::x3#0 )
  (word) sin16s::x1#2 ← phi( sin16s::@9/(word) sin16s::x1#4 )
  (word) mulu16_sel::return#9 ← phi( sin16s::@9/(word) mulu16_sel::return#2 )
  (word~) sin16s::$8 ← (word) mulu16_sel::return#9
  (word) sin16s::x3_6#0 ← (word~) sin16s::$8
  (word~) sin16s::$9 ← (word) sin16s::x1#2 - (word) sin16s::x3_6#0
  (word) sin16s::usinx#0 ← (word~) sin16s::$9
  (word) mulu16_sel::v1#3 ← (word) sin16s::x3#1
  (word) mulu16_sel::v2#3 ← (word) sin16s::x1#2
  (byte) mulu16_sel::select#3 ← (number) 0
  call mulu16_sel 
  (word) mulu16_sel::return#3 ← (word) mulu16_sel::return#6
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  (byte) sin16s::isUpper#3 ← phi( sin16s::@10/(byte) sin16s::isUpper#4 )
  (word) sin16s::usinx#4 ← phi( sin16s::@10/(word) sin16s::usinx#0 )
  (word) sin16s::x1#3 ← phi( sin16s::@10/(word) sin16s::x1#2 )
  (word) mulu16_sel::return#10 ← phi( sin16s::@10/(word) mulu16_sel::return#3 )
  (word~) sin16s::$10 ← (word) mulu16_sel::return#10
  (word) sin16s::x4#0 ← (word~) sin16s::$10
  (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  (word) mulu16_sel::v2#4 ← (word) sin16s::x1#3
  (byte) mulu16_sel::select#4 ← (number) 0
  call mulu16_sel 
  (word) mulu16_sel::return#4 ← (word) mulu16_sel::return#6
  to:sin16s::@12
sin16s::@12: scope:[sin16s]  from sin16s::@11
  (byte) sin16s::isUpper#2 ← phi( sin16s::@11/(byte) sin16s::isUpper#3 )
  (word) sin16s::usinx#2 ← phi( sin16s::@11/(word) sin16s::usinx#4 )
  (word) mulu16_sel::return#11 ← phi( sin16s::@11/(word) mulu16_sel::return#4 )
  (word~) sin16s::$11 ← (word) mulu16_sel::return#11
  (word) sin16s::x5#0 ← (word~) sin16s::$11
  (word~) sin16s::$12 ← (word) sin16s::x5#0 >> (number) 4
  (word) sin16s::x5_128#0 ← (word~) sin16s::$12
  (word~) sin16s::$13 ← (word) sin16s::usinx#2 + (word) sin16s::x5_128#0
  (word) sin16s::usinx#1 ← (word~) sin16s::$13
  (signed word~) sin16s::$14 ← ((signed word)) (word) sin16s::usinx#1
  (signed word) sin16s::sinx#0 ← (signed word~) sin16s::$14
  (bool~) sin16s::$15 ← (byte) sin16s::isUpper#2 != (number) 0
  (bool~) sin16s::$16 ← ! (bool~) sin16s::$15
  if((bool~) sin16s::$16) goto sin16s::@3
  to:sin16s::@6
sin16s::@5: scope:[sin16s]  from sin16s::@1
  (byte) sin16s::isUpper#9 ← phi( sin16s::@1/(byte) sin16s::isUpper#8 )
  (dword) sin16s::x#7 ← phi( sin16s::@1/(dword) sin16s::x#4 )
  (dword~) sin16s::$18 ← (dword) PI_u4f28#0 - (dword) sin16s::x#7
  (dword) sin16s::x#2 ← (dword~) sin16s::$18
  to:sin16s::@2
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  (signed word) sin16s::sinx#2 ← phi( sin16s::@12/(signed word) sin16s::sinx#0 sin16s::@6/(signed word) sin16s::sinx#1 )
  (signed word) sin16s::return#1 ← (signed word) sin16s::sinx#2
  to:sin16s::@return
sin16s::@6: scope:[sin16s]  from sin16s::@12
  (word) sin16s::usinx#3 ← phi( sin16s::@12/(word) sin16s::usinx#1 )
  (signed word~) sin16s::$19 ← ((signed word)) (word) sin16s::usinx#3
  (signed word~) sin16s::$20 ← - (signed word~) sin16s::$19
  (signed word) sin16s::sinx#1 ← (signed word~) sin16s::$20
  to:sin16s::@3
sin16s::@return: scope:[sin16s]  from sin16s::@3
  (signed word) sin16s::return#4 ← phi( sin16s::@3/(signed word) sin16s::return#1 )
  (signed word) sin16s::return#2 ← (signed word) sin16s::return#4
  return 
  to:@return
sin8s: scope:[sin8s]  from sin8s_gen::@1
  (word) sin8s::x#3 ← phi( sin8s_gen::@1/(word) sin8s::x#0 )
  (byte) sin8s::isUpper#0 ← (number) 0
  (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (word) PI_u4f12#0
  (bool~) sin8s::$1 ← ! (bool~) sin8s::$0
  if((bool~) sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) sin8s::isUpper#0 sin8s::@5/(byte) sin8s::isUpper#1 )
  (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#3 sin8s::@5/(word) sin8s::x#1 )
  (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (word) PI_HALF_u4f12#0
  (bool~) sin8s::$3 ← ! (bool~) sin8s::$2
  if((bool~) sin8s::$3) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  (word) sin8s::x#5 ← phi( sin8s/(word) sin8s::x#3 )
  (word~) sin8s::$19 ← (word) sin8s::x#5 - (word) PI_u4f12#0
  (word) sin8s::x#1 ← (word~) sin8s::$19
  (byte) sin8s::isUpper#1 ← (number) 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  (byte) sin8s::isUpper#9 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 sin8s::@6/(byte) sin8s::isUpper#11 )
  (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#2 )
  (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
  (byte~) sin8s::$5 ← > (word~) sin8s::$4
  (byte) sin8s::x1#0 ← (byte~) sin8s::$5
  (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::select#0 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#6
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@2
  (byte) sin8s::isUpper#8 ← phi( sin8s::@2/(byte) sin8s::isUpper#9 )
  (byte) sin8s::x1#1 ← phi( sin8s::@2/(byte) sin8s::x1#0 )
  (byte) mulu8_sel::return#7 ← phi( sin8s::@2/(byte) mulu8_sel::return#0 )
  (byte~) sin8s::$6 ← (byte) mulu8_sel::return#7
  (byte) sin8s::x2#0 ← (byte~) sin8s::$6
  (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#1
  (byte) mulu8_sel::select#1 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#6
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  (byte) sin8s::isUpper#7 ← phi( sin8s::@10/(byte) sin8s::isUpper#8 )
  (byte) sin8s::x1#4 ← phi( sin8s::@10/(byte) sin8s::x1#1 )
  (byte) mulu8_sel::return#8 ← phi( sin8s::@10/(byte) mulu8_sel::return#1 )
  (byte~) sin8s::$7 ← (byte) mulu8_sel::return#8
  (byte) sin8s::x3#0 ← (byte~) sin8s::$7
  (byte) sin8s::DIV_6#0 ← (number) $2b
  (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  (byte) mulu8_sel::v2#2 ← (byte) sin8s::DIV_6#0
  (byte) mulu8_sel::select#2 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#6
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  (byte) sin8s::isUpper#6 ← phi( sin8s::@11/(byte) sin8s::isUpper#7 )
  (byte) sin8s::x3#1 ← phi( sin8s::@11/(byte) sin8s::x3#0 )
  (byte) sin8s::x1#2 ← phi( sin8s::@11/(byte) sin8s::x1#4 )
  (byte) mulu8_sel::return#9 ← phi( sin8s::@11/(byte) mulu8_sel::return#2 )
  (byte~) sin8s::$8 ← (byte) mulu8_sel::return#9
  (byte) sin8s::x3_6#0 ← (byte~) sin8s::$8
  (byte~) sin8s::$9 ← (byte) sin8s::x1#2 - (byte) sin8s::x3_6#0
  (byte) sin8s::usinx#0 ← (byte~) sin8s::$9
  (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#1
  (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#2
  (byte) mulu8_sel::select#3 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#3 ← (byte) mulu8_sel::return#6
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  (byte) sin8s::isUpper#5 ← phi( sin8s::@12/(byte) sin8s::isUpper#6 )
  (byte) sin8s::usinx#7 ← phi( sin8s::@12/(byte) sin8s::usinx#0 )
  (byte) sin8s::x1#3 ← phi( sin8s::@12/(byte) sin8s::x1#2 )
  (byte) mulu8_sel::return#10 ← phi( sin8s::@12/(byte) mulu8_sel::return#3 )
  (byte~) sin8s::$10 ← (byte) mulu8_sel::return#10
  (byte) sin8s::x4#0 ← (byte~) sin8s::$10
  (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#3
  (byte) mulu8_sel::select#4 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#4 ← (byte) mulu8_sel::return#6
  to:sin8s::@14
sin8s::@14: scope:[sin8s]  from sin8s::@13
  (byte) sin8s::isUpper#3 ← phi( sin8s::@13/(byte) sin8s::isUpper#5 )
  (byte) sin8s::usinx#3 ← phi( sin8s::@13/(byte) sin8s::usinx#7 )
  (byte) mulu8_sel::return#11 ← phi( sin8s::@13/(byte) mulu8_sel::return#4 )
  (byte~) sin8s::$11 ← (byte) mulu8_sel::return#11
  (byte) sin8s::x5#0 ← (byte~) sin8s::$11
  (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
  (byte) sin8s::x5_128#0 ← (byte~) sin8s::$12
  (byte~) sin8s::$13 ← (byte) sin8s::usinx#3 + (byte) sin8s::x5_128#0
  (byte) sin8s::usinx#1 ← (byte~) sin8s::$13
  (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
  (bool~) sin8s::$15 ← ! (bool~) sin8s::$14
  if((bool~) sin8s::$15) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  (byte) sin8s::isUpper#11 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 )
  (word) sin8s::x#7 ← phi( sin8s::@1/(word) sin8s::x#4 )
  (word~) sin8s::$20 ← (word) PI_u4f12#0 - (word) sin8s::x#7
  (word) sin8s::x#2 ← (word~) sin8s::$20
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@14 sin8s::@7
  (byte) sin8s::isUpper#2 ← phi( sin8s::@14/(byte) sin8s::isUpper#3 sin8s::@7/(byte) sin8s::isUpper#4 )
  (byte) sin8s::usinx#4 ← phi( sin8s::@14/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  (signed byte~) sin8s::$16 ← ((signed byte)) (byte) sin8s::usinx#4
  (signed byte) sin8s::sinx#0 ← (signed byte~) sin8s::$16
  (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (number) 0
  (bool~) sin8s::$18 ← ! (bool~) sin8s::$17
  if((bool~) sin8s::$18) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@14
  (byte) sin8s::isUpper#4 ← phi( sin8s::@14/(byte) sin8s::isUpper#3 )
  (byte) sin8s::usinx#5 ← phi( sin8s::@14/(byte) sin8s::usinx#1 )
  (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#5
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  (signed byte) sin8s::sinx#2 ← phi( sin8s::@3/(signed byte) sin8s::sinx#0 sin8s::@8/(signed byte) sin8s::sinx#1 )
  (signed byte) sin8s::return#1 ← (signed byte) sin8s::sinx#2
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  (byte) sin8s::usinx#6 ← phi( sin8s::@3/(byte) sin8s::usinx#4 )
  (signed byte~) sin8s::$21 ← ((signed byte)) (byte) sin8s::usinx#6
  (signed byte~) sin8s::$22 ← - (signed byte~) sin8s::$21
  (signed byte) sin8s::sinx#1 ← (signed byte~) sin8s::$22
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4
  (signed byte) sin8s::return#4 ← phi( sin8s::@4/(signed byte) sin8s::return#1 )
  (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#4
  return 
  to:@return
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@11 sin16s::@2 sin16s::@8 sin16s::@9
  (byte) mulu16_sel::select#6 ← phi( sin16s::@10/(byte) mulu16_sel::select#3 sin16s::@11/(byte) mulu16_sel::select#4 sin16s::@2/(byte) mulu16_sel::select#0 sin16s::@8/(byte) mulu16_sel::select#1 sin16s::@9/(byte) mulu16_sel::select#2 )
  (word) mulu16_sel::v2#5 ← phi( sin16s::@10/(word) mulu16_sel::v2#3 sin16s::@11/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@8/(word) mulu16_sel::v2#1 sin16s::@9/(word) mulu16_sel::v2#2 )
  (word) mulu16_sel::v1#5 ← phi( sin16s::@10/(word) mulu16_sel::v1#3 sin16s::@11/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@8/(word) mulu16_sel::v1#1 sin16s::@9/(word) mulu16_sel::v1#2 )
  (word) mul16u::a#1 ← (word) mulu16_sel::v1#5
  (word) mul16u::b#0 ← (word) mulu16_sel::v2#5
  call mul16u 
  (dword) mul16u::return#2 ← (dword) mul16u::return#1
  to:mulu16_sel::@2
mulu16_sel::@2: scope:[mulu16_sel]  from mulu16_sel
  (byte) mulu16_sel::select#5 ← phi( mulu16_sel/(byte) mulu16_sel::select#6 )
  (dword) mul16u::return#4 ← phi( mulu16_sel/(dword) mul16u::return#2 )
  (dword~) mulu16_sel::$0 ← (dword) mul16u::return#4
  (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  (word~) mulu16_sel::$2 ← > (dword~) mulu16_sel::$1
  (word) mulu16_sel::return#5 ← (word~) mulu16_sel::$2
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@2
  (word) mulu16_sel::return#12 ← phi( mulu16_sel::@2/(word) mulu16_sel::return#5 )
  (word) mulu16_sel::return#6 ← (word) mulu16_sel::return#12
  return 
  to:@return
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@13 sin8s::@2
  (byte) mulu8_sel::select#6 ← phi( sin8s::@10/(byte) mulu8_sel::select#1 sin8s::@11/(byte) mulu8_sel::select#2 sin8s::@12/(byte) mulu8_sel::select#3 sin8s::@13/(byte) mulu8_sel::select#4 sin8s::@2/(byte) mulu8_sel::select#0 )
  (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(byte) mulu8_sel::v2#1 sin8s::@11/(byte) mulu8_sel::v2#2 sin8s::@12/(byte) mulu8_sel::v2#3 sin8s::@13/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#1 sin8s::@11/(byte) mulu8_sel::v1#2 sin8s::@12/(byte) mulu8_sel::v1#3 sin8s::@13/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
  (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5
  call mul8u 
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:mulu8_sel::@2
mulu8_sel::@2: scope:[mulu8_sel]  from mulu8_sel
  (byte) mulu8_sel::select#5 ← phi( mulu8_sel/(byte) mulu8_sel::select#6 )
  (word) mul8u::return#4 ← phi( mulu8_sel/(word) mul8u::return#2 )
  (word~) mulu8_sel::$0 ← (word) mul8u::return#4
  (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  (byte~) mulu8_sel::$2 ← > (word~) mulu8_sel::$1
  (byte) mulu8_sel::return#5 ← (byte~) mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@2
  (byte) mulu8_sel::return#12 ← phi( mulu8_sel::@2/(byte) mulu8_sel::return#5 )
  (byte) mulu8_sel::return#6 ← (byte) mulu8_sel::return#12
  return 
  to:@return
@20: scope:[]  from @13
  (word) rem16u#43 ← phi( @13/(word) rem16u#45 )
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@32
print_str: scope:[print_str]  from main::@6
  (byte*) print_char_cursor#44 ← phi( main::@6/(byte*) print_char_cursor#15 )
  (byte*) print_str::str#4 ← phi( main::@6/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#36 ← phi( print_str/(byte*) print_char_cursor#44 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#4 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← *((byte*) print_str::str#2) != (byte) '@'
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#19 ← phi( print_str::@1/(byte*) print_char_cursor#36 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  *((byte*) print_char_cursor#19) ← *((byte*) print_str::str#3)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#19
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#20 ← phi( print_str::@1/(byte*) print_char_cursor#36 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#20
  return 
  to:@return
print_sbyte: scope:[print_sbyte]  from main::@1
  (byte*) print_char_cursor#45 ← phi( main::@1/(byte*) print_char_cursor#42 )
  (signed byte) print_sbyte::b#2 ← phi( main::@1/(signed byte) print_sbyte::b#1 )
  (bool~) print_sbyte::$0 ← (signed byte) print_sbyte::b#2 < (number) 0
  if((bool~) print_sbyte::$0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#5 ← phi( print_sbyte/(signed byte) print_sbyte::b#2 )
  (byte*) print_char_cursor#37 ← phi( print_sbyte/(byte*) print_char_cursor#45 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sbyte::@5
print_sbyte::@5: scope:[print_sbyte]  from print_sbyte::@1
  (signed byte) print_sbyte::b#3 ← phi( print_sbyte::@1/(signed byte) print_sbyte::b#5 )
  (byte*) print_char_cursor#21 ← phi( print_sbyte::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#21
  (signed byte~) print_sbyte::$5 ← - (signed byte) print_sbyte::b#3
  (signed byte) print_sbyte::b#0 ← (signed byte~) print_sbyte::$5
  to:print_sbyte::@2
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#7 ← phi( print_sbyte/(signed byte) print_sbyte::b#2 )
  (byte*) print_char_cursor#38 ← phi( print_sbyte/(byte*) print_char_cursor#45 )
  (byte) print_char::ch#1 ← (byte) ' '
  call print_char 
  to:print_sbyte::@6
print_sbyte::@6: scope:[print_sbyte]  from print_sbyte::@3
  (signed byte) print_sbyte::b#6 ← phi( print_sbyte::@3/(signed byte) print_sbyte::b#7 )
  (byte*) print_char_cursor#22 ← phi( print_sbyte::@3/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#22
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@5 print_sbyte::@6
  (byte*) print_char_cursor#39 ← phi( print_sbyte::@5/(byte*) print_char_cursor#3 print_sbyte::@6/(byte*) print_char_cursor#4 )
  (signed byte) print_sbyte::b#4 ← phi( print_sbyte::@5/(signed byte) print_sbyte::b#0 print_sbyte::@6/(signed byte) print_sbyte::b#6 )
  (byte~) print_sbyte::$1 ← ((byte)) (signed byte) print_sbyte::b#4
  (byte) print_byte::b#0 ← (byte~) print_sbyte::$1
  call print_byte 
  to:print_sbyte::@7
print_sbyte::@7: scope:[print_sbyte]  from print_sbyte::@2
  (byte*) print_char_cursor#23 ← phi( print_sbyte::@2/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#23
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@7
  (byte*) print_char_cursor#24 ← phi( print_sbyte::@7/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#24
  return 
  to:@return
@32: scope:[]  from @20
  (byte*) print_screen#8 ← phi( @20/(byte*) print_screen#0 )
  (byte*) print_char_cursor#47 ← phi( @20/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#15 ← phi( @20/(byte*) print_line_cursor#0 )
  (word) rem16u#42 ← phi( @20/(word) rem16u#43 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@40
print_byte: scope:[print_byte]  from print_sbyte::@2
  (byte*) print_char_cursor#40 ← phi( print_sbyte::@2/(byte*) print_char_cursor#39 )
  (byte) print_byte::b#1 ← phi( print_sbyte::@2/(byte) print_byte::b#0 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#1 >> (number) 4
  (byte) print_char::ch#2 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#2 ← phi( print_byte/(byte) print_byte::b#1 )
  (byte*) print_char_cursor#25 ← phi( print_byte/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#25
  (number~) print_byte::$2 ← (byte) print_byte::b#2 & (number) $f
  (byte) print_char::ch#3 ← *((byte[]) print_hextab#0 + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#26 ← phi( print_byte::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#26
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#27 ← phi( print_byte::@2/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#27
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3
  (byte*) print_char_cursor#28 ← phi( print_byte/(byte*) print_char_cursor#40 print_byte::@1/(byte*) print_char_cursor#7 print_sbyte::@1/(byte*) print_char_cursor#37 print_sbyte::@3/(byte*) print_char_cursor#38 )
  (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sbyte::@1/(byte) print_char::ch#0 print_sbyte::@3/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#28) ← (byte) print_char::ch#4
  (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#28
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#29 ← phi( print_char/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#29
  return 
  to:@return
print_cls: scope:[print_cls]  from main::@4
  (byte*) print_screen#1 ← phi( main::@4/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#1 ← (byte*) print_screen#3
  (byte*) print_char_cursor#12 ← (byte*) print_line_cursor#1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#30 ← phi( print_cls::@2/(byte*) print_char_cursor#12 )
  (byte*) print_line_cursor#6 ← phi( print_cls::@2/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#6
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#30
  return 
  to:@return
main: scope:[main]  from @40
  (byte*) print_char_cursor#48 ← phi( @40/(byte*) print_char_cursor#43 )
  (byte*) print_line_cursor#16 ← phi( @40/(byte*) print_line_cursor#12 )
  (byte*) print_screen#6 ← phi( @40/(byte*) print_screen#7 )
  (word) rem16u#36 ← phi( @40/(word) rem16u#38 )
  (word) main::wavelength#0 ← (number) $c0
  (signed byte[$c0]) main::sintabb#0 ← { fill( $c0, 0) }
  (signed byte*) sin8s_gen::sintab#1 ← (signed byte[$c0]) main::sintabb#0
  (word) sin8s_gen::wavelength#0 ← (word) main::wavelength#0
  call sin8s_gen 
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) print_char_cursor#46 ← phi( main/(byte*) print_char_cursor#48 )
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#16 )
  (byte*) print_screen#5 ← phi( main/(byte*) print_screen#6 )
  (word) rem16u#26 ← phi( main/(word) rem16u#11 )
  (word) rem16u#12 ← (word) rem16u#26
  (signed word[$c0]) main::sintabw#0 ← { fill( $c0, 0) }
  (signed word*) sin16s_gen::sintab#1 ← (signed word[$c0]) main::sintabw#0
  (word) sin16s_gen::wavelength#0 ← (word) main::wavelength#0
  call sin16s_gen 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) print_char_cursor#41 ← phi( main::@3/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#10 ← phi( main::@3/(byte*) print_line_cursor#13 )
  (byte*) print_screen#4 ← phi( main::@3/(byte*) print_screen#5 )
  (word) rem16u#27 ← phi( main::@3/(word) rem16u#9 )
  (word) rem16u#13 ← (word) rem16u#27
  call print_cls 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (word) rem16u#46 ← phi( main::@4/(word) rem16u#13 )
  (byte*) print_char_cursor#31 ← phi( main::@4/(byte*) print_char_cursor#13 )
  (byte*) print_line_cursor#7 ← phi( main::@4/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#7
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#31
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@5 main::@7
  (byte*) print_line_cursor#17 ← phi( main::@5/(byte*) print_line_cursor#3 main::@7/(byte*) print_line_cursor#11 )
  (word) rem16u#44 ← phi( main::@5/(word) rem16u#46 main::@7/(word) rem16u#37 )
  (byte*) print_char_cursor#42 ← phi( main::@5/(byte*) print_char_cursor#14 main::@7/(byte*) print_char_cursor#16 )
  (byte) main::i#2 ← phi( main::@5/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (signed byte) main::sb#0 ← *((signed byte[$c0]) main::sintabb#0 + (byte) main::i#2)
  (word~) main::$3 ← ((word)) (byte) main::i#2
  (word~) main::$11 ← (word~) main::$3 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) main::$4 ← (signed word[$c0]) main::sintabw#0 + (word~) main::$11
  (signed word) main::sw#0 ← *((signed word*~) main::$4)
  (byte~) main::$5 ← > (signed word) main::sw#0
  (signed byte~) main::$6 ← ((signed byte)) (byte~) main::$5
  (signed byte~) main::$7 ← (signed byte) main::sb#0 - (signed byte~) main::$6
  (signed byte) main::sd#0 ← (signed byte~) main::$7
  (signed byte) print_sbyte::b#1 ← (signed byte) main::sd#0
  call print_sbyte 
  to:main::@6
main::@6: scope:[main]  from main::@1
  (byte*) print_line_cursor#14 ← phi( main::@1/(byte*) print_line_cursor#17 )
  (word) rem16u#41 ← phi( main::@1/(word) rem16u#44 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte*) print_char_cursor#32 ← phi( main::@1/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#32
  (byte*) print_str::str#1 ← (const string) main::str
  call print_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) print_line_cursor#11 ← phi( main::@6/(byte*) print_line_cursor#14 )
  (word) rem16u#37 ← phi( main::@6/(word) rem16u#41 )
  (byte) main::i#3 ← phi( main::@6/(byte) main::i#4 )
  (byte*) print_char_cursor#33 ← phi( main::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#33
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,$bf)
  (bool~) main::$10 ← (byte) main::i#1 != rangelast(0,$bf)
  if((bool~) main::$10) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  (byte*) print_char_cursor#34 ← phi( main::@7/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#8 ← phi( main::@7/(byte*) print_line_cursor#11 )
  (word) rem16u#28 ← phi( main::@7/(word) rem16u#37 )
  (word) rem16u#14 ← (word) rem16u#28
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#8
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#34
  return 
  to:@return
@40: scope:[]  from @32
  (byte*) print_screen#7 ← phi( @32/(byte*) print_screen#8 )
  (byte*) print_char_cursor#43 ← phi( @32/(byte*) print_char_cursor#47 )
  (byte*) print_line_cursor#12 ← phi( @32/(byte*) print_line_cursor#15 )
  (word) rem16u#38 ← phi( @32/(word) rem16u#42 )
  call main 
  to:@41
@41: scope:[]  from @40
  (byte*) print_char_cursor#35 ← phi( @40/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#9 ← phi( @40/(byte*) print_line_cursor#4 )
  (word) rem16u#29 ← phi( @40/(word) rem16u#14 )
  (word) rem16u#15 ← (word) rem16u#29
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#35
  to:@end
@end: scope:[]  from @41

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @13
(label) @2
(label) @20
(label) @32
(label) @40
(label) @41
(label) @begin
(label) @end
(word) PI2_u4f12
(word) PI2_u4f12#0
(dword) PI2_u4f28
(dword) PI2_u4f28#0
(word) PI_HALF_u4f12
(word) PI_HALF_u4f12#0
(dword) PI_HALF_u4f28
(dword) PI_HALF_u4f28#0
(word) PI_u4f12
(word) PI_u4f12#0
(dword) PI_u4f28
(dword) PI_u4f28#0
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(word~) div32u16u::$0
(word~) div32u16u::$1
(word~) div32u16u::$2
(word~) div32u16u::$3
(label) div32u16u::@2
(label) div32u16u::@3
(label) div32u16u::@return
(dword) div32u16u::dividend
(dword) div32u16u::dividend#0
(dword) div32u16u::dividend#1
(dword) div32u16u::dividend#2
(word) div32u16u::divisor
(word) div32u16u::divisor#0
(word) div32u16u::divisor#1
(word) div32u16u::divisor#2
(dword) div32u16u::quotient
(dword) div32u16u::quotient#0
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0
(word) div32u16u::quotient_hi#1
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0
(dword) div32u16u::return
(dword) div32u16u::return#0
(dword) div32u16u::return#1
(dword) div32u16u::return#2
(dword) div32u16u::return#3
(dword) div32u16u::return#4
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(number~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(number~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::dividend#8
(word) divr16u::dividend#9
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(word) divr16u::divisor#7
(word) divr16u::divisor#8
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#11
(word) divr16u::rem#12
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(word) divr16u::return#5
(word) divr16u::return#6
(word) divr16u::return#7
(word) divr16u::return#8
(void()) main()
(bool~) main::$10
(word~) main::$11
(word~) main::$3
(signed word*~) main::$4
(byte~) main::$5
(signed byte~) main::$6
(signed byte~) main::$7
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(signed byte) main::sb
(signed byte) main::sb#0
(signed byte) main::sd
(signed byte) main::sd#0
(signed byte[$c0]) main::sintabb
(signed byte[$c0]) main::sintabb#0
(signed word[$c0]) main::sintabw
(signed word[$c0]) main::sintabw#0
(const string) main::str = (string) "  @"
(signed word) main::sw
(signed word) main::sw#0
(word) main::wavelength
(word) main::wavelength#0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(bool~) mul16u::$0
(number~) mul16u::$1
(bool~) mul16u::$2
(bool~) mul16u::$3
(dword~) mul16u::$4
(word~) mul16u::$5
(dword~) mul16u::$6
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@7
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0
(word) mul16u::a#1
(word) mul16u::a#2
(word) mul16u::a#3
(word) mul16u::a#4
(word) mul16u::a#5
(word) mul16u::a#6
(word) mul16u::b
(word) mul16u::b#0
(word) mul16u::b#1
(dword) mul16u::mb
(dword) mul16u::mb#0
(dword) mul16u::mb#1
(dword) mul16u::mb#2
(dword) mul16u::mb#3
(dword) mul16u::mb#4
(dword) mul16u::mb#5
(dword) mul16u::res
(dword) mul16u::res#0
(dword) mul16u::res#1
(dword) mul16u::res#2
(dword) mul16u::res#3
(dword) mul16u::res#4
(dword) mul16u::res#5
(dword) mul16u::res#6
(dword) mul16u::return
(dword) mul16u::return#0
(dword) mul16u::return#1
(dword) mul16u::return#2
(dword) mul16u::return#3
(dword) mul16u::return#4
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(number~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@7
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0
(dword~) mulu16_sel::$1
(word~) mulu16_sel::$2
(label) mulu16_sel::@2
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0
(word) mulu16_sel::return#1
(word) mulu16_sel::return#10
(word) mulu16_sel::return#11
(word) mulu16_sel::return#12
(word) mulu16_sel::return#2
(word) mulu16_sel::return#3
(word) mulu16_sel::return#4
(word) mulu16_sel::return#5
(word) mulu16_sel::return#6
(word) mulu16_sel::return#7
(word) mulu16_sel::return#8
(word) mulu16_sel::return#9
(byte) mulu16_sel::select
(byte) mulu16_sel::select#0
(byte) mulu16_sel::select#1
(byte) mulu16_sel::select#2
(byte) mulu16_sel::select#3
(byte) mulu16_sel::select#4
(byte) mulu16_sel::select#5
(byte) mulu16_sel::select#6
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0
(word) mulu16_sel::v1#1
(word) mulu16_sel::v1#2
(word) mulu16_sel::v1#3
(word) mulu16_sel::v1#4
(word) mulu16_sel::v1#5
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0
(word) mulu16_sel::v2#1
(word) mulu16_sel::v2#2
(word) mulu16_sel::v2#3
(word) mulu16_sel::v2#4
(word) mulu16_sel::v2#5
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0
(word~) mulu8_sel::$1
(byte~) mulu8_sel::$2
(label) mulu8_sel::@2
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0
(byte) mulu8_sel::return#1
(byte) mulu8_sel::return#10
(byte) mulu8_sel::return#11
(byte) mulu8_sel::return#12
(byte) mulu8_sel::return#2
(byte) mulu8_sel::return#3
(byte) mulu8_sel::return#4
(byte) mulu8_sel::return#5
(byte) mulu8_sel::return#6
(byte) mulu8_sel::return#7
(byte) mulu8_sel::return#8
(byte) mulu8_sel::return#9
(byte) mulu8_sel::select
(byte) mulu8_sel::select#0
(byte) mulu8_sel::select#1
(byte) mulu8_sel::select#2
(byte) mulu8_sel::select#3
(byte) mulu8_sel::select#4
(byte) mulu8_sel::select#5
(byte) mulu8_sel::select#6
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0
(byte) mulu8_sel::v1#1
(byte) mulu8_sel::v1#2
(byte) mulu8_sel::v1#3
(byte) mulu8_sel::v1#4
(byte) mulu8_sel::v1#5
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0
(byte) mulu8_sel::v2#1
(byte) mulu8_sel::v2#2
(byte) mulu8_sel::v2#3
(byte) mulu8_sel::v2#4
(byte) mulu8_sel::v2#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#2
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_sbyte((signed byte) print_sbyte::b)
(bool~) print_sbyte::$0
(byte~) print_sbyte::$1
(signed byte~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@5
(label) print_sbyte::@6
(label) print_sbyte::@7
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0
(signed byte) print_sbyte::b#1
(signed byte) print_sbyte::b#2
(signed byte) print_sbyte::b#3
(signed byte) print_sbyte::b#4
(signed byte) print_sbyte::b#5
(signed byte) print_sbyte::b#6
(signed byte) print_sbyte::b#7
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#42
(word) rem16u#43
(word) rem16u#44
(word) rem16u#45
(word) rem16u#46
(word) rem16u#5
(word) rem16u#6
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed word()) sin16s((dword) sin16s::x)
(bool~) sin16s::$0
(bool~) sin16s::$1
(word~) sin16s::$10
(word~) sin16s::$11
(word~) sin16s::$12
(word~) sin16s::$13
(signed word~) sin16s::$14
(bool~) sin16s::$15
(bool~) sin16s::$16
(dword~) sin16s::$17
(dword~) sin16s::$18
(signed word~) sin16s::$19
(bool~) sin16s::$2
(signed word~) sin16s::$20
(bool~) sin16s::$3
(dword~) sin16s::$4
(word~) sin16s::$5
(word~) sin16s::$6
(word~) sin16s::$7
(word~) sin16s::$8
(word~) sin16s::$9
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#0
(byte) sin16s::isUpper#1
(byte) sin16s::isUpper#2
(byte) sin16s::isUpper#3
(byte) sin16s::isUpper#4
(byte) sin16s::isUpper#5
(byte) sin16s::isUpper#6
(byte) sin16s::isUpper#7
(byte) sin16s::isUpper#8
(byte) sin16s::isUpper#9
(signed word) sin16s::return
(signed word) sin16s::return#0
(signed word) sin16s::return#1
(signed word) sin16s::return#2
(signed word) sin16s::return#3
(signed word) sin16s::return#4
(signed word) sin16s::sinx
(signed word) sin16s::sinx#0
(signed word) sin16s::sinx#1
(signed word) sin16s::sinx#2
(word) sin16s::usinx
(word) sin16s::usinx#0
(word) sin16s::usinx#1
(word) sin16s::usinx#2
(word) sin16s::usinx#3
(word) sin16s::usinx#4
(dword) sin16s::x
(dword) sin16s::x#0
(dword) sin16s::x#1
(dword) sin16s::x#2
(dword) sin16s::x#3
(dword) sin16s::x#4
(dword) sin16s::x#5
(dword) sin16s::x#6
(dword) sin16s::x#7
(word) sin16s::x1
(word) sin16s::x1#0
(word) sin16s::x1#1
(word) sin16s::x1#2
(word) sin16s::x1#3
(word) sin16s::x1#4
(word) sin16s::x2
(word) sin16s::x2#0
(word) sin16s::x3
(word) sin16s::x3#0
(word) sin16s::x3#1
(word) sin16s::x3_6
(word) sin16s::x3_6#0
(word) sin16s::x4
(word) sin16s::x4#0
(word) sin16s::x5
(word) sin16s::x5#0
(word) sin16s::x5_128
(word) sin16s::x5_128#0
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(dword~) sin16s_gen::$0
(signed word~) sin16s_gen::$1
(dword~) sin16s_gen::$2
(bool~) sin16s_gen::$3
(label) sin16s_gen::@1
(label) sin16s_gen::@3
(label) sin16s_gen::@4
(label) sin16s_gen::@return
(word) sin16s_gen::i
(word) sin16s_gen::i#0
(word) sin16s_gen::i#1
(word) sin16s_gen::i#2
(word) sin16s_gen::i#3
(signed word*) sin16s_gen::sintab
(signed word*) sin16s_gen::sintab#0
(signed word*) sin16s_gen::sintab#1
(signed word*) sin16s_gen::sintab#2
(signed word*) sin16s_gen::sintab#3
(signed word*) sin16s_gen::sintab#4
(signed word*) sin16s_gen::sintab#5
(dword) sin16s_gen::step
(dword) sin16s_gen::step#0
(dword) sin16s_gen::step#1
(dword) sin16s_gen::step#2
(word) sin16s_gen::wavelength
(word) sin16s_gen::wavelength#0
(word) sin16s_gen::wavelength#1
(word) sin16s_gen::wavelength#2
(word) sin16s_gen::wavelength#3
(word) sin16s_gen::wavelength#4
(dword) sin16s_gen::x
(dword) sin16s_gen::x#0
(dword) sin16s_gen::x#1
(dword) sin16s_gen::x#2
(dword) sin16s_gen::x#3
(signed byte()) sin8s((word) sin8s::x)
(bool~) sin8s::$0
(bool~) sin8s::$1
(byte~) sin8s::$10
(byte~) sin8s::$11
(byte~) sin8s::$12
(byte~) sin8s::$13
(bool~) sin8s::$14
(bool~) sin8s::$15
(signed byte~) sin8s::$16
(bool~) sin8s::$17
(bool~) sin8s::$18
(word~) sin8s::$19
(bool~) sin8s::$2
(word~) sin8s::$20
(signed byte~) sin8s::$21
(signed byte~) sin8s::$22
(bool~) sin8s::$3
(word~) sin8s::$4
(byte~) sin8s::$5
(byte~) sin8s::$6
(byte~) sin8s::$7
(byte~) sin8s::$8
(byte~) sin8s::$9
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@return
(byte) sin8s::DIV_6
(byte) sin8s::DIV_6#0
(byte) sin8s::isUpper
(byte) sin8s::isUpper#0
(byte) sin8s::isUpper#1
(byte) sin8s::isUpper#10
(byte) sin8s::isUpper#11
(byte) sin8s::isUpper#2
(byte) sin8s::isUpper#3
(byte) sin8s::isUpper#4
(byte) sin8s::isUpper#5
(byte) sin8s::isUpper#6
(byte) sin8s::isUpper#7
(byte) sin8s::isUpper#8
(byte) sin8s::isUpper#9
(signed byte) sin8s::return
(signed byte) sin8s::return#0
(signed byte) sin8s::return#1
(signed byte) sin8s::return#2
(signed byte) sin8s::return#3
(signed byte) sin8s::return#4
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#0
(signed byte) sin8s::sinx#1
(signed byte) sin8s::sinx#2
(byte) sin8s::usinx
(byte) sin8s::usinx#0
(byte) sin8s::usinx#1
(byte) sin8s::usinx#2
(byte) sin8s::usinx#3
(byte) sin8s::usinx#4
(byte) sin8s::usinx#5
(byte) sin8s::usinx#6
(byte) sin8s::usinx#7
(word) sin8s::x
(word) sin8s::x#0
(word) sin8s::x#1
(word) sin8s::x#2
(word) sin8s::x#3
(word) sin8s::x#4
(word) sin8s::x#5
(word) sin8s::x#6
(word) sin8s::x#7
(byte) sin8s::x1
(byte) sin8s::x1#0
(byte) sin8s::x1#1
(byte) sin8s::x1#2
(byte) sin8s::x1#3
(byte) sin8s::x1#4
(byte) sin8s::x2
(byte) sin8s::x2#0
(byte) sin8s::x3
(byte) sin8s::x3#0
(byte) sin8s::x3#1
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0
(byte) sin8s::x4
(byte) sin8s::x4#0
(byte) sin8s::x5
(byte) sin8s::x5#0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(word~) sin8s_gen::$0
(signed byte~) sin8s_gen::$1
(word~) sin8s_gen::$2
(bool~) sin8s_gen::$3
(label) sin8s_gen::@1
(label) sin8s_gen::@3
(label) sin8s_gen::@4
(label) sin8s_gen::@return
(word) sin8s_gen::i
(word) sin8s_gen::i#0
(word) sin8s_gen::i#1
(word) sin8s_gen::i#2
(word) sin8s_gen::i#3
(signed byte*) sin8s_gen::sintab
(signed byte*) sin8s_gen::sintab#0
(signed byte*) sin8s_gen::sintab#1
(signed byte*) sin8s_gen::sintab#2
(signed byte*) sin8s_gen::sintab#3
(signed byte*) sin8s_gen::sintab#4
(signed byte*) sin8s_gen::sintab#5
(word) sin8s_gen::step
(word) sin8s_gen::step#0
(word) sin8s_gen::step#1
(word) sin8s_gen::step#2
(word) sin8s_gen::wavelength
(word) sin8s_gen::wavelength#0
(word) sin8s_gen::wavelength#1
(word) sin8s_gen::wavelength#2
(word) sin8s_gen::wavelength#3
(word) sin8s_gen::wavelength#4
(word) sin8s_gen::x
(word) sin8s_gen::x#0
(word) sin8s_gen::x#1
(word) sin8s_gen::x#2
(word) sin8s_gen::x#3

Fixing inline constructor with div32u16u::$4 ← (word)div32u16u::quotient_hi#1 dw= (word)div32u16u::quotient_lo#0
Successful SSA optimization Pass2FixInlineConstructorsNew
Adding number conversion cast (unumber) 0 in (word) rem16u#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) divr16u::quotient#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$0 ← (word) divr16u::rem#6 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
Adding number conversion cast (unumber) divr16u::$2 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr16u::$3 ← (unumber~) divr16u::$2 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$6 ← (word) divr16u::dividend#5 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr16u::$5 ← (word) divr16u::rem#8 | (number) 1
Adding number conversion cast (unumber) divr16u::$5 in (number~) divr16u::$5 ← (word) divr16u::rem#8 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#4 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) mul8u::res#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$0 ← (byte) mul8u::a#2 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul8u::$1 ← (byte) mul8u::a#3 & (number) 1
Adding number conversion cast (unumber) mul8u::$1 in (number~) mul8u::$1 ← (byte) mul8u::a#3 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$2 ← (unumber~) mul8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) mul8u::$5 ← (byte) mul8u::a#4 >> (number) 1
Adding number conversion cast (unumber) 1 in (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
Adding number conversion cast (unumber) 0 in (dword) mul16u::res#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul16u::$0 ← (word) mul16u::a#2 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul16u::$1 ← (word) mul16u::a#3 & (number) 1
Adding number conversion cast (unumber) mul16u::$1 in (number~) mul16u::$1 ← (word) mul16u::a#3 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul16u::$2 ← (unumber~) mul16u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) mul16u::$5 ← (word) mul16u::a#4 >> (number) 1
Adding number conversion cast (unumber) 1 in (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (number) 1
Adding number conversion cast (unumber) $6487ed51 in (dword) PI2_u4f28#0 ← (number) $6487ed51
Adding number conversion cast (unumber) $3243f6a9 in (dword) PI_u4f28#0 ← (number) $3243f6a9
Adding number conversion cast (unumber) $1921fb54 in (dword) PI_HALF_u4f28#0 ← (number) $1921fb54
Adding number conversion cast (unumber) $6488 in (word) PI2_u4f12#0 ← (number) $6488
Adding number conversion cast (unumber) $3244 in (word) PI_u4f12#0 ← (number) $3244
Adding number conversion cast (unumber) $1922 in (word) PI_HALF_u4f12#0 ← (number) $1922
Adding number conversion cast (unumber) 0 in (dword) sin16s_gen::x#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) sin16s_gen::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) sin8s_gen::x#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) sin8s_gen::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) sin16s::isUpper#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) sin16s::isUpper#1 ← (number) 1
Adding number conversion cast (unumber) 3 in (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (number) 3
Adding number conversion cast (unumber) 0 in (byte) mulu16_sel::select#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) mulu16_sel::select#1 ← (number) 1
Adding number conversion cast (unumber) $10000/6 in (word) mulu16_sel::v2#2 ← (number) $10000/(number) 6
Adding number conversion cast (unumber) 1 in (byte) mulu16_sel::select#2 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) mulu16_sel::select#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulu16_sel::select#4 ← (number) 0
Adding number conversion cast (unumber) 4 in (word~) sin16s::$12 ← (word) sin16s::x5#0 >> (number) 4
Adding number conversion cast (unumber) 0 in (bool~) sin16s::$15 ← (byte) sin16s::isUpper#2 != (number) 0
Adding number conversion cast (unumber) 0 in (byte) sin8s::isUpper#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) sin8s::isUpper#1 ← (number) 1
Adding number conversion cast (unumber) 3 in (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#1 ← (number) 1
Adding number conversion cast (unumber) $2b in (byte) sin8s::DIV_6#0 ← (number) $2b
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#2 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#4 ← (number) 0
Adding number conversion cast (unumber) 4 in (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
Adding number conversion cast (unumber) $80 in (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
Adding number conversion cast (unumber) 0 in (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (number) 0
Adding number conversion cast (snumber) 0 in (bool~) print_sbyte::$0 ← (signed byte) print_sbyte::b#2 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#1 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#2 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#2 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
Adding number conversion cast (unumber) $c0 in (word) main::wavelength#0 ← (number) $c0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (word) rem16u#0 ← (unumber)(number) 0
Inlining cast (word) divr16u::quotient#0 ← (unumber)(number) 0
Inlining cast (word) divr16u::rem#3 ← (unumber)(number) 0
Inlining cast (word) divr16u::rem#4 ← (unumber)(number) 0
Inlining cast (word) mul8u::res#0 ← (unumber)(number) 0
Inlining cast (dword) mul16u::res#0 ← (unumber)(number) 0
Inlining cast (dword) PI2_u4f28#0 ← (unumber)(number) $6487ed51
Inlining cast (dword) PI_u4f28#0 ← (unumber)(number) $3243f6a9
Inlining cast (dword) PI_HALF_u4f28#0 ← (unumber)(number) $1921fb54
Inlining cast (word) PI2_u4f12#0 ← (unumber)(number) $6488
Inlining cast (word) PI_u4f12#0 ← (unumber)(number) $3244
Inlining cast (word) PI_HALF_u4f12#0 ← (unumber)(number) $1922
Inlining cast (dword) sin16s_gen::x#0 ← (unumber)(number) 0
Inlining cast (word) sin16s_gen::i#0 ← (unumber)(number) 0
Inlining cast (word) sin8s_gen::x#0 ← (unumber)(number) 0
Inlining cast (word) sin8s_gen::i#0 ← (unumber)(number) 0
Inlining cast (byte) sin16s::isUpper#0 ← (unumber)(number) 0
Inlining cast (byte) sin16s::isUpper#1 ← (unumber)(number) 1
Inlining cast (byte) mulu16_sel::select#0 ← (unumber)(number) 0
Inlining cast (byte) mulu16_sel::select#1 ← (unumber)(number) 1
Inlining cast (word) mulu16_sel::v2#2 ← (unumber)(number) $10000/(number) 6
Inlining cast (byte) mulu16_sel::select#2 ← (unumber)(number) 1
Inlining cast (byte) mulu16_sel::select#3 ← (unumber)(number) 0
Inlining cast (byte) mulu16_sel::select#4 ← (unumber)(number) 0
Inlining cast (signed word~) sin16s::$14 ← (signed word)(word) sin16s::usinx#1
Inlining cast (signed word~) sin16s::$19 ← (signed word)(word) sin16s::usinx#3
Inlining cast (byte) sin8s::isUpper#0 ← (unumber)(number) 0
Inlining cast (byte) sin8s::isUpper#1 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#0 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#1 ← (unumber)(number) 1
Inlining cast (byte) sin8s::DIV_6#0 ← (unumber)(number) $2b
Inlining cast (byte) mulu8_sel::select#2 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#3 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#4 ← (unumber)(number) 0
Inlining cast (signed byte~) sin8s::$16 ← (signed byte)(byte) sin8s::usinx#4
Inlining cast (signed byte~) sin8s::$21 ← (signed byte)(byte) sin8s::usinx#6
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (byte~) print_sbyte::$1 ← (byte)(signed byte) print_sbyte::b#4
Inlining cast (word) main::wavelength#0 ← (unumber)(number) $c0
Inlining cast (word~) main::$3 ← (word)(byte) main::i#2
Inlining cast (signed byte~) main::$6 ← (signed byte)(byte~) main::$5
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (word) div32u16u::quotient_hi#1
Simplifying constant integer cast (word) div32u16u::quotient_lo#0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $6487ed51
Simplifying constant integer cast $3243f6a9
Simplifying constant integer cast $1921fb54
Simplifying constant integer cast $6488
Simplifying constant integer cast $3244
Simplifying constant integer cast $1922
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $2b
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $c0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (dword) $6487ed51
Finalized unsigned number type (dword) $3243f6a9
Finalized unsigned number type (dword) $1921fb54
Finalized unsigned number type (word) $6488
Finalized unsigned number type (word) $3244
Finalized unsigned number type (word) $1922
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $2b
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $c0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
Inferred type updated to word in (unumber~) divr16u::$5 ← (word) divr16u::rem#8 | (byte) 1
Inferred type updated to byte in (unumber~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
Inferred type updated to byte in (unumber~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
Inversing boolean not [10] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte) 0 from [9] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte) 0
Inversing boolean not [18] (bool~) divr16u::$9 ← (word) divr16u::rem#7 < (word) divr16u::divisor#3 from [17] (bool~) divr16u::$8 ← (word) divr16u::rem#7 >= (word) divr16u::divisor#3
Inversing boolean not [89] (bool~) mul8u::$3 ← (byte~) mul8u::$1 == (byte) 0 from [88] (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte) 0
Inversing boolean not [113] (bool~) mul16u::$3 ← (byte~) mul16u::$1 == (byte) 0 from [112] (bool~) mul16u::$2 ← (byte~) mul16u::$1 != (byte) 0
Inversing boolean not [192] (bool~) sin16s::$1 ← (dword) sin16s::x#3 < (dword) PI_u4f28#0 from [191] (bool~) sin16s::$0 ← (dword) sin16s::x#3 >= (dword) PI_u4f28#0
Inversing boolean not [196] (bool~) sin16s::$3 ← (dword) sin16s::x#4 < (dword) PI_HALF_u4f28#0 from [195] (bool~) sin16s::$2 ← (dword) sin16s::x#4 >= (dword) PI_HALF_u4f28#0
Inversing boolean not [255] (bool~) sin16s::$16 ← (byte) sin16s::isUpper#2 == (byte) 0 from [254] (bool~) sin16s::$15 ← (byte) sin16s::isUpper#2 != (byte) 0
Inversing boolean not [272] (bool~) sin8s::$1 ← (word) sin8s::x#3 < (word) PI_u4f12#0 from [271] (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (word) PI_u4f12#0
Inversing boolean not [276] (bool~) sin8s::$3 ← (word) sin8s::x#4 < (word) PI_HALF_u4f12#0 from [275] (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (word) PI_HALF_u4f12#0
Inversing boolean not [334] (bool~) sin8s::$15 ← (byte) sin8s::usinx#1 < (byte) $80 from [333] (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (byte) $80
Inversing boolean not [343] (bool~) sin8s::$18 ← (byte) sin8s::isUpper#2 == (byte) 0 from [342] (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#8 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#9 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#4 = (word) divr16u::dividend#8 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#5 = (word) divr16u::divisor#6 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word~) divr16u::$5 
Alias (word) divr16u::rem#7 = (word) divr16u::rem#9 
Alias (word) divr16u::divisor#3 = (word) divr16u::divisor#4 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::rem#10 = (word) divr16u::rem#12 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#5 (word) divr16u::return#1 
Alias (word) rem16u#1 = (word) rem16u#16 (word) rem16u#2 
Alias (word) divr16u::return#2 = (word) divr16u::return#6 
Alias (word) rem16u#17 = (word) rem16u#3 (word) rem16u#18 (word) rem16u#4 
Alias (word) div16u::return#0 = (word~) div16u::$0 (word) div16u::return#3 (word) div16u::return#1 
Alias (word) divr16u::dividend#2 = (word~) div32u16u::$0 
Alias (word) divr16u::return#3 = (word) divr16u::return#7 
Alias (dword) div32u16u::dividend#1 = (dword) div32u16u::dividend#2 
Alias (word) div32u16u::divisor#1 = (word) div32u16u::divisor#2 
Alias (word) rem16u#19 = (word) rem16u#5 
Alias (word) div32u16u::quotient_hi#0 = (word~) div32u16u::$1 (word) div32u16u::quotient_hi#1 
Alias (word) divr16u::dividend#3 = (word~) div32u16u::$2 
Alias (word) divr16u::return#4 = (word) divr16u::return#8 
Alias (word) rem16u#20 = (word) rem16u#6 (word) rem16u#21 (word) rem16u#7 
Alias (word) div32u16u::quotient_lo#0 = (word~) div32u16u::$3 
Alias (dword) div32u16u::return#0 = (dword) div32u16u::quotient#0 (dword~) div32u16u::$4 (dword) div32u16u::return#3 (dword) div32u16u::return#1 
Alias (word) mul8u::mb#0 = (byte) mul8u::b#1 
Alias (byte) mul8u::a#2 = (byte) mul8u::a#3 (byte) mul8u::a#6 
Alias (word) mul8u::mb#3 = (word) mul8u::mb#4 (word) mul8u::mb#5 
Alias (word) mul8u::res#2 = (word) mul8u::res#5 (word) mul8u::res#4 (word) mul8u::return#0 (word) mul8u::res#3 (word) mul8u::return#3 (word) mul8u::return#1 
Alias (byte) mul8u::a#0 = (byte~) mul8u::$5 
Alias (word) mul8u::mb#1 = (word~) mul8u::$6 
Alias (word) mul8u::res#1 = (word~) mul8u::$4 
Alias (dword) mul16u::mb#0 = (word) mul16u::b#1 
Alias (word) mul16u::a#2 = (word) mul16u::a#3 (word) mul16u::a#6 
Alias (dword) mul16u::mb#3 = (dword) mul16u::mb#4 (dword) mul16u::mb#5 
Alias (dword) mul16u::res#2 = (dword) mul16u::res#5 (dword) mul16u::res#4 (dword) mul16u::return#0 (dword) mul16u::res#3 (dword) mul16u::return#3 (dword) mul16u::return#1 
Alias (word) mul16u::a#0 = (word~) mul16u::$5 
Alias (dword) mul16u::mb#1 = (dword~) mul16u::$6 
Alias (dword) mul16u::res#1 = (dword~) mul16u::$4 
Alias (word) rem16u#0 = (word) rem16u#45 (word) rem16u#43 (word) rem16u#42 (word) rem16u#38 
Alias (dword) div32u16u::return#2 = (dword) div32u16u::return#4 
Alias (signed word*) sin16s_gen::sintab#4 = (signed word*) sin16s_gen::sintab#5 
Alias (word) sin16s_gen::wavelength#1 = (word) sin16s_gen::wavelength#4 
Alias (word) rem16u#22 = (word) rem16u#8 
Alias (dword) sin16s_gen::step#0 = (dword~) sin16s_gen::$0 
Alias (signed word) sin16s::return#0 = (signed word) sin16s::return#3 
Alias (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#3 
Alias (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#3 
Alias (dword) sin16s_gen::step#1 = (dword) sin16s_gen::step#2 
Alias (word) sin16s_gen::i#2 = (word) sin16s_gen::i#3 
Alias (word) sin16s_gen::wavelength#2 = (word) sin16s_gen::wavelength#3 
Alias (word) rem16u#23 = (word) rem16u#33 (word) rem16u#39 (word) rem16u#9 
Alias (dword) sin16s_gen::x#1 = (dword~) sin16s_gen::$2 
Alias (word) div16u::return#2 = (word) div16u::return#4 
Alias (signed byte*) sin8s_gen::sintab#4 = (signed byte*) sin8s_gen::sintab#5 
Alias (word) sin8s_gen::wavelength#1 = (word) sin8s_gen::wavelength#4 
Alias (word) rem16u#10 = (word) rem16u#24 
Alias (word) sin8s_gen::step#0 = (word~) sin8s_gen::$0 
Alias (signed byte) sin8s::return#0 = (signed byte) sin8s::return#3 
Alias (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#3 
Alias (word) sin8s_gen::x#2 = (word) sin8s_gen::x#3 
Alias (word) sin8s_gen::step#1 = (word) sin8s_gen::step#2 
Alias (word) sin8s_gen::i#2 = (word) sin8s_gen::i#3 
Alias (word) sin8s_gen::wavelength#2 = (word) sin8s_gen::wavelength#3 
Alias (word) rem16u#11 = (word) rem16u#35 (word) rem16u#40 (word) rem16u#25 
Alias (word) sin8s_gen::x#1 = (word~) sin8s_gen::$2 
Alias (dword) sin16s::x#3 = (dword) sin16s::x#5 
Alias (dword) sin16s::x#1 = (dword~) sin16s::$17 
Alias (word) sin16s::x1#0 = (word~) sin16s::$5 (word) sin16s::x1#1 (word) sin16s::x1#4 (word) sin16s::x1#2 (word) sin16s::x1#3 
Alias (word) mulu16_sel::return#0 = (word) mulu16_sel::return#7 
Alias (byte) sin16s::isUpper#2 = (byte) sin16s::isUpper#6 (byte) sin16s::isUpper#7 (byte) sin16s::isUpper#5 (byte) sin16s::isUpper#4 (byte) sin16s::isUpper#3 
Alias (word) sin16s::x2#0 = (word~) sin16s::$6 
Alias (word) mulu16_sel::return#1 = (word) mulu16_sel::return#8 
Alias (word) sin16s::x3#0 = (word~) sin16s::$7 (word) sin16s::x3#1 
Alias (word) mulu16_sel::return#2 = (word) mulu16_sel::return#9 
Alias (word) sin16s::x3_6#0 = (word~) sin16s::$8 
Alias (word) sin16s::usinx#0 = (word~) sin16s::$9 (word) sin16s::usinx#4 (word) sin16s::usinx#2 
Alias (word) mulu16_sel::return#10 = (word) mulu16_sel::return#3 
Alias (word) sin16s::x4#0 = (word~) sin16s::$10 
Alias (word) mulu16_sel::return#11 = (word) mulu16_sel::return#4 
Alias (word) sin16s::x5#0 = (word~) sin16s::$11 
Alias (word) sin16s::x5_128#0 = (word~) sin16s::$12 
Alias (word) sin16s::usinx#1 = (word~) sin16s::$13 (word) sin16s::usinx#3 
Alias (signed word) sin16s::sinx#0 = (signed word~) sin16s::$14 
Alias (dword) sin16s::x#4 = (dword) sin16s::x#7 
Alias (byte) sin16s::isUpper#8 = (byte) sin16s::isUpper#9 
Alias (dword) sin16s::x#2 = (dword~) sin16s::$18 
Alias (signed word) sin16s::return#1 = (signed word) sin16s::sinx#2 (signed word) sin16s::return#4 (signed word) sin16s::return#2 
Alias (signed word) sin16s::sinx#1 = (signed word~) sin16s::$20 
Alias (word) sin8s::x#3 = (word) sin8s::x#5 
Alias (word) sin8s::x#1 = (word~) sin8s::$19 
Alias (byte) sin8s::x1#0 = (byte~) sin8s::$5 (byte) sin8s::x1#1 (byte) sin8s::x1#4 (byte) sin8s::x1#2 (byte) sin8s::x1#3 
Alias (byte) mulu8_sel::return#0 = (byte) mulu8_sel::return#7 
Alias (byte) sin8s::isUpper#3 = (byte) sin8s::isUpper#8 (byte) sin8s::isUpper#9 (byte) sin8s::isUpper#7 (byte) sin8s::isUpper#6 (byte) sin8s::isUpper#5 (byte) sin8s::isUpper#4 
Alias (byte) sin8s::x2#0 = (byte~) sin8s::$6 
Alias (byte) mulu8_sel::return#1 = (byte) mulu8_sel::return#8 
Alias (byte) sin8s::x3#0 = (byte~) sin8s::$7 (byte) sin8s::x3#1 
Alias (byte) mulu8_sel::return#2 = (byte) mulu8_sel::return#9 
Alias (byte) sin8s::x3_6#0 = (byte~) sin8s::$8 
Alias (byte) sin8s::usinx#0 = (byte~) sin8s::$9 (byte) sin8s::usinx#7 (byte) sin8s::usinx#3 
Alias (byte) mulu8_sel::return#10 = (byte) mulu8_sel::return#3 
Alias (byte) sin8s::x4#0 = (byte~) sin8s::$10 
Alias (byte) mulu8_sel::return#11 = (byte) mulu8_sel::return#4 
Alias (byte) sin8s::x5#0 = (byte~) sin8s::$11 
Alias (byte) sin8s::x5_128#0 = (byte~) sin8s::$12 
Alias (byte) sin8s::usinx#1 = (byte~) sin8s::$13 (byte) sin8s::usinx#5 
Alias (word) sin8s::x#4 = (word) sin8s::x#7 
Alias (byte) sin8s::isUpper#10 = (byte) sin8s::isUpper#11 
Alias (word) sin8s::x#2 = (word~) sin8s::$20 
Alias (signed byte) sin8s::sinx#0 = (signed byte~) sin8s::$16 
Alias (signed byte) sin8s::return#1 = (signed byte) sin8s::sinx#2 (signed byte) sin8s::return#4 (signed byte) sin8s::return#2 
Alias (byte) sin8s::usinx#4 = (byte) sin8s::usinx#6 
Alias (signed byte) sin8s::sinx#1 = (signed byte~) sin8s::$22 
Alias (dword) mul16u::return#2 = (dword) mul16u::return#4 
Alias (byte) mulu16_sel::select#5 = (byte) mulu16_sel::select#6 
Alias (word) mulu16_sel::return#12 = (word) mulu16_sel::return#5 (word~) mulu16_sel::$2 (word) mulu16_sel::return#6 
Alias (word) mul8u::return#2 = (word) mul8u::return#4 
Alias (byte) mulu8_sel::select#5 = (byte) mulu8_sel::select#6 
Alias (byte) mulu8_sel::return#12 = (byte) mulu8_sel::return#5 (byte~) mulu8_sel::$2 (byte) mulu8_sel::return#6 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#15 (byte*) print_char_cursor#47 (byte*) print_screen#8 (byte*) print_line_cursor#12 (byte*) print_char_cursor#43 (byte*) print_screen#7 
Alias (byte*) print_str::str#2 = (byte*) print_str::str#3 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#36 (byte*) print_char_cursor#20 (byte*) print_char_cursor#2 
Alias (byte*) print_char_cursor#37 = (byte*) print_char_cursor#45 (byte*) print_char_cursor#38 
Alias (signed byte) print_sbyte::b#2 = (signed byte) print_sbyte::b#5 (signed byte) print_sbyte::b#3 (signed byte) print_sbyte::b#7 (signed byte) print_sbyte::b#6 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#3 
Alias (signed byte) print_sbyte::b#0 = (signed byte~) print_sbyte::$5 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#4 
Alias (byte) print_byte::b#0 = (byte~) print_sbyte::$1 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#5 (byte*) print_char_cursor#24 (byte*) print_char_cursor#6 
Alias (byte) print_byte::b#1 = (byte) print_byte::b#2 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#7 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#8 (byte*) print_char_cursor#27 (byte*) print_char_cursor#9 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#29 (byte*) print_char_cursor#11 
Alias (byte*) print_line_cursor#1 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_char_cursor#12 (byte*) print_line_cursor#6 (byte*) print_char_cursor#30 (byte*) print_line_cursor#2 (byte*) print_char_cursor#13 
Alias (byte*) print_screen#4 = (byte*) print_screen#5 (byte*) print_screen#6 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#13 (byte*) print_line_cursor#16 
Alias (byte*) print_char_cursor#41 = (byte*) print_char_cursor#46 (byte*) print_char_cursor#48 
Alias (word) rem16u#12 = (word) rem16u#26 
Alias (word) rem16u#13 = (word) rem16u#27 (word) rem16u#46 
Alias (byte*) print_line_cursor#3 = (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#31 
Alias (signed byte) main::sd#0 = (signed byte~) main::$7 
Alias (byte) main::i#2 = (byte) main::i#4 (byte) main::i#3 
Alias (word) rem16u#14 = (word) rem16u#41 (word) rem16u#44 (word) rem16u#37 (word) rem16u#28 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#14 (byte*) print_line_cursor#17 (byte*) print_line_cursor#8 (byte*) print_line_cursor#4 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#32 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#33 (byte*) print_char_cursor#34 (byte*) print_char_cursor#17 
Alias (word) rem16u#15 = (word) rem16u#29 
Alias (byte*) print_line_cursor#5 = (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#35 
Successful SSA optimization Pass2AliasElimination
Alias (word) divr16u::dividend#4 = (word) divr16u::dividend#5 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#3 = (word) divr16u::divisor#5 (word) divr16u::divisor#8 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#7 
Alias (byte) mul8u::a#2 = (byte) mul8u::a#4 
Alias (word) mul8u::mb#2 = (word) mul8u::mb#3 
Alias (word) mul16u::a#2 = (word) mul16u::a#4 
Alias (dword) mul16u::mb#2 = (dword) mul16u::mb#3 
Alias (byte) sin16s::isUpper#2 = (byte) sin16s::isUpper#8 
Alias (byte) sin8s::isUpper#10 = (byte) sin8s::isUpper#3 (byte) sin8s::isUpper#2 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (word) divr16u::divisor#3
Self Phi Eliminated (dword) sin16s_gen::step#1
Self Phi Eliminated (word) sin16s_gen::wavelength#2
Self Phi Eliminated (word) rem16u#23
Self Phi Eliminated (word) sin8s_gen::step#1
Self Phi Eliminated (word) sin8s_gen::wavelength#2
Self Phi Eliminated (word) rem16u#11
Self Phi Eliminated (byte*) print_line_cursor#1
Self Phi Eliminated (word) rem16u#14
Self Phi Eliminated (byte*) print_line_cursor#11
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (word) divr16u::divisor#3 (word) divr16u::divisor#7
Identical Phi Values (word) div16u::dividend#1 (word) div16u::dividend#0
Identical Phi Values (word) div16u::divisor#1 (word) div16u::divisor#0
Identical Phi Values (word) rem16u#30 (word) rem16u#34
Identical Phi Values (word) rem16u#17 (word) rem16u#1
Identical Phi Values (dword) div32u16u::dividend#1 (dword) div32u16u::dividend#0
Identical Phi Values (word) div32u16u::divisor#1 (word) div32u16u::divisor#0
Identical Phi Values (word) rem16u#31 (word) rem16u#32
Identical Phi Values (word) rem16u#19 (word) rem16u#1
Identical Phi Values (word) rem16u#20 (word) rem16u#1
Identical Phi Values (word) mul8u::mb#0 (byte) mul8u::b#0
Identical Phi Values (byte) mul8u::a#5 (byte) mul8u::a#1
Identical Phi Values (dword) mul16u::mb#0 (word) mul16u::b#0
Identical Phi Values (word) mul16u::a#5 (word) mul16u::a#1
Identical Phi Values (word) sin16s_gen::wavelength#1 (word) sin16s_gen::wavelength#0
Identical Phi Values (word) rem16u#32 (word) rem16u#12
Identical Phi Values (signed word*) sin16s_gen::sintab#4 (signed word*) sin16s_gen::sintab#1
Identical Phi Values (word) rem16u#22 (word) rem16u#20
Identical Phi Values (dword) sin16s_gen::step#1 (dword) sin16s_gen::step#0
Identical Phi Values (word) sin16s_gen::wavelength#2 (word) sin16s_gen::wavelength#1
Identical Phi Values (word) rem16u#23 (word) rem16u#22
Identical Phi Values (word) sin8s_gen::wavelength#1 (word) sin8s_gen::wavelength#0
Identical Phi Values (word) rem16u#34 (word) rem16u#36
Identical Phi Values (signed byte*) sin8s_gen::sintab#4 (signed byte*) sin8s_gen::sintab#1
Identical Phi Values (word) rem16u#10 (word) rem16u#17
Identical Phi Values (word) sin8s_gen::step#1 (word) sin8s_gen::step#0
Identical Phi Values (word) sin8s_gen::wavelength#2 (word) sin8s_gen::wavelength#1
Identical Phi Values (word) rem16u#11 (word) rem16u#10
Identical Phi Values (dword) sin16s::x#3 (dword) sin16s::x#0
Identical Phi Values (word) sin8s::x#3 (word) sin8s::x#0
Identical Phi Values (byte*) print_str::str#4 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_char_cursor#15
Identical Phi Values (signed byte) print_sbyte::b#2 (signed byte) print_sbyte::b#1
Identical Phi Values (byte*) print_char_cursor#37 (byte*) print_char_cursor#42
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#26
Identical Phi Values (byte) print_byte::b#1 (byte) print_byte::b#0
Identical Phi Values (byte*) print_char_cursor#40 (byte*) print_char_cursor#39
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_screen#1 (byte*) print_screen#4
Identical Phi Values (byte*) print_line_cursor#1 (byte*) print_screen#1
Identical Phi Values (word) rem16u#36 (word) rem16u#0
Identical Phi Values (byte*) print_screen#4 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#41 (byte*) print_line_cursor#0
Identical Phi Values (word) rem16u#12 (word) rem16u#11
Identical Phi Values (word) rem16u#13 (word) rem16u#23
Identical Phi Values (byte*) print_line_cursor#3 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_line_cursor#1
Identical Phi Values (word) rem16u#14 (word) rem16u#13
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#3
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#19
Identical Phi Values (word) rem16u#15 (word) rem16u#14
Identical Phi Values (byte*) print_line_cursor#5 (byte*) print_line_cursor#11
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#16
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#39 (byte*) print_char_cursor#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) divr16u::$4 [11] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [19] if((word) divr16u::rem#7<(word) divr16u::divisor#7) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [26] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) mul8u::$0 [85] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
Simple Condition (bool~) mul8u::$3 [90] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@4
Simple Condition (bool~) mul16u::$0 [109] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
Simple Condition (bool~) mul16u::$3 [114] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@4
Simple Condition (bool~) sin16s_gen::$3 [158] if((word) sin16s_gen::i#1<(word) sin16s_gen::wavelength#0) goto sin16s_gen::@1
Simple Condition (bool~) sin8s_gen::$3 [185] if((word) sin8s_gen::i#1<(word) sin8s_gen::wavelength#0) goto sin8s_gen::@1
Simple Condition (bool~) sin16s::$1 [193] if((dword) sin16s::x#0<(dword) PI_u4f28#0) goto sin16s::@1
Simple Condition (bool~) sin16s::$3 [197] if((dword) sin16s::x#4<(dword) PI_HALF_u4f28#0) goto sin16s::@2
Simple Condition (bool~) sin16s::$16 [256] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@3
Simple Condition (bool~) sin8s::$1 [273] if((word) sin8s::x#0<(word) PI_u4f12#0) goto sin8s::@1
Simple Condition (bool~) sin8s::$3 [277] if((word) sin8s::x#4<(word) PI_HALF_u4f12#0) goto sin8s::@2
Simple Condition (bool~) sin8s::$15 [335] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
Simple Condition (bool~) sin8s::$18 [344] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@4
Simple Condition (bool~) print_str::$0 [389] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
Simple Condition (bool~) print_sbyte::$0 [399] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1
Simple Condition (bool~) print_cls::$1 [450] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) main::$10 [497] if((byte) main::i#1!=rangelast(0,$bf)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [223] (word) mulu16_sel::v2#2 ← (unumber)(number) $10000/(number) 6
Constant right-side identified [460] (signed byte[$c0]) main::sintabb#0 ← { fill( $c0, 0) }
Constant right-side identified [466] (signed word[$c0]) main::sintabw#0 ← { fill( $c0, 0) }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) rem16u#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const word) divr16u::rem#4 = 0
Constant (const word) mul8u::res#0 = 0
Constant (const dword) mul16u::res#0 = 0
Constant (const dword) PI2_u4f28#0 = $6487ed51
Constant (const dword) PI_u4f28#0 = $3243f6a9
Constant (const dword) PI_HALF_u4f28#0 = $1921fb54
Constant (const word) PI2_u4f12#0 = $6488
Constant (const word) PI_u4f12#0 = $3244
Constant (const word) PI_HALF_u4f12#0 = $1922
Constant (const dword) sin16s_gen::x#0 = 0
Constant (const word) sin16s_gen::i#0 = 0
Constant (const word) sin8s_gen::x#0 = 0
Constant (const word) sin8s_gen::i#0 = 0
Constant (const byte) sin16s::isUpper#0 = 0
Constant (const byte) sin16s::isUpper#1 = 1
Constant (const byte) mulu16_sel::select#0 = 0
Constant (const byte) mulu16_sel::select#1 = 1
Constant (const word) mulu16_sel::v2#2 = (unumber)$10000/6
Constant (const byte) mulu16_sel::select#2 = 1
Constant (const byte) mulu16_sel::select#3 = 0
Constant (const byte) mulu16_sel::select#4 = 0
Constant (const byte) sin8s::isUpper#0 = 0
Constant (const byte) sin8s::isUpper#1 = 1
Constant (const byte) mulu8_sel::select#0 = 0
Constant (const byte) mulu8_sel::select#1 = 1
Constant (const byte) sin8s::DIV_6#0 = $2b
Constant (const byte) mulu8_sel::select#2 = 1
Constant (const byte) mulu8_sel::select#3 = 0
Constant (const byte) mulu8_sel::select#4 = 0
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = ' '
Constant (const byte[]) print_hextab#0 = $0
Constant (const word) main::wavelength#0 = $c0
Constant (const signed byte[$c0]) main::sintabb#0 = { fill( $c0, 0) }
Constant (const signed word[$c0]) main::sintabw#0 = { fill( $c0, 0) }
Constant (const byte) main::i#0 = 0
Constant (const byte*) print_str::str#1 = main::str
Successful SSA optimization Pass2ConstantIdentification
Constant (const dword) div32u16u::dividend#0 = PI2_u4f28#0
Constant (const word) div16u::dividend#0 = PI2_u4f12#0
Constant (const byte) mulu8_sel::v2#2 = sin8s::DIV_6#0
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const signed byte*) sin8s_gen::sintab#1 = main::sintabb#0
Constant (const word) sin8s_gen::wavelength#0 = main::wavelength#0
Constant (const signed word*) sin16s_gen::sintab#1 = main::sintabw#0
Constant (const word) sin16s_gen::wavelength#0 = main::wavelength#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::dividend#1 = div16u::dividend#0
Constant (const word) div32u16u::divisor#0 = sin16s_gen::wavelength#0
Constant (const word) div16u::divisor#0 = sin8s_gen::wavelength#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::divisor#0 = div16u::divisor#0
Constant (const word) divr16u::divisor#1 = div32u16u::divisor#0
Constant (const word) divr16u::divisor#2 = div32u16u::divisor#0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [24] divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value [26] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (number) $10
Resolved ranged next value [495] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [497] if(main::i#1!=rangelast(0,$bf)) goto main::@1 to (number) $c0
Eliminating unused constant (const word) rem16u#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) $10 in if((byte) divr16u::i#1!=(number) $10) goto divr16u::@1
Adding number conversion cast (unumber) $c0 in if((byte) main::i#1!=(number) $c0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Simplifying constant integer cast $c0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $c0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [22] (word) divr16u::dividend#2 ← > (const dword) div32u16u::dividend#0
Constant right-side identified [26] (word) divr16u::dividend#3 ← < (const dword) div32u16u::dividend#0
Constant right-side identified [210] (byte*~) print_cls::$0 ← (const byte*) print_line_cursor#0 + (word) $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) divr16u::dividend#2 = >div32u16u::dividend#0
Constant (const word) divr16u::dividend#3 = <div32u16u::dividend#0
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [111] (signed word) sin16s::sinx#0 ← (signed word)(word) sin16s::usinx#1 keeping sin16s::usinx#1
Inlining Noop Cast [115] (signed word~) sin16s::$19 ← (signed word)(word) sin16s::usinx#1 keeping sin16s::usinx#1
Inlining Noop Cast [155] (signed byte) sin8s::sinx#0 ← (signed byte)(byte) sin8s::usinx#4 keeping sin8s::usinx#4
Inlining Noop Cast [159] (signed byte~) sin8s::$21 ← (signed byte)(byte) sin8s::usinx#4 keeping sin8s::usinx#4
Inlining Noop Cast [191] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4 keeping print_sbyte::b#4
Inlining Noop Cast [220] (signed byte~) main::$6 ← (signed byte)(byte~) main::$5 keeping main::$5
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [216] (word~) main::$11 ← (word~) main::$3 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#4
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) divr16u::divisor#0
Inlining constant with var siblings (const word) divr16u::divisor#1
Inlining constant with var siblings (const word) divr16u::divisor#2
Inlining constant with var siblings (const word) divr16u::dividend#2
Inlining constant with var siblings (const word) divr16u::dividend#3
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const dword) mul16u::res#0
Inlining constant with var siblings (const dword) sin16s_gen::x#0
Inlining constant with var siblings (const word) sin16s_gen::i#0
Inlining constant with var siblings (const signed word*) sin16s_gen::sintab#1
Inlining constant with var siblings (const word) sin8s_gen::x#0
Inlining constant with var siblings (const word) sin8s_gen::i#0
Inlining constant with var siblings (const signed byte*) sin8s_gen::sintab#1
Inlining constant with var siblings (const byte) sin16s::isUpper#0
Inlining constant with var siblings (const byte) sin16s::isUpper#1
Inlining constant with var siblings (const byte) sin8s::isUpper#0
Inlining constant with var siblings (const byte) sin8s::isUpper#1
Inlining constant with var siblings (const byte) mulu16_sel::select#0
Inlining constant with var siblings (const byte) mulu16_sel::select#1
Inlining constant with var siblings (const word) mulu16_sel::v2#2
Inlining constant with var siblings (const byte) mulu16_sel::select#2
Inlining constant with var siblings (const byte) mulu16_sel::select#3
Inlining constant with var siblings (const byte) mulu16_sel::select#4
Inlining constant with var siblings (const byte) mulu8_sel::select#0
Inlining constant with var siblings (const byte) mulu8_sel::select#1
Inlining constant with var siblings (const byte) mulu8_sel::select#2
Inlining constant with var siblings (const byte) mulu8_sel::select#3
Inlining constant with var siblings (const byte) mulu8_sel::select#4
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined divr16u::rem#3 = (byte) 0
Constant inlined print_cls::$0 = (const byte*) print_line_cursor#0+(word) $3e8
Constant inlined divr16u::i#0 = (byte) 0
Constant inlined divr16u::rem#4 = (byte) 0
Constant inlined sin16s_gen::wavelength#0 = (const word) main::wavelength#0
Constant inlined div32u16u::dividend#0 = (const dword) PI2_u4f28#0
Constant inlined sin16s::isUpper#0 = (byte) 0
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined sin8s::isUpper#1 = (byte) 1
Constant inlined sin8s::isUpper#0 = (byte) 0
Constant inlined sin8s_gen::x#0 = (byte) 0
Constant inlined mulu16_sel::select#4 = (byte) 0
Constant inlined divr16u::quotient#0 = (byte) 0
Constant inlined mulu16_sel::select#2 = (byte) 1
Constant inlined mulu16_sel::select#3 = (byte) 0
Constant inlined mul16u::res#0 = (byte) 0
Constant inlined mulu16_sel::select#0 = (byte) 0
Constant inlined div16u::divisor#0 = (const word) main::wavelength#0
Constant inlined sin16s::isUpper#1 = (byte) 1
Constant inlined mulu16_sel::select#1 = (byte) 1
Constant inlined main::i#0 = (byte) 0
Constant inlined mulu8_sel::select#0 = (byte) 0
Constant inlined div16u::dividend#0 = (const word) PI2_u4f12#0
Constant inlined divr16u::divisor#1 = (const word) main::wavelength#0
Constant inlined mulu8_sel::select#2 = (byte) 1
Constant inlined divr16u::divisor#0 = (const word) main::wavelength#0
Constant inlined mulu8_sel::select#1 = (byte) 1
Constant inlined mulu8_sel::select#4 = (byte) 0
Constant inlined divr16u::divisor#2 = (const word) main::wavelength#0
Constant inlined mulu8_sel::select#3 = (byte) 0
Constant inlined sin16s_gen::i#0 = (byte) 0
Constant inlined divr16u::dividend#1 = (const word) PI2_u4f12#0
Constant inlined print_cls::sc#0 = (const byte*) print_line_cursor#0
Constant inlined divr16u::dividend#2 = >(const dword) PI2_u4f28#0
Constant inlined divr16u::dividend#3 = <(const dword) PI2_u4f28#0
Constant inlined sin16s_gen::sintab#1 = (const signed word[$c0]) main::sintabw#0
Constant inlined mulu8_sel::v2#2 = (const byte) sin8s::DIV_6#0
Constant inlined mul8u::res#0 = (byte) 0
Constant inlined print_char::ch#1 = (byte) ' '
Constant inlined mulu16_sel::v2#2 = (word)(number) $10000/(number) 6
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined sin8s_gen::sintab#1 = (const signed byte[$c0]) main::sintabb#0
Constant inlined sin16s_gen::x#0 = (byte) 0
Constant inlined sin8s_gen::wavelength#0 = (const word) main::wavelength#0
Constant inlined div32u16u::divisor#0 = (const word) main::wavelength#0
Constant inlined print_str::str#1 = (const string) main::str
Constant inlined sin8s_gen::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) divr16u::divisor#7 (const word) main::wavelength#0
Successful SSA optimization Pass2IdenticalPhiElimination
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul8u::@10(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting mul16u::@10(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting sin16s_gen::@5(between sin16s_gen::@4 and sin16s_gen::@1)
Added new block during phi lifting sin8s_gen::@5(between sin8s_gen::@4 and sin8s_gen::@1)
Added new block during phi lifting sin16s::@13(between sin16s and sin16s::@1)
Fixing phi predecessor for sin16s::isUpper#2 to new block ( sin16s -> sin16s::@13 ) during phi lifting.
Added new block during phi lifting sin16s::@14(between sin16s::@1 and sin16s::@2)
Added new block during phi lifting sin16s::@15(between sin16s::@12 and sin16s::@3)
Added new block during phi lifting sin8s::@15(between sin8s and sin8s::@1)
Fixing phi predecessor for sin8s::isUpper#10 to new block ( sin8s -> sin8s::@15 ) during phi lifting.
Added new block during phi lifting sin8s::@16(between sin8s::@1 and sin8s::@2)
Added new block during phi lifting sin8s::@17(between sin8s::@14 and sin8s::@3)
Added new block during phi lifting sin8s::@18(between sin8s::@3 and sin8s::@4)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting main::@8(between main::@7 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @13
Adding NOP phi() at start of @20
Adding NOP phi() at start of @32
Adding NOP phi() at start of @40
Adding NOP phi() at start of @41
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of print_sbyte::@7
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@2
Adding NOP phi() at start of sin16s_gen
Adding NOP phi() at start of mul16u::@3
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of sin8s_gen
Adding NOP phi() at start of mul8u::@3
Adding NOP phi() at start of div16u
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to sin8s_gen:10 sin16s_gen:12 print_cls:14 print_sbyte:25 print_str:27 
Calls in [print_sbyte] to print_char:44 print_byte:47 print_char:51 
Calls in [print_byte] to print_char:62 print_char:67 
Calls in [sin16s_gen] to div32u16u:79 sin16s:84 
Calls in [sin16s] to mulu16_sel:110 mulu16_sel:117 mulu16_sel:122 mulu16_sel:130 mulu16_sel:137 
Calls in [mulu16_sel] to mul16u:153 
Calls in [div32u16u] to divr16u:177 divr16u:182 
Calls in [sin8s_gen] to div16u:218 sin8s:223 
Calls in [sin8s] to mulu8_sel:249 mulu8_sel:256 mulu8_sel:261 mulu8_sel:269 mulu8_sel:276 
Calls in [mulu8_sel] to mul8u:297 
Calls in [div16u] to divr16u:321 

Created 46 initial phi equivalence classes
Coalesced [31] main::i#5 ← main::i#1
Coalesced [32] print_char_cursor#55 ← print_char_cursor#19
Coalesced [33] print_char_cursor#49 ← print_char_cursor#10
Coalesced [40] print_str::str#5 ← print_str::str#0
Coalesced [41] print_char_cursor#50 ← print_char_cursor#1
Coalesced [43] print_char_cursor#54 ← print_char_cursor#42
Coalesced [45] print_sbyte::b#9 ← print_sbyte::b#1
Coalesced (already) [50] print_char_cursor#53 ← print_char_cursor#42
Coalesced [53] print_sbyte::b#8 ← print_sbyte::b#0
Coalesced [60] print_char::ch#5 ← print_char::ch#2
Coalesced (already) [61] print_char_cursor#51 ← print_char_cursor#10
Coalesced [65] print_char::ch#6 ← print_char::ch#3
Coalesced (already) [66] print_char_cursor#52 ← print_char_cursor#10
Coalesced [77] print_cls::sc#3 ← print_cls::sc#1
Coalesced [93] sin16s_gen::x#4 ← sin16s_gen::x#1
Coalesced [94] sin16s_gen::sintab#6 ← sin16s_gen::sintab#0
Coalesced [95] sin16s_gen::i#4 ← sin16s_gen::i#1
Coalesced [98] sin16s::x#9 ← sin16s::x#1
Coalesced [102] sin16s::x#11 ← sin16s::x#2
Coalesced [108] mulu16_sel::v1#8 ← mulu16_sel::v1#0
Coalesced [109] mulu16_sel::v2#8 ← mulu16_sel::v2#0
Coalesced [115] mulu16_sel::v1#9 ← mulu16_sel::v1#1
Coalesced [116] mulu16_sel::v2#9 ← mulu16_sel::v2#1
Coalesced [121] mulu16_sel::v1#10 ← mulu16_sel::v1#2
Coalesced [128] mulu16_sel::v1#6 ← mulu16_sel::v1#3
Coalesced [129] mulu16_sel::v2#6 ← mulu16_sel::v2#3
Coalesced [135] mulu16_sel::v1#7 ← mulu16_sel::v1#4
Coalesced [136] mulu16_sel::v2#7 ← mulu16_sel::v2#4
Coalesced [144] sin16s::return#6 ← sin16s::sinx#1
Coalesced [148] sin16s::x#10 ← sin16s::x#4
Coalesced [149] sin16s::x#8 ← sin16s::x#0
Coalesced [159] mul16u::a#7 ← mul16u::a#1
Coalesced [160] mul16u::mb#6 ← mul16u::b#0
Coalesced [168] mul16u::res#9 ← mul16u::res#1
Coalesced [172] mul16u::a#8 ← mul16u::a#0
Coalesced [173] mul16u::res#7 ← mul16u::res#6
Coalesced [174] mul16u::mb#7 ← mul16u::mb#1
Coalesced (already) [175] mul16u::res#8 ← mul16u::res#2
Coalesced [181] divr16u::rem#13 ← divr16u::rem#5
Coalesced [188] divr16u::rem#14 ← divr16u::rem#11
Coalesced [189] divr16u::dividend#10 ← divr16u::dividend#6
Coalesced [196] divr16u::rem#17 ← divr16u::rem#1
Coalesced [203] divr16u::rem#19 ← divr16u::rem#2
Coalesced [204] divr16u::return#10 ← divr16u::quotient#2
Coalesced [210] divr16u::rem#15 ← divr16u::rem#10
Coalesced [211] divr16u::dividend#11 ← divr16u::dividend#0
Coalesced [212] divr16u::quotient#9 ← divr16u::return#0
Coalesced [213] divr16u::i#7 ← divr16u::i#1
Coalesced [214] divr16u::rem#18 ← divr16u::rem#7
Coalesced [215] divr16u::return#9 ← divr16u::quotient#1
Coalesced [216] divr16u::rem#16 ← divr16u::rem#0
Coalesced [232] sin8s_gen::x#4 ← sin8s_gen::x#1
Coalesced [233] sin8s_gen::sintab#6 ← sin8s_gen::sintab#0
Coalesced [234] sin8s_gen::i#4 ← sin8s_gen::i#1
Coalesced [237] sin8s::x#9 ← sin8s::x#1
Coalesced [241] sin8s::x#11 ← sin8s::x#2
Coalesced [247] mulu8_sel::v1#10 ← mulu8_sel::v1#0
Coalesced [248] mulu8_sel::v2#9 ← mulu8_sel::v2#0
Coalesced [254] mulu8_sel::v1#6 ← mulu8_sel::v1#1
Coalesced [255] mulu8_sel::v2#6 ← mulu8_sel::v2#1
Coalesced [260] mulu8_sel::v1#7 ← mulu8_sel::v1#2
Coalesced [267] mulu8_sel::v1#8 ← mulu8_sel::v1#3
Coalesced [268] mulu8_sel::v2#7 ← mulu8_sel::v2#3
Coalesced [274] mulu8_sel::v1#9 ← mulu8_sel::v1#4
Coalesced [275] mulu8_sel::v2#8 ← mulu8_sel::v2#4
Coalesced [283] sin8s::usinx#9 ← sin8s::usinx#2
Coalesced [287] sin8s::return#6 ← sin8s::sinx#1
Coalesced [291] sin8s::usinx#8 ← sin8s::usinx#1
Coalesced [292] sin8s::x#10 ← sin8s::x#4
Coalesced [293] sin8s::x#8 ← sin8s::x#0
Coalesced [303] mul8u::a#7 ← mul8u::a#1
Coalesced [304] mul8u::mb#6 ← mul8u::b#0
Coalesced [312] mul8u::res#9 ← mul8u::res#1
Coalesced [316] mul8u::a#8 ← mul8u::a#0
Coalesced [317] mul8u::res#7 ← mul8u::res#6
Coalesced [318] mul8u::mb#7 ← mul8u::mb#1
Coalesced (already) [319] mul8u::res#8 ← mul8u::res#2
Coalesced down to 35 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) @13
Culled Empty Block (label) @20
Culled Empty Block (label) @32
Culled Empty Block (label) @41
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@8
Culled Empty Block (label) print_sbyte::@6
Culled Empty Block (label) print_sbyte::@7
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) print_cls::@3
Culled Empty Block (label) sin16s_gen::@5
Culled Empty Block (label) sin16s::@14
Culled Empty Block (label) sin16s::@13
Culled Empty Block (label) mul16u::@3
Culled Empty Block (label) mul16u::@10
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) sin8s_gen::@5
Culled Empty Block (label) sin8s::@17
Culled Empty Block (label) sin8s::@16
Culled Empty Block (label) sin8s::@15
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) mul8u::@10
Renumbering block @40 to @1
Renumbering block div16u::@2 to div16u::@1
Renumbering block div32u16u::@2 to div32u16u::@1
Renumbering block div32u16u::@3 to div32u16u::@2
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@7 to mul8u::@4
Renumbering block mul16u::@4 to mul16u::@3
Renumbering block mul16u::@7 to mul16u::@4
Renumbering block sin16s_gen::@3 to sin16s_gen::@2
Renumbering block sin16s_gen::@4 to sin16s_gen::@3
Renumbering block sin8s_gen::@3 to sin8s_gen::@2
Renumbering block sin8s_gen::@4 to sin8s_gen::@3
Renumbering block sin16s::@8 to sin16s::@7
Renumbering block sin16s::@9 to sin16s::@8
Renumbering block sin16s::@10 to sin16s::@9
Renumbering block sin16s::@11 to sin16s::@10
Renumbering block sin16s::@12 to sin16s::@11
Renumbering block sin16s::@15 to sin16s::@12
Renumbering block sin8s::@10 to sin8s::@9
Renumbering block sin8s::@11 to sin8s::@10
Renumbering block sin8s::@12 to sin8s::@11
Renumbering block sin8s::@13 to sin8s::@12
Renumbering block sin8s::@14 to sin8s::@13
Renumbering block sin8s::@18 to sin8s::@14
Renumbering block mulu16_sel::@2 to mulu16_sel::@1
Renumbering block mulu8_sel::@2 to mulu8_sel::@1
Renumbering block print_sbyte::@5 to print_sbyte::@4
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@6 to main::@4
Renumbering block main::@7 to main::@5
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_sbyte::@3
Adding NOP phi() at start of print_sbyte::@1
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of sin16s_gen
Adding NOP phi() at start of mul16u
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of sin8s_gen
Adding NOP phi() at start of mul8u
Adding NOP phi() at start of div16u

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call sin8s_gen 
  to:main::@2
main::@2: scope:[main]  from main
  [6] phi()
  [7] call sin16s_gen 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] phi()
  [9] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  [10] (byte*) print_char_cursor#42 ← phi( main::@3/(const byte*) print_line_cursor#0 main::@5/(byte*) print_char_cursor#19 )
  [10] (byte) main::i#2 ← phi( main::@3/(byte) 0 main::@5/(byte) main::i#1 )
  [11] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintabb#0 + (byte) main::i#2)
  [12] (word~) main::$3 ← (word)(byte) main::i#2
  [13] (word~) main::$11 ← (word~) main::$3 << (byte) 1
  [14] (signed word*~) main::$4 ← (const signed word[$c0]) main::sintabw#0 + (word~) main::$11
  [15] (signed word) main::sw#0 ← *((signed word*~) main::$4)
  [16] (byte~) main::$5 ← > (signed word) main::sw#0
  [17] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$5
  [18] (signed byte) print_sbyte::b#1 ← (signed byte) main::sd#0
  [19] call print_sbyte 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [20] phi()
  [21] call print_str 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [22] (byte) main::i#1 ← ++ (byte) main::i#2
  [23] if((byte) main::i#1!=(byte) $c0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [24] return 
  to:@return
print_str: scope:[print_str]  from main::@4
  [25] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [26] (byte*) print_char_cursor#19 ← phi( print_str/(byte*) print_char_cursor#10 print_str::@2/(byte*) print_char_cursor#1 )
  [26] (byte*) print_str::str#2 ← phi( print_str/(const string) main::str print_str::@2/(byte*) print_str::str#0 )
  [27] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [28] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [29] *((byte*) print_char_cursor#19) ← *((byte*) print_str::str#2)
  [30] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#19
  [31] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1
print_sbyte: scope:[print_sbyte]  from main::@1
  [32] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  [33] phi()
  [34] call print_char 
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@3 print_sbyte::@4
  [35] (signed byte) print_sbyte::b#4 ← phi( print_sbyte::@4/(signed byte) print_sbyte::b#0 print_sbyte::@3/(signed byte) print_sbyte::b#1 )
  [36] call print_byte 
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@2
  [37] return 
  to:@return
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  [38] phi()
  [39] call print_char 
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@1
  [40] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1
  to:print_sbyte::@2
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3
  [41] (byte*) print_char_cursor#28 ← phi( print_byte/(byte*) print_char_cursor#10 print_byte::@1/(byte*) print_char_cursor#10 print_sbyte::@1/(byte*) print_char_cursor#42 print_sbyte::@3/(byte*) print_char_cursor#42 )
  [41] (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sbyte::@1/(byte) '-' print_sbyte::@3/(byte) ' ' )
  [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#4
  [43] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#28
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [44] return 
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@2
  [45] (byte~) print_byte::$0 ← (byte)(signed byte) print_sbyte::b#4 >> (byte) 4
  [46] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [47] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [48] (byte~) print_byte::$2 ← (byte)(signed byte) print_sbyte::b#4 & (byte) $f
  [49] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [50] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [51] return 
  to:@return
print_cls: scope:[print_cls]  from main::@3
  [52] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [53] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) print_line_cursor#0 print_cls::@1/(byte*) print_cls::sc#1 )
  [54] *((byte*) print_cls::sc#2) ← (byte) ' '
  [55] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [56] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [57] return 
  to:@return
sin16s_gen: scope:[sin16s_gen]  from main::@2
  [58] phi()
  [59] call div32u16u 
  [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen::@2
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen
  [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@2 sin16s_gen::@3
  [62] (word) sin16s_gen::i#2 ← phi( sin16s_gen::@2/(byte) 0 sin16s_gen::@3/(word) sin16s_gen::i#1 )
  [62] (signed word*) sin16s_gen::sintab#2 ← phi( sin16s_gen::@2/(const signed word[$c0]) main::sintabw#0 sin16s_gen::@3/(signed word*) sin16s_gen::sintab#0 )
  [62] (dword) sin16s_gen::x#2 ← phi( sin16s_gen::@2/(byte) 0 sin16s_gen::@3/(dword) sin16s_gen::x#1 )
  [63] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2
  [64] call sin16s 
  [65] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen::@1
  [66] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0
  [67] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1
  [68] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [69] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0
  [70] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2
  [71] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@3
  [72] return 
  to:@return
sin16s: scope:[sin16s]  from sin16s_gen::@1
  [73] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [75] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte) 0 sin16s::@4/(byte) 1 )
  [75] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [76] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [77] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [78] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3
  [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4
  [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [83] call mulu16_sel 
  [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [88] call mulu16_sel 
  [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [92] call mulu16_sel 
  [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [98] call mulu16_sel 
  [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [103] call mulu16_sel 
  [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4
  [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [108] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [110] (signed word) sin16s::return#1 ← phi( sin16s::@12/(signed word~) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [111] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [112] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [113] (byte) mulu16_sel::select#5 ← phi( sin16s::@9/(byte) 0 sin16s::@10/(byte) 0 sin16s::@2/(byte) 0 sin16s::@7/(byte) 1 sin16s::@8/(byte) 1 )
  [113] (word) mulu16_sel::v2#5 ← phi( sin16s::@9/(word) mulu16_sel::v2#3 sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(word)(number) $10000/(number) 6 )
  [113] (word) mulu16_sel::v1#5 ← phi( sin16s::@9/(word) mulu16_sel::v1#3 sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 )
  [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5
  [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5
  [116] call mul16u 
  [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [121] return 
  to:@return
mul16u: scope:[mul16u]  from mulu16_sel
  [122] phi()
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [123] (dword) mul16u::mb#2 ← phi( mul16u/(word) mul16u::b#0 mul16u::@3/(dword) mul16u::mb#1 )
  [123] (dword) mul16u::res#2 ← phi( mul16u/(byte) 0 mul16u::@3/(dword) mul16u::res#6 )
  [123] (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#1 mul16u::@3/(word) mul16u::a#0 )
  [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [125] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1
  [127] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [129] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [130] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1
  [131] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1
div32u16u: scope:[div32u16u]  from sin16s_gen
  [132] phi()
  [133] call divr16u 
  [134] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3
  [136] (word) divr16u::rem#5 ← (word) rem16u#1
  [137] call divr16u 
  [138] (word) divr16u::return#4 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4
  [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [141] return 
  to:@return
divr16u: scope:[divr16u]  from div16u div32u16u div32u16u::@1
  [142] (word) divr16u::dividend#6 ← phi( div16u/(const word) PI2_u4f12#0 div32u16u/>(const dword) PI2_u4f28#0 div32u16u::@1/<(const dword) PI2_u4f28#0 )
  [142] (word) divr16u::rem#11 ← phi( div16u/(byte) 0 div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#5 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [143] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [143] (word) divr16u::quotient#3 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::return#0 )
  [143] (word) divr16u::dividend#4 ← phi( divr16u/(word) divr16u::dividend#6 divr16u::@3/(word) divr16u::dividend#0 )
  [143] (word) divr16u::rem#6 ← phi( divr16u/(word) divr16u::rem#11 divr16u::@3/(word) divr16u::rem#10 )
  [144] (word) divr16u::rem#0 ← (word) divr16u::rem#6 << (byte) 1
  [145] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4
  [146] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [147] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [149] (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [150] (word) divr16u::dividend#0 ← (word) divr16u::dividend#4 << (byte) 1
  [151] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [152] if((word) divr16u::rem#7<(const word) main::wavelength#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [153] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [155] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [155] (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#7 divr16u::@5/(word) divr16u::rem#2 )
  [156] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [157] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [158] (word) rem16u#1 ← (word) divr16u::rem#10
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [159] return 
  to:@return
sin8s_gen: scope:[sin8s_gen]  from main
  [160] phi()
  [161] call div16u 
  [162] (word) div16u::return#2 ← (word) div16u::return#0
  to:sin8s_gen::@2
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen
  [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@2 sin8s_gen::@3
  [164] (word) sin8s_gen::i#2 ← phi( sin8s_gen::@2/(byte) 0 sin8s_gen::@3/(word) sin8s_gen::i#1 )
  [164] (signed byte*) sin8s_gen::sintab#2 ← phi( sin8s_gen::@2/(const signed byte[$c0]) main::sintabb#0 sin8s_gen::@3/(signed byte*) sin8s_gen::sintab#0 )
  [164] (word) sin8s_gen::x#2 ← phi( sin8s_gen::@2/(byte) 0 sin8s_gen::@3/(word) sin8s_gen::x#1 )
  [165] (word) sin8s::x#0 ← (word) sin8s_gen::x#2
  [166] call sin8s 
  [167] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen::@1
  [168] (signed byte~) sin8s_gen::$1 ← (signed byte) sin8s::return#0
  [169] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$1
  [170] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2
  [171] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0
  [172] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2
  [173] if((word) sin8s_gen::i#1<(const word) main::wavelength#0) goto sin8s_gen::@1
  to:sin8s_gen::@return
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@3
  [174] return 
  to:@return
sin8s: scope:[sin8s]  from sin8s_gen::@1
  [175] if((word) sin8s::x#0<(const word) PI_u4f12#0) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12#0
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [177] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) 0 sin8s::@5/(byte) 1 )
  [177] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#0 sin8s::@5/(word) sin8s::x#1 )
  [178] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [179] (word) sin8s::x#2 ← (const word) PI_u4f12#0 - (word) sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [180] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#2 )
  [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3
  [182] (byte) sin8s::x1#0 ← > (word~) sin8s::$4
  [183] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  [184] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  [185] call mulu8_sel 
  [186] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [187] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  [188] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  [189] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0
  [190] call mulu8_sel 
  [191] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [192] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1
  [193] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  [194] call mulu8_sel 
  [195] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [196] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0
  [198] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0
  [199] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0
  [200] call mulu8_sel 
  [201] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [202] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  [203] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  [204] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0
  [205] call mulu8_sel 
  [206] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [207] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4
  [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0
  [210] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [211] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [212] (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  [213] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [215] (signed byte) sin8s::return#1 ← phi( sin8s::@14/(signed byte~) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [216] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [217] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [218] (byte) mulu8_sel::select#5 ← phi( sin8s::@9/(byte) 1 sin8s::@10/(byte) 1 sin8s::@11/(byte) 0 sin8s::@12/(byte) 0 sin8s::@2/(byte) 0 )
  [218] (byte) mulu8_sel::v2#5 ← phi( sin8s::@9/(byte) mulu8_sel::v2#1 sin8s::@10/(const byte) sin8s::DIV_6#0 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  [218] (byte) mulu8_sel::v1#5 ← phi( sin8s::@9/(byte) mulu8_sel::v1#1 sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  [219] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
  [220] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5
  [221] call mul8u 
  [222] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
  [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  [225] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [226] return 
  to:@return
mul8u: scope:[mul8u]  from mulu8_sel
  [227] phi()
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [228] (word) mul8u::mb#2 ← phi( mul8u/(byte) mul8u::b#0 mul8u::@3/(word) mul8u::mb#1 )
  [228] (word) mul8u::res#2 ← phi( mul8u/(byte) 0 mul8u::@3/(word) mul8u::res#6 )
  [228] (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#1 mul8u::@3/(byte) mul8u::a#0 )
  [229] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [230] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1
  [232] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [234] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [235] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1
  [236] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1
div16u: scope:[div16u]  from sin8s_gen
  [237] phi()
  [238] call divr16u 
  [239] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [240] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [241] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(word) PI2_u4f12
(dword) PI2_u4f28
(word) PI_HALF_u4f12
(dword) PI_HALF_u4f28
(word) PI_u4f12
(dword) PI_u4f28
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 1.3333333333333333
(word) div16u::return#2 4.0
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 0.8
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 4.0
(dword) div32u16u::return
(dword) div32u16u::return#0 1.3333333333333333
(dword) div32u16u::return#2 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 22.0
(byte~) divr16u::$2 22.0
(word) divr16u::dividend
(word) divr16u::dividend#0 2.75
(word) divr16u::dividend#4 5.0
(word) divr16u::dividend#6 2.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 16.5
(byte) divr16u::i#2 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 16.5
(word) divr16u::quotient#2 11.0
(word) divr16u::quotient#3 2.75
(word) divr16u::rem
(word) divr16u::rem#0 8.25
(word) divr16u::rem#1 22.0
(word) divr16u::rem#10 11.666666666666666
(word) divr16u::rem#11 4.0
(word) divr16u::rem#2 22.0
(word) divr16u::rem#5 4.0
(word) divr16u::rem#6 24.0
(word) divr16u::rem#7 11.0
(word) divr16u::return
(word) divr16u::return#0 4.875
(word) divr16u::return#2 4.0
(word) divr16u::return#3 4.0
(word) divr16u::return#4 4.0
(void()) main()
(word~) main::$11 22.0
(word~) main::$3 22.0
(signed word*~) main::$4 22.0
(byte~) main::$5 11.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 2.75
(signed byte) main::sb
(signed byte) main::sb#0 3.6666666666666665
(signed byte) main::sd
(signed byte) main::sd#0 22.0
(signed byte[$c0]) main::sintabb
(signed word[$c0]) main::sintabw
(signed word) main::sw
(signed word) main::sw#0 22.0
(word) main::wavelength
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte~) mul16u::$1 202.0
(word) mul16u::a
(word) mul16u::a#0 101.0
(word) mul16u::a#1 1.3333333333333333
(word) mul16u::a#2 67.66666666666666
(word) mul16u::b
(word) mul16u::b#0 2.0
(dword) mul16u::mb
(dword) mul16u::mb#1 202.0
(dword) mul16u::mb#2 43.57142857142858
(dword) mul16u::res
(dword) mul16u::res#1 202.0
(dword) mul16u::res#2 50.83333333333333
(dword) mul16u::res#6 101.0
(dword) mul16u::return
(dword) mul16u::return#2 4.0
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 202.0
(byte) mul8u::a
(byte) mul8u::a#0 101.0
(byte) mul8u::a#1 1.3333333333333333
(byte) mul8u::a#2 67.66666666666666
(byte) mul8u::b
(byte) mul8u::b#0 2.0
(word) mul8u::mb
(word) mul8u::mb#1 202.0
(word) mul8u::mb#2 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 202.0
(word) mul8u::res#2 50.83333333333333
(word) mul8u::res#6 101.0
(word) mul8u::return
(word) mul8u::return#2 4.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 4.0
(dword~) mulu16_sel::$1 4.0
(word) mulu16_sel::return
(word) mulu16_sel::return#0 4.0
(word) mulu16_sel::return#1 4.0
(word) mulu16_sel::return#10 4.0
(word) mulu16_sel::return#11 4.0
(word) mulu16_sel::return#12 1.714285714285714
(word) mulu16_sel::return#2 4.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#5 0.3333333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 2.0
(word) mulu16_sel::v1#1 2.0
(word) mulu16_sel::v1#2 4.0
(word) mulu16_sel::v1#3 2.0
(word) mulu16_sel::v1#4 2.0
(word) mulu16_sel::v1#5 12.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 4.0
(word) mulu16_sel::v2#1 4.0
(word) mulu16_sel::v2#3 4.0
(word) mulu16_sel::v2#4 4.0
(word) mulu16_sel::v2#5 5.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 4.0
(word~) mulu8_sel::$1 4.0
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 4.0
(byte) mulu8_sel::return#1 4.0
(byte) mulu8_sel::return#10 4.0
(byte) mulu8_sel::return#11 4.0
(byte) mulu8_sel::return#12 1.714285714285714
(byte) mulu8_sel::return#2 4.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 0.3333333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 2.0
(byte) mulu8_sel::v1#1 2.0
(byte) mulu8_sel::v1#2 4.0
(byte) mulu8_sel::v1#3 2.0
(byte) mulu8_sel::v1#4 2.0
(byte) mulu8_sel::v1#5 12.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 4.0
(byte) mulu8_sel::v2#1 4.0
(byte) mulu8_sel::v2#3 4.0
(byte) mulu8_sel::v2#4 4.0
(byte) mulu8_sel::v2#5 5.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#2 4.0
(byte) print_char::ch#3 4.0
(byte) print_char::ch#4 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*) print_char_cursor#10 0.4444444444444444
(byte*) print_char_cursor#19 45.142857142857146
(byte*) print_char_cursor#28 6.0
(byte*) print_char_cursor#42 1.25
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(void()) print_sbyte((signed byte) print_sbyte::b)
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 4.0
(signed byte) print_sbyte::b#1 2.8333333333333335
(signed byte) print_sbyte::b#4 1.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#2 101.0
(word) rem16u
(word) rem16u#1 0.8
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$4 4.0
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 0.06060606060606061
(signed word) sin16s::return
(signed word) sin16s::return#0 22.0
(signed word) sin16s::return#1 5.0
(signed word~) sin16s::return#5 4.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 4.0
(word) sin16s::usinx
(word) sin16s::usinx#0 0.3333333333333333
(word) sin16s::usinx#1 1.0
(dword) sin16s::x
(dword) sin16s::x#0 8.5
(dword) sin16s::x#1 4.0
(dword) sin16s::x#2 4.0
(dword) sin16s::x#4 5.0
(dword) sin16s::x#6 6.0
(word) sin16s::x1
(word) sin16s::x1#0 0.6363636363636365
(word) sin16s::x2
(word) sin16s::x2#0 4.0
(word) sin16s::x3
(word) sin16s::x3#0 1.0
(word) sin16s::x3_6
(word) sin16s::x3_6#0 4.0
(word) sin16s::x4
(word) sin16s::x4#0 4.0
(word) sin16s::x5
(word) sin16s::x5#0 4.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 4.0
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(signed word~) sin16s_gen::$1 22.0
(word) sin16s_gen::i
(word) sin16s_gen::i#1 16.5
(word) sin16s_gen::i#2 2.75
(signed word*) sin16s_gen::sintab
(signed word*) sin16s_gen::sintab#0 5.5
(signed word*) sin16s_gen::sintab#2 5.5
(dword) sin16s_gen::step
(dword) sin16s_gen::step#0 1.1818181818181819
(word) sin16s_gen::wavelength
(dword) sin16s_gen::x
(dword) sin16s_gen::x#1 7.333333333333333
(dword) sin16s_gen::x#2 4.714285714285714
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 4.0
(byte) sin8s::DIV_6
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 0.05555555555555555
(signed byte) sin8s::return
(signed byte) sin8s::return#0 22.0
(signed byte) sin8s::return#1 5.0
(signed byte~) sin8s::return#5 4.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 4.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 0.3333333333333333
(byte) sin8s::usinx#1 4.0
(byte) sin8s::usinx#2 4.0
(byte) sin8s::usinx#4 2.0
(word) sin8s::x
(word) sin8s::x#0 8.5
(word) sin8s::x#1 4.0
(word) sin8s::x#2 4.0
(word) sin8s::x#4 5.0
(word) sin8s::x#6 6.0
(byte) sin8s::x1
(byte) sin8s::x1#0 0.6363636363636365
(byte) sin8s::x2
(byte) sin8s::x2#0 4.0
(byte) sin8s::x3
(byte) sin8s::x3#0 1.0
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 4.0
(byte) sin8s::x4
(byte) sin8s::x4#0 4.0
(byte) sin8s::x5
(byte) sin8s::x5#0 4.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 4.0
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(signed byte~) sin8s_gen::$1 22.0
(word) sin8s_gen::i
(word) sin8s_gen::i#1 16.5
(word) sin8s_gen::i#2 2.75
(signed byte*) sin8s_gen::sintab
(signed byte*) sin8s_gen::sintab#0 5.5
(signed byte*) sin8s_gen::sintab#2 5.5
(word) sin8s_gen::step
(word) sin8s_gen::step#0 1.1818181818181819
(word) sin8s_gen::wavelength
(word) sin8s_gen::x
(word) sin8s_gen::x#1 7.333333333333333
(word) sin8s_gen::x#2 4.714285714285714

Not consolidating phi with different size mul16u::mb#2 mul16u::b#0
Not consolidating phi with different size mul8u::mb#2 mul8u::b#0
Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ print_str::str#2 print_str::str#0 ]
[ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#28 print_char_cursor#42 print_char_cursor#19 print_char_cursor#10 print_char_cursor#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ sin16s_gen::x#2 sin16s_gen::x#1 ]
[ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
[ sin16s_gen::i#2 sin16s_gen::i#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
[ mulu16_sel::select#5 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#1 ]
[ mul16u::b#0 ]
[ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ sin8s_gen::x#2 sin8s_gen::x#1 ]
[ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
[ sin8s_gen::i#2 sin8s_gen::i#1 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
[ mulu8_sel::select#5 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#1 ]
[ mul8u::b#0 ]
Added variable main::sb#0 to zero page equivalence class [ main::sb#0 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable main::$11 to zero page equivalence class [ main::$11 ]
Added variable main::$4 to zero page equivalence class [ main::$4 ]
Added variable main::sw#0 to zero page equivalence class [ main::sw#0 ]
Added variable main::$5 to zero page equivalence class [ main::$5 ]
Added variable main::sd#0 to zero page equivalence class [ main::sd#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable div32u16u::return#2 to zero page equivalence class [ div32u16u::return#2 ]
Added variable sin16s_gen::step#0 to zero page equivalence class [ sin16s_gen::step#0 ]
Added variable sin16s::return#0 to zero page equivalence class [ sin16s::return#0 ]
Added variable sin16s_gen::$1 to zero page equivalence class [ sin16s_gen::$1 ]
Added variable sin16s::$4 to zero page equivalence class [ sin16s::$4 ]
Added variable sin16s::x1#0 to zero page equivalence class [ sin16s::x1#0 ]
Added variable mulu16_sel::return#0 to zero page equivalence class [ mulu16_sel::return#0 ]
Added variable sin16s::x2#0 to zero page equivalence class [ sin16s::x2#0 ]
Added variable mulu16_sel::return#1 to zero page equivalence class [ mulu16_sel::return#1 ]
Added variable sin16s::x3#0 to zero page equivalence class [ sin16s::x3#0 ]
Added variable mulu16_sel::return#2 to zero page equivalence class [ mulu16_sel::return#2 ]
Added variable sin16s::x3_6#0 to zero page equivalence class [ sin16s::x3_6#0 ]
Added variable sin16s::usinx#0 to zero page equivalence class [ sin16s::usinx#0 ]
Added variable mulu16_sel::return#10 to zero page equivalence class [ mulu16_sel::return#10 ]
Added variable sin16s::x4#0 to zero page equivalence class [ sin16s::x4#0 ]
Added variable mulu16_sel::return#11 to zero page equivalence class [ mulu16_sel::return#11 ]
Added variable sin16s::x5#0 to zero page equivalence class [ sin16s::x5#0 ]
Added variable sin16s::x5_128#0 to zero page equivalence class [ sin16s::x5_128#0 ]
Added variable sin16s::usinx#1 to zero page equivalence class [ sin16s::usinx#1 ]
Added variable mul16u::return#2 to zero page equivalence class [ mul16u::return#2 ]
Added variable mulu16_sel::$0 to zero page equivalence class [ mulu16_sel::$0 ]
Added variable mulu16_sel::$1 to zero page equivalence class [ mulu16_sel::$1 ]
Added variable mulu16_sel::return#12 to zero page equivalence class [ mulu16_sel::return#12 ]
Added variable mul16u::$1 to zero page equivalence class [ mul16u::$1 ]
Added variable divr16u::return#3 to zero page equivalence class [ divr16u::return#3 ]
Added variable div32u16u::quotient_hi#0 to zero page equivalence class [ div32u16u::quotient_hi#0 ]
Added variable divr16u::return#4 to zero page equivalence class [ divr16u::return#4 ]
Added variable div32u16u::quotient_lo#0 to zero page equivalence class [ div32u16u::quotient_lo#0 ]
Added variable div32u16u::return#0 to zero page equivalence class [ div32u16u::return#0 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Added variable rem16u#1 to zero page equivalence class [ rem16u#1 ]
Added variable div16u::return#2 to zero page equivalence class [ div16u::return#2 ]
Added variable sin8s_gen::step#0 to zero page equivalence class [ sin8s_gen::step#0 ]
Added variable sin8s::return#0 to zero page equivalence class [ sin8s::return#0 ]
Added variable sin8s_gen::$1 to zero page equivalence class [ sin8s_gen::$1 ]
Added variable sin8s::$4 to zero page equivalence class [ sin8s::$4 ]
Added variable sin8s::x1#0 to zero page equivalence class [ sin8s::x1#0 ]
Added variable mulu8_sel::return#0 to zero page equivalence class [ mulu8_sel::return#0 ]
Added variable sin8s::x2#0 to zero page equivalence class [ sin8s::x2#0 ]
Added variable mulu8_sel::return#1 to zero page equivalence class [ mulu8_sel::return#1 ]
Added variable sin8s::x3#0 to zero page equivalence class [ sin8s::x3#0 ]
Added variable mulu8_sel::return#2 to zero page equivalence class [ mulu8_sel::return#2 ]
Added variable sin8s::x3_6#0 to zero page equivalence class [ sin8s::x3_6#0 ]
Added variable sin8s::usinx#0 to zero page equivalence class [ sin8s::usinx#0 ]
Added variable mulu8_sel::return#10 to zero page equivalence class [ mulu8_sel::return#10 ]
Added variable sin8s::x4#0 to zero page equivalence class [ sin8s::x4#0 ]
Added variable mulu8_sel::return#11 to zero page equivalence class [ mulu8_sel::return#11 ]
Added variable sin8s::x5#0 to zero page equivalence class [ sin8s::x5#0 ]
Added variable sin8s::x5_128#0 to zero page equivalence class [ sin8s::x5_128#0 ]
Added variable mul8u::return#2 to zero page equivalence class [ mul8u::return#2 ]
Added variable mulu8_sel::$0 to zero page equivalence class [ mulu8_sel::$0 ]
Added variable mulu8_sel::$1 to zero page equivalence class [ mulu8_sel::$1 ]
Added variable mulu8_sel::return#12 to zero page equivalence class [ mulu8_sel::return#12 ]
Added variable mul8u::$1 to zero page equivalence class [ mul8u::$1 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to zero page equivalence class [ div16u::return#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ print_str::str#2 print_str::str#0 ]
[ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#28 print_char_cursor#42 print_char_cursor#19 print_char_cursor#10 print_char_cursor#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ sin16s_gen::x#2 sin16s_gen::x#1 ]
[ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
[ sin16s_gen::i#2 sin16s_gen::i#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
[ mulu16_sel::select#5 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#1 ]
[ mul16u::b#0 ]
[ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ sin8s_gen::x#2 sin8s_gen::x#1 ]
[ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
[ sin8s_gen::i#2 sin8s_gen::i#1 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
[ mulu8_sel::select#5 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#1 ]
[ mul8u::b#0 ]
[ main::sb#0 ]
[ main::$3 ]
[ main::$11 ]
[ main::$4 ]
[ main::sw#0 ]
[ main::$5 ]
[ main::sd#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ div32u16u::return#2 ]
[ sin16s_gen::step#0 ]
[ sin16s::return#0 ]
[ sin16s_gen::$1 ]
[ sin16s::$4 ]
[ sin16s::x1#0 ]
[ mulu16_sel::return#0 ]
[ sin16s::x2#0 ]
[ mulu16_sel::return#1 ]
[ sin16s::x3#0 ]
[ mulu16_sel::return#2 ]
[ sin16s::x3_6#0 ]
[ sin16s::usinx#0 ]
[ mulu16_sel::return#10 ]
[ sin16s::x4#0 ]
[ mulu16_sel::return#11 ]
[ sin16s::x5#0 ]
[ sin16s::x5_128#0 ]
[ sin16s::usinx#1 ]
[ mul16u::return#2 ]
[ mulu16_sel::$0 ]
[ mulu16_sel::$1 ]
[ mulu16_sel::return#12 ]
[ mul16u::$1 ]
[ divr16u::return#3 ]
[ div32u16u::quotient_hi#0 ]
[ divr16u::return#4 ]
[ div32u16u::quotient_lo#0 ]
[ div32u16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#1 ]
[ div16u::return#2 ]
[ sin8s_gen::step#0 ]
[ sin8s::return#0 ]
[ sin8s_gen::$1 ]
[ sin8s::$4 ]
[ sin8s::x1#0 ]
[ mulu8_sel::return#0 ]
[ sin8s::x2#0 ]
[ mulu8_sel::return#1 ]
[ sin8s::x3#0 ]
[ mulu8_sel::return#2 ]
[ sin8s::x3_6#0 ]
[ sin8s::usinx#0 ]
[ mulu8_sel::return#10 ]
[ sin8s::x4#0 ]
[ mulu8_sel::return#11 ]
[ sin8s::x5#0 ]
[ sin8s::x5_128#0 ]
[ mul8u::return#2 ]
[ mulu8_sel::$0 ]
[ mulu8_sel::$1 ]
[ mulu8_sel::return#12 ]
[ mul8u::$1 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:3 [ print_str::str#2 print_str::str#0 ]
Allocated zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Allocated zp ZP_BYTE:6 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
Allocated zp ZP_WORD:7 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#19 print_char_cursor#10 print_char_cursor#1 ]
Allocated zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_DWORD:11 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
Allocated zp ZP_WORD:15 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
Allocated zp ZP_WORD:17 [ sin16s_gen::i#2 sin16s_gen::i#1 ]
Allocated zp ZP_BYTE:19 [ sin16s::isUpper#2 ]
Allocated zp ZP_DWORD:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated zp ZP_WORD:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
Allocated zp ZP_WORD:26 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ]
Allocated zp ZP_WORD:28 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
Allocated zp ZP_BYTE:30 [ mulu16_sel::select#5 ]
Allocated zp ZP_WORD:31 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
Allocated zp ZP_DWORD:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp ZP_DWORD:37 [ mul16u::mb#2 mul16u::mb#1 ]
Allocated zp ZP_WORD:41 [ mul16u::b#0 ]
Allocated zp ZP_WORD:43 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp ZP_WORD:45 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
Allocated zp ZP_WORD:47 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:49 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_WORD:50 [ sin8s_gen::x#2 sin8s_gen::x#1 ]
Allocated zp ZP_WORD:52 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
Allocated zp ZP_WORD:54 [ sin8s_gen::i#2 sin8s_gen::i#1 ]
Allocated zp ZP_BYTE:56 [ sin8s::isUpper#10 ]
Allocated zp ZP_WORD:57 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
Allocated zp ZP_BYTE:59 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
Allocated zp ZP_BYTE:60 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
Allocated zp ZP_BYTE:61 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
Allocated zp ZP_BYTE:62 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
Allocated zp ZP_BYTE:63 [ mulu8_sel::select#5 ]
Allocated zp ZP_BYTE:64 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Allocated zp ZP_WORD:65 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp ZP_WORD:67 [ mul8u::mb#2 mul8u::mb#1 ]
Allocated zp ZP_BYTE:69 [ mul8u::b#0 ]
Allocated zp ZP_BYTE:70 [ main::sb#0 ]
Allocated zp ZP_WORD:71 [ main::$3 ]
Allocated zp ZP_WORD:73 [ main::$11 ]
Allocated zp ZP_WORD:75 [ main::$4 ]
Allocated zp ZP_WORD:77 [ main::sw#0 ]
Allocated zp ZP_BYTE:79 [ main::$5 ]
Allocated zp ZP_BYTE:80 [ main::sd#0 ]
Allocated zp ZP_BYTE:81 [ print_byte::$0 ]
Allocated zp ZP_BYTE:82 [ print_byte::$2 ]
Allocated zp ZP_DWORD:83 [ div32u16u::return#2 ]
Allocated zp ZP_DWORD:87 [ sin16s_gen::step#0 ]
Allocated zp ZP_WORD:91 [ sin16s::return#0 ]
Allocated zp ZP_WORD:93 [ sin16s_gen::$1 ]
Allocated zp ZP_DWORD:95 [ sin16s::$4 ]
Allocated zp ZP_WORD:99 [ sin16s::x1#0 ]
Allocated zp ZP_WORD:101 [ mulu16_sel::return#0 ]
Allocated zp ZP_WORD:103 [ sin16s::x2#0 ]
Allocated zp ZP_WORD:105 [ mulu16_sel::return#1 ]
Allocated zp ZP_WORD:107 [ sin16s::x3#0 ]
Allocated zp ZP_WORD:109 [ mulu16_sel::return#2 ]
Allocated zp ZP_WORD:111 [ sin16s::x3_6#0 ]
Allocated zp ZP_WORD:113 [ sin16s::usinx#0 ]
Allocated zp ZP_WORD:115 [ mulu16_sel::return#10 ]
Allocated zp ZP_WORD:117 [ sin16s::x4#0 ]
Allocated zp ZP_WORD:119 [ mulu16_sel::return#11 ]
Allocated zp ZP_WORD:121 [ sin16s::x5#0 ]
Allocated zp ZP_WORD:123 [ sin16s::x5_128#0 ]
Allocated zp ZP_WORD:125 [ sin16s::usinx#1 ]
Allocated zp ZP_DWORD:127 [ mul16u::return#2 ]
Allocated zp ZP_DWORD:131 [ mulu16_sel::$0 ]
Allocated zp ZP_DWORD:135 [ mulu16_sel::$1 ]
Allocated zp ZP_WORD:139 [ mulu16_sel::return#12 ]
Allocated zp ZP_BYTE:141 [ mul16u::$1 ]
Allocated zp ZP_WORD:142 [ divr16u::return#3 ]
Allocated zp ZP_WORD:144 [ div32u16u::quotient_hi#0 ]
Allocated zp ZP_WORD:146 [ divr16u::return#4 ]
Allocated zp ZP_WORD:148 [ div32u16u::quotient_lo#0 ]
Allocated zp ZP_DWORD:150 [ div32u16u::return#0 ]
Allocated zp ZP_BYTE:154 [ divr16u::$1 ]
Allocated zp ZP_BYTE:155 [ divr16u::$2 ]
Allocated zp ZP_WORD:156 [ rem16u#1 ]
Allocated zp ZP_WORD:158 [ div16u::return#2 ]
Allocated zp ZP_WORD:160 [ sin8s_gen::step#0 ]
Allocated zp ZP_BYTE:162 [ sin8s::return#0 ]
Allocated zp ZP_BYTE:163 [ sin8s_gen::$1 ]
Allocated zp ZP_WORD:164 [ sin8s::$4 ]
Allocated zp ZP_BYTE:166 [ sin8s::x1#0 ]
Allocated zp ZP_BYTE:167 [ mulu8_sel::return#0 ]
Allocated zp ZP_BYTE:168 [ sin8s::x2#0 ]
Allocated zp ZP_BYTE:169 [ mulu8_sel::return#1 ]
Allocated zp ZP_BYTE:170 [ sin8s::x3#0 ]
Allocated zp ZP_BYTE:171 [ mulu8_sel::return#2 ]
Allocated zp ZP_BYTE:172 [ sin8s::x3_6#0 ]
Allocated zp ZP_BYTE:173 [ sin8s::usinx#0 ]
Allocated zp ZP_BYTE:174 [ mulu8_sel::return#10 ]
Allocated zp ZP_BYTE:175 [ sin8s::x4#0 ]
Allocated zp ZP_BYTE:176 [ mulu8_sel::return#11 ]
Allocated zp ZP_BYTE:177 [ sin8s::x5#0 ]
Allocated zp ZP_BYTE:178 [ sin8s::x5_128#0 ]
Allocated zp ZP_WORD:179 [ mul8u::return#2 ]
Allocated zp ZP_WORD:181 [ mulu8_sel::$0 ]
Allocated zp ZP_WORD:183 [ mulu8_sel::$1 ]
Allocated zp ZP_BYTE:185 [ mulu8_sel::return#12 ]
Allocated zp ZP_BYTE:186 [ mul8u::$1 ]
Allocated zp ZP_WORD:187 [ divr16u::return#2 ]
Allocated zp ZP_WORD:189 [ div16u::return#0 ]

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_line_cursor = $400
  .label rem16u = $9c
  .label print_char_cursor = 7
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label wavelength = $c0
    .label _3 = $47
    .label _4 = $4b
    .label _5 = $4f
    .label _11 = $49
    .label sb = $46
    .label sw = $4d
    .label sd = $50
    .label i = 2
  //SEG11 [5] call sin8s_gen 
  //SEG12 [160] phi from main to sin8s_gen [phi:main->sin8s_gen]
  sin8s_gen_from_main:
    jsr sin8s_gen
  //SEG13 [6] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
    jmp b2
  //SEG14 main::@2
  b2:
  //SEG15 [7] call sin16s_gen 
  //SEG16 [58] phi from main::@2 to sin16s_gen [phi:main::@2->sin16s_gen]
  sin16s_gen_from_b2:
    jsr sin16s_gen
  //SEG17 [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG18 main::@3
  b3:
  //SEG19 [9] call print_cls 
  //SEG20 [52] phi from main::@3 to print_cls [phi:main::@3->print_cls]
  print_cls_from_b3:
    jsr print_cls
  //SEG21 [10] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG22 [10] phi (byte*) print_char_cursor#42 = (const byte*) print_line_cursor#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG23 [10] phi (byte) main::i#2 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG24 [10] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  b1_from_b5:
  //SEG25 [10] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#19 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG26 [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@1#1] -- register_copy 
    jmp b1
  //SEG27 main::@1
  b1:
  //SEG28 [11] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintabb#0 + (byte) main::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda sintabb,y
    sta sb
  //SEG29 [12] (word~) main::$3 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuz2 
    lda i
    sta _3
    lda #0
    sta _3+1
  //SEG30 [13] (word~) main::$11 ← (word~) main::$3 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda _3
    asl
    sta _11
    lda _3+1
    rol
    sta _11+1
  //SEG31 [14] (signed word*~) main::$4 ← (const signed word[$c0]) main::sintabw#0 + (word~) main::$11 -- pwsz1=pwsc1_plus_vwuz2 
    lda _11
    clc
    adc #<sintabw
    sta _4
    lda _11+1
    adc #>sintabw
    sta _4+1
  //SEG32 [15] (signed word) main::sw#0 ← *((signed word*~) main::$4) -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (_4),y
    sta sw
    iny
    lda (_4),y
    sta sw+1
  //SEG33 [16] (byte~) main::$5 ← > (signed word) main::sw#0 -- vbuz1=_hi_vwsz2 
    lda sw+1
    sta _5
  //SEG34 [17] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$5 -- vbsz1=vbsz2_minus_vbsz3 
    lda sb
    sec
    sbc _5
    sta sd
  //SEG35 [18] (signed byte) print_sbyte::b#1 ← (signed byte) main::sd#0 -- vbsz1=vbsz2 
    lda sd
    sta print_sbyte.b
  //SEG36 [19] call print_sbyte 
    jsr print_sbyte
  //SEG37 [20] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  b4_from_b1:
    jmp b4
  //SEG38 main::@4
  b4:
  //SEG39 [21] call print_str 
  //SEG40 [25] phi from main::@4 to print_str [phi:main::@4->print_str]
  print_str_from_b4:
    jsr print_str
    jmp b5
  //SEG41 main::@5
  b5:
  //SEG42 [22] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG43 [23] if((byte) main::i#1!=(byte) $c0) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c0
    cmp i
    bne b1_from_b5
    jmp breturn
  //SEG44 main::@return
  breturn:
  //SEG45 [24] return 
    rts
    str: .text "  @"
    sintabb: .fill $c0, 0
    sintabw: .fill 2*$c0, 0
}
//SEG46 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(3) str)
print_str: {
    .label str = 3
  //SEG47 [26] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  b1_from_print_str:
  //SEG48 [26] phi (byte*) print_char_cursor#19 = (byte*) print_char_cursor#10 [phi:print_str->print_str::@1#0] -- register_copy 
  //SEG49 [26] phi (byte*) print_str::str#2 = (const string) main::str [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<main.str
    sta str
    lda #>main.str
    sta str+1
    jmp b1
  //SEG50 print_str::@1
  b1:
  //SEG51 [27] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG52 print_str::@return
  breturn:
  //SEG53 [28] return 
    rts
  //SEG54 print_str::@2
  b2:
  //SEG55 [29] *((byte*) print_char_cursor#19) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG56 [30] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#19 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG57 [31] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG58 [26] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  b1_from_b2:
  //SEG59 [26] phi (byte*) print_char_cursor#19 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG60 [26] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}
//SEG61 print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage(5) b)
print_sbyte: {
    .label b = 5
  //SEG62 [32] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda b
    bmi b1_from_print_sbyte
  //SEG63 [33] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  b3_from_print_sbyte:
    jmp b3
  //SEG64 print_sbyte::@3
  b3:
  //SEG65 [34] call print_char 
  //SEG66 [41] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  print_char_from_b3:
  //SEG67 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#42 [phi:print_sbyte::@3->print_char#0] -- register_copy 
  //SEG68 [41] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
  //SEG69 [35] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG70 [35] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    jmp b2
  //SEG71 print_sbyte::@2
  b2:
  //SEG72 [36] call print_byte 
    jsr print_byte
    jmp breturn
  //SEG73 print_sbyte::@return
  breturn:
  //SEG74 [37] return 
    rts
  //SEG75 [38] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  b1_from_print_sbyte:
    jmp b1
  //SEG76 print_sbyte::@1
  b1:
  //SEG77 [39] call print_char 
  //SEG78 [41] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  print_char_from_b1:
  //SEG79 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#42 [phi:print_sbyte::@1->print_char#0] -- register_copy 
  //SEG80 [41] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG81 print_sbyte::@4
  b4:
  //SEG82 [40] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
    jmp b2_from_b4
}
//SEG83 print_char
// Print a single char
// print_char(byte zeropage(6) ch)
print_char: {
    .label ch = 6
  //SEG84 [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG85 [43] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#28 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG86 print_char::@return
  breturn:
  //SEG87 [44] return 
    rts
}
//SEG88 print_byte
// Print a byte as HEX
print_byte: {
    .label _0 = $51
    .label _2 = $52
  //SEG89 [45] (byte~) print_byte::$0 ← (byte)(signed byte) print_sbyte::b#4 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda print_sbyte.b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG90 [46] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG91 [47] call print_char 
  //SEG92 [41] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG93 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#10 [phi:print_byte->print_char#0] -- register_copy 
  //SEG94 [41] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG95 print_byte::@1
  b1:
  //SEG96 [48] (byte~) print_byte::$2 ← (byte)(signed byte) print_sbyte::b#4 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and print_sbyte.b
    sta _2
  //SEG97 [49] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG98 [50] call print_char 
  //SEG99 [41] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG100 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG101 [41] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG102 print_byte::@return
  breturn:
  //SEG103 [51] return 
    rts
}
//SEG104 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 9
  //SEG105 [53] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG106 [53] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
    jmp b1
  //SEG107 [53] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG108 [53] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG109 print_cls::@1
  b1:
  //SEG110 [54] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG111 [55] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG112 [56] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1_from_b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG113 print_cls::@return
  breturn:
  //SEG114 [57] return 
    rts
}
//SEG115 sin16s_gen
// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen(signed word* zeropage($f) sintab)
sin16s_gen: {
    .label _1 = $5d
    .label step = $57
    .label sintab = $f
    .label x = $b
    .label i = $11
  //SEG116 [59] call div32u16u 
  //SEG117 [132] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
  div32u16u_from_sin16s_gen:
    jsr div32u16u
  //SEG118 [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 -- vduz1=vduz2 
    lda div32u16u.return
    sta div32u16u.return_2
    lda div32u16u.return+1
    sta div32u16u.return_2+1
    lda div32u16u.return+2
    sta div32u16u.return_2+2
    lda div32u16u.return+3
    sta div32u16u.return_2+3
    jmp b2
  //SEG119 sin16s_gen::@2
  b2:
  //SEG120 [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2 -- vduz1=vduz2 
    lda div32u16u.return_2
    sta step
    lda div32u16u.return_2+1
    sta step+1
    lda div32u16u.return_2+2
    sta step+2
    lda div32u16u.return_2+3
    sta step+3
  //SEG121 [62] phi from sin16s_gen::@2 to sin16s_gen::@1 [phi:sin16s_gen::@2->sin16s_gen::@1]
  b1_from_b2:
  //SEG122 [62] phi (word) sin16s_gen::i#2 = (byte) 0 [phi:sin16s_gen::@2->sin16s_gen::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG123 [62] phi (signed word*) sin16s_gen::sintab#2 = (const signed word[$c0]) main::sintabw#0 [phi:sin16s_gen::@2->sin16s_gen::@1#1] -- pwsz1=pwsc1 
    lda #<main.sintabw
    sta sintab
    lda #>main.sintabw
    sta sintab+1
  //SEG124 [62] phi (dword) sin16s_gen::x#2 = (byte) 0 [phi:sin16s_gen::@2->sin16s_gen::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    sta x+2
    sta x+3
    jmp b1
  // u[4.28]
  //SEG125 [62] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
  b1_from_b3:
  //SEG126 [62] phi (word) sin16s_gen::i#2 = (word) sin16s_gen::i#1 [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- register_copy 
  //SEG127 [62] phi (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- register_copy 
  //SEG128 [62] phi (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#1 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- register_copy 
    jmp b1
  //SEG129 sin16s_gen::@1
  b1:
  //SEG130 [63] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
  //SEG131 [64] call sin16s 
    jsr sin16s
  //SEG132 [65] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 -- vwsz1=vwsz2 
    lda sin16s.return_1
    sta sin16s.return
    lda sin16s.return_1+1
    sta sin16s.return+1
    jmp b3
  //SEG133 sin16s_gen::@3
  b3:
  //SEG134 [66] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0 -- vwsz1=vwsz2 
    lda sin16s.return
    sta _1
    lda sin16s.return+1
    sta _1+1
  //SEG135 [67] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _1
    sta (sintab),y
    iny
    lda _1+1
    sta (sintab),y
  //SEG136 [68] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc sintab
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG137 [69] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG138 [70] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG139 [71] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1_from_b3
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1_from_b3
  !:
    jmp breturn
  //SEG140 sin16s_gen::@return
  breturn:
  //SEG141 [72] return 
    rts
}
//SEG142 sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($14) x)
sin16s: {
    .label _4 = $5f
    .label x = $14
    .label return = $5b
    .label x1 = $63
    .label x2 = $67
    .label x3 = $6b
    .label x3_6 = $6f
    .label usinx = $71
    .label x4 = $75
    .label x5 = $79
    .label x5_128 = $7b
    .label usinx_1 = $7d
    .label return_1 = $18
    .label sinx = $18
    .label isUpper = $13
    .label return_5 = $18
  //SEG143 [73] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b1_from_sin16s
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b1_from_sin16s
  !:
    jmp b4
  //SEG144 sin16s::@4
  b4:
  //SEG145 [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
  //SEG146 [75] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  b1_from_b4:
  //SEG147 [75] phi (byte) sin16s::isUpper#2 = (byte) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG148 [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG149 [75] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b1_from_sin16s:
  //SEG150 [75] phi (byte) sin16s::isUpper#2 = (byte) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG151 [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG152 sin16s::@1
  b1:
  //SEG153 [76] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2_from_b1
  !:
    jmp b5
  //SEG154 sin16s::@5
  b5:
  //SEG155 [77] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
  //SEG156 [78] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG157 [78] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp b2
  //SEG158 sin16s::@2
  b2:
  //SEG159 [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 -- vduz1=vduz2_rol_3 
    lda x
    sta _4
    lda x+1
    sta _4+1
    lda x+2
    sta _4+2
    lda x+3
    sta _4+3
    ldy #3
  !:
    asl _4
    rol _4+1
    rol _4+2
    rol _4+3
    dey
    bne !-
  //SEG160 [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 -- vwuz1=_hi_vduz2 
    lda _4+2
    sta x1
    lda _4+3
    sta x1+1
  //SEG161 [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG162 [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG163 [83] call mulu16_sel 
  //SEG164 [113] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from_b2:
  //SEG165 [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG166 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
  //SEG167 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG168 [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return+1
    jmp b7
  //SEG169 sin16s::@7
  b7:
  //SEG170 [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta x2
    lda mulu16_sel.return+1
    sta x2+1
  //SEG171 [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 -- vwuz1=vwuz2 
    lda x2
    sta mulu16_sel.v1
    lda x2+1
    sta mulu16_sel.v1+1
  //SEG172 [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG173 [88] call mulu16_sel 
  //SEG174 [113] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
  mulu16_sel_from_b7:
  //SEG175 [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu16_sel.select
  //SEG176 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
  //SEG177 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG178 [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_1
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_1+1
    jmp b8
  //SEG179 sin16s::@8
  b8:
  //SEG180 [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 -- vwuz1=vwuz2 
    lda mulu16_sel.return_1
    sta x3
    lda mulu16_sel.return_1+1
    sta x3+1
  //SEG181 [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 -- vwuz1=vwuz2 
    lda x3
    sta mulu16_sel.v1
    lda x3+1
    sta mulu16_sel.v1+1
  //SEG182 [92] call mulu16_sel 
  //SEG183 [113] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from_b8:
  //SEG184 [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu16_sel.select
  //SEG185 [113] phi (word) mulu16_sel::v2#5 = (word)(number) $10000/(number) 6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG186 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG187 [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_2
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_2+1
    jmp b9
  //SEG188 sin16s::@9
  b9:
  //SEG189 [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 -- vwuz1=vwuz2 
    lda mulu16_sel.return_2
    sta x3_6
    lda mulu16_sel.return_2+1
    sta x3_6+1
  //SEG190 [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG191 [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 -- vwuz1=vwuz2 
    lda x3
    sta mulu16_sel.v1
    lda x3+1
    sta mulu16_sel.v1+1
  //SEG192 [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG193 [98] call mulu16_sel 
  //SEG194 [113] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from_b9:
  //SEG195 [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG196 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
  //SEG197 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG198 [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_10
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_10+1
    jmp b10
  //SEG199 sin16s::@10
  b10:
  //SEG200 [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 -- vwuz1=vwuz2 
    lda mulu16_sel.return_10
    sta x4
    lda mulu16_sel.return_10+1
    sta x4+1
  //SEG201 [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 -- vwuz1=vwuz2 
    lda x4
    sta mulu16_sel.v1
    lda x4+1
    sta mulu16_sel.v1+1
  //SEG202 [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG203 [103] call mulu16_sel 
  //SEG204 [113] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from_b10:
  //SEG205 [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG206 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
  //SEG207 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG208 [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_11
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_11+1
    jmp b11
  //SEG209 sin16s::@11
  b11:
  //SEG210 [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 -- vwuz1=vwuz2 
    lda mulu16_sel.return_11
    sta x5
    lda mulu16_sel.return_11+1
    sta x5+1
  //SEG211 [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 -- vwuz1=vwuz2_ror_4 
    lda x5+1
    sta x5_128+1
    lda x5
    sta x5_128
    ldy #4
  !:
    lsr x5_128+1
    ror x5_128
    dey
    bne !-
  //SEG212 [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda usinx
    clc
    adc x5_128
    sta usinx_1
    lda usinx+1
    adc x5_128+1
    sta usinx_1+1
  //SEG213 [108] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b12
    jmp b6
  //SEG214 sin16s::@6
  b6:
  //SEG215 [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz2 
    sec
    lda usinx_1
    eor #$ff
    adc #0
    sta sinx
    lda usinx_1+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG216 [110] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
  b3_from_b12:
  b3_from_b6:
  //SEG217 [110] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp b3
  //SEG218 sin16s::@3
  b3:
    jmp breturn
  //SEG219 sin16s::@return
  breturn:
  //SEG220 [111] return 
    rts
  //SEG221 sin16s::@12
  b12:
  //SEG222 [112] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 -- vwsz1=vwsz2 
    lda usinx_1
    sta return_5
    lda usinx_1+1
    sta return_5+1
    jmp b3_from_b12
}
//SEG223 mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($1a) v1, word zeropage($1c) v2, byte zeropage($1e) select)
mulu16_sel: {
    .label _0 = $83
    .label _1 = $87
    .label v1 = $1a
    .label v2 = $1c
    .label return = $65
    .label return_1 = $69
    .label return_2 = $6d
    .label return_10 = $73
    .label return_11 = $77
    .label select = $1e
    .label return_12 = $8b
  //SEG224 [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
  //SEG225 [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5 -- vwuz1=vwuz2 
    lda v2
    sta mul16u.b
    lda v2+1
    sta mul16u.b+1
  //SEG226 [116] call mul16u 
  //SEG227 [122] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
  mul16u_from_mulu16_sel:
    jsr mul16u
  //SEG228 [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2 -- vduz1=vduz2 
    lda mul16u.res
    sta mul16u.return
    lda mul16u.res+1
    sta mul16u.return+1
    lda mul16u.res+2
    sta mul16u.return+2
    lda mul16u.res+3
    sta mul16u.return+3
    jmp b1
  //SEG229 mulu16_sel::@1
  b1:
  //SEG230 [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2 -- vduz1=vduz2 
    lda mul16u.return
    sta _0
    lda mul16u.return+1
    sta _0+1
    lda mul16u.return+2
    sta _0+2
    lda mul16u.return+3
    sta _0+3
  //SEG231 [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz2_rol_vbuz3 
    lda _0
    sta _1
    lda _0+1
    sta _1+1
    lda _0+2
    sta _1+2
    lda _0+3
    sta _1+3
    ldx select
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
  //SEG232 [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return_12
    lda _1+3
    sta return_12+1
    jmp breturn
  //SEG233 mulu16_sel::@return
  breturn:
  //SEG234 [121] return 
    rts
}
//SEG235 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($1f) a, word zeropage($29) b)
mul16u: {
    .label _1 = $8d
    .label a = $1f
    .label mb = $25
    .label res = $21
    .label b = $29
    .label return = $7f
  //SEG236 [123] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  b1_from_mul16u:
  //SEG237 [123] phi (dword) mul16u::mb#2 = (word) mul16u::b#0 [phi:mul16u->mul16u::@1#0] -- vduz1=vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG238 [123] phi (dword) mul16u::res#2 = (byte) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
    sta res+2
    sta res+3
  //SEG239 [123] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp b1
  //SEG240 mul16u::@1
  b1:
  //SEG241 [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    jmp breturn
  //SEG242 mul16u::@return
  breturn:
  //SEG243 [125] return 
    rts
  //SEG244 mul16u::@2
  b2:
  //SEG245 [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 -- vbuz1=vwuz2_band_vbuc1 
    lda a
    and #1
    sta _1
  //SEG246 [127] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b3_from_b2
    jmp b4
  //SEG247 mul16u::@4
  b4:
  //SEG248 [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG249 [129] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG250 [129] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp b3
  //SEG251 mul16u::@3
  b3:
  //SEG252 [130] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr a+1
    ror a
  //SEG253 [131] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG254 [123] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  b1_from_b3:
  //SEG255 [123] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
  //SEG256 [123] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
  //SEG257 [123] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG258 div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $90
    .label quotient_lo = $94
    .label return = $96
    .label return_2 = $53
  //SEG259 [133] call divr16u 
  //SEG260 [142] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
  //SEG261 [142] phi (word) divr16u::dividend#6 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
  //SEG262 [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    lda #0
    sta divr16u.rem+1
    jsr divr16u
  //SEG263 [134] (word) divr16u::return#3 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_3
    lda divr16u.return+1
    sta divr16u.return_3+1
    jmp b1
  //SEG264 div32u16u::@1
  b1:
  //SEG265 [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda divr16u.return_3
    sta quotient_hi
    lda divr16u.return_3+1
    sta quotient_hi+1
  //SEG266 [136] (word) divr16u::rem#5 ← (word) rem16u#1 -- vwuz1=vwuz2 
    lda rem16u
    sta divr16u.rem
    lda rem16u+1
    sta divr16u.rem+1
  //SEG267 [137] call divr16u 
  //SEG268 [142] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  divr16u_from_b1:
  //SEG269 [142] phi (word) divr16u::dividend#6 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
  //SEG270 [142] phi (word) divr16u::rem#11 = (word) divr16u::rem#5 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG271 [138] (word) divr16u::return#4 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_4
    lda divr16u.return+1
    sta divr16u.return_4+1
    jmp b2
  //SEG272 div32u16u::@2
  b2:
  //SEG273 [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4 -- vwuz1=vwuz2 
    lda divr16u.return_4
    sta quotient_lo
    lda divr16u.return_4+1
    sta quotient_lo+1
  //SEG274 [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
    jmp breturn
  //SEG275 div32u16u::@return
  breturn:
  //SEG276 [141] return 
    rts
}
//SEG277 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($2d) dividend, word zeropage($2b) rem)
divr16u: {
    .label _1 = $9a
    .label _2 = $9b
    .label rem = $2b
    .label dividend = $2d
    .label quotient = $2f
    .label i = $31
    .label return = $2f
    .label return_2 = $bb
    .label return_3 = $8e
    .label return_4 = $92
  //SEG278 [143] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG279 [143] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG280 [143] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG281 [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#6 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG282 [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#11 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG283 [143] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG284 [143] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG285 [143] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG286 [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG287 [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG288 divr16u::@1
  b1:
  //SEG289 [144] (word) divr16u::rem#0 ← (word) divr16u::rem#6 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG290 [145] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4 -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
  //SEG291 [146] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
  //SEG292 [147] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda _2
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG293 divr16u::@4
  b4:
  //SEG294 [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG295 [149] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG296 [149] phi (word) divr16u::rem#7 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG297 divr16u::@2
  b2:
  //SEG298 [150] (word) divr16u::dividend#0 ← (word) divr16u::dividend#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG299 [151] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG300 [152] if((word) divr16u::rem#7<(const word) main::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.wavelength
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<main.wavelength
    bcc b3_from_b2
  !:
    jmp b5
  //SEG301 divr16u::@5
  b5:
  //SEG302 [153] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG303 [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.wavelength
    sta rem
    lda rem+1
    sbc #>main.wavelength
    sta rem+1
  //SEG304 [155] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG305 [155] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG306 [155] phi (word) divr16u::rem#10 = (word) divr16u::rem#7 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG307 divr16u::@3
  b3:
  //SEG308 [156] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG309 [157] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp i
    bne b1_from_b3
    jmp b6
  //SEG310 divr16u::@6
  b6:
  //SEG311 [158] (word) rem16u#1 ← (word) divr16u::rem#10 -- vwuz1=vwuz2 
    lda rem
    sta rem16u
    lda rem+1
    sta rem16u+1
    jmp breturn
  //SEG312 divr16u::@return
  breturn:
  //SEG313 [159] return 
    rts
}
//SEG314 sin8s_gen
// Generate signed byte sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin8s_gen(signed byte* zeropage($34) sintab)
sin8s_gen: {
    .label _1 = $a3
    .label step = $a0
    .label sintab = $34
    .label x = $32
    .label i = $36
  //SEG315 [161] call div16u 
  //SEG316 [237] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
  div16u_from_sin8s_gen:
    jsr div16u
  //SEG317 [162] (word) div16u::return#2 ← (word) div16u::return#0 -- vwuz1=vwuz2 
    lda div16u.return
    sta div16u.return_2
    lda div16u.return+1
    sta div16u.return_2+1
    jmp b2
  //SEG318 sin8s_gen::@2
  b2:
  //SEG319 [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2 -- vwuz1=vwuz2 
    lda div16u.return_2
    sta step
    lda div16u.return_2+1
    sta step+1
  //SEG320 [164] phi from sin8s_gen::@2 to sin8s_gen::@1 [phi:sin8s_gen::@2->sin8s_gen::@1]
  b1_from_b2:
  //SEG321 [164] phi (word) sin8s_gen::i#2 = (byte) 0 [phi:sin8s_gen::@2->sin8s_gen::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG322 [164] phi (signed byte*) sin8s_gen::sintab#2 = (const signed byte[$c0]) main::sintabb#0 [phi:sin8s_gen::@2->sin8s_gen::@1#1] -- pbsz1=pbsc1 
    lda #<main.sintabb
    sta sintab
    lda #>main.sintabb
    sta sintab+1
  //SEG323 [164] phi (word) sin8s_gen::x#2 = (byte) 0 [phi:sin8s_gen::@2->sin8s_gen::@1#2] -- vwuz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    jmp b1
  // u[4.12]
  //SEG324 [164] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
  b1_from_b3:
  //SEG325 [164] phi (word) sin8s_gen::i#2 = (word) sin8s_gen::i#1 [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- register_copy 
  //SEG326 [164] phi (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- register_copy 
  //SEG327 [164] phi (word) sin8s_gen::x#2 = (word) sin8s_gen::x#1 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- register_copy 
    jmp b1
  //SEG328 sin8s_gen::@1
  b1:
  //SEG329 [165] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda x
    sta sin8s.x
    lda x+1
    sta sin8s.x+1
  //SEG330 [166] call sin8s 
    jsr sin8s
  //SEG331 [167] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1 -- vbsz1=vbsz2 
    lda sin8s.return_1
    sta sin8s.return
    jmp b3
  //SEG332 sin8s_gen::@3
  b3:
  //SEG333 [168] (signed byte~) sin8s_gen::$1 ← (signed byte) sin8s::return#0 -- vbsz1=vbsz2 
    lda sin8s.return
    sta _1
  //SEG334 [169] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$1 -- _deref_pbsz1=vbsz2 
    lda _1
    ldy #0
    sta (sintab),y
  //SEG335 [170] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc sintab
    bne !+
    inc sintab+1
  !:
  //SEG336 [171] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
  //SEG337 [172] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG338 [173] if((word) sin8s_gen::i#1<(const word) main::wavelength#0) goto sin8s_gen::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1_from_b3
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1_from_b3
  !:
    jmp breturn
  //SEG339 sin8s_gen::@return
  breturn:
  //SEG340 [174] return 
    rts
}
//SEG341 sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage($39) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label _4 = $a4
    .label x = $39
    .label return = $a2
    .label x1 = $a6
    .label x2 = $a8
    .label x3 = $aa
    .label x3_6 = $ac
    .label usinx = $ad
    .label x4 = $af
    .label x5 = $b1
    .label x5_128 = $b2
    .label usinx_1 = $3b
    .label usinx_2 = $3b
    .label return_1 = $3c
    .label sinx = $3c
    .label usinx_4 = $3b
    .label isUpper = $38
    .label return_5 = $3c
  //SEG342 [175] if((word) sin8s::x#0<(const word) PI_u4f12#0) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b1_from_sin8s
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b1_from_sin8s
  !:
    jmp b5
  //SEG343 sin8s::@5
  b5:
  //SEG344 [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG345 [177] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  b1_from_b5:
  //SEG346 [177] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG347 [177] phi (word) sin8s::x#4 = (word) sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG348 [177] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b1_from_sin8s:
  //SEG349 [177] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG350 [177] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG351 sin8s::@1
  b1:
  //SEG352 [178] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2_from_b1
  !:
    jmp b6
  //SEG353 sin8s::@6
  b6:
  //SEG354 [179] (word) sin8s::x#2 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG355 [180] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  b2_from_b1:
  b2_from_b6:
  //SEG356 [180] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp b2
  //SEG357 sin8s::@2
  b2:
  //SEG358 [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda x
    asl
    sta _4
    lda x+1
    rol
    sta _4+1
    asl _4
    rol _4+1
    asl _4
    rol _4+1
  //SEG359 [182] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda _4+1
    sta x1
  //SEG360 [183] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v1
  //SEG361 [184] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG362 [185] call mulu8_sel 
  //SEG363 [218] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from_b2:
  //SEG364 [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG365 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
  //SEG366 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG367 [186] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return
    jmp b9
  //SEG368 sin8s::@9
  b9:
  //SEG369 [187] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0 -- vbuz1=vbuz2 
    lda mulu8_sel.return
    sta x2
  //SEG370 [188] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuz1=vbuz2 
    lda x2
    sta mulu8_sel.v1
  //SEG371 [189] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG372 [190] call mulu8_sel 
  //SEG373 [218] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from_b9:
  //SEG374 [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG375 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
  //SEG376 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG377 [191] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_1
    jmp b10
  //SEG378 sin8s::@10
  b10:
  //SEG379 [192] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuz2 
    lda mulu8_sel.return_1
    sta x3
  //SEG380 [193] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda x3
    sta mulu8_sel.v1
  //SEG381 [194] call mulu8_sel 
  //SEG382 [218] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from_b10:
  //SEG383 [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG384 [218] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6#0 [phi:sin8s::@10->mulu8_sel#1] -- vbuz1=vbuc1 
    lda #DIV_6
    sta mulu8_sel.v2
  //SEG385 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG386 [195] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_2
    jmp b11
  //SEG387 sin8s::@11
  b11:
  //SEG388 [196] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2 -- vbuz1=vbuz2 
    lda mulu8_sel.return_2
    sta x3_6
  //SEG389 [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
  //SEG390 [198] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda x3
    sta mulu8_sel.v1
  //SEG391 [199] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG392 [200] call mulu8_sel 
  //SEG393 [218] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from_b11:
  //SEG394 [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG395 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
  //SEG396 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG397 [201] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_10
    jmp b12
  //SEG398 sin8s::@12
  b12:
  //SEG399 [202] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10 -- vbuz1=vbuz2 
    lda mulu8_sel.return_10
    sta x4
  //SEG400 [203] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuz1=vbuz2 
    lda x4
    sta mulu8_sel.v1
  //SEG401 [204] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG402 [205] call mulu8_sel 
  //SEG403 [218] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from_b12:
  //SEG404 [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG405 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
  //SEG406 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG407 [206] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_11
    jmp b13
  //SEG408 sin8s::@13
  b13:
  //SEG409 [207] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11 -- vbuz1=vbuz2 
    lda mulu8_sel.return_11
    sta x5
  //SEG410 [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda x5
    lsr
    lsr
    lsr
    lsr
    sta x5_128
  //SEG411 [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda usinx
    clc
    adc x5_128
    sta usinx_1
  //SEG412 [210] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda usinx_1
    cmp #$80
    bcc b3_from_b13
    jmp b7
  //SEG413 sin8s::@7
  b7:
  //SEG414 [211] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuz1=_dec_vbuz1 
    dec usinx_2
  //SEG415 [212] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  b3_from_b13:
  b3_from_b7:
  //SEG416 [212] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp b3
  //SEG417 sin8s::@3
  b3:
  //SEG418 [213] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b14
    jmp b8
  //SEG419 sin8s::@8
  b8:
  //SEG420 [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsz1=_neg_vbsz2 
    lda usinx_4
    eor #$ff
    clc
    adc #1
    sta sinx
  //SEG421 [215] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  b4_from_b14:
  b4_from_b8:
  //SEG422 [215] phi (signed byte) sin8s::return#1 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp b4
  //SEG423 sin8s::@4
  b4:
    jmp breturn
  //SEG424 sin8s::@return
  breturn:
  //SEG425 [216] return 
    rts
  //SEG426 sin8s::@14
  b14:
  //SEG427 [217] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsz1=vbsz2 
    lda usinx_4
    sta return_5
    jmp b4_from_b14
}
//SEG428 mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte zeropage($3d) v1, byte zeropage($3e) v2, byte zeropage($3f) select)
mulu8_sel: {
    .label _0 = $b5
    .label _1 = $b7
    .label v1 = $3d
    .label v2 = $3e
    .label return = $a7
    .label return_1 = $a9
    .label return_2 = $ab
    .label return_10 = $ae
    .label return_11 = $b0
    .label select = $3f
    .label return_12 = $b9
  //SEG429 [219] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5 -- vbuz1=vbuz2 
    lda v1
    sta mul8u.a
  //SEG430 [220] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5 -- vbuz1=vbuz2 
    lda v2
    sta mul8u.b
  //SEG431 [221] call mul8u 
  //SEG432 [227] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
    jsr mul8u
  //SEG433 [222] (word) mul8u::return#2 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda mul8u.res
    sta mul8u.return
    lda mul8u.res+1
    sta mul8u.return+1
    jmp b1
  //SEG434 mulu8_sel::@1
  b1:
  //SEG435 [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2 -- vwuz1=vwuz2 
    lda mul8u.return
    sta _0
    lda mul8u.return+1
    sta _0+1
  //SEG436 [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz2_rol_vbuz3 
    lda _0
    sta _1
    lda _0+1
    sta _1+1
    ldy select
    beq !e+
  !:
    asl _1
    rol _1+1
    dey
    bne !-
  !e:
  //SEG437 [225] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuz1=_hi_vwuz2 
    lda _1+1
    sta return_12
    jmp breturn
  //SEG438 mulu8_sel::@return
  breturn:
  //SEG439 [226] return 
    rts
}
//SEG440 mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte zeropage($40) a, byte zeropage($45) b)
mul8u: {
    .label _1 = $ba
    .label a = $40
    .label mb = $43
    .label res = $41
    .label b = $45
    .label return = $b3
  //SEG441 [228] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  b1_from_mul8u:
  //SEG442 [228] phi (word) mul8u::mb#2 = (byte) mul8u::b#0 [phi:mul8u->mul8u::@1#0] -- vwuz1=vbuz2 
    lda b
    sta mb
    lda #0
    sta mb+1
  //SEG443 [228] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
  //SEG444 [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp b1
  //SEG445 mul8u::@1
  b1:
  //SEG446 [229] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuz1_neq_0_then_la1 
    lda a
    cmp #0
    bne b2
    jmp breturn
  //SEG447 mul8u::@return
  breturn:
  //SEG448 [230] return 
    rts
  //SEG449 mul8u::@2
  b2:
  //SEG450 [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and a
    sta _1
  //SEG451 [232] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b3_from_b2
    jmp b4
  //SEG452 mul8u::@4
  b4:
  //SEG453 [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG454 [234] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG455 [234] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp b3
  //SEG456 mul8u::@3
  b3:
  //SEG457 [235] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr a
  //SEG458 [236] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG459 [228] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  b1_from_b3:
  //SEG460 [228] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
  //SEG461 [228] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
  //SEG462 [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG463 div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $bd
    .label return_2 = $9e
  //SEG464 [238] call divr16u 
  //SEG465 [142] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
  //SEG466 [142] phi (word) divr16u::dividend#6 = (const word) PI2_u4f12#0 [phi:div16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta divr16u.dividend
    lda #>PI2_u4f12
    sta divr16u.dividend+1
  //SEG467 [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    lda #0
    sta divr16u.rem+1
    jsr divr16u
  //SEG468 [239] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_2
    lda divr16u.return+1
    sta divr16u.return_2+1
    jmp b1
  //SEG469 div16u::@1
  b1:
  //SEG470 [240] (word) div16u::return#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return_2
    sta return
    lda divr16u.return_2+1
    sta return+1
    jmp breturn
  //SEG471 div16u::@return
  breturn:
  //SEG472 [241] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [12] (word~) main::$3 ← (word)(byte) main::i#2 [ main::i#2 print_char_cursor#42 main::sb#0 main::$3 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sb#0 main::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:70 [ main::sb#0 ]
Statement [13] (word~) main::$11 ← (word~) main::$3 << (byte) 1 [ main::i#2 print_char_cursor#42 main::sb#0 main::$11 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sb#0 main::$11 ] ) always clobbers reg byte a 
Statement [14] (signed word*~) main::$4 ← (const signed word[$c0]) main::sintabw#0 + (word~) main::$11 [ main::i#2 print_char_cursor#42 main::sb#0 main::$4 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sb#0 main::$4 ] ) always clobbers reg byte a 
Statement [15] (signed word) main::sw#0 ← *((signed word*~) main::$4) [ main::i#2 print_char_cursor#42 main::sb#0 main::sw#0 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sb#0 main::sw#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:70 [ main::sb#0 ]
Statement [16] (byte~) main::$5 ← > (signed word) main::sw#0 [ main::i#2 print_char_cursor#42 main::sb#0 main::$5 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sb#0 main::$5 ] ) always clobbers reg byte a 
Statement [17] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$5 [ main::i#2 print_char_cursor#42 main::sd#0 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sd#0 ] ) always clobbers reg byte a 
Statement [27] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#19 print_str::str#2 ] ( main:2::print_str:21 [ main::i#2 print_char_cursor#19 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [29] *((byte*) print_char_cursor#19) ← *((byte*) print_str::str#2) [ print_char_cursor#19 print_str::str#2 ] ( main:2::print_str:21 [ main::i#2 print_char_cursor#19 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [40] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 [ print_char_cursor#10 print_sbyte::b#0 ] ( main:2::print_sbyte:19 [ main::i#2 print_char_cursor#10 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#4 [ print_char_cursor#28 ] ( main:2::print_sbyte:19::print_char:34 [ main::i#2 print_sbyte::b#1 print_char_cursor#28 ] main:2::print_sbyte:19::print_char:39 [ main::i#2 print_sbyte::b#1 print_char_cursor#28 ] main:2::print_sbyte:19::print_byte:36::print_char:47 [ main::i#2 print_sbyte::b#4 print_char_cursor#28 ] main:2::print_sbyte:19::print_byte:36::print_char:50 [ main::i#2 print_char_cursor#28 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Statement [45] (byte~) print_byte::$0 ← (byte)(signed byte) print_sbyte::b#4 >> (byte) 4 [ print_char_cursor#10 print_sbyte::b#4 print_byte::$0 ] ( main:2::print_sbyte:19::print_byte:36 [ main::i#2 print_char_cursor#10 print_sbyte::b#4 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Statement [48] (byte~) print_byte::$2 ← (byte)(signed byte) print_sbyte::b#4 & (byte) $f [ print_char_cursor#10 print_byte::$2 ] ( main:2::print_sbyte:19::print_byte:36 [ main::i#2 print_char_cursor#10 print_byte::$2 ] ) always clobbers reg byte a 
Statement [54] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:9 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [56] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:9 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 [ div32u16u::return#2 ] ( main:2::sin16s_gen:7 [ div32u16u::return#2 ] ) always clobbers reg byte a 
Statement [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2 [ sin16s_gen::step#0 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 ] ) always clobbers reg byte a 
Statement [63] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [65] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#0 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#0 ] ) always clobbers reg byte a 
Statement [66] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s_gen::$1 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s_gen::$1 ] ) always clobbers reg byte a 
Statement [67] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [68] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::i#2 sin16s_gen::sintab#0 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::i#2 sin16s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [69] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [71] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1 [ sin16s_gen::step#0 sin16s_gen::x#1 sin16s_gen::sintab#0 sin16s_gen::i#1 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#1 sin16s_gen::sintab#0 sin16s_gen::i#1 ] ) always clobbers reg byte a 
Statement [73] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 [ sin16s::x#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 [ sin16s::x#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#1 ] ) always clobbers reg byte a 
Statement [76] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#4 sin16s::isUpper#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ sin16s::isUpper#2 ]
Statement [77] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x#2 ] ) always clobbers reg byte a 
Statement [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 [ sin16s::isUpper#2 sin16s::$4 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::$4 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:19 [ sin16s::isUpper#2 ]
Statement [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ) always clobbers reg byte a 
Statement [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ) always clobbers reg byte a 
Statement [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ) always clobbers reg byte a 
Statement [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ) always clobbers reg byte a 
Statement [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ) always clobbers reg byte a 
Statement [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ) always clobbers reg byte a 
Statement [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ) always clobbers reg byte a 
Statement [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ) always clobbers reg byte a 
Statement [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ) always clobbers reg byte a 
Statement [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ) always clobbers reg byte a 
Statement [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ) always clobbers reg byte a 
Statement [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ) always clobbers reg byte a 
Statement [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ) always clobbers reg byte a 
Statement [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ) always clobbers reg byte a 
Statement [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ) always clobbers reg byte a 
Statement [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ) always clobbers reg byte a 
Statement [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ) always clobbers reg byte a 
Statement [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ) always clobbers reg byte a 
Statement [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ) always clobbers reg byte a 
Statement [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ) always clobbers reg byte a reg byte y 
Statement [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#1 ] ) always clobbers reg byte a 
Statement [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 [ sin16s::sinx#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::sinx#1 ] ) always clobbers reg byte a 
Statement [112] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 [ sin16s::return#5 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#5 ] ) always clobbers reg byte a 
Statement [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5 [ mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:30 [ mulu16_sel::select#5 ]
Statement [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5 [ mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] ) always clobbers reg byte a 
Statement [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#2 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] ) always clobbers reg byte a 
Statement [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] ) always clobbers reg byte a 
Statement [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 [ mulu16_sel::$1 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] ) always clobbers reg byte a 
Statement [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 [ mulu16_sel::return#12 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] ) always clobbers reg byte a 
Statement [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ) always clobbers reg byte a 
Statement [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ) always clobbers reg byte a 
Statement [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ) always clobbers reg byte a 
Statement [134] (word) divr16u::return#3 ← (word) divr16u::return#0 [ divr16u::return#3 rem16u#1 ] ( main:2::sin16s_gen:7::div32u16u:59 [ divr16u::return#3 rem16u#1 ] ) always clobbers reg byte a 
Statement [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3 [ div32u16u::quotient_hi#0 rem16u#1 ] ( main:2::sin16s_gen:7::div32u16u:59 [ div32u16u::quotient_hi#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [136] (word) divr16u::rem#5 ← (word) rem16u#1 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] ( main:2::sin16s_gen:7::div32u16u:59 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] ) always clobbers reg byte a 
Statement [138] (word) divr16u::return#4 ← (word) divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#4 ] ( main:2::sin16s_gen:7::div32u16u:59 [ div32u16u::quotient_hi#0 divr16u::return#4 ] ) always clobbers reg byte a 
Statement [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( main:2::sin16s_gen:7::div32u16u:59 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ) always clobbers reg byte a 
Statement [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( main:2::sin16s_gen:7::div32u16u:59 [ div32u16u::return#0 ] ) always clobbers reg byte a 
Statement [145] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin16s_gen:7::div32u16u:59::divr16u:133 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::sin16s_gen:7::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::sin8s_gen:5::div16u:161::divr16u:238 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:49 [ divr16u::i#2 divr16u::i#1 ]
Statement [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin16s_gen:7::div32u16u:59::divr16u:133 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::sin16s_gen:7::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::sin8s_gen:5::div16u:161::divr16u:238 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [152] if((word) divr16u::rem#7<(const word) main::wavelength#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] ( main:2::sin16s_gen:7::div32u16u:59::divr16u:133 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] main:2::sin16s_gen:7::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] main:2::sin8s_gen:5::div16u:161::divr16u:238 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin16s_gen:7::div32u16u:59::divr16u:133 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::sin16s_gen:7::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::sin8s_gen:5::div16u:161::divr16u:238 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [158] (word) rem16u#1 ← (word) divr16u::rem#10 [ divr16u::return#0 rem16u#1 ] ( main:2::sin16s_gen:7::div32u16u:59::divr16u:133 [ divr16u::return#0 rem16u#1 ] main:2::sin16s_gen:7::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#1 ] main:2::sin8s_gen:5::div16u:161::divr16u:238 [ divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [162] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8s_gen:5 [ div16u::return#2 ] ) always clobbers reg byte a 
Statement [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2 [ sin8s_gen::step#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 ] ) always clobbers reg byte a 
Statement [165] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::x#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [169] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$1 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 ] ) always clobbers reg byte y 
Statement [171] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [173] if((word) sin8s_gen::i#1<(const word) main::wavelength#0) goto sin8s_gen::@1 [ sin8s_gen::step#0 sin8s_gen::x#1 sin8s_gen::sintab#0 sin8s_gen::i#1 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::x#1 sin8s_gen::sintab#0 sin8s_gen::i#1 ] ) always clobbers reg byte a 
Statement [175] if((word) sin8s::x#0<(const word) PI_u4f12#0) goto sin8s::@1 [ sin8s::x#0 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12#0 [ sin8s::x#1 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::x#1 ] ) always clobbers reg byte a 
Statement [178] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::x#4 sin8s::isUpper#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:56 [ sin8s::isUpper#10 ]
Statement [179] (word) sin8s::x#2 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#2 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x#2 ] ) always clobbers reg byte a 
Statement [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::$4 ] ) always clobbers reg byte a 
Statement [182] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 ] ) always clobbers reg byte a 
Statement [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:166 [ sin8s::x1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:170 [ sin8s::x3#0 ]
Statement [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:173 [ sin8s::usinx#0 ]
Statement [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#1 ] ) always clobbers reg byte a 
Statement [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::sinx#1 ] ) always clobbers reg byte a 
Statement [222] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#2 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:63 [ mulu8_sel::select#5 ]
Statement [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) always clobbers reg byte a 
Statement [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) always clobbers reg byte a 
Statement [225] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) always clobbers reg byte a 
Statement [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:64 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Statement [239] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8s_gen:5::div16u:161 [ divr16u::return#2 ] ) always clobbers reg byte a 
Statement [240] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8s_gen:5::div16u:161 [ div16u::return#0 ] ) always clobbers reg byte a 
Statement [12] (word~) main::$3 ← (word)(byte) main::i#2 [ main::i#2 print_char_cursor#42 main::sb#0 main::$3 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sb#0 main::$3 ] ) always clobbers reg byte a 
Statement [13] (word~) main::$11 ← (word~) main::$3 << (byte) 1 [ main::i#2 print_char_cursor#42 main::sb#0 main::$11 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sb#0 main::$11 ] ) always clobbers reg byte a 
Statement [14] (signed word*~) main::$4 ← (const signed word[$c0]) main::sintabw#0 + (word~) main::$11 [ main::i#2 print_char_cursor#42 main::sb#0 main::$4 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sb#0 main::$4 ] ) always clobbers reg byte a 
Statement [15] (signed word) main::sw#0 ← *((signed word*~) main::$4) [ main::i#2 print_char_cursor#42 main::sb#0 main::sw#0 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sb#0 main::sw#0 ] ) always clobbers reg byte a reg byte y 
Statement [16] (byte~) main::$5 ← > (signed word) main::sw#0 [ main::i#2 print_char_cursor#42 main::sb#0 main::$5 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sb#0 main::$5 ] ) always clobbers reg byte a 
Statement [17] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$5 [ main::i#2 print_char_cursor#42 main::sd#0 ] ( main:2 [ main::i#2 print_char_cursor#42 main::sd#0 ] ) always clobbers reg byte a 
Statement [27] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#19 print_str::str#2 ] ( main:2::print_str:21 [ main::i#2 print_char_cursor#19 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [29] *((byte*) print_char_cursor#19) ← *((byte*) print_str::str#2) [ print_char_cursor#19 print_str::str#2 ] ( main:2::print_str:21 [ main::i#2 print_char_cursor#19 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [40] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 [ print_char_cursor#10 print_sbyte::b#0 ] ( main:2::print_sbyte:19 [ main::i#2 print_char_cursor#10 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#4 [ print_char_cursor#28 ] ( main:2::print_sbyte:19::print_char:34 [ main::i#2 print_sbyte::b#1 print_char_cursor#28 ] main:2::print_sbyte:19::print_char:39 [ main::i#2 print_sbyte::b#1 print_char_cursor#28 ] main:2::print_sbyte:19::print_byte:36::print_char:47 [ main::i#2 print_sbyte::b#4 print_char_cursor#28 ] main:2::print_sbyte:19::print_byte:36::print_char:50 [ main::i#2 print_char_cursor#28 ] ) always clobbers reg byte y 
Statement [45] (byte~) print_byte::$0 ← (byte)(signed byte) print_sbyte::b#4 >> (byte) 4 [ print_char_cursor#10 print_sbyte::b#4 print_byte::$0 ] ( main:2::print_sbyte:19::print_byte:36 [ main::i#2 print_char_cursor#10 print_sbyte::b#4 print_byte::$0 ] ) always clobbers reg byte a 
Statement [48] (byte~) print_byte::$2 ← (byte)(signed byte) print_sbyte::b#4 & (byte) $f [ print_char_cursor#10 print_byte::$2 ] ( main:2::print_sbyte:19::print_byte:36 [ main::i#2 print_char_cursor#10 print_byte::$2 ] ) always clobbers reg byte a 
Statement [54] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:9 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [56] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:9 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 [ div32u16u::return#2 ] ( main:2::sin16s_gen:7 [ div32u16u::return#2 ] ) always clobbers reg byte a 
Statement [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2 [ sin16s_gen::step#0 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 ] ) always clobbers reg byte a 
Statement [63] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [65] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#0 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#0 ] ) always clobbers reg byte a 
Statement [66] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s_gen::$1 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s_gen::$1 ] ) always clobbers reg byte a 
Statement [67] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [68] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::i#2 sin16s_gen::sintab#0 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::i#2 sin16s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [69] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [71] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1 [ sin16s_gen::step#0 sin16s_gen::x#1 sin16s_gen::sintab#0 sin16s_gen::i#1 ] ( main:2::sin16s_gen:7 [ sin16s_gen::step#0 sin16s_gen::x#1 sin16s_gen::sintab#0 sin16s_gen::i#1 ] ) always clobbers reg byte a 
Statement [73] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 [ sin16s::x#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 [ sin16s::x#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#1 ] ) always clobbers reg byte a 
Statement [76] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#4 sin16s::isUpper#2 ] ) always clobbers reg byte a 
Statement [77] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x#2 ] ) always clobbers reg byte a 
Statement [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 [ sin16s::isUpper#2 sin16s::$4 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::$4 ] ) always clobbers reg byte a reg byte y 
Statement [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ) always clobbers reg byte a 
Statement [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ) always clobbers reg byte a 
Statement [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ) always clobbers reg byte a 
Statement [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ) always clobbers reg byte a 
Statement [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ) always clobbers reg byte a 
Statement [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ) always clobbers reg byte a 
Statement [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ) always clobbers reg byte a 
Statement [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ) always clobbers reg byte a 
Statement [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ) always clobbers reg byte a 
Statement [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ) always clobbers reg byte a 
Statement [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ) always clobbers reg byte a 
Statement [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ) always clobbers reg byte a 
Statement [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ) always clobbers reg byte a 
Statement [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ) always clobbers reg byte a 
Statement [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ) always clobbers reg byte a 
Statement [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ) always clobbers reg byte a 
Statement [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ) always clobbers reg byte a 
Statement [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ) always clobbers reg byte a 
Statement [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ) always clobbers reg byte a 
Statement [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ) always clobbers reg byte a reg byte y 
Statement [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#1 ] ) always clobbers reg byte a 
Statement [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 [ sin16s::sinx#1 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::sinx#1 ] ) always clobbers reg byte a 
Statement [112] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 [ sin16s::return#5 ] ( main:2::sin16s_gen:7::sin16s:64 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#5 ] ) always clobbers reg byte a 
Statement [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5 [ mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] ) always clobbers reg byte a 
Statement [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5 [ mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] ) always clobbers reg byte a 
Statement [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#2 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] ) always clobbers reg byte a 
Statement [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] ) always clobbers reg byte a 
Statement [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 [ mulu16_sel::$1 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] ) always clobbers reg byte a 
Statement [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 [ mulu16_sel::return#12 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] ) always clobbers reg byte a 
Statement [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ) always clobbers reg byte a 
Statement [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ) always clobbers reg byte a 
Statement [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( main:2::sin16s_gen:7::sin16s:64::mulu16_sel:83::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:88::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:92::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:98::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:7::sin16s:64::mulu16_sel:103::mul16u:116 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ) always clobbers reg byte a 
Statement [134] (word) divr16u::return#3 ← (word) divr16u::return#0 [ divr16u::return#3 rem16u#1 ] ( main:2::sin16s_gen:7::div32u16u:59 [ divr16u::return#3 rem16u#1 ] ) always clobbers reg byte a 
Statement [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3 [ div32u16u::quotient_hi#0 rem16u#1 ] ( main:2::sin16s_gen:7::div32u16u:59 [ div32u16u::quotient_hi#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [136] (word) divr16u::rem#5 ← (word) rem16u#1 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] ( main:2::sin16s_gen:7::div32u16u:59 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] ) always clobbers reg byte a 
Statement [138] (word) divr16u::return#4 ← (word) divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#4 ] ( main:2::sin16s_gen:7::div32u16u:59 [ div32u16u::quotient_hi#0 divr16u::return#4 ] ) always clobbers reg byte a 
Statement [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( main:2::sin16s_gen:7::div32u16u:59 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ) always clobbers reg byte a 
Statement [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( main:2::sin16s_gen:7::div32u16u:59 [ div32u16u::return#0 ] ) always clobbers reg byte a 
Statement [145] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin16s_gen:7::div32u16u:59::divr16u:133 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::sin16s_gen:7::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::sin8s_gen:5::div16u:161::divr16u:238 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin16s_gen:7::div32u16u:59::divr16u:133 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::sin16s_gen:7::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::sin8s_gen:5::div16u:161::divr16u:238 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [152] if((word) divr16u::rem#7<(const word) main::wavelength#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] ( main:2::sin16s_gen:7::div32u16u:59::divr16u:133 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] main:2::sin16s_gen:7::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] main:2::sin8s_gen:5::div16u:161::divr16u:238 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin16s_gen:7::div32u16u:59::divr16u:133 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::sin16s_gen:7::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::sin8s_gen:5::div16u:161::divr16u:238 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [158] (word) rem16u#1 ← (word) divr16u::rem#10 [ divr16u::return#0 rem16u#1 ] ( main:2::sin16s_gen:7::div32u16u:59::divr16u:133 [ divr16u::return#0 rem16u#1 ] main:2::sin16s_gen:7::div32u16u:59::divr16u:137 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#1 ] main:2::sin8s_gen:5::div16u:161::divr16u:238 [ divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [162] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8s_gen:5 [ div16u::return#2 ] ) always clobbers reg byte a 
Statement [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2 [ sin8s_gen::step#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 ] ) always clobbers reg byte a 
Statement [165] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::x#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [169] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$1 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 ] ) always clobbers reg byte y 
Statement [171] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [173] if((word) sin8s_gen::i#1<(const word) main::wavelength#0) goto sin8s_gen::@1 [ sin8s_gen::step#0 sin8s_gen::x#1 sin8s_gen::sintab#0 sin8s_gen::i#1 ] ( main:2::sin8s_gen:5 [ sin8s_gen::step#0 sin8s_gen::x#1 sin8s_gen::sintab#0 sin8s_gen::i#1 ] ) always clobbers reg byte a 
Statement [175] if((word) sin8s::x#0<(const word) PI_u4f12#0) goto sin8s::@1 [ sin8s::x#0 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12#0 [ sin8s::x#1 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::x#1 ] ) always clobbers reg byte a 
Statement [178] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::x#4 sin8s::isUpper#10 ] ) always clobbers reg byte a 
Statement [179] (word) sin8s::x#2 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#2 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x#2 ] ) always clobbers reg byte a 
Statement [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::$4 ] ) always clobbers reg byte a 
Statement [182] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 ] ) always clobbers reg byte a 
Statement [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) always clobbers reg byte a 
Statement [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) always clobbers reg byte a 
Statement [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#1 ] ) always clobbers reg byte a 
Statement [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8s_gen:5::sin8s:166 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::sinx#1 ] ) always clobbers reg byte a 
Statement [222] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#2 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] ) always clobbers reg byte a 
Statement [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) always clobbers reg byte a 
Statement [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) always clobbers reg byte a 
Statement [225] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) always clobbers reg byte a 
Statement [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ) always clobbers reg byte a 
Statement [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8s_gen:5::sin8s:166::mulu8_sel:185::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:190::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:194::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:200::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] main:2::sin8s_gen:5::sin8s:166::mulu8_sel:205::mul8u:221 [ sin8s_gen::step#0 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s_gen::i#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Statement [239] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8s_gen:5::div16u:161 [ divr16u::return#2 ] ) always clobbers reg byte a 
Statement [240] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8s_gen:5::div16u:161 [ div16u::return#0 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ print_str::str#2 print_str::str#0 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] : zp ZP_BYTE:5 , reg byte x , 
Potential registers zp ZP_BYTE:6 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:7 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#19 print_char_cursor#10 print_char_cursor#1 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_DWORD:11 [ sin16s_gen::x#2 sin16s_gen::x#1 ] : zp ZP_DWORD:11 , 
Potential registers zp ZP_WORD:15 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_WORD:17 [ sin16s_gen::i#2 sin16s_gen::i#1 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_BYTE:19 [ sin16s::isUpper#2 ] : zp ZP_BYTE:19 , reg byte x , 
Potential registers zp ZP_DWORD:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] : zp ZP_DWORD:20 , 
Potential registers zp ZP_WORD:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] : zp ZP_WORD:24 , 
Potential registers zp ZP_WORD:26 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] : zp ZP_WORD:26 , 
Potential registers zp ZP_WORD:28 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_BYTE:30 [ mulu16_sel::select#5 ] : zp ZP_BYTE:30 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:31 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] : zp ZP_WORD:31 , 
Potential registers zp ZP_DWORD:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp ZP_DWORD:33 , 
Potential registers zp ZP_DWORD:37 [ mul16u::mb#2 mul16u::mb#1 ] : zp ZP_DWORD:37 , 
Potential registers zp ZP_WORD:41 [ mul16u::b#0 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_WORD:43 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp ZP_WORD:43 , 
Potential registers zp ZP_WORD:45 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] : zp ZP_WORD:45 , 
Potential registers zp ZP_WORD:47 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:47 , 
Potential registers zp ZP_BYTE:49 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:49 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:50 [ sin8s_gen::x#2 sin8s_gen::x#1 ] : zp ZP_WORD:50 , 
Potential registers zp ZP_WORD:52 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] : zp ZP_WORD:52 , 
Potential registers zp ZP_WORD:54 [ sin8s_gen::i#2 sin8s_gen::i#1 ] : zp ZP_WORD:54 , 
Potential registers zp ZP_BYTE:56 [ sin8s::isUpper#10 ] : zp ZP_BYTE:56 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:57 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] : zp ZP_WORD:57 , 
Potential registers zp ZP_BYTE:59 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] : zp ZP_BYTE:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] : zp ZP_BYTE:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:61 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] : zp ZP_BYTE:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:62 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] : zp ZP_BYTE:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:63 [ mulu8_sel::select#5 ] : zp ZP_BYTE:63 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:64 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] : zp ZP_BYTE:64 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:65 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp ZP_WORD:65 , 
Potential registers zp ZP_WORD:67 [ mul8u::mb#2 mul8u::mb#1 ] : zp ZP_WORD:67 , 
Potential registers zp ZP_BYTE:69 [ mul8u::b#0 ] : zp ZP_BYTE:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ main::sb#0 ] : zp ZP_BYTE:70 , reg byte x , 
Potential registers zp ZP_WORD:71 [ main::$3 ] : zp ZP_WORD:71 , 
Potential registers zp ZP_WORD:73 [ main::$11 ] : zp ZP_WORD:73 , 
Potential registers zp ZP_WORD:75 [ main::$4 ] : zp ZP_WORD:75 , 
Potential registers zp ZP_WORD:77 [ main::sw#0 ] : zp ZP_WORD:77 , 
Potential registers zp ZP_BYTE:79 [ main::$5 ] : zp ZP_BYTE:79 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:80 [ main::sd#0 ] : zp ZP_BYTE:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:81 [ print_byte::$0 ] : zp ZP_BYTE:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:82 [ print_byte::$2 ] : zp ZP_BYTE:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:83 [ div32u16u::return#2 ] : zp ZP_DWORD:83 , 
Potential registers zp ZP_DWORD:87 [ sin16s_gen::step#0 ] : zp ZP_DWORD:87 , 
Potential registers zp ZP_WORD:91 [ sin16s::return#0 ] : zp ZP_WORD:91 , 
Potential registers zp ZP_WORD:93 [ sin16s_gen::$1 ] : zp ZP_WORD:93 , 
Potential registers zp ZP_DWORD:95 [ sin16s::$4 ] : zp ZP_DWORD:95 , 
Potential registers zp ZP_WORD:99 [ sin16s::x1#0 ] : zp ZP_WORD:99 , 
Potential registers zp ZP_WORD:101 [ mulu16_sel::return#0 ] : zp ZP_WORD:101 , 
Potential registers zp ZP_WORD:103 [ sin16s::x2#0 ] : zp ZP_WORD:103 , 
Potential registers zp ZP_WORD:105 [ mulu16_sel::return#1 ] : zp ZP_WORD:105 , 
Potential registers zp ZP_WORD:107 [ sin16s::x3#0 ] : zp ZP_WORD:107 , 
Potential registers zp ZP_WORD:109 [ mulu16_sel::return#2 ] : zp ZP_WORD:109 , 
Potential registers zp ZP_WORD:111 [ sin16s::x3_6#0 ] : zp ZP_WORD:111 , 
Potential registers zp ZP_WORD:113 [ sin16s::usinx#0 ] : zp ZP_WORD:113 , 
Potential registers zp ZP_WORD:115 [ mulu16_sel::return#10 ] : zp ZP_WORD:115 , 
Potential registers zp ZP_WORD:117 [ sin16s::x4#0 ] : zp ZP_WORD:117 , 
Potential registers zp ZP_WORD:119 [ mulu16_sel::return#11 ] : zp ZP_WORD:119 , 
Potential registers zp ZP_WORD:121 [ sin16s::x5#0 ] : zp ZP_WORD:121 , 
Potential registers zp ZP_WORD:123 [ sin16s::x5_128#0 ] : zp ZP_WORD:123 , 
Potential registers zp ZP_WORD:125 [ sin16s::usinx#1 ] : zp ZP_WORD:125 , 
Potential registers zp ZP_DWORD:127 [ mul16u::return#2 ] : zp ZP_DWORD:127 , 
Potential registers zp ZP_DWORD:131 [ mulu16_sel::$0 ] : zp ZP_DWORD:131 , 
Potential registers zp ZP_DWORD:135 [ mulu16_sel::$1 ] : zp ZP_DWORD:135 , 
Potential registers zp ZP_WORD:139 [ mulu16_sel::return#12 ] : zp ZP_WORD:139 , 
Potential registers zp ZP_BYTE:141 [ mul16u::$1 ] : zp ZP_BYTE:141 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:142 [ divr16u::return#3 ] : zp ZP_WORD:142 , 
Potential registers zp ZP_WORD:144 [ div32u16u::quotient_hi#0 ] : zp ZP_WORD:144 , 
Potential registers zp ZP_WORD:146 [ divr16u::return#4 ] : zp ZP_WORD:146 , 
Potential registers zp ZP_WORD:148 [ div32u16u::quotient_lo#0 ] : zp ZP_WORD:148 , 
Potential registers zp ZP_DWORD:150 [ div32u16u::return#0 ] : zp ZP_DWORD:150 , 
Potential registers zp ZP_BYTE:154 [ divr16u::$1 ] : zp ZP_BYTE:154 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:155 [ divr16u::$2 ] : zp ZP_BYTE:155 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:156 [ rem16u#1 ] : zp ZP_WORD:156 , 
Potential registers zp ZP_WORD:158 [ div16u::return#2 ] : zp ZP_WORD:158 , 
Potential registers zp ZP_WORD:160 [ sin8s_gen::step#0 ] : zp ZP_WORD:160 , 
Potential registers zp ZP_BYTE:162 [ sin8s::return#0 ] : zp ZP_BYTE:162 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:163 [ sin8s_gen::$1 ] : zp ZP_BYTE:163 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:164 [ sin8s::$4 ] : zp ZP_WORD:164 , 
Potential registers zp ZP_BYTE:166 [ sin8s::x1#0 ] : zp ZP_BYTE:166 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:167 [ mulu8_sel::return#0 ] : zp ZP_BYTE:167 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:168 [ sin8s::x2#0 ] : zp ZP_BYTE:168 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:169 [ mulu8_sel::return#1 ] : zp ZP_BYTE:169 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:170 [ sin8s::x3#0 ] : zp ZP_BYTE:170 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:171 [ mulu8_sel::return#2 ] : zp ZP_BYTE:171 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:172 [ sin8s::x3_6#0 ] : zp ZP_BYTE:172 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:173 [ sin8s::usinx#0 ] : zp ZP_BYTE:173 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:174 [ mulu8_sel::return#10 ] : zp ZP_BYTE:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:175 [ sin8s::x4#0 ] : zp ZP_BYTE:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:176 [ mulu8_sel::return#11 ] : zp ZP_BYTE:176 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:177 [ sin8s::x5#0 ] : zp ZP_BYTE:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:178 [ sin8s::x5_128#0 ] : zp ZP_BYTE:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:179 [ mul8u::return#2 ] : zp ZP_WORD:179 , 
Potential registers zp ZP_WORD:181 [ mulu8_sel::$0 ] : zp ZP_WORD:181 , 
Potential registers zp ZP_WORD:183 [ mulu8_sel::$1 ] : zp ZP_WORD:183 , 
Potential registers zp ZP_BYTE:185 [ mulu8_sel::return#12 ] : zp ZP_BYTE:185 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:186 [ mul8u::$1 ] : zp ZP_BYTE:186 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:187 [ divr16u::return#2 ] : zp ZP_WORD:187 , 
Potential registers zp ZP_WORD:189 [ div16u::return#0 ] : zp ZP_WORD:189 , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 353.83: zp ZP_WORD:65 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 245.57: zp ZP_WORD:67 [ mul8u::mb#2 mul8u::mb#1 ] 202: zp ZP_BYTE:186 [ mul8u::$1 ] 170: zp ZP_BYTE:64 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] 4: zp ZP_WORD:179 [ mul8u::return#2 ] 2: zp ZP_BYTE:69 [ mul8u::b#0 ] 
Uplift Scope [mul16u] 353.83: zp ZP_DWORD:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 245.57: zp ZP_DWORD:37 [ mul16u::mb#2 mul16u::mb#1 ] 202: zp ZP_BYTE:141 [ mul16u::$1 ] 170: zp ZP_WORD:31 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] 4: zp ZP_DWORD:127 [ mul16u::return#2 ] 2: zp ZP_WORD:41 [ mul16u::b#0 ] 
Uplift Scope [print_str] 303: zp ZP_WORD:3 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [divr16u] 106.92: zp ZP_WORD:43 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 35.12: zp ZP_WORD:47 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 22: zp ZP_BYTE:154 [ divr16u::$1 ] 22: zp ZP_BYTE:155 [ divr16u::$2 ] 18.19: zp ZP_BYTE:49 [ divr16u::i#2 divr16u::i#1 ] 9.75: zp ZP_WORD:45 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] 4: zp ZP_WORD:142 [ divr16u::return#3 ] 4: zp ZP_WORD:146 [ divr16u::return#4 ] 4: zp ZP_WORD:187 [ divr16u::return#2 ] 
Uplift Scope [] 153.84: zp ZP_WORD:7 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#19 print_char_cursor#10 print_char_cursor#1 ] 0.8: zp ZP_WORD:156 [ rem16u#1 ] 
Uplift Scope [main] 22: zp ZP_WORD:71 [ main::$3 ] 22: zp ZP_WORD:73 [ main::$11 ] 22: zp ZP_WORD:75 [ main::$4 ] 22: zp ZP_WORD:77 [ main::sw#0 ] 22: zp ZP_BYTE:80 [ main::sd#0 ] 19.25: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 11: zp ZP_BYTE:79 [ main::$5 ] 3.67: zp ZP_BYTE:70 [ main::sb#0 ] 
Uplift Scope [sin8s] 27.5: zp ZP_WORD:57 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] 22: zp ZP_BYTE:162 [ sin8s::return#0 ] 13: zp ZP_BYTE:60 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] 10: zp ZP_BYTE:59 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] 4: zp ZP_WORD:164 [ sin8s::$4 ] 4: zp ZP_BYTE:168 [ sin8s::x2#0 ] 4: zp ZP_BYTE:172 [ sin8s::x3_6#0 ] 4: zp ZP_BYTE:175 [ sin8s::x4#0 ] 4: zp ZP_BYTE:177 [ sin8s::x5#0 ] 4: zp ZP_BYTE:178 [ sin8s::x5_128#0 ] 1: zp ZP_BYTE:170 [ sin8s::x3#0 ] 0.64: zp ZP_BYTE:166 [ sin8s::x1#0 ] 0.33: zp ZP_BYTE:173 [ sin8s::usinx#0 ] 0.06: zp ZP_BYTE:56 [ sin8s::isUpper#10 ] 
Uplift Scope [sin16s] 27.5: zp ZP_DWORD:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] 22: zp ZP_WORD:91 [ sin16s::return#0 ] 13: zp ZP_WORD:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] 4: zp ZP_DWORD:95 [ sin16s::$4 ] 4: zp ZP_WORD:103 [ sin16s::x2#0 ] 4: zp ZP_WORD:111 [ sin16s::x3_6#0 ] 4: zp ZP_WORD:117 [ sin16s::x4#0 ] 4: zp ZP_WORD:121 [ sin16s::x5#0 ] 4: zp ZP_WORD:123 [ sin16s::x5_128#0 ] 1: zp ZP_WORD:107 [ sin16s::x3#0 ] 1: zp ZP_WORD:125 [ sin16s::usinx#1 ] 0.64: zp ZP_WORD:99 [ sin16s::x1#0 ] 0.33: zp ZP_WORD:113 [ sin16s::usinx#0 ] 0.06: zp ZP_BYTE:19 [ sin16s::isUpper#2 ] 
Uplift Scope [mulu16_sel] 24: zp ZP_WORD:26 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] 21: zp ZP_WORD:28 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] 4: zp ZP_WORD:101 [ mulu16_sel::return#0 ] 4: zp ZP_WORD:105 [ mulu16_sel::return#1 ] 4: zp ZP_WORD:109 [ mulu16_sel::return#2 ] 4: zp ZP_WORD:115 [ mulu16_sel::return#10 ] 4: zp ZP_WORD:119 [ mulu16_sel::return#11 ] 4: zp ZP_DWORD:131 [ mulu16_sel::$0 ] 4: zp ZP_DWORD:135 [ mulu16_sel::$1 ] 1.71: zp ZP_WORD:139 [ mulu16_sel::return#12 ] 0.33: zp ZP_BYTE:30 [ mulu16_sel::select#5 ] 
Uplift Scope [mulu8_sel] 24: zp ZP_BYTE:61 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] 21: zp ZP_BYTE:62 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] 4: zp ZP_BYTE:167 [ mulu8_sel::return#0 ] 4: zp ZP_BYTE:169 [ mulu8_sel::return#1 ] 4: zp ZP_BYTE:171 [ mulu8_sel::return#2 ] 4: zp ZP_BYTE:174 [ mulu8_sel::return#10 ] 4: zp ZP_BYTE:176 [ mulu8_sel::return#11 ] 4: zp ZP_WORD:181 [ mulu8_sel::$0 ] 4: zp ZP_WORD:183 [ mulu8_sel::$1 ] 1.71: zp ZP_BYTE:185 [ mulu8_sel::return#12 ] 0.33: zp ZP_BYTE:63 [ mulu8_sel::select#5 ] 
Uplift Scope [sin16s_gen] 22: zp ZP_WORD:93 [ sin16s_gen::$1 ] 19.25: zp ZP_WORD:17 [ sin16s_gen::i#2 sin16s_gen::i#1 ] 12.05: zp ZP_DWORD:11 [ sin16s_gen::x#2 sin16s_gen::x#1 ] 11: zp ZP_WORD:15 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] 1.18: zp ZP_DWORD:87 [ sin16s_gen::step#0 ] 
Uplift Scope [sin8s_gen] 22: zp ZP_BYTE:163 [ sin8s_gen::$1 ] 19.25: zp ZP_WORD:54 [ sin8s_gen::i#2 sin8s_gen::i#1 ] 12.05: zp ZP_WORD:50 [ sin8s_gen::x#2 sin8s_gen::x#1 ] 11: zp ZP_WORD:52 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] 1.18: zp ZP_WORD:160 [ sin8s_gen::step#0 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:6 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplift Scope [div32u16u] 4: zp ZP_DWORD:83 [ div32u16u::return#2 ] 4: zp ZP_WORD:148 [ div32u16u::quotient_lo#0 ] 1.33: zp ZP_DWORD:150 [ div32u16u::return#0 ] 0.8: zp ZP_WORD:144 [ div32u16u::quotient_hi#0 ] 
Uplift Scope [print_byte] 4: zp ZP_BYTE:81 [ print_byte::$0 ] 4: zp ZP_BYTE:82 [ print_byte::$2 ] 
Uplift Scope [print_sbyte] 7.83: zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Uplift Scope [div16u] 4: zp ZP_WORD:158 [ div16u::return#2 ] 1.33: zp ZP_WORD:189 [ div16u::return#0 ] 

Uplifting [mul8u] best 38976 combination zp ZP_WORD:65 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp ZP_WORD:67 [ mul8u::mb#2 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] zp ZP_WORD:179 [ mul8u::return#2 ] reg byte a [ mul8u::b#0 ] 
Uplifting [mul16u] best 38376 combination zp ZP_DWORD:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp ZP_DWORD:37 [ mul16u::mb#2 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp ZP_WORD:31 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] zp ZP_DWORD:127 [ mul16u::return#2 ] zp ZP_WORD:41 [ mul16u::b#0 ] 
Uplifting [print_str] best 38376 combination zp ZP_WORD:3 [ print_str::str#2 print_str::str#0 ] 
Uplifting [divr16u] best 38166 combination zp ZP_WORD:43 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp ZP_WORD:47 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:45 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] zp ZP_WORD:142 [ divr16u::return#3 ] zp ZP_WORD:146 [ divr16u::return#4 ] zp ZP_WORD:187 [ divr16u::return#2 ] 
Uplifting [] best 38166 combination zp ZP_WORD:7 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#19 print_char_cursor#10 print_char_cursor#1 ] zp ZP_WORD:156 [ rem16u#1 ] 
Uplifting [main] best 37936 combination zp ZP_WORD:71 [ main::$3 ] zp ZP_WORD:73 [ main::$11 ] zp ZP_WORD:75 [ main::$4 ] zp ZP_WORD:77 [ main::sw#0 ] reg byte a [ main::sd#0 ] reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$5 ] zp ZP_BYTE:70 [ main::sb#0 ] 
Uplifting [sin8s] best 37831 combination zp ZP_WORD:57 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] reg byte a [ sin8s::return#0 ] reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] zp ZP_WORD:164 [ sin8s::$4 ] zp ZP_BYTE:168 [ sin8s::x2#0 ] zp ZP_BYTE:172 [ sin8s::x3_6#0 ] zp ZP_BYTE:175 [ sin8s::x4#0 ] zp ZP_BYTE:177 [ sin8s::x5#0 ] zp ZP_BYTE:178 [ sin8s::x5_128#0 ] zp ZP_BYTE:170 [ sin8s::x3#0 ] zp ZP_BYTE:166 [ sin8s::x1#0 ] zp ZP_BYTE:173 [ sin8s::usinx#0 ] zp ZP_BYTE:56 [ sin8s::isUpper#10 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [sin16s] best 37831 combination zp ZP_DWORD:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] zp ZP_WORD:91 [ sin16s::return#0 ] zp ZP_WORD:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] zp ZP_DWORD:95 [ sin16s::$4 ] zp ZP_WORD:103 [ sin16s::x2#0 ] zp ZP_WORD:111 [ sin16s::x3_6#0 ] zp ZP_WORD:117 [ sin16s::x4#0 ] zp ZP_WORD:121 [ sin16s::x5#0 ] zp ZP_WORD:123 [ sin16s::x5_128#0 ] zp ZP_WORD:107 [ sin16s::x3#0 ] zp ZP_WORD:125 [ sin16s::usinx#1 ] zp ZP_WORD:99 [ sin16s::x1#0 ] zp ZP_WORD:113 [ sin16s::usinx#0 ] zp ZP_BYTE:19 [ sin16s::isUpper#2 ] 
Uplifting [mulu16_sel] best 37815 combination zp ZP_WORD:26 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] zp ZP_WORD:28 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] zp ZP_WORD:101 [ mulu16_sel::return#0 ] zp ZP_WORD:105 [ mulu16_sel::return#1 ] zp ZP_WORD:109 [ mulu16_sel::return#2 ] zp ZP_WORD:115 [ mulu16_sel::return#10 ] zp ZP_WORD:119 [ mulu16_sel::return#11 ] zp ZP_DWORD:131 [ mulu16_sel::$0 ] zp ZP_DWORD:135 [ mulu16_sel::$1 ] zp ZP_WORD:139 [ mulu16_sel::return#12 ] reg byte x [ mulu16_sel::select#5 ] 
Uplifting [mulu8_sel] best 37769 combination reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] reg byte a [ mulu8_sel::return#0 ] reg byte a [ mulu8_sel::return#1 ] zp ZP_BYTE:171 [ mulu8_sel::return#2 ] zp ZP_BYTE:174 [ mulu8_sel::return#10 ] zp ZP_BYTE:176 [ mulu8_sel::return#11 ] zp ZP_WORD:181 [ mulu8_sel::$0 ] zp ZP_WORD:183 [ mulu8_sel::$1 ] zp ZP_BYTE:185 [ mulu8_sel::return#12 ] zp ZP_BYTE:63 [ mulu8_sel::select#5 ] 
Limited combination testing to 100 combinations of 196608 possible.
Uplifting [sin16s_gen] best 37769 combination zp ZP_WORD:93 [ sin16s_gen::$1 ] zp ZP_WORD:17 [ sin16s_gen::i#2 sin16s_gen::i#1 ] zp ZP_DWORD:11 [ sin16s_gen::x#2 sin16s_gen::x#1 ] zp ZP_WORD:15 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] zp ZP_DWORD:87 [ sin16s_gen::step#0 ] 
Uplifting [sin8s_gen] best 37709 combination reg byte a [ sin8s_gen::$1 ] zp ZP_WORD:54 [ sin8s_gen::i#2 sin8s_gen::i#1 ] zp ZP_WORD:50 [ sin8s_gen::x#2 sin8s_gen::x#1 ] zp ZP_WORD:52 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] zp ZP_WORD:160 [ sin8s_gen::step#0 ] 
Uplifting [print_cls] best 37709 combination zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_char] best 37694 combination reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplifting [div32u16u] best 37694 combination zp ZP_DWORD:83 [ div32u16u::return#2 ] zp ZP_WORD:148 [ div32u16u::quotient_lo#0 ] zp ZP_DWORD:150 [ div32u16u::return#0 ] zp ZP_WORD:144 [ div32u16u::quotient_hi#0 ] 
Uplifting [print_byte] best 37686 combination reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_sbyte] best 37686 combination zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Uplifting [div16u] best 37686 combination zp ZP_WORD:158 [ div16u::return#2 ] zp ZP_WORD:189 [ div16u::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Uplifting [print_sbyte] best 37686 combination zp ZP_BYTE:5 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:168 [ sin8s::x2#0 ]
Uplifting [sin8s] best 37682 combination reg byte a [ sin8s::x2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:171 [ mulu8_sel::return#2 ]
Uplifting [mulu8_sel] best 37676 combination reg byte a [ mulu8_sel::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:172 [ sin8s::x3_6#0 ]
Uplifting [sin8s] best 37672 combination reg byte a [ sin8s::x3_6#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:174 [ mulu8_sel::return#10 ]
Uplifting [mulu8_sel] best 37666 combination reg byte a [ mulu8_sel::return#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:175 [ sin8s::x4#0 ]
Uplifting [sin8s] best 37662 combination reg byte a [ sin8s::x4#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:176 [ mulu8_sel::return#11 ]
Uplifting [mulu8_sel] best 37656 combination reg byte a [ mulu8_sel::return#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:177 [ sin8s::x5#0 ]
Uplifting [sin8s] best 37650 combination reg byte a [ sin8s::x5#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:178 [ sin8s::x5_128#0 ]
Uplifting [sin8s] best 37644 combination reg byte a [ sin8s::x5_128#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:70 [ main::sb#0 ]
Uplifting [main] best 37644 combination zp ZP_BYTE:70 [ main::sb#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:185 [ mulu8_sel::return#12 ]
Uplifting [mulu8_sel] best 37626 combination reg byte a [ mulu8_sel::return#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:170 [ sin8s::x3#0 ]
Uplifting [sin8s] best 37626 combination zp ZP_BYTE:170 [ sin8s::x3#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:166 [ sin8s::x1#0 ]
Uplifting [sin8s] best 37626 combination zp ZP_BYTE:166 [ sin8s::x1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:63 [ mulu8_sel::select#5 ]
Uplifting [mulu8_sel] best 37626 combination zp ZP_BYTE:63 [ mulu8_sel::select#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:173 [ sin8s::usinx#0 ]
Uplifting [sin8s] best 37626 combination zp ZP_BYTE:173 [ sin8s::usinx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ sin16s::isUpper#2 ]
Uplifting [sin16s] best 37626 combination zp ZP_BYTE:19 [ sin16s::isUpper#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:56 [ sin8s::isUpper#10 ]
Uplifting [sin8s] best 37626 combination zp ZP_BYTE:56 [ sin8s::isUpper#10 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] ] with [ zp ZP_WORD:125 [ sin16s::usinx#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:26 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] ] with [ zp ZP_WORD:107 [ sin16s::x3#0 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:43 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp ZP_WORD:156 [ rem16u#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_DWORD:20 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] ] with [ zp ZP_DWORD:95 [ sin16s::$4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 ] ] with [ zp ZP_WORD:91 [ sin16s::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:26 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 ] ] with [ zp ZP_WORD:103 [ sin16s::x2#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:26 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 ] ] with [ zp ZP_WORD:117 [ sin16s::x4#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:28 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] ] with [ zp ZP_WORD:41 [ mul16u::b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp ZP_DWORD:127 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:47 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:142 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:47 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 ] ] with [ zp ZP_WORD:146 [ divr16u::return#4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:47 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 ] ] with [ zp ZP_WORD:187 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:57 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] ] with [ zp ZP_WORD:164 [ sin8s::$4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:65 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp ZP_WORD:179 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:71 [ main::$3 ] ] with [ zp ZP_WORD:73 [ main::$11 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:83 [ div32u16u::return#2 ] ] with [ zp ZP_DWORD:87 [ sin16s_gen::step#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:83 [ div32u16u::return#2 sin16s_gen::step#0 ] ] with [ zp ZP_DWORD:150 [ div32u16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:101 [ mulu16_sel::return#0 ] ] with [ zp ZP_WORD:139 [ mulu16_sel::return#12 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:109 [ mulu16_sel::return#2 ] ] with [ zp ZP_WORD:111 [ sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:119 [ mulu16_sel::return#11 ] ] with [ zp ZP_WORD:121 [ sin16s::x5#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:131 [ mulu16_sel::$0 ] ] with [ zp ZP_DWORD:135 [ mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:158 [ div16u::return#2 ] ] with [ zp ZP_WORD:160 [ sin8s_gen::step#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:158 [ div16u::return#2 sin8s_gen::step#0 ] ] with [ zp ZP_WORD:189 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:181 [ mulu8_sel::$0 ] ] with [ zp ZP_WORD:183 [ mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 ] ] with [ zp ZP_WORD:93 [ sin16s_gen::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:24 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$1 ] ] with [ zp ZP_WORD:113 [ sin16s::usinx#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:26 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 ] ] with [ zp ZP_WORD:105 [ mulu16_sel::return#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:26 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 ] ] with [ zp ZP_WORD:115 [ mulu16_sel::return#10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:33 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 ] ] with [ zp ZP_DWORD:131 [ mulu16_sel::$0 mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:47 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 divr16u::return#2 ] ] with [ zp ZP_WORD:148 [ div32u16u::quotient_lo#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:47 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 divr16u::return#2 div32u16u::quotient_lo#0 ] ] with [ zp ZP_WORD:158 [ div16u::return#2 sin8s_gen::step#0 div16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:65 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 ] ] with [ zp ZP_WORD:181 [ mulu8_sel::$0 mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:71 [ main::$3 main::$11 ] ] with [ zp ZP_WORD:75 [ main::$4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:101 [ mulu16_sel::return#0 mulu16_sel::return#12 ] ] with [ zp ZP_WORD:109 [ mulu16_sel::return#2 sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:101 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 ] ] with [ zp ZP_WORD:119 [ mulu16_sel::return#11 sin16s::x5#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:101 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 ] ] with [ zp ZP_WORD:123 [ sin16s::x5_128#0 ] ] - score: 1
Allocated (was zp ZP_WORD:3) zp ZP_WORD:2 [ print_str::str#2 print_str::str#0 ]
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:4 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Allocated (was zp ZP_WORD:7) zp ZP_WORD:5 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#19 print_char_cursor#10 print_char_cursor#1 ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:7 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated (was zp ZP_DWORD:11) zp ZP_DWORD:9 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
Allocated (was zp ZP_WORD:15) zp ZP_WORD:13 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
Allocated (was zp ZP_WORD:17) zp ZP_WORD:15 [ sin16s_gen::i#2 sin16s_gen::i#1 ]
Allocated (was zp ZP_BYTE:19) zp ZP_BYTE:17 [ sin16s::isUpper#2 ]
Allocated (was zp ZP_DWORD:20) zp ZP_DWORD:18 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$4 ]
Allocated (was zp ZP_WORD:24) zp ZP_WORD:22 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$1 sin16s::usinx#0 ]
Allocated (was zp ZP_WORD:26) zp ZP_WORD:24 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ]
Allocated (was zp ZP_WORD:28) zp ZP_WORD:26 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mul16u::b#0 ]
Allocated (was zp ZP_WORD:31) zp ZP_WORD:28 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
Allocated (was zp ZP_DWORD:33) zp ZP_DWORD:30 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 ]
Allocated (was zp ZP_DWORD:37) zp ZP_DWORD:34 [ mul16u::mb#2 mul16u::mb#1 ]
Allocated (was zp ZP_WORD:43) zp ZP_WORD:38 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 ]
Allocated (was zp ZP_WORD:45) zp ZP_WORD:40 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
Allocated (was zp ZP_WORD:47) zp ZP_WORD:42 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 divr16u::return#2 div32u16u::quotient_lo#0 div16u::return#2 sin8s_gen::step#0 div16u::return#0 ]
Allocated (was zp ZP_WORD:50) zp ZP_WORD:44 [ sin8s_gen::x#2 sin8s_gen::x#1 ]
Allocated (was zp ZP_WORD:52) zp ZP_WORD:46 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
Allocated (was zp ZP_WORD:54) zp ZP_WORD:48 [ sin8s_gen::i#2 sin8s_gen::i#1 ]
Allocated (was zp ZP_BYTE:56) zp ZP_BYTE:50 [ sin8s::isUpper#10 ]
Allocated (was zp ZP_WORD:57) zp ZP_WORD:51 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
Allocated (was zp ZP_BYTE:63) zp ZP_BYTE:53 [ mulu8_sel::select#5 ]
Allocated (was zp ZP_WORD:65) zp ZP_WORD:54 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 ]
Allocated (was zp ZP_WORD:67) zp ZP_WORD:56 [ mul8u::mb#2 mul8u::mb#1 ]
Allocated (was zp ZP_BYTE:70) zp ZP_BYTE:58 [ main::sb#0 ]
Allocated (was zp ZP_WORD:71) zp ZP_WORD:59 [ main::$3 main::$11 main::$4 ]
Allocated (was zp ZP_WORD:77) zp ZP_WORD:61 [ main::sw#0 ]
Allocated (was zp ZP_DWORD:83) zp ZP_DWORD:63 [ div32u16u::return#2 sin16s_gen::step#0 div32u16u::return#0 ]
Allocated (was zp ZP_WORD:99) zp ZP_WORD:67 [ sin16s::x1#0 ]
Allocated (was zp ZP_WORD:101) zp ZP_WORD:69 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
Allocated (was zp ZP_WORD:144) zp ZP_WORD:71 [ div32u16u::quotient_hi#0 ]
Allocated (was zp ZP_BYTE:166) zp ZP_BYTE:73 [ sin8s::x1#0 ]
Allocated (was zp ZP_BYTE:170) zp ZP_BYTE:74 [ sin8s::x3#0 ]
Allocated (was zp ZP_BYTE:173) zp ZP_BYTE:75 [ sin8s::usinx#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_line_cursor = $400
  .label rem16u = $26
  .label print_char_cursor = 5
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label wavelength = $c0
    .label _3 = $3b
    .label _4 = $3b
    .label _11 = $3b
    .label sb = $3a
    .label sw = $3d
  //SEG11 [5] call sin8s_gen 
  //SEG12 [160] phi from main to sin8s_gen [phi:main->sin8s_gen]
  sin8s_gen_from_main:
    jsr sin8s_gen
  //SEG13 [6] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
    jmp b2
  //SEG14 main::@2
  b2:
  //SEG15 [7] call sin16s_gen 
  //SEG16 [58] phi from main::@2 to sin16s_gen [phi:main::@2->sin16s_gen]
  sin16s_gen_from_b2:
    jsr sin16s_gen
  //SEG17 [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG18 main::@3
  b3:
  //SEG19 [9] call print_cls 
  //SEG20 [52] phi from main::@3 to print_cls [phi:main::@3->print_cls]
  print_cls_from_b3:
    jsr print_cls
  //SEG21 [10] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG22 [10] phi (byte*) print_char_cursor#42 = (const byte*) print_line_cursor#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG23 [10] phi (byte) main::i#2 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG24 [10] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  b1_from_b5:
  //SEG25 [10] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#19 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG26 [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@1#1] -- register_copy 
    jmp b1
  //SEG27 main::@1
  b1:
  //SEG28 [11] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintabb#0 + (byte) main::i#2) -- vbsz1=pbsc1_derefidx_vbuxx 
    lda sintabb,x
    sta sb
  //SEG29 [12] (word~) main::$3 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuxx 
    txa
    sta _3
    lda #0
    sta _3+1
  //SEG30 [13] (word~) main::$11 ← (word~) main::$3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl _11
    rol _11+1
  //SEG31 [14] (signed word*~) main::$4 ← (const signed word[$c0]) main::sintabw#0 + (word~) main::$11 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda _4
    adc #<sintabw
    sta _4
    lda _4+1
    adc #>sintabw
    sta _4+1
  //SEG32 [15] (signed word) main::sw#0 ← *((signed word*~) main::$4) -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (_4),y
    sta sw
    iny
    lda (_4),y
    sta sw+1
  //SEG33 [16] (byte~) main::$5 ← > (signed word) main::sw#0 -- vbuaa=_hi_vwsz1 
    lda sw+1
  //SEG34 [17] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$5 -- vbsaa=vbsz1_minus_vbsaa 
    eor #$ff
    sec
    adc sb
  //SEG35 [18] (signed byte) print_sbyte::b#1 ← (signed byte) main::sd#0 -- vbsz1=vbsaa 
    sta print_sbyte.b
  //SEG36 [19] call print_sbyte 
    jsr print_sbyte
  //SEG37 [20] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  b4_from_b1:
    jmp b4
  //SEG38 main::@4
  b4:
  //SEG39 [21] call print_str 
  //SEG40 [25] phi from main::@4 to print_str [phi:main::@4->print_str]
  print_str_from_b4:
    jsr print_str
    jmp b5
  //SEG41 main::@5
  b5:
  //SEG42 [22] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG43 [23] if((byte) main::i#1!=(byte) $c0) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c0
    bne b1_from_b5
    jmp breturn
  //SEG44 main::@return
  breturn:
  //SEG45 [24] return 
    rts
    str: .text "  @"
    sintabb: .fill $c0, 0
    sintabw: .fill 2*$c0, 0
}
//SEG46 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(2) str)
print_str: {
    .label str = 2
  //SEG47 [26] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  b1_from_print_str:
  //SEG48 [26] phi (byte*) print_char_cursor#19 = (byte*) print_char_cursor#10 [phi:print_str->print_str::@1#0] -- register_copy 
  //SEG49 [26] phi (byte*) print_str::str#2 = (const string) main::str [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<main.str
    sta str
    lda #>main.str
    sta str+1
    jmp b1
  //SEG50 print_str::@1
  b1:
  //SEG51 [27] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG52 print_str::@return
  breturn:
  //SEG53 [28] return 
    rts
  //SEG54 print_str::@2
  b2:
  //SEG55 [29] *((byte*) print_char_cursor#19) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG56 [30] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#19 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG57 [31] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG58 [26] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  b1_from_b2:
  //SEG59 [26] phi (byte*) print_char_cursor#19 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG60 [26] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}
//SEG61 print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage(4) b)
print_sbyte: {
    .label b = 4
  //SEG62 [32] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda b
    bmi b1_from_print_sbyte
  //SEG63 [33] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  b3_from_print_sbyte:
    jmp b3
  //SEG64 print_sbyte::@3
  b3:
  //SEG65 [34] call print_char 
  //SEG66 [41] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  print_char_from_b3:
  //SEG67 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#42 [phi:print_sbyte::@3->print_char#0] -- register_copy 
  //SEG68 [41] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG69 [35] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG70 [35] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    jmp b2
  //SEG71 print_sbyte::@2
  b2:
  //SEG72 [36] call print_byte 
    jsr print_byte
    jmp breturn
  //SEG73 print_sbyte::@return
  breturn:
  //SEG74 [37] return 
    rts
  //SEG75 [38] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  b1_from_print_sbyte:
    jmp b1
  //SEG76 print_sbyte::@1
  b1:
  //SEG77 [39] call print_char 
  //SEG78 [41] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  print_char_from_b1:
  //SEG79 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#42 [phi:print_sbyte::@1->print_char#0] -- register_copy 
  //SEG80 [41] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG81 print_sbyte::@4
  b4:
  //SEG82 [40] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
    jmp b2_from_b4
}
//SEG83 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG84 [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG85 [43] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#28 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG86 print_char::@return
  breturn:
  //SEG87 [44] return 
    rts
}
//SEG88 print_byte
// Print a byte as HEX
print_byte: {
  //SEG89 [45] (byte~) print_byte::$0 ← (byte)(signed byte) print_sbyte::b#4 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda print_sbyte.b
    lsr
    lsr
    lsr
    lsr
  //SEG90 [46] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG91 [47] call print_char 
  //SEG92 [41] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG93 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#10 [phi:print_byte->print_char#0] -- register_copy 
  //SEG94 [41] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG95 print_byte::@1
  b1:
  //SEG96 [48] (byte~) print_byte::$2 ← (byte)(signed byte) print_sbyte::b#4 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and print_sbyte.b
  //SEG97 [49] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG98 [50] call print_char 
  //SEG99 [41] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG100 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG101 [41] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG102 print_byte::@return
  breturn:
  //SEG103 [51] return 
    rts
}
//SEG104 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 7
  //SEG105 [53] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG106 [53] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
    jmp b1
  //SEG107 [53] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG108 [53] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG109 print_cls::@1
  b1:
  //SEG110 [54] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG111 [55] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG112 [56] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1_from_b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG113 print_cls::@return
  breturn:
  //SEG114 [57] return 
    rts
}
//SEG115 sin16s_gen
// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen(signed word* zeropage($d) sintab)
sin16s_gen: {
    .label _1 = $16
    .label step = $3f
    .label sintab = $d
    .label x = 9
    .label i = $f
  //SEG116 [59] call div32u16u 
  //SEG117 [132] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
  div32u16u_from_sin16s_gen:
    jsr div32u16u
  //SEG118 [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
    jmp b2
  //SEG119 sin16s_gen::@2
  b2:
  //SEG120 [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  //SEG121 [62] phi from sin16s_gen::@2 to sin16s_gen::@1 [phi:sin16s_gen::@2->sin16s_gen::@1]
  b1_from_b2:
  //SEG122 [62] phi (word) sin16s_gen::i#2 = (byte) 0 [phi:sin16s_gen::@2->sin16s_gen::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG123 [62] phi (signed word*) sin16s_gen::sintab#2 = (const signed word[$c0]) main::sintabw#0 [phi:sin16s_gen::@2->sin16s_gen::@1#1] -- pwsz1=pwsc1 
    lda #<main.sintabw
    sta sintab
    lda #>main.sintabw
    sta sintab+1
  //SEG124 [62] phi (dword) sin16s_gen::x#2 = (byte) 0 [phi:sin16s_gen::@2->sin16s_gen::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    sta x+2
    sta x+3
    jmp b1
  // u[4.28]
  //SEG125 [62] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
  b1_from_b3:
  //SEG126 [62] phi (word) sin16s_gen::i#2 = (word) sin16s_gen::i#1 [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- register_copy 
  //SEG127 [62] phi (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- register_copy 
  //SEG128 [62] phi (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#1 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- register_copy 
    jmp b1
  //SEG129 sin16s_gen::@1
  b1:
  //SEG130 [63] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
  //SEG131 [64] call sin16s 
    jsr sin16s
  //SEG132 [65] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
    jmp b3
  //SEG133 sin16s_gen::@3
  b3:
  //SEG134 [66] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0
  //SEG135 [67] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _1
    sta (sintab),y
    iny
    lda _1+1
    sta (sintab),y
  //SEG136 [68] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc sintab
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG137 [69] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG138 [70] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG139 [71] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1_from_b3
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1_from_b3
  !:
    jmp breturn
  //SEG140 sin16s_gen::@return
  breturn:
  //SEG141 [72] return 
    rts
}
//SEG142 sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($12) x)
sin16s: {
    .label _4 = $12
    .label x = $12
    .label return = $16
    .label x1 = $43
    .label x2 = $18
    .label x3 = $18
    .label x3_6 = $45
    .label usinx = $16
    .label x4 = $18
    .label x5 = $45
    .label x5_128 = $45
    .label sinx = $16
    .label isUpper = $11
  //SEG143 [73] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b1_from_sin16s
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b1_from_sin16s
  !:
    jmp b4
  //SEG144 sin16s::@4
  b4:
  //SEG145 [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
  //SEG146 [75] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  b1_from_b4:
  //SEG147 [75] phi (byte) sin16s::isUpper#2 = (byte) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG148 [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG149 [75] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b1_from_sin16s:
  //SEG150 [75] phi (byte) sin16s::isUpper#2 = (byte) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG151 [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG152 sin16s::@1
  b1:
  //SEG153 [76] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2_from_b1
  !:
    jmp b5
  //SEG154 sin16s::@5
  b5:
  //SEG155 [77] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
  //SEG156 [78] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG157 [78] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp b2
  //SEG158 sin16s::@2
  b2:
  //SEG159 [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 -- vduz1=vduz1_rol_3 
    ldy #3
  !:
    asl _4
    rol _4+1
    rol _4+2
    rol _4+3
    dey
    bne !-
  //SEG160 [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 -- vwuz1=_hi_vduz2 
    lda _4+2
    sta x1
    lda _4+3
    sta x1+1
  //SEG161 [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG162 [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG163 [83] call mulu16_sel 
  //SEG164 [113] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from_b2:
  //SEG165 [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG166 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
  //SEG167 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG168 [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
    jmp b7
  //SEG169 sin16s::@7
  b7:
  //SEG170 [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta x2
    lda mulu16_sel.return+1
    sta x2+1
  //SEG171 [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  //SEG172 [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG173 [88] call mulu16_sel 
  //SEG174 [113] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
  mulu16_sel_from_b7:
  //SEG175 [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG176 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
  //SEG177 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG178 [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_1
    lda mulu16_sel.return+1
    sta mulu16_sel.return_1+1
    jmp b8
  //SEG179 sin16s::@8
  b8:
  //SEG180 [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  //SEG181 [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  //SEG182 [92] call mulu16_sel 
  //SEG183 [113] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from_b8:
  //SEG184 [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG185 [113] phi (word) mulu16_sel::v2#5 = (word)(number) $10000/(number) 6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG186 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG187 [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
    jmp b9
  //SEG188 sin16s::@9
  b9:
  //SEG189 [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  //SEG190 [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG191 [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  //SEG192 [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG193 [98] call mulu16_sel 
  //SEG194 [113] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from_b9:
  //SEG195 [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG196 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
  //SEG197 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG198 [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_10
    lda mulu16_sel.return+1
    sta mulu16_sel.return_10+1
    jmp b10
  //SEG199 sin16s::@10
  b10:
  //SEG200 [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  //SEG201 [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  //SEG202 [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG203 [103] call mulu16_sel 
  //SEG204 [113] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from_b10:
  //SEG205 [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG206 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
  //SEG207 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG208 [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
    jmp b11
  //SEG209 sin16s::@11
  b11:
  //SEG210 [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  //SEG211 [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 -- vwuz1=vwuz1_ror_4 
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
  //SEG212 [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda usinx
    clc
    adc x5_128
    sta usinx
    lda usinx+1
    adc x5_128+1
    sta usinx+1
  //SEG213 [108] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b12
    jmp b6
  //SEG214 sin16s::@6
  b6:
  //SEG215 [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda sinx
    eor #$ff
    adc #0
    sta sinx
    lda sinx+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG216 [110] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
  b3_from_b12:
  b3_from_b6:
  //SEG217 [110] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp b3
  //SEG218 sin16s::@3
  b3:
    jmp breturn
  //SEG219 sin16s::@return
  breturn:
  //SEG220 [111] return 
    rts
  //SEG221 sin16s::@12
  b12:
  //SEG222 [112] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
    jmp b3_from_b12
}
//SEG223 mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($18) v1, word zeropage($1a) v2, byte register(X) select)
mulu16_sel: {
    .label _0 = $1e
    .label _1 = $1e
    .label v1 = $18
    .label v2 = $1a
    .label return = $45
    .label return_1 = $18
    .label return_10 = $18
  //SEG224 [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
  //SEG225 [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5
  //SEG226 [116] call mul16u 
  //SEG227 [122] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
  mul16u_from_mulu16_sel:
    jsr mul16u
  //SEG228 [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2
    jmp b1
  //SEG229 mulu16_sel::@1
  b1:
  //SEG230 [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  //SEG231 [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
  //SEG232 [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return
    lda _1+3
    sta return+1
    jmp breturn
  //SEG233 mulu16_sel::@return
  breturn:
  //SEG234 [121] return 
    rts
}
//SEG235 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($1c) a, word zeropage($1a) b)
mul16u: {
    .label a = $1c
    .label mb = $22
    .label res = $1e
    .label b = $1a
    .label return = $1e
  //SEG236 [123] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  b1_from_mul16u:
  //SEG237 [123] phi (dword) mul16u::mb#2 = (word) mul16u::b#0 [phi:mul16u->mul16u::@1#0] -- vduz1=vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG238 [123] phi (dword) mul16u::res#2 = (byte) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
    sta res+2
    sta res+3
  //SEG239 [123] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp b1
  //SEG240 mul16u::@1
  b1:
  //SEG241 [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    jmp breturn
  //SEG242 mul16u::@return
  breturn:
  //SEG243 [125] return 
    rts
  //SEG244 mul16u::@2
  b2:
  //SEG245 [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda a
    and #1
  //SEG246 [127] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3_from_b2
    jmp b4
  //SEG247 mul16u::@4
  b4:
  //SEG248 [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG249 [129] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG250 [129] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp b3
  //SEG251 mul16u::@3
  b3:
  //SEG252 [130] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr a+1
    ror a
  //SEG253 [131] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG254 [123] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  b1_from_b3:
  //SEG255 [123] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
  //SEG256 [123] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
  //SEG257 [123] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG258 div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $47
    .label quotient_lo = $2a
    .label return = $3f
  //SEG259 [133] call divr16u 
  //SEG260 [142] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
  //SEG261 [142] phi (word) divr16u::dividend#6 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
  //SEG262 [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    lda #0
    sta divr16u.rem+1
    jsr divr16u
  //SEG263 [134] (word) divr16u::return#3 ← (word) divr16u::return#0
    jmp b1
  //SEG264 div32u16u::@1
  b1:
  //SEG265 [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda divr16u.return
    sta quotient_hi
    lda divr16u.return+1
    sta quotient_hi+1
  //SEG266 [136] (word) divr16u::rem#5 ← (word) rem16u#1
  //SEG267 [137] call divr16u 
  //SEG268 [142] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  divr16u_from_b1:
  //SEG269 [142] phi (word) divr16u::dividend#6 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
  //SEG270 [142] phi (word) divr16u::rem#11 = (word) divr16u::rem#5 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG271 [138] (word) divr16u::return#4 ← (word) divr16u::return#0
    jmp b2
  //SEG272 div32u16u::@2
  b2:
  //SEG273 [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4
  //SEG274 [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
    jmp breturn
  //SEG275 div32u16u::@return
  breturn:
  //SEG276 [141] return 
    rts
}
//SEG277 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($28) dividend, word zeropage($26) rem)
divr16u: {
    .label rem = $26
    .label dividend = $28
    .label quotient = $2a
    .label return = $2a
  //SEG278 [143] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG279 [143] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG280 [143] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG281 [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#6 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG282 [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#11 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG283 [143] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG284 [143] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG285 [143] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG286 [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG287 [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG288 divr16u::@1
  b1:
  //SEG289 [144] (word) divr16u::rem#0 ← (word) divr16u::rem#6 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG290 [145] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG291 [146] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG292 [147] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG293 divr16u::@4
  b4:
  //SEG294 [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG295 [149] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG296 [149] phi (word) divr16u::rem#7 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG297 divr16u::@2
  b2:
  //SEG298 [150] (word) divr16u::dividend#0 ← (word) divr16u::dividend#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG299 [151] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG300 [152] if((word) divr16u::rem#7<(const word) main::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.wavelength
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<main.wavelength
    bcc b3_from_b2
  !:
    jmp b5
  //SEG301 divr16u::@5
  b5:
  //SEG302 [153] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG303 [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.wavelength
    sta rem
    lda rem+1
    sbc #>main.wavelength
    sta rem+1
  //SEG304 [155] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG305 [155] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG306 [155] phi (word) divr16u::rem#10 = (word) divr16u::rem#7 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG307 divr16u::@3
  b3:
  //SEG308 [156] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG309 [157] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp b6
  //SEG310 divr16u::@6
  b6:
  //SEG311 [158] (word) rem16u#1 ← (word) divr16u::rem#10
    jmp breturn
  //SEG312 divr16u::@return
  breturn:
  //SEG313 [159] return 
    rts
}
//SEG314 sin8s_gen
// Generate signed byte sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin8s_gen(signed byte* zeropage($2e) sintab)
sin8s_gen: {
    .label step = $2a
    .label sintab = $2e
    .label x = $2c
    .label i = $30
  //SEG315 [161] call div16u 
  //SEG316 [237] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
  div16u_from_sin8s_gen:
    jsr div16u
  //SEG317 [162] (word) div16u::return#2 ← (word) div16u::return#0
    jmp b2
  //SEG318 sin8s_gen::@2
  b2:
  //SEG319 [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2
  //SEG320 [164] phi from sin8s_gen::@2 to sin8s_gen::@1 [phi:sin8s_gen::@2->sin8s_gen::@1]
  b1_from_b2:
  //SEG321 [164] phi (word) sin8s_gen::i#2 = (byte) 0 [phi:sin8s_gen::@2->sin8s_gen::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG322 [164] phi (signed byte*) sin8s_gen::sintab#2 = (const signed byte[$c0]) main::sintabb#0 [phi:sin8s_gen::@2->sin8s_gen::@1#1] -- pbsz1=pbsc1 
    lda #<main.sintabb
    sta sintab
    lda #>main.sintabb
    sta sintab+1
  //SEG323 [164] phi (word) sin8s_gen::x#2 = (byte) 0 [phi:sin8s_gen::@2->sin8s_gen::@1#2] -- vwuz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    jmp b1
  // u[4.12]
  //SEG324 [164] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
  b1_from_b3:
  //SEG325 [164] phi (word) sin8s_gen::i#2 = (word) sin8s_gen::i#1 [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- register_copy 
  //SEG326 [164] phi (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- register_copy 
  //SEG327 [164] phi (word) sin8s_gen::x#2 = (word) sin8s_gen::x#1 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- register_copy 
    jmp b1
  //SEG328 sin8s_gen::@1
  b1:
  //SEG329 [165] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda x
    sta sin8s.x
    lda x+1
    sta sin8s.x+1
  //SEG330 [166] call sin8s 
    jsr sin8s
  //SEG331 [167] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
    jmp b3
  //SEG332 sin8s_gen::@3
  b3:
  //SEG333 [168] (signed byte~) sin8s_gen::$1 ← (signed byte) sin8s::return#0
  //SEG334 [169] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$1 -- _deref_pbsz1=vbsaa 
    ldy #0
    sta (sintab),y
  //SEG335 [170] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc sintab
    bne !+
    inc sintab+1
  !:
  //SEG336 [171] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
  //SEG337 [172] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG338 [173] if((word) sin8s_gen::i#1<(const word) main::wavelength#0) goto sin8s_gen::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1_from_b3
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1_from_b3
  !:
    jmp breturn
  //SEG339 sin8s_gen::@return
  breturn:
  //SEG340 [174] return 
    rts
}
//SEG341 sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage($33) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label _4 = $33
    .label x = $33
    .label x1 = $49
    .label x3 = $4a
    .label usinx = $4b
    .label isUpper = $32
  //SEG342 [175] if((word) sin8s::x#0<(const word) PI_u4f12#0) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b1_from_sin8s
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b1_from_sin8s
  !:
    jmp b5
  //SEG343 sin8s::@5
  b5:
  //SEG344 [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG345 [177] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  b1_from_b5:
  //SEG346 [177] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG347 [177] phi (word) sin8s::x#4 = (word) sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG348 [177] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b1_from_sin8s:
  //SEG349 [177] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG350 [177] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG351 sin8s::@1
  b1:
  //SEG352 [178] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2_from_b1
  !:
    jmp b6
  //SEG353 sin8s::@6
  b6:
  //SEG354 [179] (word) sin8s::x#2 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG355 [180] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  b2_from_b1:
  b2_from_b6:
  //SEG356 [180] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp b2
  //SEG357 sin8s::@2
  b2:
  //SEG358 [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _4
    rol _4+1
    asl _4
    rol _4+1
    asl _4
    rol _4+1
  //SEG359 [182] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda _4+1
    sta x1
  //SEG360 [183] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    ldx x1
  //SEG361 [184] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG362 [185] call mulu8_sel 
  //SEG363 [218] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from_b2:
  //SEG364 [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG365 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
  //SEG366 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG367 [186] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
    jmp b9
  //SEG368 sin8s::@9
  b9:
  //SEG369 [187] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  //SEG370 [188] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
  //SEG371 [189] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG372 [190] call mulu8_sel 
  //SEG373 [218] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from_b9:
  //SEG374 [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG375 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
  //SEG376 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG377 [191] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
    jmp b10
  //SEG378 sin8s::@10
  b10:
  //SEG379 [192] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta x3
  //SEG380 [193] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx x3
  //SEG381 [194] call mulu8_sel 
  //SEG382 [218] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from_b10:
  //SEG383 [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG384 [218] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6#0 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
  //SEG385 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG386 [195] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
    jmp b11
  //SEG387 sin8s::@11
  b11:
  //SEG388 [196] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  //SEG389 [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc x1
    sta usinx
  //SEG390 [198] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx x3
  //SEG391 [199] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG392 [200] call mulu8_sel 
  //SEG393 [218] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from_b11:
  //SEG394 [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG395 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
  //SEG396 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG397 [201] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
    jmp b12
  //SEG398 sin8s::@12
  b12:
  //SEG399 [202] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  //SEG400 [203] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
  //SEG401 [204] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG402 [205] call mulu8_sel 
  //SEG403 [218] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from_b12:
  //SEG404 [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG405 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
  //SEG406 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG407 [206] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
    jmp b13
  //SEG408 sin8s::@13
  b13:
  //SEG409 [207] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  //SEG410 [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
  //SEG411 [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc usinx
    tax
  //SEG412 [210] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc b3_from_b13
    jmp b7
  //SEG413 sin8s::@7
  b7:
  //SEG414 [211] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
  //SEG415 [212] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  b3_from_b13:
  b3_from_b7:
  //SEG416 [212] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp b3
  //SEG417 sin8s::@3
  b3:
  //SEG418 [213] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b14
    jmp b8
  //SEG419 sin8s::@8
  b8:
  //SEG420 [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG421 [215] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  b4_from_b14:
  b4_from_b8:
  //SEG422 [215] phi (signed byte) sin8s::return#1 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp b4
  //SEG423 sin8s::@4
  b4:
    jmp breturn
  //SEG424 sin8s::@return
  breturn:
  //SEG425 [216] return 
    rts
  //SEG426 sin8s::@14
  b14:
  //SEG427 [217] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    jmp b4_from_b14
}
//SEG428 mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zeropage($35) select)
mulu8_sel: {
    .label _0 = $36
    .label _1 = $36
    .label select = $35
  //SEG429 [219] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
  //SEG430 [220] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
  //SEG431 [221] call mul8u 
  //SEG432 [227] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
    jsr mul8u
  //SEG433 [222] (word) mul8u::return#2 ← (word) mul8u::res#2
    jmp b1
  //SEG434 mulu8_sel::@1
  b1:
  //SEG435 [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
  //SEG436 [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy select
    beq !e+
  !:
    asl _1
    rol _1+1
    dey
    bne !-
  !e:
  //SEG437 [225] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda _1+1
    jmp breturn
  //SEG438 mulu8_sel::@return
  breturn:
  //SEG439 [226] return 
    rts
}
//SEG440 mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $38
    .label res = $36
    .label return = $36
  //SEG441 [228] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  b1_from_mul8u:
  //SEG442 [228] phi (word) mul8u::mb#2 = (byte) mul8u::b#0 [phi:mul8u->mul8u::@1#0] -- vwuz1=vbuaa 
    sta mb
    lda #0
    sta mb+1
  //SEG443 [228] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
  //SEG444 [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp b1
  //SEG445 mul8u::@1
  b1:
  //SEG446 [229] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b2
    jmp breturn
  //SEG447 mul8u::@return
  breturn:
  //SEG448 [230] return 
    rts
  //SEG449 mul8u::@2
  b2:
  //SEG450 [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG451 [232] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3_from_b2
    jmp b4
  //SEG452 mul8u::@4
  b4:
  //SEG453 [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG454 [234] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG455 [234] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp b3
  //SEG456 mul8u::@3
  b3:
  //SEG457 [235] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
  //SEG458 [236] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG459 [228] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  b1_from_b3:
  //SEG460 [228] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
  //SEG461 [228] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
  //SEG462 [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG463 div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $2a
  //SEG464 [238] call divr16u 
  //SEG465 [142] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
  //SEG466 [142] phi (word) divr16u::dividend#6 = (const word) PI2_u4f12#0 [phi:div16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta divr16u.dividend
    lda #>PI2_u4f12
    sta divr16u.dividend+1
  //SEG467 [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    lda #0
    sta divr16u.rem+1
    jsr divr16u
  //SEG468 [239] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp b1
  //SEG469 div16u::@1
  b1:
  //SEG470 [240] (word) div16u::return#0 ← (word) divr16u::return#2
    jmp breturn
  //SEG471 div16u::@return
  breturn:
  //SEG472 [241] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b8
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda sw+1
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction lda #0 with TXA
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldx x1 with TAX
Replacing instruction ldy x1 with TAY
Replacing instruction ldx x3 with TAX
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b5 with b1
Replacing label b1_from_print_sbyte with b1
Replacing label b2_from_b4 with b2
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b3 with b1
Replacing label b1_from_b3 with b1
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b12 with b3
Replacing label b3_from_b2 with b3
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b3 with b1
Replacing label b1_from_b3 with b1
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b13 with b3
Replacing label b4_from_b14 with b4
Replacing label b3_from_b2 with b3
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b2_from_main:
Removing instruction sin16s_gen_from_b2:
Removing instruction b3_from_b2:
Removing instruction print_cls_from_b3:
Removing instruction b1_from_b5:
Removing instruction b4_from_b1:
Removing instruction print_str_from_b4:
Removing instruction b3_from_print_sbyte:
Removing instruction print_char_from_b3:
Removing instruction b2_from_b3:
Removing instruction b2_from_b4:
Removing instruction b1_from_print_sbyte:
Removing instruction print_char_from_b1:
Removing instruction b1_from_b1:
Removing instruction b1_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction mulu16_sel_from_b8:
Removing instruction b3_from_b12:
Removing instruction b3_from_b6:
Removing instruction breturn:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction breturn:
Removing instruction b1_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b6:
Removing instruction b3_from_b13:
Removing instruction b3_from_b7:
Removing instruction b4_from_b14:
Removing instruction b4_from_b8:
Removing instruction breturn:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction sin8s_gen_from_main:
Removing instruction b2:
Removing instruction b3:
Removing instruction b1_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_print_str:
Removing instruction breturn:
Removing instruction b1_from_b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b4:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Removing instruction div32u16u_from_sin16s_gen:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction b5:
Removing instruction mulu16_sel_from_b2:
Removing instruction b7:
Removing instruction mulu16_sel_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction mulu16_sel_from_b9:
Removing instruction b10:
Removing instruction mulu16_sel_from_b10:
Removing instruction b11:
Removing instruction b6:
Removing instruction mul16u_from_mulu16_sel:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1_from_mul16u:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b3:
Removing instruction divr16u_from_div32u16u:
Removing instruction b1:
Removing instruction divr16u_from_b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction div16u_from_sin8s_gen:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b5:
Removing instruction b1_from_b5:
Removing instruction b6:
Removing instruction mulu8_sel_from_b2:
Removing instruction b9:
Removing instruction mulu8_sel_from_b9:
Removing instruction b10:
Removing instruction mulu8_sel_from_b10:
Removing instruction b11:
Removing instruction mulu8_sel_from_b11:
Removing instruction b12:
Removing instruction mulu8_sel_from_b12:
Removing instruction b13:
Removing instruction b7:
Removing instruction b8:
Removing instruction mul8u_from_mulu8_sel:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1_from_mul8u:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b3:
Removing instruction divr16u_from_div16u:
Removing instruction b1:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to b3 in beq b12
Replacing jump to rts with rts in jmp b3
Replacing jump to rts with rts in jmp b4
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b1_from_sin16s to b4
Relabelling long label b1_from_sin8s to b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b12:
Removing instruction b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(word) PI2_u4f12
(const word) PI2_u4f12#0 PI2_u4f12 = (word) $6488
(dword) PI2_u4f28
(const dword) PI2_u4f28#0 PI2_u4f28 = (dword) $6487ed51
(word) PI_HALF_u4f12
(const word) PI_HALF_u4f12#0 PI_HALF_u4f12 = (word) $1922
(dword) PI_HALF_u4f28
(const dword) PI_HALF_u4f28#0 PI_HALF_u4f28 = (dword) $1921fb54
(word) PI_u4f12
(const word) PI_u4f12#0 PI_u4f12 = (word) $3244
(dword) PI_u4f28
(const dword) PI_u4f28#0 PI_u4f28 = (dword) $3243f6a9
(const byte) SIZEOF_SIGNED_WORD SIZEOF_SIGNED_WORD = (byte) 2
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 return zp ZP_WORD:42 1.3333333333333333
(word) div16u::return#2 return zp ZP_WORD:42 4.0
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(label) div32u16u::@1
(label) div32u16u::@2
(label) div32u16u::@return
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 quotient_hi zp ZP_WORD:71 0.8
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 quotient_lo zp ZP_WORD:42 4.0
(dword) div32u16u::return
(dword) div32u16u::return#0 return zp ZP_DWORD:63 1.3333333333333333
(dword) div32u16u::return#2 return zp ZP_DWORD:63 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:40 2.75
(word) divr16u::dividend#4 dividend zp ZP_WORD:40 5.0
(word) divr16u::dividend#6 dividend zp ZP_WORD:40 2.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:42 16.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:42 11.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:42 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:38 8.25
(word) divr16u::rem#1 rem zp ZP_WORD:38 22.0
(word) divr16u::rem#10 rem zp ZP_WORD:38 11.666666666666666
(word) divr16u::rem#11 rem zp ZP_WORD:38 4.0
(word) divr16u::rem#2 rem zp ZP_WORD:38 22.0
(word) divr16u::rem#5 rem zp ZP_WORD:38 4.0
(word) divr16u::rem#6 rem zp ZP_WORD:38 24.0
(word) divr16u::rem#7 rem zp ZP_WORD:38 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:42 4.875
(word) divr16u::return#2 return zp ZP_WORD:42 4.0
(word) divr16u::return#3 return zp ZP_WORD:42 4.0
(word) divr16u::return#4 return zp ZP_WORD:42 4.0
(void()) main()
(word~) main::$11 $11 zp ZP_WORD:59 22.0
(word~) main::$3 $3 zp ZP_WORD:59 22.0
(signed word*~) main::$4 $4 zp ZP_WORD:59 22.0
(byte~) main::$5 reg byte a 11.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 2.75
(signed byte) main::sb
(signed byte) main::sb#0 sb zp ZP_BYTE:58 3.6666666666666665
(signed byte) main::sd
(signed byte) main::sd#0 reg byte a 22.0
(signed byte[$c0]) main::sintabb
(const signed byte[$c0]) main::sintabb#0 sintabb = { fill( $c0, 0) }
(signed word[$c0]) main::sintabw
(const signed word[$c0]) main::sintabw#0 sintabw = { fill( $c0, 0) }
(const string) main::str str = (string) "  @"
(signed word) main::sw
(signed word) main::sw#0 sw zp ZP_WORD:61 22.0
(word) main::wavelength
(const word) main::wavelength#0 wavelength = (byte) $c0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte~) mul16u::$1 reg byte a 202.0
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0 a zp ZP_WORD:28 101.0
(word) mul16u::a#1 a zp ZP_WORD:28 1.3333333333333333
(word) mul16u::a#2 a zp ZP_WORD:28 67.66666666666666
(word) mul16u::b
(word) mul16u::b#0 b zp ZP_WORD:26 2.0
(dword) mul16u::mb
(dword) mul16u::mb#1 mb zp ZP_DWORD:34 202.0
(dword) mul16u::mb#2 mb zp ZP_DWORD:34 43.57142857142858
(dword) mul16u::res
(dword) mul16u::res#1 res zp ZP_DWORD:30 202.0
(dword) mul16u::res#2 res zp ZP_DWORD:30 50.83333333333333
(dword) mul16u::res#6 res zp ZP_DWORD:30 101.0
(dword) mul16u::return
(dword) mul16u::return#2 return zp ZP_DWORD:30 4.0
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 202.0
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 101.0
(byte) mul8u::a#1 reg byte x 1.3333333333333333
(byte) mul8u::a#2 reg byte x 67.66666666666666
(byte) mul8u::b
(byte) mul8u::b#0 reg byte a 2.0
(word) mul8u::mb
(word) mul8u::mb#1 mb zp ZP_WORD:56 202.0
(word) mul8u::mb#2 mb zp ZP_WORD:56 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 res zp ZP_WORD:54 202.0
(word) mul8u::res#2 res zp ZP_WORD:54 50.83333333333333
(word) mul8u::res#6 res zp ZP_WORD:54 101.0
(word) mul8u::return
(word) mul8u::return#2 return zp ZP_WORD:54 4.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 $0 zp ZP_DWORD:30 4.0
(dword~) mulu16_sel::$1 $1 zp ZP_DWORD:30 4.0
(label) mulu16_sel::@1
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0 return zp ZP_WORD:69 4.0
(word) mulu16_sel::return#1 return#1 zp ZP_WORD:24 4.0
(word) mulu16_sel::return#10 return#10 zp ZP_WORD:24 4.0
(word) mulu16_sel::return#11 return zp ZP_WORD:69 4.0
(word) mulu16_sel::return#12 return zp ZP_WORD:69 1.714285714285714
(word) mulu16_sel::return#2 return zp ZP_WORD:69 4.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#5 reg byte x 0.3333333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 v1 zp ZP_WORD:24 2.0
(word) mulu16_sel::v1#1 v1 zp ZP_WORD:24 2.0
(word) mulu16_sel::v1#2 v1 zp ZP_WORD:24 4.0
(word) mulu16_sel::v1#3 v1 zp ZP_WORD:24 2.0
(word) mulu16_sel::v1#4 v1 zp ZP_WORD:24 2.0
(word) mulu16_sel::v1#5 v1 zp ZP_WORD:24 12.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 v2 zp ZP_WORD:26 4.0
(word) mulu16_sel::v2#1 v2 zp ZP_WORD:26 4.0
(word) mulu16_sel::v2#3 v2 zp ZP_WORD:26 4.0
(word) mulu16_sel::v2#4 v2 zp ZP_WORD:26 4.0
(word) mulu16_sel::v2#5 v2 zp ZP_WORD:26 5.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 $0 zp ZP_WORD:54 4.0
(word~) mulu8_sel::$1 $1 zp ZP_WORD:54 4.0
(label) mulu8_sel::@1
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 reg byte a 4.0
(byte) mulu8_sel::return#1 reg byte a 4.0
(byte) mulu8_sel::return#10 reg byte a 4.0
(byte) mulu8_sel::return#11 reg byte a 4.0
(byte) mulu8_sel::return#12 reg byte a 1.714285714285714
(byte) mulu8_sel::return#2 reg byte a 4.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 select zp ZP_BYTE:53 0.3333333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 reg byte x 2.0
(byte) mulu8_sel::v1#1 reg byte x 2.0
(byte) mulu8_sel::v1#2 reg byte x 4.0
(byte) mulu8_sel::v1#3 reg byte x 2.0
(byte) mulu8_sel::v1#4 reg byte x 2.0
(byte) mulu8_sel::v1#5 reg byte x 12.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 reg byte y 4.0
(byte) mulu8_sel::v2#1 reg byte y 4.0
(byte) mulu8_sel::v2#3 reg byte y 4.0
(byte) mulu8_sel::v2#4 reg byte y 4.0
(byte) mulu8_sel::v2#5 reg byte y 5.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:5 101.0
(byte*) print_char_cursor#10 print_char_cursor zp ZP_WORD:5 0.4444444444444444
(byte*) print_char_cursor#19 print_char_cursor zp ZP_WORD:5 45.142857142857146
(byte*) print_char_cursor#28 print_char_cursor zp ZP_WORD:5 6.0
(byte*) print_char_cursor#42 print_char_cursor zp ZP_WORD:5 1.25
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:7 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:7 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(const byte*) print_line_cursor#0 print_line_cursor = (byte*) 1024
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp ZP_BYTE:4 4.0
(signed byte) print_sbyte::b#1 b zp ZP_BYTE:4 2.8333333333333335
(signed byte) print_sbyte::b#4 b zp ZP_BYTE:4 1.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:2 202.0
(byte*) print_str::str#2 str zp ZP_WORD:2 101.0
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:38 0.8
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$4 $4 zp ZP_DWORD:18 4.0
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@7
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 isUpper zp ZP_BYTE:17 0.06060606060606061
(signed word) sin16s::return
(signed word) sin16s::return#0 return zp ZP_WORD:22 22.0
(signed word) sin16s::return#1 return zp ZP_WORD:22 5.0
(signed word~) sin16s::return#5 return zp ZP_WORD:22 4.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 sinx zp ZP_WORD:22 4.0
(word) sin16s::usinx
(word) sin16s::usinx#0 usinx zp ZP_WORD:22 0.3333333333333333
(word) sin16s::usinx#1 usinx zp ZP_WORD:22 1.0
(dword) sin16s::x
(dword) sin16s::x#0 x zp ZP_DWORD:18 8.5
(dword) sin16s::x#1 x zp ZP_DWORD:18 4.0
(dword) sin16s::x#2 x zp ZP_DWORD:18 4.0
(dword) sin16s::x#4 x zp ZP_DWORD:18 5.0
(dword) sin16s::x#6 x zp ZP_DWORD:18 6.0
(word) sin16s::x1
(word) sin16s::x1#0 x1 zp ZP_WORD:67 0.6363636363636365
(word) sin16s::x2
(word) sin16s::x2#0 x2 zp ZP_WORD:24 4.0
(word) sin16s::x3
(word) sin16s::x3#0 x3 zp ZP_WORD:24 1.0
(word) sin16s::x3_6
(word) sin16s::x3_6#0 x3_6 zp ZP_WORD:69 4.0
(word) sin16s::x4
(word) sin16s::x4#0 x4 zp ZP_WORD:24 4.0
(word) sin16s::x5
(word) sin16s::x5#0 x5 zp ZP_WORD:69 4.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 x5_128 zp ZP_WORD:69 4.0
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(signed word~) sin16s_gen::$1 $1 zp ZP_WORD:22 22.0
(label) sin16s_gen::@1
(label) sin16s_gen::@2
(label) sin16s_gen::@3
(label) sin16s_gen::@return
(word) sin16s_gen::i
(word) sin16s_gen::i#1 i zp ZP_WORD:15 16.5
(word) sin16s_gen::i#2 i zp ZP_WORD:15 2.75
(signed word*) sin16s_gen::sintab
(signed word*) sin16s_gen::sintab#0 sintab zp ZP_WORD:13 5.5
(signed word*) sin16s_gen::sintab#2 sintab zp ZP_WORD:13 5.5
(dword) sin16s_gen::step
(dword) sin16s_gen::step#0 step zp ZP_DWORD:63 1.1818181818181819
(word) sin16s_gen::wavelength
(dword) sin16s_gen::x
(dword) sin16s_gen::x#1 x zp ZP_DWORD:9 7.333333333333333
(dword) sin16s_gen::x#2 x zp ZP_DWORD:9 4.714285714285714
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 $4 zp ZP_WORD:51 4.0
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@9
(label) sin8s::@return
(byte) sin8s::DIV_6
(const byte) sin8s::DIV_6#0 DIV_6 = (byte) $2b
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 isUpper zp ZP_BYTE:50 0.05555555555555555
(signed byte) sin8s::return
(signed byte) sin8s::return#0 reg byte a 22.0
(signed byte) sin8s::return#1 reg byte a 5.0
(signed byte~) sin8s::return#5 reg byte a 4.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 reg byte a 4.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 usinx zp ZP_BYTE:75 0.3333333333333333
(byte) sin8s::usinx#1 reg byte x 4.0
(byte) sin8s::usinx#2 reg byte x 4.0
(byte) sin8s::usinx#4 reg byte x 2.0
(word) sin8s::x
(word) sin8s::x#0 x zp ZP_WORD:51 8.5
(word) sin8s::x#1 x zp ZP_WORD:51 4.0
(word) sin8s::x#2 x zp ZP_WORD:51 4.0
(word) sin8s::x#4 x zp ZP_WORD:51 5.0
(word) sin8s::x#6 x zp ZP_WORD:51 6.0
(byte) sin8s::x1
(byte) sin8s::x1#0 x1 zp ZP_BYTE:73 0.6363636363636365
(byte) sin8s::x2
(byte) sin8s::x2#0 reg byte a 4.0
(byte) sin8s::x3
(byte) sin8s::x3#0 x3 zp ZP_BYTE:74 1.0
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 reg byte a 4.0
(byte) sin8s::x4
(byte) sin8s::x4#0 reg byte a 4.0
(byte) sin8s::x5
(byte) sin8s::x5#0 reg byte a 4.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 reg byte a 4.0
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(signed byte~) sin8s_gen::$1 reg byte a 22.0
(label) sin8s_gen::@1
(label) sin8s_gen::@2
(label) sin8s_gen::@3
(label) sin8s_gen::@return
(word) sin8s_gen::i
(word) sin8s_gen::i#1 i zp ZP_WORD:48 16.5
(word) sin8s_gen::i#2 i zp ZP_WORD:48 2.75
(signed byte*) sin8s_gen::sintab
(signed byte*) sin8s_gen::sintab#0 sintab zp ZP_WORD:46 5.5
(signed byte*) sin8s_gen::sintab#2 sintab zp ZP_WORD:46 5.5
(word) sin8s_gen::step
(word) sin8s_gen::step#0 step zp ZP_WORD:42 1.1818181818181819
(word) sin8s_gen::wavelength
(word) sin8s_gen::x
(word) sin8s_gen::x#1 x zp ZP_WORD:44 7.333333333333333
(word) sin8s_gen::x#2 x zp ZP_WORD:44 4.714285714285714

reg byte x [ main::i#2 main::i#1 ]
zp ZP_WORD:2 [ print_str::str#2 print_str::str#0 ]
zp ZP_BYTE:4 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp ZP_WORD:5 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#19 print_char_cursor#10 print_char_cursor#1 ]
zp ZP_WORD:7 [ print_cls::sc#2 print_cls::sc#1 ]
zp ZP_DWORD:9 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
zp ZP_WORD:13 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
zp ZP_WORD:15 [ sin16s_gen::i#2 sin16s_gen::i#1 ]
zp ZP_BYTE:17 [ sin16s::isUpper#2 ]
zp ZP_DWORD:18 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$4 ]
zp ZP_WORD:22 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$1 sin16s::usinx#0 ]
zp ZP_WORD:24 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ]
zp ZP_WORD:26 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mul16u::b#0 ]
reg byte x [ mulu16_sel::select#5 ]
zp ZP_WORD:28 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
zp ZP_DWORD:30 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 ]
zp ZP_DWORD:34 [ mul16u::mb#2 mul16u::mb#1 ]
zp ZP_WORD:38 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 ]
zp ZP_WORD:40 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
zp ZP_WORD:42 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#4 divr16u::return#2 div32u16u::quotient_lo#0 div16u::return#2 sin8s_gen::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp ZP_WORD:44 [ sin8s_gen::x#2 sin8s_gen::x#1 ]
zp ZP_WORD:46 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
zp ZP_WORD:48 [ sin8s_gen::i#2 sin8s_gen::i#1 ]
zp ZP_BYTE:50 [ sin8s::isUpper#10 ]
zp ZP_WORD:51 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
zp ZP_BYTE:53 [ mulu8_sel::select#5 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp ZP_WORD:54 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 ]
zp ZP_WORD:56 [ mul8u::mb#2 mul8u::mb#1 ]
reg byte a [ mul8u::b#0 ]
zp ZP_BYTE:58 [ main::sb#0 ]
zp ZP_WORD:59 [ main::$3 main::$11 main::$4 ]
zp ZP_WORD:61 [ main::sw#0 ]
reg byte a [ main::$5 ]
reg byte a [ main::sd#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
zp ZP_DWORD:63 [ div32u16u::return#2 sin16s_gen::step#0 div32u16u::return#0 ]
zp ZP_WORD:67 [ sin16s::x1#0 ]
zp ZP_WORD:69 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
reg byte a [ mul16u::$1 ]
zp ZP_WORD:71 [ div32u16u::quotient_hi#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ sin8s::return#0 ]
reg byte a [ sin8s_gen::$1 ]
zp ZP_BYTE:73 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp ZP_BYTE:74 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp ZP_BYTE:75 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]


FINAL ASSEMBLER
Score: 31878

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_line_cursor = $400
  .label rem16u = $26
  .label print_char_cursor = 5
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label wavelength = $c0
    .label _3 = $3b
    .label _4 = $3b
    .label _11 = $3b
    .label sb = $3a
    .label sw = $3d
  //SEG11 [5] call sin8s_gen 
  //SEG12 [160] phi from main to sin8s_gen [phi:main->sin8s_gen]
    jsr sin8s_gen
  //SEG13 [6] phi from main to main::@2 [phi:main->main::@2]
  //SEG14 main::@2
  //SEG15 [7] call sin16s_gen 
  //SEG16 [58] phi from main::@2 to sin16s_gen [phi:main::@2->sin16s_gen]
    jsr sin16s_gen
  //SEG17 [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG18 main::@3
  //SEG19 [9] call print_cls 
  //SEG20 [52] phi from main::@3 to print_cls [phi:main::@3->print_cls]
    jsr print_cls
  //SEG21 [10] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  //SEG22 [10] phi (byte*) print_char_cursor#42 = (const byte*) print_line_cursor#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG23 [10] phi (byte) main::i#2 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG24 [10] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  //SEG25 [10] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#19 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG26 [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@1#1] -- register_copy 
  //SEG27 main::@1
  b1:
  //SEG28 [11] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintabb#0 + (byte) main::i#2) -- vbsz1=pbsc1_derefidx_vbuxx 
    lda sintabb,x
    sta sb
  //SEG29 [12] (word~) main::$3 ← (word)(byte) main::i#2 -- vwuz1=_word_vbuxx 
    txa
    sta _3
    lda #0
    sta _3+1
  //SEG30 [13] (word~) main::$11 ← (word~) main::$3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl _11
    rol _11+1
  //SEG31 [14] (signed word*~) main::$4 ← (const signed word[$c0]) main::sintabw#0 + (word~) main::$11 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda _4
    adc #<sintabw
    sta _4
    lda _4+1
    adc #>sintabw
    sta _4+1
  //SEG32 [15] (signed word) main::sw#0 ← *((signed word*~) main::$4) -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (_4),y
    sta sw
    iny
    lda (_4),y
    sta sw+1
  //SEG33 [16] (byte~) main::$5 ← > (signed word) main::sw#0 -- vbuaa=_hi_vwsz1 
  //SEG34 [17] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$5 -- vbsaa=vbsz1_minus_vbsaa 
    eor #$ff
    sec
    adc sb
  //SEG35 [18] (signed byte) print_sbyte::b#1 ← (signed byte) main::sd#0 -- vbsz1=vbsaa 
    sta print_sbyte.b
  //SEG36 [19] call print_sbyte 
    jsr print_sbyte
  //SEG37 [20] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  //SEG38 main::@4
  //SEG39 [21] call print_str 
  //SEG40 [25] phi from main::@4 to print_str [phi:main::@4->print_str]
    jsr print_str
  //SEG41 main::@5
  //SEG42 [22] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG43 [23] if((byte) main::i#1!=(byte) $c0) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c0
    bne b1
  //SEG44 main::@return
  //SEG45 [24] return 
    rts
    str: .text "  @"
    sintabb: .fill $c0, 0
    sintabw: .fill 2*$c0, 0
}
//SEG46 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(2) str)
print_str: {
    .label str = 2
  //SEG47 [26] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  //SEG48 [26] phi (byte*) print_char_cursor#19 = (byte*) print_char_cursor#10 [phi:print_str->print_str::@1#0] -- register_copy 
  //SEG49 [26] phi (byte*) print_str::str#2 = (const string) main::str [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<main.str
    sta str
    lda #>main.str
    sta str+1
  //SEG50 print_str::@1
  b1:
  //SEG51 [27] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG52 print_str::@return
  //SEG53 [28] return 
    rts
  //SEG54 print_str::@2
  b2:
  //SEG55 [29] *((byte*) print_char_cursor#19) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG56 [30] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#19 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG57 [31] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG58 [26] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  //SEG59 [26] phi (byte*) print_char_cursor#19 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG60 [26] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}
//SEG61 print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage(4) b)
print_sbyte: {
    .label b = 4
  //SEG62 [32] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda b
    bmi b1
  //SEG63 [33] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  //SEG64 print_sbyte::@3
  //SEG65 [34] call print_char 
  //SEG66 [41] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  //SEG67 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#42 [phi:print_sbyte::@3->print_char#0] -- register_copy 
  //SEG68 [41] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG69 [35] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  //SEG70 [35] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
  //SEG71 print_sbyte::@2
  b2:
  //SEG72 [36] call print_byte 
    jsr print_byte
  //SEG73 print_sbyte::@return
  //SEG74 [37] return 
    rts
  //SEG75 [38] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  //SEG76 print_sbyte::@1
  b1:
  //SEG77 [39] call print_char 
  //SEG78 [41] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  //SEG79 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#42 [phi:print_sbyte::@1->print_char#0] -- register_copy 
  //SEG80 [41] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG81 print_sbyte::@4
  //SEG82 [40] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
    jmp b2
}
//SEG83 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG84 [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG85 [43] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#28 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG86 print_char::@return
  //SEG87 [44] return 
    rts
}
//SEG88 print_byte
// Print a byte as HEX
print_byte: {
  //SEG89 [45] (byte~) print_byte::$0 ← (byte)(signed byte) print_sbyte::b#4 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda print_sbyte.b
    lsr
    lsr
    lsr
    lsr
  //SEG90 [46] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG91 [47] call print_char 
  //SEG92 [41] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG93 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#10 [phi:print_byte->print_char#0] -- register_copy 
  //SEG94 [41] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG95 print_byte::@1
  //SEG96 [48] (byte~) print_byte::$2 ← (byte)(signed byte) print_sbyte::b#4 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and print_sbyte.b
  //SEG97 [49] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG98 [50] call print_char 
  //SEG99 [41] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG100 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG101 [41] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG102 print_byte::@return
  //SEG103 [51] return 
    rts
}
//SEG104 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 7
  //SEG105 [53] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG106 [53] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
  //SEG107 [53] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG108 [53] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG109 print_cls::@1
  b1:
  //SEG110 [54] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG111 [55] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG112 [56] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1
  //SEG113 print_cls::@return
  //SEG114 [57] return 
    rts
}
//SEG115 sin16s_gen
// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen(signed word* zeropage($d) sintab)
sin16s_gen: {
    .label _1 = $16
    .label step = $3f
    .label sintab = $d
    .label x = 9
    .label i = $f
  //SEG116 [59] call div32u16u 
  //SEG117 [132] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
    jsr div32u16u
  //SEG118 [60] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  //SEG119 sin16s_gen::@2
  //SEG120 [61] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  //SEG121 [62] phi from sin16s_gen::@2 to sin16s_gen::@1 [phi:sin16s_gen::@2->sin16s_gen::@1]
  //SEG122 [62] phi (word) sin16s_gen::i#2 = (byte) 0 [phi:sin16s_gen::@2->sin16s_gen::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    sta i+1
  //SEG123 [62] phi (signed word*) sin16s_gen::sintab#2 = (const signed word[$c0]) main::sintabw#0 [phi:sin16s_gen::@2->sin16s_gen::@1#1] -- pwsz1=pwsc1 
    lda #<main.sintabw
    sta sintab
    lda #>main.sintabw
    sta sintab+1
  //SEG124 [62] phi (dword) sin16s_gen::x#2 = (byte) 0 [phi:sin16s_gen::@2->sin16s_gen::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    sta x+1
    sta x+2
    sta x+3
  // u[4.28]
  //SEG125 [62] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
  //SEG126 [62] phi (word) sin16s_gen::i#2 = (word) sin16s_gen::i#1 [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- register_copy 
  //SEG127 [62] phi (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- register_copy 
  //SEG128 [62] phi (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#1 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- register_copy 
  //SEG129 sin16s_gen::@1
  b1:
  //SEG130 [63] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
  //SEG131 [64] call sin16s 
    jsr sin16s
  //SEG132 [65] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  //SEG133 sin16s_gen::@3
  //SEG134 [66] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0
  //SEG135 [67] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _1
    sta (sintab),y
    iny
    lda _1+1
    sta (sintab),y
  //SEG136 [68] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc sintab
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG137 [69] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG138 [70] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG139 [71] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1
  !:
  //SEG140 sin16s_gen::@return
  //SEG141 [72] return 
    rts
}
//SEG142 sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($12) x)
sin16s: {
    .label _4 = $12
    .label x = $12
    .label return = $16
    .label x1 = $43
    .label x2 = $18
    .label x3 = $18
    .label x3_6 = $45
    .label usinx = $16
    .label x4 = $18
    .label x5 = $45
    .label x5_128 = $45
    .label sinx = $16
    .label isUpper = $11
  //SEG143 [73] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b4
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b4
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b4
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b4
  !:
  //SEG144 sin16s::@4
  //SEG145 [74] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
  //SEG146 [75] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  //SEG147 [75] phi (byte) sin16s::isUpper#2 = (byte) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG148 [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG149 [75] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b4:
  //SEG150 [75] phi (byte) sin16s::isUpper#2 = (byte) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG151 [75] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
  //SEG152 sin16s::@1
  b1:
  //SEG153 [76] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2
  !:
  //SEG154 sin16s::@5
  //SEG155 [77] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
  //SEG156 [78] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  //SEG157 [78] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
  //SEG158 sin16s::@2
  b2:
  //SEG159 [79] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 -- vduz1=vduz1_rol_3 
    ldy #3
  !:
    asl _4
    rol _4+1
    rol _4+2
    rol _4+3
    dey
    bne !-
  //SEG160 [80] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 -- vwuz1=_hi_vduz2 
    lda _4+2
    sta x1
    lda _4+3
    sta x1+1
  //SEG161 [81] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG162 [82] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG163 [83] call mulu16_sel 
  //SEG164 [113] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  //SEG165 [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG166 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
  //SEG167 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG168 [84] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  //SEG169 sin16s::@7
  //SEG170 [85] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta x2
    lda mulu16_sel.return+1
    sta x2+1
  //SEG171 [86] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  //SEG172 [87] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG173 [88] call mulu16_sel 
  //SEG174 [113] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
  //SEG175 [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG176 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
  //SEG177 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG178 [89] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_1
    lda mulu16_sel.return+1
    sta mulu16_sel.return_1+1
  //SEG179 sin16s::@8
  //SEG180 [90] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  //SEG181 [91] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  //SEG182 [92] call mulu16_sel 
  //SEG183 [113] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  //SEG184 [113] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG185 [113] phi (word) mulu16_sel::v2#5 = (word)(number) $10000/(number) 6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG186 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG187 [93] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  //SEG188 sin16s::@9
  //SEG189 [94] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  //SEG190 [95] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG191 [96] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  //SEG192 [97] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG193 [98] call mulu16_sel 
  //SEG194 [113] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  //SEG195 [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG196 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
  //SEG197 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG198 [99] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_10
    lda mulu16_sel.return+1
    sta mulu16_sel.return_10+1
  //SEG199 sin16s::@10
  //SEG200 [100] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  //SEG201 [101] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  //SEG202 [102] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG203 [103] call mulu16_sel 
  //SEG204 [113] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  //SEG205 [113] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG206 [113] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
  //SEG207 [113] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG208 [104] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  //SEG209 sin16s::@11
  //SEG210 [105] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  //SEG211 [106] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 -- vwuz1=vwuz1_ror_4 
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
  //SEG212 [107] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda usinx
    clc
    adc x5_128
    sta usinx
    lda usinx+1
    adc x5_128+1
    sta usinx+1
  //SEG213 [108] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b3
  //SEG214 sin16s::@6
  //SEG215 [109] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda sinx
    eor #$ff
    adc #0
    sta sinx
    lda sinx+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG216 [110] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
  //SEG217 [110] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
  //SEG218 sin16s::@3
  b3:
  //SEG219 sin16s::@return
  //SEG220 [111] return 
    rts
  //SEG221 sin16s::@12
  //SEG222 [112] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
}
//SEG223 mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($18) v1, word zeropage($1a) v2, byte register(X) select)
mulu16_sel: {
    .label _0 = $1e
    .label _1 = $1e
    .label v1 = $18
    .label v2 = $1a
    .label return = $45
    .label return_1 = $18
    .label return_10 = $18
  //SEG224 [114] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
  //SEG225 [115] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5
  //SEG226 [116] call mul16u 
  //SEG227 [122] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
    jsr mul16u
  //SEG228 [117] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  //SEG229 mulu16_sel::@1
  //SEG230 [118] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  //SEG231 [119] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
  //SEG232 [120] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return
    lda _1+3
    sta return+1
  //SEG233 mulu16_sel::@return
  //SEG234 [121] return 
    rts
}
//SEG235 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($1c) a, word zeropage($1a) b)
mul16u: {
    .label a = $1c
    .label mb = $22
    .label res = $1e
    .label b = $1a
    .label return = $1e
  //SEG236 [123] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  //SEG237 [123] phi (dword) mul16u::mb#2 = (word) mul16u::b#0 [phi:mul16u->mul16u::@1#0] -- vduz1=vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG238 [123] phi (dword) mul16u::res#2 = (byte) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    sta res
    sta res+1
    sta res+2
    sta res+3
  //SEG239 [123] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
  //SEG240 mul16u::@1
  b1:
  //SEG241 [124] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
  //SEG242 mul16u::@return
  //SEG243 [125] return 
    rts
  //SEG244 mul16u::@2
  b2:
  //SEG245 [126] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda a
    and #1
  //SEG246 [127] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
  //SEG247 mul16u::@4
  //SEG248 [128] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG249 [129] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  //SEG250 [129] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
  //SEG251 mul16u::@3
  b3:
  //SEG252 [130] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr a+1
    ror a
  //SEG253 [131] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG254 [123] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  //SEG255 [123] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
  //SEG256 [123] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
  //SEG257 [123] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG258 div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $47
    .label quotient_lo = $2a
    .label return = $3f
  //SEG259 [133] call divr16u 
  //SEG260 [142] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  //SEG261 [142] phi (word) divr16u::dividend#6 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
  //SEG262 [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    sta divr16u.rem+1
    jsr divr16u
  //SEG263 [134] (word) divr16u::return#3 ← (word) divr16u::return#0
  //SEG264 div32u16u::@1
  //SEG265 [135] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda divr16u.return
    sta quotient_hi
    lda divr16u.return+1
    sta quotient_hi+1
  //SEG266 [136] (word) divr16u::rem#5 ← (word) rem16u#1
  //SEG267 [137] call divr16u 
  //SEG268 [142] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  //SEG269 [142] phi (word) divr16u::dividend#6 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
  //SEG270 [142] phi (word) divr16u::rem#11 = (word) divr16u::rem#5 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG271 [138] (word) divr16u::return#4 ← (word) divr16u::return#0
  //SEG272 div32u16u::@2
  //SEG273 [139] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4
  //SEG274 [140] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
  //SEG275 div32u16u::@return
  //SEG276 [141] return 
    rts
}
//SEG277 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($28) dividend, word zeropage($26) rem)
divr16u: {
    .label rem = $26
    .label dividend = $28
    .label quotient = $2a
    .label return = $2a
  //SEG278 [143] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  //SEG279 [143] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG280 [143] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
  //SEG281 [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#6 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG282 [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#11 [phi:divr16u->divr16u::@1#3] -- register_copy 
  //SEG283 [143] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  //SEG284 [143] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG285 [143] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG286 [143] phi (word) divr16u::dividend#4 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG287 [143] phi (word) divr16u::rem#6 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
  //SEG288 divr16u::@1
  b1:
  //SEG289 [144] (word) divr16u::rem#0 ← (word) divr16u::rem#6 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG290 [145] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG291 [146] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG292 [147] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG293 divr16u::@4
  //SEG294 [148] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG295 [149] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  //SEG296 [149] phi (word) divr16u::rem#7 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
  //SEG297 divr16u::@2
  b2:
  //SEG298 [150] (word) divr16u::dividend#0 ← (word) divr16u::dividend#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG299 [151] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG300 [152] if((word) divr16u::rem#7<(const word) main::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.wavelength
    bcc b3
    bne !+
    lda rem
    cmp #<main.wavelength
    bcc b3
  !:
  //SEG301 divr16u::@5
  //SEG302 [153] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG303 [154] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.wavelength
    sta rem
    lda rem+1
    sbc #>main.wavelength
    sta rem+1
  //SEG304 [155] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  //SEG305 [155] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG306 [155] phi (word) divr16u::rem#10 = (word) divr16u::rem#7 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
  //SEG307 divr16u::@3
  b3:
  //SEG308 [156] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG309 [157] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG310 divr16u::@6
  //SEG311 [158] (word) rem16u#1 ← (word) divr16u::rem#10
  //SEG312 divr16u::@return
  //SEG313 [159] return 
    rts
}
//SEG314 sin8s_gen
// Generate signed byte sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin8s_gen(signed byte* zeropage($2e) sintab)
sin8s_gen: {
    .label step = $2a
    .label sintab = $2e
    .label x = $2c
    .label i = $30
  //SEG315 [161] call div16u 
  //SEG316 [237] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
    jsr div16u
  //SEG317 [162] (word) div16u::return#2 ← (word) div16u::return#0
  //SEG318 sin8s_gen::@2
  //SEG319 [163] (word) sin8s_gen::step#0 ← (word) div16u::return#2
  //SEG320 [164] phi from sin8s_gen::@2 to sin8s_gen::@1 [phi:sin8s_gen::@2->sin8s_gen::@1]
  //SEG321 [164] phi (word) sin8s_gen::i#2 = (byte) 0 [phi:sin8s_gen::@2->sin8s_gen::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    sta i+1
  //SEG322 [164] phi (signed byte*) sin8s_gen::sintab#2 = (const signed byte[$c0]) main::sintabb#0 [phi:sin8s_gen::@2->sin8s_gen::@1#1] -- pbsz1=pbsc1 
    lda #<main.sintabb
    sta sintab
    lda #>main.sintabb
    sta sintab+1
  //SEG323 [164] phi (word) sin8s_gen::x#2 = (byte) 0 [phi:sin8s_gen::@2->sin8s_gen::@1#2] -- vwuz1=vbuc1 
    lda #0
    sta x
    sta x+1
  // u[4.12]
  //SEG324 [164] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
  //SEG325 [164] phi (word) sin8s_gen::i#2 = (word) sin8s_gen::i#1 [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- register_copy 
  //SEG326 [164] phi (signed byte*) sin8s_gen::sintab#2 = (signed byte*) sin8s_gen::sintab#0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- register_copy 
  //SEG327 [164] phi (word) sin8s_gen::x#2 = (word) sin8s_gen::x#1 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- register_copy 
  //SEG328 sin8s_gen::@1
  b1:
  //SEG329 [165] (word) sin8s::x#0 ← (word) sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda x
    sta sin8s.x
    lda x+1
    sta sin8s.x+1
  //SEG330 [166] call sin8s 
    jsr sin8s
  //SEG331 [167] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
  //SEG332 sin8s_gen::@3
  //SEG333 [168] (signed byte~) sin8s_gen::$1 ← (signed byte) sin8s::return#0
  //SEG334 [169] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$1 -- _deref_pbsz1=vbsaa 
    ldy #0
    sta (sintab),y
  //SEG335 [170] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc sintab
    bne !+
    inc sintab+1
  !:
  //SEG336 [171] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
  //SEG337 [172] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG338 [173] if((word) sin8s_gen::i#1<(const word) main::wavelength#0) goto sin8s_gen::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1
  !:
  //SEG339 sin8s_gen::@return
  //SEG340 [174] return 
    rts
}
//SEG341 sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage($33) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label _4 = $33
    .label x = $33
    .label x1 = $49
    .label x3 = $4a
    .label usinx = $4b
    .label isUpper = $32
  //SEG342 [175] if((word) sin8s::x#0<(const word) PI_u4f12#0) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b5
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b5
  !:
  //SEG343 sin8s::@5
  //SEG344 [176] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG345 [177] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  //SEG346 [177] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG347 [177] phi (word) sin8s::x#4 = (word) sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG348 [177] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b5:
  //SEG349 [177] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG350 [177] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
  //SEG351 sin8s::@1
  b1:
  //SEG352 [178] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2
  !:
  //SEG353 sin8s::@6
  //SEG354 [179] (word) sin8s::x#2 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG355 [180] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  //SEG356 [180] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
  //SEG357 sin8s::@2
  b2:
  //SEG358 [181] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _4
    rol _4+1
    asl _4
    rol _4+1
    asl _4
    rol _4+1
  //SEG359 [182] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda _4+1
    sta x1
  //SEG360 [183] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    tax
  //SEG361 [184] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    tay
  //SEG362 [185] call mulu8_sel 
  //SEG363 [218] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  //SEG364 [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG365 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
  //SEG366 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG367 [186] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  //SEG368 sin8s::@9
  //SEG369 [187] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  //SEG370 [188] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
  //SEG371 [189] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG372 [190] call mulu8_sel 
  //SEG373 [218] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  //SEG374 [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG375 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
  //SEG376 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG377 [191] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  //SEG378 sin8s::@10
  //SEG379 [192] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta x3
  //SEG380 [193] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    tax
  //SEG381 [194] call mulu8_sel 
  //SEG382 [218] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  //SEG383 [218] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG384 [218] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6#0 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
  //SEG385 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG386 [195] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  //SEG387 sin8s::@11
  //SEG388 [196] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  //SEG389 [197] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc x1
    sta usinx
  //SEG390 [198] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx x3
  //SEG391 [199] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG392 [200] call mulu8_sel 
  //SEG393 [218] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  //SEG394 [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG395 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
  //SEG396 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG397 [201] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  //SEG398 sin8s::@12
  //SEG399 [202] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  //SEG400 [203] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
  //SEG401 [204] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG402 [205] call mulu8_sel 
  //SEG403 [218] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  //SEG404 [218] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG405 [218] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
  //SEG406 [218] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG407 [206] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  //SEG408 sin8s::@13
  //SEG409 [207] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  //SEG410 [208] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
  //SEG411 [209] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc usinx
    tax
  //SEG412 [210] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc b3
  //SEG413 sin8s::@7
  //SEG414 [211] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
  //SEG415 [212] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  //SEG416 [212] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
  //SEG417 sin8s::@3
  b3:
  //SEG418 [213] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b14
  //SEG419 sin8s::@8
  //SEG420 [214] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG421 [215] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  //SEG422 [215] phi (signed byte) sin8s::return#1 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
  //SEG423 sin8s::@4
  //SEG424 sin8s::@return
  //SEG425 [216] return 
    rts
  //SEG426 sin8s::@14
  b14:
  //SEG427 [217] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    rts
}
//SEG428 mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zeropage($35) select)
mulu8_sel: {
    .label _0 = $36
    .label _1 = $36
    .label select = $35
  //SEG429 [219] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
  //SEG430 [220] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
  //SEG431 [221] call mul8u 
  //SEG432 [227] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
    jsr mul8u
  //SEG433 [222] (word) mul8u::return#2 ← (word) mul8u::res#2
  //SEG434 mulu8_sel::@1
  //SEG435 [223] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
  //SEG436 [224] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy select
    beq !e+
  !:
    asl _1
    rol _1+1
    dey
    bne !-
  !e:
  //SEG437 [225] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda _1+1
  //SEG438 mulu8_sel::@return
  //SEG439 [226] return 
    rts
}
//SEG440 mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $38
    .label res = $36
    .label return = $36
  //SEG441 [228] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  //SEG442 [228] phi (word) mul8u::mb#2 = (byte) mul8u::b#0 [phi:mul8u->mul8u::@1#0] -- vwuz1=vbuaa 
    sta mb
    lda #0
    sta mb+1
  //SEG443 [228] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    sta res
    sta res+1
  //SEG444 [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
  //SEG445 mul8u::@1
  b1:
  //SEG446 [229] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b2
  //SEG447 mul8u::@return
  //SEG448 [230] return 
    rts
  //SEG449 mul8u::@2
  b2:
  //SEG450 [231] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG451 [232] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
  //SEG452 mul8u::@4
  //SEG453 [233] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG454 [234] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  //SEG455 [234] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
  //SEG456 mul8u::@3
  b3:
  //SEG457 [235] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
  //SEG458 [236] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG459 [228] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  //SEG460 [228] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
  //SEG461 [228] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
  //SEG462 [228] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG463 div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $2a
  //SEG464 [238] call divr16u 
  //SEG465 [142] phi from div16u to divr16u [phi:div16u->divr16u]
  //SEG466 [142] phi (word) divr16u::dividend#6 = (const word) PI2_u4f12#0 [phi:div16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta divr16u.dividend
    lda #>PI2_u4f12
    sta divr16u.dividend+1
  //SEG467 [142] phi (word) divr16u::rem#11 = (byte) 0 [phi:div16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    sta divr16u.rem+1
    jsr divr16u
  //SEG468 [239] (word) divr16u::return#2 ← (word) divr16u::return#0
  //SEG469 div16u::@1
  //SEG470 [240] (word) div16u::return#0 ← (word) divr16u::return#2
  //SEG471 div16u::@return
  //SEG472 [241] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

