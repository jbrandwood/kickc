@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) idx#0 ← (byte) 0
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  [5] phi()
  [6] call do10 
  to:main::@return
main::@return: scope:[main]  from main
  [7] return 
  to:@return
do10: scope:[do10]  from main
  [8] phi()
  to:do10::@1
do10::@1: scope:[do10]  from do10 do10::@1
  [9] (byte) do10::i#2 ← phi( do10/(byte) 0 do10::@1/(byte) do10::i#1 )
  [10] call hello 
  [11] (byte) do10::i#1 ← ++ (byte) do10::i#2
  [12] if((byte) do10::i#1!=(byte) $a) goto do10::@1
  to:do10::@return
do10::@return: scope:[do10]  from do10::@1
  [13] return 
  to:@return
hello: scope:[hello]  from do10::@1
  [14] (byte~) idx#7 ← (byte) idx#0
  to:hello::@1
hello::@1: scope:[hello]  from hello hello::@1
  [15] (byte) idx#3 ← phi( hello/(byte~) idx#7 hello::@1/(byte) idx#1 )
  [15] (byte) hello::i#2 ← phi( hello/(byte) 0 hello::@1/(byte) hello::i#1 )
  [16] *((const byte*) SCREEN#0 + (byte) idx#3) ← *((const byte[]) msg#0 + (byte) hello::i#2)
  [17] (byte) idx#1 ← ++ (byte) idx#3
  [18] (byte) hello::i#1 ← ++ (byte) hello::i#2
  [19] if(*((const byte[]) msg#0 + (byte) hello::i#1)!=(byte) '@') goto hello::@1
  to:hello::@return
hello::@return: scope:[hello]  from hello::@1
  [20] return 
  to:@return
