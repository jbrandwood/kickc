PARSING src/test/java/dk/camelot64/kickc/test/kc/bool-vars.kc
// A Minimal test of boolean variables.
// Boolean variables are bytes under the hood
// 0: false, !=0 : true

const byte* screen = $400;

void main() {
    for( byte i : 0..20) {
        boolean o1 = i<10;
        boolean o2 = (i&1)==0;
        if( o1 && o2 ) {
            screen[i] = '*';
        } else {
            screen[i] = ' ';
        }
    }
}



STATEMENTS
  (byte*) screen ← (word/signed word/dword/signed dword) 1024
proc (void()) main()
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
main::@1:
  (boolean~) main::$0 ← (byte) main::i < (byte/signed byte/word/signed word/dword/signed dword) 10
  (boolean) main::o1 ← (boolean~) main::$0
  (byte~) main::$1 ← (byte) main::i & (byte/signed byte/word/signed word/dword/signed dword) 1
  (boolean~) main::$2 ← (byte~) main::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean) main::o2 ← (boolean~) main::$2
  (boolean~) main::$3 ← (boolean) main::o1 && (boolean) main::o2
  if((boolean~) main::$3) goto main::@2
  *((byte*) screen + (byte) main::i) ← (byte) ' '
  goto main::@3
main::@2:
  *((byte*) screen + (byte) main::i) ← (byte) '*'
main::@3:
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$4 ← (byte) main::i != (byte/signed byte/word/signed word/dword/signed dword) 21
  if((boolean~) main::$4) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(boolean~) main::$0
(byte~) main::$1
(boolean~) main::$2
(boolean~) main::$3
(boolean~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(boolean) main::o1
(boolean) main::o2
(byte*) screen

Promoting word/signed word/dword/signed dword to byte* in screen ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) screen ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (boolean~) main::$0 ← (byte) main::i < (byte/signed byte/word/signed word/dword/signed dword) 10
  (boolean) main::o1 ← (boolean~) main::$0
  (byte~) main::$1 ← (byte) main::i & (byte/signed byte/word/signed word/dword/signed dword) 1
  (boolean~) main::$2 ← (byte~) main::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean) main::o2 ← (boolean~) main::$2
  (boolean~) main::$3 ← (boolean) main::o1 && (boolean) main::o2
  if((boolean~) main::$3) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1 main::@5
  *((byte*) screen + (byte) main::i) ← (byte) '*'
  to:main::@3
main::@4: scope:[main]  from main::@1
  *((byte*) screen + (byte) main::i) ← (byte) ' '
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$4 ← (byte) main::i != (byte/signed byte/word/signed word/dword/signed dword) 21
  if((boolean~) main::$4) goto main::@1
  to:main::@6
main::@5: scope:[main]  from
  to:main::@2
main::@6: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@6
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@5
Removing empty block main::@6
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) screen#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word/dword/signed dword) 10
  (boolean) main::o1#0 ← (boolean~) main::$0
  (byte~) main::$1 ← (byte) main::i#2 & (byte/signed byte/word/signed word/dword/signed dword) 1
  (boolean~) main::$2 ← (byte~) main::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean) main::o2#0 ← (boolean~) main::$2
  (boolean~) main::$3 ← (boolean) main::o1#0 && (boolean) main::o2#0
  if((boolean~) main::$3) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) screen#0 + (byte) main::i#3) ← (byte) '*'
  to:main::@3
main::@4: scope:[main]  from main::@1
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) screen#0 + (byte) main::i#4) ← (byte) ' '
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  (byte) main::i#5 ← phi( main::@2/(byte) main::i#3 main::@4/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#5
  (boolean~) main::$4 ← (byte) main::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 21
  if((boolean~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(boolean~) main::$0
(byte~) main::$1
(boolean~) main::$2
(boolean~) main::$3
(boolean~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(boolean) main::o1
(boolean) main::o1#0
(boolean) main::o2
(boolean) main::o2#0
(byte*) screen
(byte*) screen#0

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
Alias (boolean) main::o1#0 = (boolean~) main::$0 
Alias (boolean) main::o2#0 = (boolean~) main::$2 
Alias (byte) main::i#2 = (byte) main::i#3 (byte) main::i#4 
Succesful SSA optimization Pass2AliasElimination
Alias (byte) main::i#2 = (byte) main::i#5 
Succesful SSA optimization Pass2AliasElimination
Simple Condition (boolean~) main::$4 if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 21) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) screen#0 = ((byte*))1024
Constant (const byte) main::i#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @1 @end main main::@1 main::@4 main::@3 main::@return main::@2 
Added new block during phi lifting main::@7(between main::@3 and main::@1)
Block Sequence Planned @begin @1 @end main main::@1 main::@4 main::@3 main::@return main::@7 main::@2 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 1 initial phi equivalence classes
Coalesced [15] main::i#6 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@7
Block Sequence Planned @begin @1 @end main main::@1 main::@4 main::@3 main::@return main::@2 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@3/(byte) main::i#1 ) [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [6] (boolean) main::o1#0 ← (byte) main::i#2 < (byte/signed byte/word/signed word/dword/signed dword) 10 [ main::i#2 main::o1#0 ] ( main:2 [ main::i#2 main::o1#0 ] )
  [7] (byte~) main::$1 ← (byte) main::i#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::o1#0 main::$1 ] ( main:2 [ main::i#2 main::o1#0 main::$1 ] )
  [8] (boolean) main::o2#0 ← (byte~) main::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 [ main::i#2 main::o1#0 main::o2#0 ] ( main:2 [ main::i#2 main::o1#0 main::o2#0 ] )
  [9] (boolean~) main::$3 ← (boolean) main::o1#0 && (boolean) main::o2#0 [ main::i#2 main::$3 ] ( main:2 [ main::i#2 main::$3 ] )
  [10] if((boolean~) main::$3) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] )
  to:main::@4
main::@4: scope:[main]  from main::@1
  [11] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) ' ' [ main::i#2 ] ( main:2 [ main::i#2 ] )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [12] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  [13] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 21) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@3
  [14] return  [ ] ( main:2 [ ] )
  to:@return
main::@2: scope:[main]  from main::@1
  [15] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) '*' [ main::i#2 ] ( main:2 [ main::i#2 ] )
  to:main::@3

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@4 dominated by  @1 @begin main::@1 main main::@4 
main::@3 dominated by  @1 @begin main::@1 main main::@3 
main::@return dominated by  main::@return @1 @begin main::@1 main main::@3 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@3 blocks: null
Populated: Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@2 main::@4 main::@1 
Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@2 main::@4 main::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@2 main::@4 main::@1 
Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@2 main::@4 main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$1 22.0
(boolean~) main::$3 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 8.25
(boolean) main::o1
(boolean) main::o1#0 7.333333333333333
(boolean) main::o2
(boolean) main::o2#0 22.0
(byte*) screen

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::o1#0 to zero page equivalence class [ main::o1#0 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable main::o2#0 to zero page equivalence class [ main::o2#0 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::o1#0 ]
[ main::$1 ]
[ main::o2#0 ]
[ main::$3 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BOOL:3 [ main::o1#0 ]
Allocated zp ZP_BYTE:4 [ main::$1 ]
Allocated zp ZP_BOOL:5 [ main::o2#0 ]
Allocated zp ZP_BOOL:6 [ main::$3 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label screen = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label _1 = 4
    .label _3 = 6
    .label o1 = 3
    .label o2 = 5
    .label i = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG12 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] (boolean) main::o1#0 ← (byte) main::i#2 < (byte/signed byte/word/signed word/dword/signed dword) 10 [ main::i#2 main::o1#0 ] ( main:2 [ main::i#2 main::o1#0 ] ) -- vboz1=vbuz2_lt_vbuc1 
    lda i
    cmp #$a
    lda #0
    rol
    eor #1
    sta o1
  //SEG16 [7] (byte~) main::$1 ← (byte) main::i#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::o1#0 main::$1 ] ( main:2 [ main::i#2 main::o1#0 main::$1 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and i
    sta _1
  //SEG17 [8] (boolean) main::o2#0 ← (byte~) main::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 [ main::i#2 main::o1#0 main::o2#0 ] ( main:2 [ main::i#2 main::o1#0 main::o2#0 ] ) -- vboz1=vbuz2_eq_vbuc1 
    lda _1
    sec
    sbc #0
    beq !+
    lda #$ff
  !:
    eor #$ff
    sta o2
  //SEG18 [9] (boolean~) main::$3 ← (boolean) main::o1#0 && (boolean) main::o2#0 [ main::i#2 main::$3 ] ( main:2 [ main::i#2 main::$3 ] ) -- vboz1=vboz2_and_vboz3 
    lda o1
    cmp #0
    beq !+
    lda #$ff
  !:
    and o2
    sta _3
  //SEG19 [10] if((boolean~) main::$3) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- vboz1_then_la1 
    lda _3
    cmp #0
    bne b2
    jmp b4
  //SEG20 main::@4
  b4:
  //SEG21 [11] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) ' ' [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #' '
    sta screen,y
    jmp b3
  //SEG22 main::@3
  b3:
  //SEG23 [12] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG24 [13] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 21) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$15
    bne b1_from_b3
    jmp breturn
  //SEG25 main::@return
  breturn:
  //SEG26 [14] return  [ ] ( main:2 [ ] )
    rts
  //SEG27 main::@2
  b2:
  //SEG28 [15] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) '*' [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #'*'
    sta screen,y
    jmp b3
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (boolean) main::o1#0 ← (byte) main::i#2 < (byte/signed byte/word/signed word/dword/signed dword) 10 [ main::i#2 main::o1#0 ] ( main:2 [ main::i#2 main::o1#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [7] (byte~) main::$1 ← (byte) main::i#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::o1#0 main::$1 ] ( main:2 [ main::i#2 main::o1#0 main::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BOOL:3 [ main::o1#0 ]
Statement [8] (boolean) main::o2#0 ← (byte~) main::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 [ main::i#2 main::o1#0 main::o2#0 ] ( main:2 [ main::i#2 main::o1#0 main::o2#0 ] ) always clobbers reg byte a 
Statement [9] (boolean~) main::$3 ← (boolean) main::o1#0 && (boolean) main::o2#0 [ main::i#2 main::$3 ] ( main:2 [ main::i#2 main::$3 ] ) always clobbers reg byte a 
Statement [11] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) ' ' [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [15] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) '*' [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [6] (boolean) main::o1#0 ← (byte) main::i#2 < (byte/signed byte/word/signed word/dword/signed dword) 10 [ main::i#2 main::o1#0 ] ( main:2 [ main::i#2 main::o1#0 ] ) always clobbers reg byte a 
Statement [7] (byte~) main::$1 ← (byte) main::i#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::o1#0 main::$1 ] ( main:2 [ main::i#2 main::o1#0 main::$1 ] ) always clobbers reg byte a 
Statement [8] (boolean) main::o2#0 ← (byte~) main::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 [ main::i#2 main::o1#0 main::o2#0 ] ( main:2 [ main::i#2 main::o1#0 main::o2#0 ] ) always clobbers reg byte a 
Statement [9] (boolean~) main::$3 ← (boolean) main::o1#0 && (boolean) main::o2#0 [ main::i#2 main::$3 ] ( main:2 [ main::i#2 main::$3 ] ) always clobbers reg byte a 
Statement [11] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) ' ' [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [15] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) '*' [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BOOL:3 [ main::o1#0 ] : zp ZP_BOOL:3 , 
Potential registers zp ZP_BYTE:4 [ main::$1 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BOOL:5 [ main::o2#0 ] : zp ZP_BOOL:5 , reg byte a , 
Potential registers zp ZP_BOOL:6 [ main::$3 ] : zp ZP_BOOL:6 , reg byte a , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 24.75: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:4 [ main::$1 ] 22: zp ZP_BOOL:5 [ main::o2#0 ] 22: zp ZP_BOOL:6 [ main::$3 ] 7.33: zp ZP_BOOL:3 [ main::o1#0 ] 
Uplift Scope [] 

Uplifting [main] best 818 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] reg byte a [ main::o2#0 ] reg byte a [ main::$3 ] zp ZP_BOOL:3 [ main::o1#0 ] 
Uplifting [] best 818 combination 
Allocated (was zp ZP_BOOL:3) zp ZP_BOOL:2 [ main::o1#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label screen = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label o1 = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG12 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] (boolean) main::o1#0 ← (byte) main::i#2 < (byte/signed byte/word/signed word/dword/signed dword) 10 [ main::i#2 main::o1#0 ] ( main:2 [ main::i#2 main::o1#0 ] ) -- vboz1=vbuxx_lt_vbuc1 
    cpx #$a
    lda #0
    rol
    eor #1
    sta o1
  //SEG16 [7] (byte~) main::$1 ← (byte) main::i#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::o1#0 main::$1 ] ( main:2 [ main::i#2 main::o1#0 main::$1 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG17 [8] (boolean) main::o2#0 ← (byte~) main::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 [ main::i#2 main::o1#0 main::o2#0 ] ( main:2 [ main::i#2 main::o1#0 main::o2#0 ] ) -- vboaa=vbuaa_eq_vbuc1 
    sec
    sbc #0
    beq !+
    lda #$ff
  !:
    eor #$ff
  //SEG18 [9] (boolean~) main::$3 ← (boolean) main::o1#0 && (boolean) main::o2#0 [ main::i#2 main::$3 ] ( main:2 [ main::i#2 main::$3 ] ) -- vboaa=vboz1_and_vboaa 
    cmp #0
    beq !+
    lda #$ff
  !:
    and o1
  //SEG19 [10] if((boolean~) main::$3) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- vboaa_then_la1 
    cmp #0
    bne b2
    jmp b4
  //SEG20 main::@4
  b4:
  //SEG21 [11] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) ' ' [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    jmp b3
  //SEG22 main::@3
  b3:
  //SEG23 [12] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG24 [13] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 21) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne b1_from_b3
    jmp breturn
  //SEG25 main::@return
  breturn:
  //SEG26 [14] return  [ ] ( main:2 [ ] )
    rts
  //SEG27 main::@2
  b2:
  //SEG28 [15] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) '*' [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    jmp b3
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b3 with b1
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b4:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$1 reg byte a 22.0
(boolean~) main::$3 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 8.25
(boolean) main::o1
(boolean) main::o1#0 o1 zp ZP_BOOL:2 7.333333333333333
(boolean) main::o2
(boolean) main::o2#0 reg byte a 22.0
(byte*) screen
(const byte*) screen#0 screen = ((byte*))(word/signed word/dword/signed dword) 1024

reg byte x [ main::i#2 main::i#1 ]
zp ZP_BOOL:2 [ main::o1#0 ]
reg byte a [ main::$1 ]
reg byte a [ main::o2#0 ]
reg byte a [ main::$3 ]


FINAL ASSEMBLER
Score: 662

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label screen = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .label o1 = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG12 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] (boolean) main::o1#0 ← (byte) main::i#2 < (byte/signed byte/word/signed word/dword/signed dword) 10 [ main::i#2 main::o1#0 ] ( main:2 [ main::i#2 main::o1#0 ] ) -- vboz1=vbuxx_lt_vbuc1 
    cpx #$a
    lda #0
    rol
    eor #1
    sta o1
  //SEG16 [7] (byte~) main::$1 ← (byte) main::i#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::o1#0 main::$1 ] ( main:2 [ main::i#2 main::o1#0 main::$1 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG17 [8] (boolean) main::o2#0 ← (byte~) main::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 [ main::i#2 main::o1#0 main::o2#0 ] ( main:2 [ main::i#2 main::o1#0 main::o2#0 ] ) -- vboaa=vbuaa_eq_vbuc1 
    sec
    sbc #0
    beq !+
    lda #$ff
  !:
    eor #$ff
  //SEG18 [9] (boolean~) main::$3 ← (boolean) main::o1#0 && (boolean) main::o2#0 [ main::i#2 main::$3 ] ( main:2 [ main::i#2 main::$3 ] ) -- vboaa=vboz1_and_vboaa 
    cmp #0
    beq !+
    lda #$ff
  !:
    and o1
  //SEG19 [10] if((boolean~) main::$3) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- vboaa_then_la1 
    cmp #0
    bne b2
  //SEG20 main::@4
  //SEG21 [11] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) ' ' [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
  //SEG22 main::@3
  b3:
  //SEG23 [12] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG24 [13] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 21) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne b1
  //SEG25 main::@return
  //SEG26 [14] return  [ ] ( main:2 [ ] )
    rts
  //SEG27 main::@2
  b2:
  //SEG28 [15] *((const byte*) screen#0 + (byte) main::i#2) ← (byte) '*' [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    jmp b3
}

