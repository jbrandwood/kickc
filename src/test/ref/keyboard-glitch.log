Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56320
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) 56321
  (byte) RED#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  to:@3
@3: scope:[]  from @begin
  (byte) KEY_E#0 ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) KEY_C#0 ← (byte/signed byte/word/signed word/dword/signed dword) 20
  (byte) KEY_I#0 ← (byte/signed byte/word/signed word/dword/signed dword) 33
  (byte) KEY_SPACE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 60
  (byte[8]) keyboard_matrix_row_bitmask#0 ← { (byte/word/signed word/dword/signed dword) 254, (byte/word/signed word/dword/signed dword) 253, (byte/word/signed word/dword/signed dword) 251, (byte/word/signed word/dword/signed dword) 247, (byte/word/signed word/dword/signed dword) 239, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 191, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (byte[8]) keyboard_matrix_col_bitmask#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 16, (byte/signed byte/word/signed word/dword/signed dword) 32, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/word/signed word/dword/signed dword) 128 }
  to:@11
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  (byte) keyboard_matrix_read::rowid#1 ← phi( keyboard_key_pressed/(byte) keyboard_matrix_read::rowid#0 )
  *((byte*) CIA1_PORT_A#0) ← *((byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#1)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*) CIA1_PORT_B#0)
  (byte) keyboard_matrix_read::row_pressed_bits#0 ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return#0 ← (byte) keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  (byte) keyboard_matrix_read::return#3 ← phi( keyboard_matrix_read/(byte) keyboard_matrix_read::return#0 )
  (byte) keyboard_matrix_read::return#1 ← (byte) keyboard_matrix_read::return#3
  return 
  to:@return
keyboard_key_pressed: scope:[keyboard_key_pressed]  from menu::@2 menu::@4 menu::@5 pressed::@2
  (byte) keyboard_key_pressed::key#4 ← phi( menu::@2/(byte) keyboard_key_pressed::key#0 menu::@4/(byte) keyboard_key_pressed::key#1 menu::@5/(byte) keyboard_key_pressed::key#2 pressed::@2/(byte) keyboard_key_pressed::key#3 )
  (byte~) keyboard_key_pressed::$0 ← (byte) keyboard_key_pressed::key#4 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) keyboard_key_pressed::colidx#0 ← (byte~) keyboard_key_pressed::$0
  (byte~) keyboard_key_pressed::$1 ← (byte) keyboard_key_pressed::key#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) keyboard_key_pressed::rowidx#0 ← (byte~) keyboard_key_pressed::$1
  (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0
  call keyboard_matrix_read 
  (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#1
  to:keyboard_key_pressed::@2
keyboard_key_pressed::@2: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  (byte) keyboard_key_pressed::colidx#1 ← phi( keyboard_key_pressed/(byte) keyboard_key_pressed::colidx#0 )
  (byte) keyboard_matrix_read::return#4 ← phi( keyboard_key_pressed/(byte) keyboard_matrix_read::return#2 )
  (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#4
  (byte~) keyboard_key_pressed::$3 ← (byte~) keyboard_key_pressed::$2 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#1)
  (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$3
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@2
  (byte) keyboard_key_pressed::return#6 ← phi( keyboard_key_pressed::@2/(byte) keyboard_key_pressed::return#0 )
  (byte) keyboard_key_pressed::return#1 ← (byte) keyboard_key_pressed::return#6
  return 
  to:@return
main: scope:[main]  from @13
  (byte*) SCREEN#12 ← phi( @13/(byte*) SCREEN#14 )
  *((byte*) BORDERCOL#0) ← (byte) GREEN#0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte*) SCREEN#11 ← phi( main/(byte*) SCREEN#12 main::@7/(byte*) SCREEN#13 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#11 )
  call menu 
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte*) SCREEN#13 ← phi( main::@2/(byte*) SCREEN#10 )
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@11: scope:[]  from @3
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@13
menu: scope:[menu]  from main::@2
  (byte*) SCREEN#9 ← phi( main::@2/(byte*) SCREEN#10 )
  to:menu::@1
menu::@1: scope:[menu]  from menu menu::@6
  (byte*) SCREEN#8 ← phi( menu/(byte*) SCREEN#9 menu::@6/(byte*) SCREEN#1 )
  if(true) goto menu::@2
  to:menu::@return
menu::@2: scope:[menu]  from menu::@1
  (byte*) SCREEN#7 ← phi( menu::@1/(byte*) SCREEN#8 )
  (byte) keyboard_key_pressed::key#0 ← (byte) KEY_C#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#1
  to:menu::@16
menu::@16: scope:[menu]  from menu::@2
  (byte*) SCREEN#6 ← phi( menu::@2/(byte*) SCREEN#7 )
  (byte) keyboard_key_pressed::return#7 ← phi( menu::@2/(byte) keyboard_key_pressed::return#2 )
  (byte~) menu::$0 ← (byte) keyboard_key_pressed::return#7
  (bool~) menu::$1 ← (byte~) menu::$0 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$2 ← ! (bool~) menu::$1
  if((bool~) menu::$2) goto menu::@4
  to:menu::@9
menu::@4: scope:[menu]  from menu::@16
  (byte*) SCREEN#5 ← phi( menu::@16/(byte*) SCREEN#6 )
  (byte) keyboard_key_pressed::key#1 ← (byte) KEY_I#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#1
  to:menu::@17
menu::@17: scope:[menu]  from menu::@4
  (byte*) SCREEN#4 ← phi( menu::@4/(byte*) SCREEN#5 )
  (byte) keyboard_key_pressed::return#8 ← phi( menu::@4/(byte) keyboard_key_pressed::return#3 )
  (byte~) menu::$4 ← (byte) keyboard_key_pressed::return#8
  (bool~) menu::$5 ← (byte~) menu::$4 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$6 ← ! (bool~) menu::$5
  if((bool~) menu::$6) goto menu::@5
  to:menu::@11
menu::@9: scope:[menu]  from menu::@16
  call pressed 
  to:menu::@18
menu::@18: scope:[menu]  from menu::@9
  to:menu::@return
menu::@return: scope:[menu]  from menu::@1 menu::@11 menu::@13 menu::@18
  return 
  to:@return
menu::@5: scope:[menu]  from menu::@17
  (byte*) SCREEN#3 ← phi( menu::@17/(byte*) SCREEN#4 )
  (byte) keyboard_key_pressed::key#2 ← (byte) KEY_E#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#4 ← (byte) keyboard_key_pressed::return#1
  to:menu::@19
menu::@19: scope:[menu]  from menu::@5
  (byte*) SCREEN#2 ← phi( menu::@5/(byte*) SCREEN#3 )
  (byte) keyboard_key_pressed::return#9 ← phi( menu::@5/(byte) keyboard_key_pressed::return#4 )
  (byte~) menu::$7 ← (byte) keyboard_key_pressed::return#9
  (bool~) menu::$8 ← (byte~) menu::$7 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) menu::$9 ← ! (bool~) menu::$8
  if((bool~) menu::$9) goto menu::@6
  to:menu::@13
menu::@11: scope:[menu]  from menu::@17
  *((byte*) BORDERCOL#0) ← (byte) RED#0
  asm { sei  }
  to:menu::@return
menu::@6: scope:[menu]  from menu::@19
  (byte*) SCREEN#1 ← phi( menu::@19/(byte*) SCREEN#2 )
  *((byte*) SCREEN#1) ← ++ *((byte*) SCREEN#1)
  to:menu::@1
menu::@13: scope:[menu]  from menu::@19
  *((byte*) BORDERCOL#0) ← (byte) GREEN#0
  asm { cli  }
  to:menu::@return
pressed: scope:[pressed]  from menu::@9
  *((byte*) BGCOL#0) ← ++ *((byte*) BGCOL#0)
  to:pressed::@1
pressed::@1: scope:[pressed]  from pressed pressed::@4
  if(true) goto pressed::@2
  to:pressed::@return
pressed::@2: scope:[pressed]  from pressed::@1
  (byte) keyboard_key_pressed::key#3 ← (byte) KEY_SPACE#0
  call keyboard_key_pressed 
  (byte) keyboard_key_pressed::return#5 ← (byte) keyboard_key_pressed::return#1
  to:pressed::@10
pressed::@10: scope:[pressed]  from pressed::@2
  (byte) keyboard_key_pressed::return#10 ← phi( pressed::@2/(byte) keyboard_key_pressed::return#5 )
  (byte~) pressed::$0 ← (byte) keyboard_key_pressed::return#10
  (bool~) pressed::$1 ← (byte~) pressed::$0 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) pressed::$2 ← ! (bool~) pressed::$1
  if((bool~) pressed::$2) goto pressed::@4
  to:pressed::@return
pressed::@4: scope:[pressed]  from pressed::@10
  to:pressed::@1
pressed::@return: scope:[pressed]  from pressed::@1 pressed::@10
  return 
  to:@return
@13: scope:[]  from @11
  (byte*) SCREEN#14 ← phi( @11/(byte*) SCREEN#0 )
  call main 
  to:@14
@14: scope:[]  from @13
  to:@end
@end: scope:[]  from @14

SYMBOL TABLE SSA
(label) @11
(label) @13
(label) @14
(label) @3
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte) GREEN
(byte) GREEN#0
(byte) KEY_C
(byte) KEY_C#0
(byte) KEY_E
(byte) KEY_E#0
(byte) KEY_I
(byte) KEY_I#0
(byte) KEY_SPACE
(byte) KEY_SPACE#0
(byte) RED
(byte) RED#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#10
(byte*) SCREEN#11
(byte*) SCREEN#12
(byte*) SCREEN#13
(byte*) SCREEN#14
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCREEN#7
(byte*) SCREEN#8
(byte*) SCREEN#9
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$0
(byte~) keyboard_key_pressed::$1
(byte~) keyboard_key_pressed::$2
(byte~) keyboard_key_pressed::$3
(label) keyboard_key_pressed::@2
(label) keyboard_key_pressed::@return
(byte) keyboard_key_pressed::colidx
(byte) keyboard_key_pressed::colidx#0
(byte) keyboard_key_pressed::colidx#1
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::key#0
(byte) keyboard_key_pressed::key#1
(byte) keyboard_key_pressed::key#2
(byte) keyboard_key_pressed::key#3
(byte) keyboard_key_pressed::key#4
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0
(byte) keyboard_key_pressed::return#1
(byte) keyboard_key_pressed::return#10
(byte) keyboard_key_pressed::return#2
(byte) keyboard_key_pressed::return#3
(byte) keyboard_key_pressed::return#4
(byte) keyboard_key_pressed::return#5
(byte) keyboard_key_pressed::return#6
(byte) keyboard_key_pressed::return#7
(byte) keyboard_key_pressed::return#8
(byte) keyboard_key_pressed::return#9
(byte) keyboard_key_pressed::rowidx
(byte) keyboard_key_pressed::rowidx#0
(byte[8]) keyboard_matrix_col_bitmask
(byte[8]) keyboard_matrix_col_bitmask#0
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0
(byte) keyboard_matrix_read::return#1
(byte) keyboard_matrix_read::return#2
(byte) keyboard_matrix_read::return#3
(byte) keyboard_matrix_read::return#4
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::row_pressed_bits#0
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0
(byte) keyboard_matrix_read::rowid#1
(byte[8]) keyboard_matrix_row_bitmask
(byte[8]) keyboard_matrix_row_bitmask#0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@return
(void()) menu()
(byte~) menu::$0
(bool~) menu::$1
(bool~) menu::$2
(byte~) menu::$4
(bool~) menu::$5
(bool~) menu::$6
(byte~) menu::$7
(bool~) menu::$8
(bool~) menu::$9
(label) menu::@1
(label) menu::@11
(label) menu::@13
(label) menu::@16
(label) menu::@17
(label) menu::@18
(label) menu::@19
(label) menu::@2
(label) menu::@4
(label) menu::@5
(label) menu::@6
(label) menu::@9
(label) menu::@return
(void()) pressed()
(byte~) pressed::$0
(bool~) pressed::$1
(bool~) pressed::$2
(label) pressed::@1
(label) pressed::@10
(label) pressed::@2
(label) pressed::@4
(label) pressed::@return

Culled Empty Block (label) menu::@18
Culled Empty Block (label) pressed::@4
Culled Empty Block (label) @14
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (bool~) menu::$2 ← (byte~) menu::$0 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) menu::$1 ← (byte~) menu::$0 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) menu::$6 ← (byte~) menu::$4 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) menu::$5 ← (byte~) menu::$4 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) menu::$9 ← (byte~) menu::$7 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) menu::$8 ← (byte~) menu::$7 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) pressed::$2 ← (byte~) pressed::$0 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) pressed::$1 ← (byte~) pressed::$0 != (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) keyboard_matrix_read::return#0 = (byte) keyboard_matrix_read::row_pressed_bits#0 (byte~) keyboard_matrix_read::$0 (byte) keyboard_matrix_read::return#3 (byte) keyboard_matrix_read::return#1 
Alias (byte) keyboard_key_pressed::colidx#0 = (byte~) keyboard_key_pressed::$0 (byte) keyboard_key_pressed::colidx#1 
Alias (byte) keyboard_key_pressed::rowidx#0 = (byte~) keyboard_key_pressed::$1 
Alias (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#4 
Alias (byte) keyboard_key_pressed::return#0 = (byte~) keyboard_key_pressed::$3 (byte) keyboard_key_pressed::return#6 (byte) keyboard_key_pressed::return#1 
Alias (byte*) SCREEN#10 = (byte*) SCREEN#11 (byte*) SCREEN#13 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#7 (byte*) SCREEN#8 (byte*) SCREEN#6 (byte*) SCREEN#5 (byte*) SCREEN#4 (byte*) SCREEN#3 (byte*) SCREEN#2 
Alias (byte) keyboard_key_pressed::return#2 = (byte) keyboard_key_pressed::return#7 
Alias (byte) keyboard_key_pressed::return#3 = (byte) keyboard_key_pressed::return#8 
Alias (byte) keyboard_key_pressed::return#4 = (byte) keyboard_key_pressed::return#9 
Alias (byte) keyboard_key_pressed::return#10 = (byte) keyboard_key_pressed::return#5 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#14 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) SCREEN#10
Self Phi Eliminated (byte*) SCREEN#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) keyboard_matrix_read::rowid#1 (byte) keyboard_matrix_read::rowid#0
Redundant Phi (byte*) SCREEN#12 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN#10 (byte*) SCREEN#12
Redundant Phi (byte*) SCREEN#9 (byte*) SCREEN#10
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#9
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) menu::$2 if((byte~) menu::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@4
Simple Condition (bool~) menu::$6 if((byte~) menu::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@5
Simple Condition (bool~) menu::$9 if((byte~) menu::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@6
Simple Condition (bool~) pressed::$2 if((byte~) pressed::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto pressed::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) BGCOL#0 = ((byte*))53281
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))56320
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))56321
Constant (const byte) RED#0 = 2
Constant (const byte) GREEN#0 = 5
Constant (const byte) KEY_E#0 = 14
Constant (const byte) KEY_C#0 = 20
Constant (const byte) KEY_I#0 = 33
Constant (const byte) KEY_SPACE#0 = 60
Constant (const byte[8]) keyboard_matrix_row_bitmask#0 = { 254, 253, 251, 247, 239, 223, 191, 127 }
Constant (const byte[8]) keyboard_matrix_col_bitmask#0 = { 1, 2, 4, 8, 16, 32, 64, 128 }
Constant (const byte*) SCREEN#0 = ((byte*))1024
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) keyboard_key_pressed::key#0 = KEY_C#0
Constant (const byte) keyboard_key_pressed::key#1 = KEY_I#0
Constant (const byte) keyboard_key_pressed::key#2 = KEY_E#0
Constant (const byte) keyboard_key_pressed::key#3 = KEY_SPACE#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination if(true) goto main::@2
if() condition always true - replacing block destination if(true) goto menu::@2
if() condition always true - replacing block destination if(true) goto pressed::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Culled Empty Block (label) @3
Culled Empty Block (label) main::@1
Culled Empty Block (label) main::@7
Culled Empty Block (label) @11
Culled Empty Block (label) menu::@1
Culled Empty Block (label) pressed::@1
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#0
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#1
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#2
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#3
Constant inlined keyboard_key_pressed::key#0 = (const byte) KEY_C#0
Constant inlined keyboard_key_pressed::key#1 = (const byte) KEY_I#0
Constant inlined keyboard_key_pressed::key#2 = (const byte) KEY_E#0
Constant inlined keyboard_key_pressed::key#3 = (const byte) KEY_SPACE#0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @13
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu
Adding NOP phi() at start of menu::@2
Adding NOP phi() at start of menu::@9
Adding NOP phi() at start of menu::@4
Adding NOP phi() at start of menu::@5
Adding NOP phi() at start of pressed::@2
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to menu:6 
Calls in [menu] to keyboard_key_pressed:9 pressed:14 keyboard_key_pressed:17 keyboard_key_pressed:24 
Calls in [keyboard_key_pressed] to keyboard_matrix_read:35 
Calls in [pressed] to keyboard_key_pressed:45 

Created 1 initial phi equivalence classes
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @13
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu
Adding NOP phi() at start of menu::@2
Adding NOP phi() at start of menu::@9
Adding NOP phi() at start of menu::@4
Adding NOP phi() at start of menu::@5
Adding NOP phi() at start of pressed::@2

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@13
@13: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @13
  [3] phi()
main: scope:[main]  from @13
  [4] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0
  to:main::@2
main::@2: scope:[main]  from main main::@2
  [5] phi()
  [6] call menu 
  to:main::@2
menu: scope:[menu]  from main::@2
  [7] phi()
  to:menu::@2
menu::@2: scope:[menu]  from menu menu::@6
  [8] phi()
  [9] call keyboard_key_pressed 
  [10] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
  to:menu::@16
menu::@16: scope:[menu]  from menu::@2
  [11] (byte~) menu::$0 ← (byte) keyboard_key_pressed::return#2
  [12] if((byte~) menu::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@4
  to:menu::@9
menu::@9: scope:[menu]  from menu::@16
  [13] phi()
  [14] call pressed 
  to:menu::@return
menu::@return: scope:[menu]  from menu::@11 menu::@13 menu::@9
  [15] return 
  to:@return
menu::@4: scope:[menu]  from menu::@16
  [16] phi()
  [17] call keyboard_key_pressed 
  [18] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0
  to:menu::@17
menu::@17: scope:[menu]  from menu::@4
  [19] (byte~) menu::$4 ← (byte) keyboard_key_pressed::return#3
  [20] if((byte~) menu::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@5
  to:menu::@11
menu::@11: scope:[menu]  from menu::@17
  [21] *((const byte*) BORDERCOL#0) ← (const byte) RED#0
  asm { sei  }
  to:menu::@return
menu::@5: scope:[menu]  from menu::@17
  [23] phi()
  [24] call keyboard_key_pressed 
  [25] (byte) keyboard_key_pressed::return#4 ← (byte) keyboard_key_pressed::return#0
  to:menu::@19
menu::@19: scope:[menu]  from menu::@5
  [26] (byte~) menu::$7 ← (byte) keyboard_key_pressed::return#4
  [27] if((byte~) menu::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@6
  to:menu::@13
menu::@13: scope:[menu]  from menu::@19
  [28] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0
  asm { cli  }
  to:menu::@return
menu::@6: scope:[menu]  from menu::@19
  [30] *((const byte*) SCREEN#0) ← ++ *((const byte*) SCREEN#0)
  to:menu::@2
keyboard_key_pressed: scope:[keyboard_key_pressed]  from menu::@2 menu::@4 menu::@5 pressed::@2
  [31] (byte) keyboard_key_pressed::key#4 ← phi( menu::@2/(const byte) KEY_C#0 menu::@4/(const byte) KEY_I#0 menu::@5/(const byte) KEY_E#0 pressed::@2/(const byte) KEY_SPACE#0 )
  [32] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#4 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [33] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  [34] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0
  [35] call keyboard_matrix_read 
  [36] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_key_pressed::@2
keyboard_key_pressed::@2: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [37] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
  [38] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0)
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@2
  [39] return 
  to:@return
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [40] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0)
  [41] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [42] return 
  to:@return
pressed: scope:[pressed]  from menu::@9
  [43] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0)
  to:pressed::@2
pressed::@2: scope:[pressed]  from pressed pressed::@10
  [44] phi()
  [45] call keyboard_key_pressed 
  [46] (byte) keyboard_key_pressed::return#10 ← (byte) keyboard_key_pressed::return#0
  to:pressed::@10
pressed::@10: scope:[pressed]  from pressed::@2
  [47] (byte~) pressed::$0 ← (byte) keyboard_key_pressed::return#10
  [48] if((byte~) pressed::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto pressed::@2
  to:pressed::@return
pressed::@return: scope:[pressed]  from pressed::@10
  [49] return 
  to:@return

null depth in calling loop Loop head: pressed::@2 tails: pressed::@10 blocks: pressed::@10 pressed::@2  in scope keyboard_key_pressed

VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BORDERCOL
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_B
(byte) GREEN
(byte) KEY_C
(byte) KEY_E
(byte) KEY_I
(byte) KEY_SPACE
(byte) RED
(byte*) SCREEN
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$2 4.0
(byte) keyboard_key_pressed::colidx
(byte) keyboard_key_pressed::colidx#0 0.6666666666666666
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::key#4 2.0
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0 67.66666666666667
(byte) keyboard_key_pressed::return#10 202.0
(byte) keyboard_key_pressed::return#2 202.0
(byte) keyboard_key_pressed::return#3 202.0
(byte) keyboard_key_pressed::return#4 202.0
(byte) keyboard_key_pressed::rowidx
(byte) keyboard_key_pressed::rowidx#0 4.0
(byte[8]) keyboard_matrix_col_bitmask
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 1.3333333333333333
(byte) keyboard_matrix_read::return#2 4.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 4.0
(byte[8]) keyboard_matrix_row_bitmask
(void()) main()
(void()) menu()
(byte~) menu::$0 202.0
(byte~) menu::$4 202.0
(byte~) menu::$7 202.0
(void()) pressed()
(byte~) pressed::$0 202.0

Initial phi equivalence classes
[ keyboard_key_pressed::key#4 ]
Added variable keyboard_key_pressed::return#2 to zero page equivalence class [ keyboard_key_pressed::return#2 ]
Added variable menu::$0 to zero page equivalence class [ menu::$0 ]
Added variable keyboard_key_pressed::return#3 to zero page equivalence class [ keyboard_key_pressed::return#3 ]
Added variable menu::$4 to zero page equivalence class [ menu::$4 ]
Added variable keyboard_key_pressed::return#4 to zero page equivalence class [ keyboard_key_pressed::return#4 ]
Added variable menu::$7 to zero page equivalence class [ menu::$7 ]
Added variable keyboard_key_pressed::colidx#0 to zero page equivalence class [ keyboard_key_pressed::colidx#0 ]
Added variable keyboard_key_pressed::rowidx#0 to zero page equivalence class [ keyboard_key_pressed::rowidx#0 ]
Added variable keyboard_matrix_read::rowid#0 to zero page equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to zero page equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_key_pressed::$2 to zero page equivalence class [ keyboard_key_pressed::$2 ]
Added variable keyboard_key_pressed::return#0 to zero page equivalence class [ keyboard_key_pressed::return#0 ]
Added variable keyboard_matrix_read::return#0 to zero page equivalence class [ keyboard_matrix_read::return#0 ]
Added variable keyboard_key_pressed::return#10 to zero page equivalence class [ keyboard_key_pressed::return#10 ]
Added variable pressed::$0 to zero page equivalence class [ pressed::$0 ]
Complete equivalence classes
[ keyboard_key_pressed::key#4 ]
[ keyboard_key_pressed::return#2 ]
[ menu::$0 ]
[ keyboard_key_pressed::return#3 ]
[ menu::$4 ]
[ keyboard_key_pressed::return#4 ]
[ menu::$7 ]
[ keyboard_key_pressed::colidx#0 ]
[ keyboard_key_pressed::rowidx#0 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_key_pressed::$2 ]
[ keyboard_key_pressed::return#0 ]
[ keyboard_matrix_read::return#0 ]
[ keyboard_key_pressed::return#10 ]
[ pressed::$0 ]
Allocated zp ZP_BYTE:2 [ keyboard_key_pressed::key#4 ]
Allocated zp ZP_BYTE:3 [ keyboard_key_pressed::return#2 ]
Allocated zp ZP_BYTE:4 [ menu::$0 ]
Allocated zp ZP_BYTE:5 [ keyboard_key_pressed::return#3 ]
Allocated zp ZP_BYTE:6 [ menu::$4 ]
Allocated zp ZP_BYTE:7 [ keyboard_key_pressed::return#4 ]
Allocated zp ZP_BYTE:8 [ menu::$7 ]
Allocated zp ZP_BYTE:9 [ keyboard_key_pressed::colidx#0 ]
Allocated zp ZP_BYTE:10 [ keyboard_key_pressed::rowidx#0 ]
Allocated zp ZP_BYTE:11 [ keyboard_matrix_read::rowid#0 ]
Allocated zp ZP_BYTE:12 [ keyboard_matrix_read::return#2 ]
Allocated zp ZP_BYTE:13 [ keyboard_key_pressed::$2 ]
Allocated zp ZP_BYTE:14 [ keyboard_key_pressed::return#0 ]
Allocated zp ZP_BYTE:15 [ keyboard_matrix_read::return#0 ]
Allocated zp ZP_BYTE:16 [ keyboard_key_pressed::return#10 ]
Allocated zp ZP_BYTE:17 [ pressed::$0 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .const RED = 2
  .const GREEN = 5
  .const KEY_E = $e
  .const KEY_C = $14
  .const KEY_I = $21
  .const KEY_SPACE = $3c
  .label SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @13 [phi:@begin->@13]
b13_from_bbegin:
  jmp b13
//SEG4 @13
b13:
//SEG5 [2] call main 
  jsr main
//SEG6 [3] phi from @13 to @end [phi:@13->@end]
bend_from_b13:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BORDERCOL
  //SEG10 [5] phi from main main::@2 to main::@2 [phi:main/main::@2->main::@2]
  b2_from_main:
  b2_from_b2:
    jmp b2
  //SEG11 main::@2
  b2:
  //SEG12 [6] call menu 
  //SEG13 [7] phi from main::@2 to menu [phi:main::@2->menu]
  menu_from_b2:
    jsr menu
    jmp b2_from_b2
}
//SEG14 menu
menu: {
    .label _0 = 4
    .label _4 = 6
    .label _7 = 8
  //SEG15 [8] phi from menu menu::@6 to menu::@2 [phi:menu/menu::@6->menu::@2]
  b2_from_menu:
  b2_from_b6:
    jmp b2
  //SEG16 menu::@2
  b2:
  //SEG17 [9] call keyboard_key_pressed 
  //SEG18 [31] phi from menu::@2 to keyboard_key_pressed [phi:menu::@2->keyboard_key_pressed]
  keyboard_key_pressed_from_b2:
  //SEG19 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_C#0 [phi:menu::@2->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_C
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG20 [10] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_2
    jmp b16
  //SEG21 menu::@16
  b16:
  //SEG22 [11] (byte~) menu::$0 ← (byte) keyboard_key_pressed::return#2 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_2
    sta _0
  //SEG23 [12] if((byte~) menu::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@4 -- vbuz1_eq_0_then_la1 
    lda _0
    beq b4_from_b16
  //SEG24 [13] phi from menu::@16 to menu::@9 [phi:menu::@16->menu::@9]
  b9_from_b16:
    jmp b9
  //SEG25 menu::@9
  b9:
  //SEG26 [14] call pressed 
    jsr pressed
    jmp breturn
  //SEG27 menu::@return
  breturn:
  //SEG28 [15] return 
    rts
  //SEG29 [16] phi from menu::@16 to menu::@4 [phi:menu::@16->menu::@4]
  b4_from_b16:
    jmp b4
  //SEG30 menu::@4
  b4:
  //SEG31 [17] call keyboard_key_pressed 
  //SEG32 [31] phi from menu::@4 to keyboard_key_pressed [phi:menu::@4->keyboard_key_pressed]
  keyboard_key_pressed_from_b4:
  //SEG33 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_I#0 [phi:menu::@4->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_I
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG34 [18] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_3
    jmp b17
  //SEG35 menu::@17
  b17:
  //SEG36 [19] (byte~) menu::$4 ← (byte) keyboard_key_pressed::return#3 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_3
    sta _4
  //SEG37 [20] if((byte~) menu::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@5 -- vbuz1_eq_0_then_la1 
    lda _4
    beq b5_from_b17
    jmp b11
  //SEG38 menu::@11
  b11:
  //SEG39 [21] *((const byte*) BORDERCOL#0) ← (const byte) RED#0 -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BORDERCOL
  //SEG40 asm { sei  }
    sei
    jmp breturn
  //SEG41 [23] phi from menu::@17 to menu::@5 [phi:menu::@17->menu::@5]
  b5_from_b17:
    jmp b5
  //SEG42 menu::@5
  b5:
  //SEG43 [24] call keyboard_key_pressed 
  //SEG44 [31] phi from menu::@5 to keyboard_key_pressed [phi:menu::@5->keyboard_key_pressed]
  keyboard_key_pressed_from_b5:
  //SEG45 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_E#0 [phi:menu::@5->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_E
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG46 [25] (byte) keyboard_key_pressed::return#4 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_4
    jmp b19
  //SEG47 menu::@19
  b19:
  //SEG48 [26] (byte~) menu::$7 ← (byte) keyboard_key_pressed::return#4 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_4
    sta _7
  //SEG49 [27] if((byte~) menu::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@6 -- vbuz1_eq_0_then_la1 
    lda _7
    beq b6
    jmp b13
  //SEG50 menu::@13
  b13:
  //SEG51 [28] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BORDERCOL
  //SEG52 asm { cli  }
    cli
    jmp breturn
  //SEG53 menu::@6
  b6:
  //SEG54 [30] *((const byte*) SCREEN#0) ← ++ *((const byte*) SCREEN#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN
    jmp b2_from_b6
}
//SEG55 keyboard_key_pressed
keyboard_key_pressed: {
    .label _2 = $d
    .label colidx = 9
    .label rowidx = $a
    .label return = $e
    .label return_2 = 3
    .label return_3 = 5
    .label return_4 = 7
    .label key = 2
    .label return_10 = $10
  //SEG56 [32] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#4 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and key
    sta colidx
  //SEG57 [33] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_ror_3 
    lda key
    lsr
    lsr
    lsr
    sta rowidx
  //SEG58 [34] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0 -- vbuz1=vbuz2 
    lda rowidx
    sta keyboard_matrix_read.rowid
  //SEG59 [35] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG60 [36] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return
    sta keyboard_matrix_read.return_2
    jmp b2
  //SEG61 keyboard_key_pressed::@2
  b2:
  //SEG62 [37] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return_2
    sta _2
  //SEG63 [38] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda _2
    ldy colidx
    and keyboard_matrix_col_bitmask,y
    sta return
    jmp breturn
  //SEG64 keyboard_key_pressed::@return
  breturn:
  //SEG65 [39] return 
    rts
}
//SEG66 keyboard_matrix_read
keyboard_matrix_read: {
    .label return = $f
    .label rowid = $b
    .label return_2 = $c
  //SEG67 [40] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy rowid
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
  //SEG68 [41] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuz1=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    sta return
    jmp breturn
  //SEG69 keyboard_matrix_read::@return
  breturn:
  //SEG70 [42] return 
    rts
}
//SEG71 pressed
pressed: {
    .label _0 = $11
  //SEG72 [43] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
  //SEG73 [44] phi from pressed pressed::@10 to pressed::@2 [phi:pressed/pressed::@10->pressed::@2]
  b2_from_pressed:
  b2_from_b10:
    jmp b2
  //SEG74 pressed::@2
  b2:
  //SEG75 [45] call keyboard_key_pressed 
  //SEG76 [31] phi from pressed::@2 to keyboard_key_pressed [phi:pressed::@2->keyboard_key_pressed]
  keyboard_key_pressed_from_b2:
  //SEG77 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_SPACE#0 [phi:pressed::@2->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG78 [46] (byte) keyboard_key_pressed::return#10 ← (byte) keyboard_key_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_10
    jmp b10
  //SEG79 pressed::@10
  b10:
  //SEG80 [47] (byte~) pressed::$0 ← (byte) keyboard_key_pressed::return#10 -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_10
    sta _0
  //SEG81 [48] if((byte~) pressed::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto pressed::@2 -- vbuz1_eq_0_then_la1 
    lda _0
    beq b2_from_b10
    jmp breturn
  //SEG82 pressed::@return
  breturn:
  //SEG83 [49] return 
    rts
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte*) BORDERCOL#0) ← (const byte) RED#0 [ ] ( main:2::menu:6 [ ] ) always clobbers reg byte a 
Statement [28] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0 [ ] ( main:2::menu:6 [ ] ) always clobbers reg byte a 
Statement [32] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#4 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_key_pressed::key#4 keyboard_key_pressed::colidx#0 ] ( main:2::menu:6::keyboard_key_pressed:9 [ keyboard_key_pressed::key#4 keyboard_key_pressed::colidx#0 ] main:2::menu:6::keyboard_key_pressed:17 [ keyboard_key_pressed::key#4 keyboard_key_pressed::colidx#0 ] main:2::menu:6::keyboard_key_pressed:24 [ keyboard_key_pressed::key#4 keyboard_key_pressed::colidx#0 ] main:2::menu:6::pressed:14::keyboard_key_pressed:45 [ keyboard_key_pressed::key#4 keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ keyboard_key_pressed::key#4 ]
Statement [33] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( main:2::menu:6::keyboard_key_pressed:9 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:6::keyboard_key_pressed:17 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:6::keyboard_key_pressed:24 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:6::pressed:14::keyboard_key_pressed:45 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ keyboard_key_pressed::colidx#0 ]
Statement [38] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) [ keyboard_key_pressed::return#0 ] ( main:2::menu:6::keyboard_key_pressed:9 [ keyboard_key_pressed::return#0 ] main:2::menu:6::keyboard_key_pressed:17 [ keyboard_key_pressed::return#0 ] main:2::menu:6::keyboard_key_pressed:24 [ keyboard_key_pressed::return#0 ] main:2::menu:6::pressed:14::keyboard_key_pressed:45 [ keyboard_key_pressed::return#0 ] ) always clobbers reg byte a 
Statement [40] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::menu:6::keyboard_key_pressed:9::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 ] main:2::menu:6::keyboard_key_pressed:17::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 ] main:2::menu:6::keyboard_key_pressed:24::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 ] main:2::menu:6::pressed:14::keyboard_key_pressed:45::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Statement [41] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::menu:6::keyboard_key_pressed:9::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:6::keyboard_key_pressed:17::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:6::keyboard_key_pressed:24::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:6::pressed:14::keyboard_key_pressed:45::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [4] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte*) BORDERCOL#0) ← (const byte) RED#0 [ ] ( main:2::menu:6 [ ] ) always clobbers reg byte a 
Statement [28] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0 [ ] ( main:2::menu:6 [ ] ) always clobbers reg byte a 
Statement [32] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#4 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_key_pressed::key#4 keyboard_key_pressed::colidx#0 ] ( main:2::menu:6::keyboard_key_pressed:9 [ keyboard_key_pressed::key#4 keyboard_key_pressed::colidx#0 ] main:2::menu:6::keyboard_key_pressed:17 [ keyboard_key_pressed::key#4 keyboard_key_pressed::colidx#0 ] main:2::menu:6::keyboard_key_pressed:24 [ keyboard_key_pressed::key#4 keyboard_key_pressed::colidx#0 ] main:2::menu:6::pressed:14::keyboard_key_pressed:45 [ keyboard_key_pressed::key#4 keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Statement [33] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( main:2::menu:6::keyboard_key_pressed:9 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:6::keyboard_key_pressed:17 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:6::keyboard_key_pressed:24 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:6::pressed:14::keyboard_key_pressed:45 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ) always clobbers reg byte a 
Statement [38] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) [ keyboard_key_pressed::return#0 ] ( main:2::menu:6::keyboard_key_pressed:9 [ keyboard_key_pressed::return#0 ] main:2::menu:6::keyboard_key_pressed:17 [ keyboard_key_pressed::return#0 ] main:2::menu:6::keyboard_key_pressed:24 [ keyboard_key_pressed::return#0 ] main:2::menu:6::pressed:14::keyboard_key_pressed:45 [ keyboard_key_pressed::return#0 ] ) always clobbers reg byte a 
Statement [40] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::menu:6::keyboard_key_pressed:9::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 ] main:2::menu:6::keyboard_key_pressed:17::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 ] main:2::menu:6::keyboard_key_pressed:24::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 ] main:2::menu:6::pressed:14::keyboard_key_pressed:45::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Statement [41] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::menu:6::keyboard_key_pressed:9::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:6::keyboard_key_pressed:17::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:6::keyboard_key_pressed:24::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:6::pressed:14::keyboard_key_pressed:45::keyboard_matrix_read:35 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ keyboard_key_pressed::key#4 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ keyboard_key_pressed::return#2 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ menu::$0 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ keyboard_key_pressed::return#3 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ menu::$4 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ keyboard_key_pressed::return#4 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ menu::$7 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ keyboard_key_pressed::colidx#0 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ keyboard_key_pressed::rowidx#0 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ keyboard_matrix_read::rowid#0 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ keyboard_matrix_read::return#2 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ keyboard_key_pressed::$2 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ keyboard_key_pressed::return#0 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ keyboard_matrix_read::return#0 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ keyboard_key_pressed::return#10 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ pressed::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [keyboard_key_pressed] 202: zp ZP_BYTE:3 [ keyboard_key_pressed::return#2 ] 202: zp ZP_BYTE:5 [ keyboard_key_pressed::return#3 ] 202: zp ZP_BYTE:7 [ keyboard_key_pressed::return#4 ] 202: zp ZP_BYTE:16 [ keyboard_key_pressed::return#10 ] 67.67: zp ZP_BYTE:14 [ keyboard_key_pressed::return#0 ] 4: zp ZP_BYTE:10 [ keyboard_key_pressed::rowidx#0 ] 4: zp ZP_BYTE:13 [ keyboard_key_pressed::$2 ] 2: zp ZP_BYTE:2 [ keyboard_key_pressed::key#4 ] 0.67: zp ZP_BYTE:9 [ keyboard_key_pressed::colidx#0 ] 
Uplift Scope [menu] 202: zp ZP_BYTE:4 [ menu::$0 ] 202: zp ZP_BYTE:6 [ menu::$4 ] 202: zp ZP_BYTE:8 [ menu::$7 ] 
Uplift Scope [pressed] 202: zp ZP_BYTE:17 [ pressed::$0 ] 
Uplift Scope [keyboard_matrix_read] 4: zp ZP_BYTE:11 [ keyboard_matrix_read::rowid#0 ] 4: zp ZP_BYTE:12 [ keyboard_matrix_read::return#2 ] 1.33: zp ZP_BYTE:15 [ keyboard_matrix_read::return#0 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [keyboard_key_pressed] best 9051 combination reg byte a [ keyboard_key_pressed::return#2 ] reg byte a [ keyboard_key_pressed::return#3 ] reg byte a [ keyboard_key_pressed::return#4 ] reg byte a [ keyboard_key_pressed::return#10 ] zp ZP_BYTE:14 [ keyboard_key_pressed::return#0 ] zp ZP_BYTE:10 [ keyboard_key_pressed::rowidx#0 ] zp ZP_BYTE:13 [ keyboard_key_pressed::$2 ] zp ZP_BYTE:2 [ keyboard_key_pressed::key#4 ] zp ZP_BYTE:9 [ keyboard_key_pressed::colidx#0 ] 
Limited combination testing to 100 combinations of 147456 possible.
Uplifting [menu] best 7851 combination reg byte a [ menu::$0 ] reg byte a [ menu::$4 ] reg byte a [ menu::$7 ] 
Uplifting [pressed] best 7451 combination reg byte a [ pressed::$0 ] 
Uplifting [keyboard_matrix_read] best 7433 combination reg byte x [ keyboard_matrix_read::rowid#0 ] reg byte a [ keyboard_matrix_read::return#2 ] reg byte a [ keyboard_matrix_read::return#0 ] 
Uplifting [main] best 7433 combination 
Uplifting [] best 7433 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ keyboard_key_pressed::return#0 ]
Uplifting [keyboard_key_pressed] best 6230 combination reg byte a [ keyboard_key_pressed::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ keyboard_key_pressed::rowidx#0 ]
Uplifting [keyboard_key_pressed] best 6226 combination reg byte a [ keyboard_key_pressed::rowidx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ keyboard_key_pressed::$2 ]
Uplifting [keyboard_key_pressed] best 6220 combination reg byte a [ keyboard_key_pressed::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ keyboard_key_pressed::key#4 ]
Uplifting [keyboard_key_pressed] best 6206 combination reg byte x [ keyboard_key_pressed::key#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ keyboard_key_pressed::colidx#0 ]
Uplifting [keyboard_key_pressed] best 6202 combination reg byte y [ keyboard_key_pressed::colidx#0 ] 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .const RED = 2
  .const GREEN = 5
  .const KEY_E = $e
  .const KEY_C = $14
  .const KEY_I = $21
  .const KEY_SPACE = $3c
  .label SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @13 [phi:@begin->@13]
b13_from_bbegin:
  jmp b13
//SEG4 @13
b13:
//SEG5 [2] call main 
  jsr main
//SEG6 [3] phi from @13 to @end [phi:@13->@end]
bend_from_b13:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BORDERCOL
  //SEG10 [5] phi from main main::@2 to main::@2 [phi:main/main::@2->main::@2]
  b2_from_main:
  b2_from_b2:
    jmp b2
  //SEG11 main::@2
  b2:
  //SEG12 [6] call menu 
  //SEG13 [7] phi from main::@2 to menu [phi:main::@2->menu]
  menu_from_b2:
    jsr menu
    jmp b2_from_b2
}
//SEG14 menu
menu: {
  //SEG15 [8] phi from menu menu::@6 to menu::@2 [phi:menu/menu::@6->menu::@2]
  b2_from_menu:
  b2_from_b6:
    jmp b2
  //SEG16 menu::@2
  b2:
  //SEG17 [9] call keyboard_key_pressed 
  //SEG18 [31] phi from menu::@2 to keyboard_key_pressed [phi:menu::@2->keyboard_key_pressed]
  keyboard_key_pressed_from_b2:
  //SEG19 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_C#0 [phi:menu::@2->keyboard_key_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_C
    jsr keyboard_key_pressed
  //SEG20 [10] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
    // (byte) keyboard_key_pressed::return#2 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
    jmp b16
  //SEG21 menu::@16
  b16:
  //SEG22 [11] (byte~) menu::$0 ← (byte) keyboard_key_pressed::return#2
    // (byte~) menu::$0 = (byte) keyboard_key_pressed::return#2  // register copy reg byte a
  //SEG23 [12] if((byte~) menu::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4_from_b16
  //SEG24 [13] phi from menu::@16 to menu::@9 [phi:menu::@16->menu::@9]
  b9_from_b16:
    jmp b9
  //SEG25 menu::@9
  b9:
  //SEG26 [14] call pressed 
    jsr pressed
    jmp breturn
  //SEG27 menu::@return
  breturn:
  //SEG28 [15] return 
    rts
  //SEG29 [16] phi from menu::@16 to menu::@4 [phi:menu::@16->menu::@4]
  b4_from_b16:
    jmp b4
  //SEG30 menu::@4
  b4:
  //SEG31 [17] call keyboard_key_pressed 
  //SEG32 [31] phi from menu::@4 to keyboard_key_pressed [phi:menu::@4->keyboard_key_pressed]
  keyboard_key_pressed_from_b4:
  //SEG33 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_I#0 [phi:menu::@4->keyboard_key_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_I
    jsr keyboard_key_pressed
  //SEG34 [18] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0
    // (byte) keyboard_key_pressed::return#3 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
    jmp b17
  //SEG35 menu::@17
  b17:
  //SEG36 [19] (byte~) menu::$4 ← (byte) keyboard_key_pressed::return#3
    // (byte~) menu::$4 = (byte) keyboard_key_pressed::return#3  // register copy reg byte a
  //SEG37 [20] if((byte~) menu::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5_from_b17
    jmp b11
  //SEG38 menu::@11
  b11:
  //SEG39 [21] *((const byte*) BORDERCOL#0) ← (const byte) RED#0 -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BORDERCOL
  //SEG40 asm { sei  }
    sei
    jmp breturn
  //SEG41 [23] phi from menu::@17 to menu::@5 [phi:menu::@17->menu::@5]
  b5_from_b17:
    jmp b5
  //SEG42 menu::@5
  b5:
  //SEG43 [24] call keyboard_key_pressed 
  //SEG44 [31] phi from menu::@5 to keyboard_key_pressed [phi:menu::@5->keyboard_key_pressed]
  keyboard_key_pressed_from_b5:
  //SEG45 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_E#0 [phi:menu::@5->keyboard_key_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_E
    jsr keyboard_key_pressed
  //SEG46 [25] (byte) keyboard_key_pressed::return#4 ← (byte) keyboard_key_pressed::return#0
    // (byte) keyboard_key_pressed::return#4 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
    jmp b19
  //SEG47 menu::@19
  b19:
  //SEG48 [26] (byte~) menu::$7 ← (byte) keyboard_key_pressed::return#4
    // (byte~) menu::$7 = (byte) keyboard_key_pressed::return#4  // register copy reg byte a
  //SEG49 [27] if((byte~) menu::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b6
    jmp b13
  //SEG50 menu::@13
  b13:
  //SEG51 [28] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BORDERCOL
  //SEG52 asm { cli  }
    cli
    jmp breturn
  //SEG53 menu::@6
  b6:
  //SEG54 [30] *((const byte*) SCREEN#0) ← ++ *((const byte*) SCREEN#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN
    jmp b2_from_b6
}
//SEG55 keyboard_key_pressed
keyboard_key_pressed: {
  //SEG56 [32] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#4 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuyy=vbuxx_band_vbuc1 
    txa
    and #7
    tay
  //SEG57 [33] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuxx_ror_3 
    txa
    lsr
    lsr
    lsr
  //SEG58 [34] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0 -- vbuxx=vbuaa 
    tax
  //SEG59 [35] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG60 [36] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    // (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#0  // register copy reg byte a
    jmp b2
  //SEG61 keyboard_key_pressed::@2
  b2:
  //SEG62 [37] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
    // (byte~) keyboard_key_pressed::$2 = (byte) keyboard_matrix_read::return#2  // register copy reg byte a
  //SEG63 [38] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuyy 
    and keyboard_matrix_col_bitmask,y
    jmp breturn
  //SEG64 keyboard_key_pressed::@return
  breturn:
  //SEG65 [39] return 
    rts
}
//SEG66 keyboard_matrix_read
keyboard_matrix_read: {
  //SEG67 [40] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
  //SEG68 [41] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    jmp breturn
  //SEG69 keyboard_matrix_read::@return
  breturn:
  //SEG70 [42] return 
    rts
}
//SEG71 pressed
pressed: {
  //SEG72 [43] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
  //SEG73 [44] phi from pressed pressed::@10 to pressed::@2 [phi:pressed/pressed::@10->pressed::@2]
  b2_from_pressed:
  b2_from_b10:
    jmp b2
  //SEG74 pressed::@2
  b2:
  //SEG75 [45] call keyboard_key_pressed 
  //SEG76 [31] phi from pressed::@2 to keyboard_key_pressed [phi:pressed::@2->keyboard_key_pressed]
  keyboard_key_pressed_from_b2:
  //SEG77 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_SPACE#0 [phi:pressed::@2->keyboard_key_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_SPACE
    jsr keyboard_key_pressed
  //SEG78 [46] (byte) keyboard_key_pressed::return#10 ← (byte) keyboard_key_pressed::return#0
    // (byte) keyboard_key_pressed::return#10 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
    jmp b10
  //SEG79 pressed::@10
  b10:
  //SEG80 [47] (byte~) pressed::$0 ← (byte) keyboard_key_pressed::return#10
    // (byte~) pressed::$0 = (byte) keyboard_key_pressed::return#10  // register copy reg byte a
  //SEG81 [48] if((byte~) pressed::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto pressed::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b10
    jmp breturn
  //SEG82 pressed::@return
  breturn:
  //SEG83 [49] return 
    rts
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b13
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp b2
Removing instruction jmp b16
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b17
Removing instruction jmp b11
Removing instruction jmp b5
Removing instruction jmp b19
Removing instruction jmp b13
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b10
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b2_from_b2 with b2
Replacing label b4_from_b16 with b4
Replacing label b5_from_b17 with b5
Replacing label b2_from_b6 with b2
Replacing label b2_from_b10 with b2
Removing instruction bbegin:
Removing instruction b13_from_bbegin:
Removing instruction bend_from_b13:
Removing instruction b2_from_main:
Removing instruction b2_from_b2:
Removing instruction menu_from_b2:
Removing instruction b2_from_menu:
Removing instruction b2_from_b6:
Removing instruction keyboard_key_pressed_from_b2:
Removing instruction b9_from_b16:
Removing instruction b4_from_b16:
Removing instruction keyboard_key_pressed_from_b4:
Removing instruction b5_from_b17:
Removing instruction keyboard_key_pressed_from_b5:
Removing instruction b2_from_pressed:
Removing instruction b2_from_b10:
Removing instruction keyboard_key_pressed_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b13:
Removing instruction bend:
Removing instruction b16:
Removing instruction b9:
Removing instruction b17:
Removing instruction b11:
Removing instruction b19:
Removing instruction b13:
Removing instruction b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b10:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @13
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) 53281
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) CIA1_PORT_A
(const byte*) CIA1_PORT_A#0 CIA1_PORT_A = ((byte*))(word/dword/signed dword) 56320
(byte*) CIA1_PORT_B
(const byte*) CIA1_PORT_B#0 CIA1_PORT_B = ((byte*))(word/dword/signed dword) 56321
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte) KEY_C
(const byte) KEY_C#0 KEY_C = (byte/signed byte/word/signed word/dword/signed dword) 20
(byte) KEY_E
(const byte) KEY_E#0 KEY_E = (byte/signed byte/word/signed word/dword/signed dword) 14
(byte) KEY_I
(const byte) KEY_I#0 KEY_I = (byte/signed byte/word/signed word/dword/signed dword) 33
(byte) KEY_SPACE
(const byte) KEY_SPACE#0 KEY_SPACE = (byte/signed byte/word/signed word/dword/signed dword) 60
(byte) RED
(const byte) RED#0 RED = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$2 reg byte a 4.0
(label) keyboard_key_pressed::@2
(label) keyboard_key_pressed::@return
(byte) keyboard_key_pressed::colidx
(byte) keyboard_key_pressed::colidx#0 reg byte y 0.6666666666666666
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::key#4 reg byte x 2.0
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0 reg byte a 67.66666666666667
(byte) keyboard_key_pressed::return#10 reg byte a 202.0
(byte) keyboard_key_pressed::return#2 reg byte a 202.0
(byte) keyboard_key_pressed::return#3 reg byte a 202.0
(byte) keyboard_key_pressed::return#4 reg byte a 202.0
(byte) keyboard_key_pressed::rowidx
(byte) keyboard_key_pressed::rowidx#0 reg byte a 4.0
(byte[8]) keyboard_matrix_col_bitmask
(const byte[8]) keyboard_matrix_col_bitmask#0 keyboard_matrix_col_bitmask = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 16, (byte/signed byte/word/signed word/dword/signed dword) 32, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/word/signed word/dword/signed dword) 128 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 1.3333333333333333
(byte) keyboard_matrix_read::return#2 reg byte a 4.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte x 4.0
(byte[8]) keyboard_matrix_row_bitmask
(const byte[8]) keyboard_matrix_row_bitmask#0 keyboard_matrix_row_bitmask = { (byte/word/signed word/dword/signed dword) 254, (byte/word/signed word/dword/signed dword) 253, (byte/word/signed word/dword/signed dword) 251, (byte/word/signed word/dword/signed dword) 247, (byte/word/signed word/dword/signed dword) 239, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 191, (byte/signed byte/word/signed word/dword/signed dword) 127 }
(void()) main()
(label) main::@2
(void()) menu()
(byte~) menu::$0 reg byte a 202.0
(byte~) menu::$4 reg byte a 202.0
(byte~) menu::$7 reg byte a 202.0
(label) menu::@11
(label) menu::@13
(label) menu::@16
(label) menu::@17
(label) menu::@19
(label) menu::@2
(label) menu::@4
(label) menu::@5
(label) menu::@6
(label) menu::@9
(label) menu::@return
(void()) pressed()
(byte~) pressed::$0 reg byte a 202.0
(label) pressed::@10
(label) pressed::@2
(label) pressed::@return

reg byte x [ keyboard_key_pressed::key#4 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ menu::$0 ]
reg byte a [ keyboard_key_pressed::return#3 ]
reg byte a [ menu::$4 ]
reg byte a [ keyboard_key_pressed::return#4 ]
reg byte a [ menu::$7 ]
reg byte y [ keyboard_key_pressed::colidx#0 ]
reg byte a [ keyboard_key_pressed::rowidx#0 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ keyboard_key_pressed::return#10 ]
reg byte a [ pressed::$0 ]


FINAL ASSEMBLER
Score: 2851

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .const RED = 2
  .const GREEN = 5
  .const KEY_E = $e
  .const KEY_C = $14
  .const KEY_I = $21
  .const KEY_SPACE = $3c
  .label SCREEN = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @13 [phi:@begin->@13]
//SEG4 @13
//SEG5 [2] call main 
  jsr main
//SEG6 [3] phi from @13 to @end [phi:@13->@end]
//SEG7 @end
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BORDERCOL
  //SEG10 [5] phi from main main::@2 to main::@2 [phi:main/main::@2->main::@2]
  //SEG11 main::@2
  b2:
  //SEG12 [6] call menu 
  //SEG13 [7] phi from main::@2 to menu [phi:main::@2->menu]
    jsr menu
    jmp b2
}
//SEG14 menu
menu: {
  //SEG15 [8] phi from menu menu::@6 to menu::@2 [phi:menu/menu::@6->menu::@2]
  //SEG16 menu::@2
  b2:
  //SEG17 [9] call keyboard_key_pressed 
  //SEG18 [31] phi from menu::@2 to keyboard_key_pressed [phi:menu::@2->keyboard_key_pressed]
  //SEG19 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_C#0 [phi:menu::@2->keyboard_key_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_C
    jsr keyboard_key_pressed
  //SEG20 [10] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
    // (byte) keyboard_key_pressed::return#2 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
  //SEG21 menu::@16
  //SEG22 [11] (byte~) menu::$0 ← (byte) keyboard_key_pressed::return#2
    // (byte~) menu::$0 = (byte) keyboard_key_pressed::return#2  // register copy reg byte a
  //SEG23 [12] if((byte~) menu::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4
  //SEG24 [13] phi from menu::@16 to menu::@9 [phi:menu::@16->menu::@9]
  //SEG25 menu::@9
  //SEG26 [14] call pressed 
    jsr pressed
  //SEG27 menu::@return
  breturn:
  //SEG28 [15] return 
    rts
  //SEG29 [16] phi from menu::@16 to menu::@4 [phi:menu::@16->menu::@4]
  //SEG30 menu::@4
  b4:
  //SEG31 [17] call keyboard_key_pressed 
  //SEG32 [31] phi from menu::@4 to keyboard_key_pressed [phi:menu::@4->keyboard_key_pressed]
  //SEG33 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_I#0 [phi:menu::@4->keyboard_key_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_I
    jsr keyboard_key_pressed
  //SEG34 [18] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0
    // (byte) keyboard_key_pressed::return#3 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
  //SEG35 menu::@17
  //SEG36 [19] (byte~) menu::$4 ← (byte) keyboard_key_pressed::return#3
    // (byte~) menu::$4 = (byte) keyboard_key_pressed::return#3  // register copy reg byte a
  //SEG37 [20] if((byte~) menu::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG38 menu::@11
  //SEG39 [21] *((const byte*) BORDERCOL#0) ← (const byte) RED#0 -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BORDERCOL
  //SEG40 asm { sei  }
    sei
    jmp breturn
  //SEG41 [23] phi from menu::@17 to menu::@5 [phi:menu::@17->menu::@5]
  //SEG42 menu::@5
  b5:
  //SEG43 [24] call keyboard_key_pressed 
  //SEG44 [31] phi from menu::@5 to keyboard_key_pressed [phi:menu::@5->keyboard_key_pressed]
  //SEG45 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_E#0 [phi:menu::@5->keyboard_key_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_E
    jsr keyboard_key_pressed
  //SEG46 [25] (byte) keyboard_key_pressed::return#4 ← (byte) keyboard_key_pressed::return#0
    // (byte) keyboard_key_pressed::return#4 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
  //SEG47 menu::@19
  //SEG48 [26] (byte~) menu::$7 ← (byte) keyboard_key_pressed::return#4
    // (byte~) menu::$7 = (byte) keyboard_key_pressed::return#4  // register copy reg byte a
  //SEG49 [27] if((byte~) menu::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b6
  //SEG50 menu::@13
  //SEG51 [28] *((const byte*) BORDERCOL#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BORDERCOL
  //SEG52 asm { cli  }
    cli
    jmp breturn
  //SEG53 menu::@6
  b6:
  //SEG54 [30] *((const byte*) SCREEN#0) ← ++ *((const byte*) SCREEN#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN
    jmp b2
}
//SEG55 keyboard_key_pressed
keyboard_key_pressed: {
  //SEG56 [32] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#4 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuyy=vbuxx_band_vbuc1 
    txa
    and #7
    tay
  //SEG57 [33] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuxx_ror_3 
    txa
    lsr
    lsr
    lsr
  //SEG58 [34] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0 -- vbuxx=vbuaa 
    tax
  //SEG59 [35] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG60 [36] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    // (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#0  // register copy reg byte a
  //SEG61 keyboard_key_pressed::@2
  //SEG62 [37] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
    // (byte~) keyboard_key_pressed::$2 = (byte) keyboard_matrix_read::return#2  // register copy reg byte a
  //SEG63 [38] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuyy 
    and keyboard_matrix_col_bitmask,y
  //SEG64 keyboard_key_pressed::@return
  //SEG65 [39] return 
    rts
}
//SEG66 keyboard_matrix_read
keyboard_matrix_read: {
  //SEG67 [40] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
  //SEG68 [41] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
  //SEG69 keyboard_matrix_read::@return
  //SEG70 [42] return 
    rts
}
//SEG71 pressed
pressed: {
  //SEG72 [43] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
  //SEG73 [44] phi from pressed pressed::@10 to pressed::@2 [phi:pressed/pressed::@10->pressed::@2]
  //SEG74 pressed::@2
  b2:
  //SEG75 [45] call keyboard_key_pressed 
  //SEG76 [31] phi from pressed::@2 to keyboard_key_pressed [phi:pressed::@2->keyboard_key_pressed]
  //SEG77 [31] phi (byte) keyboard_key_pressed::key#4 = (const byte) KEY_SPACE#0 [phi:pressed::@2->keyboard_key_pressed#0] -- vbuxx=vbuc1 
    ldx #KEY_SPACE
    jsr keyboard_key_pressed
  //SEG78 [46] (byte) keyboard_key_pressed::return#10 ← (byte) keyboard_key_pressed::return#0
    // (byte) keyboard_key_pressed::return#10 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
  //SEG79 pressed::@10
  //SEG80 [47] (byte~) pressed::$0 ← (byte) keyboard_key_pressed::return#10
    // (byte~) pressed::$0 = (byte) keyboard_key_pressed::return#10  // register copy reg byte a
  //SEG81 [48] if((byte~) pressed::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto pressed::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG82 pressed::@return
  //SEG83 [49] return 
    rts
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80

