
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call printf_schar 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call cputln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call printf_schar 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] phi()
  [17] call cputln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] phi()
  [19] call printf_uint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [20] phi()
  [21] call cputln 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [22] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [23] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [24] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [24] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [24] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [25] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [26] conio_cursor_x = 0
  [27] conio_cursor_y = 0
  [28] conio_line_text = DEFAULT_SCREEN
  [29] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [30] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [31] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [32] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [33] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [34] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [35] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [36] clrscr::line_text#5[clrscr::c#2] = ' '
  [37] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [38] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void printf_schar(signed byte printf_schar::value , byte printf_schar::format_min_length , byte printf_schar::format_justify_left , byte printf_schar::format_sign_always , byte printf_schar::format_zero_padding , byte printf_schar::format_upper_case , byte printf_schar::format_radix)
printf_schar: scope:[printf_schar]  from main::@1 main::@3
  [39] printf_schar::format_zero_padding#2 = phi( main::@1/0, main::@3/1 )
  [39] printf_schar::format_radix#2 = phi( main::@1/DECIMAL, main::@3/OCTAL )
  [39] printf_schar::format_sign_always#2 = phi( main::@1/0, main::@3/1 )
  [39] printf_schar::value#3 = phi( main::@1/-$4d, main::@3/$63 )
  [40] *((byte*)&printf_buffer) = 0
  [41] if(printf_schar::value#3<0) goto printf_schar::@1
  to:printf_schar::@3
printf_schar::@3: scope:[printf_schar]  from printf_schar
  [42] if(0==printf_schar::format_sign_always#2) goto printf_schar::@2
  to:printf_schar::@4
printf_schar::@4: scope:[printf_schar]  from printf_schar::@3
  [43] *((byte*)&printf_buffer) = '+'
  to:printf_schar::@2
printf_schar::@2: scope:[printf_schar]  from printf_schar::@1 printf_schar::@3 printf_schar::@4
  [44] printf_schar::value#5 = phi( printf_schar::@1/printf_schar::value#0, printf_schar::@3/printf_schar::value#3, printf_schar::@4/printf_schar::value#3 )
  [45] uctoa::value#1 = (byte)printf_schar::value#5
  [46] uctoa::radix#0 = printf_schar::format_radix#2
  [47] call uctoa 
  to:printf_schar::@5
printf_schar::@5: scope:[printf_schar]  from printf_schar::@2
  [48] printf_number_buffer::buffer_sign#1 = *((byte*)&printf_buffer)
  [49] printf_number_buffer::format_zero_padding#1 = printf_schar::format_zero_padding#2
  [50] call printf_number_buffer 
  to:printf_schar::@return
printf_schar::@return: scope:[printf_schar]  from printf_schar::@5
  [51] return 
  to:@return
printf_schar::@1: scope:[printf_schar]  from printf_schar
  [52] printf_schar::value#0 = - printf_schar::value#3
  [53] *((byte*)&printf_buffer) = '-'
  to:printf_schar::@2

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3 main::@2 main::@4 main::@6
  [54] conio_line_text = conio_line_text + $28
  [55] conio_line_color = conio_line_color + $28
  [56] conio_cursor_x = 0
  [57] conio_cursor_y = ++ conio_cursor_y
  [58] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [59] return 
  to:@return

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@5
  [60] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [61] *((byte*)&printf_buffer) = 0
  [62] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [63] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [64] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [65] return 
  to:@return

void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
uctoa: scope:[uctoa]  from printf_schar::@2
  [66] if(uctoa::radix#0==DECIMAL) goto uctoa::@1
  to:uctoa::@2
uctoa::@2: scope:[uctoa]  from uctoa
  [67] if(uctoa::radix#0==HEXADECIMAL) goto uctoa::@1
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@2
  [68] if(uctoa::radix#0==OCTAL) goto uctoa::@1
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@3
  [69] if(uctoa::radix#0==BINARY) goto uctoa::@1
  to:uctoa::@5
uctoa::@5: scope:[uctoa]  from uctoa::@4
  [70] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) = 'e'
  [71] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1) = 'r'
  [72] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2) = 'r'
  [73] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+3) = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@5 uctoa::@8
  [74] return 
  to:@return
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@2 uctoa::@3 uctoa::@4
  [75] uctoa::digit_values#8 = phi( uctoa/RADIX_DECIMAL_VALUES_CHAR, uctoa::@2/RADIX_HEXADECIMAL_VALUES_CHAR, uctoa::@3/RADIX_OCTAL_VALUES_CHAR, uctoa::@4/RADIX_BINARY_VALUES_CHAR )
  [75] uctoa::max_digits#7 = phi( uctoa/3, uctoa::@2/2, uctoa::@3/3, uctoa::@4/8 )
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@1 uctoa::@9
  [76] uctoa::buffer#11 = phi( uctoa::@9/uctoa::buffer#14, uctoa::@1/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [76] uctoa::started#2 = phi( uctoa::@9/uctoa::started#4, uctoa::@1/0 )
  [76] uctoa::value#2 = phi( uctoa::@9/uctoa::value#6, uctoa::@1/uctoa::value#1 )
  [76] uctoa::digit#2 = phi( uctoa::@9/uctoa::digit#1, uctoa::@1/0 )
  [77] uctoa::$4 = uctoa::max_digits#7 - 1
  [78] if(uctoa::digit#2<uctoa::$4) goto uctoa::@7
  to:uctoa::@8
uctoa::@8: scope:[uctoa]  from uctoa::@6
  [79] *uctoa::buffer#11 = DIGITS[uctoa::value#2]
  [80] uctoa::buffer#3 = ++ uctoa::buffer#11
  [81] *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@7: scope:[uctoa]  from uctoa::@6
  [82] uctoa::digit_value#0 = uctoa::digit_values#8[uctoa::digit#2]
  [83] if(0!=uctoa::started#2) goto uctoa::@10
  to:uctoa::@12
uctoa::@12: scope:[uctoa]  from uctoa::@7
  [84] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@10
  to:uctoa::@9
uctoa::@9: scope:[uctoa]  from uctoa::@11 uctoa::@12
  [85] uctoa::buffer#14 = phi( uctoa::@12/uctoa::buffer#11, uctoa::@11/uctoa::buffer#4 )
  [85] uctoa::started#4 = phi( uctoa::@12/uctoa::started#2, uctoa::@11/1 )
  [85] uctoa::value#6 = phi( uctoa::@12/uctoa::value#2, uctoa::@11/uctoa::value#0 )
  [86] uctoa::digit#1 = ++ uctoa::digit#2
  to:uctoa::@6
uctoa::@10: scope:[uctoa]  from uctoa::@12 uctoa::@7
  [87] uctoa_append::buffer#0 = uctoa::buffer#11
  [88] uctoa_append::value#0 = uctoa::value#2
  [89] uctoa_append::sub#0 = uctoa::digit_value#0
  [90] call uctoa_append 
  [91] uctoa_append::return#0 = uctoa_append::value#2
  to:uctoa::@11
uctoa::@11: scope:[uctoa]  from uctoa::@10
  [92] uctoa::value#0 = uctoa_append::return#0
  [93] uctoa::buffer#4 = ++ uctoa::buffer#11
  to:uctoa::@9

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_schar::@5 printf_uint::@2
  [94] printf_number_buffer::format_upper_case#10 = phi( printf_schar::@5/0, printf_uint::@2/printf_uint::format_upper_case#0 )
  [94] printf_number_buffer::buffer_sign#10 = phi( printf_schar::@5/printf_number_buffer::buffer_sign#1, printf_uint::@2/printf_number_buffer::buffer_sign#0 )
  [94] printf_number_buffer::format_zero_padding#10 = phi( printf_schar::@5/printf_number_buffer::format_zero_padding#1, printf_uint::@2/printf_uint::format_zero_padding#0 )
  [94] printf_number_buffer::format_justify_left#10 = phi( printf_schar::@5/0, printf_uint::@2/printf_uint::format_justify_left#0 )
  [94] printf_number_buffer::format_min_length#2 = phi( printf_schar::@5/6, printf_uint::@2/printf_uint::format_min_length#0 )
  [95] if(0==printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [96] phi()
  [97] call strlen 
  [98] strlen::return#2 = strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [99] printf_number_buffer::$19 = strlen::return#2
  [100] printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19
  [101] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [102] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [103] printf_number_buffer::len#2 = phi( printf_number_buffer::@14/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  [104] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#2 - printf_number_buffer::len#2
  [105] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [106] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [107] printf_number_buffer::padding#10 = phi( printf_number_buffer/0, printf_number_buffer::@21/printf_number_buffer::padding#1, printf_number_buffer::@13/0 )
  [108] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [109] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [110] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [111] printf_padding::length#0 = (byte)printf_number_buffer::padding#10
  [112] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [113] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [114] cputc::c#2 = printf_number_buffer::buffer_sign#10
  [115] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [116] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [117] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [118] printf_padding::length#1 = (byte)printf_number_buffer::padding#10
  [119] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [120] if(0==printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [121] phi()
  [122] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [123] phi()
  [124] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [125] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [126] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [127] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [128] printf_padding::length#2 = (byte)printf_number_buffer::padding#10
  [129] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [130] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [131] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [132] phi()
  [133] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [134] phi()
  [135] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [136] phi()
  [137] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [138] phi()
  [139] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [140] conio_line_text = conio_line_text - $28
  [141] conio_line_color = conio_line_color - $28
  [142] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [143] return 
  to:@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [144] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [145] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [145] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [145] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/printf_uint::uvalue#0 )
  [145] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [146] if(utoa::digit#2<utoa::max_digits#2-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [147] utoa::$11 = (byte)utoa::value#2
  [148] *utoa::buffer#11 = DIGITS[utoa::$11]
  [149] utoa::buffer#3 = ++ utoa::buffer#11
  [150] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [151] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [152] utoa::$10 = utoa::digit#2 << 1
  [153] utoa::digit_value#0 = RADIX_HEXADECIMAL_VALUES[utoa::$10]
  [154] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [155] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [156] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [156] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [156] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [157] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [158] utoa_append::buffer#0 = utoa::buffer#11
  [159] utoa_append::value#0 = utoa::value#2
  [160] utoa_append::sub#0 = utoa::digit_value#0
  [161] call utoa_append 
  [162] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [163] utoa::value#0 = utoa_append::return#0
  [164] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@10
  [165] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [166] uctoa_append::digit#2 = phi( uctoa_append/0, uctoa_append::@2/uctoa_append::digit#1 )
  [166] uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#0, uctoa_append::@2/uctoa_append::value#1 )
  [167] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [168] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2]
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [169] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [170] uctoa_append::digit#1 = ++ uctoa_append::digit#2
  [171] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0
  to:uctoa_append::@1

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [172] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [173] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [173] strlen::str#2 = phi( strlen/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS, strlen::@2/strlen::str#0 )
  [174] if(0!=*strlen::str#2) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [175] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [176] strlen::len#1 = ++ strlen::len#2
  [177] strlen::str#0 = ++ strlen::str#2
  to:strlen::@1

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [178] printf_padding::pad#5 = phi( printf_number_buffer::@10/'0', printf_number_buffer::@12/' ', printf_number_buffer::@8/' ' )
  [178] printf_padding::length#4 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [179] printf_padding::i#2 = phi( printf_padding/0, printf_padding::@3/printf_padding::i#1 )
  [180] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [181] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [182] cputc::c#1 = printf_padding::pad#5
  [183] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [184] printf_padding::i#1 = ++ printf_padding::i#2
  to:printf_padding::@1

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  [185] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@9/cputc::c#2, printf_padding::@2/cputc::c#1 )
  [186] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [187] conio_line_text[conio_cursor_x] = cputc::c#3
  [188] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [189] conio_cursor_x = ++ conio_cursor_x
  [190] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [191] phi()
  [192] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [193] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [194] phi()
  [195] call cputln 
  to:cputc::@return

byte* strupr(byte* strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [196] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [197] strupr::src#2 = phi( strupr/strupr::str#0, strupr::@3/strupr::src#1 )
  [198] if(0!=*strupr::src#2) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [199] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [200] toupper::ch#0 = *strupr::src#2
  [201] call toupper 
  [202] toupper::return#3 = toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [203] strupr::$0 = toupper::return#3
  [204] *strupr::src#2 = strupr::$0
  [205] strupr::src#1 = ++ strupr::src#2
  to:strupr::@1

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from printf_number_buffer::@5
  [206] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [207] cputs::s#2 = phi( cputs/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS, cputs::@2/cputs::s#0 )
  [208] cputs::c#1 = *cputs::s#2
  [209] cputs::s#0 = ++ cputs::s#2
  [210] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [211] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [212] cputc::c#0 = cputs::c#1
  [213] call cputc 
  to:cputs::@1

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [214] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [214] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [215] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [216] memcpy::src#4 = (byte*)memcpy::source#2
  [217] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [218] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [218] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [219] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [220] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [221] *memcpy::dst#2 = *memcpy::src#2
  [222] memcpy::dst#1 = ++ memcpy::dst#2
  [223] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [224] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [224] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [225] memset::end#0 = (byte*)memset::str#3 + $28
  [226] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [227] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [228] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [229] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [230] *memset::dst#2 = memset::c#4
  [231] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [232] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [233] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [233] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [234] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [235] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [236] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [237] utoa_append::digit#1 = ++ utoa_append::digit#2
  [238] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

byte toupper(byte toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [239] if(toupper::ch#0<'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [240] if(toupper::ch#0<='z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [241] toupper::return#0 = toupper::ch#0 + 'A'-'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [242] toupper::return#2 = phi( toupper::@1/toupper::return#0, toupper/toupper::ch#0, toupper::@2/toupper::ch#0 )
  [243] return 
  to:@return
