
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (bool~) main::$0 ← (const byte*) main::rem != (const byte*) main::NULL
  if((bool~) main::$0) goto main::@1
  to:main::@2
main::@1: scope:[main]  from main
  *((const byte*) main::screen + (number) 0) ← (byte) '*'
  to:main::@return
main::@2: scope:[main]  from main
  *((const byte*) main::screen + (number) 0) ← (byte) '.'
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::NULL = (byte*)(number) 0
(const byte*) main::rem = (byte*)(number) $ff
(const byte*) main::screen = (byte*)(number) $400

Adding number conversion cast (unumber) 0 in *((const byte*) main::screen + (number) 0) ← (byte) '*'
Adding number conversion cast (unumber) 0 in *((const byte*) main::screen + (number) 0) ← (byte) '.'
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (byte*) 255
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [1] if((const byte*) main::rem!=(const byte*) main::NULL) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
if() condition always true - replacing block destination [1] if((const byte*) main::rem!=(const byte*) main::NULL) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero main::screen in [2] *((const byte*) main::screen + (byte) 0) ← (byte) '*'
Simplifying expression containing zero main::screen in [3] *((const byte*) main::screen + (byte) 0) ← (byte) '.'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte*) main::NULL
Eliminating unused constant (const byte*) main::rem
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@2
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding NOP phi() at start of main
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main
  [1] *((const byte*) main::screen) ← (byte) '*'
  to:main::@return
main::@return: scope:[main]  from main::@1
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
//Test that constant pointers are detected correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    jmp __b1
    // main::@1
  __b1:
    // [1] *((const byte*) main::screen) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *((const byte*) main::screen) ← (byte) '*' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
//Test that constant pointers are detected correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    jmp __b1
    // main::@1
  __b1:
    // [1] *((const byte*) main::screen) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@1
(label) main::@return
(const byte*) main::screen = (byte*) 1024



FINAL ASSEMBLER
Score: 12

  // File Comments
//Test that constant pointers are detected correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // main::@1
    // screen[0] = '*'
    // [1] *((const byte*) main::screen) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta screen
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

