Fixing pointer increment (signed word*) sin16s_gen::sintab ← ++ (signed word*) sin16s_gen::sintab
Fixing pointer increment (signed word*) sin16s_gen2::sintab ← ++ (signed word*) sin16s_gen2::sintab
Identified literal word (dword) { div32u16u::quotient_hi, div32u16u::quotient_lo } in (dword) div32u16u::quotient ← { (word) div32u16u::quotient_hi, (word) div32u16u::quotient_lo }
Adding pointer type conversion cast (byte*) print_screen in (byte*) print_screen ← (number) $400
Identified constant variable (word) main::tabsize
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) divr16u::@7
Culled Empty Block (label) @3
Culled Empty Block (label) div16u::@1
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) mul8u::@5
Culled Empty Block (label) mul8u::@6
Culled Empty Block (label) mul8u::@8
Culled Empty Block (label) mul8u::@9
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) mul8su::@3
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) sin8s::@9
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) mulu8_sel::@1
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) print_sbyte::@4
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) @38
Culled Empty Block (label) @39
Culled Empty Block (label) @40
Culled Empty Block (label) sin8u_table::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@13
divr16u: scope:[divr16u]  from div16u
  (word) divr16u::divisor#5 ← phi( div16u/(word) divr16u::divisor#0 )
  (word) divr16u::dividend#4 ← phi( div16u/(word) divr16u::dividend#1 )
  (word) divr16u::rem#8 ← phi( div16u/(word) divr16u::rem#3 )
  (word) divr16u::quotient#0 ← (number) 0
  (byte) divr16u::i#0 ← (byte) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#3 ← phi( divr16u/(word) divr16u::divisor#5 divr16u::@3/(word) divr16u::divisor#6 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#4 divr16u::@3/(word) divr16u::dividend#5 )
  (word) divr16u::rem#4 ← phi( divr16u/(word) divr16u::rem#8 divr16u::@3/(word) divr16u::rem#9 )
  (word~) divr16u::$0 ← (word) divr16u::rem#4 << (number) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
  (bool~) divr16u::$3 ← (number~) divr16u::$2 != (number) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#1 ← phi( divr16u::@1/(word) divr16u::divisor#3 divr16u::@4/(word) divr16u::divisor#4 )
  (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#3 ← phi( divr16u::@1/(word) divr16u::dividend#2 divr16u::@4/(word) divr16u::dividend#6 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (number) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#4 ← phi( divr16u::@1/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#6 ← phi( divr16u::@1/(word) divr16u::dividend#2 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (number~) divr16u::$5 ← (word) divr16u::rem#6 | (number) 1
  (word) divr16u::rem#1 ← (number~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#6 ← phi( divr16u::@2/(word) divr16u::divisor#1 divr16u::@5/(word) divr16u::divisor#2 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#5 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#7 )
  (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#7 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#2 ← phi( divr16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::rem#7 ← phi( divr16u::@2/(word) divr16u::rem#5 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#7 - (word) divr16u::divisor#2
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) divr16u::return#3 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#3
  return 
  to:@return
div16u: scope:[div16u]  from sin8u_table
  (word) div16u::divisor#1 ← phi( sin8u_table/(word) div16u::divisor#0 )
  (word) div16u::dividend#1 ← phi( sin8u_table/(word) div16u::dividend#0 )
  (word) divr16u::dividend#1 ← (word) div16u::dividend#1
  (word) divr16u::divisor#0 ← (word) div16u::divisor#1
  (word) divr16u::rem#3 ← (number) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  (word) divr16u::return#4 ← phi( div16u/(word) divr16u::return#2 )
  (word~) div16u::$0 ← (word) divr16u::return#4
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  (word) div16u::return#3 ← phi( div16u::@2/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#3
  return 
  to:@return
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  (byte) mul8u::a#6 ← phi( mul8su/(byte) mul8u::a#1 mulu8_sel/(byte) mul8u::a#2 )
  (byte) mul8u::b#2 ← phi( mul8su/(byte) mul8u::b#0 mulu8_sel/(byte) mul8u::b#1 )
  (word) mul8u::res#0 ← (number) 0
  (word) mul8u::mb#0 ← (byte) mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@4/(byte) mul8u::a#0 )
  (bool~) mul8u::$0 ← (byte) mul8u::a#3 != (number) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#4 ← phi( mul8u::@1/(byte) mul8u::a#3 )
  (number~) mul8u::$1 ← (byte) mul8u::a#4 & (number) 1
  (bool~) mul8u::$2 ← (number~) mul8u::$1 != (number) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@7
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@7
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@7/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@7/(word) mul8u::mb#3 )
  (byte) mul8u::a#5 ← phi( mul8u::@2/(byte) mul8u::a#4 mul8u::@7/(byte) mul8u::a#7 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (number) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@7: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#7 ← phi( mul8u::@2/(byte) mul8u::a#4 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#4 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#4
  return 
  to:@return
mul8su: scope:[mul8su]  from sin8u_table::@15
  (byte) mul8su::b#1 ← phi( sin8u_table::@15/(byte) mul8su::b#0 )
  (signed byte) mul8su::a#1 ← phi( sin8u_table::@15/(signed byte) mul8su::a#0 )
  (byte~) mul8su::$0 ← ((byte)) (signed byte) mul8su::a#1
  (byte~) mul8su::$1 ← ((byte)) (byte) mul8su::b#1
  (byte) mul8u::a#1 ← (byte~) mul8su::$0
  (byte) mul8u::b#0 ← (byte~) mul8su::$1
  call mul8u 
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:mul8su::@4
mul8su::@4: scope:[mul8su]  from mul8su
  (byte) mul8su::b#3 ← phi( mul8su/(byte) mul8su::b#1 )
  (signed byte) mul8su::a#2 ← phi( mul8su/(signed byte) mul8su::a#1 )
  (word) mul8u::return#5 ← phi( mul8su/(word) mul8u::return#2 )
  (word~) mul8su::$2 ← (word) mul8u::return#5
  (word) mul8su::m#0 ← (word~) mul8su::$2
  (bool~) mul8su::$3 ← (signed byte) mul8su::a#2 < (number) 0
  (bool~) mul8su::$4 ← ! (bool~) mul8su::$3
  if((bool~) mul8su::$4) goto mul8su::@1
  to:mul8su::@2
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@4
  (word) mul8su::m#2 ← phi( mul8su::@2/(word) mul8su::m#1 mul8su::@4/(word) mul8su::m#0 )
  (signed word~) mul8su::$5 ← ((signed word)) (word) mul8su::m#2
  (signed word) mul8su::return#0 ← (signed word~) mul8su::$5
  to:mul8su::@return
mul8su::@2: scope:[mul8su]  from mul8su::@4
  (byte) mul8su::b#2 ← phi( mul8su::@4/(byte) mul8su::b#3 )
  (word) mul8su::m#3 ← phi( mul8su::@4/(word) mul8su::m#0 )
  (byte~) mul8su::$7 ← > (word) mul8su::m#3
  (byte~) mul8su::$8 ← ((byte)) (byte) mul8su::b#2
  (byte~) mul8su::$9 ← (byte~) mul8su::$7 - (byte~) mul8su::$8
  (byte~) mul8su::$10 ← (byte~) mul8su::$9
  (word) mul8su::m#1 ← (word) mul8su::m#3 hi= (byte~) mul8su::$10
  to:mul8su::@1
mul8su::@return: scope:[mul8su]  from mul8su::@1
  (signed word) mul8su::return#3 ← phi( mul8su::@1/(signed word) mul8su::return#0 )
  (signed word) mul8su::return#1 ← (signed word) mul8su::return#3
  return 
  to:@return
@13: scope:[]  from @begin
  (word) PI2_u4f12#0 ← (number) $6488
  (word) PI_u4f12#0 ← (number) $3244
  (word) PI_HALF_u4f12#0 ← (number) $1922
  to:@20
sin8s: scope:[sin8s]  from sin8u_table::@1
  (word) sin8s::x#3 ← phi( sin8u_table::@1/(word) sin8s::x#2 )
  (byte) sin8s::isUpper#0 ← (number) 0
  (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (word) PI_u4f12#0
  (bool~) sin8s::$1 ← ! (bool~) sin8s::$0
  if((bool~) sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) sin8s::isUpper#0 sin8s::@5/(byte) sin8s::isUpper#1 )
  (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#3 sin8s::@5/(word) sin8s::x#0 )
  (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (word) PI_HALF_u4f12#0
  (bool~) sin8s::$3 ← ! (bool~) sin8s::$2
  if((bool~) sin8s::$3) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  (word) sin8s::x#5 ← phi( sin8s/(word) sin8s::x#3 )
  (word~) sin8s::$19 ← (word) sin8s::x#5 - (word) PI_u4f12#0
  (word) sin8s::x#0 ← (word~) sin8s::$19
  (byte) sin8s::isUpper#1 ← (number) 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  (byte) sin8s::isUpper#9 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 sin8s::@6/(byte) sin8s::isUpper#11 )
  (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#1 )
  (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
  (byte~) sin8s::$5 ← > (word~) sin8s::$4
  (byte) sin8s::x1#0 ← (byte~) sin8s::$5
  (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  (byte) mulu8_sel::select#0 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#6
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@2
  (byte) sin8s::isUpper#8 ← phi( sin8s::@2/(byte) sin8s::isUpper#9 )
  (byte) sin8s::x1#1 ← phi( sin8s::@2/(byte) sin8s::x1#0 )
  (byte) mulu8_sel::return#7 ← phi( sin8s::@2/(byte) mulu8_sel::return#0 )
  (byte~) sin8s::$6 ← (byte) mulu8_sel::return#7
  (byte) sin8s::x2#0 ← (byte~) sin8s::$6
  (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#1
  (byte) mulu8_sel::select#1 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#6
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  (byte) sin8s::isUpper#7 ← phi( sin8s::@10/(byte) sin8s::isUpper#8 )
  (byte) sin8s::x1#4 ← phi( sin8s::@10/(byte) sin8s::x1#1 )
  (byte) mulu8_sel::return#8 ← phi( sin8s::@10/(byte) mulu8_sel::return#1 )
  (byte~) sin8s::$7 ← (byte) mulu8_sel::return#8
  (byte) sin8s::x3#0 ← (byte~) sin8s::$7
  (byte) sin8s::DIV_6#0 ← (number) $2b
  (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  (byte) mulu8_sel::v2#2 ← (byte) sin8s::DIV_6#0
  (byte) mulu8_sel::select#2 ← (number) 1
  call mulu8_sel 
  (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#6
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  (byte) sin8s::isUpper#6 ← phi( sin8s::@11/(byte) sin8s::isUpper#7 )
  (byte) sin8s::x3#1 ← phi( sin8s::@11/(byte) sin8s::x3#0 )
  (byte) sin8s::x1#2 ← phi( sin8s::@11/(byte) sin8s::x1#4 )
  (byte) mulu8_sel::return#9 ← phi( sin8s::@11/(byte) mulu8_sel::return#2 )
  (byte~) sin8s::$8 ← (byte) mulu8_sel::return#9
  (byte) sin8s::x3_6#0 ← (byte~) sin8s::$8
  (byte~) sin8s::$9 ← (byte) sin8s::x1#2 - (byte) sin8s::x3_6#0
  (byte) sin8s::usinx#0 ← (byte~) sin8s::$9
  (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#1
  (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#2
  (byte) mulu8_sel::select#3 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#3 ← (byte) mulu8_sel::return#6
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  (byte) sin8s::isUpper#5 ← phi( sin8s::@12/(byte) sin8s::isUpper#6 )
  (byte) sin8s::usinx#7 ← phi( sin8s::@12/(byte) sin8s::usinx#0 )
  (byte) sin8s::x1#3 ← phi( sin8s::@12/(byte) sin8s::x1#2 )
  (byte) mulu8_sel::return#10 ← phi( sin8s::@12/(byte) mulu8_sel::return#3 )
  (byte~) sin8s::$10 ← (byte) mulu8_sel::return#10
  (byte) sin8s::x4#0 ← (byte~) sin8s::$10
  (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#3
  (byte) mulu8_sel::select#4 ← (number) 0
  call mulu8_sel 
  (byte) mulu8_sel::return#4 ← (byte) mulu8_sel::return#6
  to:sin8s::@14
sin8s::@14: scope:[sin8s]  from sin8s::@13
  (byte) sin8s::isUpper#3 ← phi( sin8s::@13/(byte) sin8s::isUpper#5 )
  (byte) sin8s::usinx#3 ← phi( sin8s::@13/(byte) sin8s::usinx#7 )
  (byte) mulu8_sel::return#11 ← phi( sin8s::@13/(byte) mulu8_sel::return#4 )
  (byte~) sin8s::$11 ← (byte) mulu8_sel::return#11
  (byte) sin8s::x5#0 ← (byte~) sin8s::$11
  (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
  (byte) sin8s::x5_128#0 ← (byte~) sin8s::$12
  (byte~) sin8s::$13 ← (byte) sin8s::usinx#3 + (byte) sin8s::x5_128#0
  (byte) sin8s::usinx#1 ← (byte~) sin8s::$13
  (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
  (bool~) sin8s::$15 ← ! (bool~) sin8s::$14
  if((bool~) sin8s::$15) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  (byte) sin8s::isUpper#11 ← phi( sin8s::@1/(byte) sin8s::isUpper#10 )
  (word) sin8s::x#7 ← phi( sin8s::@1/(word) sin8s::x#4 )
  (word~) sin8s::$20 ← (word) PI_u4f12#0 - (word) sin8s::x#7
  (word) sin8s::x#1 ← (word~) sin8s::$20
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@14 sin8s::@7
  (byte) sin8s::isUpper#2 ← phi( sin8s::@14/(byte) sin8s::isUpper#3 sin8s::@7/(byte) sin8s::isUpper#4 )
  (byte) sin8s::usinx#4 ← phi( sin8s::@14/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  (signed byte~) sin8s::$16 ← ((signed byte)) (byte) sin8s::usinx#4
  (signed byte) sin8s::sinx#0 ← (signed byte~) sin8s::$16
  (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (number) 0
  (bool~) sin8s::$18 ← ! (bool~) sin8s::$17
  if((bool~) sin8s::$18) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@14
  (byte) sin8s::isUpper#4 ← phi( sin8s::@14/(byte) sin8s::isUpper#3 )
  (byte) sin8s::usinx#5 ← phi( sin8s::@14/(byte) sin8s::usinx#1 )
  (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#5
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  (signed byte) sin8s::sinx#2 ← phi( sin8s::@3/(signed byte) sin8s::sinx#0 sin8s::@8/(signed byte) sin8s::sinx#1 )
  (signed byte) sin8s::return#0 ← (signed byte) sin8s::sinx#2
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  (byte) sin8s::usinx#6 ← phi( sin8s::@3/(byte) sin8s::usinx#4 )
  (signed byte~) sin8s::$21 ← ((signed byte)) (byte) sin8s::usinx#6
  (signed byte~) sin8s::$22 ← - (signed byte~) sin8s::$21
  (signed byte) sin8s::sinx#1 ← (signed byte~) sin8s::$22
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4
  (signed byte) sin8s::return#3 ← phi( sin8s::@4/(signed byte) sin8s::return#0 )
  (signed byte) sin8s::return#1 ← (signed byte) sin8s::return#3
  return 
  to:@return
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@13 sin8s::@2
  (byte) mulu8_sel::select#6 ← phi( sin8s::@10/(byte) mulu8_sel::select#1 sin8s::@11/(byte) mulu8_sel::select#2 sin8s::@12/(byte) mulu8_sel::select#3 sin8s::@13/(byte) mulu8_sel::select#4 sin8s::@2/(byte) mulu8_sel::select#0 )
  (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(byte) mulu8_sel::v2#1 sin8s::@11/(byte) mulu8_sel::v2#2 sin8s::@12/(byte) mulu8_sel::v2#3 sin8s::@13/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#1 sin8s::@11/(byte) mulu8_sel::v1#2 sin8s::@12/(byte) mulu8_sel::v1#3 sin8s::@13/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5
  call mul8u 
  (word) mul8u::return#3 ← (word) mul8u::return#1
  to:mulu8_sel::@2
mulu8_sel::@2: scope:[mulu8_sel]  from mulu8_sel
  (byte) mulu8_sel::select#5 ← phi( mulu8_sel/(byte) mulu8_sel::select#6 )
  (word) mul8u::return#6 ← phi( mulu8_sel/(word) mul8u::return#3 )
  (word~) mulu8_sel::$0 ← (word) mul8u::return#6
  (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  (byte~) mulu8_sel::$2 ← > (word~) mulu8_sel::$1
  (byte) mulu8_sel::return#5 ← (byte~) mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@2
  (byte) mulu8_sel::return#12 ← phi( mulu8_sel::@2/(byte) mulu8_sel::return#5 )
  (byte) mulu8_sel::return#6 ← (byte) mulu8_sel::return#12
  return 
  to:@return
@20: scope:[]  from @13
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@32
print_str: scope:[print_str]  from sin8u_table::@11 sin8u_table::@16 sin8u_table::@18 sin8u_table::@20 sin8u_table::@22 sin8u_table::@3 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  (byte*) print_char_cursor#105 ← phi( sin8u_table::@11/(byte*) print_char_cursor#32 sin8u_table::@16/(byte*) print_char_cursor#103 sin8u_table::@18/(byte*) print_char_cursor#37 sin8u_table::@20/(byte*) print_char_cursor#39 sin8u_table::@22/(byte*) print_char_cursor#41 sin8u_table::@3/(byte*) print_char_cursor#102 sin8u_table::@5/(byte*) print_char_cursor#26 sin8u_table::@7/(byte*) print_char_cursor#28 sin8u_table::@9/(byte*) print_char_cursor#30 )
  (byte*) print_str::str#12 ← phi( sin8u_table::@11/(byte*) print_str::str#5 sin8u_table::@16/(byte*) print_str::str#6 sin8u_table::@18/(byte*) print_str::str#7 sin8u_table::@20/(byte*) print_str::str#8 sin8u_table::@22/(byte*) print_str::str#9 sin8u_table::@3/(byte*) print_str::str#1 sin8u_table::@5/(byte*) print_str::str#2 sin8u_table::@7/(byte*) print_str::str#3 sin8u_table::@9/(byte*) print_str::str#4 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#92 ← phi( print_str/(byte*) print_char_cursor#105 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← *((byte*) print_str::str#10) != (byte) '@'
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#47 ← phi( print_str::@1/(byte*) print_char_cursor#92 )
  (byte*) print_str::str#11 ← phi( print_str::@1/(byte*) print_str::str#10 )
  *((byte*) print_char_cursor#47) ← *((byte*) print_str::str#11)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#47
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#11
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#48 ← phi( print_str::@1/(byte*) print_char_cursor#92 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#48
  return 
  to:@return
print_ln: scope:[print_ln]  from sin8u_table::@13 sin8u_table::@24
  (byte*) print_char_cursor#93 ← phi( sin8u_table::@13/(byte*) print_char_cursor#34 sin8u_table::@24/(byte*) print_char_cursor#43 )
  (byte*) print_line_cursor#23 ← phi( sin8u_table::@13/(byte*) print_line_cursor#25 sin8u_table::@24/(byte*) print_line_cursor#26 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#49 ← phi( print_ln/(byte*) print_char_cursor#93 print_ln::@1/(byte*) print_char_cursor#49 )
  (byte*) print_line_cursor#12 ← phi( print_ln/(byte*) print_line_cursor#23 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#12 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#49
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#13 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#13
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#50 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#14 ← phi( print_ln::@2/(byte*) print_line_cursor#13 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#50
  return 
  to:@return
print_sword: scope:[print_sword]  from sin8u_table::@21
  (byte*) print_char_cursor#106 ← phi( sin8u_table::@21/(byte*) print_char_cursor#40 )
  (signed word) print_sword::w#2 ← phi( sin8u_table::@21/(signed word) print_sword::w#1 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (number) 0
  (bool~) print_sword::$1 ← ! (bool~) print_sword::$0
  if((bool~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  (byte*) print_char_cursor#94 ← phi( print_sword/(byte*) print_char_cursor#106 print_sword::@4/(byte*) print_char_cursor#6 )
  (signed word) print_sword::w#3 ← phi( print_sword/(signed word) print_sword::w#2 print_sword::@4/(signed word) print_sword::w#0 )
  (word~) print_sword::$2 ← ((word)) (signed word) print_sword::w#3
  (word) print_word::w#0 ← (word~) print_sword::$2
  call print_word 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@1
  (byte*) print_char_cursor#51 ← phi( print_sword::@1/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#51
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#5 ← phi( print_sword/(signed word) print_sword::w#2 )
  (byte*) print_char_cursor#95 ← phi( print_sword/(byte*) print_char_cursor#106 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  (signed word) print_sword::w#4 ← phi( print_sword::@2/(signed word) print_sword::w#5 )
  (byte*) print_char_cursor#52 ← phi( print_sword::@2/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#52
  (signed word~) print_sword::$5 ← - (signed word) print_sword::w#4
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$5
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@3
  (byte*) print_char_cursor#53 ← phi( print_sword::@3/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#53
  return 
  to:@return
print_sbyte: scope:[print_sbyte]  from sin8u_table::@19
  (byte*) print_char_cursor#107 ← phi( sin8u_table::@19/(byte*) print_char_cursor#38 )
  (signed byte) print_sbyte::b#2 ← phi( sin8u_table::@19/(signed byte) print_sbyte::b#1 )
  (bool~) print_sbyte::$0 ← (signed byte) print_sbyte::b#2 < (number) 0
  if((bool~) print_sbyte::$0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#5 ← phi( print_sbyte/(signed byte) print_sbyte::b#2 )
  (byte*) print_char_cursor#96 ← phi( print_sbyte/(byte*) print_char_cursor#107 )
  (byte) print_char::ch#1 ← (byte) '-'
  call print_char 
  to:print_sbyte::@5
print_sbyte::@5: scope:[print_sbyte]  from print_sbyte::@1
  (signed byte) print_sbyte::b#3 ← phi( print_sbyte::@1/(signed byte) print_sbyte::b#5 )
  (byte*) print_char_cursor#54 ← phi( print_sbyte::@1/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#54
  (signed byte~) print_sbyte::$5 ← - (signed byte) print_sbyte::b#3
  (signed byte) print_sbyte::b#0 ← (signed byte~) print_sbyte::$5
  to:print_sbyte::@2
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#7 ← phi( print_sbyte/(signed byte) print_sbyte::b#2 )
  (byte*) print_char_cursor#97 ← phi( print_sbyte/(byte*) print_char_cursor#107 )
  (byte) print_char::ch#2 ← (byte) ' '
  call print_char 
  to:print_sbyte::@6
print_sbyte::@6: scope:[print_sbyte]  from print_sbyte::@3
  (signed byte) print_sbyte::b#6 ← phi( print_sbyte::@3/(signed byte) print_sbyte::b#7 )
  (byte*) print_char_cursor#55 ← phi( print_sbyte::@3/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#55
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@5 print_sbyte::@6
  (byte*) print_char_cursor#98 ← phi( print_sbyte::@5/(byte*) print_char_cursor#8 print_sbyte::@6/(byte*) print_char_cursor#9 )
  (signed byte) print_sbyte::b#4 ← phi( print_sbyte::@5/(signed byte) print_sbyte::b#0 print_sbyte::@6/(signed byte) print_sbyte::b#6 )
  (byte~) print_sbyte::$1 ← ((byte)) (signed byte) print_sbyte::b#4
  (byte) print_byte::b#0 ← (byte~) print_sbyte::$1
  call print_byte 
  to:print_sbyte::@7
print_sbyte::@7: scope:[print_sbyte]  from print_sbyte::@2
  (byte*) print_char_cursor#56 ← phi( print_sbyte::@2/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#56
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@7
  (byte*) print_char_cursor#57 ← phi( print_sbyte::@7/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#57
  return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1 sin8u_table::@17 sin8u_table::@4
  (byte*) print_char_cursor#99 ← phi( print_sword::@1/(byte*) print_char_cursor#94 sin8u_table::@17/(byte*) print_char_cursor#36 sin8u_table::@4/(byte*) print_char_cursor#25 )
  (word) print_word::w#3 ← phi( print_sword::@1/(word) print_word::w#0 sin8u_table::@17/(word) print_word::w#2 sin8u_table::@4/(word) print_word::w#1 )
  (byte~) print_word::$0 ← > (word) print_word::w#3
  (byte) print_byte::b#1 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#4 ← phi( print_word/(word) print_word::w#3 )
  (byte*) print_char_cursor#58 ← phi( print_word/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#58
  (byte~) print_word::$2 ← < (word) print_word::w#4
  (byte) print_byte::b#2 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#59 ← phi( print_word::@1/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#59
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#60 ← phi( print_word::@2/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#60
  return 
  to:@return
@32: scope:[]  from @20
  (byte*) print_screen#6 ← phi( @20/(byte*) print_screen#0 )
  (byte*) print_char_cursor#110 ← phi( @20/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#30 ← phi( @20/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@41
print_byte: scope:[print_byte]  from print_sbyte::@2 print_word print_word::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@23 sin8u_table::@6 sin8u_table::@8
  (byte*) print_char_cursor#100 ← phi( print_sbyte::@2/(byte*) print_char_cursor#98 print_word/(byte*) print_char_cursor#99 print_word::@1/(byte*) print_char_cursor#12 sin8u_table::@10/(byte*) print_char_cursor#31 sin8u_table::@12/(byte*) print_char_cursor#33 sin8u_table::@23/(byte*) print_char_cursor#42 sin8u_table::@6/(byte*) print_char_cursor#27 sin8u_table::@8/(byte*) print_char_cursor#29 )
  (byte) print_byte::b#8 ← phi( print_sbyte::@2/(byte) print_byte::b#0 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 sin8u_table::@10/(byte) print_byte::b#5 sin8u_table::@12/(byte) print_byte::b#6 sin8u_table::@23/(byte) print_byte::b#7 sin8u_table::@6/(byte) print_byte::b#3 sin8u_table::@8/(byte) print_byte::b#4 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (number) 4
  (byte) print_char::ch#3 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#9 ← phi( print_byte/(byte) print_byte::b#8 )
  (byte*) print_char_cursor#61 ← phi( print_byte/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#61
  (number~) print_byte::$2 ← (byte) print_byte::b#9 & (number) $f
  (byte) print_char::ch#4 ← *((byte[]) print_hextab#0 + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#62 ← phi( print_byte::@1/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#62
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#63 ← phi( print_byte::@2/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#63
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3 print_sword::@2
  (byte*) print_char_cursor#64 ← phi( print_byte/(byte*) print_char_cursor#100 print_byte::@1/(byte*) print_char_cursor#15 print_sbyte::@1/(byte*) print_char_cursor#96 print_sbyte::@3/(byte*) print_char_cursor#97 print_sword::@2/(byte*) print_char_cursor#95 )
  (byte) print_char::ch#5 ← phi( print_byte/(byte) print_char::ch#3 print_byte::@1/(byte) print_char::ch#4 print_sbyte::@1/(byte) print_char::ch#1 print_sbyte::@3/(byte) print_char::ch#2 print_sword::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#64) ← (byte) print_char::ch#5
  (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#64
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#65 ← phi( print_char/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#65
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#20 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#66 ← phi( print_cls::@2/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#15 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#66
  return 
  to:@return
main: scope:[main]  from @41
  (byte*) print_char_cursor#101 ← phi( @41/(byte*) print_char_cursor#104 )
  (byte*) print_line_cursor#24 ← phi( @41/(byte*) print_line_cursor#27 )
  (byte*) print_screen#4 ← phi( @41/(byte*) print_screen#5 )
  (word) main::tabsize#0 ← (number) $14
  (byte[$14]) main::sintab#0 ← { fill( $14, 0) }
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_char_cursor#67 ← phi( main/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#16 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#67
  (byte*) sin8u_table::sintab#0 ← (byte[$14]) main::sintab#0
  (word) sin8u_table::tabsize#0 ← (word) main::tabsize#0
  (byte) sin8u_table::min#0 ← (number) $a
  (byte) sin8u_table::max#0 ← (number) $ff
  call sin8u_table 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_line_cursor#17 ← phi( main::@1/(byte*) print_line_cursor#10 )
  (byte*) print_char_cursor#68 ← phi( main::@1/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#68
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#17
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) print_char_cursor#69 ← phi( main::@2/(byte*) print_char_cursor#23 )
  (byte*) print_line_cursor#18 ← phi( main::@2/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#18
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#69
  return 
  to:@return
sin8u_table: scope:[sin8u_table]  from main::@1
  (byte*) sin8u_table::sintab#26 ← phi( main::@1/(byte*) sin8u_table::sintab#0 )
  (byte*) print_line_cursor#49 ← phi( main::@1/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#108 ← phi( main::@1/(byte*) print_char_cursor#22 )
  (word) sin8u_table::tabsize#1 ← phi( main::@1/(word) sin8u_table::tabsize#0 )
  (byte) sin8u_table::min#1 ← phi( main::@1/(byte) sin8u_table::min#0 )
  (byte) sin8u_table::max#1 ← phi( main::@1/(byte) sin8u_table::max#0 )
  (byte~) sin8u_table::$0 ← (byte) sin8u_table::max#1 - (byte) sin8u_table::min#1
  (byte) sin8u_table::amplitude#0 ← (byte~) sin8u_table::$0
  (word~) sin8u_table::$1 ← ((word)) (byte) sin8u_table::min#1
  (word~) sin8u_table::$2 ← (word~) sin8u_table::$1 + (byte) sin8u_table::max#1
  (word) sin8u_table::sum#0 ← (word~) sin8u_table::$2
  (number~) sin8u_table::$3 ← (word) sin8u_table::sum#0 / (number) 2
  (number~) sin8u_table::$4 ← (number~) sin8u_table::$3 + (number) 1
  (byte~) sin8u_table::$5 ← ((byte)) (number~) sin8u_table::$4
  (byte) sin8u_table::mid#0 ← (byte~) sin8u_table::$5
  (word) div16u::dividend#0 ← (word) PI2_u4f12#0
  (word) div16u::divisor#0 ← (word) sin8u_table::tabsize#1
  call div16u 
  (word) div16u::return#2 ← (word) div16u::return#1
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table
  (word) sin8u_table::tabsize#25 ← phi( sin8u_table/(word) sin8u_table::tabsize#1 )
  (byte*) sin8u_table::sintab#25 ← phi( sin8u_table/(byte*) sin8u_table::sintab#26 )
  (byte*) print_line_cursor#47 ← phi( sin8u_table/(byte*) print_line_cursor#49 )
  (byte) sin8u_table::mid#21 ← phi( sin8u_table/(byte) sin8u_table::mid#0 )
  (byte) sin8u_table::amplitude#19 ← phi( sin8u_table/(byte) sin8u_table::amplitude#0 )
  (byte) sin8u_table::max#7 ← phi( sin8u_table/(byte) sin8u_table::max#1 )
  (byte) sin8u_table::min#5 ← phi( sin8u_table/(byte) sin8u_table::min#1 )
  (byte*) print_char_cursor#102 ← phi( sin8u_table/(byte*) print_char_cursor#108 )
  (word) div16u::return#4 ← phi( sin8u_table/(word) div16u::return#2 )
  (word~) sin8u_table::$6 ← (word) div16u::return#4
  (word) sin8u_table::step#0 ← (word~) sin8u_table::$6
  (byte*) print_str::str#1 ← (const string) sin8u_table::str
  call print_str 
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  (word) sin8u_table::tabsize#24 ← phi( sin8u_table::@3/(word) sin8u_table::tabsize#25 )
  (byte*) sin8u_table::sintab#24 ← phi( sin8u_table::@3/(byte*) sin8u_table::sintab#25 )
  (byte*) print_line_cursor#45 ← phi( sin8u_table::@3/(byte*) print_line_cursor#47 )
  (byte) sin8u_table::mid#19 ← phi( sin8u_table::@3/(byte) sin8u_table::mid#21 )
  (byte) sin8u_table::amplitude#17 ← phi( sin8u_table::@3/(byte) sin8u_table::amplitude#19 )
  (byte) sin8u_table::max#6 ← phi( sin8u_table::@3/(byte) sin8u_table::max#7 )
  (byte) sin8u_table::min#4 ← phi( sin8u_table::@3/(byte) sin8u_table::min#5 )
  (word) sin8u_table::step#1 ← phi( sin8u_table::@3/(word) sin8u_table::step#0 )
  (byte*) print_char_cursor#70 ← phi( sin8u_table::@3/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#70
  (word) print_word::w#1 ← (word) sin8u_table::step#1
  call print_word 
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  (word) sin8u_table::tabsize#23 ← phi( sin8u_table::@4/(word) sin8u_table::tabsize#24 )
  (word) sin8u_table::step#23 ← phi( sin8u_table::@4/(word) sin8u_table::step#1 )
  (byte*) sin8u_table::sintab#23 ← phi( sin8u_table::@4/(byte*) sin8u_table::sintab#24 )
  (byte*) print_line_cursor#43 ← phi( sin8u_table::@4/(byte*) print_line_cursor#45 )
  (byte) sin8u_table::mid#17 ← phi( sin8u_table::@4/(byte) sin8u_table::mid#19 )
  (byte) sin8u_table::amplitude#14 ← phi( sin8u_table::@4/(byte) sin8u_table::amplitude#17 )
  (byte) sin8u_table::max#5 ← phi( sin8u_table::@4/(byte) sin8u_table::max#6 )
  (byte) sin8u_table::min#3 ← phi( sin8u_table::@4/(byte) sin8u_table::min#4 )
  (byte*) print_char_cursor#71 ← phi( sin8u_table::@4/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#71
  (byte*) print_str::str#2 ← (const string) sin8u_table::str1
  call print_str 
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  (word) sin8u_table::tabsize#22 ← phi( sin8u_table::@5/(word) sin8u_table::tabsize#23 )
  (word) sin8u_table::step#22 ← phi( sin8u_table::@5/(word) sin8u_table::step#23 )
  (byte*) sin8u_table::sintab#21 ← phi( sin8u_table::@5/(byte*) sin8u_table::sintab#23 )
  (byte*) print_line_cursor#41 ← phi( sin8u_table::@5/(byte*) print_line_cursor#43 )
  (byte) sin8u_table::mid#15 ← phi( sin8u_table::@5/(byte) sin8u_table::mid#17 )
  (byte) sin8u_table::amplitude#11 ← phi( sin8u_table::@5/(byte) sin8u_table::amplitude#14 )
  (byte) sin8u_table::max#4 ← phi( sin8u_table::@5/(byte) sin8u_table::max#5 )
  (byte) sin8u_table::min#2 ← phi( sin8u_table::@5/(byte) sin8u_table::min#3 )
  (byte*) print_char_cursor#72 ← phi( sin8u_table::@5/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#72
  (byte) print_byte::b#3 ← (byte) sin8u_table::min#2
  call print_byte 
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  (word) sin8u_table::tabsize#21 ← phi( sin8u_table::@6/(word) sin8u_table::tabsize#22 )
  (word) sin8u_table::step#21 ← phi( sin8u_table::@6/(word) sin8u_table::step#22 )
  (byte*) sin8u_table::sintab#19 ← phi( sin8u_table::@6/(byte*) sin8u_table::sintab#21 )
  (byte*) print_line_cursor#39 ← phi( sin8u_table::@6/(byte*) print_line_cursor#41 )
  (byte) sin8u_table::mid#13 ← phi( sin8u_table::@6/(byte) sin8u_table::mid#15 )
  (byte) sin8u_table::amplitude#8 ← phi( sin8u_table::@6/(byte) sin8u_table::amplitude#11 )
  (byte) sin8u_table::max#3 ← phi( sin8u_table::@6/(byte) sin8u_table::max#4 )
  (byte*) print_char_cursor#73 ← phi( sin8u_table::@6/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#73
  (byte*) print_str::str#3 ← (const string) sin8u_table::str2
  call print_str 
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  (word) sin8u_table::tabsize#20 ← phi( sin8u_table::@7/(word) sin8u_table::tabsize#21 )
  (word) sin8u_table::step#20 ← phi( sin8u_table::@7/(word) sin8u_table::step#21 )
  (byte*) sin8u_table::sintab#17 ← phi( sin8u_table::@7/(byte*) sin8u_table::sintab#19 )
  (byte*) print_line_cursor#37 ← phi( sin8u_table::@7/(byte*) print_line_cursor#39 )
  (byte) sin8u_table::mid#10 ← phi( sin8u_table::@7/(byte) sin8u_table::mid#13 )
  (byte) sin8u_table::amplitude#5 ← phi( sin8u_table::@7/(byte) sin8u_table::amplitude#8 )
  (byte) sin8u_table::max#2 ← phi( sin8u_table::@7/(byte) sin8u_table::max#3 )
  (byte*) print_char_cursor#74 ← phi( sin8u_table::@7/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#74
  (byte) print_byte::b#4 ← (byte) sin8u_table::max#2
  call print_byte 
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  (word) sin8u_table::tabsize#19 ← phi( sin8u_table::@8/(word) sin8u_table::tabsize#20 )
  (word) sin8u_table::step#19 ← phi( sin8u_table::@8/(word) sin8u_table::step#20 )
  (byte*) sin8u_table::sintab#15 ← phi( sin8u_table::@8/(byte*) sin8u_table::sintab#17 )
  (byte*) print_line_cursor#35 ← phi( sin8u_table::@8/(byte*) print_line_cursor#37 )
  (byte) sin8u_table::mid#7 ← phi( sin8u_table::@8/(byte) sin8u_table::mid#10 )
  (byte) sin8u_table::amplitude#3 ← phi( sin8u_table::@8/(byte) sin8u_table::amplitude#5 )
  (byte*) print_char_cursor#75 ← phi( sin8u_table::@8/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#75
  (byte*) print_str::str#4 ← (const string) sin8u_table::str3
  call print_str 
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  (word) sin8u_table::tabsize#18 ← phi( sin8u_table::@9/(word) sin8u_table::tabsize#19 )
  (word) sin8u_table::step#18 ← phi( sin8u_table::@9/(word) sin8u_table::step#19 )
  (byte*) sin8u_table::sintab#13 ← phi( sin8u_table::@9/(byte*) sin8u_table::sintab#15 )
  (byte*) print_line_cursor#33 ← phi( sin8u_table::@9/(byte*) print_line_cursor#35 )
  (byte) sin8u_table::mid#5 ← phi( sin8u_table::@9/(byte) sin8u_table::mid#7 )
  (byte) sin8u_table::amplitude#1 ← phi( sin8u_table::@9/(byte) sin8u_table::amplitude#3 )
  (byte*) print_char_cursor#76 ← phi( sin8u_table::@9/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#76
  (byte) print_byte::b#5 ← (byte) sin8u_table::amplitude#1
  call print_byte 
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  (word) sin8u_table::tabsize#17 ← phi( sin8u_table::@10/(word) sin8u_table::tabsize#18 )
  (word) sin8u_table::step#17 ← phi( sin8u_table::@10/(word) sin8u_table::step#18 )
  (byte*) sin8u_table::sintab#11 ← phi( sin8u_table::@10/(byte*) sin8u_table::sintab#13 )
  (byte) sin8u_table::amplitude#15 ← phi( sin8u_table::@10/(byte) sin8u_table::amplitude#1 )
  (byte*) print_line_cursor#31 ← phi( sin8u_table::@10/(byte*) print_line_cursor#33 )
  (byte) sin8u_table::mid#3 ← phi( sin8u_table::@10/(byte) sin8u_table::mid#5 )
  (byte*) print_char_cursor#77 ← phi( sin8u_table::@10/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#77
  (byte*) print_str::str#5 ← (const string) sin8u_table::str4
  call print_str 
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  (word) sin8u_table::tabsize#16 ← phi( sin8u_table::@11/(word) sin8u_table::tabsize#17 )
  (word) sin8u_table::step#16 ← phi( sin8u_table::@11/(word) sin8u_table::step#17 )
  (byte*) sin8u_table::sintab#9 ← phi( sin8u_table::@11/(byte*) sin8u_table::sintab#11 )
  (byte) sin8u_table::amplitude#12 ← phi( sin8u_table::@11/(byte) sin8u_table::amplitude#15 )
  (byte*) print_line_cursor#28 ← phi( sin8u_table::@11/(byte*) print_line_cursor#31 )
  (byte) sin8u_table::mid#1 ← phi( sin8u_table::@11/(byte) sin8u_table::mid#3 )
  (byte*) print_char_cursor#78 ← phi( sin8u_table::@11/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#78
  (byte) print_byte::b#6 ← (byte) sin8u_table::mid#1
  call print_byte 
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@12
  (word) sin8u_table::tabsize#15 ← phi( sin8u_table::@12/(word) sin8u_table::tabsize#16 )
  (word) sin8u_table::step#15 ← phi( sin8u_table::@12/(word) sin8u_table::step#16 )
  (byte*) sin8u_table::sintab#7 ← phi( sin8u_table::@12/(byte*) sin8u_table::sintab#9 )
  (byte) sin8u_table::mid#11 ← phi( sin8u_table::@12/(byte) sin8u_table::mid#1 )
  (byte) sin8u_table::amplitude#9 ← phi( sin8u_table::@12/(byte) sin8u_table::amplitude#12 )
  (byte*) print_line_cursor#25 ← phi( sin8u_table::@12/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#79 ← phi( sin8u_table::@12/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#79
  call print_ln 
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@13
  (word) sin8u_table::tabsize#14 ← phi( sin8u_table::@13/(word) sin8u_table::tabsize#15 )
  (word) sin8u_table::step#14 ← phi( sin8u_table::@13/(word) sin8u_table::step#15 )
  (byte*) sin8u_table::sintab#5 ← phi( sin8u_table::@13/(byte*) sin8u_table::sintab#7 )
  (byte) sin8u_table::mid#8 ← phi( sin8u_table::@13/(byte) sin8u_table::mid#11 )
  (byte) sin8u_table::amplitude#6 ← phi( sin8u_table::@13/(byte) sin8u_table::amplitude#9 )
  (byte*) print_char_cursor#80 ← phi( sin8u_table::@13/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#19 ← phi( sin8u_table::@13/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#80
  (word) sin8u_table::x#0 ← (number) 0
  (word) sin8u_table::i#0 ← (number) 0
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@14 sin8u_table::@25
  (word) sin8u_table::tabsize#13 ← phi( sin8u_table::@14/(word) sin8u_table::tabsize#14 sin8u_table::@25/(word) sin8u_table::tabsize#2 )
  (word) sin8u_table::i#13 ← phi( sin8u_table::@14/(word) sin8u_table::i#0 sin8u_table::@25/(word) sin8u_table::i#1 )
  (word) sin8u_table::step#13 ← phi( sin8u_table::@14/(word) sin8u_table::step#14 sin8u_table::@25/(word) sin8u_table::step#2 )
  (byte*) print_line_cursor#48 ← phi( sin8u_table::@14/(byte*) print_line_cursor#8 sin8u_table::@25/(byte*) print_line_cursor#9 )
  (byte*) print_char_cursor#111 ← phi( sin8u_table::@14/(byte*) print_char_cursor#35 sin8u_table::@25/(byte*) print_char_cursor#44 )
  (byte*) sin8u_table::sintab#4 ← phi( sin8u_table::@14/(byte*) sin8u_table::sintab#5 sin8u_table::@25/(byte*) sin8u_table::sintab#6 )
  (byte) sin8u_table::mid#6 ← phi( sin8u_table::@14/(byte) sin8u_table::mid#8 sin8u_table::@25/(byte) sin8u_table::mid#9 )
  (byte) sin8u_table::amplitude#4 ← phi( sin8u_table::@14/(byte) sin8u_table::amplitude#6 sin8u_table::@25/(byte) sin8u_table::amplitude#7 )
  (word) sin8u_table::x#2 ← phi( sin8u_table::@14/(word) sin8u_table::x#0 sin8u_table::@25/(word) sin8u_table::x#1 )
  (word) sin8s::x#2 ← (word) sin8u_table::x#2
  call sin8s 
  (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#1
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@1
  (word) sin8u_table::tabsize#12 ← phi( sin8u_table::@1/(word) sin8u_table::tabsize#13 )
  (word) sin8u_table::i#12 ← phi( sin8u_table::@1/(word) sin8u_table::i#13 )
  (word) sin8u_table::step#12 ← phi( sin8u_table::@1/(word) sin8u_table::step#13 )
  (byte*) print_line_cursor#46 ← phi( sin8u_table::@1/(byte*) print_line_cursor#48 )
  (word) sin8u_table::x#7 ← phi( sin8u_table::@1/(word) sin8u_table::x#2 )
  (byte*) print_char_cursor#109 ← phi( sin8u_table::@1/(byte*) print_char_cursor#111 )
  (byte*) sin8u_table::sintab#3 ← phi( sin8u_table::@1/(byte*) sin8u_table::sintab#4 )
  (byte) sin8u_table::mid#4 ← phi( sin8u_table::@1/(byte) sin8u_table::mid#6 )
  (byte) sin8u_table::amplitude#2 ← phi( sin8u_table::@1/(byte) sin8u_table::amplitude#4 )
  (signed byte) sin8s::return#4 ← phi( sin8u_table::@1/(signed byte) sin8s::return#2 )
  (signed byte~) sin8u_table::$18 ← (signed byte) sin8s::return#4
  (signed byte) sin8u_table::sinx#0 ← (signed byte~) sin8u_table::$18
  (number~) sin8u_table::$19 ← (byte) sin8u_table::amplitude#2 + (number) 1
  (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0
  (byte) mul8su::b#0 ← (number~) sin8u_table::$19
  call mul8su 
  (signed word) mul8su::return#2 ← (signed word) mul8su::return#1
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  (byte) sin8u_table::amplitude#24 ← phi( sin8u_table::@15/(byte) sin8u_table::amplitude#2 )
  (word) sin8u_table::tabsize#11 ← phi( sin8u_table::@15/(word) sin8u_table::tabsize#12 )
  (word) sin8u_table::i#11 ← phi( sin8u_table::@15/(word) sin8u_table::i#12 )
  (word) sin8u_table::step#11 ← phi( sin8u_table::@15/(word) sin8u_table::step#12 )
  (byte*) print_line_cursor#44 ← phi( sin8u_table::@15/(byte*) print_line_cursor#46 )
  (signed byte) sin8u_table::sinx#4 ← phi( sin8u_table::@15/(signed byte) sin8u_table::sinx#0 )
  (word) sin8u_table::x#5 ← phi( sin8u_table::@15/(word) sin8u_table::x#7 )
  (byte*) print_char_cursor#103 ← phi( sin8u_table::@15/(byte*) print_char_cursor#109 )
  (byte*) sin8u_table::sintab#2 ← phi( sin8u_table::@15/(byte*) sin8u_table::sintab#3 )
  (byte) sin8u_table::mid#2 ← phi( sin8u_table::@15/(byte) sin8u_table::mid#4 )
  (signed word) mul8su::return#4 ← phi( sin8u_table::@15/(signed word) mul8su::return#2 )
  (signed word~) sin8u_table::$20 ← (signed word) mul8su::return#4
  (signed word) sin8u_table::sinx_sc#0 ← (signed word~) sin8u_table::$20
  (byte~) sin8u_table::$21 ← > (signed word) sin8u_table::sinx_sc#0
  (byte~) sin8u_table::$22 ← (byte) sin8u_table::mid#2 + (byte~) sin8u_table::$21
  (byte) sin8u_table::sinx_tr#0 ← (byte~) sin8u_table::$22
  *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0
  (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2
  (byte*) print_str::str#6 ← (const string) sin8u_table::str5
  call print_str 
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  (byte*) sin8u_table::sintab#22 ← phi( sin8u_table::@16/(byte*) sin8u_table::sintab#1 )
  (byte) sin8u_table::mid#24 ← phi( sin8u_table::@16/(byte) sin8u_table::mid#2 )
  (byte) sin8u_table::amplitude#23 ← phi( sin8u_table::@16/(byte) sin8u_table::amplitude#24 )
  (word) sin8u_table::tabsize#10 ← phi( sin8u_table::@16/(word) sin8u_table::tabsize#11 )
  (word) sin8u_table::i#10 ← phi( sin8u_table::@16/(word) sin8u_table::i#11 )
  (word) sin8u_table::step#10 ← phi( sin8u_table::@16/(word) sin8u_table::step#11 )
  (byte*) print_line_cursor#42 ← phi( sin8u_table::@16/(byte*) print_line_cursor#44 )
  (byte) sin8u_table::sinx_tr#7 ← phi( sin8u_table::@16/(byte) sin8u_table::sinx_tr#0 )
  (signed word) sin8u_table::sinx_sc#5 ← phi( sin8u_table::@16/(signed word) sin8u_table::sinx_sc#0 )
  (signed byte) sin8u_table::sinx#3 ← phi( sin8u_table::@16/(signed byte) sin8u_table::sinx#4 )
  (word) sin8u_table::x#3 ← phi( sin8u_table::@16/(word) sin8u_table::x#5 )
  (byte*) print_char_cursor#81 ← phi( sin8u_table::@16/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#81
  (word) print_word::w#2 ← (word) sin8u_table::x#3
  call print_word 
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  (byte*) sin8u_table::sintab#20 ← phi( sin8u_table::@17/(byte*) sin8u_table::sintab#22 )
  (byte) sin8u_table::mid#23 ← phi( sin8u_table::@17/(byte) sin8u_table::mid#24 )
  (byte) sin8u_table::amplitude#22 ← phi( sin8u_table::@17/(byte) sin8u_table::amplitude#23 )
  (word) sin8u_table::tabsize#9 ← phi( sin8u_table::@17/(word) sin8u_table::tabsize#10 )
  (word) sin8u_table::i#9 ← phi( sin8u_table::@17/(word) sin8u_table::i#10 )
  (word) sin8u_table::step#9 ← phi( sin8u_table::@17/(word) sin8u_table::step#10 )
  (word) sin8u_table::x#13 ← phi( sin8u_table::@17/(word) sin8u_table::x#3 )
  (byte*) print_line_cursor#40 ← phi( sin8u_table::@17/(byte*) print_line_cursor#42 )
  (byte) sin8u_table::sinx_tr#6 ← phi( sin8u_table::@17/(byte) sin8u_table::sinx_tr#7 )
  (signed word) sin8u_table::sinx_sc#4 ← phi( sin8u_table::@17/(signed word) sin8u_table::sinx_sc#5 )
  (signed byte) sin8u_table::sinx#2 ← phi( sin8u_table::@17/(signed byte) sin8u_table::sinx#3 )
  (byte*) print_char_cursor#82 ← phi( sin8u_table::@17/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#82
  (byte*) print_str::str#7 ← (const string) sin8u_table::str6
  call print_str 
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  (byte*) sin8u_table::sintab#18 ← phi( sin8u_table::@18/(byte*) sin8u_table::sintab#20 )
  (byte) sin8u_table::mid#22 ← phi( sin8u_table::@18/(byte) sin8u_table::mid#23 )
  (byte) sin8u_table::amplitude#21 ← phi( sin8u_table::@18/(byte) sin8u_table::amplitude#22 )
  (word) sin8u_table::tabsize#8 ← phi( sin8u_table::@18/(word) sin8u_table::tabsize#9 )
  (word) sin8u_table::i#8 ← phi( sin8u_table::@18/(word) sin8u_table::i#9 )
  (word) sin8u_table::step#8 ← phi( sin8u_table::@18/(word) sin8u_table::step#9 )
  (word) sin8u_table::x#12 ← phi( sin8u_table::@18/(word) sin8u_table::x#13 )
  (byte*) print_line_cursor#38 ← phi( sin8u_table::@18/(byte*) print_line_cursor#40 )
  (byte) sin8u_table::sinx_tr#5 ← phi( sin8u_table::@18/(byte) sin8u_table::sinx_tr#6 )
  (signed word) sin8u_table::sinx_sc#3 ← phi( sin8u_table::@18/(signed word) sin8u_table::sinx_sc#4 )
  (signed byte) sin8u_table::sinx#1 ← phi( sin8u_table::@18/(signed byte) sin8u_table::sinx#2 )
  (byte*) print_char_cursor#83 ← phi( sin8u_table::@18/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#83
  (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#1
  call print_sbyte 
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  (byte*) sin8u_table::sintab#16 ← phi( sin8u_table::@19/(byte*) sin8u_table::sintab#18 )
  (byte) sin8u_table::mid#20 ← phi( sin8u_table::@19/(byte) sin8u_table::mid#22 )
  (byte) sin8u_table::amplitude#20 ← phi( sin8u_table::@19/(byte) sin8u_table::amplitude#21 )
  (word) sin8u_table::tabsize#7 ← phi( sin8u_table::@19/(word) sin8u_table::tabsize#8 )
  (word) sin8u_table::i#7 ← phi( sin8u_table::@19/(word) sin8u_table::i#8 )
  (word) sin8u_table::step#7 ← phi( sin8u_table::@19/(word) sin8u_table::step#8 )
  (word) sin8u_table::x#11 ← phi( sin8u_table::@19/(word) sin8u_table::x#12 )
  (byte*) print_line_cursor#36 ← phi( sin8u_table::@19/(byte*) print_line_cursor#38 )
  (byte) sin8u_table::sinx_tr#4 ← phi( sin8u_table::@19/(byte) sin8u_table::sinx_tr#5 )
  (signed word) sin8u_table::sinx_sc#2 ← phi( sin8u_table::@19/(signed word) sin8u_table::sinx_sc#3 )
  (byte*) print_char_cursor#84 ← phi( sin8u_table::@19/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#84
  (byte*) print_str::str#8 ← (const string) sin8u_table::str7
  call print_str 
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  (byte*) sin8u_table::sintab#14 ← phi( sin8u_table::@20/(byte*) sin8u_table::sintab#16 )
  (byte) sin8u_table::mid#18 ← phi( sin8u_table::@20/(byte) sin8u_table::mid#20 )
  (byte) sin8u_table::amplitude#18 ← phi( sin8u_table::@20/(byte) sin8u_table::amplitude#20 )
  (word) sin8u_table::tabsize#6 ← phi( sin8u_table::@20/(word) sin8u_table::tabsize#7 )
  (word) sin8u_table::i#6 ← phi( sin8u_table::@20/(word) sin8u_table::i#7 )
  (word) sin8u_table::step#6 ← phi( sin8u_table::@20/(word) sin8u_table::step#7 )
  (word) sin8u_table::x#10 ← phi( sin8u_table::@20/(word) sin8u_table::x#11 )
  (byte*) print_line_cursor#34 ← phi( sin8u_table::@20/(byte*) print_line_cursor#36 )
  (byte) sin8u_table::sinx_tr#3 ← phi( sin8u_table::@20/(byte) sin8u_table::sinx_tr#4 )
  (signed word) sin8u_table::sinx_sc#1 ← phi( sin8u_table::@20/(signed word) sin8u_table::sinx_sc#2 )
  (byte*) print_char_cursor#85 ← phi( sin8u_table::@20/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#40 ← (byte*) print_char_cursor#85
  (signed word) print_sword::w#1 ← (signed word) sin8u_table::sinx_sc#1
  call print_sword 
  to:sin8u_table::@22
sin8u_table::@22: scope:[sin8u_table]  from sin8u_table::@21
  (byte*) sin8u_table::sintab#12 ← phi( sin8u_table::@21/(byte*) sin8u_table::sintab#14 )
  (byte) sin8u_table::mid#16 ← phi( sin8u_table::@21/(byte) sin8u_table::mid#18 )
  (byte) sin8u_table::amplitude#16 ← phi( sin8u_table::@21/(byte) sin8u_table::amplitude#18 )
  (word) sin8u_table::tabsize#5 ← phi( sin8u_table::@21/(word) sin8u_table::tabsize#6 )
  (word) sin8u_table::i#5 ← phi( sin8u_table::@21/(word) sin8u_table::i#6 )
  (word) sin8u_table::step#5 ← phi( sin8u_table::@21/(word) sin8u_table::step#6 )
  (word) sin8u_table::x#9 ← phi( sin8u_table::@21/(word) sin8u_table::x#10 )
  (byte*) print_line_cursor#32 ← phi( sin8u_table::@21/(byte*) print_line_cursor#34 )
  (byte) sin8u_table::sinx_tr#2 ← phi( sin8u_table::@21/(byte) sin8u_table::sinx_tr#3 )
  (byte*) print_char_cursor#86 ← phi( sin8u_table::@21/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#41 ← (byte*) print_char_cursor#86
  (byte*) print_str::str#9 ← (const string) sin8u_table::str8
  call print_str 
  to:sin8u_table::@23
sin8u_table::@23: scope:[sin8u_table]  from sin8u_table::@22
  (byte*) sin8u_table::sintab#10 ← phi( sin8u_table::@22/(byte*) sin8u_table::sintab#12 )
  (byte) sin8u_table::mid#14 ← phi( sin8u_table::@22/(byte) sin8u_table::mid#16 )
  (byte) sin8u_table::amplitude#13 ← phi( sin8u_table::@22/(byte) sin8u_table::amplitude#16 )
  (word) sin8u_table::tabsize#4 ← phi( sin8u_table::@22/(word) sin8u_table::tabsize#5 )
  (word) sin8u_table::i#4 ← phi( sin8u_table::@22/(word) sin8u_table::i#5 )
  (word) sin8u_table::step#4 ← phi( sin8u_table::@22/(word) sin8u_table::step#5 )
  (word) sin8u_table::x#8 ← phi( sin8u_table::@22/(word) sin8u_table::x#9 )
  (byte*) print_line_cursor#29 ← phi( sin8u_table::@22/(byte*) print_line_cursor#32 )
  (byte) sin8u_table::sinx_tr#1 ← phi( sin8u_table::@22/(byte) sin8u_table::sinx_tr#2 )
  (byte*) print_char_cursor#87 ← phi( sin8u_table::@22/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#87
  (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#1
  call print_byte 
  to:sin8u_table::@24
sin8u_table::@24: scope:[sin8u_table]  from sin8u_table::@23
  (byte*) sin8u_table::sintab#8 ← phi( sin8u_table::@23/(byte*) sin8u_table::sintab#10 )
  (byte) sin8u_table::mid#12 ← phi( sin8u_table::@23/(byte) sin8u_table::mid#14 )
  (byte) sin8u_table::amplitude#10 ← phi( sin8u_table::@23/(byte) sin8u_table::amplitude#13 )
  (word) sin8u_table::tabsize#3 ← phi( sin8u_table::@23/(word) sin8u_table::tabsize#4 )
  (word) sin8u_table::i#3 ← phi( sin8u_table::@23/(word) sin8u_table::i#4 )
  (word) sin8u_table::step#3 ← phi( sin8u_table::@23/(word) sin8u_table::step#4 )
  (word) sin8u_table::x#6 ← phi( sin8u_table::@23/(word) sin8u_table::x#8 )
  (byte*) print_line_cursor#26 ← phi( sin8u_table::@23/(byte*) print_line_cursor#29 )
  (byte*) print_char_cursor#88 ← phi( sin8u_table::@23/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#43 ← (byte*) print_char_cursor#88
  call print_ln 
  to:sin8u_table::@25
sin8u_table::@25: scope:[sin8u_table]  from sin8u_table::@24
  (byte*) sin8u_table::sintab#6 ← phi( sin8u_table::@24/(byte*) sin8u_table::sintab#8 )
  (byte) sin8u_table::mid#9 ← phi( sin8u_table::@24/(byte) sin8u_table::mid#12 )
  (byte) sin8u_table::amplitude#7 ← phi( sin8u_table::@24/(byte) sin8u_table::amplitude#10 )
  (word) sin8u_table::tabsize#2 ← phi( sin8u_table::@24/(word) sin8u_table::tabsize#3 )
  (word) sin8u_table::i#2 ← phi( sin8u_table::@24/(word) sin8u_table::i#3 )
  (word) sin8u_table::step#2 ← phi( sin8u_table::@24/(word) sin8u_table::step#3 )
  (word) sin8u_table::x#4 ← phi( sin8u_table::@24/(word) sin8u_table::x#6 )
  (byte*) print_char_cursor#89 ← phi( sin8u_table::@24/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#20 ← phi( sin8u_table::@24/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#20
  (byte*) print_char_cursor#44 ← (byte*) print_char_cursor#89
  (word~) sin8u_table::$32 ← (word) sin8u_table::x#4 + (word) sin8u_table::step#2
  (word) sin8u_table::x#1 ← (word~) sin8u_table::$32
  (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#2
  (bool~) sin8u_table::$33 ← (word) sin8u_table::i#1 < (word) sin8u_table::tabsize#2
  if((bool~) sin8u_table::$33) goto sin8u_table::@1
  to:sin8u_table::@return
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@25
  (byte*) print_line_cursor#21 ← phi( sin8u_table::@25/(byte*) print_line_cursor#9 )
  (byte*) print_char_cursor#90 ← phi( sin8u_table::@25/(byte*) print_char_cursor#44 )
  (byte*) print_char_cursor#45 ← (byte*) print_char_cursor#90
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#21
  return 
  to:@return
@41: scope:[]  from @32
  (byte*) print_screen#5 ← phi( @32/(byte*) print_screen#6 )
  (byte*) print_char_cursor#104 ← phi( @32/(byte*) print_char_cursor#110 )
  (byte*) print_line_cursor#27 ← phi( @32/(byte*) print_line_cursor#30 )
  call main 
  to:@42
@42: scope:[]  from @41
  (byte*) print_char_cursor#91 ← phi( @41/(byte*) print_char_cursor#24 )
  (byte*) print_line_cursor#22 ← phi( @41/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#22
  (byte*) print_char_cursor#46 ← (byte*) print_char_cursor#91
  to:@end
@end: scope:[]  from @42

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @13
(label) @20
(label) @32
(label) @41
(label) @42
(label) @begin
(label) @end
(word) PI2_u4f12
(word) PI2_u4f12#0
(word) PI_HALF_u4f12
(word) PI_HALF_u4f12#0
(word) PI_u4f12
(word) PI_u4f12#0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(number~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(number~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[$14]) main::sintab
(byte[$14]) main::sintab#0
(word) main::tabsize
(word) main::tabsize#0
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$0
(byte~) mul8su::$1
(byte~) mul8su::$10
(word~) mul8su::$2
(bool~) mul8su::$3
(bool~) mul8su::$4
(signed word~) mul8su::$5
(byte~) mul8su::$7
(byte~) mul8su::$8
(byte~) mul8su::$9
(label) mul8su::@1
(label) mul8su::@2
(label) mul8su::@4
(label) mul8su::@return
(signed byte) mul8su::a
(signed byte) mul8su::a#0
(signed byte) mul8su::a#1
(signed byte) mul8su::a#2
(byte) mul8su::b
(byte) mul8su::b#0
(byte) mul8su::b#1
(byte) mul8su::b#2
(byte) mul8su::b#3
(word) mul8su::m
(word) mul8su::m#0
(word) mul8su::m#1
(word) mul8su::m#2
(word) mul8su::m#3
(signed word) mul8su::return
(signed word) mul8su::return#0
(signed word) mul8su::return#1
(signed word) mul8su::return#2
(signed word) mul8su::return#3
(signed word) mul8su::return#4
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(number~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@7
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::a#7
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(byte) mul8u::b#2
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(word) mul8u::return#5
(word) mul8u::return#6
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0
(word~) mulu8_sel::$1
(byte~) mulu8_sel::$2
(label) mulu8_sel::@2
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0
(byte) mulu8_sel::return#1
(byte) mulu8_sel::return#10
(byte) mulu8_sel::return#11
(byte) mulu8_sel::return#12
(byte) mulu8_sel::return#2
(byte) mulu8_sel::return#3
(byte) mulu8_sel::return#4
(byte) mulu8_sel::return#5
(byte) mulu8_sel::return#6
(byte) mulu8_sel::return#7
(byte) mulu8_sel::return#8
(byte) mulu8_sel::return#9
(byte) mulu8_sel::select
(byte) mulu8_sel::select#0
(byte) mulu8_sel::select#1
(byte) mulu8_sel::select#2
(byte) mulu8_sel::select#3
(byte) mulu8_sel::select#4
(byte) mulu8_sel::select#5
(byte) mulu8_sel::select#6
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0
(byte) mulu8_sel::v1#1
(byte) mulu8_sel::v1#2
(byte) mulu8_sel::v1#3
(byte) mulu8_sel::v1#4
(byte) mulu8_sel::v1#5
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0
(byte) mulu8_sel::v2#1
(byte) mulu8_sel::v2#2
(byte) mulu8_sel::v2#3
(byte) mulu8_sel::v2#4
(byte) mulu8_sel::v2#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(byte) print_byte::b#5
(byte) print_byte::b#6
(byte) print_byte::b#7
(byte) print_byte::b#8
(byte) print_byte::b#9
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#108
(byte*) print_char_cursor#109
(byte*) print_char_cursor#11
(byte*) print_char_cursor#110
(byte*) print_char_cursor#111
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(bool~) print_sbyte::$0
(byte~) print_sbyte::$1
(signed byte~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@5
(label) print_sbyte::@6
(label) print_sbyte::@7
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0
(signed byte) print_sbyte::b#1
(signed byte) print_sbyte::b#2
(signed byte) print_sbyte::b#3
(signed byte) print_sbyte::b#4
(signed byte) print_sbyte::b#5
(signed byte) print_sbyte::b#6
(signed byte) print_sbyte::b#7
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(bool~) print_sword::$1
(word~) print_sword::$2
(signed word~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word) print_word::w#4
(signed byte()) sin8s((word) sin8s::x)
(bool~) sin8s::$0
(bool~) sin8s::$1
(byte~) sin8s::$10
(byte~) sin8s::$11
(byte~) sin8s::$12
(byte~) sin8s::$13
(bool~) sin8s::$14
(bool~) sin8s::$15
(signed byte~) sin8s::$16
(bool~) sin8s::$17
(bool~) sin8s::$18
(word~) sin8s::$19
(bool~) sin8s::$2
(word~) sin8s::$20
(signed byte~) sin8s::$21
(signed byte~) sin8s::$22
(bool~) sin8s::$3
(word~) sin8s::$4
(byte~) sin8s::$5
(byte~) sin8s::$6
(byte~) sin8s::$7
(byte~) sin8s::$8
(byte~) sin8s::$9
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@return
(byte) sin8s::DIV_6
(byte) sin8s::DIV_6#0
(byte) sin8s::isUpper
(byte) sin8s::isUpper#0
(byte) sin8s::isUpper#1
(byte) sin8s::isUpper#10
(byte) sin8s::isUpper#11
(byte) sin8s::isUpper#2
(byte) sin8s::isUpper#3
(byte) sin8s::isUpper#4
(byte) sin8s::isUpper#5
(byte) sin8s::isUpper#6
(byte) sin8s::isUpper#7
(byte) sin8s::isUpper#8
(byte) sin8s::isUpper#9
(signed byte) sin8s::return
(signed byte) sin8s::return#0
(signed byte) sin8s::return#1
(signed byte) sin8s::return#2
(signed byte) sin8s::return#3
(signed byte) sin8s::return#4
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#0
(signed byte) sin8s::sinx#1
(signed byte) sin8s::sinx#2
(byte) sin8s::usinx
(byte) sin8s::usinx#0
(byte) sin8s::usinx#1
(byte) sin8s::usinx#2
(byte) sin8s::usinx#3
(byte) sin8s::usinx#4
(byte) sin8s::usinx#5
(byte) sin8s::usinx#6
(byte) sin8s::usinx#7
(word) sin8s::x
(word) sin8s::x#0
(word) sin8s::x#1
(word) sin8s::x#2
(word) sin8s::x#3
(word) sin8s::x#4
(word) sin8s::x#5
(word) sin8s::x#6
(word) sin8s::x#7
(byte) sin8s::x1
(byte) sin8s::x1#0
(byte) sin8s::x1#1
(byte) sin8s::x1#2
(byte) sin8s::x1#3
(byte) sin8s::x1#4
(byte) sin8s::x2
(byte) sin8s::x2#0
(byte) sin8s::x3
(byte) sin8s::x3#0
(byte) sin8s::x3#1
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0
(byte) sin8s::x4
(byte) sin8s::x4#0
(byte) sin8s::x5
(byte) sin8s::x5#0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte~) sin8u_table::$0
(word~) sin8u_table::$1
(signed byte~) sin8u_table::$18
(number~) sin8u_table::$19
(word~) sin8u_table::$2
(signed word~) sin8u_table::$20
(byte~) sin8u_table::$21
(byte~) sin8u_table::$22
(number~) sin8u_table::$3
(word~) sin8u_table::$32
(bool~) sin8u_table::$33
(number~) sin8u_table::$4
(byte~) sin8u_table::$5
(word~) sin8u_table::$6
(label) sin8u_table::@1
(label) sin8u_table::@10
(label) sin8u_table::@11
(label) sin8u_table::@12
(label) sin8u_table::@13
(label) sin8u_table::@14
(label) sin8u_table::@15
(label) sin8u_table::@16
(label) sin8u_table::@17
(label) sin8u_table::@18
(label) sin8u_table::@19
(label) sin8u_table::@20
(label) sin8u_table::@21
(label) sin8u_table::@22
(label) sin8u_table::@23
(label) sin8u_table::@24
(label) sin8u_table::@25
(label) sin8u_table::@3
(label) sin8u_table::@4
(label) sin8u_table::@5
(label) sin8u_table::@6
(label) sin8u_table::@7
(label) sin8u_table::@8
(label) sin8u_table::@9
(label) sin8u_table::@return
(byte) sin8u_table::amplitude
(byte) sin8u_table::amplitude#0
(byte) sin8u_table::amplitude#1
(byte) sin8u_table::amplitude#10
(byte) sin8u_table::amplitude#11
(byte) sin8u_table::amplitude#12
(byte) sin8u_table::amplitude#13
(byte) sin8u_table::amplitude#14
(byte) sin8u_table::amplitude#15
(byte) sin8u_table::amplitude#16
(byte) sin8u_table::amplitude#17
(byte) sin8u_table::amplitude#18
(byte) sin8u_table::amplitude#19
(byte) sin8u_table::amplitude#2
(byte) sin8u_table::amplitude#20
(byte) sin8u_table::amplitude#21
(byte) sin8u_table::amplitude#22
(byte) sin8u_table::amplitude#23
(byte) sin8u_table::amplitude#24
(byte) sin8u_table::amplitude#3
(byte) sin8u_table::amplitude#4
(byte) sin8u_table::amplitude#5
(byte) sin8u_table::amplitude#6
(byte) sin8u_table::amplitude#7
(byte) sin8u_table::amplitude#8
(byte) sin8u_table::amplitude#9
(word) sin8u_table::i
(word) sin8u_table::i#0
(word) sin8u_table::i#1
(word) sin8u_table::i#10
(word) sin8u_table::i#11
(word) sin8u_table::i#12
(word) sin8u_table::i#13
(word) sin8u_table::i#2
(word) sin8u_table::i#3
(word) sin8u_table::i#4
(word) sin8u_table::i#5
(word) sin8u_table::i#6
(word) sin8u_table::i#7
(word) sin8u_table::i#8
(word) sin8u_table::i#9
(byte) sin8u_table::max
(byte) sin8u_table::max#0
(byte) sin8u_table::max#1
(byte) sin8u_table::max#2
(byte) sin8u_table::max#3
(byte) sin8u_table::max#4
(byte) sin8u_table::max#5
(byte) sin8u_table::max#6
(byte) sin8u_table::max#7
(byte) sin8u_table::mid
(byte) sin8u_table::mid#0
(byte) sin8u_table::mid#1
(byte) sin8u_table::mid#10
(byte) sin8u_table::mid#11
(byte) sin8u_table::mid#12
(byte) sin8u_table::mid#13
(byte) sin8u_table::mid#14
(byte) sin8u_table::mid#15
(byte) sin8u_table::mid#16
(byte) sin8u_table::mid#17
(byte) sin8u_table::mid#18
(byte) sin8u_table::mid#19
(byte) sin8u_table::mid#2
(byte) sin8u_table::mid#20
(byte) sin8u_table::mid#21
(byte) sin8u_table::mid#22
(byte) sin8u_table::mid#23
(byte) sin8u_table::mid#24
(byte) sin8u_table::mid#3
(byte) sin8u_table::mid#4
(byte) sin8u_table::mid#5
(byte) sin8u_table::mid#6
(byte) sin8u_table::mid#7
(byte) sin8u_table::mid#8
(byte) sin8u_table::mid#9
(byte) sin8u_table::min
(byte) sin8u_table::min#0
(byte) sin8u_table::min#1
(byte) sin8u_table::min#2
(byte) sin8u_table::min#3
(byte) sin8u_table::min#4
(byte) sin8u_table::min#5
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#0
(byte*) sin8u_table::sintab#1
(byte*) sin8u_table::sintab#10
(byte*) sin8u_table::sintab#11
(byte*) sin8u_table::sintab#12
(byte*) sin8u_table::sintab#13
(byte*) sin8u_table::sintab#14
(byte*) sin8u_table::sintab#15
(byte*) sin8u_table::sintab#16
(byte*) sin8u_table::sintab#17
(byte*) sin8u_table::sintab#18
(byte*) sin8u_table::sintab#19
(byte*) sin8u_table::sintab#2
(byte*) sin8u_table::sintab#20
(byte*) sin8u_table::sintab#21
(byte*) sin8u_table::sintab#22
(byte*) sin8u_table::sintab#23
(byte*) sin8u_table::sintab#24
(byte*) sin8u_table::sintab#25
(byte*) sin8u_table::sintab#26
(byte*) sin8u_table::sintab#3
(byte*) sin8u_table::sintab#4
(byte*) sin8u_table::sintab#5
(byte*) sin8u_table::sintab#6
(byte*) sin8u_table::sintab#7
(byte*) sin8u_table::sintab#8
(byte*) sin8u_table::sintab#9
(signed byte) sin8u_table::sinx
(signed byte) sin8u_table::sinx#0
(signed byte) sin8u_table::sinx#1
(signed byte) sin8u_table::sinx#2
(signed byte) sin8u_table::sinx#3
(signed byte) sin8u_table::sinx#4
(signed word) sin8u_table::sinx_sc
(signed word) sin8u_table::sinx_sc#0
(signed word) sin8u_table::sinx_sc#1
(signed word) sin8u_table::sinx_sc#2
(signed word) sin8u_table::sinx_sc#3
(signed word) sin8u_table::sinx_sc#4
(signed word) sin8u_table::sinx_sc#5
(byte) sin8u_table::sinx_tr
(byte) sin8u_table::sinx_tr#0
(byte) sin8u_table::sinx_tr#1
(byte) sin8u_table::sinx_tr#2
(byte) sin8u_table::sinx_tr#3
(byte) sin8u_table::sinx_tr#4
(byte) sin8u_table::sinx_tr#5
(byte) sin8u_table::sinx_tr#6
(byte) sin8u_table::sinx_tr#7
(word) sin8u_table::step
(word) sin8u_table::step#0
(word) sin8u_table::step#1
(word) sin8u_table::step#10
(word) sin8u_table::step#11
(word) sin8u_table::step#12
(word) sin8u_table::step#13
(word) sin8u_table::step#14
(word) sin8u_table::step#15
(word) sin8u_table::step#16
(word) sin8u_table::step#17
(word) sin8u_table::step#18
(word) sin8u_table::step#19
(word) sin8u_table::step#2
(word) sin8u_table::step#20
(word) sin8u_table::step#21
(word) sin8u_table::step#22
(word) sin8u_table::step#23
(word) sin8u_table::step#3
(word) sin8u_table::step#4
(word) sin8u_table::step#5
(word) sin8u_table::step#6
(word) sin8u_table::step#7
(word) sin8u_table::step#8
(word) sin8u_table::step#9
(const string) sin8u_table::str = (string) "step:@"
(const string) sin8u_table::str1 = (string) " min:@"
(const string) sin8u_table::str2 = (string) " max:@"
(const string) sin8u_table::str3 = (string) " ampl:@"
(const string) sin8u_table::str4 = (string) " mid:@"
(const string) sin8u_table::str5 = (string) "x: @"
(const string) sin8u_table::str6 = (string) " sin: @"
(const string) sin8u_table::str7 = (string) " scaled: @"
(const string) sin8u_table::str8 = (string) " trans: @"
(word) sin8u_table::sum
(word) sin8u_table::sum#0
(word) sin8u_table::tabsize
(word) sin8u_table::tabsize#0
(word) sin8u_table::tabsize#1
(word) sin8u_table::tabsize#10
(word) sin8u_table::tabsize#11
(word) sin8u_table::tabsize#12
(word) sin8u_table::tabsize#13
(word) sin8u_table::tabsize#14
(word) sin8u_table::tabsize#15
(word) sin8u_table::tabsize#16
(word) sin8u_table::tabsize#17
(word) sin8u_table::tabsize#18
(word) sin8u_table::tabsize#19
(word) sin8u_table::tabsize#2
(word) sin8u_table::tabsize#20
(word) sin8u_table::tabsize#21
(word) sin8u_table::tabsize#22
(word) sin8u_table::tabsize#23
(word) sin8u_table::tabsize#24
(word) sin8u_table::tabsize#25
(word) sin8u_table::tabsize#3
(word) sin8u_table::tabsize#4
(word) sin8u_table::tabsize#5
(word) sin8u_table::tabsize#6
(word) sin8u_table::tabsize#7
(word) sin8u_table::tabsize#8
(word) sin8u_table::tabsize#9
(word) sin8u_table::x
(word) sin8u_table::x#0
(word) sin8u_table::x#1
(word) sin8u_table::x#10
(word) sin8u_table::x#11
(word) sin8u_table::x#12
(word) sin8u_table::x#13
(word) sin8u_table::x#2
(word) sin8u_table::x#3
(word) sin8u_table::x#4
(word) sin8u_table::x#5
(word) sin8u_table::x#6
(word) sin8u_table::x#7
(word) sin8u_table::x#8
(word) sin8u_table::x#9

Adding number conversion cast (unumber) 0 in (word) divr16u::quotient#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$0 ← (word) divr16u::rem#4 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
Adding number conversion cast (unumber) divr16u::$2 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr16u::$3 ← (unumber~) divr16u::$2 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr16u::$5 ← (word) divr16u::rem#6 | (number) 1
Adding number conversion cast (unumber) divr16u::$5 in (number~) divr16u::$5 ← (word) divr16u::rem#6 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) mul8u::res#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$0 ← (byte) mul8u::a#3 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul8u::$1 ← (byte) mul8u::a#4 & (number) 1
Adding number conversion cast (unumber) mul8u::$1 in (number~) mul8u::$1 ← (byte) mul8u::a#4 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$2 ← (unumber~) mul8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (number) 1
Adding number conversion cast (unumber) 1 in (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
Adding number conversion cast (snumber) 0 in (bool~) mul8su::$3 ← (signed byte) mul8su::a#2 < (number) 0
Adding number conversion cast (unumber) $6488 in (word) PI2_u4f12#0 ← (number) $6488
Adding number conversion cast (unumber) $3244 in (word) PI_u4f12#0 ← (number) $3244
Adding number conversion cast (unumber) $1922 in (word) PI_HALF_u4f12#0 ← (number) $1922
Adding number conversion cast (unumber) 0 in (byte) sin8s::isUpper#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) sin8s::isUpper#1 ← (number) 1
Adding number conversion cast (unumber) 3 in (word~) sin8s::$4 ← (word) sin8s::x#6 << (number) 3
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#1 ← (number) 1
Adding number conversion cast (unumber) $2b in (byte) sin8s::DIV_6#0 ← (number) $2b
Adding number conversion cast (unumber) 1 in (byte) mulu8_sel::select#2 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulu8_sel::select#4 ← (number) 0
Adding number conversion cast (unumber) 4 in (byte~) sin8s::$12 ← (byte) sin8s::x5#0 >> (number) 4
Adding number conversion cast (unumber) $80 in (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (number) $80
Adding number conversion cast (unumber) 0 in (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (number) 0
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#12 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) print_sbyte::$0 ← (signed byte) print_sbyte::b#2 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#9 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#9 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
Adding number conversion cast (unumber) $14 in (word) main::tabsize#0 ← (number) $14
Adding number conversion cast (unumber) $a in (byte) sin8u_table::min#0 ← (number) $a
Adding number conversion cast (unumber) $ff in (byte) sin8u_table::max#0 ← (number) $ff
Adding number conversion cast (unumber) 2 in (number~) sin8u_table::$3 ← (word) sin8u_table::sum#0 / (number) 2
Adding number conversion cast (unumber) sin8u_table::$3 in (number~) sin8u_table::$3 ← (word) sin8u_table::sum#0 / (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (number~) sin8u_table::$4 ← (unumber~) sin8u_table::$3 + (number) 1
Adding number conversion cast (unumber) sin8u_table::$4 in (number~) sin8u_table::$4 ← (unumber~) sin8u_table::$3 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) sin8u_table::x#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) sin8u_table::i#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) sin8u_table::$19 ← (byte) sin8u_table::amplitude#2 + (number) 1
Adding number conversion cast (unumber) sin8u_table::$19 in (number~) sin8u_table::$19 ← (byte) sin8u_table::amplitude#2 + (unumber)(number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (word) divr16u::quotient#0 ← (unumber)(number) 0
Inlining cast (word) divr16u::rem#3 ← (unumber)(number) 0
Inlining cast (word) mul8u::res#0 ← (unumber)(number) 0
Inlining cast (byte~) mul8su::$0 ← (byte)(signed byte) mul8su::a#1
Inlining cast (byte~) mul8su::$1 ← (byte)(byte) mul8su::b#1
Inlining cast (signed word~) mul8su::$5 ← (signed word)(word) mul8su::m#2
Inlining cast (byte~) mul8su::$8 ← (byte)(byte) mul8su::b#2
Inlining cast (word) PI2_u4f12#0 ← (unumber)(number) $6488
Inlining cast (word) PI_u4f12#0 ← (unumber)(number) $3244
Inlining cast (word) PI_HALF_u4f12#0 ← (unumber)(number) $1922
Inlining cast (byte) sin8s::isUpper#0 ← (unumber)(number) 0
Inlining cast (byte) sin8s::isUpper#1 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#0 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#1 ← (unumber)(number) 1
Inlining cast (byte) sin8s::DIV_6#0 ← (unumber)(number) $2b
Inlining cast (byte) mulu8_sel::select#2 ← (unumber)(number) 1
Inlining cast (byte) mulu8_sel::select#3 ← (unumber)(number) 0
Inlining cast (byte) mulu8_sel::select#4 ← (unumber)(number) 0
Inlining cast (signed byte~) sin8s::$16 ← (signed byte)(byte) sin8s::usinx#4
Inlining cast (signed byte~) sin8s::$21 ← (signed byte)(byte) sin8s::usinx#6
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word~) print_sword::$2 ← (word)(signed word) print_sword::w#3
Inlining cast (byte~) print_sbyte::$1 ← (byte)(signed byte) print_sbyte::b#4
Inlining cast (word) main::tabsize#0 ← (unumber)(number) $14
Inlining cast (byte) sin8u_table::min#0 ← (unumber)(number) $a
Inlining cast (byte) sin8u_table::max#0 ← (unumber)(number) $ff
Inlining cast (word~) sin8u_table::$1 ← (word)(byte) sin8u_table::min#1
Inlining cast (byte~) sin8u_table::$5 ← (byte)(unumber~) sin8u_table::$4
Inlining cast (word) sin8u_table::x#0 ← (unumber)(number) 0
Inlining cast (word) sin8u_table::i#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) mul8su::b#1
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) mul8su::b#2
Simplifying constant integer cast $6488
Simplifying constant integer cast $3244
Simplifying constant integer cast $1922
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $2b
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $14
Simplifying constant integer cast $a
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized unsigned number type (word) $6488
Finalized unsigned number type (word) $3244
Finalized unsigned number type (word) $1922
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $2b
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
Inferred type updated to word in (unumber~) divr16u::$5 ← (word) divr16u::rem#6 | (byte) 1
Inferred type updated to byte in (unumber~) mul8u::$1 ← (byte) mul8u::a#4 & (byte) 1
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#9 & (byte) $f
Inferred type updated to word in (unumber~) sin8u_table::$3 ← (word) sin8u_table::sum#0 / (byte) 2
Inferred type updated to word in (unumber~) sin8u_table::$4 ← (word~) sin8u_table::$3 + (byte) 1
Inferred type updated to byte in (unumber~) sin8u_table::$19 ← (byte) sin8u_table::amplitude#2 + (byte) 1
Inversing boolean not [9] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte) 0 from [8] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte) 0
Inversing boolean not [17] (bool~) divr16u::$9 ← (word) divr16u::rem#5 < (word) divr16u::divisor#1 from [16] (bool~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
Inversing boolean not [56] (bool~) mul8u::$3 ← (byte~) mul8u::$1 == (byte) 0 from [55] (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte) 0
Inversing boolean not [82] (bool~) mul8su::$4 ← (signed byte) mul8su::a#2 >= (signed byte) 0 from [81] (bool~) mul8su::$3 ← (signed byte) mul8su::a#2 < (signed byte) 0
Inversing boolean not [102] (bool~) sin8s::$1 ← (word) sin8s::x#3 < (word) PI_u4f12#0 from [101] (bool~) sin8s::$0 ← (word) sin8s::x#3 >= (word) PI_u4f12#0
Inversing boolean not [106] (bool~) sin8s::$3 ← (word) sin8s::x#4 < (word) PI_HALF_u4f12#0 from [105] (bool~) sin8s::$2 ← (word) sin8s::x#4 >= (word) PI_HALF_u4f12#0
Inversing boolean not [164] (bool~) sin8s::$15 ← (byte) sin8s::usinx#1 < (byte) $80 from [163] (bool~) sin8s::$14 ← (byte) sin8s::usinx#1 >= (byte) $80
Inversing boolean not [173] (bool~) sin8s::$18 ← (byte) sin8s::isUpper#2 == (byte) 0 from [172] (bool~) sin8s::$17 ← (byte) sin8s::isUpper#2 != (byte) 0
Inversing boolean not [227] (bool~) print_sword::$1 ← (signed word) print_sword::w#2 >= (signed byte) 0 from [226] (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (signed byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#6 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#6 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#3 = (word) divr16u::divisor#4 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word~) divr16u::$5 
Alias (word) divr16u::rem#5 = (word) divr16u::rem#7 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#2 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#3 (word) divr16u::return#1 
Alias (word) divr16u::return#2 = (word) divr16u::return#4 
Alias (word) div16u::return#0 = (word~) div16u::$0 (word) div16u::return#3 (word) div16u::return#1 
Alias (word) mul8u::mb#0 = (byte) mul8u::b#2 
Alias (byte) mul8u::a#3 = (byte) mul8u::a#4 (byte) mul8u::a#7 
Alias (word) mul8u::mb#3 = (word) mul8u::mb#4 (word) mul8u::mb#5 
Alias (word) mul8u::res#2 = (word) mul8u::res#5 (word) mul8u::res#4 (word) mul8u::return#0 (word) mul8u::res#3 (word) mul8u::return#4 (word) mul8u::return#1 
Alias (byte) mul8u::a#0 = (byte~) mul8u::$5 
Alias (word) mul8u::mb#1 = (word~) mul8u::$6 
Alias (word) mul8u::res#1 = (word~) mul8u::$4 
Alias (byte) mul8su::b#1 = (byte~) mul8su::$1 (byte) mul8u::b#0 (byte) mul8su::b#3 (byte) mul8su::b#2 (byte~) mul8su::$8 
Alias (byte) mul8u::a#1 = (byte~) mul8su::$0 
Alias (word) mul8u::return#2 = (word) mul8u::return#5 
Alias (signed byte) mul8su::a#1 = (signed byte) mul8su::a#2 
Alias (word) mul8su::m#0 = (word~) mul8su::$2 (word) mul8su::m#3 
Alias (signed word) mul8su::return#0 = (signed word~) mul8su::$5 (signed word) mul8su::return#3 (signed word) mul8su::return#1 
Alias (byte~) mul8su::$10 = (byte~) mul8su::$9 
Alias (word) sin8s::x#3 = (word) sin8s::x#5 
Alias (word) sin8s::x#0 = (word~) sin8s::$19 
Alias (byte) sin8s::x1#0 = (byte~) sin8s::$5 (byte) sin8s::x1#1 (byte) sin8s::x1#4 (byte) sin8s::x1#2 (byte) sin8s::x1#3 
Alias (byte) mulu8_sel::return#0 = (byte) mulu8_sel::return#7 
Alias (byte) sin8s::isUpper#3 = (byte) sin8s::isUpper#8 (byte) sin8s::isUpper#9 (byte) sin8s::isUpper#7 (byte) sin8s::isUpper#6 (byte) sin8s::isUpper#5 (byte) sin8s::isUpper#4 
Alias (byte) sin8s::x2#0 = (byte~) sin8s::$6 
Alias (byte) mulu8_sel::return#1 = (byte) mulu8_sel::return#8 
Alias (byte) sin8s::x3#0 = (byte~) sin8s::$7 (byte) sin8s::x3#1 
Alias (byte) mulu8_sel::return#2 = (byte) mulu8_sel::return#9 
Alias (byte) sin8s::x3_6#0 = (byte~) sin8s::$8 
Alias (byte) sin8s::usinx#0 = (byte~) sin8s::$9 (byte) sin8s::usinx#7 (byte) sin8s::usinx#3 
Alias (byte) mulu8_sel::return#10 = (byte) mulu8_sel::return#3 
Alias (byte) sin8s::x4#0 = (byte~) sin8s::$10 
Alias (byte) mulu8_sel::return#11 = (byte) mulu8_sel::return#4 
Alias (byte) sin8s::x5#0 = (byte~) sin8s::$11 
Alias (byte) sin8s::x5_128#0 = (byte~) sin8s::$12 
Alias (byte) sin8s::usinx#1 = (byte~) sin8s::$13 (byte) sin8s::usinx#5 
Alias (word) sin8s::x#4 = (word) sin8s::x#7 
Alias (byte) sin8s::isUpper#10 = (byte) sin8s::isUpper#11 
Alias (word) sin8s::x#1 = (word~) sin8s::$20 
Alias (signed byte) sin8s::sinx#0 = (signed byte~) sin8s::$16 
Alias (signed byte) sin8s::return#0 = (signed byte) sin8s::sinx#2 (signed byte) sin8s::return#3 (signed byte) sin8s::return#1 
Alias (byte) sin8s::usinx#4 = (byte) sin8s::usinx#6 
Alias (signed byte) sin8s::sinx#1 = (signed byte~) sin8s::$22 
Alias (word) mul8u::return#3 = (word) mul8u::return#6 
Alias (byte) mulu8_sel::select#5 = (byte) mulu8_sel::select#6 
Alias (byte) mulu8_sel::return#12 = (byte) mulu8_sel::return#5 (byte~) mulu8_sel::$2 (byte) mulu8_sel::return#6 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#30 (byte*) print_char_cursor#110 (byte*) print_screen#6 (byte*) print_line_cursor#27 (byte*) print_char_cursor#104 (byte*) print_screen#5 
Alias (byte*) print_str::str#10 = (byte*) print_str::str#11 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#47 (byte*) print_char_cursor#92 (byte*) print_char_cursor#48 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#13 (byte*) print_char_cursor#3 (byte*) print_line_cursor#14 (byte*) print_char_cursor#50 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (word) print_word::w#0 = (word~) print_sword::$2 
Alias (byte*) print_char_cursor#5 = (byte*) print_char_cursor#51 (byte*) print_char_cursor#53 (byte*) print_char_cursor#7 
Alias (byte*) print_char_cursor#106 = (byte*) print_char_cursor#95 
Alias (signed word) print_sword::w#2 = (signed word) print_sword::w#5 (signed word) print_sword::w#4 
Alias (byte*) print_char_cursor#52 = (byte*) print_char_cursor#6 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$5 
Alias (byte*) print_char_cursor#107 = (byte*) print_char_cursor#96 (byte*) print_char_cursor#97 
Alias (signed byte) print_sbyte::b#2 = (signed byte) print_sbyte::b#5 (signed byte) print_sbyte::b#3 (signed byte) print_sbyte::b#7 (signed byte) print_sbyte::b#6 
Alias (byte*) print_char_cursor#54 = (byte*) print_char_cursor#8 
Alias (signed byte) print_sbyte::b#0 = (signed byte~) print_sbyte::$5 
Alias (byte*) print_char_cursor#55 = (byte*) print_char_cursor#9 
Alias (byte) print_byte::b#0 = (byte~) print_sbyte::$1 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#56 (byte*) print_char_cursor#57 (byte*) print_char_cursor#11 
Alias (byte) print_byte::b#1 = (byte~) print_word::$0 
Alias (word) print_word::w#3 = (word) print_word::w#4 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#58 
Alias (byte) print_byte::b#2 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#59 (byte*) print_char_cursor#60 (byte*) print_char_cursor#14 
Alias (byte) print_byte::b#8 = (byte) print_byte::b#9 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#61 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#62 (byte*) print_char_cursor#63 (byte*) print_char_cursor#17 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#65 (byte*) print_char_cursor#19 
Alias (byte*) print_line_cursor#15 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#20 (byte*) print_char_cursor#66 (byte*) print_line_cursor#4 (byte*) print_char_cursor#21 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#67 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#68 (byte*) print_char_cursor#69 (byte*) print_char_cursor#24 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#6 (byte*) print_line_cursor#18 (byte*) print_line_cursor#7 
Alias (byte) sin8u_table::amplitude#0 = (byte~) sin8u_table::$0 (byte) sin8u_table::amplitude#19 (byte) sin8u_table::amplitude#17 (byte) sin8u_table::amplitude#14 (byte) sin8u_table::amplitude#11 (byte) sin8u_table::amplitude#8 (byte) sin8u_table::amplitude#5 (byte) sin8u_table::amplitude#3 (byte) sin8u_table::amplitude#1 (byte) sin8u_table::amplitude#15 (byte) sin8u_table::amplitude#12 (byte) sin8u_table::amplitude#9 (byte) sin8u_table::amplitude#6 
Alias (word) sin8u_table::sum#0 = (word~) sin8u_table::$2 
Alias (byte) sin8u_table::mid#0 = (byte~) sin8u_table::$5 (byte) sin8u_table::mid#21 (byte) sin8u_table::mid#19 (byte) sin8u_table::mid#17 (byte) sin8u_table::mid#15 (byte) sin8u_table::mid#13 (byte) sin8u_table::mid#10 (byte) sin8u_table::mid#7 (byte) sin8u_table::mid#5 (byte) sin8u_table::mid#3 (byte) sin8u_table::mid#1 (byte) sin8u_table::mid#11 (byte) sin8u_table::mid#8 
Alias (word) div16u::return#2 = (word) div16u::return#4 
Alias (byte*) print_char_cursor#102 = (byte*) print_char_cursor#108 
Alias (byte) sin8u_table::min#1 = (byte) sin8u_table::min#5 (byte) sin8u_table::min#4 (byte) sin8u_table::min#3 (byte) sin8u_table::min#2 
Alias (byte) sin8u_table::max#1 = (byte) sin8u_table::max#7 (byte) sin8u_table::max#6 (byte) sin8u_table::max#5 (byte) sin8u_table::max#4 (byte) sin8u_table::max#3 (byte) sin8u_table::max#2 
Alias (byte*) print_line_cursor#25 = (byte*) print_line_cursor#47 (byte*) print_line_cursor#49 (byte*) print_line_cursor#45 (byte*) print_line_cursor#43 (byte*) print_line_cursor#41 (byte*) print_line_cursor#39 (byte*) print_line_cursor#37 (byte*) print_line_cursor#35 (byte*) print_line_cursor#33 (byte*) print_line_cursor#31 (byte*) print_line_cursor#28 
Alias (byte*) sin8u_table::sintab#11 = (byte*) sin8u_table::sintab#25 (byte*) sin8u_table::sintab#26 (byte*) sin8u_table::sintab#24 (byte*) sin8u_table::sintab#23 (byte*) sin8u_table::sintab#21 (byte*) sin8u_table::sintab#19 (byte*) sin8u_table::sintab#17 (byte*) sin8u_table::sintab#15 (byte*) sin8u_table::sintab#13 (byte*) sin8u_table::sintab#9 (byte*) sin8u_table::sintab#7 (byte*) sin8u_table::sintab#5 
Alias (word) sin8u_table::tabsize#1 = (word) sin8u_table::tabsize#25 (word) sin8u_table::tabsize#24 (word) sin8u_table::tabsize#23 (word) sin8u_table::tabsize#22 (word) sin8u_table::tabsize#21 (word) sin8u_table::tabsize#20 (word) sin8u_table::tabsize#19 (word) sin8u_table::tabsize#18 (word) sin8u_table::tabsize#17 (word) sin8u_table::tabsize#16 (word) sin8u_table::tabsize#15 (word) sin8u_table::tabsize#14 
Alias (word) sin8u_table::step#0 = (word~) sin8u_table::$6 (word) sin8u_table::step#1 (word) sin8u_table::step#23 (word) sin8u_table::step#22 (word) sin8u_table::step#21 (word) sin8u_table::step#20 (word) sin8u_table::step#19 (word) sin8u_table::step#18 (word) sin8u_table::step#17 (word) sin8u_table::step#16 (word) sin8u_table::step#15 (word) sin8u_table::step#14 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#70 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#71 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#72 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#73 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#74 
Alias (byte*) print_char_cursor#30 = (byte*) print_char_cursor#75 
Alias (byte*) print_char_cursor#31 = (byte*) print_char_cursor#76 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#77 
Alias (byte*) print_char_cursor#33 = (byte*) print_char_cursor#78 
Alias (byte*) print_char_cursor#34 = (byte*) print_char_cursor#79 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#35 = (byte*) print_char_cursor#80 
Alias (signed byte) sin8s::return#2 = (signed byte) sin8s::return#4 
Alias (byte) sin8u_table::amplitude#10 = (byte) sin8u_table::amplitude#2 (byte) sin8u_table::amplitude#4 (byte) sin8u_table::amplitude#24 (byte) sin8u_table::amplitude#23 (byte) sin8u_table::amplitude#22 (byte) sin8u_table::amplitude#21 (byte) sin8u_table::amplitude#20 (byte) sin8u_table::amplitude#18 (byte) sin8u_table::amplitude#16 (byte) sin8u_table::amplitude#13 (byte) sin8u_table::amplitude#7 
Alias (byte) sin8u_table::mid#12 = (byte) sin8u_table::mid#4 (byte) sin8u_table::mid#6 (byte) sin8u_table::mid#2 (byte) sin8u_table::mid#24 (byte) sin8u_table::mid#23 (byte) sin8u_table::mid#22 (byte) sin8u_table::mid#20 (byte) sin8u_table::mid#18 (byte) sin8u_table::mid#16 (byte) sin8u_table::mid#14 (byte) sin8u_table::mid#9 
Alias (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#3 (byte*) sin8u_table::sintab#4 
Alias (byte*) print_char_cursor#103 = (byte*) print_char_cursor#109 (byte*) print_char_cursor#111 
Alias (word) sin8u_table::x#10 = (word) sin8u_table::x#7 (word) sin8u_table::x#2 (word) sin8u_table::x#5 (word) sin8u_table::x#3 (word) sin8u_table::x#13 (word) sin8u_table::x#12 (word) sin8u_table::x#11 (word) sin8u_table::x#9 (word) sin8u_table::x#8 (word) sin8u_table::x#6 (word) sin8u_table::x#4 
Alias (byte*) print_line_cursor#26 = (byte*) print_line_cursor#46 (byte*) print_line_cursor#48 (byte*) print_line_cursor#44 (byte*) print_line_cursor#42 (byte*) print_line_cursor#40 (byte*) print_line_cursor#38 (byte*) print_line_cursor#36 (byte*) print_line_cursor#34 (byte*) print_line_cursor#32 (byte*) print_line_cursor#29 
Alias (word) sin8u_table::step#10 = (word) sin8u_table::step#12 (word) sin8u_table::step#13 (word) sin8u_table::step#11 (word) sin8u_table::step#9 (word) sin8u_table::step#8 (word) sin8u_table::step#7 (word) sin8u_table::step#6 (word) sin8u_table::step#5 (word) sin8u_table::step#4 (word) sin8u_table::step#3 (word) sin8u_table::step#2 
Alias (word) sin8u_table::i#10 = (word) sin8u_table::i#12 (word) sin8u_table::i#13 (word) sin8u_table::i#11 (word) sin8u_table::i#9 (word) sin8u_table::i#8 (word) sin8u_table::i#7 (word) sin8u_table::i#6 (word) sin8u_table::i#5 (word) sin8u_table::i#4 (word) sin8u_table::i#3 (word) sin8u_table::i#2 
Alias (word) sin8u_table::tabsize#10 = (word) sin8u_table::tabsize#12 (word) sin8u_table::tabsize#13 (word) sin8u_table::tabsize#11 (word) sin8u_table::tabsize#9 (word) sin8u_table::tabsize#8 (word) sin8u_table::tabsize#7 (word) sin8u_table::tabsize#6 (word) sin8u_table::tabsize#5 (word) sin8u_table::tabsize#4 (word) sin8u_table::tabsize#3 (word) sin8u_table::tabsize#2 
Alias (signed byte) sin8u_table::sinx#0 = (signed byte~) sin8u_table::$18 (signed byte) sin8u_table::sinx#4 (signed byte) sin8u_table::sinx#3 (signed byte) sin8u_table::sinx#2 (signed byte) sin8u_table::sinx#1 
Alias (byte) mul8su::b#0 = (byte~) sin8u_table::$19 
Alias (signed word) mul8su::return#2 = (signed word) mul8su::return#4 
Alias (signed word) sin8u_table::sinx_sc#0 = (signed word~) sin8u_table::$20 (signed word) sin8u_table::sinx_sc#5 (signed word) sin8u_table::sinx_sc#4 (signed word) sin8u_table::sinx_sc#3 (signed word) sin8u_table::sinx_sc#2 (signed word) sin8u_table::sinx_sc#1 
Alias (byte) sin8u_table::sinx_tr#0 = (byte~) sin8u_table::$22 (byte) sin8u_table::sinx_tr#7 (byte) sin8u_table::sinx_tr#6 (byte) sin8u_table::sinx_tr#5 (byte) sin8u_table::sinx_tr#4 (byte) sin8u_table::sinx_tr#3 (byte) sin8u_table::sinx_tr#2 (byte) sin8u_table::sinx_tr#1 
Alias (byte*) sin8u_table::sintab#1 = (byte*) sin8u_table::sintab#22 (byte*) sin8u_table::sintab#20 (byte*) sin8u_table::sintab#18 (byte*) sin8u_table::sintab#16 (byte*) sin8u_table::sintab#14 (byte*) sin8u_table::sintab#12 (byte*) sin8u_table::sintab#10 (byte*) sin8u_table::sintab#8 (byte*) sin8u_table::sintab#6 
Alias (byte*) print_char_cursor#36 = (byte*) print_char_cursor#81 
Alias (byte*) print_char_cursor#37 = (byte*) print_char_cursor#82 
Alias (byte*) print_char_cursor#38 = (byte*) print_char_cursor#83 
Alias (byte*) print_char_cursor#39 = (byte*) print_char_cursor#84 
Alias (byte*) print_char_cursor#40 = (byte*) print_char_cursor#85 
Alias (byte*) print_char_cursor#41 = (byte*) print_char_cursor#86 
Alias (byte*) print_char_cursor#42 = (byte*) print_char_cursor#87 
Alias (byte*) print_char_cursor#43 = (byte*) print_char_cursor#88 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#9 (byte*) print_line_cursor#20 (byte*) print_line_cursor#21 
Alias (byte*) print_char_cursor#44 = (byte*) print_char_cursor#89 (byte*) print_char_cursor#90 (byte*) print_char_cursor#45 
Alias (word) sin8u_table::x#1 = (word~) sin8u_table::$32 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#22 
Alias (byte*) print_char_cursor#46 = (byte*) print_char_cursor#91 
Successful SSA optimization Pass2AliasElimination
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#3 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#3 (word) divr16u::divisor#6 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#5 
Alias (byte) mul8u::a#3 = (byte) mul8u::a#5 
Alias (word) mul8u::mb#2 = (word) mul8u::mb#3 
Alias (byte) sin8s::isUpper#10 = (byte) sin8s::isUpper#3 (byte) sin8s::isUpper#2 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (word) divr16u::divisor#1
Self Phi Eliminated (byte*) print_char_cursor#49
Self Phi Eliminated (byte*) print_line_cursor#15
Self Phi Eliminated (byte) sin8u_table::amplitude#10
Self Phi Eliminated (byte) sin8u_table::mid#12
Self Phi Eliminated (word) sin8u_table::step#10
Self Phi Eliminated (word) sin8u_table::tabsize#10
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (word) divr16u::rem#8 (word) divr16u::rem#3
Identical Phi Values (word) divr16u::dividend#4 (word) divr16u::dividend#1
Identical Phi Values (word) divr16u::divisor#5 (word) divr16u::divisor#0
Identical Phi Values (word) divr16u::divisor#1 (word) divr16u::divisor#5
Identical Phi Values (word) div16u::dividend#1 (word) div16u::dividend#0
Identical Phi Values (word) div16u::divisor#1 (word) div16u::divisor#0
Identical Phi Values (signed byte) mul8su::a#1 (signed byte) mul8su::a#0
Identical Phi Values (byte) mul8su::b#1 (byte) mul8su::b#0
Identical Phi Values (word) sin8s::x#3 (word) sin8s::x#2
Identical Phi Values (byte*) print_char_cursor#49 (byte*) print_char_cursor#93
Identical Phi Values (signed word) print_sword::w#2 (signed word) print_sword::w#1
Identical Phi Values (byte*) print_char_cursor#106 (byte*) print_char_cursor#40
Identical Phi Values (byte*) print_char_cursor#5 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#52 (byte*) print_char_cursor#18
Identical Phi Values (signed byte) print_sbyte::b#2 (signed byte) print_sbyte::b#1
Identical Phi Values (byte*) print_char_cursor#107 (byte*) print_char_cursor#38
Identical Phi Values (byte*) print_char_cursor#54 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#55 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_screen#1 (byte*) print_screen#4
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_screen#1
Identical Phi Values (byte*) print_screen#4 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#24 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#101 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#10
Identical Phi Values (byte) sin8u_table::max#1 (byte) sin8u_table::max#0
Identical Phi Values (byte) sin8u_table::min#1 (byte) sin8u_table::min#0
Identical Phi Values (word) sin8u_table::tabsize#1 (word) sin8u_table::tabsize#0
Identical Phi Values (byte*) print_char_cursor#102 (byte*) print_char_cursor#22
Identical Phi Values (byte*) print_line_cursor#25 (byte*) print_line_cursor#16
Identical Phi Values (byte*) sin8u_table::sintab#11 (byte*) sin8u_table::sintab#0
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#34 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#35 (byte*) print_line_cursor#1
Identical Phi Values (byte) sin8u_table::amplitude#10 (byte) sin8u_table::amplitude#0
Identical Phi Values (byte) sin8u_table::mid#12 (byte) sin8u_table::mid#0
Identical Phi Values (word) sin8u_table::step#10 (word) sin8u_table::step#0
Identical Phi Values (word) sin8u_table::tabsize#10 (word) sin8u_table::tabsize#1
Identical Phi Values (byte*) print_char_cursor#36 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#37 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#38 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#39 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#40 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#41 (byte*) print_char_cursor#5
Identical Phi Values (byte*) print_char_cursor#42 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#17
Identical Phi Values (byte*) print_char_cursor#46 (byte*) print_char_cursor#23
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#93 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#98 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#103 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#26 (byte*) print_line_cursor#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) divr16u::$4 [10] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [18] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [25] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) mul8u::$0 [52] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
Simple Condition (bool~) mul8u::$3 [57] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@4
Simple Condition (bool~) mul8su::$4 [83] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1
Simple Condition (bool~) sin8s::$1 [103] if((word) sin8s::x#2<(word) PI_u4f12#0) goto sin8s::@1
Simple Condition (bool~) sin8s::$3 [107] if((word) sin8s::x#4<(word) PI_HALF_u4f12#0) goto sin8s::@2
Simple Condition (bool~) sin8s::$15 [165] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
Simple Condition (bool~) sin8s::$18 [174] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@4
Simple Condition (bool~) print_str::$0 [205] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2
Simple Condition (bool~) print_ln::$1 [218] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#18) goto print_ln::@1
Simple Condition (bool~) print_sword::$1 [228] if((signed word) print_sword::w#1>=(signed byte) 0) goto print_sword::@1
Simple Condition (bool~) print_sbyte::$0 [247] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1
Simple Condition (bool~) print_cls::$1 [312] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) sin8u_table::$33 [462] if((word) sin8u_table::i#1<(word) sin8u_table::tabsize#0) goto sin8u_table::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [322] (byte[$14]) main::sintab#0 ← { fill( $14, 0) }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const word) mul8u::res#0 = 0
Constant (const word) PI2_u4f12#0 = $6488
Constant (const word) PI_u4f12#0 = $3244
Constant (const word) PI_HALF_u4f12#0 = $1922
Constant (const byte) sin8s::isUpper#0 = 0
Constant (const byte) sin8s::isUpper#1 = 1
Constant (const byte) mulu8_sel::select#0 = 0
Constant (const byte) mulu8_sel::select#1 = 1
Constant (const byte) sin8s::DIV_6#0 = $2b
Constant (const byte) mulu8_sel::select#2 = 1
Constant (const byte) mulu8_sel::select#3 = 0
Constant (const byte) mulu8_sel::select#4 = 0
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = '-'
Constant (const byte) print_char::ch#2 = ' '
Constant (const byte[]) print_hextab#0 = $0
Constant (const word) main::tabsize#0 = $14
Constant (const byte[$14]) main::sintab#0 = { fill( $14, 0) }
Constant (const byte) sin8u_table::min#0 = $a
Constant (const byte) sin8u_table::max#0 = $ff
Constant (const byte*) print_str::str#1 = sin8u_table::str
Constant (const byte*) print_str::str#2 = sin8u_table::str1
Constant (const byte*) print_str::str#3 = sin8u_table::str2
Constant (const byte*) print_str::str#4 = sin8u_table::str3
Constant (const byte*) print_str::str#5 = sin8u_table::str4
Constant (const word) sin8u_table::x#0 = 0
Constant (const word) sin8u_table::i#0 = 0
Constant (const byte*) print_str::str#6 = sin8u_table::str5
Constant (const byte*) print_str::str#7 = sin8u_table::str6
Constant (const byte*) print_str::str#8 = sin8u_table::str7
Constant (const byte*) print_str::str#9 = sin8u_table::str8
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) mulu8_sel::v2#2 = sin8s::DIV_6#0
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const byte*) sin8u_table::sintab#0 = main::sintab#0
Constant (const word) sin8u_table::tabsize#0 = main::tabsize#0
Constant (const word) div16u::dividend#0 = PI2_u4f12#0
Constant (const byte) print_byte::b#3 = sin8u_table::min#0
Constant (const byte) print_byte::b#4 = sin8u_table::max#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::dividend#1 = div16u::dividend#0
Constant (const word) div16u::divisor#0 = sin8u_table::tabsize#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::divisor#0 = div16u::divisor#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)sin8u_table::min#0 in [342] (word~) sin8u_table::$1 ← (word)(const byte) sin8u_table::min#0
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [23] divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value [25] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (number) $10
Adding number conversion cast (unumber) $10 in if((byte) divr16u::i#1!=(number) $10) goto divr16u::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [142] (byte*~) print_cls::$0 ← (const byte*) print_line_cursor#0 + (word) $3e8
Constant right-side identified [148] (byte) sin8u_table::amplitude#0 ← (const byte) sin8u_table::max#0 - (const byte) sin8u_table::min#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Constant (const byte) sin8u_table::amplitude#0 = sin8u_table::max#0-sin8u_table::min#0
Constant (const word) sin8u_table::$1 = (word)sin8u_table::min#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) print_byte::b#5 = sin8u_table::amplitude#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [147] (word) sin8u_table::sum#0 ← (const word) sin8u_table::$1 + (const byte) sin8u_table::max#0
Constant right-side identified [172] (byte) mul8su::b#0 ← (const byte) sin8u_table::amplitude#0 + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) sin8u_table::sum#0 = sin8u_table::$1+sin8u_table::max#0
Constant (const byte) mul8su::b#0 = sin8u_table::amplitude#0+1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [147] (word~) sin8u_table::$3 ← (const word) sin8u_table::sum#0 / (byte) 2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) sin8u_table::$3 = sin8u_table::sum#0/2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [147] (word~) sin8u_table::$4 ← (const word) sin8u_table::$3 + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) sin8u_table::$4 = sin8u_table::$3+1
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)sin8u_table::$4 in [148] (byte) sin8u_table::mid#0 ← (byte)(const word) sin8u_table::$4
Successful SSA optimization Pass2ConstantValues
Constant (const byte) sin8u_table::mid#0 = (byte)sin8u_table::$4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) print_byte::b#6 = sin8u_table::mid#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [30] (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#0 keeping mul8su::a#0
Inlining Noop Cast [36] (signed word) mul8su::return#0 ← (signed word)(word) mul8su::m#2 keeping mul8su::m#2
Inlining Noop Cast [78] (signed byte) sin8s::sinx#0 ← (signed byte)(byte) sin8s::usinx#4 keeping sin8s::usinx#4
Inlining Noop Cast [82] (signed byte~) sin8s::$21 ← (signed byte)(byte) sin8s::usinx#4 keeping sin8s::usinx#4
Inlining Noop Cast [108] (word) print_word::w#0 ← (word)(signed word) print_sword::w#3 keeping print_sword::w#3
Inlining Noop Cast [118] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4 keeping print_sbyte::b#4
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [169] (signed word) mul8su::return#2 ← (signed word)(word) mul8su::m#2 keeping mul8su::m#2
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [170] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2 keeping mul8su::m#2
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [182] (signed word) print_sword::w#1 ← (signed word)(word) mul8su::m#2 keeping mul8su::m#2
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const byte) sin8s::isUpper#0
Inlining constant with var siblings (const byte) sin8s::isUpper#1
Inlining constant with var siblings (const byte) mulu8_sel::select#0
Inlining constant with var siblings (const byte) mulu8_sel::select#1
Inlining constant with var siblings (const byte) mulu8_sel::select#2
Inlining constant with var siblings (const byte) mulu8_sel::select#3
Inlining constant with var siblings (const byte) mulu8_sel::select#4
Inlining constant with var siblings (const byte) mulu8_sel::v2#2
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte*) print_str::str#3
Inlining constant with var siblings (const byte*) print_str::str#4
Inlining constant with var siblings (const byte*) print_str::str#5
Inlining constant with var siblings (const byte*) print_str::str#6
Inlining constant with var siblings (const byte*) print_str::str#7
Inlining constant with var siblings (const byte*) print_str::str#8
Inlining constant with var siblings (const byte*) print_str::str#9
Inlining constant with var siblings (const byte) print_byte::b#3
Inlining constant with var siblings (const byte) print_byte::b#4
Inlining constant with var siblings (const byte) print_byte::b#5
Inlining constant with var siblings (const byte) print_byte::b#6
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const word) sin8u_table::x#0
Inlining constant with var siblings (const word) sin8u_table::i#0
Inlining constant with var siblings (const byte*) sin8u_table::sintab#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined divr16u::rem#3 = (byte) 0
Constant inlined print_cls::$0 = (byte*) 1024+(word) $3e8
Constant inlined divr16u::i#0 = (byte) 0
Constant inlined sin8u_table::i#0 = (byte) 0
Constant inlined sin8u_table::sintab#0 = (const byte[$14]) main::sintab#0
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined sin8s::isUpper#1 = (byte) 1
Constant inlined sin8s::isUpper#0 = (byte) 0
Constant inlined sin8u_table::$4 = (const word) sin8u_table::sum#0/(byte) 2+(byte) 1
Constant inlined divr16u::quotient#0 = (byte) 0
Constant inlined div16u::divisor#0 = (const word) main::tabsize#0
Constant inlined sin8u_table::$1 = (word)(const byte) sin8u_table::min#0
Constant inlined sin8u_table::$3 = (const word) sin8u_table::sum#0/(byte) 2
Constant inlined mulu8_sel::select#0 = (byte) 0
Constant inlined div16u::dividend#0 = (const word) PI2_u4f12#0
Constant inlined mulu8_sel::select#2 = (byte) 1
Constant inlined divr16u::divisor#0 = (const word) main::tabsize#0
Constant inlined mulu8_sel::select#1 = (byte) 1
Constant inlined mulu8_sel::select#4 = (byte) 0
Constant inlined mulu8_sel::select#3 = (byte) 0
Constant inlined sin8u_table::tabsize#0 = (const word) main::tabsize#0
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined print_byte::b#4 = (const byte) sin8u_table::max#0
Constant inlined print_byte::b#3 = (const byte) sin8u_table::min#0
Constant inlined print_byte::b#6 = (const byte) sin8u_table::mid#0
Constant inlined print_byte::b#5 = (const byte) sin8u_table::amplitude#0
Constant inlined divr16u::dividend#1 = (const word) PI2_u4f12#0
Constant inlined print_cls::sc#0 = (byte*) 1024
Constant inlined print_char::ch#2 = (byte) ' '
Constant inlined mulu8_sel::v2#2 = (const byte) sin8s::DIV_6#0
Constant inlined print_str::str#9 = (const string) sin8u_table::str8
Constant inlined mul8u::res#0 = (byte) 0
Constant inlined print_char::ch#1 = (byte) '-'
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined print_str::str#4 = (const string) sin8u_table::str3
Constant inlined print_str::str#3 = (const string) sin8u_table::str2
Constant inlined print_str::str#2 = (const string) sin8u_table::str1
Constant inlined print_str::str#1 = (const string) sin8u_table::str
Constant inlined sin8u_table::x#0 = (byte) 0
Constant inlined print_str::str#8 = (const string) sin8u_table::str7
Constant inlined print_str::str#7 = (const string) sin8u_table::str6
Constant inlined print_str::str#6 = (const string) sin8u_table::str5
Constant inlined print_str::str#5 = (const string) sin8u_table::str4
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul8u::@10(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting mul8su::@5(between mul8su::@4 and mul8su::@1)
Added new block during phi lifting sin8s::@15(between sin8s and sin8s::@1)
Fixing phi predecessor for sin8s::isUpper#10 to new block ( sin8s -> sin8s::@15 ) during phi lifting.
Added new block during phi lifting sin8s::@16(between sin8s::@1 and sin8s::@2)
Added new block during phi lifting sin8s::@17(between sin8s::@14 and sin8s::@3)
Added new block during phi lifting sin8s::@18(between sin8s::@3 and sin8s::@4)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_sword::@5(between print_sword and print_sword::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting sin8u_table::@26(between sin8u_table::@25 and sin8u_table::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @13
Adding NOP phi() at start of @20
Adding NOP phi() at start of @32
Adding NOP phi() at start of @41
Adding NOP phi() at start of @42
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of sin8u_table
Adding NOP phi() at start of sin8u_table::@13
Adding NOP phi() at start of sin8u_table::@14
Adding NOP phi() at start of sin8u_table::@21
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_sword::@3
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_sbyte::@7
Adding NOP phi() at start of mul8u::@3
Adding NOP phi() at start of div16u
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of divr16u::@6
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@2
CALL GRAPH
Calls in [] to main:5 
Calls in [main] to print_cls:9 sin8u_table:11 
Calls in [sin8u_table] to div16u:15 print_str:18 print_word:22 print_str:24 print_byte:26 print_str:28 print_byte:30 print_str:32 print_byte:34 print_str:36 print_byte:38 print_ln:40 sin8s:44 mul8su:48 print_str:54 print_word:58 print_str:60 print_sbyte:62 print_str:64 print_sword:66 print_str:68 print_byte:72 print_ln:74 
Calls in [print_byte] to print_char:95 print_char:100 
Calls in [print_sword] to print_char:120 print_word:127 
Calls in [print_word] to print_byte:136 print_byte:140 
Calls in [print_sbyte] to print_char:145 print_byte:150 print_char:154 
Calls in [mul8su] to mul8u:158 
Calls in [sin8s] to mulu8_sel:201 mulu8_sel:208 mulu8_sel:213 mulu8_sel:221 mulu8_sel:228 
Calls in [mulu8_sel] to mul8u:251 
Calls in [div16u] to divr16u:258 

Created 41 initial phi equivalence classes
Coalesced [20] print_word::w#7 ← print_word::w#1
Coalesced [21] print_char_cursor#126 ← print_char_cursor#2
Coalesced [23] print_char_cursor#117 ← print_char_cursor#18
Coalesced [25] print_char_cursor#133 ← print_char_cursor#2
Coalesced (already) [27] print_char_cursor#118 ← print_char_cursor#18
Coalesced (already) [29] print_char_cursor#134 ← print_char_cursor#2
Coalesced (already) [31] print_char_cursor#119 ← print_char_cursor#18
Coalesced (already) [33] print_char_cursor#130 ← print_char_cursor#2
Coalesced (already) [35] print_char_cursor#112 ← print_char_cursor#18
Coalesced (already) [37] print_char_cursor#131 ← print_char_cursor#2
Not coalescing [53] print_char_cursor#113 ← print_line_cursor#1
Coalesced [56] print_word::w#6 ← print_word::w#2
Coalesced (already) [57] print_char_cursor#125 ← print_char_cursor#2
Coalesced (already) [59] print_char_cursor#114 ← print_char_cursor#18
Coalesced (already) [63] print_char_cursor#115 ← print_char_cursor#18
Coalesced (already) [67] print_char_cursor#116 ← print_char_cursor#18
Coalesced [70] print_byte::b#13 ← print_byte::b#7
Coalesced (already) [71] print_char_cursor#132 ← print_char_cursor#2
Coalesced [73] print_line_cursor#50 ← print_line_cursor#1
Coalesced [79] sin8u_table::x#14 ← sin8u_table::x#1
Coalesced [80] sin8u_table::sintab#27 ← sin8u_table::sintab#1
Coalesced [81] sin8u_table::i#14 ← sin8u_table::i#1
Coalesced [83] print_line_cursor#51 ← print_line_cursor#23
Coalesced (already) [89] print_line_cursor#52 ← print_line_cursor#1
Coalesced [93] print_char::ch#6 ← print_char::ch#3
Coalesced [94] print_char_cursor#135 ← print_char_cursor#100
Coalesced [98] print_char::ch#7 ← print_char::ch#4
Coalesced [99] print_char_cursor#136 ← print_char_cursor#18
Coalesced [108] print_str::str#13 ← print_str::str#12
Coalesced (already) [109] print_char_cursor#120 ← print_char_cursor#105
Coalesced [116] print_str::str#14 ← print_str::str#0
Coalesced [117] print_char_cursor#121 ← print_char_cursor#1
Coalesced (already) [119] print_char_cursor#139 ← print_char_cursor#2
Coalesced [122] print_sword::w#7 ← print_sword::w#0
Coalesced [123] print_char_cursor#123 ← print_char_cursor#18
Coalesced (already) [126] print_char_cursor#124 ← print_char_cursor#94
Coalesced (already) [131] print_char_cursor#122 ← print_char_cursor#2
Coalesced [134] print_byte::b#11 ← print_byte::b#1
Coalesced (already) [135] print_char_cursor#128 ← print_char_cursor#99
Coalesced [138] print_byte::b#12 ← print_byte::b#2
Coalesced (already) [139] print_char_cursor#129 ← print_char_cursor#18
Coalesced (already) [144] print_char_cursor#138 ← print_char_cursor#2
Coalesced [146] print_sbyte::b#9 ← print_sbyte::b#1
Coalesced (already) [149] print_char_cursor#127 ← print_char_cursor#18
Coalesced (already) [153] print_char_cursor#137 ← print_char_cursor#2
Coalesced [156] print_sbyte::b#8 ← print_sbyte::b#0
Coalesced [165] mul8su::m#4 ← mul8su::m#1
Coalesced [168] mul8su::m#5 ← mul8su::m#0
Coalesced [170] mul8u::a#10 ← mul8u::a#6
Coalesced [171] mul8u::mb#7 ← mul8u::mb#0
Coalesced [179] mul8u::res#9 ← mul8u::res#1
Coalesced [183] mul8u::a#11 ← mul8u::a#0
Coalesced [184] mul8u::res#7 ← mul8u::res#6
Coalesced [185] mul8u::mb#8 ← mul8u::mb#1
Coalesced (already) [186] mul8u::res#8 ← mul8u::res#2
Coalesced [189] sin8s::x#9 ← sin8s::x#0
Coalesced [193] sin8s::x#11 ← sin8s::x#1
Coalesced [199] mulu8_sel::v1#10 ← mulu8_sel::v1#0
Coalesced [200] mulu8_sel::v2#9 ← mulu8_sel::v2#0
Coalesced [206] mulu8_sel::v1#6 ← mulu8_sel::v1#1
Coalesced [207] mulu8_sel::v2#6 ← mulu8_sel::v2#1
Coalesced [212] mulu8_sel::v1#7 ← mulu8_sel::v1#2
Coalesced [219] mulu8_sel::v1#8 ← mulu8_sel::v1#3
Coalesced [220] mulu8_sel::v2#7 ← mulu8_sel::v2#3
Coalesced [226] mulu8_sel::v1#9 ← mulu8_sel::v1#4
Coalesced [227] mulu8_sel::v2#8 ← mulu8_sel::v2#4
Coalesced [235] sin8s::usinx#9 ← sin8s::usinx#2
Coalesced [239] sin8s::return#6 ← sin8s::sinx#1
Coalesced [243] sin8s::usinx#8 ← sin8s::usinx#1
Coalesced [244] sin8s::x#10 ← sin8s::x#4
Coalesced [245] sin8s::x#8 ← sin8s::x#2
Coalesced [249] mul8u::mb#6 ← mul8u::b#1
Coalesced [250] mul8u::a#9 ← mul8u::a#2
Coalesced [269] divr16u::rem#12 ← divr16u::rem#1
Coalesced [276] divr16u::rem#14 ← divr16u::rem#2
Coalesced [277] divr16u::return#6 ← divr16u::quotient#2
Coalesced [283] divr16u::rem#10 ← divr16u::rem#9
Coalesced [284] divr16u::dividend#8 ← divr16u::dividend#0
Coalesced [285] divr16u::quotient#9 ← divr16u::return#0
Coalesced [286] divr16u::i#7 ← divr16u::i#1
Coalesced [287] divr16u::rem#13 ← divr16u::rem#5
Coalesced [288] divr16u::return#5 ← divr16u::quotient#1
Coalesced [289] divr16u::rem#11 ← divr16u::rem#0
Coalesced [297] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 27 phi equivalence classes
Culled Empty Block (label) @13
Culled Empty Block (label) @20
Culled Empty Block (label) @32
Culled Empty Block (label) @42
Culled Empty Block (label) main::@2
Culled Empty Block (label) sin8u_table::@14
Culled Empty Block (label) sin8u_table::@26
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_sword::@3
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_sbyte::@6
Culled Empty Block (label) print_sbyte::@7
Culled Empty Block (label) mul8su::@5
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) mul8u::@10
Culled Empty Block (label) sin8s::@17
Culled Empty Block (label) sin8s::@16
Culled Empty Block (label) sin8s::@15
Culled Empty Block (label) divr16u::@6
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) print_cls::@3
Renumbering block @41 to @1
Renumbering block div16u::@2 to div16u::@1
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@7 to mul8u::@4
Renumbering block mul8su::@4 to mul8su::@3
Renumbering block sin8s::@10 to sin8s::@9
Renumbering block sin8s::@11 to sin8s::@10
Renumbering block sin8s::@12 to sin8s::@11
Renumbering block sin8s::@13 to sin8s::@12
Renumbering block sin8s::@14 to sin8s::@13
Renumbering block sin8s::@18 to sin8s::@14
Renumbering block mulu8_sel::@2 to mulu8_sel::@1
Renumbering block print_sword::@4 to print_sword::@3
Renumbering block print_sword::@5 to print_sword::@4
Renumbering block print_sbyte::@5 to print_sbyte::@4
Renumbering block sin8u_table::@3 to sin8u_table::@2
Renumbering block sin8u_table::@4 to sin8u_table::@3
Renumbering block sin8u_table::@5 to sin8u_table::@4
Renumbering block sin8u_table::@6 to sin8u_table::@5
Renumbering block sin8u_table::@7 to sin8u_table::@6
Renumbering block sin8u_table::@8 to sin8u_table::@7
Renumbering block sin8u_table::@9 to sin8u_table::@8
Renumbering block sin8u_table::@10 to sin8u_table::@9
Renumbering block sin8u_table::@11 to sin8u_table::@10
Renumbering block sin8u_table::@12 to sin8u_table::@11
Renumbering block sin8u_table::@13 to sin8u_table::@12
Renumbering block sin8u_table::@15 to sin8u_table::@13
Renumbering block sin8u_table::@16 to sin8u_table::@14
Renumbering block sin8u_table::@17 to sin8u_table::@15
Renumbering block sin8u_table::@18 to sin8u_table::@16
Renumbering block sin8u_table::@19 to sin8u_table::@17
Renumbering block sin8u_table::@20 to sin8u_table::@18
Renumbering block sin8u_table::@21 to sin8u_table::@19
Renumbering block sin8u_table::@22 to sin8u_table::@20
Renumbering block sin8u_table::@23 to sin8u_table::@21
Renumbering block sin8u_table::@24 to sin8u_table::@22
Renumbering block sin8u_table::@25 to sin8u_table::@23
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of sin8u_table
Adding NOP phi() at start of sin8u_table::@4
Adding NOP phi() at start of sin8u_table::@5
Adding NOP phi() at start of sin8u_table::@6
Adding NOP phi() at start of sin8u_table::@7
Adding NOP phi() at start of sin8u_table::@8
Adding NOP phi() at start of sin8u_table::@9
Adding NOP phi() at start of sin8u_table::@10
Adding NOP phi() at start of sin8u_table::@11
Adding NOP phi() at start of sin8u_table::@12
Adding NOP phi() at start of sin8u_table::@16
Adding NOP phi() at start of sin8u_table::@18
Adding NOP phi() at start of sin8u_table::@19
Adding NOP phi() at start of sin8u_table::@20
Adding NOP phi() at start of sin8u_table::@22
Adding NOP phi() at start of print_sword::@2
Adding NOP phi() at start of print_sbyte::@3
Adding NOP phi() at start of print_sbyte::@1
Adding NOP phi() at start of div16u
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call sin8u_table 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return
sin8u_table: scope:[sin8u_table]  from main::@1
  [9] phi()
  [10] call div16u 
  [11] (word) div16u::return#2 ← (word) div16u::return#0
  to:sin8u_table::@2
sin8u_table::@2: scope:[sin8u_table]  from sin8u_table
  [12] (word) sin8u_table::step#0 ← (word) div16u::return#2
  [13] call print_str 
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table::@2
  [14] (word) print_word::w#1 ← (word) sin8u_table::step#0
  [15] call print_word 
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  [16] phi()
  [17] call print_str 
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  [18] phi()
  [19] call print_byte 
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  [20] phi()
  [21] call print_str 
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  [22] phi()
  [23] call print_byte 
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  [24] phi()
  [25] call print_str 
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  [26] phi()
  [27] call print_byte 
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  [28] phi()
  [29] call print_str 
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  [30] phi()
  [31] call print_byte 
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  [32] phi()
  [33] call print_ln 
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@12 sin8u_table::@23
  [34] (word) sin8u_table::i#10 ← phi( sin8u_table::@12/(byte) 0 sin8u_table::@23/(word) sin8u_table::i#1 )
  [34] (byte*) sin8u_table::sintab#2 ← phi( sin8u_table::@12/(const byte[$14]) main::sintab#0 sin8u_table::@23/(byte*) sin8u_table::sintab#1 )
  [34] (word) sin8u_table::x#10 ← phi( sin8u_table::@12/(byte) 0 sin8u_table::@23/(word) sin8u_table::x#1 )
  [35] (word) sin8s::x#2 ← (word) sin8u_table::x#10
  [36] call sin8s 
  [37] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@1
  [38] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2
  [39] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0
  [40] call mul8su 
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@13
  [41] (byte~) sin8u_table::$21 ← > (signed word)(word) mul8su::m#2
  [42] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$21
  [43] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0
  [44] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2
  [45] (byte*~) print_char_cursor#113 ← (byte*) print_line_cursor#1
  [46] call print_str 
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@14
  [47] (word) print_word::w#2 ← (word) sin8u_table::x#10
  [48] call print_word 
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  [49] phi()
  [50] call print_str 
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  [51] (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#0
  [52] call print_sbyte 
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  [53] phi()
  [54] call print_str 
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  [55] phi()
  [56] call print_sword 
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  [57] phi()
  [58] call print_str 
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  [59] (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#0
  [60] call print_byte 
  to:sin8u_table::@22
sin8u_table::@22: scope:[sin8u_table]  from sin8u_table::@21
  [61] phi()
  [62] call print_ln 
  to:sin8u_table::@23
sin8u_table::@23: scope:[sin8u_table]  from sin8u_table::@22
  [63] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0
  [64] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10
  [65] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1
  to:sin8u_table::@return
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@23
  [66] return 
  to:@return
print_ln: scope:[print_ln]  from sin8u_table::@12 sin8u_table::@22
  [67] (byte*) print_line_cursor#23 ← phi( sin8u_table::@12/(byte*) 1024 sin8u_table::@22/(byte*) print_line_cursor#1 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [68] (byte*) print_line_cursor#12 ← phi( print_ln/(byte*) print_line_cursor#23 print_ln::@1/(byte*) print_line_cursor#1 )
  [69] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28
  [70] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#18) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [71] return 
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@2 print_word print_word::@1 sin8u_table::@11 sin8u_table::@21 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  [72] (byte*) print_char_cursor#100 ← phi( print_sbyte::@2/(byte*) print_char_cursor#18 print_word/(byte*) print_char_cursor#99 print_word::@1/(byte*) print_char_cursor#18 sin8u_table::@9/(byte*) print_char_cursor#2 sin8u_table::@11/(byte*) print_char_cursor#2 sin8u_table::@21/(byte*) print_char_cursor#2 sin8u_table::@5/(byte*) print_char_cursor#2 sin8u_table::@7/(byte*) print_char_cursor#2 )
  [72] (byte) print_byte::b#8 ← phi( print_sbyte::@2/(byte~) print_byte::b#10 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 sin8u_table::@9/(const byte) sin8u_table::amplitude#0 sin8u_table::@11/(const byte) sin8u_table::mid#0 sin8u_table::@21/(byte) print_byte::b#7 sin8u_table::@5/(const byte) sin8u_table::min#0 sin8u_table::@7/(const byte) sin8u_table::max#0 )
  [73] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4
  [74] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [75] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [76] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f
  [77] (byte) print_char::ch#4 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [78] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [79] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3 print_sword::@2
  [80] (byte*) print_char_cursor#64 ← phi( print_byte/(byte*) print_char_cursor#100 print_byte::@1/(byte*) print_char_cursor#18 print_sbyte::@1/(byte*) print_char_cursor#2 print_sbyte::@3/(byte*) print_char_cursor#2 print_sword::@2/(byte*) print_char_cursor#2 )
  [80] (byte) print_char::ch#5 ← phi( print_byte/(byte) print_char::ch#3 print_byte::@1/(byte) print_char::ch#4 print_sbyte::@1/(byte) '-' print_sbyte::@3/(byte) ' ' print_sword::@2/(byte) '-' )
  [81] *((byte*) print_char_cursor#64) ← (byte) print_char::ch#5
  [82] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#64
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [83] return 
  to:@return
print_str: scope:[print_str]  from sin8u_table::@10 sin8u_table::@14 sin8u_table::@16 sin8u_table::@18 sin8u_table::@2 sin8u_table::@20 sin8u_table::@4 sin8u_table::@6 sin8u_table::@8
  [84] (byte*) print_char_cursor#105 ← phi( sin8u_table::@10/(byte*) print_char_cursor#18 sin8u_table::@14/(byte*~) print_char_cursor#113 sin8u_table::@16/(byte*) print_char_cursor#18 sin8u_table::@18/(byte*) print_char_cursor#18 sin8u_table::@20/(byte*) print_char_cursor#18 sin8u_table::@2/(byte*) 1024 sin8u_table::@4/(byte*) print_char_cursor#18 sin8u_table::@6/(byte*) print_char_cursor#18 sin8u_table::@8/(byte*) print_char_cursor#18 )
  [84] (byte*) print_str::str#12 ← phi( sin8u_table::@10/(const string) sin8u_table::str4 sin8u_table::@14/(const string) sin8u_table::str5 sin8u_table::@16/(const string) sin8u_table::str6 sin8u_table::@18/(const string) sin8u_table::str7 sin8u_table::@20/(const string) sin8u_table::str8 sin8u_table::@2/(const string) sin8u_table::str sin8u_table::@4/(const string) sin8u_table::str1 sin8u_table::@6/(const string) sin8u_table::str2 sin8u_table::@8/(const string) sin8u_table::str3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [85] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#105 print_str::@2/(byte*) print_char_cursor#1 )
  [85] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@2/(byte*) print_str::str#0 )
  [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [87] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10)
  [89] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [90] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10
  to:print_str::@1
print_sword: scope:[print_sword]  from sin8u_table::@19
  [91] if((signed word)(word) mul8su::m#2>=(signed byte) 0) goto print_sword::@4
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [92] phi()
  [93] call print_char 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@2
  [94] (signed word) print_sword::w#0 ← - (signed word)(word) mul8su::m#2
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword::@3 print_sword::@4
  [95] (byte*) print_char_cursor#94 ← phi( print_sword::@4/(byte*) print_char_cursor#2 print_sword::@3/(byte*) print_char_cursor#18 )
  [95] (signed word) print_sword::w#3 ← phi( print_sword::@4/(signed word~) print_sword::w#6 print_sword::@3/(signed word) print_sword::w#0 )
  [96] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3
  [97] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [98] return 
  to:@return
print_sword::@4: scope:[print_sword]  from print_sword
  [99] (signed word~) print_sword::w#6 ← (signed word)(word) mul8su::m#2
  to:print_sword::@1
print_word: scope:[print_word]  from print_sword::@1 sin8u_table::@15 sin8u_table::@3
  [100] (byte*) print_char_cursor#99 ← phi( print_sword::@1/(byte*) print_char_cursor#94 sin8u_table::@15/(byte*) print_char_cursor#2 sin8u_table::@3/(byte*) print_char_cursor#2 )
  [100] (word) print_word::w#3 ← phi( print_sword::@1/(word~) print_word::w#5 sin8u_table::@15/(word) print_word::w#2 sin8u_table::@3/(word) print_word::w#1 )
  [101] (byte) print_byte::b#1 ← > (word) print_word::w#3
  [102] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [103] (byte) print_byte::b#2 ← < (word) print_word::w#3
  [104] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [105] return 
  to:@return
print_sbyte: scope:[print_sbyte]  from sin8u_table::@17
  [106] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  [107] phi()
  [108] call print_char 
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@3 print_sbyte::@4
  [109] (signed byte) print_sbyte::b#4 ← phi( print_sbyte::@4/(signed byte) print_sbyte::b#0 print_sbyte::@3/(signed byte) print_sbyte::b#1 )
  [110] (byte~) print_byte::b#10 ← (byte)(signed byte) print_sbyte::b#4
  [111] call print_byte 
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@2
  [112] return 
  to:@return
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  [113] phi()
  [114] call print_char 
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@1
  [115] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1
  to:print_sbyte::@2
mul8su: scope:[mul8su]  from sin8u_table::@13
  [116] (byte~) mul8u::a#8 ← (byte)(signed byte) mul8su::a#0
  [117] call mul8u 
  [118] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mul8su::@3
mul8su::@3: scope:[mul8su]  from mul8su
  [119] (word) mul8su::m#0 ← (word) mul8u::return#2
  [120] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1
  to:mul8su::@2
mul8su::@2: scope:[mul8su]  from mul8su::@3
  [121] (byte~) mul8su::$7 ← > (word) mul8su::m#0
  [122] (byte~) mul8su::$10 ← (byte~) mul8su::$7 - (const byte) mul8su::b#0
  [123] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$10
  to:mul8su::@1
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@3
  [124] (word) mul8su::m#2 ← phi( mul8su::@2/(word) mul8su::m#1 mul8su::@3/(word) mul8su::m#0 )
  to:mul8su::@return
mul8su::@return: scope:[mul8su]  from mul8su::@1
  [125] return 
  to:@return
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  [126] (byte) mul8u::a#6 ← phi( mul8su/(byte~) mul8u::a#8 mulu8_sel/(byte) mul8u::a#2 )
  [126] (word) mul8u::mb#0 ← phi( mul8su/(const byte) mul8su::b#0 mulu8_sel/(byte) mul8u::b#1 )
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [127] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [127] (word) mul8u::res#2 ← phi( mul8u/(byte) 0 mul8u::@3/(word) mul8u::res#6 )
  [127] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@3/(byte) mul8u::a#0 )
  [128] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [129] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [130] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
  [131] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [132] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [133] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [134] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1
  [135] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1
sin8s: scope:[sin8s]  from sin8u_table::@1
  [136] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [137] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [138] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) 0 sin8s::@5/(byte) 1 )
  [138] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#2 sin8s::@5/(word) sin8s::x#0 )
  [139] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [140] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [141] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#1 )
  [142] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3
  [143] (byte) sin8s::x1#0 ← > (word~) sin8s::$4
  [144] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  [145] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  [146] call mulu8_sel 
  [147] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [148] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  [149] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  [150] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0
  [151] call mulu8_sel 
  [152] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [153] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1
  [154] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  [155] call mulu8_sel 
  [156] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [157] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  [158] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0
  [159] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0
  [160] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0
  [161] call mulu8_sel 
  [162] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [163] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  [164] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  [165] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0
  [166] call mulu8_sel 
  [167] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [168] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  [169] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4
  [170] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0
  [171] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [172] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [173] (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  [174] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [175] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [176] (signed byte) sin8s::return#0 ← phi( sin8s::@14/(signed byte~) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [177] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [178] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [179] (byte) mulu8_sel::select#5 ← phi( sin8s::@9/(byte) 1 sin8s::@10/(byte) 1 sin8s::@11/(byte) 0 sin8s::@12/(byte) 0 sin8s::@2/(byte) 0 )
  [179] (byte) mulu8_sel::v2#5 ← phi( sin8s::@9/(byte) mulu8_sel::v2#1 sin8s::@10/(const byte) sin8s::DIV_6#0 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  [179] (byte) mulu8_sel::v1#5 ← phi( sin8s::@9/(byte) mulu8_sel::v1#1 sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  [180] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  [181] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5
  [182] call mul8u 
  [183] (word) mul8u::return#3 ← (word) mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [184] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
  [185] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  [186] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [187] return 
  to:@return
div16u: scope:[div16u]  from sin8u_table
  [188] phi()
  [189] call divr16u 
  [190] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [191] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [192] return 
  to:@return
divr16u: scope:[divr16u]  from div16u
  [193] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [194] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [194] (word) divr16u::quotient#3 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::return#0 )
  [194] (word) divr16u::dividend#2 ← phi( divr16u/(const word) PI2_u4f12#0 divr16u::@3/(word) divr16u::dividend#0 )
  [194] (word) divr16u::rem#4 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::rem#9 )
  [195] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1
  [196] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [197] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [198] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [199] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [200] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [201] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1
  [202] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [203] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [204] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [205] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [206] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [206] (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [207] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [208] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [209] return 
  to:@return
print_cls: scope:[print_cls]  from main
  [210] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [211] (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) 1024 print_cls::@1/(byte*) print_cls::sc#1 )
  [212] *((byte*) print_cls::sc#2) ← (byte) ' '
  [213] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [214] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [215] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(word) PI2_u4f12
(word) PI_HALF_u4f12
(word) PI_u4f12
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 1.3333333333333333
(word) div16u::return#2 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 22.0
(byte~) divr16u::$2 22.0
(word) divr16u::dividend
(word) divr16u::dividend#0 2.75
(word) divr16u::dividend#2 4.714285714285714
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 16.5
(byte) divr16u::i#2 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 16.5
(word) divr16u::quotient#2 11.0
(word) divr16u::quotient#3 2.75
(word) divr16u::rem
(word) divr16u::rem#0 8.25
(word) divr16u::rem#1 22.0
(word) divr16u::rem#2 22.0
(word) divr16u::rem#4 22.0
(word) divr16u::rem#5 11.0
(word) divr16u::rem#9 11.0
(word) divr16u::return
(word) divr16u::return#0 7.000000000000001
(word) divr16u::return#2 4.0
(void()) main()
(byte[$14]) main::sintab
(word) main::tabsize
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$10 4.0
(byte~) mul8su::$7 4.0
(signed byte) mul8su::a
(signed byte) mul8su::a#0 2.6
(byte) mul8su::b
(word) mul8su::m
(word) mul8su::m#0 2.0
(word) mul8su::m#1 4.0
(word) mul8su::m#2 0.19047619047619047
(signed word) mul8su::return
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 202.0
(byte) mul8u::a
(byte) mul8u::a#0 101.0
(byte) mul8u::a#2 2.0
(byte) mul8u::a#3 67.66666666666666
(byte) mul8u::a#6 6.0
(byte~) mul8u::a#8 4.0
(byte) mul8u::b
(byte) mul8u::b#1 4.0
(word) mul8u::mb
(word) mul8u::mb#0 4.0
(word) mul8u::mb#1 202.0
(word) mul8u::mb#2 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 202.0
(word) mul8u::res#2 43.85714285714286
(word) mul8u::res#6 101.0
(word) mul8u::return
(word) mul8u::return#2 4.0
(word) mul8u::return#3 4.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 4.0
(word~) mulu8_sel::$1 4.0
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 4.0
(byte) mulu8_sel::return#1 4.0
(byte) mulu8_sel::return#10 4.0
(byte) mulu8_sel::return#11 4.0
(byte) mulu8_sel::return#12 1.714285714285714
(byte) mulu8_sel::return#2 4.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 0.3333333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 2.0
(byte) mulu8_sel::v1#1 2.0
(byte) mulu8_sel::v1#2 4.0
(byte) mulu8_sel::v1#3 2.0
(byte) mulu8_sel::v1#4 2.0
(byte) mulu8_sel::v1#5 12.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 4.0
(byte) mulu8_sel::v2#1 4.0
(byte) mulu8_sel::v2#3 4.0
(byte) mulu8_sel::v2#4 4.0
(byte) mulu8_sel::v2#5 5.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#1 4.0
(byte~) print_byte::b#10 4.0
(byte) print_byte::b#2 4.0
(byte) print_byte::b#7 22.0
(byte) print_byte::b#8 5.25
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#3 4.0
(byte) print_char::ch#4 4.0
(byte) print_char::ch#5 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*) print_char_cursor#100 9.0
(byte*) print_char_cursor#105 54.0
(byte*~) print_char_cursor#113 22.0
(byte*) print_char_cursor#18 3.454545454545454
(byte*) print_char_cursor#2 12.321428571428571
(byte*) print_char_cursor#64 7.0
(byte*) print_char_cursor#94 3.0
(byte*) print_char_cursor#99 8.5
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 9.027777777777777
(byte*) print_line_cursor#12 204.0
(byte*) print_line_cursor#23 13.0
(void()) print_ln()
(void()) print_sbyte((signed byte) print_sbyte::b)
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 4.0
(signed byte) print_sbyte::b#1 2.8333333333333335
(signed byte) print_sbyte::b#4 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#10 101.5
(byte*) print_str::str#12 2.0
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#3 4.0
(signed word~) print_sword::w#6 4.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#1 4.0
(word) print_word::w#2 22.0
(word) print_word::w#3 6.333333333333334
(word~) print_word::w#5 4.0
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 4.0
(byte) sin8s::DIV_6
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 0.05555555555555555
(signed byte) sin8s::return
(signed byte) sin8s::return#0 5.0
(signed byte) sin8s::return#2 22.0
(signed byte~) sin8s::return#5 4.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 4.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 0.3333333333333333
(byte) sin8s::usinx#1 4.0
(byte) sin8s::usinx#2 4.0
(byte) sin8s::usinx#4 2.0
(word) sin8s::x
(word) sin8s::x#0 4.0
(word) sin8s::x#1 4.0
(word) sin8s::x#2 8.5
(word) sin8s::x#4 5.0
(word) sin8s::x#6 6.0
(byte) sin8s::x1
(byte) sin8s::x1#0 0.6363636363636365
(byte) sin8s::x2
(byte) sin8s::x2#0 4.0
(byte) sin8s::x3
(byte) sin8s::x3#0 1.0
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 4.0
(byte) sin8s::x4
(byte) sin8s::x4#0 4.0
(byte) sin8s::x5
(byte) sin8s::x5#0 4.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 4.0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte~) sin8u_table::$21 22.0
(byte) sin8u_table::amplitude
(word) sin8u_table::i
(word) sin8u_table::i#1 16.5
(word) sin8u_table::i#10 0.7333333333333333
(byte) sin8u_table::max
(byte) sin8u_table::mid
(byte) sin8u_table::min
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#1 1.0
(byte*) sin8u_table::sintab#2 3.3000000000000003
(signed byte) sin8u_table::sinx
(signed byte) sin8u_table::sinx#0 2.5384615384615383
(signed word) sin8u_table::sinx_sc
(byte) sin8u_table::sinx_tr
(byte) sin8u_table::sinx_tr#0 1.9411764705882355
(word) sin8u_table::step
(word) sin8u_table::step#0 0.2777777777777778
(word) sin8u_table::sum
(word) sin8u_table::tabsize
(word) sin8u_table::x
(word) sin8u_table::x#1 7.333333333333333
(word) sin8u_table::x#10 1.5172413793103448

Not consolidating phi with different size mul8u::mb#0 mul8u::b#1
Initial phi equivalence classes
[ sin8u_table::x#10 sin8u_table::x#1 ]
[ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
[ sin8u_table::i#10 sin8u_table::i#1 ]
[ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
[ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
[ print_char::ch#5 print_char::ch#3 print_char::ch#4 ]
[ print_str::str#10 print_str::str#12 print_str::str#0 ]
[ print_sword::w#3 print_sword::w#6 print_sword::w#0 ]
[ print_char_cursor#94 print_char_cursor#105 print_char_cursor#64 print_char_cursor#100 print_char_cursor#18 print_char_cursor#99 print_char_cursor#2 print_char_cursor#113 print_char_cursor#1 ]
[ print_word::w#3 print_word::w#5 print_word::w#2 print_word::w#1 ]
[ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
[ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
[ mul8u::b#1 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
[ mulu8_sel::select#5 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable div16u::return#2 to zero page equivalence class [ div16u::return#2 ]
Added variable sin8u_table::step#0 to zero page equivalence class [ sin8u_table::step#0 ]
Added variable sin8s::return#2 to zero page equivalence class [ sin8s::return#2 ]
Added variable sin8u_table::sinx#0 to zero page equivalence class [ sin8u_table::sinx#0 ]
Added variable mul8su::a#0 to zero page equivalence class [ mul8su::a#0 ]
Added variable sin8u_table::$21 to zero page equivalence class [ sin8u_table::$21 ]
Added variable sin8u_table::sinx_tr#0 to zero page equivalence class [ sin8u_table::sinx_tr#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable mul8u::return#2 to zero page equivalence class [ mul8u::return#2 ]
Added variable mul8su::$7 to zero page equivalence class [ mul8su::$7 ]
Added variable mul8su::$10 to zero page equivalence class [ mul8su::$10 ]
Added variable mul8u::$1 to zero page equivalence class [ mul8u::$1 ]
Added variable sin8s::$4 to zero page equivalence class [ sin8s::$4 ]
Added variable sin8s::x1#0 to zero page equivalence class [ sin8s::x1#0 ]
Added variable mulu8_sel::return#0 to zero page equivalence class [ mulu8_sel::return#0 ]
Added variable sin8s::x2#0 to zero page equivalence class [ sin8s::x2#0 ]
Added variable mulu8_sel::return#1 to zero page equivalence class [ mulu8_sel::return#1 ]
Added variable sin8s::x3#0 to zero page equivalence class [ sin8s::x3#0 ]
Added variable mulu8_sel::return#2 to zero page equivalence class [ mulu8_sel::return#2 ]
Added variable sin8s::x3_6#0 to zero page equivalence class [ sin8s::x3_6#0 ]
Added variable sin8s::usinx#0 to zero page equivalence class [ sin8s::usinx#0 ]
Added variable mulu8_sel::return#10 to zero page equivalence class [ mulu8_sel::return#10 ]
Added variable sin8s::x4#0 to zero page equivalence class [ sin8s::x4#0 ]
Added variable mulu8_sel::return#11 to zero page equivalence class [ mulu8_sel::return#11 ]
Added variable sin8s::x5#0 to zero page equivalence class [ sin8s::x5#0 ]
Added variable sin8s::x5_128#0 to zero page equivalence class [ sin8s::x5_128#0 ]
Added variable mul8u::return#3 to zero page equivalence class [ mul8u::return#3 ]
Added variable mulu8_sel::$0 to zero page equivalence class [ mulu8_sel::$0 ]
Added variable mulu8_sel::$1 to zero page equivalence class [ mulu8_sel::$1 ]
Added variable mulu8_sel::return#12 to zero page equivalence class [ mulu8_sel::return#12 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to zero page equivalence class [ div16u::return#0 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Complete equivalence classes
[ sin8u_table::x#10 sin8u_table::x#1 ]
[ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
[ sin8u_table::i#10 sin8u_table::i#1 ]
[ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
[ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
[ print_char::ch#5 print_char::ch#3 print_char::ch#4 ]
[ print_str::str#10 print_str::str#12 print_str::str#0 ]
[ print_sword::w#3 print_sword::w#6 print_sword::w#0 ]
[ print_char_cursor#94 print_char_cursor#105 print_char_cursor#64 print_char_cursor#100 print_char_cursor#18 print_char_cursor#99 print_char_cursor#2 print_char_cursor#113 print_char_cursor#1 ]
[ print_word::w#3 print_word::w#5 print_word::w#2 print_word::w#1 ]
[ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
[ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
[ mul8u::b#1 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
[ mulu8_sel::select#5 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ div16u::return#2 ]
[ sin8u_table::step#0 ]
[ sin8s::return#2 ]
[ sin8u_table::sinx#0 ]
[ mul8su::a#0 ]
[ sin8u_table::$21 ]
[ sin8u_table::sinx_tr#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ mul8u::return#2 ]
[ mul8su::$7 ]
[ mul8su::$10 ]
[ mul8u::$1 ]
[ sin8s::$4 ]
[ sin8s::x1#0 ]
[ mulu8_sel::return#0 ]
[ sin8s::x2#0 ]
[ mulu8_sel::return#1 ]
[ sin8s::x3#0 ]
[ mulu8_sel::return#2 ]
[ sin8s::x3_6#0 ]
[ sin8s::usinx#0 ]
[ mulu8_sel::return#10 ]
[ sin8s::x4#0 ]
[ mulu8_sel::return#11 ]
[ sin8s::x5#0 ]
[ sin8s::x5_128#0 ]
[ mul8u::return#3 ]
[ mulu8_sel::$0 ]
[ mulu8_sel::$1 ]
[ mulu8_sel::return#12 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
Allocated zp ZP_WORD:2 [ sin8u_table::x#10 sin8u_table::x#1 ]
Allocated zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
Allocated zp ZP_WORD:6 [ sin8u_table::i#10 sin8u_table::i#1 ]
Allocated zp ZP_WORD:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
Allocated zp ZP_BYTE:10 [ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
Allocated zp ZP_BYTE:11 [ print_char::ch#5 print_char::ch#3 print_char::ch#4 ]
Allocated zp ZP_WORD:12 [ print_str::str#10 print_str::str#12 print_str::str#0 ]
Allocated zp ZP_WORD:14 [ print_sword::w#3 print_sword::w#6 print_sword::w#0 ]
Allocated zp ZP_WORD:16 [ print_char_cursor#94 print_char_cursor#105 print_char_cursor#64 print_char_cursor#100 print_char_cursor#18 print_char_cursor#99 print_char_cursor#2 print_char_cursor#113 print_char_cursor#1 ]
Allocated zp ZP_WORD:18 [ print_word::w#3 print_word::w#5 print_word::w#2 print_word::w#1 ]
Allocated zp ZP_BYTE:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Allocated zp ZP_WORD:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ]
Allocated zp ZP_BYTE:23 [ mul8u::b#1 ]
Allocated zp ZP_BYTE:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ]
Allocated zp ZP_WORD:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp ZP_WORD:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp ZP_BYTE:29 [ sin8s::isUpper#10 ]
Allocated zp ZP_WORD:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ]
Allocated zp ZP_BYTE:32 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
Allocated zp ZP_BYTE:33 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
Allocated zp ZP_BYTE:34 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
Allocated zp ZP_BYTE:35 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
Allocated zp ZP_BYTE:36 [ mulu8_sel::select#5 ]
Allocated zp ZP_WORD:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp ZP_WORD:39 [ divr16u::dividend#2 divr16u::dividend#0 ]
Allocated zp ZP_WORD:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:43 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_WORD:44 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_WORD:46 [ div16u::return#2 ]
Allocated zp ZP_WORD:48 [ sin8u_table::step#0 ]
Allocated zp ZP_BYTE:50 [ sin8s::return#2 ]
Allocated zp ZP_BYTE:51 [ sin8u_table::sinx#0 ]
Allocated zp ZP_BYTE:52 [ mul8su::a#0 ]
Allocated zp ZP_BYTE:53 [ sin8u_table::$21 ]
Allocated zp ZP_BYTE:54 [ sin8u_table::sinx_tr#0 ]
Allocated zp ZP_BYTE:55 [ print_byte::$0 ]
Allocated zp ZP_BYTE:56 [ print_byte::$2 ]
Allocated zp ZP_WORD:57 [ mul8u::return#2 ]
Allocated zp ZP_BYTE:59 [ mul8su::$7 ]
Allocated zp ZP_BYTE:60 [ mul8su::$10 ]
Allocated zp ZP_BYTE:61 [ mul8u::$1 ]
Allocated zp ZP_WORD:62 [ sin8s::$4 ]
Allocated zp ZP_BYTE:64 [ sin8s::x1#0 ]
Allocated zp ZP_BYTE:65 [ mulu8_sel::return#0 ]
Allocated zp ZP_BYTE:66 [ sin8s::x2#0 ]
Allocated zp ZP_BYTE:67 [ mulu8_sel::return#1 ]
Allocated zp ZP_BYTE:68 [ sin8s::x3#0 ]
Allocated zp ZP_BYTE:69 [ mulu8_sel::return#2 ]
Allocated zp ZP_BYTE:70 [ sin8s::x3_6#0 ]
Allocated zp ZP_BYTE:71 [ sin8s::usinx#0 ]
Allocated zp ZP_BYTE:72 [ mulu8_sel::return#10 ]
Allocated zp ZP_BYTE:73 [ sin8s::x4#0 ]
Allocated zp ZP_BYTE:74 [ mulu8_sel::return#11 ]
Allocated zp ZP_BYTE:75 [ sin8s::x5#0 ]
Allocated zp ZP_BYTE:76 [ sin8s::x5_128#0 ]
Allocated zp ZP_WORD:77 [ mul8u::return#3 ]
Allocated zp ZP_WORD:79 [ mulu8_sel::$0 ]
Allocated zp ZP_WORD:81 [ mulu8_sel::$1 ]
Allocated zp ZP_BYTE:83 [ mulu8_sel::return#12 ]
Allocated zp ZP_WORD:84 [ divr16u::return#2 ]
Allocated zp ZP_WORD:86 [ div16u::return#0 ]
Allocated zp ZP_BYTE:88 [ divr16u::$1 ]
Allocated zp ZP_BYTE:89 [ divr16u::$2 ]

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_char_cursor = $10
  .label print_line_cursor = 8
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label tabsize = $14
  //SEG11 [5] call print_cls 
  //SEG12 [210] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [7] call sin8u_table 
  //SEG16 [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
  sin8u_table_from_b1:
    jsr sin8u_table
    jmp breturn
  //SEG17 main::@return
  breturn:
  //SEG18 [8] return 
    rts
    sintab: .fill $14, 0
}
//SEG19 sin8u_table
// Generate unsigned byte sinus table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sinus points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zeropage(4) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .label amplitude = max-min
    .const sum = min+max
    .const mid = sum/2+1
    .label _21 = $35
    .label step = $30
    .label sinx = $33
    .label sinx_tr = $36
    .label sintab = 4
    .label x = 2
    .label i = 6
  //SEG20 [10] call div16u 
  //SEG21 [188] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
  div16u_from_sin8u_table:
    jsr div16u
  //SEG22 [11] (word) div16u::return#2 ← (word) div16u::return#0 -- vwuz1=vwuz2 
    lda div16u.return
    sta div16u.return_2
    lda div16u.return+1
    sta div16u.return_2+1
    jmp b2
  //SEG23 sin8u_table::@2
  b2:
  //SEG24 [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 -- vwuz1=vwuz2 
    lda div16u.return_2
    sta step
    lda div16u.return_2+1
    sta step+1
  //SEG25 [13] call print_str 
  //SEG26 [84] phi from sin8u_table::@2 to print_str [phi:sin8u_table::@2->print_str]
  print_str_from_b2:
  //SEG27 [84] phi (byte*) print_char_cursor#105 = (byte*) 1024 [phi:sin8u_table::@2->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG28 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str [phi:sin8u_table::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b3
  //SEG29 sin8u_table::@3
  b3:
  //SEG30 [14] (word) print_word::w#1 ← (word) sin8u_table::step#0 -- vwuz1=vwuz2 
    lda step
    sta print_word.w
    lda step+1
    sta print_word.w+1
  //SEG31 [15] call print_word 
  //SEG32 [100] phi from sin8u_table::@3 to print_word [phi:sin8u_table::@3->print_word]
  print_word_from_b3:
  //SEG33 [100] phi (byte*) print_char_cursor#99 = (byte*) print_char_cursor#2 [phi:sin8u_table::@3->print_word#0] -- register_copy 
  //SEG34 [100] phi (word) print_word::w#3 = (word) print_word::w#1 [phi:sin8u_table::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG35 [16] phi from sin8u_table::@3 to sin8u_table::@4 [phi:sin8u_table::@3->sin8u_table::@4]
  b4_from_b3:
    jmp b4
  //SEG36 sin8u_table::@4
  b4:
  //SEG37 [17] call print_str 
  //SEG38 [84] phi from sin8u_table::@4 to print_str [phi:sin8u_table::@4->print_str]
  print_str_from_b4:
  //SEG39 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@4->print_str#0] -- register_copy 
  //SEG40 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str1 [phi:sin8u_table::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG41 [18] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  b5_from_b4:
    jmp b5
  //SEG42 sin8u_table::@5
  b5:
  //SEG43 [19] call print_byte 
  //SEG44 [72] phi from sin8u_table::@5 to print_byte [phi:sin8u_table::@5->print_byte]
  print_byte_from_b5:
  //SEG45 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@5->print_byte#0] -- register_copy 
  //SEG46 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@5->print_byte#1] -- vbuz1=vbuc1 
    lda #min
    sta print_byte.b
    jsr print_byte
  //SEG47 [20] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  b6_from_b5:
    jmp b6
  //SEG48 sin8u_table::@6
  b6:
  //SEG49 [21] call print_str 
  //SEG50 [84] phi from sin8u_table::@6 to print_str [phi:sin8u_table::@6->print_str]
  print_str_from_b6:
  //SEG51 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@6->print_str#0] -- register_copy 
  //SEG52 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str2 [phi:sin8u_table::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG53 [22] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  b7_from_b6:
    jmp b7
  //SEG54 sin8u_table::@7
  b7:
  //SEG55 [23] call print_byte 
  //SEG56 [72] phi from sin8u_table::@7 to print_byte [phi:sin8u_table::@7->print_byte]
  print_byte_from_b7:
  //SEG57 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@7->print_byte#0] -- register_copy 
  //SEG58 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@7->print_byte#1] -- vbuz1=vbuc1 
    lda #max
    sta print_byte.b
    jsr print_byte
  //SEG59 [24] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  b8_from_b7:
    jmp b8
  //SEG60 sin8u_table::@8
  b8:
  //SEG61 [25] call print_str 
  //SEG62 [84] phi from sin8u_table::@8 to print_str [phi:sin8u_table::@8->print_str]
  print_str_from_b8:
  //SEG63 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@8->print_str#0] -- register_copy 
  //SEG64 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str3 [phi:sin8u_table::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
  //SEG65 [26] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  b9_from_b8:
    jmp b9
  //SEG66 sin8u_table::@9
  b9:
  //SEG67 [27] call print_byte 
  //SEG68 [72] phi from sin8u_table::@9 to print_byte [phi:sin8u_table::@9->print_byte]
  print_byte_from_b9:
  //SEG69 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@9->print_byte#0] -- register_copy 
  //SEG70 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@9->print_byte#1] -- vbuz1=vbuc1 
    lda #amplitude
    sta print_byte.b
    jsr print_byte
  //SEG71 [28] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  b10_from_b9:
    jmp b10
  //SEG72 sin8u_table::@10
  b10:
  //SEG73 [29] call print_str 
  //SEG74 [84] phi from sin8u_table::@10 to print_str [phi:sin8u_table::@10->print_str]
  print_str_from_b10:
  //SEG75 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@10->print_str#0] -- register_copy 
  //SEG76 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str4 [phi:sin8u_table::@10->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
  //SEG77 [30] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  b11_from_b10:
    jmp b11
  //SEG78 sin8u_table::@11
  b11:
  //SEG79 [31] call print_byte 
  //SEG80 [72] phi from sin8u_table::@11 to print_byte [phi:sin8u_table::@11->print_byte]
  print_byte_from_b11:
  //SEG81 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@11->print_byte#0] -- register_copy 
  //SEG82 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@11->print_byte#1] -- vbuz1=vbuc1 
    lda #mid
    sta print_byte.b
    jsr print_byte
  //SEG83 [32] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  b12_from_b11:
    jmp b12
  //SEG84 sin8u_table::@12
  b12:
  //SEG85 [33] call print_ln 
  //SEG86 [67] phi from sin8u_table::@12 to print_ln [phi:sin8u_table::@12->print_ln]
  print_ln_from_b12:
  //SEG87 [67] phi (byte*) print_line_cursor#23 = (byte*) 1024 [phi:sin8u_table::@12->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
  //SEG88 [34] phi from sin8u_table::@12 to sin8u_table::@1 [phi:sin8u_table::@12->sin8u_table::@1]
  b1_from_b12:
  //SEG89 [34] phi (word) sin8u_table::i#10 = (byte) 0 [phi:sin8u_table::@12->sin8u_table::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG90 [34] phi (byte*) sin8u_table::sintab#2 = (const byte[$14]) main::sintab#0 [phi:sin8u_table::@12->sin8u_table::@1#1] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta sintab
    lda #>main.sintab
    sta sintab+1
  //SEG91 [34] phi (word) sin8u_table::x#10 = (byte) 0 [phi:sin8u_table::@12->sin8u_table::@1#2] -- vwuz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    jmp b1
  // u[4.12]
  //SEG92 [34] phi from sin8u_table::@23 to sin8u_table::@1 [phi:sin8u_table::@23->sin8u_table::@1]
  b1_from_b23:
  //SEG93 [34] phi (word) sin8u_table::i#10 = (word) sin8u_table::i#1 [phi:sin8u_table::@23->sin8u_table::@1#0] -- register_copy 
  //SEG94 [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@23->sin8u_table::@1#1] -- register_copy 
  //SEG95 [34] phi (word) sin8u_table::x#10 = (word) sin8u_table::x#1 [phi:sin8u_table::@23->sin8u_table::@1#2] -- register_copy 
    jmp b1
  //SEG96 sin8u_table::@1
  b1:
  //SEG97 [35] (word) sin8s::x#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda x
    sta sin8s.x
    lda x+1
    sta sin8s.x+1
  //SEG98 [36] call sin8s 
    jsr sin8s
  //SEG99 [37] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0 -- vbsz1=vbsz2 
    lda sin8s.return
    sta sin8s.return_2
    jmp b13
  //SEG100 sin8u_table::@13
  b13:
  //SEG101 [38] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2 -- vbsz1=vbsz2 
    lda sin8s.return_2
    sta sinx
  //SEG102 [39] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0 -- vbsz1=vbsz2 
    lda sinx
    sta mul8su.a
  //SEG103 [40] call mul8su 
    jsr mul8su
    jmp b14
  //SEG104 sin8u_table::@14
  b14:
  //SEG105 [41] (byte~) sin8u_table::$21 ← > (signed word)(word) mul8su::m#2 -- vbuz1=_hi_vwsz2 
    lda mul8su.m+1
    sta _21
  //SEG106 [42] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$21 -- vbuz1=vbuc1_plus_vbuz2 
    lax _21
    axs #-[mid]
    stx sinx_tr
  //SEG107 [43] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuz2 
    lda sinx_tr
    ldy #0
    sta (sintab),y
  //SEG108 [44] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc sintab
    bne !+
    inc sintab+1
  !:
  //SEG109 [45] (byte*~) print_char_cursor#113 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG110 [46] call print_str 
  //SEG111 [84] phi from sin8u_table::@14 to print_str [phi:sin8u_table::@14->print_str]
  print_str_from_b14:
  //SEG112 [84] phi (byte*) print_char_cursor#105 = (byte*~) print_char_cursor#113 [phi:sin8u_table::@14->print_str#0] -- register_copy 
  //SEG113 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str5 [phi:sin8u_table::@14->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta print_str.str
    lda #>str5
    sta print_str.str+1
    jsr print_str
    jmp b15
  //SEG114 sin8u_table::@15
  b15:
  //SEG115 [47] (word) print_word::w#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda x
    sta print_word.w
    lda x+1
    sta print_word.w+1
  //SEG116 [48] call print_word 
  //SEG117 [100] phi from sin8u_table::@15 to print_word [phi:sin8u_table::@15->print_word]
  print_word_from_b15:
  //SEG118 [100] phi (byte*) print_char_cursor#99 = (byte*) print_char_cursor#2 [phi:sin8u_table::@15->print_word#0] -- register_copy 
  //SEG119 [100] phi (word) print_word::w#3 = (word) print_word::w#2 [phi:sin8u_table::@15->print_word#1] -- register_copy 
    jsr print_word
  //SEG120 [49] phi from sin8u_table::@15 to sin8u_table::@16 [phi:sin8u_table::@15->sin8u_table::@16]
  b16_from_b15:
    jmp b16
  //SEG121 sin8u_table::@16
  b16:
  //SEG122 [50] call print_str 
  //SEG123 [84] phi from sin8u_table::@16 to print_str [phi:sin8u_table::@16->print_str]
  print_str_from_b16:
  //SEG124 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@16->print_str#0] -- register_copy 
  //SEG125 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str6 [phi:sin8u_table::@16->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta print_str.str
    lda #>str6
    sta print_str.str+1
    jsr print_str
    jmp b17
  //SEG126 sin8u_table::@17
  b17:
  //SEG127 [51] (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#0 -- vbsz1=vbsz2 
    lda sinx
    sta print_sbyte.b
  //SEG128 [52] call print_sbyte 
    jsr print_sbyte
  //SEG129 [53] phi from sin8u_table::@17 to sin8u_table::@18 [phi:sin8u_table::@17->sin8u_table::@18]
  b18_from_b17:
    jmp b18
  //SEG130 sin8u_table::@18
  b18:
  //SEG131 [54] call print_str 
  //SEG132 [84] phi from sin8u_table::@18 to print_str [phi:sin8u_table::@18->print_str]
  print_str_from_b18:
  //SEG133 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@18->print_str#0] -- register_copy 
  //SEG134 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str7 [phi:sin8u_table::@18->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta print_str.str
    lda #>str7
    sta print_str.str+1
    jsr print_str
  //SEG135 [55] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
  b19_from_b18:
    jmp b19
  //SEG136 sin8u_table::@19
  b19:
  //SEG137 [56] call print_sword 
    jsr print_sword
  //SEG138 [57] phi from sin8u_table::@19 to sin8u_table::@20 [phi:sin8u_table::@19->sin8u_table::@20]
  b20_from_b19:
    jmp b20
  //SEG139 sin8u_table::@20
  b20:
  //SEG140 [58] call print_str 
  //SEG141 [84] phi from sin8u_table::@20 to print_str [phi:sin8u_table::@20->print_str]
  print_str_from_b20:
  //SEG142 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@20->print_str#0] -- register_copy 
  //SEG143 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str8 [phi:sin8u_table::@20->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta print_str.str
    lda #>str8
    sta print_str.str+1
    jsr print_str
    jmp b21
  //SEG144 sin8u_table::@21
  b21:
  //SEG145 [59] (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#0 -- vbuz1=vbuz2 
    lda sinx_tr
    sta print_byte.b
  //SEG146 [60] call print_byte 
  //SEG147 [72] phi from sin8u_table::@21 to print_byte [phi:sin8u_table::@21->print_byte]
  print_byte_from_b21:
  //SEG148 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@21->print_byte#0] -- register_copy 
  //SEG149 [72] phi (byte) print_byte::b#8 = (byte) print_byte::b#7 [phi:sin8u_table::@21->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG150 [61] phi from sin8u_table::@21 to sin8u_table::@22 [phi:sin8u_table::@21->sin8u_table::@22]
  b22_from_b21:
    jmp b22
  //SEG151 sin8u_table::@22
  b22:
  //SEG152 [62] call print_ln 
  //SEG153 [67] phi from sin8u_table::@22 to print_ln [phi:sin8u_table::@22->print_ln]
  print_ln_from_b22:
  //SEG154 [67] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:sin8u_table::@22->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b23
  //SEG155 sin8u_table::@23
  b23:
  //SEG156 [63] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
  //SEG157 [64] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG158 [65] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.tabsize
    bcc b1_from_b23
    bne !+
    lda i
    cmp #<main.tabsize
    bcc b1_from_b23
  !:
    jmp breturn
  //SEG159 sin8u_table::@return
  breturn:
  //SEG160 [66] return 
    rts
    str: .text "step:@"
    str1: .text " min:@"
    str2: .text " max:@"
    str3: .text " ampl:@"
    str4: .text " mid:@"
    str5: .text "x: @"
    str6: .text " sin: @"
    str7: .text " scaled: @"
    str8: .text " trans: @"
}
//SEG161 print_ln
// Print a newline
print_ln: {
  //SEG162 [68] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG163 [68] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG164 print_ln::@1
  b1:
  //SEG165 [69] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG166 [70] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#18) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG167 print_ln::@return
  breturn:
  //SEG168 [71] return 
    rts
}
//SEG169 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($a) b)
print_byte: {
    .label _0 = $37
    .label _2 = $38
    .label b = $a
  //SEG170 [73] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG171 [74] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG172 [75] call print_char 
  //SEG173 [80] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG174 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#100 [phi:print_byte->print_char#0] -- register_copy 
  //SEG175 [80] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG176 print_byte::@1
  b1:
  //SEG177 [76] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG178 [77] (byte) print_char::ch#4 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG179 [78] call print_char 
  //SEG180 [80] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG181 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#18 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG182 [80] phi (byte) print_char::ch#5 = (byte) print_char::ch#4 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG183 print_byte::@return
  breturn:
  //SEG184 [79] return 
    rts
}
//SEG185 print_char
// Print a single char
// print_char(byte zeropage($b) ch)
print_char: {
    .label ch = $b
  //SEG186 [81] *((byte*) print_char_cursor#64) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG187 [82] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#64 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG188 print_char::@return
  breturn:
  //SEG189 [83] return 
    rts
}
//SEG190 print_str
// Print a zero-terminated string
// print_str(byte* zeropage($c) str)
print_str: {
    .label str = $c
  //SEG191 [85] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG192 [85] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#105 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG193 [85] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG194 print_str::@1
  b1:
  //SEG195 [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG196 print_str::@return
  breturn:
  //SEG197 [87] return 
    rts
  //SEG198 print_str::@2
  b2:
  //SEG199 [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG200 [89] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG201 [90] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG202 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage($e) w)
print_sword: {
    .label w = $e
  //SEG203 [91] if((signed word)(word) mul8su::m#2>=(signed byte) 0) goto print_sword::@4 -- vwsz1_ge_0_then_la1 
    lda mul8su.m+1
    bpl b4
  //SEG204 [92] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG205 print_sword::@2
  b2:
  //SEG206 [93] call print_char 
  //SEG207 [80] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG208 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#2 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG209 [80] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b3
  //SEG210 print_sword::@3
  b3:
  //SEG211 [94] (signed word) print_sword::w#0 ← - (signed word)(word) mul8su::m#2 -- vwsz1=_neg_vwsz2 
    sec
    lda mul8su.m
    eor #$ff
    adc #0
    sta w
    lda mul8su.m+1
    eor #$ff
    adc #0
    sta w+1
  //SEG212 [95] phi from print_sword::@3 print_sword::@4 to print_sword::@1 [phi:print_sword::@3/print_sword::@4->print_sword::@1]
  b1_from_b3:
  b1_from_b4:
  //SEG213 [95] phi (byte*) print_char_cursor#94 = (byte*) print_char_cursor#18 [phi:print_sword::@3/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG214 [95] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#0 [phi:print_sword::@3/print_sword::@4->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG215 print_sword::@1
  b1:
  //SEG216 [96] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3 -- vwuz1=vwuz2 
    lda w
    sta print_word.w
    lda w+1
    sta print_word.w+1
  //SEG217 [97] call print_word 
  //SEG218 [100] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  print_word_from_b1:
  //SEG219 [100] phi (byte*) print_char_cursor#99 = (byte*) print_char_cursor#94 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG220 [100] phi (word) print_word::w#3 = (word~) print_word::w#5 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG221 print_sword::@return
  breturn:
  //SEG222 [98] return 
    rts
  //SEG223 print_sword::@4
  b4:
  //SEG224 [99] (signed word~) print_sword::w#6 ← (signed word)(word) mul8su::m#2 -- vwsz1=vwsz2 
    lda mul8su.m
    sta w
    lda mul8su.m+1
    sta w+1
    jmp b1_from_b4
}
//SEG225 print_word
// Print a word as HEX
// print_word(word zeropage($12) w)
print_word: {
    .label w = $12
  //SEG226 [101] (byte) print_byte::b#1 ← > (word) print_word::w#3 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG227 [102] call print_byte 
  //SEG228 [72] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG229 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#99 [phi:print_word->print_byte#0] -- register_copy 
  //SEG230 [72] phi (byte) print_byte::b#8 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG231 print_word::@1
  b1:
  //SEG232 [103] (byte) print_byte::b#2 ← < (word) print_word::w#3 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG233 [104] call print_byte 
  //SEG234 [72] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG235 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#18 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG236 [72] phi (byte) print_byte::b#8 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG237 print_word::@return
  breturn:
  //SEG238 [105] return 
    rts
}
//SEG239 print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage($14) b)
print_sbyte: {
    .label b = $14
  //SEG240 [106] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda b
    bmi b1_from_print_sbyte
  //SEG241 [107] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  b3_from_print_sbyte:
    jmp b3
  //SEG242 print_sbyte::@3
  b3:
  //SEG243 [108] call print_char 
  //SEG244 [80] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  print_char_from_b3:
  //SEG245 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#2 [phi:print_sbyte::@3->print_char#0] -- register_copy 
  //SEG246 [80] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
  //SEG247 [109] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG248 [109] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    jmp b2
  //SEG249 print_sbyte::@2
  b2:
  //SEG250 [110] (byte~) print_byte::b#10 ← (byte)(signed byte) print_sbyte::b#4 -- vbuz1=vbuz2 
    lda b
    sta print_byte.b
  //SEG251 [111] call print_byte 
  //SEG252 [72] phi from print_sbyte::@2 to print_byte [phi:print_sbyte::@2->print_byte]
  print_byte_from_b2:
  //SEG253 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#18 [phi:print_sbyte::@2->print_byte#0] -- register_copy 
  //SEG254 [72] phi (byte) print_byte::b#8 = (byte~) print_byte::b#10 [phi:print_sbyte::@2->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG255 print_sbyte::@return
  breturn:
  //SEG256 [112] return 
    rts
  //SEG257 [113] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  b1_from_print_sbyte:
    jmp b1
  //SEG258 print_sbyte::@1
  b1:
  //SEG259 [114] call print_char 
  //SEG260 [80] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  print_char_from_b1:
  //SEG261 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#2 [phi:print_sbyte::@1->print_char#0] -- register_copy 
  //SEG262 [80] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG263 print_sbyte::@4
  b4:
  //SEG264 [115] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
    jmp b2_from_b4
}
//SEG265 mul8su
// Multiply a signed byte and an unsigned byte (into a signed word)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte zeropage($34) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label _7 = $3b
    .label _10 = $3c
    .label m = $15
    .label a = $34
  //SEG266 [116] (byte~) mul8u::a#8 ← (byte)(signed byte) mul8su::a#0 -- vbuz1=vbuz2 
    lda a
    sta mul8u.a
  //SEG267 [117] call mul8u 
  //SEG268 [126] phi from mul8su to mul8u [phi:mul8su->mul8u]
  mul8u_from_mul8su:
  //SEG269 [126] phi (byte) mul8u::a#6 = (byte~) mul8u::a#8 [phi:mul8su->mul8u#0] -- register_copy 
  //SEG270 [126] phi (word) mul8u::mb#0 = (const byte) mul8su::b#0 [phi:mul8su->mul8u#1] -- vwuz1=vbuc1 
    lda #b
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG271 [118] (word) mul8u::return#2 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda mul8u.res
    sta mul8u.return
    lda mul8u.res+1
    sta mul8u.return+1
    jmp b3
  //SEG272 mul8su::@3
  b3:
  //SEG273 [119] (word) mul8su::m#0 ← (word) mul8u::return#2 -- vwuz1=vwuz2 
    lda mul8u.return
    sta m
    lda mul8u.return+1
    sta m+1
  //SEG274 [120] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1 -- vbsz1_ge_0_then_la1 
    lda a
    cmp #0
    bpl b1_from_b3
    jmp b2
  //SEG275 mul8su::@2
  b2:
  //SEG276 [121] (byte~) mul8su::$7 ← > (word) mul8su::m#0 -- vbuz1=_hi_vwuz2 
    lda m+1
    sta _7
  //SEG277 [122] (byte~) mul8su::$10 ← (byte~) mul8su::$7 - (const byte) mul8su::b#0 -- vbuz1=vbuz2_minus_vbuc1 
    lax _7
    axs #b
    stx _10
  //SEG278 [123] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$10 -- vwuz1=vwuz1_sethi_vbuz2 
    lda _10
    sta m+1
  //SEG279 [124] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
  b1_from_b2:
  b1_from_b3:
  //SEG280 [124] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
    jmp b1
  //SEG281 mul8su::@1
  b1:
    jmp breturn
  //SEG282 mul8su::@return
  breturn:
  //SEG283 [125] return 
    rts
}
//SEG284 mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte zeropage($18) a, byte zeropage($17) b)
mul8u: {
    .label _1 = $3d
    .label mb = $1b
    .label a = $18
    .label res = $19
    .label return = $39
    .label b = $17
    .label return_3 = $4d
  //SEG285 [127] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  b1_from_mul8u:
  //SEG286 [127] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
  //SEG287 [127] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
  //SEG288 [127] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp b1
  //SEG289 mul8u::@1
  b1:
  //SEG290 [128] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuz1_neq_0_then_la1 
    lda a
    cmp #0
    bne b2
    jmp breturn
  //SEG291 mul8u::@return
  breturn:
  //SEG292 [129] return 
    rts
  //SEG293 mul8u::@2
  b2:
  //SEG294 [130] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and a
    sta _1
  //SEG295 [131] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b3_from_b2
    jmp b4
  //SEG296 mul8u::@4
  b4:
  //SEG297 [132] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG298 [133] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG299 [133] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp b3
  //SEG300 mul8u::@3
  b3:
  //SEG301 [134] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr a
  //SEG302 [135] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG303 [127] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  b1_from_b3:
  //SEG304 [127] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
  //SEG305 [127] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
  //SEG306 [127] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG307 sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage($1e) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label _4 = $3e
    .label x = $1e
    .label x1 = $40
    .label x2 = $42
    .label x3 = $44
    .label x3_6 = $46
    .label usinx = $47
    .label x4 = $49
    .label x5 = $4b
    .label x5_128 = $4c
    .label usinx_1 = $20
    .label usinx_2 = $20
    .label return = $21
    .label sinx = $21
    .label return_2 = $32
    .label usinx_4 = $20
    .label isUpper = $1d
  //SEG308 [136] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b1_from_sin8s
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b1_from_sin8s
  !:
    jmp b5
  //SEG309 sin8s::@5
  b5:
  //SEG310 [137] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG311 [138] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  b1_from_b5:
  //SEG312 [138] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG313 [138] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG314 [138] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b1_from_sin8s:
  //SEG315 [138] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG316 [138] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG317 sin8s::@1
  b1:
  //SEG318 [139] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2_from_b1
  !:
    jmp b6
  //SEG319 sin8s::@6
  b6:
  //SEG320 [140] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG321 [141] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  b2_from_b1:
  b2_from_b6:
  //SEG322 [141] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp b2
  //SEG323 sin8s::@2
  b2:
  //SEG324 [142] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda x
    asl
    sta _4
    lda x+1
    rol
    sta _4+1
    asl _4
    rol _4+1
    asl _4
    rol _4+1
  //SEG325 [143] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda _4+1
    sta x1
  //SEG326 [144] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v1
  //SEG327 [145] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG328 [146] call mulu8_sel 
  //SEG329 [179] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from_b2:
  //SEG330 [179] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG331 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
  //SEG332 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG333 [147] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return
    jmp b9
  //SEG334 sin8s::@9
  b9:
  //SEG335 [148] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0 -- vbuz1=vbuz2 
    lda mulu8_sel.return
    sta x2
  //SEG336 [149] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuz1=vbuz2 
    lda x2
    sta mulu8_sel.v1
  //SEG337 [150] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG338 [151] call mulu8_sel 
  //SEG339 [179] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from_b9:
  //SEG340 [179] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG341 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
  //SEG342 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG343 [152] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_1
    jmp b10
  //SEG344 sin8s::@10
  b10:
  //SEG345 [153] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuz2 
    lda mulu8_sel.return_1
    sta x3
  //SEG346 [154] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda x3
    sta mulu8_sel.v1
  //SEG347 [155] call mulu8_sel 
  //SEG348 [179] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from_b10:
  //SEG349 [179] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG350 [179] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6#0 [phi:sin8s::@10->mulu8_sel#1] -- vbuz1=vbuc1 
    lda #DIV_6
    sta mulu8_sel.v2
  //SEG351 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG352 [156] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_2
    jmp b11
  //SEG353 sin8s::@11
  b11:
  //SEG354 [157] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2 -- vbuz1=vbuz2 
    lda mulu8_sel.return_2
    sta x3_6
  //SEG355 [158] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
  //SEG356 [159] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuz1=vbuz2 
    lda x3
    sta mulu8_sel.v1
  //SEG357 [160] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG358 [161] call mulu8_sel 
  //SEG359 [179] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from_b11:
  //SEG360 [179] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG361 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
  //SEG362 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG363 [162] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_10
    jmp b12
  //SEG364 sin8s::@12
  b12:
  //SEG365 [163] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10 -- vbuz1=vbuz2 
    lda mulu8_sel.return_10
    sta x4
  //SEG366 [164] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuz1=vbuz2 
    lda x4
    sta mulu8_sel.v1
  //SEG367 [165] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta mulu8_sel.v2
  //SEG368 [166] call mulu8_sel 
  //SEG369 [179] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from_b12:
  //SEG370 [179] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG371 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
  //SEG372 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG373 [167] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12 -- vbuz1=vbuz2 
    lda mulu8_sel.return_12
    sta mulu8_sel.return_11
    jmp b13
  //SEG374 sin8s::@13
  b13:
  //SEG375 [168] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11 -- vbuz1=vbuz2 
    lda mulu8_sel.return_11
    sta x5
  //SEG376 [169] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda x5
    lsr
    lsr
    lsr
    lsr
    sta x5_128
  //SEG377 [170] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda usinx
    clc
    adc x5_128
    sta usinx_1
  //SEG378 [171] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda usinx_1
    cmp #$80
    bcc b3_from_b13
    jmp b7
  //SEG379 sin8s::@7
  b7:
  //SEG380 [172] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuz1=_dec_vbuz1 
    dec usinx_2
  //SEG381 [173] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  b3_from_b13:
  b3_from_b7:
  //SEG382 [173] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp b3
  //SEG383 sin8s::@3
  b3:
  //SEG384 [174] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b14
    jmp b8
  //SEG385 sin8s::@8
  b8:
  //SEG386 [175] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsz1=_neg_vbsz2 
    lda usinx_4
    eor #$ff
    clc
    adc #1
    sta sinx
  //SEG387 [176] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  b4_from_b14:
  b4_from_b8:
  //SEG388 [176] phi (signed byte) sin8s::return#0 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp b4
  //SEG389 sin8s::@4
  b4:
    jmp breturn
  //SEG390 sin8s::@return
  breturn:
  //SEG391 [177] return 
    rts
  //SEG392 sin8s::@14
  b14:
  //SEG393 [178] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsz1=vbsz2 
    lda usinx_4
    sta return
    jmp b4_from_b14
}
//SEG394 mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte zeropage($22) v1, byte zeropage($23) v2, byte zeropage($24) select)
mulu8_sel: {
    .label _0 = $4f
    .label _1 = $51
    .label v1 = $22
    .label v2 = $23
    .label return = $41
    .label return_1 = $43
    .label return_2 = $45
    .label return_10 = $48
    .label return_11 = $4a
    .label select = $24
    .label return_12 = $53
  //SEG395 [180] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5 -- vbuz1=vbuz2 
    lda v1
    sta mul8u.a
  //SEG396 [181] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 -- vbuz1=vbuz2 
    lda v2
    sta mul8u.b
  //SEG397 [182] call mul8u 
  //SEG398 [126] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
  //SEG399 [126] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
  //SEG400 [126] phi (word) mul8u::mb#0 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- vwuz1=vbuz2 
    lda mul8u.b
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG401 [183] (word) mul8u::return#3 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda mul8u.res
    sta mul8u.return_3
    lda mul8u.res+1
    sta mul8u.return_3+1
    jmp b1
  //SEG402 mulu8_sel::@1
  b1:
  //SEG403 [184] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 -- vwuz1=vwuz2 
    lda mul8u.return_3
    sta _0
    lda mul8u.return_3+1
    sta _0+1
  //SEG404 [185] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz2_rol_vbuz3 
    lda _0
    sta _1
    lda _0+1
    sta _1+1
    ldy select
    beq !e+
  !:
    asl _1
    rol _1+1
    dey
    bne !-
  !e:
  //SEG405 [186] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuz1=_hi_vwuz2 
    lda _1+1
    sta return_12
    jmp breturn
  //SEG406 mulu8_sel::@return
  breturn:
  //SEG407 [187] return 
    rts
}
//SEG408 div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $56
    .label return_2 = $2e
  //SEG409 [189] call divr16u 
  //SEG410 [193] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
  //SEG411 [190] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_2
    lda divr16u.return+1
    sta divr16u.return_2+1
    jmp b1
  //SEG412 div16u::@1
  b1:
  //SEG413 [191] (word) div16u::return#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return_2
    sta return
    lda divr16u.return_2+1
    sta return+1
    jmp breturn
  //SEG414 div16u::@return
  breturn:
  //SEG415 [192] return 
    rts
}
//SEG416 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($27) dividend, word zeropage($25) rem)
divr16u: {
    .label _1 = $58
    .label _2 = $59
    .label rem = $25
    .label dividend = $27
    .label quotient = $29
    .label i = $2b
    .label return = $29
    .label return_2 = $54
  //SEG417 [194] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG418 [194] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG419 [194] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG420 [194] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12#0 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta dividend
    lda #>PI2_u4f12
    sta dividend+1
  //SEG421 [194] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #0
    sta rem
    lda #0
    sta rem+1
    jmp b1
  //SEG422 [194] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG423 [194] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG424 [194] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG425 [194] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG426 [194] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG427 divr16u::@1
  b1:
  //SEG428 [195] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG429 [196] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
  //SEG430 [197] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
  //SEG431 [198] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda _2
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG432 divr16u::@4
  b4:
  //SEG433 [199] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG434 [200] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG435 [200] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG436 divr16u::@2
  b2:
  //SEG437 [201] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG438 [202] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG439 [203] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.tabsize
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<main.tabsize
    bcc b3_from_b2
  !:
    jmp b5
  //SEG440 divr16u::@5
  b5:
  //SEG441 [204] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG442 [205] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.tabsize
    sta rem
    lda rem+1
    sbc #>main.tabsize
    sta rem+1
  //SEG443 [206] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG444 [206] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG445 [206] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG446 divr16u::@3
  b3:
  //SEG447 [207] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG448 [208] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp i
    bne b1_from_b3
    jmp breturn
  //SEG449 divr16u::@return
  breturn:
  //SEG450 [209] return 
    rts
}
//SEG451 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $2c
  //SEG452 [211] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG453 [211] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG454 [211] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG455 [211] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG456 print_cls::@1
  b1:
  //SEG457 [212] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG458 [213] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG459 [214] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG460 print_cls::@return
  breturn:
  //SEG461 [215] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:53 [ sin8u_table::$21 ] has ALU potential.
Statement [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] ) always clobbers reg byte a 
Statement [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] ) always clobbers reg byte a 
Statement [14] (word) print_word::w#1 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_word::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_word::w#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [35] (word) sin8s::x#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8s::x#2 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8s::x#2 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [43] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:51 [ sin8u_table::sinx#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:54 [ sin8u_table::sinx_tr#0 ]
Statement [45] (byte*~) print_char_cursor#113 ← (byte*) print_line_cursor#1 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_char_cursor#113 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_char_cursor#113 print_line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:51 [ sin8u_table::sinx#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:54 [ sin8u_table::sinx_tr#0 ]
Statement [47] (word) print_word::w#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#2 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#2 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [63] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [65] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [69] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 [ print_line_cursor#1 print_char_cursor#18 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#18 ] main:2::sin8u_table:7::print_ln:62 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#18 ] ) always clobbers reg byte a 
Statement [70] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#18) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#18 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#18 ] main:2::sin8u_table:7::print_ln:62 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#18 ] ) always clobbers reg byte a 
Statement [73] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4 [ print_byte::b#8 print_char_cursor#100 print_byte::$0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_byte:60 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:102 [ sin8u_table::step#0 print_word::w#3 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_word:48::print_byte:102 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:102 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:104 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_word:48::print_byte:104 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:104 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_sbyte:52::print_byte:111 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
Statement [76] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f [ print_char_cursor#18 print_byte::$2 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_byte:60 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:102 [ sin8u_table::step#0 print_word::w#3 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_word:48::print_byte:102 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:102 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:104 [ sin8u_table::step#0 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_word:48::print_byte:104 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:104 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_sbyte:52::print_byte:111 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_byte::$2 ] ) always clobbers reg byte a 
Statement [81] *((byte*) print_char_cursor#64) ← (byte) print_char::ch#5 [ print_char_cursor#64 ] ( main:2::sin8u_table:7::print_byte:19::print_char:75 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:23::print_char:75 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:27::print_char:75 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:31::print_char:75 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:60::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:15::print_byte:102::print_char:75 [ sin8u_table::step#0 print_word::w#3 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:48::print_byte:102::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:102::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:15::print_byte:104::print_char:75 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:48::print_byte:104::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:104::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_sbyte:52::print_byte:111::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:19::print_char:78 [ sin8u_table::step#0 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:23::print_char:78 [ sin8u_table::step#0 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:27::print_char:78 [ sin8u_table::step#0 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:31::print_char:78 [ sin8u_table::step#0 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:60::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:15::print_byte:102::print_char:78 [ sin8u_table::step#0 print_word::w#3 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:48::print_byte:102::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#64 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:102::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:15::print_byte:104::print_char:78 [ sin8u_table::step#0 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:48::print_byte:104::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#64 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:104::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#64 ] main:2::sin8u_table:7::print_sbyte:52::print_byte:111::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#64 ] main:2::sin8u_table:7::print_sword:56::print_char:93 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 mul8su::m#2 print_char_cursor#64 ] main:2::sin8u_table:7::print_sbyte:52::print_char:108 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sbyte::b#1 print_char_cursor#64 ] main:2::sin8u_table:7::print_sbyte:52::print_char:114 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sbyte::b#1 print_char_cursor#64 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Statement [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:46 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:50 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:54 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:58 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) [ print_char_cursor#2 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:46 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:50 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:54 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:58 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [91] if((signed word)(word) mul8su::m#2>=(signed byte) 0) goto print_sword::@4 [ mul8su::m#2 print_char_cursor#2 ] ( main:2::sin8u_table:7::print_sword:56 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 mul8su::m#2 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [94] (signed word) print_sword::w#0 ← - (signed word)(word) mul8su::m#2 [ print_char_cursor#18 print_sword::w#0 ] ( main:2::sin8u_table:7::print_sword:56 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [96] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3 [ print_char_cursor#94 print_word::w#5 ] ( main:2::sin8u_table:7::print_sword:56 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#94 print_word::w#5 ] ) always clobbers reg byte a 
Statement [99] (signed word~) print_sword::w#6 ← (signed word)(word) mul8su::m#2 [ print_char_cursor#2 print_sword::w#6 ] ( main:2::sin8u_table:7::print_sword:56 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_sword::w#6 ] ) always clobbers reg byte a 
Statement [101] (byte) print_byte::b#1 ← > (word) print_word::w#3 [ print_byte::b#1 print_char_cursor#99 print_word::w#3 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 print_byte::b#1 print_char_cursor#99 print_word::w#3 ] main:2::sin8u_table:7::print_word:48 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#1 print_char_cursor#99 print_word::w#3 ] main:2::sin8u_table:7::print_sword:56::print_word:97 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#1 print_char_cursor#99 print_word::w#3 ] ) always clobbers reg byte a 
Statement [103] (byte) print_byte::b#2 ← < (word) print_word::w#3 [ print_char_cursor#18 print_byte::b#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 print_char_cursor#18 print_byte::b#2 ] main:2::sin8u_table:7::print_word:48 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_byte::b#2 ] main:2::sin8u_table:7::print_sword:56::print_word:97 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [115] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 [ print_char_cursor#18 print_sbyte::b#0 ] ( main:2::sin8u_table:7::print_sbyte:52 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [118] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:40 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::return#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:52 [ mul8su::a#0 ]
Statement [119] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:40 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8su::m#0 ] ) always clobbers reg byte a 
Statement [121] (byte~) mul8su::$7 ← > (word) mul8su::m#0 [ mul8su::m#0 mul8su::$7 ] ( main:2::sin8u_table:7::mul8su:40 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 print_line_cursor#1 mul8su::m#0 mul8su::$7 ] ) always clobbers reg byte a 
Statement [132] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:40::mul8u:117 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:146::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:29 [ sin8s::isUpper#10 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:64 [ sin8s::x1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ mulu8_sel::select#5 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:68 [ sin8s::x3#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:71 [ sin8s::usinx#0 ]
Statement [136] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::x#2 ] ) always clobbers reg byte a 
Statement [137] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [139] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] ) always clobbers reg byte a 
Statement [140] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] ) always clobbers reg byte a 
Statement [142] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::$4 ] ) always clobbers reg byte a 
Statement [143] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 ] ) always clobbers reg byte a 
Statement [158] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) always clobbers reg byte a 
Statement [169] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) always clobbers reg byte a 
Statement [170] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) always clobbers reg byte a 
Statement [175] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::sinx#1 ] ) always clobbers reg byte a 
Statement [183] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:146 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] ) always clobbers reg byte a 
Statement [184] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:146 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) always clobbers reg byte a 
Statement [185] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:146 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) always clobbers reg byte a 
Statement [186] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:146 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) always clobbers reg byte a 
Statement [190] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] ) always clobbers reg byte a 
Statement [191] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] ) always clobbers reg byte a 
Statement [196] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:189 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:43 [ divr16u::i#2 divr16u::i#1 ]
Statement [199] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:189 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [203] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:189 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [205] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:189 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [212] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [214] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [11] (word) div16u::return#2 ← (word) div16u::return#0 [ div16u::return#2 ] ( main:2::sin8u_table:7 [ div16u::return#2 ] ) always clobbers reg byte a 
Statement [12] (word) sin8u_table::step#0 ← (word) div16u::return#2 [ sin8u_table::step#0 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 ] ) always clobbers reg byte a 
Statement [14] (word) print_word::w#1 ← (word) sin8u_table::step#0 [ sin8u_table::step#0 print_word::w#1 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 print_word::w#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [35] (word) sin8s::x#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8s::x#2 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8s::x#2 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [43] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 ] ) always clobbers reg byte a reg byte y 
Statement [45] (byte*~) print_char_cursor#113 ← (byte*) print_line_cursor#1 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_char_cursor#113 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_char_cursor#113 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [47] (word) print_word::w#2 ← (word) sin8u_table::x#10 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#2 print_char_cursor#2 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#2 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [63] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::i#10 sin8u_table::x#1 sin8u_table::sintab#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [65] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 print_line_cursor#1 ] ( main:2::sin8u_table:7 [ sin8u_table::step#0 sin8u_table::x#1 sin8u_table::sintab#1 sin8u_table::i#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [69] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 [ print_line_cursor#1 print_char_cursor#18 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#18 ] main:2::sin8u_table:7::print_ln:62 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#18 ] ) always clobbers reg byte a 
Statement [70] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#18) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#18 ] ( main:2::sin8u_table:7::print_ln:33 [ sin8u_table::step#0 print_line_cursor#1 print_char_cursor#18 ] main:2::sin8u_table:7::print_ln:62 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#18 ] ) always clobbers reg byte a 
Statement [73] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4 [ print_byte::b#8 print_char_cursor#100 print_byte::$0 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_byte:60 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:102 [ sin8u_table::step#0 print_word::w#3 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_word:48::print_byte:102 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:102 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_word:15::print_byte:104 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_word:48::print_byte:104 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:104 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] main:2::sin8u_table:7::print_sbyte:52::print_byte:111 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#100 print_byte::$0 ] ) always clobbers reg byte a 
Statement [76] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f [ print_char_cursor#18 print_byte::$2 ] ( main:2::sin8u_table:7::print_byte:19 [ sin8u_table::step#0 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_byte:23 [ sin8u_table::step#0 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_byte:27 [ sin8u_table::step#0 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_byte:31 [ sin8u_table::step#0 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_byte:60 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:102 [ sin8u_table::step#0 print_word::w#3 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_word:48::print_byte:102 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:102 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_word:15::print_byte:104 [ sin8u_table::step#0 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_word:48::print_byte:104 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:104 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_byte::$2 ] main:2::sin8u_table:7::print_sbyte:52::print_byte:111 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_byte::$2 ] ) always clobbers reg byte a 
Statement [81] *((byte*) print_char_cursor#64) ← (byte) print_char::ch#5 [ print_char_cursor#64 ] ( main:2::sin8u_table:7::print_byte:19::print_char:75 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:23::print_char:75 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:27::print_char:75 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:31::print_char:75 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:60::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:15::print_byte:102::print_char:75 [ sin8u_table::step#0 print_word::w#3 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:48::print_byte:102::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:102::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:15::print_byte:104::print_char:75 [ sin8u_table::step#0 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:48::print_byte:104::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:104::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_sbyte:52::print_byte:111::print_char:75 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#8 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:19::print_char:78 [ sin8u_table::step#0 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:23::print_char:78 [ sin8u_table::step#0 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:27::print_char:78 [ sin8u_table::step#0 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:31::print_char:78 [ sin8u_table::step#0 print_char_cursor#64 ] main:2::sin8u_table:7::print_byte:60::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 print_line_cursor#1 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:15::print_byte:102::print_char:78 [ sin8u_table::step#0 print_word::w#3 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:48::print_byte:102::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#64 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:102::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_word::w#3 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:15::print_byte:104::print_char:78 [ sin8u_table::step#0 print_char_cursor#64 ] main:2::sin8u_table:7::print_word:48::print_byte:104::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#64 ] main:2::sin8u_table:7::print_sword:56::print_word:97::print_byte:104::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#64 ] main:2::sin8u_table:7::print_sbyte:52::print_byte:111::print_char:78 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#64 ] main:2::sin8u_table:7::print_sword:56::print_char:93 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 mul8su::m#2 print_char_cursor#64 ] main:2::sin8u_table:7::print_sbyte:52::print_char:108 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sbyte::b#1 print_char_cursor#64 ] main:2::sin8u_table:7::print_sbyte:52::print_char:114 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_sbyte::b#1 print_char_cursor#64 ] ) always clobbers reg byte y 
Statement [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:46 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:50 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:54 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:58 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) [ print_char_cursor#2 print_str::str#10 ] ( main:2::sin8u_table:7::print_str:13 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:17 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:21 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:25 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:29 [ sin8u_table::step#0 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:46 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:50 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:54 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] main:2::sin8u_table:7::print_str:58 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_str::str#10 ] ) always clobbers reg byte a reg byte y 
Statement [91] if((signed word)(word) mul8su::m#2>=(signed byte) 0) goto print_sword::@4 [ mul8su::m#2 print_char_cursor#2 ] ( main:2::sin8u_table:7::print_sword:56 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 mul8su::m#2 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [94] (signed word) print_sword::w#0 ← - (signed word)(word) mul8su::m#2 [ print_char_cursor#18 print_sword::w#0 ] ( main:2::sin8u_table:7::print_sword:56 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [96] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3 [ print_char_cursor#94 print_word::w#5 ] ( main:2::sin8u_table:7::print_sword:56 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#94 print_word::w#5 ] ) always clobbers reg byte a 
Statement [99] (signed word~) print_sword::w#6 ← (signed word)(word) mul8su::m#2 [ print_char_cursor#2 print_sword::w#6 ] ( main:2::sin8u_table:7::print_sword:56 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#2 print_sword::w#6 ] ) always clobbers reg byte a 
Statement [101] (byte) print_byte::b#1 ← > (word) print_word::w#3 [ print_byte::b#1 print_char_cursor#99 print_word::w#3 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 print_byte::b#1 print_char_cursor#99 print_word::w#3 ] main:2::sin8u_table:7::print_word:48 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#1 print_char_cursor#99 print_word::w#3 ] main:2::sin8u_table:7::print_sword:56::print_word:97 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_byte::b#1 print_char_cursor#99 print_word::w#3 ] ) always clobbers reg byte a 
Statement [103] (byte) print_byte::b#2 ← < (word) print_word::w#3 [ print_char_cursor#18 print_byte::b#2 ] ( main:2::sin8u_table:7::print_word:15 [ sin8u_table::step#0 print_char_cursor#18 print_byte::b#2 ] main:2::sin8u_table:7::print_word:48 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx#0 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_byte::b#2 ] main:2::sin8u_table:7::print_sword:56::print_word:97 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [115] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 [ print_char_cursor#18 print_sbyte::b#0 ] ( main:2::sin8u_table:7::print_sbyte:52 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::i#10 sin8u_table::sintab#1 mul8su::m#2 sin8u_table::sinx_tr#0 print_line_cursor#1 print_char_cursor#18 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [118] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8su::a#0 mul8u::return#2 ] ( main:2::sin8u_table:7::mul8su:40 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::return#2 ] ) always clobbers reg byte a 
Statement [119] (word) mul8su::m#0 ← (word) mul8u::return#2 [ mul8su::a#0 mul8su::m#0 ] ( main:2::sin8u_table:7::mul8su:40 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8su::m#0 ] ) always clobbers reg byte a 
Statement [121] (byte~) mul8su::$7 ← > (word) mul8su::m#0 [ mul8su::m#0 mul8su::$7 ] ( main:2::sin8u_table:7::mul8su:40 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 print_line_cursor#1 mul8su::m#0 mul8su::$7 ] ) always clobbers reg byte a 
Statement [130] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::sin8u_table:7::mul8su:40::mul8u:117 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:146::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ) always clobbers reg byte a 
Statement [132] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::sin8u_table:7::mul8su:40::mul8u:117 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 sin8u_table::sinx#0 print_line_cursor#1 mul8su::a#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:146::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166::mul8u:182 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Statement [136] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 [ sin8s::x#2 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::x#2 ] ) always clobbers reg byte a 
Statement [137] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 [ sin8s::x#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::x#0 ] ) always clobbers reg byte a 
Statement [139] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::x#4 sin8s::isUpper#10 ] ) always clobbers reg byte a 
Statement [140] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x#1 ] ) always clobbers reg byte a 
Statement [142] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 [ sin8s::isUpper#10 sin8s::$4 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::$4 ] ) always clobbers reg byte a 
Statement [143] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 [ sin8s::isUpper#10 sin8s::x1#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 ] ) always clobbers reg byte a 
Statement [158] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ) always clobbers reg byte a 
Statement [169] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ) always clobbers reg byte a 
Statement [170] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#1 ] ) always clobbers reg byte a 
Statement [175] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 [ sin8s::sinx#1 ] ( main:2::sin8u_table:7::sin8s:36 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::sinx#1 ] ) always clobbers reg byte a 
Statement [183] (word) mul8u::return#3 ← (word) mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#3 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:146 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#3 ] ) always clobbers reg byte a 
Statement [184] (word~) mulu8_sel::$0 ← (word) mul8u::return#3 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:146 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] ) always clobbers reg byte a 
Statement [185] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 [ mulu8_sel::$1 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:146 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] ) always clobbers reg byte a 
Statement [186] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 [ mulu8_sel::return#12 ] ( main:2::sin8u_table:7::sin8s:36::mulu8_sel:146 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:151 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:155 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:161 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::return#12 ] main:2::sin8u_table:7::sin8s:36::mulu8_sel:166 [ sin8u_table::step#0 sin8u_table::x#10 sin8u_table::sintab#2 sin8u_table::i#10 print_line_cursor#1 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::return#12 ] ) always clobbers reg byte a 
Statement [190] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 ] ( main:2::sin8u_table:7::div16u:10 [ divr16u::return#2 ] ) always clobbers reg byte a 
Statement [191] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 ] ( main:2::sin8u_table:7::div16u:10 [ div16u::return#0 ] ) always clobbers reg byte a 
Statement [196] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:189 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [199] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:189 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [203] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::sin8u_table:7::div16u:10::divr16u:189 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [205] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin8u_table:7::div16u:10::divr16u:189 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [212] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [214] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ sin8u_table::x#10 sin8u_table::x#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_WORD:6 [ sin8u_table::i#10 sin8u_table::i#1 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_BYTE:11 [ print_char::ch#5 print_char::ch#3 print_char::ch#4 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:12 [ print_str::str#10 print_str::str#12 print_str::str#0 ] : zp ZP_WORD:12 , 
Potential registers zp ZP_WORD:14 [ print_sword::w#3 print_sword::w#6 print_sword::w#0 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_WORD:16 [ print_char_cursor#94 print_char_cursor#105 print_char_cursor#64 print_char_cursor#100 print_char_cursor#18 print_char_cursor#99 print_char_cursor#2 print_char_cursor#113 print_char_cursor#1 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_WORD:18 [ print_word::w#3 print_word::w#5 print_word::w#2 print_word::w#1 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_BYTE:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , 
Potential registers zp ZP_WORD:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_BYTE:23 [ mul8u::b#1 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ] : zp ZP_BYTE:24 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_WORD:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_BYTE:29 [ sin8s::isUpper#10 ] : zp ZP_BYTE:29 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] : zp ZP_WORD:30 , 
Potential registers zp ZP_BYTE:32 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ mulu8_sel::select#5 ] : zp ZP_BYTE:36 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp ZP_WORD:37 , 
Potential registers zp ZP_WORD:39 [ divr16u::dividend#2 divr16u::dividend#0 ] : zp ZP_WORD:39 , 
Potential registers zp ZP_WORD:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_BYTE:43 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:43 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:44 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:44 , 
Potential registers zp ZP_WORD:46 [ div16u::return#2 ] : zp ZP_WORD:46 , 
Potential registers zp ZP_WORD:48 [ sin8u_table::step#0 ] : zp ZP_WORD:48 , 
Potential registers zp ZP_BYTE:50 [ sin8s::return#2 ] : zp ZP_BYTE:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ sin8u_table::sinx#0 ] : zp ZP_BYTE:51 , reg byte x , 
Potential registers zp ZP_BYTE:52 [ mul8su::a#0 ] : zp ZP_BYTE:52 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:53 [ sin8u_table::$21 ] : zp ZP_BYTE:53 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:54 [ sin8u_table::sinx_tr#0 ] : zp ZP_BYTE:54 , reg byte x , 
Potential registers zp ZP_BYTE:55 [ print_byte::$0 ] : zp ZP_BYTE:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ print_byte::$2 ] : zp ZP_BYTE:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:57 [ mul8u::return#2 ] : zp ZP_WORD:57 , 
Potential registers zp ZP_BYTE:59 [ mul8su::$7 ] : zp ZP_BYTE:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ mul8su::$10 ] : zp ZP_BYTE:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:61 [ mul8u::$1 ] : zp ZP_BYTE:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:62 [ sin8s::$4 ] : zp ZP_WORD:62 , 
Potential registers zp ZP_BYTE:64 [ sin8s::x1#0 ] : zp ZP_BYTE:64 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:65 [ mulu8_sel::return#0 ] : zp ZP_BYTE:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:66 [ sin8s::x2#0 ] : zp ZP_BYTE:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:67 [ mulu8_sel::return#1 ] : zp ZP_BYTE:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:68 [ sin8s::x3#0 ] : zp ZP_BYTE:68 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:69 [ mulu8_sel::return#2 ] : zp ZP_BYTE:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ sin8s::x3_6#0 ] : zp ZP_BYTE:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:71 [ sin8s::usinx#0 ] : zp ZP_BYTE:71 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:72 [ mulu8_sel::return#10 ] : zp ZP_BYTE:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:73 [ sin8s::x4#0 ] : zp ZP_BYTE:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:74 [ mulu8_sel::return#11 ] : zp ZP_BYTE:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:75 [ sin8s::x5#0 ] : zp ZP_BYTE:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:76 [ sin8s::x5_128#0 ] : zp ZP_BYTE:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:77 [ mul8u::return#3 ] : zp ZP_WORD:77 , 
Potential registers zp ZP_WORD:79 [ mulu8_sel::$0 ] : zp ZP_WORD:79 , 
Potential registers zp ZP_WORD:81 [ mulu8_sel::$1 ] : zp ZP_WORD:81 , 
Potential registers zp ZP_BYTE:83 [ mulu8_sel::return#12 ] : zp ZP_BYTE:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:84 [ divr16u::return#2 ] : zp ZP_WORD:84 , 
Potential registers zp ZP_WORD:86 [ div16u::return#0 ] : zp ZP_WORD:86 , 
Potential registers zp ZP_BYTE:88 [ divr16u::$1 ] : zp ZP_BYTE:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:89 [ divr16u::$2 ] : zp ZP_BYTE:89 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 346.86: zp ZP_WORD:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 249.57: zp ZP_WORD:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 202: zp ZP_BYTE:61 [ mul8u::$1 ] 180.67: zp ZP_BYTE:24 [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ] 4: zp ZP_BYTE:23 [ mul8u::b#1 ] 4: zp ZP_WORD:57 [ mul8u::return#2 ] 4: zp ZP_WORD:77 [ mul8u::return#3 ] 
Uplift Scope [] 226.03: zp ZP_WORD:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ] 220.28: zp ZP_WORD:16 [ print_char_cursor#94 print_char_cursor#105 print_char_cursor#64 print_char_cursor#100 print_char_cursor#18 print_char_cursor#99 print_char_cursor#2 print_char_cursor#113 print_char_cursor#1 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:12 [ print_str::str#10 print_str::str#12 print_str::str#0 ] 
Uplift Scope [divr16u] 96.25: zp ZP_WORD:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 37.25: zp ZP_WORD:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 22: zp ZP_BYTE:88 [ divr16u::$1 ] 22: zp ZP_BYTE:89 [ divr16u::$2 ] 18.19: zp ZP_BYTE:43 [ divr16u::i#2 divr16u::i#1 ] 7.46: zp ZP_WORD:39 [ divr16u::dividend#2 divr16u::dividend#0 ] 4: zp ZP_WORD:84 [ divr16u::return#2 ] 
Uplift Scope [sin8s] 27.5: zp ZP_WORD:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] 22: zp ZP_BYTE:50 [ sin8s::return#2 ] 13: zp ZP_BYTE:33 [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] 10: zp ZP_BYTE:32 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] 4: zp ZP_WORD:62 [ sin8s::$4 ] 4: zp ZP_BYTE:66 [ sin8s::x2#0 ] 4: zp ZP_BYTE:70 [ sin8s::x3_6#0 ] 4: zp ZP_BYTE:73 [ sin8s::x4#0 ] 4: zp ZP_BYTE:75 [ sin8s::x5#0 ] 4: zp ZP_BYTE:76 [ sin8s::x5_128#0 ] 1: zp ZP_BYTE:68 [ sin8s::x3#0 ] 0.64: zp ZP_BYTE:64 [ sin8s::x1#0 ] 0.33: zp ZP_BYTE:71 [ sin8s::usinx#0 ] 0.06: zp ZP_BYTE:29 [ sin8s::isUpper#10 ] 
Uplift Scope [mulu8_sel] 24: zp ZP_BYTE:34 [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] 21: zp ZP_BYTE:35 [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] 4: zp ZP_BYTE:65 [ mulu8_sel::return#0 ] 4: zp ZP_BYTE:67 [ mulu8_sel::return#1 ] 4: zp ZP_BYTE:69 [ mulu8_sel::return#2 ] 4: zp ZP_BYTE:72 [ mulu8_sel::return#10 ] 4: zp ZP_BYTE:74 [ mulu8_sel::return#11 ] 4: zp ZP_WORD:79 [ mulu8_sel::$0 ] 4: zp ZP_WORD:81 [ mulu8_sel::$1 ] 1.71: zp ZP_BYTE:83 [ mulu8_sel::return#12 ] 0.33: zp ZP_BYTE:36 [ mulu8_sel::select#5 ] 
Uplift Scope [sin8u_table] 22: zp ZP_BYTE:53 [ sin8u_table::$21 ] 17.23: zp ZP_WORD:6 [ sin8u_table::i#10 sin8u_table::i#1 ] 8.85: zp ZP_WORD:2 [ sin8u_table::x#10 sin8u_table::x#1 ] 4.3: zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] 2.54: zp ZP_BYTE:51 [ sin8u_table::sinx#0 ] 1.94: zp ZP_BYTE:54 [ sin8u_table::sinx_tr#0 ] 0.28: zp ZP_WORD:48 [ sin8u_table::step#0 ] 
Uplift Scope [print_byte] 39.25: zp ZP_BYTE:10 [ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ] 4: zp ZP_BYTE:55 [ print_byte::$0 ] 4: zp ZP_BYTE:56 [ print_byte::$2 ] 
Uplift Scope [print_word] 36.33: zp ZP_WORD:18 [ print_word::w#3 print_word::w#5 print_word::w#2 print_word::w#1 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:44 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [mul8su] 6.19: zp ZP_WORD:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] 4: zp ZP_BYTE:59 [ mul8su::$7 ] 4: zp ZP_BYTE:60 [ mul8su::$10 ] 2.6: zp ZP_BYTE:52 [ mul8su::a#0 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:11 [ print_char::ch#5 print_char::ch#3 print_char::ch#4 ] 
Uplift Scope [print_sword] 12: zp ZP_WORD:14 [ print_sword::w#3 print_sword::w#6 print_sword::w#0 ] 
Uplift Scope [print_sbyte] 10.83: zp ZP_BYTE:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Uplift Scope [div16u] 4: zp ZP_WORD:46 [ div16u::return#2 ] 1.33: zp ZP_WORD:86 [ div16u::return#0 ] 
Uplift Scope [print_ln] 
Uplift Scope [main] 

Uplifting [mul8u] best 23946 combination zp ZP_WORD:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp ZP_WORD:27 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ] reg byte a [ mul8u::b#1 ] zp ZP_WORD:57 [ mul8u::return#2 ] zp ZP_WORD:77 [ mul8u::return#3 ] 
Uplifting [] best 23946 combination zp ZP_WORD:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ] zp ZP_WORD:16 [ print_char_cursor#94 print_char_cursor#105 print_char_cursor#64 print_char_cursor#100 print_char_cursor#18 print_char_cursor#99 print_char_cursor#2 print_char_cursor#113 print_char_cursor#1 ] 
Uplifting [print_str] best 23946 combination zp ZP_WORD:12 [ print_str::str#10 print_str::str#12 print_str::str#0 ] 
Uplifting [divr16u] best 23736 combination zp ZP_WORD:37 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp ZP_WORD:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:39 [ divr16u::dividend#2 divr16u::dividend#0 ] zp ZP_WORD:84 [ divr16u::return#2 ] 
Uplifting [sin8s] best 23631 combination zp ZP_WORD:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] reg byte a [ sin8s::return#2 ] reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ] reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] zp ZP_WORD:62 [ sin8s::$4 ] zp ZP_BYTE:66 [ sin8s::x2#0 ] zp ZP_BYTE:70 [ sin8s::x3_6#0 ] zp ZP_BYTE:73 [ sin8s::x4#0 ] zp ZP_BYTE:75 [ sin8s::x5#0 ] zp ZP_BYTE:76 [ sin8s::x5_128#0 ] zp ZP_BYTE:68 [ sin8s::x3#0 ] zp ZP_BYTE:64 [ sin8s::x1#0 ] zp ZP_BYTE:71 [ sin8s::usinx#0 ] zp ZP_BYTE:29 [ sin8s::isUpper#10 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [mulu8_sel] best 23585 combination reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ] reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ] reg byte a [ mulu8_sel::return#0 ] reg byte a [ mulu8_sel::return#1 ] zp ZP_BYTE:69 [ mulu8_sel::return#2 ] zp ZP_BYTE:72 [ mulu8_sel::return#10 ] zp ZP_BYTE:74 [ mulu8_sel::return#11 ] zp ZP_WORD:79 [ mulu8_sel::$0 ] zp ZP_WORD:81 [ mulu8_sel::$1 ] zp ZP_BYTE:83 [ mulu8_sel::return#12 ] zp ZP_BYTE:36 [ mulu8_sel::select#5 ] 
Limited combination testing to 100 combinations of 196608 possible.
Uplifting [sin8u_table] best 23475 combination reg byte a [ sin8u_table::$21 ] zp ZP_WORD:6 [ sin8u_table::i#10 sin8u_table::i#1 ] zp ZP_WORD:2 [ sin8u_table::x#10 sin8u_table::x#1 ] zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ] zp ZP_BYTE:51 [ sin8u_table::sinx#0 ] reg byte x [ sin8u_table::sinx_tr#0 ] zp ZP_WORD:48 [ sin8u_table::step#0 ] 
Uplifting [print_byte] best 23467 combination zp ZP_BYTE:10 [ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_word] best 23467 combination zp ZP_WORD:18 [ print_word::w#3 print_word::w#5 print_word::w#2 print_word::w#1 ] 
Uplifting [print_cls] best 23467 combination zp ZP_WORD:44 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [mul8su] best 23425 combination zp ZP_WORD:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] reg byte a [ mul8su::$7 ] reg byte a [ mul8su::$10 ] reg byte y [ mul8su::a#0 ] 
Uplifting [print_char] best 23407 combination reg byte a [ print_char::ch#5 print_char::ch#3 print_char::ch#4 ] 
Uplifting [print_sword] best 23407 combination zp ZP_WORD:14 [ print_sword::w#3 print_sword::w#6 print_sword::w#0 ] 
Uplifting [print_sbyte] best 23407 combination zp ZP_BYTE:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Uplifting [div16u] best 23407 combination zp ZP_WORD:46 [ div16u::return#2 ] zp ZP_WORD:86 [ div16u::return#0 ] 
Uplifting [print_ln] best 23407 combination 
Uplifting [main] best 23407 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
Uplifting [print_byte] best 23407 combination zp ZP_BYTE:10 [ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
Uplifting [print_sbyte] best 23407 combination zp ZP_BYTE:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:66 [ sin8s::x2#0 ]
Uplifting [sin8s] best 23403 combination reg byte a [ sin8s::x2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:69 [ mulu8_sel::return#2 ]
Uplifting [mulu8_sel] best 23397 combination reg byte a [ mulu8_sel::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:70 [ sin8s::x3_6#0 ]
Uplifting [sin8s] best 23393 combination reg byte a [ sin8s::x3_6#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:72 [ mulu8_sel::return#10 ]
Uplifting [mulu8_sel] best 23387 combination reg byte a [ mulu8_sel::return#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:73 [ sin8s::x4#0 ]
Uplifting [sin8s] best 23383 combination reg byte a [ sin8s::x4#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:74 [ mulu8_sel::return#11 ]
Uplifting [mulu8_sel] best 23377 combination reg byte a [ mulu8_sel::return#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:75 [ sin8s::x5#0 ]
Uplifting [sin8s] best 23371 combination reg byte a [ sin8s::x5#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:76 [ sin8s::x5_128#0 ]
Uplifting [sin8s] best 23365 combination reg byte a [ sin8s::x5_128#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:51 [ sin8u_table::sinx#0 ]
Uplifting [sin8u_table] best 23365 combination zp ZP_BYTE:51 [ sin8u_table::sinx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:83 [ mulu8_sel::return#12 ]
Uplifting [mulu8_sel] best 23347 combination reg byte a [ mulu8_sel::return#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:68 [ sin8s::x3#0 ]
Uplifting [sin8s] best 23347 combination zp ZP_BYTE:68 [ sin8s::x3#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:64 [ sin8s::x1#0 ]
Uplifting [sin8s] best 23347 combination zp ZP_BYTE:64 [ sin8s::x1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ mulu8_sel::select#5 ]
Uplifting [mulu8_sel] best 23347 combination zp ZP_BYTE:36 [ mulu8_sel::select#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:71 [ sin8s::usinx#0 ]
Uplifting [sin8s] best 23347 combination zp ZP_BYTE:71 [ sin8s::usinx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ sin8s::isUpper#10 ]
Uplifting [sin8s] best 23347 combination zp ZP_BYTE:29 [ sin8s::isUpper#10 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:14 [ print_sword::w#3 print_sword::w#6 print_sword::w#0 ] ] with [ zp ZP_WORD:21 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_BYTE:10 [ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 ] ] with [ zp ZP_BYTE:20 [ print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp ZP_WORD:57 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 ] ] with [ zp ZP_WORD:77 [ mul8u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 ] ] with [ zp ZP_WORD:62 [ sin8s::$4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:84 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:46 [ div16u::return#2 ] ] with [ zp ZP_WORD:48 [ sin8u_table::step#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:46 [ div16u::return#2 sin8u_table::step#0 ] ] with [ zp ZP_WORD:86 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:79 [ mulu8_sel::$0 ] ] with [ zp ZP_WORD:81 [ mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:14 [ print_sword::w#3 print_sword::w#6 print_sword::w#0 mul8su::m#2 mul8su::m#1 mul8su::m#0 ] ] with [ zp ZP_WORD:25 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp ZP_WORD:46 [ div16u::return#2 sin8u_table::step#0 div16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:14 [ print_sword::w#3 print_sword::w#6 print_sword::w#0 mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 ] ] with [ zp ZP_WORD:79 [ mulu8_sel::$0 mulu8_sel::$1 ] ] - score: 1
Allocated (was zp ZP_WORD:12) zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ]
Allocated (was zp ZP_WORD:14) zp ZP_WORD:13 [ print_sword::w#3 print_sword::w#6 print_sword::w#0 mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 mulu8_sel::$0 mulu8_sel::$1 ]
Allocated (was zp ZP_WORD:16) zp ZP_WORD:15 [ print_char_cursor#94 print_char_cursor#105 print_char_cursor#64 print_char_cursor#100 print_char_cursor#18 print_char_cursor#99 print_char_cursor#2 print_char_cursor#113 print_char_cursor#1 ]
Allocated (was zp ZP_WORD:18) zp ZP_WORD:17 [ print_word::w#3 print_word::w#5 print_word::w#2 print_word::w#1 ]
Allocated (was zp ZP_WORD:27) zp ZP_WORD:19 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated (was zp ZP_BYTE:29) zp ZP_BYTE:21 [ sin8s::isUpper#10 ]
Allocated (was zp ZP_WORD:30) zp ZP_WORD:22 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 ]
Allocated (was zp ZP_BYTE:36) zp ZP_BYTE:24 [ mulu8_sel::select#5 ]
Allocated (was zp ZP_WORD:37) zp ZP_WORD:25 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated (was zp ZP_WORD:39) zp ZP_WORD:27 [ divr16u::dividend#2 divr16u::dividend#0 ]
Allocated (was zp ZP_WORD:41) zp ZP_WORD:29 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
Allocated (was zp ZP_WORD:44) zp ZP_WORD:31 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated (was zp ZP_BYTE:51) zp ZP_BYTE:33 [ sin8u_table::sinx#0 ]
Allocated (was zp ZP_BYTE:64) zp ZP_BYTE:34 [ sin8s::x1#0 ]
Allocated (was zp ZP_BYTE:68) zp ZP_BYTE:35 [ sin8s::x3#0 ]
Allocated (was zp ZP_BYTE:71) zp ZP_BYTE:36 [ sin8s::usinx#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_char_cursor = $f
  .label print_line_cursor = 8
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label tabsize = $14
  //SEG11 [5] call print_cls 
  //SEG12 [210] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [7] call sin8u_table 
  //SEG16 [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
  sin8u_table_from_b1:
    jsr sin8u_table
    jmp breturn
  //SEG17 main::@return
  breturn:
  //SEG18 [8] return 
    rts
    sintab: .fill $14, 0
}
//SEG19 sin8u_table
// Generate unsigned byte sinus table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sinus points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zeropage(4) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .label amplitude = max-min
    .const sum = min+max
    .const mid = sum/2+1
    .label step = $1d
    .label sinx = $21
    .label sintab = 4
    .label x = 2
    .label i = 6
  //SEG20 [10] call div16u 
  //SEG21 [188] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
  div16u_from_sin8u_table:
    jsr div16u
  //SEG22 [11] (word) div16u::return#2 ← (word) div16u::return#0
    jmp b2
  //SEG23 sin8u_table::@2
  b2:
  //SEG24 [12] (word) sin8u_table::step#0 ← (word) div16u::return#2
  //SEG25 [13] call print_str 
  //SEG26 [84] phi from sin8u_table::@2 to print_str [phi:sin8u_table::@2->print_str]
  print_str_from_b2:
  //SEG27 [84] phi (byte*) print_char_cursor#105 = (byte*) 1024 [phi:sin8u_table::@2->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG28 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str [phi:sin8u_table::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b3
  //SEG29 sin8u_table::@3
  b3:
  //SEG30 [14] (word) print_word::w#1 ← (word) sin8u_table::step#0 -- vwuz1=vwuz2 
    lda step
    sta print_word.w
    lda step+1
    sta print_word.w+1
  //SEG31 [15] call print_word 
  //SEG32 [100] phi from sin8u_table::@3 to print_word [phi:sin8u_table::@3->print_word]
  print_word_from_b3:
  //SEG33 [100] phi (byte*) print_char_cursor#99 = (byte*) print_char_cursor#2 [phi:sin8u_table::@3->print_word#0] -- register_copy 
  //SEG34 [100] phi (word) print_word::w#3 = (word) print_word::w#1 [phi:sin8u_table::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG35 [16] phi from sin8u_table::@3 to sin8u_table::@4 [phi:sin8u_table::@3->sin8u_table::@4]
  b4_from_b3:
    jmp b4
  //SEG36 sin8u_table::@4
  b4:
  //SEG37 [17] call print_str 
  //SEG38 [84] phi from sin8u_table::@4 to print_str [phi:sin8u_table::@4->print_str]
  print_str_from_b4:
  //SEG39 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@4->print_str#0] -- register_copy 
  //SEG40 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str1 [phi:sin8u_table::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG41 [18] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  b5_from_b4:
    jmp b5
  //SEG42 sin8u_table::@5
  b5:
  //SEG43 [19] call print_byte 
  //SEG44 [72] phi from sin8u_table::@5 to print_byte [phi:sin8u_table::@5->print_byte]
  print_byte_from_b5:
  //SEG45 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@5->print_byte#0] -- register_copy 
  //SEG46 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@5->print_byte#1] -- vbuz1=vbuc1 
    lda #min
    sta print_byte.b
    jsr print_byte
  //SEG47 [20] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  b6_from_b5:
    jmp b6
  //SEG48 sin8u_table::@6
  b6:
  //SEG49 [21] call print_str 
  //SEG50 [84] phi from sin8u_table::@6 to print_str [phi:sin8u_table::@6->print_str]
  print_str_from_b6:
  //SEG51 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@6->print_str#0] -- register_copy 
  //SEG52 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str2 [phi:sin8u_table::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG53 [22] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  b7_from_b6:
    jmp b7
  //SEG54 sin8u_table::@7
  b7:
  //SEG55 [23] call print_byte 
  //SEG56 [72] phi from sin8u_table::@7 to print_byte [phi:sin8u_table::@7->print_byte]
  print_byte_from_b7:
  //SEG57 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@7->print_byte#0] -- register_copy 
  //SEG58 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@7->print_byte#1] -- vbuz1=vbuc1 
    lda #max
    sta print_byte.b
    jsr print_byte
  //SEG59 [24] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  b8_from_b7:
    jmp b8
  //SEG60 sin8u_table::@8
  b8:
  //SEG61 [25] call print_str 
  //SEG62 [84] phi from sin8u_table::@8 to print_str [phi:sin8u_table::@8->print_str]
  print_str_from_b8:
  //SEG63 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@8->print_str#0] -- register_copy 
  //SEG64 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str3 [phi:sin8u_table::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
  //SEG65 [26] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  b9_from_b8:
    jmp b9
  //SEG66 sin8u_table::@9
  b9:
  //SEG67 [27] call print_byte 
  //SEG68 [72] phi from sin8u_table::@9 to print_byte [phi:sin8u_table::@9->print_byte]
  print_byte_from_b9:
  //SEG69 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@9->print_byte#0] -- register_copy 
  //SEG70 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@9->print_byte#1] -- vbuz1=vbuc1 
    lda #amplitude
    sta print_byte.b
    jsr print_byte
  //SEG71 [28] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  b10_from_b9:
    jmp b10
  //SEG72 sin8u_table::@10
  b10:
  //SEG73 [29] call print_str 
  //SEG74 [84] phi from sin8u_table::@10 to print_str [phi:sin8u_table::@10->print_str]
  print_str_from_b10:
  //SEG75 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@10->print_str#0] -- register_copy 
  //SEG76 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str4 [phi:sin8u_table::@10->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
  //SEG77 [30] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  b11_from_b10:
    jmp b11
  //SEG78 sin8u_table::@11
  b11:
  //SEG79 [31] call print_byte 
  //SEG80 [72] phi from sin8u_table::@11 to print_byte [phi:sin8u_table::@11->print_byte]
  print_byte_from_b11:
  //SEG81 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@11->print_byte#0] -- register_copy 
  //SEG82 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@11->print_byte#1] -- vbuz1=vbuc1 
    lda #mid
    sta print_byte.b
    jsr print_byte
  //SEG83 [32] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  b12_from_b11:
    jmp b12
  //SEG84 sin8u_table::@12
  b12:
  //SEG85 [33] call print_ln 
  //SEG86 [67] phi from sin8u_table::@12 to print_ln [phi:sin8u_table::@12->print_ln]
  print_ln_from_b12:
  //SEG87 [67] phi (byte*) print_line_cursor#23 = (byte*) 1024 [phi:sin8u_table::@12->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
  //SEG88 [34] phi from sin8u_table::@12 to sin8u_table::@1 [phi:sin8u_table::@12->sin8u_table::@1]
  b1_from_b12:
  //SEG89 [34] phi (word) sin8u_table::i#10 = (byte) 0 [phi:sin8u_table::@12->sin8u_table::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG90 [34] phi (byte*) sin8u_table::sintab#2 = (const byte[$14]) main::sintab#0 [phi:sin8u_table::@12->sin8u_table::@1#1] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta sintab
    lda #>main.sintab
    sta sintab+1
  //SEG91 [34] phi (word) sin8u_table::x#10 = (byte) 0 [phi:sin8u_table::@12->sin8u_table::@1#2] -- vwuz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    jmp b1
  // u[4.12]
  //SEG92 [34] phi from sin8u_table::@23 to sin8u_table::@1 [phi:sin8u_table::@23->sin8u_table::@1]
  b1_from_b23:
  //SEG93 [34] phi (word) sin8u_table::i#10 = (word) sin8u_table::i#1 [phi:sin8u_table::@23->sin8u_table::@1#0] -- register_copy 
  //SEG94 [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@23->sin8u_table::@1#1] -- register_copy 
  //SEG95 [34] phi (word) sin8u_table::x#10 = (word) sin8u_table::x#1 [phi:sin8u_table::@23->sin8u_table::@1#2] -- register_copy 
    jmp b1
  //SEG96 sin8u_table::@1
  b1:
  //SEG97 [35] (word) sin8s::x#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda x
    sta sin8s.x
    lda x+1
    sta sin8s.x+1
  //SEG98 [36] call sin8s 
    jsr sin8s
  //SEG99 [37] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
    jmp b13
  //SEG100 sin8u_table::@13
  b13:
  //SEG101 [38] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2 -- vbsz1=vbsaa 
    sta sinx
  //SEG102 [39] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0 -- vbsyy=vbsz1 
    ldy sinx
  //SEG103 [40] call mul8su 
    jsr mul8su
    jmp b14
  //SEG104 sin8u_table::@14
  b14:
  //SEG105 [41] (byte~) sin8u_table::$21 ← > (signed word)(word) mul8su::m#2 -- vbuaa=_hi_vwsz1 
    lda mul8su.m+1
  //SEG106 [42] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$21 -- vbuxx=vbuc1_plus_vbuaa 
    tax
    axs #-[mid]
  //SEG107 [43] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (sintab),y
  //SEG108 [44] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc sintab
    bne !+
    inc sintab+1
  !:
  //SEG109 [45] (byte*~) print_char_cursor#113 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG110 [46] call print_str 
  //SEG111 [84] phi from sin8u_table::@14 to print_str [phi:sin8u_table::@14->print_str]
  print_str_from_b14:
  //SEG112 [84] phi (byte*) print_char_cursor#105 = (byte*~) print_char_cursor#113 [phi:sin8u_table::@14->print_str#0] -- register_copy 
  //SEG113 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str5 [phi:sin8u_table::@14->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta print_str.str
    lda #>str5
    sta print_str.str+1
    jsr print_str
    jmp b15
  //SEG114 sin8u_table::@15
  b15:
  //SEG115 [47] (word) print_word::w#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda x
    sta print_word.w
    lda x+1
    sta print_word.w+1
  //SEG116 [48] call print_word 
  //SEG117 [100] phi from sin8u_table::@15 to print_word [phi:sin8u_table::@15->print_word]
  print_word_from_b15:
  //SEG118 [100] phi (byte*) print_char_cursor#99 = (byte*) print_char_cursor#2 [phi:sin8u_table::@15->print_word#0] -- register_copy 
  //SEG119 [100] phi (word) print_word::w#3 = (word) print_word::w#2 [phi:sin8u_table::@15->print_word#1] -- register_copy 
    jsr print_word
  //SEG120 [49] phi from sin8u_table::@15 to sin8u_table::@16 [phi:sin8u_table::@15->sin8u_table::@16]
  b16_from_b15:
    jmp b16
  //SEG121 sin8u_table::@16
  b16:
  //SEG122 [50] call print_str 
  //SEG123 [84] phi from sin8u_table::@16 to print_str [phi:sin8u_table::@16->print_str]
  print_str_from_b16:
  //SEG124 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@16->print_str#0] -- register_copy 
  //SEG125 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str6 [phi:sin8u_table::@16->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta print_str.str
    lda #>str6
    sta print_str.str+1
    jsr print_str
    jmp b17
  //SEG126 sin8u_table::@17
  b17:
  //SEG127 [51] (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#0 -- vbsz1=vbsz2 
    lda sinx
    sta print_sbyte.b
  //SEG128 [52] call print_sbyte 
    jsr print_sbyte
  //SEG129 [53] phi from sin8u_table::@17 to sin8u_table::@18 [phi:sin8u_table::@17->sin8u_table::@18]
  b18_from_b17:
    jmp b18
  //SEG130 sin8u_table::@18
  b18:
  //SEG131 [54] call print_str 
  //SEG132 [84] phi from sin8u_table::@18 to print_str [phi:sin8u_table::@18->print_str]
  print_str_from_b18:
  //SEG133 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@18->print_str#0] -- register_copy 
  //SEG134 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str7 [phi:sin8u_table::@18->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta print_str.str
    lda #>str7
    sta print_str.str+1
    jsr print_str
  //SEG135 [55] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
  b19_from_b18:
    jmp b19
  //SEG136 sin8u_table::@19
  b19:
  //SEG137 [56] call print_sword 
    jsr print_sword
  //SEG138 [57] phi from sin8u_table::@19 to sin8u_table::@20 [phi:sin8u_table::@19->sin8u_table::@20]
  b20_from_b19:
    jmp b20
  //SEG139 sin8u_table::@20
  b20:
  //SEG140 [58] call print_str 
  //SEG141 [84] phi from sin8u_table::@20 to print_str [phi:sin8u_table::@20->print_str]
  print_str_from_b20:
  //SEG142 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@20->print_str#0] -- register_copy 
  //SEG143 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str8 [phi:sin8u_table::@20->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta print_str.str
    lda #>str8
    sta print_str.str+1
    jsr print_str
    jmp b21
  //SEG144 sin8u_table::@21
  b21:
  //SEG145 [59] (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#0 -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG146 [60] call print_byte 
  //SEG147 [72] phi from sin8u_table::@21 to print_byte [phi:sin8u_table::@21->print_byte]
  print_byte_from_b21:
  //SEG148 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@21->print_byte#0] -- register_copy 
  //SEG149 [72] phi (byte) print_byte::b#8 = (byte) print_byte::b#7 [phi:sin8u_table::@21->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG150 [61] phi from sin8u_table::@21 to sin8u_table::@22 [phi:sin8u_table::@21->sin8u_table::@22]
  b22_from_b21:
    jmp b22
  //SEG151 sin8u_table::@22
  b22:
  //SEG152 [62] call print_ln 
  //SEG153 [67] phi from sin8u_table::@22 to print_ln [phi:sin8u_table::@22->print_ln]
  print_ln_from_b22:
  //SEG154 [67] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:sin8u_table::@22->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b23
  //SEG155 sin8u_table::@23
  b23:
  //SEG156 [63] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
  //SEG157 [64] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG158 [65] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.tabsize
    bcc b1_from_b23
    bne !+
    lda i
    cmp #<main.tabsize
    bcc b1_from_b23
  !:
    jmp breturn
  //SEG159 sin8u_table::@return
  breturn:
  //SEG160 [66] return 
    rts
    str: .text "step:@"
    str1: .text " min:@"
    str2: .text " max:@"
    str3: .text " ampl:@"
    str4: .text " mid:@"
    str5: .text "x: @"
    str6: .text " sin: @"
    str7: .text " scaled: @"
    str8: .text " trans: @"
}
//SEG161 print_ln
// Print a newline
print_ln: {
  //SEG162 [68] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG163 [68] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG164 print_ln::@1
  b1:
  //SEG165 [69] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG166 [70] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#18) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG167 print_ln::@return
  breturn:
  //SEG168 [71] return 
    rts
}
//SEG169 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($a) b)
print_byte: {
    .label b = $a
  //SEG170 [73] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG171 [74] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG172 [75] call print_char 
  //SEG173 [80] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG174 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#100 [phi:print_byte->print_char#0] -- register_copy 
  //SEG175 [80] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG176 print_byte::@1
  b1:
  //SEG177 [76] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG178 [77] (byte) print_char::ch#4 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG179 [78] call print_char 
  //SEG180 [80] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG181 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#18 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG182 [80] phi (byte) print_char::ch#5 = (byte) print_char::ch#4 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG183 print_byte::@return
  breturn:
  //SEG184 [79] return 
    rts
}
//SEG185 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG186 [81] *((byte*) print_char_cursor#64) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG187 [82] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#64 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG188 print_char::@return
  breturn:
  //SEG189 [83] return 
    rts
}
//SEG190 print_str
// Print a zero-terminated string
// print_str(byte* zeropage($b) str)
print_str: {
    .label str = $b
  //SEG191 [85] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG192 [85] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#105 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG193 [85] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG194 print_str::@1
  b1:
  //SEG195 [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG196 print_str::@return
  breturn:
  //SEG197 [87] return 
    rts
  //SEG198 print_str::@2
  b2:
  //SEG199 [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG200 [89] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG201 [90] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG202 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage($d) w)
print_sword: {
    .label w = $d
  //SEG203 [91] if((signed word)(word) mul8su::m#2>=(signed byte) 0) goto print_sword::@4 -- vwsz1_ge_0_then_la1 
    lda mul8su.m+1
    bpl b4
  //SEG204 [92] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG205 print_sword::@2
  b2:
  //SEG206 [93] call print_char 
  //SEG207 [80] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG208 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#2 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG209 [80] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b3
  //SEG210 print_sword::@3
  b3:
  //SEG211 [94] (signed word) print_sword::w#0 ← - (signed word)(word) mul8su::m#2 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG212 [95] phi from print_sword::@3 print_sword::@4 to print_sword::@1 [phi:print_sword::@3/print_sword::@4->print_sword::@1]
  b1_from_b3:
  b1_from_b4:
  //SEG213 [95] phi (byte*) print_char_cursor#94 = (byte*) print_char_cursor#18 [phi:print_sword::@3/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG214 [95] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#0 [phi:print_sword::@3/print_sword::@4->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG215 print_sword::@1
  b1:
  //SEG216 [96] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3 -- vwuz1=vwuz2 
    lda w
    sta print_word.w
    lda w+1
    sta print_word.w+1
  //SEG217 [97] call print_word 
  //SEG218 [100] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  print_word_from_b1:
  //SEG219 [100] phi (byte*) print_char_cursor#99 = (byte*) print_char_cursor#94 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG220 [100] phi (word) print_word::w#3 = (word~) print_word::w#5 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG221 print_sword::@return
  breturn:
  //SEG222 [98] return 
    rts
  //SEG223 print_sword::@4
  b4:
  //SEG224 [99] (signed word~) print_sword::w#6 ← (signed word)(word) mul8su::m#2
    jmp b1_from_b4
}
//SEG225 print_word
// Print a word as HEX
// print_word(word zeropage($11) w)
print_word: {
    .label w = $11
  //SEG226 [101] (byte) print_byte::b#1 ← > (word) print_word::w#3 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG227 [102] call print_byte 
  //SEG228 [72] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG229 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#99 [phi:print_word->print_byte#0] -- register_copy 
  //SEG230 [72] phi (byte) print_byte::b#8 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG231 print_word::@1
  b1:
  //SEG232 [103] (byte) print_byte::b#2 ← < (word) print_word::w#3 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG233 [104] call print_byte 
  //SEG234 [72] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG235 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#18 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG236 [72] phi (byte) print_byte::b#8 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG237 print_word::@return
  breturn:
  //SEG238 [105] return 
    rts
}
//SEG239 print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage($a) b)
print_sbyte: {
    .label b = $a
  //SEG240 [106] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda b
    bmi b1_from_print_sbyte
  //SEG241 [107] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  b3_from_print_sbyte:
    jmp b3
  //SEG242 print_sbyte::@3
  b3:
  //SEG243 [108] call print_char 
  //SEG244 [80] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  print_char_from_b3:
  //SEG245 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#2 [phi:print_sbyte::@3->print_char#0] -- register_copy 
  //SEG246 [80] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG247 [109] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG248 [109] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
    jmp b2
  //SEG249 print_sbyte::@2
  b2:
  //SEG250 [110] (byte~) print_byte::b#10 ← (byte)(signed byte) print_sbyte::b#4
  //SEG251 [111] call print_byte 
  //SEG252 [72] phi from print_sbyte::@2 to print_byte [phi:print_sbyte::@2->print_byte]
  print_byte_from_b2:
  //SEG253 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#18 [phi:print_sbyte::@2->print_byte#0] -- register_copy 
  //SEG254 [72] phi (byte) print_byte::b#8 = (byte~) print_byte::b#10 [phi:print_sbyte::@2->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG255 print_sbyte::@return
  breturn:
  //SEG256 [112] return 
    rts
  //SEG257 [113] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  b1_from_print_sbyte:
    jmp b1
  //SEG258 print_sbyte::@1
  b1:
  //SEG259 [114] call print_char 
  //SEG260 [80] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  print_char_from_b1:
  //SEG261 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#2 [phi:print_sbyte::@1->print_char#0] -- register_copy 
  //SEG262 [80] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG263 print_sbyte::@4
  b4:
  //SEG264 [115] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
    jmp b2_from_b4
}
//SEG265 mul8su
// Multiply a signed byte and an unsigned byte (into a signed word)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte register(Y) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label m = $d
  //SEG266 [116] (byte~) mul8u::a#8 ← (byte)(signed byte) mul8su::a#0 -- vbuxx=vbuyy 
    tya
    tax
  //SEG267 [117] call mul8u 
  //SEG268 [126] phi from mul8su to mul8u [phi:mul8su->mul8u]
  mul8u_from_mul8su:
  //SEG269 [126] phi (byte) mul8u::a#6 = (byte~) mul8u::a#8 [phi:mul8su->mul8u#0] -- register_copy 
  //SEG270 [126] phi (word) mul8u::mb#0 = (const byte) mul8su::b#0 [phi:mul8su->mul8u#1] -- vwuz1=vbuc1 
    lda #b
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG271 [118] (word) mul8u::return#2 ← (word) mul8u::res#2
    jmp b3
  //SEG272 mul8su::@3
  b3:
  //SEG273 [119] (word) mul8su::m#0 ← (word) mul8u::return#2
  //SEG274 [120] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl b1_from_b3
    jmp b2
  //SEG275 mul8su::@2
  b2:
  //SEG276 [121] (byte~) mul8su::$7 ← > (word) mul8su::m#0 -- vbuaa=_hi_vwuz1 
    lda m+1
  //SEG277 [122] (byte~) mul8su::$10 ← (byte~) mul8su::$7 - (const byte) mul8su::b#0 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #b
  //SEG278 [123] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$10 -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
  //SEG279 [124] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
  b1_from_b2:
  b1_from_b3:
  //SEG280 [124] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
    jmp b1
  //SEG281 mul8su::@1
  b1:
    jmp breturn
  //SEG282 mul8su::@return
  breturn:
  //SEG283 [125] return 
    rts
}
//SEG284 mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $13
    .label res = $d
    .label return = $d
  //SEG285 [127] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  b1_from_mul8u:
  //SEG286 [127] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
  //SEG287 [127] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
  //SEG288 [127] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp b1
  //SEG289 mul8u::@1
  b1:
  //SEG290 [128] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b2
    jmp breturn
  //SEG291 mul8u::@return
  breturn:
  //SEG292 [129] return 
    rts
  //SEG293 mul8u::@2
  b2:
  //SEG294 [130] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG295 [131] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3_from_b2
    jmp b4
  //SEG296 mul8u::@4
  b4:
  //SEG297 [132] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG298 [133] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG299 [133] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp b3
  //SEG300 mul8u::@3
  b3:
  //SEG301 [134] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
  //SEG302 [135] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG303 [127] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  b1_from_b3:
  //SEG304 [127] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
  //SEG305 [127] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
  //SEG306 [127] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG307 sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage($16) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label _4 = $16
    .label x = $16
    .label x1 = $22
    .label x3 = $23
    .label usinx = $24
    .label isUpper = $15
  //SEG308 [136] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b1_from_sin8s
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b1_from_sin8s
  !:
    jmp b5
  //SEG309 sin8s::@5
  b5:
  //SEG310 [137] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG311 [138] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  b1_from_b5:
  //SEG312 [138] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG313 [138] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG314 [138] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b1_from_sin8s:
  //SEG315 [138] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG316 [138] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG317 sin8s::@1
  b1:
  //SEG318 [139] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2_from_b1
  !:
    jmp b6
  //SEG319 sin8s::@6
  b6:
  //SEG320 [140] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG321 [141] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  b2_from_b1:
  b2_from_b6:
  //SEG322 [141] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp b2
  //SEG323 sin8s::@2
  b2:
  //SEG324 [142] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _4
    rol _4+1
    asl _4
    rol _4+1
    asl _4
    rol _4+1
  //SEG325 [143] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda _4+1
    sta x1
  //SEG326 [144] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    ldx x1
  //SEG327 [145] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG328 [146] call mulu8_sel 
  //SEG329 [179] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from_b2:
  //SEG330 [179] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG331 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
  //SEG332 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG333 [147] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
    jmp b9
  //SEG334 sin8s::@9
  b9:
  //SEG335 [148] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  //SEG336 [149] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
  //SEG337 [150] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG338 [151] call mulu8_sel 
  //SEG339 [179] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from_b9:
  //SEG340 [179] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG341 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
  //SEG342 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG343 [152] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
    jmp b10
  //SEG344 sin8s::@10
  b10:
  //SEG345 [153] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta x3
  //SEG346 [154] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx x3
  //SEG347 [155] call mulu8_sel 
  //SEG348 [179] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from_b10:
  //SEG349 [179] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG350 [179] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6#0 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
  //SEG351 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG352 [156] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
    jmp b11
  //SEG353 sin8s::@11
  b11:
  //SEG354 [157] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  //SEG355 [158] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc x1
    sta usinx
  //SEG356 [159] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx x3
  //SEG357 [160] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG358 [161] call mulu8_sel 
  //SEG359 [179] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from_b11:
  //SEG360 [179] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG361 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
  //SEG362 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG363 [162] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
    jmp b12
  //SEG364 sin8s::@12
  b12:
  //SEG365 [163] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  //SEG366 [164] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
  //SEG367 [165] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG368 [166] call mulu8_sel 
  //SEG369 [179] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from_b12:
  //SEG370 [179] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG371 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
  //SEG372 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG373 [167] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
    jmp b13
  //SEG374 sin8s::@13
  b13:
  //SEG375 [168] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  //SEG376 [169] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
  //SEG377 [170] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc usinx
    tax
  //SEG378 [171] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc b3_from_b13
    jmp b7
  //SEG379 sin8s::@7
  b7:
  //SEG380 [172] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
  //SEG381 [173] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  b3_from_b13:
  b3_from_b7:
  //SEG382 [173] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp b3
  //SEG383 sin8s::@3
  b3:
  //SEG384 [174] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b14
    jmp b8
  //SEG385 sin8s::@8
  b8:
  //SEG386 [175] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG387 [176] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  b4_from_b14:
  b4_from_b8:
  //SEG388 [176] phi (signed byte) sin8s::return#0 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp b4
  //SEG389 sin8s::@4
  b4:
    jmp breturn
  //SEG390 sin8s::@return
  breturn:
  //SEG391 [177] return 
    rts
  //SEG392 sin8s::@14
  b14:
  //SEG393 [178] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    jmp b4_from_b14
}
//SEG394 mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zeropage($18) select)
mulu8_sel: {
    .label _0 = $d
    .label _1 = $d
    .label select = $18
  //SEG395 [180] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  //SEG396 [181] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
  //SEG397 [182] call mul8u 
  //SEG398 [126] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  mul8u_from_mulu8_sel:
  //SEG399 [126] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
  //SEG400 [126] phi (word) mul8u::mb#0 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- vwuz1=vbuaa 
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG401 [183] (word) mul8u::return#3 ← (word) mul8u::res#2
    jmp b1
  //SEG402 mulu8_sel::@1
  b1:
  //SEG403 [184] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
  //SEG404 [185] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy select
    beq !e+
  !:
    asl _1
    rol _1+1
    dey
    bne !-
  !e:
  //SEG405 [186] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda _1+1
    jmp breturn
  //SEG406 mulu8_sel::@return
  breturn:
  //SEG407 [187] return 
    rts
}
//SEG408 div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $1d
  //SEG409 [189] call divr16u 
  //SEG410 [193] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
  //SEG411 [190] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp b1
  //SEG412 div16u::@1
  b1:
  //SEG413 [191] (word) div16u::return#0 ← (word) divr16u::return#2
    jmp breturn
  //SEG414 div16u::@return
  breturn:
  //SEG415 [192] return 
    rts
}
//SEG416 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($1b) dividend, word zeropage($19) rem)
divr16u: {
    .label rem = $19
    .label dividend = $1b
    .label quotient = $1d
    .label return = $1d
  //SEG417 [194] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG418 [194] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG419 [194] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG420 [194] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12#0 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta dividend
    lda #>PI2_u4f12
    sta dividend+1
  //SEG421 [194] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #0
    sta rem
    lda #0
    sta rem+1
    jmp b1
  //SEG422 [194] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG423 [194] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG424 [194] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG425 [194] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG426 [194] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG427 divr16u::@1
  b1:
  //SEG428 [195] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG429 [196] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG430 [197] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG431 [198] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG432 divr16u::@4
  b4:
  //SEG433 [199] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG434 [200] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG435 [200] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG436 divr16u::@2
  b2:
  //SEG437 [201] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG438 [202] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG439 [203] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.tabsize
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<main.tabsize
    bcc b3_from_b2
  !:
    jmp b5
  //SEG440 divr16u::@5
  b5:
  //SEG441 [204] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG442 [205] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.tabsize
    sta rem
    lda rem+1
    sbc #>main.tabsize
    sta rem+1
  //SEG443 [206] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG444 [206] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG445 [206] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG446 divr16u::@3
  b3:
  //SEG447 [207] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG448 [208] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp breturn
  //SEG449 divr16u::@return
  breturn:
  //SEG450 [209] return 
    rts
}
//SEG451 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $1f
  //SEG452 [211] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG453 [211] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG454 [211] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG455 [211] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG456 print_cls::@1
  b1:
  //SEG457 [212] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG458 [213] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG459 [214] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG460 print_cls::@return
  breturn:
  //SEG461 [215] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b1
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b18
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b21
Removing instruction jmp b22
Removing instruction jmp b23
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b8
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldy sinx with TAY
Removing instruction ldy #0
Removing instruction lda #0
Replacing instruction ldx x1 with TAX
Replacing instruction ldy x1 with TAY
Replacing instruction ldx x3 with TAX
Replacing instruction lda #0 with TXA
Removing instruction lda #0
Replacing instruction lda #0 with TXA
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b23 with b1
Replacing label b1_from_b23 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b2 with b1
Replacing label b1_from_b4 with b1
Replacing label b1_from_print_sbyte with b1
Replacing label b2_from_b4 with b2
Replacing label b1_from_b3 with b1
Replacing label b3_from_b2 with b3
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b13 with b3
Replacing label b4_from_b14 with b4
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction sin8u_table_from_b1:
Removing instruction print_str_from_b2:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b5_from_b4:
Removing instruction print_byte_from_b5:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b7_from_b6:
Removing instruction print_byte_from_b7:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b9_from_b8:
Removing instruction print_byte_from_b9:
Removing instruction b10_from_b9:
Removing instruction print_str_from_b10:
Removing instruction b11_from_b10:
Removing instruction print_byte_from_b11:
Removing instruction b12_from_b11:
Removing instruction print_ln_from_b12:
Removing instruction b1_from_b23:
Removing instruction b16_from_b15:
Removing instruction print_str_from_b16:
Removing instruction b18_from_b17:
Removing instruction print_str_from_b18:
Removing instruction b19_from_b18:
Removing instruction b20_from_b19:
Removing instruction print_str_from_b20:
Removing instruction b22_from_b21:
Removing instruction print_ln_from_b22:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b2_from_print_sword:
Removing instruction print_char_from_b2:
Removing instruction b1_from_b3:
Removing instruction b1_from_b4:
Removing instruction b3_from_print_sbyte:
Removing instruction print_char_from_b3:
Removing instruction b2_from_b3:
Removing instruction b2_from_b4:
Removing instruction print_byte_from_b2:
Removing instruction b1_from_print_sbyte:
Removing instruction print_char_from_b1:
Removing instruction b1_from_b2:
Removing instruction b1_from_b3:
Removing instruction breturn:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b6:
Removing instruction b3_from_b13:
Removing instruction b3_from_b7:
Removing instruction b4_from_b14:
Removing instruction b4_from_b8:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1:
Removing instruction breturn:
Removing instruction div16u_from_sin8u_table:
Removing instruction b2:
Removing instruction b3:
Removing instruction print_word_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b1_from_b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction print_str_from_b14:
Removing instruction b15:
Removing instruction print_word_from_b15:
Removing instruction b16:
Removing instruction b17:
Removing instruction b18:
Removing instruction b19:
Removing instruction b20:
Removing instruction b21:
Removing instruction print_byte_from_b21:
Removing instruction b22:
Removing instruction b23:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b3:
Removing instruction print_word_from_b1:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b4:
Removing instruction mul8u_from_mul8su:
Removing instruction b3:
Removing instruction b2:
Removing instruction b1_from_mul8u:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b3:
Removing instruction b5:
Removing instruction b1_from_b5:
Removing instruction b6:
Removing instruction mulu8_sel_from_b2:
Removing instruction b9:
Removing instruction mulu8_sel_from_b9:
Removing instruction b10:
Removing instruction mulu8_sel_from_b10:
Removing instruction b11:
Removing instruction mulu8_sel_from_b11:
Removing instruction b12:
Removing instruction mulu8_sel_from_b12:
Removing instruction b13:
Removing instruction b7:
Removing instruction b8:
Removing instruction mul8u_from_mulu8_sel:
Removing instruction b1:
Removing instruction breturn:
Removing instruction divr16u_from_div16u:
Removing instruction b1:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to b1 in bpl b4
Replacing jump to rts with rts in jmp b4
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b1_from_sin8s to b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b4:
Removing instruction b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b1
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [166] bcc b1 to bcs
Fixing long branch [172] bcc b1 to bcs

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(word) PI2_u4f12
(const word) PI2_u4f12#0 PI2_u4f12 = (word) $6488
(word) PI_HALF_u4f12
(const word) PI_HALF_u4f12#0 PI_HALF_u4f12 = (word) $1922
(word) PI_u4f12
(const word) PI_u4f12#0 PI_u4f12 = (word) $3244
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 return zp ZP_WORD:29 1.3333333333333333
(word) div16u::return#2 return zp ZP_WORD:29 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:27 2.75
(word) divr16u::dividend#2 dividend zp ZP_WORD:27 4.714285714285714
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:29 16.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:29 11.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:29 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:25 8.25
(word) divr16u::rem#1 rem zp ZP_WORD:25 22.0
(word) divr16u::rem#2 rem zp ZP_WORD:25 22.0
(word) divr16u::rem#4 rem zp ZP_WORD:25 22.0
(word) divr16u::rem#5 rem zp ZP_WORD:25 11.0
(word) divr16u::rem#9 rem zp ZP_WORD:25 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:29 7.000000000000001
(word) divr16u::return#2 return zp ZP_WORD:29 4.0
(void()) main()
(label) main::@1
(label) main::@return
(byte[$14]) main::sintab
(const byte[$14]) main::sintab#0 sintab = { fill( $14, 0) }
(word) main::tabsize
(const word) main::tabsize#0 tabsize = (byte) $14
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$10 reg byte a 4.0
(byte~) mul8su::$7 reg byte a 4.0
(label) mul8su::@1
(label) mul8su::@2
(label) mul8su::@3
(label) mul8su::@return
(signed byte) mul8su::a
(signed byte) mul8su::a#0 reg byte y 2.6
(byte) mul8su::b
(const byte) mul8su::b#0 b = (const byte) sin8u_table::amplitude#0+(byte) 1
(word) mul8su::m
(word) mul8su::m#0 m zp ZP_WORD:13 2.0
(word) mul8su::m#1 m zp ZP_WORD:13 4.0
(word) mul8su::m#2 m zp ZP_WORD:13 0.19047619047619047
(signed word) mul8su::return
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 202.0
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 101.0
(byte) mul8u::a#2 reg byte x 2.0
(byte) mul8u::a#3 reg byte x 67.66666666666666
(byte) mul8u::a#6 reg byte x 6.0
(byte~) mul8u::a#8 reg byte x 4.0
(byte) mul8u::b
(byte) mul8u::b#1 reg byte a 4.0
(word) mul8u::mb
(word) mul8u::mb#0 mb zp ZP_WORD:19 4.0
(word) mul8u::mb#1 mb zp ZP_WORD:19 202.0
(word) mul8u::mb#2 mb zp ZP_WORD:19 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 res zp ZP_WORD:13 202.0
(word) mul8u::res#2 res zp ZP_WORD:13 43.85714285714286
(word) mul8u::res#6 res zp ZP_WORD:13 101.0
(word) mul8u::return
(word) mul8u::return#2 return zp ZP_WORD:13 4.0
(word) mul8u::return#3 return zp ZP_WORD:13 4.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 $0 zp ZP_WORD:13 4.0
(word~) mulu8_sel::$1 $1 zp ZP_WORD:13 4.0
(label) mulu8_sel::@1
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 reg byte a 4.0
(byte) mulu8_sel::return#1 reg byte a 4.0
(byte) mulu8_sel::return#10 reg byte a 4.0
(byte) mulu8_sel::return#11 reg byte a 4.0
(byte) mulu8_sel::return#12 reg byte a 1.714285714285714
(byte) mulu8_sel::return#2 reg byte a 4.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 select zp ZP_BYTE:24 0.3333333333333333
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 reg byte x 2.0
(byte) mulu8_sel::v1#1 reg byte x 2.0
(byte) mulu8_sel::v1#2 reg byte x 4.0
(byte) mulu8_sel::v1#3 reg byte x 2.0
(byte) mulu8_sel::v1#4 reg byte x 2.0
(byte) mulu8_sel::v1#5 reg byte x 12.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 reg byte y 4.0
(byte) mulu8_sel::v2#1 reg byte y 4.0
(byte) mulu8_sel::v2#3 reg byte y 4.0
(byte) mulu8_sel::v2#4 reg byte y 4.0
(byte) mulu8_sel::v2#5 reg byte y 5.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#1 b zp ZP_BYTE:10 4.0
(byte~) print_byte::b#10 b zp ZP_BYTE:10 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:10 4.0
(byte) print_byte::b#7 b zp ZP_BYTE:10 22.0
(byte) print_byte::b#8 b zp ZP_BYTE:10 5.25
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 4.0
(byte) print_char::ch#5 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:15 101.0
(byte*) print_char_cursor#100 print_char_cursor zp ZP_WORD:15 9.0
(byte*) print_char_cursor#105 print_char_cursor zp ZP_WORD:15 54.0
(byte*~) print_char_cursor#113 print_char_cursor zp ZP_WORD:15 22.0
(byte*) print_char_cursor#18 print_char_cursor zp ZP_WORD:15 3.454545454545454
(byte*) print_char_cursor#2 print_char_cursor zp ZP_WORD:15 12.321428571428571
(byte*) print_char_cursor#64 print_char_cursor zp ZP_WORD:15 7.0
(byte*) print_char_cursor#94 print_char_cursor zp ZP_WORD:15 3.0
(byte*) print_char_cursor#99 print_char_cursor zp ZP_WORD:15 8.5
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:31 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:31 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:8 9.027777777777777
(byte*) print_line_cursor#12 print_line_cursor zp ZP_WORD:8 204.0
(byte*) print_line_cursor#23 print_line_cursor zp ZP_WORD:8 13.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp ZP_BYTE:10 4.0
(signed byte) print_sbyte::b#1 b zp ZP_BYTE:10 2.8333333333333335
(signed byte) print_sbyte::b#4 b zp ZP_BYTE:10 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:11 202.0
(byte*) print_str::str#10 str zp ZP_WORD:11 101.5
(byte*) print_str::str#12 str zp ZP_WORD:11 2.0
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:13 4.0
(signed word) print_sword::w#3 w zp ZP_WORD:13 4.0
(signed word~) print_sword::w#6 w zp ZP_WORD:13 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#1 w zp ZP_WORD:17 4.0
(word) print_word::w#2 w zp ZP_WORD:17 22.0
(word) print_word::w#3 w zp ZP_WORD:17 6.333333333333334
(word~) print_word::w#5 w zp ZP_WORD:17 4.0
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 $4 zp ZP_WORD:22 4.0
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@9
(label) sin8s::@return
(byte) sin8s::DIV_6
(const byte) sin8s::DIV_6#0 DIV_6 = (byte) $2b
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 isUpper zp ZP_BYTE:21 0.05555555555555555
(signed byte) sin8s::return
(signed byte) sin8s::return#0 reg byte a 5.0
(signed byte) sin8s::return#2 reg byte a 22.0
(signed byte~) sin8s::return#5 reg byte a 4.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 reg byte a 4.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 usinx zp ZP_BYTE:36 0.3333333333333333
(byte) sin8s::usinx#1 reg byte x 4.0
(byte) sin8s::usinx#2 reg byte x 4.0
(byte) sin8s::usinx#4 reg byte x 2.0
(word) sin8s::x
(word) sin8s::x#0 x zp ZP_WORD:22 4.0
(word) sin8s::x#1 x zp ZP_WORD:22 4.0
(word) sin8s::x#2 x zp ZP_WORD:22 8.5
(word) sin8s::x#4 x zp ZP_WORD:22 5.0
(word) sin8s::x#6 x zp ZP_WORD:22 6.0
(byte) sin8s::x1
(byte) sin8s::x1#0 x1 zp ZP_BYTE:34 0.6363636363636365
(byte) sin8s::x2
(byte) sin8s::x2#0 reg byte a 4.0
(byte) sin8s::x3
(byte) sin8s::x3#0 x3 zp ZP_BYTE:35 1.0
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 reg byte a 4.0
(byte) sin8s::x4
(byte) sin8s::x4#0 reg byte a 4.0
(byte) sin8s::x5
(byte) sin8s::x5#0 reg byte a 4.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 reg byte a 4.0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte~) sin8u_table::$21 reg byte a 22.0
(label) sin8u_table::@1
(label) sin8u_table::@10
(label) sin8u_table::@11
(label) sin8u_table::@12
(label) sin8u_table::@13
(label) sin8u_table::@14
(label) sin8u_table::@15
(label) sin8u_table::@16
(label) sin8u_table::@17
(label) sin8u_table::@18
(label) sin8u_table::@19
(label) sin8u_table::@2
(label) sin8u_table::@20
(label) sin8u_table::@21
(label) sin8u_table::@22
(label) sin8u_table::@23
(label) sin8u_table::@3
(label) sin8u_table::@4
(label) sin8u_table::@5
(label) sin8u_table::@6
(label) sin8u_table::@7
(label) sin8u_table::@8
(label) sin8u_table::@9
(label) sin8u_table::@return
(byte) sin8u_table::amplitude
(const byte) sin8u_table::amplitude#0 amplitude = (const byte) sin8u_table::max#0-(const byte) sin8u_table::min#0
(word) sin8u_table::i
(word) sin8u_table::i#1 i zp ZP_WORD:6 16.5
(word) sin8u_table::i#10 i zp ZP_WORD:6 0.7333333333333333
(byte) sin8u_table::max
(const byte) sin8u_table::max#0 max = (byte) $ff
(byte) sin8u_table::mid
(const byte) sin8u_table::mid#0 mid = (byte)(const word) sin8u_table::sum#0/(byte) 2+(byte) 1
(byte) sin8u_table::min
(const byte) sin8u_table::min#0 min = (byte) $a
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#1 sintab zp ZP_WORD:4 1.0
(byte*) sin8u_table::sintab#2 sintab zp ZP_WORD:4 3.3000000000000003
(signed byte) sin8u_table::sinx
(signed byte) sin8u_table::sinx#0 sinx zp ZP_BYTE:33 2.5384615384615383
(signed word) sin8u_table::sinx_sc
(byte) sin8u_table::sinx_tr
(byte) sin8u_table::sinx_tr#0 reg byte x 1.9411764705882355
(word) sin8u_table::step
(word) sin8u_table::step#0 step zp ZP_WORD:29 0.2777777777777778
(const string) sin8u_table::str str = (string) "step:@"
(const string) sin8u_table::str1 str1 = (string) " min:@"
(const string) sin8u_table::str2 str2 = (string) " max:@"
(const string) sin8u_table::str3 str3 = (string) " ampl:@"
(const string) sin8u_table::str4 str4 = (string) " mid:@"
(const string) sin8u_table::str5 str5 = (string) "x: @"
(const string) sin8u_table::str6 str6 = (string) " sin: @"
(const string) sin8u_table::str7 str7 = (string) " scaled: @"
(const string) sin8u_table::str8 str8 = (string) " trans: @"
(word) sin8u_table::sum
(const word) sin8u_table::sum#0 sum = (word)(const byte) sin8u_table::min#0+(const byte) sin8u_table::max#0
(word) sin8u_table::tabsize
(word) sin8u_table::x
(word) sin8u_table::x#1 x zp ZP_WORD:2 7.333333333333333
(word) sin8u_table::x#10 x zp ZP_WORD:2 1.5172413793103448

zp ZP_WORD:2 [ sin8u_table::x#10 sin8u_table::x#1 ]
zp ZP_WORD:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
zp ZP_WORD:6 [ sin8u_table::i#10 sin8u_table::i#1 ]
zp ZP_WORD:8 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
zp ZP_BYTE:10 [ print_byte::b#8 print_byte::b#10 print_byte::b#1 print_byte::b#2 print_byte::b#7 print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
reg byte a [ print_char::ch#5 print_char::ch#3 print_char::ch#4 ]
zp ZP_WORD:11 [ print_str::str#10 print_str::str#12 print_str::str#0 ]
zp ZP_WORD:13 [ print_sword::w#3 print_sword::w#6 print_sword::w#0 mul8su::m#2 mul8su::m#1 mul8su::m#0 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 mulu8_sel::$0 mulu8_sel::$1 ]
zp ZP_WORD:15 [ print_char_cursor#94 print_char_cursor#105 print_char_cursor#64 print_char_cursor#100 print_char_cursor#18 print_char_cursor#99 print_char_cursor#2 print_char_cursor#113 print_char_cursor#1 ]
zp ZP_WORD:17 [ print_word::w#3 print_word::w#5 print_word::w#2 print_word::w#1 ]
reg byte a [ mul8u::b#1 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#8 mul8u::a#2 mul8u::a#0 ]
zp ZP_WORD:19 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
zp ZP_BYTE:21 [ sin8s::isUpper#10 ]
zp ZP_WORD:22 [ sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
zp ZP_BYTE:24 [ mulu8_sel::select#5 ]
zp ZP_WORD:25 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
zp ZP_WORD:27 [ divr16u::dividend#2 divr16u::dividend#0 ]
zp ZP_WORD:29 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp ZP_WORD:31 [ print_cls::sc#2 print_cls::sc#1 ]
reg byte a [ sin8s::return#2 ]
zp ZP_BYTE:33 [ sin8u_table::sinx#0 ]
reg byte y [ mul8su::a#0 ]
reg byte a [ sin8u_table::$21 ]
reg byte x [ sin8u_table::sinx_tr#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ mul8su::$7 ]
reg byte a [ mul8su::$10 ]
reg byte a [ mul8u::$1 ]
zp ZP_BYTE:34 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp ZP_BYTE:35 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp ZP_BYTE:36 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]


FINAL ASSEMBLER
Score: 19557

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_char_cursor = $f
  .label print_line_cursor = 8
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label tabsize = $14
  //SEG11 [5] call print_cls 
  //SEG12 [210] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG14 main::@1
  //SEG15 [7] call sin8u_table 
  //SEG16 [9] phi from main::@1 to sin8u_table [phi:main::@1->sin8u_table]
    jsr sin8u_table
  //SEG17 main::@return
  //SEG18 [8] return 
    rts
    sintab: .fill $14, 0
}
//SEG19 sin8u_table
// Generate unsigned byte sinus table in a min-max range
// sintab - the table to generate into
// tabsize - the number of sinus points (the size of the table)
// min - the minimal value
// max - the maximal value
// sin8u_table(byte* zeropage(4) sintab)
sin8u_table: {
    .const min = $a
    .const max = $ff
    .label amplitude = max-min
    .const sum = min+max
    .const mid = sum/2+1
    .label step = $1d
    .label sinx = $21
    .label sintab = 4
    .label x = 2
    .label i = 6
  //SEG20 [10] call div16u 
  //SEG21 [188] phi from sin8u_table to div16u [phi:sin8u_table->div16u]
    jsr div16u
  //SEG22 [11] (word) div16u::return#2 ← (word) div16u::return#0
  //SEG23 sin8u_table::@2
  //SEG24 [12] (word) sin8u_table::step#0 ← (word) div16u::return#2
  //SEG25 [13] call print_str 
  //SEG26 [84] phi from sin8u_table::@2 to print_str [phi:sin8u_table::@2->print_str]
  //SEG27 [84] phi (byte*) print_char_cursor#105 = (byte*) 1024 [phi:sin8u_table::@2->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG28 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str [phi:sin8u_table::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG29 sin8u_table::@3
  //SEG30 [14] (word) print_word::w#1 ← (word) sin8u_table::step#0 -- vwuz1=vwuz2 
    lda step
    sta print_word.w
    lda step+1
    sta print_word.w+1
  //SEG31 [15] call print_word 
  //SEG32 [100] phi from sin8u_table::@3 to print_word [phi:sin8u_table::@3->print_word]
  //SEG33 [100] phi (byte*) print_char_cursor#99 = (byte*) print_char_cursor#2 [phi:sin8u_table::@3->print_word#0] -- register_copy 
  //SEG34 [100] phi (word) print_word::w#3 = (word) print_word::w#1 [phi:sin8u_table::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG35 [16] phi from sin8u_table::@3 to sin8u_table::@4 [phi:sin8u_table::@3->sin8u_table::@4]
  //SEG36 sin8u_table::@4
  //SEG37 [17] call print_str 
  //SEG38 [84] phi from sin8u_table::@4 to print_str [phi:sin8u_table::@4->print_str]
  //SEG39 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@4->print_str#0] -- register_copy 
  //SEG40 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str1 [phi:sin8u_table::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG41 [18] phi from sin8u_table::@4 to sin8u_table::@5 [phi:sin8u_table::@4->sin8u_table::@5]
  //SEG42 sin8u_table::@5
  //SEG43 [19] call print_byte 
  //SEG44 [72] phi from sin8u_table::@5 to print_byte [phi:sin8u_table::@5->print_byte]
  //SEG45 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@5->print_byte#0] -- register_copy 
  //SEG46 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::min#0 [phi:sin8u_table::@5->print_byte#1] -- vbuz1=vbuc1 
    lda #min
    sta print_byte.b
    jsr print_byte
  //SEG47 [20] phi from sin8u_table::@5 to sin8u_table::@6 [phi:sin8u_table::@5->sin8u_table::@6]
  //SEG48 sin8u_table::@6
  //SEG49 [21] call print_str 
  //SEG50 [84] phi from sin8u_table::@6 to print_str [phi:sin8u_table::@6->print_str]
  //SEG51 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@6->print_str#0] -- register_copy 
  //SEG52 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str2 [phi:sin8u_table::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG53 [22] phi from sin8u_table::@6 to sin8u_table::@7 [phi:sin8u_table::@6->sin8u_table::@7]
  //SEG54 sin8u_table::@7
  //SEG55 [23] call print_byte 
  //SEG56 [72] phi from sin8u_table::@7 to print_byte [phi:sin8u_table::@7->print_byte]
  //SEG57 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@7->print_byte#0] -- register_copy 
  //SEG58 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::max#0 [phi:sin8u_table::@7->print_byte#1] -- vbuz1=vbuc1 
    lda #max
    sta print_byte.b
    jsr print_byte
  //SEG59 [24] phi from sin8u_table::@7 to sin8u_table::@8 [phi:sin8u_table::@7->sin8u_table::@8]
  //SEG60 sin8u_table::@8
  //SEG61 [25] call print_str 
  //SEG62 [84] phi from sin8u_table::@8 to print_str [phi:sin8u_table::@8->print_str]
  //SEG63 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@8->print_str#0] -- register_copy 
  //SEG64 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str3 [phi:sin8u_table::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
  //SEG65 [26] phi from sin8u_table::@8 to sin8u_table::@9 [phi:sin8u_table::@8->sin8u_table::@9]
  //SEG66 sin8u_table::@9
  //SEG67 [27] call print_byte 
  //SEG68 [72] phi from sin8u_table::@9 to print_byte [phi:sin8u_table::@9->print_byte]
  //SEG69 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@9->print_byte#0] -- register_copy 
  //SEG70 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::amplitude#0 [phi:sin8u_table::@9->print_byte#1] -- vbuz1=vbuc1 
    lda #amplitude
    sta print_byte.b
    jsr print_byte
  //SEG71 [28] phi from sin8u_table::@9 to sin8u_table::@10 [phi:sin8u_table::@9->sin8u_table::@10]
  //SEG72 sin8u_table::@10
  //SEG73 [29] call print_str 
  //SEG74 [84] phi from sin8u_table::@10 to print_str [phi:sin8u_table::@10->print_str]
  //SEG75 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@10->print_str#0] -- register_copy 
  //SEG76 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str4 [phi:sin8u_table::@10->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
  //SEG77 [30] phi from sin8u_table::@10 to sin8u_table::@11 [phi:sin8u_table::@10->sin8u_table::@11]
  //SEG78 sin8u_table::@11
  //SEG79 [31] call print_byte 
  //SEG80 [72] phi from sin8u_table::@11 to print_byte [phi:sin8u_table::@11->print_byte]
  //SEG81 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@11->print_byte#0] -- register_copy 
  //SEG82 [72] phi (byte) print_byte::b#8 = (const byte) sin8u_table::mid#0 [phi:sin8u_table::@11->print_byte#1] -- vbuz1=vbuc1 
    lda #mid
    sta print_byte.b
    jsr print_byte
  //SEG83 [32] phi from sin8u_table::@11 to sin8u_table::@12 [phi:sin8u_table::@11->sin8u_table::@12]
  //SEG84 sin8u_table::@12
  //SEG85 [33] call print_ln 
  //SEG86 [67] phi from sin8u_table::@12 to print_ln [phi:sin8u_table::@12->print_ln]
  //SEG87 [67] phi (byte*) print_line_cursor#23 = (byte*) 1024 [phi:sin8u_table::@12->print_ln#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
  //SEG88 [34] phi from sin8u_table::@12 to sin8u_table::@1 [phi:sin8u_table::@12->sin8u_table::@1]
  //SEG89 [34] phi (word) sin8u_table::i#10 = (byte) 0 [phi:sin8u_table::@12->sin8u_table::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    sta i+1
  //SEG90 [34] phi (byte*) sin8u_table::sintab#2 = (const byte[$14]) main::sintab#0 [phi:sin8u_table::@12->sin8u_table::@1#1] -- pbuz1=pbuc1 
    lda #<main.sintab
    sta sintab
    lda #>main.sintab
    sta sintab+1
  //SEG91 [34] phi (word) sin8u_table::x#10 = (byte) 0 [phi:sin8u_table::@12->sin8u_table::@1#2] -- vwuz1=vbuc1 
    lda #0
    sta x
    sta x+1
  // u[4.12]
  //SEG92 [34] phi from sin8u_table::@23 to sin8u_table::@1 [phi:sin8u_table::@23->sin8u_table::@1]
  //SEG93 [34] phi (word) sin8u_table::i#10 = (word) sin8u_table::i#1 [phi:sin8u_table::@23->sin8u_table::@1#0] -- register_copy 
  //SEG94 [34] phi (byte*) sin8u_table::sintab#2 = (byte*) sin8u_table::sintab#1 [phi:sin8u_table::@23->sin8u_table::@1#1] -- register_copy 
  //SEG95 [34] phi (word) sin8u_table::x#10 = (word) sin8u_table::x#1 [phi:sin8u_table::@23->sin8u_table::@1#2] -- register_copy 
  //SEG96 sin8u_table::@1
  b1:
  //SEG97 [35] (word) sin8s::x#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda x
    sta sin8s.x
    lda x+1
    sta sin8s.x+1
  //SEG98 [36] call sin8s 
    jsr sin8s
  //SEG99 [37] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
  //SEG100 sin8u_table::@13
  //SEG101 [38] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2 -- vbsz1=vbsaa 
    sta sinx
  //SEG102 [39] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0 -- vbsyy=vbsz1 
    tay
  //SEG103 [40] call mul8su 
    jsr mul8su
  //SEG104 sin8u_table::@14
  //SEG105 [41] (byte~) sin8u_table::$21 ← > (signed word)(word) mul8su::m#2 -- vbuaa=_hi_vwsz1 
    lda mul8su.m+1
  //SEG106 [42] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$21 -- vbuxx=vbuc1_plus_vbuaa 
    tax
    axs #-[mid]
  //SEG107 [43] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (sintab),y
  //SEG108 [44] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2 -- pbuz1=_inc_pbuz1 
    inc sintab
    bne !+
    inc sintab+1
  !:
  //SEG109 [45] (byte*~) print_char_cursor#113 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG110 [46] call print_str 
  //SEG111 [84] phi from sin8u_table::@14 to print_str [phi:sin8u_table::@14->print_str]
  //SEG112 [84] phi (byte*) print_char_cursor#105 = (byte*~) print_char_cursor#113 [phi:sin8u_table::@14->print_str#0] -- register_copy 
  //SEG113 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str5 [phi:sin8u_table::@14->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta print_str.str
    lda #>str5
    sta print_str.str+1
    jsr print_str
  //SEG114 sin8u_table::@15
  //SEG115 [47] (word) print_word::w#2 ← (word) sin8u_table::x#10 -- vwuz1=vwuz2 
    lda x
    sta print_word.w
    lda x+1
    sta print_word.w+1
  //SEG116 [48] call print_word 
  //SEG117 [100] phi from sin8u_table::@15 to print_word [phi:sin8u_table::@15->print_word]
  //SEG118 [100] phi (byte*) print_char_cursor#99 = (byte*) print_char_cursor#2 [phi:sin8u_table::@15->print_word#0] -- register_copy 
  //SEG119 [100] phi (word) print_word::w#3 = (word) print_word::w#2 [phi:sin8u_table::@15->print_word#1] -- register_copy 
    jsr print_word
  //SEG120 [49] phi from sin8u_table::@15 to sin8u_table::@16 [phi:sin8u_table::@15->sin8u_table::@16]
  //SEG121 sin8u_table::@16
  //SEG122 [50] call print_str 
  //SEG123 [84] phi from sin8u_table::@16 to print_str [phi:sin8u_table::@16->print_str]
  //SEG124 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@16->print_str#0] -- register_copy 
  //SEG125 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str6 [phi:sin8u_table::@16->print_str#1] -- pbuz1=pbuc1 
    lda #<str6
    sta print_str.str
    lda #>str6
    sta print_str.str+1
    jsr print_str
  //SEG126 sin8u_table::@17
  //SEG127 [51] (signed byte) print_sbyte::b#1 ← (signed byte) sin8u_table::sinx#0 -- vbsz1=vbsz2 
    lda sinx
    sta print_sbyte.b
  //SEG128 [52] call print_sbyte 
    jsr print_sbyte
  //SEG129 [53] phi from sin8u_table::@17 to sin8u_table::@18 [phi:sin8u_table::@17->sin8u_table::@18]
  //SEG130 sin8u_table::@18
  //SEG131 [54] call print_str 
  //SEG132 [84] phi from sin8u_table::@18 to print_str [phi:sin8u_table::@18->print_str]
  //SEG133 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@18->print_str#0] -- register_copy 
  //SEG134 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str7 [phi:sin8u_table::@18->print_str#1] -- pbuz1=pbuc1 
    lda #<str7
    sta print_str.str
    lda #>str7
    sta print_str.str+1
    jsr print_str
  //SEG135 [55] phi from sin8u_table::@18 to sin8u_table::@19 [phi:sin8u_table::@18->sin8u_table::@19]
  //SEG136 sin8u_table::@19
  //SEG137 [56] call print_sword 
    jsr print_sword
  //SEG138 [57] phi from sin8u_table::@19 to sin8u_table::@20 [phi:sin8u_table::@19->sin8u_table::@20]
  //SEG139 sin8u_table::@20
  //SEG140 [58] call print_str 
  //SEG141 [84] phi from sin8u_table::@20 to print_str [phi:sin8u_table::@20->print_str]
  //SEG142 [84] phi (byte*) print_char_cursor#105 = (byte*) print_char_cursor#18 [phi:sin8u_table::@20->print_str#0] -- register_copy 
  //SEG143 [84] phi (byte*) print_str::str#12 = (const string) sin8u_table::str8 [phi:sin8u_table::@20->print_str#1] -- pbuz1=pbuc1 
    lda #<str8
    sta print_str.str
    lda #>str8
    sta print_str.str+1
    jsr print_str
  //SEG144 sin8u_table::@21
  //SEG145 [59] (byte) print_byte::b#7 ← (byte) sin8u_table::sinx_tr#0 -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG146 [60] call print_byte 
  //SEG147 [72] phi from sin8u_table::@21 to print_byte [phi:sin8u_table::@21->print_byte]
  //SEG148 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#2 [phi:sin8u_table::@21->print_byte#0] -- register_copy 
  //SEG149 [72] phi (byte) print_byte::b#8 = (byte) print_byte::b#7 [phi:sin8u_table::@21->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG150 [61] phi from sin8u_table::@21 to sin8u_table::@22 [phi:sin8u_table::@21->sin8u_table::@22]
  //SEG151 sin8u_table::@22
  //SEG152 [62] call print_ln 
  //SEG153 [67] phi from sin8u_table::@22 to print_ln [phi:sin8u_table::@22->print_ln]
  //SEG154 [67] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:sin8u_table::@22->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG155 sin8u_table::@23
  //SEG156 [63] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
  //SEG157 [64] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG158 [65] if((word) sin8u_table::i#1<(const word) main::tabsize#0) goto sin8u_table::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.tabsize
    bcs !b1+
    jmp b1
  !b1:
    bne !+
    lda i
    cmp #<main.tabsize
    bcs !b1+
    jmp b1
  !b1:
  !:
  //SEG159 sin8u_table::@return
  //SEG160 [66] return 
    rts
    str: .text "step:@"
    str1: .text " min:@"
    str2: .text " max:@"
    str3: .text " ampl:@"
    str4: .text " mid:@"
    str5: .text "x: @"
    str6: .text " sin: @"
    str7: .text " scaled: @"
    str8: .text " trans: @"
}
//SEG161 print_ln
// Print a newline
print_ln: {
  //SEG162 [68] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG163 [68] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG164 print_ln::@1
  b1:
  //SEG165 [69] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG166 [70] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#18) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG167 print_ln::@return
  //SEG168 [71] return 
    rts
}
//SEG169 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($a) b)
print_byte: {
    .label b = $a
  //SEG170 [73] (byte~) print_byte::$0 ← (byte) print_byte::b#8 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG171 [74] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG172 [75] call print_char 
  //SEG173 [80] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG174 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#100 [phi:print_byte->print_char#0] -- register_copy 
  //SEG175 [80] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG176 print_byte::@1
  //SEG177 [76] (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG178 [77] (byte) print_char::ch#4 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG179 [78] call print_char 
  //SEG180 [80] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG181 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#18 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG182 [80] phi (byte) print_char::ch#5 = (byte) print_char::ch#4 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG183 print_byte::@return
  //SEG184 [79] return 
    rts
}
//SEG185 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG186 [81] *((byte*) print_char_cursor#64) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG187 [82] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#64 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG188 print_char::@return
  //SEG189 [83] return 
    rts
}
//SEG190 print_str
// Print a zero-terminated string
// print_str(byte* zeropage($b) str)
print_str: {
    .label str = $b
  //SEG191 [85] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG192 [85] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#105 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG193 [85] phi (byte*) print_str::str#10 = (byte*) print_str::str#12 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG194 print_str::@1
  b1:
  //SEG195 [86] if(*((byte*) print_str::str#10)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG196 print_str::@return
  //SEG197 [87] return 
    rts
  //SEG198 print_str::@2
  b2:
  //SEG199 [88] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG200 [89] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG201 [90] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG202 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage($d) w)
print_sword: {
    .label w = $d
  //SEG203 [91] if((signed word)(word) mul8su::m#2>=(signed byte) 0) goto print_sword::@4 -- vwsz1_ge_0_then_la1 
    lda mul8su.m+1
    bpl b1
  //SEG204 [92] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  //SEG205 print_sword::@2
  //SEG206 [93] call print_char 
  //SEG207 [80] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  //SEG208 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#2 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG209 [80] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG210 print_sword::@3
  //SEG211 [94] (signed word) print_sword::w#0 ← - (signed word)(word) mul8su::m#2 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG212 [95] phi from print_sword::@3 print_sword::@4 to print_sword::@1 [phi:print_sword::@3/print_sword::@4->print_sword::@1]
  //SEG213 [95] phi (byte*) print_char_cursor#94 = (byte*) print_char_cursor#18 [phi:print_sword::@3/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG214 [95] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#0 [phi:print_sword::@3/print_sword::@4->print_sword::@1#1] -- register_copy 
  //SEG215 print_sword::@1
  b1:
  //SEG216 [96] (word~) print_word::w#5 ← (word)(signed word) print_sword::w#3 -- vwuz1=vwuz2 
    lda w
    sta print_word.w
    lda w+1
    sta print_word.w+1
  //SEG217 [97] call print_word 
  //SEG218 [100] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  //SEG219 [100] phi (byte*) print_char_cursor#99 = (byte*) print_char_cursor#94 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG220 [100] phi (word) print_word::w#3 = (word~) print_word::w#5 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
  //SEG221 print_sword::@return
  //SEG222 [98] return 
    rts
  //SEG223 print_sword::@4
  //SEG224 [99] (signed word~) print_sword::w#6 ← (signed word)(word) mul8su::m#2
}
//SEG225 print_word
// Print a word as HEX
// print_word(word zeropage($11) w)
print_word: {
    .label w = $11
  //SEG226 [101] (byte) print_byte::b#1 ← > (word) print_word::w#3 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG227 [102] call print_byte 
  //SEG228 [72] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG229 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#99 [phi:print_word->print_byte#0] -- register_copy 
  //SEG230 [72] phi (byte) print_byte::b#8 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG231 print_word::@1
  //SEG232 [103] (byte) print_byte::b#2 ← < (word) print_word::w#3 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG233 [104] call print_byte 
  //SEG234 [72] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG235 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#18 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG236 [72] phi (byte) print_byte::b#8 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG237 print_word::@return
  //SEG238 [105] return 
    rts
}
//SEG239 print_sbyte
// Print a signed byte as HEX
// print_sbyte(signed byte zeropage($a) b)
print_sbyte: {
    .label b = $a
  //SEG240 [106] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1 -- vbsz1_lt_0_then_la1 
    lda b
    bmi b1
  //SEG241 [107] phi from print_sbyte to print_sbyte::@3 [phi:print_sbyte->print_sbyte::@3]
  //SEG242 print_sbyte::@3
  //SEG243 [108] call print_char 
  //SEG244 [80] phi from print_sbyte::@3 to print_char [phi:print_sbyte::@3->print_char]
  //SEG245 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#2 [phi:print_sbyte::@3->print_char#0] -- register_copy 
  //SEG246 [80] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sbyte::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG247 [109] phi from print_sbyte::@3 print_sbyte::@4 to print_sbyte::@2 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2]
  //SEG248 [109] phi (signed byte) print_sbyte::b#4 = (signed byte) print_sbyte::b#1 [phi:print_sbyte::@3/print_sbyte::@4->print_sbyte::@2#0] -- register_copy 
  //SEG249 print_sbyte::@2
  b2:
  //SEG250 [110] (byte~) print_byte::b#10 ← (byte)(signed byte) print_sbyte::b#4
  //SEG251 [111] call print_byte 
  //SEG252 [72] phi from print_sbyte::@2 to print_byte [phi:print_sbyte::@2->print_byte]
  //SEG253 [72] phi (byte*) print_char_cursor#100 = (byte*) print_char_cursor#18 [phi:print_sbyte::@2->print_byte#0] -- register_copy 
  //SEG254 [72] phi (byte) print_byte::b#8 = (byte~) print_byte::b#10 [phi:print_sbyte::@2->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG255 print_sbyte::@return
  //SEG256 [112] return 
    rts
  //SEG257 [113] phi from print_sbyte to print_sbyte::@1 [phi:print_sbyte->print_sbyte::@1]
  //SEG258 print_sbyte::@1
  b1:
  //SEG259 [114] call print_char 
  //SEG260 [80] phi from print_sbyte::@1 to print_char [phi:print_sbyte::@1->print_char]
  //SEG261 [80] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#2 [phi:print_sbyte::@1->print_char#0] -- register_copy 
  //SEG262 [80] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sbyte::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG263 print_sbyte::@4
  //SEG264 [115] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1 -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
    jmp b2
}
//SEG265 mul8su
// Multiply a signed byte and an unsigned byte (into a signed word)
// Fixes offsets introduced by using unsigned multiplication
// mul8su(signed byte register(Y) a)
mul8su: {
    .const b = sin8u_table.amplitude+1
    .label m = $d
  //SEG266 [116] (byte~) mul8u::a#8 ← (byte)(signed byte) mul8su::a#0 -- vbuxx=vbuyy 
    tya
    tax
  //SEG267 [117] call mul8u 
  //SEG268 [126] phi from mul8su to mul8u [phi:mul8su->mul8u]
  //SEG269 [126] phi (byte) mul8u::a#6 = (byte~) mul8u::a#8 [phi:mul8su->mul8u#0] -- register_copy 
  //SEG270 [126] phi (word) mul8u::mb#0 = (const byte) mul8su::b#0 [phi:mul8su->mul8u#1] -- vwuz1=vbuc1 
    lda #b
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG271 [118] (word) mul8u::return#2 ← (word) mul8u::res#2
  //SEG272 mul8su::@3
  //SEG273 [119] (word) mul8su::m#0 ← (word) mul8u::return#2
  //SEG274 [120] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl b1
  //SEG275 mul8su::@2
  //SEG276 [121] (byte~) mul8su::$7 ← > (word) mul8su::m#0 -- vbuaa=_hi_vwuz1 
    lda m+1
  //SEG277 [122] (byte~) mul8su::$10 ← (byte~) mul8su::$7 - (const byte) mul8su::b#0 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #b
  //SEG278 [123] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$10 -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
  //SEG279 [124] phi from mul8su::@2 mul8su::@3 to mul8su::@1 [phi:mul8su::@2/mul8su::@3->mul8su::@1]
  //SEG280 [124] phi (word) mul8su::m#2 = (word) mul8su::m#1 [phi:mul8su::@2/mul8su::@3->mul8su::@1#0] -- register_copy 
  //SEG281 mul8su::@1
  b1:
  //SEG282 mul8su::@return
  //SEG283 [125] return 
    rts
}
//SEG284 mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $13
    .label res = $d
    .label return = $d
  //SEG285 [127] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  //SEG286 [127] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
  //SEG287 [127] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta res
    sta res+1
  //SEG288 [127] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
  //SEG289 mul8u::@1
  b1:
  //SEG290 [128] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b2
  //SEG291 mul8u::@return
  //SEG292 [129] return 
    rts
  //SEG293 mul8u::@2
  b2:
  //SEG294 [130] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG295 [131] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
  //SEG296 mul8u::@4
  //SEG297 [132] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG298 [133] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  //SEG299 [133] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
  //SEG300 mul8u::@3
  b3:
  //SEG301 [134] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
  //SEG302 [135] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG303 [127] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  //SEG304 [127] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
  //SEG305 [127] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
  //SEG306 [127] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG307 sin8s
// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zeropage($16) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label _4 = $16
    .label x = $16
    .label x1 = $22
    .label x3 = $23
    .label usinx = $24
    .label isUpper = $15
  //SEG308 [136] if((word) sin8s::x#2<(const word) PI_u4f12#0) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b5
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b5
  !:
  //SEG309 sin8s::@5
  //SEG310 [137] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const word) PI_u4f12#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG311 [138] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  //SEG312 [138] phi (byte) sin8s::isUpper#10 = (byte) 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG313 [138] phi (word) sin8s::x#4 = (word) sin8s::x#0 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp b1
  //SEG314 [138] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  b5:
  //SEG315 [138] phi (byte) sin8s::isUpper#10 = (byte) 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG316 [138] phi (word) sin8s::x#4 = (word) sin8s::x#2 [phi:sin8s->sin8s::@1#1] -- register_copy 
  //SEG317 sin8s::@1
  b1:
  //SEG318 [139] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2
  !:
  //SEG319 sin8s::@6
  //SEG320 [140] (word) sin8s::x#1 ← (const word) PI_u4f12#0 - (word) sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG321 [141] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  //SEG322 [141] phi (word) sin8s::x#6 = (word) sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
  //SEG323 sin8s::@2
  b2:
  //SEG324 [142] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _4
    rol _4+1
    asl _4
    rol _4+1
    asl _4
    rol _4+1
  //SEG325 [143] (byte) sin8s::x1#0 ← > (word~) sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda _4+1
    sta x1
  //SEG326 [144] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0 -- vbuxx=vbuz1 
    tax
  //SEG327 [145] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    tay
  //SEG328 [146] call mulu8_sel 
  //SEG329 [179] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  //SEG330 [179] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG331 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
  //SEG332 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG333 [147] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  //SEG334 sin8s::@9
  //SEG335 [148] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  //SEG336 [149] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0 -- vbuxx=vbuaa 
    tax
  //SEG337 [150] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG338 [151] call mulu8_sel 
  //SEG339 [179] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  //SEG340 [179] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG341 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
  //SEG342 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG343 [152] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  //SEG344 sin8s::@10
  //SEG345 [153] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta x3
  //SEG346 [154] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    tax
  //SEG347 [155] call mulu8_sel 
  //SEG348 [179] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  //SEG349 [179] phi (byte) mulu8_sel::select#5 = (byte) 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu8_sel.select
  //SEG350 [179] phi (byte) mulu8_sel::v2#5 = (const byte) sin8s::DIV_6#0 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
  //SEG351 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG352 [156] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  //SEG353 sin8s::@11
  //SEG354 [157] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  //SEG355 [158] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc x1
    sta usinx
  //SEG356 [159] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0 -- vbuxx=vbuz1 
    ldx x3
  //SEG357 [160] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG358 [161] call mulu8_sel 
  //SEG359 [179] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  //SEG360 [179] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG361 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
  //SEG362 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG363 [162] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  //SEG364 sin8s::@12
  //SEG365 [163] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  //SEG366 [164] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0 -- vbuxx=vbuaa 
    tax
  //SEG367 [165] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0 -- vbuyy=vbuz1 
    ldy x1
  //SEG368 [166] call mulu8_sel 
  //SEG369 [179] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  //SEG370 [179] phi (byte) mulu8_sel::select#5 = (byte) 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu8_sel.select
  //SEG371 [179] phi (byte) mulu8_sel::v2#5 = (byte) mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
  //SEG372 [179] phi (byte) mulu8_sel::v1#5 = (byte) mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
  //SEG373 [167] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  //SEG374 sin8s::@13
  //SEG375 [168] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  //SEG376 [169] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
  //SEG377 [170] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc usinx
    tax
  //SEG378 [171] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc b3
  //SEG379 sin8s::@7
  //SEG380 [172] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
  //SEG381 [173] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  //SEG382 [173] phi (byte) sin8s::usinx#4 = (byte) sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
  //SEG383 sin8s::@3
  b3:
  //SEG384 [174] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b14
  //SEG385 sin8s::@8
  //SEG386 [175] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG387 [176] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  //SEG388 [176] phi (signed byte) sin8s::return#0 = (signed byte~) sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
  //SEG389 sin8s::@4
  //SEG390 sin8s::@return
  //SEG391 [177] return 
    rts
  //SEG392 sin8s::@14
  b14:
  //SEG393 [178] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    rts
}
//SEG394 mulu8_sel
// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zeropage($18) select)
mulu8_sel: {
    .label _0 = $d
    .label _1 = $d
    .label select = $18
  //SEG395 [180] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  //SEG396 [181] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
  //SEG397 [182] call mul8u 
  //SEG398 [126] phi from mulu8_sel to mul8u [phi:mulu8_sel->mul8u]
  //SEG399 [126] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mulu8_sel->mul8u#0] -- register_copy 
  //SEG400 [126] phi (word) mul8u::mb#0 = (byte) mul8u::b#1 [phi:mulu8_sel->mul8u#1] -- vwuz1=vbuaa 
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG401 [183] (word) mul8u::return#3 ← (word) mul8u::res#2
  //SEG402 mulu8_sel::@1
  //SEG403 [184] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
  //SEG404 [185] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy select
    beq !e+
  !:
    asl _1
    rol _1+1
    dey
    bne !-
  !e:
  //SEG405 [186] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda _1+1
  //SEG406 mulu8_sel::@return
  //SEG407 [187] return 
    rts
}
//SEG408 div16u
// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $1d
  //SEG409 [189] call divr16u 
  //SEG410 [193] phi from div16u to divr16u [phi:div16u->divr16u]
    jsr divr16u
  //SEG411 [190] (word) divr16u::return#2 ← (word) divr16u::return#0
  //SEG412 div16u::@1
  //SEG413 [191] (word) div16u::return#0 ← (word) divr16u::return#2
  //SEG414 div16u::@return
  //SEG415 [192] return 
    rts
}
//SEG416 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($1b) dividend, word zeropage($19) rem)
divr16u: {
    .label rem = $19
    .label dividend = $1b
    .label quotient = $1d
    .label return = $1d
  //SEG417 [194] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  //SEG418 [194] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG419 [194] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
  //SEG420 [194] phi (word) divr16u::dividend#2 = (const word) PI2_u4f12#0 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta dividend
    lda #>PI2_u4f12
    sta dividend+1
  //SEG421 [194] phi (word) divr16u::rem#4 = (byte) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    txa
    sta rem
    sta rem+1
  //SEG422 [194] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  //SEG423 [194] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG424 [194] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG425 [194] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG426 [194] phi (word) divr16u::rem#4 = (word) divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
  //SEG427 divr16u::@1
  b1:
  //SEG428 [195] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG429 [196] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG430 [197] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG431 [198] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG432 divr16u::@4
  //SEG433 [199] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG434 [200] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  //SEG435 [200] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
  //SEG436 divr16u::@2
  b2:
  //SEG437 [201] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG438 [202] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG439 [203] if((word) divr16u::rem#5<(const word) main::tabsize#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.tabsize
    bcc b3
    bne !+
    lda rem
    cmp #<main.tabsize
    bcc b3
  !:
  //SEG440 divr16u::@5
  //SEG441 [204] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG442 [205] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.tabsize
    sta rem
    lda rem+1
    sbc #>main.tabsize
    sta rem+1
  //SEG443 [206] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  //SEG444 [206] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG445 [206] phi (word) divr16u::rem#9 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
  //SEG446 divr16u::@3
  b3:
  //SEG447 [207] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG448 [208] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG449 divr16u::@return
  //SEG450 [209] return 
    rts
}
//SEG451 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $1f
  //SEG452 [211] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG453 [211] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG454 [211] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG455 [211] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG456 print_cls::@1
  b1:
  //SEG457 [212] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG458 [213] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG459 [214] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG460 print_cls::@return
  //SEG461 [215] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

