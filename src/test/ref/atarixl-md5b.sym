const word* COLCRS = (word*) 85
const nomodify byte* CRSINH = (byte*) 752
const byte* DIGITS[]  = "0123456789abcdef"atz
const byte* HEAP_TOP = (byte*) 40960
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const nomodify byte** OLDADR = (byte**) 94
const nomodify byte* OLDCHR = (byte*) 93
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte* RADIX_HEXADECIMAL_VALUES_CHAR[]  = { $10 }
const byte* ROWCRS = (byte*) 84
const nomodify byte* RTCLOK = (byte*) 18
const nomodify byte** SAVMSC = (byte**) 88
const byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
void* calloc(word calloc::nitems , word calloc::size)
void* calloc::mem
word calloc::nitems
word calloc::nitems#0 nitems zp[2]:216 53.25
void* calloc::return
void* calloc::return#0 return zp[2]:181 35.5
void* calloc::return#2 return zp[2]:181 22.0
word calloc::size
void cputc(volatile byte cputc::c)
volatile byte cputc::c loadstore zp[1]:178 2.3853923693384613E10
byte cputc::convertToScreenCode1_return
byte cputc::convertToScreenCode1_return#0 reg byte x 1.833333333336667E11
byte* cputc::convertToScreenCode1_v
const byte* cputc::convertToScreenCode1_v#0 convertToScreenCode1_v = &cputc::c
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 1.00000001E8
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 s zp[2]:183 5.00000005E7
to_nomodify byte* cputs::s#12 s zp[2]:183 1.55000002E8
to_nomodify byte* cputs::s#13 s zp[2]:183 1.0000001E7
byte* cursorLocation()
word~ cursorLocation::$0 zp[2]:213 2.00000000000002E14
byte*~ cursorLocation::$1 zp[2]:213 2.00000000000002E14
word~ cursorLocation::$3 zp[2]:213 1.500000000000015E14
word~ cursorLocation::$4 zp[2]:216 2.00000000000002E14
word~ cursorLocation::$5 zp[2]:213 2.00000000000002E14
byte* cursorLocation::return
byte* cursorLocation::return#0 return zp[2]:213 2.000000000002E12
byte* cursorLocation::return#1 return zp[2]:213 2.775000000000075E13
byte* cursorLocation::return#3 return zp[2]:213 2.0000000000002E13
dword h0
dword h0#10 h0 zp[4]:132 2.1338028169014085
dword h0#3 h0 zp[4]:132 40.4
dword h1
dword h1#10 h1 zp[4]:136 2.1188811188811187
dword h1#3 h1 zp[4]:136 50.5
dword h2
dword h2#10 h2 zp[4]:140 2.1041666666666665
dword h2#3 h2 zp[4]:140 67.33333333333333
dword h3
dword h3#10 h3 zp[4]:144 2.089655172413793
dword h3#3 h3 zp[4]:144 101.0
byte* heap_head
void main()
const byte* main::message = "The quick brown fox jumps over the lazy dog"at
const byte* main::s[$11]  = "Calculating MD5
"at
const byte* main::s1[$d]  = "Success MD5
"at
void* malloc(word malloc::size)
byte* malloc::mem
byte* malloc::mem#0 mem zp[2]:181 333.6666666666667
void* malloc::return
word malloc::size
word malloc::size#0 size zp[2]:181 1102.0
void md5(byte* md5::initial_msg , word md5::initial_len)
word~ md5::$0 zp[2]:179 22.0
word~ md5::$1 zp[2]:179 22.0
word~ md5::$2 zp[2]:179 22.0
byte~ md5::$25 reg byte a 2002.0
byte~ md5::$26 reg byte a 1251.25
dword~ md5::$27 zp[4]:165 667.3333333333334
dword~ md5::$28 zp[4]:208 2002.0
dword~ md5::$29 zp[4]:208 2002.0
word~ md5::$3 zp[2]:179 22.0
dword~ md5::$31 zp[4]:165 667.3333333333334
dword~ md5::$32 zp[4]:204 2002.0
dword~ md5::$33 zp[4]:204 2002.0
word~ md5::$35 zp[2]:171 2002.0
dword~ md5::$38 zp[4]:165 2002.0
word~ md5::$40 zp[2]:171 2002.0
dword~ md5::$43 zp[4]:165 2002.0
dword~ md5::$44 zp[4]:165 2002.0
dword~ md5::$71 zp[4]:200 2002.0
dword~ md5::$72 zp[4]:200 2002.0
dword~ md5::$73 zp[4]:200 400.4
dword~ md5::$74 zp[4]:149 750.75
dword~ md5::$75 zp[4]:149 2002.0
dword~ md5::$76 zp[4]:149 1001.0
byte~ md5::$77 reg byte a 2002.0
dword~ md5::$78 zp[4]:149 2002.0
word~ md5::$8 zp[2]:128 22.0
byte~ md5::$86 zp[1]:169 119.16666666666666
byte~ md5::$89 zp[1]:199 182.0
byte*~ md5::$91 zp[2]:183 22.0
dword md5::a
dword md5::a#0 a zp[4]:149 50.5
dword md5::a#11 a zp[4]:149 35.94871794871795
dword md5::a#59 a zp[4]:149 1001.0
dword md5::b
dword md5::b#0 b zp[4]:153 67.33333333333333
dword md5::b#1 b zp[4]:153 500.5
dword md5::b#10 b zp[4]:153 69.78030303030303
volatile dword md5::bits_len loadstore zp[4]:185 110.0
dword md5::c
dword md5::c#0 c zp[4]:157 101.0
dword md5::c#1 c zp[4]:157 43.52173913043478
dword md5::c#10 c zp[4]:157 80.1
dword md5::d
dword md5::d#0 d zp[4]:161 202.0
dword md5::d#1 d_1 zp[4]:195 43.52173913043478
dword md5::f
dword md5::f#1 f zp[4]:165 1001.0
dword md5::f#10 f zp[4]:165 143.0
dword md5::f#12 f zp[4]:165 222.44444444444446
dword md5::f#13 f zp[4]:165 222.44444444444446
dword md5::f#14 f zp[4]:165 250.25
byte md5::g
byte md5::g#10 g zp[1]:169 500.50000000000006
byte md5::g#2 g zp[1]:169 2002.0
byte md5::g#3 g zp[1]:169 2002.0
byte md5::g#38 g zp[1]:169 2002.0
byte md5::g#4 g zp[1]:169 2002.0
byte md5::i
byte md5::i#1 i zp[1]:148 667.3333333333334
byte md5::i#10 i zp[1]:148 98.58333333333331
word md5::initial_len
word md5::initial_len#0 initial_len zp[2]:128 3.0666666666666664
byte* md5::initial_msg
const dword* md5::k[]  = { $d76aa478, $e8c7b756, $242070db, $c1bdceee, $f57c0faf, $4787c62a, $a8304613, $fd469501, $698098d8, $8b44f7af, $ffff5bb1, $895cd7be, $6b901122, $fd987193, $a679438e, $49b40821, $f61e2562, $c040b340, $265e5a51, $e9b6c7aa, $d62f105d, $2441453, $d8a1e681, $e7d3fbc8, $21e1cde6, $c33707d6, $f4d50d87, $455a14ed, $a9e3e905, $fcefa3f8, $676f02d9, $8d2a4c8a, $fffa3942, $8771f681, $6d9d6122, $fde5380c, $a4beea44, $4bdecfa9, $f6bb4b60, $bebfbc70, $289b7ec6, $eaa127fa, $d4ef3085, $4881d05, $d9d4d039, $e6db99e5, $1fa27cf8, $c4ac5665, $f4292244, $432aff97, $ab9423a7, $fc93a039, $655b59c3, $8f0ccc92, $ffeff47d, $85845dd1, $6fa87e4f, $fe2ce6e0, $a3014314, $4e0811a1, $f7537e82, $bd3af235, $2ad7d2bb, $eb86d391 }
dword md5::lr
dword md5::lr#0 lr zp[4]:200 500.5
byte* md5::msg
void* md5::msg#1 msg zp[2]:181 0.06962025316455696
word md5::new_len
word md5::new_len#0 new_len zp[2]:179 0.8271604938271605
signed word md5::offset
signed word md5::offset#1 offset zp[2]:130 202.0
signed word md5::offset#2 offset zp[2]:130 2.767123287671233
const byte* md5::r[]  = { 7, $c, $11, $16, 7, $c, $11, $16, 7, $c, $11, $16, 7, $c, $11, $16, 5, 9, $e, $14, 5, 9, $e, $14, 5, 9, $e, $14, 5, 9, $e, $14, 4, $b, $10, $17, 4, $b, $10, $17, 4, $b, $10, $17, 4, $b, $10, $17, 6, $a, $f, $15, 6, $a, $f, $15, 6, $a, $f, $15, 6, $a, $f, $15 }
const byte* md5::s[3]  = ": "at
const byte* md5::s1[4]  = "f: "at
const byte* md5::s2[3]  = "g:"at
const byte* md5::s3[7]  = " w[g]:"at
const byte* md5::s4[3]  = "L "at
const byte* md5::s5[4]  = "r: "at
const byte* md5::s6[2]  = "
"at
const byte* md5::s7[5]  = "lr: "at
dword md5::temp
dword md5::temp#0 temp zp[4]:161 60.36764705882353
dword md5::temp#19 temp zp[4]:161 2002.0
dword* md5::w
byte* md5::w#0 w zp[2]:189 0.7214285714285714
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#0 destination zp[2]:216 1.000000000001E12
byte* memcpy::destination#2 destination zp[2]:216 11.0
void* memcpy::destination#3 destination zp[2]:216 3.33333333341E11
void* memcpy::destination#7 destination zp[2]:216 22.0
void* memcpy::destination#8 destination zp[2]:216 22.0
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:216 1.0E16
byte* memcpy::dst#2 dst zp[2]:216 1.0003333333333334E16
byte* memcpy::dst#4 dst zp[2]:216 2.0000000000002E13
word memcpy::num
word memcpy::num#1 num zp[2]:128 11.0
word memcpy::num#3 num zp[2]:128 1.0000000000012E13
void* memcpy::return
void* memcpy::source
byte* memcpy::source#0 source zp[2]:171 5.000000000005E11
void* memcpy::source#3 source zp[2]:171 5.000000000005E11
void* memcpy::source#4 source zp[2]:171 2.000000000002E12
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:171 2.0E16
byte* memcpy::src#2 src zp[2]:171 1.00025E16
byte* memcpy::src#4 src zp[2]:171 1.0000000000001E13
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:213 1.25125E15
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 dst zp[2]:173 2.0E16
byte* memset::dst#2 dst zp[2]:173 1.3336666666666668E16
byte* memset::dst#4 dst zp[2]:173 2.0000000000002E13
byte* memset::end
byte* memset::end#0 end zp[2]:216 1.6683333333333335E15
word memset::num
word memset::num#0 num zp[2]:216 101.0
word memset::num#2 num zp[2]:216 1.00000000000515E13
void* memset::return
void* memset::str
void* memset::str#0 str zp[2]:173 202.0
byte* memset::str#1 str zp[2]:173 1.000000000001E12
void* memset::str#3 str zp[2]:173 3.333333333673334E11
void* memset::str#8 str zp[2]:173 2.000000000002E12
byte mod16(word mod16::a)
word mod16::a
word mod16::a#0 a zp[2]:171 2002.0
word mod16::a#1 a zp[2]:171 2002.0
word mod16::a#2 a zp[2]:171 2002.0
word mod16::a#3 a zp[2]:171 13004.0
byte mod16::return
byte mod16::return#0 reg byte a 2600.8
byte mod16::return#2 reg byte a 2002.0
byte mod16::return#3 reg byte a 2002.0
byte mod16::return#4 reg byte a 2002.0
word mod16::t
word mod16::t#0 t zp[2]:171 20002.0
word mul3(byte mul3::a)
word~ mul3::$1 zp[2]:171 15001.5
word~ mul3::$2 zp[2]:216 20002.0
byte mul3::a
byte mul3::a#0 reg byte a 1001.0
word mul3::return
word mul3::return#0 return zp[2]:171 3667.333333333333
word mul3::return#2 return zp[2]:171 2002.0
word mul5(byte mul5::a)
word~ mul5::$1 zp[2]:171 15001.5
word~ mul5::$2 zp[2]:216 20002.0
byte mul5::a
byte mul5::a#0 reg byte a 1001.0
word mul5::return
word mul5::return#0 return zp[2]:171 3667.333333333333
word mul5::return#2 return zp[2]:171 2002.0
word mul7(byte mul7::a)
word~ mul7::$1 zp[2]:171 10001.0
word~ mul7::$2 zp[2]:213 20002.0
word~ mul7::$3 zp[2]:213 20002.0
word~ mul7::$4 zp[2]:213 20002.0
byte mul7::a
byte mul7::a#0 reg byte a 1001.0
word mul7::return
word mul7::return#0 return zp[2]:171 3667.333333333333
word mul7::return#2 return zp[2]:171 2002.0
void newline()
byte* newline::start
byte* newline::start#0 start zp[2]:173 6.000000000006001E11
void print32(volatile dword print32::l)
byte* print32::dp
const byte* print32::dp#1 dp = (byte*)&print32::l
volatile dword print32::l loadstore zp[4]:191 110110.0
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
word~ printf_number_buffer::$19 zp[2]:128 1000001.0
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
const byte* printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 buffer_sign zp[1]:212 155000.2
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
const byte printf_number_buffer::format_min_length#0 format_min_length = 2
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
byte printf_number_buffer::format_zero_padding#0 format_zero_padding zp[1]:170 100000.14285714286
signed byte printf_number_buffer::len
signed byte printf_number_buffer::len#0 reg byte x 1500001.5
signed byte printf_number_buffer::len#1 reg byte x 2000002.0
signed byte printf_number_buffer::len#2 reg byte x 3000003.0
signed byte printf_number_buffer::padding
signed byte printf_number_buffer::padding#1 padding zp[1]:175 1000001.0
signed byte printf_number_buffer::padding#10 padding zp[1]:175 300000.30000000005
void printf_padding(byte printf_padding::pad , byte printf_padding::length)
byte printf_padding::i
byte printf_padding::i#1 i zp[1]:177 2.0000000002E10
byte printf_padding::i#2 i zp[1]:177 7.50000000075E9
byte printf_padding::length
byte printf_padding::length#0 length zp[1]:176 2000002.0
byte printf_padding::length#1 length zp[1]:176 2000002.0
byte printf_padding::length#4 length zp[1]:176 1.6670000005E9
byte printf_padding::pad
byte printf_padding::pad#5 pad zp[1]:215 1.6666666668333333E9
void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
struct printf_format_number printf_uchar::format
byte printf_uchar::format_justify_left
byte printf_uchar::format_min_length
byte printf_uchar::format_radix
byte printf_uchar::format_sign_always
byte printf_uchar::format_upper_case
byte printf_uchar::format_zero_padding
byte printf_uchar::format_zero_padding#10 format_zero_padding zp[1]:170 20000.2
byte printf_uchar::uvalue
byte printf_uchar::uvalue#0 reg byte x 20002.0
byte printf_uchar::uvalue#1 reg byte x 20002.0
byte printf_uchar::uvalue#10 reg byte x 71504.0
byte printf_uchar::uvalue#2 reg byte x 20002.0
byte printf_uchar::uvalue#3 reg byte x 20002.0
byte printf_uchar::uvalue#4 reg byte x 2002.0
byte printf_uchar::uvalue#5 reg byte x 2002.0
byte printf_uchar::uvalue#6 reg byte x 2002.0
void putchar(byte putchar::code)
byte putchar::code
byte* putchar::loc
byte* putchar::loc#0 loc zp[2]:213 1.000000000001E12
byte putchar::newChar
byte putchar::newChar#0 reg byte a 1.5000000000015E12
const byte* rawmap[$100]  = kickasm {{ .var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}
 }}
void setcursor()
byte setcursor::c
byte setcursor::c#0 reg byte x 7.50000000000075E12
byte setcursor::c#1 reg byte a 2.0000000000002E13
byte* setcursor::loc
byte* setcursor::loc#0 loc zp[2]:213 1.0000000000001E13
word strlen(byte* strlen::str)
word strlen::len
word strlen::len#1 len zp[2]:128 1.00000001E8
word strlen::len#2 len zp[2]:128 4.0200001E7
word strlen::return
word strlen::return#2 return zp[2]:128 2000002.0
word strlen::return#3 return zp[2]:128 4.0
byte* strlen::str
byte* strlen::str#0 str zp[2]:183 2.00000002E8
byte* strlen::str#3 str zp[2]:183 1.0333333466666667E8
byte* strlen::str#5 str zp[2]:183 1.0000001E7
void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
byte* uctoa::buffer
byte* uctoa::buffer#11 buffer zp[2]:173 3.3350000050000006E8
byte* uctoa::buffer#14 buffer zp[2]:173 1.5000000015E9
byte* uctoa::buffer#3 buffer zp[2]:173 2000002.0
byte* uctoa::buffer#4 buffer zp[2]:173 2.000000002E9
byte uctoa::digit
byte uctoa::digit#1 digit zp[1]:175 2.000000002E9
byte uctoa::digit#2 digit zp[1]:175 3.07692308E8
byte uctoa::digit_value
byte uctoa::digit_value#0 digit_value zp[1]:215 6.000000005999999E8
byte* uctoa::digit_values
byte uctoa::max_digits
byte uctoa::radix
byte uctoa::started
byte uctoa::started#2 started zp[1]:176 6.000000005999999E8
byte uctoa::started#4 started zp[1]:176 1.000000001E9
byte uctoa::value
byte uctoa::value#0 reg byte x 1.000000001E9
byte uctoa::value#1 reg byte x 550001.0
byte uctoa::value#2 reg byte x 6.670000010000001E8
byte uctoa::value#6 reg byte x 1.5000000015E9
byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
byte* uctoa_append::buffer
byte* uctoa_append::buffer#0 buffer zp[2]:173 1.37500000025E9
byte uctoa_append::digit
byte uctoa_append::digit#1 reg byte y 1.00000000000001E14
byte uctoa_append::digit#2 reg byte y 1.000050000000015E14
byte uctoa_append::return
byte uctoa_append::return#0 reg byte x 2.000000002E9
byte uctoa_append::sub
byte uctoa_append::sub#0 sub zp[1]:215 3.33335000000005E13
byte uctoa_append::value
byte uctoa_append::value#0 reg byte x 3.666666667333333E9
byte uctoa_append::value#1 reg byte x 2.00000000000002E14
byte uctoa_append::value#2 reg byte x 5.000183333333417E13
void waitFrames(signed byte waitFrames::frames)
signed byte waitFrames::frames
signed byte waitFrames::frames#0 reg byte x 2.0000002E7
signed byte waitFrames::frames#4 reg byte x 1.0000001E7

zp[2]:128 [ strlen::len#2 strlen::len#1 strlen::return#3 strlen::return#2 memcpy::num#3 memcpy::num#1 md5::initial_len#0 printf_number_buffer::$19 md5::$8 ]
zp[2]:130 [ md5::offset#2 md5::offset#1 ]
zp[4]:132 [ h0#10 h0#3 ]
zp[4]:136 [ h1#10 h1#3 ]
zp[4]:140 [ h2#10 h2#3 ]
zp[4]:144 [ h3#10 h3#3 ]
zp[1]:148 [ md5::i#10 md5::i#1 ]
zp[4]:149 [ md5::a#11 md5::a#59 md5::a#0 md5::$74 md5::$75 md5::$76 md5::$78 ]
zp[4]:153 [ md5::b#10 md5::b#1 md5::b#0 ]
zp[4]:157 [ md5::c#10 md5::c#1 md5::c#0 ]
zp[4]:161 [ md5::temp#0 md5::temp#19 md5::d#0 ]
zp[4]:165 [ md5::f#10 md5::f#12 md5::f#13 md5::f#14 md5::f#1 md5::$44 md5::$38 md5::$31 md5::$27 md5::$43 ]
zp[1]:169 [ md5::g#10 md5::g#2 md5::g#3 md5::g#4 md5::g#38 md5::$86 ]
reg byte x [ printf_uchar::uvalue#10 printf_uchar::uvalue#4 printf_uchar::uvalue#5 printf_uchar::uvalue#6 printf_uchar::uvalue#0 printf_uchar::uvalue#1 printf_uchar::uvalue#2 printf_uchar::uvalue#3 ]
zp[1]:170 [ printf_uchar::format_zero_padding#10 printf_number_buffer::format_zero_padding#0 ]
reg byte x [ waitFrames::frames#4 waitFrames::frames#0 ]
zp[2]:171 [ mod16::a#3 mod16::a#0 mod16::a#1 mod16::a#2 mul7::return#2 md5::$40 md5::$35 mod16::t#0 mul3::return#2 mul3::return#0 mul5::return#2 mul5::return#0 mul7::$1 mul7::return#0 mul3::$1 mul5::$1 memcpy::source#3 memcpy::source#4 memcpy::src#2 memcpy::src#4 memcpy::src#1 memcpy::source#0 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
zp[2]:173 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 memset::str#3 memset::str#0 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#1 newline::start#0 ]
reg byte x [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
zp[1]:175 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 uctoa::digit#2 uctoa::digit#1 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
zp[1]:176 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#0 uctoa::started#2 uctoa::started#4 ]
zp[1]:177 [ printf_padding::i#2 printf_padding::i#1 ]
reg byte a [ cputs::c#1 ]
zp[1]:178 [ cputc::c ]
zp[2]:179 [ md5::$0 md5::$1 md5::$2 md5::$3 md5::new_len#0 ]
zp[2]:181 [ calloc::return#2 md5::msg#1 calloc::return#0 malloc::size#0 malloc::mem#0 ]
zp[2]:183 [ md5::$91 strlen::str#3 strlen::str#5 strlen::str#0 cputs::s#12 cputs::s#13 cputs::s#0 ]
zp[4]:185 [ md5::bits_len ]
zp[2]:189 [ md5::w#0 ]
zp[4]:191 [ print32::l ]
reg byte a [ md5::$25 ]
reg byte a [ md5::$26 ]
zp[4]:195 [ md5::d#1 ]
zp[1]:199 [ md5::$89 ]
zp[4]:200 [ md5::$71 md5::$72 md5::$73 md5::lr#0 ]
reg byte a [ md5::$77 ]
reg byte a [ mul7::a#0 ]
reg byte a [ mod16::return#4 ]
reg byte a [ mul3::a#0 ]
reg byte a [ mod16::return#3 ]
zp[4]:204 [ md5::$32 md5::$33 ]
reg byte a [ mul5::a#0 ]
reg byte a [ mod16::return#2 ]
zp[4]:208 [ md5::$28 md5::$29 ]
reg byte x [ cputc::convertToScreenCode1_return#0 ]
zp[1]:212 [ printf_number_buffer::buffer_sign#0 ]
reg byte a [ mod16::return#0 ]
zp[2]:213 [ cursorLocation::return#0 putchar::loc#0 cursorLocation::return#1 cursorLocation::return#3 setcursor::loc#0 cursorLocation::$0 cursorLocation::$1 cursorLocation::$3 cursorLocation::$5 mul7::$2 mul7::$3 mul7::$4 memcpy::src_end#0 ]
reg byte a [ putchar::newChar#0 ]
reg byte x [ setcursor::c#0 ]
reg byte a [ setcursor::c#1 ]
zp[1]:215 [ uctoa::digit_value#0 uctoa_append::sub#0 printf_padding::pad#5 ]
reg byte x [ uctoa_append::return#0 ]
zp[2]:216 [ cursorLocation::$4 mul5::$2 mul3::$2 memset::num#2 memset::num#0 calloc::nitems#0 memset::end#0 memcpy::destination#3 memcpy::destination#7 memcpy::destination#8 memcpy::destination#0 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memcpy::destination#2 ]
mem[12] [ printf_buffer ]
