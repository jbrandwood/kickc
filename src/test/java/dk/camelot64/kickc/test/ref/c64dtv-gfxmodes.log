PARSING src/test/java/dk/camelot64/kickc/test/kc/c64dtv-gfxmodes.kc
// Exploring C64DTV Screen Modes
import "c64dtv.kc"
import "print.kc"
import "keyboard.kc"

void main() {
    *DTV_FEATURE = DTV_FEATURE_ENABLE;
    while(true) {
        menu();
    }
}

const byte* MENU_SCREEN = $8000;
const byte* MENU_CHARSET = $9800; // Charset ROM
byte[] MENU_TEXT =
     "C64DTV Graphics Modes            EMBLHCC@" +
     "                                 CCMIIHO@" +
     "                                 MMMNCUL@" +
     "----------------------------------------@" +
     "1. Standard Char             (V) 0000000@" +
     "2. Extended Color Char       (V) 1000000@" +
     "3. Multicolor Char           (V) 0100000@" +
     "4. Standard Bitmap           (V) 0010000@" +
     "5. Multicolor Bitmap         (V) 0110000@" +
     "6. High Color Standard Char  (H) 0000100@" +
     "7. High Extended Color Char  (H) 1000100@" +
     "8. High Multicolor Char      (H) 0100100@" +
     "9. High Multicolor Bitmap    (H) 0110100@" +
     "a. Sixs Fred                 (D) 1111100@" +
     "b. Sixs Fred 2               (D) 1111000@" +
     "c. Two Plane Bitmap          (D) 1011100@" +
     "d. Two Plane Multicol Bitmap (D) 1111100@" +
     "e. 8bpp Pixel Cell           (D) 1101110@" +
     "f. Chunky 8bpp Bitmap        (D) 1101111@" +
     "----------------------------------------@" +
     "    (V) vicII (H) vicII+hicol (D) c64dtv@" +
     "@" ;

void menu() {
    // DTV Graphics Bank
    *DTV_GRAPHICS_VIC_BANK = (byte)((dword)MENU_CHARSET/$10000);
    // DTV Graphics Mode
    *DTV_CONTROL = 0;
    // VIC Graphics Bank
    *CIA2_PORT_A_DDR = %00000011; // Set VIC Bank bits to output - all others to input
    *CIA2_PORT_A = %00000011 ^ (byte)((word)MENU_CHARSET/$4000); // Set VIC Bank
    // VIC Graphics Mode
    *VIC_CONTROL = VIC_DEN|VIC_RSEL|3;
    *VIC_CONTROL2 = VIC_CSEL;
    // VIC Memory Pointers
    *VIC_MEMORY =  (byte)((((word)MENU_SCREEN&$3fff)/$40)|(((word)MENU_CHARSET&$3fff)/$400));
    // Char Colors
    for(byte* c=COLS;c!=COLS+1000;c++) *c=LIGHT_GREEN;
    // Screen colors
    *BGCOL = 0;
    *BORDERCOL = 0;
    // Display menu Text
    print_set_screen(MENU_SCREEN);
    print_cls();
    print_str_lines(MENU_TEXT);
    // Wait for key press
    while(true) {
        if(keyboard_key_pressed(KEY_C)!=0) {
            mode_twoplanebitmap();
            return;
        }
        byte* last = MENU_SCREEN+999;
        (*last)++;
    }

}

const byte* TWOPLANE_PLANEA = $4000;
const byte* TWOPLANE_PLANEB = $6000;

// Test the Two Plane Bitmap - generated from the two DTV linear graphics plane counters
// Two Plane Bitmap Mode (CHUNK/COLDIS/MCM = 0, ECM/BMM/HICOL/LINEAR = 1)
void mode_twoplanebitmap() {
    // DTV Graphics Mode
    *DTV_CONTROL = DTV_CONTROL_HIGHCOLOR_ON | DTV_CONTROL_LINEAR_ADDRESSING_ON;
    // VIC Graphics Mode
    *VIC_CONTROL = VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3;
    *VIC_CONTROL2 = VIC_CSEL;
    // Linear Graphics Plane A Counter
    *DTV_PLANEA_START_LO = <TWOPLANE_PLANEA;
    *DTV_PLANEA_START_MI = >TWOPLANE_PLANEA;
    *DTV_PLANEA_START_HI = 0;
    *DTV_PLANEA_STEP = 1;
    *DTV_PLANEA_MODULO_LO = 0;
    *DTV_PLANEA_MODULO_HI = 0;
    // Linear Graphics Plane B Counter
    *DTV_PLANEB_START_LO = <TWOPLANE_PLANEB;
    *DTV_PLANEB_START_MI = >TWOPLANE_PLANEB;
    *DTV_PLANEB_START_HI = 0;
    *DTV_PLANEB_STEP = 1;
    *DTV_PLANEB_MODULO_LO = 0;
    *DTV_PLANEB_MODULO_HI = 0;

    // Screen colors
    *BORDERCOL = 0;
    *BGCOL1 = GREEN; // Color for bits 00
    *BGCOL2 = BLUE; // Color for bits 11
    // Colors for bits 01 / 10
    for(byte* c=COLS;c!=COLS+1000;c++) *c= <c;
    // Graphics for Plane A - horizontal stripes
    byte* gfxa = TWOPLANE_PLANEA;
    for(byte ay : 0..199) {
        for (byte ax : 0..39) {
            if((ay&4)==0) {
                *gfxa++ = $00;
            } else {
                *gfxa++ = $ff;
            }
        }
    }
    // Graphics for Plane B - vertical stripes
    byte* gfxb = TWOPLANE_PLANEB;
    for(byte by : 0..199) {
        for ( byte bx : 0..39) {
            *gfxb++ = $0f;
        }
    }
    while(true) {
        if(keyboard_key_pressed(KEY_SPACE)!=0) {
            return;
        }
    }

}


Importing c64dtv.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/c64dtv.kc
// C64 DTV version 2 Registers and Constants
//
// Sources
// (J) https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide
// (H) http://dtvhacking.cbm8bit.com/dtv_wiki/images/d/d9/Dtv_registers_full.txt

import "c64.kc"

// Feature enables or disables the extra C64 DTV features
const byte* DTV_FEATURE = $d03f;
const byte DTV_FEATURE_ENABLE = 1;
const byte DTV_FEATURE_DISABLE_TIL_RESET = 2;

// Controls the graphics modes of the C64 DTV
const byte* DTV_CONTROL = $d03c;
const byte DTV_CONTROL_LINEAR_ADDRESSING_ON = $01;
const byte DTV_CONTROL_BORDER_OFF = $02;
const byte DTV_CONTROL_HIGHCOLOR_ON = $04;
const byte DTV_CONTROL_OVERSCAN_ON = $08;
const byte DTV_CONTROL_COLORRAM_OFF = $10;
const byte DTV_CONTROL_BADLINE_OFF = $20;
const byte DTV_CONTROL_CHUNKY_ON = $40;

// The contains colors for the 16 first colors ($00-$0f)
const byte* DTV_PALETTE = $d200;

// Linear Graphics Plane A Counter Control
const byte* DTV_PLANEA_START_LO = $d03a;
const byte* DTV_PLANEA_START_MI = $d03b;
const byte* DTV_PLANEA_START_HI = $d045;
const byte* DTV_PLANEA_STEP = $d046;
const byte* DTV_PLANEA_MODULO_LO = $d038;
const byte* DTV_PLANEA_MODULO_HI = $d039;

// Linear Graphics Plane B Counter Control
const byte* DTV_PLANEB_START_LO = $d049;
const byte* DTV_PLANEB_START_MI = $d04a;
const byte* DTV_PLANEB_START_HI = $d04b;
const byte* DTV_PLANEB_STEP = $d04c;
const byte* DTV_PLANEB_MODULO_LO = $d047;
const byte* DTV_PLANEB_MODULO_HI = $d048;

// Select memory bank where sprite data is fetched from (bits 5:0) - source only (J)
// Memory address of Sprite RAM is SpriteBank*$10000
const byte* DTV_SPRITE_BANK = $d04d;

// Select memory bank where color data is fetched from (bits 11:0)
// Memory address of Color RAM is ColorBank*$400
const byte* DTV_COLOR_BANK_LO = $d036;
const byte* DTV_COLOR_BANK_HI = $d037;

// Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
// Memory address of VIC Graphics is GraphicsBank*$10000
const byte* DTV_GRAPHICS_VIC_BANK = $d03d;
// Selects memory bank for upper data for high color modes. (bits 5:0) - source only (H)
const byte* DTV_GRAPHICS_HICOL_BANK = $d03e;



Importing c64.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/c64.kc
// Commodore 64 Registers and Constants

const byte* PROCPORT = $01;

const byte* CHARGEN = $d000;

const byte* SPRITES_XPOS = $d000;
const byte* SPRITES_YPOS = $d001;
const byte* SPRITES_XMSB = $d010;
const byte* RASTER = $d012;
const byte* SPRITES_ENABLE = $d015;
const byte* SPRITES_EXPAND_Y = $d017;
const byte* SPRITES_PRIORITY = $d01b;
const byte* SPRITES_MC = $d01c;
const byte* SPRITES_EXPAND_X = $d01d;
const byte* BORDERCOL = $d020;
const byte* BGCOL = $d021;
const byte* BGCOL1 = $d021;
const byte* BGCOL2 = $d022;
const byte* SPRITES_MC1 = $d025;
const byte* SPRITES_MC2 = $d026;
const byte* SPRITES_COLS = $d027;

const byte* VIC_CONTROL = $d011;
const byte* D011 = $d011;
const byte VIC_RST8 = %10000000;
const byte VIC_ECM =  %01000000;
const byte VIC_BMM =  %00100000;
const byte VIC_DEN =  %00010000;
const byte VIC_RSEL =  %00001000;

const byte* VIC_CONTROL2 = $d016;
const byte* D016 = $d016;
const byte VIC_MCM =  %00010000;
const byte VIC_CSEL = %00001000;

const byte* D018 = $d018;
const byte* VIC_MEMORY = $d018;

const byte* COLS = $d800;

// CIA#1 Port A: keyboard matrix columns and joystick #2
const byte* CIA1_PORT_A = $dc00;
// CIA#1 Port B: keyboard matrix rows and joystick #1.
const byte* CIA1_PORT_B = $dc01;
// CIA #1 Port A data direction register.
const byte* CIA1_PORT_A_DDR = $dc02;
// CIA #1 Port B data direction register.
const byte* CIA1_PORT_B_DDR = $dc03;

// CIA#2 Port A: Serial bus, RS-232, VIC memory bank
const byte* CIA2_PORT_A = $dd00;
// CIA#2 Port B: RS-232
const byte* CIA2_PORT_B = $dd01;
// CIA #2 Port A data direction register.
const byte* CIA2_PORT_A_DDR = $dd02;
// CIA #2 Port B data direction register.
const byte* CIA2_PORT_B_DDR = $dd03;

const byte BLACK = $0;
const byte WHITE = $1;
const byte RED = $2;
const byte CYAN = $3;
const byte PURPLE = $4;
const byte GREEN = $5;
const byte BLUE = $6;
const byte YELLOW = $7;
const byte ORANGE = $8;
const byte BROWN = $9;
const byte PINK = $a;
const byte DARK_GREY= $b;
const byte GREY = $c;
const byte LIGHT_GREEN = $d;
const byte LIGHT_BLUE = $e;
const byte LIGHT_GREY = $f;

Importing print.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/print.kc

byte* print_screen = $0400;
byte* print_line_cursor = print_screen;
byte* print_char_cursor = print_line_cursor;

// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
void print_str_lines(byte* str) {
    while(*str!='@') {
        do {
            byte ch = *(str++);
            if(ch!='@') {
                *(print_char_cursor++) = ch;
            }
        } while (ch!='@');
        print_ln();
    }
}

// Print a zero-terminated string followed by a newline
void print_str_ln(byte* str) {
    print_str(str);
    print_ln();
}

// Print a zero-terminated string
void print_str(byte* str) {
    while(*str!='@') {
        *(print_char_cursor++) = *(str++);
    }
}

// Print a string at a specific screen position
void print_str_at(byte* str, byte* at) {
    while(*str!='@') {
        *(at++) = *(str++);
    }
}

// Print a newline
void print_ln() {
    do {
        print_line_cursor = print_line_cursor + $28;
    } while (print_line_cursor<print_char_cursor);
    print_char_cursor = print_line_cursor;
}

// Print a signed word as HEX
void print_sword(signed word w) {
    if(w<0) {
        print_char('-');
        w = -w;
    }
    print_word((word)w);
}

// Print a signed byte as HEX
void print_sbyte(signed byte b) {
    if(b<0) {
        print_char('-');
        b = -b;
    }
    print_byte((byte)b);
}

// Print a word as HEX
void print_word(word w) {
    print_byte(>w);
    print_byte(<w);
}

// Print a dword as HEX
void print_dword(dword dw) {
    print_word(>dw);
    print_word(<dw);
}

// Print a signed dword as HEX
void print_sdword(signed dword dw) {
    if(dw<0) {
        print_char('-');
        dw = -dw;
    }
    print_dword((dword)dw);
}

// Print a byte as HEX
void print_byte(byte b) {
    // Table of hexadecimal digits
    const byte[] hextab = "0123456789abcdef";
    print_char(hextab[b>>4]);
    print_char(hextab[b&$f]);
}

// Print a single char
void print_char(byte ch) {
    *(print_char_cursor++) = ch;
}

// Clear the screen. Also resets current line/char cursor.
void print_cls() {
    for(byte* sc=print_screen; sc!=print_screen+1000; sc++) {
        *sc = ' ';
    }
    print_line_cursor = print_screen;
    print_char_cursor = print_line_cursor;
}

// Set the screen to print on. Also resets current line/char cursor.
void print_set_screen(byte* screen) {
    print_screen = screen;
    print_line_cursor = print_screen;
    print_char_cursor = print_line_cursor;
}

Adding pre/post-modifier (byte*) print_str_lines::str ← ++ (byte*) print_str_lines::str
Adding pre/post-modifier (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
Adding pre/post-modifier (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
Adding pre/post-modifier (byte*) print_str::str ← ++ (byte*) print_str::str
Adding pre/post-modifier (byte*) print_str_at::at ← ++ (byte*) print_str_at::at
Adding pre/post-modifier (byte*) print_str_at::str ← ++ (byte*) print_str_at::str
Adding pre/post-modifier (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
Adding pre/post-modifier (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
Importing keyboard.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/keyboard.kc
// Simple Keyboard Input Library
// C64 Keyboard Matrix Reference - from http://codebase64.org/doku.php?id=base:reading_the_keyboard
// Keyboard Codes are %00rrrccc, where rrr is the row ID (0-7) and ccc is the column ID (0-7)
// +----+----------------------+-------------------------------------------------------------------------------------------------------+
// |    | Write                |                                Read $dc01 (C64 screen code in parenthesis):                              |
// |row:| $dc00: row bits      +------------+------------+------------+------------+------------+------------+------------+------------+
// |    |                      |   BIT 7    |   BIT 6    |   BIT 5    |   BIT 4    |   BIT 3    |   BIT 2    |   BIT 1    |   BIT 0    |
// +----+----------------------+------------+------------+------------+------------+------------+------------+------------+------------+
// |0.  | #%11111110 (254/$fe) | DOWN  ($  )|   F5  ($  )|   F3  ($  )|   F1  ($  )|   F7  ($  )| RIGHT ($  )| RETURN($  )|DELETE ($  )|
// |1.  | #%11111101 (253/$fd) |LEFT-SH($  )|   e   ($05)|   s   ($13)|   z   ($1a)|   4   ($34)|   a   ($01)|   w   ($17)|   3   ($33)|
// |2.  | #%11111011 (251/$fb) |   x   ($18)|   t   ($14)|   f   ($06)|   c   ($03)|   6   ($36)|   d   ($04)|   r   ($12)|   5   ($35)|
// |3.  | #%11110111 (247/$f7) |   v   ($16)|   u   ($15)|   h   ($08)|   b   ($02)|   8   ($38)|   g   ($07)|   y   ($19)|   7   ($37)|
// |4.  | #%11101111 (239/$ef) |   n   ($0e)|   o   ($0f)|   k   ($0b)|   m   ($0d)|   0   ($30)|   j   ($0a)|   i   ($09)|   9   ($39)|
// |5.  | #%11011111 (223/$df) |   ,   ($2c)|   @   ($00)|   :   ($3a)|   .   ($2e)|   -   ($2d)|   l   ($0c)|   p   ($10)|   +   ($2b)|
// |6.  | #%10111111 (191/$bf) |   /   ($2f)|   ^   ($1e)|   =   ($3d)|RGHT-SH($  )|  HOME ($  )|   ;   ($3b)|   *   ($2a)|   £   ($1c)|
// |7.  | #%01111111 (127/$7f) | STOP  ($  )|   q   ($11)|COMMODR($  )| SPACE ($20)|   2   ($32)|CONTROL($  )|  <-   ($1f)|   1   ($31)|
// +----+----------------------+------------+------------+------------+------------+------------+------------+------------+------------+

import "c64.kc"

// Keyboard Codes for all 63 keys.
// Keyboard Codes are %00rrrccc, where rrr is the row ID (0-7) and ccc is the column ID (0-7).
// See C64 Keyboard Matrix Reference http://codebase64.org/doku.php?id=base:reading_the_keyboard
const byte KEY_DEL          = $00;
const byte KEY_RETURN       = $01;
const byte KEY_CRSR_RIGHT   = $02;
const byte KEY_F7           = $03;
const byte KEY_F1           = $04;
const byte KEY_F3           = $05;
const byte KEY_F5           = $06;
const byte KEY_CRSR_DOWN    = $07;
const byte KEY_3            = $08;
const byte KEY_W            = $09;
const byte KEY_A            = $0a;
const byte KEY_4            = $0b;
const byte KEY_Z            = $0c;
const byte KEY_S            = $0d;
const byte KEY_E            = $0e;
const byte KEY_LSHIFT       = $0f;
const byte KEY_5            = $10;
const byte KEY_R            = $11;
const byte KEY_D            = $12;
const byte KEY_6            = $13;
const byte KEY_C            = $14;
const byte KEY_F            = $15;
const byte KEY_T            = $16;
const byte KEY_X            = $17;
const byte KEY_7            = $18;
const byte KEY_Y            = $19;
const byte KEY_G            = $1a;
const byte KEY_8            = $1b;
const byte KEY_B            = $1c;
const byte KEY_H            = $1d;
const byte KEY_U            = $1e;
const byte KEY_V            = $1f;
const byte KEY_9            = $20;
const byte KEY_I            = $21;
const byte KEY_J            = $22;
const byte KEY_0            = $23;
const byte KEY_M            = $24;
const byte KEY_K            = $25;
const byte KEY_O            = $26;
const byte KEY_N            = $27;
const byte KEY_PLUS         = $28;
const byte KEY_P            = $29;
const byte KEY_L            = $2a;
const byte KEY_MINUS        = $2b;
const byte KEY_DOT          = $2c;
const byte KEY_COLON        = $2d;
const byte KEY_AT           = $2e;
const byte KEY_COMMA        = $2f;
const byte KEY_POUND        = $30;
const byte KEY_ASTERISK     = $31;
const byte KEY_SEMICOLON    = $32;
const byte KEY_HOME         = $33;
const byte KEY_RSHIFT       = $34;
const byte KEY_EQUALS       = $35;
const byte KEY_ARROW_UP     = $36;
const byte KEY_SLASH        = $37;
const byte KEY_1            = $38;
const byte KEY_ARROW_LEFT   = $39;
const byte KEY_CTRL         = $3a;
const byte KEY_2            = $3b;
const byte KEY_SPACE        = $3c;
const byte KEY_COMMODORE    = $3d;
const byte KEY_Q            = $3e;
const byte KEY_RUNSTOP      = $3f;

// Keycodes for each screen code character from $00-$3f.
// Chars that do not have an unmodified keycode return $3f (representing RUN/STOP).
const byte[] keyboard_char_keycodes = {
    /*@*/KEY_AT,    /*a*/KEY_A,   /*b*/KEY_B,        /*c*/KEY_C,         /*d*/KEY_D,     /*e*/KEY_E,      /*f*/KEY_F,        /*g*/KEY_G,
    /*h*/KEY_H,     /*i*/KEY_I,   /*j*/KEY_J,        /*k*/KEY_K,         /*l*/KEY_L,     /*m*/KEY_M,      /*n*/KEY_N,        /*o*/KEY_O,
    /*p*/KEY_P,     /*q*/KEY_Q,   /*r*/KEY_R,        /*s*/KEY_S,         /*t*/KEY_T,     /*u*/KEY_U,      /*v*/KEY_V,        /*w*/KEY_W,
    /*x*/KEY_X,     /*y*/KEY_Y,   /*z*/KEY_Z,        /*[*/$3f,           /*£*/KEY_POUND, /*]*/$3f,        /*^*/KEY_ARROW_UP, /*<-*/KEY_ARROW_LEFT,
    /* */KEY_SPACE, /*!*/$3f,     /*"*/$3f,          /*#*/$3f,           /*$*/$3f,       /*%*/$3f,        /*&*/$3f,          /*´*/$3f,
    /*(*/$3f,       /*)*/$3f,     /***/KEY_ASTERISK, /*+*/KEY_PLUS,      /*,*/KEY_COMMA, /*-*/KEY_MINUS,  /*.*/KEY_DOT,      /*/*/KEY_SLASH,
    /*0*/KEY_0,     /*1*/KEY_1,   /*2*/KEY_2,        /*3*/KEY_3,         /*4*/KEY_4,     /*5*/KEY_5,      /*6*/KEY_6,        /*7*/KEY_7,
    /*8*/KEY_8,     /*9*/KEY_9,   /*:*/KEY_COLON,    /*;*/KEY_SEMICOLON, /*<*/$3f,       /*=*/KEY_EQUALS, /*>*/$3f,          /*?*/$3f
};

// Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
byte[8] keyboard_matrix_row_bitmask = { %11111110, %11111101, %11111011, %11110111, %11101111, %11011111, %10111111, %01111111 };

// Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
byte[] keyboard_matrix_col_bitmask = { %00000001, %00000010, %00000100, %00001000, %00010000, %00100000, %01000000, %10000000 };

// Initialize keyboard reading by setting CIA#$ Data Direction Registers
void keyboard_init() {
    // Keyboard Matrix Columns Write Mode
    *CIA1_PORT_A_DDR = $ff;
    // Keyboard Matrix Columns Read Mode
    *CIA1_PORT_B_DDR = $00;
}
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
byte keyboard_matrix_read(byte rowid) {
    *CIA1_PORT_A = keyboard_matrix_row_bitmask[rowid];
    byte row_pressed_bits = ~*CIA1_PORT_B;
    return row_pressed_bits;
}

// Determines whether a specific key is currently pressed
// The key is a keyboard code defined from the keyboard matrix by %00rrrccc, where rrr is the row ID (0-7) and ccc is the column ID (0-7)
// All keys exist as as KEY_XXX constants.
// Returns zero if the key is not pressed and a non-zero value if the key is currently pressed
byte keyboard_key_pressed(byte key) {
    byte colidx = key&7;
    byte rowidx = key>>3;
    return keyboard_matrix_read(rowidx)&keyboard_matrix_col_bitmask[colidx];
}

// Get the keycode corresponding to a specific screen code character
// ch is the character to get the key code for ($00-$3f)
// Returns the key code corresponding to the passed character. Only characters with a non-shifted key are handled.
// If there is no non-shifted key representing the char $3f is returned (representing RUN/STOP) .
byte keyboard_get_keycode(byte ch) {
    return keyboard_char_keycodes[ch];
}
Importing c64.kc
Adding pre/post-modifier (byte*) menu::c ← ++ (byte*) menu::c
Adding pre/post-modifier *((byte*) menu::last) ← ++ *((byte*) menu::last)
Adding pre/post-modifier (byte*) mode_twoplanebitmap::c ← ++ (byte*) mode_twoplanebitmap::c
Adding pre/post-modifier (byte*) mode_twoplanebitmap::gfxa ← ++ (byte*) mode_twoplanebitmap::gfxa
Adding pre/post-modifier (byte*) mode_twoplanebitmap::gfxa ← ++ (byte*) mode_twoplanebitmap::gfxa
Adding pre/post-modifier (byte*) mode_twoplanebitmap::gfxb ← ++ (byte*) mode_twoplanebitmap::gfxb

STATEMENTS
  (byte*) PROCPORT ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) CHARGEN ← (word/dword/signed dword) 53248
  (byte*) SPRITES_XPOS ← (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS ← (word/dword/signed dword) 53249
  (byte*) SPRITES_XMSB ← (word/dword/signed dword) 53264
  (byte*) RASTER ← (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE ← (word/dword/signed dword) 53269
  (byte*) SPRITES_EXPAND_Y ← (word/dword/signed dword) 53271
  (byte*) SPRITES_PRIORITY ← (word/dword/signed dword) 53275
  (byte*) SPRITES_MC ← (word/dword/signed dword) 53276
  (byte*) SPRITES_EXPAND_X ← (word/dword/signed dword) 53277
  (byte*) BORDERCOL ← (word/dword/signed dword) 53280
  (byte*) BGCOL ← (word/dword/signed dword) 53281
  (byte*) BGCOL1 ← (word/dword/signed dword) 53281
  (byte*) BGCOL2 ← (word/dword/signed dword) 53282
  (byte*) SPRITES_MC1 ← (word/dword/signed dword) 53285
  (byte*) SPRITES_MC2 ← (word/dword/signed dword) 53286
  (byte*) SPRITES_COLS ← (word/dword/signed dword) 53287
  (byte*) VIC_CONTROL ← (word/dword/signed dword) 53265
  (byte*) D011 ← (word/dword/signed dword) 53265
  (byte) VIC_RST8 ← (byte/word/signed word/dword/signed dword) 128
  (byte) VIC_ECM ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) VIC_BMM ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) VIC_DEN ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2 ← (word/dword/signed dword) 53270
  (byte*) D016 ← (word/dword/signed dword) 53270
  (byte) VIC_MCM ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_CSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018 ← (word/dword/signed dword) 53272
  (byte*) VIC_MEMORY ← (word/dword/signed dword) 53272
  (byte*) COLS ← (word/dword/signed dword) 55296
  (byte*) CIA1_PORT_A ← (word/dword/signed dword) 56320
  (byte*) CIA1_PORT_B ← (word/dword/signed dword) 56321
  (byte*) CIA1_PORT_A_DDR ← (word/dword/signed dword) 56322
  (byte*) CIA1_PORT_B_DDR ← (word/dword/signed dword) 56323
  (byte*) CIA2_PORT_A ← (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_B ← (word/dword/signed dword) 56577
  (byte*) CIA2_PORT_A_DDR ← (word/dword/signed dword) 56578
  (byte*) CIA2_PORT_B_DDR ← (word/dword/signed dword) 56579
  (byte) BLACK ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) DARK_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) GREY ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) LIGHT_GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte) LIGHT_BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) LIGHT_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte*) DTV_FEATURE ← (word/dword/signed dword) 53311
  (byte) DTV_FEATURE_ENABLE ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_FEATURE_DISABLE_TIL_RESET ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*) DTV_CONTROL ← (word/dword/signed dword) 53308
  (byte) DTV_CONTROL_LINEAR_ADDRESSING_ON ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_CONTROL_BORDER_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_CONTROL_HIGHCOLOR_ON ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_CONTROL_OVERSCAN_ON ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_CONTROL_COLORRAM_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) DTV_CONTROL_BADLINE_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) DTV_CONTROL_CHUNKY_ON ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte*) DTV_PALETTE ← (word/dword/signed dword) 53760
  (byte*) DTV_PLANEA_START_LO ← (word/dword/signed dword) 53306
  (byte*) DTV_PLANEA_START_MI ← (word/dword/signed dword) 53307
  (byte*) DTV_PLANEA_START_HI ← (word/dword/signed dword) 53317
  (byte*) DTV_PLANEA_STEP ← (word/dword/signed dword) 53318
  (byte*) DTV_PLANEA_MODULO_LO ← (word/dword/signed dword) 53304
  (byte*) DTV_PLANEA_MODULO_HI ← (word/dword/signed dword) 53305
  (byte*) DTV_PLANEB_START_LO ← (word/dword/signed dword) 53321
  (byte*) DTV_PLANEB_START_MI ← (word/dword/signed dword) 53322
  (byte*) DTV_PLANEB_START_HI ← (word/dword/signed dword) 53323
  (byte*) DTV_PLANEB_STEP ← (word/dword/signed dword) 53324
  (byte*) DTV_PLANEB_MODULO_LO ← (word/dword/signed dword) 53319
  (byte*) DTV_PLANEB_MODULO_HI ← (word/dword/signed dword) 53320
  (byte*) DTV_SPRITE_BANK ← (word/dword/signed dword) 53325
  (byte*) DTV_COLOR_BANK_LO ← (word/dword/signed dword) 53302
  (byte*) DTV_COLOR_BANK_HI ← (word/dword/signed dword) 53303
  (byte*) DTV_GRAPHICS_VIC_BANK ← (word/dword/signed dword) 53309
  (byte*) DTV_GRAPHICS_HICOL_BANK ← (word/dword/signed dword) 53310
  (byte*) print_screen ← (word/signed word/dword/signed dword) 1024
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
proc (void()) print_str_lines((byte*) print_str_lines::str)
print_str_lines::@1:
  (boolean~) print_str_lines::$0 ← *((byte*) print_str_lines::str) != (byte) '@'
  if((boolean~) print_str_lines::$0) goto print_str_lines::@2
  goto print_str_lines::@3
print_str_lines::@2:
print_str_lines::@4:
  (byte) print_str_lines::ch ← *((byte*) print_str_lines::str)
  (byte*) print_str_lines::str ← ++ (byte*) print_str_lines::str
  (boolean~) print_str_lines::$1 ← (byte) print_str_lines::ch != (byte) '@'
  (boolean~) print_str_lines::$2 ← ! (boolean~) print_str_lines::$1
  if((boolean~) print_str_lines::$2) goto print_str_lines::@5
  *((byte*) print_char_cursor) ← (byte) print_str_lines::ch
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
print_str_lines::@5:
  (boolean~) print_str_lines::$3 ← (byte) print_str_lines::ch != (byte) '@'
  if((boolean~) print_str_lines::$3) goto print_str_lines::@4
  (void~) print_str_lines::$4 ← call print_ln 
  goto print_str_lines::@1
print_str_lines::@3:
print_str_lines::@return:
  return 
endproc // print_str_lines()
proc (void()) print_str_ln((byte*) print_str_ln::str)
  (void~) print_str_ln::$0 ← call print_str (byte*) print_str_ln::str 
  (void~) print_str_ln::$1 ← call print_ln 
print_str_ln::@return:
  return 
endproc // print_str_ln()
proc (void()) print_str((byte*) print_str::str)
print_str::@1:
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  goto print_str::@3
print_str::@2:
  *((byte*) print_char_cursor) ← *((byte*) print_str::str)
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  goto print_str::@1
print_str::@3:
print_str::@return:
  return 
endproc // print_str()
proc (void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
print_str_at::@1:
  (boolean~) print_str_at::$0 ← *((byte*) print_str_at::str) != (byte) '@'
  if((boolean~) print_str_at::$0) goto print_str_at::@2
  goto print_str_at::@3
print_str_at::@2:
  *((byte*) print_str_at::at) ← *((byte*) print_str_at::str)
  (byte*) print_str_at::at ← ++ (byte*) print_str_at::at
  (byte*) print_str_at::str ← ++ (byte*) print_str_at::str
  goto print_str_at::@1
print_str_at::@3:
print_str_at::@return:
  return 
endproc // print_str_at()
proc (void()) print_ln()
print_ln::@1:
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) print_line_cursor < (byte*) print_char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  (byte*) print_char_cursor ← (byte*) print_line_cursor
print_ln::@return:
  return 
endproc // print_ln()
proc (void()) print_sword((signed word) print_sword::w)
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
print_sword::@1:
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
print_sword::@return:
  return 
endproc // print_sword()
proc (void()) print_sbyte((signed byte) print_sbyte::b)
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
print_sbyte::@1:
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
print_sbyte::@return:
  return 
endproc // print_sbyte()
proc (void()) print_word((word) print_word::w)
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
print_word::@return:
  return 
endproc // print_word()
proc (void()) print_dword((dword) print_dword::dw)
  (word~) print_dword::$0 ← > (dword) print_dword::dw
  (void~) print_dword::$1 ← call print_word (word~) print_dword::$0 
  (word~) print_dword::$2 ← < (dword) print_dword::dw
  (void~) print_dword::$3 ← call print_word (word~) print_dword::$2 
print_dword::@return:
  return 
endproc // print_dword()
proc (void()) print_sdword((signed dword) print_sdword::dw)
  (boolean~) print_sdword::$0 ← (signed dword) print_sdword::dw < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sdword::$1 ← ! (boolean~) print_sdword::$0
  if((boolean~) print_sdword::$1) goto print_sdword::@1
  (void~) print_sdword::$2 ← call print_char (byte) '-' 
  (signed dword~) print_sdword::$3 ← - (signed dword) print_sdword::dw
  (signed dword) print_sdword::dw ← (signed dword~) print_sdword::$3
print_sdword::@1:
  (dword~) print_sdword::$4 ← ((dword)) (signed dword) print_sdword::dw
  (void~) print_sdword::$5 ← call print_dword (dword~) print_sdword::$4 
print_sdword::@return:
  return 
endproc // print_sdword()
proc (void()) print_byte((byte) print_byte::b)
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
print_byte::@return:
  return 
endproc // print_byte()
proc (void()) print_char((byte) print_char::ch)
  *((byte*) print_char_cursor) ← (byte) print_char::ch
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
print_char::@return:
  return 
endproc // print_char()
proc (void()) print_cls()
  (byte*) print_cls::sc ← (byte*) print_screen
print_cls::@1:
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) print_screen + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
print_cls::@return:
  return 
endproc // print_cls()
proc (void()) print_set_screen((byte*) print_set_screen::screen)
  (byte*) print_screen ← (byte*) print_set_screen::screen
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
print_set_screen::@return:
  return 
endproc // print_set_screen()
  (byte) KEY_DEL ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) KEY_RETURN ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) KEY_CRSR_RIGHT ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) KEY_F7 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) KEY_F1 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) KEY_F3 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) KEY_F5 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) KEY_CRSR_DOWN ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) KEY_3 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) KEY_W ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) KEY_A ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) KEY_4 ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) KEY_Z ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) KEY_S ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte) KEY_E ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) KEY_LSHIFT ← (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) KEY_5 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) KEY_R ← (byte/signed byte/word/signed word/dword/signed dword) 17
  (byte) KEY_D ← (byte/signed byte/word/signed word/dword/signed dword) 18
  (byte) KEY_6 ← (byte/signed byte/word/signed word/dword/signed dword) 19
  (byte) KEY_C ← (byte/signed byte/word/signed word/dword/signed dword) 20
  (byte) KEY_F ← (byte/signed byte/word/signed word/dword/signed dword) 21
  (byte) KEY_T ← (byte/signed byte/word/signed word/dword/signed dword) 22
  (byte) KEY_X ← (byte/signed byte/word/signed word/dword/signed dword) 23
  (byte) KEY_7 ← (byte/signed byte/word/signed word/dword/signed dword) 24
  (byte) KEY_Y ← (byte/signed byte/word/signed word/dword/signed dword) 25
  (byte) KEY_G ← (byte/signed byte/word/signed word/dword/signed dword) 26
  (byte) KEY_8 ← (byte/signed byte/word/signed word/dword/signed dword) 27
  (byte) KEY_B ← (byte/signed byte/word/signed word/dword/signed dword) 28
  (byte) KEY_H ← (byte/signed byte/word/signed word/dword/signed dword) 29
  (byte) KEY_U ← (byte/signed byte/word/signed word/dword/signed dword) 30
  (byte) KEY_V ← (byte/signed byte/word/signed word/dword/signed dword) 31
  (byte) KEY_9 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) KEY_I ← (byte/signed byte/word/signed word/dword/signed dword) 33
  (byte) KEY_J ← (byte/signed byte/word/signed word/dword/signed dword) 34
  (byte) KEY_0 ← (byte/signed byte/word/signed word/dword/signed dword) 35
  (byte) KEY_M ← (byte/signed byte/word/signed word/dword/signed dword) 36
  (byte) KEY_K ← (byte/signed byte/word/signed word/dword/signed dword) 37
  (byte) KEY_O ← (byte/signed byte/word/signed word/dword/signed dword) 38
  (byte) KEY_N ← (byte/signed byte/word/signed word/dword/signed dword) 39
  (byte) KEY_PLUS ← (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte) KEY_P ← (byte/signed byte/word/signed word/dword/signed dword) 41
  (byte) KEY_L ← (byte/signed byte/word/signed word/dword/signed dword) 42
  (byte) KEY_MINUS ← (byte/signed byte/word/signed word/dword/signed dword) 43
  (byte) KEY_DOT ← (byte/signed byte/word/signed word/dword/signed dword) 44
  (byte) KEY_COLON ← (byte/signed byte/word/signed word/dword/signed dword) 45
  (byte) KEY_AT ← (byte/signed byte/word/signed word/dword/signed dword) 46
  (byte) KEY_COMMA ← (byte/signed byte/word/signed word/dword/signed dword) 47
  (byte) KEY_POUND ← (byte/signed byte/word/signed word/dword/signed dword) 48
  (byte) KEY_ASTERISK ← (byte/signed byte/word/signed word/dword/signed dword) 49
  (byte) KEY_SEMICOLON ← (byte/signed byte/word/signed word/dword/signed dword) 50
  (byte) KEY_HOME ← (byte/signed byte/word/signed word/dword/signed dword) 51
  (byte) KEY_RSHIFT ← (byte/signed byte/word/signed word/dword/signed dword) 52
  (byte) KEY_EQUALS ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte) KEY_ARROW_UP ← (byte/signed byte/word/signed word/dword/signed dword) 54
  (byte) KEY_SLASH ← (byte/signed byte/word/signed word/dword/signed dword) 55
  (byte) KEY_1 ← (byte/signed byte/word/signed word/dword/signed dword) 56
  (byte) KEY_ARROW_LEFT ← (byte/signed byte/word/signed word/dword/signed dword) 57
  (byte) KEY_CTRL ← (byte/signed byte/word/signed word/dword/signed dword) 58
  (byte) KEY_2 ← (byte/signed byte/word/signed word/dword/signed dword) 59
  (byte) KEY_SPACE ← (byte/signed byte/word/signed word/dword/signed dword) 60
  (byte) KEY_COMMODORE ← (byte/signed byte/word/signed word/dword/signed dword) 61
  (byte) KEY_Q ← (byte/signed byte/word/signed word/dword/signed dword) 62
  (byte) KEY_RUNSTOP ← (byte/signed byte/word/signed word/dword/signed dword) 63
  (byte[]) keyboard_char_keycodes ← { (byte) KEY_AT, (byte) KEY_A, (byte) KEY_B, (byte) KEY_C, (byte) KEY_D, (byte) KEY_E, (byte) KEY_F, (byte) KEY_G, (byte) KEY_H, (byte) KEY_I, (byte) KEY_J, (byte) KEY_K, (byte) KEY_L, (byte) KEY_M, (byte) KEY_N, (byte) KEY_O, (byte) KEY_P, (byte) KEY_Q, (byte) KEY_R, (byte) KEY_S, (byte) KEY_T, (byte) KEY_U, (byte) KEY_V, (byte) KEY_W, (byte) KEY_X, (byte) KEY_Y, (byte) KEY_Z, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_POUND, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_ARROW_UP, (byte) KEY_ARROW_LEFT, (byte) KEY_SPACE, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_ASTERISK, (byte) KEY_PLUS, (byte) KEY_COMMA, (byte) KEY_MINUS, (byte) KEY_DOT, (byte) KEY_SLASH, (byte) KEY_0, (byte) KEY_1, (byte) KEY_2, (byte) KEY_3, (byte) KEY_4, (byte) KEY_5, (byte) KEY_6, (byte) KEY_7, (byte) KEY_8, (byte) KEY_9, (byte) KEY_COLON, (byte) KEY_SEMICOLON, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_EQUALS, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63 }
  (byte[8]) keyboard_matrix_row_bitmask ← { (byte/word/signed word/dword/signed dword) 254, (byte/word/signed word/dword/signed dword) 253, (byte/word/signed word/dword/signed dword) 251, (byte/word/signed word/dword/signed dword) 247, (byte/word/signed word/dword/signed dword) 239, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 191, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (byte[]) keyboard_matrix_col_bitmask ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 16, (byte/signed byte/word/signed word/dword/signed dword) 32, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/word/signed word/dword/signed dword) 128 }
proc (void()) keyboard_init()
  *((byte*) CIA1_PORT_A_DDR) ← (byte/word/signed word/dword/signed dword) 255
  *((byte*) CIA1_PORT_B_DDR) ← (byte/signed byte/word/signed word/dword/signed dword) 0
keyboard_init::@return:
  return 
endproc // keyboard_init()
proc (byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
  *((byte*) CIA1_PORT_A) ← *((byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*) CIA1_PORT_B)
  (byte) keyboard_matrix_read::row_pressed_bits ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return ← (byte) keyboard_matrix_read::row_pressed_bits
  goto keyboard_matrix_read::@return
keyboard_matrix_read::@return:
  (byte) keyboard_matrix_read::return ← (byte) keyboard_matrix_read::return
  return (byte) keyboard_matrix_read::return
endproc // keyboard_matrix_read()
proc (byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
  (byte~) keyboard_key_pressed::$0 ← (byte) keyboard_key_pressed::key & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) keyboard_key_pressed::colidx ← (byte~) keyboard_key_pressed::$0
  (byte~) keyboard_key_pressed::$1 ← (byte) keyboard_key_pressed::key >> (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) keyboard_key_pressed::rowidx ← (byte~) keyboard_key_pressed::$1
  (byte~) keyboard_key_pressed::$2 ← call keyboard_matrix_read (byte) keyboard_key_pressed::rowidx 
  (byte~) keyboard_key_pressed::$3 ← (byte~) keyboard_key_pressed::$2 & *((byte[]) keyboard_matrix_col_bitmask + (byte) keyboard_key_pressed::colidx)
  (byte) keyboard_key_pressed::return ← (byte~) keyboard_key_pressed::$3
  goto keyboard_key_pressed::@return
keyboard_key_pressed::@return:
  (byte) keyboard_key_pressed::return ← (byte) keyboard_key_pressed::return
  return (byte) keyboard_key_pressed::return
endproc // keyboard_key_pressed()
proc (byte()) keyboard_get_keycode((byte) keyboard_get_keycode::ch)
  (byte) keyboard_get_keycode::return ← *((byte[]) keyboard_char_keycodes + (byte) keyboard_get_keycode::ch)
  goto keyboard_get_keycode::@return
keyboard_get_keycode::@return:
  (byte) keyboard_get_keycode::return ← (byte) keyboard_get_keycode::return
  return (byte) keyboard_get_keycode::return
endproc // keyboard_get_keycode()
proc (void()) main()
  *((byte*) DTV_FEATURE) ← (byte) DTV_FEATURE_ENABLE
main::@1:
  if(true) goto main::@2
  goto main::@3
main::@2:
  (void~) main::$0 ← call menu 
  goto main::@1
main::@3:
main::@return:
  return 
endproc // main()
  (byte*) MENU_SCREEN ← (word/dword/signed dword) 32768
  (byte*) MENU_CHARSET ← (word/dword/signed dword) 38912
  (string~) $0 ← (string) "C64DTV Graphics Modes            EMBLHCC@" + (string) "                                 CCMIIHO@"
  (string~) $1 ← (string~) $0 + (string) "                                 MMMNCUL@"
  (string~) $2 ← (string~) $1 + (string) "----------------------------------------@"
  (string~) $3 ← (string~) $2 + (string) "1. Standard Char             (V) 0000000@"
  (string~) $4 ← (string~) $3 + (string) "2. Extended Color Char       (V) 1000000@"
  (string~) $5 ← (string~) $4 + (string) "3. Multicolor Char           (V) 0100000@"
  (string~) $6 ← (string~) $5 + (string) "4. Standard Bitmap           (V) 0010000@"
  (string~) $7 ← (string~) $6 + (string) "5. Multicolor Bitmap         (V) 0110000@"
  (string~) $8 ← (string~) $7 + (string) "6. High Color Standard Char  (H) 0000100@"
  (string~) $9 ← (string~) $8 + (string) "7. High Extended Color Char  (H) 1000100@"
  (string~) $10 ← (string~) $9 + (string) "8. High Multicolor Char      (H) 0100100@"
  (string~) $11 ← (string~) $10 + (string) "9. High Multicolor Bitmap    (H) 0110100@"
  (string~) $12 ← (string~) $11 + (string) "a. Sixs Fred                 (D) 1111100@"
  (string~) $13 ← (string~) $12 + (string) "b. Sixs Fred 2               (D) 1111000@"
  (string~) $14 ← (string~) $13 + (string) "c. Two Plane Bitmap          (D) 1011100@"
  (string~) $15 ← (string~) $14 + (string) "d. Two Plane Multicol Bitmap (D) 1111100@"
  (string~) $16 ← (string~) $15 + (string) "e. 8bpp Pixel Cell           (D) 1101110@"
  (string~) $17 ← (string~) $16 + (string) "f. Chunky 8bpp Bitmap        (D) 1101111@"
  (string~) $18 ← (string~) $17 + (string) "----------------------------------------@"
  (string~) $19 ← (string~) $18 + (string) "    (V) vicII (H) vicII+hicol (D) c64dtv@"
  (string~) $20 ← (string~) $19 + (string) "@"
  (byte[]) MENU_TEXT ← (string~) $20
proc (void()) menu()
  (dword~) menu::$0 ← ((dword)) (byte*) MENU_CHARSET
  (dword~) menu::$1 ← (dword~) menu::$0 / (dword/signed dword) 65536
  (byte~) menu::$2 ← ((byte)) (dword~) menu::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK) ← (byte~) menu::$2
  *((byte*) DTV_CONTROL) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) menu::$3 ← ((word)) (byte*) MENU_CHARSET
  (word/signed dword/dword~) menu::$4 ← (word~) menu::$3 / (word/signed word/dword/signed dword) 16384
  (byte~) menu::$5 ← ((byte)) (word/signed dword/dword~) menu::$4
  (byte/word/dword~) menu::$6 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) menu::$5
  *((byte*) CIA2_PORT_A) ← (byte/word/dword~) menu::$6
  (byte~) menu::$7 ← (byte) VIC_DEN | (byte) VIC_RSEL
  (byte/word/dword~) menu::$8 ← (byte~) menu::$7 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL) ← (byte/word/dword~) menu::$8
  *((byte*) VIC_CONTROL2) ← (byte) VIC_CSEL
  (word~) menu::$9 ← ((word)) (byte*) MENU_SCREEN
  (word~) menu::$10 ← (word~) menu::$9 & (word/signed word/dword/signed dword) 16383
  (word/signed dword/dword~) menu::$11 ← (word~) menu::$10 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (word~) menu::$12 ← ((word)) (byte*) MENU_CHARSET
  (word~) menu::$13 ← (word~) menu::$12 & (word/signed word/dword/signed dword) 16383
  (word/signed dword/dword~) menu::$14 ← (word~) menu::$13 / (word/signed word/dword/signed dword) 1024
  (word/dword~) menu::$15 ← (word/signed dword/dword~) menu::$11 | (word/signed dword/dword~) menu::$14
  (byte~) menu::$16 ← ((byte)) (word/dword~) menu::$15
  *((byte*) VIC_MEMORY) ← (byte~) menu::$16
  (byte*) menu::c ← (byte*) COLS
menu::@1:
  *((byte*) menu::c) ← (byte) LIGHT_GREEN
  (byte*) menu::c ← ++ (byte*) menu::c
  (byte*~) menu::$17 ← (byte*) COLS + (word/signed word/dword/signed dword) 1000
  (boolean~) menu::$18 ← (byte*) menu::c != (byte*~) menu::$17
  if((boolean~) menu::$18) goto menu::@1
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (void~) menu::$19 ← call print_set_screen (byte*) MENU_SCREEN 
  (void~) menu::$20 ← call print_cls 
  (void~) menu::$21 ← call print_str_lines (byte[]) MENU_TEXT 
menu::@2:
  if(true) goto menu::@3
  goto menu::@4
menu::@3:
  (byte~) menu::$22 ← call keyboard_key_pressed (byte) KEY_C 
  (boolean~) menu::$23 ← (byte~) menu::$22 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) menu::$24 ← ! (boolean~) menu::$23
  if((boolean~) menu::$24) goto menu::@5
  (void~) menu::$25 ← call mode_twoplanebitmap 
  goto menu::@return
menu::@5:
  (byte*~) menu::$26 ← (byte*) MENU_SCREEN + (word/signed word/dword/signed dword) 999
  (byte*) menu::last ← (byte*~) menu::$26
  *((byte*) menu::last) ← ++ *((byte*) menu::last)
  goto menu::@2
menu::@4:
menu::@return:
  return 
endproc // menu()
  (byte*) TWOPLANE_PLANEA ← (word/signed word/dword/signed dword) 16384
  (byte*) TWOPLANE_PLANEB ← (word/signed word/dword/signed dword) 24576
proc (void()) mode_twoplanebitmap()
  (byte~) mode_twoplanebitmap::$0 ← (byte) DTV_CONTROL_HIGHCOLOR_ON | (byte) DTV_CONTROL_LINEAR_ADDRESSING_ON
  *((byte*) DTV_CONTROL) ← (byte~) mode_twoplanebitmap::$0
  (byte~) mode_twoplanebitmap::$1 ← (byte) VIC_ECM | (byte) VIC_BMM
  (byte~) mode_twoplanebitmap::$2 ← (byte~) mode_twoplanebitmap::$1 | (byte) VIC_DEN
  (byte~) mode_twoplanebitmap::$3 ← (byte~) mode_twoplanebitmap::$2 | (byte) VIC_RSEL
  (byte/word/dword~) mode_twoplanebitmap::$4 ← (byte~) mode_twoplanebitmap::$3 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL) ← (byte/word/dword~) mode_twoplanebitmap::$4
  *((byte*) VIC_CONTROL2) ← (byte) VIC_CSEL
  (byte~) mode_twoplanebitmap::$5 ← < (byte*) TWOPLANE_PLANEA
  *((byte*) DTV_PLANEA_START_LO) ← (byte~) mode_twoplanebitmap::$5
  (byte~) mode_twoplanebitmap::$6 ← > (byte*) TWOPLANE_PLANEA
  *((byte*) DTV_PLANEA_START_MI) ← (byte~) mode_twoplanebitmap::$6
  *((byte*) DTV_PLANEA_START_HI) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_STEP) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEA_MODULO_LO) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_MODULO_HI) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) mode_twoplanebitmap::$7 ← < (byte*) TWOPLANE_PLANEB
  *((byte*) DTV_PLANEB_START_LO) ← (byte~) mode_twoplanebitmap::$7
  (byte~) mode_twoplanebitmap::$8 ← > (byte*) TWOPLANE_PLANEB
  *((byte*) DTV_PLANEB_START_MI) ← (byte~) mode_twoplanebitmap::$8
  *((byte*) DTV_PLANEB_START_HI) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_STEP) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEB_MODULO_LO) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BGCOL1) ← (byte) GREEN
  *((byte*) BGCOL2) ← (byte) BLUE
  (byte*) mode_twoplanebitmap::c ← (byte*) COLS
mode_twoplanebitmap::@1:
  (byte~) mode_twoplanebitmap::$9 ← < (byte*) mode_twoplanebitmap::c
  *((byte*) mode_twoplanebitmap::c) ← (byte~) mode_twoplanebitmap::$9
  (byte*) mode_twoplanebitmap::c ← ++ (byte*) mode_twoplanebitmap::c
  (byte*~) mode_twoplanebitmap::$10 ← (byte*) COLS + (word/signed word/dword/signed dword) 1000
  (boolean~) mode_twoplanebitmap::$11 ← (byte*) mode_twoplanebitmap::c != (byte*~) mode_twoplanebitmap::$10
  if((boolean~) mode_twoplanebitmap::$11) goto mode_twoplanebitmap::@1
  (byte*) mode_twoplanebitmap::gfxa ← (byte*) TWOPLANE_PLANEA
  (byte) mode_twoplanebitmap::ay ← (byte/signed byte/word/signed word/dword/signed dword) 0
mode_twoplanebitmap::@2:
  (byte) mode_twoplanebitmap::ax ← (byte/signed byte/word/signed word/dword/signed dword) 0
mode_twoplanebitmap::@3:
  (byte~) mode_twoplanebitmap::$12 ← (byte) mode_twoplanebitmap::ay & (byte/signed byte/word/signed word/dword/signed dword) 4
  (boolean~) mode_twoplanebitmap::$13 ← (byte~) mode_twoplanebitmap::$12 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mode_twoplanebitmap::$14 ← ! (boolean~) mode_twoplanebitmap::$13
  if((boolean~) mode_twoplanebitmap::$14) goto mode_twoplanebitmap::@4
  *((byte*) mode_twoplanebitmap::gfxa) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) mode_twoplanebitmap::gfxa ← ++ (byte*) mode_twoplanebitmap::gfxa
  goto mode_twoplanebitmap::@5
mode_twoplanebitmap::@4:
  *((byte*) mode_twoplanebitmap::gfxa) ← (byte/word/signed word/dword/signed dword) 255
  (byte*) mode_twoplanebitmap::gfxa ← ++ (byte*) mode_twoplanebitmap::gfxa
mode_twoplanebitmap::@5:
  (byte) mode_twoplanebitmap::ax ← ++ (byte) mode_twoplanebitmap::ax
  (boolean~) mode_twoplanebitmap::$15 ← (byte) mode_twoplanebitmap::ax != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((boolean~) mode_twoplanebitmap::$15) goto mode_twoplanebitmap::@3
  (byte) mode_twoplanebitmap::ay ← ++ (byte) mode_twoplanebitmap::ay
  (boolean~) mode_twoplanebitmap::$16 ← (byte) mode_twoplanebitmap::ay != (byte/word/signed word/dword/signed dword) 200
  if((boolean~) mode_twoplanebitmap::$16) goto mode_twoplanebitmap::@2
  (byte*) mode_twoplanebitmap::gfxb ← (byte*) TWOPLANE_PLANEB
  (byte) mode_twoplanebitmap::by ← (byte/signed byte/word/signed word/dword/signed dword) 0
mode_twoplanebitmap::@6:
  (byte) mode_twoplanebitmap::bx ← (byte/signed byte/word/signed word/dword/signed dword) 0
mode_twoplanebitmap::@7:
  *((byte*) mode_twoplanebitmap::gfxb) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte*) mode_twoplanebitmap::gfxb ← ++ (byte*) mode_twoplanebitmap::gfxb
  (byte) mode_twoplanebitmap::bx ← ++ (byte) mode_twoplanebitmap::bx
  (boolean~) mode_twoplanebitmap::$17 ← (byte) mode_twoplanebitmap::bx != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((boolean~) mode_twoplanebitmap::$17) goto mode_twoplanebitmap::@7
  (byte) mode_twoplanebitmap::by ← ++ (byte) mode_twoplanebitmap::by
  (boolean~) mode_twoplanebitmap::$18 ← (byte) mode_twoplanebitmap::by != (byte/word/signed word/dword/signed dword) 200
  if((boolean~) mode_twoplanebitmap::$18) goto mode_twoplanebitmap::@6
mode_twoplanebitmap::@8:
  if(true) goto mode_twoplanebitmap::@9
  goto mode_twoplanebitmap::@10
mode_twoplanebitmap::@9:
  (byte~) mode_twoplanebitmap::$19 ← call keyboard_key_pressed (byte) KEY_SPACE 
  (boolean~) mode_twoplanebitmap::$20 ← (byte~) mode_twoplanebitmap::$19 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mode_twoplanebitmap::$21 ← ! (boolean~) mode_twoplanebitmap::$20
  if((boolean~) mode_twoplanebitmap::$21) goto mode_twoplanebitmap::@11
  goto mode_twoplanebitmap::@return
mode_twoplanebitmap::@11:
  goto mode_twoplanebitmap::@8
mode_twoplanebitmap::@10:
mode_twoplanebitmap::@return:
  return 
endproc // mode_twoplanebitmap()
  call main 

SYMBOLS
(string~) $0
(string~) $1
(string~) $10
(string~) $11
(string~) $12
(string~) $13
(string~) $14
(string~) $15
(string~) $16
(string~) $17
(string~) $18
(string~) $19
(string~) $2
(string~) $20
(string~) $3
(string~) $4
(string~) $5
(string~) $6
(string~) $7
(string~) $8
(string~) $9
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte*) DTV_COLOR_BANK_HI
(byte*) DTV_COLOR_BANK_LO
(byte*) DTV_CONTROL
(byte) DTV_CONTROL_BADLINE_OFF
(byte) DTV_CONTROL_BORDER_OFF
(byte) DTV_CONTROL_CHUNKY_ON
(byte) DTV_CONTROL_COLORRAM_OFF
(byte) DTV_CONTROL_HIGHCOLOR_ON
(byte) DTV_CONTROL_LINEAR_ADDRESSING_ON
(byte) DTV_CONTROL_OVERSCAN_ON
(byte*) DTV_FEATURE
(byte) DTV_FEATURE_DISABLE_TIL_RESET
(byte) DTV_FEATURE_ENABLE
(byte*) DTV_GRAPHICS_HICOL_BANK
(byte*) DTV_GRAPHICS_VIC_BANK
(byte*) DTV_PALETTE
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_STEP
(byte*) DTV_SPRITE_BANK
(byte) GREEN
(byte) GREY
(byte) KEY_0
(byte) KEY_1
(byte) KEY_2
(byte) KEY_3
(byte) KEY_4
(byte) KEY_5
(byte) KEY_6
(byte) KEY_7
(byte) KEY_8
(byte) KEY_9
(byte) KEY_A
(byte) KEY_ARROW_LEFT
(byte) KEY_ARROW_UP
(byte) KEY_ASTERISK
(byte) KEY_AT
(byte) KEY_B
(byte) KEY_C
(byte) KEY_COLON
(byte) KEY_COMMA
(byte) KEY_COMMODORE
(byte) KEY_CRSR_DOWN
(byte) KEY_CRSR_RIGHT
(byte) KEY_CTRL
(byte) KEY_D
(byte) KEY_DEL
(byte) KEY_DOT
(byte) KEY_E
(byte) KEY_EQUALS
(byte) KEY_F
(byte) KEY_F1
(byte) KEY_F3
(byte) KEY_F5
(byte) KEY_F7
(byte) KEY_G
(byte) KEY_H
(byte) KEY_HOME
(byte) KEY_I
(byte) KEY_J
(byte) KEY_K
(byte) KEY_L
(byte) KEY_LSHIFT
(byte) KEY_M
(byte) KEY_MINUS
(byte) KEY_N
(byte) KEY_O
(byte) KEY_P
(byte) KEY_PLUS
(byte) KEY_POUND
(byte) KEY_Q
(byte) KEY_R
(byte) KEY_RETURN
(byte) KEY_RSHIFT
(byte) KEY_RUNSTOP
(byte) KEY_S
(byte) KEY_SEMICOLON
(byte) KEY_SLASH
(byte) KEY_SPACE
(byte) KEY_T
(byte) KEY_U
(byte) KEY_V
(byte) KEY_W
(byte) KEY_X
(byte) KEY_Y
(byte) KEY_Z
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte*) MENU_CHARSET
(byte*) MENU_SCREEN
(byte[]) MENU_TEXT
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(byte*) TWOPLANE_PLANEA
(byte*) TWOPLANE_PLANEB
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(byte[]) keyboard_char_keycodes
(byte()) keyboard_get_keycode((byte) keyboard_get_keycode::ch)
(label) keyboard_get_keycode::@return
(byte) keyboard_get_keycode::ch
(byte) keyboard_get_keycode::return
(void()) keyboard_init()
(label) keyboard_init::@return
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$0
(byte~) keyboard_key_pressed::$1
(byte~) keyboard_key_pressed::$2
(byte~) keyboard_key_pressed::$3
(label) keyboard_key_pressed::@return
(byte) keyboard_key_pressed::colidx
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::rowidx
(byte[]) keyboard_matrix_col_bitmask
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte[8]) keyboard_matrix_row_bitmask
(void()) main()
(void~) main::$0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(void()) menu()
(dword~) menu::$0
(dword~) menu::$1
(word~) menu::$10
(word/signed dword/dword~) menu::$11
(word~) menu::$12
(word~) menu::$13
(word/signed dword/dword~) menu::$14
(word/dword~) menu::$15
(byte~) menu::$16
(byte*~) menu::$17
(boolean~) menu::$18
(void~) menu::$19
(byte~) menu::$2
(void~) menu::$20
(void~) menu::$21
(byte~) menu::$22
(boolean~) menu::$23
(boolean~) menu::$24
(void~) menu::$25
(byte*~) menu::$26
(word~) menu::$3
(word/signed dword/dword~) menu::$4
(byte~) menu::$5
(byte/word/dword~) menu::$6
(byte~) menu::$7
(byte/word/dword~) menu::$8
(word~) menu::$9
(label) menu::@1
(label) menu::@2
(label) menu::@3
(label) menu::@4
(label) menu::@5
(label) menu::@return
(byte*) menu::c
(byte*) menu::last
(void()) mode_twoplanebitmap()
(byte~) mode_twoplanebitmap::$0
(byte~) mode_twoplanebitmap::$1
(byte*~) mode_twoplanebitmap::$10
(boolean~) mode_twoplanebitmap::$11
(byte~) mode_twoplanebitmap::$12
(boolean~) mode_twoplanebitmap::$13
(boolean~) mode_twoplanebitmap::$14
(boolean~) mode_twoplanebitmap::$15
(boolean~) mode_twoplanebitmap::$16
(boolean~) mode_twoplanebitmap::$17
(boolean~) mode_twoplanebitmap::$18
(byte~) mode_twoplanebitmap::$19
(byte~) mode_twoplanebitmap::$2
(boolean~) mode_twoplanebitmap::$20
(boolean~) mode_twoplanebitmap::$21
(byte~) mode_twoplanebitmap::$3
(byte/word/dword~) mode_twoplanebitmap::$4
(byte~) mode_twoplanebitmap::$5
(byte~) mode_twoplanebitmap::$6
(byte~) mode_twoplanebitmap::$7
(byte~) mode_twoplanebitmap::$8
(byte~) mode_twoplanebitmap::$9
(label) mode_twoplanebitmap::@1
(label) mode_twoplanebitmap::@10
(label) mode_twoplanebitmap::@11
(label) mode_twoplanebitmap::@2
(label) mode_twoplanebitmap::@3
(label) mode_twoplanebitmap::@4
(label) mode_twoplanebitmap::@5
(label) mode_twoplanebitmap::@6
(label) mode_twoplanebitmap::@7
(label) mode_twoplanebitmap::@8
(label) mode_twoplanebitmap::@9
(label) mode_twoplanebitmap::@return
(byte) mode_twoplanebitmap::ax
(byte) mode_twoplanebitmap::ay
(byte) mode_twoplanebitmap::bx
(byte) mode_twoplanebitmap::by
(byte*) mode_twoplanebitmap::c
(byte*) mode_twoplanebitmap::gfxa
(byte*) mode_twoplanebitmap::gfxb
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(void~) print_byte::$1
(byte~) print_byte::$2
(void~) print_byte::$3
(label) print_byte::@return
(byte) print_byte::b
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte*) print_char_cursor
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(void()) print_dword((dword) print_dword::dw)
(word~) print_dword::$0
(void~) print_dword::$1
(word~) print_dword::$2
(void~) print_dword::$3
(label) print_dword::@return
(dword) print_dword::dw
(byte*) print_line_cursor
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(void~) print_sbyte::$2
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(void~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(byte*) print_screen
(void()) print_sdword((signed dword) print_sdword::dw)
(boolean~) print_sdword::$0
(boolean~) print_sdword::$1
(void~) print_sdword::$2
(signed dword~) print_sdword::$3
(dword~) print_sdword::$4
(void~) print_sdword::$5
(label) print_sdword::@1
(label) print_sdword::@return
(signed dword) print_sdword::dw
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(boolean~) print_str_at::$0
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@3
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::str
(void()) print_str_lines((byte*) print_str_lines::str)
(boolean~) print_str_lines::$0
(boolean~) print_str_lines::$1
(boolean~) print_str_lines::$2
(boolean~) print_str_lines::$3
(void~) print_str_lines::$4
(label) print_str_lines::@1
(label) print_str_lines::@2
(label) print_str_lines::@3
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte*) print_str_lines::str
(void()) print_str_ln((byte*) print_str_ln::str)
(void~) print_str_ln::$0
(void~) print_str_ln::$1
(label) print_str_ln::@return
(byte*) print_str_ln::str
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(void~) print_sword::$2
(signed word~) print_sword::$3
(word~) print_sword::$4
(void~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@return
(signed word) print_sword::w
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(void~) print_word::$1
(byte~) print_word::$2
(void~) print_word::$3
(label) print_word::@return
(word) print_word::w

Promoting byte/signed byte/word/signed word/dword/signed dword to byte* in PROCPORT ← ((byte*)) 1
Promoting word/dword/signed dword to byte* in CHARGEN ← ((byte*)) 53248
Promoting word/dword/signed dword to byte* in SPRITES_XPOS ← ((byte*)) 53248
Promoting word/dword/signed dword to byte* in SPRITES_YPOS ← ((byte*)) 53249
Promoting word/dword/signed dword to byte* in SPRITES_XMSB ← ((byte*)) 53264
Promoting word/dword/signed dword to byte* in RASTER ← ((byte*)) 53266
Promoting word/dword/signed dword to byte* in SPRITES_ENABLE ← ((byte*)) 53269
Promoting word/dword/signed dword to byte* in SPRITES_EXPAND_Y ← ((byte*)) 53271
Promoting word/dword/signed dword to byte* in SPRITES_PRIORITY ← ((byte*)) 53275
Promoting word/dword/signed dword to byte* in SPRITES_MC ← ((byte*)) 53276
Promoting word/dword/signed dword to byte* in SPRITES_EXPAND_X ← ((byte*)) 53277
Promoting word/dword/signed dword to byte* in BORDERCOL ← ((byte*)) 53280
Promoting word/dword/signed dword to byte* in BGCOL ← ((byte*)) 53281
Promoting word/dword/signed dword to byte* in BGCOL1 ← ((byte*)) 53281
Promoting word/dword/signed dword to byte* in BGCOL2 ← ((byte*)) 53282
Promoting word/dword/signed dword to byte* in SPRITES_MC1 ← ((byte*)) 53285
Promoting word/dword/signed dword to byte* in SPRITES_MC2 ← ((byte*)) 53286
Promoting word/dword/signed dword to byte* in SPRITES_COLS ← ((byte*)) 53287
Promoting word/dword/signed dword to byte* in VIC_CONTROL ← ((byte*)) 53265
Promoting word/dword/signed dword to byte* in D011 ← ((byte*)) 53265
Promoting word/dword/signed dword to byte* in VIC_CONTROL2 ← ((byte*)) 53270
Promoting word/dword/signed dword to byte* in D016 ← ((byte*)) 53270
Promoting word/dword/signed dword to byte* in D018 ← ((byte*)) 53272
Promoting word/dword/signed dword to byte* in VIC_MEMORY ← ((byte*)) 53272
Promoting word/dword/signed dword to byte* in COLS ← ((byte*)) 55296
Promoting word/dword/signed dword to byte* in CIA1_PORT_A ← ((byte*)) 56320
Promoting word/dword/signed dword to byte* in CIA1_PORT_B ← ((byte*)) 56321
Promoting word/dword/signed dword to byte* in CIA1_PORT_A_DDR ← ((byte*)) 56322
Promoting word/dword/signed dword to byte* in CIA1_PORT_B_DDR ← ((byte*)) 56323
Promoting word/dword/signed dword to byte* in CIA2_PORT_A ← ((byte*)) 56576
Promoting word/dword/signed dword to byte* in CIA2_PORT_B ← ((byte*)) 56577
Promoting word/dword/signed dword to byte* in CIA2_PORT_A_DDR ← ((byte*)) 56578
Promoting word/dword/signed dword to byte* in CIA2_PORT_B_DDR ← ((byte*)) 56579
Promoting word/dword/signed dword to byte* in DTV_FEATURE ← ((byte*)) 53311
Promoting word/dword/signed dword to byte* in DTV_CONTROL ← ((byte*)) 53308
Promoting word/dword/signed dword to byte* in DTV_PALETTE ← ((byte*)) 53760
Promoting word/dword/signed dword to byte* in DTV_PLANEA_START_LO ← ((byte*)) 53306
Promoting word/dword/signed dword to byte* in DTV_PLANEA_START_MI ← ((byte*)) 53307
Promoting word/dword/signed dword to byte* in DTV_PLANEA_START_HI ← ((byte*)) 53317
Promoting word/dword/signed dword to byte* in DTV_PLANEA_STEP ← ((byte*)) 53318
Promoting word/dword/signed dword to byte* in DTV_PLANEA_MODULO_LO ← ((byte*)) 53304
Promoting word/dword/signed dword to byte* in DTV_PLANEA_MODULO_HI ← ((byte*)) 53305
Promoting word/dword/signed dword to byte* in DTV_PLANEB_START_LO ← ((byte*)) 53321
Promoting word/dword/signed dword to byte* in DTV_PLANEB_START_MI ← ((byte*)) 53322
Promoting word/dword/signed dword to byte* in DTV_PLANEB_START_HI ← ((byte*)) 53323
Promoting word/dword/signed dword to byte* in DTV_PLANEB_STEP ← ((byte*)) 53324
Promoting word/dword/signed dword to byte* in DTV_PLANEB_MODULO_LO ← ((byte*)) 53319
Promoting word/dword/signed dword to byte* in DTV_PLANEB_MODULO_HI ← ((byte*)) 53320
Promoting word/dword/signed dword to byte* in DTV_SPRITE_BANK ← ((byte*)) 53325
Promoting word/dword/signed dword to byte* in DTV_COLOR_BANK_LO ← ((byte*)) 53302
Promoting word/dword/signed dword to byte* in DTV_COLOR_BANK_HI ← ((byte*)) 53303
Promoting word/dword/signed dword to byte* in DTV_GRAPHICS_VIC_BANK ← ((byte*)) 53309
Promoting word/dword/signed dword to byte* in DTV_GRAPHICS_HICOL_BANK ← ((byte*)) 53310
Promoting word/signed word/dword/signed dword to byte* in print_screen ← ((byte*)) 1024
Promoting word/dword/signed dword to byte* in MENU_SCREEN ← ((byte*)) 32768
Promoting word/dword/signed dword to byte* in MENU_CHARSET ← ((byte*)) 38912
Promoting word/signed word/dword/signed dword to byte* in TWOPLANE_PLANEA ← ((byte*)) 16384
Promoting word/signed word/dword/signed dword to byte* in TWOPLANE_PLANEB ← ((byte*)) 24576
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) PROCPORT ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) CHARGEN ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_XPOS ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS ← ((byte*)) (word/dword/signed dword) 53249
  (byte*) SPRITES_XMSB ← ((byte*)) (word/dword/signed dword) 53264
  (byte*) RASTER ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE ← ((byte*)) (word/dword/signed dword) 53269
  (byte*) SPRITES_EXPAND_Y ← ((byte*)) (word/dword/signed dword) 53271
  (byte*) SPRITES_PRIORITY ← ((byte*)) (word/dword/signed dword) 53275
  (byte*) SPRITES_MC ← ((byte*)) (word/dword/signed dword) 53276
  (byte*) SPRITES_EXPAND_X ← ((byte*)) (word/dword/signed dword) 53277
  (byte*) BORDERCOL ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) BGCOL ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL1 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL2 ← ((byte*)) (word/dword/signed dword) 53282
  (byte*) SPRITES_MC1 ← ((byte*)) (word/dword/signed dword) 53285
  (byte*) SPRITES_MC2 ← ((byte*)) (word/dword/signed dword) 53286
  (byte*) SPRITES_COLS ← ((byte*)) (word/dword/signed dword) 53287
  (byte*) VIC_CONTROL ← ((byte*)) (word/dword/signed dword) 53265
  (byte*) D011 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_RST8 ← (byte/word/signed word/dword/signed dword) 128
  (byte) VIC_ECM ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) VIC_BMM ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) VIC_DEN ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2 ← ((byte*)) (word/dword/signed dword) 53270
  (byte*) D016 ← ((byte*)) (word/dword/signed dword) 53270
  (byte) VIC_MCM ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_CSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) VIC_MEMORY ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) COLS ← ((byte*)) (word/dword/signed dword) 55296
  (byte*) CIA1_PORT_A ← ((byte*)) (word/dword/signed dword) 56320
  (byte*) CIA1_PORT_B ← ((byte*)) (word/dword/signed dword) 56321
  (byte*) CIA1_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56322
  (byte*) CIA1_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56323
  (byte*) CIA2_PORT_A ← ((byte*)) (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_B ← ((byte*)) (word/dword/signed dword) 56577
  (byte*) CIA2_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56578
  (byte*) CIA2_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56579
  (byte) BLACK ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) DARK_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) GREY ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) LIGHT_GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte) LIGHT_BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) LIGHT_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte*) DTV_FEATURE ← ((byte*)) (word/dword/signed dword) 53311
  (byte) DTV_FEATURE_ENABLE ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_FEATURE_DISABLE_TIL_RESET ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*) DTV_CONTROL ← ((byte*)) (word/dword/signed dword) 53308
  (byte) DTV_CONTROL_LINEAR_ADDRESSING_ON ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_CONTROL_BORDER_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_CONTROL_HIGHCOLOR_ON ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_CONTROL_OVERSCAN_ON ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_CONTROL_COLORRAM_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) DTV_CONTROL_BADLINE_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) DTV_CONTROL_CHUNKY_ON ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte*) DTV_PALETTE ← ((byte*)) (word/dword/signed dword) 53760
  (byte*) DTV_PLANEA_START_LO ← ((byte*)) (word/dword/signed dword) 53306
  (byte*) DTV_PLANEA_START_MI ← ((byte*)) (word/dword/signed dword) 53307
  (byte*) DTV_PLANEA_START_HI ← ((byte*)) (word/dword/signed dword) 53317
  (byte*) DTV_PLANEA_STEP ← ((byte*)) (word/dword/signed dword) 53318
  (byte*) DTV_PLANEA_MODULO_LO ← ((byte*)) (word/dword/signed dword) 53304
  (byte*) DTV_PLANEA_MODULO_HI ← ((byte*)) (word/dword/signed dword) 53305
  (byte*) DTV_PLANEB_START_LO ← ((byte*)) (word/dword/signed dword) 53321
  (byte*) DTV_PLANEB_START_MI ← ((byte*)) (word/dword/signed dword) 53322
  (byte*) DTV_PLANEB_START_HI ← ((byte*)) (word/dword/signed dword) 53323
  (byte*) DTV_PLANEB_STEP ← ((byte*)) (word/dword/signed dword) 53324
  (byte*) DTV_PLANEB_MODULO_LO ← ((byte*)) (word/dword/signed dword) 53319
  (byte*) DTV_PLANEB_MODULO_HI ← ((byte*)) (word/dword/signed dword) 53320
  (byte*) DTV_SPRITE_BANK ← ((byte*)) (word/dword/signed dword) 53325
  (byte*) DTV_COLOR_BANK_LO ← ((byte*)) (word/dword/signed dword) 53302
  (byte*) DTV_COLOR_BANK_HI ← ((byte*)) (word/dword/signed dword) 53303
  (byte*) DTV_GRAPHICS_VIC_BANK ← ((byte*)) (word/dword/signed dword) 53309
  (byte*) DTV_GRAPHICS_HICOL_BANK ← ((byte*)) (word/dword/signed dword) 53310
  (byte*) print_screen ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:@1
print_str_lines: scope:[print_str_lines]  from
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@9
  (boolean~) print_str_lines::$0 ← *((byte*) print_str_lines::str) != (byte) '@'
  if((boolean~) print_str_lines::$0) goto print_str_lines::@2
  to:print_str_lines::@6
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@7
  to:print_str_lines::@4
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@1
  to:print_str_lines::@3
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@10 print_str_lines::@6
  to:print_str_lines::@return
print_str_lines::@7: scope:[print_str_lines]  from
  to:print_str_lines::@2
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@5
  (byte) print_str_lines::ch ← *((byte*) print_str_lines::str)
  (byte*) print_str_lines::str ← ++ (byte*) print_str_lines::str
  (boolean~) print_str_lines::$1 ← (byte) print_str_lines::ch != (byte) '@'
  (boolean~) print_str_lines::$2 ← ! (boolean~) print_str_lines::$1
  if((boolean~) print_str_lines::$2) goto print_str_lines::@5
  to:print_str_lines::@8
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@4 print_str_lines::@8
  (boolean~) print_str_lines::$3 ← (byte) print_str_lines::ch != (byte) '@'
  if((boolean~) print_str_lines::$3) goto print_str_lines::@4
  to:print_str_lines::@9
print_str_lines::@8: scope:[print_str_lines]  from print_str_lines::@4
  *((byte*) print_char_cursor) ← (byte) print_str_lines::ch
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  to:print_str_lines::@5
print_str_lines::@9: scope:[print_str_lines]  from print_str_lines::@5
  (void~) print_str_lines::$4 ← call print_ln 
  to:print_str_lines::@1
print_str_lines::@10: scope:[print_str_lines]  from
  to:print_str_lines::@3
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
print_str_ln: scope:[print_str_ln]  from
  (void~) print_str_ln::$0 ← call print_str (byte*) print_str_ln::str 
  (void~) print_str_ln::$1 ← call print_ln 
  to:print_str_ln::@return
print_str_ln::@return: scope:[print_str_ln]  from print_str_ln
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
print_str: scope:[print_str]  from
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@4
print_str::@2: scope:[print_str]  from print_str::@1 print_str::@5
  *((byte*) print_char_cursor) ← *((byte*) print_str::str)
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  to:print_str::@1
print_str::@4: scope:[print_str]  from print_str::@1
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@4 print_str::@6
  to:print_str::@return
print_str::@5: scope:[print_str]  from
  to:print_str::@2
print_str::@6: scope:[print_str]  from
  to:print_str::@3
print_str::@return: scope:[print_str]  from print_str::@3
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
print_str_at: scope:[print_str_at]  from
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  (boolean~) print_str_at::$0 ← *((byte*) print_str_at::str) != (byte) '@'
  if((boolean~) print_str_at::$0) goto print_str_at::@2
  to:print_str_at::@4
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1 print_str_at::@5
  *((byte*) print_str_at::at) ← *((byte*) print_str_at::str)
  (byte*) print_str_at::at ← ++ (byte*) print_str_at::at
  (byte*) print_str_at::str ← ++ (byte*) print_str_at::str
  to:print_str_at::@1
print_str_at::@4: scope:[print_str_at]  from print_str_at::@1
  to:print_str_at::@3
print_str_at::@3: scope:[print_str_at]  from print_str_at::@4 print_str_at::@6
  to:print_str_at::@return
print_str_at::@5: scope:[print_str_at]  from
  to:print_str_at::@2
print_str_at::@6: scope:[print_str_at]  from
  to:print_str_at::@3
print_str_at::@return: scope:[print_str_at]  from print_str_at::@3
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
print_ln: scope:[print_ln]  from
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) print_line_cursor < (byte*) print_char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
print_sword: scope:[print_sword]  from
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@2
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@1
  return 
  to:@return
@6: scope:[]  from @5
  to:@7
print_sbyte: scope:[print_sbyte]  from
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@2
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  return 
  to:@return
@7: scope:[]  from @6
  to:@8
print_word: scope:[print_word]  from
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word
  return 
  to:@return
@8: scope:[]  from @7
  to:@9
print_dword: scope:[print_dword]  from
  (word~) print_dword::$0 ← > (dword) print_dword::dw
  (void~) print_dword::$1 ← call print_word (word~) print_dword::$0 
  (word~) print_dword::$2 ← < (dword) print_dword::dw
  (void~) print_dword::$3 ← call print_word (word~) print_dword::$2 
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword
  return 
  to:@return
@9: scope:[]  from @8
  to:@10
print_sdword: scope:[print_sdword]  from
  (boolean~) print_sdword::$0 ← (signed dword) print_sdword::dw < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sdword::$1 ← ! (boolean~) print_sdword::$0
  if((boolean~) print_sdword::$1) goto print_sdword::@1
  to:print_sdword::@2
print_sdword::@1: scope:[print_sdword]  from print_sdword print_sdword::@2
  (dword~) print_sdword::$4 ← ((dword)) (signed dword) print_sdword::dw
  (void~) print_sdword::$5 ← call print_dword (dword~) print_sdword::$4 
  to:print_sdword::@return
print_sdword::@2: scope:[print_sdword]  from print_sdword
  (void~) print_sdword::$2 ← call print_char (byte) '-' 
  (signed dword~) print_sdword::$3 ← - (signed dword) print_sdword::dw
  (signed dword) print_sdword::dw ← (signed dword~) print_sdword::$3
  to:print_sdword::@1
print_sdword::@return: scope:[print_sdword]  from print_sdword::@1
  return 
  to:@return
@10: scope:[]  from @9
  to:@11
print_byte: scope:[print_byte]  from
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte
  return 
  to:@return
@11: scope:[]  from @10
  to:@12
print_char: scope:[print_char]  from
  *((byte*) print_char_cursor) ← (byte) print_char::ch
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return
@12: scope:[]  from @11
  to:@13
print_cls: scope:[print_cls]  from
  (byte*) print_cls::sc ← (byte*) print_screen
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) print_screen + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  return 
  to:@return
@13: scope:[]  from @12
  to:@14
print_set_screen: scope:[print_set_screen]  from
  (byte*) print_screen ← (byte*) print_set_screen::screen
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  return 
  to:@return
@14: scope:[]  from @13
  (byte) KEY_DEL ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) KEY_RETURN ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) KEY_CRSR_RIGHT ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) KEY_F7 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) KEY_F1 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) KEY_F3 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) KEY_F5 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) KEY_CRSR_DOWN ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) KEY_3 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) KEY_W ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) KEY_A ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) KEY_4 ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) KEY_Z ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) KEY_S ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte) KEY_E ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) KEY_LSHIFT ← (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) KEY_5 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) KEY_R ← (byte/signed byte/word/signed word/dword/signed dword) 17
  (byte) KEY_D ← (byte/signed byte/word/signed word/dword/signed dword) 18
  (byte) KEY_6 ← (byte/signed byte/word/signed word/dword/signed dword) 19
  (byte) KEY_C ← (byte/signed byte/word/signed word/dword/signed dword) 20
  (byte) KEY_F ← (byte/signed byte/word/signed word/dword/signed dword) 21
  (byte) KEY_T ← (byte/signed byte/word/signed word/dword/signed dword) 22
  (byte) KEY_X ← (byte/signed byte/word/signed word/dword/signed dword) 23
  (byte) KEY_7 ← (byte/signed byte/word/signed word/dword/signed dword) 24
  (byte) KEY_Y ← (byte/signed byte/word/signed word/dword/signed dword) 25
  (byte) KEY_G ← (byte/signed byte/word/signed word/dword/signed dword) 26
  (byte) KEY_8 ← (byte/signed byte/word/signed word/dword/signed dword) 27
  (byte) KEY_B ← (byte/signed byte/word/signed word/dword/signed dword) 28
  (byte) KEY_H ← (byte/signed byte/word/signed word/dword/signed dword) 29
  (byte) KEY_U ← (byte/signed byte/word/signed word/dword/signed dword) 30
  (byte) KEY_V ← (byte/signed byte/word/signed word/dword/signed dword) 31
  (byte) KEY_9 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) KEY_I ← (byte/signed byte/word/signed word/dword/signed dword) 33
  (byte) KEY_J ← (byte/signed byte/word/signed word/dword/signed dword) 34
  (byte) KEY_0 ← (byte/signed byte/word/signed word/dword/signed dword) 35
  (byte) KEY_M ← (byte/signed byte/word/signed word/dword/signed dword) 36
  (byte) KEY_K ← (byte/signed byte/word/signed word/dword/signed dword) 37
  (byte) KEY_O ← (byte/signed byte/word/signed word/dword/signed dword) 38
  (byte) KEY_N ← (byte/signed byte/word/signed word/dword/signed dword) 39
  (byte) KEY_PLUS ← (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte) KEY_P ← (byte/signed byte/word/signed word/dword/signed dword) 41
  (byte) KEY_L ← (byte/signed byte/word/signed word/dword/signed dword) 42
  (byte) KEY_MINUS ← (byte/signed byte/word/signed word/dword/signed dword) 43
  (byte) KEY_DOT ← (byte/signed byte/word/signed word/dword/signed dword) 44
  (byte) KEY_COLON ← (byte/signed byte/word/signed word/dword/signed dword) 45
  (byte) KEY_AT ← (byte/signed byte/word/signed word/dword/signed dword) 46
  (byte) KEY_COMMA ← (byte/signed byte/word/signed word/dword/signed dword) 47
  (byte) KEY_POUND ← (byte/signed byte/word/signed word/dword/signed dword) 48
  (byte) KEY_ASTERISK ← (byte/signed byte/word/signed word/dword/signed dword) 49
  (byte) KEY_SEMICOLON ← (byte/signed byte/word/signed word/dword/signed dword) 50
  (byte) KEY_HOME ← (byte/signed byte/word/signed word/dword/signed dword) 51
  (byte) KEY_RSHIFT ← (byte/signed byte/word/signed word/dword/signed dword) 52
  (byte) KEY_EQUALS ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte) KEY_ARROW_UP ← (byte/signed byte/word/signed word/dword/signed dword) 54
  (byte) KEY_SLASH ← (byte/signed byte/word/signed word/dword/signed dword) 55
  (byte) KEY_1 ← (byte/signed byte/word/signed word/dword/signed dword) 56
  (byte) KEY_ARROW_LEFT ← (byte/signed byte/word/signed word/dword/signed dword) 57
  (byte) KEY_CTRL ← (byte/signed byte/word/signed word/dword/signed dword) 58
  (byte) KEY_2 ← (byte/signed byte/word/signed word/dword/signed dword) 59
  (byte) KEY_SPACE ← (byte/signed byte/word/signed word/dword/signed dword) 60
  (byte) KEY_COMMODORE ← (byte/signed byte/word/signed word/dword/signed dword) 61
  (byte) KEY_Q ← (byte/signed byte/word/signed word/dword/signed dword) 62
  (byte) KEY_RUNSTOP ← (byte/signed byte/word/signed word/dword/signed dword) 63
  (byte[]) keyboard_char_keycodes ← { (byte) KEY_AT, (byte) KEY_A, (byte) KEY_B, (byte) KEY_C, (byte) KEY_D, (byte) KEY_E, (byte) KEY_F, (byte) KEY_G, (byte) KEY_H, (byte) KEY_I, (byte) KEY_J, (byte) KEY_K, (byte) KEY_L, (byte) KEY_M, (byte) KEY_N, (byte) KEY_O, (byte) KEY_P, (byte) KEY_Q, (byte) KEY_R, (byte) KEY_S, (byte) KEY_T, (byte) KEY_U, (byte) KEY_V, (byte) KEY_W, (byte) KEY_X, (byte) KEY_Y, (byte) KEY_Z, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_POUND, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_ARROW_UP, (byte) KEY_ARROW_LEFT, (byte) KEY_SPACE, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_ASTERISK, (byte) KEY_PLUS, (byte) KEY_COMMA, (byte) KEY_MINUS, (byte) KEY_DOT, (byte) KEY_SLASH, (byte) KEY_0, (byte) KEY_1, (byte) KEY_2, (byte) KEY_3, (byte) KEY_4, (byte) KEY_5, (byte) KEY_6, (byte) KEY_7, (byte) KEY_8, (byte) KEY_9, (byte) KEY_COLON, (byte) KEY_SEMICOLON, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_EQUALS, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63 }
  (byte[8]) keyboard_matrix_row_bitmask ← { (byte/word/signed word/dword/signed dword) 254, (byte/word/signed word/dword/signed dword) 253, (byte/word/signed word/dword/signed dword) 251, (byte/word/signed word/dword/signed dword) 247, (byte/word/signed word/dword/signed dword) 239, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 191, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (byte[]) keyboard_matrix_col_bitmask ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 16, (byte/signed byte/word/signed word/dword/signed dword) 32, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/word/signed word/dword/signed dword) 128 }
  to:@15
keyboard_init: scope:[keyboard_init]  from
  *((byte*) CIA1_PORT_A_DDR) ← (byte/word/signed word/dword/signed dword) 255
  *((byte*) CIA1_PORT_B_DDR) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:keyboard_init::@return
keyboard_init::@return: scope:[keyboard_init]  from keyboard_init
  return 
  to:@return
@15: scope:[]  from @14
  to:@16
keyboard_matrix_read: scope:[keyboard_matrix_read]  from
  *((byte*) CIA1_PORT_A) ← *((byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*) CIA1_PORT_B)
  (byte) keyboard_matrix_read::row_pressed_bits ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return ← (byte) keyboard_matrix_read::row_pressed_bits
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read keyboard_matrix_read::@1
  (byte) keyboard_matrix_read::return ← (byte) keyboard_matrix_read::return
  return (byte) keyboard_matrix_read::return
  to:@return
keyboard_matrix_read::@1: scope:[keyboard_matrix_read]  from
  to:keyboard_matrix_read::@return
@16: scope:[]  from @15
  to:@17
keyboard_key_pressed: scope:[keyboard_key_pressed]  from
  (byte~) keyboard_key_pressed::$0 ← (byte) keyboard_key_pressed::key & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) keyboard_key_pressed::colidx ← (byte~) keyboard_key_pressed::$0
  (byte~) keyboard_key_pressed::$1 ← (byte) keyboard_key_pressed::key >> (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) keyboard_key_pressed::rowidx ← (byte~) keyboard_key_pressed::$1
  (byte~) keyboard_key_pressed::$2 ← call keyboard_matrix_read (byte) keyboard_key_pressed::rowidx 
  (byte~) keyboard_key_pressed::$3 ← (byte~) keyboard_key_pressed::$2 & *((byte[]) keyboard_matrix_col_bitmask + (byte) keyboard_key_pressed::colidx)
  (byte) keyboard_key_pressed::return ← (byte~) keyboard_key_pressed::$3
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed keyboard_key_pressed::@1
  (byte) keyboard_key_pressed::return ← (byte) keyboard_key_pressed::return
  return (byte) keyboard_key_pressed::return
  to:@return
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from
  to:keyboard_key_pressed::@return
@17: scope:[]  from @16
  to:@18
keyboard_get_keycode: scope:[keyboard_get_keycode]  from
  (byte) keyboard_get_keycode::return ← *((byte[]) keyboard_char_keycodes + (byte) keyboard_get_keycode::ch)
  to:keyboard_get_keycode::@return
keyboard_get_keycode::@return: scope:[keyboard_get_keycode]  from keyboard_get_keycode keyboard_get_keycode::@1
  (byte) keyboard_get_keycode::return ← (byte) keyboard_get_keycode::return
  return (byte) keyboard_get_keycode::return
  to:@return
keyboard_get_keycode::@1: scope:[keyboard_get_keycode]  from
  to:keyboard_get_keycode::@return
@18: scope:[]  from @17
  to:@19
main: scope:[main]  from
  *((byte*) DTV_FEATURE) ← (byte) DTV_FEATURE_ENABLE
  to:main::@1
main::@1: scope:[main]  from main main::@2
  if(true) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1 main::@5
  (void~) main::$0 ← call menu 
  to:main::@1
main::@4: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@6
  to:main::@return
main::@5: scope:[main]  from
  to:main::@2
main::@6: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@19: scope:[]  from @18
  (byte*) MENU_SCREEN ← ((byte*)) (word/dword/signed dword) 32768
  (byte*) MENU_CHARSET ← ((byte*)) (word/dword/signed dword) 38912
  (string~) $0 ← (string) "C64DTV Graphics Modes            EMBLHCC@" + (string) "                                 CCMIIHO@"
  (string~) $1 ← (string~) $0 + (string) "                                 MMMNCUL@"
  (string~) $2 ← (string~) $1 + (string) "----------------------------------------@"
  (string~) $3 ← (string~) $2 + (string) "1. Standard Char             (V) 0000000@"
  (string~) $4 ← (string~) $3 + (string) "2. Extended Color Char       (V) 1000000@"
  (string~) $5 ← (string~) $4 + (string) "3. Multicolor Char           (V) 0100000@"
  (string~) $6 ← (string~) $5 + (string) "4. Standard Bitmap           (V) 0010000@"
  (string~) $7 ← (string~) $6 + (string) "5. Multicolor Bitmap         (V) 0110000@"
  (string~) $8 ← (string~) $7 + (string) "6. High Color Standard Char  (H) 0000100@"
  (string~) $9 ← (string~) $8 + (string) "7. High Extended Color Char  (H) 1000100@"
  (string~) $10 ← (string~) $9 + (string) "8. High Multicolor Char      (H) 0100100@"
  (string~) $11 ← (string~) $10 + (string) "9. High Multicolor Bitmap    (H) 0110100@"
  (string~) $12 ← (string~) $11 + (string) "a. Sixs Fred                 (D) 1111100@"
  (string~) $13 ← (string~) $12 + (string) "b. Sixs Fred 2               (D) 1111000@"
  (string~) $14 ← (string~) $13 + (string) "c. Two Plane Bitmap          (D) 1011100@"
  (string~) $15 ← (string~) $14 + (string) "d. Two Plane Multicol Bitmap (D) 1111100@"
  (string~) $16 ← (string~) $15 + (string) "e. 8bpp Pixel Cell           (D) 1101110@"
  (string~) $17 ← (string~) $16 + (string) "f. Chunky 8bpp Bitmap        (D) 1101111@"
  (string~) $18 ← (string~) $17 + (string) "----------------------------------------@"
  (string~) $19 ← (string~) $18 + (string) "    (V) vicII (H) vicII+hicol (D) c64dtv@"
  (string~) $20 ← (string~) $19 + (string) "@"
  (byte[]) MENU_TEXT ← (string~) $20
  to:@20
menu: scope:[menu]  from
  (dword~) menu::$0 ← ((dword)) (byte*) MENU_CHARSET
  (dword~) menu::$1 ← (dword~) menu::$0 / (dword/signed dword) 65536
  (byte~) menu::$2 ← ((byte)) (dword~) menu::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK) ← (byte~) menu::$2
  *((byte*) DTV_CONTROL) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) menu::$3 ← ((word)) (byte*) MENU_CHARSET
  (word/signed dword/dword~) menu::$4 ← (word~) menu::$3 / (word/signed word/dword/signed dword) 16384
  (byte~) menu::$5 ← ((byte)) (word/signed dword/dword~) menu::$4
  (byte/word/dword~) menu::$6 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) menu::$5
  *((byte*) CIA2_PORT_A) ← (byte/word/dword~) menu::$6
  (byte~) menu::$7 ← (byte) VIC_DEN | (byte) VIC_RSEL
  (byte/word/dword~) menu::$8 ← (byte~) menu::$7 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL) ← (byte/word/dword~) menu::$8
  *((byte*) VIC_CONTROL2) ← (byte) VIC_CSEL
  (word~) menu::$9 ← ((word)) (byte*) MENU_SCREEN
  (word~) menu::$10 ← (word~) menu::$9 & (word/signed word/dword/signed dword) 16383
  (word/signed dword/dword~) menu::$11 ← (word~) menu::$10 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (word~) menu::$12 ← ((word)) (byte*) MENU_CHARSET
  (word~) menu::$13 ← (word~) menu::$12 & (word/signed word/dword/signed dword) 16383
  (word/signed dword/dword~) menu::$14 ← (word~) menu::$13 / (word/signed word/dword/signed dword) 1024
  (word/dword~) menu::$15 ← (word/signed dword/dword~) menu::$11 | (word/signed dword/dword~) menu::$14
  (byte~) menu::$16 ← ((byte)) (word/dword~) menu::$15
  *((byte*) VIC_MEMORY) ← (byte~) menu::$16
  (byte*) menu::c ← (byte*) COLS
  to:menu::@1
menu::@1: scope:[menu]  from menu menu::@1
  *((byte*) menu::c) ← (byte) LIGHT_GREEN
  (byte*) menu::c ← ++ (byte*) menu::c
  (byte*~) menu::$17 ← (byte*) COLS + (word/signed word/dword/signed dword) 1000
  (boolean~) menu::$18 ← (byte*) menu::c != (byte*~) menu::$17
  if((boolean~) menu::$18) goto menu::@1
  to:menu::@6
menu::@6: scope:[menu]  from menu::@1
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (void~) menu::$19 ← call print_set_screen (byte*) MENU_SCREEN 
  (void~) menu::$20 ← call print_cls 
  (void~) menu::$21 ← call print_str_lines (byte[]) MENU_TEXT 
  to:menu::@2
menu::@2: scope:[menu]  from menu::@5 menu::@6
  if(true) goto menu::@3
  to:menu::@7
menu::@3: scope:[menu]  from menu::@2 menu::@8
  (byte~) menu::$22 ← call keyboard_key_pressed (byte) KEY_C 
  (boolean~) menu::$23 ← (byte~) menu::$22 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) menu::$24 ← ! (boolean~) menu::$23
  if((boolean~) menu::$24) goto menu::@5
  to:menu::@9
menu::@7: scope:[menu]  from menu::@2
  to:menu::@4
menu::@4: scope:[menu]  from menu::@11 menu::@7
  to:menu::@return
menu::@8: scope:[menu]  from
  to:menu::@3
menu::@5: scope:[menu]  from menu::@10 menu::@3
  (byte*~) menu::$26 ← (byte*) MENU_SCREEN + (word/signed word/dword/signed dword) 999
  (byte*) menu::last ← (byte*~) menu::$26
  *((byte*) menu::last) ← ++ *((byte*) menu::last)
  to:menu::@2
menu::@9: scope:[menu]  from menu::@3
  (void~) menu::$25 ← call mode_twoplanebitmap 
  to:menu::@return
menu::@return: scope:[menu]  from menu::@4 menu::@9
  return 
  to:@return
menu::@10: scope:[menu]  from
  to:menu::@5
menu::@11: scope:[menu]  from
  to:menu::@4
@20: scope:[]  from @19
  (byte*) TWOPLANE_PLANEA ← ((byte*)) (word/signed word/dword/signed dword) 16384
  (byte*) TWOPLANE_PLANEB ← ((byte*)) (word/signed word/dword/signed dword) 24576
  to:@21
mode_twoplanebitmap: scope:[mode_twoplanebitmap]  from
  (byte~) mode_twoplanebitmap::$0 ← (byte) DTV_CONTROL_HIGHCOLOR_ON | (byte) DTV_CONTROL_LINEAR_ADDRESSING_ON
  *((byte*) DTV_CONTROL) ← (byte~) mode_twoplanebitmap::$0
  (byte~) mode_twoplanebitmap::$1 ← (byte) VIC_ECM | (byte) VIC_BMM
  (byte~) mode_twoplanebitmap::$2 ← (byte~) mode_twoplanebitmap::$1 | (byte) VIC_DEN
  (byte~) mode_twoplanebitmap::$3 ← (byte~) mode_twoplanebitmap::$2 | (byte) VIC_RSEL
  (byte/word/dword~) mode_twoplanebitmap::$4 ← (byte~) mode_twoplanebitmap::$3 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL) ← (byte/word/dword~) mode_twoplanebitmap::$4
  *((byte*) VIC_CONTROL2) ← (byte) VIC_CSEL
  (byte~) mode_twoplanebitmap::$5 ← < (byte*) TWOPLANE_PLANEA
  *((byte*) DTV_PLANEA_START_LO) ← (byte~) mode_twoplanebitmap::$5
  (byte~) mode_twoplanebitmap::$6 ← > (byte*) TWOPLANE_PLANEA
  *((byte*) DTV_PLANEA_START_MI) ← (byte~) mode_twoplanebitmap::$6
  *((byte*) DTV_PLANEA_START_HI) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_STEP) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEA_MODULO_LO) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_MODULO_HI) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) mode_twoplanebitmap::$7 ← < (byte*) TWOPLANE_PLANEB
  *((byte*) DTV_PLANEB_START_LO) ← (byte~) mode_twoplanebitmap::$7
  (byte~) mode_twoplanebitmap::$8 ← > (byte*) TWOPLANE_PLANEB
  *((byte*) DTV_PLANEB_START_MI) ← (byte~) mode_twoplanebitmap::$8
  *((byte*) DTV_PLANEB_START_HI) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_STEP) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEB_MODULO_LO) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BGCOL1) ← (byte) GREEN
  *((byte*) BGCOL2) ← (byte) BLUE
  (byte*) mode_twoplanebitmap::c ← (byte*) COLS
  to:mode_twoplanebitmap::@1
mode_twoplanebitmap::@1: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap mode_twoplanebitmap::@1
  (byte~) mode_twoplanebitmap::$9 ← < (byte*) mode_twoplanebitmap::c
  *((byte*) mode_twoplanebitmap::c) ← (byte~) mode_twoplanebitmap::$9
  (byte*) mode_twoplanebitmap::c ← ++ (byte*) mode_twoplanebitmap::c
  (byte*~) mode_twoplanebitmap::$10 ← (byte*) COLS + (word/signed word/dword/signed dword) 1000
  (boolean~) mode_twoplanebitmap::$11 ← (byte*) mode_twoplanebitmap::c != (byte*~) mode_twoplanebitmap::$10
  if((boolean~) mode_twoplanebitmap::$11) goto mode_twoplanebitmap::@1
  to:mode_twoplanebitmap::@12
mode_twoplanebitmap::@12: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@1
  (byte*) mode_twoplanebitmap::gfxa ← (byte*) TWOPLANE_PLANEA
  (byte) mode_twoplanebitmap::ay ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@2
mode_twoplanebitmap::@2: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@12 mode_twoplanebitmap::@15
  (byte) mode_twoplanebitmap::ax ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@3
mode_twoplanebitmap::@3: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@2 mode_twoplanebitmap::@5
  (byte~) mode_twoplanebitmap::$12 ← (byte) mode_twoplanebitmap::ay & (byte/signed byte/word/signed word/dword/signed dword) 4
  (boolean~) mode_twoplanebitmap::$13 ← (byte~) mode_twoplanebitmap::$12 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mode_twoplanebitmap::$14 ← ! (boolean~) mode_twoplanebitmap::$13
  if((boolean~) mode_twoplanebitmap::$14) goto mode_twoplanebitmap::@4
  to:mode_twoplanebitmap::@13
mode_twoplanebitmap::@4: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@14 mode_twoplanebitmap::@3
  *((byte*) mode_twoplanebitmap::gfxa) ← (byte/word/signed word/dword/signed dword) 255
  (byte*) mode_twoplanebitmap::gfxa ← ++ (byte*) mode_twoplanebitmap::gfxa
  to:mode_twoplanebitmap::@5
mode_twoplanebitmap::@13: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@3
  *((byte*) mode_twoplanebitmap::gfxa) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) mode_twoplanebitmap::gfxa ← ++ (byte*) mode_twoplanebitmap::gfxa
  to:mode_twoplanebitmap::@5
mode_twoplanebitmap::@5: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@13 mode_twoplanebitmap::@4
  (byte) mode_twoplanebitmap::ax ← ++ (byte) mode_twoplanebitmap::ax
  (boolean~) mode_twoplanebitmap::$15 ← (byte) mode_twoplanebitmap::ax != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((boolean~) mode_twoplanebitmap::$15) goto mode_twoplanebitmap::@3
  to:mode_twoplanebitmap::@15
mode_twoplanebitmap::@14: scope:[mode_twoplanebitmap]  from
  to:mode_twoplanebitmap::@4
mode_twoplanebitmap::@15: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@5
  (byte) mode_twoplanebitmap::ay ← ++ (byte) mode_twoplanebitmap::ay
  (boolean~) mode_twoplanebitmap::$16 ← (byte) mode_twoplanebitmap::ay != (byte/word/signed word/dword/signed dword) 200
  if((boolean~) mode_twoplanebitmap::$16) goto mode_twoplanebitmap::@2
  to:mode_twoplanebitmap::@16
mode_twoplanebitmap::@16: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@15
  (byte*) mode_twoplanebitmap::gfxb ← (byte*) TWOPLANE_PLANEB
  (byte) mode_twoplanebitmap::by ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@6
mode_twoplanebitmap::@6: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@16 mode_twoplanebitmap::@17
  (byte) mode_twoplanebitmap::bx ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@7
mode_twoplanebitmap::@7: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@6 mode_twoplanebitmap::@7
  *((byte*) mode_twoplanebitmap::gfxb) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte*) mode_twoplanebitmap::gfxb ← ++ (byte*) mode_twoplanebitmap::gfxb
  (byte) mode_twoplanebitmap::bx ← ++ (byte) mode_twoplanebitmap::bx
  (boolean~) mode_twoplanebitmap::$17 ← (byte) mode_twoplanebitmap::bx != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((boolean~) mode_twoplanebitmap::$17) goto mode_twoplanebitmap::@7
  to:mode_twoplanebitmap::@17
mode_twoplanebitmap::@17: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@7
  (byte) mode_twoplanebitmap::by ← ++ (byte) mode_twoplanebitmap::by
  (boolean~) mode_twoplanebitmap::$18 ← (byte) mode_twoplanebitmap::by != (byte/word/signed word/dword/signed dword) 200
  if((boolean~) mode_twoplanebitmap::$18) goto mode_twoplanebitmap::@6
  to:mode_twoplanebitmap::@18
mode_twoplanebitmap::@18: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@17
  to:mode_twoplanebitmap::@8
mode_twoplanebitmap::@8: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@11 mode_twoplanebitmap::@18
  if(true) goto mode_twoplanebitmap::@9
  to:mode_twoplanebitmap::@19
mode_twoplanebitmap::@9: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@20 mode_twoplanebitmap::@8
  (byte~) mode_twoplanebitmap::$19 ← call keyboard_key_pressed (byte) KEY_SPACE 
  (boolean~) mode_twoplanebitmap::$20 ← (byte~) mode_twoplanebitmap::$19 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mode_twoplanebitmap::$21 ← ! (boolean~) mode_twoplanebitmap::$20
  if((boolean~) mode_twoplanebitmap::$21) goto mode_twoplanebitmap::@11
  to:mode_twoplanebitmap::@21
mode_twoplanebitmap::@19: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@8
  to:mode_twoplanebitmap::@10
mode_twoplanebitmap::@10: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@19 mode_twoplanebitmap::@23
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@20: scope:[mode_twoplanebitmap]  from
  to:mode_twoplanebitmap::@9
mode_twoplanebitmap::@11: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@22 mode_twoplanebitmap::@9
  to:mode_twoplanebitmap::@8
mode_twoplanebitmap::@21: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@9
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@return: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@10 mode_twoplanebitmap::@21
  return 
  to:@return
mode_twoplanebitmap::@22: scope:[mode_twoplanebitmap]  from
  to:mode_twoplanebitmap::@11
mode_twoplanebitmap::@23: scope:[mode_twoplanebitmap]  from
  to:mode_twoplanebitmap::@10
@21: scope:[]  from @20
  call main 
  to:@end
@end: scope:[]  from @21

Removing unused procedure print_str_ln
Removing unused procedure print_str_at
Removing unused procedure print_sword
Removing unused procedure print_sbyte
Removing unused procedure print_sdword
Removing unused procedure keyboard_init
Removing unused procedure keyboard_get_keycode
Removing unused procedure print_str
Removing unused procedure print_dword
Removing unused procedure print_word
Removing unused procedure print_byte
Removing unused procedure print_char
Eliminating unused variable (byte*) PROCPORT and assignment [0] (byte*) PROCPORT ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte*) CHARGEN and assignment [1] (byte*) CHARGEN ← ((byte*)) (word/dword/signed dword) 53248
Eliminating unused variable (byte*) SPRITES_XPOS and assignment [2] (byte*) SPRITES_XPOS ← ((byte*)) (word/dword/signed dword) 53248
Eliminating unused variable (byte*) SPRITES_YPOS and assignment [3] (byte*) SPRITES_YPOS ← ((byte*)) (word/dword/signed dword) 53249
Eliminating unused variable (byte*) SPRITES_XMSB and assignment [4] (byte*) SPRITES_XMSB ← ((byte*)) (word/dword/signed dword) 53264
Eliminating unused variable (byte*) RASTER and assignment [5] (byte*) RASTER ← ((byte*)) (word/dword/signed dword) 53266
Eliminating unused variable (byte*) SPRITES_ENABLE and assignment [6] (byte*) SPRITES_ENABLE ← ((byte*)) (word/dword/signed dword) 53269
Eliminating unused variable (byte*) SPRITES_EXPAND_Y and assignment [7] (byte*) SPRITES_EXPAND_Y ← ((byte*)) (word/dword/signed dword) 53271
Eliminating unused variable (byte*) SPRITES_PRIORITY and assignment [8] (byte*) SPRITES_PRIORITY ← ((byte*)) (word/dword/signed dword) 53275
Eliminating unused variable (byte*) SPRITES_MC and assignment [9] (byte*) SPRITES_MC ← ((byte*)) (word/dword/signed dword) 53276
Eliminating unused variable (byte*) SPRITES_EXPAND_X and assignment [10] (byte*) SPRITES_EXPAND_X ← ((byte*)) (word/dword/signed dword) 53277
Eliminating unused variable (byte*) SPRITES_MC1 and assignment [15] (byte*) SPRITES_MC1 ← ((byte*)) (word/dword/signed dword) 53285
Eliminating unused variable (byte*) SPRITES_MC2 and assignment [16] (byte*) SPRITES_MC2 ← ((byte*)) (word/dword/signed dword) 53286
Eliminating unused variable (byte*) SPRITES_COLS and assignment [17] (byte*) SPRITES_COLS ← ((byte*)) (word/dword/signed dword) 53287
Eliminating unused variable (byte*) D011 and assignment [19] (byte*) D011 ← ((byte*)) (word/dword/signed dword) 53265
Eliminating unused variable (byte) VIC_RST8 and assignment [20] (byte) VIC_RST8 ← (byte/word/signed word/dword/signed dword) 128
Eliminating unused variable (byte*) D016 and assignment [26] (byte*) D016 ← ((byte*)) (word/dword/signed dword) 53270
Eliminating unused variable (byte) VIC_MCM and assignment [27] (byte) VIC_MCM ← (byte/signed byte/word/signed word/dword/signed dword) 16
Eliminating unused variable (byte*) D018 and assignment [29] (byte*) D018 ← ((byte*)) (word/dword/signed dword) 53272
Eliminating unused variable (byte*) CIA1_PORT_A_DDR and assignment [34] (byte*) CIA1_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56322
Eliminating unused variable (byte*) CIA1_PORT_B_DDR and assignment [35] (byte*) CIA1_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56323
Eliminating unused variable (byte*) CIA2_PORT_B and assignment [37] (byte*) CIA2_PORT_B ← ((byte*)) (word/dword/signed dword) 56577
Eliminating unused variable (byte*) CIA2_PORT_B_DDR and assignment [39] (byte*) CIA2_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56579
Eliminating unused variable (byte) BLACK and assignment [40] (byte) BLACK ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (byte) WHITE and assignment [41] (byte) WHITE ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) RED and assignment [42] (byte) RED ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) CYAN and assignment [43] (byte) CYAN ← (byte/signed byte/word/signed word/dword/signed dword) 3
Eliminating unused variable (byte) PURPLE and assignment [44] (byte) PURPLE ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (byte) YELLOW and assignment [47] (byte) YELLOW ← (byte/signed byte/word/signed word/dword/signed dword) 7
Eliminating unused variable (byte) ORANGE and assignment [48] (byte) ORANGE ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte) BROWN and assignment [49] (byte) BROWN ← (byte/signed byte/word/signed word/dword/signed dword) 9
Eliminating unused variable (byte) PINK and assignment [50] (byte) PINK ← (byte/signed byte/word/signed word/dword/signed dword) 10
Eliminating unused variable (byte) DARK_GREY and assignment [51] (byte) DARK_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 11
Eliminating unused variable (byte) GREY and assignment [52] (byte) GREY ← (byte/signed byte/word/signed word/dword/signed dword) 12
Eliminating unused variable (byte) LIGHT_BLUE and assignment [54] (byte) LIGHT_BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 14
Eliminating unused variable (byte) LIGHT_GREY and assignment [55] (byte) LIGHT_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 15
Eliminating unused variable (byte) DTV_FEATURE_DISABLE_TIL_RESET and assignment [58] (byte) DTV_FEATURE_DISABLE_TIL_RESET ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) DTV_CONTROL_BORDER_OFF and assignment [61] (byte) DTV_CONTROL_BORDER_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) DTV_CONTROL_OVERSCAN_ON and assignment [63] (byte) DTV_CONTROL_OVERSCAN_ON ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte) DTV_CONTROL_COLORRAM_OFF and assignment [64] (byte) DTV_CONTROL_COLORRAM_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 16
Eliminating unused variable (byte) DTV_CONTROL_BADLINE_OFF and assignment [65] (byte) DTV_CONTROL_BADLINE_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 32
Eliminating unused variable (byte) DTV_CONTROL_CHUNKY_ON and assignment [66] (byte) DTV_CONTROL_CHUNKY_ON ← (byte/signed byte/word/signed word/dword/signed dword) 64
Eliminating unused variable (byte*) DTV_PALETTE and assignment [67] (byte*) DTV_PALETTE ← ((byte*)) (word/dword/signed dword) 53760
Eliminating unused variable (byte*) DTV_SPRITE_BANK and assignment [80] (byte*) DTV_SPRITE_BANK ← ((byte*)) (word/dword/signed dword) 53325
Eliminating unused variable (byte*) DTV_COLOR_BANK_LO and assignment [81] (byte*) DTV_COLOR_BANK_LO ← ((byte*)) (word/dword/signed dword) 53302
Eliminating unused variable (byte*) DTV_COLOR_BANK_HI and assignment [82] (byte*) DTV_COLOR_BANK_HI ← ((byte*)) (word/dword/signed dword) 53303
Eliminating unused variable (byte*) DTV_GRAPHICS_HICOL_BANK and assignment [84] (byte*) DTV_GRAPHICS_HICOL_BANK ← ((byte*)) (word/dword/signed dword) 53310
Eliminating unused variable - keeping the call (void~) print_str_lines::$4
Eliminating unused variable (byte) KEY_DEL and assignment [120] (byte) KEY_DEL ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (byte) KEY_RETURN and assignment [121] (byte) KEY_RETURN ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) KEY_CRSR_RIGHT and assignment [122] (byte) KEY_CRSR_RIGHT ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) KEY_F7 and assignment [123] (byte) KEY_F7 ← (byte/signed byte/word/signed word/dword/signed dword) 3
Eliminating unused variable (byte) KEY_F1 and assignment [124] (byte) KEY_F1 ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (byte) KEY_F3 and assignment [125] (byte) KEY_F3 ← (byte/signed byte/word/signed word/dword/signed dword) 5
Eliminating unused variable (byte) KEY_F5 and assignment [126] (byte) KEY_F5 ← (byte/signed byte/word/signed word/dword/signed dword) 6
Eliminating unused variable (byte) KEY_CRSR_DOWN and assignment [127] (byte) KEY_CRSR_DOWN ← (byte/signed byte/word/signed word/dword/signed dword) 7
Eliminating unused variable (byte) KEY_LSHIFT and assignment [135] (byte) KEY_LSHIFT ← (byte/signed byte/word/signed word/dword/signed dword) 15
Eliminating unused variable (byte) KEY_HOME and assignment [171] (byte) KEY_HOME ← (byte/signed byte/word/signed word/dword/signed dword) 51
Eliminating unused variable (byte) KEY_RSHIFT and assignment [172] (byte) KEY_RSHIFT ← (byte/signed byte/word/signed word/dword/signed dword) 52
Eliminating unused variable (byte) KEY_CTRL and assignment [178] (byte) KEY_CTRL ← (byte/signed byte/word/signed word/dword/signed dword) 58
Eliminating unused variable (byte) KEY_COMMODORE and assignment [181] (byte) KEY_COMMODORE ← (byte/signed byte/word/signed word/dword/signed dword) 61
Eliminating unused variable (byte) KEY_RUNSTOP and assignment [183] (byte) KEY_RUNSTOP ← (byte/signed byte/word/signed word/dword/signed dword) 63
Eliminating unused variable (byte[]) keyboard_char_keycodes and assignment [184] (byte[]) keyboard_char_keycodes ← { (byte) KEY_AT, (byte) KEY_A, (byte) KEY_B, (byte) KEY_C, (byte) KEY_D, (byte) KEY_E, (byte) KEY_F, (byte) KEY_G, (byte) KEY_H, (byte) KEY_I, (byte) KEY_J, (byte) KEY_K, (byte) KEY_L, (byte) KEY_M, (byte) KEY_N, (byte) KEY_O, (byte) KEY_P, (byte) KEY_Q, (byte) KEY_R, (byte) KEY_S, (byte) KEY_T, (byte) KEY_U, (byte) KEY_V, (byte) KEY_W, (byte) KEY_X, (byte) KEY_Y, (byte) KEY_Z, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_POUND, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_ARROW_UP, (byte) KEY_ARROW_LEFT, (byte) KEY_SPACE, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_ASTERISK, (byte) KEY_PLUS, (byte) KEY_COMMA, (byte) KEY_MINUS, (byte) KEY_DOT, (byte) KEY_SLASH, (byte) KEY_0, (byte) KEY_1, (byte) KEY_2, (byte) KEY_3, (byte) KEY_4, (byte) KEY_5, (byte) KEY_6, (byte) KEY_7, (byte) KEY_8, (byte) KEY_9, (byte) KEY_COLON, (byte) KEY_SEMICOLON, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_EQUALS, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63 }
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) menu::$19
Eliminating unused variable - keeping the call (void~) menu::$20
Eliminating unused variable - keeping the call (void~) menu::$21
Eliminating unused variable - keeping the call (void~) menu::$25
Eliminating unused variable (byte) KEY_3 and assignment [73] (byte) KEY_3 ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte) KEY_W and assignment [74] (byte) KEY_W ← (byte/signed byte/word/signed word/dword/signed dword) 9
Eliminating unused variable (byte) KEY_A and assignment [75] (byte) KEY_A ← (byte/signed byte/word/signed word/dword/signed dword) 10
Eliminating unused variable (byte) KEY_4 and assignment [76] (byte) KEY_4 ← (byte/signed byte/word/signed word/dword/signed dword) 11
Eliminating unused variable (byte) KEY_Z and assignment [77] (byte) KEY_Z ← (byte/signed byte/word/signed word/dword/signed dword) 12
Eliminating unused variable (byte) KEY_S and assignment [78] (byte) KEY_S ← (byte/signed byte/word/signed word/dword/signed dword) 13
Eliminating unused variable (byte) KEY_E and assignment [79] (byte) KEY_E ← (byte/signed byte/word/signed word/dword/signed dword) 14
Eliminating unused variable (byte) KEY_5 and assignment [80] (byte) KEY_5 ← (byte/signed byte/word/signed word/dword/signed dword) 16
Eliminating unused variable (byte) KEY_R and assignment [81] (byte) KEY_R ← (byte/signed byte/word/signed word/dword/signed dword) 17
Eliminating unused variable (byte) KEY_D and assignment [82] (byte) KEY_D ← (byte/signed byte/word/signed word/dword/signed dword) 18
Eliminating unused variable (byte) KEY_6 and assignment [83] (byte) KEY_6 ← (byte/signed byte/word/signed word/dword/signed dword) 19
Eliminating unused variable (byte) KEY_F and assignment [85] (byte) KEY_F ← (byte/signed byte/word/signed word/dword/signed dword) 21
Eliminating unused variable (byte) KEY_T and assignment [86] (byte) KEY_T ← (byte/signed byte/word/signed word/dword/signed dword) 22
Eliminating unused variable (byte) KEY_X and assignment [87] (byte) KEY_X ← (byte/signed byte/word/signed word/dword/signed dword) 23
Eliminating unused variable (byte) KEY_7 and assignment [88] (byte) KEY_7 ← (byte/signed byte/word/signed word/dword/signed dword) 24
Eliminating unused variable (byte) KEY_Y and assignment [89] (byte) KEY_Y ← (byte/signed byte/word/signed word/dword/signed dword) 25
Eliminating unused variable (byte) KEY_G and assignment [90] (byte) KEY_G ← (byte/signed byte/word/signed word/dword/signed dword) 26
Eliminating unused variable (byte) KEY_8 and assignment [91] (byte) KEY_8 ← (byte/signed byte/word/signed word/dword/signed dword) 27
Eliminating unused variable (byte) KEY_B and assignment [92] (byte) KEY_B ← (byte/signed byte/word/signed word/dword/signed dword) 28
Eliminating unused variable (byte) KEY_H and assignment [93] (byte) KEY_H ← (byte/signed byte/word/signed word/dword/signed dword) 29
Eliminating unused variable (byte) KEY_U and assignment [94] (byte) KEY_U ← (byte/signed byte/word/signed word/dword/signed dword) 30
Eliminating unused variable (byte) KEY_V and assignment [95] (byte) KEY_V ← (byte/signed byte/word/signed word/dword/signed dword) 31
Eliminating unused variable (byte) KEY_9 and assignment [96] (byte) KEY_9 ← (byte/signed byte/word/signed word/dword/signed dword) 32
Eliminating unused variable (byte) KEY_I and assignment [97] (byte) KEY_I ← (byte/signed byte/word/signed word/dword/signed dword) 33
Eliminating unused variable (byte) KEY_J and assignment [98] (byte) KEY_J ← (byte/signed byte/word/signed word/dword/signed dword) 34
Eliminating unused variable (byte) KEY_0 and assignment [99] (byte) KEY_0 ← (byte/signed byte/word/signed word/dword/signed dword) 35
Eliminating unused variable (byte) KEY_M and assignment [100] (byte) KEY_M ← (byte/signed byte/word/signed word/dword/signed dword) 36
Eliminating unused variable (byte) KEY_K and assignment [101] (byte) KEY_K ← (byte/signed byte/word/signed word/dword/signed dword) 37
Eliminating unused variable (byte) KEY_O and assignment [102] (byte) KEY_O ← (byte/signed byte/word/signed word/dword/signed dword) 38
Eliminating unused variable (byte) KEY_N and assignment [103] (byte) KEY_N ← (byte/signed byte/word/signed word/dword/signed dword) 39
Eliminating unused variable (byte) KEY_PLUS and assignment [104] (byte) KEY_PLUS ← (byte/signed byte/word/signed word/dword/signed dword) 40
Eliminating unused variable (byte) KEY_P and assignment [105] (byte) KEY_P ← (byte/signed byte/word/signed word/dword/signed dword) 41
Eliminating unused variable (byte) KEY_L and assignment [106] (byte) KEY_L ← (byte/signed byte/word/signed word/dword/signed dword) 42
Eliminating unused variable (byte) KEY_MINUS and assignment [107] (byte) KEY_MINUS ← (byte/signed byte/word/signed word/dword/signed dword) 43
Eliminating unused variable (byte) KEY_DOT and assignment [108] (byte) KEY_DOT ← (byte/signed byte/word/signed word/dword/signed dword) 44
Eliminating unused variable (byte) KEY_COLON and assignment [109] (byte) KEY_COLON ← (byte/signed byte/word/signed word/dword/signed dword) 45
Eliminating unused variable (byte) KEY_AT and assignment [110] (byte) KEY_AT ← (byte/signed byte/word/signed word/dword/signed dword) 46
Eliminating unused variable (byte) KEY_COMMA and assignment [111] (byte) KEY_COMMA ← (byte/signed byte/word/signed word/dword/signed dword) 47
Eliminating unused variable (byte) KEY_POUND and assignment [112] (byte) KEY_POUND ← (byte/signed byte/word/signed word/dword/signed dword) 48
Eliminating unused variable (byte) KEY_ASTERISK and assignment [113] (byte) KEY_ASTERISK ← (byte/signed byte/word/signed word/dword/signed dword) 49
Eliminating unused variable (byte) KEY_SEMICOLON and assignment [114] (byte) KEY_SEMICOLON ← (byte/signed byte/word/signed word/dword/signed dword) 50
Eliminating unused variable (byte) KEY_EQUALS and assignment [115] (byte) KEY_EQUALS ← (byte/signed byte/word/signed word/dword/signed dword) 53
Eliminating unused variable (byte) KEY_ARROW_UP and assignment [116] (byte) KEY_ARROW_UP ← (byte/signed byte/word/signed word/dword/signed dword) 54
Eliminating unused variable (byte) KEY_SLASH and assignment [117] (byte) KEY_SLASH ← (byte/signed byte/word/signed word/dword/signed dword) 55
Eliminating unused variable (byte) KEY_1 and assignment [118] (byte) KEY_1 ← (byte/signed byte/word/signed word/dword/signed dword) 56
Eliminating unused variable (byte) KEY_ARROW_LEFT and assignment [119] (byte) KEY_ARROW_LEFT ← (byte/signed byte/word/signed word/dword/signed dword) 57
Eliminating unused variable (byte) KEY_2 and assignment [120] (byte) KEY_2 ← (byte/signed byte/word/signed word/dword/signed dword) 59
Eliminating unused variable (byte) KEY_Q and assignment [122] (byte) KEY_Q ← (byte/signed byte/word/signed word/dword/signed dword) 62
Creating constant string variable for inline (const string) $21 "C64DTV Graphics Modes            EMBLHCC@"
Creating constant string variable for inline (const string) $22 "                                 CCMIIHO@"
Creating constant string variable for inline (const string) $23 "                                 MMMNCUL@"
Creating constant string variable for inline (const string) $24 "----------------------------------------@"
Creating constant string variable for inline (const string) $25 "1. Standard Char             (V) 0000000@"
Creating constant string variable for inline (const string) $26 "2. Extended Color Char       (V) 1000000@"
Creating constant string variable for inline (const string) $27 "3. Multicolor Char           (V) 0100000@"
Creating constant string variable for inline (const string) $28 "4. Standard Bitmap           (V) 0010000@"
Creating constant string variable for inline (const string) $29 "5. Multicolor Bitmap         (V) 0110000@"
Creating constant string variable for inline (const string) $30 "6. High Color Standard Char  (H) 0000100@"
Creating constant string variable for inline (const string) $31 "7. High Extended Color Char  (H) 1000100@"
Creating constant string variable for inline (const string) $32 "8. High Multicolor Char      (H) 0100100@"
Creating constant string variable for inline (const string) $33 "9. High Multicolor Bitmap    (H) 0110100@"
Creating constant string variable for inline (const string) $34 "a. Sixs Fred                 (D) 1111100@"
Creating constant string variable for inline (const string) $35 "b. Sixs Fred 2               (D) 1111000@"
Creating constant string variable for inline (const string) $36 "c. Two Plane Bitmap          (D) 1011100@"
Creating constant string variable for inline (const string) $37 "d. Two Plane Multicol Bitmap (D) 1111100@"
Creating constant string variable for inline (const string) $38 "e. 8bpp Pixel Cell           (D) 1101110@"
Creating constant string variable for inline (const string) $39 "f. Chunky 8bpp Bitmap        (D) 1101111@"
Creating constant string variable for inline (const string) $40 "----------------------------------------@"
Creating constant string variable for inline (const string) $41 "    (V) vicII (H) vicII+hicol (D) c64dtv@"
Creating constant string variable for inline (const string) $42 "@"
Removing empty block print_str_lines::@6
Removing empty block print_str_lines::@3
Removing empty block print_str_lines::@7
Removing empty block print_str_lines::@10
Removing empty block @1
Removing empty block @2
Removing empty block @3
Removing empty block @4
Removing empty block @5
Removing empty block @6
Removing empty block @7
Removing empty block @8
Removing empty block @9
Removing empty block @10
Removing empty block @11
Removing empty block @12
Removing empty block @13
Removing empty block @15
Removing empty block keyboard_matrix_read::@1
Removing empty block @16
Removing empty block keyboard_key_pressed::@1
Removing empty block @17
Removing empty block @18
Removing empty block main::@4
Removing empty block main::@3
Removing empty block main::@5
Removing empty block main::@6
Removing empty block menu::@7
Removing empty block menu::@4
Removing empty block menu::@8
Removing empty block menu::@10
Removing empty block menu::@11
Removing empty block mode_twoplanebitmap::@14
Removing empty block mode_twoplanebitmap::@18
Removing empty block mode_twoplanebitmap::@19
Removing empty block mode_twoplanebitmap::@10
Removing empty block mode_twoplanebitmap::@20
Removing empty block mode_twoplanebitmap::@21
Removing empty block mode_twoplanebitmap::@22
Removing empty block mode_twoplanebitmap::@23
PROCEDURE MODIFY VARIABLE ANALYSIS
print_str_lines modifies print_char_cursor
print_str_lines modifies print_line_cursor
print_ln modifies print_line_cursor
print_ln modifies print_char_cursor
print_cls modifies print_line_cursor
print_cls modifies print_char_cursor
print_set_screen modifies print_screen
print_set_screen modifies print_line_cursor
print_set_screen modifies print_char_cursor
main modifies print_screen
main modifies print_line_cursor
main modifies print_char_cursor
menu modifies print_screen
menu modifies print_line_cursor
menu modifies print_char_cursor

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL1#0 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL2#0 ← ((byte*)) (word/dword/signed dword) 53282
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) VIC_BMM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) 53270
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) 55296
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56320
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) 56321
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) 56578
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) LIGHT_GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte*) DTV_FEATURE#0 ← ((byte*)) (word/dword/signed dword) 53311
  (byte) DTV_FEATURE_ENABLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) DTV_CONTROL#0 ← ((byte*)) (word/dword/signed dword) 53308
  (byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_CONTROL_HIGHCOLOR_ON#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte*) DTV_PLANEA_START_LO#0 ← ((byte*)) (word/dword/signed dword) 53306
  (byte*) DTV_PLANEA_START_MI#0 ← ((byte*)) (word/dword/signed dword) 53307
  (byte*) DTV_PLANEA_START_HI#0 ← ((byte*)) (word/dword/signed dword) 53317
  (byte*) DTV_PLANEA_STEP#0 ← ((byte*)) (word/dword/signed dword) 53318
  (byte*) DTV_PLANEA_MODULO_LO#0 ← ((byte*)) (word/dword/signed dword) 53304
  (byte*) DTV_PLANEA_MODULO_HI#0 ← ((byte*)) (word/dword/signed dword) 53305
  (byte*) DTV_PLANEB_START_LO#0 ← ((byte*)) (word/dword/signed dword) 53321
  (byte*) DTV_PLANEB_START_MI#0 ← ((byte*)) (word/dword/signed dword) 53322
  (byte*) DTV_PLANEB_START_HI#0 ← ((byte*)) (word/dword/signed dword) 53323
  (byte*) DTV_PLANEB_STEP#0 ← ((byte*)) (word/dword/signed dword) 53324
  (byte*) DTV_PLANEB_MODULO_LO#0 ← ((byte*)) (word/dword/signed dword) 53319
  (byte*) DTV_PLANEB_MODULO_HI#0 ← ((byte*)) (word/dword/signed dword) 53320
  (byte*) DTV_GRAPHICS_VIC_BANK#0 ← ((byte*)) (word/dword/signed dword) 53309
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@14
print_str_lines: scope:[print_str_lines]  from menu::@13
  (byte*) print_line_cursor#39 ← phi( menu::@13/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#41 ← phi( menu::@13/(byte*) print_char_cursor#13 )
  (byte*) print_str_lines::str#4 ← phi( menu::@13/(byte*) print_str_lines::str#1 )
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@11
  (byte*) print_line_cursor#31 ← phi( print_str_lines/(byte*) print_line_cursor#39 print_str_lines::@11/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#33 ← phi( print_str_lines/(byte*) print_char_cursor#41 print_str_lines::@11/(byte*) print_char_cursor#2 )
  (byte*) print_str_lines::str#2 ← phi( print_str_lines/(byte*) print_str_lines::str#4 print_str_lines::@11/(byte*) print_str_lines::str#5 )
  (boolean~) print_str_lines::$0 ← *((byte*) print_str_lines::str#2) != (byte) '@'
  if((boolean~) print_str_lines::$0) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1
  (byte*) print_line_cursor#51 ← phi( print_str_lines::@1/(byte*) print_line_cursor#31 )
  (byte*) print_char_cursor#42 ← phi( print_str_lines::@1/(byte*) print_char_cursor#33 )
  (byte*) print_str_lines::str#6 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#2 )
  to:print_str_lines::@4
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@5
  (byte*) print_line_cursor#46 ← phi( print_str_lines::@2/(byte*) print_line_cursor#51 print_str_lines::@5/(byte*) print_line_cursor#40 )
  (byte*) print_char_cursor#31 ← phi( print_str_lines::@2/(byte*) print_char_cursor#42 print_str_lines::@5/(byte*) print_char_cursor#43 )
  (byte*) print_str_lines::str#3 ← phi( print_str_lines::@2/(byte*) print_str_lines::str#6 print_str_lines::@5/(byte*) print_str_lines::str#7 )
  (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3)
  (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3
  (boolean~) print_str_lines::$1 ← (byte) print_str_lines::ch#0 != (byte) '@'
  (boolean~) print_str_lines::$2 ← ! (boolean~) print_str_lines::$1
  if((boolean~) print_str_lines::$2) goto print_str_lines::@5
  to:print_str_lines::@8
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@4 print_str_lines::@8
  (byte*) print_line_cursor#40 ← phi( print_str_lines::@4/(byte*) print_line_cursor#46 print_str_lines::@8/(byte*) print_line_cursor#47 )
  (byte*) print_char_cursor#43 ← phi( print_str_lines::@4/(byte*) print_char_cursor#31 print_str_lines::@8/(byte*) print_char_cursor#1 )
  (byte*) print_str_lines::str#7 ← phi( print_str_lines::@4/(byte*) print_str_lines::str#0 print_str_lines::@8/(byte*) print_str_lines::str#8 )
  (byte) print_str_lines::ch#1 ← phi( print_str_lines::@4/(byte) print_str_lines::ch#0 print_str_lines::@8/(byte) print_str_lines::ch#2 )
  (boolean~) print_str_lines::$3 ← (byte) print_str_lines::ch#1 != (byte) '@'
  if((boolean~) print_str_lines::$3) goto print_str_lines::@4
  to:print_str_lines::@9
print_str_lines::@8: scope:[print_str_lines]  from print_str_lines::@4
  (byte*) print_line_cursor#47 ← phi( print_str_lines::@4/(byte*) print_line_cursor#46 )
  (byte*) print_str_lines::str#8 ← phi( print_str_lines::@4/(byte*) print_str_lines::str#0 )
  (byte*) print_char_cursor#17 ← phi( print_str_lines::@4/(byte*) print_char_cursor#31 )
  (byte) print_str_lines::ch#2 ← phi( print_str_lines::@4/(byte) print_str_lines::ch#0 )
  *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#2
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17
  to:print_str_lines::@5
print_str_lines::@9: scope:[print_str_lines]  from print_str_lines::@5
  (byte*) print_str_lines::str#9 ← phi( print_str_lines::@5/(byte*) print_str_lines::str#7 )
  (byte*) print_char_cursor#32 ← phi( print_str_lines::@5/(byte*) print_char_cursor#43 )
  (byte*) print_line_cursor#30 ← phi( print_str_lines::@5/(byte*) print_line_cursor#40 )
  call print_ln param-assignment
  to:print_str_lines::@11
print_str_lines::@11: scope:[print_str_lines]  from print_str_lines::@9
  (byte*) print_str_lines::str#5 ← phi( print_str_lines::@9/(byte*) print_str_lines::str#9 )
  (byte*) print_char_cursor#18 ← phi( print_str_lines::@9/(byte*) print_char_cursor#5 )
  (byte*) print_line_cursor#16 ← phi( print_str_lines::@9/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#18
  to:print_str_lines::@1
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  (byte*) print_line_cursor#17 ← phi( print_str_lines::@1/(byte*) print_line_cursor#31 )
  (byte*) print_char_cursor#19 ← phi( print_str_lines::@1/(byte*) print_char_cursor#33 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#19
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#17
  return 
  to:@return
print_ln: scope:[print_ln]  from print_str_lines::@9
  (byte*) print_char_cursor#34 ← phi( print_str_lines::@9/(byte*) print_char_cursor#32 )
  (byte*) print_line_cursor#32 ← phi( print_str_lines::@9/(byte*) print_line_cursor#30 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#20 ← phi( print_ln/(byte*) print_char_cursor#34 print_ln::@1/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#18 ← phi( print_ln/(byte*) print_line_cursor#32 print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_line_cursor#3 ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) print_line_cursor#3 < (byte*) print_char_cursor#20
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#19 ← phi( print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#4 ← (byte*) print_line_cursor#19
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#21 ← phi( print_ln::@2/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#20 ← phi( print_ln::@2/(byte*) print_line_cursor#19 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#20
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#21
  return 
  to:@return
print_cls: scope:[print_cls]  from menu::@12
  (byte*) print_screen#8 ← phi( menu::@12/(byte*) print_screen#5 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#8
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#9 ← phi( print_cls/(byte*) print_screen#8 print_cls::@1/(byte*) print_screen#9 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#9 + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#10 ← phi( print_cls::@1/(byte*) print_screen#9 )
  (byte*) print_line_cursor#5 ← (byte*) print_screen#10
  (byte*) print_char_cursor#6 ← (byte*) print_line_cursor#5
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#22 ← phi( print_cls::@2/(byte*) print_char_cursor#6 )
  (byte*) print_line_cursor#21 ← phi( print_cls::@2/(byte*) print_line_cursor#5 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#21
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#22
  return 
  to:@return
print_set_screen: scope:[print_set_screen]  from menu::@6
  (byte*) print_set_screen::screen#1 ← phi( menu::@6/(byte*) print_set_screen::screen#0 )
  (byte*) print_screen#1 ← (byte*) print_set_screen::screen#1
  (byte*) print_line_cursor#7 ← (byte*) print_screen#1
  (byte*) print_char_cursor#8 ← (byte*) print_line_cursor#7
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  (byte*) print_char_cursor#23 ← phi( print_set_screen/(byte*) print_char_cursor#8 )
  (byte*) print_line_cursor#22 ← phi( print_set_screen/(byte*) print_line_cursor#7 )
  (byte*) print_screen#11 ← phi( print_set_screen/(byte*) print_screen#1 )
  (byte*) print_screen#2 ← (byte*) print_screen#11
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#22
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#23
  return 
  to:@return
@14: scope:[]  from @begin
  (byte*) print_char_cursor#52 ← phi( @begin/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#52 ← phi( @begin/(byte*) print_line_cursor#0 )
  (byte*) print_screen#33 ← phi( @begin/(byte*) print_screen#0 )
  (byte) KEY_C#0 ← (byte/signed byte/word/signed word/dword/signed dword) 20
  (byte) KEY_SPACE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 60
  (byte[8]) keyboard_matrix_row_bitmask#0 ← { (byte/word/signed word/dword/signed dword) 254, (byte/word/signed word/dword/signed dword) 253, (byte/word/signed word/dword/signed dword) 251, (byte/word/signed word/dword/signed dword) 247, (byte/word/signed word/dword/signed dword) 239, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 191, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (byte[]) keyboard_matrix_col_bitmask#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 16, (byte/signed byte/word/signed word/dword/signed dword) 32, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/word/signed word/dword/signed dword) 128 }
  to:@19
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  (byte) keyboard_matrix_read::rowid#1 ← phi( keyboard_key_pressed/(byte) keyboard_matrix_read::rowid#0 )
  *((byte*) CIA1_PORT_A#0) ← *((byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#1)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*) CIA1_PORT_B#0)
  (byte) keyboard_matrix_read::row_pressed_bits#0 ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return#0 ← (byte) keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  (byte) keyboard_matrix_read::return#3 ← phi( keyboard_matrix_read/(byte) keyboard_matrix_read::return#0 )
  (byte) keyboard_matrix_read::return#1 ← (byte) keyboard_matrix_read::return#3
  return 
  to:@return
keyboard_key_pressed: scope:[keyboard_key_pressed]  from menu::@3 mode_twoplanebitmap::@9
  (byte) keyboard_key_pressed::key#2 ← phi( menu::@3/(byte) keyboard_key_pressed::key#0 mode_twoplanebitmap::@9/(byte) keyboard_key_pressed::key#1 )
  (byte~) keyboard_key_pressed::$0 ← (byte) keyboard_key_pressed::key#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) keyboard_key_pressed::colidx#0 ← (byte~) keyboard_key_pressed::$0
  (byte~) keyboard_key_pressed::$1 ← (byte) keyboard_key_pressed::key#2 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) keyboard_key_pressed::rowidx#0 ← (byte~) keyboard_key_pressed::$1
  (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0
  call keyboard_matrix_read param-assignment
  (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#1
  to:keyboard_key_pressed::@2
keyboard_key_pressed::@2: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  (byte) keyboard_key_pressed::colidx#1 ← phi( keyboard_key_pressed/(byte) keyboard_key_pressed::colidx#0 )
  (byte) keyboard_matrix_read::return#4 ← phi( keyboard_key_pressed/(byte) keyboard_matrix_read::return#2 )
  (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#4
  (byte~) keyboard_key_pressed::$3 ← (byte~) keyboard_key_pressed::$2 & *((byte[]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#1)
  (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$3
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@2
  (byte) keyboard_key_pressed::return#4 ← phi( keyboard_key_pressed::@2/(byte) keyboard_key_pressed::return#0 )
  (byte) keyboard_key_pressed::return#1 ← (byte) keyboard_key_pressed::return#4
  return 
  to:@return
main: scope:[main]  from @21
  (byte*) print_char_cursor#44 ← phi( @21/(byte*) print_char_cursor#40 )
  (byte*) print_line_cursor#41 ← phi( @21/(byte*) print_line_cursor#38 )
  (byte*) print_screen#23 ← phi( @21/(byte*) print_screen#22 )
  *((byte*) DTV_FEATURE#0) ← (byte) DTV_FEATURE_ENABLE#0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte*) print_char_cursor#36 ← phi( main/(byte*) print_char_cursor#44 main::@7/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#34 ← phi( main/(byte*) print_line_cursor#41 main::@7/(byte*) print_line_cursor#9 )
  (byte*) print_screen#18 ← phi( main/(byte*) print_screen#23 main::@7/(byte*) print_screen#3 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte*) print_char_cursor#35 ← phi( main::@1/(byte*) print_char_cursor#36 )
  (byte*) print_line_cursor#33 ← phi( main::@1/(byte*) print_line_cursor#34 )
  (byte*) print_screen#17 ← phi( main::@1/(byte*) print_screen#18 )
  call menu param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte*) print_char_cursor#24 ← phi( main::@2/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#23 ← phi( main::@2/(byte*) print_line_cursor#14 )
  (byte*) print_screen#12 ← phi( main::@2/(byte*) print_screen#6 )
  (byte*) print_screen#3 ← (byte*) print_screen#12
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#23
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#24
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte*) print_char_cursor#25 ← phi( main::@1/(byte*) print_char_cursor#36 )
  (byte*) print_line_cursor#24 ← phi( main::@1/(byte*) print_line_cursor#34 )
  (byte*) print_screen#13 ← phi( main::@1/(byte*) print_screen#18 )
  (byte*) print_screen#4 ← (byte*) print_screen#13
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#24
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#25
  return 
  to:@return
@19: scope:[]  from @14
  (byte*) print_char_cursor#51 ← phi( @14/(byte*) print_char_cursor#52 )
  (byte*) print_line_cursor#50 ← phi( @14/(byte*) print_line_cursor#52 )
  (byte*) print_screen#32 ← phi( @14/(byte*) print_screen#33 )
  (byte*) MENU_SCREEN#0 ← ((byte*)) (word/dword/signed dword) 32768
  (byte*) MENU_CHARSET#0 ← ((byte*)) (word/dword/signed dword) 38912
  (string~) $0 ← (const string) $21 + (const string) $22
  (string~) $1 ← (string~) $0 + (const string) $23
  (string~) $2 ← (string~) $1 + (const string) $24
  (string~) $3 ← (string~) $2 + (const string) $25
  (string~) $4 ← (string~) $3 + (const string) $26
  (string~) $5 ← (string~) $4 + (const string) $27
  (string~) $6 ← (string~) $5 + (const string) $28
  (string~) $7 ← (string~) $6 + (const string) $29
  (string~) $8 ← (string~) $7 + (const string) $30
  (string~) $9 ← (string~) $8 + (const string) $31
  (string~) $10 ← (string~) $9 + (const string) $32
  (string~) $11 ← (string~) $10 + (const string) $33
  (string~) $12 ← (string~) $11 + (const string) $34
  (string~) $13 ← (string~) $12 + (const string) $35
  (string~) $14 ← (string~) $13 + (const string) $36
  (string~) $15 ← (string~) $14 + (const string) $37
  (string~) $16 ← (string~) $15 + (const string) $38
  (string~) $17 ← (string~) $16 + (const string) $39
  (string~) $18 ← (string~) $17 + (const string) $40
  (string~) $19 ← (string~) $18 + (const string) $41
  (string~) $20 ← (string~) $19 + (const string) $42
  (byte[]) MENU_TEXT#0 ← (string~) $20
  to:@20
menu: scope:[menu]  from main::@2
  (byte*) print_char_cursor#49 ← phi( main::@2/(byte*) print_char_cursor#35 )
  (byte*) print_line_cursor#48 ← phi( main::@2/(byte*) print_line_cursor#33 )
  (byte*) print_screen#29 ← phi( main::@2/(byte*) print_screen#17 )
  (dword~) menu::$0 ← ((dword)) (byte*) MENU_CHARSET#0
  (dword~) menu::$1 ← (dword~) menu::$0 / (dword/signed dword) 65536
  (byte~) menu::$2 ← ((byte)) (dword~) menu::$1
  *((byte*) DTV_GRAPHICS_VIC_BANK#0) ← (byte~) menu::$2
  *((byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) menu::$3 ← ((word)) (byte*) MENU_CHARSET#0
  (word/signed dword/dword~) menu::$4 ← (word~) menu::$3 / (word/signed word/dword/signed dword) 16384
  (byte~) menu::$5 ← ((byte)) (word/signed dword/dword~) menu::$4
  (byte/word/dword~) menu::$6 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) menu::$5
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) menu::$6
  (byte~) menu::$7 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte/word/dword~) menu::$8 ← (byte~) menu::$7 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) menu::$8
  *((byte*) VIC_CONTROL2#0) ← (byte) VIC_CSEL#0
  (word~) menu::$9 ← ((word)) (byte*) MENU_SCREEN#0
  (word~) menu::$10 ← (word~) menu::$9 & (word/signed word/dword/signed dword) 16383
  (word/signed dword/dword~) menu::$11 ← (word~) menu::$10 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (word~) menu::$12 ← ((word)) (byte*) MENU_CHARSET#0
  (word~) menu::$13 ← (word~) menu::$12 & (word/signed word/dword/signed dword) 16383
  (word/signed dword/dword~) menu::$14 ← (word~) menu::$13 / (word/signed word/dword/signed dword) 1024
  (word/dword~) menu::$15 ← (word/signed dword/dword~) menu::$11 | (word/signed dword/dword~) menu::$14
  (byte~) menu::$16 ← ((byte)) (word/dword~) menu::$15
  *((byte*) VIC_MEMORY#0) ← (byte~) menu::$16
  (byte*) menu::c#0 ← (byte*) COLS#0
  to:menu::@1
menu::@1: scope:[menu]  from menu menu::@1
  (byte*) print_char_cursor#45 ← phi( menu/(byte*) print_char_cursor#49 menu::@1/(byte*) print_char_cursor#45 )
  (byte*) print_line_cursor#42 ← phi( menu/(byte*) print_line_cursor#48 menu::@1/(byte*) print_line_cursor#42 )
  (byte*) print_screen#24 ← phi( menu/(byte*) print_screen#29 menu::@1/(byte*) print_screen#24 )
  (byte*) menu::c#2 ← phi( menu/(byte*) menu::c#0 menu::@1/(byte*) menu::c#1 )
  *((byte*) menu::c#2) ← (byte) LIGHT_GREEN#0
  (byte*) menu::c#1 ← ++ (byte*) menu::c#2
  (byte*~) menu::$17 ← (byte*) COLS#0 + (word/signed word/dword/signed dword) 1000
  (boolean~) menu::$18 ← (byte*) menu::c#1 != (byte*~) menu::$17
  if((boolean~) menu::$18) goto menu::@1
  to:menu::@6
menu::@6: scope:[menu]  from menu::@1
  (byte*) print_char_cursor#37 ← phi( menu::@1/(byte*) print_char_cursor#45 )
  (byte*) print_line_cursor#35 ← phi( menu::@1/(byte*) print_line_cursor#42 )
  (byte*) print_screen#19 ← phi( menu::@1/(byte*) print_screen#24 )
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) print_set_screen::screen#0 ← (byte*) MENU_SCREEN#0
  call print_set_screen param-assignment
  to:menu::@12
menu::@12: scope:[menu]  from menu::@6
  (byte*) print_char_cursor#26 ← phi( menu::@6/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#25 ← phi( menu::@6/(byte*) print_line_cursor#8 )
  (byte*) print_screen#14 ← phi( menu::@6/(byte*) print_screen#2 )
  (byte*) print_screen#5 ← (byte*) print_screen#14
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#25
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#26
  call print_cls param-assignment
  to:menu::@13
menu::@13: scope:[menu]  from menu::@12
  (byte*) print_screen#30 ← phi( menu::@12/(byte*) print_screen#5 )
  (byte*) print_char_cursor#27 ← phi( menu::@12/(byte*) print_char_cursor#7 )
  (byte*) print_line_cursor#26 ← phi( menu::@12/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#26
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#27
  (byte*) print_str_lines::str#1 ← (byte[]) MENU_TEXT#0
  call print_str_lines param-assignment
  to:menu::@14
menu::@14: scope:[menu]  from menu::@13
  (byte*) print_screen#25 ← phi( menu::@13/(byte*) print_screen#30 )
  (byte*) print_line_cursor#27 ← phi( menu::@13/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#28 ← phi( menu::@13/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#28
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#27
  to:menu::@2
menu::@2: scope:[menu]  from menu::@14 menu::@5
  (byte*) print_char_cursor#39 ← phi( menu::@14/(byte*) print_char_cursor#14 menu::@5/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#37 ← phi( menu::@14/(byte*) print_line_cursor#13 menu::@5/(byte*) print_line_cursor#43 )
  (byte*) print_screen#21 ← phi( menu::@14/(byte*) print_screen#25 menu::@5/(byte*) print_screen#26 )
  if(true) goto menu::@3
  to:menu::@return
menu::@3: scope:[menu]  from menu::@2
  (byte*) print_char_cursor#53 ← phi( menu::@2/(byte*) print_char_cursor#39 )
  (byte*) print_line_cursor#53 ← phi( menu::@2/(byte*) print_line_cursor#37 )
  (byte*) print_screen#34 ← phi( menu::@2/(byte*) print_screen#21 )
  (byte) keyboard_key_pressed::key#0 ← (byte) KEY_C#0
  call keyboard_key_pressed param-assignment
  (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#1
  to:menu::@15
menu::@15: scope:[menu]  from menu::@3
  (byte*) print_char_cursor#50 ← phi( menu::@3/(byte*) print_char_cursor#53 )
  (byte*) print_line_cursor#49 ← phi( menu::@3/(byte*) print_line_cursor#53 )
  (byte*) print_screen#31 ← phi( menu::@3/(byte*) print_screen#34 )
  (byte) keyboard_key_pressed::return#5 ← phi( menu::@3/(byte) keyboard_key_pressed::return#2 )
  (byte~) menu::$22 ← (byte) keyboard_key_pressed::return#5
  (boolean~) menu::$23 ← (byte~) menu::$22 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) menu::$24 ← ! (boolean~) menu::$23
  if((boolean~) menu::$24) goto menu::@5
  to:menu::@9
menu::@5: scope:[menu]  from menu::@15
  (byte*) print_char_cursor#46 ← phi( menu::@15/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#43 ← phi( menu::@15/(byte*) print_line_cursor#49 )
  (byte*) print_screen#26 ← phi( menu::@15/(byte*) print_screen#31 )
  (byte*~) menu::$26 ← (byte*) MENU_SCREEN#0 + (word/signed word/dword/signed dword) 999
  (byte*) menu::last#0 ← (byte*~) menu::$26
  *((byte*) menu::last#0) ← ++ *((byte*) menu::last#0)
  to:menu::@2
menu::@9: scope:[menu]  from menu::@15
  (byte*) print_char_cursor#47 ← phi( menu::@15/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#44 ← phi( menu::@15/(byte*) print_line_cursor#49 )
  (byte*) print_screen#27 ← phi( menu::@15/(byte*) print_screen#31 )
  call mode_twoplanebitmap param-assignment
  to:menu::@16
menu::@16: scope:[menu]  from menu::@9
  (byte*) print_char_cursor#38 ← phi( menu::@9/(byte*) print_char_cursor#47 )
  (byte*) print_line_cursor#36 ← phi( menu::@9/(byte*) print_line_cursor#44 )
  (byte*) print_screen#20 ← phi( menu::@9/(byte*) print_screen#27 )
  to:menu::@return
menu::@return: scope:[menu]  from menu::@16 menu::@2
  (byte*) print_char_cursor#29 ← phi( menu::@16/(byte*) print_char_cursor#38 menu::@2/(byte*) print_char_cursor#39 )
  (byte*) print_line_cursor#28 ← phi( menu::@16/(byte*) print_line_cursor#36 menu::@2/(byte*) print_line_cursor#37 )
  (byte*) print_screen#15 ← phi( menu::@16/(byte*) print_screen#20 menu::@2/(byte*) print_screen#21 )
  (byte*) print_screen#6 ← (byte*) print_screen#15
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#28
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#29
  return 
  to:@return
@20: scope:[]  from @19
  (byte*) print_char_cursor#48 ← phi( @19/(byte*) print_char_cursor#51 )
  (byte*) print_line_cursor#45 ← phi( @19/(byte*) print_line_cursor#50 )
  (byte*) print_screen#28 ← phi( @19/(byte*) print_screen#32 )
  (byte*) TWOPLANE_PLANEA#0 ← ((byte*)) (word/signed word/dword/signed dword) 16384
  (byte*) TWOPLANE_PLANEB#0 ← ((byte*)) (word/signed word/dword/signed dword) 24576
  to:@21
mode_twoplanebitmap: scope:[mode_twoplanebitmap]  from menu::@9
  (byte~) mode_twoplanebitmap::$0 ← (byte) DTV_CONTROL_HIGHCOLOR_ON#0 | (byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0
  *((byte*) DTV_CONTROL#0) ← (byte~) mode_twoplanebitmap::$0
  (byte~) mode_twoplanebitmap::$1 ← (byte) VIC_ECM#0 | (byte) VIC_BMM#0
  (byte~) mode_twoplanebitmap::$2 ← (byte~) mode_twoplanebitmap::$1 | (byte) VIC_DEN#0
  (byte~) mode_twoplanebitmap::$3 ← (byte~) mode_twoplanebitmap::$2 | (byte) VIC_RSEL#0
  (byte/word/dword~) mode_twoplanebitmap::$4 ← (byte~) mode_twoplanebitmap::$3 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) mode_twoplanebitmap::$4
  *((byte*) VIC_CONTROL2#0) ← (byte) VIC_CSEL#0
  (byte~) mode_twoplanebitmap::$5 ← < (byte*) TWOPLANE_PLANEA#0
  *((byte*) DTV_PLANEA_START_LO#0) ← (byte~) mode_twoplanebitmap::$5
  (byte~) mode_twoplanebitmap::$6 ← > (byte*) TWOPLANE_PLANEA#0
  *((byte*) DTV_PLANEA_START_MI#0) ← (byte~) mode_twoplanebitmap::$6
  *((byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) mode_twoplanebitmap::$7 ← < (byte*) TWOPLANE_PLANEB#0
  *((byte*) DTV_PLANEB_START_LO#0) ← (byte~) mode_twoplanebitmap::$7
  (byte~) mode_twoplanebitmap::$8 ← > (byte*) TWOPLANE_PLANEB#0
  *((byte*) DTV_PLANEB_START_MI#0) ← (byte~) mode_twoplanebitmap::$8
  *((byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BGCOL1#0) ← (byte) GREEN#0
  *((byte*) BGCOL2#0) ← (byte) BLUE#0
  (byte*) mode_twoplanebitmap::c#0 ← (byte*) COLS#0
  to:mode_twoplanebitmap::@1
mode_twoplanebitmap::@1: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap mode_twoplanebitmap::@1
  (byte*) mode_twoplanebitmap::c#2 ← phi( mode_twoplanebitmap/(byte*) mode_twoplanebitmap::c#0 mode_twoplanebitmap::@1/(byte*) mode_twoplanebitmap::c#1 )
  (byte~) mode_twoplanebitmap::$9 ← < (byte*) mode_twoplanebitmap::c#2
  *((byte*) mode_twoplanebitmap::c#2) ← (byte~) mode_twoplanebitmap::$9
  (byte*) mode_twoplanebitmap::c#1 ← ++ (byte*) mode_twoplanebitmap::c#2
  (byte*~) mode_twoplanebitmap::$10 ← (byte*) COLS#0 + (word/signed word/dword/signed dword) 1000
  (boolean~) mode_twoplanebitmap::$11 ← (byte*) mode_twoplanebitmap::c#1 != (byte*~) mode_twoplanebitmap::$10
  if((boolean~) mode_twoplanebitmap::$11) goto mode_twoplanebitmap::@1
  to:mode_twoplanebitmap::@12
mode_twoplanebitmap::@12: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@1
  (byte*) mode_twoplanebitmap::gfxa#0 ← (byte*) TWOPLANE_PLANEA#0
  (byte) mode_twoplanebitmap::ay#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@2
mode_twoplanebitmap::@2: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@12 mode_twoplanebitmap::@15
  (byte*) mode_twoplanebitmap::gfxa#6 ← phi( mode_twoplanebitmap::@12/(byte*) mode_twoplanebitmap::gfxa#0 mode_twoplanebitmap::@15/(byte*) mode_twoplanebitmap::gfxa#8 )
  (byte) mode_twoplanebitmap::ay#4 ← phi( mode_twoplanebitmap::@12/(byte) mode_twoplanebitmap::ay#0 mode_twoplanebitmap::@15/(byte) mode_twoplanebitmap::ay#1 )
  (byte) mode_twoplanebitmap::ax#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@3
mode_twoplanebitmap::@3: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@2 mode_twoplanebitmap::@5
  (byte) mode_twoplanebitmap::ax#5 ← phi( mode_twoplanebitmap::@2/(byte) mode_twoplanebitmap::ax#0 mode_twoplanebitmap::@5/(byte) mode_twoplanebitmap::ax#1 )
  (byte*) mode_twoplanebitmap::gfxa#5 ← phi( mode_twoplanebitmap::@2/(byte*) mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::@5/(byte*) mode_twoplanebitmap::gfxa#7 )
  (byte) mode_twoplanebitmap::ay#2 ← phi( mode_twoplanebitmap::@2/(byte) mode_twoplanebitmap::ay#4 mode_twoplanebitmap::@5/(byte) mode_twoplanebitmap::ay#5 )
  (byte~) mode_twoplanebitmap::$12 ← (byte) mode_twoplanebitmap::ay#2 & (byte/signed byte/word/signed word/dword/signed dword) 4
  (boolean~) mode_twoplanebitmap::$13 ← (byte~) mode_twoplanebitmap::$12 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mode_twoplanebitmap::$14 ← ! (boolean~) mode_twoplanebitmap::$13
  if((boolean~) mode_twoplanebitmap::$14) goto mode_twoplanebitmap::@4
  to:mode_twoplanebitmap::@13
mode_twoplanebitmap::@4: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@3
  (byte) mode_twoplanebitmap::ay#7 ← phi( mode_twoplanebitmap::@3/(byte) mode_twoplanebitmap::ay#2 )
  (byte) mode_twoplanebitmap::ax#4 ← phi( mode_twoplanebitmap::@3/(byte) mode_twoplanebitmap::ax#5 )
  (byte*) mode_twoplanebitmap::gfxa#3 ← phi( mode_twoplanebitmap::@3/(byte*) mode_twoplanebitmap::gfxa#5 )
  *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) 255
  (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3
  to:mode_twoplanebitmap::@5
mode_twoplanebitmap::@13: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@3
  (byte) mode_twoplanebitmap::ay#6 ← phi( mode_twoplanebitmap::@3/(byte) mode_twoplanebitmap::ay#2 )
  (byte) mode_twoplanebitmap::ax#3 ← phi( mode_twoplanebitmap::@3/(byte) mode_twoplanebitmap::ax#5 )
  (byte*) mode_twoplanebitmap::gfxa#4 ← phi( mode_twoplanebitmap::@3/(byte*) mode_twoplanebitmap::gfxa#5 )
  *((byte*) mode_twoplanebitmap::gfxa#4) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#4
  to:mode_twoplanebitmap::@5
mode_twoplanebitmap::@5: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@13 mode_twoplanebitmap::@4
  (byte*) mode_twoplanebitmap::gfxa#7 ← phi( mode_twoplanebitmap::@13/(byte*) mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::@4/(byte*) mode_twoplanebitmap::gfxa#1 )
  (byte) mode_twoplanebitmap::ay#5 ← phi( mode_twoplanebitmap::@13/(byte) mode_twoplanebitmap::ay#6 mode_twoplanebitmap::@4/(byte) mode_twoplanebitmap::ay#7 )
  (byte) mode_twoplanebitmap::ax#2 ← phi( mode_twoplanebitmap::@13/(byte) mode_twoplanebitmap::ax#3 mode_twoplanebitmap::@4/(byte) mode_twoplanebitmap::ax#4 )
  (byte) mode_twoplanebitmap::ax#1 ← ++ (byte) mode_twoplanebitmap::ax#2
  (boolean~) mode_twoplanebitmap::$15 ← (byte) mode_twoplanebitmap::ax#1 != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((boolean~) mode_twoplanebitmap::$15) goto mode_twoplanebitmap::@3
  to:mode_twoplanebitmap::@15
mode_twoplanebitmap::@15: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@5
  (byte*) mode_twoplanebitmap::gfxa#8 ← phi( mode_twoplanebitmap::@5/(byte*) mode_twoplanebitmap::gfxa#7 )
  (byte) mode_twoplanebitmap::ay#3 ← phi( mode_twoplanebitmap::@5/(byte) mode_twoplanebitmap::ay#5 )
  (byte) mode_twoplanebitmap::ay#1 ← ++ (byte) mode_twoplanebitmap::ay#3
  (boolean~) mode_twoplanebitmap::$16 ← (byte) mode_twoplanebitmap::ay#1 != (byte/word/signed word/dword/signed dword) 200
  if((boolean~) mode_twoplanebitmap::$16) goto mode_twoplanebitmap::@2
  to:mode_twoplanebitmap::@16
mode_twoplanebitmap::@16: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@15
  (byte*) mode_twoplanebitmap::gfxb#0 ← (byte*) TWOPLANE_PLANEB#0
  (byte) mode_twoplanebitmap::by#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@6
mode_twoplanebitmap::@6: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@16 mode_twoplanebitmap::@17
  (byte) mode_twoplanebitmap::by#4 ← phi( mode_twoplanebitmap::@16/(byte) mode_twoplanebitmap::by#0 mode_twoplanebitmap::@17/(byte) mode_twoplanebitmap::by#1 )
  (byte*) mode_twoplanebitmap::gfxb#3 ← phi( mode_twoplanebitmap::@16/(byte*) mode_twoplanebitmap::gfxb#0 mode_twoplanebitmap::@17/(byte*) mode_twoplanebitmap::gfxb#4 )
  (byte) mode_twoplanebitmap::bx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mode_twoplanebitmap::@7
mode_twoplanebitmap::@7: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@6 mode_twoplanebitmap::@7
  (byte) mode_twoplanebitmap::by#3 ← phi( mode_twoplanebitmap::@6/(byte) mode_twoplanebitmap::by#4 mode_twoplanebitmap::@7/(byte) mode_twoplanebitmap::by#3 )
  (byte) mode_twoplanebitmap::bx#2 ← phi( mode_twoplanebitmap::@6/(byte) mode_twoplanebitmap::bx#0 mode_twoplanebitmap::@7/(byte) mode_twoplanebitmap::bx#1 )
  (byte*) mode_twoplanebitmap::gfxb#2 ← phi( mode_twoplanebitmap::@6/(byte*) mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::@7/(byte*) mode_twoplanebitmap::gfxb#1 )
  *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2
  (byte) mode_twoplanebitmap::bx#1 ← ++ (byte) mode_twoplanebitmap::bx#2
  (boolean~) mode_twoplanebitmap::$17 ← (byte) mode_twoplanebitmap::bx#1 != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((boolean~) mode_twoplanebitmap::$17) goto mode_twoplanebitmap::@7
  to:mode_twoplanebitmap::@17
mode_twoplanebitmap::@17: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@7
  (byte*) mode_twoplanebitmap::gfxb#4 ← phi( mode_twoplanebitmap::@7/(byte*) mode_twoplanebitmap::gfxb#1 )
  (byte) mode_twoplanebitmap::by#2 ← phi( mode_twoplanebitmap::@7/(byte) mode_twoplanebitmap::by#3 )
  (byte) mode_twoplanebitmap::by#1 ← ++ (byte) mode_twoplanebitmap::by#2
  (boolean~) mode_twoplanebitmap::$18 ← (byte) mode_twoplanebitmap::by#1 != (byte/word/signed word/dword/signed dword) 200
  if((boolean~) mode_twoplanebitmap::$18) goto mode_twoplanebitmap::@6
  to:mode_twoplanebitmap::@8
mode_twoplanebitmap::@8: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@11 mode_twoplanebitmap::@17
  if(true) goto mode_twoplanebitmap::@9
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@9: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@8
  (byte) keyboard_key_pressed::key#1 ← (byte) KEY_SPACE#0
  call keyboard_key_pressed param-assignment
  (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#1
  to:mode_twoplanebitmap::@24
mode_twoplanebitmap::@24: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@9
  (byte) keyboard_key_pressed::return#6 ← phi( mode_twoplanebitmap::@9/(byte) keyboard_key_pressed::return#3 )
  (byte~) mode_twoplanebitmap::$19 ← (byte) keyboard_key_pressed::return#6
  (boolean~) mode_twoplanebitmap::$20 ← (byte~) mode_twoplanebitmap::$19 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) mode_twoplanebitmap::$21 ← ! (boolean~) mode_twoplanebitmap::$20
  if((boolean~) mode_twoplanebitmap::$21) goto mode_twoplanebitmap::@11
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@11: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@24
  to:mode_twoplanebitmap::@8
mode_twoplanebitmap::@return: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@24 mode_twoplanebitmap::@8
  return 
  to:@return
@21: scope:[]  from @20
  (byte*) print_char_cursor#40 ← phi( @20/(byte*) print_char_cursor#48 )
  (byte*) print_line_cursor#38 ← phi( @20/(byte*) print_line_cursor#45 )
  (byte*) print_screen#22 ← phi( @20/(byte*) print_screen#28 )
  call main param-assignment
  to:@22
@22: scope:[]  from @21
  (byte*) print_char_cursor#30 ← phi( @21/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#29 ← phi( @21/(byte*) print_line_cursor#10 )
  (byte*) print_screen#16 ← phi( @21/(byte*) print_screen#4 )
  (byte*) print_screen#7 ← (byte*) print_screen#16
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#29
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#30
  to:@end
@end: scope:[]  from @22

SYMBOL TABLE SSA
(string~) $0
(string~) $1
(string~) $10
(string~) $11
(string~) $12
(string~) $13
(string~) $14
(string~) $15
(string~) $16
(string~) $17
(string~) $18
(string~) $19
(string~) $2
(string~) $20
(const string) $21 = (string) "C64DTV Graphics Modes            EMBLHCC@"
(const string) $22 = (string) "                                 CCMIIHO@"
(const string) $23 = (string) "                                 MMMNCUL@"
(const string) $24 = (string) "----------------------------------------@"
(const string) $25 = (string) "1. Standard Char             (V) 0000000@"
(const string) $26 = (string) "2. Extended Color Char       (V) 1000000@"
(const string) $27 = (string) "3. Multicolor Char           (V) 0100000@"
(const string) $28 = (string) "4. Standard Bitmap           (V) 0010000@"
(const string) $29 = (string) "5. Multicolor Bitmap         (V) 0110000@"
(string~) $3
(const string) $30 = (string) "6. High Color Standard Char  (H) 0000100@"
(const string) $31 = (string) "7. High Extended Color Char  (H) 1000100@"
(const string) $32 = (string) "8. High Multicolor Char      (H) 0100100@"
(const string) $33 = (string) "9. High Multicolor Bitmap    (H) 0110100@"
(const string) $34 = (string) "a. Sixs Fred                 (D) 1111100@"
(const string) $35 = (string) "b. Sixs Fred 2               (D) 1111000@"
(const string) $36 = (string) "c. Two Plane Bitmap          (D) 1011100@"
(const string) $37 = (string) "d. Two Plane Multicol Bitmap (D) 1111100@"
(const string) $38 = (string) "e. 8bpp Pixel Cell           (D) 1101110@"
(const string) $39 = (string) "f. Chunky 8bpp Bitmap        (D) 1101111@"
(string~) $4
(const string) $40 = (string) "----------------------------------------@"
(const string) $41 = (string) "    (V) vicII (H) vicII+hicol (D) c64dtv@"
(const string) $42 = (string) "@"
(string~) $5
(string~) $6
(string~) $7
(string~) $8
(string~) $9
(label) @14
(label) @19
(label) @20
(label) @21
(label) @22
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL1
(byte*) BGCOL1#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte*) COLS
(byte*) COLS#0
(byte*) DTV_CONTROL
(byte*) DTV_CONTROL#0
(byte) DTV_CONTROL_HIGHCOLOR_ON
(byte) DTV_CONTROL_HIGHCOLOR_ON#0
(byte) DTV_CONTROL_LINEAR_ADDRESSING_ON
(byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0
(byte*) DTV_FEATURE
(byte*) DTV_FEATURE#0
(byte) DTV_FEATURE_ENABLE
(byte) DTV_FEATURE_ENABLE#0
(byte*) DTV_GRAPHICS_VIC_BANK
(byte*) DTV_GRAPHICS_VIC_BANK#0
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_HI#0
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_MODULO_LO#0
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_HI#0
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_LO#0
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_START_MI#0
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEA_STEP#0
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_HI#0
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_MODULO_LO#0
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_HI#0
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_LO#0
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_START_MI#0
(byte*) DTV_PLANEB_STEP
(byte*) DTV_PLANEB_STEP#0
(byte) GREEN
(byte) GREEN#0
(byte) KEY_C
(byte) KEY_C#0
(byte) KEY_SPACE
(byte) KEY_SPACE#0
(byte) LIGHT_GREEN
(byte) LIGHT_GREEN#0
(byte*) MENU_CHARSET
(byte*) MENU_CHARSET#0
(byte*) MENU_SCREEN
(byte*) MENU_SCREEN#0
(byte[]) MENU_TEXT
(byte[]) MENU_TEXT#0
(byte*) TWOPLANE_PLANEA
(byte*) TWOPLANE_PLANEA#0
(byte*) TWOPLANE_PLANEB
(byte*) TWOPLANE_PLANEB#0
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$0
(byte~) keyboard_key_pressed::$1
(byte~) keyboard_key_pressed::$2
(byte~) keyboard_key_pressed::$3
(label) keyboard_key_pressed::@2
(label) keyboard_key_pressed::@return
(byte) keyboard_key_pressed::colidx
(byte) keyboard_key_pressed::colidx#0
(byte) keyboard_key_pressed::colidx#1
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::key#0
(byte) keyboard_key_pressed::key#1
(byte) keyboard_key_pressed::key#2
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0
(byte) keyboard_key_pressed::return#1
(byte) keyboard_key_pressed::return#2
(byte) keyboard_key_pressed::return#3
(byte) keyboard_key_pressed::return#4
(byte) keyboard_key_pressed::return#5
(byte) keyboard_key_pressed::return#6
(byte) keyboard_key_pressed::rowidx
(byte) keyboard_key_pressed::rowidx#0
(byte[]) keyboard_matrix_col_bitmask
(byte[]) keyboard_matrix_col_bitmask#0
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0
(byte) keyboard_matrix_read::return#1
(byte) keyboard_matrix_read::return#2
(byte) keyboard_matrix_read::return#3
(byte) keyboard_matrix_read::return#4
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::row_pressed_bits#0
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0
(byte) keyboard_matrix_read::rowid#1
(byte[8]) keyboard_matrix_row_bitmask
(byte[8]) keyboard_matrix_row_bitmask#0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@return
(void()) menu()
(dword~) menu::$0
(dword~) menu::$1
(word~) menu::$10
(word/signed dword/dword~) menu::$11
(word~) menu::$12
(word~) menu::$13
(word/signed dword/dword~) menu::$14
(word/dword~) menu::$15
(byte~) menu::$16
(byte*~) menu::$17
(boolean~) menu::$18
(byte~) menu::$2
(byte~) menu::$22
(boolean~) menu::$23
(boolean~) menu::$24
(byte*~) menu::$26
(word~) menu::$3
(word/signed dword/dword~) menu::$4
(byte~) menu::$5
(byte/word/dword~) menu::$6
(byte~) menu::$7
(byte/word/dword~) menu::$8
(word~) menu::$9
(label) menu::@1
(label) menu::@12
(label) menu::@13
(label) menu::@14
(label) menu::@15
(label) menu::@16
(label) menu::@2
(label) menu::@3
(label) menu::@5
(label) menu::@6
(label) menu::@9
(label) menu::@return
(byte*) menu::c
(byte*) menu::c#0
(byte*) menu::c#1
(byte*) menu::c#2
(byte*) menu::last
(byte*) menu::last#0
(void()) mode_twoplanebitmap()
(byte~) mode_twoplanebitmap::$0
(byte~) mode_twoplanebitmap::$1
(byte*~) mode_twoplanebitmap::$10
(boolean~) mode_twoplanebitmap::$11
(byte~) mode_twoplanebitmap::$12
(boolean~) mode_twoplanebitmap::$13
(boolean~) mode_twoplanebitmap::$14
(boolean~) mode_twoplanebitmap::$15
(boolean~) mode_twoplanebitmap::$16
(boolean~) mode_twoplanebitmap::$17
(boolean~) mode_twoplanebitmap::$18
(byte~) mode_twoplanebitmap::$19
(byte~) mode_twoplanebitmap::$2
(boolean~) mode_twoplanebitmap::$20
(boolean~) mode_twoplanebitmap::$21
(byte~) mode_twoplanebitmap::$3
(byte/word/dword~) mode_twoplanebitmap::$4
(byte~) mode_twoplanebitmap::$5
(byte~) mode_twoplanebitmap::$6
(byte~) mode_twoplanebitmap::$7
(byte~) mode_twoplanebitmap::$8
(byte~) mode_twoplanebitmap::$9
(label) mode_twoplanebitmap::@1
(label) mode_twoplanebitmap::@11
(label) mode_twoplanebitmap::@12
(label) mode_twoplanebitmap::@13
(label) mode_twoplanebitmap::@15
(label) mode_twoplanebitmap::@16
(label) mode_twoplanebitmap::@17
(label) mode_twoplanebitmap::@2
(label) mode_twoplanebitmap::@24
(label) mode_twoplanebitmap::@3
(label) mode_twoplanebitmap::@4
(label) mode_twoplanebitmap::@5
(label) mode_twoplanebitmap::@6
(label) mode_twoplanebitmap::@7
(label) mode_twoplanebitmap::@8
(label) mode_twoplanebitmap::@9
(label) mode_twoplanebitmap::@return
(byte) mode_twoplanebitmap::ax
(byte) mode_twoplanebitmap::ax#0
(byte) mode_twoplanebitmap::ax#1
(byte) mode_twoplanebitmap::ax#2
(byte) mode_twoplanebitmap::ax#3
(byte) mode_twoplanebitmap::ax#4
(byte) mode_twoplanebitmap::ax#5
(byte) mode_twoplanebitmap::ay
(byte) mode_twoplanebitmap::ay#0
(byte) mode_twoplanebitmap::ay#1
(byte) mode_twoplanebitmap::ay#2
(byte) mode_twoplanebitmap::ay#3
(byte) mode_twoplanebitmap::ay#4
(byte) mode_twoplanebitmap::ay#5
(byte) mode_twoplanebitmap::ay#6
(byte) mode_twoplanebitmap::ay#7
(byte) mode_twoplanebitmap::bx
(byte) mode_twoplanebitmap::bx#0
(byte) mode_twoplanebitmap::bx#1
(byte) mode_twoplanebitmap::bx#2
(byte) mode_twoplanebitmap::by
(byte) mode_twoplanebitmap::by#0
(byte) mode_twoplanebitmap::by#1
(byte) mode_twoplanebitmap::by#2
(byte) mode_twoplanebitmap::by#3
(byte) mode_twoplanebitmap::by#4
(byte*) mode_twoplanebitmap::c
(byte*) mode_twoplanebitmap::c#0
(byte*) mode_twoplanebitmap::c#1
(byte*) mode_twoplanebitmap::c#2
(byte*) mode_twoplanebitmap::gfxa
(byte*) mode_twoplanebitmap::gfxa#0
(byte*) mode_twoplanebitmap::gfxa#1
(byte*) mode_twoplanebitmap::gfxa#2
(byte*) mode_twoplanebitmap::gfxa#3
(byte*) mode_twoplanebitmap::gfxa#4
(byte*) mode_twoplanebitmap::gfxa#5
(byte*) mode_twoplanebitmap::gfxa#6
(byte*) mode_twoplanebitmap::gfxa#7
(byte*) mode_twoplanebitmap::gfxa#8
(byte*) mode_twoplanebitmap::gfxb
(byte*) mode_twoplanebitmap::gfxb#0
(byte*) mode_twoplanebitmap::gfxb#1
(byte*) mode_twoplanebitmap::gfxb#2
(byte*) mode_twoplanebitmap::gfxb#3
(byte*) mode_twoplanebitmap::gfxb#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#11
(byte*) print_screen#12
(byte*) print_screen#13
(byte*) print_screen#14
(byte*) print_screen#15
(byte*) print_screen#16
(byte*) print_screen#17
(byte*) print_screen#18
(byte*) print_screen#19
(byte*) print_screen#2
(byte*) print_screen#20
(byte*) print_screen#21
(byte*) print_screen#22
(byte*) print_screen#23
(byte*) print_screen#24
(byte*) print_screen#25
(byte*) print_screen#26
(byte*) print_screen#27
(byte*) print_screen#28
(byte*) print_screen#29
(byte*) print_screen#3
(byte*) print_screen#30
(byte*) print_screen#31
(byte*) print_screen#32
(byte*) print_screen#33
(byte*) print_screen#34
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#0
(byte*) print_set_screen::screen#1
(void()) print_str_lines((byte*) print_str_lines::str)
(boolean~) print_str_lines::$0
(boolean~) print_str_lines::$1
(boolean~) print_str_lines::$2
(boolean~) print_str_lines::$3
(label) print_str_lines::@1
(label) print_str_lines::@11
(label) print_str_lines::@2
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@8
(label) print_str_lines::@9
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0
(byte) print_str_lines::ch#1
(byte) print_str_lines::ch#2
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0
(byte*) print_str_lines::str#1
(byte*) print_str_lines::str#2
(byte*) print_str_lines::str#3
(byte*) print_str_lines::str#4
(byte*) print_str_lines::str#5
(byte*) print_str_lines::str#6
(byte*) print_str_lines::str#7
(byte*) print_str_lines::str#8
(byte*) print_str_lines::str#9

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) mode_twoplanebitmap::@11
Succesful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (boolean~) print_str_lines::$2 ← (byte) print_str_lines::ch#0 == (byte) '@' from (boolean~) print_str_lines::$1 ← (byte) print_str_lines::ch#0 != (byte) '@'
Inversing boolean not (boolean~) menu::$24 ← (byte~) menu::$22 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) menu::$23 ← (byte~) menu::$22 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) mode_twoplanebitmap::$14 ← (byte~) mode_twoplanebitmap::$12 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) mode_twoplanebitmap::$13 ← (byte~) mode_twoplanebitmap::$12 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) mode_twoplanebitmap::$21 ← (byte~) mode_twoplanebitmap::$19 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) mode_twoplanebitmap::$20 ← (byte~) mode_twoplanebitmap::$19 != (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: print_str_lines::str#4 print_str_lines::str#1
Not aliassing across scopes: print_char_cursor#41 print_char_cursor#13
Not aliassing across scopes: print_line_cursor#39 print_line_cursor#12
Not aliassing across scopes: print_line_cursor#16 print_line_cursor#4
Not aliassing across scopes: print_char_cursor#18 print_char_cursor#5
Not aliassing across scopes: print_line_cursor#32 print_line_cursor#30
Not aliassing across scopes: print_char_cursor#34 print_char_cursor#32
Not aliassing across scopes: print_screen#8 print_screen#5
Not aliassing across scopes: print_cls::sc#0 print_screen#8
Not aliassing across scopes: print_set_screen::screen#1 print_set_screen::screen#0
Not aliassing across scopes: print_screen#1 print_set_screen::screen#1
Not aliassing across scopes: keyboard_matrix_read::rowid#1 keyboard_matrix_read::rowid#0
Not aliassing across scopes: keyboard_key_pressed::key#2 keyboard_key_pressed::key#0
Not aliassing across scopes: keyboard_matrix_read::rowid#0 keyboard_key_pressed::rowidx#0
Not aliassing across scopes: keyboard_matrix_read::return#2 keyboard_matrix_read::return#1
Not aliassing across scopes: keyboard_key_pressed::$2 keyboard_matrix_read::return#4
Not aliassing across scopes: print_screen#23 print_screen#22
Not aliassing across scopes: print_line_cursor#41 print_line_cursor#38
Not aliassing across scopes: print_char_cursor#44 print_char_cursor#40
Not aliassing across scopes: print_screen#12 print_screen#6
Not aliassing across scopes: print_line_cursor#23 print_line_cursor#14
Not aliassing across scopes: print_char_cursor#24 print_char_cursor#15
Not aliassing across scopes: print_screen#29 print_screen#17
Not aliassing across scopes: print_line_cursor#48 print_line_cursor#33
Not aliassing across scopes: print_char_cursor#49 print_char_cursor#35
Not aliassing across scopes: menu::c#0 COLS#0
Not aliassing across scopes: print_set_screen::screen#0 MENU_SCREEN#0
Not aliassing across scopes: print_screen#14 print_screen#2
Not aliassing across scopes: print_line_cursor#25 print_line_cursor#8
Not aliassing across scopes: print_char_cursor#26 print_char_cursor#9
Not aliassing across scopes: print_line_cursor#26 print_line_cursor#6
Not aliassing across scopes: print_char_cursor#27 print_char_cursor#7
Not aliassing across scopes: print_str_lines::str#1 MENU_TEXT#0
Not aliassing across scopes: print_char_cursor#28 print_char_cursor#3
Not aliassing across scopes: print_line_cursor#27 print_line_cursor#2
Not aliassing across scopes: keyboard_key_pressed::key#0 KEY_C#0
Not aliassing across scopes: keyboard_key_pressed::return#2 keyboard_key_pressed::return#1
Not aliassing across scopes: menu::$22 keyboard_key_pressed::return#5
Not aliassing across scopes: mode_twoplanebitmap::c#0 COLS#0
Not aliassing across scopes: mode_twoplanebitmap::gfxa#0 TWOPLANE_PLANEA#0
Not aliassing across scopes: mode_twoplanebitmap::gfxb#0 TWOPLANE_PLANEB#0
Not aliassing across scopes: keyboard_key_pressed::key#1 KEY_SPACE#0
Not aliassing across scopes: keyboard_key_pressed::return#3 keyboard_key_pressed::return#1
Not aliassing across scopes: mode_twoplanebitmap::$19 keyboard_key_pressed::return#6
Not aliassing across scopes: print_screen#16 print_screen#4
Not aliassing across scopes: print_line_cursor#29 print_line_cursor#10
Not aliassing across scopes: print_char_cursor#30 print_char_cursor#11
Alias (byte*) print_screen#0 = (byte*) print_line_cursor#0 (byte*) print_char_cursor#0 (byte*) print_screen#33 (byte*) print_line_cursor#52 (byte*) print_char_cursor#52 (byte*) print_screen#32 (byte*) print_line_cursor#50 (byte*) print_char_cursor#51 (byte*) print_screen#28 (byte*) print_line_cursor#45 (byte*) print_char_cursor#48 (byte*) print_screen#22 (byte*) print_line_cursor#38 (byte*) print_char_cursor#40 
Alias (byte*) print_str_lines::str#2 = (byte*) print_str_lines::str#6 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#42 (byte*) print_char_cursor#33 (byte*) print_char_cursor#3 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#51 (byte*) print_line_cursor#31 (byte*) print_line_cursor#2 
Alias (byte) print_str_lines::ch#0 = (byte) print_str_lines::ch#2 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#31 
Alias (byte*) print_str_lines::str#0 = (byte*) print_str_lines::str#8 
Alias (byte*) print_line_cursor#46 = (byte*) print_line_cursor#47 
Alias (byte*) print_line_cursor#30 = (byte*) print_line_cursor#40 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#43 
Alias (byte*) print_str_lines::str#5 = (byte*) print_str_lines::str#9 (byte*) print_str_lines::str#7 
Alias (byte*) print_line_cursor#1 = (byte*) print_line_cursor#16 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#2 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#3 (byte*~) print_ln::$0 (byte*) print_char_cursor#4 (byte*) print_line_cursor#20 (byte*) print_char_cursor#21 (byte*) print_line_cursor#4 (byte*) print_char_cursor#5 
Alias (byte*) print_line_cursor#21 = (byte*) print_screen#10 (byte*) print_screen#9 (byte*) print_line_cursor#5 (byte*) print_char_cursor#6 (byte*) print_char_cursor#22 (byte*) print_line_cursor#6 (byte*) print_char_cursor#7 
Alias (byte*) print_screen#1 = (byte*) print_line_cursor#7 (byte*) print_char_cursor#8 (byte*) print_screen#11 (byte*) print_line_cursor#22 (byte*) print_char_cursor#23 (byte*) print_screen#2 (byte*) print_line_cursor#8 (byte*) print_char_cursor#9 
Alias (byte) keyboard_matrix_read::return#0 = (byte) keyboard_matrix_read::row_pressed_bits#0 (byte~) keyboard_matrix_read::$0 (byte) keyboard_matrix_read::return#3 (byte) keyboard_matrix_read::return#1 
Alias (byte) keyboard_key_pressed::colidx#0 = (byte~) keyboard_key_pressed::$0 (byte) keyboard_key_pressed::colidx#1 
Alias (byte) keyboard_key_pressed::rowidx#0 = (byte~) keyboard_key_pressed::$1 
Alias (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#4 
Alias (byte) keyboard_key_pressed::return#0 = (byte~) keyboard_key_pressed::$3 (byte) keyboard_key_pressed::return#4 (byte) keyboard_key_pressed::return#1 
Alias (byte*) print_screen#13 = (byte*) print_screen#17 (byte*) print_screen#18 (byte*) print_screen#4 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#33 (byte*) print_line_cursor#34 (byte*) print_line_cursor#24 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#35 (byte*) print_char_cursor#36 (byte*) print_char_cursor#25 
Alias (byte*) print_screen#12 = (byte*) print_screen#3 
Alias (byte*) print_line_cursor#23 = (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#24 
Alias (byte[]) MENU_TEXT#0 = (string~) $20 
Alias (byte*) print_screen#19 = (byte*) print_screen#24 
Alias (byte*) print_line_cursor#35 = (byte*) print_line_cursor#42 
Alias (byte*) print_char_cursor#37 = (byte*) print_char_cursor#45 
Alias (byte*) print_screen#14 = (byte*) print_screen#5 (byte*) print_screen#30 (byte*) print_screen#25 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#25 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#26 
Alias (byte*) print_line_cursor#12 = (byte*) print_line_cursor#26 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#27 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#28 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#27 
Alias (byte*) print_screen#20 = (byte*) print_screen#34 (byte*) print_screen#21 (byte*) print_screen#31 (byte*) print_screen#26 (byte*) print_screen#27 
Alias (byte*) print_line_cursor#36 = (byte*) print_line_cursor#53 (byte*) print_line_cursor#37 (byte*) print_line_cursor#49 (byte*) print_line_cursor#43 (byte*) print_line_cursor#44 
Alias (byte*) print_char_cursor#38 = (byte*) print_char_cursor#53 (byte*) print_char_cursor#39 (byte*) print_char_cursor#50 (byte*) print_char_cursor#46 (byte*) print_char_cursor#47 
Alias (byte) keyboard_key_pressed::return#2 = (byte) keyboard_key_pressed::return#5 
Alias (byte*) menu::last#0 = (byte*~) menu::$26 
Alias (byte*) print_screen#15 = (byte*) print_screen#6 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#28 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#29 
Alias (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#5 (byte*) mode_twoplanebitmap::gfxa#4 
Alias (byte) mode_twoplanebitmap::ax#3 = (byte) mode_twoplanebitmap::ax#4 (byte) mode_twoplanebitmap::ax#5 
Alias (byte) mode_twoplanebitmap::ay#2 = (byte) mode_twoplanebitmap::ay#7 (byte) mode_twoplanebitmap::ay#6 
Alias (byte) mode_twoplanebitmap::ay#3 = (byte) mode_twoplanebitmap::ay#5 
Alias (byte*) mode_twoplanebitmap::gfxa#7 = (byte*) mode_twoplanebitmap::gfxa#8 
Alias (byte) mode_twoplanebitmap::by#2 = (byte) mode_twoplanebitmap::by#3 
Alias (byte*) mode_twoplanebitmap::gfxb#1 = (byte*) mode_twoplanebitmap::gfxb#4 
Alias (byte) keyboard_key_pressed::return#3 = (byte) keyboard_key_pressed::return#6 
Alias (byte*) print_screen#16 = (byte*) print_screen#7 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#29 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#30 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str_lines::str#4 print_str_lines::str#1
Not aliassing across scopes: print_char_cursor#41 print_char_cursor#13
Not aliassing across scopes: print_line_cursor#39 print_line_cursor#12
Not aliassing across scopes: print_line_cursor#1 print_line_cursor#19
Not aliassing across scopes: print_char_cursor#18 print_line_cursor#19
Not aliassing across scopes: print_line_cursor#32 print_line_cursor#30
Not aliassing across scopes: print_char_cursor#34 print_char_cursor#32
Not aliassing across scopes: print_screen#8 print_screen#14
Not aliassing across scopes: print_cls::sc#0 print_screen#8
Not aliassing across scopes: print_set_screen::screen#1 print_set_screen::screen#0
Not aliassing across scopes: print_screen#1 print_set_screen::screen#1
Not aliassing across scopes: keyboard_matrix_read::rowid#1 keyboard_matrix_read::rowid#0
Not aliassing across scopes: keyboard_key_pressed::key#2 keyboard_key_pressed::key#0
Not aliassing across scopes: keyboard_matrix_read::rowid#0 keyboard_key_pressed::rowidx#0
Not aliassing across scopes: keyboard_matrix_read::return#2 keyboard_matrix_read::return#0
Not aliassing across scopes: keyboard_key_pressed::$2 keyboard_matrix_read::return#2
Not aliassing across scopes: print_screen#23 print_screen#0
Not aliassing across scopes: print_line_cursor#41 print_screen#0
Not aliassing across scopes: print_char_cursor#44 print_screen#0
Not aliassing across scopes: print_screen#12 print_screen#15
Not aliassing across scopes: print_line_cursor#23 print_line_cursor#14
Not aliassing across scopes: print_char_cursor#10 print_char_cursor#15
Not aliassing across scopes: print_screen#29 print_screen#13
Not aliassing across scopes: print_line_cursor#48 print_line_cursor#10
Not aliassing across scopes: print_char_cursor#49 print_char_cursor#11
Not aliassing across scopes: menu::c#0 COLS#0
Not aliassing across scopes: print_set_screen::screen#0 MENU_SCREEN#0
Not aliassing across scopes: print_screen#14 print_screen#1
Not aliassing across scopes: print_line_cursor#11 print_screen#1
Not aliassing across scopes: print_char_cursor#12 print_screen#1
Not aliassing across scopes: print_line_cursor#12 print_line_cursor#21
Not aliassing across scopes: print_char_cursor#13 print_line_cursor#21
Not aliassing across scopes: print_str_lines::str#1 MENU_TEXT#0
Not aliassing across scopes: print_char_cursor#14 print_char_cursor#19
Not aliassing across scopes: print_line_cursor#13 print_line_cursor#17
Not aliassing across scopes: keyboard_key_pressed::key#0 KEY_C#0
Not aliassing across scopes: keyboard_key_pressed::return#2 keyboard_key_pressed::return#0
Not aliassing across scopes: menu::$22 keyboard_key_pressed::return#2
Not aliassing across scopes: mode_twoplanebitmap::c#0 COLS#0
Not aliassing across scopes: mode_twoplanebitmap::gfxa#0 TWOPLANE_PLANEA#0
Not aliassing across scopes: mode_twoplanebitmap::gfxb#0 TWOPLANE_PLANEB#0
Not aliassing across scopes: keyboard_key_pressed::key#1 KEY_SPACE#0
Not aliassing across scopes: keyboard_key_pressed::return#3 keyboard_key_pressed::return#0
Not aliassing across scopes: mode_twoplanebitmap::$19 keyboard_key_pressed::return#3
Not aliassing across scopes: print_screen#16 print_screen#13
Not aliassing across scopes: print_line_cursor#15 print_line_cursor#10
Not aliassing across scopes: print_char_cursor#16 print_char_cursor#11
Alias (byte) print_str_lines::ch#0 = (byte) print_str_lines::ch#1 
Alias (byte*) print_str_lines::str#0 = (byte*) print_str_lines::str#5 
Alias (byte*) print_line_cursor#30 = (byte*) print_line_cursor#46 
Alias (byte*) print_screen#15 = (byte*) print_screen#20 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#36 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#38 
Alias (byte) mode_twoplanebitmap::ax#2 = (byte) mode_twoplanebitmap::ax#3 
Alias (byte) mode_twoplanebitmap::ay#2 = (byte) mode_twoplanebitmap::ay#3 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str_lines::str#4 print_str_lines::str#1
Not aliassing across scopes: print_char_cursor#41 print_char_cursor#13
Not aliassing across scopes: print_line_cursor#39 print_line_cursor#12
Not aliassing across scopes: print_line_cursor#1 print_line_cursor#19
Not aliassing across scopes: print_char_cursor#18 print_line_cursor#19
Not aliassing across scopes: print_line_cursor#32 print_line_cursor#30
Not aliassing across scopes: print_char_cursor#34 print_char_cursor#32
Not aliassing across scopes: print_screen#8 print_screen#14
Not aliassing across scopes: print_cls::sc#0 print_screen#8
Not aliassing across scopes: print_set_screen::screen#1 print_set_screen::screen#0
Not aliassing across scopes: print_screen#1 print_set_screen::screen#1
Not aliassing across scopes: keyboard_matrix_read::rowid#1 keyboard_matrix_read::rowid#0
Not aliassing across scopes: keyboard_key_pressed::key#2 keyboard_key_pressed::key#0
Not aliassing across scopes: keyboard_matrix_read::rowid#0 keyboard_key_pressed::rowidx#0
Not aliassing across scopes: keyboard_matrix_read::return#2 keyboard_matrix_read::return#0
Not aliassing across scopes: keyboard_key_pressed::$2 keyboard_matrix_read::return#2
Not aliassing across scopes: print_screen#23 print_screen#0
Not aliassing across scopes: print_line_cursor#41 print_screen#0
Not aliassing across scopes: print_char_cursor#44 print_screen#0
Not aliassing across scopes: print_screen#12 print_screen#15
Not aliassing across scopes: print_line_cursor#23 print_line_cursor#14
Not aliassing across scopes: print_char_cursor#10 print_char_cursor#15
Not aliassing across scopes: print_screen#29 print_screen#13
Not aliassing across scopes: print_line_cursor#48 print_line_cursor#10
Not aliassing across scopes: print_char_cursor#49 print_char_cursor#11
Not aliassing across scopes: menu::c#0 COLS#0
Not aliassing across scopes: print_set_screen::screen#0 MENU_SCREEN#0
Not aliassing across scopes: print_screen#14 print_screen#1
Not aliassing across scopes: print_line_cursor#11 print_screen#1
Not aliassing across scopes: print_char_cursor#12 print_screen#1
Not aliassing across scopes: print_line_cursor#12 print_line_cursor#21
Not aliassing across scopes: print_char_cursor#13 print_line_cursor#21
Not aliassing across scopes: print_str_lines::str#1 MENU_TEXT#0
Not aliassing across scopes: print_char_cursor#14 print_char_cursor#19
Not aliassing across scopes: print_line_cursor#13 print_line_cursor#17
Not aliassing across scopes: keyboard_key_pressed::key#0 KEY_C#0
Not aliassing across scopes: keyboard_key_pressed::return#2 keyboard_key_pressed::return#0
Not aliassing across scopes: menu::$22 keyboard_key_pressed::return#2
Not aliassing across scopes: mode_twoplanebitmap::c#0 COLS#0
Not aliassing across scopes: mode_twoplanebitmap::gfxa#0 TWOPLANE_PLANEA#0
Not aliassing across scopes: mode_twoplanebitmap::gfxb#0 TWOPLANE_PLANEB#0
Not aliassing across scopes: keyboard_key_pressed::key#1 KEY_SPACE#0
Not aliassing across scopes: keyboard_key_pressed::return#3 keyboard_key_pressed::return#0
Not aliassing across scopes: mode_twoplanebitmap::$19 keyboard_key_pressed::return#3
Not aliassing across scopes: print_screen#16 print_screen#13
Not aliassing across scopes: print_line_cursor#15 print_line_cursor#10
Not aliassing across scopes: print_char_cursor#16 print_char_cursor#11
Self Phi Eliminated (byte*) print_line_cursor#30
Self Phi Eliminated (byte*) print_char_cursor#20
Self Phi Eliminated (byte*) print_line_cursor#21
Self Phi Eliminated (byte*) print_screen#19
Self Phi Eliminated (byte*) print_line_cursor#35
Self Phi Eliminated (byte*) print_char_cursor#37
Self Phi Eliminated (byte*) print_screen#15
Self Phi Eliminated (byte*) print_line_cursor#14
Self Phi Eliminated (byte*) print_char_cursor#15
Self Phi Eliminated (byte) mode_twoplanebitmap::ay#2
Self Phi Eliminated (byte) mode_twoplanebitmap::by#2
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) print_str_lines::str#4 (byte*) print_str_lines::str#1
Redundant Phi (byte*) print_char_cursor#41 (byte*) print_char_cursor#13
Redundant Phi (byte*) print_line_cursor#39 (byte*) print_line_cursor#12
Redundant Phi (byte*) print_line_cursor#30 (byte*) print_line_cursor#17
Redundant Phi (byte*) print_line_cursor#1 (byte*) print_line_cursor#19
Redundant Phi (byte*) print_char_cursor#18 (byte*) print_line_cursor#19
Redundant Phi (byte*) print_line_cursor#32 (byte*) print_line_cursor#30
Redundant Phi (byte*) print_char_cursor#34 (byte*) print_char_cursor#32
Redundant Phi (byte*) print_char_cursor#20 (byte*) print_char_cursor#34
Redundant Phi (byte*) print_screen#8 (byte*) print_screen#14
Redundant Phi (byte*) print_line_cursor#21 (byte*) print_screen#8
Redundant Phi (byte*) print_set_screen::screen#1 (byte*) print_set_screen::screen#0
Redundant Phi (byte) keyboard_matrix_read::rowid#1 (byte) keyboard_matrix_read::rowid#0
Redundant Phi (byte*) print_screen#23 (byte*) print_screen#0
Redundant Phi (byte*) print_line_cursor#41 (byte*) print_screen#0
Redundant Phi (byte*) print_char_cursor#44 (byte*) print_screen#0
Redundant Phi (byte*) print_screen#12 (byte*) print_screen#15
Redundant Phi (byte*) print_line_cursor#23 (byte*) print_line_cursor#14
Redundant Phi (byte*) print_char_cursor#10 (byte*) print_char_cursor#15
Redundant Phi (byte*) print_screen#29 (byte*) print_screen#13
Redundant Phi (byte*) print_line_cursor#48 (byte*) print_line_cursor#10
Redundant Phi (byte*) print_char_cursor#49 (byte*) print_char_cursor#11
Redundant Phi (byte*) print_screen#19 (byte*) print_screen#29
Redundant Phi (byte*) print_line_cursor#35 (byte*) print_line_cursor#48
Redundant Phi (byte*) print_char_cursor#37 (byte*) print_char_cursor#49
Redundant Phi (byte*) print_screen#14 (byte*) print_screen#1
Redundant Phi (byte*) print_line_cursor#11 (byte*) print_screen#1
Redundant Phi (byte*) print_char_cursor#12 (byte*) print_screen#1
Redundant Phi (byte*) print_line_cursor#12 (byte*) print_line_cursor#21
Redundant Phi (byte*) print_char_cursor#13 (byte*) print_line_cursor#21
Redundant Phi (byte*) print_char_cursor#14 (byte*) print_char_cursor#19
Redundant Phi (byte*) print_line_cursor#13 (byte*) print_line_cursor#17
Redundant Phi (byte*) print_screen#15 (byte*) print_screen#14
Redundant Phi (byte*) print_line_cursor#14 (byte*) print_line_cursor#13
Redundant Phi (byte*) print_char_cursor#15 (byte*) print_char_cursor#14
Redundant Phi (byte) mode_twoplanebitmap::ay#2 (byte) mode_twoplanebitmap::ay#4
Redundant Phi (byte) mode_twoplanebitmap::by#2 (byte) mode_twoplanebitmap::by#4
Redundant Phi (byte*) print_screen#16 (byte*) print_screen#13
Redundant Phi (byte*) print_line_cursor#15 (byte*) print_line_cursor#10
Redundant Phi (byte*) print_char_cursor#16 (byte*) print_char_cursor#11
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) print_str_lines::$0 if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@2
Simple Condition (boolean~) print_str_lines::$2 if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5
Simple Condition (boolean~) print_str_lines::$3 if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4
Simple Condition (boolean~) print_ln::$1 if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1
Simple Condition (boolean~) print_cls::$1 if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (boolean~) menu::$18 if((byte*) menu::c#1!=(byte*~) menu::$17) goto menu::@1
Simple Condition (boolean~) menu::$24 if((byte~) menu::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@5
Simple Condition (boolean~) mode_twoplanebitmap::$11 if((byte*) mode_twoplanebitmap::c#1!=(byte*~) mode_twoplanebitmap::$10) goto mode_twoplanebitmap::@1
Simple Condition (boolean~) mode_twoplanebitmap::$14 if((byte~) mode_twoplanebitmap::$12!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@4
Simple Condition (boolean~) mode_twoplanebitmap::$15 if((byte) mode_twoplanebitmap::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto mode_twoplanebitmap::@3
Simple Condition (boolean~) mode_twoplanebitmap::$16 if((byte) mode_twoplanebitmap::ay#1!=(byte/word/signed word/dword/signed dword) 200) goto mode_twoplanebitmap::@2
Simple Condition (boolean~) mode_twoplanebitmap::$17 if((byte) mode_twoplanebitmap::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto mode_twoplanebitmap::@7
Simple Condition (boolean~) mode_twoplanebitmap::$18 if((byte) mode_twoplanebitmap::by#1!=(byte/word/signed word/dword/signed dword) 200) goto mode_twoplanebitmap::@6
Simple Condition (boolean~) mode_twoplanebitmap::$21 if((byte~) mode_twoplanebitmap::$19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@8
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) BGCOL#0 = ((byte*))53281
Constant (const byte*) BGCOL1#0 = ((byte*))53281
Constant (const byte*) BGCOL2#0 = ((byte*))53282
Constant (const byte*) VIC_CONTROL#0 = ((byte*))53265
Constant (const byte) VIC_ECM#0 = 64
Constant (const byte) VIC_BMM#0 = 32
Constant (const byte) VIC_DEN#0 = 16
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))53270
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) VIC_MEMORY#0 = ((byte*))53272
Constant (const byte*) COLS#0 = ((byte*))55296
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))56320
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))56321
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))56576
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))56578
Constant (const byte) GREEN#0 = 5
Constant (const byte) BLUE#0 = 6
Constant (const byte) LIGHT_GREEN#0 = 13
Constant (const byte*) DTV_FEATURE#0 = ((byte*))53311
Constant (const byte) DTV_FEATURE_ENABLE#0 = 1
Constant (const byte*) DTV_CONTROL#0 = ((byte*))53308
Constant (const byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0 = 1
Constant (const byte) DTV_CONTROL_HIGHCOLOR_ON#0 = 4
Constant (const byte*) DTV_PLANEA_START_LO#0 = ((byte*))53306
Constant (const byte*) DTV_PLANEA_START_MI#0 = ((byte*))53307
Constant (const byte*) DTV_PLANEA_START_HI#0 = ((byte*))53317
Constant (const byte*) DTV_PLANEA_STEP#0 = ((byte*))53318
Constant (const byte*) DTV_PLANEA_MODULO_LO#0 = ((byte*))53304
Constant (const byte*) DTV_PLANEA_MODULO_HI#0 = ((byte*))53305
Constant (const byte*) DTV_PLANEB_START_LO#0 = ((byte*))53321
Constant (const byte*) DTV_PLANEB_START_MI#0 = ((byte*))53322
Constant (const byte*) DTV_PLANEB_START_HI#0 = ((byte*))53323
Constant (const byte*) DTV_PLANEB_STEP#0 = ((byte*))53324
Constant (const byte*) DTV_PLANEB_MODULO_LO#0 = ((byte*))53319
Constant (const byte*) DTV_PLANEB_MODULO_HI#0 = ((byte*))53320
Constant (const byte*) DTV_GRAPHICS_VIC_BANK#0 = ((byte*))53309
Constant (const byte*) print_screen#0 = ((byte*))1024
Constant (const byte) KEY_C#0 = 20
Constant (const byte) KEY_SPACE#0 = 60
Constant (const byte[8]) keyboard_matrix_row_bitmask#0 = { 254, 253, 251, 247, 239, 223, 191, 127 }
Constant (const byte[]) keyboard_matrix_col_bitmask#0 = { 1, 2, 4, 8, 16, 32, 64, 128 }
Constant (const byte*) MENU_SCREEN#0 = ((byte*))32768
Constant (const byte*) MENU_CHARSET#0 = ((byte*))38912
Constant (const string) $0 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"
Constant (const byte*) TWOPLANE_PLANEA#0 = ((byte*))16384
Constant (const byte*) TWOPLANE_PLANEB#0 = ((byte*))24576
Constant (const byte) mode_twoplanebitmap::ay#0 = 0
Constant (const byte) mode_twoplanebitmap::ax#0 = 0
Constant (const byte) mode_twoplanebitmap::by#0 = 0
Constant (const byte) mode_twoplanebitmap::bx#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $1 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"
Constant (const dword) menu::$0 = ((dword))MENU_CHARSET#0
Constant (const word) menu::$3 = ((word))MENU_CHARSET#0
Constant (const byte) menu::$7 = VIC_DEN#0|VIC_RSEL#0
Constant (const word) menu::$9 = ((word))MENU_SCREEN#0
Constant (const word) menu::$12 = ((word))MENU_CHARSET#0
Constant (const byte*) menu::c#0 = COLS#0
Constant (const byte*) menu::$17 = COLS#0+1000
Constant (const byte*) print_set_screen::screen#0 = MENU_SCREEN#0
Constant (const byte) keyboard_key_pressed::key#0 = KEY_C#0
Constant (const byte*) menu::last#0 = MENU_SCREEN#0+999
Constant (const byte) mode_twoplanebitmap::$0 = DTV_CONTROL_HIGHCOLOR_ON#0|DTV_CONTROL_LINEAR_ADDRESSING_ON#0
Constant (const byte) mode_twoplanebitmap::$1 = VIC_ECM#0|VIC_BMM#0
Constant (const byte) mode_twoplanebitmap::$5 = <TWOPLANE_PLANEA#0
Constant (const byte) mode_twoplanebitmap::$6 = >TWOPLANE_PLANEA#0
Constant (const byte) mode_twoplanebitmap::$7 = <TWOPLANE_PLANEB#0
Constant (const byte) mode_twoplanebitmap::$8 = >TWOPLANE_PLANEB#0
Constant (const byte*) mode_twoplanebitmap::c#0 = COLS#0
Constant (const byte*) mode_twoplanebitmap::$10 = COLS#0+1000
Constant (const byte*) mode_twoplanebitmap::gfxa#0 = TWOPLANE_PLANEA#0
Constant (const byte*) mode_twoplanebitmap::gfxb#0 = TWOPLANE_PLANEB#0
Constant (const byte) keyboard_key_pressed::key#1 = KEY_SPACE#0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_screen#1 = print_set_screen::screen#0
Constant (const string) $2 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"
Constant (const dword) menu::$1 = menu::$0/65536
Constant (const word/signed dword/dword) menu::$4 = menu::$3/16384
Constant (const byte/word/dword) menu::$8 = menu::$7|3
Constant (const word) menu::$10 = menu::$9&16383
Constant (const word) menu::$13 = menu::$12&16383
Constant (const byte) mode_twoplanebitmap::$2 = mode_twoplanebitmap::$1|VIC_DEN#0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_screen#1
Constant (const byte*) print_cls::$0 = print_screen#1+1000
Constant (const string) $3 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"
Constant (const byte) menu::$2 = ((byte))menu::$1
Constant (const byte) menu::$5 = ((byte))menu::$4
Constant (const word/signed dword/dword) menu::$11 = menu::$10/64
Constant (const word/signed dword/dword) menu::$14 = menu::$13/1024
Constant (const byte) mode_twoplanebitmap::$3 = mode_twoplanebitmap::$2|VIC_RSEL#0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $4 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"
Constant (const byte/word/dword) menu::$6 = 3^menu::$5
Constant (const word/dword) menu::$15 = menu::$11|menu::$14
Constant (const byte/word/dword) mode_twoplanebitmap::$4 = mode_twoplanebitmap::$3|3
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $5 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"
Constant (const byte) menu::$16 = ((byte))menu::$15
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $6 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $7 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $8 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $9 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $10 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $11 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $12 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $13 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $14 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"+"c. Two Plane Bitmap          (D) 1011100@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $15 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"+"c. Two Plane Bitmap          (D) 1011100@"+"d. Two Plane Multicol Bitmap (D) 1111100@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $16 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"+"c. Two Plane Bitmap          (D) 1011100@"+"d. Two Plane Multicol Bitmap (D) 1111100@"+"e. 8bpp Pixel Cell           (D) 1101110@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $17 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"+"c. Two Plane Bitmap          (D) 1011100@"+"d. Two Plane Multicol Bitmap (D) 1111100@"+"e. 8bpp Pixel Cell           (D) 1101110@"+"f. Chunky 8bpp Bitmap        (D) 1101111@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $18 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"+"c. Two Plane Bitmap          (D) 1011100@"+"d. Two Plane Multicol Bitmap (D) 1111100@"+"e. 8bpp Pixel Cell           (D) 1101110@"+"f. Chunky 8bpp Bitmap        (D) 1101111@"+"----------------------------------------@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) $19 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"+"c. Two Plane Bitmap          (D) 1011100@"+"d. Two Plane Multicol Bitmap (D) 1111100@"+"e. 8bpp Pixel Cell           (D) 1101110@"+"f. Chunky 8bpp Bitmap        (D) 1101111@"+"----------------------------------------@"+"    (V) vicII (H) vicII+hicol (D) c64dtv@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) MENU_TEXT#0 = "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"+"c. Two Plane Bitmap          (D) 1011100@"+"d. Two Plane Multicol Bitmap (D) 1111100@"+"e. 8bpp Pixel Cell           (D) 1101110@"+"f. Chunky 8bpp Bitmap        (D) 1101111@"+"----------------------------------------@"+"    (V) vicII (H) vicII+hicol (D) c64dtv@"+"@"
Succesful SSA optimization Pass2ConstantIdentification
Constant (const string) print_str_lines::str#1 = MENU_TEXT#0
Succesful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const string) $21
Eliminating unused constant (const string) $22
Eliminating unused constant (const string) $23
Eliminating unused constant (const string) $24
Eliminating unused constant (const string) $25
Eliminating unused constant (const string) $26
Eliminating unused constant (const string) $27
Eliminating unused constant (const string) $28
Eliminating unused constant (const string) $29
Eliminating unused constant (const string) $30
Eliminating unused constant (const string) $31
Eliminating unused constant (const string) $32
Eliminating unused constant (const string) $33
Eliminating unused constant (const string) $34
Eliminating unused constant (const string) $35
Eliminating unused constant (const string) $36
Eliminating unused constant (const string) $37
Eliminating unused constant (const string) $38
Eliminating unused constant (const string) $39
Eliminating unused constant (const string) $40
Eliminating unused constant (const string) $41
Eliminating unused constant (const string) $42
Eliminating unused constant (const string) $0
Eliminating unused constant (const string) $1
Eliminating unused constant (const string) $2
Eliminating unused constant (const string) $3
Eliminating unused constant (const string) $4
Eliminating unused constant (const string) $5
Eliminating unused constant (const string) $6
Eliminating unused constant (const string) $7
Eliminating unused constant (const string) $8
Eliminating unused constant (const string) $9
Eliminating unused constant (const string) $10
Eliminating unused constant (const string) $11
Eliminating unused constant (const string) $12
Eliminating unused constant (const string) $13
Eliminating unused constant (const string) $14
Eliminating unused constant (const string) $15
Eliminating unused constant (const string) $16
Eliminating unused constant (const string) $17
Eliminating unused constant (const string) $18
Eliminating unused constant (const string) $19
Succesful SSA optimization PassNEliminateUnusedVars
Culled Empty Block (label) print_str_lines::@2
Culled Empty Block (label) print_str_lines::@11
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) @14
Culled Empty Block (label) main::@7
Culled Empty Block (label) @19
Culled Empty Block (label) menu::@14
Culled Empty Block (label) menu::@16
Culled Empty Block (label) @20
Culled Empty Block (label) mode_twoplanebitmap::@12
Culled Empty Block (label) mode_twoplanebitmap::@16
Culled Empty Block (label) @22
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: print_line_cursor#18 print_line_cursor#17
Not aliassing across scopes: keyboard_matrix_read::rowid#0 keyboard_key_pressed::rowidx#0
Not aliassing across scopes: keyboard_matrix_read::return#2 keyboard_matrix_read::return#0
Not aliassing across scopes: keyboard_key_pressed::$2 keyboard_matrix_read::return#2
Not aliassing across scopes: keyboard_key_pressed::return#2 keyboard_key_pressed::return#0
Not aliassing across scopes: menu::$22 keyboard_key_pressed::return#2
Not aliassing across scopes: keyboard_key_pressed::return#3 keyboard_key_pressed::return#0
Not aliassing across scopes: mode_twoplanebitmap::$19 keyboard_key_pressed::return#3
Not aliassing across scopes: print_line_cursor#18 print_line_cursor#17
Not aliassing across scopes: keyboard_matrix_read::rowid#0 keyboard_key_pressed::rowidx#0
Not aliassing across scopes: keyboard_matrix_read::return#2 keyboard_matrix_read::return#0
Not aliassing across scopes: keyboard_key_pressed::$2 keyboard_matrix_read::return#2
Not aliassing across scopes: keyboard_key_pressed::return#2 keyboard_key_pressed::return#0
Not aliassing across scopes: menu::$22 keyboard_key_pressed::return#2
Not aliassing across scopes: keyboard_key_pressed::return#3 keyboard_key_pressed::return#0
Not aliassing across scopes: mode_twoplanebitmap::$19 keyboard_key_pressed::return#3
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const string) print_str_lines::str#1
Inlining constant with var siblings (const string) print_str_lines::str#1
Inlining constant with var siblings (const string) print_str_lines::str#1
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#0
Inlining constant with var siblings (const byte) keyboard_key_pressed::key#1
Inlining constant with var siblings (const byte*) menu::c#0
Inlining constant with var siblings (const byte*) menu::c#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::ay#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::ay#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::ax#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::ax#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::by#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::by#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::bx#0
Inlining constant with var siblings (const byte) mode_twoplanebitmap::bx#0
Inlining constant with var siblings (const byte*) mode_twoplanebitmap::c#0
Inlining constant with var siblings (const byte*) mode_twoplanebitmap::c#0
Inlining constant with var siblings (const byte*) mode_twoplanebitmap::gfxa#0
Inlining constant with var siblings (const byte*) mode_twoplanebitmap::gfxa#0
Inlining constant with var siblings (const byte*) mode_twoplanebitmap::gfxa#0
Inlining constant with var siblings (const byte*) mode_twoplanebitmap::gfxa#0
Inlining constant with var siblings (const byte*) mode_twoplanebitmap::gfxa#0
Inlining constant with var siblings (const byte*) mode_twoplanebitmap::gfxb#0
Inlining constant with var siblings (const byte*) mode_twoplanebitmap::gfxb#0
Inlining constant with var siblings (const byte*) mode_twoplanebitmap::gfxb#0
Inlining constant with var siblings (const byte*) print_screen#0
Inlining constant with var siblings (const byte*) print_screen#1
Inlining constant with different constant siblings (const byte*) print_screen#1
Constant inlined menu::$9 = ((word))(const byte*) MENU_SCREEN#0
Constant inlined print_cls::$0 = (const byte*) MENU_SCREEN#0+(word/signed word/dword/signed dword) 1000
Constant inlined menu::$7 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined menu::$8 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined menu::$5 = ((byte))((word))(const byte*) MENU_CHARSET#0/(word/signed word/dword/signed dword) 16384
Constant inlined mode_twoplanebitmap::ay#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined menu::$6 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) MENU_CHARSET#0/(word/signed word/dword/signed dword) 16384
Constant inlined menu::c#0 = (const byte*) COLS#0
Constant inlined print_screen#1 = (const byte*) MENU_SCREEN#0
Constant inlined print_screen#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Constant inlined menu::$16 = ((byte))((word))(const byte*) MENU_SCREEN#0&(word/signed word/dword/signed dword) 16383/(byte/signed byte/word/signed word/dword/signed dword) 64|((word))(const byte*) MENU_CHARSET#0&(word/signed word/dword/signed dword) 16383/(word/signed word/dword/signed dword) 1024
Constant inlined mode_twoplanebitmap::gfxb#0 = (const byte*) TWOPLANE_PLANEB#0
Constant inlined menu::$17 = (const byte*) COLS#0+(word/signed word/dword/signed dword) 1000
Constant inlined mode_twoplanebitmap::gfxa#0 = (const byte*) TWOPLANE_PLANEA#0
Constant inlined menu::$14 = ((word))(const byte*) MENU_CHARSET#0&(word/signed word/dword/signed dword) 16383/(word/signed word/dword/signed dword) 1024
Constant inlined menu::$15 = ((word))(const byte*) MENU_SCREEN#0&(word/signed word/dword/signed dword) 16383/(byte/signed byte/word/signed word/dword/signed dword) 64|((word))(const byte*) MENU_CHARSET#0&(word/signed word/dword/signed dword) 16383/(word/signed word/dword/signed dword) 1024
Constant inlined mode_twoplanebitmap::c#0 = (const byte*) COLS#0
Constant inlined print_set_screen::screen#0 = (const byte*) MENU_SCREEN#0
Constant inlined menu::$3 = ((word))(const byte*) MENU_CHARSET#0
Constant inlined mode_twoplanebitmap::bx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined menu::$4 = ((word))(const byte*) MENU_CHARSET#0/(word/signed word/dword/signed dword) 16384
Constant inlined mode_twoplanebitmap::by#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined menu::$1 = ((dword))(const byte*) MENU_CHARSET#0/(dword/signed dword) 65536
Constant inlined menu::$2 = ((byte))((dword))(const byte*) MENU_CHARSET#0/(dword/signed dword) 65536
Constant inlined menu::$12 = ((word))(const byte*) MENU_CHARSET#0
Constant inlined menu::$0 = ((dword))(const byte*) MENU_CHARSET#0
Constant inlined menu::$13 = ((word))(const byte*) MENU_CHARSET#0&(word/signed word/dword/signed dword) 16383
Constant inlined menu::$10 = ((word))(const byte*) MENU_SCREEN#0&(word/signed word/dword/signed dword) 16383
Constant inlined menu::$11 = ((word))(const byte*) MENU_SCREEN#0&(word/signed word/dword/signed dword) 16383/(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined mode_twoplanebitmap::$5 = <(const byte*) TWOPLANE_PLANEA#0
Constant inlined keyboard_key_pressed::key#0 = (const byte) KEY_C#0
Constant inlined mode_twoplanebitmap::$6 = >(const byte*) TWOPLANE_PLANEA#0
Constant inlined keyboard_key_pressed::key#1 = (const byte) KEY_SPACE#0
Constant inlined mode_twoplanebitmap::$7 = <(const byte*) TWOPLANE_PLANEB#0
Constant inlined mode_twoplanebitmap::$8 = >(const byte*) TWOPLANE_PLANEB#0
Constant inlined mode_twoplanebitmap::$1 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0
Constant inlined mode_twoplanebitmap::$2 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0
Constant inlined mode_twoplanebitmap::$3 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined mode_twoplanebitmap::$4 = (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined mode_twoplanebitmap::$0 = (const byte) DTV_CONTROL_HIGHCOLOR_ON#0|(const byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0
Constant inlined print_cls::sc#0 = (const byte*) MENU_SCREEN#0
Constant inlined print_str_lines::str#1 = (const string) MENU_TEXT#0
Constant inlined mode_twoplanebitmap::$10 = (const byte*) COLS#0+(word/signed word/dword/signed dword) 1000
Constant inlined mode_twoplanebitmap::ax#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @21 @end main main::@1 main::@return main::@2 menu menu::@1 menu::@6 menu::@12 menu::@13 menu::@2 menu::@return menu::@3 menu::@15 menu::@9 menu::@5 mode_twoplanebitmap mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 mode_twoplanebitmap::@13 mode_twoplanebitmap::@5 mode_twoplanebitmap::@15 mode_twoplanebitmap::@6 mode_twoplanebitmap::@7 mode_twoplanebitmap::@17 mode_twoplanebitmap::@8 mode_twoplanebitmap::@return mode_twoplanebitmap::@9 mode_twoplanebitmap::@24 mode_twoplanebitmap::@4 keyboard_key_pressed keyboard_key_pressed::@2 keyboard_key_pressed::@return keyboard_matrix_read keyboard_matrix_read::@return print_str_lines print_str_lines::@1 print_str_lines::@return print_str_lines::@4 print_str_lines::@8 print_str_lines::@5 print_str_lines::@9 print_ln print_ln::@1 print_ln::@return print_cls print_cls::@1 print_cls::@return print_set_screen print_set_screen::@return 
Added new block during phi lifting menu::@17(between menu::@1 and menu::@1)
Added new block during phi lifting mode_twoplanebitmap::@25(between mode_twoplanebitmap::@1 and mode_twoplanebitmap::@1)
Added new block during phi lifting mode_twoplanebitmap::@26(between mode_twoplanebitmap::@15 and mode_twoplanebitmap::@2)
Added new block during phi lifting mode_twoplanebitmap::@27(between mode_twoplanebitmap::@5 and mode_twoplanebitmap::@3)
Added new block during phi lifting mode_twoplanebitmap::@28(between mode_twoplanebitmap::@17 and mode_twoplanebitmap::@6)
Added new block during phi lifting mode_twoplanebitmap::@29(between mode_twoplanebitmap::@7 and mode_twoplanebitmap::@7)
Added new block during phi lifting print_str_lines::@12(between print_str_lines::@1 and print_str_lines::@4)
Added new block during phi lifting print_str_lines::@13(between print_str_lines::@5 and print_str_lines::@4)
Added new block during phi lifting print_str_lines::@14(between print_str_lines::@4 and print_str_lines::@5)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Block Sequence Planned @begin @21 @end main main::@1 main::@return main::@2 menu menu::@1 menu::@6 menu::@12 menu::@13 menu::@2 menu::@return menu::@3 menu::@15 menu::@9 menu::@5 menu::@17 mode_twoplanebitmap mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 mode_twoplanebitmap::@13 mode_twoplanebitmap::@5 mode_twoplanebitmap::@15 mode_twoplanebitmap::@6 mode_twoplanebitmap::@7 mode_twoplanebitmap::@17 mode_twoplanebitmap::@8 mode_twoplanebitmap::@return mode_twoplanebitmap::@9 mode_twoplanebitmap::@24 mode_twoplanebitmap::@28 mode_twoplanebitmap::@29 mode_twoplanebitmap::@26 mode_twoplanebitmap::@27 mode_twoplanebitmap::@4 mode_twoplanebitmap::@25 keyboard_key_pressed keyboard_key_pressed::@2 keyboard_key_pressed::@return keyboard_matrix_read keyboard_matrix_read::@return print_str_lines print_str_lines::@1 print_str_lines::@return print_str_lines::@12 print_str_lines::@4 print_str_lines::@8 print_str_lines::@5 print_str_lines::@9 print_str_lines::@13 print_str_lines::@14 print_ln print_ln::@1 print_ln::@return print_ln::@3 print_cls print_cls::@1 print_cls::@return print_cls::@3 print_set_screen print_set_screen::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @21
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu::@12
Adding NOP phi() at start of menu::@13
Adding NOP phi() at start of menu::@3
Adding NOP phi() at start of menu::@9
Adding NOP phi() at start of mode_twoplanebitmap::@9
Adding NOP phi() at start of print_str_lines
Adding NOP phi() at start of print_str_lines::@9
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_set_screen
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to menu:9 
Calls in [menu] to print_set_screen:25 print_cls:27 print_str_lines:29 keyboard_key_pressed:33 mode_twoplanebitmap:38 
Calls in [mode_twoplanebitmap] to keyboard_key_pressed:89 
Calls in [keyboard_key_pressed] to keyboard_matrix_read:109 
Calls in [print_str_lines] to print_ln:133 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 23 initial phi equivalence classes
Coalesced [10] print_line_cursor#54 ← print_line_cursor#17
Coalesced [11] print_char_cursor#54 ← print_char_cursor#19
Coalesced [40] menu::c#3 ← menu::c#1
Coalesced [65] mode_twoplanebitmap::gfxa#10 ← mode_twoplanebitmap::gfxa#6
Coalesced [71] mode_twoplanebitmap::gfxa#12 ← mode_twoplanebitmap::gfxa#2
Coalesced [78] mode_twoplanebitmap::gfxb#6 ← mode_twoplanebitmap::gfxb#3
Coalesced [93] mode_twoplanebitmap::gfxb#5 ← mode_twoplanebitmap::gfxb#1
Coalesced [94] mode_twoplanebitmap::by#5 ← mode_twoplanebitmap::by#1
Coalesced (already) [95] mode_twoplanebitmap::gfxb#7 ← mode_twoplanebitmap::gfxb#1
Coalesced [96] mode_twoplanebitmap::bx#3 ← mode_twoplanebitmap::bx#1
Coalesced [97] mode_twoplanebitmap::ay#8 ← mode_twoplanebitmap::ay#1
Coalesced [98] mode_twoplanebitmap::gfxa#9 ← mode_twoplanebitmap::gfxa#7
Coalesced (already) [99] mode_twoplanebitmap::gfxa#11 ← mode_twoplanebitmap::gfxa#7
Coalesced [100] mode_twoplanebitmap::ax#6 ← mode_twoplanebitmap::ax#1
Coalesced [103] mode_twoplanebitmap::gfxa#13 ← mode_twoplanebitmap::gfxa#1
Coalesced [104] mode_twoplanebitmap::c#3 ← mode_twoplanebitmap::c#1
Coalesced [121] print_str_lines::str#11 ← print_str_lines::str#2
Coalesced [122] print_char_cursor#56 ← print_char_cursor#19
Coalesced [129] print_char_cursor#59 ← print_char_cursor#1
Coalesced [134] print_str_lines::str#10 ← print_str_lines::str#0
Not coalescing [135] print_char_cursor#55 ← print_line_cursor#19
Coalesced [136] print_line_cursor#55 ← print_line_cursor#19
Coalesced (already) [137] print_str_lines::str#12 ← print_str_lines::str#0
Coalesced [138] print_char_cursor#57 ← print_char_cursor#32
Coalesced (already) [139] print_char_cursor#58 ← print_char_cursor#17
Coalesced [140] print_line_cursor#56 ← print_line_cursor#17
Coalesced (already) [145] print_line_cursor#57 ← print_line_cursor#19
Coalesced [152] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 14 phi equivalence classes
Culled Empty Block (label) menu::@17
Culled Empty Block (label) mode_twoplanebitmap::@28
Culled Empty Block (label) mode_twoplanebitmap::@29
Culled Empty Block (label) mode_twoplanebitmap::@26
Culled Empty Block (label) mode_twoplanebitmap::@27
Culled Empty Block (label) mode_twoplanebitmap::@25
Culled Empty Block (label) print_str_lines::@12
Culled Empty Block (label) print_str_lines::@13
Culled Empty Block (label) print_str_lines::@14
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_cls::@3
Block Sequence Planned @begin @21 @end main main::@1 main::@return main::@2 menu menu::@1 menu::@6 menu::@12 menu::@13 menu::@2 menu::@return menu::@3 menu::@15 menu::@9 menu::@5 mode_twoplanebitmap mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 mode_twoplanebitmap::@13 mode_twoplanebitmap::@5 mode_twoplanebitmap::@15 mode_twoplanebitmap::@6 mode_twoplanebitmap::@7 mode_twoplanebitmap::@17 mode_twoplanebitmap::@8 mode_twoplanebitmap::@return mode_twoplanebitmap::@9 mode_twoplanebitmap::@24 mode_twoplanebitmap::@4 keyboard_key_pressed keyboard_key_pressed::@2 keyboard_key_pressed::@return keyboard_matrix_read keyboard_matrix_read::@return print_str_lines print_str_lines::@1 print_str_lines::@return print_str_lines::@4 print_str_lines::@8 print_str_lines::@5 print_str_lines::@9 print_ln print_ln::@1 print_ln::@return print_cls print_cls::@1 print_cls::@return print_set_screen print_set_screen::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @21
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu::@12
Adding NOP phi() at start of menu::@13
Adding NOP phi() at start of menu::@3
Adding NOP phi() at start of menu::@9
Adding NOP phi() at start of mode_twoplanebitmap::@9
Adding NOP phi() at start of print_str_lines
Adding NOP phi() at start of print_str_lines::@9
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_set_screen
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@21
@21: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @21
  [3] phi() [ ] ( )
main: scope:[main]  from @21
  [4] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte*) print_char_cursor#11 ← phi( main/((byte*))(word/signed word/dword/signed dword) 1024 main::@2/(byte*) print_char_cursor#19 ) [ ] ( main:2 [ ] )
  [5] (byte*) print_line_cursor#10 ← phi( main/((byte*))(word/signed word/dword/signed dword) 1024 main::@2/(byte*) print_line_cursor#17 ) [ ] ( main:2 [ ] )
  [5] (byte*) print_screen#13 ← phi( main/((byte*))(word/signed word/dword/signed dword) 1024 main::@2/(const byte*) MENU_SCREEN#0 ) [ ] ( main:2 [ ] )
  [6] if(true) goto main::@2 [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return  [ ] ( main:2 [ ] )
  to:@return
main::@2: scope:[main]  from main::@1
  [8] phi() [ ] ( main:2 [ ] )
  [9] call menu param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:main::@1
menu: scope:[menu]  from main::@2
  [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) MENU_CHARSET#0/(dword/signed dword) 65536 [ ] ( main:2::menu:9 [ ] )
  [11] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] )
  [12] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] )
  [13] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) MENU_CHARSET#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2::menu:9 [ ] )
  [14] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] )
  [15] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9 [ ] )
  [16] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) MENU_SCREEN#0&(word/signed word/dword/signed dword) 16383/(byte/signed byte/word/signed word/dword/signed dword) 64|((word))(const byte*) MENU_CHARSET#0&(word/signed word/dword/signed dword) 16383/(word/signed word/dword/signed dword) 1024 [ ] ( main:2::menu:9 [ ] )
  to:menu::@1
menu::@1: scope:[menu]  from menu menu::@1
  [17] (byte*) menu::c#2 ← phi( menu/(const byte*) COLS#0 menu::@1/(byte*) menu::c#1 ) [ menu::c#2 ] ( main:2::menu:9 [ menu::c#2 ] )
  [18] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 [ menu::c#2 ] ( main:2::menu:9 [ menu::c#2 ] )
  [19] (byte*) menu::c#1 ← ++ (byte*) menu::c#2 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] )
  [20] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto menu::@1 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] )
  to:menu::@6
menu::@6: scope:[menu]  from menu::@1
  [21] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] )
  [22] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] )
  [23] call print_set_screen param-assignment [ ] ( main:2::menu:9 [ ] )
  to:menu::@12
menu::@12: scope:[menu]  from menu::@6
  [24] phi() [ ] ( main:2::menu:9 [ ] )
  [25] call print_cls param-assignment [ ] ( main:2::menu:9 [ ] )
  to:menu::@13
menu::@13: scope:[menu]  from menu::@12
  [26] phi() [ ] ( main:2::menu:9 [ ] )
  [27] call print_str_lines param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:menu::@2
menu::@2: scope:[menu]  from menu::@13 menu::@5
  [28] if(true) goto menu::@3 [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:menu::@return
menu::@return: scope:[menu]  from menu::@2 menu::@9
  [29] return  [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:@return
menu::@3: scope:[menu]  from menu::@2
  [30] phi() [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  [31] call keyboard_key_pressed param-assignment [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
  [32] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#2 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#2 ] )
  to:menu::@15
menu::@15: scope:[menu]  from menu::@3
  [33] (byte~) menu::$22 ← (byte) keyboard_key_pressed::return#2 [ print_line_cursor#17 print_char_cursor#19 menu::$22 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 menu::$22 ] )
  [34] if((byte~) menu::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@5 [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:menu::@9
menu::@9: scope:[menu]  from menu::@15
  [35] phi() [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  [36] call mode_twoplanebitmap param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:menu::@return
menu::@5: scope:[menu]  from menu::@15
  [37] *((const byte*) menu::last#0) ← ++ *((const byte*) menu::last#0) [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:menu::@2
mode_twoplanebitmap: scope:[mode_twoplanebitmap]  from menu::@9
  [38] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_CONTROL_HIGHCOLOR_ON#0|(const byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [39] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [40] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [41] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [42] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [43] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [44] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [45] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [46] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [47] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [48] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [49] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [50] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [51] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [52] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [53] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [54] *((const byte*) BGCOL1#0) ← (const byte) GREEN#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [55] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:mode_twoplanebitmap::@1
mode_twoplanebitmap::@1: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap mode_twoplanebitmap::@1
  [56] (byte*) mode_twoplanebitmap::c#2 ← phi( mode_twoplanebitmap/(const byte*) COLS#0 mode_twoplanebitmap::@1/(byte*) mode_twoplanebitmap::c#1 ) [ mode_twoplanebitmap::c#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 ] )
  [57] (byte~) mode_twoplanebitmap::$9 ← < (byte*) mode_twoplanebitmap::c#2 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::$9 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 mode_twoplanebitmap::$9 ] )
  [58] *((byte*) mode_twoplanebitmap::c#2) ← (byte~) mode_twoplanebitmap::$9 [ mode_twoplanebitmap::c#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 ] )
  [59] (byte*) mode_twoplanebitmap::c#1 ← ++ (byte*) mode_twoplanebitmap::c#2 [ mode_twoplanebitmap::c#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#1 ] )
  [60] if((byte*) mode_twoplanebitmap::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto mode_twoplanebitmap::@1 [ mode_twoplanebitmap::c#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#1 ] )
  to:mode_twoplanebitmap::@2
mode_twoplanebitmap::@2: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@1 mode_twoplanebitmap::@15
  [61] (byte*) mode_twoplanebitmap::gfxa#6 ← phi( mode_twoplanebitmap::@1/(const byte*) TWOPLANE_PLANEA#0 mode_twoplanebitmap::@15/(byte*) mode_twoplanebitmap::gfxa#7 ) [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#6 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#6 ] )
  [61] (byte) mode_twoplanebitmap::ay#4 ← phi( mode_twoplanebitmap::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@15/(byte) mode_twoplanebitmap::ay#1 ) [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#6 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#6 ] )
  to:mode_twoplanebitmap::@3
mode_twoplanebitmap::@3: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@2 mode_twoplanebitmap::@5
  [62] (byte) mode_twoplanebitmap::ax#2 ← phi( mode_twoplanebitmap::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@5/(byte) mode_twoplanebitmap::ax#1 ) [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] )
  [62] (byte*) mode_twoplanebitmap::gfxa#3 ← phi( mode_twoplanebitmap::@2/(byte*) mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::@5/(byte*) mode_twoplanebitmap::gfxa#7 ) [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] )
  [63] (byte~) mode_twoplanebitmap::$12 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] )
  [64] if((byte~) mode_twoplanebitmap::$12!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] )
  to:mode_twoplanebitmap::@13
mode_twoplanebitmap::@13: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@3
  [65] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] )
  [66] (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#2 ] )
  to:mode_twoplanebitmap::@5
mode_twoplanebitmap::@5: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@13 mode_twoplanebitmap::@4
  [67] (byte*) mode_twoplanebitmap::gfxa#7 ← phi( mode_twoplanebitmap::@13/(byte*) mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::@4/(byte*) mode_twoplanebitmap::gfxa#1 ) [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#2 ] )
  [68] (byte) mode_twoplanebitmap::ax#1 ← ++ (byte) mode_twoplanebitmap::ax#2 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] )
  [69] if((byte) mode_twoplanebitmap::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto mode_twoplanebitmap::@3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] )
  to:mode_twoplanebitmap::@15
mode_twoplanebitmap::@15: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@5
  [70] (byte) mode_twoplanebitmap::ay#1 ← ++ (byte) mode_twoplanebitmap::ay#4 [ mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] )
  [71] if((byte) mode_twoplanebitmap::ay#1!=(byte/word/signed word/dword/signed dword) 200) goto mode_twoplanebitmap::@2 [ mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] )
  to:mode_twoplanebitmap::@6
mode_twoplanebitmap::@6: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@15 mode_twoplanebitmap::@17
  [72] (byte) mode_twoplanebitmap::by#4 ← phi( mode_twoplanebitmap::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@17/(byte) mode_twoplanebitmap::by#1 ) [ mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::by#4 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::by#4 ] )
  [72] (byte*) mode_twoplanebitmap::gfxb#3 ← phi( mode_twoplanebitmap::@15/(const byte*) TWOPLANE_PLANEB#0 mode_twoplanebitmap::@17/(byte*) mode_twoplanebitmap::gfxb#1 ) [ mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::by#4 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::by#4 ] )
  to:mode_twoplanebitmap::@7
mode_twoplanebitmap::@7: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@6 mode_twoplanebitmap::@7
  [73] (byte) mode_twoplanebitmap::bx#2 ← phi( mode_twoplanebitmap::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 mode_twoplanebitmap::@7/(byte) mode_twoplanebitmap::bx#1 ) [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] )
  [73] (byte*) mode_twoplanebitmap::gfxb#2 ← phi( mode_twoplanebitmap::@6/(byte*) mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::@7/(byte*) mode_twoplanebitmap::gfxb#1 ) [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] )
  [74] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) 15 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] )
  [75] (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#2 ] )
  [76] (byte) mode_twoplanebitmap::bx#1 ← ++ (byte) mode_twoplanebitmap::bx#2 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] )
  [77] if((byte) mode_twoplanebitmap::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto mode_twoplanebitmap::@7 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] )
  to:mode_twoplanebitmap::@17
mode_twoplanebitmap::@17: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@7
  [78] (byte) mode_twoplanebitmap::by#1 ← ++ (byte) mode_twoplanebitmap::by#4 [ mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] )
  [79] if((byte) mode_twoplanebitmap::by#1!=(byte/word/signed word/dword/signed dword) 200) goto mode_twoplanebitmap::@6 [ mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] )
  to:mode_twoplanebitmap::@8
mode_twoplanebitmap::@8: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@17 mode_twoplanebitmap::@24
  [80] if(true) goto mode_twoplanebitmap::@9 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@return: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@24 mode_twoplanebitmap::@8
  [81] return  [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:@return
mode_twoplanebitmap::@9: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@8
  [82] phi() [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  [83] call keyboard_key_pressed param-assignment [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
  [84] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0 [ keyboard_key_pressed::return#3 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#3 ] )
  to:mode_twoplanebitmap::@24
mode_twoplanebitmap::@24: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@9
  [85] (byte~) mode_twoplanebitmap::$19 ← (byte) keyboard_key_pressed::return#3 [ mode_twoplanebitmap::$19 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::$19 ] )
  [86] if((byte~) mode_twoplanebitmap::$19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@8 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@4: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@3
  [87] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) 255 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] )
  [88] (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#1 ] )
  to:mode_twoplanebitmap::@5
keyboard_key_pressed: scope:[keyboard_key_pressed]  from menu::@3 mode_twoplanebitmap::@9
  [89] (byte) keyboard_key_pressed::key#2 ← phi( menu::@3/(const byte) KEY_C#0 mode_twoplanebitmap::@9/(const byte) KEY_SPACE#0 ) [ keyboard_key_pressed::key#2 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 ] )
  [90] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] )
  [91] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#2 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] )
  [92] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] )
  [93] call keyboard_matrix_read param-assignment [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] )
  [94] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] )
  to:keyboard_key_pressed::@2
keyboard_key_pressed::@2: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [95] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] )
  [96] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@2
  [97] return  [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
  to:@return
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [98] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] )
  [99] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] )
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [100] return  [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] )
  to:@return
print_str_lines: scope:[print_str_lines]  from menu::@13
  [101] phi() [ ] ( main:2::menu:9::print_str_lines:27 [ ] )
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@9
  [102] (byte*) print_line_cursor#17 ← phi( print_str_lines/(const byte*) MENU_SCREEN#0 print_str_lines::@9/(byte*) print_line_cursor#19 ) [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] )
  [102] (byte*) print_char_cursor#19 ← phi( print_str_lines/(const byte*) MENU_SCREEN#0 print_str_lines::@9/(byte*~) print_char_cursor#55 ) [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] )
  [102] (byte*) print_str_lines::str#2 ← phi( print_str_lines/(const string) MENU_TEXT#0 print_str_lines::@9/(byte*) print_str_lines::str#0 ) [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] )
  [103] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] )
  to:print_str_lines::@return
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  [104] return  [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 ] )
  to:@return
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@5
  [105] (byte*) print_char_cursor#17 ← phi( print_str_lines::@1/(byte*) print_char_cursor#19 print_str_lines::@5/(byte*) print_char_cursor#32 ) [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 ] )
  [105] (byte*) print_str_lines::str#3 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#2 print_str_lines::@5/(byte*) print_str_lines::str#0 ) [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 ] )
  [106] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] )
  [107] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] )
  [108] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] )
  to:print_str_lines::@8
print_str_lines::@8: scope:[print_str_lines]  from print_str_lines::@4
  [109] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] )
  [110] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17 [ print_line_cursor#17 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#1 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#1 ] )
  to:print_str_lines::@5
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@4 print_str_lines::@8
  [111] (byte*) print_char_cursor#32 ← phi( print_str_lines::@4/(byte*) print_char_cursor#17 print_str_lines::@8/(byte*) print_char_cursor#1 ) [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 print_str_lines::ch#0 ] )
  [112] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 ] )
  to:print_str_lines::@9
print_str_lines::@9: scope:[print_str_lines]  from print_str_lines::@5
  [113] phi() [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 ] )
  [114] call print_ln param-assignment [ print_str_lines::str#0 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_str_lines::str#0 print_line_cursor#19 ] )
  [115] (byte*~) print_char_cursor#55 ← (byte*) print_line_cursor#19 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] )
  to:print_str_lines::@1
print_ln: scope:[print_ln]  from print_str_lines::@9
  [116] phi() [ print_line_cursor#17 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#17 print_char_cursor#32 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [117] (byte*) print_line_cursor#18 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#19 ) [ print_char_cursor#32 print_line_cursor#18 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_char_cursor#32 print_line_cursor#18 ] )
  [118] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] )
  [119] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [120] return  [ print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 ] )
  to:@return
print_cls: scope:[print_cls]  from menu::@12
  [121] phi() [ ] ( main:2::menu:9::print_cls:25 [ ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [122] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) MENU_SCREEN#0 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#2 ] )
  [123] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#2 ] )
  [124] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#1 ] )
  [125] if((byte*) print_cls::sc#1!=(const byte*) MENU_SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [126] return  [ ] ( main:2::menu:9::print_cls:25 [ ] )
  to:@return
print_set_screen: scope:[print_set_screen]  from menu::@6
  [127] phi() [ ] ( main:2::menu:9::print_set_screen:23 [ ] )
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  [128] return  [ ] ( main:2::menu:9::print_set_screen:23 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@21 dominated by  @begin @21 
@end dominated by  @end @begin @21 
main dominated by  main @begin @21 
main::@1 dominated by  main main::@1 @begin @21 
main::@return dominated by  main main::@1 @begin main::@return @21 
main::@2 dominated by  main main::@1 main::@2 @begin @21 
menu dominated by  main main::@1 main::@2 @begin menu @21 
menu::@1 dominated by  main main::@1 main::@2 @begin menu::@1 menu @21 
menu::@6 dominated by  main main::@1 main::@2 @begin menu::@6 menu::@1 menu @21 
menu::@12 dominated by  main main::@1 main::@2 @begin menu::@6 menu::@1 menu menu::@12 @21 
menu::@13 dominated by  main main::@1 main::@2 @begin menu::@6 menu::@1 menu menu::@13 menu::@12 @21 
menu::@2 dominated by  main main::@1 main::@2 @begin menu::@6 menu::@1 menu::@2 menu menu::@13 menu::@12 @21 
menu::@return dominated by  main main::@1 main::@2 @begin menu::@return menu::@6 menu::@1 menu::@2 menu menu::@13 menu::@12 @21 
menu::@3 dominated by  main main::@1 main::@2 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@13 menu::@12 @21 
menu::@15 dominated by  main main::@1 main::@2 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@13 menu::@12 menu::@15 @21 
menu::@9 dominated by  main main::@1 main::@2 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
menu::@5 dominated by  main main::@1 main::@2 @begin menu::@5 menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap dominated by  main mode_twoplanebitmap main::@1 main::@2 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@1 dominated by  mode_twoplanebitmap::@1 main mode_twoplanebitmap main::@1 main::@2 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@2 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 main mode_twoplanebitmap main::@1 main::@2 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@3 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 main::@2 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@13 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 main::@2 @begin mode_twoplanebitmap::@13 menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@5 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 main::@2 mode_twoplanebitmap::@5 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@15 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 main::@2 mode_twoplanebitmap::@5 @begin mode_twoplanebitmap::@15 menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@6 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 main::@2 mode_twoplanebitmap::@5 mode_twoplanebitmap::@6 @begin mode_twoplanebitmap::@15 menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@7 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 main::@2 mode_twoplanebitmap::@5 mode_twoplanebitmap::@6 mode_twoplanebitmap::@7 @begin mode_twoplanebitmap::@15 menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@17 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 main::@2 mode_twoplanebitmap::@5 mode_twoplanebitmap::@6 mode_twoplanebitmap::@7 @begin mode_twoplanebitmap::@17 mode_twoplanebitmap::@15 menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@8 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 main::@2 mode_twoplanebitmap::@5 mode_twoplanebitmap::@6 mode_twoplanebitmap::@7 mode_twoplanebitmap::@8 @begin mode_twoplanebitmap::@17 mode_twoplanebitmap::@15 menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@return dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 main::@2 mode_twoplanebitmap::@5 mode_twoplanebitmap::@6 mode_twoplanebitmap::@7 mode_twoplanebitmap::@8 @begin mode_twoplanebitmap::@17 mode_twoplanebitmap::@15 menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 mode_twoplanebitmap::@return menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@9 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 mode_twoplanebitmap::@9 main::@2 mode_twoplanebitmap::@5 mode_twoplanebitmap::@6 mode_twoplanebitmap::@7 mode_twoplanebitmap::@8 @begin mode_twoplanebitmap::@17 mode_twoplanebitmap::@15 menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@24 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 main mode_twoplanebitmap main::@1 mode_twoplanebitmap::@9 main::@2 mode_twoplanebitmap::@5 mode_twoplanebitmap::@6 mode_twoplanebitmap::@7 mode_twoplanebitmap::@8 @begin mode_twoplanebitmap::@24 mode_twoplanebitmap::@17 mode_twoplanebitmap::@15 menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
mode_twoplanebitmap::@4 dominated by  mode_twoplanebitmap::@1 mode_twoplanebitmap::@2 mode_twoplanebitmap::@3 mode_twoplanebitmap::@4 main mode_twoplanebitmap main::@1 main::@2 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu menu::@9 menu::@13 menu::@12 menu::@15 @21 
keyboard_key_pressed dominated by  main main::@1 main::@2 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu keyboard_key_pressed menu::@13 menu::@12 @21 
keyboard_key_pressed::@2 dominated by  main main::@1 main::@2 keyboard_key_pressed::@2 @begin menu::@6 menu::@3 menu::@1 menu::@2 menu keyboard_key_pressed menu::@13 menu::@12 @21 
keyboard_key_pressed::@return dominated by  main main::@1 main::@2 keyboard_key_pressed::@2 @begin keyboard_key_pressed::@return menu::@6 menu::@3 menu::@1 menu::@2 menu keyboard_key_pressed menu::@13 menu::@12 @21 
keyboard_matrix_read dominated by  main main::@1 main::@2 @begin keyboard_matrix_read menu::@6 menu::@3 menu::@1 menu::@2 menu keyboard_key_pressed menu::@13 menu::@12 @21 
keyboard_matrix_read::@return dominated by  main main::@1 main::@2 @begin keyboard_matrix_read menu::@6 menu::@3 menu::@1 menu::@2 menu keyboard_matrix_read::@return keyboard_key_pressed menu::@13 menu::@12 @21 
print_str_lines dominated by  main main::@1 main::@2 print_str_lines @begin menu::@6 menu::@1 menu menu::@13 menu::@12 @21 
print_str_lines::@1 dominated by  main main::@1 main::@2 print_str_lines @begin menu::@6 menu::@1 print_str_lines::@1 menu menu::@13 menu::@12 @21 
print_str_lines::@return dominated by  main main::@1 main::@2 print_str_lines @begin print_str_lines::@return menu::@6 menu::@1 print_str_lines::@1 menu menu::@13 menu::@12 @21 
print_str_lines::@4 dominated by  main main::@1 main::@2 print_str_lines @begin menu::@6 menu::@1 print_str_lines::@1 print_str_lines::@4 menu menu::@13 menu::@12 @21 
print_str_lines::@8 dominated by  main main::@1 main::@2 print_str_lines @begin menu::@6 menu::@1 print_str_lines::@1 print_str_lines::@4 menu print_str_lines::@8 menu::@13 menu::@12 @21 
print_str_lines::@5 dominated by  main main::@1 main::@2 print_str_lines @begin menu::@6 menu::@1 print_str_lines::@1 print_str_lines::@4 menu print_str_lines::@5 menu::@13 menu::@12 @21 
print_str_lines::@9 dominated by  main main::@1 main::@2 print_str_lines @begin print_str_lines::@9 menu::@6 menu::@1 print_str_lines::@1 print_str_lines::@4 menu print_str_lines::@5 menu::@13 menu::@12 @21 
print_ln dominated by  main main::@1 main::@2 print_str_lines @begin print_ln print_str_lines::@9 menu::@6 menu::@1 print_str_lines::@1 print_str_lines::@4 menu print_str_lines::@5 menu::@13 menu::@12 @21 
print_ln::@1 dominated by  print_ln::@1 main main::@1 main::@2 print_str_lines @begin print_ln print_str_lines::@9 menu::@6 menu::@1 print_str_lines::@1 print_str_lines::@4 menu print_str_lines::@5 menu::@13 menu::@12 @21 
print_ln::@return dominated by  print_ln::@1 main print_ln::@return main::@1 main::@2 print_str_lines @begin print_ln print_str_lines::@9 menu::@6 menu::@1 print_str_lines::@1 print_str_lines::@4 menu print_str_lines::@5 menu::@13 menu::@12 @21 
print_cls dominated by  main main::@1 main::@2 @begin menu::@6 menu::@1 menu print_cls menu::@12 @21 
print_cls::@1 dominated by  main main::@1 main::@2 @begin menu::@6 menu::@1 print_cls::@1 menu print_cls menu::@12 @21 
print_cls::@return dominated by  main main::@1 main::@2 @begin print_cls::@return menu::@6 menu::@1 print_cls::@1 menu print_cls menu::@12 @21 
print_set_screen dominated by  main main::@1 main::@2 @begin print_set_screen menu::@6 menu::@1 menu @21 
print_set_screen::@return dominated by  main main::@1 main::@2 @begin print_set_screen menu::@6 menu::@1 menu print_set_screen::@return @21 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Found back edge: Loop head: menu::@1 tails: menu::@1 blocks: null
Found back edge: Loop head: menu::@2 tails: menu::@5 blocks: null
Found back edge: Loop head: mode_twoplanebitmap::@1 tails: mode_twoplanebitmap::@1 blocks: null
Found back edge: Loop head: mode_twoplanebitmap::@3 tails: mode_twoplanebitmap::@5 blocks: null
Found back edge: Loop head: mode_twoplanebitmap::@2 tails: mode_twoplanebitmap::@15 blocks: null
Found back edge: Loop head: mode_twoplanebitmap::@7 tails: mode_twoplanebitmap::@7 blocks: null
Found back edge: Loop head: mode_twoplanebitmap::@6 tails: mode_twoplanebitmap::@17 blocks: null
Found back edge: Loop head: mode_twoplanebitmap::@8 tails: mode_twoplanebitmap::@24 blocks: null
Found back edge: Loop head: print_str_lines::@4 tails: print_str_lines::@5 blocks: null
Found back edge: Loop head: print_str_lines::@1 tails: print_str_lines::@9 blocks: null
Found back edge: Loop head: print_ln::@1 tails: print_ln::@1 blocks: null
Found back edge: Loop head: print_cls::@1 tails: print_cls::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
Populated: Loop head: menu::@1 tails: menu::@1 blocks: menu::@1 
Populated: Loop head: menu::@2 tails: menu::@5 blocks: menu::@5 menu::@15 menu::@3 menu::@2 
Populated: Loop head: mode_twoplanebitmap::@1 tails: mode_twoplanebitmap::@1 blocks: mode_twoplanebitmap::@1 
Populated: Loop head: mode_twoplanebitmap::@3 tails: mode_twoplanebitmap::@5 blocks: mode_twoplanebitmap::@5 mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 mode_twoplanebitmap::@3 
Populated: Loop head: mode_twoplanebitmap::@2 tails: mode_twoplanebitmap::@15 blocks: mode_twoplanebitmap::@15 mode_twoplanebitmap::@5 mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 mode_twoplanebitmap::@3 mode_twoplanebitmap::@2 
Populated: Loop head: mode_twoplanebitmap::@7 tails: mode_twoplanebitmap::@7 blocks: mode_twoplanebitmap::@7 
Populated: Loop head: mode_twoplanebitmap::@6 tails: mode_twoplanebitmap::@17 blocks: mode_twoplanebitmap::@17 mode_twoplanebitmap::@7 mode_twoplanebitmap::@6 
Populated: Loop head: mode_twoplanebitmap::@8 tails: mode_twoplanebitmap::@24 blocks: mode_twoplanebitmap::@24 mode_twoplanebitmap::@9 mode_twoplanebitmap::@8 
Populated: Loop head: print_str_lines::@4 tails: print_str_lines::@5 blocks: print_str_lines::@5 print_str_lines::@4 print_str_lines::@8 
Populated: Loop head: print_str_lines::@1 tails: print_str_lines::@9 blocks: print_str_lines::@9 print_str_lines::@5 print_str_lines::@4 print_str_lines::@8 print_str_lines::@1 
Populated: Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Populated: Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
Loop head: menu::@1 tails: menu::@1 blocks: menu::@1 
Loop head: menu::@2 tails: menu::@5 blocks: menu::@5 menu::@15 menu::@3 menu::@2 
Loop head: mode_twoplanebitmap::@1 tails: mode_twoplanebitmap::@1 blocks: mode_twoplanebitmap::@1 
Loop head: mode_twoplanebitmap::@3 tails: mode_twoplanebitmap::@5 blocks: mode_twoplanebitmap::@5 mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 mode_twoplanebitmap::@3 
Loop head: mode_twoplanebitmap::@2 tails: mode_twoplanebitmap::@15 blocks: mode_twoplanebitmap::@15 mode_twoplanebitmap::@5 mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 mode_twoplanebitmap::@3 mode_twoplanebitmap::@2 
Loop head: mode_twoplanebitmap::@7 tails: mode_twoplanebitmap::@7 blocks: mode_twoplanebitmap::@7 
Loop head: mode_twoplanebitmap::@6 tails: mode_twoplanebitmap::@17 blocks: mode_twoplanebitmap::@17 mode_twoplanebitmap::@7 mode_twoplanebitmap::@6 
Loop head: mode_twoplanebitmap::@8 tails: mode_twoplanebitmap::@24 blocks: mode_twoplanebitmap::@24 mode_twoplanebitmap::@9 mode_twoplanebitmap::@8 
Loop head: print_str_lines::@4 tails: print_str_lines::@5 blocks: print_str_lines::@5 print_str_lines::@4 print_str_lines::@8 
Loop head: print_str_lines::@1 tails: print_str_lines::@9 blocks: print_str_lines::@9 print_str_lines::@5 print_str_lines::@4 print_str_lines::@8 print_str_lines::@1 
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
Found 2 loops in scope [menu]
  Loop head: menu::@1 tails: menu::@1 blocks: menu::@1 
  Loop head: menu::@2 tails: menu::@5 blocks: menu::@5 menu::@15 menu::@3 menu::@2 
Found 0 loops in scope [print_set_screen]
Found 1 loops in scope [print_cls]
  Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Found 2 loops in scope [print_str_lines]
  Loop head: print_str_lines::@4 tails: print_str_lines::@5 blocks: print_str_lines::@5 print_str_lines::@4 print_str_lines::@8 
  Loop head: print_str_lines::@1 tails: print_str_lines::@9 blocks: print_str_lines::@9 print_str_lines::@5 print_str_lines::@4 print_str_lines::@8 print_str_lines::@1 
null depth in calling loop Loop head: mode_twoplanebitmap::@8 tails: mode_twoplanebitmap::@24 blocks: mode_twoplanebitmap::@24 mode_twoplanebitmap::@9 mode_twoplanebitmap::@8  in scope keyboard_key_pressed
Found 0 loops in scope [keyboard_key_pressed]
Found 6 loops in scope [mode_twoplanebitmap]
  Loop head: mode_twoplanebitmap::@1 tails: mode_twoplanebitmap::@1 blocks: mode_twoplanebitmap::@1 
  Loop head: mode_twoplanebitmap::@3 tails: mode_twoplanebitmap::@5 blocks: mode_twoplanebitmap::@5 mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 mode_twoplanebitmap::@3 
  Loop head: mode_twoplanebitmap::@2 tails: mode_twoplanebitmap::@15 blocks: mode_twoplanebitmap::@15 mode_twoplanebitmap::@5 mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 mode_twoplanebitmap::@3 mode_twoplanebitmap::@2 
  Loop head: mode_twoplanebitmap::@7 tails: mode_twoplanebitmap::@7 blocks: mode_twoplanebitmap::@7 
  Loop head: mode_twoplanebitmap::@6 tails: mode_twoplanebitmap::@17 blocks: mode_twoplanebitmap::@17 mode_twoplanebitmap::@7 mode_twoplanebitmap::@6 
  Loop head: mode_twoplanebitmap::@8 tails: mode_twoplanebitmap::@24 blocks: mode_twoplanebitmap::@24 mode_twoplanebitmap::@9 mode_twoplanebitmap::@8 
Found 1 loops in scope [print_ln]
  Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Found 0 loops in scope [keyboard_matrix_read]
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  depth: 1
Loop head: menu::@1 tails: menu::@1 blocks: menu::@1  depth: 2
Loop head: menu::@2 tails: menu::@5 blocks: menu::@5 menu::@15 menu::@3 menu::@2  depth: 2
Loop head: mode_twoplanebitmap::@1 tails: mode_twoplanebitmap::@1 blocks: mode_twoplanebitmap::@1  depth: 2
Loop head: mode_twoplanebitmap::@3 tails: mode_twoplanebitmap::@5 blocks: mode_twoplanebitmap::@5 mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 mode_twoplanebitmap::@3  depth: 3
Loop head: mode_twoplanebitmap::@2 tails: mode_twoplanebitmap::@15 blocks: mode_twoplanebitmap::@15 mode_twoplanebitmap::@5 mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 mode_twoplanebitmap::@3 mode_twoplanebitmap::@2  depth: 2
Loop head: mode_twoplanebitmap::@7 tails: mode_twoplanebitmap::@7 blocks: mode_twoplanebitmap::@7  depth: 3
Loop head: mode_twoplanebitmap::@6 tails: mode_twoplanebitmap::@17 blocks: mode_twoplanebitmap::@17 mode_twoplanebitmap::@7 mode_twoplanebitmap::@6  depth: 2
Loop head: mode_twoplanebitmap::@8 tails: mode_twoplanebitmap::@24 blocks: mode_twoplanebitmap::@24 mode_twoplanebitmap::@9 mode_twoplanebitmap::@8  depth: 2
Loop head: print_str_lines::@4 tails: print_str_lines::@5 blocks: print_str_lines::@5 print_str_lines::@4 print_str_lines::@8  depth: 3
Loop head: print_str_lines::@1 tails: print_str_lines::@9 blocks: print_str_lines::@9 print_str_lines::@5 print_str_lines::@4 print_str_lines::@8 print_str_lines::@1  depth: 2
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1  depth: 3
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1  depth: 2


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte) BLUE
(byte*) BORDERCOL
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_B
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) COLS
(byte*) DTV_CONTROL
(byte) DTV_CONTROL_HIGHCOLOR_ON
(byte) DTV_CONTROL_LINEAR_ADDRESSING_ON
(byte*) DTV_FEATURE
(byte) DTV_FEATURE_ENABLE
(byte*) DTV_GRAPHICS_VIC_BANK
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_STEP
(byte) GREEN
(byte) KEY_C
(byte) KEY_SPACE
(byte) LIGHT_GREEN
(byte*) MENU_CHARSET
(byte*) MENU_SCREEN
(byte[]) MENU_TEXT
(byte*) TWOPLANE_PLANEA
(byte*) TWOPLANE_PLANEB
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$2 4.0
(byte) keyboard_key_pressed::colidx
(byte) keyboard_key_pressed::colidx#0 0.6666666666666666
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::key#2 2.0
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0 51.0
(byte) keyboard_key_pressed::return#2 202.0
(byte) keyboard_key_pressed::return#3 202.0
(byte) keyboard_key_pressed::rowidx
(byte) keyboard_key_pressed::rowidx#0 4.0
(byte[]) keyboard_matrix_col_bitmask
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 1.3333333333333333
(byte) keyboard_matrix_read::return#2 4.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 4.0
(byte[8]) keyboard_matrix_row_bitmask
(void()) main()
(void()) menu()
(byte~) menu::$22 202.0
(byte*) menu::c
(byte*) menu::c#1 151.5
(byte*) menu::c#2 151.5
(byte*) menu::last
(void()) mode_twoplanebitmap()
(byte~) mode_twoplanebitmap::$12 2002.0
(byte~) mode_twoplanebitmap::$19 202.0
(byte~) mode_twoplanebitmap::$9 202.0
(byte) mode_twoplanebitmap::ax
(byte) mode_twoplanebitmap::ax#1 1501.5
(byte) mode_twoplanebitmap::ax#2 250.25
(byte) mode_twoplanebitmap::ay
(byte) mode_twoplanebitmap::ay#1 151.5
(byte) mode_twoplanebitmap::ay#4 109.36363636363637
(byte) mode_twoplanebitmap::bx
(byte) mode_twoplanebitmap::bx#1 1501.5
(byte) mode_twoplanebitmap::bx#2 667.3333333333334
(byte) mode_twoplanebitmap::by
(byte) mode_twoplanebitmap::by#1 151.5
(byte) mode_twoplanebitmap::by#4 33.666666666666664
(byte*) mode_twoplanebitmap::c
(byte*) mode_twoplanebitmap::c#1 151.5
(byte*) mode_twoplanebitmap::c#2 134.66666666666666
(byte*) mode_twoplanebitmap::gfxa
(byte*) mode_twoplanebitmap::gfxa#1 2002.0
(byte*) mode_twoplanebitmap::gfxa#2 2002.0
(byte*) mode_twoplanebitmap::gfxa#3 1021.2
(byte*) mode_twoplanebitmap::gfxa#6 202.0
(byte*) mode_twoplanebitmap::gfxa#7 620.8
(byte*) mode_twoplanebitmap::gfxb
(byte*) mode_twoplanebitmap::gfxb#1 420.59999999999997
(byte*) mode_twoplanebitmap::gfxb#2 1552.0
(byte*) mode_twoplanebitmap::gfxb#3 202.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 2002.0
(byte*) print_char_cursor#11 110.0
(byte*) print_char_cursor#17 821.0
(byte*) print_char_cursor#19 14.2
(byte*) print_char_cursor#32 572.0
(byte*~) print_char_cursor#55 202.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 151.5
(byte*) print_cls::sc#2 151.5
(byte*) print_line_cursor
(byte*) print_line_cursor#10 110.0
(byte*) print_line_cursor#17 4.5600000000000005
(byte*) print_line_cursor#18 2004.0
(byte*) print_line_cursor#19 641.0
(void()) print_ln()
(byte*) print_screen
(byte*) print_screen#13
(void()) print_set_screen((byte*) print_set_screen::screen)
(byte*) print_set_screen::screen
(void()) print_str_lines((byte*) print_str_lines::str)
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0 667.3333333333334
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0 233.66666666666669
(byte*) print_str_lines::str#2 151.5
(byte*) print_str_lines::str#3 1552.0

Initial phi equivalence classes
[ print_screen#13 ]
[ menu::c#2 menu::c#1 ]
[ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 ]
[ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
[ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]
[ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
[ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
[ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ]
[ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
[ keyboard_key_pressed::key#2 ]
[ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
[ print_char_cursor#17 print_char_cursor#11 print_char_cursor#19 print_char_cursor#55 print_char_cursor#32 print_char_cursor#1 ]
[ print_line_cursor#18 print_line_cursor#10 print_line_cursor#17 print_line_cursor#19 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable keyboard_key_pressed::return#2 to zero page equivalence class [ keyboard_key_pressed::return#2 ]
Added variable menu::$22 to zero page equivalence class [ menu::$22 ]
Added variable mode_twoplanebitmap::$9 to zero page equivalence class [ mode_twoplanebitmap::$9 ]
Added variable mode_twoplanebitmap::$12 to zero page equivalence class [ mode_twoplanebitmap::$12 ]
Added variable keyboard_key_pressed::return#3 to zero page equivalence class [ keyboard_key_pressed::return#3 ]
Added variable mode_twoplanebitmap::$19 to zero page equivalence class [ mode_twoplanebitmap::$19 ]
Added variable keyboard_key_pressed::colidx#0 to zero page equivalence class [ keyboard_key_pressed::colidx#0 ]
Added variable keyboard_key_pressed::rowidx#0 to zero page equivalence class [ keyboard_key_pressed::rowidx#0 ]
Added variable keyboard_matrix_read::rowid#0 to zero page equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to zero page equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_key_pressed::$2 to zero page equivalence class [ keyboard_key_pressed::$2 ]
Added variable keyboard_key_pressed::return#0 to zero page equivalence class [ keyboard_key_pressed::return#0 ]
Added variable keyboard_matrix_read::return#0 to zero page equivalence class [ keyboard_matrix_read::return#0 ]
Added variable print_str_lines::ch#0 to zero page equivalence class [ print_str_lines::ch#0 ]
Complete equivalence classes
[ print_screen#13 ]
[ menu::c#2 menu::c#1 ]
[ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 ]
[ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
[ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]
[ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
[ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
[ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ]
[ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
[ keyboard_key_pressed::key#2 ]
[ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
[ print_char_cursor#17 print_char_cursor#11 print_char_cursor#19 print_char_cursor#55 print_char_cursor#32 print_char_cursor#1 ]
[ print_line_cursor#18 print_line_cursor#10 print_line_cursor#17 print_line_cursor#19 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ keyboard_key_pressed::return#2 ]
[ menu::$22 ]
[ mode_twoplanebitmap::$9 ]
[ mode_twoplanebitmap::$12 ]
[ keyboard_key_pressed::return#3 ]
[ mode_twoplanebitmap::$19 ]
[ keyboard_key_pressed::colidx#0 ]
[ keyboard_key_pressed::rowidx#0 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_key_pressed::$2 ]
[ keyboard_key_pressed::return#0 ]
[ keyboard_matrix_read::return#0 ]
[ print_str_lines::ch#0 ]
Allocated zp ZP_WORD:2 [ print_screen#13 ]
Allocated zp ZP_WORD:4 [ menu::c#2 menu::c#1 ]
Allocated zp ZP_WORD:6 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 ]
Allocated zp ZP_BYTE:8 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
Allocated zp ZP_WORD:9 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ]
Allocated zp ZP_BYTE:11 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Allocated zp ZP_BYTE:12 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Allocated zp ZP_WORD:13 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ]
Allocated zp ZP_BYTE:15 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
Allocated zp ZP_BYTE:16 [ keyboard_key_pressed::key#2 ]
Allocated zp ZP_WORD:17 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
Allocated zp ZP_WORD:19 [ print_char_cursor#17 print_char_cursor#11 print_char_cursor#19 print_char_cursor#55 print_char_cursor#32 print_char_cursor#1 ]
Allocated zp ZP_WORD:21 [ print_line_cursor#18 print_line_cursor#10 print_line_cursor#17 print_line_cursor#19 ]
Allocated zp ZP_WORD:23 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:25 [ keyboard_key_pressed::return#2 ]
Allocated zp ZP_BYTE:26 [ menu::$22 ]
Allocated zp ZP_BYTE:27 [ mode_twoplanebitmap::$9 ]
Allocated zp ZP_BYTE:28 [ mode_twoplanebitmap::$12 ]
Allocated zp ZP_BYTE:29 [ keyboard_key_pressed::return#3 ]
Allocated zp ZP_BYTE:30 [ mode_twoplanebitmap::$19 ]
Allocated zp ZP_BYTE:31 [ keyboard_key_pressed::colidx#0 ]
Allocated zp ZP_BYTE:32 [ keyboard_key_pressed::rowidx#0 ]
Allocated zp ZP_BYTE:33 [ keyboard_matrix_read::rowid#0 ]
Allocated zp ZP_BYTE:34 [ keyboard_matrix_read::return#2 ]
Allocated zp ZP_BYTE:35 [ keyboard_key_pressed::$2 ]
Allocated zp ZP_BYTE:36 [ keyboard_key_pressed::return#0 ]
Allocated zp ZP_BYTE:37 [ keyboard_matrix_read::return#0 ]
Allocated zp ZP_BYTE:38 [ print_str_lines::ch#0 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  .label COLS = $d800
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .const GREEN = 5
  .const BLUE = 6
  .const LIGHT_GREEN = $d
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  .label DTV_CONTROL = $d03c
  .const DTV_CONTROL_LINEAR_ADDRESSING_ON = 1
  .const DTV_CONTROL_HIGHCOLOR_ON = 4
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_C = $14
  .const KEY_SPACE = $3c
  .label MENU_SCREEN = $8000
  .label MENU_CHARSET = $9800
  .label TWOPLANE_PLANEA = $4000
  .label TWOPLANE_PLANEB = $6000
  .label print_char_cursor = $13
  .label print_line_cursor = $15
  .label print_screen = 2
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @21 [phi:@begin->@21]
b21_from_bbegin:
  jmp b21
//SEG4 @21
b21:
//SEG5 [2] call main param-assignment [ ] ( )
  jsr main
//SEG6 [3] phi from @21 to @end [phi:@21->@end]
bend_from_b21:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte*) print_char_cursor#11 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG12 [5] phi (byte*) print_line_cursor#10 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG13 [5] phi (byte*) print_screen#13 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_screen
    lda #>$400
    sta print_screen+1
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] if(true) goto main::@2 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b2_from_b1
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [7] return  [ ] ( main:2 [ ] )
    rts
  //SEG18 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG19 main::@2
  b2:
  //SEG20 [9] call menu param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2 [ print_line_cursor#17 print_char_cursor#19 ] )
    jsr menu
  //SEG21 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG22 [5] phi (byte*) print_char_cursor#11 = (byte*) print_char_cursor#19 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG23 [5] phi (byte*) print_line_cursor#10 = (byte*) print_line_cursor#17 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG24 [5] phi (byte*) print_screen#13 = (const byte*) MENU_SCREEN#0 [phi:main::@2->main::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta print_screen
    lda #>MENU_SCREEN
    sta print_screen+1
    jmp b1
}
//SEG25 menu
menu: {
    .label last = MENU_SCREEN+$3e7
    .label _22 = $1a
    .label c = 4
  //SEG26 [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) MENU_CHARSET#0/(dword/signed dword) 65536 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #($ffffffff&MENU_CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG27 [11] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG28 [12] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG29 [13] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) MENU_CHARSET#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3^MENU_CHARSET/$4000
    sta CIA2_PORT_A
  //SEG30 [14] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG31 [15] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG32 [16] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) MENU_SCREEN#0&(word/signed word/dword/signed dword) 16383/(byte/signed byte/word/signed word/dword/signed dword) 64|((word))(const byte*) MENU_CHARSET#0&(word/signed word/dword/signed dword) 16383/(word/signed word/dword/signed dword) 1024 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #(MENU_SCREEN&$3fff)/$40|(MENU_CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG33 [17] phi from menu to menu::@1 [phi:menu->menu::@1]
  b1_from_menu:
  //SEG34 [17] phi (byte*) menu::c#2 = (const byte*) COLS#0 [phi:menu->menu::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta c
    lda #>COLS
    sta c+1
    jmp b1
  //SEG35 [17] phi from menu::@1 to menu::@1 [phi:menu::@1->menu::@1]
  b1_from_b1:
  //SEG36 [17] phi (byte*) menu::c#2 = (byte*) menu::c#1 [phi:menu::@1->menu::@1#0] -- register_copy 
    jmp b1
  //SEG37 menu::@1
  b1:
  //SEG38 [18] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 [ menu::c#2 ] ( main:2::menu:9 [ menu::c#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #LIGHT_GREEN
    ldy #0
    sta (c),y
  //SEG39 [19] (byte*) menu::c#1 ← ++ (byte*) menu::c#2 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] ) -- pbuz1=_inc_pbuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG40 [20] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto menu::@1 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda c+1
    cmp #>COLS+$3e8
    bne b1_from_b1
    lda c
    cmp #<COLS+$3e8
    bne b1_from_b1
    jmp b6
  //SEG41 menu::@6
  b6:
  //SEG42 [21] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta BGCOL
  //SEG43 [22] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG44 [23] call print_set_screen param-assignment [ ] ( main:2::menu:9 [ ] )
  //SEG45 [127] phi from menu::@6 to print_set_screen [phi:menu::@6->print_set_screen]
  print_set_screen_from_b6:
    jsr print_set_screen
  //SEG46 [24] phi from menu::@6 to menu::@12 [phi:menu::@6->menu::@12]
  b12_from_b6:
    jmp b12
  //SEG47 menu::@12
  b12:
  //SEG48 [25] call print_cls param-assignment [ ] ( main:2::menu:9 [ ] )
  //SEG49 [121] phi from menu::@12 to print_cls [phi:menu::@12->print_cls]
  print_cls_from_b12:
    jsr print_cls
  //SEG50 [26] phi from menu::@12 to menu::@13 [phi:menu::@12->menu::@13]
  b13_from_b12:
    jmp b13
  //SEG51 menu::@13
  b13:
  //SEG52 [27] call print_str_lines param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  //SEG53 [101] phi from menu::@13 to print_str_lines [phi:menu::@13->print_str_lines]
  print_str_lines_from_b13:
    jsr print_str_lines
    jmp b2
  //SEG54 menu::@2
  b2:
  //SEG55 [28] if(true) goto menu::@3 [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] ) -- true_then_la1 
    jmp b3_from_b2
    jmp breturn
  //SEG56 menu::@return
  breturn:
  //SEG57 [29] return  [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
    rts
  //SEG58 [30] phi from menu::@2 to menu::@3 [phi:menu::@2->menu::@3]
  b3_from_b2:
    jmp b3
  //SEG59 menu::@3
  b3:
  //SEG60 [31] call keyboard_key_pressed param-assignment [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
  //SEG61 [89] phi from menu::@3 to keyboard_key_pressed [phi:menu::@3->keyboard_key_pressed]
  keyboard_key_pressed_from_b3:
  //SEG62 [89] phi (byte) keyboard_key_pressed::key#2 = (const byte) KEY_C#0 [phi:menu::@3->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_C
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG63 [32] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#2 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#2 ] ) -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_2
    jmp b15
  //SEG64 menu::@15
  b15:
  //SEG65 [33] (byte~) menu::$22 ← (byte) keyboard_key_pressed::return#2 [ print_line_cursor#17 print_char_cursor#19 menu::$22 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 menu::$22 ] ) -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_2
    sta _22
  //SEG66 [34] if((byte~) menu::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@5 [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] ) -- vbuz1_eq_0_then_la1 
    lda _22
    beq b5
  //SEG67 [35] phi from menu::@15 to menu::@9 [phi:menu::@15->menu::@9]
  b9_from_b15:
    jmp b9
  //SEG68 menu::@9
  b9:
  //SEG69 [36] call mode_twoplanebitmap param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
    jsr mode_twoplanebitmap
    jmp breturn
  //SEG70 menu::@5
  b5:
  //SEG71 [37] *((const byte*) menu::last#0) ← ++ *((const byte*) menu::last#0) [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc last
    jmp b2
}
//SEG72 mode_twoplanebitmap
mode_twoplanebitmap: {
    .label _9 = $1b
    .label _12 = $1c
    .label _19 = $1e
    .label c = 6
    .label gfxa = 9
    .label ax = $b
    .label ay = 8
    .label gfxb = $d
    .label bx = $f
    .label by = $c
  //SEG73 [38] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_CONTROL_HIGHCOLOR_ON#0|(const byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_CONTROL_HIGHCOLOR_ON|DTV_CONTROL_LINEAR_ADDRESSING_ON
    sta DTV_CONTROL
  //SEG74 [39] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG75 [40] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG76 [41] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #<TWOPLANE_PLANEA
    sta DTV_PLANEA_START_LO
  //SEG77 [42] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #>TWOPLANE_PLANEA
    sta DTV_PLANEA_START_MI
  //SEG78 [43] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG79 [44] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG80 [45] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG81 [46] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG82 [47] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #<TWOPLANE_PLANEB
    sta DTV_PLANEB_START_LO
  //SEG83 [48] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #>TWOPLANE_PLANEB
    sta DTV_PLANEB_START_MI
  //SEG84 [49] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG85 [50] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG86 [51] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG87 [52] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG88 [53] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG89 [54] *((const byte*) BGCOL1#0) ← (const byte) GREEN#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BGCOL1
  //SEG90 [55] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL2
  //SEG91 [56] phi from mode_twoplanebitmap to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1]
  b1_from_mode_twoplanebitmap:
  //SEG92 [56] phi (byte*) mode_twoplanebitmap::c#2 = (const byte*) COLS#0 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta c
    lda #>COLS
    sta c+1
    jmp b1
  //SEG93 [56] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1]
  b1_from_b1:
  //SEG94 [56] phi (byte*) mode_twoplanebitmap::c#2 = (byte*) mode_twoplanebitmap::c#1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1#0] -- register_copy 
    jmp b1
  //SEG95 mode_twoplanebitmap::@1
  b1:
  //SEG96 [57] (byte~) mode_twoplanebitmap::$9 ← < (byte*) mode_twoplanebitmap::c#2 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::$9 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 mode_twoplanebitmap::$9 ] ) -- vbuz1=_lo_pbuz2 
    lda c
    sta _9
  //SEG97 [58] *((byte*) mode_twoplanebitmap::c#2) ← (byte~) mode_twoplanebitmap::$9 [ mode_twoplanebitmap::c#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 ] ) -- _deref_pbuz1=vbuz2 
    lda _9
    ldy #0
    sta (c),y
  //SEG98 [59] (byte*) mode_twoplanebitmap::c#1 ← ++ (byte*) mode_twoplanebitmap::c#2 [ mode_twoplanebitmap::c#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#1 ] ) -- pbuz1=_inc_pbuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG99 [60] if((byte*) mode_twoplanebitmap::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto mode_twoplanebitmap::@1 [ mode_twoplanebitmap::c#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda c+1
    cmp #>COLS+$3e8
    bne b1_from_b1
    lda c
    cmp #<COLS+$3e8
    bne b1_from_b1
  //SEG100 [61] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@2]
  b2_from_b1:
  //SEG101 [61] phi (byte*) mode_twoplanebitmap::gfxa#6 = (const byte*) TWOPLANE_PLANEA#0 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@2#0] -- pbuz1=pbuc1 
    lda #<TWOPLANE_PLANEA
    sta gfxa
    lda #>TWOPLANE_PLANEA
    sta gfxa+1
  //SEG102 [61] phi (byte) mode_twoplanebitmap::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b2
  //SEG103 [61] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@2]
  b2_from_b15:
  //SEG104 [61] phi (byte*) mode_twoplanebitmap::gfxa#6 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@2#0] -- register_copy 
  //SEG105 [61] phi (byte) mode_twoplanebitmap::ay#4 = (byte) mode_twoplanebitmap::ay#1 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@2#1] -- register_copy 
    jmp b2
  //SEG106 mode_twoplanebitmap::@2
  b2:
  //SEG107 [62] phi from mode_twoplanebitmap::@2 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3]
  b3_from_b2:
  //SEG108 [62] phi (byte) mode_twoplanebitmap::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta ax
  //SEG109 [62] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#6 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#1] -- register_copy 
    jmp b3
  //SEG110 [62] phi from mode_twoplanebitmap::@5 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3]
  b3_from_b5:
  //SEG111 [62] phi (byte) mode_twoplanebitmap::ax#2 = (byte) mode_twoplanebitmap::ax#1 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3#0] -- register_copy 
  //SEG112 [62] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3#1] -- register_copy 
    jmp b3
  //SEG113 mode_twoplanebitmap::@3
  b3:
  //SEG114 [63] (byte~) mode_twoplanebitmap::$12 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #4
    and ay
    sta _12
  //SEG115 [64] if((byte~) mode_twoplanebitmap::$12!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) -- vbuz1_neq_0_then_la1 
    lda _12
    bne b4
    jmp b13
  //SEG116 mode_twoplanebitmap::@13
  b13:
  //SEG117 [65] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
  //SEG118 [66] (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#2 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG119 [67] phi from mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 to mode_twoplanebitmap::@5 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@4->mode_twoplanebitmap::@5]
  b5_from_b13:
  b5_from_b4:
  //SEG120 [67] phi (byte*) mode_twoplanebitmap::gfxa#7 = (byte*) mode_twoplanebitmap::gfxa#2 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@4->mode_twoplanebitmap::@5#0] -- register_copy 
    jmp b5
  //SEG121 mode_twoplanebitmap::@5
  b5:
  //SEG122 [68] (byte) mode_twoplanebitmap::ax#1 ← ++ (byte) mode_twoplanebitmap::ax#2 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ) -- vbuz1=_inc_vbuz1 
    inc ax
  //SEG123 [69] if((byte) mode_twoplanebitmap::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto mode_twoplanebitmap::@3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ax
    cmp #$28
    bne b3_from_b5
    jmp b15
  //SEG124 mode_twoplanebitmap::@15
  b15:
  //SEG125 [70] (byte) mode_twoplanebitmap::ay#1 ← ++ (byte) mode_twoplanebitmap::ay#4 [ mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ) -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG126 [71] if((byte) mode_twoplanebitmap::ay#1!=(byte/word/signed word/dword/signed dword) 200) goto mode_twoplanebitmap::@2 [ mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b2_from_b15
  //SEG127 [72] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@6 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@6]
  b6_from_b15:
  //SEG128 [72] phi (byte) mode_twoplanebitmap::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG129 [72] phi (byte*) mode_twoplanebitmap::gfxb#3 = (const byte*) TWOPLANE_PLANEB#0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@6#1] -- pbuz1=pbuc1 
    lda #<TWOPLANE_PLANEB
    sta gfxb
    lda #>TWOPLANE_PLANEB
    sta gfxb+1
    jmp b6
  //SEG130 [72] phi from mode_twoplanebitmap::@17 to mode_twoplanebitmap::@6 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@6]
  b6_from_b17:
  //SEG131 [72] phi (byte) mode_twoplanebitmap::by#4 = (byte) mode_twoplanebitmap::by#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@6#0] -- register_copy 
  //SEG132 [72] phi (byte*) mode_twoplanebitmap::gfxb#3 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@6#1] -- register_copy 
    jmp b6
  //SEG133 mode_twoplanebitmap::@6
  b6:
  //SEG134 [73] phi from mode_twoplanebitmap::@6 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7]
  b7_from_b6:
  //SEG135 [73] phi (byte) mode_twoplanebitmap::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta bx
  //SEG136 [73] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#3 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#1] -- register_copy 
    jmp b7
  //SEG137 [73] phi from mode_twoplanebitmap::@7 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@7]
  b7_from_b7:
  //SEG138 [73] phi (byte) mode_twoplanebitmap::bx#2 = (byte) mode_twoplanebitmap::bx#1 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@7#0] -- register_copy 
  //SEG139 [73] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@7#1] -- register_copy 
    jmp b7
  //SEG140 mode_twoplanebitmap::@7
  b7:
  //SEG141 [74] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) 15 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
  //SEG142 [75] (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#2 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG143 [76] (byte) mode_twoplanebitmap::bx#1 ← ++ (byte) mode_twoplanebitmap::bx#2 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ) -- vbuz1=_inc_vbuz1 
    inc bx
  //SEG144 [77] if((byte) mode_twoplanebitmap::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto mode_twoplanebitmap::@7 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda bx
    cmp #$28
    bne b7_from_b7
    jmp b17
  //SEG145 mode_twoplanebitmap::@17
  b17:
  //SEG146 [78] (byte) mode_twoplanebitmap::by#1 ← ++ (byte) mode_twoplanebitmap::by#4 [ mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ) -- vbuz1=_inc_vbuz1 
    inc by
  //SEG147 [79] if((byte) mode_twoplanebitmap::by#1!=(byte/word/signed word/dword/signed dword) 200) goto mode_twoplanebitmap::@6 [ mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b6_from_b17
    jmp b8
  //SEG148 mode_twoplanebitmap::@8
  b8:
  //SEG149 [80] if(true) goto mode_twoplanebitmap::@9 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- true_then_la1 
    jmp b9_from_b8
    jmp breturn
  //SEG150 mode_twoplanebitmap::@return
  breturn:
  //SEG151 [81] return  [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
    rts
  //SEG152 [82] phi from mode_twoplanebitmap::@8 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9]
  b9_from_b8:
    jmp b9
  //SEG153 mode_twoplanebitmap::@9
  b9:
  //SEG154 [83] call keyboard_key_pressed param-assignment [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
  //SEG155 [89] phi from mode_twoplanebitmap::@9 to keyboard_key_pressed [phi:mode_twoplanebitmap::@9->keyboard_key_pressed]
  keyboard_key_pressed_from_b9:
  //SEG156 [89] phi (byte) keyboard_key_pressed::key#2 = (const byte) KEY_SPACE#0 [phi:mode_twoplanebitmap::@9->keyboard_key_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta keyboard_key_pressed.key
    jsr keyboard_key_pressed
  //SEG157 [84] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0 [ keyboard_key_pressed::return#3 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#3 ] ) -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return
    sta keyboard_key_pressed.return_3
    jmp b24
  //SEG158 mode_twoplanebitmap::@24
  b24:
  //SEG159 [85] (byte~) mode_twoplanebitmap::$19 ← (byte) keyboard_key_pressed::return#3 [ mode_twoplanebitmap::$19 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::$19 ] ) -- vbuz1=vbuz2 
    lda keyboard_key_pressed.return_3
    sta _19
  //SEG160 [86] if((byte~) mode_twoplanebitmap::$19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@8 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- vbuz1_eq_0_then_la1 
    lda _19
    beq b8
    jmp breturn
  //SEG161 mode_twoplanebitmap::@4
  b4:
  //SEG162 [87] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) 255 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
  //SEG163 [88] (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#1 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
    jmp b5_from_b4
}
//SEG164 keyboard_key_pressed
keyboard_key_pressed: {
    .label _2 = $23
    .label colidx = $1f
    .label rowidx = $20
    .label return = $24
    .label return_2 = $19
    .label return_3 = $1d
    .label key = $10
  //SEG165 [90] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and key
    sta colidx
  //SEG166 [91] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#2 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ) -- vbuz1=vbuz2_ror_3 
    lda key
    lsr
    lsr
    lsr
    sta rowidx
  //SEG167 [92] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] ) -- vbuz1=vbuz2 
    lda rowidx
    sta keyboard_matrix_read.rowid
  //SEG168 [93] call keyboard_matrix_read param-assignment [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] )
    jsr keyboard_matrix_read
  //SEG169 [94] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] ) -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return
    sta keyboard_matrix_read.return_2
    jmp b2
  //SEG170 keyboard_key_pressed::@2
  b2:
  //SEG171 [95] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] ) -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return_2
    sta _2
  //SEG172 [96] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] ) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda _2
    ldy colidx
    and keyboard_matrix_col_bitmask,y
    sta return
    jmp breturn
  //SEG173 keyboard_key_pressed::@return
  breturn:
  //SEG174 [97] return  [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
    rts
}
//SEG175 keyboard_matrix_read
keyboard_matrix_read: {
    .label return = $25
    .label rowid = $21
    .label return_2 = $22
  //SEG176 [98] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] ) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy rowid
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
  //SEG177 [99] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ) -- vbuz1=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    sta return
    jmp breturn
  //SEG178 keyboard_matrix_read::@return
  breturn:
  //SEG179 [100] return  [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] )
    rts
}
//SEG180 print_str_lines
print_str_lines: {
    .label ch = $26
    .label str = $11
  //SEG181 [102] phi from print_str_lines to print_str_lines::@1 [phi:print_str_lines->print_str_lines::@1]
  b1_from_print_str_lines:
  //SEG182 [102] phi (byte*) print_line_cursor#17 = (const byte*) MENU_SCREEN#0 [phi:print_str_lines->print_str_lines::@1#0] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta print_line_cursor
    lda #>MENU_SCREEN
    sta print_line_cursor+1
  //SEG183 [102] phi (byte*) print_char_cursor#19 = (const byte*) MENU_SCREEN#0 [phi:print_str_lines->print_str_lines::@1#1] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta print_char_cursor
    lda #>MENU_SCREEN
    sta print_char_cursor+1
  //SEG184 [102] phi (byte*) print_str_lines::str#2 = (const string) MENU_TEXT#0 [phi:print_str_lines->print_str_lines::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_TEXT
    sta str
    lda #>MENU_TEXT
    sta str+1
    jmp b1
  //SEG185 print_str_lines::@1
  b1:
  //SEG186 [103] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b4_from_b1
    jmp breturn
  //SEG187 print_str_lines::@return
  breturn:
  //SEG188 [104] return  [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 ] )
    rts
  //SEG189 [105] phi from print_str_lines::@1 print_str_lines::@5 to print_str_lines::@4 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4]
  b4_from_b1:
  b4_from_b5:
  //SEG190 [105] phi (byte*) print_char_cursor#17 = (byte*) print_char_cursor#19 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#0] -- register_copy 
  //SEG191 [105] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#2 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#1] -- register_copy 
    jmp b4
  //SEG192 print_str_lines::@4
  b4:
  //SEG193 [106] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta ch
  //SEG194 [107] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG195 [108] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) -- vbuz1_eq_vbuc1_then_la1 
    lda ch
    cmp #'@'
    beq b5_from_b4
    jmp b8
  //SEG196 print_str_lines::@8
  b8:
  //SEG197 [109] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG198 [110] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17 [ print_line_cursor#17 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#1 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG199 [111] phi from print_str_lines::@4 print_str_lines::@8 to print_str_lines::@5 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5]
  b5_from_b4:
  b5_from_b8:
  //SEG200 [111] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#17 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5#0] -- register_copy 
    jmp b5
  //SEG201 print_str_lines::@5
  b5:
  //SEG202 [112] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ch
    cmp #'@'
    bne b4_from_b5
  //SEG203 [113] phi from print_str_lines::@5 to print_str_lines::@9 [phi:print_str_lines::@5->print_str_lines::@9]
  b9_from_b5:
    jmp b9
  //SEG204 print_str_lines::@9
  b9:
  //SEG205 [114] call print_ln param-assignment [ print_str_lines::str#0 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_str_lines::str#0 print_line_cursor#19 ] )
  //SEG206 [116] phi from print_str_lines::@9 to print_ln [phi:print_str_lines::@9->print_ln]
  print_ln_from_b9:
    jsr print_ln
  //SEG207 [115] (byte*~) print_char_cursor#55 ← (byte*) print_line_cursor#19 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG208 [102] phi from print_str_lines::@9 to print_str_lines::@1 [phi:print_str_lines::@9->print_str_lines::@1]
  b1_from_b9:
  //SEG209 [102] phi (byte*) print_line_cursor#17 = (byte*) print_line_cursor#19 [phi:print_str_lines::@9->print_str_lines::@1#0] -- register_copy 
  //SEG210 [102] phi (byte*) print_char_cursor#19 = (byte*~) print_char_cursor#55 [phi:print_str_lines::@9->print_str_lines::@1#1] -- register_copy 
  //SEG211 [102] phi (byte*) print_str_lines::str#2 = (byte*) print_str_lines::str#0 [phi:print_str_lines::@9->print_str_lines::@1#2] -- register_copy 
    jmp b1
}
//SEG212 print_ln
print_ln: {
  //SEG213 [117] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG214 [117] phi (byte*) print_line_cursor#18 = (byte*) print_line_cursor#17 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG215 print_ln::@1
  b1:
  //SEG216 [118] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG217 [119] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG218 print_ln::@return
  breturn:
  //SEG219 [120] return  [ print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 ] )
    rts
}
//SEG220 print_cls
print_cls: {
    .label sc = $17
  //SEG221 [122] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG222 [122] phi (byte*) print_cls::sc#2 = (const byte*) MENU_SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta sc
    lda #>MENU_SCREEN
    sta sc+1
    jmp b1
  //SEG223 [122] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG224 [122] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG225 print_cls::@1
  b1:
  //SEG226 [123] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG227 [124] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG228 [125] if((byte*) print_cls::sc#1!=(const byte*) MENU_SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>MENU_SCREEN+$3e8
    bne b1_from_b1
    lda sc
    cmp #<MENU_SCREEN+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG229 print_cls::@return
  breturn:
  //SEG230 [126] return  [ ] ( main:2::menu:9::print_cls:25 [ ] )
    rts
}
//SEG231 print_set_screen
print_set_screen: {
    jmp breturn
  //SEG232 print_set_screen::@return
  breturn:
  //SEG233 [128] return  [ ] ( main:2::menu:9::print_set_screen:23 [ ] )
    rts
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  MENU_TEXT: .text "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"+"c. Two Plane Bitmap          (D) 1011100@"+"d. Two Plane Multicol Bitmap (D) 1111100@"+"e. 8bpp Pixel Cell           (D) 1101110@"+"f. Chunky 8bpp Bitmap        (D) 1101111@"+"----------------------------------------@"+"    (V) vicII (H) vicII+hicol (D) c64dtv@"+"@"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) MENU_CHARSET#0/(dword/signed dword) 65536 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) MENU_CHARSET#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) MENU_SCREEN#0&(word/signed word/dword/signed dword) 16383/(byte/signed byte/word/signed word/dword/signed dword) 64|((word))(const byte*) MENU_CHARSET#0&(word/signed word/dword/signed dword) 16383/(word/signed word/dword/signed dword) 1024 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [18] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 [ menu::c#2 ] ( main:2::menu:9 [ menu::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [20] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto menu::@1 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] ) always clobbers reg byte a 
Statement [21] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [22] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [38] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_CONTROL_HIGHCOLOR_ON#0|(const byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [39] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [40] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [41] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [42] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [43] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [44] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [45] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [46] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [48] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [49] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [50] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [51] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [52] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [53] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [54] *((const byte*) BGCOL1#0) ← (const byte) GREEN#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [55] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [58] *((byte*) mode_twoplanebitmap::c#2) ← (byte~) mode_twoplanebitmap::$9 [ mode_twoplanebitmap::c#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 ] ) always clobbers reg byte y 
Statement [60] if((byte*) mode_twoplanebitmap::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto mode_twoplanebitmap::@1 [ mode_twoplanebitmap::c#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#1 ] ) always clobbers reg byte a 
Statement [63] (byte~) mode_twoplanebitmap::$12 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Statement [65] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:8 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:11 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
Statement [74] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) 15 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:12 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:15 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
Statement [87] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) 255 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [90] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:16 [ keyboard_key_pressed::key#2 ]
Statement [91] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#2 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:31 [ keyboard_key_pressed::colidx#0 ]
Statement [96] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] ) always clobbers reg byte a 
Statement [98] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Statement [99] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [103] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [106] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [109] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:38 [ print_str_lines::ch#0 ]
Statement [115] (byte*~) print_char_cursor#55 ← (byte*) print_line_cursor#19 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ) always clobbers reg byte a 
Statement [118] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [119] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [123] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [125] if((byte*) print_cls::sc#1!=(const byte*) MENU_SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [4] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) MENU_CHARSET#0/(dword/signed dword) 65536 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) MENU_CHARSET#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) MENU_SCREEN#0&(word/signed word/dword/signed dword) 16383/(byte/signed byte/word/signed word/dword/signed dword) 64|((word))(const byte*) MENU_CHARSET#0&(word/signed word/dword/signed dword) 16383/(word/signed word/dword/signed dword) 1024 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [18] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 [ menu::c#2 ] ( main:2::menu:9 [ menu::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [20] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto menu::@1 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] ) always clobbers reg byte a 
Statement [21] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [22] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) always clobbers reg byte a 
Statement [38] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_CONTROL_HIGHCOLOR_ON#0|(const byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [39] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [40] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [41] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [42] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [43] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [44] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [45] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [46] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [48] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [49] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [50] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [51] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [52] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [53] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [54] *((const byte*) BGCOL1#0) ← (const byte) GREEN#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [55] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) always clobbers reg byte a 
Statement [58] *((byte*) mode_twoplanebitmap::c#2) ← (byte~) mode_twoplanebitmap::$9 [ mode_twoplanebitmap::c#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 ] ) always clobbers reg byte y 
Statement [60] if((byte*) mode_twoplanebitmap::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto mode_twoplanebitmap::@1 [ mode_twoplanebitmap::c#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#1 ] ) always clobbers reg byte a 
Statement [63] (byte~) mode_twoplanebitmap::$12 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ) always clobbers reg byte a 
Statement [65] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [74] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) 15 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ) always clobbers reg byte a reg byte y 
Statement [87] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) 255 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [90] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Statement [91] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#2 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ) always clobbers reg byte a 
Statement [96] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] ) always clobbers reg byte a 
Statement [98] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] ) always clobbers reg byte a 
Statement [99] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [103] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [106] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [109] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) always clobbers reg byte y 
Statement [115] (byte*~) print_char_cursor#55 ← (byte*) print_line_cursor#19 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ) always clobbers reg byte a 
Statement [118] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [119] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [123] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [125] if((byte*) print_cls::sc#1!=(const byte*) MENU_SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ print_screen#13 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ menu::c#2 menu::c#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_WORD:6 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_BYTE:8 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] : zp ZP_BYTE:8 , reg byte x , 
Potential registers zp ZP_WORD:9 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_BYTE:11 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] : zp ZP_BYTE:11 , reg byte x , 
Potential registers zp ZP_BYTE:12 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] : zp ZP_BYTE:12 , reg byte x , 
Potential registers zp ZP_WORD:13 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_BYTE:15 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ] : zp ZP_BYTE:15 , reg byte x , 
Potential registers zp ZP_BYTE:16 [ keyboard_key_pressed::key#2 ] : zp ZP_BYTE:16 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:17 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_WORD:19 [ print_char_cursor#17 print_char_cursor#11 print_char_cursor#19 print_char_cursor#55 print_char_cursor#32 print_char_cursor#1 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_WORD:21 [ print_line_cursor#18 print_line_cursor#10 print_line_cursor#17 print_line_cursor#19 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_WORD:23 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_BYTE:25 [ keyboard_key_pressed::return#2 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ menu::$22 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ mode_twoplanebitmap::$9 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ mode_twoplanebitmap::$12 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ keyboard_key_pressed::return#3 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ mode_twoplanebitmap::$19 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ keyboard_key_pressed::colidx#0 ] : zp ZP_BYTE:31 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ keyboard_key_pressed::rowidx#0 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ keyboard_matrix_read::rowid#0 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ keyboard_matrix_read::return#2 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ keyboard_key_pressed::$2 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ keyboard_key_pressed::return#0 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ keyboard_matrix_read::return#0 ] : zp ZP_BYTE:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ print_str_lines::ch#0 ] : zp ZP_BYTE:38 , reg byte a , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [mode_twoplanebitmap] 5,848: zp ZP_WORD:9 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] 2,174.6: zp ZP_WORD:13 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] 2,168.83: zp ZP_BYTE:15 [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ] 2,002: zp ZP_BYTE:28 [ mode_twoplanebitmap::$12 ] 1,751.75: zp ZP_BYTE:11 [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] 286.17: zp ZP_WORD:6 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 ] 260.86: zp ZP_BYTE:8 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] 202: zp ZP_BYTE:27 [ mode_twoplanebitmap::$9 ] 202: zp ZP_BYTE:30 [ mode_twoplanebitmap::$19 ] 185.17: zp ZP_BYTE:12 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] 
Uplift Scope [] 3,721.2: zp ZP_WORD:19 [ print_char_cursor#17 print_char_cursor#11 print_char_cursor#19 print_char_cursor#55 print_char_cursor#32 print_char_cursor#1 ] 2,759.56: zp ZP_WORD:21 [ print_line_cursor#18 print_line_cursor#10 print_line_cursor#17 print_line_cursor#19 ] 0: zp ZP_WORD:2 [ print_screen#13 ] 
Uplift Scope [print_str_lines] 1,937.17: zp ZP_WORD:17 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] 667.33: zp ZP_BYTE:38 [ print_str_lines::ch#0 ] 
Uplift Scope [menu] 303: zp ZP_WORD:4 [ menu::c#2 menu::c#1 ] 202: zp ZP_BYTE:26 [ menu::$22 ] 
Uplift Scope [keyboard_key_pressed] 202: zp ZP_BYTE:25 [ keyboard_key_pressed::return#2 ] 202: zp ZP_BYTE:29 [ keyboard_key_pressed::return#3 ] 51: zp ZP_BYTE:36 [ keyboard_key_pressed::return#0 ] 4: zp ZP_BYTE:32 [ keyboard_key_pressed::rowidx#0 ] 4: zp ZP_BYTE:35 [ keyboard_key_pressed::$2 ] 2: zp ZP_BYTE:16 [ keyboard_key_pressed::key#2 ] 0.67: zp ZP_BYTE:31 [ keyboard_key_pressed::colidx#0 ] 
Uplift Scope [print_cls] 303: zp ZP_WORD:23 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [keyboard_matrix_read] 4: zp ZP_BYTE:33 [ keyboard_matrix_read::rowid#0 ] 4: zp ZP_BYTE:34 [ keyboard_matrix_read::return#2 ] 1.33: zp ZP_BYTE:37 [ keyboard_matrix_read::return#0 ] 
Uplift Scope [print_ln] 
Uplift Scope [print_set_screen] 
Uplift Scope [main] 

Uplifting [mode_twoplanebitmap] best 272577 combination zp ZP_WORD:9 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] zp ZP_WORD:13 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] reg byte x [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ] reg byte a [ mode_twoplanebitmap::$12 ] reg byte x [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ] zp ZP_WORD:6 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 ] zp ZP_BYTE:8 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] reg byte a [ mode_twoplanebitmap::$9 ] reg byte a [ mode_twoplanebitmap::$19 ] zp ZP_BYTE:12 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] 
Uplifting [] best 272577 combination zp ZP_WORD:19 [ print_char_cursor#17 print_char_cursor#11 print_char_cursor#19 print_char_cursor#55 print_char_cursor#32 print_char_cursor#1 ] zp ZP_WORD:21 [ print_line_cursor#18 print_line_cursor#10 print_line_cursor#17 print_line_cursor#19 ] zp ZP_WORD:2 [ print_screen#13 ] 
Uplifting [print_str_lines] best 260577 combination zp ZP_WORD:17 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] reg byte a [ print_str_lines::ch#0 ] 
Uplifting [menu] best 260177 combination zp ZP_WORD:4 [ menu::c#2 menu::c#1 ] reg byte a [ menu::$22 ] 
Uplifting [keyboard_key_pressed] best 258350 combination reg byte a [ keyboard_key_pressed::return#2 ] reg byte a [ keyboard_key_pressed::return#3 ] reg byte a [ keyboard_key_pressed::return#0 ] reg byte a [ keyboard_key_pressed::rowidx#0 ] reg byte a [ keyboard_key_pressed::$2 ] reg byte y [ keyboard_key_pressed::key#2 ] reg byte x [ keyboard_key_pressed::colidx#0 ] 
Uplifting [print_cls] best 258350 combination zp ZP_WORD:23 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [keyboard_matrix_read] best 258334 combination reg byte a [ keyboard_matrix_read::rowid#0 ] reg byte a [ keyboard_matrix_read::return#2 ] reg byte a [ keyboard_matrix_read::return#0 ] 
Uplifting [print_ln] best 258334 combination 
Uplifting [print_set_screen] best 258334 combination 
Uplifting [main] best 258334 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ]
Uplifting [mode_twoplanebitmap] best 258334 combination zp ZP_BYTE:8 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Uplifting [mode_twoplanebitmap] best 258334 combination zp ZP_BYTE:12 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:2 [ print_screen#13 ] ] with [ zp ZP_WORD:19 [ print_char_cursor#17 print_char_cursor#11 print_char_cursor#19 print_char_cursor#55 print_char_cursor#32 print_char_cursor#1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:2 [ print_screen#13 print_char_cursor#17 print_char_cursor#11 print_char_cursor#19 print_char_cursor#55 print_char_cursor#32 print_char_cursor#1 ] ] with [ zp ZP_WORD:4 [ menu::c#2 menu::c#1 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ print_screen#13 print_char_cursor#17 print_char_cursor#11 print_char_cursor#19 print_char_cursor#55 print_char_cursor#32 print_char_cursor#1 menu::c#2 menu::c#1 ] ] with [ zp ZP_WORD:23 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 ] ] with [ zp ZP_WORD:9 [ mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 ] ] with [ zp ZP_WORD:13 [ mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 ] ] with [ zp ZP_WORD:17 [ print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 ] ] with [ zp ZP_BYTE:12 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ] ]
Allocated (was zp ZP_WORD:6) zp ZP_WORD:4 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
Allocated (was zp ZP_BYTE:8) zp ZP_BYTE:6 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
Allocated (was zp ZP_WORD:21) zp ZP_WORD:7 [ print_line_cursor#18 print_line_cursor#10 print_line_cursor#17 print_line_cursor#19 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  .label COLS = $d800
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .const GREEN = 5
  .const BLUE = 6
  .const LIGHT_GREEN = $d
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  .label DTV_CONTROL = $d03c
  .const DTV_CONTROL_LINEAR_ADDRESSING_ON = 1
  .const DTV_CONTROL_HIGHCOLOR_ON = 4
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_C = $14
  .const KEY_SPACE = $3c
  .label MENU_SCREEN = $8000
  .label MENU_CHARSET = $9800
  .label TWOPLANE_PLANEA = $4000
  .label TWOPLANE_PLANEB = $6000
  .label print_char_cursor = 2
  .label print_line_cursor = 7
  .label print_screen = 2
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @21 [phi:@begin->@21]
b21_from_bbegin:
  jmp b21
//SEG4 @21
b21:
//SEG5 [2] call main param-assignment [ ] ( )
  jsr main
//SEG6 [3] phi from @21 to @end [phi:@21->@end]
bend_from_b21:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte*) print_char_cursor#11 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG12 [5] phi (byte*) print_line_cursor#10 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG13 [5] phi (byte*) print_screen#13 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_screen
    lda #>$400
    sta print_screen+1
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] if(true) goto main::@2 [ ] ( main:2 [ ] ) -- true_then_la1 
    jmp b2_from_b1
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [7] return  [ ] ( main:2 [ ] )
    rts
  //SEG18 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG19 main::@2
  b2:
  //SEG20 [9] call menu param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2 [ print_line_cursor#17 print_char_cursor#19 ] )
    jsr menu
  //SEG21 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG22 [5] phi (byte*) print_char_cursor#11 = (byte*) print_char_cursor#19 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG23 [5] phi (byte*) print_line_cursor#10 = (byte*) print_line_cursor#17 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG24 [5] phi (byte*) print_screen#13 = (const byte*) MENU_SCREEN#0 [phi:main::@2->main::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta print_screen
    lda #>MENU_SCREEN
    sta print_screen+1
    jmp b1
}
//SEG25 menu
menu: {
    .label last = MENU_SCREEN+$3e7
    .label c = 2
  //SEG26 [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) MENU_CHARSET#0/(dword/signed dword) 65536 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #($ffffffff&MENU_CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG27 [11] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG28 [12] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG29 [13] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) MENU_CHARSET#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3^MENU_CHARSET/$4000
    sta CIA2_PORT_A
  //SEG30 [14] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG31 [15] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG32 [16] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) MENU_SCREEN#0&(word/signed word/dword/signed dword) 16383/(byte/signed byte/word/signed word/dword/signed dword) 64|((word))(const byte*) MENU_CHARSET#0&(word/signed word/dword/signed dword) 16383/(word/signed word/dword/signed dword) 1024 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #(MENU_SCREEN&$3fff)/$40|(MENU_CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG33 [17] phi from menu to menu::@1 [phi:menu->menu::@1]
  b1_from_menu:
  //SEG34 [17] phi (byte*) menu::c#2 = (const byte*) COLS#0 [phi:menu->menu::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta c
    lda #>COLS
    sta c+1
    jmp b1
  //SEG35 [17] phi from menu::@1 to menu::@1 [phi:menu::@1->menu::@1]
  b1_from_b1:
  //SEG36 [17] phi (byte*) menu::c#2 = (byte*) menu::c#1 [phi:menu::@1->menu::@1#0] -- register_copy 
    jmp b1
  //SEG37 menu::@1
  b1:
  //SEG38 [18] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 [ menu::c#2 ] ( main:2::menu:9 [ menu::c#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #LIGHT_GREEN
    ldy #0
    sta (c),y
  //SEG39 [19] (byte*) menu::c#1 ← ++ (byte*) menu::c#2 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] ) -- pbuz1=_inc_pbuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG40 [20] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto menu::@1 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda c+1
    cmp #>COLS+$3e8
    bne b1_from_b1
    lda c
    cmp #<COLS+$3e8
    bne b1_from_b1
    jmp b6
  //SEG41 menu::@6
  b6:
  //SEG42 [21] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta BGCOL
  //SEG43 [22] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG44 [23] call print_set_screen param-assignment [ ] ( main:2::menu:9 [ ] )
  //SEG45 [127] phi from menu::@6 to print_set_screen [phi:menu::@6->print_set_screen]
  print_set_screen_from_b6:
    jsr print_set_screen
  //SEG46 [24] phi from menu::@6 to menu::@12 [phi:menu::@6->menu::@12]
  b12_from_b6:
    jmp b12
  //SEG47 menu::@12
  b12:
  //SEG48 [25] call print_cls param-assignment [ ] ( main:2::menu:9 [ ] )
  //SEG49 [121] phi from menu::@12 to print_cls [phi:menu::@12->print_cls]
  print_cls_from_b12:
    jsr print_cls
  //SEG50 [26] phi from menu::@12 to menu::@13 [phi:menu::@12->menu::@13]
  b13_from_b12:
    jmp b13
  //SEG51 menu::@13
  b13:
  //SEG52 [27] call print_str_lines param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  //SEG53 [101] phi from menu::@13 to print_str_lines [phi:menu::@13->print_str_lines]
  print_str_lines_from_b13:
    jsr print_str_lines
    jmp b2
  //SEG54 menu::@2
  b2:
  //SEG55 [28] if(true) goto menu::@3 [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] ) -- true_then_la1 
    jmp b3_from_b2
    jmp breturn
  //SEG56 menu::@return
  breturn:
  //SEG57 [29] return  [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
    rts
  //SEG58 [30] phi from menu::@2 to menu::@3 [phi:menu::@2->menu::@3]
  b3_from_b2:
    jmp b3
  //SEG59 menu::@3
  b3:
  //SEG60 [31] call keyboard_key_pressed param-assignment [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
  //SEG61 [89] phi from menu::@3 to keyboard_key_pressed [phi:menu::@3->keyboard_key_pressed]
  keyboard_key_pressed_from_b3:
  //SEG62 [89] phi (byte) keyboard_key_pressed::key#2 = (const byte) KEY_C#0 [phi:menu::@3->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_C
    jsr keyboard_key_pressed
  //SEG63 [32] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#2 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#2 ] )
    // (byte) keyboard_key_pressed::return#2 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
    jmp b15
  //SEG64 menu::@15
  b15:
  //SEG65 [33] (byte~) menu::$22 ← (byte) keyboard_key_pressed::return#2 [ print_line_cursor#17 print_char_cursor#19 menu::$22 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 menu::$22 ] )
    // (byte~) menu::$22 = (byte) keyboard_key_pressed::return#2  // register copy reg byte a
  //SEG66 [34] if((byte~) menu::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@5 [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG67 [35] phi from menu::@15 to menu::@9 [phi:menu::@15->menu::@9]
  b9_from_b15:
    jmp b9
  //SEG68 menu::@9
  b9:
  //SEG69 [36] call mode_twoplanebitmap param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
    jsr mode_twoplanebitmap
    jmp breturn
  //SEG70 menu::@5
  b5:
  //SEG71 [37] *((const byte*) menu::last#0) ← ++ *((const byte*) menu::last#0) [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc last
    jmp b2
}
//SEG72 mode_twoplanebitmap
mode_twoplanebitmap: {
    .label c = 4
    .label gfxa = 4
    .label ay = 6
    .label gfxb = 4
    .label by = 6
  //SEG73 [38] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_CONTROL_HIGHCOLOR_ON#0|(const byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_CONTROL_HIGHCOLOR_ON|DTV_CONTROL_LINEAR_ADDRESSING_ON
    sta DTV_CONTROL
  //SEG74 [39] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG75 [40] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG76 [41] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #<TWOPLANE_PLANEA
    sta DTV_PLANEA_START_LO
  //SEG77 [42] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #>TWOPLANE_PLANEA
    sta DTV_PLANEA_START_MI
  //SEG78 [43] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG79 [44] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG80 [45] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG81 [46] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG82 [47] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #<TWOPLANE_PLANEB
    sta DTV_PLANEB_START_LO
  //SEG83 [48] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #>TWOPLANE_PLANEB
    sta DTV_PLANEB_START_MI
  //SEG84 [49] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG85 [50] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG86 [51] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG87 [52] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG88 [53] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG89 [54] *((const byte*) BGCOL1#0) ← (const byte) GREEN#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BGCOL1
  //SEG90 [55] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL2
  //SEG91 [56] phi from mode_twoplanebitmap to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1]
  b1_from_mode_twoplanebitmap:
  //SEG92 [56] phi (byte*) mode_twoplanebitmap::c#2 = (const byte*) COLS#0 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta c
    lda #>COLS
    sta c+1
    jmp b1
  //SEG93 [56] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1]
  b1_from_b1:
  //SEG94 [56] phi (byte*) mode_twoplanebitmap::c#2 = (byte*) mode_twoplanebitmap::c#1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1#0] -- register_copy 
    jmp b1
  //SEG95 mode_twoplanebitmap::@1
  b1:
  //SEG96 [57] (byte~) mode_twoplanebitmap::$9 ← < (byte*) mode_twoplanebitmap::c#2 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::$9 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 mode_twoplanebitmap::$9 ] ) -- vbuaa=_lo_pbuz1 
    lda c
  //SEG97 [58] *((byte*) mode_twoplanebitmap::c#2) ← (byte~) mode_twoplanebitmap::$9 [ mode_twoplanebitmap::c#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (c),y
  //SEG98 [59] (byte*) mode_twoplanebitmap::c#1 ← ++ (byte*) mode_twoplanebitmap::c#2 [ mode_twoplanebitmap::c#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#1 ] ) -- pbuz1=_inc_pbuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG99 [60] if((byte*) mode_twoplanebitmap::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto mode_twoplanebitmap::@1 [ mode_twoplanebitmap::c#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda c+1
    cmp #>COLS+$3e8
    bne b1_from_b1
    lda c
    cmp #<COLS+$3e8
    bne b1_from_b1
  //SEG100 [61] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@2]
  b2_from_b1:
  //SEG101 [61] phi (byte*) mode_twoplanebitmap::gfxa#6 = (const byte*) TWOPLANE_PLANEA#0 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@2#0] -- pbuz1=pbuc1 
    lda #<TWOPLANE_PLANEA
    sta gfxa
    lda #>TWOPLANE_PLANEA
    sta gfxa+1
  //SEG102 [61] phi (byte) mode_twoplanebitmap::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b2
  //SEG103 [61] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@2]
  b2_from_b15:
  //SEG104 [61] phi (byte*) mode_twoplanebitmap::gfxa#6 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@2#0] -- register_copy 
  //SEG105 [61] phi (byte) mode_twoplanebitmap::ay#4 = (byte) mode_twoplanebitmap::ay#1 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@2#1] -- register_copy 
    jmp b2
  //SEG106 mode_twoplanebitmap::@2
  b2:
  //SEG107 [62] phi from mode_twoplanebitmap::@2 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3]
  b3_from_b2:
  //SEG108 [62] phi (byte) mode_twoplanebitmap::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG109 [62] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#6 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#1] -- register_copy 
    jmp b3
  //SEG110 [62] phi from mode_twoplanebitmap::@5 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3]
  b3_from_b5:
  //SEG111 [62] phi (byte) mode_twoplanebitmap::ax#2 = (byte) mode_twoplanebitmap::ax#1 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3#0] -- register_copy 
  //SEG112 [62] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3#1] -- register_copy 
    jmp b3
  //SEG113 mode_twoplanebitmap::@3
  b3:
  //SEG114 [63] (byte~) mode_twoplanebitmap::$12 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and ay
  //SEG115 [64] if((byte~) mode_twoplanebitmap::$12!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b4
    jmp b13
  //SEG116 mode_twoplanebitmap::@13
  b13:
  //SEG117 [65] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
  //SEG118 [66] (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#2 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG119 [67] phi from mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 to mode_twoplanebitmap::@5 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@4->mode_twoplanebitmap::@5]
  b5_from_b13:
  b5_from_b4:
  //SEG120 [67] phi (byte*) mode_twoplanebitmap::gfxa#7 = (byte*) mode_twoplanebitmap::gfxa#2 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@4->mode_twoplanebitmap::@5#0] -- register_copy 
    jmp b5
  //SEG121 mode_twoplanebitmap::@5
  b5:
  //SEG122 [68] (byte) mode_twoplanebitmap::ax#1 ← ++ (byte) mode_twoplanebitmap::ax#2 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG123 [69] if((byte) mode_twoplanebitmap::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto mode_twoplanebitmap::@3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3_from_b5
    jmp b15
  //SEG124 mode_twoplanebitmap::@15
  b15:
  //SEG125 [70] (byte) mode_twoplanebitmap::ay#1 ← ++ (byte) mode_twoplanebitmap::ay#4 [ mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ) -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG126 [71] if((byte) mode_twoplanebitmap::ay#1!=(byte/word/signed word/dword/signed dword) 200) goto mode_twoplanebitmap::@2 [ mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b2_from_b15
  //SEG127 [72] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@6 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@6]
  b6_from_b15:
  //SEG128 [72] phi (byte) mode_twoplanebitmap::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG129 [72] phi (byte*) mode_twoplanebitmap::gfxb#3 = (const byte*) TWOPLANE_PLANEB#0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@6#1] -- pbuz1=pbuc1 
    lda #<TWOPLANE_PLANEB
    sta gfxb
    lda #>TWOPLANE_PLANEB
    sta gfxb+1
    jmp b6
  //SEG130 [72] phi from mode_twoplanebitmap::@17 to mode_twoplanebitmap::@6 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@6]
  b6_from_b17:
  //SEG131 [72] phi (byte) mode_twoplanebitmap::by#4 = (byte) mode_twoplanebitmap::by#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@6#0] -- register_copy 
  //SEG132 [72] phi (byte*) mode_twoplanebitmap::gfxb#3 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@6#1] -- register_copy 
    jmp b6
  //SEG133 mode_twoplanebitmap::@6
  b6:
  //SEG134 [73] phi from mode_twoplanebitmap::@6 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7]
  b7_from_b6:
  //SEG135 [73] phi (byte) mode_twoplanebitmap::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG136 [73] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#3 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#1] -- register_copy 
    jmp b7
  //SEG137 [73] phi from mode_twoplanebitmap::@7 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@7]
  b7_from_b7:
  //SEG138 [73] phi (byte) mode_twoplanebitmap::bx#2 = (byte) mode_twoplanebitmap::bx#1 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@7#0] -- register_copy 
  //SEG139 [73] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@7#1] -- register_copy 
    jmp b7
  //SEG140 mode_twoplanebitmap::@7
  b7:
  //SEG141 [74] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) 15 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
  //SEG142 [75] (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#2 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG143 [76] (byte) mode_twoplanebitmap::bx#1 ← ++ (byte) mode_twoplanebitmap::bx#2 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG144 [77] if((byte) mode_twoplanebitmap::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto mode_twoplanebitmap::@7 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b7_from_b7
    jmp b17
  //SEG145 mode_twoplanebitmap::@17
  b17:
  //SEG146 [78] (byte) mode_twoplanebitmap::by#1 ← ++ (byte) mode_twoplanebitmap::by#4 [ mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ) -- vbuz1=_inc_vbuz1 
    inc by
  //SEG147 [79] if((byte) mode_twoplanebitmap::by#1!=(byte/word/signed word/dword/signed dword) 200) goto mode_twoplanebitmap::@6 [ mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b6_from_b17
    jmp b8
  //SEG148 mode_twoplanebitmap::@8
  b8:
  //SEG149 [80] if(true) goto mode_twoplanebitmap::@9 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- true_then_la1 
    jmp b9_from_b8
    jmp breturn
  //SEG150 mode_twoplanebitmap::@return
  breturn:
  //SEG151 [81] return  [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
    rts
  //SEG152 [82] phi from mode_twoplanebitmap::@8 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9]
  b9_from_b8:
    jmp b9
  //SEG153 mode_twoplanebitmap::@9
  b9:
  //SEG154 [83] call keyboard_key_pressed param-assignment [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
  //SEG155 [89] phi from mode_twoplanebitmap::@9 to keyboard_key_pressed [phi:mode_twoplanebitmap::@9->keyboard_key_pressed]
  keyboard_key_pressed_from_b9:
  //SEG156 [89] phi (byte) keyboard_key_pressed::key#2 = (const byte) KEY_SPACE#0 [phi:mode_twoplanebitmap::@9->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_SPACE
    jsr keyboard_key_pressed
  //SEG157 [84] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0 [ keyboard_key_pressed::return#3 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#3 ] )
    // (byte) keyboard_key_pressed::return#3 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
    jmp b24
  //SEG158 mode_twoplanebitmap::@24
  b24:
  //SEG159 [85] (byte~) mode_twoplanebitmap::$19 ← (byte) keyboard_key_pressed::return#3 [ mode_twoplanebitmap::$19 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::$19 ] )
    // (byte~) mode_twoplanebitmap::$19 = (byte) keyboard_key_pressed::return#3  // register copy reg byte a
  //SEG160 [86] if((byte~) mode_twoplanebitmap::$19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@8 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b8
    jmp breturn
  //SEG161 mode_twoplanebitmap::@4
  b4:
  //SEG162 [87] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) 255 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
  //SEG163 [88] (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#1 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
    jmp b5_from_b4
}
//SEG164 keyboard_key_pressed
keyboard_key_pressed: {
  //SEG165 [90] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ) -- vbuxx=vbuyy_band_vbuc1 
    tya
    and #7
    tax
  //SEG166 [91] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#2 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ) -- vbuaa=vbuyy_ror_3 
    tya
    lsr
    lsr
    lsr
  //SEG167 [92] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] )
    // (byte) keyboard_matrix_read::rowid#0 = (byte) keyboard_key_pressed::rowidx#0  // register copy reg byte a
  //SEG168 [93] call keyboard_matrix_read param-assignment [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] )
    jsr keyboard_matrix_read
  //SEG169 [94] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] )
    // (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#0  // register copy reg byte a
    jmp b2
  //SEG170 keyboard_key_pressed::@2
  b2:
  //SEG171 [95] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] )
    // (byte~) keyboard_key_pressed::$2 = (byte) keyboard_matrix_read::return#2  // register copy reg byte a
  //SEG172 [96] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] ) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    jmp breturn
  //SEG173 keyboard_key_pressed::@return
  breturn:
  //SEG174 [97] return  [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
    rts
}
//SEG175 keyboard_matrix_read
keyboard_matrix_read: {
  //SEG176 [98] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] ) -- _deref_pbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
  //SEG177 [99] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    jmp breturn
  //SEG178 keyboard_matrix_read::@return
  breturn:
  //SEG179 [100] return  [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] )
    rts
}
//SEG180 print_str_lines
print_str_lines: {
    .label str = 4
  //SEG181 [102] phi from print_str_lines to print_str_lines::@1 [phi:print_str_lines->print_str_lines::@1]
  b1_from_print_str_lines:
  //SEG182 [102] phi (byte*) print_line_cursor#17 = (const byte*) MENU_SCREEN#0 [phi:print_str_lines->print_str_lines::@1#0] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta print_line_cursor
    lda #>MENU_SCREEN
    sta print_line_cursor+1
  //SEG183 [102] phi (byte*) print_char_cursor#19 = (const byte*) MENU_SCREEN#0 [phi:print_str_lines->print_str_lines::@1#1] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta print_char_cursor
    lda #>MENU_SCREEN
    sta print_char_cursor+1
  //SEG184 [102] phi (byte*) print_str_lines::str#2 = (const string) MENU_TEXT#0 [phi:print_str_lines->print_str_lines::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_TEXT
    sta str
    lda #>MENU_TEXT
    sta str+1
    jmp b1
  //SEG185 print_str_lines::@1
  b1:
  //SEG186 [103] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b4_from_b1
    jmp breturn
  //SEG187 print_str_lines::@return
  breturn:
  //SEG188 [104] return  [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 ] )
    rts
  //SEG189 [105] phi from print_str_lines::@1 print_str_lines::@5 to print_str_lines::@4 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4]
  b4_from_b1:
  b4_from_b5:
  //SEG190 [105] phi (byte*) print_char_cursor#17 = (byte*) print_char_cursor#19 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#0] -- register_copy 
  //SEG191 [105] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#2 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#1] -- register_copy 
    jmp b4
  //SEG192 print_str_lines::@4
  b4:
  //SEG193 [106] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
  //SEG194 [107] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG195 [108] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) -- vbuaa_eq_vbuc1_then_la1 
    cmp #'@'
    beq b5_from_b4
    jmp b8
  //SEG196 print_str_lines::@8
  b8:
  //SEG197 [109] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG198 [110] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17 [ print_line_cursor#17 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#1 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG199 [111] phi from print_str_lines::@4 print_str_lines::@8 to print_str_lines::@5 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5]
  b5_from_b4:
  b5_from_b8:
  //SEG200 [111] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#17 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5#0] -- register_copy 
    jmp b5
  //SEG201 print_str_lines::@5
  b5:
  //SEG202 [112] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 ] ) -- vbuaa_neq_vbuc1_then_la1 
    cmp #'@'
    bne b4_from_b5
  //SEG203 [113] phi from print_str_lines::@5 to print_str_lines::@9 [phi:print_str_lines::@5->print_str_lines::@9]
  b9_from_b5:
    jmp b9
  //SEG204 print_str_lines::@9
  b9:
  //SEG205 [114] call print_ln param-assignment [ print_str_lines::str#0 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_str_lines::str#0 print_line_cursor#19 ] )
  //SEG206 [116] phi from print_str_lines::@9 to print_ln [phi:print_str_lines::@9->print_ln]
  print_ln_from_b9:
    jsr print_ln
  //SEG207 [115] (byte*~) print_char_cursor#55 ← (byte*) print_line_cursor#19 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG208 [102] phi from print_str_lines::@9 to print_str_lines::@1 [phi:print_str_lines::@9->print_str_lines::@1]
  b1_from_b9:
  //SEG209 [102] phi (byte*) print_line_cursor#17 = (byte*) print_line_cursor#19 [phi:print_str_lines::@9->print_str_lines::@1#0] -- register_copy 
  //SEG210 [102] phi (byte*) print_char_cursor#19 = (byte*~) print_char_cursor#55 [phi:print_str_lines::@9->print_str_lines::@1#1] -- register_copy 
  //SEG211 [102] phi (byte*) print_str_lines::str#2 = (byte*) print_str_lines::str#0 [phi:print_str_lines::@9->print_str_lines::@1#2] -- register_copy 
    jmp b1
}
//SEG212 print_ln
print_ln: {
  //SEG213 [117] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG214 [117] phi (byte*) print_line_cursor#18 = (byte*) print_line_cursor#17 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG215 print_ln::@1
  b1:
  //SEG216 [118] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG217 [119] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG218 print_ln::@return
  breturn:
  //SEG219 [120] return  [ print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 ] )
    rts
}
//SEG220 print_cls
print_cls: {
    .label sc = 2
  //SEG221 [122] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG222 [122] phi (byte*) print_cls::sc#2 = (const byte*) MENU_SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta sc
    lda #>MENU_SCREEN
    sta sc+1
    jmp b1
  //SEG223 [122] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG224 [122] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG225 print_cls::@1
  b1:
  //SEG226 [123] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG227 [124] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG228 [125] if((byte*) print_cls::sc#1!=(const byte*) MENU_SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>MENU_SCREEN+$3e8
    bne b1_from_b1
    lda sc
    cmp #<MENU_SCREEN+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG229 print_cls::@return
  breturn:
  //SEG230 [126] return  [ ] ( main:2::menu:9::print_cls:25 [ ] )
    rts
}
//SEG231 print_set_screen
print_set_screen: {
    jmp breturn
  //SEG232 print_set_screen::@return
  breturn:
  //SEG233 [128] return  [ ] ( main:2::menu:9::print_set_screen:23 [ ] )
    rts
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  MENU_TEXT: .text "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"+"c. Two Plane Bitmap          (D) 1011100@"+"d. Two Plane Multicol Bitmap (D) 1111100@"+"e. 8bpp Pixel Cell           (D) 1101110@"+"f. Chunky 8bpp Bitmap        (D) 1101111@"+"----------------------------------------@"+"    (V) vicII (H) vicII+hicol (D) c64dtv@"+"@"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b21
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b15
Removing instruction jmp b9
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b13
Removing instruction jmp b5
Removing instruction jmp b15
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b17
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b9
Removing instruction jmp b24
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b8
Removing instruction jmp b5
Removing instruction jmp b9
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b2_from_b1 with b2
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b3_from_b2 with b3
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b3_from_b5 with b3
Replacing label b2_from_b15 with b2
Replacing label b7_from_b7 with b7
Replacing label b6_from_b17 with b6
Replacing label b9_from_b8 with b9
Replacing label b5_from_b4 with b5
Replacing label b4_from_b1 with b4
Replacing label b5_from_b4 with b5
Replacing label b4_from_b5 with b4
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b21_from_bbegin:
Removing instruction bend_from_b21:
Removing instruction b2_from_b1:
Removing instruction b1_from_b1:
Removing instruction b12_from_b6:
Removing instruction print_cls_from_b12:
Removing instruction b13_from_b12:
Removing instruction print_str_lines_from_b13:
Removing instruction b3_from_b2:
Removing instruction keyboard_key_pressed_from_b3:
Removing instruction b9_from_b15:
Removing instruction b1_from_b1:
Removing instruction b2_from_b15:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b5_from_b13:
Removing instruction b5_from_b4:
Removing instruction b6_from_b17:
Removing instruction b7_from_b6:
Removing instruction b7_from_b7:
Removing instruction b9_from_b8:
Removing instruction keyboard_key_pressed_from_b9:
Removing instruction b4_from_b1:
Removing instruction b4_from_b5:
Removing instruction b5_from_b4:
Removing instruction b5_from_b8:
Removing instruction b9_from_b5:
Removing instruction print_ln_from_b9:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b21:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Removing instruction b1_from_b2:
Removing instruction b1_from_menu:
Removing instruction b6:
Removing instruction print_set_screen_from_b6:
Removing instruction b12:
Removing instruction b13:
Removing instruction b15:
Removing instruction b9:
Removing instruction b1_from_mode_twoplanebitmap:
Removing instruction b2_from_b1:
Removing instruction b13:
Removing instruction b15:
Removing instruction b6_from_b15:
Removing instruction b17:
Removing instruction b24:
Removing instruction b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_str_lines:
Removing instruction breturn:
Removing instruction b8:
Removing instruction b9:
Removing instruction b1_from_b9:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b2 in jmp b1
Skipping double jump to b3 in jmp b2
Skipping double jump to b9 in beq b8
Succesful ASM optimization Pass5DoubleJumpElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b2:
Removing instruction b8:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @21
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) 53281
(byte*) BGCOL1
(const byte*) BGCOL1#0 BGCOL1 = ((byte*))(word/dword/signed dword) 53281
(byte*) BGCOL2
(const byte*) BGCOL2#0 BGCOL2 = ((byte*))(word/dword/signed dword) 53282
(byte) BLUE
(const byte) BLUE#0 BLUE = (byte/signed byte/word/signed word/dword/signed dword) 6
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) CIA1_PORT_A
(const byte*) CIA1_PORT_A#0 CIA1_PORT_A = ((byte*))(word/dword/signed dword) 56320
(byte*) CIA1_PORT_B
(const byte*) CIA1_PORT_B#0 CIA1_PORT_B = ((byte*))(word/dword/signed dword) 56321
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = ((byte*))(word/dword/signed dword) 56576
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = ((byte*))(word/dword/signed dword) 56578
(byte*) COLS
(const byte*) COLS#0 COLS = ((byte*))(word/dword/signed dword) 55296
(byte*) DTV_CONTROL
(const byte*) DTV_CONTROL#0 DTV_CONTROL = ((byte*))(word/dword/signed dword) 53308
(byte) DTV_CONTROL_HIGHCOLOR_ON
(const byte) DTV_CONTROL_HIGHCOLOR_ON#0 DTV_CONTROL_HIGHCOLOR_ON = (byte/signed byte/word/signed word/dword/signed dword) 4
(byte) DTV_CONTROL_LINEAR_ADDRESSING_ON
(const byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0 DTV_CONTROL_LINEAR_ADDRESSING_ON = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) DTV_FEATURE
(const byte*) DTV_FEATURE#0 DTV_FEATURE = ((byte*))(word/dword/signed dword) 53311
(byte) DTV_FEATURE_ENABLE
(const byte) DTV_FEATURE_ENABLE#0 DTV_FEATURE_ENABLE = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) DTV_GRAPHICS_VIC_BANK
(const byte*) DTV_GRAPHICS_VIC_BANK#0 DTV_GRAPHICS_VIC_BANK = ((byte*))(word/dword/signed dword) 53309
(byte*) DTV_PLANEA_MODULO_HI
(const byte*) DTV_PLANEA_MODULO_HI#0 DTV_PLANEA_MODULO_HI = ((byte*))(word/dword/signed dword) 53305
(byte*) DTV_PLANEA_MODULO_LO
(const byte*) DTV_PLANEA_MODULO_LO#0 DTV_PLANEA_MODULO_LO = ((byte*))(word/dword/signed dword) 53304
(byte*) DTV_PLANEA_START_HI
(const byte*) DTV_PLANEA_START_HI#0 DTV_PLANEA_START_HI = ((byte*))(word/dword/signed dword) 53317
(byte*) DTV_PLANEA_START_LO
(const byte*) DTV_PLANEA_START_LO#0 DTV_PLANEA_START_LO = ((byte*))(word/dword/signed dword) 53306
(byte*) DTV_PLANEA_START_MI
(const byte*) DTV_PLANEA_START_MI#0 DTV_PLANEA_START_MI = ((byte*))(word/dword/signed dword) 53307
(byte*) DTV_PLANEA_STEP
(const byte*) DTV_PLANEA_STEP#0 DTV_PLANEA_STEP = ((byte*))(word/dword/signed dword) 53318
(byte*) DTV_PLANEB_MODULO_HI
(const byte*) DTV_PLANEB_MODULO_HI#0 DTV_PLANEB_MODULO_HI = ((byte*))(word/dword/signed dword) 53320
(byte*) DTV_PLANEB_MODULO_LO
(const byte*) DTV_PLANEB_MODULO_LO#0 DTV_PLANEB_MODULO_LO = ((byte*))(word/dword/signed dword) 53319
(byte*) DTV_PLANEB_START_HI
(const byte*) DTV_PLANEB_START_HI#0 DTV_PLANEB_START_HI = ((byte*))(word/dword/signed dword) 53323
(byte*) DTV_PLANEB_START_LO
(const byte*) DTV_PLANEB_START_LO#0 DTV_PLANEB_START_LO = ((byte*))(word/dword/signed dword) 53321
(byte*) DTV_PLANEB_START_MI
(const byte*) DTV_PLANEB_START_MI#0 DTV_PLANEB_START_MI = ((byte*))(word/dword/signed dword) 53322
(byte*) DTV_PLANEB_STEP
(const byte*) DTV_PLANEB_STEP#0 DTV_PLANEB_STEP = ((byte*))(word/dword/signed dword) 53324
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte) KEY_C
(const byte) KEY_C#0 KEY_C = (byte/signed byte/word/signed word/dword/signed dword) 20
(byte) KEY_SPACE
(const byte) KEY_SPACE#0 KEY_SPACE = (byte/signed byte/word/signed word/dword/signed dword) 60
(byte) LIGHT_GREEN
(const byte) LIGHT_GREEN#0 LIGHT_GREEN = (byte/signed byte/word/signed word/dword/signed dword) 13
(byte*) MENU_CHARSET
(const byte*) MENU_CHARSET#0 MENU_CHARSET = ((byte*))(word/dword/signed dword) 38912
(byte*) MENU_SCREEN
(const byte*) MENU_SCREEN#0 MENU_SCREEN = ((byte*))(word/dword/signed dword) 32768
(byte[]) MENU_TEXT
(const string) MENU_TEXT#0 MENU_TEXT = (string) "C64DTV Graphics Modes            EMBLHCC@"+(string) "                                 CCMIIHO@"+(string) "                                 MMMNCUL@"+(string) "----------------------------------------@"+(string) "1. Standard Char             (V) 0000000@"+(string) "2. Extended Color Char       (V) 1000000@"+(string) "3. Multicolor Char           (V) 0100000@"+(string) "4. Standard Bitmap           (V) 0010000@"+(string) "5. Multicolor Bitmap         (V) 0110000@"+(string) "6. High Color Standard Char  (H) 0000100@"+(string) "7. High Extended Color Char  (H) 1000100@"+(string) "8. High Multicolor Char      (H) 0100100@"+(string) "9. High Multicolor Bitmap    (H) 0110100@"+(string) "a. Sixs Fred                 (D) 1111100@"+(string) "b. Sixs Fred 2               (D) 1111000@"+(string) "c. Two Plane Bitmap          (D) 1011100@"+(string) "d. Two Plane Multicol Bitmap (D) 1111100@"+(string) "e. 8bpp Pixel Cell           (D) 1101110@"+(string) "f. Chunky 8bpp Bitmap        (D) 1101111@"+(string) "----------------------------------------@"+(string) "    (V) vicII (H) vicII+hicol (D) c64dtv@"+(string) "@"
(byte*) TWOPLANE_PLANEA
(const byte*) TWOPLANE_PLANEA#0 TWOPLANE_PLANEA = ((byte*))(word/signed word/dword/signed dword) 16384
(byte*) TWOPLANE_PLANEB
(const byte*) TWOPLANE_PLANEB#0 TWOPLANE_PLANEB = ((byte*))(word/signed word/dword/signed dword) 24576
(byte) VIC_BMM
(const byte) VIC_BMM#0 VIC_BMM = (byte/signed byte/word/signed word/dword/signed dword) 32
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = ((byte*))(word/dword/signed dword) 53265
(byte*) VIC_CONTROL2
(const byte*) VIC_CONTROL2#0 VIC_CONTROL2 = ((byte*))(word/dword/signed dword) 53270
(byte) VIC_CSEL
(const byte) VIC_CSEL#0 VIC_CSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte/signed byte/word/signed word/dword/signed dword) 16
(byte) VIC_ECM
(const byte) VIC_ECM#0 VIC_ECM = (byte/signed byte/word/signed word/dword/signed dword) 64
(byte*) VIC_MEMORY
(const byte*) VIC_MEMORY#0 VIC_MEMORY = ((byte*))(word/dword/signed dword) 53272
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$2 reg byte a 4.0
(label) keyboard_key_pressed::@2
(label) keyboard_key_pressed::@return
(byte) keyboard_key_pressed::colidx
(byte) keyboard_key_pressed::colidx#0 reg byte x 0.6666666666666666
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::key#2 reg byte y 2.0
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0 reg byte a 51.0
(byte) keyboard_key_pressed::return#2 reg byte a 202.0
(byte) keyboard_key_pressed::return#3 reg byte a 202.0
(byte) keyboard_key_pressed::rowidx
(byte) keyboard_key_pressed::rowidx#0 reg byte a 4.0
(byte[]) keyboard_matrix_col_bitmask
(const byte[]) keyboard_matrix_col_bitmask#0 keyboard_matrix_col_bitmask = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 16, (byte/signed byte/word/signed word/dword/signed dword) 32, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/word/signed word/dword/signed dword) 128 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 1.3333333333333333
(byte) keyboard_matrix_read::return#2 reg byte a 4.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte a 4.0
(byte[8]) keyboard_matrix_row_bitmask
(const byte[8]) keyboard_matrix_row_bitmask#0 keyboard_matrix_row_bitmask = { (byte/word/signed word/dword/signed dword) 254, (byte/word/signed word/dword/signed dword) 253, (byte/word/signed word/dword/signed dword) 251, (byte/word/signed word/dword/signed dword) 247, (byte/word/signed word/dword/signed dword) 239, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 191, (byte/signed byte/word/signed word/dword/signed dword) 127 }
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) menu()
(byte~) menu::$22 reg byte a 202.0
(label) menu::@1
(label) menu::@12
(label) menu::@13
(label) menu::@15
(label) menu::@2
(label) menu::@3
(label) menu::@5
(label) menu::@6
(label) menu::@9
(label) menu::@return
(byte*) menu::c
(byte*) menu::c#1 c zp ZP_WORD:2 151.5
(byte*) menu::c#2 c zp ZP_WORD:2 151.5
(byte*) menu::last
(const byte*) menu::last#0 last = (const byte*) MENU_SCREEN#0+(word/signed word/dword/signed dword) 999
(void()) mode_twoplanebitmap()
(byte~) mode_twoplanebitmap::$12 reg byte a 2002.0
(byte~) mode_twoplanebitmap::$19 reg byte a 202.0
(byte~) mode_twoplanebitmap::$9 reg byte a 202.0
(label) mode_twoplanebitmap::@1
(label) mode_twoplanebitmap::@13
(label) mode_twoplanebitmap::@15
(label) mode_twoplanebitmap::@17
(label) mode_twoplanebitmap::@2
(label) mode_twoplanebitmap::@24
(label) mode_twoplanebitmap::@3
(label) mode_twoplanebitmap::@4
(label) mode_twoplanebitmap::@5
(label) mode_twoplanebitmap::@6
(label) mode_twoplanebitmap::@7
(label) mode_twoplanebitmap::@8
(label) mode_twoplanebitmap::@9
(label) mode_twoplanebitmap::@return
(byte) mode_twoplanebitmap::ax
(byte) mode_twoplanebitmap::ax#1 reg byte x 1501.5
(byte) mode_twoplanebitmap::ax#2 reg byte x 250.25
(byte) mode_twoplanebitmap::ay
(byte) mode_twoplanebitmap::ay#1 ay zp ZP_BYTE:6 151.5
(byte) mode_twoplanebitmap::ay#4 ay zp ZP_BYTE:6 109.36363636363637
(byte) mode_twoplanebitmap::bx
(byte) mode_twoplanebitmap::bx#1 reg byte x 1501.5
(byte) mode_twoplanebitmap::bx#2 reg byte x 667.3333333333334
(byte) mode_twoplanebitmap::by
(byte) mode_twoplanebitmap::by#1 by zp ZP_BYTE:6 151.5
(byte) mode_twoplanebitmap::by#4 by zp ZP_BYTE:6 33.666666666666664
(byte*) mode_twoplanebitmap::c
(byte*) mode_twoplanebitmap::c#1 c zp ZP_WORD:4 151.5
(byte*) mode_twoplanebitmap::c#2 c zp ZP_WORD:4 134.66666666666666
(byte*) mode_twoplanebitmap::gfxa
(byte*) mode_twoplanebitmap::gfxa#1 gfxa zp ZP_WORD:4 2002.0
(byte*) mode_twoplanebitmap::gfxa#2 gfxa zp ZP_WORD:4 2002.0
(byte*) mode_twoplanebitmap::gfxa#3 gfxa zp ZP_WORD:4 1021.2
(byte*) mode_twoplanebitmap::gfxa#6 gfxa zp ZP_WORD:4 202.0
(byte*) mode_twoplanebitmap::gfxa#7 gfxa zp ZP_WORD:4 620.8
(byte*) mode_twoplanebitmap::gfxb
(byte*) mode_twoplanebitmap::gfxb#1 gfxb zp ZP_WORD:4 420.59999999999997
(byte*) mode_twoplanebitmap::gfxb#2 gfxb zp ZP_WORD:4 1552.0
(byte*) mode_twoplanebitmap::gfxb#3 gfxb zp ZP_WORD:4 202.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:2 2002.0
(byte*) print_char_cursor#11 print_char_cursor zp ZP_WORD:2 110.0
(byte*) print_char_cursor#17 print_char_cursor zp ZP_WORD:2 821.0
(byte*) print_char_cursor#19 print_char_cursor zp ZP_WORD:2 14.2
(byte*) print_char_cursor#32 print_char_cursor zp ZP_WORD:2 572.0
(byte*~) print_char_cursor#55 print_char_cursor zp ZP_WORD:2 202.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:2 151.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:2 151.5
(byte*) print_line_cursor
(byte*) print_line_cursor#10 print_line_cursor zp ZP_WORD:7 110.0
(byte*) print_line_cursor#17 print_line_cursor zp ZP_WORD:7 4.5600000000000005
(byte*) print_line_cursor#18 print_line_cursor zp ZP_WORD:7 2004.0
(byte*) print_line_cursor#19 print_line_cursor zp ZP_WORD:7 641.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#13 print_screen zp ZP_WORD:2
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(void()) print_str_lines((byte*) print_str_lines::str)
(label) print_str_lines::@1
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@8
(label) print_str_lines::@9
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0 reg byte a 667.3333333333334
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0 str zp ZP_WORD:4 233.66666666666669
(byte*) print_str_lines::str#2 str zp ZP_WORD:4 151.5
(byte*) print_str_lines::str#3 str zp ZP_WORD:4 1552.0

zp ZP_WORD:2 [ print_screen#13 print_char_cursor#17 print_char_cursor#11 print_char_cursor#19 print_char_cursor#55 print_char_cursor#32 print_char_cursor#1 menu::c#2 menu::c#1 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:4 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::c#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
zp ZP_BYTE:6 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
reg byte x [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
reg byte x [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
reg byte y [ keyboard_key_pressed::key#2 ]
zp ZP_WORD:7 [ print_line_cursor#18 print_line_cursor#10 print_line_cursor#17 print_line_cursor#19 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ menu::$22 ]
reg byte a [ mode_twoplanebitmap::$9 ]
reg byte a [ mode_twoplanebitmap::$12 ]
reg byte a [ keyboard_key_pressed::return#3 ]
reg byte a [ mode_twoplanebitmap::$19 ]
reg byte x [ keyboard_key_pressed::colidx#0 ]
reg byte a [ keyboard_key_pressed::rowidx#0 ]
reg byte a [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ print_str_lines::ch#0 ]


FINAL ASSEMBLER
Score: 212543

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  .label COLS = $d800
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .const GREEN = 5
  .const BLUE = 6
  .const LIGHT_GREEN = $d
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  .label DTV_CONTROL = $d03c
  .const DTV_CONTROL_LINEAR_ADDRESSING_ON = 1
  .const DTV_CONTROL_HIGHCOLOR_ON = 4
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_C = $14
  .const KEY_SPACE = $3c
  .label MENU_SCREEN = $8000
  .label MENU_CHARSET = $9800
  .label TWOPLANE_PLANEA = $4000
  .label TWOPLANE_PLANEB = $6000
  .label print_char_cursor = 2
  .label print_line_cursor = 7
  .label print_screen = 2
//SEG2 @begin
//SEG3 [1] phi from @begin to @21 [phi:@begin->@21]
//SEG4 @21
//SEG5 [2] call main param-assignment [ ] ( )
  jsr main
//SEG6 [3] phi from @21 to @end [phi:@21->@end]
//SEG7 @end
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte*) print_char_cursor#11 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG12 [5] phi (byte*) print_line_cursor#10 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG13 [5] phi (byte*) print_screen#13 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_screen
    lda #>$400
    sta print_screen+1
  //SEG14 main::@1
  //SEG15 [6] if(true) goto main::@2 [ ] ( main:2 [ ] ) -- true_then_la1 
  //SEG16 main::@return
  //SEG17 [7] return  [ ] ( main:2 [ ] )
  //SEG18 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG19 main::@2
  b2:
  //SEG20 [9] call menu param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2 [ print_line_cursor#17 print_char_cursor#19 ] )
    jsr menu
  //SEG21 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG22 [5] phi (byte*) print_char_cursor#11 = (byte*) print_char_cursor#19 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG23 [5] phi (byte*) print_line_cursor#10 = (byte*) print_line_cursor#17 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG24 [5] phi (byte*) print_screen#13 = (const byte*) MENU_SCREEN#0 [phi:main::@2->main::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta print_screen
    lda #>MENU_SCREEN
    sta print_screen+1
    jmp b2
}
//SEG25 menu
menu: {
    .label last = MENU_SCREEN+$3e7
    .label c = 2
  //SEG26 [10] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) MENU_CHARSET#0/(dword/signed dword) 65536 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #($ffffffff&MENU_CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG27 [11] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_CONTROL
  //SEG28 [12] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG29 [13] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) MENU_CHARSET#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3^MENU_CHARSET/$4000
    sta CIA2_PORT_A
  //SEG30 [14] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG31 [15] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG32 [16] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) MENU_SCREEN#0&(word/signed word/dword/signed dword) 16383/(byte/signed byte/word/signed word/dword/signed dword) 64|((word))(const byte*) MENU_CHARSET#0&(word/signed word/dword/signed dword) 16383/(word/signed word/dword/signed dword) 1024 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #(MENU_SCREEN&$3fff)/$40|(MENU_CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG33 [17] phi from menu to menu::@1 [phi:menu->menu::@1]
  //SEG34 [17] phi (byte*) menu::c#2 = (const byte*) COLS#0 [phi:menu->menu::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta c
    lda #>COLS
    sta c+1
  //SEG35 [17] phi from menu::@1 to menu::@1 [phi:menu::@1->menu::@1]
  //SEG36 [17] phi (byte*) menu::c#2 = (byte*) menu::c#1 [phi:menu::@1->menu::@1#0] -- register_copy 
  //SEG37 menu::@1
  b1:
  //SEG38 [18] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN#0 [ menu::c#2 ] ( main:2::menu:9 [ menu::c#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #LIGHT_GREEN
    ldy #0
    sta (c),y
  //SEG39 [19] (byte*) menu::c#1 ← ++ (byte*) menu::c#2 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] ) -- pbuz1=_inc_pbuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG40 [20] if((byte*) menu::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto menu::@1 [ menu::c#1 ] ( main:2::menu:9 [ menu::c#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda c+1
    cmp #>COLS+$3e8
    bne b1
    lda c
    cmp #<COLS+$3e8
    bne b1
  //SEG41 menu::@6
  //SEG42 [21] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta BGCOL
  //SEG43 [22] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9 [ ] ) -- _deref_pbuc1=vbuc2 
    sta BORDERCOL
  //SEG44 [23] call print_set_screen param-assignment [ ] ( main:2::menu:9 [ ] )
  //SEG45 [127] phi from menu::@6 to print_set_screen [phi:menu::@6->print_set_screen]
    jsr print_set_screen
  //SEG46 [24] phi from menu::@6 to menu::@12 [phi:menu::@6->menu::@12]
  //SEG47 menu::@12
  //SEG48 [25] call print_cls param-assignment [ ] ( main:2::menu:9 [ ] )
  //SEG49 [121] phi from menu::@12 to print_cls [phi:menu::@12->print_cls]
    jsr print_cls
  //SEG50 [26] phi from menu::@12 to menu::@13 [phi:menu::@12->menu::@13]
  //SEG51 menu::@13
  //SEG52 [27] call print_str_lines param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
  //SEG53 [101] phi from menu::@13 to print_str_lines [phi:menu::@13->print_str_lines]
    jsr print_str_lines
  //SEG54 menu::@2
  //SEG55 [28] if(true) goto menu::@3 [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] ) -- true_then_la1 
    jmp b3
  //SEG56 menu::@return
  breturn:
  //SEG57 [29] return  [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
    rts
  //SEG58 [30] phi from menu::@2 to menu::@3 [phi:menu::@2->menu::@3]
  //SEG59 menu::@3
  b3:
  //SEG60 [31] call keyboard_key_pressed param-assignment [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
  //SEG61 [89] phi from menu::@3 to keyboard_key_pressed [phi:menu::@3->keyboard_key_pressed]
  //SEG62 [89] phi (byte) keyboard_key_pressed::key#2 = (const byte) KEY_C#0 [phi:menu::@3->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_C
    jsr keyboard_key_pressed
  //SEG63 [32] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#2 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#2 ] )
    // (byte) keyboard_key_pressed::return#2 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
  //SEG64 menu::@15
  //SEG65 [33] (byte~) menu::$22 ← (byte) keyboard_key_pressed::return#2 [ print_line_cursor#17 print_char_cursor#19 menu::$22 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 menu::$22 ] )
    // (byte~) menu::$22 = (byte) keyboard_key_pressed::return#2  // register copy reg byte a
  //SEG66 [34] if((byte~) menu::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto menu::@5 [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG67 [35] phi from menu::@15 to menu::@9 [phi:menu::@15->menu::@9]
  //SEG68 menu::@9
  //SEG69 [36] call mode_twoplanebitmap param-assignment [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] )
    jsr mode_twoplanebitmap
    jmp breturn
  //SEG70 menu::@5
  b5:
  //SEG71 [37] *((const byte*) menu::last#0) ← ++ *((const byte*) menu::last#0) [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc last
    jmp b3
}
//SEG72 mode_twoplanebitmap
mode_twoplanebitmap: {
    .label c = 4
    .label gfxa = 4
    .label ay = 6
    .label gfxb = 4
    .label by = 6
  //SEG73 [38] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_CONTROL_HIGHCOLOR_ON#0|(const byte) DTV_CONTROL_LINEAR_ADDRESSING_ON#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_CONTROL_HIGHCOLOR_ON|DTV_CONTROL_LINEAR_ADDRESSING_ON
    sta DTV_CONTROL
  //SEG74 [39] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_ECM#0|(const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_ECM|VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG75 [40] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG76 [41] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #<TWOPLANE_PLANEA
    sta DTV_PLANEA_START_LO
  //SEG77 [42] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) TWOPLANE_PLANEA#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #>TWOPLANE_PLANEA
    sta DTV_PLANEA_START_MI
  //SEG78 [43] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG79 [44] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG80 [45] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG81 [46] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEA_MODULO_HI
  //SEG82 [47] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #<TWOPLANE_PLANEB
    sta DTV_PLANEB_START_LO
  //SEG83 [48] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) TWOPLANE_PLANEB#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #>TWOPLANE_PLANEB
    sta DTV_PLANEB_START_MI
  //SEG84 [49] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG85 [50] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEB_STEP
  //SEG86 [51] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG87 [52] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
  //SEG88 [53] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    sta BORDERCOL
  //SEG89 [54] *((const byte*) BGCOL1#0) ← (const byte) GREEN#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BGCOL1
  //SEG90 [55] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL2
  //SEG91 [56] phi from mode_twoplanebitmap to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1]
  //SEG92 [56] phi (byte*) mode_twoplanebitmap::c#2 = (const byte*) COLS#0 [phi:mode_twoplanebitmap->mode_twoplanebitmap::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta c
    lda #>COLS
    sta c+1
  //SEG93 [56] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1]
  //SEG94 [56] phi (byte*) mode_twoplanebitmap::c#2 = (byte*) mode_twoplanebitmap::c#1 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@1#0] -- register_copy 
  //SEG95 mode_twoplanebitmap::@1
  b1:
  //SEG96 [57] (byte~) mode_twoplanebitmap::$9 ← < (byte*) mode_twoplanebitmap::c#2 [ mode_twoplanebitmap::c#2 mode_twoplanebitmap::$9 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 mode_twoplanebitmap::$9 ] ) -- vbuaa=_lo_pbuz1 
    lda c
  //SEG97 [58] *((byte*) mode_twoplanebitmap::c#2) ← (byte~) mode_twoplanebitmap::$9 [ mode_twoplanebitmap::c#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#2 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (c),y
  //SEG98 [59] (byte*) mode_twoplanebitmap::c#1 ← ++ (byte*) mode_twoplanebitmap::c#2 [ mode_twoplanebitmap::c#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#1 ] ) -- pbuz1=_inc_pbuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG99 [60] if((byte*) mode_twoplanebitmap::c#1!=(const byte*) COLS#0+(word/signed word/dword/signed dword) 1000) goto mode_twoplanebitmap::@1 [ mode_twoplanebitmap::c#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::c#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda c+1
    cmp #>COLS+$3e8
    bne b1
    lda c
    cmp #<COLS+$3e8
    bne b1
  //SEG100 [61] phi from mode_twoplanebitmap::@1 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@2]
  //SEG101 [61] phi (byte*) mode_twoplanebitmap::gfxa#6 = (const byte*) TWOPLANE_PLANEA#0 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@2#0] -- pbuz1=pbuc1 
    lda #<TWOPLANE_PLANEA
    sta gfxa
    lda #>TWOPLANE_PLANEA
    sta gfxa+1
  //SEG102 [61] phi (byte) mode_twoplanebitmap::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@1->mode_twoplanebitmap::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
  //SEG103 [61] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@2 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@2]
  //SEG104 [61] phi (byte*) mode_twoplanebitmap::gfxa#6 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@2#0] -- register_copy 
  //SEG105 [61] phi (byte) mode_twoplanebitmap::ay#4 = (byte) mode_twoplanebitmap::ay#1 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@2#1] -- register_copy 
  //SEG106 mode_twoplanebitmap::@2
  b2:
  //SEG107 [62] phi from mode_twoplanebitmap::@2 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3]
  //SEG108 [62] phi (byte) mode_twoplanebitmap::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG109 [62] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#6 [phi:mode_twoplanebitmap::@2->mode_twoplanebitmap::@3#1] -- register_copy 
  //SEG110 [62] phi from mode_twoplanebitmap::@5 to mode_twoplanebitmap::@3 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3]
  //SEG111 [62] phi (byte) mode_twoplanebitmap::ax#2 = (byte) mode_twoplanebitmap::ax#1 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3#0] -- register_copy 
  //SEG112 [62] phi (byte*) mode_twoplanebitmap::gfxa#3 = (byte*) mode_twoplanebitmap::gfxa#7 [phi:mode_twoplanebitmap::@5->mode_twoplanebitmap::@3#1] -- register_copy 
  //SEG113 mode_twoplanebitmap::@3
  b3:
  //SEG114 [63] (byte~) mode_twoplanebitmap::$12 ← (byte) mode_twoplanebitmap::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::$12 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and ay
  //SEG115 [64] if((byte~) mode_twoplanebitmap::$12!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@4 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b4
  //SEG116 mode_twoplanebitmap::@13
  //SEG117 [65] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (gfxa),y
  //SEG118 [66] (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#2 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG119 [67] phi from mode_twoplanebitmap::@13 mode_twoplanebitmap::@4 to mode_twoplanebitmap::@5 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@4->mode_twoplanebitmap::@5]
  //SEG120 [67] phi (byte*) mode_twoplanebitmap::gfxa#7 = (byte*) mode_twoplanebitmap::gfxa#2 [phi:mode_twoplanebitmap::@13/mode_twoplanebitmap::@4->mode_twoplanebitmap::@5#0] -- register_copy 
  //SEG121 mode_twoplanebitmap::@5
  b5:
  //SEG122 [68] (byte) mode_twoplanebitmap::ax#1 ← ++ (byte) mode_twoplanebitmap::ax#2 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG123 [69] if((byte) mode_twoplanebitmap::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto mode_twoplanebitmap::@3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::ax#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b3
  //SEG124 mode_twoplanebitmap::@15
  //SEG125 [70] (byte) mode_twoplanebitmap::ay#1 ← ++ (byte) mode_twoplanebitmap::ay#4 [ mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ) -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG126 [71] if((byte) mode_twoplanebitmap::ay#1!=(byte/word/signed word/dword/signed dword) 200) goto mode_twoplanebitmap::@2 [ mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#1 mode_twoplanebitmap::gfxa#7 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ay
    cmp #$c8
    bne b2
  //SEG127 [72] phi from mode_twoplanebitmap::@15 to mode_twoplanebitmap::@6 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@6]
  //SEG128 [72] phi (byte) mode_twoplanebitmap::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG129 [72] phi (byte*) mode_twoplanebitmap::gfxb#3 = (const byte*) TWOPLANE_PLANEB#0 [phi:mode_twoplanebitmap::@15->mode_twoplanebitmap::@6#1] -- pbuz1=pbuc1 
    lda #<TWOPLANE_PLANEB
    sta gfxb
    lda #>TWOPLANE_PLANEB
    sta gfxb+1
  //SEG130 [72] phi from mode_twoplanebitmap::@17 to mode_twoplanebitmap::@6 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@6]
  //SEG131 [72] phi (byte) mode_twoplanebitmap::by#4 = (byte) mode_twoplanebitmap::by#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@6#0] -- register_copy 
  //SEG132 [72] phi (byte*) mode_twoplanebitmap::gfxb#3 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@17->mode_twoplanebitmap::@6#1] -- register_copy 
  //SEG133 mode_twoplanebitmap::@6
  b6:
  //SEG134 [73] phi from mode_twoplanebitmap::@6 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7]
  //SEG135 [73] phi (byte) mode_twoplanebitmap::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG136 [73] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#3 [phi:mode_twoplanebitmap::@6->mode_twoplanebitmap::@7#1] -- register_copy 
  //SEG137 [73] phi from mode_twoplanebitmap::@7 to mode_twoplanebitmap::@7 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@7]
  //SEG138 [73] phi (byte) mode_twoplanebitmap::bx#2 = (byte) mode_twoplanebitmap::bx#1 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@7#0] -- register_copy 
  //SEG139 [73] phi (byte*) mode_twoplanebitmap::gfxb#2 = (byte*) mode_twoplanebitmap::gfxb#1 [phi:mode_twoplanebitmap::@7->mode_twoplanebitmap::@7#1] -- register_copy 
  //SEG140 mode_twoplanebitmap::@7
  b7:
  //SEG141 [74] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) 15 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::bx#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
  //SEG142 [75] (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#2 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG143 [76] (byte) mode_twoplanebitmap::bx#1 ← ++ (byte) mode_twoplanebitmap::bx#2 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG144 [77] if((byte) mode_twoplanebitmap::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto mode_twoplanebitmap::@7 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::by#4 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::bx#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b7
  //SEG145 mode_twoplanebitmap::@17
  //SEG146 [78] (byte) mode_twoplanebitmap::by#1 ← ++ (byte) mode_twoplanebitmap::by#4 [ mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ) -- vbuz1=_inc_vbuz1 
    inc by
  //SEG147 [79] if((byte) mode_twoplanebitmap::by#1!=(byte/word/signed word/dword/signed dword) 200) goto mode_twoplanebitmap::@6 [ mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::gfxb#1 mode_twoplanebitmap::by#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda by
    cmp #$c8
    bne b6
  //SEG148 mode_twoplanebitmap::@8
  //SEG149 [80] if(true) goto mode_twoplanebitmap::@9 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- true_then_la1 
    jmp b9
  //SEG150 mode_twoplanebitmap::@return
  breturn:
  //SEG151 [81] return  [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] )
    rts
  //SEG152 [82] phi from mode_twoplanebitmap::@8 to mode_twoplanebitmap::@9 [phi:mode_twoplanebitmap::@8->mode_twoplanebitmap::@9]
  //SEG153 mode_twoplanebitmap::@9
  b9:
  //SEG154 [83] call keyboard_key_pressed param-assignment [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
  //SEG155 [89] phi from mode_twoplanebitmap::@9 to keyboard_key_pressed [phi:mode_twoplanebitmap::@9->keyboard_key_pressed]
  //SEG156 [89] phi (byte) keyboard_key_pressed::key#2 = (const byte) KEY_SPACE#0 [phi:mode_twoplanebitmap::@9->keyboard_key_pressed#0] -- vbuyy=vbuc1 
    ldy #KEY_SPACE
    jsr keyboard_key_pressed
  //SEG157 [84] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0 [ keyboard_key_pressed::return#3 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#3 ] )
    // (byte) keyboard_key_pressed::return#3 = (byte) keyboard_key_pressed::return#0  // register copy reg byte a
  //SEG158 mode_twoplanebitmap::@24
  //SEG159 [85] (byte~) mode_twoplanebitmap::$19 ← (byte) keyboard_key_pressed::return#3 [ mode_twoplanebitmap::$19 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::$19 ] )
    // (byte~) mode_twoplanebitmap::$19 = (byte) keyboard_key_pressed::return#3  // register copy reg byte a
  //SEG160 [86] if((byte~) mode_twoplanebitmap::$19==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode_twoplanebitmap::@8 [ ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b9
    jmp breturn
  //SEG161 mode_twoplanebitmap::@4
  b4:
  //SEG162 [87] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte/word/signed word/dword/signed dword) 255 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::ax#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
  //SEG163 [88] (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3 [ mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#1 ] ( main:2::menu:9::mode_twoplanebitmap:36 [ print_line_cursor#17 print_char_cursor#19 mode_twoplanebitmap::ay#4 mode_twoplanebitmap::ax#2 mode_twoplanebitmap::gfxa#1 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
    jmp b5
}
//SEG164 keyboard_key_pressed
keyboard_key_pressed: {
  //SEG165 [90] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::key#2 keyboard_key_pressed::colidx#0 ] ) -- vbuxx=vbuyy_band_vbuc1 
    tya
    and #7
    tax
  //SEG166 [91] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#2 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::rowidx#0 ] ) -- vbuaa=vbuyy_ror_3 
    tya
    lsr
    lsr
    lsr
  //SEG167 [92] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::rowid#0 ] )
    // (byte) keyboard_matrix_read::rowid#0 = (byte) keyboard_key_pressed::rowidx#0  // register copy reg byte a
  //SEG168 [93] call keyboard_matrix_read param-assignment [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] )
    jsr keyboard_matrix_read
  //SEG169 [94] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 [ keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#2 ] )
    // (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#0  // register copy reg byte a
  //SEG170 keyboard_key_pressed::@2
  //SEG171 [95] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2 [ keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_key_pressed::$2 ] )
    // (byte~) keyboard_key_pressed::$2 = (byte) keyboard_matrix_read::return#2  // register copy reg byte a
  //SEG172 [96] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_key_pressed::colidx#0) [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] ) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
  //SEG173 keyboard_key_pressed::@return
  //SEG174 [97] return  [ keyboard_key_pressed::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::return#0 ] )
    rts
}
//SEG175 keyboard_matrix_read
keyboard_matrix_read: {
  //SEG176 [98] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 ] ) -- _deref_pbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
  //SEG177 [99] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] ) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
  //SEG178 keyboard_matrix_read::@return
  //SEG179 [100] return  [ keyboard_matrix_read::return#0 ] ( main:2::menu:9::keyboard_key_pressed:31::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] main:2::menu:9::mode_twoplanebitmap:36::keyboard_key_pressed:83::keyboard_matrix_read:93 [ print_line_cursor#17 print_char_cursor#19 keyboard_key_pressed::colidx#0 keyboard_matrix_read::return#0 ] )
    rts
}
//SEG180 print_str_lines
print_str_lines: {
    .label str = 4
  //SEG181 [102] phi from print_str_lines to print_str_lines::@1 [phi:print_str_lines->print_str_lines::@1]
  //SEG182 [102] phi (byte*) print_line_cursor#17 = (const byte*) MENU_SCREEN#0 [phi:print_str_lines->print_str_lines::@1#0] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta print_line_cursor
    lda #>MENU_SCREEN
    sta print_line_cursor+1
  //SEG183 [102] phi (byte*) print_char_cursor#19 = (const byte*) MENU_SCREEN#0 [phi:print_str_lines->print_str_lines::@1#1] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta print_char_cursor
    lda #>MENU_SCREEN
    sta print_char_cursor+1
  //SEG184 [102] phi (byte*) print_str_lines::str#2 = (const string) MENU_TEXT#0 [phi:print_str_lines->print_str_lines::@1#2] -- pbuz1=pbuc1 
    lda #<MENU_TEXT
    sta str
    lda #>MENU_TEXT
    sta str+1
  //SEG185 print_str_lines::@1
  b1:
  //SEG186 [103] if(*((byte*) print_str_lines::str#2)!=(byte) '@') goto print_str_lines::@4 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 print_str_lines::str#2 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b4
  //SEG187 print_str_lines::@return
  //SEG188 [104] return  [ print_line_cursor#17 print_char_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_char_cursor#19 ] )
    rts
  //SEG189 [105] phi from print_str_lines::@1 print_str_lines::@5 to print_str_lines::@4 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4]
  //SEG190 [105] phi (byte*) print_char_cursor#17 = (byte*) print_char_cursor#19 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#0] -- register_copy 
  //SEG191 [105] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#2 [phi:print_str_lines::@1/print_str_lines::@5->print_str_lines::@4#1] -- register_copy 
  //SEG192 print_str_lines::@4
  b4:
  //SEG193 [106] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3) [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#3 print_char_cursor#17 print_str_lines::ch#0 ] ) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
  //SEG194 [107] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG195 [108] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) -- vbuaa_eq_vbuc1_then_la1 
    cmp #'@'
    beq b5
  //SEG196 print_str_lines::@8
  //SEG197 [109] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#17 print_str_lines::ch#0 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG198 [110] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17 [ print_line_cursor#17 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#1 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_str_lines::ch#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG199 [111] phi from print_str_lines::@4 print_str_lines::@8 to print_str_lines::@5 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5]
  //SEG200 [111] phi (byte*) print_char_cursor#32 = (byte*) print_char_cursor#17 [phi:print_str_lines::@4/print_str_lines::@8->print_str_lines::@5#0] -- register_copy 
  //SEG201 print_str_lines::@5
  b5:
  //SEG202 [112] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27 [ print_line_cursor#17 print_str_lines::str#0 print_char_cursor#32 ] ) -- vbuaa_neq_vbuc1_then_la1 
    cmp #'@'
    bne b4
  //SEG203 [113] phi from print_str_lines::@5 to print_str_lines::@9 [phi:print_str_lines::@5->print_str_lines::@9]
  //SEG204 print_str_lines::@9
  //SEG205 [114] call print_ln param-assignment [ print_str_lines::str#0 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_str_lines::str#0 print_line_cursor#19 ] )
  //SEG206 [116] phi from print_str_lines::@9 to print_ln [phi:print_str_lines::@9->print_ln]
    jsr print_ln
  //SEG207 [115] (byte*~) print_char_cursor#55 ← (byte*) print_line_cursor#19 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27 [ print_str_lines::str#0 print_char_cursor#55 print_line_cursor#19 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG208 [102] phi from print_str_lines::@9 to print_str_lines::@1 [phi:print_str_lines::@9->print_str_lines::@1]
  //SEG209 [102] phi (byte*) print_line_cursor#17 = (byte*) print_line_cursor#19 [phi:print_str_lines::@9->print_str_lines::@1#0] -- register_copy 
  //SEG210 [102] phi (byte*) print_char_cursor#19 = (byte*~) print_char_cursor#55 [phi:print_str_lines::@9->print_str_lines::@1#1] -- register_copy 
  //SEG211 [102] phi (byte*) print_str_lines::str#2 = (byte*) print_str_lines::str#0 [phi:print_str_lines::@9->print_str_lines::@1#2] -- register_copy 
    jmp b1
}
//SEG212 print_ln
print_ln: {
  //SEG213 [117] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG214 [117] phi (byte*) print_line_cursor#18 = (byte*) print_line_cursor#17 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG215 print_ln::@1
  b1:
  //SEG216 [118] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG217 [119] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1 [ print_line_cursor#19 print_char_cursor#32 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 print_char_cursor#32 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG218 print_ln::@return
  //SEG219 [120] return  [ print_line_cursor#19 ] ( main:2::menu:9::print_str_lines:27::print_ln:114 [ print_str_lines::str#0 print_line_cursor#19 ] )
    rts
}
//SEG220 print_cls
print_cls: {
    .label sc = 2
  //SEG221 [122] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG222 [122] phi (byte*) print_cls::sc#2 = (const byte*) MENU_SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<MENU_SCREEN
    sta sc
    lda #>MENU_SCREEN
    sta sc+1
  //SEG223 [122] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG224 [122] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG225 print_cls::@1
  b1:
  //SEG226 [123] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG227 [124] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG228 [125] if((byte*) print_cls::sc#1!=(const byte*) MENU_SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::menu:9::print_cls:25 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>MENU_SCREEN+$3e8
    bne b1
    lda sc
    cmp #<MENU_SCREEN+$3e8
    bne b1
  //SEG229 print_cls::@return
  //SEG230 [126] return  [ ] ( main:2::menu:9::print_cls:25 [ ] )
    rts
}
//SEG231 print_set_screen
print_set_screen: {
  //SEG232 print_set_screen::@return
  //SEG233 [128] return  [ ] ( main:2::menu:9::print_set_screen:23 [ ] )
    rts
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  MENU_TEXT: .text "C64DTV Graphics Modes            EMBLHCC@"+"                                 CCMIIHO@"+"                                 MMMNCUL@"+"----------------------------------------@"+"1. Standard Char             (V) 0000000@"+"2. Extended Color Char       (V) 1000000@"+"3. Multicolor Char           (V) 0100000@"+"4. Standard Bitmap           (V) 0010000@"+"5. Multicolor Bitmap         (V) 0110000@"+"6. High Color Standard Char  (H) 0000100@"+"7. High Extended Color Char  (H) 1000100@"+"8. High Multicolor Char      (H) 0100100@"+"9. High Multicolor Bitmap    (H) 0110100@"+"a. Sixs Fred                 (D) 1111100@"+"b. Sixs Fred 2               (D) 1111000@"+"c. Two Plane Bitmap          (D) 1011100@"+"d. Two Plane Multicol Bitmap (D) 1111100@"+"e. 8bpp Pixel Cell           (D) 1101110@"+"f. Chunky 8bpp Bitmap        (D) 1101111@"+"----------------------------------------@"+"    (V) vicII (H) vicII+hicol (D) c64dtv@"+"@"

