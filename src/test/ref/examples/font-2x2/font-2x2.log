Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call main::$2 = call toD018 SCREEN FONT_COMPRESSED 

CONTROL FLOW GRAPH SSA

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main::@6
  memset::c#4 = phi( main::@6/memset::c#0 )
  memset::str#3 = phi( main::@6/memset::str#0 )
  memset::num#1 = phi( main::@6/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#0 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (byte*)memset::str#2
  memset::$2 = memset::$4 + memset::num#2
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start
  asm { sei  }
  *PROCPORT = PROCPORT_RAM_CHARROM
  font_2x2::font_original#0 = CHARGEN
  font_2x2::font_2x2#0 = FONT_ORIGINAL
  call font_2x2 
  to:main::@7
main::@7: scope:[main]  from main
  *PROCPORT = PROCPORT_BASIC_KERNEL_IO
  asm { cli  }
  font_compress::font_original#0 = FONT_ORIGINAL
  font_compress::font_compressed#0 = FONT_COMPRESSED
  font_compress::compress_mapping#0 = FONT_COMPRESSED_MAP
  call font_compress 
  font_compress::return#0 = font_compress::return#2
  to:main::@8
main::@8: scope:[main]  from main::@7
  main::toD0181_screen#0 = SCREEN
  main::toD0181_gfx#0 = FONT_COMPRESSED
  to:main::toD0181
main::toD0181: scope:[main]  from main::@8
  main::toD0181_gfx#1 = phi( main::@8/main::toD0181_gfx#0 )
  main::toD0181_screen#1 = phi( main::@8/main::toD0181_screen#0 )
  main::toD0181_$7 = (word)main::toD0181_screen#1
  main::toD0181_$0 = main::toD0181_$7 & $3fff
  main::toD0181_$1 = main::toD0181_$0 * 4
  main::toD0181_$2 = > main::toD0181_$1
  main::toD0181_$3 = > (word)main::toD0181_gfx#1
  main::toD0181_$4 = main::toD0181_$3 / 4
  main::toD0181_$5 = main::toD0181_$4 & $f
  main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
  main::toD0181_return#0 = main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  main::toD0181_return#2 = phi( main::toD0181/main::toD0181_return#0 )
  main::toD0181_return#1 = main::toD0181_return#2
  to:main::@6
main::@6: scope:[main]  from main::toD0181_@return
  main::toD0181_return#3 = phi( main::toD0181_@return/main::toD0181_return#1 )
  main::$2 = main::toD0181_return#3
  *D018 = main::$2
  memset::str#0 = (void*)SCREEN
  memset::c#0 = FONT_COMPRESSED_MAP[' ']
  memset::num#0 = $400
  call memset 
  memset::return#2 = memset::return#1
  to:main::@9
main::@9: scope:[main]  from main::@6
  main::c#0 = 0
  main::y#0 = 0
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@9
  main::y#4 = phi( main::@3/main::y#1, main::@9/main::y#0 )
  main::c#4 = phi( main::@3/main::c#5, main::@9/main::c#0 )
  main::x#0 = 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@10
  main::y#2 = phi( main::@1/main::y#4, main::@10/main::y#5 )
  main::x#2 = phi( main::@1/main::x#0, main::@10/main::x#1 )
  main::c#2 = phi( main::@1/main::c#4, main::@10/main::c#1 )
  show::c#0 = main::c#2
  show::x#0 = main::x#2
  show::y#0 = main::y#2
  show::font_mapping#0 = FONT_COMPRESSED_MAP
  call show 
  to:main::@10
main::@10: scope:[main]  from main::@2
  main::y#5 = phi( main::@2/main::y#2 )
  main::x#3 = phi( main::@2/main::x#2 )
  main::c#3 = phi( main::@2/main::c#2 )
  main::c#1 = ++ main::c#3
  main::x#1 = main::x#3 + rangenext(0,7)
  main::$5 = main::x#1 != rangelast(0,7)
  if(main::$5) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@10
  main::c#5 = phi( main::@10/main::c#1 )
  main::y#3 = phi( main::@10/main::y#5 )
  main::y#1 = main::y#3 + rangenext(0,7)
  main::$6 = main::y#1 != rangelast(0,7)
  if(main::$6) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  if(true) goto main::@5
  to:main::@return
main::@5: scope:[main]  from main::@4
  *(SCREEN+$3e7) = ++ *(SCREEN+$3e7)
  to:main::@4
main::@return: scope:[main]  from main::@4
  return 
  to:@return

void show(byte show::c , byte show::x , byte show::y , byte* show::font_mapping)
show: scope:[show]  from main::@2
  show::c#1 = phi( main::@2/show::c#0 )
  show::font_mapping#1 = phi( main::@2/show::font_mapping#0 )
  show::x#1 = phi( main::@2/show::x#0 )
  show::y#1 = phi( main::@2/show::y#0 )
  show::$7 = (word)show::y#1
  show::$0 = show::$7 * $50
  show::$1 = SCREEN + show::$0
  show::$2 = show::x#1 * 2
  show::$3 = show::$1 + show::$2
  show::ptr#0 = show::$3
  show::ptr#0[0] = show::font_mapping#1[show::c#1]
  show::$4 = show::c#1 + $40
  show::ptr#0[1] = show::font_mapping#1[show::$4]
  show::$5 = show::c#1 + $80
  show::ptr#0[$28] = show::font_mapping#1[show::$5]
  show::$6 = show::c#1 + $c0
  show::ptr#0[$29] = show::font_mapping#1[show::$6]
  to:show::@return
show::@return: scope:[show]  from show
  return 
  to:@return

void font_2x2(byte* font_2x2::font_original , byte* font_2x2::font_2x2)
font_2x2: scope:[font_2x2]  from main
  font_2x2::font_2x2#1 = phi( main/font_2x2::font_2x2#0 )
  font_2x2::font_original#1 = phi( main/font_2x2::font_original#0 )
  font_2x2::next_original#0 = font_2x2::font_original#1
  font_2x2::next_2x2#0 = font_2x2::font_2x2#1
  font_2x2::c#0 = 0
  to:font_2x2::@1
font_2x2::@1: scope:[font_2x2]  from font_2x2 font_2x2::@10
  font_2x2::c#11 = phi( font_2x2/font_2x2::c#0, font_2x2::@10/font_2x2::c#1 )
  font_2x2::next_original#4 = phi( font_2x2/font_2x2::next_original#0, font_2x2::@10/font_2x2::next_original#1 )
  font_2x2::next_2x2#2 = phi( font_2x2/font_2x2::next_2x2#0, font_2x2::@10/font_2x2::next_2x2#1 )
  font_2x2::next_2x2_left#0 = font_2x2::next_2x2#2
  font_2x2::$0 = font_2x2::next_2x2#2 + $40*8
  font_2x2::next_2x2_right#0 = font_2x2::$0
  font_2x2::l2#0 = 0
  font_2x2::l#0 = 0
  to:font_2x2::@2
font_2x2::@2: scope:[font_2x2]  from font_2x2::@1 font_2x2::@9
  font_2x2::c#10 = phi( font_2x2::@1/font_2x2::c#11, font_2x2::@9/font_2x2::c#3 )
  font_2x2::next_2x2#11 = phi( font_2x2::@1/font_2x2::next_2x2#2, font_2x2::@9/font_2x2::next_2x2#6 )
  font_2x2::next_2x2_right#7 = phi( font_2x2::@1/font_2x2::next_2x2_right#0, font_2x2::@9/font_2x2::next_2x2_right#8 )
  font_2x2::l2#8 = phi( font_2x2::@1/font_2x2::l2#0, font_2x2::@9/font_2x2::l2#9 )
  font_2x2::next_2x2_left#7 = phi( font_2x2::@1/font_2x2::next_2x2_left#0, font_2x2::@9/font_2x2::next_2x2_left#8 )
  font_2x2::l#2 = phi( font_2x2::@1/font_2x2::l#0, font_2x2::@9/font_2x2::l#1 )
  font_2x2::next_original#2 = phi( font_2x2::@1/font_2x2::next_original#4, font_2x2::@9/font_2x2::next_original#5 )
  font_2x2::glyph_bits#0 = font_2x2::next_original#2[font_2x2::l#2]
  font_2x2::glyph_bits_2x2#0 = 0
  font_2x2::b#0 = 0
  to:font_2x2::@3
font_2x2::@3: scope:[font_2x2]  from font_2x2::@2 font_2x2::@6
  font_2x2::c#9 = phi( font_2x2::@2/font_2x2::c#10, font_2x2::@6/font_2x2::c#6 )
  font_2x2::next_original#11 = phi( font_2x2::@2/font_2x2::next_original#2, font_2x2::@6/font_2x2::next_original#8 )
  font_2x2::next_2x2#10 = phi( font_2x2::@2/font_2x2::next_2x2#11, font_2x2::@6/font_2x2::next_2x2#7 )
  font_2x2::l#9 = phi( font_2x2::@2/font_2x2::l#2, font_2x2::@6/font_2x2::l#6 )
  font_2x2::next_2x2_right#6 = phi( font_2x2::@2/font_2x2::next_2x2_right#7, font_2x2::@6/font_2x2::next_2x2_right#3 )
  font_2x2::l2#7 = phi( font_2x2::@2/font_2x2::l2#8, font_2x2::@6/font_2x2::l2#4 )
  font_2x2::next_2x2_left#6 = phi( font_2x2::@2/font_2x2::next_2x2_left#7, font_2x2::@6/font_2x2::next_2x2_left#3 )
  font_2x2::b#5 = phi( font_2x2::@2/font_2x2::b#0, font_2x2::@6/font_2x2::b#1 )
  font_2x2::glyph_bits_2x2#7 = phi( font_2x2::@2/font_2x2::glyph_bits_2x2#0, font_2x2::@6/font_2x2::glyph_bits_2x2#2 )
  font_2x2::glyph_bits#2 = phi( font_2x2::@2/font_2x2::glyph_bits#0, font_2x2::@6/font_2x2::glyph_bits#1 )
  font_2x2::$1 = font_2x2::glyph_bits#2 & $80
  font_2x2::$22 = 0 != font_2x2::$1
  if(font_2x2::$22) goto font_2x2::@4
  to:font_2x2::@5
font_2x2::@4: scope:[font_2x2]  from font_2x2::@3
  font_2x2::c#7 = phi( font_2x2::@3/font_2x2::c#9 )
  font_2x2::next_original#9 = phi( font_2x2::@3/font_2x2::next_original#11 )
  font_2x2::next_2x2#8 = phi( font_2x2::@3/font_2x2::next_2x2#10 )
  font_2x2::l#7 = phi( font_2x2::@3/font_2x2::l#9 )
  font_2x2::next_2x2_right#4 = phi( font_2x2::@3/font_2x2::next_2x2_right#6 )
  font_2x2::l2#5 = phi( font_2x2::@3/font_2x2::l2#7 )
  font_2x2::next_2x2_left#4 = phi( font_2x2::@3/font_2x2::next_2x2_left#6 )
  font_2x2::b#3 = phi( font_2x2::@3/font_2x2::b#5 )
  font_2x2::glyph_bits#4 = phi( font_2x2::@3/font_2x2::glyph_bits#2 )
  font_2x2::glyph_bits_2x2#5 = phi( font_2x2::@3/font_2x2::glyph_bits_2x2#7 )
  font_2x2::$3 = 1
  to:font_2x2::@6
font_2x2::@5: scope:[font_2x2]  from font_2x2::@3
  font_2x2::c#8 = phi( font_2x2::@3/font_2x2::c#9 )
  font_2x2::next_original#10 = phi( font_2x2::@3/font_2x2::next_original#11 )
  font_2x2::next_2x2#9 = phi( font_2x2::@3/font_2x2::next_2x2#10 )
  font_2x2::l#8 = phi( font_2x2::@3/font_2x2::l#9 )
  font_2x2::next_2x2_right#5 = phi( font_2x2::@3/font_2x2::next_2x2_right#6 )
  font_2x2::l2#6 = phi( font_2x2::@3/font_2x2::l2#7 )
  font_2x2::next_2x2_left#5 = phi( font_2x2::@3/font_2x2::next_2x2_left#6 )
  font_2x2::b#4 = phi( font_2x2::@3/font_2x2::b#5 )
  font_2x2::glyph_bits#5 = phi( font_2x2::@3/font_2x2::glyph_bits#2 )
  font_2x2::glyph_bits_2x2#6 = phi( font_2x2::@3/font_2x2::glyph_bits_2x2#7 )
  font_2x2::$2 = 0
  to:font_2x2::@6
font_2x2::@6: scope:[font_2x2]  from font_2x2::@4 font_2x2::@5
  font_2x2::c#6 = phi( font_2x2::@4/font_2x2::c#7, font_2x2::@5/font_2x2::c#8 )
  font_2x2::next_original#8 = phi( font_2x2::@4/font_2x2::next_original#9, font_2x2::@5/font_2x2::next_original#10 )
  font_2x2::next_2x2#7 = phi( font_2x2::@4/font_2x2::next_2x2#8, font_2x2::@5/font_2x2::next_2x2#9 )
  font_2x2::l#6 = phi( font_2x2::@4/font_2x2::l#7, font_2x2::@5/font_2x2::l#8 )
  font_2x2::next_2x2_right#3 = phi( font_2x2::@4/font_2x2::next_2x2_right#4, font_2x2::@5/font_2x2::next_2x2_right#5 )
  font_2x2::l2#4 = phi( font_2x2::@4/font_2x2::l2#5, font_2x2::@5/font_2x2::l2#6 )
  font_2x2::next_2x2_left#3 = phi( font_2x2::@4/font_2x2::next_2x2_left#4, font_2x2::@5/font_2x2::next_2x2_left#5 )
  font_2x2::b#2 = phi( font_2x2::@4/font_2x2::b#3, font_2x2::@5/font_2x2::b#4 )
  font_2x2::glyph_bits#3 = phi( font_2x2::@4/font_2x2::glyph_bits#4, font_2x2::@5/font_2x2::glyph_bits#5 )
  font_2x2::glyph_bits_2x2#3 = phi( font_2x2::@4/font_2x2::glyph_bits_2x2#5, font_2x2::@5/font_2x2::glyph_bits_2x2#6 )
  font_2x2::$4 = phi( font_2x2::@4/font_2x2::$3, font_2x2::@5/font_2x2::$2 )
  font_2x2::glyph_bit#0 = font_2x2::$4
  font_2x2::$5 = font_2x2::glyph_bits_2x2#3 << 1
  font_2x2::$6 = font_2x2::$5 | font_2x2::glyph_bit#0
  font_2x2::glyph_bits_2x2#1 = font_2x2::$6
  font_2x2::$7 = font_2x2::glyph_bits_2x2#1 << 1
  font_2x2::$8 = font_2x2::$7 | font_2x2::glyph_bit#0
  font_2x2::glyph_bits_2x2#2 = font_2x2::$8
  font_2x2::glyph_bits#1 = font_2x2::glyph_bits#3 << 1
  font_2x2::b#1 = font_2x2::b#2 + rangenext(0,7)
  font_2x2::$9 = font_2x2::b#1 != rangelast(0,7)
  if(font_2x2::$9) goto font_2x2::@3
  to:font_2x2::@7
font_2x2::@7: scope:[font_2x2]  from font_2x2::@6
  font_2x2::c#4 = phi( font_2x2::@6/font_2x2::c#6 )
  font_2x2::next_original#6 = phi( font_2x2::@6/font_2x2::next_original#8 )
  font_2x2::next_2x2#5 = phi( font_2x2::@6/font_2x2::next_2x2#7 )
  font_2x2::l#4 = phi( font_2x2::@6/font_2x2::l#6 )
  font_2x2::next_2x2_right#2 = phi( font_2x2::@6/font_2x2::next_2x2_right#3 )
  font_2x2::l2#3 = phi( font_2x2::@6/font_2x2::l2#4 )
  font_2x2::next_2x2_left#2 = phi( font_2x2::@6/font_2x2::next_2x2_left#3 )
  font_2x2::glyph_bits_2x2#4 = phi( font_2x2::@6/font_2x2::glyph_bits_2x2#2 )
  font_2x2::$10 = > font_2x2::glyph_bits_2x2#4
  font_2x2::next_2x2_left#2[font_2x2::l2#3] = font_2x2::$10
  font_2x2::$11 = font_2x2::l2#3 + 1
  font_2x2::$12 = > font_2x2::glyph_bits_2x2#4
  font_2x2::next_2x2_left#2[font_2x2::$11] = font_2x2::$12
  font_2x2::$13 = < font_2x2::glyph_bits_2x2#4
  font_2x2::next_2x2_right#2[font_2x2::l2#3] = font_2x2::$13
  font_2x2::$14 = font_2x2::l2#3 + 1
  font_2x2::$15 = < font_2x2::glyph_bits_2x2#4
  font_2x2::next_2x2_right#2[font_2x2::$14] = font_2x2::$15
  font_2x2::l2#1 = font_2x2::l2#3 + 2
  font_2x2::$16 = font_2x2::l2#1 == 8
  font_2x2::$17 = ! font_2x2::$16
  if(font_2x2::$17) goto font_2x2::@9
  to:font_2x2::@8
font_2x2::@9: scope:[font_2x2]  from font_2x2::@7 font_2x2::@8
  font_2x2::next_2x2_right#8 = phi( font_2x2::@7/font_2x2::next_2x2_right#2, font_2x2::@8/font_2x2::next_2x2_right#1 )
  font_2x2::l2#9 = phi( font_2x2::@7/font_2x2::l2#1, font_2x2::@8/font_2x2::l2#2 )
  font_2x2::next_2x2_left#8 = phi( font_2x2::@7/font_2x2::next_2x2_left#2, font_2x2::@8/font_2x2::next_2x2_left#1 )
  font_2x2::c#3 = phi( font_2x2::@7/font_2x2::c#4, font_2x2::@8/font_2x2::c#5 )
  font_2x2::next_2x2#6 = phi( font_2x2::@7/font_2x2::next_2x2#5, font_2x2::@8/font_2x2::next_2x2#3 )
  font_2x2::next_original#5 = phi( font_2x2::@7/font_2x2::next_original#6, font_2x2::@8/font_2x2::next_original#7 )
  font_2x2::l#3 = phi( font_2x2::@7/font_2x2::l#4, font_2x2::@8/font_2x2::l#5 )
  font_2x2::l#1 = font_2x2::l#3 + rangenext(0,7)
  font_2x2::$20 = font_2x2::l#1 != rangelast(0,7)
  if(font_2x2::$20) goto font_2x2::@2
  to:font_2x2::@10
font_2x2::@8: scope:[font_2x2]  from font_2x2::@7
  font_2x2::c#5 = phi( font_2x2::@7/font_2x2::c#4 )
  font_2x2::next_original#7 = phi( font_2x2::@7/font_2x2::next_original#6 )
  font_2x2::l#5 = phi( font_2x2::@7/font_2x2::l#4 )
  font_2x2::next_2x2#3 = phi( font_2x2::@7/font_2x2::next_2x2#5 )
  font_2x2::$18 = font_2x2::next_2x2#3 + $80*8
  font_2x2::next_2x2_left#1 = font_2x2::$18
  font_2x2::$19 = font_2x2::next_2x2#3 + $c0*8
  font_2x2::next_2x2_right#1 = font_2x2::$19
  font_2x2::l2#2 = 0
  to:font_2x2::@9
font_2x2::@10: scope:[font_2x2]  from font_2x2::@9
  font_2x2::c#2 = phi( font_2x2::@9/font_2x2::c#3 )
  font_2x2::next_original#3 = phi( font_2x2::@9/font_2x2::next_original#5 )
  font_2x2::next_2x2#4 = phi( font_2x2::@9/font_2x2::next_2x2#6 )
  font_2x2::next_2x2#1 = font_2x2::next_2x2#4 + 8
  font_2x2::next_original#1 = font_2x2::next_original#3 + 8
  font_2x2::c#1 = font_2x2::c#2 + rangenext(0,$3f)
  font_2x2::$21 = font_2x2::c#1 != rangelast(0,$3f)
  if(font_2x2::$21) goto font_2x2::@1
  to:font_2x2::@return
font_2x2::@return: scope:[font_2x2]  from font_2x2::@10
  return 
  to:@return

byte font_compress(byte* font_compress::font_original , byte* font_compress::font_compressed , byte* font_compress::compress_mapping)
font_compress: scope:[font_compress]  from main::@7
  font_compress::compress_mapping#6 = phi( main::@7/font_compress::compress_mapping#0 )
  font_compress::font_compressed#1 = phi( main::@7/font_compress::font_compressed#0 )
  font_compress::font_original#1 = phi( main::@7/font_compress::font_original#0 )
  font_compress::font_size#0 = 0
  font_compress::next_original#0 = font_compress::font_original#1
  font_compress::next_compressed#0 = font_compress::font_compressed#1
  font_compress::i#0 = 0
  to:font_compress::@1
font_compress::@1: scope:[font_compress]  from font_compress font_compress::@2
  font_compress::next_compressed#6 = phi( font_compress/font_compress::next_compressed#0, font_compress::@2/font_compress::next_compressed#7 )
  font_compress::i#5 = phi( font_compress/font_compress::i#0, font_compress::@2/font_compress::i#1 )
  font_compress::compress_mapping#4 = phi( font_compress/font_compress::compress_mapping#6, font_compress::@2/font_compress::compress_mapping#1 )
  font_compress::font_size#2 = phi( font_compress/font_compress::font_size#0, font_compress::@2/font_compress::font_size#5 )
  font_compress::font_compressed#2 = phi( font_compress/font_compress::font_compressed#1, font_compress::@2/font_compress::font_compressed#3 )
  font_compress::next_original#2 = phi( font_compress/font_compress::next_original#0, font_compress::@2/font_compress::next_original#1 )
  font_find::glyph#0 = font_compress::next_original#2
  font_find::font#0 = font_compress::font_compressed#2
  font_find::font_size#0 = font_compress::font_size#2
  call font_find 
  font_find::return#0 = font_find::return#3
  to:font_compress::@7
font_compress::@7: scope:[font_compress]  from font_compress::@1
  font_compress::next_compressed#5 = phi( font_compress::@1/font_compress::next_compressed#6 )
  font_compress::font_size#7 = phi( font_compress::@1/font_compress::font_size#2 )
  font_compress::font_compressed#5 = phi( font_compress::@1/font_compress::font_compressed#2 )
  font_compress::next_original#6 = phi( font_compress::@1/font_compress::next_original#2 )
  font_compress::i#4 = phi( font_compress::@1/font_compress::i#5 )
  font_compress::compress_mapping#3 = phi( font_compress::@1/font_compress::compress_mapping#4 )
  font_find::return#4 = phi( font_compress::@1/font_find::return#0 )
  font_compress::$0 = font_find::return#4
  font_compress::found#0 = font_compress::$0
  font_compress::$1 = font_compress::found#0 == $ff
  font_compress::$2 = ! font_compress::$1
  if(font_compress::$2) goto font_compress::@2
  to:font_compress::@5
font_compress::@2: scope:[font_compress]  from font_compress::@4 font_compress::@7
  font_compress::next_compressed#7 = phi( font_compress::@4/font_compress::next_compressed#1, font_compress::@7/font_compress::next_compressed#5 )
  font_compress::font_size#5 = phi( font_compress::@4/font_compress::font_size#1, font_compress::@7/font_compress::font_size#7 )
  font_compress::font_compressed#3 = phi( font_compress::@4/font_compress::font_compressed#4, font_compress::@7/font_compress::font_compressed#5 )
  font_compress::next_original#3 = phi( font_compress::@4/font_compress::next_original#5, font_compress::@7/font_compress::next_original#6 )
  font_compress::i#2 = phi( font_compress::@4/font_compress::i#3, font_compress::@7/font_compress::i#4 )
  font_compress::compress_mapping#1 = phi( font_compress::@4/font_compress::compress_mapping#2, font_compress::@7/font_compress::compress_mapping#3 )
  font_compress::found#2 = phi( font_compress::@4/font_compress::found#1, font_compress::@7/font_compress::found#0 )
  font_compress::compress_mapping#1[font_compress::i#2] = font_compress::found#2
  font_compress::next_original#1 = font_compress::next_original#3 + 8
  font_compress::i#1 = font_compress::i#2 + rangenext(0,$ff)
  font_compress::$4 = font_compress::i#1 != rangelast(0,$ff)
  if(font_compress::$4) goto font_compress::@1
  to:font_compress::@6
font_compress::@5: scope:[font_compress]  from font_compress::@7
  font_compress::font_compressed#7 = phi( font_compress::@7/font_compress::font_compressed#5 )
  font_compress::i#7 = phi( font_compress::@7/font_compress::i#4 )
  font_compress::compress_mapping#7 = phi( font_compress::@7/font_compress::compress_mapping#3 )
  font_compress::font_size#8 = phi( font_compress::@7/font_compress::font_size#7 )
  font_compress::next_compressed#4 = phi( font_compress::@7/font_compress::next_compressed#5 )
  font_compress::next_original#7 = phi( font_compress::@7/font_compress::next_original#6 )
  font_compress::l#0 = 0
  to:font_compress::@3
font_compress::@3: scope:[font_compress]  from font_compress::@3 font_compress::@5
  font_compress::font_compressed#6 = phi( font_compress::@3/font_compress::font_compressed#6, font_compress::@5/font_compress::font_compressed#7 )
  font_compress::i#6 = phi( font_compress::@3/font_compress::i#6, font_compress::@5/font_compress::i#7 )
  font_compress::compress_mapping#5 = phi( font_compress::@3/font_compress::compress_mapping#5, font_compress::@5/font_compress::compress_mapping#7 )
  font_compress::font_size#6 = phi( font_compress::@3/font_compress::font_size#6, font_compress::@5/font_compress::font_size#8 )
  font_compress::next_compressed#2 = phi( font_compress::@3/font_compress::next_compressed#2, font_compress::@5/font_compress::next_compressed#4 )
  font_compress::l#2 = phi( font_compress::@3/font_compress::l#1, font_compress::@5/font_compress::l#0 )
  font_compress::next_original#4 = phi( font_compress::@3/font_compress::next_original#4, font_compress::@5/font_compress::next_original#7 )
  font_compress::next_compressed#2[font_compress::l#2] = font_compress::next_original#4[font_compress::l#2]
  font_compress::l#1 = font_compress::l#2 + rangenext(0,7)
  font_compress::$3 = font_compress::l#1 != rangelast(0,7)
  if(font_compress::$3) goto font_compress::@3
  to:font_compress::@4
font_compress::@4: scope:[font_compress]  from font_compress::@3
  font_compress::font_compressed#4 = phi( font_compress::@3/font_compress::font_compressed#6 )
  font_compress::next_original#5 = phi( font_compress::@3/font_compress::next_original#4 )
  font_compress::i#3 = phi( font_compress::@3/font_compress::i#6 )
  font_compress::compress_mapping#2 = phi( font_compress::@3/font_compress::compress_mapping#5 )
  font_compress::font_size#3 = phi( font_compress::@3/font_compress::font_size#6 )
  font_compress::next_compressed#3 = phi( font_compress::@3/font_compress::next_compressed#2 )
  font_compress::next_compressed#1 = font_compress::next_compressed#3 + 8
  font_compress::found#1 = font_compress::font_size#3
  font_compress::font_size#1 = ++ font_compress::font_size#3
  to:font_compress::@2
font_compress::@6: scope:[font_compress]  from font_compress::@2
  font_compress::font_size#4 = phi( font_compress::@2/font_compress::font_size#5 )
  font_compress::return#1 = font_compress::font_size#4
  to:font_compress::@return
font_compress::@return: scope:[font_compress]  from font_compress::@6
  font_compress::return#3 = phi( font_compress::@6/font_compress::return#1 )
  font_compress::return#2 = font_compress::return#3
  return 
  to:@return

byte font_find(byte* font_find::glyph , byte* font_find::font , byte font_find::font_size)
font_find: scope:[font_find]  from font_compress::@1
  font_find::font#9 = phi( font_compress::@1/font_find::font#0 )
  font_find::glyph#5 = phi( font_compress::@1/font_find::glyph#0 )
  font_find::font_size#2 = phi( font_compress::@1/font_find::font_size#0 )
  font_find::i#0 = 0
  to:font_find::@1
font_find::@1: scope:[font_find]  from font_find font_find::@9
  font_find::font#7 = phi( font_find/font_find::font#9, font_find::@9/font_find::font#1 )
  font_find::glyph#4 = phi( font_find/font_find::glyph#5, font_find::@9/font_find::glyph#6 )
  font_find::font_size#1 = phi( font_find/font_find::font_size#2, font_find::@9/font_find::font_size#3 )
  font_find::i#2 = phi( font_find/font_find::i#0, font_find::@9/font_find::i#1 )
  font_find::$0 = font_find::i#2 < font_find::font_size#1
  if(font_find::$0) goto font_find::@2
  to:font_find::@3
font_find::@2: scope:[font_find]  from font_find::@1
  font_find::font_size#8 = phi( font_find::@1/font_find::font_size#1 )
  font_find::i#9 = phi( font_find::@1/font_find::i#2 )
  font_find::font#4 = phi( font_find::@1/font_find::font#7 )
  font_find::glyph#2 = phi( font_find::@1/font_find::glyph#4 )
  font_find::found#0 = 1
  font_find::l#0 = 0
  to:font_find::@4
font_find::@3: scope:[font_find]  from font_find::@1
  font_find::return#1 = $ff
  to:font_find::@return
font_find::@4: scope:[font_find]  from font_find::@2 font_find::@5
  font_find::font_size#7 = phi( font_find::@2/font_find::font_size#8, font_find::@5/font_find::font_size#5 )
  font_find::i#8 = phi( font_find::@2/font_find::i#9, font_find::@5/font_find::i#6 )
  font_find::found#4 = phi( font_find::@2/font_find::found#0, font_find::@5/font_find::found#3 )
  font_find::font#2 = phi( font_find::@2/font_find::font#4, font_find::@5/font_find::font#5 )
  font_find::l#2 = phi( font_find::@2/font_find::l#0, font_find::@5/font_find::l#1 )
  font_find::glyph#1 = phi( font_find::@2/font_find::glyph#2, font_find::@5/font_find::glyph#3 )
  font_find::$1 = font_find::glyph#1[font_find::l#2] != font_find::font#2[font_find::l#2]
  font_find::$2 = ! font_find::$1
  if(font_find::$2) goto font_find::@5
  to:font_find::@7
font_find::@5: scope:[font_find]  from font_find::@4
  font_find::font_size#5 = phi( font_find::@4/font_find::font_size#7 )
  font_find::i#6 = phi( font_find::@4/font_find::i#8 )
  font_find::found#3 = phi( font_find::@4/font_find::found#4 )
  font_find::font#5 = phi( font_find::@4/font_find::font#2 )
  font_find::glyph#3 = phi( font_find::@4/font_find::glyph#1 )
  font_find::l#3 = phi( font_find::@4/font_find::l#2 )
  font_find::l#1 = font_find::l#3 + rangenext(0,7)
  font_find::$3 = font_find::l#1 != rangelast(0,7)
  if(font_find::$3) goto font_find::@4
  to:font_find::@6
font_find::@7: scope:[font_find]  from font_find::@4
  font_find::glyph#8 = phi( font_find::@4/font_find::glyph#1 )
  font_find::font_size#6 = phi( font_find::@4/font_find::font_size#7 )
  font_find::i#7 = phi( font_find::@4/font_find::i#8 )
  font_find::font#8 = phi( font_find::@4/font_find::font#2 )
  font_find::found#1 = 0
  to:font_find::@6
font_find::@6: scope:[font_find]  from font_find::@5 font_find::@7
  font_find::glyph#7 = phi( font_find::@5/font_find::glyph#3, font_find::@7/font_find::glyph#8 )
  font_find::font_size#4 = phi( font_find::@5/font_find::font_size#5, font_find::@7/font_find::font_size#6 )
  font_find::i#5 = phi( font_find::@5/font_find::i#6, font_find::@7/font_find::i#7 )
  font_find::font#6 = phi( font_find::@5/font_find::font#5, font_find::@7/font_find::font#8 )
  font_find::found#2 = phi( font_find::@5/font_find::found#3, font_find::@7/font_find::found#1 )
  font_find::$5 = 0 != font_find::found#2
  font_find::$4 = ! font_find::$5
  if(font_find::$4) goto font_find::@9
  to:font_find::@8
font_find::@9: scope:[font_find]  from font_find::@6
  font_find::glyph#6 = phi( font_find::@6/font_find::glyph#7 )
  font_find::font_size#3 = phi( font_find::@6/font_find::font_size#4 )
  font_find::i#3 = phi( font_find::@6/font_find::i#5 )
  font_find::font#3 = phi( font_find::@6/font_find::font#6 )
  font_find::font#1 = font_find::font#3 + 8
  font_find::i#1 = ++ font_find::i#3
  to:font_find::@1
font_find::@8: scope:[font_find]  from font_find::@6
  font_find::i#4 = phi( font_find::@6/font_find::i#5 )
  font_find::return#2 = font_find::i#4
  to:font_find::@return
font_find::@return: scope:[font_find]  from font_find::@3 font_find::@8
  font_find::return#5 = phi( font_find::@3/font_find::return#1, font_find::@8/font_find::return#2 )
  font_find::return#3 = font_find::return#5
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* CHARGEN = (byte*)$d000
const nomodify byte* D018 = (byte*)$d018
const nomodify byte* FONT_COMPRESSED = (byte*)$2800
const byte* FONT_COMPRESSED_MAP[$100]  = { fill( $100, 0) }
const nomodify byte* FONT_ORIGINAL = (byte*)$2000
byte MOS6526_CIA::INTERRUPT
byte MOS6526_CIA::PORT_A
byte MOS6526_CIA::PORT_A_DDR
byte MOS6526_CIA::PORT_B
byte MOS6526_CIA::PORT_B_DDR
byte MOS6526_CIA::SERIAL_DATA
word MOS6526_CIA::TIMER_A
byte MOS6526_CIA::TIMER_A_CONTROL
word MOS6526_CIA::TIMER_B
byte MOS6526_CIA::TIMER_B_CONTROL
byte MOS6526_CIA::TOD_10THS
byte MOS6526_CIA::TOD_HOURS
byte MOS6526_CIA::TOD_MIN
byte MOS6526_CIA::TOD_SEC
byte MOS6569_VICII::BG_COLOR
byte MOS6569_VICII::BG_COLOR1
byte MOS6569_VICII::BG_COLOR2
byte MOS6569_VICII::BG_COLOR3
byte MOS6569_VICII::BORDER_COLOR
byte MOS6569_VICII::CONTROL1
byte MOS6569_VICII::CONTROL2
byte MOS6569_VICII::IRQ_ENABLE
byte MOS6569_VICII::IRQ_STATUS
byte MOS6569_VICII::LIGHTPEN_X
byte MOS6569_VICII::LIGHTPEN_Y
byte MOS6569_VICII::MEMORY
byte MOS6569_VICII::RASTER
byte MOS6569_VICII::SPRITE0_COLOR
byte MOS6569_VICII::SPRITE0_X
byte MOS6569_VICII::SPRITE0_Y
byte MOS6569_VICII::SPRITE1_COLOR
byte MOS6569_VICII::SPRITE1_X
byte MOS6569_VICII::SPRITE1_Y
byte MOS6569_VICII::SPRITE2_COLOR
byte MOS6569_VICII::SPRITE2_X
byte MOS6569_VICII::SPRITE2_Y
byte MOS6569_VICII::SPRITE3_COLOR
byte MOS6569_VICII::SPRITE3_X
byte MOS6569_VICII::SPRITE3_Y
byte MOS6569_VICII::SPRITE4_COLOR
byte MOS6569_VICII::SPRITE4_X
byte MOS6569_VICII::SPRITE4_Y
byte MOS6569_VICII::SPRITE5_COLOR
byte MOS6569_VICII::SPRITE5_X
byte MOS6569_VICII::SPRITE5_Y
byte MOS6569_VICII::SPRITE6_COLOR
byte MOS6569_VICII::SPRITE6_X
byte MOS6569_VICII::SPRITE6_Y
byte MOS6569_VICII::SPRITE7_COLOR
byte MOS6569_VICII::SPRITE7_X
byte MOS6569_VICII::SPRITE7_Y
byte MOS6569_VICII::SPRITES_BG_COLLISION
byte MOS6569_VICII::SPRITES_COLLISION
byte MOS6569_VICII::SPRITES_ENABLE
byte MOS6569_VICII::SPRITES_EXPAND_X
byte MOS6569_VICII::SPRITES_EXPAND_Y
byte MOS6569_VICII::SPRITES_MC
byte MOS6569_VICII::SPRITES_MCOLOR1
byte MOS6569_VICII::SPRITES_MCOLOR2
byte MOS6569_VICII::SPRITES_PRIORITY
byte MOS6569_VICII::SPRITES_XMSB
byte MOS6581_SID::CH1_ATTACK_DECAY
byte MOS6581_SID::CH1_CONTROL
word MOS6581_SID::CH1_FREQ
word MOS6581_SID::CH1_PULSE_WIDTH
byte MOS6581_SID::CH1_SUSTAIN_RELEASE
byte MOS6581_SID::CH2_ATTACK_DECAY
byte MOS6581_SID::CH2_CONTROL
word MOS6581_SID::CH2_FREQ
word MOS6581_SID::CH2_PULSE_WIDTH
byte MOS6581_SID::CH2_SUSTAIN_RELEASE
byte MOS6581_SID::CH3_ATTACK_DECAY
byte MOS6581_SID::CH3_CONTROL
byte MOS6581_SID::CH3_ENV
word MOS6581_SID::CH3_FREQ
byte MOS6581_SID::CH3_OSC
word MOS6581_SID::CH3_PULSE_WIDTH
byte MOS6581_SID::CH3_SUSTAIN_RELEASE
byte MOS6581_SID::FILTER_CUTOFF_HIGH
byte MOS6581_SID::FILTER_CUTOFF_LOW
byte MOS6581_SID::FILTER_SETUP
byte MOS6581_SID::POT_X
byte MOS6581_SID::POT_Y
byte MOS6581_SID::VOLUME_FILTER_MODE
const nomodify byte* PROCPORT = (byte*)1
const nomodify byte PROCPORT_BASIC_KERNEL_IO = 7
const nomodify byte PROCPORT_RAM_CHARROM = 1
const nomodify byte* SCREEN = (byte*)$400
void __start()
label __start::@1
label __start::@return
void font_2x2(byte* font_2x2::font_original , byte* font_2x2::font_2x2)
byte*~ font_2x2::$0
number~ font_2x2::$1
byte~ font_2x2::$10
number~ font_2x2::$11
byte~ font_2x2::$12
byte~ font_2x2::$13
number~ font_2x2::$14
byte~ font_2x2::$15
bool~ font_2x2::$16
bool~ font_2x2::$17
byte*~ font_2x2::$18
byte*~ font_2x2::$19
byte~ font_2x2::$2
bool~ font_2x2::$20
bool~ font_2x2::$21
bool~ font_2x2::$22
byte~ font_2x2::$3
byte~ font_2x2::$4
word~ font_2x2::$5
word~ font_2x2::$6
word~ font_2x2::$7
word~ font_2x2::$8
bool~ font_2x2::$9
label font_2x2::@1
label font_2x2::@10
label font_2x2::@2
label font_2x2::@3
label font_2x2::@4
label font_2x2::@5
label font_2x2::@6
label font_2x2::@7
label font_2x2::@8
label font_2x2::@9
label font_2x2::@return
byte font_2x2::b
byte font_2x2::b#0
byte font_2x2::b#1
byte font_2x2::b#2
byte font_2x2::b#3
byte font_2x2::b#4
byte font_2x2::b#5
byte font_2x2::c
byte font_2x2::c#0
byte font_2x2::c#1
byte font_2x2::c#10
byte font_2x2::c#11
byte font_2x2::c#2
byte font_2x2::c#3
byte font_2x2::c#4
byte font_2x2::c#5
byte font_2x2::c#6
byte font_2x2::c#7
byte font_2x2::c#8
byte font_2x2::c#9
byte* font_2x2::font_2x2
byte* font_2x2::font_2x2#0
byte* font_2x2::font_2x2#1
byte* font_2x2::font_original
byte* font_2x2::font_original#0
byte* font_2x2::font_original#1
byte font_2x2::glyph_bit
byte font_2x2::glyph_bit#0
byte font_2x2::glyph_bits
byte font_2x2::glyph_bits#0
byte font_2x2::glyph_bits#1
byte font_2x2::glyph_bits#2
byte font_2x2::glyph_bits#3
byte font_2x2::glyph_bits#4
byte font_2x2::glyph_bits#5
word font_2x2::glyph_bits_2x2
word font_2x2::glyph_bits_2x2#0
word font_2x2::glyph_bits_2x2#1
word font_2x2::glyph_bits_2x2#2
word font_2x2::glyph_bits_2x2#3
word font_2x2::glyph_bits_2x2#4
word font_2x2::glyph_bits_2x2#5
word font_2x2::glyph_bits_2x2#6
word font_2x2::glyph_bits_2x2#7
byte font_2x2::l
byte font_2x2::l#0
byte font_2x2::l#1
byte font_2x2::l#2
byte font_2x2::l#3
byte font_2x2::l#4
byte font_2x2::l#5
byte font_2x2::l#6
byte font_2x2::l#7
byte font_2x2::l#8
byte font_2x2::l#9
byte font_2x2::l2
byte font_2x2::l2#0
byte font_2x2::l2#1
byte font_2x2::l2#2
byte font_2x2::l2#3
byte font_2x2::l2#4
byte font_2x2::l2#5
byte font_2x2::l2#6
byte font_2x2::l2#7
byte font_2x2::l2#8
byte font_2x2::l2#9
byte* font_2x2::next_2x2
byte* font_2x2::next_2x2#0
byte* font_2x2::next_2x2#1
byte* font_2x2::next_2x2#10
byte* font_2x2::next_2x2#11
byte* font_2x2::next_2x2#2
byte* font_2x2::next_2x2#3
byte* font_2x2::next_2x2#4
byte* font_2x2::next_2x2#5
byte* font_2x2::next_2x2#6
byte* font_2x2::next_2x2#7
byte* font_2x2::next_2x2#8
byte* font_2x2::next_2x2#9
byte* font_2x2::next_2x2_left
byte* font_2x2::next_2x2_left#0
byte* font_2x2::next_2x2_left#1
byte* font_2x2::next_2x2_left#2
byte* font_2x2::next_2x2_left#3
byte* font_2x2::next_2x2_left#4
byte* font_2x2::next_2x2_left#5
byte* font_2x2::next_2x2_left#6
byte* font_2x2::next_2x2_left#7
byte* font_2x2::next_2x2_left#8
byte* font_2x2::next_2x2_right
byte* font_2x2::next_2x2_right#0
byte* font_2x2::next_2x2_right#1
byte* font_2x2::next_2x2_right#2
byte* font_2x2::next_2x2_right#3
byte* font_2x2::next_2x2_right#4
byte* font_2x2::next_2x2_right#5
byte* font_2x2::next_2x2_right#6
byte* font_2x2::next_2x2_right#7
byte* font_2x2::next_2x2_right#8
byte* font_2x2::next_original
byte* font_2x2::next_original#0
byte* font_2x2::next_original#1
byte* font_2x2::next_original#10
byte* font_2x2::next_original#11
byte* font_2x2::next_original#2
byte* font_2x2::next_original#3
byte* font_2x2::next_original#4
byte* font_2x2::next_original#5
byte* font_2x2::next_original#6
byte* font_2x2::next_original#7
byte* font_2x2::next_original#8
byte* font_2x2::next_original#9
byte font_compress(byte* font_compress::font_original , byte* font_compress::font_compressed , byte* font_compress::compress_mapping)
byte~ font_compress::$0
bool~ font_compress::$1
bool~ font_compress::$2
bool~ font_compress::$3
bool~ font_compress::$4
label font_compress::@1
label font_compress::@2
label font_compress::@3
label font_compress::@4
label font_compress::@5
label font_compress::@6
label font_compress::@7
label font_compress::@return
byte* font_compress::compress_mapping
byte* font_compress::compress_mapping#0
byte* font_compress::compress_mapping#1
byte* font_compress::compress_mapping#2
byte* font_compress::compress_mapping#3
byte* font_compress::compress_mapping#4
byte* font_compress::compress_mapping#5
byte* font_compress::compress_mapping#6
byte* font_compress::compress_mapping#7
byte* font_compress::font_compressed
byte* font_compress::font_compressed#0
byte* font_compress::font_compressed#1
byte* font_compress::font_compressed#2
byte* font_compress::font_compressed#3
byte* font_compress::font_compressed#4
byte* font_compress::font_compressed#5
byte* font_compress::font_compressed#6
byte* font_compress::font_compressed#7
byte* font_compress::font_original
byte* font_compress::font_original#0
byte* font_compress::font_original#1
byte font_compress::font_size
byte font_compress::font_size#0
byte font_compress::font_size#1
byte font_compress::font_size#2
byte font_compress::font_size#3
byte font_compress::font_size#4
byte font_compress::font_size#5
byte font_compress::font_size#6
byte font_compress::font_size#7
byte font_compress::font_size#8
byte font_compress::found
byte font_compress::found#0
byte font_compress::found#1
byte font_compress::found#2
byte font_compress::i
byte font_compress::i#0
byte font_compress::i#1
byte font_compress::i#2
byte font_compress::i#3
byte font_compress::i#4
byte font_compress::i#5
byte font_compress::i#6
byte font_compress::i#7
byte font_compress::l
byte font_compress::l#0
byte font_compress::l#1
byte font_compress::l#2
byte* font_compress::next_compressed
byte* font_compress::next_compressed#0
byte* font_compress::next_compressed#1
byte* font_compress::next_compressed#2
byte* font_compress::next_compressed#3
byte* font_compress::next_compressed#4
byte* font_compress::next_compressed#5
byte* font_compress::next_compressed#6
byte* font_compress::next_compressed#7
byte* font_compress::next_original
byte* font_compress::next_original#0
byte* font_compress::next_original#1
byte* font_compress::next_original#2
byte* font_compress::next_original#3
byte* font_compress::next_original#4
byte* font_compress::next_original#5
byte* font_compress::next_original#6
byte* font_compress::next_original#7
byte font_compress::return
byte font_compress::return#0
byte font_compress::return#1
byte font_compress::return#2
byte font_compress::return#3
byte font_find(byte* font_find::glyph , byte* font_find::font , byte font_find::font_size)
bool~ font_find::$0
bool~ font_find::$1
bool~ font_find::$2
bool~ font_find::$3
bool~ font_find::$4
bool~ font_find::$5
label font_find::@1
label font_find::@2
label font_find::@3
label font_find::@4
label font_find::@5
label font_find::@6
label font_find::@7
label font_find::@8
label font_find::@9
label font_find::@return
byte* font_find::font
byte* font_find::font#0
byte* font_find::font#1
byte* font_find::font#2
byte* font_find::font#3
byte* font_find::font#4
byte* font_find::font#5
byte* font_find::font#6
byte* font_find::font#7
byte* font_find::font#8
byte* font_find::font#9
byte font_find::font_size
byte font_find::font_size#0
byte font_find::font_size#1
byte font_find::font_size#2
byte font_find::font_size#3
byte font_find::font_size#4
byte font_find::font_size#5
byte font_find::font_size#6
byte font_find::font_size#7
byte font_find::font_size#8
byte font_find::found
byte font_find::found#0
byte font_find::found#1
byte font_find::found#2
byte font_find::found#3
byte font_find::found#4
byte* font_find::glyph
byte* font_find::glyph#0
byte* font_find::glyph#1
byte* font_find::glyph#2
byte* font_find::glyph#3
byte* font_find::glyph#4
byte* font_find::glyph#5
byte* font_find::glyph#6
byte* font_find::glyph#7
byte* font_find::glyph#8
byte font_find::i
byte font_find::i#0
byte font_find::i#1
byte font_find::i#2
byte font_find::i#3
byte font_find::i#4
byte font_find::i#5
byte font_find::i#6
byte font_find::i#7
byte font_find::i#8
byte font_find::i#9
byte font_find::l
byte font_find::l#0
byte font_find::l#1
byte font_find::l#2
byte font_find::l#3
byte font_find::return
byte font_find::return#0
byte font_find::return#1
byte font_find::return#2
byte font_find::return#3
byte font_find::return#4
byte font_find::return#5
void main()
byte~ main::$2
bool~ main::$5
bool~ main::$6
label main::@1
label main::@10
label main::@2
label main::@3
label main::@4
label main::@5
label main::@6
label main::@7
label main::@8
label main::@9
label main::@return
byte main::c
byte main::c#0
byte main::c#1
byte main::c#2
byte main::c#3
byte main::c#4
byte main::c#5
label main::toD0181
number~ main::toD0181_$0
number~ main::toD0181_$1
number~ main::toD0181_$2
byte~ main::toD0181_$3
number~ main::toD0181_$4
number~ main::toD0181_$5
number~ main::toD0181_$6
word~ main::toD0181_$7
label main::toD0181_@return
byte* main::toD0181_gfx
byte* main::toD0181_gfx#0
byte* main::toD0181_gfx#1
byte main::toD0181_return
byte main::toD0181_return#0
byte main::toD0181_return#1
byte main::toD0181_return#2
byte main::toD0181_return#3
byte* main::toD0181_screen
byte* main::toD0181_screen#0
byte* main::toD0181_screen#1
byte main::x
byte main::x#0
byte main::x#1
byte main::x#2
byte main::x#3
byte main::y
byte main::y#0
byte main::y#1
byte main::y#2
byte main::y#3
byte main::y#4
byte main::y#5
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
label memset::@1
label memset::@2
label memset::@3
label memset::@4
label memset::@return
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void show(byte show::c , byte show::x , byte show::y , byte* show::font_mapping)
number~ show::$0
byte*~ show::$1
number~ show::$2
byte*~ show::$3
number~ show::$4
number~ show::$5
number~ show::$6
word~ show::$7
label show::@return
byte show::c
byte show::c#0
byte show::c#1
byte* show::font_mapping
byte* show::font_mapping#0
byte* show::font_mapping#1
byte* show::ptr
byte* show::ptr#0
byte show::x
byte show::x#0
byte show::x#1
byte show::y
byte show::y#0
byte show::y#1

Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Adding number conversion cast (unumber) $3fff in main::toD0181_$0 = main::toD0181_$7 & $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in main::toD0181_$0 = main::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0181_$1 = main::toD0181_$0 * 4
Adding number conversion cast (unumber) main::toD0181_$1 in main::toD0181_$1 = main::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0181_$2 in main::toD0181_$2 = > main::toD0181_$1
Adding number conversion cast (unumber) 4 in main::toD0181_$4 = main::toD0181_$3 / 4
Adding number conversion cast (unumber) main::toD0181_$4 in main::toD0181_$4 = main::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0181_$5 = main::toD0181_$4 & $f
Adding number conversion cast (unumber) main::toD0181_$5 in main::toD0181_$5 = main::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0181_$6 in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Adding number conversion cast (unumber) $400 in memset::num#0 = $400
Adding number conversion cast (unumber) $3e7 in *(SCREEN+$3e7) = ++ *(SCREEN+$3e7)
Adding number conversion cast (unumber) $50 in show::$0 = show::$7 * $50
Adding number conversion cast (unumber) show::$0 in show::$0 = show::$7 * (unumber)$50
Adding number conversion cast (unumber) 2 in show::$2 = show::x#1 * 2
Adding number conversion cast (unumber) show::$2 in show::$2 = show::x#1 * (unumber)2
Adding number conversion cast (unumber) 0 in show::ptr#0[0] = show::font_mapping#1[show::c#1]
Adding number conversion cast (unumber) $40 in show::$4 = show::c#1 + $40
Adding number conversion cast (unumber) show::$4 in show::$4 = show::c#1 + (unumber)$40
Adding number conversion cast (unumber) 1 in show::ptr#0[1] = show::font_mapping#1[show::$4]
Adding number conversion cast (unumber) $80 in show::$5 = show::c#1 + $80
Adding number conversion cast (unumber) show::$5 in show::$5 = show::c#1 + (unumber)$80
Adding number conversion cast (unumber) $28 in show::ptr#0[$28] = show::font_mapping#1[show::$5]
Adding number conversion cast (unumber) $c0 in show::$6 = show::c#1 + $c0
Adding number conversion cast (unumber) show::$6 in show::$6 = show::c#1 + (unumber)$c0
Adding number conversion cast (unumber) $29 in show::ptr#0[$29] = show::font_mapping#1[show::$6]
Adding number conversion cast (unumber) $40*8 in font_2x2::$0 = font_2x2::next_2x2#2 + $40*8
Adding number conversion cast (unumber) $80 in font_2x2::$1 = font_2x2::glyph_bits#2 & $80
Adding number conversion cast (unumber) font_2x2::$1 in font_2x2::$1 = font_2x2::glyph_bits#2 & (unumber)$80
Adding number conversion cast (unumber) 0 in font_2x2::$22 = 0 != font_2x2::$1
Adding number conversion cast (unumber) 1 in font_2x2::$5 = font_2x2::glyph_bits_2x2#3 << 1
Adding number conversion cast (unumber) 1 in font_2x2::$7 = font_2x2::glyph_bits_2x2#1 << 1
Adding number conversion cast (unumber) 1 in font_2x2::glyph_bits#1 = font_2x2::glyph_bits#3 << 1
Adding number conversion cast (unumber) 1 in font_2x2::$11 = font_2x2::l2#3 + 1
Adding number conversion cast (unumber) font_2x2::$11 in font_2x2::$11 = font_2x2::l2#3 + (unumber)1
Adding number conversion cast (unumber) 1 in font_2x2::$14 = font_2x2::l2#3 + 1
Adding number conversion cast (unumber) font_2x2::$14 in font_2x2::$14 = font_2x2::l2#3 + (unumber)1
Adding number conversion cast (unumber) 2 in font_2x2::l2#1 = font_2x2::l2#3 + 2
Adding number conversion cast (unumber) 8 in font_2x2::$16 = font_2x2::l2#1 == 8
Adding number conversion cast (unumber) $80*8 in font_2x2::$18 = font_2x2::next_2x2#3 + $80*8
Adding number conversion cast (unumber) $c0*8 in font_2x2::$19 = font_2x2::next_2x2#3 + $c0*8
Adding number conversion cast (unumber) 0 in font_2x2::l2#2 = 0
Adding number conversion cast (unumber) 8 in font_2x2::next_2x2#1 = font_2x2::next_2x2#4 + 8
Adding number conversion cast (unumber) 8 in font_2x2::next_original#1 = font_2x2::next_original#3 + 8
Adding number conversion cast (unumber) $ff in font_compress::$1 = font_compress::found#0 == $ff
Adding number conversion cast (unumber) 8 in font_compress::next_original#1 = font_compress::next_original#3 + 8
Adding number conversion cast (unumber) 8 in font_compress::next_compressed#1 = font_compress::next_compressed#3 + 8
Adding number conversion cast (unumber) $ff in font_find::return#1 = $ff
Adding number conversion cast (unumber) 0 in font_find::found#1 = 0
Adding number conversion cast (unumber) 0 in font_find::$5 = 0 != font_find::found#2
Adding number conversion cast (unumber) 8 in font_find::font#1 = font_find::font#3 + 8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::dst#0 = (byte*)memset::str#2
Inlining cast memset::num#0 = (unumber)$400
Inlining cast font_2x2::l2#2 = (unumber)0
Inlining cast font_find::return#1 = (unumber)$ff
Inlining cast font_find::found#1 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 10240
Simplifying constant integer cast 0
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $400
Simplifying constant integer cast $3e7
Simplifying constant integer cast $50
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast $28
Simplifying constant integer cast $c0
Simplifying constant integer cast $29
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $ff
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized unsigned number type $400
Finalized unsigned number type $3e7
Finalized unsigned number type $50
Finalized unsigned number type 2
Finalized unsigned number type 0
Finalized unsigned number type $40
Finalized unsigned number type 1
Finalized unsigned number type $80
Finalized unsigned number type $28
Finalized unsigned number type $c0
Finalized unsigned number type $29
Finalized unsigned number type $80
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 2
Finalized unsigned number type 8
Finalized unsigned number type 0
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type $ff
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type $ff
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in main::toD0181_$0 = main::toD0181_$7 & $3fff
Inferred type updated to word in main::toD0181_$1 = main::toD0181_$0 * 4
Inferred type updated to byte in main::toD0181_$2 = > main::toD0181_$1
Inferred type updated to byte in main::toD0181_$4 = main::toD0181_$3 / 4
Inferred type updated to byte in main::toD0181_$5 = main::toD0181_$4 & $f
Inferred type updated to byte in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Inferred type updated to word in show::$0 = show::$7 * $50
Inferred type updated to byte in show::$2 = show::x#1 * 2
Inferred type updated to byte in show::$4 = show::c#1 + $40
Inferred type updated to byte in show::$5 = show::c#1 + $80
Inferred type updated to byte in show::$6 = show::c#1 + $c0
Inferred type updated to byte in font_2x2::$1 = font_2x2::glyph_bits#2 & $80
Inferred type updated to byte in font_2x2::$11 = font_2x2::l2#3 + 1
Inferred type updated to byte in font_2x2::$14 = font_2x2::l2#3 + 1
Inversing boolean not [2] memset::$1 = memset::num#1 <= 0 from [1] memset::$0 = memset::num#1 > 0
Inversing boolean not [138] font_2x2::$17 = font_2x2::l2#1 != 8 from [137] font_2x2::$16 = font_2x2::l2#1 == 8
Inversing boolean not [172] font_compress::$2 = font_compress::found#0 != $ff from [171] font_compress::$1 = font_compress::found#0 == $ff
Inversing boolean not [207] font_find::$2 = font_find::glyph#1[font_find::l#2] == font_find::font#2[font_find::l#2] from [206] font_find::$1 = font_find::glyph#1[font_find::l#2] != font_find::font#2[font_find::l#2]
Inversing boolean not [217] font_find::$4 = 0 == font_find::found#2 from [216] font_find::$5 = 0 != font_find::found#2
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$2 
Alias main::c#2 = main::c#3 
Alias main::x#2 = main::x#3 
Alias main::y#2 = main::y#5 main::y#3 
Alias main::c#1 = main::c#5 
Alias show::ptr#0 = show::$3 
Alias font_2x2::next_original#0 = font_2x2::font_original#1 
Alias font_2x2::next_2x2#0 = font_2x2::font_2x2#1 
Alias font_2x2::next_2x2_left#0 = font_2x2::next_2x2#2 
Alias font_2x2::next_2x2_right#0 = font_2x2::$0 
Alias font_2x2::glyph_bits_2x2#5 = font_2x2::glyph_bits_2x2#7 font_2x2::glyph_bits_2x2#6 
Alias font_2x2::glyph_bits#2 = font_2x2::glyph_bits#4 font_2x2::glyph_bits#5 
Alias font_2x2::b#3 = font_2x2::b#5 font_2x2::b#4 
Alias font_2x2::next_2x2_left#4 = font_2x2::next_2x2_left#6 font_2x2::next_2x2_left#5 
Alias font_2x2::l2#5 = font_2x2::l2#7 font_2x2::l2#6 
Alias font_2x2::next_2x2_right#4 = font_2x2::next_2x2_right#6 font_2x2::next_2x2_right#5 
Alias font_2x2::l#7 = font_2x2::l#9 font_2x2::l#8 
Alias font_2x2::next_2x2#10 = font_2x2::next_2x2#8 font_2x2::next_2x2#9 
Alias font_2x2::next_original#10 = font_2x2::next_original#9 font_2x2::next_original#11 
Alias font_2x2::c#7 = font_2x2::c#9 font_2x2::c#8 
Alias font_2x2::glyph_bit#0 = font_2x2::$4 
Alias font_2x2::glyph_bits_2x2#1 = font_2x2::$6 
Alias font_2x2::glyph_bits_2x2#2 = font_2x2::$8 font_2x2::glyph_bits_2x2#4 
Alias font_2x2::next_2x2_left#2 = font_2x2::next_2x2_left#3 
Alias font_2x2::l2#3 = font_2x2::l2#4 
Alias font_2x2::next_2x2_right#2 = font_2x2::next_2x2_right#3 
Alias font_2x2::l#4 = font_2x2::l#6 font_2x2::l#5 
Alias font_2x2::next_2x2#3 = font_2x2::next_2x2#5 font_2x2::next_2x2#7 
Alias font_2x2::next_original#6 = font_2x2::next_original#8 font_2x2::next_original#7 
Alias font_2x2::c#4 = font_2x2::c#6 font_2x2::c#5 
Alias font_2x2::next_2x2_left#1 = font_2x2::$18 
Alias font_2x2::next_2x2_right#1 = font_2x2::$19 
Alias font_2x2::next_2x2#4 = font_2x2::next_2x2#6 
Alias font_2x2::next_original#3 = font_2x2::next_original#5 
Alias font_2x2::c#2 = font_2x2::c#3 
Alias font_compress::next_original#0 = font_compress::font_original#1 
Alias font_compress::next_compressed#0 = font_compress::font_compressed#1 
Alias font_find::return#0 = font_find::return#4 
Alias font_compress::compress_mapping#3 = font_compress::compress_mapping#4 font_compress::compress_mapping#7 
Alias font_compress::i#4 = font_compress::i#5 font_compress::i#7 
Alias font_compress::next_original#2 = font_compress::next_original#6 font_compress::next_original#7 
Alias font_compress::font_compressed#2 = font_compress::font_compressed#5 font_compress::font_compressed#7 
Alias font_compress::font_size#2 = font_compress::font_size#7 font_compress::font_size#8 
Alias font_compress::next_compressed#4 = font_compress::next_compressed#5 font_compress::next_compressed#6 
Alias font_compress::found#0 = font_compress::$0 
Alias font_compress::next_compressed#2 = font_compress::next_compressed#3 
Alias font_compress::font_size#3 = font_compress::font_size#6 font_compress::found#1 
Alias font_compress::compress_mapping#2 = font_compress::compress_mapping#5 
Alias font_compress::i#3 = font_compress::i#6 
Alias font_compress::next_original#4 = font_compress::next_original#5 
Alias font_compress::font_compressed#4 = font_compress::font_compressed#6 
Alias font_compress::return#1 = font_compress::font_size#4 font_compress::font_size#5 font_compress::return#3 font_compress::return#2 
Alias font_find::glyph#2 = font_find::glyph#4 
Alias font_find::font#4 = font_find::font#7 
Alias font_find::i#2 = font_find::i#9 
Alias font_find::font_size#1 = font_find::font_size#8 
Alias font_find::l#2 = font_find::l#3 
Alias font_find::glyph#1 = font_find::glyph#3 font_find::glyph#8 
Alias font_find::font#2 = font_find::font#5 font_find::font#8 
Alias font_find::found#3 = font_find::found#4 
Alias font_find::i#6 = font_find::i#8 font_find::i#7 
Alias font_find::font_size#5 = font_find::font_size#7 font_find::font_size#6 
Alias font_find::font#3 = font_find::font#6 
Alias font_find::i#3 = font_find::i#5 font_find::i#4 font_find::return#2 
Alias font_find::font_size#3 = font_find::font_size#4 
Alias font_find::glyph#6 = font_find::glyph#7 
Alias font_find::return#3 = font_find::return#5 
Successful SSA optimization Pass2AliasElimination
Alias font_2x2::glyph_bits_2x2#3 = font_2x2::glyph_bits_2x2#5 
Alias font_2x2::glyph_bits#2 = font_2x2::glyph_bits#3 
Alias font_2x2::b#2 = font_2x2::b#3 
Alias font_2x2::next_2x2_left#2 = font_2x2::next_2x2_left#4 
Alias font_2x2::l2#3 = font_2x2::l2#5 
Alias font_2x2::next_2x2_right#2 = font_2x2::next_2x2_right#4 
Alias font_2x2::l#3 = font_2x2::l#4 font_2x2::l#7 
Alias font_2x2::next_2x2#10 = font_2x2::next_2x2#3 font_2x2::next_2x2#4 
Alias font_2x2::next_original#10 = font_2x2::next_original#6 font_2x2::next_original#3 
Alias font_2x2::c#2 = font_2x2::c#4 font_2x2::c#7 
Alias font_find::font#2 = font_find::font#3 
Alias font_find::i#3 = font_find::i#6 
Alias font_find::font_size#3 = font_find::font_size#5 
Alias font_find::glyph#1 = font_find::glyph#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values main::y#2 main::y#4
Identical Phi Values show::y#1 show::y#0
Identical Phi Values show::x#1 show::x#0
Identical Phi Values show::font_mapping#1 show::font_mapping#0
Identical Phi Values show::c#1 show::c#0
Identical Phi Values font_2x2::next_original#0 font_2x2::font_original#0
Identical Phi Values font_2x2::next_2x2#0 font_2x2::font_2x2#0
Identical Phi Values font_2x2::next_2x2_left#2 font_2x2::next_2x2_left#7
Identical Phi Values font_2x2::l2#3 font_2x2::l2#8
Identical Phi Values font_2x2::next_2x2_right#2 font_2x2::next_2x2_right#7
Identical Phi Values font_2x2::l#3 font_2x2::l#2
Identical Phi Values font_2x2::next_2x2#10 font_2x2::next_2x2#11
Identical Phi Values font_2x2::next_original#10 font_2x2::next_original#2
Identical Phi Values font_2x2::c#2 font_2x2::c#10
Identical Phi Values font_compress::next_original#0 font_compress::font_original#0
Identical Phi Values font_compress::next_compressed#0 font_compress::font_compressed#0
Identical Phi Values font_compress::compress_mapping#6 font_compress::compress_mapping#0
Identical Phi Values font_compress::next_original#4 font_compress::next_original#2
Identical Phi Values font_compress::next_compressed#2 font_compress::next_compressed#4
Identical Phi Values font_compress::font_size#3 font_compress::font_size#2
Identical Phi Values font_compress::compress_mapping#2 font_compress::compress_mapping#3
Identical Phi Values font_compress::i#3 font_compress::i#4
Identical Phi Values font_compress::font_compressed#4 font_compress::font_compressed#2
Identical Phi Values font_find::font_size#2 font_find::font_size#0
Identical Phi Values font_find::glyph#5 font_find::glyph#0
Identical Phi Values font_find::font#9 font_find::font#0
Identical Phi Values font_find::glyph#1 font_find::glyph#2
Identical Phi Values font_find::font#2 font_find::font#4
Identical Phi Values font_find::found#3 font_find::found#0
Identical Phi Values font_find::i#3 font_find::i#2
Identical Phi Values font_find::font_size#3 font_find::font_size#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#0
Identical Phi Values font_2x2::next_original#2 font_2x2::next_original#4
Identical Phi Values font_2x2::next_2x2#11 font_2x2::next_2x2_left#0
Identical Phi Values font_2x2::c#10 font_2x2::c#11
Identical Phi Values font_compress::compress_mapping#1 font_compress::compress_mapping#3
Identical Phi Values font_compress::i#2 font_compress::i#4
Identical Phi Values font_compress::next_original#3 font_compress::next_original#2
Identical Phi Values font_compress::font_compressed#3 font_compress::font_compressed#2
Identical Phi Values font_find::font_size#1 font_find::font_size#0
Identical Phi Values font_find::glyph#2 font_find::glyph#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values font_compress::font_compressed#2 font_compress::font_compressed#0
Identical Phi Values font_compress::compress_mapping#3 font_compress::compress_mapping#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memset::$1 [2] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [9] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition main::$5 [54] if(main::x#1!=rangelast(0,7)) goto main::@2
Simple Condition main::$6 [57] if(main::y#1!=rangelast(0,7)) goto main::@1
Simple Condition font_2x2::$22 [88] if(0!=font_2x2::$1) goto font_2x2::@4
Simple Condition font_2x2::$9 [99] if(font_2x2::b#1!=rangelast(0,7)) goto font_2x2::@3
Simple Condition font_2x2::$17 [112] if(font_2x2::l2#1!=8) goto font_2x2::@9
Simple Condition font_2x2::$20 [116] if(font_2x2::l#1!=rangelast(0,7)) goto font_2x2::@2
Simple Condition font_2x2::$21 [124] if(font_2x2::c#1!=rangelast(0,$3f)) goto font_2x2::@1
Simple Condition font_compress::$2 [137] if(font_compress::found#0!=$ff) goto font_compress::@2
Simple Condition font_compress::$4 [143] if(font_compress::i#1!=rangelast(0,$ff)) goto font_compress::@1
Simple Condition font_compress::$3 [149] if(font_compress::l#1!=rangelast(0,7)) goto font_compress::@3
Simple Condition font_find::$0 [157] if(font_find::i#2<font_find::font_size#0) goto font_find::@2
Simple Condition font_find::$2 [163] if(font_find::glyph#0[font_find::l#2]==font_find::font#4[font_find::l#2]) goto font_find::@5
Simple Condition font_find::$3 [166] if(font_find::l#1!=rangelast(0,7)) goto font_find::@4
Simple Condition font_find::$4 [170] if(0==font_find::found#2) goto font_find::@9
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant font_2x2::font_original#0 = CHARGEN
Constant font_2x2::font_2x2#0 = FONT_ORIGINAL
Constant font_compress::font_original#0 = FONT_ORIGINAL
Constant font_compress::font_compressed#0 = FONT_COMPRESSED
Constant font_compress::compress_mapping#0 = FONT_COMPRESSED_MAP
Constant main::toD0181_screen#0 = SCREEN
Constant main::toD0181_gfx#0 = FONT_COMPRESSED
Constant memset::str#0 = (void*)SCREEN
Constant memset::num#0 = $400
Constant main::c#0 = 0
Constant main::y#0 = 0
Constant main::x#0 = 0
Constant show::font_mapping#0 = FONT_COMPRESSED_MAP
Constant font_2x2::c#0 = 0
Constant font_2x2::l2#0 = 0
Constant font_2x2::l#0 = 0
Constant font_2x2::glyph_bits_2x2#0 = 0
Constant font_2x2::b#0 = 0
Constant font_2x2::$3 = 1
Constant font_2x2::$2 = 0
Constant font_2x2::l2#2 = 0
Constant font_compress::font_size#0 = 0
Constant font_compress::i#0 = 0
Constant font_compress::l#0 = 0
Constant font_find::i#0 = 0
Constant font_find::found#0 = 1
Constant font_find::l#0 = 0
Constant font_find::return#1 = $ff
Constant font_find::found#1 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::$4 = (byte*)memset::str#0
Constant memset::dst#0 = (byte*)memset::str#0
Constant main::toD0181_$7 = (word)main::toD0181_screen#0
Constant memset::return#2 = memset::str#0
Constant font_find::font#0 = font_compress::font_compressed#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::toD0181_gfx#0 in [31] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [2] if(memset::num#0<=0) goto memset::@1
if() condition always true - replacing block destination [58] if(true) goto main::@5
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [52] main::x#1 = ++ main::x#2 to ++
Resolved ranged comparison value [54] if(main::x#1!=rangelast(0,7)) goto main::@2 to 8
Resolved ranged next value [55] main::y#1 = ++ main::y#4 to ++
Resolved ranged comparison value [57] if(main::y#1!=rangelast(0,7)) goto main::@1 to 8
Resolved ranged next value [97] font_2x2::b#1 = ++ font_2x2::b#2 to ++
Resolved ranged comparison value [99] if(font_2x2::b#1!=rangelast(0,7)) goto font_2x2::@3 to 8
Resolved ranged next value [114] font_2x2::l#1 = ++ font_2x2::l#2 to ++
Resolved ranged comparison value [116] if(font_2x2::l#1!=rangelast(0,7)) goto font_2x2::@2 to 8
Resolved ranged next value [122] font_2x2::c#1 = ++ font_2x2::c#11 to ++
Resolved ranged comparison value [124] if(font_2x2::c#1!=rangelast(0,$3f)) goto font_2x2::@1 to $40
Resolved ranged next value [141] font_compress::i#1 = ++ font_compress::i#4 to ++
Resolved ranged comparison value [143] if(font_compress::i#1!=rangelast(0,$ff)) goto font_compress::@1 to 0
Resolved ranged next value [147] font_compress::l#1 = ++ font_compress::l#2 to ++
Resolved ranged comparison value [149] if(font_compress::l#1!=rangelast(0,7)) goto font_compress::@3 to 8
Resolved ranged next value [164] font_find::l#1 = ++ font_find::l#2 to ++
Resolved ranged comparison value [166] if(font_find::l#1!=rangelast(0,7)) goto font_find::@4 to 8
Simplifying expression containing zero show::ptr#0 in [67] show::ptr#0[0] = show::font_mapping#0[show::c#0]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable font_compress::return#0 and assignment [12] font_compress::return#0 = font_compress::return#1
Eliminating unused constant memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [30] if(main::x#1!=8) goto main::@2
Adding number conversion cast (unumber) 8 in [32] if(main::y#1!=8) goto main::@1
Adding number conversion cast (unumber) 8 in [61] if(font_2x2::b#1!=8) goto font_2x2::@3
Adding number conversion cast (unumber) 8 in [76] if(font_2x2::l#1!=8) goto font_2x2::@2
Adding number conversion cast (unumber) $40 in [82] if(font_2x2::c#1!=$40) goto font_2x2::@1
Adding number conversion cast (unumber) 0 in [95] if(font_compress::i#1!=0) goto font_compress::@1
Adding number conversion cast (unumber) 8 in [99] if(font_compress::l#1!=8) goto font_compress::@3
Adding number conversion cast (unumber) 8 in [108] if(font_find::l#1!=8) goto font_find::@4
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type $40
Finalized unsigned number type 0
Finalized unsigned number type 8
Finalized unsigned number type 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] memset::end#0 = memset::$4 + memset::num#0
Constant right-side identified [12] main::toD0181_$0 = main::toD0181_$7 & $3fff
Constant right-side identified [15] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::end#0 = memset::$4+memset::num#0
Constant main::toD0181_$0 = main::toD0181_$7&$3fff
Constant main::toD0181_$3 = >(word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] main::toD0181_$1 = main::toD0181_$0 * 4
Constant right-side identified [13] main::toD0181_$4 = main::toD0181_$3 / 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$1 = main::toD0181_$0*4
Constant main::toD0181_$4 = main::toD0181_$3/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] main::toD0181_$2 = > main::toD0181_$1
Constant right-side identified [12] main::toD0181_$5 = main::toD0181_$4 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$2 = >main::toD0181_$1
Constant main::toD0181_$5 = main::toD0181_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] main::toD0181_return#0 = main::toD0181_$2 | main::toD0181_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift and addition[27] show::$0 = show::$7 * $50
Rewriting multiplication to use shift [29] show::$2 = show::x#0 * 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings main::c#0
Inlining constant with var siblings main::y#0
Inlining constant with var siblings main::x#0
Inlining constant with var siblings font_2x2::c#0
Inlining constant with var siblings font_2x2::l2#0
Inlining constant with var siblings font_2x2::l#0
Inlining constant with var siblings font_2x2::glyph_bits_2x2#0
Inlining constant with var siblings font_2x2::b#0
Inlining constant with var siblings font_2x2::l2#2
Inlining constant with var siblings font_compress::font_size#0
Inlining constant with var siblings font_compress::i#0
Inlining constant with var siblings font_compress::l#0
Inlining constant with var siblings font_find::i#0
Inlining constant with var siblings font_find::found#0
Inlining constant with var siblings font_find::l#0
Inlining constant with var siblings font_find::return#1
Inlining constant with var siblings font_find::found#1
Inlining constant with var siblings font_find::font#0
Constant inlined main::toD0181_screen#0 = SCREEN
Constant inlined main::toD0181_gfx#0 = FONT_COMPRESSED
Constant inlined font_find::return#1 = $ff
Constant inlined font_compress::compress_mapping#0 = FONT_COMPRESSED_MAP
Constant inlined font_2x2::glyph_bits_2x2#0 = 0
Constant inlined font_2x2::l2#0 = 0
Constant inlined font_2x2::font_2x2#0 = FONT_ORIGINAL
Constant inlined main::c#0 = 0
Constant inlined font_2x2::l2#2 = 0
Constant inlined font_compress::font_compressed#0 = FONT_COMPRESSED
Constant inlined memset::$4 = (byte*)memset::str#0
Constant inlined show::font_mapping#0 = FONT_COMPRESSED_MAP
Constant inlined font_find::font#0 = FONT_COMPRESSED
Constant inlined font_2x2::$2 = 0
Constant inlined font_2x2::$3 = 1
Constant inlined font_2x2::b#0 = 0
Constant inlined font_find::found#0 = 1
Constant inlined main::toD0181_$7 = (word)SCREEN
Constant inlined font_find::found#1 = 0
Constant inlined font_2x2::c#0 = 0
Constant inlined main::toD0181_$2 = >(word)SCREEN&$3fff*4
Constant inlined main::toD0181_$1 = (word)SCREEN&$3fff*4
Constant inlined font_find::i#0 = 0
Constant inlined main::toD0181_$0 = (word)SCREEN&$3fff
Constant inlined main::x#0 = 0
Constant inlined font_compress::font_size#0 = 0
Constant inlined main::y#0 = 0
Constant inlined main::toD0181_$5 = >(word)FONT_COMPRESSED/4&$f
Constant inlined font_compress::i#0 = 0
Constant inlined main::toD0181_$4 = >(word)FONT_COMPRESSED/4
Constant inlined font_compress::l#0 = 0
Constant inlined main::toD0181_$3 = >(word)FONT_COMPRESSED
Constant inlined font_2x2::l#0 = 0
Constant inlined font_find::l#0 = 0
Constant inlined memset::dst#0 = (byte*)memset::str#0
Constant inlined font_compress::font_original#0 = FONT_ORIGINAL
Constant inlined font_2x2::font_original#0 = CHARGEN
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(FONT_COMPRESSED_MAP+' ')
Consolidated array index constant in assignment (FONT_COMPRESSED_MAP+$40)[show::$4]
Consolidated array index constant in assignment (FONT_COMPRESSED_MAP+$80)[show::$5]
Consolidated array index constant in assignment (FONT_COMPRESSED_MAP+$c0)[show::$6]
Successful SSA optimization Pass2ConstantAdditionElimination
Alias show::$0 = show::$10 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@11(between main::@3 and main::@1)
Added new block during phi lifting main::@12(between main::@10 and main::@2)
Added new block during phi lifting font_2x2::@11(between font_2x2::@10 and font_2x2::@1)
Added new block during phi lifting font_2x2::@12(between font_2x2::@9 and font_2x2::@2)
Added new block during phi lifting font_2x2::@13(between font_2x2::@6 and font_2x2::@3)
Added new block during phi lifting font_2x2::@14(between font_2x2::@7 and font_2x2::@9)
Added new block during phi lifting font_compress::@8(between font_compress::@2 and font_compress::@1)
Added new block during phi lifting font_compress::@9(between font_compress::@7 and font_compress::@2)
Added new block during phi lifting font_compress::@10(between font_compress::@3 and font_compress::@3)
Added new block during phi lifting font_find::@10(between font_find::@5 and font_find::@4)
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of font_2x2
Adding NOP phi() at start of font_2x2::@5
Adding NOP phi() at start of font_2x2::@4
Adding NOP phi() at start of font_compress
Adding NOP phi() at start of font_compress::@5
Adding NOP phi() at start of font_compress::@6
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of font_find
Adding NOP phi() at start of font_find::@3
Adding NOP phi() at start of font_find::@2
Adding NOP phi() at start of font_find::@7
CALL GRAPH
Calls in [main] to font_2x2:2 font_compress:5 memset:11 show:19 
Calls in [font_compress] to font_find:93 

Created 32 initial phi equivalence classes
Coalesced [14] main::c#7 = main::c#4
Coalesced [27] main::c#6 = main::c#1
Coalesced [28] main::y#6 = main::y#1
Coalesced (already) [29] main::c#8 = main::c#1
Coalesced [30] main::x#4 = main::x#1
Not coalescing [34] font_2x2::next_2x2_left#10 = font_2x2::next_2x2_left#0
Coalesced [35] font_2x2::next_2x2_right#9 = font_2x2::next_2x2_right#0
Coalesced [38] font_2x2::glyph_bits#6 = font_2x2::glyph_bits#0
Coalesced [65] font_2x2::next_2x2_left#13 = font_2x2::next_2x2_left#1
Coalesced [66] font_2x2::next_2x2_right#12 = font_2x2::next_2x2_right#1
Coalesced [75] font_2x2::next_2x2_left#9 = font_2x2::next_2x2#1
Coalesced [76] font_2x2::next_original#12 = font_2x2::next_original#1
Coalesced [77] font_2x2::c#12 = font_2x2::c#1
Coalesced [78] font_2x2::l#10 = font_2x2::l#1
Coalesced [79] font_2x2::next_2x2_left#11 = font_2x2::next_2x2_left#8
Coalesced [80] font_2x2::l2#10 = font_2x2::l2#9
Coalesced [81] font_2x2::next_2x2_right#10 = font_2x2::next_2x2_right#8
Coalesced (already) [82] font_2x2::next_2x2_left#12 = font_2x2::next_2x2_left#7
Coalesced [83] font_2x2::l2#11 = font_2x2::l2#1
Coalesced (already) [84] font_2x2::next_2x2_right#11 = font_2x2::next_2x2_right#7
Coalesced [85] font_2x2::glyph_bits#7 = font_2x2::glyph_bits#1
Coalesced [86] font_2x2::glyph_bits_2x2#8 = font_2x2::glyph_bits_2x2#2
Coalesced [87] font_2x2::b#6 = font_2x2::b#1
Not coalescing [104] font_compress::found#3 = font_compress::font_size#2
Coalesced [105] font_compress::return#4 = font_compress::font_size#1
Coalesced [106] font_compress::next_compressed#9 = font_compress::next_compressed#1
Coalesced [114] font_compress::next_original#8 = font_compress::next_original#1
Not coalescing [115] font_compress::font_size#9 = font_compress::return#1
Coalesced [116] font_compress::i#8 = font_compress::i#1
Coalesced [117] font_compress::next_compressed#8 = font_compress::next_compressed#7
Coalesced [118] font_compress::l#3 = font_compress::l#1
Coalesced [119] font_compress::found#4 = font_compress::found#0
Not coalescing [120] font_compress::return#5 = font_compress::font_size#2
Coalesced (already) [121] font_compress::next_compressed#10 = font_compress::next_compressed#4
Coalesced [130] memset::dst#4 = memset::dst#1
Coalesced [158] font_find::return#6 = font_find::i#2
Coalesced [161] font_find::i#10 = font_find::i#1
Coalesced [162] font_find::font#10 = font_find::font#1
Coalesced [165] font_find::l#4 = font_find::l#1
Coalesced down to 26 phi equivalence classes
Culled Empty Block label main::@8
Culled Empty Block label main::toD0181_@return
Culled Empty Block label main::@9
Culled Empty Block label main::@4
Culled Empty Block label main::@11
Culled Empty Block label main::@12
Culled Empty Block label font_2x2::@5
Culled Empty Block label font_2x2::@11
Culled Empty Block label font_2x2::@12
Culled Empty Block label font_2x2::@14
Culled Empty Block label font_2x2::@13
Culled Empty Block label font_compress::@5
Culled Empty Block label font_compress::@6
Culled Empty Block label font_compress::@10
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Culled Empty Block label font_find::@3
Culled Empty Block label font_find::@2
Culled Empty Block label font_find::@7
Culled Empty Block label font_find::@8
Culled Empty Block label font_find::@10
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block main::@10 to main::@7
Renumbering block font_2x2::@6 to font_2x2::@5
Renumbering block font_2x2::@7 to font_2x2::@6
Renumbering block font_2x2::@8 to font_2x2::@7
Renumbering block font_2x2::@9 to font_2x2::@8
Renumbering block font_2x2::@10 to font_2x2::@9
Renumbering block font_compress::@7 to font_compress::@5
Renumbering block font_compress::@8 to font_compress::@6
Renumbering block font_compress::@9 to font_compress::@7
Renumbering block font_find::@4 to font_find::@2
Renumbering block font_find::@5 to font_find::@3
Renumbering block font_find::@6 to font_find::@4
Renumbering block font_find::@9 to font_find::@5
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of font_2x2
Adding NOP phi() at start of font_2x2::@4
Adding NOP phi() at start of font_compress
Adding NOP phi() at start of memset
Adding NOP phi() at start of font_find

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  [1] *PROCPORT = PROCPORT_RAM_CHARROM
  [2] call font_2x2 
  to:main::@6
main::@6: scope:[main]  from main
  [3] *PROCPORT = PROCPORT_BASIC_KERNEL_IO
  asm { cli  }
  [5] call font_compress 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@6
  [6] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [7] *D018 = main::toD0181_return#0
  [8] memset::c#0 = *(FONT_COMPRESSED_MAP+' ')
  [9] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  [10] main::y#4 = phi( main::@3/main::y#1, main::@5/0 )
  [10] main::c#4 = phi( main::@3/main::c#1, main::@5/0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@7
  [11] main::x#2 = phi( main::@1/0, main::@7/main::x#1 )
  [11] main::c#2 = phi( main::@1/main::c#4, main::@7/main::c#1 )
  [12] show::c#0 = main::c#2
  [13] show::x#0 = main::x#2
  [14] show::y#0 = main::y#4
  [15] call show 
  to:main::@7
main::@7: scope:[main]  from main::@2
  [16] main::c#1 = ++ main::c#2
  [17] main::x#1 = ++ main::x#2
  [18] if(main::x#1!=8) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@7
  [19] main::y#1 = ++ main::y#4
  [20] if(main::y#1!=8) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [21] *(SCREEN+$3e7) = ++ *(SCREEN+$3e7)
  to:main::@4

void font_2x2(byte* font_2x2::font_original , byte* font_2x2::font_2x2)
font_2x2: scope:[font_2x2]  from main
  [22] phi()
  to:font_2x2::@1
font_2x2::@1: scope:[font_2x2]  from font_2x2 font_2x2::@9
  [23] font_2x2::c#11 = phi( font_2x2/0, font_2x2::@9/font_2x2::c#1 )
  [23] font_2x2::next_original#4 = phi( font_2x2/CHARGEN, font_2x2::@9/font_2x2::next_original#1 )
  [23] font_2x2::next_2x2_left#0 = phi( font_2x2/FONT_ORIGINAL, font_2x2::@9/font_2x2::next_2x2#1 )
  [24] font_2x2::next_2x2_right#0 = font_2x2::next_2x2_left#0 + (word)$40*8
  [25] font_2x2::next_2x2_left#10 = font_2x2::next_2x2_left#0
  to:font_2x2::@2
font_2x2::@2: scope:[font_2x2]  from font_2x2::@1 font_2x2::@8
  [26] font_2x2::next_2x2_right#7 = phi( font_2x2::@1/font_2x2::next_2x2_right#0, font_2x2::@8/font_2x2::next_2x2_right#8 )
  [26] font_2x2::l2#8 = phi( font_2x2::@1/0, font_2x2::@8/font_2x2::l2#9 )
  [26] font_2x2::next_2x2_left#7 = phi( font_2x2::@1/font_2x2::next_2x2_left#10, font_2x2::@8/font_2x2::next_2x2_left#8 )
  [26] font_2x2::l#2 = phi( font_2x2::@1/0, font_2x2::@8/font_2x2::l#1 )
  [27] font_2x2::glyph_bits#0 = font_2x2::next_original#4[font_2x2::l#2]
  to:font_2x2::@3
font_2x2::@3: scope:[font_2x2]  from font_2x2::@2 font_2x2::@5
  [28] font_2x2::b#2 = phi( font_2x2::@2/0, font_2x2::@5/font_2x2::b#1 )
  [28] font_2x2::glyph_bits_2x2#3 = phi( font_2x2::@2/0, font_2x2::@5/font_2x2::glyph_bits_2x2#2 )
  [28] font_2x2::glyph_bits#2 = phi( font_2x2::@2/font_2x2::glyph_bits#0, font_2x2::@5/font_2x2::glyph_bits#1 )
  [29] font_2x2::$1 = font_2x2::glyph_bits#2 & $80
  [30] if(0!=font_2x2::$1) goto font_2x2::@4
  to:font_2x2::@5
font_2x2::@4: scope:[font_2x2]  from font_2x2::@3
  [31] phi()
  to:font_2x2::@5
font_2x2::@5: scope:[font_2x2]  from font_2x2::@3 font_2x2::@4
  [32] font_2x2::glyph_bit#0 = phi( font_2x2::@4/1, font_2x2::@3/0 )
  [33] font_2x2::$5 = font_2x2::glyph_bits_2x2#3 << 1
  [34] font_2x2::glyph_bits_2x2#1 = font_2x2::$5 | font_2x2::glyph_bit#0
  [35] font_2x2::$7 = font_2x2::glyph_bits_2x2#1 << 1
  [36] font_2x2::glyph_bits_2x2#2 = font_2x2::$7 | font_2x2::glyph_bit#0
  [37] font_2x2::glyph_bits#1 = font_2x2::glyph_bits#2 << 1
  [38] font_2x2::b#1 = ++ font_2x2::b#2
  [39] if(font_2x2::b#1!=8) goto font_2x2::@3
  to:font_2x2::@6
font_2x2::@6: scope:[font_2x2]  from font_2x2::@5
  [40] font_2x2::$10 = > font_2x2::glyph_bits_2x2#2
  [41] font_2x2::next_2x2_left#7[font_2x2::l2#8] = font_2x2::$10
  [42] font_2x2::$11 = font_2x2::l2#8 + 1
  [43] font_2x2::$12 = > font_2x2::glyph_bits_2x2#2
  [44] font_2x2::next_2x2_left#7[font_2x2::$11] = font_2x2::$12
  [45] font_2x2::$13 = < font_2x2::glyph_bits_2x2#2
  [46] font_2x2::next_2x2_right#7[font_2x2::l2#8] = font_2x2::$13
  [47] font_2x2::$14 = font_2x2::l2#8 + 1
  [48] font_2x2::$15 = < font_2x2::glyph_bits_2x2#2
  [49] font_2x2::next_2x2_right#7[font_2x2::$14] = font_2x2::$15
  [50] font_2x2::l2#1 = font_2x2::l2#8 + 2
  [51] if(font_2x2::l2#1!=8) goto font_2x2::@8
  to:font_2x2::@7
font_2x2::@7: scope:[font_2x2]  from font_2x2::@6
  [52] font_2x2::next_2x2_left#1 = font_2x2::next_2x2_left#0 + (word)$80*8
  [53] font_2x2::next_2x2_right#1 = font_2x2::next_2x2_left#0 + (word)$c0*8
  to:font_2x2::@8
font_2x2::@8: scope:[font_2x2]  from font_2x2::@6 font_2x2::@7
  [54] font_2x2::next_2x2_right#8 = phi( font_2x2::@6/font_2x2::next_2x2_right#7, font_2x2::@7/font_2x2::next_2x2_right#1 )
  [54] font_2x2::l2#9 = phi( font_2x2::@6/font_2x2::l2#1, font_2x2::@7/0 )
  [54] font_2x2::next_2x2_left#8 = phi( font_2x2::@6/font_2x2::next_2x2_left#7, font_2x2::@7/font_2x2::next_2x2_left#1 )
  [55] font_2x2::l#1 = ++ font_2x2::l#2
  [56] if(font_2x2::l#1!=8) goto font_2x2::@2
  to:font_2x2::@9
font_2x2::@9: scope:[font_2x2]  from font_2x2::@8
  [57] font_2x2::next_2x2#1 = font_2x2::next_2x2_left#0 + 8
  [58] font_2x2::next_original#1 = font_2x2::next_original#4 + 8
  [59] font_2x2::c#1 = ++ font_2x2::c#11
  [60] if(font_2x2::c#1!=$40) goto font_2x2::@1
  to:font_2x2::@return
font_2x2::@return: scope:[font_2x2]  from font_2x2::@9
  [61] return 
  to:@return

byte font_compress(byte* font_compress::font_original , byte* font_compress::font_compressed , byte* font_compress::compress_mapping)
font_compress: scope:[font_compress]  from main::@6
  [62] phi()
  to:font_compress::@1
font_compress::@1: scope:[font_compress]  from font_compress font_compress::@6
  [63] font_compress::next_compressed#4 = phi( font_compress/FONT_COMPRESSED, font_compress::@6/font_compress::next_compressed#7 )
  [63] font_compress::i#4 = phi( font_compress/0, font_compress::@6/font_compress::i#1 )
  [63] font_compress::font_size#2 = phi( font_compress/0, font_compress::@6/font_compress::font_size#9 )
  [63] font_compress::next_original#2 = phi( font_compress/FONT_ORIGINAL, font_compress::@6/font_compress::next_original#1 )
  [64] font_find::glyph#0 = font_compress::next_original#2
  [65] font_find::font_size#0 = font_compress::font_size#2
  [66] call font_find 
  [67] font_find::return#0 = font_find::return#3
  to:font_compress::@5
font_compress::@5: scope:[font_compress]  from font_compress::@1
  [68] font_compress::found#0 = font_find::return#0
  [69] if(font_compress::found#0!=$ff) goto font_compress::@7
  to:font_compress::@3
font_compress::@3: scope:[font_compress]  from font_compress::@3 font_compress::@5
  [70] font_compress::l#2 = phi( font_compress::@3/font_compress::l#1, font_compress::@5/0 )
  [71] font_compress::next_compressed#4[font_compress::l#2] = font_compress::next_original#2[font_compress::l#2]
  [72] font_compress::l#1 = ++ font_compress::l#2
  [73] if(font_compress::l#1!=8) goto font_compress::@3
  to:font_compress::@4
font_compress::@4: scope:[font_compress]  from font_compress::@3
  [74] font_compress::next_compressed#1 = font_compress::next_compressed#4 + 8
  [75] font_compress::font_size#1 = ++ font_compress::font_size#2
  [76] font_compress::found#3 = font_compress::font_size#2
  to:font_compress::@2
font_compress::@2: scope:[font_compress]  from font_compress::@4 font_compress::@7
  [77] font_compress::next_compressed#7 = phi( font_compress::@4/font_compress::next_compressed#1, font_compress::@7/font_compress::next_compressed#4 )
  [77] font_compress::return#1 = phi( font_compress::@4/font_compress::font_size#1, font_compress::@7/font_compress::return#5 )
  [77] font_compress::found#2 = phi( font_compress::@4/font_compress::found#3, font_compress::@7/font_compress::found#0 )
  [78] FONT_COMPRESSED_MAP[font_compress::i#4] = font_compress::found#2
  [79] font_compress::next_original#1 = font_compress::next_original#2 + 8
  [80] font_compress::i#1 = ++ font_compress::i#4
  [81] if(font_compress::i#1!=0) goto font_compress::@6
  to:font_compress::@return
font_compress::@return: scope:[font_compress]  from font_compress::@2
  [82] return 
  to:@return
font_compress::@6: scope:[font_compress]  from font_compress::@2
  [83] font_compress::font_size#9 = font_compress::return#1
  to:font_compress::@1
font_compress::@7: scope:[font_compress]  from font_compress::@5
  [84] font_compress::return#5 = font_compress::font_size#2
  to:font_compress::@2

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main::@5
  [85] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [86] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [87] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [88] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [89] *memset::dst#2 = memset::c#0
  [90] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

void show(byte show::c , byte show::x , byte show::y , byte* show::font_mapping)
show: scope:[show]  from main::@2
  [91] show::$7 = (word)show::y#0
  [92] show::$8 = show::$7 << 2
  [93] show::$9 = show::$8 + show::$7
  [94] show::$0 = show::$9 << 4
  [95] show::$1 = SCREEN + show::$0
  [96] show::$2 = show::x#0 << 1
  [97] show::ptr#0 = show::$1 + show::$2
  [98] *show::ptr#0 = FONT_COMPRESSED_MAP[show::c#0]
  [99] show::$4 = show::c#0
  [100] show::ptr#0[1] = (FONT_COMPRESSED_MAP+$40)[show::$4]
  [101] show::$5 = show::c#0
  [102] show::ptr#0[$28] = (FONT_COMPRESSED_MAP+$80)[show::$5]
  [103] show::$6 = show::c#0
  [104] show::ptr#0[$29] = (FONT_COMPRESSED_MAP+$c0)[show::$6]
  to:show::@return
show::@return: scope:[show]  from show
  [105] return 
  to:@return

byte font_find(byte* font_find::glyph , byte* font_find::font , byte font_find::font_size)
font_find: scope:[font_find]  from font_compress::@1
  [106] phi()
  to:font_find::@1
font_find::@1: scope:[font_find]  from font_find font_find::@5
  [107] font_find::font#4 = phi( font_find/FONT_COMPRESSED, font_find::@5/font_find::font#1 )
  [107] font_find::i#2 = phi( font_find/0, font_find::@5/font_find::i#1 )
  [108] if(font_find::i#2<font_find::font_size#0) goto font_find::@2
  to:font_find::@return
font_find::@return: scope:[font_find]  from font_find::@1 font_find::@4
  [109] font_find::return#3 = phi( font_find::@1/$ff, font_find::@4/font_find::i#2 )
  [110] return 
  to:@return
font_find::@2: scope:[font_find]  from font_find::@1 font_find::@3
  [111] font_find::l#2 = phi( font_find::@1/0, font_find::@3/font_find::l#1 )
  [112] if(font_find::glyph#0[font_find::l#2]==font_find::font#4[font_find::l#2]) goto font_find::@3
  to:font_find::@4
font_find::@3: scope:[font_find]  from font_find::@2
  [113] font_find::l#1 = ++ font_find::l#2
  [114] if(font_find::l#1!=8) goto font_find::@2
  to:font_find::@4
font_find::@4: scope:[font_find]  from font_find::@2 font_find::@3
  [115] font_find::found#2 = phi( font_find::@3/1, font_find::@2/0 )
  [116] if(0==font_find::found#2) goto font_find::@5
  to:font_find::@return
font_find::@5: scope:[font_find]  from font_find::@4
  [117] font_find::font#1 = font_find::font#4 + 8
  [118] font_find::i#1 = ++ font_find::i#2
  to:font_find::@1


VARIABLE REGISTER WEIGHTS
byte MOS6526_CIA::INTERRUPT
byte MOS6526_CIA::PORT_A
byte MOS6526_CIA::PORT_A_DDR
byte MOS6526_CIA::PORT_B
byte MOS6526_CIA::PORT_B_DDR
byte MOS6526_CIA::SERIAL_DATA
word MOS6526_CIA::TIMER_A
byte MOS6526_CIA::TIMER_A_CONTROL
word MOS6526_CIA::TIMER_B
byte MOS6526_CIA::TIMER_B_CONTROL
byte MOS6526_CIA::TOD_10THS
byte MOS6526_CIA::TOD_HOURS
byte MOS6526_CIA::TOD_MIN
byte MOS6526_CIA::TOD_SEC
byte MOS6569_VICII::BG_COLOR
byte MOS6569_VICII::BG_COLOR1
byte MOS6569_VICII::BG_COLOR2
byte MOS6569_VICII::BG_COLOR3
byte MOS6569_VICII::BORDER_COLOR
byte MOS6569_VICII::CONTROL1
byte MOS6569_VICII::CONTROL2
byte MOS6569_VICII::IRQ_ENABLE
byte MOS6569_VICII::IRQ_STATUS
byte MOS6569_VICII::LIGHTPEN_X
byte MOS6569_VICII::LIGHTPEN_Y
byte MOS6569_VICII::MEMORY
byte MOS6569_VICII::RASTER
byte MOS6569_VICII::SPRITE0_COLOR
byte MOS6569_VICII::SPRITE0_X
byte MOS6569_VICII::SPRITE0_Y
byte MOS6569_VICII::SPRITE1_COLOR
byte MOS6569_VICII::SPRITE1_X
byte MOS6569_VICII::SPRITE1_Y
byte MOS6569_VICII::SPRITE2_COLOR
byte MOS6569_VICII::SPRITE2_X
byte MOS6569_VICII::SPRITE2_Y
byte MOS6569_VICII::SPRITE3_COLOR
byte MOS6569_VICII::SPRITE3_X
byte MOS6569_VICII::SPRITE3_Y
byte MOS6569_VICII::SPRITE4_COLOR
byte MOS6569_VICII::SPRITE4_X
byte MOS6569_VICII::SPRITE4_Y
byte MOS6569_VICII::SPRITE5_COLOR
byte MOS6569_VICII::SPRITE5_X
byte MOS6569_VICII::SPRITE5_Y
byte MOS6569_VICII::SPRITE6_COLOR
byte MOS6569_VICII::SPRITE6_X
byte MOS6569_VICII::SPRITE6_Y
byte MOS6569_VICII::SPRITE7_COLOR
byte MOS6569_VICII::SPRITE7_X
byte MOS6569_VICII::SPRITE7_Y
byte MOS6569_VICII::SPRITES_BG_COLLISION
byte MOS6569_VICII::SPRITES_COLLISION
byte MOS6569_VICII::SPRITES_ENABLE
byte MOS6569_VICII::SPRITES_EXPAND_X
byte MOS6569_VICII::SPRITES_EXPAND_Y
byte MOS6569_VICII::SPRITES_MC
byte MOS6569_VICII::SPRITES_MCOLOR1
byte MOS6569_VICII::SPRITES_MCOLOR2
byte MOS6569_VICII::SPRITES_PRIORITY
byte MOS6569_VICII::SPRITES_XMSB
byte MOS6581_SID::CH1_ATTACK_DECAY
byte MOS6581_SID::CH1_CONTROL
word MOS6581_SID::CH1_FREQ
word MOS6581_SID::CH1_PULSE_WIDTH
byte MOS6581_SID::CH1_SUSTAIN_RELEASE
byte MOS6581_SID::CH2_ATTACK_DECAY
byte MOS6581_SID::CH2_CONTROL
word MOS6581_SID::CH2_FREQ
word MOS6581_SID::CH2_PULSE_WIDTH
byte MOS6581_SID::CH2_SUSTAIN_RELEASE
byte MOS6581_SID::CH3_ATTACK_DECAY
byte MOS6581_SID::CH3_CONTROL
byte MOS6581_SID::CH3_ENV
word MOS6581_SID::CH3_FREQ
byte MOS6581_SID::CH3_OSC
word MOS6581_SID::CH3_PULSE_WIDTH
byte MOS6581_SID::CH3_SUSTAIN_RELEASE
byte MOS6581_SID::FILTER_CUTOFF_HIGH
byte MOS6581_SID::FILTER_CUTOFF_LOW
byte MOS6581_SID::FILTER_SETUP
byte MOS6581_SID::POT_X
byte MOS6581_SID::POT_Y
byte MOS6581_SID::VOLUME_FILTER_MODE
void font_2x2(byte* font_2x2::font_original , byte* font_2x2::font_2x2)
byte~ font_2x2::$1 20002.0
byte~ font_2x2::$10 2002.0
byte~ font_2x2::$11 1001.0
byte~ font_2x2::$12 2002.0
byte~ font_2x2::$13 2002.0
byte~ font_2x2::$14 1001.0
byte~ font_2x2::$15 2002.0
word~ font_2x2::$5 20002.0
word~ font_2x2::$7 20002.0
byte font_2x2::b
byte font_2x2::b#1 15001.5
byte font_2x2::b#2 2000.2
byte font_2x2::c
byte font_2x2::c#1 151.5
byte font_2x2::c#11 5.611111111111111
byte* font_2x2::font_2x2
byte* font_2x2::font_original
byte font_2x2::glyph_bit
byte font_2x2::glyph_bit#0 5000.5
byte font_2x2::glyph_bits
byte font_2x2::glyph_bits#0 2002.0
byte font_2x2::glyph_bits#1 6667.333333333333
byte font_2x2::glyph_bits#2 3444.8888888888887
word font_2x2::glyph_bits_2x2
word font_2x2::glyph_bits_2x2#1 20002.0
word font_2x2::glyph_bits_2x2#2 2000.5000000000002
word font_2x2::glyph_bits_2x2#3 4000.4
byte font_2x2::l
byte font_2x2::l#1 1501.5
byte font_2x2::l#2 103.55172413793102
byte font_2x2::l2
byte font_2x2::l2#1 1501.5
byte font_2x2::l2#8 250.25000000000003
byte font_2x2::l2#9 667.3333333333334
byte* font_2x2::next_2x2
byte* font_2x2::next_2x2#1 50.5
byte* font_2x2::next_2x2_left
byte* font_2x2::next_2x2_left#0 70.76470588235294
byte* font_2x2::next_2x2_left#1 1001.0
byte* font_2x2::next_2x2_left#10 202.0
byte* font_2x2::next_2x2_left#7 157.8846153846154
byte* font_2x2::next_2x2_left#8 1001.0
byte* font_2x2::next_2x2_right
byte* font_2x2::next_2x2_right#0 101.0
byte* font_2x2::next_2x2_right#1 2002.0
byte* font_2x2::next_2x2_right#7 157.8846153846154
byte* font_2x2::next_2x2_right#8 1001.0
byte* font_2x2::next_original
byte* font_2x2::next_original#1 67.33333333333333
byte* font_2x2::next_original#4 34.371428571428574
byte font_compress(byte* font_compress::font_original , byte* font_compress::font_compressed , byte* font_compress::compress_mapping)
byte* font_compress::compress_mapping
byte* font_compress::font_compressed
byte* font_compress::font_original
byte font_compress::font_size
byte font_compress::font_size#1 101.0
byte font_compress::font_size#2 38.84615384615385
byte font_compress::font_size#9 202.0
byte font_compress::found
byte font_compress::found#0 101.0
byte font_compress::found#2 303.0
byte font_compress::found#3 202.0
byte font_compress::i
byte font_compress::i#1 101.0
byte font_compress::i#4 16.833333333333332
byte font_compress::l
byte font_compress::l#1 1501.5
byte font_compress::l#2 2002.0
byte* font_compress::next_compressed
byte* font_compress::next_compressed#1 67.33333333333333
byte* font_compress::next_compressed#4 108.66666666666669
byte* font_compress::next_compressed#7 50.5
byte* font_compress::next_original
byte* font_compress::next_original#1 50.5
byte* font_compress::next_original#2 76.70588235294117
byte font_compress::return
byte font_compress::return#1 60.599999999999994
byte font_compress::return#5 202.0
byte font_find(byte* font_find::glyph , byte* font_find::font , byte font_find::font_size)
byte* font_find::font
byte* font_find::font#1 100001.0
byte* font_find::font#4 150000.375
byte font_find::font_size
byte font_find::font_size#0 8341.833333333332
byte font_find::found
byte font_find::found#2 100001.0
byte* font_find::glyph
byte* font_find::glyph#0 76930.92307692308
byte font_find::i
byte font_find::i#1 200002.0
byte font_find::i#2 44444.88888888889
byte font_find::l
byte font_find::l#1 1500001.5
byte font_find::l#2 2000002.0
byte font_find::return
byte font_find::return#0 202.0
byte font_find::return#3 33367.33333333333
void main()
byte main::c
byte main::c#1 42.599999999999994
byte main::c#2 62.8
byte main::c#4 22.0
byte* main::toD0181_gfx
byte main::toD0181_return
byte* main::toD0181_screen
byte main::x
byte main::x#1 151.5
byte main::x#2 50.5
byte main::y
byte main::y#1 16.5
byte main::y#4 13.666666666666664
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#0 17.166666666666664
byte* memset::dst
byte* memset::dst#1 202.0
byte* memset::dst#2 134.66666666666666
byte* memset::end
word memset::num
void* memset::return
void* memset::str
void show(byte show::c , byte show::x , byte show::y , byte* show::font_mapping)
word~ show::$0 2002.0
byte*~ show::$1 1001.0
byte~ show::$2 2002.0
byte~ show::$4 2002.0
byte~ show::$5 2002.0
byte~ show::$6 2002.0
word~ show::$7 1501.5
word~ show::$8 2002.0
word~ show::$9 2002.0
byte show::c
byte show::c#0 273.6666666666667
byte* show::font_mapping
byte* show::ptr
byte* show::ptr#0 715.0
byte show::x
byte show::x#0 157.42857142857142
byte show::y
byte show::y#0 101.0

Initial phi equivalence classes
[ main::y#4 main::y#1 ]
[ main::c#2 main::c#4 main::c#1 ]
[ main::x#2 main::x#1 ]
[ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ]
[ font_2x2::next_original#4 font_2x2::next_original#1 ]
[ font_2x2::c#11 font_2x2::c#1 ]
[ font_2x2::l#2 font_2x2::l#1 ]
[ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ]
[ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
[ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ]
[ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
[ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ]
[ font_2x2::b#2 font_2x2::b#1 ]
[ font_2x2::glyph_bit#0 ]
[ font_compress::next_original#2 font_compress::next_original#1 ]
[ font_compress::font_size#2 font_compress::font_size#9 ]
[ font_compress::i#4 font_compress::i#1 ]
[ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ]
[ font_compress::l#2 font_compress::l#1 ]
[ font_compress::found#2 font_compress::found#3 font_compress::found#0 ]
[ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ]
[ memset::dst#2 memset::dst#1 ]
[ font_find::font#4 font_find::font#1 ]
[ font_find::return#3 font_find::i#2 font_find::i#1 ]
[ font_find::l#2 font_find::l#1 ]
[ font_find::found#2 ]
Added variable memset::c#0 to live range equivalence class [ memset::c#0 ]
Added variable show::c#0 to live range equivalence class [ show::c#0 ]
Added variable show::x#0 to live range equivalence class [ show::x#0 ]
Added variable show::y#0 to live range equivalence class [ show::y#0 ]
Added variable font_2x2::$1 to live range equivalence class [ font_2x2::$1 ]
Added variable font_2x2::$5 to live range equivalence class [ font_2x2::$5 ]
Added variable font_2x2::glyph_bits_2x2#1 to live range equivalence class [ font_2x2::glyph_bits_2x2#1 ]
Added variable font_2x2::$7 to live range equivalence class [ font_2x2::$7 ]
Added variable font_2x2::$10 to live range equivalence class [ font_2x2::$10 ]
Added variable font_2x2::$11 to live range equivalence class [ font_2x2::$11 ]
Added variable font_2x2::$12 to live range equivalence class [ font_2x2::$12 ]
Added variable font_2x2::$13 to live range equivalence class [ font_2x2::$13 ]
Added variable font_2x2::$14 to live range equivalence class [ font_2x2::$14 ]
Added variable font_2x2::$15 to live range equivalence class [ font_2x2::$15 ]
Added variable font_find::glyph#0 to live range equivalence class [ font_find::glyph#0 ]
Added variable font_find::font_size#0 to live range equivalence class [ font_find::font_size#0 ]
Added variable font_find::return#0 to live range equivalence class [ font_find::return#0 ]
Added variable show::$7 to live range equivalence class [ show::$7 ]
Added variable show::$8 to live range equivalence class [ show::$8 ]
Added variable show::$9 to live range equivalence class [ show::$9 ]
Added variable show::$0 to live range equivalence class [ show::$0 ]
Added variable show::$1 to live range equivalence class [ show::$1 ]
Added variable show::$2 to live range equivalence class [ show::$2 ]
Added variable show::ptr#0 to live range equivalence class [ show::ptr#0 ]
Added variable show::$4 to live range equivalence class [ show::$4 ]
Added variable show::$5 to live range equivalence class [ show::$5 ]
Added variable show::$6 to live range equivalence class [ show::$6 ]
Complete equivalence classes
[ main::y#4 main::y#1 ]
[ main::c#2 main::c#4 main::c#1 ]
[ main::x#2 main::x#1 ]
[ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ]
[ font_2x2::next_original#4 font_2x2::next_original#1 ]
[ font_2x2::c#11 font_2x2::c#1 ]
[ font_2x2::l#2 font_2x2::l#1 ]
[ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ]
[ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
[ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ]
[ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
[ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ]
[ font_2x2::b#2 font_2x2::b#1 ]
[ font_2x2::glyph_bit#0 ]
[ font_compress::next_original#2 font_compress::next_original#1 ]
[ font_compress::font_size#2 font_compress::font_size#9 ]
[ font_compress::i#4 font_compress::i#1 ]
[ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ]
[ font_compress::l#2 font_compress::l#1 ]
[ font_compress::found#2 font_compress::found#3 font_compress::found#0 ]
[ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ]
[ memset::dst#2 memset::dst#1 ]
[ font_find::font#4 font_find::font#1 ]
[ font_find::return#3 font_find::i#2 font_find::i#1 ]
[ font_find::l#2 font_find::l#1 ]
[ font_find::found#2 ]
[ memset::c#0 ]
[ show::c#0 ]
[ show::x#0 ]
[ show::y#0 ]
[ font_2x2::$1 ]
[ font_2x2::$5 ]
[ font_2x2::glyph_bits_2x2#1 ]
[ font_2x2::$7 ]
[ font_2x2::$10 ]
[ font_2x2::$11 ]
[ font_2x2::$12 ]
[ font_2x2::$13 ]
[ font_2x2::$14 ]
[ font_2x2::$15 ]
[ font_find::glyph#0 ]
[ font_find::font_size#0 ]
[ font_find::return#0 ]
[ show::$7 ]
[ show::$8 ]
[ show::$9 ]
[ show::$0 ]
[ show::$1 ]
[ show::$2 ]
[ show::ptr#0 ]
[ show::$4 ]
[ show::$5 ]
[ show::$6 ]
Allocated zp[1]:2 [ main::y#4 main::y#1 ]
Allocated zp[1]:3 [ main::c#2 main::c#4 main::c#1 ]
Allocated zp[1]:4 [ main::x#2 main::x#1 ]
Allocated zp[2]:5 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ]
Allocated zp[2]:7 [ font_2x2::next_original#4 font_2x2::next_original#1 ]
Allocated zp[1]:9 [ font_2x2::c#11 font_2x2::c#1 ]
Allocated zp[1]:10 [ font_2x2::l#2 font_2x2::l#1 ]
Allocated zp[2]:11 [ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ]
Allocated zp[1]:13 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
Allocated zp[2]:14 [ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ]
Allocated zp[1]:16 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
Allocated zp[2]:17 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ]
Allocated zp[1]:19 [ font_2x2::b#2 font_2x2::b#1 ]
Allocated zp[1]:20 [ font_2x2::glyph_bit#0 ]
Allocated zp[2]:21 [ font_compress::next_original#2 font_compress::next_original#1 ]
Allocated zp[1]:23 [ font_compress::font_size#2 font_compress::font_size#9 ]
Allocated zp[1]:24 [ font_compress::i#4 font_compress::i#1 ]
Allocated zp[2]:25 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ]
Allocated zp[1]:27 [ font_compress::l#2 font_compress::l#1 ]
Allocated zp[1]:28 [ font_compress::found#2 font_compress::found#3 font_compress::found#0 ]
Allocated zp[1]:29 [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ]
Allocated zp[2]:30 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:32 [ font_find::font#4 font_find::font#1 ]
Allocated zp[1]:34 [ font_find::return#3 font_find::i#2 font_find::i#1 ]
Allocated zp[1]:35 [ font_find::l#2 font_find::l#1 ]
Allocated zp[1]:36 [ font_find::found#2 ]
Allocated zp[1]:37 [ memset::c#0 ]
Allocated zp[1]:38 [ show::c#0 ]
Allocated zp[1]:39 [ show::x#0 ]
Allocated zp[1]:40 [ show::y#0 ]
Allocated zp[1]:41 [ font_2x2::$1 ]
Allocated zp[2]:42 [ font_2x2::$5 ]
Allocated zp[2]:44 [ font_2x2::glyph_bits_2x2#1 ]
Allocated zp[2]:46 [ font_2x2::$7 ]
Allocated zp[1]:48 [ font_2x2::$10 ]
Allocated zp[1]:49 [ font_2x2::$11 ]
Allocated zp[1]:50 [ font_2x2::$12 ]
Allocated zp[1]:51 [ font_2x2::$13 ]
Allocated zp[1]:52 [ font_2x2::$14 ]
Allocated zp[1]:53 [ font_2x2::$15 ]
Allocated zp[2]:54 [ font_find::glyph#0 ]
Allocated zp[1]:56 [ font_find::font_size#0 ]
Allocated zp[1]:57 [ font_find::return#0 ]
Allocated zp[2]:58 [ show::$7 ]
Allocated zp[2]:60 [ show::$8 ]
Allocated zp[2]:62 [ show::$9 ]
Allocated zp[2]:64 [ show::$0 ]
Allocated zp[2]:66 [ show::$1 ]
Allocated zp[1]:68 [ show::$2 ]
Allocated zp[2]:69 [ show::ptr#0 ]
Allocated zp[1]:71 [ show::$4 ]
Allocated zp[1]:72 [ show::$5 ]
Allocated zp[1]:73 [ show::$6 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *PROCPORT = PROCPORT_RAM_CHARROM [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *PROCPORT = PROCPORT_BASIC_KERNEL_IO [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [24] font_2x2::next_2x2_right#0 = font_2x2::next_2x2_left#0 + (word)$40*8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ font_2x2::c#11 font_2x2::c#1 ]
Statement [25] font_2x2::next_2x2_left#10 = font_2x2::next_2x2_left#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 font_2x2::next_2x2_left#10 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 font_2x2::next_2x2_left#10 ] { }  ) always clobbers reg byte a 
Statement [27] font_2x2::glyph_bits#0 = font_2x2::next_original#4[font_2x2::l#2] [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#0 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ font_2x2::l#2 font_2x2::l#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
Statement [33] font_2x2::$5 = font_2x2::glyph_bits_2x2#3 << 1 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$5 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:16 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:19 [ font_2x2::b#2 font_2x2::b#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:20 [ font_2x2::glyph_bit#0 ]
Statement [34] font_2x2::glyph_bits_2x2#1 = font_2x2::$5 | font_2x2::glyph_bit#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::glyph_bits_2x2#1 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::glyph_bits_2x2#1 ] { }  ) always clobbers reg byte a 
Statement [35] font_2x2::$7 = font_2x2::glyph_bits_2x2#1 << 1 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$7 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$7 ] { }  ) always clobbers reg byte a 
Statement [36] font_2x2::glyph_bits_2x2#2 = font_2x2::$7 | font_2x2::glyph_bit#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bits_2x2#2 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bits_2x2#2 ] { }  ) always clobbers reg byte a 
Statement [52] font_2x2::next_2x2_left#1 = font_2x2::next_2x2_left#0 + (word)$80*8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 ] { }  ) always clobbers reg byte a 
Statement [53] font_2x2::next_2x2_right#1 = font_2x2::next_2x2_left#0 + (word)$c0*8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 font_2x2::next_2x2_right#1 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 font_2x2::next_2x2_right#1 ] { }  ) always clobbers reg byte a 
Statement [57] font_2x2::next_2x2#1 = font_2x2::next_2x2_left#0 + 8 [ font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2#1 ] ( font_2x2:2 [ font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2#1 ] { }  ) always clobbers reg byte a 
Statement [58] font_2x2::next_original#1 = font_2x2::next_original#4 + 8 [ font_2x2::c#11 font_2x2::next_2x2#1 font_2x2::next_original#1 ] ( font_2x2:2 [ font_2x2::c#11 font_2x2::next_2x2#1 font_2x2::next_original#1 ] { }  ) always clobbers reg byte a 
Statement [64] font_find::glyph#0 = font_compress::next_original#2 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 ] ( font_compress:5 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ font_compress::font_size#2 font_compress::font_size#9 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ font_compress::i#4 font_compress::i#1 ]
Statement [71] font_compress::next_compressed#4[font_compress::l#2] = font_compress::next_original#2[font_compress::l#2] [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_compress::l#2 ] ( font_compress:5 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_compress::l#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:27 [ font_compress::l#2 font_compress::l#1 ]
Statement [74] font_compress::next_compressed#1 = font_compress::next_compressed#4 + 8 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#1 ] ( font_compress:5 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#1 ] { }  ) always clobbers reg byte a 
Statement [79] font_compress::next_original#1 = font_compress::next_original#2 + 8 [ font_compress::i#4 font_compress::next_original#1 font_compress::next_compressed#7 font_compress::return#1 ] ( font_compress:5 [ font_compress::i#4 font_compress::next_original#1 font_compress::next_compressed#7 font_compress::return#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:29 [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ]
Statement [87] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::c#0 memset::dst#2 ] ( memset:9 [ memset::c#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:37 [ memset::c#0 ]
Statement [89] *memset::dst#2 = memset::c#0 [ memset::c#0 memset::dst#2 ] ( memset:9 [ memset::c#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:37 [ memset::c#0 ]
Statement [91] show::$7 = (word)show::y#0 [ show::c#0 show::x#0 show::$7 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$7 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::y#4 main::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::c#2 main::c#4 main::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:38 [ show::c#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:39 [ show::x#0 ]
Statement [92] show::$8 = show::$7 << 2 [ show::c#0 show::x#0 show::$7 show::$8 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$7 show::$8 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [93] show::$9 = show::$8 + show::$7 [ show::c#0 show::x#0 show::$9 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$9 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [94] show::$0 = show::$9 << 4 [ show::c#0 show::x#0 show::$0 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [95] show::$1 = SCREEN + show::$0 [ show::c#0 show::x#0 show::$1 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$1 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [96] show::$2 = show::x#0 << 1 [ show::c#0 show::$1 show::$2 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::$1 show::$2 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [97] show::ptr#0 = show::$1 + show::$2 [ show::c#0 show::ptr#0 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [98] *show::ptr#0 = FONT_COMPRESSED_MAP[show::c#0] [ show::c#0 show::ptr#0 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::y#4 main::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::c#2 main::c#4 main::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:38 [ show::c#0 ]
Statement [100] show::ptr#0[1] = (FONT_COMPRESSED_MAP+$40)[show::$4] [ show::c#0 show::ptr#0 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [102] show::ptr#0[$28] = (FONT_COMPRESSED_MAP+$80)[show::$5] [ show::c#0 show::ptr#0 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [104] show::ptr#0[$29] = (FONT_COMPRESSED_MAP+$c0)[show::$6] [ ] ( show:15 [ main::y#4 main::c#2 main::x#2 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [112] if(font_find::glyph#0[font_find::l#2]==font_find::font#4[font_find::l#2]) goto font_find::@3 [ font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#4 font_find::l#2 ] ( font_compress:5::font_find:66 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#4 font_find::l#2 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:56 [ font_find::font_size#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:34 [ font_find::return#3 font_find::i#2 font_find::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:35 [ font_find::l#2 font_find::l#1 ]
Statement [117] font_find::font#1 = font_find::font#4 + 8 [ font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#1 ] ( font_compress:5::font_find:66 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#1 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Statement [1] *PROCPORT = PROCPORT_RAM_CHARROM [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *PROCPORT = PROCPORT_BASIC_KERNEL_IO [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [24] font_2x2::next_2x2_right#0 = font_2x2::next_2x2_left#0 + (word)$40*8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 ] { }  ) always clobbers reg byte a 
Statement [25] font_2x2::next_2x2_left#10 = font_2x2::next_2x2_left#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 font_2x2::next_2x2_left#10 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 font_2x2::next_2x2_left#10 ] { }  ) always clobbers reg byte a 
Statement [27] font_2x2::glyph_bits#0 = font_2x2::next_original#4[font_2x2::l#2] [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#0 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#0 ] { }  ) always clobbers reg byte a 
Statement [29] font_2x2::$1 = font_2x2::glyph_bits#2 & $80 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::glyph_bits_2x2#3 font_2x2::b#2 font_2x2::$1 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::glyph_bits_2x2#3 font_2x2::b#2 font_2x2::$1 ] { }  ) always clobbers reg byte a 
Statement [33] font_2x2::$5 = font_2x2::glyph_bits_2x2#3 << 1 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$5 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$5 ] { }  ) always clobbers reg byte a 
Statement [34] font_2x2::glyph_bits_2x2#1 = font_2x2::$5 | font_2x2::glyph_bit#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::glyph_bits_2x2#1 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::glyph_bits_2x2#1 ] { }  ) always clobbers reg byte a 
Statement [35] font_2x2::$7 = font_2x2::glyph_bits_2x2#1 << 1 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$7 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$7 ] { }  ) always clobbers reg byte a 
Statement [36] font_2x2::glyph_bits_2x2#2 = font_2x2::$7 | font_2x2::glyph_bit#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bits_2x2#2 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bits_2x2#2 ] { }  ) always clobbers reg byte a 
Statement [52] font_2x2::next_2x2_left#1 = font_2x2::next_2x2_left#0 + (word)$80*8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 ] { }  ) always clobbers reg byte a 
Statement [53] font_2x2::next_2x2_right#1 = font_2x2::next_2x2_left#0 + (word)$c0*8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 font_2x2::next_2x2_right#1 ] ( font_2x2:2 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 font_2x2::next_2x2_right#1 ] { }  ) always clobbers reg byte a 
Statement [57] font_2x2::next_2x2#1 = font_2x2::next_2x2_left#0 + 8 [ font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2#1 ] ( font_2x2:2 [ font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2#1 ] { }  ) always clobbers reg byte a 
Statement [58] font_2x2::next_original#1 = font_2x2::next_original#4 + 8 [ font_2x2::c#11 font_2x2::next_2x2#1 font_2x2::next_original#1 ] ( font_2x2:2 [ font_2x2::c#11 font_2x2::next_2x2#1 font_2x2::next_original#1 ] { }  ) always clobbers reg byte a 
Statement [64] font_find::glyph#0 = font_compress::next_original#2 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 ] ( font_compress:5 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Statement [71] font_compress::next_compressed#4[font_compress::l#2] = font_compress::next_original#2[font_compress::l#2] [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_compress::l#2 ] ( font_compress:5 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_compress::l#2 ] { }  ) always clobbers reg byte a 
Statement [74] font_compress::next_compressed#1 = font_compress::next_compressed#4 + 8 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#1 ] ( font_compress:5 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#1 ] { }  ) always clobbers reg byte a 
Statement [79] font_compress::next_original#1 = font_compress::next_original#2 + 8 [ font_compress::i#4 font_compress::next_original#1 font_compress::next_compressed#7 font_compress::return#1 ] ( font_compress:5 [ font_compress::i#4 font_compress::next_original#1 font_compress::next_compressed#7 font_compress::return#1 ] { }  ) always clobbers reg byte a 
Statement [87] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::c#0 memset::dst#2 ] ( memset:9 [ memset::c#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [89] *memset::dst#2 = memset::c#0 [ memset::c#0 memset::dst#2 ] ( memset:9 [ memset::c#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [91] show::$7 = (word)show::y#0 [ show::c#0 show::x#0 show::$7 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$7 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [92] show::$8 = show::$7 << 2 [ show::c#0 show::x#0 show::$7 show::$8 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$7 show::$8 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [93] show::$9 = show::$8 + show::$7 [ show::c#0 show::x#0 show::$9 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$9 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [94] show::$0 = show::$9 << 4 [ show::c#0 show::x#0 show::$0 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [95] show::$1 = SCREEN + show::$0 [ show::c#0 show::x#0 show::$1 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$1 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [96] show::$2 = show::x#0 << 1 [ show::c#0 show::$1 show::$2 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::$1 show::$2 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [97] show::ptr#0 = show::$1 + show::$2 [ show::c#0 show::ptr#0 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [98] *show::ptr#0 = FONT_COMPRESSED_MAP[show::c#0] [ show::c#0 show::ptr#0 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [100] show::ptr#0[1] = (FONT_COMPRESSED_MAP+$40)[show::$4] [ show::c#0 show::ptr#0 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [102] show::ptr#0[$28] = (FONT_COMPRESSED_MAP+$80)[show::$5] [ show::c#0 show::ptr#0 ] ( show:15 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [104] show::ptr#0[$29] = (FONT_COMPRESSED_MAP+$c0)[show::$6] [ ] ( show:15 [ main::y#4 main::c#2 main::x#2 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [112] if(font_find::glyph#0[font_find::l#2]==font_find::font#4[font_find::l#2]) goto font_find::@3 [ font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#4 font_find::l#2 ] ( font_compress:5::font_find:66 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#4 font_find::l#2 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Statement [117] font_find::font#1 = font_find::font#4 + 8 [ font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#1 ] ( font_compress:5::font_find:66 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#1 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::y#4 main::y#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::c#2 main::c#4 main::c#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ main::x#2 main::x#1 ] : zp[1]:4 , reg byte x , 
Potential registers zp[2]:5 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ font_2x2::next_original#4 font_2x2::next_original#1 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ font_2x2::c#11 font_2x2::c#1 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ font_2x2::l#2 font_2x2::l#1 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[2]:11 [ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[2]:14 [ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ] : zp[2]:14 , 
Potential registers zp[1]:16 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ] : zp[1]:16 , reg byte x , reg byte y , 
Potential registers zp[2]:17 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ] : zp[2]:17 , 
Potential registers zp[1]:19 [ font_2x2::b#2 font_2x2::b#1 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ font_2x2::glyph_bit#0 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ font_compress::next_original#2 font_compress::next_original#1 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ font_compress::font_size#2 font_compress::font_size#9 ] : zp[1]:23 , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ font_compress::i#4 font_compress::i#1 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[2]:25 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ] : zp[2]:25 , 
Potential registers zp[1]:27 [ font_compress::l#2 font_compress::l#1 ] : zp[1]:27 , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ font_compress::found#2 font_compress::found#3 font_compress::found#0 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ] : zp[1]:29 , reg byte x , reg byte y , 
Potential registers zp[2]:30 [ memset::dst#2 memset::dst#1 ] : zp[2]:30 , 
Potential registers zp[2]:32 [ font_find::font#4 font_find::font#1 ] : zp[2]:32 , 
Potential registers zp[1]:34 [ font_find::return#3 font_find::i#2 font_find::i#1 ] : zp[1]:34 , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ font_find::l#2 font_find::l#1 ] : zp[1]:35 , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ font_find::found#2 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ memset::c#0 ] : zp[1]:37 , reg byte x , 
Potential registers zp[1]:38 [ show::c#0 ] : zp[1]:38 , reg byte x , 
Potential registers zp[1]:39 [ show::x#0 ] : zp[1]:39 , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ show::y#0 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ font_2x2::$1 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:42 [ font_2x2::$5 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ font_2x2::glyph_bits_2x2#1 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ font_2x2::$7 ] : zp[2]:46 , 
Potential registers zp[1]:48 [ font_2x2::$10 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ font_2x2::$11 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ font_2x2::$12 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ font_2x2::$13 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ font_2x2::$14 ] : zp[1]:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:53 [ font_2x2::$15 ] : zp[1]:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:54 [ font_find::glyph#0 ] : zp[2]:54 , 
Potential registers zp[1]:56 [ font_find::font_size#0 ] : zp[1]:56 , reg byte x , reg byte y , 
Potential registers zp[1]:57 [ font_find::return#0 ] : zp[1]:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:58 [ show::$7 ] : zp[2]:58 , 
Potential registers zp[2]:60 [ show::$8 ] : zp[2]:60 , 
Potential registers zp[2]:62 [ show::$9 ] : zp[2]:62 , 
Potential registers zp[2]:64 [ show::$0 ] : zp[2]:64 , 
Potential registers zp[2]:66 [ show::$1 ] : zp[2]:66 , 
Potential registers zp[1]:68 [ show::$2 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:69 [ show::ptr#0 ] : zp[2]:69 , 
Potential registers zp[1]:71 [ show::$4 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ show::$5 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ show::$6 ] : zp[1]:73 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [font_find] 3,500,003.5: zp[1]:35 [ font_find::l#2 font_find::l#1 ] 277,814.22: zp[1]:34 [ font_find::return#3 font_find::i#2 font_find::i#1 ] 250,001.38: zp[2]:32 [ font_find::font#4 font_find::font#1 ] 100,001: zp[1]:36 [ font_find::found#2 ] 76,930.92: zp[2]:54 [ font_find::glyph#0 ] 8,341.83: zp[1]:56 [ font_find::font_size#0 ] 202: zp[1]:57 [ font_find::return#0 ] 
Uplift Scope [font_2x2] 20,002: zp[1]:41 [ font_2x2::$1 ] 20,002: zp[2]:42 [ font_2x2::$5 ] 20,002: zp[2]:44 [ font_2x2::glyph_bits_2x2#1 ] 20,002: zp[2]:46 [ font_2x2::$7 ] 17,001.7: zp[1]:19 [ font_2x2::b#2 font_2x2::b#1 ] 12,114.22: zp[1]:16 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ] 6,000.9: zp[2]:17 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ] 5,000.5: zp[1]:20 [ font_2x2::glyph_bit#0 ] 3,261.88: zp[2]:14 [ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ] 2,419.08: zp[1]:13 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ] 2,361.88: zp[2]:11 [ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ] 2,002: zp[1]:48 [ font_2x2::$10 ] 2,002: zp[1]:50 [ font_2x2::$12 ] 2,002: zp[1]:51 [ font_2x2::$13 ] 2,002: zp[1]:53 [ font_2x2::$15 ] 1,605.05: zp[1]:10 [ font_2x2::l#2 font_2x2::l#1 ] 1,001: zp[1]:49 [ font_2x2::$11 ] 1,001: zp[1]:52 [ font_2x2::$14 ] 157.11: zp[1]:9 [ font_2x2::c#11 font_2x2::c#1 ] 121.26: zp[2]:5 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ] 101.7: zp[2]:7 [ font_2x2::next_original#4 font_2x2::next_original#1 ] 
Uplift Scope [show] 2,002: zp[2]:60 [ show::$8 ] 2,002: zp[2]:62 [ show::$9 ] 2,002: zp[2]:64 [ show::$0 ] 2,002: zp[1]:68 [ show::$2 ] 2,002: zp[1]:71 [ show::$4 ] 2,002: zp[1]:72 [ show::$5 ] 2,002: zp[1]:73 [ show::$6 ] 1,501.5: zp[2]:58 [ show::$7 ] 1,001: zp[2]:66 [ show::$1 ] 715: zp[2]:69 [ show::ptr#0 ] 273.67: zp[1]:38 [ show::c#0 ] 157.43: zp[1]:39 [ show::x#0 ] 101: zp[1]:40 [ show::y#0 ] 
Uplift Scope [font_compress] 3,503.5: zp[1]:27 [ font_compress::l#2 font_compress::l#1 ] 606: zp[1]:28 [ font_compress::found#2 font_compress::found#3 font_compress::found#0 ] 363.6: zp[1]:29 [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ] 240.85: zp[1]:23 [ font_compress::font_size#2 font_compress::font_size#9 ] 226.5: zp[2]:25 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ] 127.21: zp[2]:21 [ font_compress::next_original#2 font_compress::next_original#1 ] 117.83: zp[1]:24 [ font_compress::i#4 font_compress::i#1 ] 
Uplift Scope [main] 202: zp[1]:4 [ main::x#2 main::x#1 ] 127.4: zp[1]:3 [ main::c#2 main::c#4 main::c#1 ] 30.17: zp[1]:2 [ main::y#4 main::y#1 ] 
Uplift Scope [memset] 336.67: zp[2]:30 [ memset::dst#2 memset::dst#1 ] 17.17: zp[1]:37 [ memset::c#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [] 

Uplifting [font_find] best 205671 combination reg byte y [ font_find::l#2 font_find::l#1 ] reg byte x [ font_find::return#3 font_find::i#2 font_find::i#1 ] zp[2]:32 [ font_find::font#4 font_find::font#1 ] reg byte a [ font_find::found#2 ] zp[2]:54 [ font_find::glyph#0 ] zp[1]:56 [ font_find::font_size#0 ] zp[1]:57 [ font_find::return#0 ] 
Limited combination testing to 100 combinations of 432 possible.
Uplifting [font_2x2] best 182671 combination reg byte a [ font_2x2::$1 ] zp[2]:42 [ font_2x2::$5 ] zp[2]:44 [ font_2x2::glyph_bits_2x2#1 ] zp[2]:46 [ font_2x2::$7 ] reg byte y [ font_2x2::b#2 font_2x2::b#1 ] zp[1]:16 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ] zp[2]:17 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ] reg byte x [ font_2x2::glyph_bit#0 ] zp[2]:14 [ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ] zp[1]:13 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ] zp[2]:11 [ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ] zp[1]:48 [ font_2x2::$10 ] zp[1]:50 [ font_2x2::$12 ] zp[1]:51 [ font_2x2::$13 ] zp[1]:53 [ font_2x2::$15 ] zp[1]:10 [ font_2x2::l#2 font_2x2::l#1 ] zp[1]:49 [ font_2x2::$11 ] zp[1]:52 [ font_2x2::$14 ] zp[1]:9 [ font_2x2::c#11 font_2x2::c#1 ] zp[2]:5 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ] zp[2]:7 [ font_2x2::next_original#4 font_2x2::next_original#1 ] 
Limited combination testing to 100 combinations of 11943936 possible.
Uplifting [show] best 182651 combination zp[2]:60 [ show::$8 ] zp[2]:62 [ show::$9 ] zp[2]:64 [ show::$0 ] reg byte a [ show::$2 ] reg byte x [ show::$4 ] reg byte a [ show::$5 ] reg byte a [ show::$6 ] zp[2]:58 [ show::$7 ] zp[2]:66 [ show::$1 ] zp[2]:69 [ show::ptr#0 ] zp[1]:38 [ show::c#0 ] zp[1]:39 [ show::x#0 ] zp[1]:40 [ show::y#0 ] 
Limited combination testing to 100 combinations of 6144 possible.
Uplifting [font_compress] best 181241 combination reg byte y [ font_compress::l#2 font_compress::l#1 ] reg byte a [ font_compress::found#2 font_compress::found#3 font_compress::found#0 ] reg byte x [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ] zp[1]:23 [ font_compress::font_size#2 font_compress::font_size#9 ] zp[2]:25 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ] zp[2]:21 [ font_compress::next_original#2 font_compress::next_original#1 ] zp[1]:24 [ font_compress::i#4 font_compress::i#1 ] 
Limited combination testing to 100 combinations of 324 possible.
Uplifting [main] best 181241 combination zp[1]:4 [ main::x#2 main::x#1 ] zp[1]:3 [ main::c#2 main::c#4 main::c#1 ] zp[1]:2 [ main::y#4 main::y#1 ] 
Uplifting [memset] best 181228 combination zp[2]:30 [ memset::dst#2 memset::dst#1 ] reg byte x [ memset::c#0 ] 
Uplifting [MOS6526_CIA] best 181228 combination 
Uplifting [MOS6569_VICII] best 181228 combination 
Uplifting [MOS6581_SID] best 181228 combination 
Uplifting [] best 181228 combination 
Attempting to uplift remaining variables inzp[1]:16 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
Uplifting [font_2x2] best 181228 combination zp[1]:16 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ] 
Attempting to uplift remaining variables inzp[1]:56 [ font_find::font_size#0 ]
Uplifting [font_find] best 181228 combination zp[1]:56 [ font_find::font_size#0 ] 
Attempting to uplift remaining variables inzp[1]:13 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
Uplifting [font_2x2] best 181228 combination zp[1]:13 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ] 
Attempting to uplift remaining variables inzp[1]:48 [ font_2x2::$10 ]
Uplifting [font_2x2] best 180628 combination reg byte a [ font_2x2::$10 ] 
Attempting to uplift remaining variables inzp[1]:50 [ font_2x2::$12 ]
Uplifting [font_2x2] best 180028 combination reg byte a [ font_2x2::$12 ] 
Attempting to uplift remaining variables inzp[1]:51 [ font_2x2::$13 ]
Uplifting [font_2x2] best 179428 combination reg byte a [ font_2x2::$13 ] 
Attempting to uplift remaining variables inzp[1]:53 [ font_2x2::$15 ]
Uplifting [font_2x2] best 178828 combination reg byte a [ font_2x2::$15 ] 
Attempting to uplift remaining variables inzp[1]:10 [ font_2x2::l#2 font_2x2::l#1 ]
Uplifting [font_2x2] best 178828 combination zp[1]:10 [ font_2x2::l#2 font_2x2::l#1 ] 
Attempting to uplift remaining variables inzp[1]:49 [ font_2x2::$11 ]
Uplifting [font_2x2] best 178228 combination reg byte y [ font_2x2::$11 ] 
Attempting to uplift remaining variables inzp[1]:52 [ font_2x2::$14 ]
Uplifting [font_2x2] best 177628 combination reg byte y [ font_2x2::$14 ] 
Attempting to uplift remaining variables inzp[1]:38 [ show::c#0 ]
Uplifting [show] best 177628 combination zp[1]:38 [ show::c#0 ] 
Attempting to uplift remaining variables inzp[1]:23 [ font_compress::font_size#2 font_compress::font_size#9 ]
Uplifting [font_compress] best 177628 combination zp[1]:23 [ font_compress::font_size#2 font_compress::font_size#9 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::x#2 main::x#1 ]
Uplifting [main] best 177628 combination zp[1]:4 [ main::x#2 main::x#1 ] 
Attempting to uplift remaining variables inzp[1]:57 [ font_find::return#0 ]
Uplifting [font_find] best 177588 combination reg byte a [ font_find::return#0 ] 
Attempting to uplift remaining variables inzp[1]:39 [ show::x#0 ]
Uplifting [show] best 177287 combination reg byte x [ show::x#0 ] 
Attempting to uplift remaining variables inzp[1]:9 [ font_2x2::c#11 font_2x2::c#1 ]
Uplifting [font_2x2] best 177287 combination zp[1]:9 [ font_2x2::c#11 font_2x2::c#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::c#2 main::c#4 main::c#1 ]
Uplifting [main] best 177287 combination zp[1]:3 [ main::c#2 main::c#4 main::c#1 ] 
Attempting to uplift remaining variables inzp[1]:24 [ font_compress::i#4 font_compress::i#1 ]
Uplifting [font_compress] best 177287 combination zp[1]:24 [ font_compress::i#4 font_compress::i#1 ] 
Attempting to uplift remaining variables inzp[1]:40 [ show::y#0 ]
Uplifting [show] best 176984 combination reg byte a [ show::y#0 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::y#4 main::y#1 ]
Uplifting [main] best 176984 combination zp[1]:2 [ main::y#4 main::y#1 ] 
Coalescing zero page register [ zp[1]:3 [ main::c#2 main::c#4 main::c#1 ] ] with [ zp[1]:38 [ show::c#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ] ] with [ zp[2]:42 [ font_2x2::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 font_2x2::$5 ] ] with [ zp[2]:46 [ font_2x2::$7 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ font_compress::next_original#2 font_compress::next_original#1 ] ] with [ zp[2]:54 [ font_find::glyph#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:23 [ font_compress::font_size#2 font_compress::font_size#9 ] ] with [ zp[1]:56 [ font_find::font_size#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:58 [ show::$7 ] ] with [ zp[2]:62 [ show::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ show::$0 ] ] with [ zp[2]:66 [ show::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 font_2x2::$5 font_2x2::$7 ] ] with [ zp[2]:44 [ font_2x2::glyph_bits_2x2#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:58 [ show::$7 show::$9 ] ] with [ zp[2]:64 [ show::$0 show::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:58 [ show::$7 show::$9 show::$0 show::$1 ] ] with [ zp[2]:69 [ show::ptr#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ font_compress::next_original#2 font_compress::next_original#1 font_find::glyph#0 ] ] with [ zp[2]:5 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ] ]
Coalescing zero page register [ zp[1]:23 [ font_compress::font_size#2 font_compress::font_size#9 font_find::font_size#0 ] ] with [ zp[1]:9 [ font_2x2::c#11 font_2x2::c#1 ] ]
Coalescing zero page register [ zp[1]:24 [ font_compress::i#4 font_compress::i#1 ] ] with [ zp[1]:10 [ font_2x2::l#2 font_2x2::l#1 ] ]
Coalescing zero page register [ zp[2]:25 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ] ] with [ zp[2]:7 [ font_2x2::next_original#4 font_2x2::next_original#1 ] ]
Coalescing zero page register [ zp[2]:30 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:11 [ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ] ]
Coalescing zero page register [ zp[2]:32 [ font_find::font#4 font_find::font#1 ] ] with [ zp[2]:14 [ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ] ]
Coalescing zero page register [ zp[2]:58 [ show::$7 show::$9 show::$0 show::$1 show::ptr#0 ] ] with [ zp[2]:17 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 font_2x2::$5 font_2x2::$7 font_2x2::glyph_bits_2x2#1 ] ]
Coalescing zero page register [ zp[2]:60 [ show::$8 ] ] with [ zp[2]:21 [ font_compress::next_original#2 font_compress::next_original#1 font_find::glyph#0 font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ] ]
Allocated (was zp[1]:13) zp[1]:5 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
Allocated (was zp[1]:16) zp[1]:6 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
Allocated (was zp[1]:23) zp[1]:7 [ font_compress::font_size#2 font_compress::font_size#9 font_find::font_size#0 font_2x2::c#11 font_2x2::c#1 ]
Allocated (was zp[1]:24) zp[1]:8 [ font_compress::i#4 font_compress::i#1 font_2x2::l#2 font_2x2::l#1 ]
Allocated (was zp[2]:25) zp[2]:9 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 font_2x2::next_original#4 font_2x2::next_original#1 ]
Allocated (was zp[2]:30) zp[2]:11 [ memset::dst#2 memset::dst#1 font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ]
Allocated (was zp[2]:32) zp[2]:13 [ font_find::font#4 font_find::font#1 font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ]
Allocated (was zp[2]:58) zp[2]:15 [ show::$7 show::$9 show::$0 show::$1 show::ptr#0 font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 font_2x2::$5 font_2x2::$7 font_2x2::glyph_bits_2x2#1 ]
Allocated (was zp[2]:60) zp[2]:17 [ show::$8 font_compress::next_original#2 font_compress::next_original#1 font_find::glyph#0 font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Creates a 2x2 font from the system CHARGEN font and compress it by identifying identical chars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  // BASIC in 0xA000, I/O in 0xD000, KERNEL in 0xE000
  .const PROCPORT_BASIC_KERNEL_IO = 7
  .label D018 = $d018
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SCREEN = $400
  .label FONT_ORIGINAL = $2000
  .label FONT_COMPRESSED = $2800
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>FONT_COMPRESSED)/4&$f
    .label c = 3
    .label x = 4
    .label y = 2
    // asm { sei  }
    // Create 2x2 font from CHARGEN
    sei
    // [1] *PROCPORT = PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [2] call font_2x2 
    // [22] phi from main to font_2x2 [phi:main->font_2x2]
  font_2x2_from_main:
    jsr font_2x2
    jmp __b6
    // main::@6
  __b6:
    // [3] *PROCPORT = PROCPORT_BASIC_KERNEL_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_BASIC_KERNEL_IO
    sta PROCPORT
    // asm { cli  }
    cli
    // [5] call font_compress 
    // [62] phi from main::@6 to font_compress [phi:main::@6->font_compress]
  font_compress_from___b6:
    jsr font_compress
    // [6] phi from main::@6 to main::toD0181 [phi:main::@6->main::toD0181]
  toD0181_from___b6:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b5
    // main::@5
  __b5:
    // [7] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Show compressed font
    lda #toD0181_return
    sta D018
    // [8] memset::c#0 = *(FONT_COMPRESSED_MAP+' ') -- vbuxx=_deref_pbuc1 
    ldx FONT_COMPRESSED_MAP+' '
    // [9] call memset 
  // Clear the screen
    // [85] phi from main::@5 to memset [phi:main::@5->memset]
  memset_from___b5:
    jsr memset
    // [10] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [10] phi main::y#4 = 0 [phi:main::@5->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [10] phi main::c#4 = 0 [phi:main::@5->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
    // [10] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [10] phi main::y#4 = main::y#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [10] phi main::c#4 = main::c#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [11] phi main::x#2 = 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [11] phi main::c#2 = main::c#4 [phi:main::@1->main::@2#1] -- register_copy 
    jmp __b2
    // [11] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  __b2_from___b7:
    // [11] phi main::x#2 = main::x#1 [phi:main::@7->main::@2#0] -- register_copy 
    // [11] phi main::c#2 = main::c#1 [phi:main::@7->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [12] show::c#0 = main::c#2
    // [13] show::x#0 = main::x#2 -- vbuxx=vbuz1 
    ldx.z x
    // [14] show::y#0 = main::y#4 -- vbuaa=vbuz1 
    lda.z y
    // [15] call show 
    jsr show
    jmp __b7
    // main::@7
  __b7:
    // [16] main::c#1 = ++ main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [17] main::x#1 = ++ main::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [18] if(main::x#1!=8) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z x
    bne __b2_from___b7
    jmp __b3
    // main::@3
  __b3:
    // [19] main::y#1 = ++ main::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [20] if(main::y#1!=8) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z y
    bne __b1_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [21] *(SCREEN+$3e7) = ++ *(SCREEN+$3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN+$3e7
    jmp __b4
}
  // font_2x2
// Create a 2x2-font by doubling all pixels of the 64 first chars
font_2x2: {
    .label __5 = $f
    .label __7 = $f
    .label next_2x2_left = $11
    .label next_2x2_right = $d
    .label glyph_bits = 6
    .label glyph_bits_2x2 = $f
    .label l2 = 5
    .label l = 8
    .label next_2x2_left_1 = $b
    .label next_2x2 = $11
    .label next_original = 9
    .label c = 7
    // [23] phi from font_2x2 to font_2x2::@1 [phi:font_2x2->font_2x2::@1]
  __b1_from_font_2x2:
    // [23] phi font_2x2::c#11 = 0 [phi:font_2x2->font_2x2::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [23] phi font_2x2::next_original#4 = CHARGEN [phi:font_2x2->font_2x2::@1#1] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z next_original
    lda #>CHARGEN
    sta.z next_original+1
    // [23] phi font_2x2::next_2x2_left#0 = FONT_ORIGINAL [phi:font_2x2->font_2x2::@1#2] -- pbuz1=pbuc1 
    lda #<FONT_ORIGINAL
    sta.z next_2x2_left
    lda #>FONT_ORIGINAL
    sta.z next_2x2_left+1
    jmp __b1
    // [23] phi from font_2x2::@9 to font_2x2::@1 [phi:font_2x2::@9->font_2x2::@1]
  __b1_from___b9:
    // [23] phi font_2x2::c#11 = font_2x2::c#1 [phi:font_2x2::@9->font_2x2::@1#0] -- register_copy 
    // [23] phi font_2x2::next_original#4 = font_2x2::next_original#1 [phi:font_2x2::@9->font_2x2::@1#1] -- register_copy 
    // [23] phi font_2x2::next_2x2_left#0 = font_2x2::next_2x2#1 [phi:font_2x2::@9->font_2x2::@1#2] -- register_copy 
    jmp __b1
    // font_2x2::@1
  __b1:
    // [24] font_2x2::next_2x2_right#0 = font_2x2::next_2x2_left#0 + (word)$40*8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$40*8
    sta.z next_2x2_right
    lda.z next_2x2_left+1
    adc #>$40*8
    sta.z next_2x2_right+1
    // [25] font_2x2::next_2x2_left#10 = font_2x2::next_2x2_left#0 -- pbuz1=pbuz2 
    lda.z next_2x2_left
    sta.z next_2x2_left_1
    lda.z next_2x2_left+1
    sta.z next_2x2_left_1+1
    // [26] phi from font_2x2::@1 to font_2x2::@2 [phi:font_2x2::@1->font_2x2::@2]
  __b2_from___b1:
    // [26] phi font_2x2::next_2x2_right#7 = font_2x2::next_2x2_right#0 [phi:font_2x2::@1->font_2x2::@2#0] -- register_copy 
    // [26] phi font_2x2::l2#8 = 0 [phi:font_2x2::@1->font_2x2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z l2
    // [26] phi font_2x2::next_2x2_left#7 = font_2x2::next_2x2_left#10 [phi:font_2x2::@1->font_2x2::@2#2] -- register_copy 
    // [26] phi font_2x2::l#2 = 0 [phi:font_2x2::@1->font_2x2::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b2
    // [26] phi from font_2x2::@8 to font_2x2::@2 [phi:font_2x2::@8->font_2x2::@2]
  __b2_from___b8:
    // [26] phi font_2x2::next_2x2_right#7 = font_2x2::next_2x2_right#8 [phi:font_2x2::@8->font_2x2::@2#0] -- register_copy 
    // [26] phi font_2x2::l2#8 = font_2x2::l2#9 [phi:font_2x2::@8->font_2x2::@2#1] -- register_copy 
    // [26] phi font_2x2::next_2x2_left#7 = font_2x2::next_2x2_left#8 [phi:font_2x2::@8->font_2x2::@2#2] -- register_copy 
    // [26] phi font_2x2::l#2 = font_2x2::l#1 [phi:font_2x2::@8->font_2x2::@2#3] -- register_copy 
    jmp __b2
    // font_2x2::@2
  __b2:
    // [27] font_2x2::glyph_bits#0 = font_2x2::next_original#4[font_2x2::l#2] -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy.z l
    lda (next_original),y
    sta.z glyph_bits
    // [28] phi from font_2x2::@2 to font_2x2::@3 [phi:font_2x2::@2->font_2x2::@3]
  __b3_from___b2:
    // [28] phi font_2x2::b#2 = 0 [phi:font_2x2::@2->font_2x2::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // [28] phi font_2x2::glyph_bits_2x2#3 = 0 [phi:font_2x2::@2->font_2x2::@3#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z glyph_bits_2x2
    lda #>0
    sta.z glyph_bits_2x2+1
    // [28] phi font_2x2::glyph_bits#2 = font_2x2::glyph_bits#0 [phi:font_2x2::@2->font_2x2::@3#2] -- register_copy 
    jmp __b3
    // [28] phi from font_2x2::@5 to font_2x2::@3 [phi:font_2x2::@5->font_2x2::@3]
  __b3_from___b5:
    // [28] phi font_2x2::b#2 = font_2x2::b#1 [phi:font_2x2::@5->font_2x2::@3#0] -- register_copy 
    // [28] phi font_2x2::glyph_bits_2x2#3 = font_2x2::glyph_bits_2x2#2 [phi:font_2x2::@5->font_2x2::@3#1] -- register_copy 
    // [28] phi font_2x2::glyph_bits#2 = font_2x2::glyph_bits#1 [phi:font_2x2::@5->font_2x2::@3#2] -- register_copy 
    jmp __b3
    // font_2x2::@3
  __b3:
    // [29] font_2x2::$1 = font_2x2::glyph_bits#2 & $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z glyph_bits
    // [30] if(0!=font_2x2::$1) goto font_2x2::@4 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b4_from___b3
    // [32] phi from font_2x2::@3 to font_2x2::@5 [phi:font_2x2::@3->font_2x2::@5]
  __b5_from___b3:
    // [32] phi font_2x2::glyph_bit#0 = 0 [phi:font_2x2::@3->font_2x2::@5#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b5
    // [31] phi from font_2x2::@3 to font_2x2::@4 [phi:font_2x2::@3->font_2x2::@4]
  __b4_from___b3:
    jmp __b4
    // font_2x2::@4
  __b4:
    // [32] phi from font_2x2::@4 to font_2x2::@5 [phi:font_2x2::@4->font_2x2::@5]
  __b5_from___b4:
    // [32] phi font_2x2::glyph_bit#0 = 1 [phi:font_2x2::@4->font_2x2::@5#0] -- vbuxx=vbuc1 
    ldx #1
    jmp __b5
    // font_2x2::@5
  __b5:
    // [33] font_2x2::$5 = font_2x2::glyph_bits_2x2#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z __5
    rol.z __5+1
    // [34] font_2x2::glyph_bits_2x2#1 = font_2x2::$5 | font_2x2::glyph_bit#0 -- vwuz1=vwuz1_bor_vbuxx 
    txa
    ora.z glyph_bits_2x2
    sta.z glyph_bits_2x2
    // [35] font_2x2::$7 = font_2x2::glyph_bits_2x2#1 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z __7
    rol.z __7+1
    // [36] font_2x2::glyph_bits_2x2#2 = font_2x2::$7 | font_2x2::glyph_bit#0 -- vwuz1=vwuz1_bor_vbuxx 
    txa
    ora.z glyph_bits_2x2
    sta.z glyph_bits_2x2
    // [37] font_2x2::glyph_bits#1 = font_2x2::glyph_bits#2 << 1 -- vbuz1=vbuz1_rol_1 
    // Move to next bit
    asl.z glyph_bits
    // [38] font_2x2::b#1 = ++ font_2x2::b#2 -- vbuyy=_inc_vbuyy 
    iny
    // [39] if(font_2x2::b#1!=8) goto font_2x2::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b3_from___b5
    jmp __b6
    // font_2x2::@6
  __b6:
    // [40] font_2x2::$10 = > font_2x2::glyph_bits_2x2#2 -- vbuaa=_hi_vwuz1 
    lda.z glyph_bits_2x2+1
    // [41] font_2x2::next_2x2_left#7[font_2x2::l2#8] = font_2x2::$10 -- pbuz1_derefidx_vbuz2=vbuaa 
    // Put the generated 2x2-line into the 2x2-font twice
    ldy.z l2
    sta (next_2x2_left_1),y
    // [42] font_2x2::$11 = font_2x2::l2#8 + 1 -- vbuyy=vbuz1_plus_1 
    ldy.z l2
    iny
    // [43] font_2x2::$12 = > font_2x2::glyph_bits_2x2#2 -- vbuaa=_hi_vwuz1 
    lda.z glyph_bits_2x2+1
    // [44] font_2x2::next_2x2_left#7[font_2x2::$11] = font_2x2::$12 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (next_2x2_left_1),y
    // [45] font_2x2::$13 = < font_2x2::glyph_bits_2x2#2 -- vbuaa=_lo_vwuz1 
    lda.z glyph_bits_2x2
    // [46] font_2x2::next_2x2_right#7[font_2x2::l2#8] = font_2x2::$13 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z l2
    sta (next_2x2_right),y
    // [47] font_2x2::$14 = font_2x2::l2#8 + 1 -- vbuyy=vbuz1_plus_1 
    ldy.z l2
    iny
    // [48] font_2x2::$15 = < font_2x2::glyph_bits_2x2#2 -- vbuaa=_lo_vwuz1 
    lda.z glyph_bits_2x2
    // [49] font_2x2::next_2x2_right#7[font_2x2::$14] = font_2x2::$15 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (next_2x2_right),y
    // [50] font_2x2::l2#1 = font_2x2::l2#8 + 2 -- vbuz1=vbuz1_plus_2 
    lda.z l2
    clc
    adc #2
    sta.z l2
    // [51] if(font_2x2::l2#1!=8) goto font_2x2::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l2
    bne __b8_from___b6
    jmp __b7
    // font_2x2::@7
  __b7:
    // [52] font_2x2::next_2x2_left#1 = font_2x2::next_2x2_left#0 + (word)$80*8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$80*8
    sta.z next_2x2_left_1
    lda.z next_2x2_left+1
    adc #>$80*8
    sta.z next_2x2_left_1+1
    // [53] font_2x2::next_2x2_right#1 = font_2x2::next_2x2_left#0 + (word)$c0*8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$c0*8
    sta.z next_2x2_right
    lda.z next_2x2_left+1
    adc #>$c0*8
    sta.z next_2x2_right+1
    // [54] phi from font_2x2::@7 to font_2x2::@8 [phi:font_2x2::@7->font_2x2::@8]
  __b8_from___b7:
    // [54] phi font_2x2::next_2x2_right#8 = font_2x2::next_2x2_right#1 [phi:font_2x2::@7->font_2x2::@8#0] -- register_copy 
    // [54] phi font_2x2::l2#9 = 0 [phi:font_2x2::@7->font_2x2::@8#1] -- vbuz1=vbuc1 
    lda #0
    sta.z l2
    // [54] phi font_2x2::next_2x2_left#8 = font_2x2::next_2x2_left#1 [phi:font_2x2::@7->font_2x2::@8#2] -- register_copy 
    jmp __b8
    // [54] phi from font_2x2::@6 to font_2x2::@8 [phi:font_2x2::@6->font_2x2::@8]
  __b8_from___b6:
    // [54] phi font_2x2::next_2x2_right#8 = font_2x2::next_2x2_right#7 [phi:font_2x2::@6->font_2x2::@8#0] -- register_copy 
    // [54] phi font_2x2::l2#9 = font_2x2::l2#1 [phi:font_2x2::@6->font_2x2::@8#1] -- register_copy 
    // [54] phi font_2x2::next_2x2_left#8 = font_2x2::next_2x2_left#7 [phi:font_2x2::@6->font_2x2::@8#2] -- register_copy 
    jmp __b8
    // font_2x2::@8
  __b8:
    // [55] font_2x2::l#1 = ++ font_2x2::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [56] if(font_2x2::l#1!=8) goto font_2x2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l
    bne __b2_from___b8
    jmp __b9
    // font_2x2::@9
  __b9:
    // [57] font_2x2::next_2x2#1 = font_2x2::next_2x2_left#0 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_2x2
    sta.z next_2x2
    bcc !+
    inc.z next_2x2+1
  !:
    // [58] font_2x2::next_original#1 = font_2x2::next_original#4 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_original
    sta.z next_original
    bcc !+
    inc.z next_original+1
  !:
    // [59] font_2x2::c#1 = ++ font_2x2::c#11 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [60] if(font_2x2::c#1!=$40) goto font_2x2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$40
    cmp.z c
    bne __b1_from___b9
    jmp __breturn
    // font_2x2::@return
  __breturn:
    // [61] return 
    rts
}
  // font_compress
// Compress a font finding identical characters
// The compressed font is put into font_compressed and the compress_mapping is updated
// so that compress_mapping[c] points to the char in font_compressed that is identical to char c in font_original
// Returns the size of the compressed font (in chars)
font_compress: {
    .label next_original = $11
    .label i = 8
    .label next_compressed = 9
    .label font_size = 7
    // [63] phi from font_compress to font_compress::@1 [phi:font_compress->font_compress::@1]
  __b1_from_font_compress:
    // [63] phi font_compress::next_compressed#4 = FONT_COMPRESSED [phi:font_compress->font_compress::@1#0] -- pbuz1=pbuc1 
    lda #<FONT_COMPRESSED
    sta.z next_compressed
    lda #>FONT_COMPRESSED
    sta.z next_compressed+1
    // [63] phi font_compress::i#4 = 0 [phi:font_compress->font_compress::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [63] phi font_compress::font_size#2 = 0 [phi:font_compress->font_compress::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z font_size
    // [63] phi font_compress::next_original#2 = FONT_ORIGINAL [phi:font_compress->font_compress::@1#3] -- pbuz1=pbuc1 
    lda #<FONT_ORIGINAL
    sta.z next_original
    lda #>FONT_ORIGINAL
    sta.z next_original+1
    jmp __b1
    // font_compress::@1
  __b1:
    // [64] font_find::glyph#0 = font_compress::next_original#2
    // [65] font_find::font_size#0 = font_compress::font_size#2
    // [66] call font_find 
    // [106] phi from font_compress::@1 to font_find [phi:font_compress::@1->font_find]
  font_find_from___b1:
    jsr font_find
    // [67] font_find::return#0 = font_find::return#3 -- vbuaa=vbuxx 
    txa
    jmp __b5
    // font_compress::@5
  __b5:
    // [68] font_compress::found#0 = font_find::return#0
    // [69] if(font_compress::found#0!=$ff) goto font_compress::@7 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$ff
    bne __b7
    // [70] phi from font_compress::@5 to font_compress::@3 [phi:font_compress::@5->font_compress::@3]
  __b3_from___b5:
    // [70] phi font_compress::l#2 = 0 [phi:font_compress::@5->font_compress::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
  // Glyph not found - create it
    // [70] phi from font_compress::@3 to font_compress::@3 [phi:font_compress::@3->font_compress::@3]
  __b3_from___b3:
    // [70] phi font_compress::l#2 = font_compress::l#1 [phi:font_compress::@3->font_compress::@3#0] -- register_copy 
    jmp __b3
    // font_compress::@3
  __b3:
    // [71] font_compress::next_compressed#4[font_compress::l#2] = font_compress::next_original#2[font_compress::l#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (next_original),y
    sta (next_compressed),y
    // [72] font_compress::l#1 = ++ font_compress::l#2 -- vbuyy=_inc_vbuyy 
    iny
    // [73] if(font_compress::l#1!=8) goto font_compress::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b3_from___b3
    jmp __b4
    // font_compress::@4
  __b4:
    // [74] font_compress::next_compressed#1 = font_compress::next_compressed#4 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_compressed
    sta.z next_compressed
    bcc !+
    inc.z next_compressed+1
  !:
    // [75] font_compress::font_size#1 = ++ font_compress::font_size#2 -- vbuxx=_inc_vbuz1 
    ldx.z font_size
    inx
    // [76] font_compress::found#3 = font_compress::font_size#2 -- vbuaa=vbuz1 
    lda.z font_size
    // [77] phi from font_compress::@4 font_compress::@7 to font_compress::@2 [phi:font_compress::@4/font_compress::@7->font_compress::@2]
  __b2_from___b4:
  __b2_from___b7:
    // [77] phi font_compress::next_compressed#7 = font_compress::next_compressed#1 [phi:font_compress::@4/font_compress::@7->font_compress::@2#0] -- register_copy 
    // [77] phi font_compress::return#1 = font_compress::font_size#1 [phi:font_compress::@4/font_compress::@7->font_compress::@2#1] -- register_copy 
    // [77] phi font_compress::found#2 = font_compress::found#3 [phi:font_compress::@4/font_compress::@7->font_compress::@2#2] -- register_copy 
    jmp __b2
    // font_compress::@2
  __b2:
    // [78] FONT_COMPRESSED_MAP[font_compress::i#4] = font_compress::found#2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta FONT_COMPRESSED_MAP,y
    // [79] font_compress::next_original#1 = font_compress::next_original#2 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_original
    sta.z next_original
    bcc !+
    inc.z next_original+1
  !:
    // [80] font_compress::i#1 = ++ font_compress::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [81] if(font_compress::i#1!=0) goto font_compress::@6 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne __b6
    jmp __breturn
    // font_compress::@return
  __breturn:
    // [82] return 
    rts
    // font_compress::@6
  __b6:
    // [83] font_compress::font_size#9 = font_compress::return#1 -- vbuz1=vbuxx 
    stx.z font_size
    // [63] phi from font_compress::@6 to font_compress::@1 [phi:font_compress::@6->font_compress::@1]
  __b1_from___b6:
    // [63] phi font_compress::next_compressed#4 = font_compress::next_compressed#7 [phi:font_compress::@6->font_compress::@1#0] -- register_copy 
    // [63] phi font_compress::i#4 = font_compress::i#1 [phi:font_compress::@6->font_compress::@1#1] -- register_copy 
    // [63] phi font_compress::font_size#2 = font_compress::font_size#9 [phi:font_compress::@6->font_compress::@1#2] -- register_copy 
    // [63] phi font_compress::next_original#2 = font_compress::next_original#1 [phi:font_compress::@6->font_compress::@1#3] -- register_copy 
    jmp __b1
    // font_compress::@7
  __b7:
    // [84] font_compress::return#5 = font_compress::font_size#2 -- vbuxx=vbuz1 
    ldx.z font_size
    jmp __b2_from___b7
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(byte register(X) c)
memset: {
    .const num = $400
    .label str = SCREEN
    .label end = str+num
    .label dst = $b
    // [86] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [86] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [87] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [88] return 
    rts
    // memset::@2
  __b2:
    // [89] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [90] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [86] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [86] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // show
// Show a 2x2 char on the screen at 2x2-position (x, y) using a font compress mapping
// show(byte zp(3) c, byte register(X) x, byte register(A) y)
show: {
    .label __0 = $f
    .label __1 = $f
    .label __7 = $f
    .label c = 3
    .label ptr = $f
    .label __8 = $11
    .label __9 = $f
    // [91] show::$7 = (word)show::y#0 -- vwuz1=_word_vbuaa 
    sta.z __7
    lda #0
    sta.z __7+1
    // [92] show::$8 = show::$7 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [93] show::$9 = show::$8 + show::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [94] show::$0 = show::$9 << 4 -- vwuz1=vwuz1_rol_4 
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // [95] show::$1 = SCREEN + show::$0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __1
    adc #<SCREEN
    sta.z __1
    lda.z __1+1
    adc #>SCREEN
    sta.z __1+1
    // [96] show::$2 = show::x#0 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [97] show::ptr#0 = show::$1 + show::$2 -- pbuz1=pbuz1_plus_vbuaa 
    clc
    adc.z ptr
    sta.z ptr
    bcc !+
    inc.z ptr+1
  !:
    // [98] *show::ptr#0 = FONT_COMPRESSED_MAP[show::c#0] -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z c
    lda FONT_COMPRESSED_MAP,y
    ldy #0
    sta (ptr),y
    // [99] show::$4 = show::c#0 -- vbuxx=vbuz1 
    ldx.z c
    // [100] show::ptr#0[1] = (FONT_COMPRESSED_MAP+$40)[show::$4] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda FONT_COMPRESSED_MAP+$40,x
    ldy #1
    sta (ptr),y
    // [101] show::$5 = show::c#0 -- vbuaa=vbuz1 
    lda.z c
    // [102] show::ptr#0[$28] = (FONT_COMPRESSED_MAP+$80)[show::$5] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda FONT_COMPRESSED_MAP+$80,y
    ldy #$28
    sta (ptr),y
    // [103] show::$6 = show::c#0 -- vbuaa=vbuz1 
    lda.z c
    // [104] show::ptr#0[$29] = (FONT_COMPRESSED_MAP+$c0)[show::$6] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda FONT_COMPRESSED_MAP+$c0,y
    ldy #$29
    sta (ptr),y
    jmp __breturn
    // show::@return
  __breturn:
    // [105] return 
    rts
}
  // font_find
// Look for a glyph within a font
// Only looks at the first font_size glyphs
// Returns the index of the glyph within the font. Returns 0xff if the glyph is not found.
// font_find(byte* zp($11) glyph, byte* zp($d) font, byte zp(7) font_size)
font_find: {
    .label glyph = $11
    .label font_size = 7
    .label font = $d
    // [107] phi from font_find to font_find::@1 [phi:font_find->font_find::@1]
  __b1_from_font_find:
    // [107] phi font_find::font#4 = FONT_COMPRESSED [phi:font_find->font_find::@1#0] -- pbuz1=pbuc1 
    lda #<FONT_COMPRESSED
    sta.z font
    lda #>FONT_COMPRESSED
    sta.z font+1
    // [107] phi font_find::i#2 = 0 [phi:font_find->font_find::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // font_find::@1
  __b1:
    // [108] if(font_find::i#2<font_find::font_size#0) goto font_find::@2 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z font_size
    bcc __b2_from___b1
    // [109] phi from font_find::@1 to font_find::@return [phi:font_find::@1->font_find::@return]
  __breturn_from___b1:
    // [109] phi font_find::return#3 = $ff [phi:font_find::@1->font_find::@return#0] -- vbuxx=vbuc1 
    ldx #$ff
    jmp __breturn
    // font_find::@return
  __breturn:
    // [110] return 
    rts
    // [111] phi from font_find::@1 to font_find::@2 [phi:font_find::@1->font_find::@2]
  __b2_from___b1:
    // [111] phi font_find::l#2 = 0 [phi:font_find::@1->font_find::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // [111] phi from font_find::@3 to font_find::@2 [phi:font_find::@3->font_find::@2]
  __b2_from___b3:
    // [111] phi font_find::l#2 = font_find::l#1 [phi:font_find::@3->font_find::@2#0] -- register_copy 
    jmp __b2
    // font_find::@2
  __b2:
    // [112] if(font_find::glyph#0[font_find::l#2]==font_find::font#4[font_find::l#2]) goto font_find::@3 -- pbuz1_derefidx_vbuyy_eq_pbuz2_derefidx_vbuyy_then_la1 
    lda (glyph),y
    cmp (font),y
    beq __b3
    // [115] phi from font_find::@2 to font_find::@4 [phi:font_find::@2->font_find::@4]
  __b4_from___b2:
    // [115] phi font_find::found#2 = 0 [phi:font_find::@2->font_find::@4#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b4
    // font_find::@3
  __b3:
    // [113] font_find::l#1 = ++ font_find::l#2 -- vbuyy=_inc_vbuyy 
    iny
    // [114] if(font_find::l#1!=8) goto font_find::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b2_from___b3
    // [115] phi from font_find::@3 to font_find::@4 [phi:font_find::@3->font_find::@4]
  __b4_from___b3:
    // [115] phi font_find::found#2 = 1 [phi:font_find::@3->font_find::@4#0] -- vbuaa=vbuc1 
    lda #1
    jmp __b4
    // font_find::@4
  __b4:
    // [116] if(0==font_find::found#2) goto font_find::@5 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b5
    // [109] phi from font_find::@4 to font_find::@return [phi:font_find::@4->font_find::@return]
  __breturn_from___b4:
    // [109] phi font_find::return#3 = font_find::i#2 [phi:font_find::@4->font_find::@return#0] -- register_copy 
    jmp __breturn
    // font_find::@5
  __b5:
    // [117] font_find::font#1 = font_find::font#4 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z font
    sta.z font
    bcc !+
    inc.z font+1
  !:
    // [118] font_find::i#1 = ++ font_find::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [107] phi from font_find::@5 to font_find::@1 [phi:font_find::@5->font_find::@1]
  __b1_from___b5:
    // [107] phi font_find::font#4 = font_find::font#1 [phi:font_find::@5->font_find::@1#0] -- register_copy 
    // [107] phi font_find::i#2 = font_find::i#1 [phi:font_find::@5->font_find::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  .align $100
  FONT_COMPRESSED_MAP: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b6
Removing instruction jmp toD0181
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction lda #<0 with TYA
Removing instruction lda #>0
Removing instruction ldy.z l2
Removing instruction lda.z glyph_bits_2x2+1
Removing instruction ldy.z l2
Removing instruction lda.z glyph_bits_2x2
Removing instruction lda #0
Replacing instruction lda.z c with TXA
Replacing instruction lda.z c with TXA
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b7 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b8_from___b6 with __b8
Replacing label __b2_from___b8 with __b2
Replacing label __b1_from___b9 with __b1
Replacing label __b3_from___b3 with __b3
Replacing label __b2_from___b7 with __b2
Replacing label __b2_from___b3 with __b2
Removing instruction toD0181_from___b6:
Removing instruction toD0181:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b7:
Removing instruction __b1_from___b9:
Removing instruction __b2_from___b8:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b4:
Removing instruction __b8_from___b6:
Removing instruction font_find_from___b1:
Removing instruction __b3_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b2_from___b7:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction font_2x2_from_main:
Removing instruction __b6:
Removing instruction font_compress_from___b6:
Removing instruction __b5:
Removing instruction memset_from___b5:
Removing instruction __b1_from___b5:
Removing instruction __b7:
Removing instruction __b3:
Removing instruction __b1_from_font_2x2:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5_from___b3:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8_from___b7:
Removing instruction __b9:
Removing instruction __breturn:
Removing instruction __b1_from_font_compress:
Removing instruction __b5:
Removing instruction __b3_from___b5:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1_from___b6:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_font_find:
Removing instruction __breturn_from___b1:
Removing instruction __b4_from___b2:
Removing instruction __b4_from___b3:
Removing instruction __breturn_from___b4:
Removing instruction __b1_from___b5:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b2_from___b1 to __b6
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b3
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #8
Removing instruction lda #8
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [185] bne __b1 to beq

FINAL SYMBOL TABLE
const nomodify byte* CHARGEN = (byte*) 53248
const nomodify byte* D018 = (byte*) 53272
const nomodify byte* FONT_COMPRESSED = (byte*) 10240
const byte* FONT_COMPRESSED_MAP[$100]  = { fill( $100, 0) }
const nomodify byte* FONT_ORIGINAL = (byte*) 8192
byte MOS6526_CIA::INTERRUPT
byte MOS6526_CIA::PORT_A
byte MOS6526_CIA::PORT_A_DDR
byte MOS6526_CIA::PORT_B
byte MOS6526_CIA::PORT_B_DDR
byte MOS6526_CIA::SERIAL_DATA
word MOS6526_CIA::TIMER_A
byte MOS6526_CIA::TIMER_A_CONTROL
word MOS6526_CIA::TIMER_B
byte MOS6526_CIA::TIMER_B_CONTROL
byte MOS6526_CIA::TOD_10THS
byte MOS6526_CIA::TOD_HOURS
byte MOS6526_CIA::TOD_MIN
byte MOS6526_CIA::TOD_SEC
byte MOS6569_VICII::BG_COLOR
byte MOS6569_VICII::BG_COLOR1
byte MOS6569_VICII::BG_COLOR2
byte MOS6569_VICII::BG_COLOR3
byte MOS6569_VICII::BORDER_COLOR
byte MOS6569_VICII::CONTROL1
byte MOS6569_VICII::CONTROL2
byte MOS6569_VICII::IRQ_ENABLE
byte MOS6569_VICII::IRQ_STATUS
byte MOS6569_VICII::LIGHTPEN_X
byte MOS6569_VICII::LIGHTPEN_Y
byte MOS6569_VICII::MEMORY
byte MOS6569_VICII::RASTER
byte MOS6569_VICII::SPRITE0_COLOR
byte MOS6569_VICII::SPRITE0_X
byte MOS6569_VICII::SPRITE0_Y
byte MOS6569_VICII::SPRITE1_COLOR
byte MOS6569_VICII::SPRITE1_X
byte MOS6569_VICII::SPRITE1_Y
byte MOS6569_VICII::SPRITE2_COLOR
byte MOS6569_VICII::SPRITE2_X
byte MOS6569_VICII::SPRITE2_Y
byte MOS6569_VICII::SPRITE3_COLOR
byte MOS6569_VICII::SPRITE3_X
byte MOS6569_VICII::SPRITE3_Y
byte MOS6569_VICII::SPRITE4_COLOR
byte MOS6569_VICII::SPRITE4_X
byte MOS6569_VICII::SPRITE4_Y
byte MOS6569_VICII::SPRITE5_COLOR
byte MOS6569_VICII::SPRITE5_X
byte MOS6569_VICII::SPRITE5_Y
byte MOS6569_VICII::SPRITE6_COLOR
byte MOS6569_VICII::SPRITE6_X
byte MOS6569_VICII::SPRITE6_Y
byte MOS6569_VICII::SPRITE7_COLOR
byte MOS6569_VICII::SPRITE7_X
byte MOS6569_VICII::SPRITE7_Y
byte MOS6569_VICII::SPRITES_BG_COLLISION
byte MOS6569_VICII::SPRITES_COLLISION
byte MOS6569_VICII::SPRITES_ENABLE
byte MOS6569_VICII::SPRITES_EXPAND_X
byte MOS6569_VICII::SPRITES_EXPAND_Y
byte MOS6569_VICII::SPRITES_MC
byte MOS6569_VICII::SPRITES_MCOLOR1
byte MOS6569_VICII::SPRITES_MCOLOR2
byte MOS6569_VICII::SPRITES_PRIORITY
byte MOS6569_VICII::SPRITES_XMSB
byte MOS6581_SID::CH1_ATTACK_DECAY
byte MOS6581_SID::CH1_CONTROL
word MOS6581_SID::CH1_FREQ
word MOS6581_SID::CH1_PULSE_WIDTH
byte MOS6581_SID::CH1_SUSTAIN_RELEASE
byte MOS6581_SID::CH2_ATTACK_DECAY
byte MOS6581_SID::CH2_CONTROL
word MOS6581_SID::CH2_FREQ
word MOS6581_SID::CH2_PULSE_WIDTH
byte MOS6581_SID::CH2_SUSTAIN_RELEASE
byte MOS6581_SID::CH3_ATTACK_DECAY
byte MOS6581_SID::CH3_CONTROL
byte MOS6581_SID::CH3_ENV
word MOS6581_SID::CH3_FREQ
byte MOS6581_SID::CH3_OSC
word MOS6581_SID::CH3_PULSE_WIDTH
byte MOS6581_SID::CH3_SUSTAIN_RELEASE
byte MOS6581_SID::FILTER_CUTOFF_HIGH
byte MOS6581_SID::FILTER_CUTOFF_LOW
byte MOS6581_SID::FILTER_SETUP
byte MOS6581_SID::POT_X
byte MOS6581_SID::POT_Y
byte MOS6581_SID::VOLUME_FILTER_MODE
const nomodify byte* PROCPORT = (byte*) 1
const nomodify byte PROCPORT_BASIC_KERNEL_IO = 7
const nomodify byte PROCPORT_RAM_CHARROM = 1
const nomodify byte* SCREEN = (byte*) 1024
void font_2x2(byte* font_2x2::font_original , byte* font_2x2::font_2x2)
byte~ font_2x2::$1 reg byte a 20002.0
byte~ font_2x2::$10 reg byte a 2002.0
byte~ font_2x2::$11 reg byte y 1001.0
byte~ font_2x2::$12 reg byte a 2002.0
byte~ font_2x2::$13 reg byte a 2002.0
byte~ font_2x2::$14 reg byte y 1001.0
byte~ font_2x2::$15 reg byte a 2002.0
word~ font_2x2::$5 zp[2]:15 20002.0
word~ font_2x2::$7 zp[2]:15 20002.0
label font_2x2::@1
label font_2x2::@2
label font_2x2::@3
label font_2x2::@4
label font_2x2::@5
label font_2x2::@6
label font_2x2::@7
label font_2x2::@8
label font_2x2::@9
label font_2x2::@return
byte font_2x2::b
byte font_2x2::b#1 reg byte y 15001.5
byte font_2x2::b#2 reg byte y 2000.2
byte font_2x2::c
byte font_2x2::c#1 c zp[1]:7 151.5
byte font_2x2::c#11 c zp[1]:7 5.611111111111111
byte* font_2x2::font_2x2
byte* font_2x2::font_original
byte font_2x2::glyph_bit
byte font_2x2::glyph_bit#0 reg byte x 5000.5
byte font_2x2::glyph_bits
byte font_2x2::glyph_bits#0 glyph_bits zp[1]:6 2002.0
byte font_2x2::glyph_bits#1 glyph_bits zp[1]:6 6667.333333333333
byte font_2x2::glyph_bits#2 glyph_bits zp[1]:6 3444.8888888888887
word font_2x2::glyph_bits_2x2
word font_2x2::glyph_bits_2x2#1 glyph_bits_2x2 zp[2]:15 20002.0
word font_2x2::glyph_bits_2x2#2 glyph_bits_2x2 zp[2]:15 2000.5000000000002
word font_2x2::glyph_bits_2x2#3 glyph_bits_2x2 zp[2]:15 4000.4
byte font_2x2::l
byte font_2x2::l#1 l zp[1]:8 1501.5
byte font_2x2::l#2 l zp[1]:8 103.55172413793102
byte font_2x2::l2
byte font_2x2::l2#1 l2 zp[1]:5 1501.5
byte font_2x2::l2#8 l2 zp[1]:5 250.25000000000003
byte font_2x2::l2#9 l2 zp[1]:5 667.3333333333334
byte* font_2x2::next_2x2
byte* font_2x2::next_2x2#1 next_2x2 zp[2]:17 50.5
byte* font_2x2::next_2x2_left
byte* font_2x2::next_2x2_left#0 next_2x2_left zp[2]:17 70.76470588235294
byte* font_2x2::next_2x2_left#1 next_2x2_left_1 zp[2]:11 1001.0
byte* font_2x2::next_2x2_left#10 next_2x2_left_1 zp[2]:11 202.0
byte* font_2x2::next_2x2_left#7 next_2x2_left_1 zp[2]:11 157.8846153846154
byte* font_2x2::next_2x2_left#8 next_2x2_left_1 zp[2]:11 1001.0
byte* font_2x2::next_2x2_right
byte* font_2x2::next_2x2_right#0 next_2x2_right zp[2]:13 101.0
byte* font_2x2::next_2x2_right#1 next_2x2_right zp[2]:13 2002.0
byte* font_2x2::next_2x2_right#7 next_2x2_right zp[2]:13 157.8846153846154
byte* font_2x2::next_2x2_right#8 next_2x2_right zp[2]:13 1001.0
byte* font_2x2::next_original
byte* font_2x2::next_original#1 next_original zp[2]:9 67.33333333333333
byte* font_2x2::next_original#4 next_original zp[2]:9 34.371428571428574
byte font_compress(byte* font_compress::font_original , byte* font_compress::font_compressed , byte* font_compress::compress_mapping)
label font_compress::@1
label font_compress::@2
label font_compress::@3
label font_compress::@4
label font_compress::@5
label font_compress::@6
label font_compress::@7
label font_compress::@return
byte* font_compress::compress_mapping
byte* font_compress::font_compressed
byte* font_compress::font_original
byte font_compress::font_size
byte font_compress::font_size#1 reg byte x 101.0
byte font_compress::font_size#2 font_size zp[1]:7 38.84615384615385
byte font_compress::font_size#9 font_size zp[1]:7 202.0
byte font_compress::found
byte font_compress::found#0 reg byte a 101.0
byte font_compress::found#2 reg byte a 303.0
byte font_compress::found#3 reg byte a 202.0
byte font_compress::i
byte font_compress::i#1 i zp[1]:8 101.0
byte font_compress::i#4 i zp[1]:8 16.833333333333332
byte font_compress::l
byte font_compress::l#1 reg byte y 1501.5
byte font_compress::l#2 reg byte y 2002.0
byte* font_compress::next_compressed
byte* font_compress::next_compressed#1 next_compressed zp[2]:9 67.33333333333333
byte* font_compress::next_compressed#4 next_compressed zp[2]:9 108.66666666666669
byte* font_compress::next_compressed#7 next_compressed zp[2]:9 50.5
byte* font_compress::next_original
byte* font_compress::next_original#1 next_original zp[2]:17 50.5
byte* font_compress::next_original#2 next_original zp[2]:17 76.70588235294117
byte font_compress::return
byte font_compress::return#1 reg byte x 60.599999999999994
byte font_compress::return#5 reg byte x 202.0
byte font_find(byte* font_find::glyph , byte* font_find::font , byte font_find::font_size)
label font_find::@1
label font_find::@2
label font_find::@3
label font_find::@4
label font_find::@5
label font_find::@return
byte* font_find::font
byte* font_find::font#1 font zp[2]:13 100001.0
byte* font_find::font#4 font zp[2]:13 150000.375
byte font_find::font_size
byte font_find::font_size#0 font_size zp[1]:7 8341.833333333332
byte font_find::found
byte font_find::found#2 reg byte a 100001.0
byte* font_find::glyph
byte* font_find::glyph#0 glyph zp[2]:17 76930.92307692308
byte font_find::i
byte font_find::i#1 reg byte x 200002.0
byte font_find::i#2 reg byte x 44444.88888888889
byte font_find::l
byte font_find::l#1 reg byte y 1500001.5
byte font_find::l#2 reg byte y 2000002.0
byte font_find::return
byte font_find::return#0 reg byte a 202.0
byte font_find::return#3 reg byte x 33367.33333333333
void main()
label main::@1
label main::@2
label main::@3
label main::@4
label main::@5
label main::@6
label main::@7
byte main::c
byte main::c#1 c zp[1]:3 42.599999999999994
byte main::c#2 c zp[1]:3 62.8
byte main::c#4 c zp[1]:3 22.0
label main::toD0181
byte* main::toD0181_gfx
byte main::toD0181_return
const byte main::toD0181_return#0 toD0181_return = >(word)SCREEN&$3fff*4|>(word)FONT_COMPRESSED/4&$f
byte* main::toD0181_screen
byte main::x
byte main::x#1 x zp[1]:4 151.5
byte main::x#2 x zp[1]:4 50.5
byte main::y
byte main::y#1 y zp[1]:2 16.5
byte main::y#4 y zp[1]:2 13.666666666666664
void* memset(void* memset::str , byte memset::c , word memset::num)
label memset::@1
label memset::@2
label memset::@return
byte memset::c
byte memset::c#0 reg byte x 17.166666666666664
byte* memset::dst
byte* memset::dst#1 dst zp[2]:11 202.0
byte* memset::dst#2 dst zp[2]:11 134.66666666666666
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $400
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)SCREEN
void show(byte show::c , byte show::x , byte show::y , byte* show::font_mapping)
word~ show::$0 zp[2]:15 2002.0
byte*~ show::$1 zp[2]:15 1001.0
byte~ show::$2 reg byte a 2002.0
byte~ show::$4 reg byte x 2002.0
byte~ show::$5 reg byte a 2002.0
byte~ show::$6 reg byte a 2002.0
word~ show::$7 zp[2]:15 1501.5
word~ show::$8 zp[2]:17 2002.0
word~ show::$9 zp[2]:15 2002.0
label show::@return
byte show::c
byte show::c#0 c zp[1]:3 273.6666666666667
byte* show::font_mapping
byte* show::ptr
byte* show::ptr#0 ptr zp[2]:15 715.0
byte show::x
byte show::x#0 reg byte x 157.42857142857142
byte show::y
byte show::y#0 reg byte a 101.0

zp[1]:2 [ main::y#4 main::y#1 ]
zp[1]:3 [ main::c#2 main::c#4 main::c#1 show::c#0 ]
zp[1]:4 [ main::x#2 main::x#1 ]
zp[1]:5 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
zp[1]:6 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
reg byte y [ font_2x2::b#2 font_2x2::b#1 ]
reg byte x [ font_2x2::glyph_bit#0 ]
zp[1]:7 [ font_compress::font_size#2 font_compress::font_size#9 font_find::font_size#0 font_2x2::c#11 font_2x2::c#1 ]
zp[1]:8 [ font_compress::i#4 font_compress::i#1 font_2x2::l#2 font_2x2::l#1 ]
zp[2]:9 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 font_2x2::next_original#4 font_2x2::next_original#1 ]
reg byte y [ font_compress::l#2 font_compress::l#1 ]
reg byte a [ font_compress::found#2 font_compress::found#3 font_compress::found#0 ]
reg byte x [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ]
zp[2]:11 [ memset::dst#2 memset::dst#1 font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ]
zp[2]:13 [ font_find::font#4 font_find::font#1 font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ]
reg byte x [ font_find::return#3 font_find::i#2 font_find::i#1 ]
reg byte y [ font_find::l#2 font_find::l#1 ]
reg byte a [ font_find::found#2 ]
reg byte x [ memset::c#0 ]
reg byte x [ show::x#0 ]
reg byte a [ show::y#0 ]
reg byte a [ font_2x2::$1 ]
reg byte a [ font_2x2::$10 ]
reg byte y [ font_2x2::$11 ]
reg byte a [ font_2x2::$12 ]
reg byte a [ font_2x2::$13 ]
reg byte y [ font_2x2::$14 ]
reg byte a [ font_2x2::$15 ]
reg byte a [ font_find::return#0 ]
zp[2]:15 [ show::$7 show::$9 show::$0 show::$1 show::ptr#0 font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 font_2x2::$5 font_2x2::$7 font_2x2::glyph_bits_2x2#1 ]
zp[2]:17 [ show::$8 font_compress::next_original#2 font_compress::next_original#1 font_find::glyph#0 font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ]
reg byte a [ show::$2 ]
reg byte x [ show::$4 ]
reg byte a [ show::$5 ]
reg byte a [ show::$6 ]


FINAL ASSEMBLER
Score: 122846

  // File Comments
// Creates a 2x2 font from the system CHARGEN font and compress it by identifying identical chars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  // BASIC in 0xA000, I/O in 0xD000, KERNEL in 0xE000
  .const PROCPORT_BASIC_KERNEL_IO = 7
  .label D018 = $d018
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SCREEN = $400
  .label FONT_ORIGINAL = $2000
  .label FONT_COMPRESSED = $2800
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>FONT_COMPRESSED)/4&$f
    .label c = 3
    .label x = 4
    .label y = 2
    // asm
    // asm { sei  }
    // Create 2x2 font from CHARGEN
    sei
    // *PROCPORT = PROCPORT_RAM_CHARROM
    // [1] *PROCPORT = PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // font_2x2(CHARGEN, FONT_ORIGINAL)
    // [2] call font_2x2 
    // [22] phi from main to font_2x2 [phi:main->font_2x2]
    jsr font_2x2
    // main::@6
    // *PROCPORT = PROCPORT_BASIC_KERNEL_IO
    // [3] *PROCPORT = PROCPORT_BASIC_KERNEL_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_BASIC_KERNEL_IO
    sta PROCPORT
    // asm
    // asm { cli  }
    cli
    // font_compress(FONT_ORIGINAL, FONT_COMPRESSED, FONT_COMPRESSED_MAP)
    // [5] call font_compress 
    // [62] phi from main::@6 to font_compress [phi:main::@6->font_compress]
    jsr font_compress
    // [6] phi from main::@6 to main::toD0181 [phi:main::@6->main::toD0181]
    // main::toD0181
    // main::@5
    // *D018 = toD018(SCREEN, FONT_COMPRESSED)
    // [7] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Show compressed font
    lda #toD0181_return
    sta D018
    // memset(SCREEN, FONT_COMPRESSED_MAP[' '], 0x0400)
    // [8] memset::c#0 = *(FONT_COMPRESSED_MAP+' ') -- vbuxx=_deref_pbuc1 
    ldx FONT_COMPRESSED_MAP+' '
    // [9] call memset 
  // Clear the screen
    // [85] phi from main::@5 to memset [phi:main::@5->memset]
    jsr memset
    // [10] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [10] phi main::y#4 = 0 [phi:main::@5->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [10] phi main::c#4 = 0 [phi:main::@5->main::@1#1] -- vbuz1=vbuc1 
    sta.z c
    // [10] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [10] phi main::y#4 = main::y#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [10] phi main::c#4 = main::c#1 [phi:main::@3->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [11] phi main::x#2 = 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [11] phi main::c#2 = main::c#4 [phi:main::@1->main::@2#1] -- register_copy 
    // [11] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
    // [11] phi main::x#2 = main::x#1 [phi:main::@7->main::@2#0] -- register_copy 
    // [11] phi main::c#2 = main::c#1 [phi:main::@7->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // show(c++, x, y, FONT_COMPRESSED_MAP)
    // [12] show::c#0 = main::c#2
    // [13] show::x#0 = main::x#2 -- vbuxx=vbuz1 
    ldx.z x
    // [14] show::y#0 = main::y#4 -- vbuaa=vbuz1 
    lda.z y
    // [15] call show 
    jsr show
    // main::@7
    // show(c++, x, y, FONT_COMPRESSED_MAP);
    // [16] main::c#1 = ++ main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // for(char x:0..7)
    // [17] main::x#1 = ++ main::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [18] if(main::x#1!=8) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z x
    bne __b2
    // main::@3
    // for(char y:0..7)
    // [19] main::y#1 = ++ main::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [20] if(main::y#1!=8) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    cmp.z y
    bne __b1
    // main::@4
  __b4:
    // (*(SCREEN+999))++;
    // [21] *(SCREEN+$3e7) = ++ *(SCREEN+$3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN+$3e7
    jmp __b4
}
  // font_2x2
// Create a 2x2-font by doubling all pixels of the 64 first chars
font_2x2: {
    .label __5 = $f
    .label __7 = $f
    .label next_2x2_left = $11
    .label next_2x2_right = $d
    .label glyph_bits = 6
    .label glyph_bits_2x2 = $f
    .label l2 = 5
    .label l = 8
    .label next_2x2_left_1 = $b
    .label next_2x2 = $11
    .label next_original = 9
    .label c = 7
    // [23] phi from font_2x2 to font_2x2::@1 [phi:font_2x2->font_2x2::@1]
    // [23] phi font_2x2::c#11 = 0 [phi:font_2x2->font_2x2::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [23] phi font_2x2::next_original#4 = CHARGEN [phi:font_2x2->font_2x2::@1#1] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z next_original
    lda #>CHARGEN
    sta.z next_original+1
    // [23] phi font_2x2::next_2x2_left#0 = FONT_ORIGINAL [phi:font_2x2->font_2x2::@1#2] -- pbuz1=pbuc1 
    lda #<FONT_ORIGINAL
    sta.z next_2x2_left
    lda #>FONT_ORIGINAL
    sta.z next_2x2_left+1
    // [23] phi from font_2x2::@9 to font_2x2::@1 [phi:font_2x2::@9->font_2x2::@1]
    // [23] phi font_2x2::c#11 = font_2x2::c#1 [phi:font_2x2::@9->font_2x2::@1#0] -- register_copy 
    // [23] phi font_2x2::next_original#4 = font_2x2::next_original#1 [phi:font_2x2::@9->font_2x2::@1#1] -- register_copy 
    // [23] phi font_2x2::next_2x2_left#0 = font_2x2::next_2x2#1 [phi:font_2x2::@9->font_2x2::@1#2] -- register_copy 
    // font_2x2::@1
  __b1:
    // next_2x2_right = next_2x2 + 0x40*8
    // [24] font_2x2::next_2x2_right#0 = font_2x2::next_2x2_left#0 + (word)$40*8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$40*8
    sta.z next_2x2_right
    lda.z next_2x2_left+1
    adc #>$40*8
    sta.z next_2x2_right+1
    // [25] font_2x2::next_2x2_left#10 = font_2x2::next_2x2_left#0 -- pbuz1=pbuz2 
    lda.z next_2x2_left
    sta.z next_2x2_left_1
    lda.z next_2x2_left+1
    sta.z next_2x2_left_1+1
    // [26] phi from font_2x2::@1 to font_2x2::@2 [phi:font_2x2::@1->font_2x2::@2]
    // [26] phi font_2x2::next_2x2_right#7 = font_2x2::next_2x2_right#0 [phi:font_2x2::@1->font_2x2::@2#0] -- register_copy 
    // [26] phi font_2x2::l2#8 = 0 [phi:font_2x2::@1->font_2x2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z l2
    // [26] phi font_2x2::next_2x2_left#7 = font_2x2::next_2x2_left#10 [phi:font_2x2::@1->font_2x2::@2#2] -- register_copy 
    // [26] phi font_2x2::l#2 = 0 [phi:font_2x2::@1->font_2x2::@2#3] -- vbuz1=vbuc1 
    sta.z l
    // [26] phi from font_2x2::@8 to font_2x2::@2 [phi:font_2x2::@8->font_2x2::@2]
    // [26] phi font_2x2::next_2x2_right#7 = font_2x2::next_2x2_right#8 [phi:font_2x2::@8->font_2x2::@2#0] -- register_copy 
    // [26] phi font_2x2::l2#8 = font_2x2::l2#9 [phi:font_2x2::@8->font_2x2::@2#1] -- register_copy 
    // [26] phi font_2x2::next_2x2_left#7 = font_2x2::next_2x2_left#8 [phi:font_2x2::@8->font_2x2::@2#2] -- register_copy 
    // [26] phi font_2x2::l#2 = font_2x2::l#1 [phi:font_2x2::@8->font_2x2::@2#3] -- register_copy 
    // font_2x2::@2
  __b2:
    // glyph_bits = next_original[l]
    // [27] font_2x2::glyph_bits#0 = font_2x2::next_original#4[font_2x2::l#2] -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy.z l
    lda (next_original),y
    sta.z glyph_bits
    // [28] phi from font_2x2::@2 to font_2x2::@3 [phi:font_2x2::@2->font_2x2::@3]
    // [28] phi font_2x2::b#2 = 0 [phi:font_2x2::@2->font_2x2::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // [28] phi font_2x2::glyph_bits_2x2#3 = 0 [phi:font_2x2::@2->font_2x2::@3#1] -- vwuz1=vwuc1 
    tya
    sta.z glyph_bits_2x2
    sta.z glyph_bits_2x2+1
    // [28] phi font_2x2::glyph_bits#2 = font_2x2::glyph_bits#0 [phi:font_2x2::@2->font_2x2::@3#2] -- register_copy 
    // [28] phi from font_2x2::@5 to font_2x2::@3 [phi:font_2x2::@5->font_2x2::@3]
    // [28] phi font_2x2::b#2 = font_2x2::b#1 [phi:font_2x2::@5->font_2x2::@3#0] -- register_copy 
    // [28] phi font_2x2::glyph_bits_2x2#3 = font_2x2::glyph_bits_2x2#2 [phi:font_2x2::@5->font_2x2::@3#1] -- register_copy 
    // [28] phi font_2x2::glyph_bits#2 = font_2x2::glyph_bits#1 [phi:font_2x2::@5->font_2x2::@3#2] -- register_copy 
    // font_2x2::@3
  __b3:
    // glyph_bits&0x80
    // [29] font_2x2::$1 = font_2x2::glyph_bits#2 & $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z glyph_bits
    // (glyph_bits&0x80)?1uc:0uc
    // [30] if(0!=font_2x2::$1) goto font_2x2::@4 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b4
    // [32] phi from font_2x2::@3 to font_2x2::@5 [phi:font_2x2::@3->font_2x2::@5]
    // [32] phi font_2x2::glyph_bit#0 = 0 [phi:font_2x2::@3->font_2x2::@5#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b5
    // [31] phi from font_2x2::@3 to font_2x2::@4 [phi:font_2x2::@3->font_2x2::@4]
    // font_2x2::@4
  __b4:
    // (glyph_bits&0x80)?1uc:0uc
    // [32] phi from font_2x2::@4 to font_2x2::@5 [phi:font_2x2::@4->font_2x2::@5]
    // [32] phi font_2x2::glyph_bit#0 = 1 [phi:font_2x2::@4->font_2x2::@5#0] -- vbuxx=vbuc1 
    ldx #1
    // font_2x2::@5
  __b5:
    // glyph_bits_2x2<<1
    // [33] font_2x2::$5 = font_2x2::glyph_bits_2x2#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z __5
    rol.z __5+1
    // glyph_bits_2x2 = glyph_bits_2x2<<1|glyph_bit
    // [34] font_2x2::glyph_bits_2x2#1 = font_2x2::$5 | font_2x2::glyph_bit#0 -- vwuz1=vwuz1_bor_vbuxx 
    txa
    ora.z glyph_bits_2x2
    sta.z glyph_bits_2x2
    // glyph_bits_2x2<<1
    // [35] font_2x2::$7 = font_2x2::glyph_bits_2x2#1 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z __7
    rol.z __7+1
    // glyph_bits_2x2 = glyph_bits_2x2<<1|glyph_bit
    // [36] font_2x2::glyph_bits_2x2#2 = font_2x2::$7 | font_2x2::glyph_bit#0 -- vwuz1=vwuz1_bor_vbuxx 
    txa
    ora.z glyph_bits_2x2
    sta.z glyph_bits_2x2
    // glyph_bits <<= 1
    // [37] font_2x2::glyph_bits#1 = font_2x2::glyph_bits#2 << 1 -- vbuz1=vbuz1_rol_1 
    // Move to next bit
    asl.z glyph_bits
    // for(char b: 0..7)
    // [38] font_2x2::b#1 = ++ font_2x2::b#2 -- vbuyy=_inc_vbuyy 
    iny
    // [39] if(font_2x2::b#1!=8) goto font_2x2::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b3
    // font_2x2::@6
    // >glyph_bits_2x2
    // [40] font_2x2::$10 = > font_2x2::glyph_bits_2x2#2 -- vbuaa=_hi_vwuz1 
    lda.z glyph_bits_2x2+1
    // next_2x2_left[l2] = >glyph_bits_2x2
    // [41] font_2x2::next_2x2_left#7[font_2x2::l2#8] = font_2x2::$10 -- pbuz1_derefidx_vbuz2=vbuaa 
    // Put the generated 2x2-line into the 2x2-font twice
    ldy.z l2
    sta (next_2x2_left_1),y
    // l2+1
    // [42] font_2x2::$11 = font_2x2::l2#8 + 1 -- vbuyy=vbuz1_plus_1 
    iny
    // >glyph_bits_2x2
    // [43] font_2x2::$12 = > font_2x2::glyph_bits_2x2#2 -- vbuaa=_hi_vwuz1 
    // next_2x2_left[l2+1] = >glyph_bits_2x2
    // [44] font_2x2::next_2x2_left#7[font_2x2::$11] = font_2x2::$12 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (next_2x2_left_1),y
    // <glyph_bits_2x2
    // [45] font_2x2::$13 = < font_2x2::glyph_bits_2x2#2 -- vbuaa=_lo_vwuz1 
    lda.z glyph_bits_2x2
    // next_2x2_right[l2] = <glyph_bits_2x2
    // [46] font_2x2::next_2x2_right#7[font_2x2::l2#8] = font_2x2::$13 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z l2
    sta (next_2x2_right),y
    // l2+1
    // [47] font_2x2::$14 = font_2x2::l2#8 + 1 -- vbuyy=vbuz1_plus_1 
    iny
    // <glyph_bits_2x2
    // [48] font_2x2::$15 = < font_2x2::glyph_bits_2x2#2 -- vbuaa=_lo_vwuz1 
    // next_2x2_right[l2+1] = <glyph_bits_2x2
    // [49] font_2x2::next_2x2_right#7[font_2x2::$14] = font_2x2::$15 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (next_2x2_right),y
    // l2 += 2
    // [50] font_2x2::l2#1 = font_2x2::l2#8 + 2 -- vbuz1=vbuz1_plus_2 
    lda.z l2
    clc
    adc #2
    sta.z l2
    // if(l2==8)
    // [51] if(font_2x2::l2#1!=8) goto font_2x2::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l2
    bne __b8
    // font_2x2::@7
    // next_2x2_left = next_2x2 + 0x80*8
    // [52] font_2x2::next_2x2_left#1 = font_2x2::next_2x2_left#0 + (word)$80*8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$80*8
    sta.z next_2x2_left_1
    lda.z next_2x2_left+1
    adc #>$80*8
    sta.z next_2x2_left_1+1
    // next_2x2_right = next_2x2 + 0xc0*8
    // [53] font_2x2::next_2x2_right#1 = font_2x2::next_2x2_left#0 + (word)$c0*8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$c0*8
    sta.z next_2x2_right
    lda.z next_2x2_left+1
    adc #>$c0*8
    sta.z next_2x2_right+1
    // [54] phi from font_2x2::@7 to font_2x2::@8 [phi:font_2x2::@7->font_2x2::@8]
    // [54] phi font_2x2::next_2x2_right#8 = font_2x2::next_2x2_right#1 [phi:font_2x2::@7->font_2x2::@8#0] -- register_copy 
    // [54] phi font_2x2::l2#9 = 0 [phi:font_2x2::@7->font_2x2::@8#1] -- vbuz1=vbuc1 
    lda #0
    sta.z l2
    // [54] phi font_2x2::next_2x2_left#8 = font_2x2::next_2x2_left#1 [phi:font_2x2::@7->font_2x2::@8#2] -- register_copy 
    // [54] phi from font_2x2::@6 to font_2x2::@8 [phi:font_2x2::@6->font_2x2::@8]
    // [54] phi font_2x2::next_2x2_right#8 = font_2x2::next_2x2_right#7 [phi:font_2x2::@6->font_2x2::@8#0] -- register_copy 
    // [54] phi font_2x2::l2#9 = font_2x2::l2#1 [phi:font_2x2::@6->font_2x2::@8#1] -- register_copy 
    // [54] phi font_2x2::next_2x2_left#8 = font_2x2::next_2x2_left#7 [phi:font_2x2::@6->font_2x2::@8#2] -- register_copy 
    // font_2x2::@8
  __b8:
    // for(char l: 0..7)
    // [55] font_2x2::l#1 = ++ font_2x2::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [56] if(font_2x2::l#1!=8) goto font_2x2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l
    bne __b2
    // font_2x2::@9
    // next_2x2 += 8
    // [57] font_2x2::next_2x2#1 = font_2x2::next_2x2_left#0 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    clc
    adc.z next_2x2
    sta.z next_2x2
    bcc !+
    inc.z next_2x2+1
  !:
    // next_original += 8
    // [58] font_2x2::next_original#1 = font_2x2::next_original#4 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_original
    sta.z next_original
    bcc !+
    inc.z next_original+1
  !:
    // for(char c: 0..0x3f)
    // [59] font_2x2::c#1 = ++ font_2x2::c#11 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [60] if(font_2x2::c#1!=$40) goto font_2x2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$40
    cmp.z c
    beq !__b1+
    jmp __b1
  !__b1:
    // font_2x2::@return
    // }
    // [61] return 
    rts
}
  // font_compress
// Compress a font finding identical characters
// The compressed font is put into font_compressed and the compress_mapping is updated
// so that compress_mapping[c] points to the char in font_compressed that is identical to char c in font_original
// Returns the size of the compressed font (in chars)
font_compress: {
    .label next_original = $11
    .label i = 8
    .label next_compressed = 9
    .label font_size = 7
    // [63] phi from font_compress to font_compress::@1 [phi:font_compress->font_compress::@1]
    // [63] phi font_compress::next_compressed#4 = FONT_COMPRESSED [phi:font_compress->font_compress::@1#0] -- pbuz1=pbuc1 
    lda #<FONT_COMPRESSED
    sta.z next_compressed
    lda #>FONT_COMPRESSED
    sta.z next_compressed+1
    // [63] phi font_compress::i#4 = 0 [phi:font_compress->font_compress::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [63] phi font_compress::font_size#2 = 0 [phi:font_compress->font_compress::@1#2] -- vbuz1=vbuc1 
    sta.z font_size
    // [63] phi font_compress::next_original#2 = FONT_ORIGINAL [phi:font_compress->font_compress::@1#3] -- pbuz1=pbuc1 
    lda #<FONT_ORIGINAL
    sta.z next_original
    lda #>FONT_ORIGINAL
    sta.z next_original+1
    // font_compress::@1
  __b1:
    // font_find(next_original, font_compressed, font_size)
    // [64] font_find::glyph#0 = font_compress::next_original#2
    // [65] font_find::font_size#0 = font_compress::font_size#2
    // [66] call font_find 
    // [106] phi from font_compress::@1 to font_find [phi:font_compress::@1->font_find]
    jsr font_find
    // font_find(next_original, font_compressed, font_size)
    // [67] font_find::return#0 = font_find::return#3 -- vbuaa=vbuxx 
    txa
    // font_compress::@5
    // found = font_find(next_original, font_compressed, font_size)
    // [68] font_compress::found#0 = font_find::return#0
    // if(found==0xff)
    // [69] if(font_compress::found#0!=$ff) goto font_compress::@7 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$ff
    bne __b7
    // [70] phi from font_compress::@5 to font_compress::@3 [phi:font_compress::@5->font_compress::@3]
    // [70] phi font_compress::l#2 = 0 [phi:font_compress::@5->font_compress::@3#0] -- vbuyy=vbuc1 
    ldy #0
  // Glyph not found - create it
    // [70] phi from font_compress::@3 to font_compress::@3 [phi:font_compress::@3->font_compress::@3]
    // [70] phi font_compress::l#2 = font_compress::l#1 [phi:font_compress::@3->font_compress::@3#0] -- register_copy 
    // font_compress::@3
  __b3:
    // next_compressed[l] = next_original[l]
    // [71] font_compress::next_compressed#4[font_compress::l#2] = font_compress::next_original#2[font_compress::l#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (next_original),y
    sta (next_compressed),y
    // for(char l:0..7)
    // [72] font_compress::l#1 = ++ font_compress::l#2 -- vbuyy=_inc_vbuyy 
    iny
    // [73] if(font_compress::l#1!=8) goto font_compress::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b3
    // font_compress::@4
    // next_compressed += 8
    // [74] font_compress::next_compressed#1 = font_compress::next_compressed#4 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_compressed
    sta.z next_compressed
    bcc !+
    inc.z next_compressed+1
  !:
    // font_size++;
    // [75] font_compress::font_size#1 = ++ font_compress::font_size#2 -- vbuxx=_inc_vbuz1 
    ldx.z font_size
    inx
    // [76] font_compress::found#3 = font_compress::font_size#2 -- vbuaa=vbuz1 
    lda.z font_size
    // [77] phi from font_compress::@4 font_compress::@7 to font_compress::@2 [phi:font_compress::@4/font_compress::@7->font_compress::@2]
    // [77] phi font_compress::next_compressed#7 = font_compress::next_compressed#1 [phi:font_compress::@4/font_compress::@7->font_compress::@2#0] -- register_copy 
    // [77] phi font_compress::return#1 = font_compress::font_size#1 [phi:font_compress::@4/font_compress::@7->font_compress::@2#1] -- register_copy 
    // [77] phi font_compress::found#2 = font_compress::found#3 [phi:font_compress::@4/font_compress::@7->font_compress::@2#2] -- register_copy 
    // font_compress::@2
  __b2:
    // compress_mapping[i] = found
    // [78] FONT_COMPRESSED_MAP[font_compress::i#4] = font_compress::found#2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta FONT_COMPRESSED_MAP,y
    // next_original += 8
    // [79] font_compress::next_original#1 = font_compress::next_original#2 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_original
    sta.z next_original
    bcc !+
    inc.z next_original+1
  !:
    // for(char i: 0..0xff)
    // [80] font_compress::i#1 = ++ font_compress::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [81] if(font_compress::i#1!=0) goto font_compress::@6 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne __b6
    // font_compress::@return
    // }
    // [82] return 
    rts
    // font_compress::@6
  __b6:
    // [83] font_compress::font_size#9 = font_compress::return#1 -- vbuz1=vbuxx 
    stx.z font_size
    // [63] phi from font_compress::@6 to font_compress::@1 [phi:font_compress::@6->font_compress::@1]
    // [63] phi font_compress::next_compressed#4 = font_compress::next_compressed#7 [phi:font_compress::@6->font_compress::@1#0] -- register_copy 
    // [63] phi font_compress::i#4 = font_compress::i#1 [phi:font_compress::@6->font_compress::@1#1] -- register_copy 
    // [63] phi font_compress::font_size#2 = font_compress::font_size#9 [phi:font_compress::@6->font_compress::@1#2] -- register_copy 
    // [63] phi font_compress::next_original#2 = font_compress::next_original#1 [phi:font_compress::@6->font_compress::@1#3] -- register_copy 
    jmp __b1
    // font_compress::@7
  __b7:
    // [84] font_compress::return#5 = font_compress::font_size#2 -- vbuxx=vbuz1 
    ldx.z font_size
    jmp __b2
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(byte register(X) c)
memset: {
    .const num = $400
    .label str = SCREEN
    .label end = str+num
    .label dst = $b
    // [86] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [86] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [87] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [88] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [89] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [90] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [86] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [86] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // show
// Show a 2x2 char on the screen at 2x2-position (x, y) using a font compress mapping
// show(byte zp(3) c, byte register(X) x, byte register(A) y)
show: {
    .label __0 = $f
    .label __1 = $f
    .label __7 = $f
    .label c = 3
    .label ptr = $f
    .label __8 = $11
    .label __9 = $f
    // (unsigned int)y*80
    // [91] show::$7 = (word)show::y#0 -- vwuz1=_word_vbuaa 
    sta.z __7
    lda #0
    sta.z __7+1
    // [92] show::$8 = show::$7 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [93] show::$9 = show::$8 + show::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [94] show::$0 = show::$9 << 4 -- vwuz1=vwuz1_rol_4 
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // SCREEN + (unsigned int)y*80
    // [95] show::$1 = SCREEN + show::$0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __1
    adc #<SCREEN
    sta.z __1
    lda.z __1+1
    adc #>SCREEN
    sta.z __1+1
    // x*2
    // [96] show::$2 = show::x#0 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // ptr = SCREEN + (unsigned int)y*80 + x*2
    // [97] show::ptr#0 = show::$1 + show::$2 -- pbuz1=pbuz1_plus_vbuaa 
    clc
    adc.z ptr
    sta.z ptr
    bcc !+
    inc.z ptr+1
  !:
    // ptr[0] = font_mapping[c]
    // [98] *show::ptr#0 = FONT_COMPRESSED_MAP[show::c#0] -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z c
    lda FONT_COMPRESSED_MAP,y
    ldy #0
    sta (ptr),y
    // c+0x40
    // [99] show::$4 = show::c#0 -- vbuxx=vbuz1 
    ldx.z c
    // ptr[1] = font_mapping[c+0x40]
    // [100] show::ptr#0[1] = (FONT_COMPRESSED_MAP+$40)[show::$4] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda FONT_COMPRESSED_MAP+$40,x
    ldy #1
    sta (ptr),y
    // c+0x80
    // [101] show::$5 = show::c#0 -- vbuaa=vbuz1 
    txa
    // ptr[40] = font_mapping[c+0x80]
    // [102] show::ptr#0[$28] = (FONT_COMPRESSED_MAP+$80)[show::$5] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda FONT_COMPRESSED_MAP+$80,y
    ldy #$28
    sta (ptr),y
    // c+0xc0
    // [103] show::$6 = show::c#0 -- vbuaa=vbuz1 
    txa
    // ptr[41] = font_mapping[c+0xc0]
    // [104] show::ptr#0[$29] = (FONT_COMPRESSED_MAP+$c0)[show::$6] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda FONT_COMPRESSED_MAP+$c0,y
    ldy #$29
    sta (ptr),y
    // show::@return
    // }
    // [105] return 
    rts
}
  // font_find
// Look for a glyph within a font
// Only looks at the first font_size glyphs
// Returns the index of the glyph within the font. Returns 0xff if the glyph is not found.
// font_find(byte* zp($11) glyph, byte* zp($d) font, byte zp(7) font_size)
font_find: {
    .label glyph = $11
    .label font_size = 7
    .label font = $d
    // [107] phi from font_find to font_find::@1 [phi:font_find->font_find::@1]
    // [107] phi font_find::font#4 = FONT_COMPRESSED [phi:font_find->font_find::@1#0] -- pbuz1=pbuc1 
    lda #<FONT_COMPRESSED
    sta.z font
    lda #>FONT_COMPRESSED
    sta.z font+1
    // [107] phi font_find::i#2 = 0 [phi:font_find->font_find::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // font_find::@1
  __b1:
    // for(char i=0;i<font_size;i++)
    // [108] if(font_find::i#2<font_find::font_size#0) goto font_find::@2 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z font_size
    bcc __b6
    // [109] phi from font_find::@1 to font_find::@return [phi:font_find::@1->font_find::@return]
    // [109] phi font_find::return#3 = $ff [phi:font_find::@1->font_find::@return#0] -- vbuxx=vbuc1 
    ldx #$ff
    // font_find::@return
    // }
    // [110] return 
    rts
    // [111] phi from font_find::@1 to font_find::@2 [phi:font_find::@1->font_find::@2]
  __b6:
    // [111] phi font_find::l#2 = 0 [phi:font_find::@1->font_find::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // [111] phi from font_find::@3 to font_find::@2 [phi:font_find::@3->font_find::@2]
    // [111] phi font_find::l#2 = font_find::l#1 [phi:font_find::@3->font_find::@2#0] -- register_copy 
    // font_find::@2
  __b2:
    // if(glyph[l]!=font[l])
    // [112] if(font_find::glyph#0[font_find::l#2]==font_find::font#4[font_find::l#2]) goto font_find::@3 -- pbuz1_derefidx_vbuyy_eq_pbuz2_derefidx_vbuyy_then_la1 
    lda (glyph),y
    cmp (font),y
    beq __b3
    // [115] phi from font_find::@2 to font_find::@4 [phi:font_find::@2->font_find::@4]
    // [115] phi font_find::found#2 = 0 [phi:font_find::@2->font_find::@4#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b4
    // font_find::@3
  __b3:
    // for(char l:0..7)
    // [113] font_find::l#1 = ++ font_find::l#2 -- vbuyy=_inc_vbuyy 
    iny
    // [114] if(font_find::l#1!=8) goto font_find::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b2
    // [115] phi from font_find::@3 to font_find::@4 [phi:font_find::@3->font_find::@4]
    // [115] phi font_find::found#2 = 1 [phi:font_find::@3->font_find::@4#0] -- vbuaa=vbuc1 
    lda #1
    // font_find::@4
  __b4:
    // if(found)
    // [116] if(0==font_find::found#2) goto font_find::@5 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b5
    // [109] phi from font_find::@4 to font_find::@return [phi:font_find::@4->font_find::@return]
    // [109] phi font_find::return#3 = font_find::i#2 [phi:font_find::@4->font_find::@return#0] -- register_copy 
    rts
    // font_find::@5
  __b5:
    // font += 8
    // [117] font_find::font#1 = font_find::font#4 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z font
    sta.z font
    bcc !+
    inc.z font+1
  !:
    // for(char i=0;i<font_size;i++)
    // [118] font_find::i#1 = ++ font_find::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [107] phi from font_find::@5 to font_find::@1 [phi:font_find::@5->font_find::@1]
    // [107] phi font_find::font#4 = font_find::font#1 [phi:font_find::@5->font_find::@1#0] -- register_copy 
    // [107] phi font_find::i#2 = font_find::i#1 [phi:font_find::@5->font_find::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  .align $100
  FONT_COMPRESSED_MAP: .fill $100, 0

