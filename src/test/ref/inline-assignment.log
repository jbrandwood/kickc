
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::a#0 = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::a#1 = main::i#2
  SCREEN[main::i#2] = main::a#1
  (SCREEN+$50)[main::i#2] = main::a#1
  main::i#1 = main::i#2 + rangenext(0,$27)
  main::$0 = main::i#1 != rangelast(0,$27)
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const SCREEN = (char *)$400
void __start()
void main()
bool main::$0
char main::a
char main::a#0
char main::a#1
char main::i
char main::i#0
char main::i#1
char main::i#2

Adding number conversion cast (unumber) $50 in (SCREEN+$50)[main::i#2] = main::a#1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $50
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $50
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::a#1 = main::i#2 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [7] if(main::i#1!=rangelast(0,$27)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::a#0 = 0
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::i#1 = ++ main::a#1 to ++
Resolved ranged comparison value [7] if(main::i#1!=rangelast(0,$27)) goto main::@1 to $28
Eliminating unused constant main::a#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $28 in [4] if(main::i#1!=$28) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::a#2 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::a#1 = phi( main/0, main::@1/main::i#1 )
  [2] SCREEN[main::a#1] = main::a#1
  [3] (SCREEN+$50)[main::a#1] = main::a#1
  [4] main::i#1 = ++ main::a#1
  [5] if(main::i#1!=$28) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::a
char main::a#1 // 22.0
char main::i
char main::i#1 // 16.5

Initial phi equivalence classes
[ main::a#1 main::i#1 ]
Complete equivalence classes
[ main::a#1 main::i#1 ]
Allocated zp[1]:2 [ main::a#1 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::a#1 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::a#1 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 321 combination reg byte x [ main::a#1 main::i#1 ] 
Uplifting [] best 321 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-assignment.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::a#1 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::a#1 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] SCREEN[main::a#1] = main::a#1 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN,x
    // [3] (SCREEN+$50)[main::a#1] = main::a#1 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN+$50,x
    // [4] main::i#1 = ++ main::a#1 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if(main::i#1!=$28) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char * const SCREEN = (char *) 1024
void main()
char main::a
char main::a#1 // reg byte x 22.0
char main::i
char main::i#1 // reg byte x 16.5

reg byte x [ main::a#1 main::i#1 ]


FINAL ASSEMBLER
Score: 231

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-assignment.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::a#1 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::a#1 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // SCREEN[i] = a = i
    // [2] SCREEN[main::a#1] = main::a#1 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN,x
    // (SCREEN+80)[i] = a
    // [3] (SCREEN+$50)[main::a#1] = main::a#1 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN+$50,x
    // for( byte i : 0..39)
    // [4] main::i#1 = ++ main::a#1 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if(main::i#1!=$28) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

