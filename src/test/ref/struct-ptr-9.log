Fixing pointer array-indexing *((struct Point[2]) points + (byte) main::i)
Fixing pointer array-indexing *((struct Point[2]) points + (byte) main::i1)
Fixing pointer array-indexing *((const struct Point*) main::SCREEN + (byte) main::i1)
Adding struct value list initializer *((byte*) main::$4 + (byte~) main::$2) ← (number) 2
Adding struct value list initializer *((byte*) main::$5 + (byte~) main::$2) ← (byte) main::i
Adding struct value member variable copy *((byte*) main::$6 + (byte~) main::$3) ← *((byte*) main::$7 + (byte~) main::$3)
Adding struct value member variable copy *((byte*) main::$8 + (byte~) main::$3) ← *((byte*) main::$9 + (byte~) main::$3)
Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (struct Point[2]) points ← { fill( 2, 0) }
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$2 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
  (byte*) main::$4 ← (byte*)(struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_X
  *((byte*) main::$4 + (byte~) main::$2) ← (number) 2
  (byte*) main::$5 ← (byte*)(struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_Y
  *((byte*) main::$5 + (byte~) main::$2) ← (byte) main::i#2
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,1)
  (bool~) main::$0 ← (byte) main::i#1 != rangelast(0,1)
  if((bool~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::i1#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::i1#2 ← phi( main::@2/(byte) main::i1#0 main::@3/(byte) main::i1#1 )
  (byte~) main::$3 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
  (byte*) main::$6 ← (byte*)(const struct Point*) main::SCREEN + (const byte) OFFSET_STRUCT_POINT_X
  (byte*) main::$7 ← (byte*)(struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_X
  *((byte*) main::$6 + (byte~) main::$3) ← *((byte*) main::$7 + (byte~) main::$3)
  (byte*) main::$8 ← (byte*)(const struct Point*) main::SCREEN + (const byte) OFFSET_STRUCT_POINT_Y
  (byte*) main::$9 ← (byte*)(struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_Y
  *((byte*) main::$8 + (byte~) main::$3) ← *((byte*) main::$9 + (byte~) main::$3)
  (byte) main::i1#1 ← (byte) main::i1#2 + rangenext(0,1)
  (bool~) main::$1 ← (byte) main::i1#1 != rangelast(0,1)
  if((bool~) main::$1) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(void()) main()
(bool~) main::$0
(bool~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte*) main::$4
(byte*) main::$5
(byte*) main::$6
(byte*) main::$7
(byte*) main::$8
(byte*) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const struct Point*) main::SCREEN = (struct Point*)(number) $400
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i1
(byte) main::i1#0
(byte) main::i1#1
(byte) main::i1#2
(struct Point[2]) points

Adding number conversion cast (unumber) 2 in *((byte*) main::$4 + (byte~) main::$2) ← (number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*) main::$4 + (byte~) main::$2) ← (unumber)(number) 2
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct Point*) 1024
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [10] if((byte) main::i#1!=rangelast(0,1)) goto main::@1
Simple Condition (bool~) main::$1 [22] if((byte) main::i1#1!=rangelast(0,1)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (struct Point[2]) points ← { fill( 2, 0) }
Constant right-side identified [14] (byte*) main::$6 ← (byte*)(const struct Point*) main::SCREEN + (const byte) OFFSET_STRUCT_POINT_X
Constant right-side identified [17] (byte*) main::$8 ← (byte*)(const struct Point*) main::SCREEN + (const byte) OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const struct Point[2]) points = { fill( 2, 0) }
Constant (const byte) main::i#0 = 0
Constant (const byte) main::i1#0 = 0
Constant (const byte*) main::$6 = (byte*)main::SCREEN+OFFSET_STRUCT_POINT_X
Constant (const byte*) main::$8 = (byte*)main::SCREEN+OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)points in [4] (byte*) main::$4 ← (byte*)(const struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_X
Constant value identified (byte*)points in [6] (byte*) main::$5 ← (byte*)(const struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_Y
Constant value identified (byte*)points in [15] (byte*) main::$7 ← (byte*)(const struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_X
Constant value identified (byte*)points in [18] (byte*) main::$9 ← (byte*)(const struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [8] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,1)) goto main::@1 to (number) 2
Resolved ranged next value [20] main::i1#1 ← ++ main::i1#2 to ++
Resolved ranged comparison value [22] if(main::i1#1!=rangelast(0,1)) goto main::@3 to (number) 2
Simplifying expression containing zero (byte*)main::SCREEN in 
Simplifying expression containing zero (byte*)points in [4] (byte*) main::$4 ← (byte*)(const struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero (byte*)points in [15] (byte*) main::$7 ← (byte*)(const struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 2 in if((byte) main::i#1!=(number) 2) goto main::@1
Adding number conversion cast (unumber) 2 in if((byte) main::i1#1!=(number) 2) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [4] (byte*) main::$5 ← (byte*)(const struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_Y
Constant right-side identified [12] (byte*) main::$9 ← (byte*)(const struct Point[2]) points + (const byte) OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$4 = (byte*)points
Constant (const byte*) main::$5 = (byte*)points+OFFSET_STRUCT_POINT_Y
Constant (const byte*) main::$7 = (byte*)points
Constant (const byte*) main::$9 = (byte*)points+OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [1] (byte~) main::$2 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
Rewriting multiplication to use shift [7] (byte~) main::$3 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i1#0
Constant inlined main::$5 = (byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y
Constant inlined main::i#0 = (byte) 0
Constant inlined main::i1#0 = (byte) 0
Constant inlined main::$6 = (byte*)(const struct Point*) main::SCREEN
Constant inlined main::$4 = (byte*)(const struct Point[2]) points
Constant inlined main::$9 = (byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y
Constant inlined main::$7 = (byte*)(const struct Point[2]) points
Constant inlined main::$8 = (byte*)(const struct Point*) main::SCREEN+(const byte) OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@5(between main::@1 and main::@1)
Added new block during phi lifting main::@6(between main::@3 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [20] main::i1#3 ← main::i1#1
Coalesced [21] main::i#3 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@5
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1
  [7] *((byte*)(const struct Point[2]) points + (byte~) main::$2) ← (byte) 2
  [8] *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$2) ← (byte) main::i#2
  [9] (byte) main::i#1 ← ++ (byte) main::i#2
  [10] if((byte) main::i#1!=(byte) 2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [11] (byte) main::i1#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::i1#1 )
  [12] (byte~) main::$3 ← (byte) main::i1#2 << (byte) 1
  [13] *((byte*)(const struct Point*) main::SCREEN + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points + (byte~) main::$3)
  [14] *((byte*)(const struct Point*) main::SCREEN+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3)
  [15] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [16] if((byte) main::i1#1!=(byte) 2) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [17] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()
(byte~) main::$2 16.5
(byte~) main::$3 27.5
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0
(byte) main::i1
(byte) main::i1#1 16.5
(byte) main::i1#2 8.25

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
Added variable main::$2 to zero page equivalence class [ main::$2 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::$2 ]
[ main::$3 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::i1#2 main::i1#1 ]
Allocated zp[1]:4 [ main::$2 ]
Allocated zp[1]:5 [ main::$3 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct -  array access with struct value copying (and initializing)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label __2 = 4
    .label __3 = 5
    .label i = 2
    .label i1 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z __2
    // [7] *((byte*)(const struct Point[2]) points + (byte~) main::$2) ← (byte) 2 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #2
    ldy.z __2
    sta points,y
    // [8] *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z i
    ldy.z __2
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1_from___b1
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [11] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp __b2
    // [11] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [11] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [12] (byte~) main::$3 ← (byte) main::i1#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i1
    asl
    sta.z __3
    // [13] *((byte*)(const struct Point*) main::SCREEN + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points + (byte~) main::$3) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z __3
    lda points,y
    sta SCREEN,y
    // [14] *((byte*)(const struct Point*) main::SCREEN+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z __3
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN+OFFSET_STRUCT_POINT_Y,y
    // [15] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [16] if((byte) main::i1#1!=(byte) 2) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i1
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [17] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$2 ] ( main:2 [ main::i#2 main::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [7] *((byte*)(const struct Point[2]) points + (byte~) main::$2) ← (byte) 2 [ main::i#2 main::$2 ] ( main:2 [ main::i#2 main::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::$2 ]
Statement [8] *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$2) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [12] (byte~) main::$3 ← (byte) main::i1#2 << (byte) 1 [ main::i1#2 main::$3 ] ( main:2 [ main::i1#2 main::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i1#2 main::i1#1 ]
Statement [13] *((byte*)(const struct Point*) main::SCREEN + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points + (byte~) main::$3) [ main::i1#2 main::$3 ] ( main:2 [ main::i1#2 main::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::$3 ]
Statement [14] *((byte*)(const struct Point*) main::SCREEN+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) [ main::i1#2 ] ( main:2 [ main::i1#2 ] ) always clobbers reg byte a 
Statement [6] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$2 ] ( main:2 [ main::i#2 main::$2 ] ) always clobbers reg byte a 
Statement [7] *((byte*)(const struct Point[2]) points + (byte~) main::$2) ← (byte) 2 [ main::i#2 main::$2 ] ( main:2 [ main::i#2 main::$2 ] ) always clobbers reg byte a 
Statement [8] *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$2) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [12] (byte~) main::$3 ← (byte) main::i1#2 << (byte) 1 [ main::i1#2 main::$3 ] ( main:2 [ main::i1#2 main::$3 ] ) always clobbers reg byte a 
Statement [13] *((byte*)(const struct Point*) main::SCREEN + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points + (byte~) main::$3) [ main::i1#2 main::$3 ] ( main:2 [ main::i1#2 main::$3 ] ) always clobbers reg byte a 
Statement [14] *((byte*)(const struct Point*) main::SCREEN+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) [ main::i1#2 ] ( main:2 [ main::i1#2 ] ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i1#2 main::i1#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$2 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$3 ] : zp[1]:5 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 27.5: zp[1]:5 [ main::$3 ] 24.75: zp[1]:3 [ main::i1#2 main::i1#1 ] 16.5: zp[1]:4 [ main::$2 ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [main] best 788 combination reg byte y [ main::i#2 main::i#1 ] reg byte y [ main::$3 ] reg byte x [ main::i1#2 main::i1#1 ] reg byte x [ main::$2 ] 
Uplifting [Point] best 788 combination 
Uplifting [] best 788 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct -  array access with struct value copying (and initializing)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [7] *((byte*)(const struct Point[2]) points + (byte~) main::$2) ← (byte) 2 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #2
    sta points,x
    // [8] *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta points+OFFSET_STRUCT_POINT_Y,x
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [10] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #2
    bne __b1_from___b1
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [11] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [11] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [11] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [12] (byte~) main::$3 ← (byte) main::i1#2 << (byte) 1 -- vbuyy=vbuxx_rol_1 
    txa
    asl
    tay
    // [13] *((byte*)(const struct Point*) main::SCREEN + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points + (byte~) main::$3) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuyy 
    lda points,y
    sta SCREEN,y
    // [14] *((byte*)(const struct Point*) main::SCREEN+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN+OFFSET_STRUCT_POINT_Y,y
    // [15] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [16] if((byte) main::i1#1!=(byte) 2) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #2
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [17] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(void()) main()
(byte~) main::$2 reg byte x 16.5
(byte~) main::$3 reg byte y 27.5
(label) main::@1
(label) main::@2
(label) main::@return
(const struct Point*) main::SCREEN = (struct Point*) 1024
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 11.0
(byte) main::i1
(byte) main::i1#1 reg byte x 16.5
(byte) main::i1#2 reg byte x 8.25
(const struct Point[2]) points = { fill( 2, 0) }

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ main::i1#2 main::i1#1 ]
reg byte x [ main::$2 ]
reg byte y [ main::$3 ]


FINAL ASSEMBLER
Score: 626

  // File Comments
// Minimal struct -  array access with struct value copying (and initializing)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // points[i] = { 2, i }
    // [6] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [7] *((byte*)(const struct Point[2]) points + (byte~) main::$2) ← (byte) 2 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #2
    sta points,x
    // [8] *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta points+OFFSET_STRUCT_POINT_Y,x
    // for( byte i: 0..1)
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [10] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #2
    bne __b1
    // [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [11] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [11] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [11] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // SCREEN[i] = points[i]
    // [12] (byte~) main::$3 ← (byte) main::i1#2 << (byte) 1 -- vbuyy=vbuxx_rol_1 
    txa
    asl
    tay
    // [13] *((byte*)(const struct Point*) main::SCREEN + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points + (byte~) main::$3) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuyy 
    lda points,y
    sta SCREEN,y
    // [14] *((byte*)(const struct Point*) main::SCREEN+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) ← *((byte*)(const struct Point[2]) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$3) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN+OFFSET_STRUCT_POINT_Y,y
    // for( byte i: 0..1)
    // [15] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [16] if((byte) main::i1#1!=(byte) 2) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #2
    bne __b2
    // main::@return
    // }
    // [17] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

