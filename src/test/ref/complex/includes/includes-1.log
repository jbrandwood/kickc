Inlined call call __init

CONTROL FLOW GRAPH SSA

unsigned int strlen(char *str)
strlen: scope:[strlen]  from main
  strlen::str#4 = phi( main/strlen::str#1 )
  strlen::len#0 = 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  strlen::len#4 = phi( strlen/strlen::len#0, strlen::@2/strlen::len#1 )
  strlen::str#2 = phi( strlen/strlen::str#4, strlen::@2/strlen::str#0 )
  strlen::$0 = 0 != *strlen::str#2
  if(strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  strlen::str#3 = phi( strlen::@1/strlen::str#2 )
  strlen::len#2 = phi( strlen::@1/strlen::len#4 )
  strlen::len#1 = ++ strlen::len#2
  strlen::str#0 = ++ strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  strlen::len#3 = phi( strlen::@1/strlen::len#4 )
  strlen::return#0 = strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  strlen::return#3 = phi( strlen::@3/strlen::return#0 )
  strlen::return#1 = strlen::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  strlen::str#1 = STR
  call strlen
  strlen::return#2 = strlen::return#1
  to:main::@1
main::@1: scope:[main]  from main
  strlen::return#4 = phi( main/strlen::return#2 )
  main::$0 = strlen::return#4
  SCREEN[0] = (char)main::$0
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const SCREEN = (char *)$400
__constant char *STR = "camelot!"
void __start()
void main()
unsigned int main::$0
unsigned int strlen(char *str)
bool strlen::$0
unsigned int strlen::len
unsigned int strlen::len#0
unsigned int strlen::len#1
unsigned int strlen::len#2
unsigned int strlen::len#3
unsigned int strlen::len#4
unsigned int strlen::return
unsigned int strlen::return#0
unsigned int strlen::return#1
unsigned int strlen::return#2
unsigned int strlen::return#3
unsigned int strlen::return#4
char *strlen::str
char *strlen::str#0
char *strlen::str#1
char *strlen::str#2
char *strlen::str#3
char *strlen::str#4

Adding number conversion cast (unumber) 0 in strlen::$0 = 0 != *strlen::str#2
Adding number conversion cast (unumber) 0 in SCREEN[0] = (char)main::$0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias strlen::return#2 = strlen::return#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values strlen::str#4 strlen::str#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition strlen::$0 [4] if(0!=*strlen::str#2) goto strlen::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant strlen::len#0 = 0
Constant strlen::str#1 = STR
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [12] SCREEN[0] = (char)main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings strlen::len#0
Inlining constant with var siblings strlen::str#1
Constant inlined strlen::len#0 = 0
Constant inlined strlen::str#1 = STR
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of strlen
Adding NOP phi() at start of strlen::@3
CALL GRAPH
Calls in [main] to strlen:1 

Created 2 initial phi equivalence classes
Coalesced [13] strlen::str#5 = strlen::str#0
Coalesced [14] strlen::len#5 = strlen::len#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label strlen::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of strlen

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call strlen
  [2] strlen::return#2 = strlen::len#2
  to:main::@1
main::@1: scope:[main]  from main
  [3] main::$0 = strlen::return#2
  [4] *SCREEN = (char)main::$0
  to:main::@return
main::@return: scope:[main]  from main::@1
  [5] return 
  to:@return

unsigned int strlen(char *str)
strlen: scope:[strlen]  from main
  [6] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [7] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [7] strlen::str#2 = phi( strlen/STR, strlen::@2/strlen::str#0 )
  [8] if(0!=*strlen::str#2) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [9] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [10] strlen::len#1 = ++ strlen::len#2
  [11] strlen::str#0 = ++ strlen::str#2
  to:strlen::@1


VARIABLE REGISTER WEIGHTS
void main()
unsigned int main::$0 // 2.0
unsigned int strlen(char *str)
unsigned int strlen::len
unsigned int strlen::len#1 // 101.0
unsigned int strlen::len#2 // 51.0
unsigned int strlen::return
unsigned int strlen::return#2 // 4.0
char *strlen::str
char *strlen::str#0 // 202.0
char *strlen::str#2 // 101.0

Initial phi equivalence classes
[ strlen::str#2 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
Added variable strlen::return#2 to live range equivalence class [ strlen::return#2 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Complete equivalence classes
[ strlen::str#2 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ strlen::return#2 ]
[ main::$0 ]
Allocated zp[2]:2 [ strlen::str#2 strlen::str#0 ]
Allocated zp[2]:4 [ strlen::len#2 strlen::len#1 ]
Allocated zp[2]:6 [ strlen::return#2 ]
Allocated zp[2]:8 [ main::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] strlen::return#2 = strlen::len#2 [ strlen::return#2 ] (  [ strlen::return#2 ] { { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [3] main::$0 = strlen::return#2 [ main::$0 ] (  [ main::$0 ] { }  ) always clobbers reg byte a 
Statement [4] *SCREEN = (char)main::$0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] if(0!=*strlen::str#2) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( strlen:1 [ strlen::len#2 strlen::str#2 ] { { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ strlen::str#2 strlen::str#0 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ strlen::len#2 strlen::len#1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ strlen::return#2 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ main::$0 ] : zp[2]:8 , 

REGISTER UPLIFT SCOPES
Uplift Scope [strlen] 303: zp[2]:2 [ strlen::str#2 strlen::str#0 ] 152: zp[2]:4 [ strlen::len#2 strlen::len#1 ] 4: zp[2]:6 [ strlen::return#2 ] 
Uplift Scope [main] 2: zp[2]:8 [ main::$0 ] 
Uplift Scope [] 

Uplifting [strlen] best 715 combination zp[2]:2 [ strlen::str#2 strlen::str#0 ] zp[2]:4 [ strlen::len#2 strlen::len#1 ] zp[2]:6 [ strlen::return#2 ] 
Uplifting [main] best 715 combination zp[2]:8 [ main::$0 ] 
Uplifting [] best 715 combination 
Coalescing zero page register [ zp[2]:4 [ strlen::len#2 strlen::len#1 ] ] with [ zp[2]:6 [ strlen::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:4 [ strlen::len#2 strlen::len#1 strlen::return#2 ] ] with [ zp[2]:8 [ main::$0 ] ] - score: 1

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Includes a system library - ignores the local file with the same name
  // Upstart
  // Commodore 64 PRG executable file
.file [name="includes-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label __0 = 4
    // [1] call strlen
    // [6] phi from main to strlen [phi:main->strlen] -- call_phi_near 
  strlen_from_main:
    jsr strlen
    // [2] strlen::return#2 = strlen::len#2
    jmp __b1
    // main::@1
  __b1:
    // [3] main::$0 = strlen::return#2
    // [4] *SCREEN = (char)main::$0 -- _deref_pbuc1=_byte_vwuz1 
    lda.z __0
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// __zp(4) unsigned int strlen(__zp(2) char *str)
strlen: {
    .label len = 4
    .label str = 2
    .label return = 4
    // [7] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [7] phi strlen::len#2 = 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [7] phi strlen::str#2 = STR [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<STR
    sta.z str
    lda #>STR
    sta.z str+1
    jmp __b1
    // strlen::@1
  __b1:
    // [8] if(0!=*strlen::str#2) goto strlen::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [9] return 
    rts
    // strlen::@2
  __b2:
    // [10] strlen::len#1 = ++ strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [11] strlen::str#0 = ++ strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [7] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [7] phi strlen::len#2 = strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [7] phi strlen::str#2 = strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  STR: .text "camelot!"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction strlen_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_strlen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char * const SCREEN = (char *) 1024
__constant char *STR = "camelot!"
void main()
unsigned int main::$0 // zp[2]:4 2.0
unsigned int strlen(char *str)
unsigned int strlen::len
unsigned int strlen::len#1 // len zp[2]:4 101.0
unsigned int strlen::len#2 // len zp[2]:4 51.0
unsigned int strlen::return
unsigned int strlen::return#2 // return zp[2]:4 4.0
char *strlen::str
char *strlen::str#0 // str zp[2]:2 202.0
char *strlen::str#2 // str zp[2]:2 101.0

zp[2]:2 [ strlen::str#2 strlen::str#0 ]
zp[2]:4 [ strlen::len#2 strlen::len#1 strlen::return#2 main::$0 ]


FINAL ASSEMBLER
Score: 605

  // File Comments
// Includes a system library - ignores the local file with the same name
  // Upstart
  // Commodore 64 PRG executable file
.file [name="includes-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label __0 = 4
    // strlen(STR)
    // [1] call strlen
    // [6] phi from main to strlen [phi:main->strlen] -- call_phi_near 
    jsr strlen
    // strlen(STR)
    // [2] strlen::return#2 = strlen::len#2
    // main::@1
    // [3] main::$0 = strlen::return#2
    // SCREEN [0] = (char) strlen(STR)
    // [4] *SCREEN = (char)main::$0 -- _deref_pbuc1=_byte_vwuz1 
    lda.z __0
    sta SCREEN
    // main::@return
    // }
    // [5] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// __zp(4) unsigned int strlen(__zp(2) char *str)
strlen: {
    .label len = 4
    .label str = 2
    .label return = 4
    // [7] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
    // [7] phi strlen::len#2 = 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    sta.z len+1
    // [7] phi strlen::str#2 = STR [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<STR
    sta.z str
    lda #>STR
    sta.z str+1
    // strlen::@1
  __b1:
    // while(*str)
    // [8] if(0!=*strlen::str#2) goto strlen::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // strlen::@return
    // }
    // [9] return 
    rts
    // strlen::@2
  __b2:
    // len++;
    // [10] strlen::len#1 = ++ strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // str++;
    // [11] strlen::str#0 = ++ strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [7] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
    // [7] phi strlen::len#2 = strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [7] phi strlen::str#2 = strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  STR: .text "camelot!"
  .byte 0

