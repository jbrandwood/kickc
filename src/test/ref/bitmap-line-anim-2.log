Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  (byte) memset::c#5 ← phi( bitmap_clear/(byte) memset::c#0 bitmap_clear::@1/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( bitmap_clear/(void*) memset::str#0 bitmap_clear::@1/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( bitmap_clear/(word) memset::num#0 bitmap_clear::@1/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from main
  (byte*) bitmap_init::screen#1 ← phi( main/(byte*) bitmap_init::screen#0 )
  (byte*) bitmap_init::gfx#1 ← phi( main/(byte*) bitmap_init::gfx#0 )
  (byte*) bitmap_gfx#0 ← (byte*) bitmap_init::gfx#1
  (byte*) bitmap_screen#0 ← (byte*) bitmap_init::screen#1
  (byte) bitmap_init::bits#0 ← (byte) $80
  (byte) bitmap_init::x#0 ← (byte) 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  (byte*) bitmap_screen#25 ← phi( bitmap_init/(byte*) bitmap_screen#0 bitmap_init::@2/(byte*) bitmap_screen#23 )
  (byte*) bitmap_gfx#26 ← phi( bitmap_init/(byte*) bitmap_gfx#0 bitmap_init::@2/(byte*) bitmap_gfx#24 )
  (byte*) bitmap_init::gfx#4 ← phi( bitmap_init/(byte*) bitmap_init::gfx#1 bitmap_init::@2/(byte*) bitmap_init::gfx#3 )
  (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) bitmap_init::x#0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) bitmap_init::bits#0 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (number) 1
  (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (number) 0
  (bool~) bitmap_init::$1 ← ! (bool~) bitmap_init::$0
  if((bool~) bitmap_init::$1) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  (byte*) bitmap_screen#23 ← phi( bitmap_init::@1/(byte*) bitmap_screen#25 bitmap_init::@3/(byte*) bitmap_screen#26 )
  (byte*) bitmap_gfx#24 ← phi( bitmap_init::@1/(byte*) bitmap_gfx#26 bitmap_init::@3/(byte*) bitmap_gfx#27 )
  (byte*) bitmap_init::gfx#3 ← phi( bitmap_init::@1/(byte*) bitmap_init::gfx#4 bitmap_init::@3/(byte*) bitmap_init::gfx#5 )
  (byte) bitmap_init::bits#4 ← phi( bitmap_init::@1/(byte) bitmap_init::bits#1 bitmap_init::@3/(byte) bitmap_init::bits#2 )
  (byte) bitmap_init::x#3 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 bitmap_init::@3/(byte) bitmap_init::x#4 )
  (byte) bitmap_init::x#1 ← (byte) bitmap_init::x#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$2 ← (byte) bitmap_init::x#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$2) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  (byte*) bitmap_screen#26 ← phi( bitmap_init::@1/(byte*) bitmap_screen#25 )
  (byte*) bitmap_gfx#27 ← phi( bitmap_init::@1/(byte*) bitmap_gfx#26 )
  (byte*) bitmap_init::gfx#5 ← phi( bitmap_init::@1/(byte*) bitmap_init::gfx#4 )
  (byte) bitmap_init::x#4 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 )
  (byte) bitmap_init::bits#2 ← (number) $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  (byte*) bitmap_screen#21 ← phi( bitmap_init::@2/(byte*) bitmap_screen#23 )
  (byte*) bitmap_gfx#22 ← phi( bitmap_init::@2/(byte*) bitmap_gfx#24 )
  (byte*) bitmap_init::gfx#2 ← phi( bitmap_init::@2/(byte*) bitmap_init::gfx#3 )
  (byte*) bitmap_init::yoffs#0 ← (byte*) bitmap_init::gfx#2
  (byte) bitmap_init::y#0 ← (byte) 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  (byte*) bitmap_screen#17 ← phi( bitmap_init::@4/(byte*) bitmap_screen#21 bitmap_init::@6/(byte*) bitmap_screen#13 )
  (byte*) bitmap_gfx#18 ← phi( bitmap_init::@4/(byte*) bitmap_gfx#22 bitmap_init::@6/(byte*) bitmap_gfx#13 )
  (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#0 bitmap_init::@6/(byte*) bitmap_init::yoffs#4 )
  (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#0 bitmap_init::@6/(byte) bitmap_init::y#1 )
  (number~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (number) 7
  (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  (number~) bitmap_init::$5 ← (number~) bitmap_init::$3 | (byte~) bitmap_init::$4
  *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (number~) bitmap_init::$5
  (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  (number~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (number) 7
  (bool~) bitmap_init::$8 ← (number~) bitmap_init::$7 == (number) 7
  (bool~) bitmap_init::$9 ← ! (bool~) bitmap_init::$8
  if((bool~) bitmap_init::$9) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  (byte*) bitmap_screen#13 ← phi( bitmap_init::@5/(byte*) bitmap_screen#17 bitmap_init::@7/(byte*) bitmap_screen#18 )
  (byte*) bitmap_gfx#13 ← phi( bitmap_init::@5/(byte*) bitmap_gfx#18 bitmap_init::@7/(byte*) bitmap_gfx#19 )
  (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  (byte) bitmap_init::y#3 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 bitmap_init::@7/(byte) bitmap_init::y#4 )
  (byte) bitmap_init::y#1 ← (byte) bitmap_init::y#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$11 ← (byte) bitmap_init::y#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$11) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  (byte*) bitmap_screen#18 ← phi( bitmap_init::@5/(byte*) bitmap_screen#17 )
  (byte*) bitmap_gfx#19 ← phi( bitmap_init::@5/(byte*) bitmap_gfx#18 )
  (byte) bitmap_init::y#4 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 )
  (byte*) bitmap_init::yoffs#3 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 )
  (byte*~) bitmap_init::$10 ← (byte*) bitmap_init::yoffs#3 + (number) $28*(number) 8
  (byte*) bitmap_init::yoffs#1 ← (byte*~) bitmap_init::$10
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  (byte*) bitmap_screen#7 ← phi( bitmap_init::@6/(byte*) bitmap_screen#13 )
  (byte*) bitmap_gfx#7 ← phi( bitmap_init::@6/(byte*) bitmap_gfx#13 )
  (byte*) bitmap_gfx#1 ← (byte*) bitmap_gfx#7
  (byte*) bitmap_screen#1 ← (byte*) bitmap_screen#7
  return 
  to:@return

(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@4
  (byte*) bitmap_gfx#14 ← phi( main::@4/(byte*) bitmap_gfx#2 )
  (byte*) bitmap_screen#8 ← phi( main::@4/(byte*) bitmap_screen#2 )
  (byte) bitmap_clear::bgcol#1 ← phi( main::@4/(byte) bitmap_clear::bgcol#0 )
  (byte) bitmap_clear::fgcol#1 ← phi( main::@4/(byte) bitmap_clear::fgcol#0 )
  (number~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#1 * (number) $10
  (number~) bitmap_clear::$1 ← (number~) bitmap_clear::$0 + (byte) bitmap_clear::bgcol#1
  (byte) bitmap_clear::col#0 ← (number~) bitmap_clear::$1
  (void*) memset::str#0 ← (void*)(byte*) bitmap_screen#8
  (byte) memset::c#0 ← (byte) bitmap_clear::col#0
  (word) memset::num#0 ← (word) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  (byte*) bitmap_gfx#8 ← phi( bitmap_clear/(byte*) bitmap_gfx#14 )
  (void*) memset::str#1 ← (void*)(byte*) bitmap_gfx#8
  (byte) memset::c#1 ← (number) 0
  (word) memset::num#1 ← (word) $1f40
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@2
  return 
  to:@return

(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line::@3 bitmap_line::@4 bitmap_line::@6 bitmap_line::@9
  (word) bitmap_plot::x#4 ← phi( bitmap_line::@3/(word) bitmap_plot::x#2 bitmap_line::@4/(word) bitmap_plot::x#0 bitmap_line::@6/(word) bitmap_plot::x#1 bitmap_line::@9/(word) bitmap_plot::x#3 )
  (byte) bitmap_plot::y#4 ← phi( bitmap_line::@3/(byte) bitmap_plot::y#2 bitmap_line::@4/(byte) bitmap_plot::y#0 bitmap_line::@6/(byte) bitmap_plot::y#1 bitmap_line::@9/(byte) bitmap_plot::y#3 )
  (byte*) bitmap_plot::plotter#0 ← (byte*){ *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4), *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) }
  (number~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (number) $fff8
  (byte*) bitmap_plot::plotter#1 ← (byte*) bitmap_plot::plotter#0 + (number~) bitmap_plot::$0
  (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#4
  *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return

(void()) bitmap_line((word) bitmap_line::x1 , (word) bitmap_line::y1 , (word) bitmap_line::x2 , (word) bitmap_line::y2)
bitmap_line: scope:[bitmap_line]  from main::@1
  (word) bitmap_line::y2#4 ← phi( main::@1/(word) bitmap_line::y2#0 )
  (word) bitmap_line::x2#1 ← phi( main::@1/(word) bitmap_line::x2#0 )
  (word) bitmap_line::y1#1 ← phi( main::@1/(word) bitmap_line::y1#0 )
  (word) bitmap_line::x1#1 ← phi( main::@1/(word) bitmap_line::x1#0 )
  (word) bitmap_line::x#0 ← (word) bitmap_line::x1#1
  (word) bitmap_line::y#0 ← (word) bitmap_line::y1#1
  (word~) bitmap_line::$0 ← (word) bitmap_line::x2#1 - (word) bitmap_line::x1#1
  (word) abs_u16::w#0 ← (word~) bitmap_line::$0
  call abs_u16 
  (word) abs_u16::return#0 ← (word) abs_u16::return#4
  to:bitmap_line::@12
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line
  (word) bitmap_line::y#16 ← phi( bitmap_line/(word) bitmap_line::y#0 )
  (word) bitmap_line::x#16 ← phi( bitmap_line/(word) bitmap_line::x#0 )
  (word) bitmap_line::x1#4 ← phi( bitmap_line/(word) bitmap_line::x1#1 )
  (word) bitmap_line::x2#7 ← phi( bitmap_line/(word) bitmap_line::x2#1 )
  (word) bitmap_line::y1#2 ← phi( bitmap_line/(word) bitmap_line::y1#1 )
  (word) bitmap_line::y2#1 ← phi( bitmap_line/(word) bitmap_line::y2#4 )
  (word) abs_u16::return#5 ← phi( bitmap_line/(word) abs_u16::return#0 )
  (word~) bitmap_line::$1 ← (word) abs_u16::return#5
  (word) bitmap_line::dx#0 ← (word~) bitmap_line::$1
  (word~) bitmap_line::$2 ← (word) bitmap_line::y2#1 - (word) bitmap_line::y1#2
  (word) abs_u16::w#1 ← (word~) bitmap_line::$2
  call abs_u16 
  (word) abs_u16::return#1 ← (word) abs_u16::return#4
  to:bitmap_line::@13
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@12
  (word) bitmap_line::y1#5 ← phi( bitmap_line::@12/(word) bitmap_line::y1#2 )
  (word) bitmap_line::y2#8 ← phi( bitmap_line::@12/(word) bitmap_line::y2#1 )
  (word) bitmap_line::y#10 ← phi( bitmap_line::@12/(word) bitmap_line::y#16 )
  (word) bitmap_line::x#10 ← phi( bitmap_line::@12/(word) bitmap_line::x#16 )
  (word) bitmap_line::x1#3 ← phi( bitmap_line::@12/(word) bitmap_line::x1#4 )
  (word) bitmap_line::x2#4 ← phi( bitmap_line::@12/(word) bitmap_line::x2#7 )
  (word) bitmap_line::dx#1 ← phi( bitmap_line::@12/(word) bitmap_line::dx#0 )
  (word) abs_u16::return#6 ← phi( bitmap_line::@12/(word) abs_u16::return#1 )
  (word~) bitmap_line::$3 ← (word) abs_u16::return#6
  (word) bitmap_line::dy#0 ← (word~) bitmap_line::$3
  (bool~) bitmap_line::$4 ← (word) bitmap_line::dx#1 == (number) 0
  (bool~) bitmap_line::$5 ← (word) bitmap_line::dy#0 == (number) 0
  (bool~) bitmap_line::$6 ← (bool~) bitmap_line::$4 && (bool~) bitmap_line::$5
  (bool~) bitmap_line::$7 ← ! (bool~) bitmap_line::$6
  if((bool~) bitmap_line::$7) goto bitmap_line::@1
  to:bitmap_line::@4
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line::@13
  (word) bitmap_line::y#19 ← phi( bitmap_line::@13/(word) bitmap_line::y#10 )
  (word) bitmap_line::x#19 ← phi( bitmap_line::@13/(word) bitmap_line::x#10 )
  (word) bitmap_line::dy#9 ← phi( bitmap_line::@13/(word) bitmap_line::dy#0 )
  (word) bitmap_line::dx#10 ← phi( bitmap_line::@13/(word) bitmap_line::dx#1 )
  (word) bitmap_line::y1#4 ← phi( bitmap_line::@13/(word) bitmap_line::y1#5 )
  (word) bitmap_line::y2#5 ← phi( bitmap_line::@13/(word) bitmap_line::y2#8 )
  (word) bitmap_line::x1#2 ← phi( bitmap_line::@13/(word) bitmap_line::x1#3 )
  (word) bitmap_line::x2#2 ← phi( bitmap_line::@13/(word) bitmap_line::x2#4 )
  (word~) bitmap_line::$8 ← (word) bitmap_line::x2#2 - (word) bitmap_line::x1#2
  (word) sgn_u16::w#0 ← (word~) bitmap_line::$8
  call sgn_u16 
  (word) sgn_u16::return#0 ← (word) sgn_u16::return#4
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@1
  (word) bitmap_line::x2#11 ← phi( bitmap_line::@1/(word) bitmap_line::x2#2 )
  (word) bitmap_line::y#18 ← phi( bitmap_line::@1/(word) bitmap_line::y#19 )
  (word) bitmap_line::x#18 ← phi( bitmap_line::@1/(word) bitmap_line::x#19 )
  (word) bitmap_line::dy#6 ← phi( bitmap_line::@1/(word) bitmap_line::dy#9 )
  (word) bitmap_line::dx#7 ← phi( bitmap_line::@1/(word) bitmap_line::dx#10 )
  (word) bitmap_line::y1#3 ← phi( bitmap_line::@1/(word) bitmap_line::y1#4 )
  (word) bitmap_line::y2#2 ← phi( bitmap_line::@1/(word) bitmap_line::y2#5 )
  (word) sgn_u16::return#5 ← phi( bitmap_line::@1/(word) sgn_u16::return#0 )
  (word~) bitmap_line::$9 ← (word) sgn_u16::return#5
  (word) bitmap_line::sx#0 ← (word~) bitmap_line::$9
  (word~) bitmap_line::$10 ← (word) bitmap_line::y2#2 - (word) bitmap_line::y1#3
  (word) sgn_u16::w#1 ← (word~) bitmap_line::$10
  call sgn_u16 
  (word) sgn_u16::return#1 ← (word) sgn_u16::return#4
  to:bitmap_line::@15
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@14
  (word) bitmap_line::y2#11 ← phi( bitmap_line::@14/(word) bitmap_line::y2#2 )
  (word) bitmap_line::x2#10 ← phi( bitmap_line::@14/(word) bitmap_line::x2#11 )
  (word) bitmap_line::sx#8 ← phi( bitmap_line::@14/(word) bitmap_line::sx#0 )
  (word) bitmap_line::y#17 ← phi( bitmap_line::@14/(word) bitmap_line::y#18 )
  (word) bitmap_line::x#17 ← phi( bitmap_line::@14/(word) bitmap_line::x#18 )
  (word) bitmap_line::dy#1 ← phi( bitmap_line::@14/(word) bitmap_line::dy#6 )
  (word) bitmap_line::dx#2 ← phi( bitmap_line::@14/(word) bitmap_line::dx#7 )
  (word) sgn_u16::return#6 ← phi( bitmap_line::@14/(word) sgn_u16::return#1 )
  (word~) bitmap_line::$11 ← (word) sgn_u16::return#6
  (word) bitmap_line::sy#0 ← (word~) bitmap_line::$11
  (bool~) bitmap_line::$12 ← (word) bitmap_line::dx#2 > (word) bitmap_line::dy#1
  if((bool~) bitmap_line::$12) goto bitmap_line::@2
  to:bitmap_line::@5
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@13
  (word) bitmap_line::y#3 ← phi( bitmap_line::@13/(word) bitmap_line::y#10 )
  (word) bitmap_line::x#3 ← phi( bitmap_line::@13/(word) bitmap_line::x#10 )
  (word) bitmap_plot::x#0 ← (word) bitmap_line::x#3
  (byte) bitmap_plot::y#0 ← (byte)(word) bitmap_line::y#3
  call bitmap_plot 
  to:bitmap_line::@16
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@4
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@16 bitmap_line::@18
  return 
  to:@return
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line::@15
  (word) bitmap_line::sy#10 ← phi( bitmap_line::@15/(word) bitmap_line::sy#0 )
  (word) bitmap_line::x2#9 ← phi( bitmap_line::@15/(word) bitmap_line::x2#10 )
  (word) bitmap_line::dx#13 ← phi( bitmap_line::@15/(word) bitmap_line::dx#2 )
  (word) bitmap_line::sx#7 ← phi( bitmap_line::@15/(word) bitmap_line::sx#8 )
  (word) bitmap_line::y#14 ← phi( bitmap_line::@15/(word) bitmap_line::y#17 )
  (word) bitmap_line::x#14 ← phi( bitmap_line::@15/(word) bitmap_line::x#17 )
  (word) bitmap_line::dy#2 ← phi( bitmap_line::@15/(word) bitmap_line::dy#1 )
  (number~) bitmap_line::$20 ← (word) bitmap_line::dy#2 / (number) 2
  (word) bitmap_line::e1#0 ← (number~) bitmap_line::$20
  to:bitmap_line::@9
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@15
  (word) bitmap_line::sx#9 ← phi( bitmap_line::@15/(word) bitmap_line::sx#8 )
  (word) bitmap_line::y2#10 ← phi( bitmap_line::@15/(word) bitmap_line::y2#11 )
  (word) bitmap_line::dy#10 ← phi( bitmap_line::@15/(word) bitmap_line::dy#1 )
  (word) bitmap_line::sy#5 ← phi( bitmap_line::@15/(word) bitmap_line::sy#0 )
  (word) bitmap_line::y#11 ← phi( bitmap_line::@15/(word) bitmap_line::y#17 )
  (word) bitmap_line::x#11 ← phi( bitmap_line::@15/(word) bitmap_line::x#17 )
  (word) bitmap_line::dx#3 ← phi( bitmap_line::@15/(word) bitmap_line::dx#2 )
  (number~) bitmap_line::$15 ← (word) bitmap_line::dx#3 / (number) 2
  (word) bitmap_line::e#0 ← (number~) bitmap_line::$15
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5 bitmap_line::@7
  (word) bitmap_line::sx#5 ← phi( bitmap_line::@5/(word) bitmap_line::sx#9 bitmap_line::@7/(word) bitmap_line::sx#10 )
  (word) bitmap_line::y2#9 ← phi( bitmap_line::@5/(word) bitmap_line::y2#10 bitmap_line::@7/(word) bitmap_line::y2#3 )
  (word) bitmap_line::dy#7 ← phi( bitmap_line::@5/(word) bitmap_line::dy#10 bitmap_line::@7/(word) bitmap_line::dy#11 )
  (word) bitmap_line::dx#8 ← phi( bitmap_line::@5/(word) bitmap_line::dx#3 bitmap_line::@7/(word) bitmap_line::dx#11 )
  (word) bitmap_line::e#5 ← phi( bitmap_line::@5/(word) bitmap_line::e#0 bitmap_line::@7/(word) bitmap_line::e#6 )
  (word) bitmap_line::sy#3 ← phi( bitmap_line::@5/(word) bitmap_line::sy#5 bitmap_line::@7/(word) bitmap_line::sy#6 )
  (word) bitmap_line::y#4 ← phi( bitmap_line::@5/(word) bitmap_line::y#11 bitmap_line::@7/(word) bitmap_line::y#6 )
  (word) bitmap_line::x#4 ← phi( bitmap_line::@5/(word) bitmap_line::x#11 bitmap_line::@7/(word) bitmap_line::x#12 )
  (word) bitmap_plot::x#1 ← (word) bitmap_line::x#4
  (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4
  call bitmap_plot 
  to:bitmap_line::@17
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@6
  (word) bitmap_line::sx#3 ← phi( bitmap_line::@6/(word) bitmap_line::sx#5 )
  (word) bitmap_line::x#13 ← phi( bitmap_line::@6/(word) bitmap_line::x#4 )
  (word) bitmap_line::y2#6 ← phi( bitmap_line::@6/(word) bitmap_line::y2#9 )
  (word) bitmap_line::dy#3 ← phi( bitmap_line::@6/(word) bitmap_line::dy#7 )
  (word) bitmap_line::dx#4 ← phi( bitmap_line::@6/(word) bitmap_line::dx#8 )
  (word) bitmap_line::e#3 ← phi( bitmap_line::@6/(word) bitmap_line::e#5 )
  (word) bitmap_line::sy#1 ← phi( bitmap_line::@6/(word) bitmap_line::sy#3 )
  (word) bitmap_line::y#5 ← phi( bitmap_line::@6/(word) bitmap_line::y#4 )
  (word) bitmap_line::y#1 ← (word) bitmap_line::y#5 + (word) bitmap_line::sy#1
  (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#4
  (bool~) bitmap_line::$17 ← (word) bitmap_line::dy#3 < (word) bitmap_line::e#1
  (bool~) bitmap_line::$18 ← ! (bool~) bitmap_line::$17
  if((bool~) bitmap_line::$18) goto bitmap_line::@7
  to:bitmap_line::@8
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@17 bitmap_line::@8
  (word) bitmap_line::sx#10 ← phi( bitmap_line::@17/(word) bitmap_line::sx#3 bitmap_line::@8/(word) bitmap_line::sx#1 )
  (word) bitmap_line::dy#11 ← phi( bitmap_line::@17/(word) bitmap_line::dy#3 bitmap_line::@8/(word) bitmap_line::dy#4 )
  (word) bitmap_line::dx#11 ← phi( bitmap_line::@17/(word) bitmap_line::dx#4 bitmap_line::@8/(word) bitmap_line::dx#14 )
  (word) bitmap_line::e#6 ← phi( bitmap_line::@17/(word) bitmap_line::e#1 bitmap_line::@8/(word) bitmap_line::e#2 )
  (word) bitmap_line::sy#6 ← phi( bitmap_line::@17/(word) bitmap_line::sy#1 bitmap_line::@8/(word) bitmap_line::sy#8 )
  (word) bitmap_line::x#12 ← phi( bitmap_line::@17/(word) bitmap_line::x#13 bitmap_line::@8/(word) bitmap_line::x#1 )
  (word) bitmap_line::y2#3 ← phi( bitmap_line::@17/(word) bitmap_line::y2#6 bitmap_line::@8/(word) bitmap_line::y2#7 )
  (word) bitmap_line::y#6 ← phi( bitmap_line::@17/(word) bitmap_line::y#1 bitmap_line::@8/(word) bitmap_line::y#12 )
  (bool~) bitmap_line::$19 ← (word) bitmap_line::y#6 != (word) bitmap_line::y2#3
  if((bool~) bitmap_line::$19) goto bitmap_line::@6
  to:bitmap_line::@3
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@17
  (word) bitmap_line::dx#14 ← phi( bitmap_line::@17/(word) bitmap_line::dx#4 )
  (word) bitmap_line::sy#8 ← phi( bitmap_line::@17/(word) bitmap_line::sy#1 )
  (word) bitmap_line::y2#7 ← phi( bitmap_line::@17/(word) bitmap_line::y2#6 )
  (word) bitmap_line::y#12 ← phi( bitmap_line::@17/(word) bitmap_line::y#1 )
  (word) bitmap_line::dy#4 ← phi( bitmap_line::@17/(word) bitmap_line::dy#3 )
  (word) bitmap_line::e#4 ← phi( bitmap_line::@17/(word) bitmap_line::e#1 )
  (word) bitmap_line::sx#1 ← phi( bitmap_line::@17/(word) bitmap_line::sx#3 )
  (word) bitmap_line::x#5 ← phi( bitmap_line::@17/(word) bitmap_line::x#13 )
  (word) bitmap_line::x#1 ← (word) bitmap_line::x#5 + (word) bitmap_line::sx#1
  (word) bitmap_line::e#2 ← (word) bitmap_line::e#4 - (word) bitmap_line::dy#4
  to:bitmap_line::@7
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@7
  (word) bitmap_line::y#7 ← phi( bitmap_line::@10/(word) bitmap_line::y#13 bitmap_line::@7/(word) bitmap_line::y#6 )
  (word) bitmap_line::x#6 ← phi( bitmap_line::@10/(word) bitmap_line::x#9 bitmap_line::@7/(word) bitmap_line::x#12 )
  (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6
  (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7
  call bitmap_plot 
  to:bitmap_line::@18
bitmap_line::@18: scope:[bitmap_line]  from bitmap_line::@3
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@2
  (word) bitmap_line::sy#7 ← phi( bitmap_line::@10/(word) bitmap_line::sy#9 bitmap_line::@2/(word) bitmap_line::sy#10 )
  (word) bitmap_line::x2#8 ← phi( bitmap_line::@10/(word) bitmap_line::x2#3 bitmap_line::@2/(word) bitmap_line::x2#9 )
  (word) bitmap_line::dx#9 ← phi( bitmap_line::@10/(word) bitmap_line::dx#12 bitmap_line::@2/(word) bitmap_line::dx#13 )
  (word) bitmap_line::dy#8 ← phi( bitmap_line::@10/(word) bitmap_line::dy#12 bitmap_line::@2/(word) bitmap_line::dy#2 )
  (word) bitmap_line::e1#5 ← phi( bitmap_line::@10/(word) bitmap_line::e1#6 bitmap_line::@2/(word) bitmap_line::e1#0 )
  (word) bitmap_line::sx#4 ← phi( bitmap_line::@10/(word) bitmap_line::sx#6 bitmap_line::@2/(word) bitmap_line::sx#7 )
  (word) bitmap_line::y#8 ← phi( bitmap_line::@10/(word) bitmap_line::y#13 bitmap_line::@2/(word) bitmap_line::y#14 )
  (word) bitmap_line::x#7 ← phi( bitmap_line::@10/(word) bitmap_line::x#9 bitmap_line::@2/(word) bitmap_line::x#14 )
  (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7
  (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#8
  call bitmap_plot 
  to:bitmap_line::@19
bitmap_line::@19: scope:[bitmap_line]  from bitmap_line::@9
  (word) bitmap_line::sy#4 ← phi( bitmap_line::@9/(word) bitmap_line::sy#7 )
  (word) bitmap_line::y#15 ← phi( bitmap_line::@9/(word) bitmap_line::y#8 )
  (word) bitmap_line::x2#6 ← phi( bitmap_line::@9/(word) bitmap_line::x2#8 )
  (word) bitmap_line::dx#5 ← phi( bitmap_line::@9/(word) bitmap_line::dx#9 )
  (word) bitmap_line::dy#5 ← phi( bitmap_line::@9/(word) bitmap_line::dy#8 )
  (word) bitmap_line::e1#3 ← phi( bitmap_line::@9/(word) bitmap_line::e1#5 )
  (word) bitmap_line::sx#2 ← phi( bitmap_line::@9/(word) bitmap_line::sx#4 )
  (word) bitmap_line::x#8 ← phi( bitmap_line::@9/(word) bitmap_line::x#7 )
  (word) bitmap_line::x#2 ← (word) bitmap_line::x#8 + (word) bitmap_line::sx#2
  (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#5
  (bool~) bitmap_line::$22 ← (word) bitmap_line::dx#5 < (word) bitmap_line::e1#1
  (bool~) bitmap_line::$23 ← ! (bool~) bitmap_line::$22
  if((bool~) bitmap_line::$23) goto bitmap_line::@10
  to:bitmap_line::@11
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@11 bitmap_line::@19
  (word) bitmap_line::sy#9 ← phi( bitmap_line::@11/(word) bitmap_line::sy#2 bitmap_line::@19/(word) bitmap_line::sy#4 )
  (word) bitmap_line::dx#12 ← phi( bitmap_line::@11/(word) bitmap_line::dx#6 bitmap_line::@19/(word) bitmap_line::dx#5 )
  (word) bitmap_line::dy#12 ← phi( bitmap_line::@11/(word) bitmap_line::dy#13 bitmap_line::@19/(word) bitmap_line::dy#5 )
  (word) bitmap_line::e1#6 ← phi( bitmap_line::@11/(word) bitmap_line::e1#2 bitmap_line::@19/(word) bitmap_line::e1#1 )
  (word) bitmap_line::sx#6 ← phi( bitmap_line::@11/(word) bitmap_line::sx#11 bitmap_line::@19/(word) bitmap_line::sx#2 )
  (word) bitmap_line::y#13 ← phi( bitmap_line::@11/(word) bitmap_line::y#2 bitmap_line::@19/(word) bitmap_line::y#15 )
  (word) bitmap_line::x2#3 ← phi( bitmap_line::@11/(word) bitmap_line::x2#5 bitmap_line::@19/(word) bitmap_line::x2#6 )
  (word) bitmap_line::x#9 ← phi( bitmap_line::@11/(word) bitmap_line::x#15 bitmap_line::@19/(word) bitmap_line::x#2 )
  (bool~) bitmap_line::$24 ← (word) bitmap_line::x#9 != (word) bitmap_line::x2#3
  if((bool~) bitmap_line::$24) goto bitmap_line::@9
  to:bitmap_line::@3
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@19
  (word) bitmap_line::dy#13 ← phi( bitmap_line::@19/(word) bitmap_line::dy#5 )
  (word) bitmap_line::sx#11 ← phi( bitmap_line::@19/(word) bitmap_line::sx#2 )
  (word) bitmap_line::x2#5 ← phi( bitmap_line::@19/(word) bitmap_line::x2#6 )
  (word) bitmap_line::x#15 ← phi( bitmap_line::@19/(word) bitmap_line::x#2 )
  (word) bitmap_line::dx#6 ← phi( bitmap_line::@19/(word) bitmap_line::dx#5 )
  (word) bitmap_line::e1#4 ← phi( bitmap_line::@19/(word) bitmap_line::e1#1 )
  (word) bitmap_line::sy#2 ← phi( bitmap_line::@19/(word) bitmap_line::sy#4 )
  (word) bitmap_line::y#9 ← phi( bitmap_line::@19/(word) bitmap_line::y#15 )
  (word) bitmap_line::y#2 ← (word) bitmap_line::y#9 + (word) bitmap_line::sy#2
  (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#4 - (word) bitmap_line::dx#6
  to:bitmap_line::@10

(word()) abs_u16((word) abs_u16::w)
abs_u16: scope:[abs_u16]  from bitmap_line bitmap_line::@12
  (word) abs_u16::w#2 ← phi( bitmap_line/(word) abs_u16::w#0 bitmap_line::@12/(word) abs_u16::w#1 )
  (byte~) abs_u16::$0 ← > (word) abs_u16::w#2
  (number~) abs_u16::$1 ← (byte~) abs_u16::$0 & (number) $80
  (bool~) abs_u16::$3 ← (number) 0 != (number~) abs_u16::$1
  if((bool~) abs_u16::$3) goto abs_u16::@1
  to:abs_u16::@2
abs_u16::@1: scope:[abs_u16]  from abs_u16
  (word) abs_u16::w#3 ← phi( abs_u16/(word) abs_u16::w#2 )
  (word~) abs_u16::$2 ← - (word) abs_u16::w#3
  (word) abs_u16::return#2 ← (word~) abs_u16::$2
  to:abs_u16::@return
abs_u16::@2: scope:[abs_u16]  from abs_u16
  (word) abs_u16::w#4 ← phi( abs_u16/(word) abs_u16::w#2 )
  (word) abs_u16::return#3 ← (word) abs_u16::w#4
  to:abs_u16::@return
abs_u16::@return: scope:[abs_u16]  from abs_u16::@1 abs_u16::@2
  (word) abs_u16::return#7 ← phi( abs_u16::@1/(word) abs_u16::return#2 abs_u16::@2/(word) abs_u16::return#3 )
  (word) abs_u16::return#4 ← (word) abs_u16::return#7
  return 
  to:@return

(word()) sgn_u16((word) sgn_u16::w)
sgn_u16: scope:[sgn_u16]  from bitmap_line::@1 bitmap_line::@14
  (word) sgn_u16::w#2 ← phi( bitmap_line::@1/(word) sgn_u16::w#0 bitmap_line::@14/(word) sgn_u16::w#1 )
  (byte~) sgn_u16::$0 ← > (word) sgn_u16::w#2
  (number~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (number) $80
  (bool~) sgn_u16::$2 ← (number) 0 != (number~) sgn_u16::$1
  if((bool~) sgn_u16::$2) goto sgn_u16::@1
  to:sgn_u16::@2
sgn_u16::@1: scope:[sgn_u16]  from sgn_u16
  (word) sgn_u16::return#2 ← (number) -1
  to:sgn_u16::@return
sgn_u16::@2: scope:[sgn_u16]  from sgn_u16
  (word) sgn_u16::return#3 ← (number) 1
  to:sgn_u16::@return
sgn_u16::@return: scope:[sgn_u16]  from sgn_u16::@1 sgn_u16::@2
  (word) sgn_u16::return#7 ← phi( sgn_u16::@1/(word) sgn_u16::return#2 sgn_u16::@2/(word) sgn_u16::return#3 )
  (word) sgn_u16::return#4 ← (word) sgn_u16::return#7
  return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  (word) next#15 ← phi( _start::@1/(word) next#13 )
  (byte*) bitmap_screen#14 ← phi( _start::@1/(byte*) bitmap_screen#16 )
  (byte*) bitmap_gfx#15 ← phi( _start::@1/(byte*) bitmap_gfx#17 )
  *((const nomodify byte*) BORDER_COLOR) ← (number) 0
  *((const nomodify byte*) BG_COLOR) ← (number) 0
  *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
  *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(number) $3fff/(number) $40|(word)(const nomodify byte*) BITMAP&(number) $3fff/(number) $400
  (byte*) bitmap_init::gfx#0 ← (const nomodify byte*) BITMAP
  (byte*) bitmap_init::screen#0 ← (const nomodify byte*) SCREEN
  call bitmap_init 
  to:main::@4
main::@4: scope:[main]  from main
  (word) next#14 ← phi( main/(word) next#15 )
  (byte*) bitmap_screen#9 ← phi( main/(byte*) bitmap_screen#1 )
  (byte*) bitmap_gfx#9 ← phi( main/(byte*) bitmap_gfx#1 )
  (byte*) bitmap_gfx#2 ← (byte*) bitmap_gfx#9
  (byte*) bitmap_screen#2 ← (byte*) bitmap_screen#9
  (byte) bitmap_clear::bgcol#0 ← (const nomodify byte) PURPLE
  (byte) bitmap_clear::fgcol#0 ← (const nomodify byte) WHITE
  call bitmap_clear 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) bitmap_screen#24 ← phi( main::@4/(byte*) bitmap_screen#2 )
  (byte*) bitmap_gfx#25 ← phi( main::@4/(byte*) bitmap_gfx#2 )
  (word) next#12 ← phi( main::@4/(word) next#14 )
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@5
  (byte*) bitmap_screen#22 ← phi( main::@2/(byte*) bitmap_screen#15 main::@5/(byte*) bitmap_screen#24 )
  (byte*) bitmap_gfx#23 ← phi( main::@2/(byte*) bitmap_gfx#16 main::@5/(byte*) bitmap_gfx#25 )
  (word) next#6 ← phi( main::@2/(word) next#11 main::@5/(word) next#12 )
  (word) bitmap_line::x1#0 ← (number) 0
  (word) bitmap_line::y1#0 ← (number) 0
  (word) bitmap_line::x2#0 ← (word) next#6
  (word) bitmap_line::y2#0 ← (number) $64
  call bitmap_line 
  to:main::@6
main::@6: scope:[main]  from main::@1
  (byte*) bitmap_screen#20 ← phi( main::@1/(byte*) bitmap_screen#22 )
  (byte*) bitmap_gfx#21 ← phi( main::@1/(byte*) bitmap_gfx#23 )
  (word) next#7 ← phi( main::@1/(word) next#6 )
  (word) next#0 ← ++ (word) next#7
  (bool~) main::$3 ← (word) next#0 == (number) $140
  (bool~) main::$4 ← ! (bool~) main::$3
  if((bool~) main::$4) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@3 main::@6
  (byte*) bitmap_screen#15 ← phi( main::@3/(byte*) bitmap_screen#19 main::@6/(byte*) bitmap_screen#20 )
  (byte*) bitmap_gfx#16 ← phi( main::@3/(byte*) bitmap_gfx#20 main::@6/(byte*) bitmap_gfx#21 )
  (word) next#11 ← phi( main::@3/(word) next#1 main::@6/(word) next#0 )
  if(true) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@6
  (byte*) bitmap_screen#19 ← phi( main::@6/(byte*) bitmap_screen#20 )
  (byte*) bitmap_gfx#20 ← phi( main::@6/(byte*) bitmap_gfx#21 )
  (word) next#1 ← (number) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  (word) next#8 ← phi( main::@2/(word) next#11 )
  (byte*) bitmap_screen#10 ← phi( main::@2/(byte*) bitmap_screen#15 )
  (byte*) bitmap_gfx#10 ← phi( main::@2/(byte*) bitmap_gfx#16 )
  (byte*) bitmap_gfx#3 ← (byte*) bitmap_gfx#10
  (byte*) bitmap_screen#3 ← (byte*) bitmap_screen#10
  (word) next#2 ← (word) next#8
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte*) bitmap_screen#4 ← (byte*) 0
  (byte*) bitmap_gfx#4 ← (byte*) 0
  (word) next#3 ← (word) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (word) next#13 ← phi( _start::_init1/(word) next#3 )
  (byte*) bitmap_screen#16 ← phi( _start::_init1/(byte*) bitmap_screen#4 )
  (byte*) bitmap_gfx#17 ← phi( _start::_init1/(byte*) bitmap_gfx#4 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (word) next#9 ← phi( _start::@1/(word) next#2 )
  (byte*) bitmap_screen#11 ← phi( _start::@1/(byte*) bitmap_screen#3 )
  (byte*) bitmap_gfx#11 ← phi( _start::@1/(byte*) bitmap_gfx#3 )
  (byte*) bitmap_gfx#5 ← (byte*) bitmap_gfx#11
  (byte*) bitmap_screen#5 ← (byte*) bitmap_screen#11
  (word) next#4 ← (word) next#9
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (word) next#10 ← phi( _start::@2/(word) next#4 )
  (byte*) bitmap_gfx#12 ← phi( _start::@2/(byte*) bitmap_gfx#5 )
  (byte*) bitmap_screen#12 ← phi( _start::@2/(byte*) bitmap_screen#5 )
  (byte*) bitmap_screen#6 ← (byte*) bitmap_screen#12
  (byte*) bitmap_gfx#6 ← (byte*) bitmap_gfx#12
  (word) next#5 ← (word) next#10
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) BG_COLOR = (byte*)(number) $d021
(const nomodify byte*) BITMAP = (byte*)(number) $2000
(const nomodify byte*) BORDER_COLOR = (byte*)(number) $d020
(const nomodify byte*) D011 = (byte*)(number) $d011
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const nomodify byte) PURPLE = (byte) 4
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const nomodify byte) VIC_BMM = (byte) $20
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte*) VIC_MEMORY = (byte*)(number) $d018
(const nomodify byte) VIC_RSEL = (byte) 8
(const nomodify byte) WHITE = (byte) 1
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(word()) abs_u16((word) abs_u16::w)
(byte~) abs_u16::$0
(number~) abs_u16::$1
(word~) abs_u16::$2
(bool~) abs_u16::$3
(label) abs_u16::@1
(label) abs_u16::@2
(label) abs_u16::@return
(word) abs_u16::return
(word) abs_u16::return#0
(word) abs_u16::return#1
(word) abs_u16::return#2
(word) abs_u16::return#3
(word) abs_u16::return#4
(word) abs_u16::return#5
(word) abs_u16::return#6
(word) abs_u16::return#7
(word) abs_u16::w
(word) abs_u16::w#0
(word) abs_u16::w#1
(word) abs_u16::w#2
(word) abs_u16::w#3
(word) abs_u16::w#4
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(number~) bitmap_clear::$0
(number~) bitmap_clear::$1
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@return
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::bgcol#0
(byte) bitmap_clear::bgcol#1
(byte) bitmap_clear::col
(byte) bitmap_clear::col#0
(byte) bitmap_clear::fgcol
(byte) bitmap_clear::fgcol#0
(byte) bitmap_clear::fgcol#1
(byte*) bitmap_gfx
(byte*) bitmap_gfx#0
(byte*) bitmap_gfx#1
(byte*) bitmap_gfx#10
(byte*) bitmap_gfx#11
(byte*) bitmap_gfx#12
(byte*) bitmap_gfx#13
(byte*) bitmap_gfx#14
(byte*) bitmap_gfx#15
(byte*) bitmap_gfx#16
(byte*) bitmap_gfx#17
(byte*) bitmap_gfx#18
(byte*) bitmap_gfx#19
(byte*) bitmap_gfx#2
(byte*) bitmap_gfx#20
(byte*) bitmap_gfx#21
(byte*) bitmap_gfx#22
(byte*) bitmap_gfx#23
(byte*) bitmap_gfx#24
(byte*) bitmap_gfx#25
(byte*) bitmap_gfx#26
(byte*) bitmap_gfx#27
(byte*) bitmap_gfx#3
(byte*) bitmap_gfx#4
(byte*) bitmap_gfx#5
(byte*) bitmap_gfx#6
(byte*) bitmap_gfx#7
(byte*) bitmap_gfx#8
(byte*) bitmap_gfx#9
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(bool~) bitmap_init::$0
(bool~) bitmap_init::$1
(byte*~) bitmap_init::$10
(bool~) bitmap_init::$11
(bool~) bitmap_init::$2
(number~) bitmap_init::$3
(byte~) bitmap_init::$4
(number~) bitmap_init::$5
(byte~) bitmap_init::$6
(number~) bitmap_init::$7
(bool~) bitmap_init::$8
(bool~) bitmap_init::$9
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte) bitmap_init::bits
(byte) bitmap_init::bits#0
(byte) bitmap_init::bits#1
(byte) bitmap_init::bits#2
(byte) bitmap_init::bits#3
(byte) bitmap_init::bits#4
(byte*) bitmap_init::gfx
(byte*) bitmap_init::gfx#0
(byte*) bitmap_init::gfx#1
(byte*) bitmap_init::gfx#2
(byte*) bitmap_init::gfx#3
(byte*) bitmap_init::gfx#4
(byte*) bitmap_init::gfx#5
(byte*) bitmap_init::screen
(byte*) bitmap_init::screen#0
(byte*) bitmap_init::screen#1
(byte) bitmap_init::x
(byte) bitmap_init::x#0
(byte) bitmap_init::x#1
(byte) bitmap_init::x#2
(byte) bitmap_init::x#3
(byte) bitmap_init::x#4
(byte) bitmap_init::y
(byte) bitmap_init::y#0
(byte) bitmap_init::y#1
(byte) bitmap_init::y#2
(byte) bitmap_init::y#3
(byte) bitmap_init::y#4
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#0
(byte*) bitmap_init::yoffs#1
(byte*) bitmap_init::yoffs#2
(byte*) bitmap_init::yoffs#3
(byte*) bitmap_init::yoffs#4
(void()) bitmap_line((word) bitmap_line::x1 , (word) bitmap_line::y1 , (word) bitmap_line::x2 , (word) bitmap_line::y2)
(word~) bitmap_line::$0
(word~) bitmap_line::$1
(word~) bitmap_line::$10
(word~) bitmap_line::$11
(bool~) bitmap_line::$12
(number~) bitmap_line::$15
(bool~) bitmap_line::$17
(bool~) bitmap_line::$18
(bool~) bitmap_line::$19
(word~) bitmap_line::$2
(number~) bitmap_line::$20
(bool~) bitmap_line::$22
(bool~) bitmap_line::$23
(bool~) bitmap_line::$24
(word~) bitmap_line::$3
(bool~) bitmap_line::$4
(bool~) bitmap_line::$5
(bool~) bitmap_line::$6
(bool~) bitmap_line::$7
(word~) bitmap_line::$8
(word~) bitmap_line::$9
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@11
(label) bitmap_line::@12
(label) bitmap_line::@13
(label) bitmap_line::@14
(label) bitmap_line::@15
(label) bitmap_line::@16
(label) bitmap_line::@17
(label) bitmap_line::@18
(label) bitmap_line::@19
(label) bitmap_line::@2
(label) bitmap_line::@3
(label) bitmap_line::@4
(label) bitmap_line::@5
(label) bitmap_line::@6
(label) bitmap_line::@7
(label) bitmap_line::@8
(label) bitmap_line::@9
(label) bitmap_line::@return
(word) bitmap_line::dx
(word) bitmap_line::dx#0
(word) bitmap_line::dx#1
(word) bitmap_line::dx#10
(word) bitmap_line::dx#11
(word) bitmap_line::dx#12
(word) bitmap_line::dx#13
(word) bitmap_line::dx#14
(word) bitmap_line::dx#2
(word) bitmap_line::dx#3
(word) bitmap_line::dx#4
(word) bitmap_line::dx#5
(word) bitmap_line::dx#6
(word) bitmap_line::dx#7
(word) bitmap_line::dx#8
(word) bitmap_line::dx#9
(word) bitmap_line::dy
(word) bitmap_line::dy#0
(word) bitmap_line::dy#1
(word) bitmap_line::dy#10
(word) bitmap_line::dy#11
(word) bitmap_line::dy#12
(word) bitmap_line::dy#13
(word) bitmap_line::dy#2
(word) bitmap_line::dy#3
(word) bitmap_line::dy#4
(word) bitmap_line::dy#5
(word) bitmap_line::dy#6
(word) bitmap_line::dy#7
(word) bitmap_line::dy#8
(word) bitmap_line::dy#9
(word) bitmap_line::e
(word) bitmap_line::e#0
(word) bitmap_line::e#1
(word) bitmap_line::e#2
(word) bitmap_line::e#3
(word) bitmap_line::e#4
(word) bitmap_line::e#5
(word) bitmap_line::e#6
(word) bitmap_line::e1
(word) bitmap_line::e1#0
(word) bitmap_line::e1#1
(word) bitmap_line::e1#2
(word) bitmap_line::e1#3
(word) bitmap_line::e1#4
(word) bitmap_line::e1#5
(word) bitmap_line::e1#6
(word) bitmap_line::sx
(word) bitmap_line::sx#0
(word) bitmap_line::sx#1
(word) bitmap_line::sx#10
(word) bitmap_line::sx#11
(word) bitmap_line::sx#2
(word) bitmap_line::sx#3
(word) bitmap_line::sx#4
(word) bitmap_line::sx#5
(word) bitmap_line::sx#6
(word) bitmap_line::sx#7
(word) bitmap_line::sx#8
(word) bitmap_line::sx#9
(word) bitmap_line::sy
(word) bitmap_line::sy#0
(word) bitmap_line::sy#1
(word) bitmap_line::sy#10
(word) bitmap_line::sy#2
(word) bitmap_line::sy#3
(word) bitmap_line::sy#4
(word) bitmap_line::sy#5
(word) bitmap_line::sy#6
(word) bitmap_line::sy#7
(word) bitmap_line::sy#8
(word) bitmap_line::sy#9
(word) bitmap_line::x
(word) bitmap_line::x#0
(word) bitmap_line::x#1
(word) bitmap_line::x#10
(word) bitmap_line::x#11
(word) bitmap_line::x#12
(word) bitmap_line::x#13
(word) bitmap_line::x#14
(word) bitmap_line::x#15
(word) bitmap_line::x#16
(word) bitmap_line::x#17
(word) bitmap_line::x#18
(word) bitmap_line::x#19
(word) bitmap_line::x#2
(word) bitmap_line::x#3
(word) bitmap_line::x#4
(word) bitmap_line::x#5
(word) bitmap_line::x#6
(word) bitmap_line::x#7
(word) bitmap_line::x#8
(word) bitmap_line::x#9
(word) bitmap_line::x1
(word) bitmap_line::x1#0
(word) bitmap_line::x1#1
(word) bitmap_line::x1#2
(word) bitmap_line::x1#3
(word) bitmap_line::x1#4
(word) bitmap_line::x2
(word) bitmap_line::x2#0
(word) bitmap_line::x2#1
(word) bitmap_line::x2#10
(word) bitmap_line::x2#11
(word) bitmap_line::x2#2
(word) bitmap_line::x2#3
(word) bitmap_line::x2#4
(word) bitmap_line::x2#5
(word) bitmap_line::x2#6
(word) bitmap_line::x2#7
(word) bitmap_line::x2#8
(word) bitmap_line::x2#9
(word) bitmap_line::y
(word) bitmap_line::y#0
(word) bitmap_line::y#1
(word) bitmap_line::y#10
(word) bitmap_line::y#11
(word) bitmap_line::y#12
(word) bitmap_line::y#13
(word) bitmap_line::y#14
(word) bitmap_line::y#15
(word) bitmap_line::y#16
(word) bitmap_line::y#17
(word) bitmap_line::y#18
(word) bitmap_line::y#19
(word) bitmap_line::y#2
(word) bitmap_line::y#3
(word) bitmap_line::y#4
(word) bitmap_line::y#5
(word) bitmap_line::y#6
(word) bitmap_line::y#7
(word) bitmap_line::y#8
(word) bitmap_line::y#9
(word) bitmap_line::y1
(word) bitmap_line::y1#0
(word) bitmap_line::y1#1
(word) bitmap_line::y1#2
(word) bitmap_line::y1#3
(word) bitmap_line::y1#4
(word) bitmap_line::y1#5
(word) bitmap_line::y2
(word) bitmap_line::y2#0
(word) bitmap_line::y2#1
(word) bitmap_line::y2#10
(word) bitmap_line::y2#11
(word) bitmap_line::y2#2
(word) bitmap_line::y2#3
(word) bitmap_line::y2#4
(word) bitmap_line::y2#5
(word) bitmap_line::y2#6
(word) bitmap_line::y2#7
(word) bitmap_line::y2#8
(word) bitmap_line::y2#9
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(number~) bitmap_plot::$0
(byte~) bitmap_plot::$1
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#0
(byte*) bitmap_plot::plotter#1
(word) bitmap_plot::x
(word) bitmap_plot::x#0
(word) bitmap_plot::x#1
(word) bitmap_plot::x#2
(word) bitmap_plot::x#3
(word) bitmap_plot::x#4
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0
(byte) bitmap_plot::y#1
(byte) bitmap_plot::y#2
(byte) bitmap_plot::y#3
(byte) bitmap_plot::y#4
(const to_nomodify byte*) bitmap_plot_bit[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_yhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_ylo[(number) $100]  = { fill( $100, 0) }
(byte*) bitmap_screen
(byte*) bitmap_screen#0
(byte*) bitmap_screen#1
(byte*) bitmap_screen#10
(byte*) bitmap_screen#11
(byte*) bitmap_screen#12
(byte*) bitmap_screen#13
(byte*) bitmap_screen#14
(byte*) bitmap_screen#15
(byte*) bitmap_screen#16
(byte*) bitmap_screen#17
(byte*) bitmap_screen#18
(byte*) bitmap_screen#19
(byte*) bitmap_screen#2
(byte*) bitmap_screen#20
(byte*) bitmap_screen#21
(byte*) bitmap_screen#22
(byte*) bitmap_screen#23
(byte*) bitmap_screen#24
(byte*) bitmap_screen#25
(byte*) bitmap_screen#26
(byte*) bitmap_screen#3
(byte*) bitmap_screen#4
(byte*) bitmap_screen#5
(byte*) bitmap_screen#6
(byte*) bitmap_screen#7
(byte*) bitmap_screen#8
(byte*) bitmap_screen#9
(void()) main()
(bool~) main::$3
(bool~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(word) next
(word) next#0
(word) next#1
(word) next#10
(word) next#11
(word) next#12
(word) next#13
(word) next#14
(word) next#15
(word) next#2
(word) next#3
(word) next#4
(word) next#5
(word) next#6
(word) next#7
(word) next#8
(word) next#9
(word()) sgn_u16((word) sgn_u16::w)
(byte~) sgn_u16::$0
(number~) sgn_u16::$1
(bool~) sgn_u16::$2
(label) sgn_u16::@1
(label) sgn_u16::@2
(label) sgn_u16::@return
(word) sgn_u16::return
(word) sgn_u16::return#0
(word) sgn_u16::return#1
(word) sgn_u16::return#2
(word) sgn_u16::return#3
(word) sgn_u16::return#4
(word) sgn_u16::return#5
(word) sgn_u16::return#6
(word) sgn_u16::return#7
(word) sgn_u16::w
(word) sgn_u16::w#0
(word) sgn_u16::w#1
(word) sgn_u16::w#2

Fixing inline constructor with bitmap_plot::$2 ← (byte)*(bitmap_plot_yhi + bitmap_plot::y#4) w= (byte)*(bitmap_plot_ylo + bitmap_plot::y#4)
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 1 in (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (number) 1
Adding number conversion cast (unumber) 0 in (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (number) 0
Adding number conversion cast (unumber) $80 in (byte) bitmap_init::bits#2 ← (number) $80
Adding number conversion cast (unumber) 7 in (number~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (number) 7
Adding number conversion cast (unumber) bitmap_init::$3 in (number~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) bitmap_init::$5 in (number~) bitmap_init::$5 ← (unumber~) bitmap_init::$3 | (byte~) bitmap_init::$4
Adding number conversion cast (unumber) 7 in (number~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (number) 7
Adding number conversion cast (unumber) bitmap_init::$7 in (number~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) 7 in (bool~) bitmap_init::$8 ← (unumber~) bitmap_init::$7 == (number) 7
Adding number conversion cast (unumber) $28*8 in (byte*~) bitmap_init::$10 ← (byte*) bitmap_init::yoffs#3 + (number) $28*(number) 8
Adding number conversion cast (unumber) $10 in (number~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#1 * (number) $10
Adding number conversion cast (unumber) bitmap_clear::$0 in (number~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#1 * (unumber)(number) $10
Adding number conversion cast (unumber) bitmap_clear::$1 in (number~) bitmap_clear::$1 ← (unumber~) bitmap_clear::$0 + (byte) bitmap_clear::bgcol#1
Adding number conversion cast (unumber) 0 in (byte) memset::c#1 ← (number) 0
Adding number conversion cast (unumber) $fff8 in (number~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (number) $fff8
Adding number conversion cast (unumber) bitmap_plot::$0 in (number~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (unumber)(number) $fff8
Adding number conversion cast (unumber) 0 in (bool~) bitmap_line::$4 ← (word) bitmap_line::dx#1 == (number) 0
Adding number conversion cast (unumber) 0 in (bool~) bitmap_line::$5 ← (word) bitmap_line::dy#0 == (number) 0
Adding number conversion cast (unumber) 2 in (number~) bitmap_line::$20 ← (word) bitmap_line::dy#2 / (number) 2
Adding number conversion cast (unumber) bitmap_line::$20 in (number~) bitmap_line::$20 ← (word) bitmap_line::dy#2 / (unumber)(number) 2
Adding number conversion cast (unumber) 2 in (number~) bitmap_line::$15 ← (word) bitmap_line::dx#3 / (number) 2
Adding number conversion cast (unumber) bitmap_line::$15 in (number~) bitmap_line::$15 ← (word) bitmap_line::dx#3 / (unumber)(number) 2
Adding number conversion cast (unumber) $80 in (number~) abs_u16::$1 ← (byte~) abs_u16::$0 & (number) $80
Adding number conversion cast (unumber) abs_u16::$1 in (number~) abs_u16::$1 ← (byte~) abs_u16::$0 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) abs_u16::$3 ← (number) 0 != (unumber~) abs_u16::$1
Adding number conversion cast (unumber) $80 in (number~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (number) $80
Adding number conversion cast (unumber) sgn_u16::$1 in (number~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) sgn_u16::$2 ← (number) 0 != (unumber~) sgn_u16::$1
Adding number conversion cast (unumber) -1 in (word) sgn_u16::return#2 ← (number) -1
Adding number conversion cast (unumber) 1 in (word) sgn_u16::return#3 ← (number) 1
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) BORDER_COLOR) ← (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) BG_COLOR) ← (number) 0
Adding number conversion cast (unumber) VIC_BMM|VIC_DEN|VIC_RSEL|3 in *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) D011) ← ((unumber)) (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) $3fff in *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(number) $3fff/(number) $40|(word)(const nomodify byte*) BITMAP&(number) $3fff/(number) $400
Adding number conversion cast (unumber) $3fff in *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(unumber)(number) $3fff/(number) $40|(word)(const nomodify byte*) BITMAP&(number) $3fff/(number) $400
Adding number conversion cast (unumber) 0 in (word) bitmap_line::x1#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) bitmap_line::y1#0 ← (number) 0
Adding number conversion cast (unumber) $64 in (word) bitmap_line::y2#0 ← (number) $64
Adding number conversion cast (unumber) $140 in (bool~) main::$3 ← (word) next#0 == (number) $140
Adding number conversion cast (unumber) 0 in (word) next#1 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) $40 in *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(unumber)(number) $3fff/(number) $40|(word)(const nomodify byte*) BITMAP&(unumber)(number) $3fff/(number) $400
Adding number conversion cast (unumber) $400 in *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(unumber)(number) $3fff/(unumber)(number) $40|(word)(const nomodify byte*) BITMAP&(unumber)(number) $3fff/(number) $400
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) bitmap_init::bits#2 ← (unumber)(number) $80
Inlining cast (byte) memset::c#1 ← (unumber)(number) 0
Inlining cast (word) sgn_u16::return#2 ← (unumber)(number) -1
Inlining cast (word) sgn_u16::return#3 ← (unumber)(number) 1
Inlining cast *((const nomodify byte*) BORDER_COLOR) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) BG_COLOR) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) D011) ← (unumber)(const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(unumber)(number) 3
Inlining cast (word) bitmap_line::x1#0 ← (unumber)(number) 0
Inlining cast (word) bitmap_line::y1#0 ← (unumber)(number) 0
Inlining cast (word) bitmap_line::y2#0 ← (unumber)(number) $64
Inlining cast (word) next#1 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 8192
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4)
Simplifying constant integer cast *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
Simplifying constant integer cast $fff8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(unumber)(number) 3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $64
Simplifying constant integer cast $140
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $fff8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) -1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $40
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $64
Finalized unsigned number type (word) $140
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4
Inferred type updated to byte in (unumber~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#1 * (byte) $10
Inferred type updated to byte in (unumber~) bitmap_clear::$1 ← (byte~) bitmap_clear::$0 + (byte) bitmap_clear::bgcol#1
Inferred type updated to word in (unumber~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8
Inferred type updated to word in (unumber~) bitmap_line::$20 ← (word) bitmap_line::dy#2 / (byte) 2
Inferred type updated to word in (unumber~) bitmap_line::$15 ← (word) bitmap_line::dx#3 / (byte) 2
Inferred type updated to byte in (unumber~) abs_u16::$1 ← (byte~) abs_u16::$0 & (byte) $80
Inferred type updated to byte in (unumber~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (byte) $80
Adding pointer type conversion cast (byte*) bitmap_plot::$2 in (byte*~) bitmap_plot::$2 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
Successful SSA optimization PassNAddTypeConversionAssignment
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [29] (bool~) bitmap_init::$1 ← (byte) bitmap_init::bits#1 != (byte) 0 from [28] (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (byte) 0
Inversing boolean not [49] (bool~) bitmap_init::$9 ← (byte~) bitmap_init::$7 != (byte) 7 from [48] (bool~) bitmap_init::$8 ← (byte~) bitmap_init::$7 == (byte) 7
Inversing boolean not [145] (bool~) bitmap_line::$18 ← (word) bitmap_line::dy#3 >= (word) bitmap_line::e#1 from [144] (bool~) bitmap_line::$17 ← (word) bitmap_line::dy#3 < (word) bitmap_line::e#1
Inversing boolean not [165] (bool~) bitmap_line::$23 ← (word) bitmap_line::dx#5 >= (word) bitmap_line::e1#1 from [164] (bool~) bitmap_line::$22 ← (word) bitmap_line::dx#5 < (word) bitmap_line::e1#1
Inversing boolean not [220] (bool~) main::$4 ← (word) next#0 != (word) $140 from [219] (bool~) main::$3 ← (word) next#0 == (word) $140
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias bitmap_init::x#2 = bitmap_init::x#4 
Alias bitmap_init::gfx#4 = bitmap_init::gfx#5 
Alias bitmap_gfx#26 = bitmap_gfx#27 
Alias bitmap_screen#25 = bitmap_screen#26 
Alias bitmap_init::gfx#2 = bitmap_init::gfx#3 bitmap_init::yoffs#0 
Alias bitmap_gfx#22 = bitmap_gfx#24 
Alias bitmap_screen#21 = bitmap_screen#23 
Alias bitmap_init::yoffs#2 = bitmap_init::yoffs#3 
Alias bitmap_init::y#2 = bitmap_init::y#4 
Alias bitmap_gfx#18 = bitmap_gfx#19 
Alias bitmap_screen#17 = bitmap_screen#18 
Alias bitmap_init::yoffs#1 = bitmap_init::$10 
Alias bitmap_gfx#1 = bitmap_gfx#7 bitmap_gfx#13 
Alias bitmap_screen#1 = bitmap_screen#7 bitmap_screen#13 
Alias bitmap_clear::col#0 = bitmap_clear::$1 
Alias bitmap_gfx#14 = bitmap_gfx#8 
Alias bitmap_plot::plotter#0 = bitmap_plot::$2 
Alias bitmap_line::x#0 = bitmap_line::x1#1 bitmap_line::x1#4 bitmap_line::x#16 bitmap_line::x1#3 bitmap_line::x#10 bitmap_line::x1#2 bitmap_line::x#19 bitmap_line::x#18 bitmap_line::x#17 bitmap_line::x#3 bitmap_line::x#14 bitmap_line::x#11 
Alias bitmap_line::y#0 = bitmap_line::y1#1 bitmap_line::y1#2 bitmap_line::y#16 bitmap_line::y#10 bitmap_line::y1#5 bitmap_line::y1#4 bitmap_line::y#19 bitmap_line::y1#3 bitmap_line::y#18 bitmap_line::y#17 bitmap_line::y#3 bitmap_line::y#14 bitmap_line::y#11 
Alias abs_u16::w#0 = bitmap_line::$0 
Alias abs_u16::return#0 = abs_u16::return#5 
Alias bitmap_line::y2#1 = bitmap_line::y2#4 bitmap_line::y2#8 bitmap_line::y2#5 bitmap_line::y2#2 bitmap_line::y2#11 bitmap_line::y2#10 
Alias bitmap_line::x2#1 = bitmap_line::x2#7 bitmap_line::x2#4 bitmap_line::x2#2 bitmap_line::x2#11 bitmap_line::x2#10 bitmap_line::x2#9 
Alias bitmap_line::dx#0 = bitmap_line::$1 bitmap_line::dx#1 bitmap_line::dx#10 bitmap_line::dx#7 bitmap_line::dx#2 bitmap_line::dx#13 bitmap_line::dx#3 
Alias abs_u16::w#1 = bitmap_line::$2 
Alias abs_u16::return#1 = abs_u16::return#6 
Alias bitmap_line::dy#0 = bitmap_line::$3 bitmap_line::dy#9 bitmap_line::dy#6 bitmap_line::dy#1 bitmap_line::dy#2 bitmap_line::dy#10 
Alias sgn_u16::w#0 = bitmap_line::$8 
Alias sgn_u16::return#0 = sgn_u16::return#5 
Alias bitmap_line::sx#0 = bitmap_line::$9 bitmap_line::sx#8 bitmap_line::sx#7 bitmap_line::sx#9 
Alias sgn_u16::w#1 = bitmap_line::$10 
Alias sgn_u16::return#1 = sgn_u16::return#6 
Alias bitmap_line::sy#0 = bitmap_line::$11 bitmap_line::sy#10 bitmap_line::sy#5 
Alias bitmap_line::e1#0 = bitmap_line::$20 
Alias bitmap_line::e#0 = bitmap_line::$15 
Alias bitmap_line::y#4 = bitmap_line::y#5 
Alias bitmap_line::sy#1 = bitmap_line::sy#3 bitmap_line::sy#8 
Alias bitmap_line::e#3 = bitmap_line::e#5 
Alias bitmap_line::dx#14 = bitmap_line::dx#4 bitmap_line::dx#8 
Alias bitmap_line::dy#3 = bitmap_line::dy#7 bitmap_line::dy#4 
Alias bitmap_line::y2#6 = bitmap_line::y2#9 bitmap_line::y2#7 
Alias bitmap_line::x#13 = bitmap_line::x#4 bitmap_line::x#5 
Alias bitmap_line::sx#1 = bitmap_line::sx#3 bitmap_line::sx#5 
Alias bitmap_line::e#1 = bitmap_line::e#4 
Alias bitmap_line::y#1 = bitmap_line::y#12 
Alias bitmap_line::x#7 = bitmap_line::x#8 
Alias bitmap_line::sx#11 = bitmap_line::sx#2 bitmap_line::sx#4 
Alias bitmap_line::e1#3 = bitmap_line::e1#5 
Alias bitmap_line::dy#13 = bitmap_line::dy#5 bitmap_line::dy#8 
Alias bitmap_line::dx#5 = bitmap_line::dx#9 bitmap_line::dx#6 
Alias bitmap_line::x2#5 = bitmap_line::x2#6 bitmap_line::x2#8 
Alias bitmap_line::y#15 = bitmap_line::y#8 bitmap_line::y#9 
Alias bitmap_line::sy#2 = bitmap_line::sy#4 bitmap_line::sy#7 
Alias bitmap_line::e1#1 = bitmap_line::e1#4 
Alias bitmap_line::x#15 = bitmap_line::x#2 
Alias abs_u16::w#2 = abs_u16::w#3 abs_u16::w#4 abs_u16::return#3 
Alias abs_u16::return#2 = abs_u16::$2 
Alias abs_u16::return#4 = abs_u16::return#7 
Alias sgn_u16::return#4 = sgn_u16::return#7 
Alias next#12 = next#14 next#15 
Alias bitmap_gfx#2 = bitmap_gfx#9 bitmap_gfx#25 
Alias bitmap_screen#2 = bitmap_screen#9 bitmap_screen#24 
Alias next#6 = next#7 
Alias bitmap_gfx#20 = bitmap_gfx#21 bitmap_gfx#23 
Alias bitmap_screen#19 = bitmap_screen#20 bitmap_screen#22 
Alias bitmap_gfx#10 = bitmap_gfx#16 bitmap_gfx#3 
Alias bitmap_screen#10 = bitmap_screen#15 bitmap_screen#3 
Alias next#11 = next#8 next#2 
Alias bitmap_gfx#17 = bitmap_gfx#4 
Alias bitmap_screen#16 = bitmap_screen#4 
Alias next#13 = next#3 
Alias bitmap_gfx#11 = bitmap_gfx#5 bitmap_gfx#12 bitmap_gfx#6 
Alias bitmap_screen#11 = bitmap_screen#5 bitmap_screen#12 bitmap_screen#6 
Alias next#10 = next#4 next#9 next#5 
Successful SSA optimization Pass2AliasElimination
Alias bitmap_init::x#2 = bitmap_init::x#3 
Alias bitmap_init::gfx#2 = bitmap_init::gfx#4 
Alias bitmap_gfx#22 = bitmap_gfx#26 
Alias bitmap_screen#21 = bitmap_screen#25 
Alias bitmap_init::y#2 = bitmap_init::y#3 
Alias bitmap_gfx#1 = bitmap_gfx#18 
Alias bitmap_screen#1 = bitmap_screen#17 
Alias bitmap_line::y#1 = bitmap_line::y#6 
Alias bitmap_line::y2#3 = bitmap_line::y2#6 
Alias bitmap_line::sy#1 = bitmap_line::sy#6 
Alias bitmap_line::dx#11 = bitmap_line::dx#14 
Alias bitmap_line::dy#11 = bitmap_line::dy#3 
Alias bitmap_line::sx#1 = bitmap_line::sx#10 
Alias bitmap_line::x#15 = bitmap_line::x#9 
Alias bitmap_line::x2#3 = bitmap_line::x2#5 
Alias bitmap_line::sx#11 = bitmap_line::sx#6 
Alias bitmap_line::dy#12 = bitmap_line::dy#13 
Alias bitmap_line::dx#12 = bitmap_line::dx#5 
Alias bitmap_line::sy#2 = bitmap_line::sy#9 
Alias bitmap_gfx#10 = bitmap_gfx#20 
Alias bitmap_screen#10 = bitmap_screen#19 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) bitmap_init::gfx#1 (byte*) bitmap_init::gfx#0
Identical Phi Values (byte*) bitmap_init::screen#1 (byte*) bitmap_init::screen#0
Identical Phi Values (byte*) bitmap_init::gfx#2 (byte*) bitmap_init::gfx#1
Identical Phi Values (byte*) bitmap_gfx#22 (byte*) bitmap_gfx#0
Identical Phi Values (byte*) bitmap_screen#21 (byte*) bitmap_screen#0
Identical Phi Values (byte*) bitmap_gfx#1 (byte*) bitmap_gfx#22
Identical Phi Values (byte*) bitmap_screen#1 (byte*) bitmap_screen#21
Identical Phi Values (byte) bitmap_clear::fgcol#1 (byte) bitmap_clear::fgcol#0
Identical Phi Values (byte) bitmap_clear::bgcol#1 (byte) bitmap_clear::bgcol#0
Identical Phi Values (byte*) bitmap_screen#8 (byte*) bitmap_screen#2
Identical Phi Values (byte*) bitmap_gfx#14 (byte*) bitmap_gfx#2
Identical Phi Values (word) bitmap_line::x#0 (word) bitmap_line::x1#0
Identical Phi Values (word) bitmap_line::y#0 (word) bitmap_line::y1#0
Identical Phi Values (word) bitmap_line::x2#1 (word) bitmap_line::x2#0
Identical Phi Values (word) bitmap_line::y2#1 (word) bitmap_line::y2#0
Identical Phi Values (word) bitmap_line::sy#1 (word) bitmap_line::sy#0
Identical Phi Values (word) bitmap_line::dx#11 (word) bitmap_line::dx#0
Identical Phi Values (word) bitmap_line::dy#11 (word) bitmap_line::dy#0
Identical Phi Values (word) bitmap_line::y2#3 (word) bitmap_line::y2#1
Identical Phi Values (word) bitmap_line::sx#1 (word) bitmap_line::sx#0
Identical Phi Values (word) bitmap_line::sx#11 (word) bitmap_line::sx#0
Identical Phi Values (word) bitmap_line::dy#12 (word) bitmap_line::dy#0
Identical Phi Values (word) bitmap_line::dx#12 (word) bitmap_line::dx#0
Identical Phi Values (word) bitmap_line::x2#3 (word) bitmap_line::x2#1
Identical Phi Values (word) bitmap_line::sy#2 (word) bitmap_line::sy#0
Identical Phi Values (byte*) bitmap_gfx#15 (byte*) bitmap_gfx#17
Identical Phi Values (byte*) bitmap_screen#14 (byte*) bitmap_screen#16
Identical Phi Values (word) next#12 (word) next#13
Identical Phi Values (byte*) bitmap_gfx#2 (byte*) bitmap_gfx#1
Identical Phi Values (byte*) bitmap_screen#2 (byte*) bitmap_screen#1
Identical Phi Values (byte*) bitmap_gfx#10 (byte*) bitmap_gfx#2
Identical Phi Values (byte*) bitmap_screen#10 (byte*) bitmap_screen#2
Identical Phi Values (byte*) bitmap_gfx#11 (byte*) bitmap_gfx#10
Identical Phi Values (byte*) bitmap_screen#11 (byte*) bitmap_screen#10
Identical Phi Values (word) next#10 (word) next#11
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [47] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) bitmap_init::$1 [22] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@2
Simple Condition (bool~) bitmap_init::$2 [26] if((byte) bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition (bool~) bitmap_init::$9 [38] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@6
Simple Condition (bool~) bitmap_init::$11 [42] if((byte) bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition (bool~) bitmap_line::$12 [90] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2
Simple Condition (bool~) bitmap_line::$18 [104] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7
Simple Condition (bool~) bitmap_line::$19 [107] if((word) bitmap_line::y#1!=(word) bitmap_line::y2#0) goto bitmap_line::@6
Simple Condition (bool~) bitmap_line::$23 [121] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10
Simple Condition (bool~) bitmap_line::$24 [124] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#0) goto bitmap_line::@9
Simple Condition (bool~) abs_u16::$3 [131] if((byte) 0!=(byte~) abs_u16::$1) goto abs_u16::@1
Simple Condition (bool~) sgn_u16::$2 [139] if((byte) 0!=(byte~) sgn_u16::$1) goto sgn_u16::@1
Simple Condition (bool~) main::$4 [164] if((word) next#0!=(word) $140) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [79] (bool~) bitmap_line::$7 ← ! (bool~) bitmap_line::$6
Rewriting && if()-condition to two if()s [78] (bool~) bitmap_line::$6 ← (bool~) bitmap_line::$4 && (bool~) bitmap_line::$5
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte) bitmap_init::bits#0 = $80
Constant (const byte) bitmap_init::x#0 = 0
Constant (const byte) bitmap_init::bits#2 = $80
Constant (const byte) bitmap_init::y#0 = 0
Constant (const word) memset::num#0 = $3e8
Constant (const byte) memset::c#1 = 0
Constant (const word) memset::num#1 = $1f40
Constant (const word) sgn_u16::return#2 = -1
Constant (const word) sgn_u16::return#3 = 1
Constant (const byte*) bitmap_init::gfx#0 = BITMAP
Constant (const byte*) bitmap_init::screen#0 = SCREEN
Constant (const byte) bitmap_clear::bgcol#0 = PURPLE
Constant (const byte) bitmap_clear::fgcol#0 = WHITE
Constant (const word) bitmap_line::x1#0 = 0
Constant (const word) bitmap_line::y1#0 = 0
Constant (const word) bitmap_line::y2#0 = $64
Constant (const word) next#1 = 0
Constant (const byte*) bitmap_screen#16 = (byte*) 0
Constant (const byte*) bitmap_gfx#17 = (byte*) 0
Constant (const word) next#13 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) bitmap_gfx#0 = bitmap_init::gfx#0
Constant (const byte*) bitmap_screen#0 = bitmap_init::screen#0
Constant (const word) bitmap_plot::x#0 = bitmap_line::x1#0
Constant (const byte) bitmap_plot::y#0 = (byte)bitmap_line::y1#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)bitmap_screen#0
Constant (const void*) memset::str#1 = (void*)bitmap_gfx#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [166] if(true) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [24] bitmap_init::x#1 ← ++ bitmap_init::x#2 to ++
Resolved ranged comparison value [26] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to (number) 0
Resolved ranged next value [40] bitmap_init::y#1 ← ++ bitmap_init::y#2 to ++
Resolved ranged comparison value [42] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to (number) 0
Simplifying constant evaluating to zero (byte)(const word) bitmap_line::y1#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero bitmap_line::x2#0 in [68] (word) abs_u16::w#0 ← (word) bitmap_line::x2#0 - (const word) bitmap_line::x1#0
Simplifying expression containing zero bitmap_line::y2#0 in [72] (word) abs_u16::w#1 ← (const word) bitmap_line::y2#0 - (const word) bitmap_line::y1#0
Simplifying expression containing zero bitmap_line::x2#0 in [81] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#0 - (const word) bitmap_line::x1#0
Simplifying expression containing zero bitmap_line::y2#0 in [85] (word) sgn_u16::w#1 ← (const word) bitmap_line::y2#0 - (const word) bitmap_line::y1#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memset::return#2 and assignment [35] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [37] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused constant (const byte*) bitmap_screen#16
Eliminating unused constant (const byte*) bitmap_gfx#17
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [16] if((byte) bitmap_init::x#1!=(number) 0) goto bitmap_init::@1
Adding number conversion cast (unumber) 0 in [28] if((byte) bitmap_init::y#1!=(number) 0) goto bitmap_init::@5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [39] (byte*) bitmap_plot::plotter#0 ← (byte*)(word~) bitmap_plot::$3
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias bitmap_init::$7 = bitmap_init::$3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) bitmap_line::$4 [54] if((word) bitmap_line::dx#0==(byte) 0) goto bitmap_line::@20
Simple Condition (bool~) bitmap_line::$5 [119] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [54] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [30] (byte~) bitmap_clear::$0 ← (const byte) bitmap_clear::fgcol#0 * (byte) $10
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) bitmap_clear::$0 = bitmap_clear::fgcol#0*$10
Constant (const word) abs_u16::w#1 = bitmap_line::y2#0
Constant (const word) sgn_u16::w#1 = bitmap_line::y2#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [30] (byte) bitmap_clear::col#0 ← (const byte) bitmap_clear::$0 + (const byte) bitmap_clear::bgcol#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) bitmap_clear::col#0 = bitmap_clear::$0+bitmap_clear::bgcol#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) memset::c#0 = bitmap_clear::col#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [2] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [4] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [35] (byte*) bitmap_plot::plotter#0 ← (byte*)(word~) bitmap_plot::$3 keeping bitmap_plot::plotter#0
Successful SSA optimization Pass2NopCastInlining
Rewriting division to use shift [59] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 / (byte) 2
Rewriting division to use shift [60] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 / (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::x#0
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte) bitmap_init::y#0
Inlining constant with var siblings (const word) bitmap_plot::x#0
Inlining constant with var siblings (const byte) bitmap_plot::y#0
Inlining constant with var siblings (const word) abs_u16::w#1
Inlining constant with var siblings (const word) sgn_u16::return#2
Inlining constant with var siblings (const word) sgn_u16::return#3
Inlining constant with var siblings (const word) sgn_u16::w#1
Inlining constant with var siblings (const word) next#1
Inlining constant with var siblings (const word) next#13
Constant inlined bitmap_init::screen#0 = (const nomodify byte*) SCREEN
Constant inlined bitmap_clear::bgcol#0 = (const nomodify byte) PURPLE
Constant inlined bitmap_init::gfx#0 = (const nomodify byte*) BITMAP
Constant inlined memset::num#1 = (word) $1f40
Constant inlined memset::num#0 = (word) $3e8
Constant inlined bitmap_init::bits#0 = (byte) $80
Constant inlined bitmap_init::bits#2 = (byte) $80
Constant inlined bitmap_plot::x#0 = (const word) bitmap_line::x1#0
Constant inlined abs_u16::w#1 = (const word) bitmap_line::y2#0
Constant inlined bitmap_plot::y#0 = (byte) 0
Constant inlined sgn_u16::return#3 = (byte) 1
Constant inlined sgn_u16::return#2 = (byte) -1
Constant inlined next#1 = (byte) 0
Constant inlined memset::str#1 = (void*)(const nomodify byte*) BITMAP
Constant inlined memset::str#0 = (void*)(const nomodify byte*) SCREEN
Constant inlined sgn_u16::w#1 = (const word) bitmap_line::y2#0
Constant inlined next#13 = (word) 0
Constant inlined bitmap_clear::fgcol#0 = (const nomodify byte) WHITE
Constant inlined bitmap_gfx#0 = (const nomodify byte*) BITMAP
Constant inlined bitmap_screen#0 = (const nomodify byte*) SCREEN
Constant inlined bitmap_init::y#0 = (byte) 0
Constant inlined bitmap_clear::$0 = (const nomodify byte) WHITE*(byte) $10
Constant inlined memset::c#0 = (const byte) bitmap_clear::col#0
Constant inlined bitmap_init::x#0 = (byte) 0
Constant inlined memset::c#1 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting bitmap_init::@8(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting bitmap_line::@21(between bitmap_line::@7 and bitmap_line::@6)
Added new block during phi lifting bitmap_line::@22(between bitmap_line::@17 and bitmap_line::@7)
Added new block during phi lifting bitmap_line::@23(between bitmap_line::@10 and bitmap_line::@3)
Added new block during phi lifting bitmap_line::@24(between bitmap_line::@7 and bitmap_line::@3)
Added new block during phi lifting bitmap_line::@25(between bitmap_line::@10 and bitmap_line::@9)
Added new block during phi lifting bitmap_line::@26(between bitmap_line::@19 and bitmap_line::@10)
Added new block during phi lifting main::@7(between main::@6 and main::@2)
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of bitmap_line::@18
Adding NOP phi() at start of bitmap_line::@4
Adding NOP phi() at start of bitmap_line::@16
Adding NOP phi() at start of sgn_u16::@2
Adding NOP phi() at start of sgn_u16::@1
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of bitmap_clear::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of bitmap_init::@4
CALL GRAPH
Calls in [main] to bitmap_init:4 bitmap_clear:6 bitmap_line:10 
Calls in [bitmap_line] to abs_u16:19 abs_u16:22 sgn_u16:29 sgn_u16:32 bitmap_plot:43 bitmap_plot:60 bitmap_plot:75 bitmap_plot:93 
Calls in [bitmap_clear] to memset:120 memset:122 

Created 30 initial phi equivalence classes
Coalesced [15] next#16 ← next#11
Coalesced [16] next#17 ← next#0
Coalesced [18] abs_u16::w#5 ← abs_u16::w#0
Coalesced [28] sgn_u16::w#3 ← sgn_u16::w#0
Coalesced [37] bitmap_line::e#7 ← bitmap_line::e#0
Coalesced [41] bitmap_plot::y#6 ← bitmap_plot::y#1
Coalesced [42] bitmap_plot::x#6 ← bitmap_plot::x#1
Coalesced [49] bitmap_line::x#22 ← bitmap_line::x#1
Coalesced [50] bitmap_line::e#10 ← bitmap_line::e#2
Coalesced [53] bitmap_line::x#24 ← bitmap_line::x#12
Coalesced [54] bitmap_line::y#22 ← bitmap_line::y#1
Coalesced [58] bitmap_plot::y#5 ← bitmap_plot::y#2
Coalesced [59] bitmap_plot::x#5 ← bitmap_plot::x#2
Coalesced [63] bitmap_line::x#20 ← bitmap_line::x#12
Coalesced [64] bitmap_line::y#20 ← bitmap_line::y#1
Coalesced [65] bitmap_line::e#8 ← bitmap_line::e#6
Coalesced (already) [66] bitmap_line::x#21 ← bitmap_line::x#13
Coalesced [67] bitmap_line::e#9 ← bitmap_line::e#1
Coalesced [69] bitmap_line::e1#8 ← bitmap_line::e1#0
Coalesced [73] bitmap_plot::y#7 ← bitmap_plot::y#3
Coalesced [74] bitmap_plot::x#7 ← bitmap_plot::x#3
Coalesced [81] bitmap_line::y#24 ← bitmap_line::y#2
Coalesced [82] bitmap_line::e1#9 ← bitmap_line::e1#2
Coalesced [85] bitmap_line::x#23 ← bitmap_line::x#15
Coalesced [86] bitmap_line::y#21 ← bitmap_line::y#13
Coalesced [87] bitmap_line::x#25 ← bitmap_line::x#15
Coalesced [88] bitmap_line::y#23 ← bitmap_line::y#13
Coalesced [89] bitmap_line::e1#7 ← bitmap_line::e1#6
Coalesced (already) [90] bitmap_line::y#25 ← bitmap_line::y#15
Coalesced [91] bitmap_line::e1#10 ← bitmap_line::e1#1
Coalesced [114] abs_u16::return#9 ← abs_u16::w#2
Coalesced [118] abs_u16::return#8 ← abs_u16::return#2
Coalesced [135] memset::dst#5 ← memset::dst#1
Coalesced [155] bitmap_init::yoffs#7 ← bitmap_init::yoffs#1
Coalesced [160] bitmap_init::y#5 ← bitmap_init::y#1
Coalesced [161] bitmap_init::yoffs#5 ← bitmap_init::yoffs#4
Coalesced (already) [162] bitmap_init::yoffs#6 ← bitmap_init::yoffs#2
Coalesced [163] bitmap_init::bits#5 ← bitmap_init::bits#4
Coalesced [164] bitmap_init::x#5 ← bitmap_init::x#1
Coalesced [165] bitmap_init::bits#6 ← bitmap_init::bits#1
Coalesced down to 18 phi equivalence classes
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@3
Culled Empty Block (label) bitmap_line::@24
Culled Empty Block (label) bitmap_line::@18
Culled Empty Block (label) bitmap_line::@21
Culled Empty Block (label) bitmap_line::@22
Culled Empty Block (label) bitmap_line::@23
Culled Empty Block (label) bitmap_line::@25
Culled Empty Block (label) bitmap_line::@26
Culled Empty Block (label) bitmap_line::@16
Culled Empty Block (label) sgn_u16::@2
Culled Empty Block (label) abs_u16::@2
Culled Empty Block (label) bitmap_clear::@2
Culled Empty Block (label) memset::@1
Culled Empty Block (label) bitmap_init::@3
Culled Empty Block (label) bitmap_init::@4
Culled Empty Block (label) bitmap_init::@10
Culled Empty Block (label) bitmap_init::@11
Culled Empty Block (label) bitmap_init::@8
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@9 to bitmap_init::@6
Renumbering block bitmap_line::@17 to bitmap_line::@16
Renumbering block bitmap_line::@19 to bitmap_line::@17
Renumbering block bitmap_line::@20 to bitmap_line::@18
Renumbering block main::@4 to main::@3
Renumbering block main::@6 to main::@4
Renumbering block main::@7 to main::@5
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of bitmap_line::@4
Adding NOP phi() at start of sgn_u16::@1
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) BORDER_COLOR) ← (byte) 0
  [1] *((const nomodify byte*) BG_COLOR) ← (byte) 0
  [2] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
  [3] *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) BITMAP&(word) $3fff/(word) $400
  [4] call bitmap_init 
  to:main::@3
main::@3: scope:[main]  from main
  [5] phi()
  [6] call bitmap_clear 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@3
  [7] (word) next#6 ← phi( main::@2/(word) next#11 main::@3/(word) 0 )
  [8] (word) bitmap_line::x2#0 ← (word) next#6
  [9] call bitmap_line 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [10] (word) next#0 ← ++ (word) next#6
  [11] if((word) next#0!=(word) $140) goto main::@5
  to:main::@2
main::@5: scope:[main]  from main::@4
  [12] phi()
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@5
  [13] (word) next#11 ← phi( main::@4/(byte) 0 main::@5/(word) next#0 )
  to:main::@1

(void()) bitmap_line((word) bitmap_line::x1 , (word) bitmap_line::y1 , (word) bitmap_line::x2 , (word) bitmap_line::y2)
bitmap_line: scope:[bitmap_line]  from main::@1
  [14] (word) abs_u16::w#0 ← (word) bitmap_line::x2#0
  [15] call abs_u16 
  [16] (word) abs_u16::return#0 ← (word) abs_u16::return#4
  to:bitmap_line::@12
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line
  [17] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0
  [18] call abs_u16 
  [19] (word) abs_u16::return#1 ← (word) abs_u16::return#4
  to:bitmap_line::@13
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@12
  [20] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1
  [21] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1
  to:bitmap_line::@18
bitmap_line::@18: scope:[bitmap_line]  from bitmap_line::@13
  [22] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4
  to:bitmap_line::@1
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line::@13 bitmap_line::@18
  [23] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#0
  [24] call sgn_u16 
  [25] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@1
  [26] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0
  [27] call sgn_u16 
  [28] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4
  to:bitmap_line::@15
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@14
  [29] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1
  [30] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2
  to:bitmap_line::@5
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@15
  [31] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5 bitmap_line::@7
  [32] (word) bitmap_line::e#3 ← phi( bitmap_line::@5/(word) bitmap_line::e#0 bitmap_line::@7/(word) bitmap_line::e#6 )
  [32] (word) bitmap_line::y#4 ← phi( bitmap_line::@5/(const word) bitmap_line::y1#0 bitmap_line::@7/(word) bitmap_line::y#1 )
  [32] (word) bitmap_line::x#13 ← phi( bitmap_line::@5/(const word) bitmap_line::x1#0 bitmap_line::@7/(word) bitmap_line::x#12 )
  [33] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13
  [34] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4
  [35] call bitmap_plot 
  to:bitmap_line::@16
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@6
  [36] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0
  [37] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0
  [38] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7
  to:bitmap_line::@8
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@16
  [39] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0
  [40] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0
  to:bitmap_line::@7
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@16 bitmap_line::@8
  [41] (word) bitmap_line::e#6 ← phi( bitmap_line::@16/(word) bitmap_line::e#1 bitmap_line::@8/(word) bitmap_line::e#2 )
  [41] (word) bitmap_line::x#12 ← phi( bitmap_line::@16/(word) bitmap_line::x#13 bitmap_line::@8/(word) bitmap_line::x#1 )
  [42] if((word) bitmap_line::y#1!=(const word) bitmap_line::y2#0) goto bitmap_line::@6
  to:bitmap_line::@3
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@7
  [43] (word) bitmap_line::y#7 ← phi( bitmap_line::@10/(word) bitmap_line::y#13 bitmap_line::@7/(word) bitmap_line::y#1 )
  [43] (word) bitmap_line::x#6 ← phi( bitmap_line::@10/(word) bitmap_line::x#15 bitmap_line::@7/(word) bitmap_line::x#12 )
  [44] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6
  [45] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7
  [46] call bitmap_plot 
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@3 bitmap_line::@4
  [47] return 
  to:@return
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line::@15
  [48] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1
  to:bitmap_line::@9
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@2
  [49] (word) bitmap_line::e1#3 ← phi( bitmap_line::@10/(word) bitmap_line::e1#6 bitmap_line::@2/(word) bitmap_line::e1#0 )
  [49] (word) bitmap_line::y#15 ← phi( bitmap_line::@10/(word) bitmap_line::y#13 bitmap_line::@2/(const word) bitmap_line::y1#0 )
  [49] (word) bitmap_line::x#7 ← phi( bitmap_line::@10/(word) bitmap_line::x#15 bitmap_line::@2/(const word) bitmap_line::x1#0 )
  [50] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7
  [51] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15
  [52] call bitmap_plot 
  to:bitmap_line::@17
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@9
  [53] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0
  [54] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0
  [55] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10
  to:bitmap_line::@11
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@17
  [56] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0
  [57] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0
  to:bitmap_line::@10
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@11 bitmap_line::@17
  [58] (word) bitmap_line::e1#6 ← phi( bitmap_line::@11/(word) bitmap_line::e1#2 bitmap_line::@17/(word) bitmap_line::e1#1 )
  [58] (word) bitmap_line::y#13 ← phi( bitmap_line::@11/(word) bitmap_line::y#2 bitmap_line::@17/(word) bitmap_line::y#15 )
  [59] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#0) goto bitmap_line::@9
  to:bitmap_line::@3
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@18
  [60] phi()
  [61] call bitmap_plot 
  to:bitmap_line::@return

(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line::@3 bitmap_line::@4 bitmap_line::@6 bitmap_line::@9
  [62] (word) bitmap_plot::x#4 ← phi( bitmap_line::@3/(word) bitmap_plot::x#2 bitmap_line::@4/(const word) bitmap_line::x1#0 bitmap_line::@6/(word) bitmap_plot::x#1 bitmap_line::@9/(word) bitmap_plot::x#3 )
  [62] (byte) bitmap_plot::y#4 ← phi( bitmap_line::@3/(byte) bitmap_plot::y#2 bitmap_line::@4/(byte) 0 bitmap_line::@6/(byte) bitmap_plot::y#1 bitmap_line::@9/(byte) bitmap_plot::y#3 )
  [63] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
  [64] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8
  [65] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0
  [66] (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#4
  [67] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [68] return 
  to:@return

(word()) sgn_u16((word) sgn_u16::w)
sgn_u16: scope:[sgn_u16]  from bitmap_line::@1 bitmap_line::@14
  [69] (word) sgn_u16::w#2 ← phi( bitmap_line::@1/(word) sgn_u16::w#0 bitmap_line::@14/(const word) bitmap_line::y2#0 )
  [70] (byte~) sgn_u16::$0 ← > (word) sgn_u16::w#2
  [71] (byte~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (byte) $80
  [72] if((byte) 0!=(byte~) sgn_u16::$1) goto sgn_u16::@1
  to:sgn_u16::@return
sgn_u16::@1: scope:[sgn_u16]  from sgn_u16
  [73] phi()
  to:sgn_u16::@return
sgn_u16::@return: scope:[sgn_u16]  from sgn_u16 sgn_u16::@1
  [74] (word) sgn_u16::return#4 ← phi( sgn_u16::@1/(byte) -1 sgn_u16/(byte) 1 )
  [75] return 
  to:@return

(word()) abs_u16((word) abs_u16::w)
abs_u16: scope:[abs_u16]  from bitmap_line bitmap_line::@12
  [76] (word) abs_u16::w#2 ← phi( bitmap_line/(word) abs_u16::w#0 bitmap_line::@12/(const word) bitmap_line::y2#0 )
  [77] (byte~) abs_u16::$0 ← > (word) abs_u16::w#2
  [78] (byte~) abs_u16::$1 ← (byte~) abs_u16::$0 & (byte) $80
  [79] if((byte) 0!=(byte~) abs_u16::$1) goto abs_u16::@1
  to:abs_u16::@return
abs_u16::@1: scope:[abs_u16]  from abs_u16
  [80] (word) abs_u16::return#2 ← - (word) abs_u16::w#2
  to:abs_u16::@return
abs_u16::@return: scope:[abs_u16]  from abs_u16 abs_u16::@1
  [81] (word) abs_u16::return#4 ← phi( abs_u16::@1/(word) abs_u16::return#2 abs_u16/(word) abs_u16::w#2 )
  [82] return 
  to:@return

(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@3
  [83] phi()
  [84] call memset 
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  [85] phi()
  [86] call memset 
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@1
  [87] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  [88] (byte) memset::c#4 ← phi( bitmap_clear/(const byte) bitmap_clear::col#0 bitmap_clear::@1/(byte) 0 )
  [88] (void*) memset::str#3 ← phi( bitmap_clear/(void*)(const nomodify byte*) SCREEN bitmap_clear::@1/(void*)(const nomodify byte*) BITMAP )
  [88] (word) memset::num#2 ← phi( bitmap_clear/(word) $3e8 bitmap_clear::@1/(word) $1f40 )
  [89] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [92] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [94] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [95] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [96] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from main
  [97] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [98] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [98] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [99] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [100] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1
  [101] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [102] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [103] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@6/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte) $80 )
  [104] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [105] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [106] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@2/(const nomodify byte*) BITMAP bitmap_init::@4/(byte*) bitmap_init::yoffs#4 )
  [106] (byte) bitmap_init::y#2 ← phi( bitmap_init::@2/(byte) 0 bitmap_init::@4/(byte) bitmap_init::y#1 )
  [107] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
  [108] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  [109] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4
  [110] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5
  [111] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  [112] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  [113] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [114] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [115] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@5/(byte*) bitmap_init::yoffs#1 )
  [116] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [117] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [118] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(word()) abs_u16((word) abs_u16::w)
(byte~) abs_u16::$0 2002.0
(byte~) abs_u16::$1 2002.0
(word) abs_u16::return
(word) abs_u16::return#0 202.0
(word) abs_u16::return#1 202.0
(word) abs_u16::return#2 2002.0
(word) abs_u16::return#4 551.0
(word) abs_u16::w
(word) abs_u16::w#0 202.0
(word) abs_u16::w#2 776.0
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::col
(byte) bitmap_clear::fgcol
(byte*) bitmap_gfx
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(byte~) bitmap_init::$4 202.0
(byte~) bitmap_init::$5 202.0
(byte~) bitmap_init::$6 202.0
(byte~) bitmap_init::$7 50.5
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 101.0
(byte) bitmap_init::bits#3 151.5
(byte) bitmap_init::bits#4 67.33333333333333
(byte*) bitmap_init::gfx
(byte*) bitmap_init::screen
(byte) bitmap_init::x
(byte) bitmap_init::x#1 151.5
(byte) bitmap_init::x#2 50.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 151.5
(byte) bitmap_init::y#2 50.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 202.0
(byte*) bitmap_init::yoffs#2 63.125
(byte*) bitmap_init::yoffs#4 101.0
(void()) bitmap_line((word) bitmap_line::x1 , (word) bitmap_line::y1 , (word) bitmap_line::x2 , (word) bitmap_line::y2)
(word) bitmap_line::dx
(word) bitmap_line::dx#0 800.1842105263158
(word) bitmap_line::dy
(word) bitmap_line::dy#0 868.7714285714285
(word) bitmap_line::e
(word) bitmap_line::e#0 202.0
(word) bitmap_line::e#1 13334.666666666666
(word) bitmap_line::e#2 20002.0
(word) bitmap_line::e#3 4020.6000000000004
(word) bitmap_line::e#6 15001.5
(word) bitmap_line::e1
(word) bitmap_line::e1#0 202.0
(word) bitmap_line::e1#1 13334.666666666666
(word) bitmap_line::e1#2 20002.0
(word) bitmap_line::e1#3 4020.6000000000004
(word) bitmap_line::e1#6 15001.5
(word) bitmap_line::sx
(word) bitmap_line::sx#0 693.2068965517242
(word) bitmap_line::sy
(word) bitmap_line::sy#0 773.1923076923076
(word) bitmap_line::x
(word) bitmap_line::x#1 10001.0
(word) bitmap_line::x#12 20002.0
(word) bitmap_line::x#13 5714.857142857143
(word) bitmap_line::x#15 5714.857142857143
(word) bitmap_line::x#6 20103.0
(word) bitmap_line::x#7 7500.75
(word) bitmap_line::x1
(word) bitmap_line::x2
(word) bitmap_line::x2#0 340.4666666666667
(word) bitmap_line::y
(word) bitmap_line::y#1 5714.857142857143
(word) bitmap_line::y#13 20002.0
(word) bitmap_line::y#15 4286.142857142857
(word) bitmap_line::y#2 10001.0
(word) bitmap_line::y#4 5000.5
(word) bitmap_line::y#7 10001.0
(word) bitmap_line::y1
(word) bitmap_line::y2
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0 200002.0
(byte~) bitmap_plot::$1 200002.0
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 50000.5
(byte*) bitmap_plot::plotter#1 150001.5
(word) bitmap_plot::x
(word) bitmap_plot::x#1 10001.0
(word) bitmap_plot::x#2 101.0
(word) bitmap_plot::x#3 10001.0
(word) bitmap_plot::x#4 55026.25
(byte) bitmap_plot::y
(byte) bitmap_plot::y#1 20002.0
(byte) bitmap_plot::y#2 202.0
(byte) bitmap_plot::y#3 20002.0
(byte) bitmap_plot::y#4 220105.0
(byte*) bitmap_screen
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 125.125
(byte*) memset::dst
(byte*) memset::dst#1 2002.0
(byte*) memset::dst#2 1368.3333333333335
(byte*) memset::dst#4 202.0
(byte*) memset::end
(byte*) memset::end#0 183.66666666666669
(word) memset::num
(word) memset::num#2 101.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(word) next
(word) next#0 11.0
(word) next#11 22.0
(word) next#6 11.0
(word()) sgn_u16((word) sgn_u16::w)
(byte~) sgn_u16::$0 2002.0
(byte~) sgn_u16::$1 2002.0
(word) sgn_u16::return
(word) sgn_u16::return#0 202.0
(word) sgn_u16::return#1 202.0
(word) sgn_u16::return#4 50.5
(word) sgn_u16::w
(word) sgn_u16::w#0 202.0
(word) sgn_u16::w#2 1102.0

Initial phi equivalence classes
[ next#6 next#11 next#0 ]
[ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
[ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#12 bitmap_line::x#1 ]
[ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#1 bitmap_line::y#2 ]
[ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
[ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#1 bitmap_plot::y#3 ]
[ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#1 bitmap_plot::x#3 ]
[ sgn_u16::w#2 sgn_u16::w#0 ]
[ sgn_u16::return#4 ]
[ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Added variable bitmap_line::x2#0 to live range equivalence class [ bitmap_line::x2#0 ]
Added variable abs_u16::return#0 to live range equivalence class [ abs_u16::return#0 ]
Added variable bitmap_line::dx#0 to live range equivalence class [ bitmap_line::dx#0 ]
Added variable abs_u16::return#1 to live range equivalence class [ abs_u16::return#1 ]
Added variable bitmap_line::dy#0 to live range equivalence class [ bitmap_line::dy#0 ]
Added variable sgn_u16::return#0 to live range equivalence class [ sgn_u16::return#0 ]
Added variable bitmap_line::sx#0 to live range equivalence class [ bitmap_line::sx#0 ]
Added variable sgn_u16::return#1 to live range equivalence class [ sgn_u16::return#1 ]
Added variable bitmap_line::sy#0 to live range equivalence class [ bitmap_line::sy#0 ]
Added variable bitmap_plot::plotter#0 to live range equivalence class [ bitmap_plot::plotter#0 ]
Added variable bitmap_plot::$0 to live range equivalence class [ bitmap_plot::$0 ]
Added variable bitmap_plot::plotter#1 to live range equivalence class [ bitmap_plot::plotter#1 ]
Added variable bitmap_plot::$1 to live range equivalence class [ bitmap_plot::$1 ]
Added variable sgn_u16::$0 to live range equivalence class [ sgn_u16::$0 ]
Added variable sgn_u16::$1 to live range equivalence class [ sgn_u16::$1 ]
Added variable abs_u16::$0 to live range equivalence class [ abs_u16::$0 ]
Added variable abs_u16::$1 to live range equivalence class [ abs_u16::$1 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable bitmap_init::$7 to live range equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$4 to live range equivalence class [ bitmap_init::$4 ]
Added variable bitmap_init::$5 to live range equivalence class [ bitmap_init::$5 ]
Added variable bitmap_init::$6 to live range equivalence class [ bitmap_init::$6 ]
Complete equivalence classes
[ next#6 next#11 next#0 ]
[ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
[ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#12 bitmap_line::x#1 ]
[ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#1 bitmap_line::y#2 ]
[ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
[ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#1 bitmap_plot::y#3 ]
[ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#1 bitmap_plot::x#3 ]
[ sgn_u16::w#2 sgn_u16::w#0 ]
[ sgn_u16::return#4 ]
[ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ bitmap_line::x2#0 ]
[ abs_u16::return#0 ]
[ bitmap_line::dx#0 ]
[ abs_u16::return#1 ]
[ bitmap_line::dy#0 ]
[ sgn_u16::return#0 ]
[ bitmap_line::sx#0 ]
[ sgn_u16::return#1 ]
[ bitmap_line::sy#0 ]
[ bitmap_plot::plotter#0 ]
[ bitmap_plot::$0 ]
[ bitmap_plot::plotter#1 ]
[ bitmap_plot::$1 ]
[ sgn_u16::$0 ]
[ sgn_u16::$1 ]
[ abs_u16::$0 ]
[ abs_u16::$1 ]
[ memset::end#0 ]
[ bitmap_init::$7 ]
[ bitmap_init::$4 ]
[ bitmap_init::$5 ]
[ bitmap_init::$6 ]
Allocated zp[2]:2 [ next#6 next#11 next#0 ]
Allocated zp[2]:4 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
Allocated zp[2]:6 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#12 bitmap_line::x#1 ]
Allocated zp[2]:8 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#1 bitmap_line::y#2 ]
Allocated zp[2]:10 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
Allocated zp[1]:12 [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#1 bitmap_plot::y#3 ]
Allocated zp[2]:13 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#1 bitmap_plot::x#3 ]
Allocated zp[2]:15 [ sgn_u16::w#2 sgn_u16::w#0 ]
Allocated zp[2]:17 [ sgn_u16::return#4 ]
Allocated zp[2]:19 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 ]
Allocated zp[2]:21 [ memset::num#2 ]
Allocated zp[2]:23 [ memset::str#3 ]
Allocated zp[1]:25 [ memset::c#4 ]
Allocated zp[2]:26 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:28 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp[1]:29 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp[1]:30 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp[2]:31 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp[2]:33 [ bitmap_line::x2#0 ]
Allocated zp[2]:35 [ abs_u16::return#0 ]
Allocated zp[2]:37 [ bitmap_line::dx#0 ]
Allocated zp[2]:39 [ abs_u16::return#1 ]
Allocated zp[2]:41 [ bitmap_line::dy#0 ]
Allocated zp[2]:43 [ sgn_u16::return#0 ]
Allocated zp[2]:45 [ bitmap_line::sx#0 ]
Allocated zp[2]:47 [ sgn_u16::return#1 ]
Allocated zp[2]:49 [ bitmap_line::sy#0 ]
Allocated zp[2]:51 [ bitmap_plot::plotter#0 ]
Allocated zp[2]:53 [ bitmap_plot::$0 ]
Allocated zp[2]:55 [ bitmap_plot::plotter#1 ]
Allocated zp[1]:57 [ bitmap_plot::$1 ]
Allocated zp[1]:58 [ sgn_u16::$0 ]
Allocated zp[1]:59 [ sgn_u16::$1 ]
Allocated zp[1]:60 [ abs_u16::$0 ]
Allocated zp[1]:61 [ abs_u16::$1 ]
Allocated zp[2]:62 [ memset::end#0 ]
Allocated zp[1]:64 [ bitmap_init::$7 ]
Allocated zp[1]:65 [ bitmap_init::$4 ]
Allocated zp[1]:66 [ bitmap_init::$5 ]
Allocated zp[1]:67 [ bitmap_init::$6 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Shows that bitmap2.kc line() does not have the same problem as bitmap-draw.kc
// See bitmap-line-anim-1.kc
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const WHITE = 1
  .const PURPLE = 4
  .label BORDER_COLOR = $d020
  .label BG_COLOR = $d021
  .label D011 = $d011
  .label VIC_MEMORY = $d018
  .label SCREEN = $400
  .label BITMAP = $2000
  .label next = 2
  // main
main: {
    // [0] *((const nomodify byte*) BORDER_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDER_COLOR
    // [1] *((const nomodify byte*) BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BG_COLOR
    // [2] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [3] *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) BITMAP&(word) $3fff/(word) $400 -- _deref_pbuc1=vbuc2 
    lda #(SCREEN&$3fff)/$40|(BITMAP&$3fff)/$400
    sta VIC_MEMORY
    // [4] call bitmap_init 
    // [97] phi from main to bitmap_init [phi:main->bitmap_init]
  bitmap_init_from_main:
    jsr bitmap_init
    // [5] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [6] call bitmap_clear 
    // [83] phi from main::@3 to bitmap_clear [phi:main::@3->bitmap_clear]
  bitmap_clear_from___b3:
    jsr bitmap_clear
    // [7] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [7] phi (word) next#6 = (word) 0 [phi:main::@3->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z next
    lda #>0
    sta.z next+1
    jmp __b1
    // main::@1
  __b1:
    // [8] (word) bitmap_line::x2#0 ← (word) next#6 -- vwuz1=vwuz2 
    lda.z next
    sta.z bitmap_line.x2
    lda.z next+1
    sta.z bitmap_line.x2+1
    // [9] call bitmap_line 
    jsr bitmap_line
    jmp __b4
    // main::@4
  __b4:
    // [10] (word) next#0 ← ++ (word) next#6 -- vwuz1=_inc_vwuz1 
    inc.z next
    bne !+
    inc.z next+1
  !:
    // [11] if((word) next#0!=(word) $140) goto main::@5 -- vwuz1_neq_vwuc1_then_la1 
    lda.z next+1
    cmp #>$140
    bne __b5_from___b4
    lda.z next
    cmp #<$140
    bne __b5_from___b4
    // [13] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    // [13] phi (word) next#11 = (byte) 0 [phi:main::@4->main::@2#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z next
    lda #>0
    sta.z next+1
    jmp __b2
    // [12] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [13] phi from main::@5 to main::@2 [phi:main::@5->main::@2]
  __b2_from___b5:
    // [13] phi (word) next#11 = (word) next#0 [phi:main::@5->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [7] phi (word) next#6 = (word) next#11 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // bitmap_line
// Draw a line on the bitmap using bresenhams algorithm
// bitmap_line(word zp($21) x2)
bitmap_line: {
    .const x1 = 0
    .const y1 = 0
    .const y2 = $64
    .label dx = $25
    .label dy = $29
    .label sx = $2d
    .label sy = $31
    .label e1 = $a
    .label e = 4
    .label y = 8
    .label x = 6
    .label x2 = $21
    // [14] (word) abs_u16::w#0 ← (word) bitmap_line::x2#0 -- vwuz1=vwuz2 
    lda.z x2
    sta.z abs_u16.w
    lda.z x2+1
    sta.z abs_u16.w+1
    // [15] call abs_u16 
    // [76] phi from bitmap_line to abs_u16 [phi:bitmap_line->abs_u16]
  abs_u16_from_bitmap_line:
    // [76] phi (word) abs_u16::w#2 = (word) abs_u16::w#0 [phi:bitmap_line->abs_u16#0] -- register_copy 
    jsr abs_u16
    // [16] (word) abs_u16::return#0 ← (word) abs_u16::return#4 -- vwuz1=vwuz2 
    lda.z abs_u16.return_2
    sta.z abs_u16.return
    lda.z abs_u16.return_2+1
    sta.z abs_u16.return+1
    jmp __b12
    // bitmap_line::@12
  __b12:
    // [17] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0 -- vwuz1=vwuz2 
    lda.z abs_u16.return
    sta.z dx
    lda.z abs_u16.return+1
    sta.z dx+1
    // [18] call abs_u16 
    // [76] phi from bitmap_line::@12 to abs_u16 [phi:bitmap_line::@12->abs_u16]
  abs_u16_from___b12:
    // [76] phi (word) abs_u16::w#2 = (const word) bitmap_line::y2#0 [phi:bitmap_line::@12->abs_u16#0] -- vwuz1=vwuc1 
    lda #<y2
    sta.z abs_u16.w
    lda #>y2
    sta.z abs_u16.w+1
    jsr abs_u16
    // [19] (word) abs_u16::return#1 ← (word) abs_u16::return#4 -- vwuz1=vwuz2 
    lda.z abs_u16.return_2
    sta.z abs_u16.return_1
    lda.z abs_u16.return_2+1
    sta.z abs_u16.return_1+1
    jmp __b13
    // bitmap_line::@13
  __b13:
    // [20] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1 -- vwuz1=vwuz2 
    lda.z abs_u16.return_1
    sta.z dy
    lda.z abs_u16.return_1+1
    sta.z dy+1
    // [21] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1 -- vwuz1_neq_0_then_la1 
    lda.z dx
    bne __b1
    lda.z dx+1
    bne __b1
    jmp __b18
    // bitmap_line::@18
  __b18:
    // [22] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4 -- vwuz1_eq_0_then_la1 
    lda.z dy
    bne !+
    lda.z dy+1
    beq __b4_from___b18
  !:
    jmp __b1
    // bitmap_line::@1
  __b1:
    // [23] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#0 -- vwuz1=vwuz2 
    lda.z x2
    sta.z sgn_u16.w
    lda.z x2+1
    sta.z sgn_u16.w+1
    // [24] call sgn_u16 
    // [69] phi from bitmap_line::@1 to sgn_u16 [phi:bitmap_line::@1->sgn_u16]
  sgn_u16_from___b1:
    // [69] phi (word) sgn_u16::w#2 = (word) sgn_u16::w#0 [phi:bitmap_line::@1->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // [25] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4 -- vwuz1=vwuz2 
    lda.z sgn_u16.return_2
    sta.z sgn_u16.return
    lda.z sgn_u16.return_2+1
    sta.z sgn_u16.return+1
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [26] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0 -- vwuz1=vwuz2 
    lda.z sgn_u16.return
    sta.z sx
    lda.z sgn_u16.return+1
    sta.z sx+1
    // [27] call sgn_u16 
    // [69] phi from bitmap_line::@14 to sgn_u16 [phi:bitmap_line::@14->sgn_u16]
  sgn_u16_from___b14:
    // [69] phi (word) sgn_u16::w#2 = (const word) bitmap_line::y2#0 [phi:bitmap_line::@14->sgn_u16#0] -- vwuz1=vwuc1 
    lda #<y2
    sta.z sgn_u16.w
    lda #>y2
    sta.z sgn_u16.w+1
    jsr sgn_u16
    // [28] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4 -- vwuz1=vwuz2 
    lda.z sgn_u16.return_2
    sta.z sgn_u16.return_1
    lda.z sgn_u16.return_2+1
    sta.z sgn_u16.return_1+1
    jmp __b15
    // bitmap_line::@15
  __b15:
    // [29] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1 -- vwuz1=vwuz2 
    lda.z sgn_u16.return_1
    sta.z sy
    lda.z sgn_u16.return_1+1
    sta.z sy+1
    // [30] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2 -- vwuz1_gt_vwuz2_then_la1 
    lda.z dy+1
    cmp.z dx+1
    bcc __b2
    bne !+
    lda.z dy
    cmp.z dx
    bcc __b2
  !:
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [31] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dx+1
    lsr
    sta.z e+1
    lda.z dx
    ror
    sta.z e
    // [32] phi from bitmap_line::@5 to bitmap_line::@6 [phi:bitmap_line::@5->bitmap_line::@6]
  __b6_from___b5:
    // [32] phi (word) bitmap_line::e#3 = (word) bitmap_line::e#0 [phi:bitmap_line::@5->bitmap_line::@6#0] -- register_copy 
    // [32] phi (word) bitmap_line::y#4 = (const word) bitmap_line::y1#0 [phi:bitmap_line::@5->bitmap_line::@6#1] -- vwuz1=vwuc1 
    lda #<y1
    sta.z y
    lda #>y1
    sta.z y+1
    // [32] phi (word) bitmap_line::x#13 = (const word) bitmap_line::x1#0 [phi:bitmap_line::@5->bitmap_line::@6#2] -- vwuz1=vwuc1 
    lda #<x1
    sta.z x
    lda #>x1
    sta.z x+1
    jmp __b6
    // [32] phi from bitmap_line::@7 to bitmap_line::@6 [phi:bitmap_line::@7->bitmap_line::@6]
  __b6_from___b7:
    // [32] phi (word) bitmap_line::e#3 = (word) bitmap_line::e#6 [phi:bitmap_line::@7->bitmap_line::@6#0] -- register_copy 
    // [32] phi (word) bitmap_line::y#4 = (word) bitmap_line::y#1 [phi:bitmap_line::@7->bitmap_line::@6#1] -- register_copy 
    // [32] phi (word) bitmap_line::x#13 = (word) bitmap_line::x#12 [phi:bitmap_line::@7->bitmap_line::@6#2] -- register_copy 
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [33] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13 -- vwuz1=vwuz2 
    lda.z x
    sta.z bitmap_plot.x
    lda.z x+1
    sta.z bitmap_plot.x+1
    // [34] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4 -- vbuz1=_byte_vwuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [35] call bitmap_plot 
    // [62] phi from bitmap_line::@6 to bitmap_plot [phi:bitmap_line::@6->bitmap_plot]
  bitmap_plot_from___b6:
    // [62] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#1 [phi:bitmap_line::@6->bitmap_plot#0] -- register_copy 
    // [62] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line::@6->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b16
    // bitmap_line::@16
  __b16:
    // [36] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // [37] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    lda.z e+1
    adc.z dx+1
    sta.z e+1
    // [38] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7 -- vwuz1_ge_vwuz2_then_la1 
    lda.z e+1
    cmp.z dy+1
    bne !+
    lda.z e
    cmp.z dy
    beq __b7_from___b16
  !:
    bcc __b7_from___b16
    jmp __b8
    // bitmap_line::@8
  __b8:
    // [39] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // [40] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    lda.z e+1
    sbc.z dy+1
    sta.z e+1
    // [41] phi from bitmap_line::@16 bitmap_line::@8 to bitmap_line::@7 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7]
  __b7_from___b16:
  __b7_from___b8:
    // [41] phi (word) bitmap_line::e#6 = (word) bitmap_line::e#1 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#0] -- register_copy 
    // [41] phi (word) bitmap_line::x#12 = (word) bitmap_line::x#13 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#1] -- register_copy 
    jmp __b7
    // bitmap_line::@7
  __b7:
    // [42] if((word) bitmap_line::y#1!=(const word) bitmap_line::y2#0) goto bitmap_line::@6 -- vwuz1_neq_vwuc1_then_la1 
    lda.z y+1
    cmp #>y2
    bne __b6_from___b7
    lda.z y
    cmp #<y2
    bne __b6_from___b7
    // [43] phi from bitmap_line::@10 bitmap_line::@7 to bitmap_line::@3 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3]
  __b3_from___b10:
  __b3_from___b7:
    // [43] phi (word) bitmap_line::y#7 = (word) bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#0] -- register_copy 
    // [43] phi (word) bitmap_line::x#6 = (word) bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#1] -- register_copy 
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [44] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6 -- vwuz1=vwuz2 
    lda.z x
    sta.z bitmap_plot.x
    lda.z x+1
    sta.z bitmap_plot.x+1
    // [45] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7 -- vbuz1=_byte_vwuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [46] call bitmap_plot 
    // [62] phi from bitmap_line::@3 to bitmap_plot [phi:bitmap_line::@3->bitmap_plot]
  bitmap_plot_from___b3:
    // [62] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#2 [phi:bitmap_line::@3->bitmap_plot#0] -- register_copy 
    // [62] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line::@3->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [47] return 
    rts
    // bitmap_line::@2
  __b2:
    // [48] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dy+1
    lsr
    sta.z e1+1
    lda.z dy
    ror
    sta.z e1
    // [49] phi from bitmap_line::@2 to bitmap_line::@9 [phi:bitmap_line::@2->bitmap_line::@9]
  __b9_from___b2:
    // [49] phi (word) bitmap_line::e1#3 = (word) bitmap_line::e1#0 [phi:bitmap_line::@2->bitmap_line::@9#0] -- register_copy 
    // [49] phi (word) bitmap_line::y#15 = (const word) bitmap_line::y1#0 [phi:bitmap_line::@2->bitmap_line::@9#1] -- vwuz1=vwuc1 
    lda #<y1
    sta.z y
    lda #>y1
    sta.z y+1
    // [49] phi (word) bitmap_line::x#7 = (const word) bitmap_line::x1#0 [phi:bitmap_line::@2->bitmap_line::@9#2] -- vwuz1=vwuc1 
    lda #<x1
    sta.z x
    lda #>x1
    sta.z x+1
    jmp __b9
    // [49] phi from bitmap_line::@10 to bitmap_line::@9 [phi:bitmap_line::@10->bitmap_line::@9]
  __b9_from___b10:
    // [49] phi (word) bitmap_line::e1#3 = (word) bitmap_line::e1#6 [phi:bitmap_line::@10->bitmap_line::@9#0] -- register_copy 
    // [49] phi (word) bitmap_line::y#15 = (word) bitmap_line::y#13 [phi:bitmap_line::@10->bitmap_line::@9#1] -- register_copy 
    // [49] phi (word) bitmap_line::x#7 = (word) bitmap_line::x#15 [phi:bitmap_line::@10->bitmap_line::@9#2] -- register_copy 
    jmp __b9
    // bitmap_line::@9
  __b9:
    // [50] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7 -- vwuz1=vwuz2 
    lda.z x
    sta.z bitmap_plot.x
    lda.z x+1
    sta.z bitmap_plot.x+1
    // [51] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15 -- vbuz1=_byte_vwuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [52] call bitmap_plot 
    // [62] phi from bitmap_line::@9 to bitmap_plot [phi:bitmap_line::@9->bitmap_plot]
  bitmap_plot_from___b9:
    // [62] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#3 [phi:bitmap_line::@9->bitmap_plot#0] -- register_copy 
    // [62] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line::@9->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b17
    // bitmap_line::@17
  __b17:
    // [53] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // [54] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e1
    clc
    adc.z dy
    sta.z e1
    lda.z e1+1
    adc.z dy+1
    sta.z e1+1
    // [55] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10 -- vwuz1_ge_vwuz2_then_la1 
    lda.z e1+1
    cmp.z dx+1
    bne !+
    lda.z e1
    cmp.z dx
    beq __b10_from___b17
  !:
    bcc __b10_from___b17
    jmp __b11
    // bitmap_line::@11
  __b11:
    // [56] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // [57] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e1
    sec
    sbc.z dx
    sta.z e1
    lda.z e1+1
    sbc.z dx+1
    sta.z e1+1
    // [58] phi from bitmap_line::@11 bitmap_line::@17 to bitmap_line::@10 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10]
  __b10_from___b11:
  __b10_from___b17:
    // [58] phi (word) bitmap_line::e1#6 = (word) bitmap_line::e1#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#0] -- register_copy 
    // [58] phi (word) bitmap_line::y#13 = (word) bitmap_line::y#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#1] -- register_copy 
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [59] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#0) goto bitmap_line::@9 -- vwuz1_neq_vwuz2_then_la1 
    lda.z x+1
    cmp.z x2+1
    bne __b9_from___b10
    lda.z x
    cmp.z x2
    bne __b9_from___b10
    jmp __b3_from___b10
    // [60] phi from bitmap_line::@18 to bitmap_line::@4 [phi:bitmap_line::@18->bitmap_line::@4]
  __b4_from___b18:
    jmp __b4
    // bitmap_line::@4
  __b4:
    // [61] call bitmap_plot 
    // [62] phi from bitmap_line::@4 to bitmap_plot [phi:bitmap_line::@4->bitmap_plot]
  bitmap_plot_from___b4:
    // [62] phi (word) bitmap_plot::x#4 = (const word) bitmap_line::x1#0 [phi:bitmap_line::@4->bitmap_plot#0] -- vwuz1=vwuc1 
    lda #<x1
    sta.z bitmap_plot.x
    lda #>x1
    sta.z bitmap_plot.x+1
    // [62] phi (byte) bitmap_plot::y#4 = (byte) 0 [phi:bitmap_line::@4->bitmap_plot#1] -- vbuz1=vbuc1 
    lda #0
    sta.z bitmap_plot.y
    jsr bitmap_plot
    jmp __breturn
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zp($d) x, byte zp($c) y)
bitmap_plot: {
    .label __0 = $35
    .label __1 = $39
    .label plotter = $33
    .label plotter_1 = $37
    .label x = $d
    .label y = $c
    // [63] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy.z y
    lda bitmap_plot_yhi,y
    sta.z plotter+1
    lda bitmap_plot_ylo,y
    sta.z plotter
    // [64] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __0
    lda.z x+1
    and #>$fff8
    sta.z __0+1
    // [65] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z plotter
    clc
    adc.z __0
    sta.z plotter_1
    lda.z plotter+1
    adc.z __0+1
    sta.z plotter_1+1
    // [66] (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#4 -- vbuz1=_lo_vwuz2 
    lda.z x
    sta.z __1
    // [67] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuz2 
    ldy #0
    lda (plotter_1),y
    ldy.z __1
    ora bitmap_plot_bit,y
    ldy #0
    sta (plotter_1),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [68] return 
    rts
}
  // sgn_u16
// Get the sign of a 16-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is
// sgn_u16(word zp($f) w)
sgn_u16: {
    .label __0 = $3a
    .label __1 = $3b
    .label w = $f
    .label return = $2b
    .label return_1 = $2f
    .label return_2 = $11
    // [70] (byte~) sgn_u16::$0 ← > (word) sgn_u16::w#2 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z __0
    // [71] (byte~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z __0
    sta.z __1
    // [72] if((byte) 0!=(byte~) sgn_u16::$1) goto sgn_u16::@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    bne __b1_from_sgn_u16
    // [74] phi from sgn_u16 to sgn_u16::@return [phi:sgn_u16->sgn_u16::@return]
  __breturn_from_sgn_u16:
    // [74] phi (word) sgn_u16::return#4 = (byte) 1 [phi:sgn_u16->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<1
    sta.z return_2
    lda #>1
    sta.z return_2+1
    jmp __breturn
    // [73] phi from sgn_u16 to sgn_u16::@1 [phi:sgn_u16->sgn_u16::@1]
  __b1_from_sgn_u16:
    jmp __b1
    // sgn_u16::@1
  __b1:
    // [74] phi from sgn_u16::@1 to sgn_u16::@return [phi:sgn_u16::@1->sgn_u16::@return]
  __breturn_from___b1:
    // [74] phi (word) sgn_u16::return#4 = (byte) -1 [phi:sgn_u16::@1->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z return_2
    lda #>-1
    sta.z return_2+1
    jmp __breturn
    // sgn_u16::@return
  __breturn:
    // [75] return 
    rts
}
  // abs_u16
// Get the absolute value of a 16-bit unsigned number treated as a signed number.
// abs_u16(word zp($13) w)
abs_u16: {
    .label __0 = $3c
    .label __1 = $3d
    .label w = $13
    .label return = $23
    .label return_1 = $27
    .label return_2 = $13
    // [77] (byte~) abs_u16::$0 ← > (word) abs_u16::w#2 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z __0
    // [78] (byte~) abs_u16::$1 ← (byte~) abs_u16::$0 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z __0
    sta.z __1
    // [79] if((byte) 0!=(byte~) abs_u16::$1) goto abs_u16::@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    bne __b1
    // [81] phi from abs_u16 abs_u16::@1 to abs_u16::@return [phi:abs_u16/abs_u16::@1->abs_u16::@return]
  __breturn_from_abs_u16:
  __breturn_from___b1:
    // [81] phi (word) abs_u16::return#4 = (word) abs_u16::w#2 [phi:abs_u16/abs_u16::@1->abs_u16::@return#0] -- register_copy 
    jmp __breturn
    // abs_u16::@1
  __b1:
    // [80] (word) abs_u16::return#2 ← - (word) abs_u16::w#2 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc.z return_2
    sta.z return_2
    lda #0
    sbc.z return_2+1
    sta.z return_2+1
    jmp __breturn_from___b1
    // abs_u16::@return
  __breturn:
    // [82] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE*$10+PURPLE
    // [84] call memset 
    // [88] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
  memset_from_bitmap_clear:
    // [88] phi (byte) memset::c#4 = (const byte) bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuz1=vbuc1 
    lda #col
    sta.z memset.c
    // [88] phi (void*) memset::str#3 = (void*)(const nomodify byte*) SCREEN [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (word) $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [85] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [86] call memset 
    // [88] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
  memset_from___b1:
    // [88] phi (byte) memset::c#4 = (byte) 0 [phi:bitmap_clear::@1->memset#0] -- vbuz1=vbuc1 
    lda #0
    sta.z memset.c
    // [88] phi (void*) memset::str#3 = (void*)(const nomodify byte*) BITMAP [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP
    sta.z memset.str
    lda #>BITMAP
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (word) $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [87] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($17) str, byte zp($19) c, word zp($15) num)
memset: {
    .label end = $3e
    .label dst = $1a
    .label num = $15
    .label str = $17
    .label c = $19
    // [89] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z str
    clc
    adc.z num
    sta.z end
    lda.z str+1
    adc.z num+1
    sta.z end+1
    // [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [92] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [92] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [94] return 
    rts
    // memset::@3
  __b3:
    // [95] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [96] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label __4 = $41
    .label __5 = $42
    .label __6 = $43
    .label __7 = $40
    .label bits = $1c
    .label x = $1d
    .label y = $1e
    .label yoffs = $1f
    // [98] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [98] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [98] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuz1=vbuc1 
    lda #$80
    sta.z bits
    jmp __b1
    // [98] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [98] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [98] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [99] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z bits
    ldy.z x
    sta bitmap_plot_bit,y
    // [100] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z bits
    // [101] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuz1_neq_0_then_la1 
    lda.z bits
    cmp #0
    bne __b6_from___b1
    // [103] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [103] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuz1=vbuc1 
    lda #$80
    sta.z bits
    jmp __b2
    // [102] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [103] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [103] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [104] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [105] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuz1_neq_0_then_la1 
    lda.z x
    cmp #0
    bne __b1_from___b2
    // [106] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [106] phi (byte*) bitmap_init::yoffs#2 = (const nomodify byte*) BITMAP [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta.z yoffs
    lda #>BITMAP
    sta.z yoffs+1
    // [106] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b3
    // [106] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [106] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [106] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [107] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z y
    sta.z __7
    // [108] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuz1=_lo_pbuz2 
    lda.z yoffs
    sta.z __4
    // [109] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __7
    ora.z __4
    sta.z __5
    // [110] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __5
    ldy.z y
    sta bitmap_plot_ylo,y
    // [111] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuz1=_hi_pbuz2 
    lda.z yoffs+1
    sta.z __6
    // [112] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __6
    ldy.z y
    sta bitmap_plot_yhi,y
    // [113] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [114] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [115] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [115] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [116] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [117] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuz1_neq_0_then_la1 
    lda.z y
    cmp #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [118] return 
    rts
}
  // File Data
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:65 [ bitmap_init::$4 ] has ALU potential.
Statement [0] *((const nomodify byte*) BORDER_COLOR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) BG_COLOR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) BITMAP&(word) $3fff/(word) $400 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] (word) bitmap_line::x2#0 ← (word) next#6 [ next#6 bitmap_line::x2#0 ] (  [ next#6 bitmap_line::x2#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [11] if((word) next#0!=(word) $140) goto main::@5 [ next#0 ] (  [ next#0 ] { }  ) always clobbers reg byte a 
Statement [14] (word) abs_u16::w#0 ← (word) bitmap_line::x2#0 [ bitmap_line::x2#0 abs_u16::w#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 abs_u16::w#0 ] { { abs_u16::w#0 = abs_u16::w#2 bitmap_line::x2#0 next#6 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [16] (word) abs_u16::return#0 ← (word) abs_u16::return#4 [ bitmap_line::x2#0 abs_u16::return#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 abs_u16::return#0 ] { { abs_u16::w#0 = abs_u16::w#2 bitmap_line::x2#0 next#6 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [17] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0 [ bitmap_line::x2#0 bitmap_line::dx#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 ] { { next#6 = bitmap_line::x2#0 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [19] (word) abs_u16::return#1 ← (word) abs_u16::return#4 [ bitmap_line::x2#0 bitmap_line::dx#0 abs_u16::return#1 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 abs_u16::return#1 ] { { next#6 = bitmap_line::x2#0 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [20] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [21] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [22] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [23] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] { { sgn_u16::w#0 = sgn_u16::w#2 bitmap_line::x2#0 next#6 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [25] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] { { sgn_u16::w#0 = sgn_u16::w#2 bitmap_line::x2#0 next#6 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [26] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] { { next#6 = bitmap_line::x2#0 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [28] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] { { next#6 = bitmap_line::x2#0 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [29] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [30] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [31] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [33] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [34] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [36] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [37] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [38] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [39] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [40] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [42] if((word) bitmap_line::y#1!=(const word) bitmap_line::y2#0) goto bitmap_line::@6 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [44] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6 [ bitmap_line::y#7 bitmap_plot::x#2 ] ( bitmap_line:9 [ next#6 bitmap_line::y#7 bitmap_plot::x#2 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [45] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7 [ bitmap_plot::x#2 bitmap_plot::y#2 ] ( bitmap_line:9 [ next#6 bitmap_plot::x#2 bitmap_plot::y#2 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [48] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [50] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [51] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [53] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [54] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [55] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [56] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [57] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [59] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#0) goto bitmap_line::@9 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [63] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( bitmap_line:9::bitmap_plot:35 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  bitmap_line:9::bitmap_plot:46 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  bitmap_line:9::bitmap_plot:52 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  bitmap_line:9::bitmap_plot:61 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [64] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8 [ bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] ( bitmap_line:9::bitmap_plot:35 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  bitmap_line:9::bitmap_plot:46 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  bitmap_line:9::bitmap_plot:52 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  bitmap_line:9::bitmap_plot:61 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [65] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0 [ bitmap_plot::x#4 bitmap_plot::plotter#1 ] ( bitmap_line:9::bitmap_plot:35 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  bitmap_line:9::bitmap_plot:46 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  bitmap_line:9::bitmap_plot:52 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  bitmap_line:9::bitmap_plot:61 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [67] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1) [ ] ( bitmap_line:9::bitmap_plot:35 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  bitmap_line:9::bitmap_plot:46 [ next#6 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  bitmap_line:9::bitmap_plot:52 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  bitmap_line:9::bitmap_plot:61 [ next#6 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [80] (word) abs_u16::return#2 ← - (word) abs_u16::w#2 [ abs_u16::return#2 ] ( bitmap_line:9::abs_u16:15 [ next#6 bitmap_line::x2#0 abs_u16::return#2 ] { { abs_u16::w#0 = abs_u16::w#2 bitmap_line::x2#0 next#6 } { abs_u16::return#0 = abs_u16::return#4 } }  bitmap_line:9::abs_u16:18 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 abs_u16::return#2 ] { { next#6 = bitmap_line::x2#0 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [89] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( bitmap_clear:6::memset:84 [ memset::num#2 memset::str#3 memset::c#4 ] { }  bitmap_clear:6::memset:86 [ memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ memset::c#4 ]
Statement [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( bitmap_clear:6::memset:84 [ memset::str#3 memset::c#4 memset::end#0 ] { }  bitmap_clear:6::memset:86 [ memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( bitmap_clear:6::memset:84 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  bitmap_clear:6::memset:86 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:6::memset:84 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:6::memset:86 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [95] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:6::memset:84 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:6::memset:86 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:25 [ memset::c#4 ]
Statement [114] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( bitmap_init:4 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:30 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [0] *((const nomodify byte*) BORDER_COLOR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) BG_COLOR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) BITMAP&(word) $3fff/(word) $400 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] (word) bitmap_line::x2#0 ← (word) next#6 [ next#6 bitmap_line::x2#0 ] (  [ next#6 bitmap_line::x2#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [11] if((word) next#0!=(word) $140) goto main::@5 [ next#0 ] (  [ next#0 ] { }  ) always clobbers reg byte a 
Statement [14] (word) abs_u16::w#0 ← (word) bitmap_line::x2#0 [ bitmap_line::x2#0 abs_u16::w#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 abs_u16::w#0 ] { { abs_u16::w#0 = abs_u16::w#2 bitmap_line::x2#0 next#6 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [16] (word) abs_u16::return#0 ← (word) abs_u16::return#4 [ bitmap_line::x2#0 abs_u16::return#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 abs_u16::return#0 ] { { abs_u16::w#0 = abs_u16::w#2 bitmap_line::x2#0 next#6 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [17] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0 [ bitmap_line::x2#0 bitmap_line::dx#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 ] { { next#6 = bitmap_line::x2#0 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [19] (word) abs_u16::return#1 ← (word) abs_u16::return#4 [ bitmap_line::x2#0 bitmap_line::dx#0 abs_u16::return#1 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 abs_u16::return#1 ] { { next#6 = bitmap_line::x2#0 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [20] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [21] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [22] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [23] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] { { sgn_u16::w#0 = sgn_u16::w#2 bitmap_line::x2#0 next#6 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [25] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] { { sgn_u16::w#0 = sgn_u16::w#2 bitmap_line::x2#0 next#6 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [26] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] { { next#6 = bitmap_line::x2#0 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [28] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] { { next#6 = bitmap_line::x2#0 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [29] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [30] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [31] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [33] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [34] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [36] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [37] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [38] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [39] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [40] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [42] if((word) bitmap_line::y#1!=(const word) bitmap_line::y2#0) goto bitmap_line::@6 [ bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] ( bitmap_line:9 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [44] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6 [ bitmap_line::y#7 bitmap_plot::x#2 ] ( bitmap_line:9 [ next#6 bitmap_line::y#7 bitmap_plot::x#2 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [45] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7 [ bitmap_plot::x#2 bitmap_plot::y#2 ] ( bitmap_line:9 [ next#6 bitmap_plot::x#2 bitmap_plot::y#2 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [48] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [50] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [51] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [53] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [54] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [55] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [56] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [57] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [59] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#0) goto bitmap_line::@9 [ bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] ( bitmap_line:9 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [63] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( bitmap_line:9::bitmap_plot:35 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  bitmap_line:9::bitmap_plot:46 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  bitmap_line:9::bitmap_plot:52 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  bitmap_line:9::bitmap_plot:61 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [64] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8 [ bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] ( bitmap_line:9::bitmap_plot:35 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  bitmap_line:9::bitmap_plot:46 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  bitmap_line:9::bitmap_plot:52 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  bitmap_line:9::bitmap_plot:61 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [65] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0 [ bitmap_plot::x#4 bitmap_plot::plotter#1 ] ( bitmap_line:9::bitmap_plot:35 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  bitmap_line:9::bitmap_plot:46 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  bitmap_line:9::bitmap_plot:52 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  bitmap_line:9::bitmap_plot:61 [ next#6 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a 
Statement [67] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1) [ ] ( bitmap_line:9::bitmap_plot:35 [ next#6 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  bitmap_line:9::bitmap_plot:46 [ next#6 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  bitmap_line:9::bitmap_plot:52 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 ] { { next#6 = bitmap_line::x2#0 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  bitmap_line:9::bitmap_plot:61 [ next#6 ] { { next#6 = bitmap_line::x2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [80] (word) abs_u16::return#2 ← - (word) abs_u16::w#2 [ abs_u16::return#2 ] ( bitmap_line:9::abs_u16:15 [ next#6 bitmap_line::x2#0 abs_u16::return#2 ] { { abs_u16::w#0 = abs_u16::w#2 bitmap_line::x2#0 next#6 } { abs_u16::return#0 = abs_u16::return#4 } }  bitmap_line:9::abs_u16:18 [ next#6 bitmap_line::x2#0 bitmap_line::dx#0 abs_u16::return#2 ] { { next#6 = bitmap_line::x2#0 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [89] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( bitmap_clear:6::memset:84 [ memset::num#2 memset::str#3 memset::c#4 ] { }  bitmap_clear:6::memset:86 [ memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Statement [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( bitmap_clear:6::memset:84 [ memset::str#3 memset::c#4 memset::end#0 ] { }  bitmap_clear:6::memset:86 [ memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( bitmap_clear:6::memset:84 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  bitmap_clear:6::memset:86 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:6::memset:84 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:6::memset:86 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [95] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:6::memset:84 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:6::memset:86 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [107] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( bitmap_init:4 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] { }  ) always clobbers reg byte a 
Statement [114] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( bitmap_init:4 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ next#6 next#11 next#0 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#12 bitmap_line::x#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#1 bitmap_line::y#2 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#1 bitmap_plot::y#3 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:13 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#1 bitmap_plot::x#3 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ sgn_u16::w#2 sgn_u16::w#0 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ sgn_u16::return#4 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 ] : zp[2]:19 , 
Potential registers zp[2]:21 [ memset::num#2 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ memset::str#3 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ memset::c#4 ] : zp[1]:25 , reg byte x , 
Potential registers zp[2]:26 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:26 , 
Potential registers zp[1]:28 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp[1]:30 , reg byte x , reg byte y , 
Potential registers zp[2]:31 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp[2]:31 , 
Potential registers zp[2]:33 [ bitmap_line::x2#0 ] : zp[2]:33 , 
Potential registers zp[2]:35 [ abs_u16::return#0 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ bitmap_line::dx#0 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ abs_u16::return#1 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ bitmap_line::dy#0 ] : zp[2]:41 , 
Potential registers zp[2]:43 [ sgn_u16::return#0 ] : zp[2]:43 , 
Potential registers zp[2]:45 [ bitmap_line::sx#0 ] : zp[2]:45 , 
Potential registers zp[2]:47 [ sgn_u16::return#1 ] : zp[2]:47 , 
Potential registers zp[2]:49 [ bitmap_line::sy#0 ] : zp[2]:49 , 
Potential registers zp[2]:51 [ bitmap_plot::plotter#0 ] : zp[2]:51 , 
Potential registers zp[2]:53 [ bitmap_plot::$0 ] : zp[2]:53 , 
Potential registers zp[2]:55 [ bitmap_plot::plotter#1 ] : zp[2]:55 , 
Potential registers zp[1]:57 [ bitmap_plot::$1 ] : zp[1]:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ sgn_u16::$0 ] : zp[1]:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:59 [ sgn_u16::$1 ] : zp[1]:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ abs_u16::$0 ] : zp[1]:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:61 [ abs_u16::$1 ] : zp[1]:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:62 [ memset::end#0 ] : zp[2]:62 , 
Potential registers zp[1]:64 [ bitmap_init::$7 ] : zp[1]:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:65 [ bitmap_init::$4 ] : zp[1]:65 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:66 [ bitmap_init::$5 ] : zp[1]:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ bitmap_init::$6 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [bitmap_plot] 260,311: zp[1]:12 [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#1 bitmap_plot::y#3 ] 200,002: zp[2]:53 [ bitmap_plot::$0 ] 200,002: zp[1]:57 [ bitmap_plot::$1 ] 150,001.5: zp[2]:55 [ bitmap_plot::plotter#1 ] 75,129.25: zp[2]:13 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#1 bitmap_plot::x#3 ] 50,000.5: zp[2]:51 [ bitmap_plot::plotter#0 ] 
Uplift Scope [bitmap_line] 69,036.46: zp[2]:6 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#12 bitmap_line::x#1 ] 55,005.5: zp[2]:8 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#1 bitmap_line::y#2 ] 52,560.77: zp[2]:4 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] 52,560.77: zp[2]:10 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] 868.77: zp[2]:41 [ bitmap_line::dy#0 ] 800.18: zp[2]:37 [ bitmap_line::dx#0 ] 773.19: zp[2]:49 [ bitmap_line::sy#0 ] 693.21: zp[2]:45 [ bitmap_line::sx#0 ] 340.47: zp[2]:33 [ bitmap_line::x2#0 ] 
Uplift Scope [abs_u16] 3,531: zp[2]:19 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 ] 2,002: zp[1]:60 [ abs_u16::$0 ] 2,002: zp[1]:61 [ abs_u16::$1 ] 202: zp[2]:35 [ abs_u16::return#0 ] 202: zp[2]:39 [ abs_u16::return#1 ] 
Uplift Scope [sgn_u16] 2,002: zp[1]:58 [ sgn_u16::$0 ] 2,002: zp[1]:59 [ sgn_u16::$1 ] 1,304: zp[2]:15 [ sgn_u16::w#2 sgn_u16::w#0 ] 202: zp[2]:43 [ sgn_u16::return#0 ] 202: zp[2]:47 [ sgn_u16::return#1 ] 50.5: zp[2]:17 [ sgn_u16::return#4 ] 
Uplift Scope [memset] 3,572.33: zp[2]:26 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 183.67: zp[2]:62 [ memset::end#0 ] 125.12: zp[1]:25 [ memset::c#4 ] 101: zp[2]:21 [ memset::num#2 ] 0: zp[2]:23 [ memset::str#3 ] 
Uplift Scope [bitmap_init] 366.12: zp[2]:31 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 319.83: zp[1]:28 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 202: zp[1]:29 [ bitmap_init::x#2 bitmap_init::x#1 ] 202: zp[1]:30 [ bitmap_init::y#2 bitmap_init::y#1 ] 202: zp[1]:65 [ bitmap_init::$4 ] 202: zp[1]:66 [ bitmap_init::$5 ] 202: zp[1]:67 [ bitmap_init::$6 ] 50.5: zp[1]:64 [ bitmap_init::$7 ] 
Uplift Scope [] 44: zp[2]:2 [ next#6 next#11 next#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [bitmap_clear] 
Uplift Scope [main] 

Uplifting [bitmap_plot] best 37076 combination reg byte x [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#1 bitmap_plot::y#3 ] zp[2]:53 [ bitmap_plot::$0 ] reg byte x [ bitmap_plot::$1 ] zp[2]:55 [ bitmap_plot::plotter#1 ] zp[2]:13 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#1 bitmap_plot::x#3 ] zp[2]:51 [ bitmap_plot::plotter#0 ] 
Uplifting [bitmap_line] best 37076 combination zp[2]:6 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#12 bitmap_line::x#1 ] zp[2]:8 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#1 bitmap_line::y#2 ] zp[2]:4 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] zp[2]:10 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] zp[2]:41 [ bitmap_line::dy#0 ] zp[2]:37 [ bitmap_line::dx#0 ] zp[2]:49 [ bitmap_line::sy#0 ] zp[2]:45 [ bitmap_line::sx#0 ] zp[2]:33 [ bitmap_line::x2#0 ] 
Uplifting [abs_u16] best 37064 combination zp[2]:19 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 ] reg byte a [ abs_u16::$0 ] reg byte a [ abs_u16::$1 ] zp[2]:35 [ abs_u16::return#0 ] zp[2]:39 [ abs_u16::return#1 ] 
Uplifting [sgn_u16] best 37052 combination reg byte a [ sgn_u16::$0 ] reg byte a [ sgn_u16::$1 ] zp[2]:15 [ sgn_u16::w#2 sgn_u16::w#0 ] zp[2]:43 [ sgn_u16::return#0 ] zp[2]:47 [ sgn_u16::return#1 ] zp[2]:17 [ sgn_u16::return#4 ] 
Uplifting [memset] best 37036 combination zp[2]:26 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:62 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:21 [ memset::num#2 ] zp[2]:23 [ memset::str#3 ] 
Uplifting [bitmap_init] best 36526 combination zp[2]:31 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] reg byte a [ bitmap_init::$4 ] zp[1]:66 [ bitmap_init::$5 ] zp[1]:67 [ bitmap_init::$6 ] zp[1]:64 [ bitmap_init::$7 ] 
Limited combination testing to 100 combinations of 15360 possible.
Uplifting [] best 36526 combination zp[2]:2 [ next#6 next#11 next#0 ] 
Uplifting [MOS6526_CIA] best 36526 combination 
Uplifting [MOS6569_VICII] best 36526 combination 
Uplifting [MOS6581_SID] best 36526 combination 
Uplifting [bitmap_clear] best 36526 combination 
Uplifting [main] best 36526 combination 
Attempting to uplift remaining variables inzp[1]:66 [ bitmap_init::$5 ]
Uplifting [bitmap_init] best 36466 combination reg byte a [ bitmap_init::$5 ] 
Attempting to uplift remaining variables inzp[1]:67 [ bitmap_init::$6 ]
Uplifting [bitmap_init] best 36406 combination reg byte a [ bitmap_init::$6 ] 
Attempting to uplift remaining variables inzp[1]:64 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 36406 combination zp[1]:64 [ bitmap_init::$7 ] 
Coalescing zero page register [ zp[2]:6 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#12 bitmap_line::x#1 ] ] with [ zp[2]:13 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#1 bitmap_plot::x#3 ] ] - score: 3
Coalescing zero page register [ zp[2]:2 [ next#6 next#11 next#0 ] ] with [ zp[2]:33 [ bitmap_line::x2#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ sgn_u16::return#4 ] ] with [ zp[2]:43 [ sgn_u16::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ sgn_u16::return#4 sgn_u16::return#0 ] ] with [ zp[2]:47 [ sgn_u16::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 ] ] with [ zp[2]:35 [ abs_u16::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::return#0 ] ] with [ zp[2]:39 [ abs_u16::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ memset::num#2 ] ] with [ zp[2]:62 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ memset::str#3 ] ] with [ zp[2]:26 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ bitmap_plot::plotter#0 ] ] with [ zp[2]:55 [ bitmap_plot::plotter#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 ] ] with [ zp[2]:49 [ bitmap_line::sy#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::return#0 abs_u16::return#1 ] ] with [ zp[2]:41 [ bitmap_line::dy#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ memset::num#2 memset::end#0 ] ] with [ zp[2]:2 [ next#6 next#11 next#0 bitmap_line::x2#0 ] ]
Coalescing zero page register [ zp[2]:23 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:4 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] ]
Coalescing zero page register [ zp[2]:31 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp[2]:6 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#1 bitmap_plot::x#3 ] ]
Coalescing zero page register [ zp[2]:51 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 ] ] with [ zp[2]:15 [ sgn_u16::w#2 sgn_u16::w#0 ] ]
Allocated (was zp[2]:8) zp[2]:2 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#1 bitmap_line::y#2 ]
Allocated (was zp[2]:10) zp[2]:4 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
Allocated (was zp[2]:17) zp[2]:6 [ sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 bitmap_line::sy#0 ]
Allocated (was zp[2]:19) zp[2]:8 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::return#0 abs_u16::return#1 bitmap_line::dy#0 ]
Allocated (was zp[2]:21) zp[2]:10 [ memset::num#2 memset::end#0 next#6 next#11 next#0 bitmap_line::x2#0 ]
Allocated (was zp[2]:23) zp[2]:12 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
Allocated (was zp[2]:31) zp[2]:14 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#1 bitmap_plot::x#3 ]
Allocated (was zp[2]:37) zp[2]:16 [ bitmap_line::dx#0 ]
Allocated (was zp[2]:45) zp[2]:18 [ bitmap_line::sx#0 ]
Allocated (was zp[2]:51) zp[2]:20 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 sgn_u16::w#2 sgn_u16::w#0 ]
Allocated (was zp[2]:53) zp[2]:22 [ bitmap_plot::$0 ]
Allocated (was zp[1]:64) zp[1]:24 [ bitmap_init::$7 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Shows that bitmap2.kc line() does not have the same problem as bitmap-draw.kc
// See bitmap-line-anim-1.kc
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const WHITE = 1
  .const PURPLE = 4
  .label BORDER_COLOR = $d020
  .label BG_COLOR = $d021
  .label D011 = $d011
  .label VIC_MEMORY = $d018
  .label SCREEN = $400
  .label BITMAP = $2000
  .label next = $a
  // main
main: {
    // [0] *((const nomodify byte*) BORDER_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDER_COLOR
    // [1] *((const nomodify byte*) BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BG_COLOR
    // [2] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [3] *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) BITMAP&(word) $3fff/(word) $400 -- _deref_pbuc1=vbuc2 
    lda #(SCREEN&$3fff)/$40|(BITMAP&$3fff)/$400
    sta VIC_MEMORY
    // [4] call bitmap_init 
    // [97] phi from main to bitmap_init [phi:main->bitmap_init]
  bitmap_init_from_main:
    jsr bitmap_init
    // [5] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [6] call bitmap_clear 
    // [83] phi from main::@3 to bitmap_clear [phi:main::@3->bitmap_clear]
  bitmap_clear_from___b3:
    jsr bitmap_clear
    // [7] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [7] phi (word) next#6 = (word) 0 [phi:main::@3->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z next
    lda #>0
    sta.z next+1
    jmp __b1
    // main::@1
  __b1:
    // [8] (word) bitmap_line::x2#0 ← (word) next#6
    // [9] call bitmap_line 
    jsr bitmap_line
    jmp __b4
    // main::@4
  __b4:
    // [10] (word) next#0 ← ++ (word) next#6 -- vwuz1=_inc_vwuz1 
    inc.z next
    bne !+
    inc.z next+1
  !:
    // [11] if((word) next#0!=(word) $140) goto main::@5 -- vwuz1_neq_vwuc1_then_la1 
    lda.z next+1
    cmp #>$140
    bne __b5_from___b4
    lda.z next
    cmp #<$140
    bne __b5_from___b4
    // [13] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    // [13] phi (word) next#11 = (byte) 0 [phi:main::@4->main::@2#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z next
    lda #>0
    sta.z next+1
    jmp __b2
    // [12] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [13] phi from main::@5 to main::@2 [phi:main::@5->main::@2]
  __b2_from___b5:
    // [13] phi (word) next#11 = (word) next#0 [phi:main::@5->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [7] phi (word) next#6 = (word) next#11 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // bitmap_line
// Draw a line on the bitmap using bresenhams algorithm
// bitmap_line(word zp($a) x2)
bitmap_line: {
    .const x1 = 0
    .const y1 = 0
    .const y2 = $64
    .label dx = $10
    .label dy = 8
    .label sx = $12
    .label sy = 6
    .label e1 = 4
    .label e = $c
    .label y = 2
    .label x = $e
    .label x2 = $a
    // [14] (word) abs_u16::w#0 ← (word) bitmap_line::x2#0 -- vwuz1=vwuz2 
    lda.z x2
    sta.z abs_u16.w
    lda.z x2+1
    sta.z abs_u16.w+1
    // [15] call abs_u16 
    // [76] phi from bitmap_line to abs_u16 [phi:bitmap_line->abs_u16]
  abs_u16_from_bitmap_line:
    // [76] phi (word) abs_u16::w#2 = (word) abs_u16::w#0 [phi:bitmap_line->abs_u16#0] -- register_copy 
    jsr abs_u16
    // [16] (word) abs_u16::return#0 ← (word) abs_u16::return#4
    jmp __b12
    // bitmap_line::@12
  __b12:
    // [17] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0 -- vwuz1=vwuz2 
    lda.z abs_u16.return
    sta.z dx
    lda.z abs_u16.return+1
    sta.z dx+1
    // [18] call abs_u16 
    // [76] phi from bitmap_line::@12 to abs_u16 [phi:bitmap_line::@12->abs_u16]
  abs_u16_from___b12:
    // [76] phi (word) abs_u16::w#2 = (const word) bitmap_line::y2#0 [phi:bitmap_line::@12->abs_u16#0] -- vwuz1=vwuc1 
    lda #<y2
    sta.z abs_u16.w
    lda #>y2
    sta.z abs_u16.w+1
    jsr abs_u16
    // [19] (word) abs_u16::return#1 ← (word) abs_u16::return#4
    jmp __b13
    // bitmap_line::@13
  __b13:
    // [20] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1
    // [21] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1 -- vwuz1_neq_0_then_la1 
    lda.z dx
    bne __b1
    lda.z dx+1
    bne __b1
    jmp __b18
    // bitmap_line::@18
  __b18:
    // [22] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4 -- vwuz1_eq_0_then_la1 
    lda.z dy
    bne !+
    lda.z dy+1
    beq __b4_from___b18
  !:
    jmp __b1
    // bitmap_line::@1
  __b1:
    // [23] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#0 -- vwuz1=vwuz2 
    lda.z x2
    sta.z sgn_u16.w
    lda.z x2+1
    sta.z sgn_u16.w+1
    // [24] call sgn_u16 
    // [69] phi from bitmap_line::@1 to sgn_u16 [phi:bitmap_line::@1->sgn_u16]
  sgn_u16_from___b1:
    // [69] phi (word) sgn_u16::w#2 = (word) sgn_u16::w#0 [phi:bitmap_line::@1->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // [25] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [26] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0 -- vwuz1=vwuz2 
    lda.z sgn_u16.return
    sta.z sx
    lda.z sgn_u16.return+1
    sta.z sx+1
    // [27] call sgn_u16 
    // [69] phi from bitmap_line::@14 to sgn_u16 [phi:bitmap_line::@14->sgn_u16]
  sgn_u16_from___b14:
    // [69] phi (word) sgn_u16::w#2 = (const word) bitmap_line::y2#0 [phi:bitmap_line::@14->sgn_u16#0] -- vwuz1=vwuc1 
    lda #<y2
    sta.z sgn_u16.w
    lda #>y2
    sta.z sgn_u16.w+1
    jsr sgn_u16
    // [28] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4
    jmp __b15
    // bitmap_line::@15
  __b15:
    // [29] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1
    // [30] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2 -- vwuz1_gt_vwuz2_then_la1 
    lda.z dy+1
    cmp.z dx+1
    bcc __b2
    bne !+
    lda.z dy
    cmp.z dx
    bcc __b2
  !:
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [31] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dx+1
    lsr
    sta.z e+1
    lda.z dx
    ror
    sta.z e
    // [32] phi from bitmap_line::@5 to bitmap_line::@6 [phi:bitmap_line::@5->bitmap_line::@6]
  __b6_from___b5:
    // [32] phi (word) bitmap_line::e#3 = (word) bitmap_line::e#0 [phi:bitmap_line::@5->bitmap_line::@6#0] -- register_copy 
    // [32] phi (word) bitmap_line::y#4 = (const word) bitmap_line::y1#0 [phi:bitmap_line::@5->bitmap_line::@6#1] -- vwuz1=vwuc1 
    lda #<y1
    sta.z y
    lda #>y1
    sta.z y+1
    // [32] phi (word) bitmap_line::x#13 = (const word) bitmap_line::x1#0 [phi:bitmap_line::@5->bitmap_line::@6#2] -- vwuz1=vwuc1 
    lda #<x1
    sta.z x
    lda #>x1
    sta.z x+1
    jmp __b6
    // [32] phi from bitmap_line::@7 to bitmap_line::@6 [phi:bitmap_line::@7->bitmap_line::@6]
  __b6_from___b7:
    // [32] phi (word) bitmap_line::e#3 = (word) bitmap_line::e#6 [phi:bitmap_line::@7->bitmap_line::@6#0] -- register_copy 
    // [32] phi (word) bitmap_line::y#4 = (word) bitmap_line::y#1 [phi:bitmap_line::@7->bitmap_line::@6#1] -- register_copy 
    // [32] phi (word) bitmap_line::x#13 = (word) bitmap_line::x#12 [phi:bitmap_line::@7->bitmap_line::@6#2] -- register_copy 
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [33] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13
    // [34] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4 -- vbuxx=_byte_vwuz1 
    lda.z y
    tax
    // [35] call bitmap_plot 
    // [62] phi from bitmap_line::@6 to bitmap_plot [phi:bitmap_line::@6->bitmap_plot]
  bitmap_plot_from___b6:
    // [62] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#1 [phi:bitmap_line::@6->bitmap_plot#0] -- register_copy 
    // [62] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line::@6->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b16
    // bitmap_line::@16
  __b16:
    // [36] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // [37] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    lda.z e+1
    adc.z dx+1
    sta.z e+1
    // [38] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7 -- vwuz1_ge_vwuz2_then_la1 
    lda.z e+1
    cmp.z dy+1
    bne !+
    lda.z e
    cmp.z dy
    beq __b7_from___b16
  !:
    bcc __b7_from___b16
    jmp __b8
    // bitmap_line::@8
  __b8:
    // [39] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // [40] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    lda.z e+1
    sbc.z dy+1
    sta.z e+1
    // [41] phi from bitmap_line::@16 bitmap_line::@8 to bitmap_line::@7 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7]
  __b7_from___b16:
  __b7_from___b8:
    // [41] phi (word) bitmap_line::e#6 = (word) bitmap_line::e#1 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#0] -- register_copy 
    // [41] phi (word) bitmap_line::x#12 = (word) bitmap_line::x#13 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#1] -- register_copy 
    jmp __b7
    // bitmap_line::@7
  __b7:
    // [42] if((word) bitmap_line::y#1!=(const word) bitmap_line::y2#0) goto bitmap_line::@6 -- vwuz1_neq_vwuc1_then_la1 
    lda.z y+1
    cmp #>y2
    bne __b6_from___b7
    lda.z y
    cmp #<y2
    bne __b6_from___b7
    // [43] phi from bitmap_line::@10 bitmap_line::@7 to bitmap_line::@3 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3]
  __b3_from___b10:
  __b3_from___b7:
    // [43] phi (word) bitmap_line::y#7 = (word) bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#0] -- register_copy 
    // [43] phi (word) bitmap_line::x#6 = (word) bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#1] -- register_copy 
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [44] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6
    // [45] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7 -- vbuxx=_byte_vwuz1 
    lda.z y
    tax
    // [46] call bitmap_plot 
    // [62] phi from bitmap_line::@3 to bitmap_plot [phi:bitmap_line::@3->bitmap_plot]
  bitmap_plot_from___b3:
    // [62] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#2 [phi:bitmap_line::@3->bitmap_plot#0] -- register_copy 
    // [62] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line::@3->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [47] return 
    rts
    // bitmap_line::@2
  __b2:
    // [48] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dy+1
    lsr
    sta.z e1+1
    lda.z dy
    ror
    sta.z e1
    // [49] phi from bitmap_line::@2 to bitmap_line::@9 [phi:bitmap_line::@2->bitmap_line::@9]
  __b9_from___b2:
    // [49] phi (word) bitmap_line::e1#3 = (word) bitmap_line::e1#0 [phi:bitmap_line::@2->bitmap_line::@9#0] -- register_copy 
    // [49] phi (word) bitmap_line::y#15 = (const word) bitmap_line::y1#0 [phi:bitmap_line::@2->bitmap_line::@9#1] -- vwuz1=vwuc1 
    lda #<y1
    sta.z y
    lda #>y1
    sta.z y+1
    // [49] phi (word) bitmap_line::x#7 = (const word) bitmap_line::x1#0 [phi:bitmap_line::@2->bitmap_line::@9#2] -- vwuz1=vwuc1 
    lda #<x1
    sta.z x
    lda #>x1
    sta.z x+1
    jmp __b9
    // [49] phi from bitmap_line::@10 to bitmap_line::@9 [phi:bitmap_line::@10->bitmap_line::@9]
  __b9_from___b10:
    // [49] phi (word) bitmap_line::e1#3 = (word) bitmap_line::e1#6 [phi:bitmap_line::@10->bitmap_line::@9#0] -- register_copy 
    // [49] phi (word) bitmap_line::y#15 = (word) bitmap_line::y#13 [phi:bitmap_line::@10->bitmap_line::@9#1] -- register_copy 
    // [49] phi (word) bitmap_line::x#7 = (word) bitmap_line::x#15 [phi:bitmap_line::@10->bitmap_line::@9#2] -- register_copy 
    jmp __b9
    // bitmap_line::@9
  __b9:
    // [50] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7
    // [51] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15 -- vbuxx=_byte_vwuz1 
    lda.z y
    tax
    // [52] call bitmap_plot 
    // [62] phi from bitmap_line::@9 to bitmap_plot [phi:bitmap_line::@9->bitmap_plot]
  bitmap_plot_from___b9:
    // [62] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#3 [phi:bitmap_line::@9->bitmap_plot#0] -- register_copy 
    // [62] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line::@9->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b17
    // bitmap_line::@17
  __b17:
    // [53] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // [54] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e1
    clc
    adc.z dy
    sta.z e1
    lda.z e1+1
    adc.z dy+1
    sta.z e1+1
    // [55] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10 -- vwuz1_ge_vwuz2_then_la1 
    lda.z e1+1
    cmp.z dx+1
    bne !+
    lda.z e1
    cmp.z dx
    beq __b10_from___b17
  !:
    bcc __b10_from___b17
    jmp __b11
    // bitmap_line::@11
  __b11:
    // [56] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // [57] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e1
    sec
    sbc.z dx
    sta.z e1
    lda.z e1+1
    sbc.z dx+1
    sta.z e1+1
    // [58] phi from bitmap_line::@11 bitmap_line::@17 to bitmap_line::@10 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10]
  __b10_from___b11:
  __b10_from___b17:
    // [58] phi (word) bitmap_line::e1#6 = (word) bitmap_line::e1#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#0] -- register_copy 
    // [58] phi (word) bitmap_line::y#13 = (word) bitmap_line::y#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#1] -- register_copy 
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [59] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#0) goto bitmap_line::@9 -- vwuz1_neq_vwuz2_then_la1 
    lda.z x+1
    cmp.z x2+1
    bne __b9_from___b10
    lda.z x
    cmp.z x2
    bne __b9_from___b10
    jmp __b3_from___b10
    // [60] phi from bitmap_line::@18 to bitmap_line::@4 [phi:bitmap_line::@18->bitmap_line::@4]
  __b4_from___b18:
    jmp __b4
    // bitmap_line::@4
  __b4:
    // [61] call bitmap_plot 
    // [62] phi from bitmap_line::@4 to bitmap_plot [phi:bitmap_line::@4->bitmap_plot]
  bitmap_plot_from___b4:
    // [62] phi (word) bitmap_plot::x#4 = (const word) bitmap_line::x1#0 [phi:bitmap_line::@4->bitmap_plot#0] -- vwuz1=vwuc1 
    lda #<x1
    sta.z bitmap_plot.x
    lda #>x1
    sta.z bitmap_plot.x+1
    // [62] phi (byte) bitmap_plot::y#4 = (byte) 0 [phi:bitmap_line::@4->bitmap_plot#1] -- vbuxx=vbuc1 
    ldx #0
    jsr bitmap_plot
    jmp __breturn
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zp($e) x, byte register(X) y)
bitmap_plot: {
    .label __0 = $16
    .label plotter = $14
    .label x = $e
    // [63] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta.z plotter+1
    lda bitmap_plot_ylo,x
    sta.z plotter
    // [64] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __0
    lda.z x+1
    and #>$fff8
    sta.z __0+1
    // [65] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z __0
    sta.z plotter
    lda.z plotter+1
    adc.z __0+1
    sta.z plotter+1
    // [66] (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#4 -- vbuxx=_lo_vwuz1 
    ldx.z x
    // [67] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    ldy #0
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [68] return 
    rts
}
  // sgn_u16
// Get the sign of a 16-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is
// sgn_u16(word zp($14) w)
sgn_u16: {
    .label w = $14
    .label return = 6
    // [70] (byte~) sgn_u16::$0 ← > (word) sgn_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // [71] (byte~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [72] if((byte) 0!=(byte~) sgn_u16::$1) goto sgn_u16::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1_from_sgn_u16
    // [74] phi from sgn_u16 to sgn_u16::@return [phi:sgn_u16->sgn_u16::@return]
  __breturn_from_sgn_u16:
    // [74] phi (word) sgn_u16::return#4 = (byte) 1 [phi:sgn_u16->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<1
    sta.z return
    lda #>1
    sta.z return+1
    jmp __breturn
    // [73] phi from sgn_u16 to sgn_u16::@1 [phi:sgn_u16->sgn_u16::@1]
  __b1_from_sgn_u16:
    jmp __b1
    // sgn_u16::@1
  __b1:
    // [74] phi from sgn_u16::@1 to sgn_u16::@return [phi:sgn_u16::@1->sgn_u16::@return]
  __breturn_from___b1:
    // [74] phi (word) sgn_u16::return#4 = (byte) -1 [phi:sgn_u16::@1->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z return
    lda #>-1
    sta.z return+1
    jmp __breturn
    // sgn_u16::@return
  __breturn:
    // [75] return 
    rts
}
  // abs_u16
// Get the absolute value of a 16-bit unsigned number treated as a signed number.
// abs_u16(word zp(8) w)
abs_u16: {
    .label w = 8
    .label return = 8
    // [77] (byte~) abs_u16::$0 ← > (word) abs_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // [78] (byte~) abs_u16::$1 ← (byte~) abs_u16::$0 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [79] if((byte) 0!=(byte~) abs_u16::$1) goto abs_u16::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [81] phi from abs_u16 abs_u16::@1 to abs_u16::@return [phi:abs_u16/abs_u16::@1->abs_u16::@return]
  __breturn_from_abs_u16:
  __breturn_from___b1:
    // [81] phi (word) abs_u16::return#4 = (word) abs_u16::w#2 [phi:abs_u16/abs_u16::@1->abs_u16::@return#0] -- register_copy 
    jmp __breturn
    // abs_u16::@1
  __b1:
    // [80] (word) abs_u16::return#2 ← - (word) abs_u16::w#2 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    jmp __breturn_from___b1
    // abs_u16::@return
  __breturn:
    // [82] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE*$10+PURPLE
    // [84] call memset 
    // [88] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
  memset_from_bitmap_clear:
    // [88] phi (byte) memset::c#4 = (const byte) bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [88] phi (void*) memset::str#3 = (void*)(const nomodify byte*) SCREEN [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (word) $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [85] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [86] call memset 
    // [88] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
  memset_from___b1:
    // [88] phi (byte) memset::c#4 = (byte) 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [88] phi (void*) memset::str#3 = (void*)(const nomodify byte*) BITMAP [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP
    sta.z memset.str
    lda #>BITMAP
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (word) $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [87] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($c) str, byte register(X) c, word zp($a) num)
memset: {
    .label end = $a
    .label dst = $c
    .label num = $a
    .label str = $c
    // [89] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [92] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [92] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [94] return 
    rts
    // memset::@3
  __b3:
    // [95] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [96] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label __7 = $18
    .label yoffs = $e
    // [98] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [98] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [98] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    jmp __b1
    // [98] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [98] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [98] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [99] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // [100] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // [101] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b6_from___b1
    // [103] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [103] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    jmp __b2
    // [102] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [103] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [103] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [104] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [105] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    // [106] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [106] phi (byte*) bitmap_init::yoffs#2 = (const nomodify byte*) BITMAP [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta.z yoffs
    lda #>BITMAP
    sta.z yoffs+1
    // [106] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [106] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [106] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [106] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [107] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __7
    // [108] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // [109] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __7
    // [110] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // [111] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // [112] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // [113] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [114] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [115] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [115] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [116] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [117] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [118] return 
    rts
}
  // File Data
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b2
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b18
Removing instruction jmp __b1
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp __b8
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b17
Removing instruction jmp __b11
Removing instruction jmp __b10
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda.z e+1
Removing instruction lda.z e1+1
Removing instruction ldy #0
Removing instruction lda #>-1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b5_from___b4 with __b2
Replacing label __b5_from___b4 with __b2
Replacing label __b4_from___b18 with __b4
Replacing label __b7_from___b16 with __b7
Replacing label __b7_from___b16 with __b7
Replacing label __b6_from___b7 with __b6
Replacing label __b6_from___b7 with __b6
Replacing label __b10_from___b17 with __b10
Replacing label __b10_from___b17 with __b10
Replacing label __b9_from___b10 with __b9
Replacing label __b9_from___b10 with __b9
Replacing label __b3_from___b10 with __b3
Replacing label __b1_from_sgn_u16 with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b6_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Removing instruction __b3_from_main:
Removing instruction bitmap_clear_from___b3:
Removing instruction __b5_from___b4:
Removing instruction __b5:
Removing instruction __b2_from___b5:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b7:
Removing instruction __b7_from___b16:
Removing instruction __b7_from___b8:
Removing instruction __b3_from___b10:
Removing instruction __b3_from___b7:
Removing instruction __b9_from___b10:
Removing instruction __b10_from___b11:
Removing instruction __b10_from___b17:
Removing instruction __b4_from___b18:
Removing instruction bitmap_plot_from___b4:
Removing instruction __b1_from_sgn_u16:
Removing instruction __breturn_from___b1:
Removing instruction __breturn_from_abs_u16:
Removing instruction __b1_from_bitmap_clear:
Removing instruction memset_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b1:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bitmap_init_from_main:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b4:
Removing instruction __b2_from___b4:
Removing instruction abs_u16_from_bitmap_line:
Removing instruction __b12:
Removing instruction abs_u16_from___b12:
Removing instruction __b13:
Removing instruction __b18:
Removing instruction sgn_u16_from___b1:
Removing instruction __b14:
Removing instruction sgn_u16_from___b14:
Removing instruction __b15:
Removing instruction __b5:
Removing instruction __b6_from___b5:
Removing instruction bitmap_plot_from___b6:
Removing instruction __b16:
Removing instruction __b8:
Removing instruction bitmap_plot_from___b3:
Removing instruction __b9_from___b2:
Removing instruction bitmap_plot_from___b9:
Removing instruction __b17:
Removing instruction __b11:
Removing instruction __breturn:
Removing instruction __breturn_from_sgn_u16:
Removing instruction memset_from_bitmap_clear:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b1_from_bitmap_init:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b1 in bne __b2
Skipping double jump to __b1 in bne __b2
Skipping double jump to __b1 in jmp __b2
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b1
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __breturn_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b6
Removing instruction jmp __b9
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp __b1
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [83] beq __b4 to bne

FINAL SYMBOL TABLE
(const nomodify byte*) BG_COLOR = (byte*) 53281
(const nomodify byte*) BITMAP = (byte*) 8192
(const nomodify byte*) BORDER_COLOR = (byte*) 53280
(const nomodify byte*) D011 = (byte*) 53265
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const nomodify byte) PURPLE = (byte) 4
(const nomodify byte*) SCREEN = (byte*) 1024
(const nomodify byte) VIC_BMM = (byte) $20
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte*) VIC_MEMORY = (byte*) 53272
(const nomodify byte) VIC_RSEL = (byte) 8
(const nomodify byte) WHITE = (byte) 1
(word()) abs_u16((word) abs_u16::w)
(byte~) abs_u16::$0 reg byte a 2002.0
(byte~) abs_u16::$1 reg byte a 2002.0
(label) abs_u16::@1
(label) abs_u16::@return
(word) abs_u16::return
(word) abs_u16::return#0 return zp[2]:8 202.0
(word) abs_u16::return#1 return zp[2]:8 202.0
(word) abs_u16::return#2 return zp[2]:8 2002.0
(word) abs_u16::return#4 return zp[2]:8 551.0
(word) abs_u16::w
(word) abs_u16::w#0 w zp[2]:8 202.0
(word) abs_u16::w#2 w zp[2]:8 776.0
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(label) bitmap_clear::@1
(label) bitmap_clear::@return
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::col
(const byte) bitmap_clear::col#0 col = (const nomodify byte) WHITE*(byte) $10+(const nomodify byte) PURPLE
(byte) bitmap_clear::fgcol
(byte*) bitmap_gfx
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(byte~) bitmap_init::$4 reg byte a 202.0
(byte~) bitmap_init::$5 reg byte a 202.0
(byte~) bitmap_init::$6 reg byte a 202.0
(byte~) bitmap_init::$7 zp[1]:24 50.5
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@return
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte a 101.0
(byte) bitmap_init::bits#3 reg byte a 151.5
(byte) bitmap_init::bits#4 reg byte a 67.33333333333333
(byte*) bitmap_init::gfx
(byte*) bitmap_init::screen
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 151.5
(byte) bitmap_init::x#2 reg byte x 50.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 151.5
(byte) bitmap_init::y#2 reg byte x 50.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp[2]:14 202.0
(byte*) bitmap_init::yoffs#2 yoffs zp[2]:14 63.125
(byte*) bitmap_init::yoffs#4 yoffs zp[2]:14 101.0
(void()) bitmap_line((word) bitmap_line::x1 , (word) bitmap_line::y1 , (word) bitmap_line::x2 , (word) bitmap_line::y2)
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@11
(label) bitmap_line::@12
(label) bitmap_line::@13
(label) bitmap_line::@14
(label) bitmap_line::@15
(label) bitmap_line::@16
(label) bitmap_line::@17
(label) bitmap_line::@18
(label) bitmap_line::@2
(label) bitmap_line::@3
(label) bitmap_line::@4
(label) bitmap_line::@5
(label) bitmap_line::@6
(label) bitmap_line::@7
(label) bitmap_line::@8
(label) bitmap_line::@9
(label) bitmap_line::@return
(word) bitmap_line::dx
(word) bitmap_line::dx#0 dx zp[2]:16 800.1842105263158
(word) bitmap_line::dy
(word) bitmap_line::dy#0 dy zp[2]:8 868.7714285714285
(word) bitmap_line::e
(word) bitmap_line::e#0 e zp[2]:12 202.0
(word) bitmap_line::e#1 e zp[2]:12 13334.666666666666
(word) bitmap_line::e#2 e zp[2]:12 20002.0
(word) bitmap_line::e#3 e zp[2]:12 4020.6000000000004
(word) bitmap_line::e#6 e zp[2]:12 15001.5
(word) bitmap_line::e1
(word) bitmap_line::e1#0 e1 zp[2]:4 202.0
(word) bitmap_line::e1#1 e1 zp[2]:4 13334.666666666666
(word) bitmap_line::e1#2 e1 zp[2]:4 20002.0
(word) bitmap_line::e1#3 e1 zp[2]:4 4020.6000000000004
(word) bitmap_line::e1#6 e1 zp[2]:4 15001.5
(word) bitmap_line::sx
(word) bitmap_line::sx#0 sx zp[2]:18 693.2068965517242
(word) bitmap_line::sy
(word) bitmap_line::sy#0 sy zp[2]:6 773.1923076923076
(word) bitmap_line::x
(word) bitmap_line::x#1 x zp[2]:14 10001.0
(word) bitmap_line::x#12 x zp[2]:14 20002.0
(word) bitmap_line::x#13 x zp[2]:14 5714.857142857143
(word) bitmap_line::x#15 x zp[2]:14 5714.857142857143
(word) bitmap_line::x#6 x zp[2]:14 20103.0
(word) bitmap_line::x#7 x zp[2]:14 7500.75
(word) bitmap_line::x1
(const word) bitmap_line::x1#0 x1 = (byte) 0
(word) bitmap_line::x2
(word) bitmap_line::x2#0 x2 zp[2]:10 340.4666666666667
(word) bitmap_line::y
(word) bitmap_line::y#1 y zp[2]:2 5714.857142857143
(word) bitmap_line::y#13 y zp[2]:2 20002.0
(word) bitmap_line::y#15 y zp[2]:2 4286.142857142857
(word) bitmap_line::y#2 y zp[2]:2 10001.0
(word) bitmap_line::y#4 y zp[2]:2 5000.5
(word) bitmap_line::y#7 y zp[2]:2 10001.0
(word) bitmap_line::y1
(const word) bitmap_line::y1#0 y1 = (byte) 0
(word) bitmap_line::y2
(const word) bitmap_line::y2#0 y2 = (byte) $64
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0 zp[2]:22 200002.0
(byte~) bitmap_plot::$1 reg byte x 200002.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 plotter zp[2]:20 50000.5
(byte*) bitmap_plot::plotter#1 plotter zp[2]:20 150001.5
(word) bitmap_plot::x
(word) bitmap_plot::x#1 x zp[2]:14 10001.0
(word) bitmap_plot::x#2 x zp[2]:14 101.0
(word) bitmap_plot::x#3 x zp[2]:14 10001.0
(word) bitmap_plot::x#4 x zp[2]:14 55026.25
(byte) bitmap_plot::y
(byte) bitmap_plot::y#1 reg byte x 20002.0
(byte) bitmap_plot::y#2 reg byte x 202.0
(byte) bitmap_plot::y#3 reg byte x 20002.0
(byte) bitmap_plot::y#4 reg byte x 220105.0
(const to_nomodify byte*) bitmap_plot_bit[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_yhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_ylo[(number) $100]  = { fill( $100, 0) }
(byte*) bitmap_screen
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 125.125
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:12 2002.0
(byte*) memset::dst#2 dst zp[2]:12 1368.3333333333335
(byte*) memset::dst#4 dst zp[2]:12 202.0
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:10 183.66666666666669
(word) memset::num
(word) memset::num#2 num zp[2]:10 101.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:12
(word) next
(word) next#0 next zp[2]:10 11.0
(word) next#11 next zp[2]:10 22.0
(word) next#6 next zp[2]:10 11.0
(word()) sgn_u16((word) sgn_u16::w)
(byte~) sgn_u16::$0 reg byte a 2002.0
(byte~) sgn_u16::$1 reg byte a 2002.0
(label) sgn_u16::@1
(label) sgn_u16::@return
(word) sgn_u16::return
(word) sgn_u16::return#0 return zp[2]:6 202.0
(word) sgn_u16::return#1 return zp[2]:6 202.0
(word) sgn_u16::return#4 return zp[2]:6 50.5
(word) sgn_u16::w
(word) sgn_u16::w#0 w zp[2]:20 202.0
(word) sgn_u16::w#2 w zp[2]:20 1102.0

zp[2]:2 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#1 bitmap_line::y#2 ]
zp[2]:4 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
reg byte x [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#1 bitmap_plot::y#3 ]
zp[2]:6 [ sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 bitmap_line::sy#0 ]
zp[2]:8 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::return#0 abs_u16::return#1 bitmap_line::dy#0 ]
zp[2]:10 [ memset::num#2 memset::end#0 next#6 next#11 next#0 bitmap_line::x2#0 ]
zp[2]:12 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
reg byte x [ memset::c#4 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[2]:14 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#1 bitmap_plot::x#3 ]
zp[2]:16 [ bitmap_line::dx#0 ]
zp[2]:18 [ bitmap_line::sx#0 ]
zp[2]:20 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 sgn_u16::w#2 sgn_u16::w#0 ]
zp[2]:22 [ bitmap_plot::$0 ]
reg byte x [ bitmap_plot::$1 ]
reg byte a [ sgn_u16::$0 ]
reg byte a [ sgn_u16::$1 ]
reg byte a [ abs_u16::$0 ]
reg byte a [ abs_u16::$1 ]
zp[1]:24 [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]


FINAL ASSEMBLER
Score: 30186

  // File Comments
// Shows that bitmap2.kc line() does not have the same problem as bitmap-draw.kc
// See bitmap-line-anim-1.kc
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const WHITE = 1
  .const PURPLE = 4
  .label BORDER_COLOR = $d020
  .label BG_COLOR = $d021
  .label D011 = $d011
  .label VIC_MEMORY = $d018
  .label SCREEN = $400
  .label BITMAP = $2000
  .label next = $a
  // main
main: {
    // *BORDER_COLOR = 0
    // [0] *((const nomodify byte*) BORDER_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDER_COLOR
    // *BG_COLOR = 0
    // [1] *((const nomodify byte*) BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta BG_COLOR
    // *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3
    // [2] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // *VIC_MEMORY =  (byte)((((word)SCREEN&$3fff)/$40)|(((word)BITMAP&$3fff)/$400))
    // [3] *((const nomodify byte*) VIC_MEMORY) ← (byte)(word)(const nomodify byte*) SCREEN&(word) $3fff/(byte) $40|(word)(const nomodify byte*) BITMAP&(word) $3fff/(word) $400 -- _deref_pbuc1=vbuc2 
    lda #(SCREEN&$3fff)/$40|(BITMAP&$3fff)/$400
    sta VIC_MEMORY
    // bitmap_init(BITMAP, SCREEN)
    // [4] call bitmap_init 
    // [97] phi from main to bitmap_init [phi:main->bitmap_init]
    jsr bitmap_init
    // [5] phi from main to main::@3 [phi:main->main::@3]
    // main::@3
    // bitmap_clear(PURPLE, WHITE)
    // [6] call bitmap_clear 
    // [83] phi from main::@3 to bitmap_clear [phi:main::@3->bitmap_clear]
    jsr bitmap_clear
    // [7] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [7] phi (word) next#6 = (word) 0 [phi:main::@3->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z next
    sta.z next+1
    // main::@1
  __b1:
    // bitmap_line(0,0,next,100)
    // [8] (word) bitmap_line::x2#0 ← (word) next#6
    // [9] call bitmap_line 
    jsr bitmap_line
    // main::@4
    // next++;
    // [10] (word) next#0 ← ++ (word) next#6 -- vwuz1=_inc_vwuz1 
    inc.z next
    bne !+
    inc.z next+1
  !:
    // if(next==320)
    // [11] if((word) next#0!=(word) $140) goto main::@5 -- vwuz1_neq_vwuc1_then_la1 
    lda.z next+1
    cmp #>$140
    bne __b1
    lda.z next
    cmp #<$140
    bne __b1
    // [13] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
    // [13] phi (word) next#11 = (byte) 0 [phi:main::@4->main::@2#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z next
    sta.z next+1
    jmp __b1
    // [12] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // [13] phi from main::@5 to main::@2 [phi:main::@5->main::@2]
    // [13] phi (word) next#11 = (word) next#0 [phi:main::@5->main::@2#0] -- register_copy 
    // main::@2
    // [7] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [7] phi (word) next#6 = (word) next#11 [phi:main::@2->main::@1#0] -- register_copy 
}
  // bitmap_line
// Draw a line on the bitmap using bresenhams algorithm
// bitmap_line(word zp($a) x2)
bitmap_line: {
    .const x1 = 0
    .const y1 = 0
    .const y2 = $64
    .label dx = $10
    .label dy = 8
    .label sx = $12
    .label sy = 6
    .label e1 = 4
    .label e = $c
    .label y = 2
    .label x = $e
    .label x2 = $a
    // abs_u16(x2-x1)
    // [14] (word) abs_u16::w#0 ← (word) bitmap_line::x2#0 -- vwuz1=vwuz2 
    lda.z x2
    sta.z abs_u16.w
    lda.z x2+1
    sta.z abs_u16.w+1
    // [15] call abs_u16 
    // [76] phi from bitmap_line to abs_u16 [phi:bitmap_line->abs_u16]
    // [76] phi (word) abs_u16::w#2 = (word) abs_u16::w#0 [phi:bitmap_line->abs_u16#0] -- register_copy 
    jsr abs_u16
    // abs_u16(x2-x1)
    // [16] (word) abs_u16::return#0 ← (word) abs_u16::return#4
    // bitmap_line::@12
    // dx = abs_u16(x2-x1)
    // [17] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0 -- vwuz1=vwuz2 
    lda.z abs_u16.return
    sta.z dx
    lda.z abs_u16.return+1
    sta.z dx+1
    // abs_u16(y2-y1)
    // [18] call abs_u16 
    // [76] phi from bitmap_line::@12 to abs_u16 [phi:bitmap_line::@12->abs_u16]
    // [76] phi (word) abs_u16::w#2 = (const word) bitmap_line::y2#0 [phi:bitmap_line::@12->abs_u16#0] -- vwuz1=vwuc1 
    lda #<y2
    sta.z abs_u16.w
    lda #>y2
    sta.z abs_u16.w+1
    jsr abs_u16
    // abs_u16(y2-y1)
    // [19] (word) abs_u16::return#1 ← (word) abs_u16::return#4
    // bitmap_line::@13
    // dy = abs_u16(y2-y1)
    // [20] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1
    // if(dx==0 && dy==0)
    // [21] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1 -- vwuz1_neq_0_then_la1 
    lda.z dx
    bne __b1
    lda.z dx+1
    bne __b1
    // bitmap_line::@18
    // [22] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4 -- vwuz1_eq_0_then_la1 
    lda.z dy
    bne !+
    lda.z dy+1
    bne !__b4+
    jmp __b4
  !__b4:
  !:
    // bitmap_line::@1
  __b1:
    // sgn_u16(x2-x1)
    // [23] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#0 -- vwuz1=vwuz2 
    lda.z x2
    sta.z sgn_u16.w
    lda.z x2+1
    sta.z sgn_u16.w+1
    // [24] call sgn_u16 
    // [69] phi from bitmap_line::@1 to sgn_u16 [phi:bitmap_line::@1->sgn_u16]
    // [69] phi (word) sgn_u16::w#2 = (word) sgn_u16::w#0 [phi:bitmap_line::@1->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // sgn_u16(x2-x1)
    // [25] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4
    // bitmap_line::@14
    // sx = sgn_u16(x2-x1)
    // [26] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0 -- vwuz1=vwuz2 
    lda.z sgn_u16.return
    sta.z sx
    lda.z sgn_u16.return+1
    sta.z sx+1
    // sgn_u16(y2-y1)
    // [27] call sgn_u16 
    // [69] phi from bitmap_line::@14 to sgn_u16 [phi:bitmap_line::@14->sgn_u16]
    // [69] phi (word) sgn_u16::w#2 = (const word) bitmap_line::y2#0 [phi:bitmap_line::@14->sgn_u16#0] -- vwuz1=vwuc1 
    lda #<y2
    sta.z sgn_u16.w
    lda #>y2
    sta.z sgn_u16.w+1
    jsr sgn_u16
    // sgn_u16(y2-y1)
    // [28] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4
    // bitmap_line::@15
    // sy = sgn_u16(y2-y1)
    // [29] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1
    // if(dx > dy)
    // [30] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2 -- vwuz1_gt_vwuz2_then_la1 
    lda.z dy+1
    cmp.z dx+1
    bcc __b2
    bne !+
    lda.z dy
    cmp.z dx
    bcc __b2
  !:
    // bitmap_line::@5
    // e = dx/2
    // [31] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dx+1
    lsr
    sta.z e+1
    lda.z dx
    ror
    sta.z e
    // [32] phi from bitmap_line::@5 to bitmap_line::@6 [phi:bitmap_line::@5->bitmap_line::@6]
    // [32] phi (word) bitmap_line::e#3 = (word) bitmap_line::e#0 [phi:bitmap_line::@5->bitmap_line::@6#0] -- register_copy 
    // [32] phi (word) bitmap_line::y#4 = (const word) bitmap_line::y1#0 [phi:bitmap_line::@5->bitmap_line::@6#1] -- vwuz1=vwuc1 
    lda #<y1
    sta.z y
    lda #>y1
    sta.z y+1
    // [32] phi (word) bitmap_line::x#13 = (const word) bitmap_line::x1#0 [phi:bitmap_line::@5->bitmap_line::@6#2] -- vwuz1=vwuc1 
    lda #<x1
    sta.z x
    lda #>x1
    sta.z x+1
    // [32] phi from bitmap_line::@7 to bitmap_line::@6 [phi:bitmap_line::@7->bitmap_line::@6]
    // [32] phi (word) bitmap_line::e#3 = (word) bitmap_line::e#6 [phi:bitmap_line::@7->bitmap_line::@6#0] -- register_copy 
    // [32] phi (word) bitmap_line::y#4 = (word) bitmap_line::y#1 [phi:bitmap_line::@7->bitmap_line::@6#1] -- register_copy 
    // [32] phi (word) bitmap_line::x#13 = (word) bitmap_line::x#12 [phi:bitmap_line::@7->bitmap_line::@6#2] -- register_copy 
    // bitmap_line::@6
  __b6:
    // bitmap_plot(x,(char)y)
    // [33] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13
    // [34] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4 -- vbuxx=_byte_vwuz1 
    lda.z y
    tax
    // [35] call bitmap_plot 
    // [62] phi from bitmap_line::@6 to bitmap_plot [phi:bitmap_line::@6->bitmap_plot]
    // [62] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#1 [phi:bitmap_line::@6->bitmap_plot#0] -- register_copy 
    // [62] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line::@6->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line::@16
    // y += sy
    // [36] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // e += dx
    // [37] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    lda.z e+1
    adc.z dx+1
    sta.z e+1
    // if(dy<e)
    // [38] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z dy+1
    bne !+
    lda.z e
    cmp.z dy
    beq __b7
  !:
    bcc __b7
    // bitmap_line::@8
    // x += sx
    // [39] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // e -= dy
    // [40] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    lda.z e+1
    sbc.z dy+1
    sta.z e+1
    // [41] phi from bitmap_line::@16 bitmap_line::@8 to bitmap_line::@7 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7]
    // [41] phi (word) bitmap_line::e#6 = (word) bitmap_line::e#1 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#0] -- register_copy 
    // [41] phi (word) bitmap_line::x#12 = (word) bitmap_line::x#13 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#1] -- register_copy 
    // bitmap_line::@7
  __b7:
    // while (y != y2)
    // [42] if((word) bitmap_line::y#1!=(const word) bitmap_line::y2#0) goto bitmap_line::@6 -- vwuz1_neq_vwuc1_then_la1 
    lda.z y+1
    cmp #>y2
    bne __b6
    lda.z y
    cmp #<y2
    bne __b6
    // [43] phi from bitmap_line::@10 bitmap_line::@7 to bitmap_line::@3 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3]
    // [43] phi (word) bitmap_line::y#7 = (word) bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#0] -- register_copy 
    // [43] phi (word) bitmap_line::x#6 = (word) bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#1] -- register_copy 
    // bitmap_line::@3
  __b3:
    // bitmap_plot(x,(char)y)
    // [44] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6
    // [45] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7 -- vbuxx=_byte_vwuz1 
    lda.z y
    tax
    // [46] call bitmap_plot 
    // [62] phi from bitmap_line::@3 to bitmap_plot [phi:bitmap_line::@3->bitmap_plot]
    // [62] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#2 [phi:bitmap_line::@3->bitmap_plot#0] -- register_copy 
    // [62] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line::@3->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line::@return
    // }
    // [47] return 
    rts
    // bitmap_line::@2
  __b2:
    // e = dy/2
    // [48] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dy+1
    lsr
    sta.z e1+1
    lda.z dy
    ror
    sta.z e1
    // [49] phi from bitmap_line::@2 to bitmap_line::@9 [phi:bitmap_line::@2->bitmap_line::@9]
    // [49] phi (word) bitmap_line::e1#3 = (word) bitmap_line::e1#0 [phi:bitmap_line::@2->bitmap_line::@9#0] -- register_copy 
    // [49] phi (word) bitmap_line::y#15 = (const word) bitmap_line::y1#0 [phi:bitmap_line::@2->bitmap_line::@9#1] -- vwuz1=vwuc1 
    lda #<y1
    sta.z y
    lda #>y1
    sta.z y+1
    // [49] phi (word) bitmap_line::x#7 = (const word) bitmap_line::x1#0 [phi:bitmap_line::@2->bitmap_line::@9#2] -- vwuz1=vwuc1 
    lda #<x1
    sta.z x
    lda #>x1
    sta.z x+1
    // [49] phi from bitmap_line::@10 to bitmap_line::@9 [phi:bitmap_line::@10->bitmap_line::@9]
    // [49] phi (word) bitmap_line::e1#3 = (word) bitmap_line::e1#6 [phi:bitmap_line::@10->bitmap_line::@9#0] -- register_copy 
    // [49] phi (word) bitmap_line::y#15 = (word) bitmap_line::y#13 [phi:bitmap_line::@10->bitmap_line::@9#1] -- register_copy 
    // [49] phi (word) bitmap_line::x#7 = (word) bitmap_line::x#15 [phi:bitmap_line::@10->bitmap_line::@9#2] -- register_copy 
    // bitmap_line::@9
  __b9:
    // bitmap_plot(x,(char)y)
    // [50] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7
    // [51] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15 -- vbuxx=_byte_vwuz1 
    lda.z y
    tax
    // [52] call bitmap_plot 
    // [62] phi from bitmap_line::@9 to bitmap_plot [phi:bitmap_line::@9->bitmap_plot]
    // [62] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#3 [phi:bitmap_line::@9->bitmap_plot#0] -- register_copy 
    // [62] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line::@9->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line::@17
    // x += sx
    // [53] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // e += dy
    // [54] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e1
    clc
    adc.z dy
    sta.z e1
    lda.z e1+1
    adc.z dy+1
    sta.z e1+1
    // if(dx < e)
    // [55] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z dx+1
    bne !+
    lda.z e1
    cmp.z dx
    beq __b10
  !:
    bcc __b10
    // bitmap_line::@11
    // y += sy
    // [56] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // e -= dx
    // [57] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e1
    sec
    sbc.z dx
    sta.z e1
    lda.z e1+1
    sbc.z dx+1
    sta.z e1+1
    // [58] phi from bitmap_line::@11 bitmap_line::@17 to bitmap_line::@10 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10]
    // [58] phi (word) bitmap_line::e1#6 = (word) bitmap_line::e1#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#0] -- register_copy 
    // [58] phi (word) bitmap_line::y#13 = (word) bitmap_line::y#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#1] -- register_copy 
    // bitmap_line::@10
  __b10:
    // while (x != x2)
    // [59] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#0) goto bitmap_line::@9 -- vwuz1_neq_vwuz2_then_la1 
    lda.z x+1
    cmp.z x2+1
    bne __b9
    lda.z x
    cmp.z x2
    bne __b9
    jmp __b3
    // [60] phi from bitmap_line::@18 to bitmap_line::@4 [phi:bitmap_line::@18->bitmap_line::@4]
    // bitmap_line::@4
  __b4:
    // bitmap_plot(x,(char)y)
    // [61] call bitmap_plot 
    // [62] phi from bitmap_line::@4 to bitmap_plot [phi:bitmap_line::@4->bitmap_plot]
    // [62] phi (word) bitmap_plot::x#4 = (const word) bitmap_line::x1#0 [phi:bitmap_line::@4->bitmap_plot#0] -- vwuz1=vwuc1 
    lda #<x1
    sta.z bitmap_plot.x
    lda #>x1
    sta.z bitmap_plot.x+1
    // [62] phi (byte) bitmap_plot::y#4 = (byte) 0 [phi:bitmap_line::@4->bitmap_plot#1] -- vbuxx=vbuc1 
    ldx #0
    jsr bitmap_plot
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zp($e) x, byte register(X) y)
bitmap_plot: {
    .label __0 = $16
    .label plotter = $14
    .label x = $e
    // plotter = (char*) { bitmap_plot_yhi[y], bitmap_plot_ylo[y] }
    // [63] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta.z plotter+1
    lda bitmap_plot_ylo,x
    sta.z plotter
    // x & $fff8
    // [64] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __0
    lda.z x+1
    and #>$fff8
    sta.z __0+1
    // plotter += ( x & $fff8 )
    // [65] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z __0
    sta.z plotter
    lda.z plotter+1
    adc.z __0+1
    sta.z plotter+1
    // <x
    // [66] (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#4 -- vbuxx=_lo_vwuz1 
    ldx.z x
    // *plotter |= bitmap_plot_bit[<x]
    // [67] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    sta (plotter),y
    // bitmap_plot::@return
    // }
    // [68] return 
    rts
}
  // sgn_u16
// Get the sign of a 16-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is
// sgn_u16(word zp($14) w)
sgn_u16: {
    .label w = $14
    .label return = 6
    // >w
    // [70] (byte~) sgn_u16::$0 ← > (word) sgn_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // >w&0x80
    // [71] (byte~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if(>w&0x80)
    // [72] if((byte) 0!=(byte~) sgn_u16::$1) goto sgn_u16::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [74] phi from sgn_u16 to sgn_u16::@return [phi:sgn_u16->sgn_u16::@return]
    // [74] phi (word) sgn_u16::return#4 = (byte) 1 [phi:sgn_u16->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<1
    sta.z return
    lda #>1
    sta.z return+1
    rts
    // [73] phi from sgn_u16 to sgn_u16::@1 [phi:sgn_u16->sgn_u16::@1]
    // sgn_u16::@1
  __b1:
    // [74] phi from sgn_u16::@1 to sgn_u16::@return [phi:sgn_u16::@1->sgn_u16::@return]
    // [74] phi (word) sgn_u16::return#4 = (byte) -1 [phi:sgn_u16::@1->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z return
    sta.z return+1
    // sgn_u16::@return
    // }
    // [75] return 
    rts
}
  // abs_u16
// Get the absolute value of a 16-bit unsigned number treated as a signed number.
// abs_u16(word zp(8) w)
abs_u16: {
    .label w = 8
    .label return = 8
    // >w
    // [77] (byte~) abs_u16::$0 ← > (word) abs_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // >w&0x80
    // [78] (byte~) abs_u16::$1 ← (byte~) abs_u16::$0 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if(>w&0x80)
    // [79] if((byte) 0!=(byte~) abs_u16::$1) goto abs_u16::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [81] phi from abs_u16 abs_u16::@1 to abs_u16::@return [phi:abs_u16/abs_u16::@1->abs_u16::@return]
    // [81] phi (word) abs_u16::return#4 = (word) abs_u16::w#2 [phi:abs_u16/abs_u16::@1->abs_u16::@return#0] -- register_copy 
    rts
    // abs_u16::@1
  __b1:
    // return -w;
    // [80] (word) abs_u16::return#2 ← - (word) abs_u16::w#2 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    // abs_u16::@return
    // }
    // [82] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE*$10+PURPLE
    // memset(bitmap_screen, col, 1000uw)
    // [84] call memset 
    // [88] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
    // [88] phi (byte) memset::c#4 = (const byte) bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [88] phi (void*) memset::str#3 = (void*)(const nomodify byte*) SCREEN [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (word) $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [85] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
    // bitmap_clear::@1
    // memset(bitmap_gfx, 0, 8000uw)
    // [86] call memset 
    // [88] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
    // [88] phi (byte) memset::c#4 = (byte) 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [88] phi (void*) memset::str#3 = (void*)(const nomodify byte*) BITMAP [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP
    sta.z memset.str
    lda #>BITMAP
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (word) $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    // bitmap_clear::@return
    // }
    // [87] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($c) str, byte register(X) c, word zp($a) num)
memset: {
    .label end = $a
    .label dst = $c
    .label num = $a
    .label str = $c
    // if(num>0)
    // [89] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // end = (char*)str + num
    // [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [92] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [92] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [94] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [95] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [96] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label __7 = $18
    .label yoffs = $e
    // [98] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
    // [98] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [98] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    // [98] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
    // [98] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [98] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    // bitmap_init::@1
  __b1:
    // bitmap_plot_bit[x] = bits
    // [99] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // bits >>= 1
    // [100] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // if(bits==0)
    // [101] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b2
    // [103] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
    // [103] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    // [102] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
    // bitmap_init::@6
    // [103] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
    // [103] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    // bitmap_init::@2
  __b2:
    // for(char x : 0..255)
    // [104] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [105] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [106] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
    // [106] phi (byte*) bitmap_init::yoffs#2 = (const nomodify byte*) BITMAP [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta.z yoffs
    lda #>BITMAP
    sta.z yoffs+1
    // [106] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    // [106] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
    // [106] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [106] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    // bitmap_init::@3
  __b3:
    // y&$7
    // [107] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __7
    // <yoffs
    // [108] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // y&$7 | <yoffs
    // [109] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __7
    // bitmap_plot_ylo[y] = y&$7 | <yoffs
    // [110] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // >yoffs
    // [111] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // bitmap_plot_yhi[y] = >yoffs
    // [112] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // if((y&$7)==7)
    // [113] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4
    // bitmap_init::@5
    // yoffs = yoffs + 40*8
    // [114] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [115] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
    // [115] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    // bitmap_init::@4
  __b4:
    // for(char y : 0..255)
    // [116] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [117] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // bitmap_init::@return
    // }
    // [118] return 
    rts
}
  // File Data
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0

