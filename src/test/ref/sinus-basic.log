Inlined call call prepareMEM (word) setFAC::w 
Inlined call call prepareMEM (word)(byte*) setMEMtoFAC::mem 
Inlined call call prepareMEM (word)(byte*) setFACtoMEM::mem 
Inlined call call prepareMEM (word)(byte*) setARGtoMEM::mem 
Inlined call call prepareMEM (word)(byte*) addMEMtoFAC::mem 
Inlined call call prepareMEM (word)(byte*) subFACfromMEM::mem 
Inlined call call prepareMEM (word)(byte*) divMEMbyFAC::mem 
Inlined call call prepareMEM (word)(byte*) mulFACbyMEM::mem 
Inlined call call prepareMEM (word)(byte*) pwrMEMbyFAC::mem 
Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@14
  (byte*) print_char_cursor#31 ← phi( main::@14/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#14 ← phi( main::@14/(byte*) print_line_cursor#15 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#16 ← phi( print_ln/(byte*) print_char_cursor#31 print_ln::@1/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#7 ← phi( print_ln/(byte*) print_line_cursor#14 print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#7 + (number) $28
  (byte*) print_line_cursor#0 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#0 < (byte*) print_char_cursor#16
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#8 ← phi( print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#8
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#17 ← phi( print_ln::@2/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#9 ← phi( print_ln::@2/(byte*) print_line_cursor#8 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#17
  return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from main::@13
  (byte*) print_char_cursor#32 ← phi( main::@13/(byte*) print_char_cursor#34 )
  (word) print_uint::w#1 ← phi( main::@13/(word) print_uint::w#0 )
  (byte~) print_uint::$0 ← > (word) print_uint::w#1
  (byte) print_uchar::b#0 ← (byte~) print_uint::$0
  call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  (word) print_uint::w#2 ← phi( print_uint/(word) print_uint::w#1 )
  (byte*) print_char_cursor#18 ← phi( print_uint/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#18
  (byte~) print_uint::$2 ← < (word) print_uint::w#2
  (byte) print_uchar::b#1 ← (byte~) print_uint::$2
  call print_uchar 
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  (byte*) print_char_cursor#19 ← phi( print_uint::@1/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#19
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  (byte*) print_char_cursor#20 ← phi( print_uint::@2/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#20
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  (byte*) print_char_cursor#33 ← phi( print_uint/(byte*) print_char_cursor#32 print_uint::@1/(byte*) print_char_cursor#2 )
  (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
  (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#3 ← phi( print_uchar/(byte) print_uchar::b#2 )
  (byte*) print_char_cursor#21 ← phi( print_uchar/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#21
  (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
  (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#22 ← phi( print_uchar::@1/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#22
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#23 ← phi( print_uchar::@2/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#23
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_uchar print_uchar::@1
  (byte*) print_char_cursor#24 ← phi( print_uchar/(byte*) print_char_cursor#33 print_uchar::@1/(byte*) print_char_cursor#5 )
  (byte) print_char::ch#2 ← phi( print_uchar/(byte) print_char::ch#0 print_uchar::@1/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#24) ← (byte) print_char::ch#2
  (byte*) print_char_cursor#8 ← ++ (byte*) print_char_cursor#24
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#25 ← phi( print_char/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#25
  return 
  to:@return

(void()) setFAC((word) setFAC::w)
setFAC: scope:[setFAC]  from main main::@1 main::@7
  (word) setFAC::w#3 ← phi( main/(word) setFAC::w#0 main::@1/(word) setFAC::w#1 main::@7/(word) setFAC::w#2 )
  (word) setFAC::prepareMEM1_mem#0 ← (word) setFAC::w#3
  to:setFAC::prepareMEM1
setFAC::prepareMEM1: scope:[setFAC]  from setFAC
  (word) setFAC::prepareMEM1_mem#1 ← phi( setFAC/(word) setFAC::prepareMEM1_mem#0 )
  (byte~) setFAC::prepareMEM1_$0 ← < (word) setFAC::prepareMEM1_mem#1
  *((const nomodify byte*) memLo) ← (byte~) setFAC::prepareMEM1_$0
  (byte~) setFAC::prepareMEM1_$1 ← > (word) setFAC::prepareMEM1_mem#1
  *((const nomodify byte*) memHi) ← (byte~) setFAC::prepareMEM1_$1
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC::prepareMEM1
  asm { ldymemLo ldamemHi jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  return 
  to:@return

(word()) getFAC()
getFAC: scope:[getFAC]  from main::@12
  asm { jsr$b1aa stymemLo stamemHi  }
  (word) getFAC::w#0 ← (word){ *((const nomodify byte*) memHi), *((const nomodify byte*) memLo) }
  (word) getFAC::return#0 ← (word) getFAC::w#0
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  (word) getFAC::return#3 ← phi( getFAC/(word) getFAC::return#0 )
  (word) getFAC::return#1 ← (word) getFAC::return#3
  return 
  to:@return

(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
setMEMtoFAC: scope:[setMEMtoFAC]  from main::@3 main::@6
  (byte*) setMEMtoFAC::mem#2 ← phi( main::@3/(byte*) setMEMtoFAC::mem#0 main::@6/(byte*) setMEMtoFAC::mem#1 )
  (word) setMEMtoFAC::prepareMEM1_mem#0 ← (word)(byte*) setMEMtoFAC::mem#2
  to:setMEMtoFAC::prepareMEM1
setMEMtoFAC::prepareMEM1: scope:[setMEMtoFAC]  from setMEMtoFAC
  (word) setMEMtoFAC::prepareMEM1_mem#1 ← phi( setMEMtoFAC/(word) setMEMtoFAC::prepareMEM1_mem#0 )
  (byte~) setMEMtoFAC::prepareMEM1_$0 ← < (word) setMEMtoFAC::prepareMEM1_mem#1
  *((const nomodify byte*) memLo) ← (byte~) setMEMtoFAC::prepareMEM1_$0
  (byte~) setMEMtoFAC::prepareMEM1_$1 ← > (word) setMEMtoFAC::prepareMEM1_mem#1
  *((const nomodify byte*) memHi) ← (byte~) setMEMtoFAC::prepareMEM1_$1
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC::prepareMEM1
  asm { ldxmemLo ldymemHi jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  return 
  to:@return

(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
addMEMtoFAC: scope:[addMEMtoFAC]  from main::@11
  (byte*) addMEMtoFAC::mem#1 ← phi( main::@11/(byte*) addMEMtoFAC::mem#0 )
  (word) addMEMtoFAC::prepareMEM1_mem#0 ← (word)(byte*) addMEMtoFAC::mem#1
  to:addMEMtoFAC::prepareMEM1
addMEMtoFAC::prepareMEM1: scope:[addMEMtoFAC]  from addMEMtoFAC
  (word) addMEMtoFAC::prepareMEM1_mem#1 ← phi( addMEMtoFAC/(word) addMEMtoFAC::prepareMEM1_mem#0 )
  (byte~) addMEMtoFAC::prepareMEM1_$0 ← < (word) addMEMtoFAC::prepareMEM1_mem#1
  *((const nomodify byte*) memLo) ← (byte~) addMEMtoFAC::prepareMEM1_$0
  (byte~) addMEMtoFAC::prepareMEM1_$1 ← > (word) addMEMtoFAC::prepareMEM1_mem#1
  *((const nomodify byte*) memHi) ← (byte~) addMEMtoFAC::prepareMEM1_$1
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC::prepareMEM1
  asm { ldamemLo ldymemHi jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  return 
  to:@return

(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
divMEMbyFAC: scope:[divMEMbyFAC]  from main::@8
  (byte*) divMEMbyFAC::mem#1 ← phi( main::@8/(byte*) divMEMbyFAC::mem#0 )
  (word) divMEMbyFAC::prepareMEM1_mem#0 ← (word)(byte*) divMEMbyFAC::mem#1
  to:divMEMbyFAC::prepareMEM1
divMEMbyFAC::prepareMEM1: scope:[divMEMbyFAC]  from divMEMbyFAC
  (word) divMEMbyFAC::prepareMEM1_mem#1 ← phi( divMEMbyFAC/(word) divMEMbyFAC::prepareMEM1_mem#0 )
  (byte~) divMEMbyFAC::prepareMEM1_$0 ← < (word) divMEMbyFAC::prepareMEM1_mem#1
  *((const nomodify byte*) memLo) ← (byte~) divMEMbyFAC::prepareMEM1_$0
  (byte~) divMEMbyFAC::prepareMEM1_$1 ← > (word) divMEMbyFAC::prepareMEM1_mem#1
  *((const nomodify byte*) memHi) ← (byte~) divMEMbyFAC::prepareMEM1_$1
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC::prepareMEM1
  asm { ldamemLo ldymemHi jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  return 
  to:@return

(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
mulFACbyMEM: scope:[mulFACbyMEM]  from main::@10 main::@5
  (byte*) mulFACbyMEM::mem#2 ← phi( main::@10/(byte*) mulFACbyMEM::mem#1 main::@5/(byte*) mulFACbyMEM::mem#0 )
  (word) mulFACbyMEM::prepareMEM1_mem#0 ← (word)(byte*) mulFACbyMEM::mem#2
  to:mulFACbyMEM::prepareMEM1
mulFACbyMEM::prepareMEM1: scope:[mulFACbyMEM]  from mulFACbyMEM
  (word) mulFACbyMEM::prepareMEM1_mem#1 ← phi( mulFACbyMEM/(word) mulFACbyMEM::prepareMEM1_mem#0 )
  (byte~) mulFACbyMEM::prepareMEM1_$0 ← < (word) mulFACbyMEM::prepareMEM1_mem#1
  *((const nomodify byte*) memLo) ← (byte~) mulFACbyMEM::prepareMEM1_$0
  (byte~) mulFACbyMEM::prepareMEM1_$1 ← > (word) mulFACbyMEM::prepareMEM1_mem#1
  *((const nomodify byte*) memHi) ← (byte~) mulFACbyMEM::prepareMEM1_$1
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM::prepareMEM1
  asm { ldamemLo ldymemHi jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  return 
  to:@return

(void()) sinFAC()
sinFAC: scope:[sinFAC]  from main::@9
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  return 
  to:@return

(void()) divFACby10()
divFACby10: scope:[divFACby10]  from main::@2
  asm { jsr$bafe  }
  to:divFACby10::@return
divFACby10::@return: scope:[divFACby10]  from divFACby10
  return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  (byte*) print_line_cursor#30 ← phi( _start::@1/(byte*) print_line_cursor#16 )
  (byte*) print_char_cursor#48 ← phi( _start::@1/(byte*) print_char_cursor#35 )
  (word) setFAC::w#0 ← (number) $4fb
  call setFAC 
  to:main::@2
main::@2: scope:[main]  from main
  (byte*) print_line_cursor#29 ← phi( main/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#47 ← phi( main/(byte*) print_char_cursor#48 )
  call divFACby10 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) print_line_cursor#28 ← phi( main::@2/(byte*) print_line_cursor#29 )
  (byte*) print_char_cursor#46 ← phi( main::@2/(byte*) print_char_cursor#47 )
  (byte*) setMEMtoFAC::mem#0 ← (const byte*) main::f_127
  call setMEMtoFAC 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) print_line_cursor#27 ← phi( main::@3/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#45 ← phi( main::@3/(byte*) print_char_cursor#46 )
  (byte) main::i#0 ← (byte) 1
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@4
  (byte*) print_line_cursor#26 ← phi( main::@15/(byte*) print_line_cursor#2 main::@4/(byte*) print_line_cursor#27 )
  (byte*) print_char_cursor#44 ← phi( main::@15/(byte*) print_char_cursor#11 main::@4/(byte*) print_char_cursor#45 )
  (byte) main::i#2 ← phi( main::@15/(byte) main::i#1 main::@4/(byte) main::i#0 )
  (word) setFAC::w#1 ← (word)(byte) main::i#2
  call setFAC 
  to:main::@5
main::@5: scope:[main]  from main::@1
  (byte) main::i#13 ← phi( main::@1/(byte) main::i#2 )
  (byte*) print_line_cursor#25 ← phi( main::@1/(byte*) print_line_cursor#26 )
  (byte*) print_char_cursor#43 ← phi( main::@1/(byte*) print_char_cursor#44 )
  (byte*) mulFACbyMEM::mem#0 ← (const nomodify byte*) main::f_2pi
  call mulFACbyMEM 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) main::i#12 ← phi( main::@5/(byte) main::i#13 )
  (byte*) print_line_cursor#24 ← phi( main::@5/(byte*) print_line_cursor#25 )
  (byte*) print_char_cursor#42 ← phi( main::@5/(byte*) print_char_cursor#43 )
  (byte*) setMEMtoFAC::mem#1 ← (const byte*) main::f_i
  call setMEMtoFAC 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::i#11 ← phi( main::@6/(byte) main::i#12 )
  (byte*) print_line_cursor#23 ← phi( main::@6/(byte*) print_line_cursor#24 )
  (byte*) print_char_cursor#41 ← phi( main::@6/(byte*) print_char_cursor#42 )
  (word) setFAC::w#2 ← (number) $19
  call setFAC 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) main::i#10 ← phi( main::@7/(byte) main::i#11 )
  (byte*) print_line_cursor#22 ← phi( main::@7/(byte*) print_line_cursor#23 )
  (byte*) print_char_cursor#40 ← phi( main::@7/(byte*) print_char_cursor#41 )
  (byte*) divMEMbyFAC::mem#0 ← (const byte*) main::f_i
  call divMEMbyFAC 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte) main::i#9 ← phi( main::@8/(byte) main::i#10 )
  (byte*) print_line_cursor#21 ← phi( main::@8/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#39 ← phi( main::@8/(byte*) print_char_cursor#40 )
  call sinFAC 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) main::i#8 ← phi( main::@9/(byte) main::i#9 )
  (byte*) print_line_cursor#20 ← phi( main::@9/(byte*) print_line_cursor#21 )
  (byte*) print_char_cursor#38 ← phi( main::@9/(byte*) print_char_cursor#39 )
  (byte*) mulFACbyMEM::mem#1 ← (const byte*) main::f_127
  call mulFACbyMEM 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte) main::i#7 ← phi( main::@10/(byte) main::i#8 )
  (byte*) print_line_cursor#19 ← phi( main::@10/(byte*) print_line_cursor#20 )
  (byte*) print_char_cursor#37 ← phi( main::@10/(byte*) print_char_cursor#38 )
  (byte*) addMEMtoFAC::mem#0 ← (const byte*) main::f_127
  call addMEMtoFAC 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (byte) main::i#6 ← phi( main::@11/(byte) main::i#7 )
  (byte*) print_line_cursor#18 ← phi( main::@11/(byte*) print_line_cursor#19 )
  (byte*) print_char_cursor#36 ← phi( main::@11/(byte*) print_char_cursor#37 )
  call getFAC 
  (word) getFAC::return#2 ← (word) getFAC::return#1
  to:main::@13
main::@13: scope:[main]  from main::@12
  (byte) main::i#5 ← phi( main::@12/(byte) main::i#6 )
  (byte*) print_line_cursor#17 ← phi( main::@12/(byte*) print_line_cursor#18 )
  (byte*) print_char_cursor#34 ← phi( main::@12/(byte*) print_char_cursor#36 )
  (word) getFAC::return#4 ← phi( main::@12/(word) getFAC::return#2 )
  (word~) main::$11 ← (word) getFAC::return#4
  (word) print_uint::w#0 ← (word~) main::$11
  call print_uint 
  to:main::@14
main::@14: scope:[main]  from main::@13
  (byte) main::i#4 ← phi( main::@13/(byte) main::i#5 )
  (byte*) print_line_cursor#15 ← phi( main::@13/(byte*) print_line_cursor#17 )
  (byte*) print_char_cursor#26 ← phi( main::@13/(byte*) print_char_cursor#4 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#26
  call print_ln 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (byte) main::i#3 ← phi( main::@14/(byte) main::i#4 )
  (byte*) print_char_cursor#27 ← phi( main::@14/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#10 ← phi( main::@14/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#10
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#27
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(1,$19)
  (bool~) main::$14 ← (byte) main::i#1 != rangelast(1,$19)
  if((bool~) main::$14) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@15
  (byte*) print_line_cursor#11 ← phi( main::@15/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#28 ← phi( main::@15/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#28
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#11
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#4 ← (byte*) print_screen#0
  (byte*) print_char_cursor#13 ← (byte*) print_line_cursor#4
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte*) print_screen#4 ← phi( _start::_init1/(byte*) print_screen#0 )
  (byte*) print_line_cursor#16 ← phi( _start::_init1/(byte*) print_line_cursor#4 )
  (byte*) print_char_cursor#35 ← phi( _start::_init1/(byte*) print_char_cursor#13 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte*) print_screen#3 ← phi( _start::@1/(byte*) print_screen#4 )
  (byte*) print_line_cursor#12 ← phi( _start::@1/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#29 ← phi( _start::@1/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#29
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#12
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte*) print_char_cursor#30 ← phi( _start::@2/(byte*) print_char_cursor#14 )
  (byte*) print_line_cursor#13 ← phi( _start::@2/(byte*) print_line_cursor#5 )
  (byte*) print_screen#2 ← phi( _start::@2/(byte*) print_screen#3 )
  (byte*) print_screen#1 ← (byte*) print_screen#2
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#30
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(label) addMEMtoFAC::@1
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(byte*) addMEMtoFAC::mem#0
(byte*) addMEMtoFAC::mem#1
(label) addMEMtoFAC::prepareMEM1
(byte~) addMEMtoFAC::prepareMEM1_$0
(byte~) addMEMtoFAC::prepareMEM1_$1
(word) addMEMtoFAC::prepareMEM1_mem
(word) addMEMtoFAC::prepareMEM1_mem#0
(word) addMEMtoFAC::prepareMEM1_mem#1
(void()) divFACby10()
(label) divFACby10::@return
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(label) divMEMbyFAC::@1
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(byte*) divMEMbyFAC::mem#0
(byte*) divMEMbyFAC::mem#1
(label) divMEMbyFAC::prepareMEM1
(byte~) divMEMbyFAC::prepareMEM1_$0
(byte~) divMEMbyFAC::prepareMEM1_$1
(word) divMEMbyFAC::prepareMEM1_mem
(word) divMEMbyFAC::prepareMEM1_mem#0
(word) divMEMbyFAC::prepareMEM1_mem#1
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::return#0
(word) getFAC::return#1
(word) getFAC::return#2
(word) getFAC::return#3
(word) getFAC::return#4
(word) getFAC::w
(word) getFAC::w#0
(void()) main()
(word~) main::$11
(bool~) main::$14
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(const byte*) main::f_127[]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const nomodify byte*) main::f_2pi = (byte*)(number) $e2e5
(const byte*) main::f_i[]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#11
(byte) main::i#12
(byte) main::i#13
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(const nomodify byte*) memHi = (byte*)(number) $ff
(const nomodify byte*) memLo = (byte*)(number) $fe
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(label) mulFACbyMEM::@1
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#0
(byte*) mulFACbyMEM::mem#1
(byte*) mulFACbyMEM::mem#2
(label) mulFACbyMEM::prepareMEM1
(byte~) mulFACbyMEM::prepareMEM1_$0
(byte~) mulFACbyMEM::prepareMEM1_$1
(word) mulFACbyMEM::prepareMEM1_mem
(word) mulFACbyMEM::prepareMEM1_mem#0
(word) mulFACbyMEM::prepareMEM1_mem#1
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(byte) print_uchar::b#3
(void()) print_uint((word) print_uint::w)
(byte~) print_uint::$0
(byte~) print_uint::$2
(label) print_uint::@1
(label) print_uint::@2
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0
(word) print_uint::w#1
(word) print_uint::w#2
(void()) setFAC((word) setFAC::w)
(label) setFAC::@1
(label) setFAC::@return
(label) setFAC::prepareMEM1
(byte~) setFAC::prepareMEM1_$0
(byte~) setFAC::prepareMEM1_$1
(word) setFAC::prepareMEM1_mem
(word) setFAC::prepareMEM1_mem#0
(word) setFAC::prepareMEM1_mem#1
(word) setFAC::w
(word) setFAC::w#0
(word) setFAC::w#1
(word) setFAC::w#2
(word) setFAC::w#3
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(label) setMEMtoFAC::@1
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#0
(byte*) setMEMtoFAC::mem#1
(byte*) setMEMtoFAC::mem#2
(label) setMEMtoFAC::prepareMEM1
(byte~) setMEMtoFAC::prepareMEM1_$0
(byte~) setMEMtoFAC::prepareMEM1_$1
(word) setMEMtoFAC::prepareMEM1_mem
(word) setMEMtoFAC::prepareMEM1_mem#0
(word) setMEMtoFAC::prepareMEM1_mem#1
(void()) sinFAC()
(label) sinFAC::@return

Fixing inline constructor with getFAC::$0 ← (byte)*(memHi) w= (byte)*(memLo)
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#7 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $4fb in (word) setFAC::w#0 ← (number) $4fb
Adding number conversion cast (unumber) $19 in (word) setFAC::w#2 ← (number) $19
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (word) setFAC::w#0 ← (unumber)(number) $4fb
Inlining cast (word) setFAC::w#2 ← (unumber)(number) $19
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 254
Simplifying constant pointer cast (byte*) 255
Simplifying constant pointer cast (byte*) 58085
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast *((const nomodify byte*) memHi)
Simplifying constant integer cast *((const nomodify byte*) memLo)
Simplifying constant integer cast $4fb
Simplifying constant integer cast $19
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $4fb
Finalized unsigned number type (byte) $19
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#3 & (byte) $f
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#8 print_char_cursor#0 print_line_cursor#9 print_char_cursor#17 print_line_cursor#1 print_char_cursor#1 
Alias print_uchar::b#0 = print_uint::$0 
Alias print_uint::w#1 = print_uint::w#2 
Alias print_char_cursor#18 = print_char_cursor#2 
Alias print_uchar::b#1 = print_uint::$2 
Alias print_char_cursor#19 = print_char_cursor#3 print_char_cursor#20 print_char_cursor#4 
Alias print_uchar::b#2 = print_uchar::b#3 
Alias print_char_cursor#21 = print_char_cursor#5 
Alias print_char_cursor#22 = print_char_cursor#6 print_char_cursor#23 print_char_cursor#7 
Alias print_char_cursor#25 = print_char_cursor#8 print_char_cursor#9 
Alias setFAC::prepareMEM1_mem#0 = setFAC::w#3 setFAC::prepareMEM1_mem#1 
Alias getFAC::return#0 = getFAC::w#0 getFAC::$0 getFAC::return#3 getFAC::return#1 
Alias setMEMtoFAC::prepareMEM1_mem#0 = setMEMtoFAC::prepareMEM1_mem#1 
Alias addMEMtoFAC::prepareMEM1_mem#0 = addMEMtoFAC::prepareMEM1_mem#1 
Alias divMEMbyFAC::prepareMEM1_mem#0 = divMEMbyFAC::prepareMEM1_mem#1 
Alias mulFACbyMEM::prepareMEM1_mem#0 = mulFACbyMEM::prepareMEM1_mem#1 
Alias print_char_cursor#45 = print_char_cursor#47 print_char_cursor#48 print_char_cursor#46 
Alias print_line_cursor#27 = print_line_cursor#29 print_line_cursor#30 print_line_cursor#28 
Alias print_char_cursor#34 = print_char_cursor#43 print_char_cursor#44 print_char_cursor#42 print_char_cursor#41 print_char_cursor#40 print_char_cursor#39 print_char_cursor#38 print_char_cursor#37 print_char_cursor#36 
Alias print_line_cursor#15 = print_line_cursor#25 print_line_cursor#26 print_line_cursor#24 print_line_cursor#23 print_line_cursor#22 print_line_cursor#21 print_line_cursor#20 print_line_cursor#19 print_line_cursor#18 print_line_cursor#17 
Alias main::i#10 = main::i#13 main::i#2 main::i#12 main::i#11 main::i#9 main::i#8 main::i#7 main::i#6 main::i#5 main::i#4 main::i#3 
Alias getFAC::return#2 = getFAC::return#4 
Alias print_uint::w#0 = main::$11 
Alias print_char_cursor#10 = print_char_cursor#26 
Alias print_line_cursor#10 = print_line_cursor#2 print_line_cursor#11 print_line_cursor#3 
Alias print_char_cursor#11 = print_char_cursor#27 print_char_cursor#28 print_char_cursor#12 
Alias print_screen#0 = print_line_cursor#4 print_char_cursor#13 print_char_cursor#35 print_line_cursor#16 print_screen#4 print_screen#3 print_screen#2 print_screen#1 
Alias print_char_cursor#14 = print_char_cursor#29 print_char_cursor#30 print_char_cursor#15 
Alias print_line_cursor#12 = print_line_cursor#5 print_line_cursor#13 print_line_cursor#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#31
Identical Phi Values (word) print_uint::w#1 (word) print_uint::w#0
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#34
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#22
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#22
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#25
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#25
Identical Phi Values (byte*) addMEMtoFAC::mem#1 (byte*) addMEMtoFAC::mem#0
Identical Phi Values (byte*) divMEMbyFAC::mem#1 (byte*) divMEMbyFAC::mem#0
Identical Phi Values (byte*) print_char_cursor#45 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#27 (byte*) print_screen#0
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_ln::$1 [4] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#25) goto print_ln::@1
Simple Condition (bool~) main::$14 [106] if((byte) main::i#1!=rangelast(1,$19)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const word) setFAC::w#0 = $4fb
Constant (const byte*) setMEMtoFAC::mem#0 = main::f_127
Constant (const byte) main::i#0 = 1
Constant (const byte*) mulFACbyMEM::mem#0 = main::f_2pi
Constant (const byte*) setMEMtoFAC::mem#1 = main::f_i
Constant (const word) setFAC::w#2 = $19
Constant (const byte*) divMEMbyFAC::mem#0 = main::f_i
Constant (const byte*) mulFACbyMEM::mem#1 = main::f_127
Constant (const byte*) addMEMtoFAC::mem#0 = main::f_127
Constant (const byte*) print_screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) addMEMtoFAC::prepareMEM1_mem#0 = (word)addMEMtoFAC::mem#0
Constant (const word) divMEMbyFAC::prepareMEM1_mem#0 = (word)divMEMbyFAC::mem#0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [104] main::i#1 ← ++ main::i#10 to ++
Resolved ranged comparison value [106] if(main::i#1!=rangelast(1,$19)) goto main::@1 to (number) $1a
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $1a in [82] if((byte) main::i#1!=(number) $1a) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $1a
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $1a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [39] (byte~) addMEMtoFAC::prepareMEM1_$0 ← < (const word) addMEMtoFAC::prepareMEM1_mem#0
Constant right-side identified [41] (byte~) addMEMtoFAC::prepareMEM1_$1 ← > (const word) addMEMtoFAC::prepareMEM1_mem#0
Constant right-side identified [45] (byte~) divMEMbyFAC::prepareMEM1_$0 ← < (const word) divMEMbyFAC::prepareMEM1_mem#0
Constant right-side identified [47] (byte~) divMEMbyFAC::prepareMEM1_$1 ← > (const word) divMEMbyFAC::prepareMEM1_mem#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) addMEMtoFAC::prepareMEM1_$0 = <addMEMtoFAC::prepareMEM1_mem#0
Constant (const byte) addMEMtoFAC::prepareMEM1_$1 = >addMEMtoFAC::prepareMEM1_mem#0
Constant (const byte) divMEMbyFAC::prepareMEM1_$0 = <divMEMbyFAC::prepareMEM1_mem#0
Constant (const byte) divMEMbyFAC::prepareMEM1_$1 = >divMEMbyFAC::prepareMEM1_mem#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [32] (word) setMEMtoFAC::prepareMEM1_mem#0 ← (word)(byte*) setMEMtoFAC::mem#2 keeping setMEMtoFAC::mem#2
Inlining Noop Cast [48] (word) mulFACbyMEM::prepareMEM1_mem#0 ← (word)(byte*) mulFACbyMEM::mem#2 keeping mulFACbyMEM::mem#2
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const word) setFAC::w#0
Inlining constant with var siblings (const word) setFAC::w#2
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#0
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#1
Inlining constant with var siblings (const byte*) mulFACbyMEM::mem#0
Inlining constant with var siblings (const byte*) mulFACbyMEM::mem#1
Inlining constant with var siblings (const byte) main::i#0
Constant inlined addMEMtoFAC::mem#0 = (const byte*) main::f_127
Constant inlined setFAC::w#2 = (byte) $19
Constant inlined divMEMbyFAC::prepareMEM1_$0 = <(const word) divMEMbyFAC::prepareMEM1_mem#0
Constant inlined divMEMbyFAC::mem#0 = (const byte*) main::f_i
Constant inlined divMEMbyFAC::prepareMEM1_$1 = >(const word) divMEMbyFAC::prepareMEM1_mem#0
Constant inlined addMEMtoFAC::prepareMEM1_$0 = <(const word) addMEMtoFAC::prepareMEM1_mem#0
Constant inlined main::i#0 = (byte) 1
Constant inlined setMEMtoFAC::mem#1 = (const byte*) main::f_i
Constant inlined mulFACbyMEM::mem#0 = (const nomodify byte*) main::f_2pi
Constant inlined setMEMtoFAC::mem#0 = (const byte*) main::f_127
Constant inlined mulFACbyMEM::mem#1 = (const byte*) main::f_127
Constant inlined addMEMtoFAC::prepareMEM1_$1 = >(const word) addMEMtoFAC::prepareMEM1_mem#0
Constant inlined setFAC::w#0 = (word) $4fb
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@16(between main::@15 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of addMEMtoFAC
Adding NOP phi() at start of divMEMbyFAC
CALL GRAPH
Calls in [main] to setFAC:1 divFACby10:3 setMEMtoFAC:5 setFAC:10 mulFACbyMEM:12 setMEMtoFAC:14 setFAC:16 divMEMbyFAC:18 sinFAC:20 mulFACbyMEM:22 addMEMtoFAC:24 getFAC:26 print_uint:29 print_ln:31 
Calls in [print_uint] to print_uchar:48 print_uchar:52 
Calls in [print_uchar] to print_char:60 print_char:65 

Created 11 initial phi equivalence classes
Coalesced [9] setFAC::prepareMEM1_mem#2 ← setFAC::w#1
Coalesced [35] main::i#14 ← main::i#1
Not coalescing [36] print_char_cursor#53 ← print_line_cursor#0
Coalesced [37] print_line_cursor#33 ← print_line_cursor#0
Coalesced [38] print_line_cursor#31 ← print_line_cursor#15
Coalesced (already) [44] print_line_cursor#32 ← print_line_cursor#0
Coalesced [46] print_uchar::b#4 ← print_uchar::b#0
Coalesced [47] print_char_cursor#49 ← print_char_cursor#34
Coalesced [50] print_uchar::b#5 ← print_uchar::b#1
Coalesced [51] print_char_cursor#50 ← print_char_cursor#25
Coalesced [58] print_char::ch#3 ← print_char::ch#0
Coalesced [59] print_char_cursor#51 ← print_char_cursor#33
Coalesced [63] print_char::ch#4 ← print_char::ch#1
Coalesced (already) [64] print_char_cursor#52 ← print_char_cursor#25
Coalesced down to 8 phi equivalence classes
Culled Empty Block (label) main::@4
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_uint::@2
Culled Empty Block (label) print_uchar::@2
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block main::@8 to main::@7
Renumbering block main::@9 to main::@8
Renumbering block main::@10 to main::@9
Renumbering block main::@11 to main::@10
Renumbering block main::@12 to main::@11
Renumbering block main::@13 to main::@12
Renumbering block main::@14 to main::@13
Renumbering block main::@15 to main::@14
Renumbering block main::@16 to main::@15
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of addMEMtoFAC
Adding NOP phi() at start of divMEMbyFAC

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call setFAC 
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call divFACby10 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [4] phi()
  [5] call setMEMtoFAC 
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@3
  [6] (byte*) print_line_cursor#15 ← phi( main::@15/(byte*) print_line_cursor#0 main::@3/(const byte*) print_screen#0 )
  [6] (byte*) print_char_cursor#34 ← phi( main::@15/(byte*) print_char_cursor#53 main::@3/(const byte*) print_screen#0 )
  [6] (byte) main::i#10 ← phi( main::@15/(byte) main::i#1 main::@3/(byte) 1 )
  [7] (word) setFAC::w#1 ← (word)(byte) main::i#10
  [8] call setFAC 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [9] phi()
  [10] call mulFACbyMEM 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [11] phi()
  [12] call setMEMtoFAC 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [13] phi()
  [14] call setFAC 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [15] phi()
  [16] call divMEMbyFAC 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [17] phi()
  [18] call sinFAC 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [19] phi()
  [20] call mulFACbyMEM 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [21] phi()
  [22] call addMEMtoFAC 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [23] phi()
  [24] call getFAC 
  [25] (word) getFAC::return#2 ← (word) getFAC::return#0
  to:main::@12
main::@12: scope:[main]  from main::@11
  [26] (word) print_uint::w#0 ← (word) getFAC::return#2
  [27] call print_uint 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [28] phi()
  [29] call print_ln 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [30] (byte) main::i#1 ← ++ (byte) main::i#10
  [31] if((byte) main::i#1!=(byte) $1a) goto main::@15
  to:main::@return
main::@return: scope:[main]  from main::@14
  [32] return 
  to:@return
main::@15: scope:[main]  from main::@14
  [33] (byte*) print_char_cursor#53 ← (byte*) print_line_cursor#0
  to:main::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@13
  [34] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [35] (byte*) print_line_cursor#7 ← phi( print_ln/(byte*) print_line_cursor#15 print_ln::@1/(byte*) print_line_cursor#0 )
  [36] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28
  [37] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#25) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [38] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from main::@12
  [39] (byte) print_uchar::b#0 ← > (word) print_uint::w#0
  [40] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [41] (byte) print_uchar::b#1 ← < (word) print_uint::w#0
  [42] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [43] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [44] (byte*) print_char_cursor#33 ← phi( print_uint/(byte*) print_char_cursor#34 print_uint::@1/(byte*) print_char_cursor#25 )
  [44] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [45] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [46] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [47] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [48] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [49] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [50] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [51] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_uchar print_uchar::@1
  [52] (byte*) print_char_cursor#24 ← phi( print_uchar/(byte*) print_char_cursor#33 print_uchar::@1/(byte*) print_char_cursor#25 )
  [52] (byte) print_char::ch#2 ← phi( print_uchar/(byte) print_char::ch#0 print_uchar::@1/(byte) print_char::ch#1 )
  [53] *((byte*) print_char_cursor#24) ← (byte) print_char::ch#2
  [54] (byte*) print_char_cursor#25 ← ++ (byte*) print_char_cursor#24
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [55] return 
  to:@return

(word()) getFAC()
getFAC: scope:[getFAC]  from main::@11
  asm { jsr$b1aa stymemLo stamemHi  }
  [57] (word) getFAC::return#0 ← *((const nomodify byte*) memHi) w= *((const nomodify byte*) memLo)
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  [58] return 
  to:@return

(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
addMEMtoFAC: scope:[addMEMtoFAC]  from main::@10
  [59] phi()
  to:addMEMtoFAC::prepareMEM1
addMEMtoFAC::prepareMEM1: scope:[addMEMtoFAC]  from addMEMtoFAC
  [60] *((const nomodify byte*) memLo) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0
  [61] *((const nomodify byte*) memHi) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC::prepareMEM1
  asm { ldamemLo ldymemHi jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  [63] return 
  to:@return

(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
mulFACbyMEM: scope:[mulFACbyMEM]  from main::@4 main::@9
  [64] (byte*) mulFACbyMEM::mem#2 ← phi( main::@9/(const byte*) main::f_127 main::@4/(const nomodify byte*) main::f_2pi )
  to:mulFACbyMEM::prepareMEM1
mulFACbyMEM::prepareMEM1: scope:[mulFACbyMEM]  from mulFACbyMEM
  [65] (byte~) mulFACbyMEM::prepareMEM1_$0 ← < (word)(byte*) mulFACbyMEM::mem#2
  [66] *((const nomodify byte*) memLo) ← (byte~) mulFACbyMEM::prepareMEM1_$0
  [67] (byte~) mulFACbyMEM::prepareMEM1_$1 ← > (word)(byte*) mulFACbyMEM::mem#2
  [68] *((const nomodify byte*) memHi) ← (byte~) mulFACbyMEM::prepareMEM1_$1
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM::prepareMEM1
  asm { ldamemLo ldymemHi jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  [70] return 
  to:@return

(void()) sinFAC()
sinFAC: scope:[sinFAC]  from main::@8
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  [72] return 
  to:@return

(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
divMEMbyFAC: scope:[divMEMbyFAC]  from main::@7
  [73] phi()
  to:divMEMbyFAC::prepareMEM1
divMEMbyFAC::prepareMEM1: scope:[divMEMbyFAC]  from divMEMbyFAC
  [74] *((const nomodify byte*) memLo) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0
  [75] *((const nomodify byte*) memHi) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC::prepareMEM1
  asm { ldamemLo ldymemHi jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  [77] return 
  to:@return

(void()) setFAC((word) setFAC::w)
setFAC: scope:[setFAC]  from main main::@1 main::@6
  [78] (word) setFAC::prepareMEM1_mem#0 ← phi( main/(word) $4fb main::@1/(word) setFAC::w#1 main::@6/(byte) $19 )
  to:setFAC::prepareMEM1
setFAC::prepareMEM1: scope:[setFAC]  from setFAC
  [79] (byte~) setFAC::prepareMEM1_$0 ← < (word) setFAC::prepareMEM1_mem#0
  [80] *((const nomodify byte*) memLo) ← (byte~) setFAC::prepareMEM1_$0
  [81] (byte~) setFAC::prepareMEM1_$1 ← > (word) setFAC::prepareMEM1_mem#0
  [82] *((const nomodify byte*) memHi) ← (byte~) setFAC::prepareMEM1_$1
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC::prepareMEM1
  asm { ldymemLo ldamemHi jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  [84] return 
  to:@return

(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
setMEMtoFAC: scope:[setMEMtoFAC]  from main::@3 main::@5
  [85] (byte*) setMEMtoFAC::mem#2 ← phi( main::@3/(const byte*) main::f_127 main::@5/(const byte*) main::f_i )
  to:setMEMtoFAC::prepareMEM1
setMEMtoFAC::prepareMEM1: scope:[setMEMtoFAC]  from setMEMtoFAC
  [86] (byte~) setMEMtoFAC::prepareMEM1_$0 ← < (word)(byte*) setMEMtoFAC::mem#2
  [87] *((const nomodify byte*) memLo) ← (byte~) setMEMtoFAC::prepareMEM1_$0
  [88] (byte~) setMEMtoFAC::prepareMEM1_$1 ← > (word)(byte*) setMEMtoFAC::mem#2
  [89] *((const nomodify byte*) memHi) ← (byte~) setMEMtoFAC::prepareMEM1_$1
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC::prepareMEM1
  asm { ldxmemLo ldymemHi jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  [91] return 
  to:@return

(void()) divFACby10()
divFACby10: scope:[divFACby10]  from main::@2
  asm { jsr$bafe  }
  to:divFACby10::@return
divFACby10::@return: scope:[divFACby10]  from divFACby10
  [93] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(byte*) addMEMtoFAC::mem
(word) addMEMtoFAC::prepareMEM1_mem
(void()) divFACby10()
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(byte*) divMEMbyFAC::mem
(word) divMEMbyFAC::prepareMEM1_mem
(word()) getFAC()
(word) getFAC::return
(word) getFAC::return#0 37.33333333333333
(word) getFAC::return#2 22.0
(word) getFAC::w
(void()) main()
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#10 0.9166666666666666
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#2
(byte~) mulFACbyMEM::prepareMEM1_$0 202.0
(byte~) mulFACbyMEM::prepareMEM1_$1 202.0
(word) mulFACbyMEM::prepareMEM1_mem
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 2002.0
(byte) print_char::ch#1 2002.0
(byte) print_char::ch#2 12003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#24 11002.0
(byte*) print_char_cursor#25 1241.4117647058824
(byte*) print_char_cursor#33 401.0
(byte*) print_char_cursor#34 5.090909090909091
(byte*) print_char_cursor#53 22.0
(byte*) print_line_cursor
(byte*) print_line_cursor#0 4289.285714285714
(byte*) print_line_cursor#15 4.666666666666666
(byte*) print_line_cursor#7 20103.0
(void()) print_ln()
(byte*) print_screen
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 2002.0
(byte~) print_uchar::$2 2002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 202.0
(byte) print_uchar::b#1 202.0
(byte) print_uchar::b#2 551.0
(void()) print_uint((word) print_uint::w)
(word) print_uint::w
(word) print_uint::w#0 71.0
(void()) setFAC((word) setFAC::w)
(byte~) setFAC::prepareMEM1_$0 202.0
(byte~) setFAC::prepareMEM1_$1 202.0
(word) setFAC::prepareMEM1_mem
(word) setFAC::prepareMEM1_mem#0 71.0
(word) setFAC::w
(word) setFAC::w#1 22.0
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#2
(byte~) setMEMtoFAC::prepareMEM1_$0 202.0
(byte~) setMEMtoFAC::prepareMEM1_$1 202.0
(word) setMEMtoFAC::prepareMEM1_mem
(void()) sinFAC()

Initial phi equivalence classes
[ main::i#10 main::i#1 ]
[ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#24 print_char_cursor#33 print_char_cursor#34 print_char_cursor#53 print_char_cursor#25 ]
[ mulFACbyMEM::mem#2 ]
[ setFAC::prepareMEM1_mem#0 setFAC::w#1 ]
[ setMEMtoFAC::mem#2 ]
Added variable getFAC::return#2 to live range equivalence class [ getFAC::return#2 ]
Added variable print_uint::w#0 to live range equivalence class [ print_uint::w#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable getFAC::return#0 to live range equivalence class [ getFAC::return#0 ]
Added variable mulFACbyMEM::prepareMEM1_$0 to live range equivalence class [ mulFACbyMEM::prepareMEM1_$0 ]
Added variable mulFACbyMEM::prepareMEM1_$1 to live range equivalence class [ mulFACbyMEM::prepareMEM1_$1 ]
Added variable setFAC::prepareMEM1_$0 to live range equivalence class [ setFAC::prepareMEM1_$0 ]
Added variable setFAC::prepareMEM1_$1 to live range equivalence class [ setFAC::prepareMEM1_$1 ]
Added variable setMEMtoFAC::prepareMEM1_$0 to live range equivalence class [ setMEMtoFAC::prepareMEM1_$0 ]
Added variable setMEMtoFAC::prepareMEM1_$1 to live range equivalence class [ setMEMtoFAC::prepareMEM1_$1 ]
Complete equivalence classes
[ main::i#10 main::i#1 ]
[ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#24 print_char_cursor#33 print_char_cursor#34 print_char_cursor#53 print_char_cursor#25 ]
[ mulFACbyMEM::mem#2 ]
[ setFAC::prepareMEM1_mem#0 setFAC::w#1 ]
[ setMEMtoFAC::mem#2 ]
[ getFAC::return#2 ]
[ print_uint::w#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ getFAC::return#0 ]
[ mulFACbyMEM::prepareMEM1_$0 ]
[ mulFACbyMEM::prepareMEM1_$1 ]
[ setFAC::prepareMEM1_$0 ]
[ setFAC::prepareMEM1_$1 ]
[ setMEMtoFAC::prepareMEM1_$0 ]
[ setMEMtoFAC::prepareMEM1_$1 ]
Allocated zp[1]:2 [ main::i#10 main::i#1 ]
Allocated zp[2]:3 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ]
Allocated zp[1]:5 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Allocated zp[1]:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
Allocated zp[2]:7 [ print_char_cursor#24 print_char_cursor#33 print_char_cursor#34 print_char_cursor#53 print_char_cursor#25 ]
Allocated zp[2]:9 [ mulFACbyMEM::mem#2 ]
Allocated zp[2]:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 ]
Allocated zp[2]:13 [ setMEMtoFAC::mem#2 ]
Allocated zp[2]:15 [ getFAC::return#2 ]
Allocated zp[2]:17 [ print_uint::w#0 ]
Allocated zp[1]:19 [ print_uchar::$0 ]
Allocated zp[1]:20 [ print_uchar::$2 ]
Allocated zp[2]:21 [ getFAC::return#0 ]
Allocated zp[1]:23 [ mulFACbyMEM::prepareMEM1_$0 ]
Allocated zp[1]:24 [ mulFACbyMEM::prepareMEM1_$1 ]
Allocated zp[1]:25 [ setFAC::prepareMEM1_$0 ]
Allocated zp[1]:26 [ setFAC::prepareMEM1_$1 ]
Allocated zp[1]:27 [ setMEMtoFAC::prepareMEM1_$0 ]
Allocated zp[1]:28 [ setMEMtoFAC::prepareMEM1_$1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .label print_screen = $400
  .label print_line_cursor = 3
  .label print_char_cursor = 7
  // main
main: {
    .label f_2pi = $e2e5
    .label i = 2
    // [1] call setFAC 
    // [78] phi from main to setFAC [phi:main->setFAC]
  setFAC_from_main:
    // [78] phi (word) setFAC::prepareMEM1_mem#0 = (word) $4fb [phi:main->setFAC#0] -- vwuz1=vwuc1 
    lda #<$4fb
    sta.z setFAC.prepareMEM1_mem
    lda #>$4fb
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [2] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    jmp __b2
    // main::@2
  __b2:
    // [3] call divFACby10 
    jsr divFACby10
    // [4] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [5] call setMEMtoFAC 
    // [85] phi from main::@3 to setMEMtoFAC [phi:main::@3->setMEMtoFAC]
  setMEMtoFAC_from___b3:
    // [85] phi (byte*) setMEMtoFAC::mem#2 = (const byte*) main::f_127 [phi:main::@3->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z setMEMtoFAC.mem
    lda #>f_127
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [6] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [6] phi (byte*) print_line_cursor#15 = (const byte*) print_screen#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [6] phi (byte*) print_char_cursor#34 = (const byte*) print_screen#0 [phi:main::@3->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [6] phi (byte) main::i#10 = (byte) 1 [phi:main::@3->main::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [7] (word) setFAC::w#1 ← (word)(byte) main::i#10 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z setFAC.w
    lda #0
    sta.z setFAC.w+1
    // [8] call setFAC 
    // [78] phi from main::@1 to setFAC [phi:main::@1->setFAC]
  setFAC_from___b1:
    // [78] phi (word) setFAC::prepareMEM1_mem#0 = (word) setFAC::w#1 [phi:main::@1->setFAC#0] -- register_copy 
    jsr setFAC
    // [9] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  __b4_from___b1:
    jmp __b4
    // main::@4
  __b4:
    // [10] call mulFACbyMEM 
    // [64] phi from main::@4 to mulFACbyMEM [phi:main::@4->mulFACbyMEM]
  mulFACbyMEM_from___b4:
    // [64] phi (byte*) mulFACbyMEM::mem#2 = (const nomodify byte*) main::f_2pi [phi:main::@4->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta.z mulFACbyMEM.mem
    lda #>f_2pi
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [11] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [12] call setMEMtoFAC 
    // [85] phi from main::@5 to setMEMtoFAC [phi:main::@5->setMEMtoFAC]
  setMEMtoFAC_from___b5:
    // [85] phi (byte*) setMEMtoFAC::mem#2 = (const byte*) main::f_i [phi:main::@5->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta.z setMEMtoFAC.mem
    lda #>f_i
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [13] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [14] call setFAC 
    // [78] phi from main::@6 to setFAC [phi:main::@6->setFAC]
  setFAC_from___b6:
    // [78] phi (word) setFAC::prepareMEM1_mem#0 = (byte) $19 [phi:main::@6->setFAC#0] -- vwuz1=vbuc1 
    lda #<$19
    sta.z setFAC.prepareMEM1_mem
    lda #>$19
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [15] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [16] call divMEMbyFAC 
    // [73] phi from main::@7 to divMEMbyFAC [phi:main::@7->divMEMbyFAC]
  divMEMbyFAC_from___b7:
    jsr divMEMbyFAC
    // [17] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [18] call sinFAC 
    jsr sinFAC
    // [19] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [20] call mulFACbyMEM 
    // [64] phi from main::@9 to mulFACbyMEM [phi:main::@9->mulFACbyMEM]
  mulFACbyMEM_from___b9:
    // [64] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) main::f_127 [phi:main::@9->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z mulFACbyMEM.mem
    lda #>f_127
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [21] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [22] call addMEMtoFAC 
    // [59] phi from main::@10 to addMEMtoFAC [phi:main::@10->addMEMtoFAC]
  addMEMtoFAC_from___b10:
    jsr addMEMtoFAC
    // [23] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [24] call getFAC 
    jsr getFAC
    // [25] (word) getFAC::return#2 ← (word) getFAC::return#0 -- vwuz1=vwuz2 
    lda.z getFAC.return
    sta.z getFAC.return_1
    lda.z getFAC.return+1
    sta.z getFAC.return_1+1
    jmp __b12
    // main::@12
  __b12:
    // [26] (word) print_uint::w#0 ← (word) getFAC::return#2 -- vwuz1=vwuz2 
    lda.z getFAC.return_1
    sta.z print_uint.w
    lda.z getFAC.return_1+1
    sta.z print_uint.w+1
    // [27] call print_uint 
    jsr print_uint
    // [28] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [29] call print_ln 
    // [34] phi from main::@13 to print_ln [phi:main::@13->print_ln]
  print_ln_from___b13:
    jsr print_ln
    jmp __b14
    // main::@14
  __b14:
    // [30] (byte) main::i#1 ← ++ (byte) main::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [31] if((byte) main::i#1!=(byte) $1a) goto main::@15 -- vbuz1_neq_vbuc1_then_la1 
    lda #$1a
    cmp.z i
    bne __b15
    jmp __breturn
    // main::@return
  __breturn:
    // [32] return 
    rts
    // main::@15
  __b15:
    // [33] (byte*) print_char_cursor#53 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [6] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
  __b1_from___b15:
    // [6] phi (byte*) print_line_cursor#15 = (byte*) print_line_cursor#0 [phi:main::@15->main::@1#0] -- register_copy 
    // [6] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#53 [phi:main::@15->main::@1#1] -- register_copy 
    // [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@15->main::@1#2] -- register_copy 
    jmp __b1
    f_i: .byte 0, 0, 0, 0, 0
    f_127: .byte 0, 0, 0, 0, 0
}
  // print_ln
// Print a newline
print_ln: {
    // [35] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [35] phi (byte*) print_line_cursor#7 = (byte*) print_line_cursor#15 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [36] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [37] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#25) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [38] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($11) w)
print_uint: {
    .label w = $11
    // [39] (byte) print_uchar::b#0 ← > (word) print_uint::w#0 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar.b
    // [40] call print_uchar 
    // [44] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [44] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#34 [phi:print_uint->print_uchar#0] -- register_copy 
    // [44] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [41] (byte) print_uchar::b#1 ← < (word) print_uint::w#0 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar.b
    // [42] call print_uchar 
    // [44] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [44] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#25 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [44] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [43] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp(5) b)
print_uchar: {
    .label __0 = $13
    .label __2 = $14
    .label b = 5
    // [45] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [46] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [47] call print_char 
  // Table of hexadecimal digits
    // [52] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [52] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#33 [phi:print_uchar->print_char#0] -- register_copy 
    // [52] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [48] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [49] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [50] call print_char 
    // [52] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [52] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#25 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [52] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [51] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp(6) ch)
print_char: {
    .label ch = 6
    // [53] *((byte*) print_char_cursor#24) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [54] (byte*) print_char_cursor#25 ← ++ (byte*) print_char_cursor#24 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [55] return 
    rts
}
  // getFAC
// unsigned int = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit unsigned int
// Destroys the value in the FAC in the process
getFAC: {
    .label return = $15
    .label return_1 = $f
    // asm { jsr$b1aa stymemLo stamemHi  }
    // Load FAC (floating point accumulator) integer part into unsigned int register Y,A
    jsr $b1aa
    sty memLo
    sta memHi
    // [57] (word) getFAC::return#0 ← *((const nomodify byte*) memHi) w= *((const nomodify byte*) memLo) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta.z return
    lda memHi
    sta.z return+1
    jmp __breturn
    // getFAC::@return
  __breturn:
    // [58] return 
    rts
}
  // addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 chars from memory
addMEMtoFAC: {
    .const prepareMEM1_mem = main.f_127
    jmp prepareMEM1
    // addMEMtoFAC::prepareMEM1
  prepareMEM1:
    // [60] *((const nomodify byte*) memLo) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // [61] *((const nomodify byte*) memHi) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    jmp __b1
    // addMEMtoFAC::@1
  __b1:
    // asm { ldamemLo ldymemHi jsr$b867  }
    lda memLo
    ldy memHi
    jsr $b867
    jmp __breturn
    // addMEMtoFAC::@return
  __breturn:
    // [63] return 
    rts
}
  // mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 chars from memory
// mulFACbyMEM(byte* zp(9) mem)
mulFACbyMEM: {
    .label prepareMEM1___0 = $17
    .label prepareMEM1___1 = $18
    .label mem = 9
    jmp prepareMEM1
    // mulFACbyMEM::prepareMEM1
  prepareMEM1:
    // [65] (byte~) mulFACbyMEM::prepareMEM1_$0 ← < (word)(byte*) mulFACbyMEM::mem#2 -- vbuz1=_lo_vwuz2 
    lda.z mem
    sta.z prepareMEM1___0
    // [66] *((const nomodify byte*) memLo) ← (byte~) mulFACbyMEM::prepareMEM1_$0 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1___0
    sta memLo
    // [67] (byte~) mulFACbyMEM::prepareMEM1_$1 ← > (word)(byte*) mulFACbyMEM::mem#2 -- vbuz1=_hi_vwuz2 
    lda.z mem+1
    sta.z prepareMEM1___1
    // [68] *((const nomodify byte*) memHi) ← (byte~) mulFACbyMEM::prepareMEM1_$1 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1___1
    sta memHi
    jmp __b1
    // mulFACbyMEM::@1
  __b1:
    // asm { ldamemLo ldymemHi jsr$ba28  }
    lda memLo
    ldy memHi
    jsr $ba28
    jmp __breturn
    // mulFACbyMEM::@return
  __breturn:
    // [70] return 
    rts
}
  // sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
    // asm { jsr$e26b  }
    jsr $e26b
    jmp __breturn
    // sinFAC::@return
  __breturn:
    // [72] return 
    rts
}
  // divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 chars from memory
divMEMbyFAC: {
    .const prepareMEM1_mem = main.f_i
    jmp prepareMEM1
    // divMEMbyFAC::prepareMEM1
  prepareMEM1:
    // [74] *((const nomodify byte*) memLo) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // [75] *((const nomodify byte*) memHi) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    jmp __b1
    // divMEMbyFAC::@1
  __b1:
    // asm { ldamemLo ldymemHi jsr$bb0f  }
    lda memLo
    ldy memHi
    jsr $bb0f
    jmp __breturn
    // divMEMbyFAC::@return
  __breturn:
    // [77] return 
    rts
}
  // setFAC
// FAC = unsigned int
// Set the FAC (floating point accumulator) to the integer value of a 16bit unsigned int
// setFAC(word zp($b) w)
setFAC: {
    .label prepareMEM1___0 = $19
    .label prepareMEM1___1 = $1a
    .label prepareMEM1_mem = $b
    .label w = $b
    jmp prepareMEM1
    // setFAC::prepareMEM1
  prepareMEM1:
    // [79] (byte~) setFAC::prepareMEM1_$0 ← < (word) setFAC::prepareMEM1_mem#0 -- vbuz1=_lo_vwuz2 
    lda.z prepareMEM1_mem
    sta.z prepareMEM1___0
    // [80] *((const nomodify byte*) memLo) ← (byte~) setFAC::prepareMEM1_$0 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1___0
    sta memLo
    // [81] (byte~) setFAC::prepareMEM1_$1 ← > (word) setFAC::prepareMEM1_mem#0 -- vbuz1=_hi_vwuz2 
    lda.z prepareMEM1_mem+1
    sta.z prepareMEM1___1
    // [82] *((const nomodify byte*) memHi) ← (byte~) setFAC::prepareMEM1_$1 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1___1
    sta memHi
    jmp __b1
    // setFAC::@1
  __b1:
    // asm { ldymemLo ldamemHi jsr$b391  }
    // Load unsigned int register Y,A into FAC (floating point accumulator)
    ldy memLo
    lda memHi
    jsr $b391
    jmp __breturn
    // setFAC::@return
  __breturn:
    // [84] return 
    rts
}
  // setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 chars (means it is necessary to allocate 5 chars to avoid clobbering other data using eg. char[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zp($d) mem)
setMEMtoFAC: {
    .label prepareMEM1___0 = $1b
    .label prepareMEM1___1 = $1c
    .label mem = $d
    jmp prepareMEM1
    // setMEMtoFAC::prepareMEM1
  prepareMEM1:
    // [86] (byte~) setMEMtoFAC::prepareMEM1_$0 ← < (word)(byte*) setMEMtoFAC::mem#2 -- vbuz1=_lo_vwuz2 
    lda.z mem
    sta.z prepareMEM1___0
    // [87] *((const nomodify byte*) memLo) ← (byte~) setMEMtoFAC::prepareMEM1_$0 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1___0
    sta memLo
    // [88] (byte~) setMEMtoFAC::prepareMEM1_$1 ← > (word)(byte*) setMEMtoFAC::mem#2 -- vbuz1=_hi_vwuz2 
    lda.z mem+1
    sta.z prepareMEM1___1
    // [89] *((const nomodify byte*) memHi) ← (byte~) setMEMtoFAC::prepareMEM1_$1 -- _deref_pbuc1=vbuz1 
    lda.z prepareMEM1___1
    sta memHi
    jmp __b1
    // setMEMtoFAC::@1
  __b1:
    // asm { ldxmemLo ldymemHi jsr$bbd4  }
    ldx memLo
    ldy memHi
    jsr $bbd4
    jmp __breturn
    // setMEMtoFAC::@return
  __breturn:
    // [91] return 
    rts
}
  // divFACby10
// FAC = FAC/10
// Set FAC to FAC divided by 10
divFACby10: {
    // asm { jsr$bafe  }
    jsr $bafe
    jmp __breturn
    // divFACby10::@return
  __breturn:
    // [93] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (word) setFAC::w#1 ← (word)(byte) main::i#10 [ main::i#10 print_char_cursor#34 print_line_cursor#15 setFAC::w#1 ] (  [ main::i#10 print_char_cursor#34 print_line_cursor#15 setFAC::w#1 ] { { setFAC::prepareMEM1_mem#0 = setFAC::w#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#10 main::i#1 ]
Statement [25] (word) getFAC::return#2 ← (word) getFAC::return#0 [ main::i#10 print_char_cursor#34 print_line_cursor#15 getFAC::return#2 ] (  [ main::i#10 print_char_cursor#34 print_line_cursor#15 getFAC::return#2 ] { { getFAC::return#0 = getFAC::return#2 } }  ) always clobbers reg byte a 
Statement [26] (word) print_uint::w#0 ← (word) getFAC::return#2 [ main::i#10 print_char_cursor#34 print_line_cursor#15 print_uint::w#0 ] (  [ main::i#10 print_char_cursor#34 print_line_cursor#15 print_uint::w#0 ] { { print_uint::w#0 = getFAC::return#2 } }  ) always clobbers reg byte a 
Statement [33] (byte*) print_char_cursor#53 ← (byte*) print_line_cursor#0 [ main::i#1 print_char_cursor#53 print_line_cursor#0 ] (  [ main::i#1 print_char_cursor#53 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [36] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28 [ print_line_cursor#0 print_char_cursor#25 ] ( print_ln:29 [ main::i#10 print_line_cursor#0 print_char_cursor#25 ] { }  ) always clobbers reg byte a 
Statement [37] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#25) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#25 ] ( print_ln:29 [ main::i#10 print_line_cursor#0 print_char_cursor#25 ] { }  ) always clobbers reg byte a 
Statement [45] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_uchar::b#2 print_char_cursor#33 print_uchar::$0 ] ( print_uint:27::print_uchar:40 [ main::i#10 print_line_cursor#15 print_uint::w#0 print_uchar::b#2 print_char_cursor#33 print_uchar::$0 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#34 } { print_char::ch#0 = print_char::ch#2 } }  print_uint:27::print_uchar:42 [ main::i#10 print_line_cursor#15 print_uchar::b#2 print_char_cursor#33 print_uchar::$0 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#25 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [48] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#25 print_uchar::$2 ] ( print_uint:27::print_uchar:40 [ main::i#10 print_line_cursor#15 print_uint::w#0 print_char_cursor#25 print_uchar::$2 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#33 = print_char_cursor#34 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#24 = print_char_cursor#25 } }  print_uint:27::print_uchar:42 [ main::i#10 print_line_cursor#15 print_char_cursor#25 print_uchar::$2 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#25 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [53] *((byte*) print_char_cursor#24) ← (byte) print_char::ch#2 [ print_char_cursor#24 ] ( print_uint:27::print_uchar:40::print_char:47 [ main::i#10 print_line_cursor#15 print_uint::w#0 print_uchar::b#2 print_char_cursor#24 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#34 } { print_char::ch#0 = print_char::ch#2 } }  print_uint:27::print_uchar:42::print_char:47 [ main::i#10 print_line_cursor#15 print_uchar::b#2 print_char_cursor#24 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#25 } { print_char::ch#0 = print_char::ch#2 } }  print_uint:27::print_uchar:40::print_char:50 [ main::i#10 print_line_cursor#15 print_uint::w#0 print_char_cursor#24 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#33 = print_char_cursor#34 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#24 = print_char_cursor#25 } }  print_uint:27::print_uchar:42::print_char:50 [ main::i#10 print_line_cursor#15 print_char_cursor#24 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#25 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#10 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement asm { jsr$b1aa stymemLo stamemHi  } always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::i#10 main::i#1 ]
Statement [57] (word) getFAC::return#0 ← *((const nomodify byte*) memHi) w= *((const nomodify byte*) memLo) [ getFAC::return#0 ] ( getFAC:24 [ main::i#10 print_char_cursor#34 print_line_cursor#15 getFAC::return#0 ] { { getFAC::return#0 = getFAC::return#2 } }  ) always clobbers reg byte a 
Statement [60] *((const nomodify byte*) memLo) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0 [ ] ( addMEMtoFAC:22 [ main::i#10 print_char_cursor#34 print_line_cursor#15 ] { }  ) always clobbers reg byte a 
Statement [61] *((const nomodify byte*) memHi) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0 [ ] ( addMEMtoFAC:22 [ main::i#10 print_char_cursor#34 print_line_cursor#15 ] { }  ) always clobbers reg byte a 
Statement asm { ldamemLo ldymemHi jsr$b867  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { ldamemLo ldymemHi jsr$ba28  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$e26b  } always clobbers reg byte a reg byte x reg byte y 
Statement [74] *((const nomodify byte*) memLo) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0 [ ] ( divMEMbyFAC:16 [ main::i#10 print_char_cursor#34 print_line_cursor#15 ] { }  ) always clobbers reg byte a 
Statement [75] *((const nomodify byte*) memHi) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0 [ ] ( divMEMbyFAC:16 [ main::i#10 print_char_cursor#34 print_line_cursor#15 ] { }  ) always clobbers reg byte a 
Statement asm { ldamemLo ldymemHi jsr$bb0f  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { ldymemLo ldamemHi jsr$b391  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { ldxmemLo ldymemHi jsr$bbd4  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$bafe  } always clobbers reg byte a reg byte x reg byte y 
Statement [7] (word) setFAC::w#1 ← (word)(byte) main::i#10 [ main::i#10 print_char_cursor#34 print_line_cursor#15 setFAC::w#1 ] (  [ main::i#10 print_char_cursor#34 print_line_cursor#15 setFAC::w#1 ] { { setFAC::prepareMEM1_mem#0 = setFAC::w#1 } }  ) always clobbers reg byte a 
Statement [25] (word) getFAC::return#2 ← (word) getFAC::return#0 [ main::i#10 print_char_cursor#34 print_line_cursor#15 getFAC::return#2 ] (  [ main::i#10 print_char_cursor#34 print_line_cursor#15 getFAC::return#2 ] { { getFAC::return#0 = getFAC::return#2 } }  ) always clobbers reg byte a 
Statement [26] (word) print_uint::w#0 ← (word) getFAC::return#2 [ main::i#10 print_char_cursor#34 print_line_cursor#15 print_uint::w#0 ] (  [ main::i#10 print_char_cursor#34 print_line_cursor#15 print_uint::w#0 ] { { print_uint::w#0 = getFAC::return#2 } }  ) always clobbers reg byte a 
Statement [31] if((byte) main::i#1!=(byte) $1a) goto main::@15 [ main::i#1 print_line_cursor#0 ] (  [ main::i#1 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [33] (byte*) print_char_cursor#53 ← (byte*) print_line_cursor#0 [ main::i#1 print_char_cursor#53 print_line_cursor#0 ] (  [ main::i#1 print_char_cursor#53 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [36] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28 [ print_line_cursor#0 print_char_cursor#25 ] ( print_ln:29 [ main::i#10 print_line_cursor#0 print_char_cursor#25 ] { }  ) always clobbers reg byte a 
Statement [37] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#25) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#25 ] ( print_ln:29 [ main::i#10 print_line_cursor#0 print_char_cursor#25 ] { }  ) always clobbers reg byte a 
Statement [45] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_uchar::b#2 print_char_cursor#33 print_uchar::$0 ] ( print_uint:27::print_uchar:40 [ main::i#10 print_line_cursor#15 print_uint::w#0 print_uchar::b#2 print_char_cursor#33 print_uchar::$0 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#34 } { print_char::ch#0 = print_char::ch#2 } }  print_uint:27::print_uchar:42 [ main::i#10 print_line_cursor#15 print_uchar::b#2 print_char_cursor#33 print_uchar::$0 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#25 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [48] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#25 print_uchar::$2 ] ( print_uint:27::print_uchar:40 [ main::i#10 print_line_cursor#15 print_uint::w#0 print_char_cursor#25 print_uchar::$2 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#33 = print_char_cursor#34 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#24 = print_char_cursor#25 } }  print_uint:27::print_uchar:42 [ main::i#10 print_line_cursor#15 print_char_cursor#25 print_uchar::$2 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#25 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [53] *((byte*) print_char_cursor#24) ← (byte) print_char::ch#2 [ print_char_cursor#24 ] ( print_uint:27::print_uchar:40::print_char:47 [ main::i#10 print_line_cursor#15 print_uint::w#0 print_uchar::b#2 print_char_cursor#24 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#34 } { print_char::ch#0 = print_char::ch#2 } }  print_uint:27::print_uchar:42::print_char:47 [ main::i#10 print_line_cursor#15 print_uchar::b#2 print_char_cursor#24 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#25 } { print_char::ch#0 = print_char::ch#2 } }  print_uint:27::print_uchar:40::print_char:50 [ main::i#10 print_line_cursor#15 print_uint::w#0 print_char_cursor#24 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#33 = print_char_cursor#34 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#24 = print_char_cursor#25 } }  print_uint:27::print_uchar:42::print_char:50 [ main::i#10 print_line_cursor#15 print_char_cursor#24 ] { { print_uint::w#0 = getFAC::return#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#24 = print_char_cursor#33 print_char_cursor#25 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte y 
Statement asm { jsr$b1aa stymemLo stamemHi  } always clobbers reg byte a reg byte x reg byte y 
Statement [57] (word) getFAC::return#0 ← *((const nomodify byte*) memHi) w= *((const nomodify byte*) memLo) [ getFAC::return#0 ] ( getFAC:24 [ main::i#10 print_char_cursor#34 print_line_cursor#15 getFAC::return#0 ] { { getFAC::return#0 = getFAC::return#2 } }  ) always clobbers reg byte a 
Statement [60] *((const nomodify byte*) memLo) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0 [ ] ( addMEMtoFAC:22 [ main::i#10 print_char_cursor#34 print_line_cursor#15 ] { }  ) always clobbers reg byte a 
Statement [61] *((const nomodify byte*) memHi) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0 [ ] ( addMEMtoFAC:22 [ main::i#10 print_char_cursor#34 print_line_cursor#15 ] { }  ) always clobbers reg byte a 
Statement asm { ldamemLo ldymemHi jsr$b867  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { ldamemLo ldymemHi jsr$ba28  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$e26b  } always clobbers reg byte a reg byte x reg byte y 
Statement [74] *((const nomodify byte*) memLo) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0 [ ] ( divMEMbyFAC:16 [ main::i#10 print_char_cursor#34 print_line_cursor#15 ] { }  ) always clobbers reg byte a 
Statement [75] *((const nomodify byte*) memHi) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0 [ ] ( divMEMbyFAC:16 [ main::i#10 print_char_cursor#34 print_line_cursor#15 ] { }  ) always clobbers reg byte a 
Statement asm { ldamemLo ldymemHi jsr$bb0f  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { ldymemLo ldamemHi jsr$b391  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { ldxmemLo ldymemHi jsr$bbd4  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$bafe  } always clobbers reg byte a reg byte x reg byte y 
Potential registers zp[1]:2 [ main::i#10 main::i#1 ] : zp[1]:2 , 
Potential registers zp[2]:3 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:7 [ print_char_cursor#24 print_char_cursor#33 print_char_cursor#34 print_char_cursor#53 print_char_cursor#25 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ mulFACbyMEM::mem#2 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 ] : zp[2]:11 , 
Potential registers zp[2]:13 [ setMEMtoFAC::mem#2 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ getFAC::return#2 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ print_uint::w#0 ] : zp[2]:17 , 
Potential registers zp[1]:19 [ print_uchar::$0 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ print_uchar::$2 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ getFAC::return#0 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ mulFACbyMEM::prepareMEM1_$0 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ mulFACbyMEM::prepareMEM1_$1 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ setFAC::prepareMEM1_$0 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ setFAC::prepareMEM1_$1 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ setMEMtoFAC::prepareMEM1_$0 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ setMEMtoFAC::prepareMEM1_$1 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 24,396.95: zp[2]:3 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ] 12,671.5: zp[2]:7 [ print_char_cursor#24 print_char_cursor#33 print_char_cursor#34 print_char_cursor#53 print_char_cursor#25 ] 
Uplift Scope [print_char] 16,007: zp[1]:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [print_uchar] 2,002: zp[1]:19 [ print_uchar::$0 ] 2,002: zp[1]:20 [ print_uchar::$2 ] 955: zp[1]:5 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplift Scope [setFAC] 202: zp[1]:25 [ setFAC::prepareMEM1_$0 ] 202: zp[1]:26 [ setFAC::prepareMEM1_$1 ] 93: zp[2]:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 ] 
Uplift Scope [setMEMtoFAC] 202: zp[1]:27 [ setMEMtoFAC::prepareMEM1_$0 ] 202: zp[1]:28 [ setMEMtoFAC::prepareMEM1_$1 ] 0: zp[2]:13 [ setMEMtoFAC::mem#2 ] 
Uplift Scope [mulFACbyMEM] 202: zp[1]:23 [ mulFACbyMEM::prepareMEM1_$0 ] 202: zp[1]:24 [ mulFACbyMEM::prepareMEM1_$1 ] 0: zp[2]:9 [ mulFACbyMEM::mem#2 ] 
Uplift Scope [print_uint] 71: zp[2]:17 [ print_uint::w#0 ] 
Uplift Scope [getFAC] 37.33: zp[2]:21 [ getFAC::return#0 ] 22: zp[2]:15 [ getFAC::return#2 ] 
Uplift Scope [main] 11.92: zp[1]:2 [ main::i#10 main::i#1 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [addMEMtoFAC] 
Uplift Scope [divMEMbyFAC] 
Uplift Scope [sinFAC] 
Uplift Scope [divFACby10] 

Uplifting [] best 6445 combination zp[2]:3 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ] zp[2]:7 [ print_char_cursor#24 print_char_cursor#33 print_char_cursor#34 print_char_cursor#53 print_char_cursor#25 ] 
Uplifting [print_char] best 6436 combination reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplifting [print_uchar] best 6418 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplifting [setFAC] best 6406 combination reg byte a [ setFAC::prepareMEM1_$0 ] reg byte a [ setFAC::prepareMEM1_$1 ] zp[2]:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 ] 
Uplifting [setMEMtoFAC] best 6394 combination reg byte a [ setMEMtoFAC::prepareMEM1_$0 ] reg byte a [ setMEMtoFAC::prepareMEM1_$1 ] zp[2]:13 [ setMEMtoFAC::mem#2 ] 
Uplifting [mulFACbyMEM] best 6382 combination reg byte a [ mulFACbyMEM::prepareMEM1_$0 ] reg byte a [ mulFACbyMEM::prepareMEM1_$1 ] zp[2]:9 [ mulFACbyMEM::mem#2 ] 
Uplifting [print_uint] best 6382 combination zp[2]:17 [ print_uint::w#0 ] 
Uplifting [getFAC] best 6382 combination zp[2]:21 [ getFAC::return#0 ] zp[2]:15 [ getFAC::return#2 ] 
Uplifting [main] best 6382 combination zp[1]:2 [ main::i#10 main::i#1 ] 
Uplifting [RADIX] best 6382 combination 
Uplifting [print_ln] best 6382 combination 
Uplifting [addMEMtoFAC] best 6382 combination 
Uplifting [divMEMbyFAC] best 6382 combination 
Uplifting [sinFAC] best 6382 combination 
Uplifting [divFACby10] best 6382 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#10 main::i#1 ]
Uplifting [main] best 6382 combination zp[1]:2 [ main::i#10 main::i#1 ] 
Coalescing zero page register [ zp[2]:15 [ getFAC::return#2 ] ] with [ zp[2]:17 [ print_uint::w#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ getFAC::return#2 print_uint::w#0 ] ] with [ zp[2]:21 [ getFAC::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 ] ] with [ zp[2]:9 [ mulFACbyMEM::mem#2 ] ]
Coalescing zero page register [ zp[2]:15 [ getFAC::return#2 print_uint::w#0 getFAC::return#0 ] ] with [ zp[2]:13 [ setMEMtoFAC::mem#2 ] ]
Coalescing zero page register [ zp[2]:15 [ getFAC::return#2 print_uint::w#0 getFAC::return#0 setMEMtoFAC::mem#2 ] ] with [ zp[2]:11 [ setFAC::prepareMEM1_mem#0 setFAC::w#1 mulFACbyMEM::mem#2 ] ]
Allocated (was zp[2]:7) zp[2]:5 [ print_char_cursor#24 print_char_cursor#33 print_char_cursor#34 print_char_cursor#53 print_char_cursor#25 ]
Allocated (was zp[2]:15) zp[2]:7 [ getFAC::return#2 print_uint::w#0 getFAC::return#0 setMEMtoFAC::mem#2 setFAC::prepareMEM1_mem#0 setFAC::w#1 mulFACbyMEM::mem#2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .label print_screen = $400
  .label print_line_cursor = 3
  .label print_char_cursor = 5
  // main
main: {
    .label f_2pi = $e2e5
    .label i = 2
    // [1] call setFAC 
    // [78] phi from main to setFAC [phi:main->setFAC]
  setFAC_from_main:
    // [78] phi (word) setFAC::prepareMEM1_mem#0 = (word) $4fb [phi:main->setFAC#0] -- vwuz1=vwuc1 
    lda #<$4fb
    sta.z setFAC.prepareMEM1_mem
    lda #>$4fb
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [2] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    jmp __b2
    // main::@2
  __b2:
    // [3] call divFACby10 
    jsr divFACby10
    // [4] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [5] call setMEMtoFAC 
    // [85] phi from main::@3 to setMEMtoFAC [phi:main::@3->setMEMtoFAC]
  setMEMtoFAC_from___b3:
    // [85] phi (byte*) setMEMtoFAC::mem#2 = (const byte*) main::f_127 [phi:main::@3->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z setMEMtoFAC.mem
    lda #>f_127
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [6] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [6] phi (byte*) print_line_cursor#15 = (const byte*) print_screen#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [6] phi (byte*) print_char_cursor#34 = (const byte*) print_screen#0 [phi:main::@3->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [6] phi (byte) main::i#10 = (byte) 1 [phi:main::@3->main::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [7] (word) setFAC::w#1 ← (word)(byte) main::i#10 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z setFAC.w
    lda #0
    sta.z setFAC.w+1
    // [8] call setFAC 
    // [78] phi from main::@1 to setFAC [phi:main::@1->setFAC]
  setFAC_from___b1:
    // [78] phi (word) setFAC::prepareMEM1_mem#0 = (word) setFAC::w#1 [phi:main::@1->setFAC#0] -- register_copy 
    jsr setFAC
    // [9] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  __b4_from___b1:
    jmp __b4
    // main::@4
  __b4:
    // [10] call mulFACbyMEM 
    // [64] phi from main::@4 to mulFACbyMEM [phi:main::@4->mulFACbyMEM]
  mulFACbyMEM_from___b4:
    // [64] phi (byte*) mulFACbyMEM::mem#2 = (const nomodify byte*) main::f_2pi [phi:main::@4->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta.z mulFACbyMEM.mem
    lda #>f_2pi
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [11] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [12] call setMEMtoFAC 
    // [85] phi from main::@5 to setMEMtoFAC [phi:main::@5->setMEMtoFAC]
  setMEMtoFAC_from___b5:
    // [85] phi (byte*) setMEMtoFAC::mem#2 = (const byte*) main::f_i [phi:main::@5->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta.z setMEMtoFAC.mem
    lda #>f_i
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [13] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [14] call setFAC 
    // [78] phi from main::@6 to setFAC [phi:main::@6->setFAC]
  setFAC_from___b6:
    // [78] phi (word) setFAC::prepareMEM1_mem#0 = (byte) $19 [phi:main::@6->setFAC#0] -- vwuz1=vbuc1 
    lda #<$19
    sta.z setFAC.prepareMEM1_mem
    lda #>$19
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [15] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [16] call divMEMbyFAC 
    // [73] phi from main::@7 to divMEMbyFAC [phi:main::@7->divMEMbyFAC]
  divMEMbyFAC_from___b7:
    jsr divMEMbyFAC
    // [17] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [18] call sinFAC 
    jsr sinFAC
    // [19] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [20] call mulFACbyMEM 
    // [64] phi from main::@9 to mulFACbyMEM [phi:main::@9->mulFACbyMEM]
  mulFACbyMEM_from___b9:
    // [64] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) main::f_127 [phi:main::@9->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z mulFACbyMEM.mem
    lda #>f_127
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [21] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [22] call addMEMtoFAC 
    // [59] phi from main::@10 to addMEMtoFAC [phi:main::@10->addMEMtoFAC]
  addMEMtoFAC_from___b10:
    jsr addMEMtoFAC
    // [23] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [24] call getFAC 
    jsr getFAC
    // [25] (word) getFAC::return#2 ← (word) getFAC::return#0
    jmp __b12
    // main::@12
  __b12:
    // [26] (word) print_uint::w#0 ← (word) getFAC::return#2
    // [27] call print_uint 
    jsr print_uint
    // [28] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [29] call print_ln 
    // [34] phi from main::@13 to print_ln [phi:main::@13->print_ln]
  print_ln_from___b13:
    jsr print_ln
    jmp __b14
    // main::@14
  __b14:
    // [30] (byte) main::i#1 ← ++ (byte) main::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [31] if((byte) main::i#1!=(byte) $1a) goto main::@15 -- vbuz1_neq_vbuc1_then_la1 
    lda #$1a
    cmp.z i
    bne __b15
    jmp __breturn
    // main::@return
  __breturn:
    // [32] return 
    rts
    // main::@15
  __b15:
    // [33] (byte*) print_char_cursor#53 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [6] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
  __b1_from___b15:
    // [6] phi (byte*) print_line_cursor#15 = (byte*) print_line_cursor#0 [phi:main::@15->main::@1#0] -- register_copy 
    // [6] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#53 [phi:main::@15->main::@1#1] -- register_copy 
    // [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@15->main::@1#2] -- register_copy 
    jmp __b1
    f_i: .byte 0, 0, 0, 0, 0
    f_127: .byte 0, 0, 0, 0, 0
}
  // print_ln
// Print a newline
print_ln: {
    // [35] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [35] phi (byte*) print_line_cursor#7 = (byte*) print_line_cursor#15 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [36] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [37] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#25) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [38] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(7) w)
print_uint: {
    .label w = 7
    // [39] (byte) print_uchar::b#0 ← > (word) print_uint::w#0 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [40] call print_uchar 
    // [44] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [44] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#34 [phi:print_uint->print_uchar#0] -- register_copy 
    // [44] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [41] (byte) print_uchar::b#1 ← < (word) print_uint::w#0 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [42] call print_uchar 
    // [44] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [44] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#25 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [44] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [43] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [45] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [46] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [47] call print_char 
  // Table of hexadecimal digits
    // [52] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [52] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#33 [phi:print_uchar->print_char#0] -- register_copy 
    // [52] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [48] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [49] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [50] call print_char 
    // [52] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [52] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#25 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [52] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [51] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [53] *((byte*) print_char_cursor#24) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [54] (byte*) print_char_cursor#25 ← ++ (byte*) print_char_cursor#24 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [55] return 
    rts
}
  // getFAC
// unsigned int = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit unsigned int
// Destroys the value in the FAC in the process
getFAC: {
    .label return = 7
    // asm { jsr$b1aa stymemLo stamemHi  }
    // Load FAC (floating point accumulator) integer part into unsigned int register Y,A
    jsr $b1aa
    sty memLo
    sta memHi
    // [57] (word) getFAC::return#0 ← *((const nomodify byte*) memHi) w= *((const nomodify byte*) memLo) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta.z return
    lda memHi
    sta.z return+1
    jmp __breturn
    // getFAC::@return
  __breturn:
    // [58] return 
    rts
}
  // addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 chars from memory
addMEMtoFAC: {
    .const prepareMEM1_mem = main.f_127
    jmp prepareMEM1
    // addMEMtoFAC::prepareMEM1
  prepareMEM1:
    // [60] *((const nomodify byte*) memLo) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // [61] *((const nomodify byte*) memHi) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    jmp __b1
    // addMEMtoFAC::@1
  __b1:
    // asm { ldamemLo ldymemHi jsr$b867  }
    lda memLo
    ldy memHi
    jsr $b867
    jmp __breturn
    // addMEMtoFAC::@return
  __breturn:
    // [63] return 
    rts
}
  // mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 chars from memory
// mulFACbyMEM(byte* zp(7) mem)
mulFACbyMEM: {
    .label mem = 7
    jmp prepareMEM1
    // mulFACbyMEM::prepareMEM1
  prepareMEM1:
    // [65] (byte~) mulFACbyMEM::prepareMEM1_$0 ← < (word)(byte*) mulFACbyMEM::mem#2 -- vbuaa=_lo_vwuz1 
    lda.z mem
    // [66] *((const nomodify byte*) memLo) ← (byte~) mulFACbyMEM::prepareMEM1_$0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // [67] (byte~) mulFACbyMEM::prepareMEM1_$1 ← > (word)(byte*) mulFACbyMEM::mem#2 -- vbuaa=_hi_vwuz1 
    lda.z mem+1
    // [68] *((const nomodify byte*) memHi) ← (byte~) mulFACbyMEM::prepareMEM1_$1 -- _deref_pbuc1=vbuaa 
    sta memHi
    jmp __b1
    // mulFACbyMEM::@1
  __b1:
    // asm { ldamemLo ldymemHi jsr$ba28  }
    lda memLo
    ldy memHi
    jsr $ba28
    jmp __breturn
    // mulFACbyMEM::@return
  __breturn:
    // [70] return 
    rts
}
  // sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
    // asm { jsr$e26b  }
    jsr $e26b
    jmp __breturn
    // sinFAC::@return
  __breturn:
    // [72] return 
    rts
}
  // divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 chars from memory
divMEMbyFAC: {
    .const prepareMEM1_mem = main.f_i
    jmp prepareMEM1
    // divMEMbyFAC::prepareMEM1
  prepareMEM1:
    // [74] *((const nomodify byte*) memLo) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // [75] *((const nomodify byte*) memHi) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    jmp __b1
    // divMEMbyFAC::@1
  __b1:
    // asm { ldamemLo ldymemHi jsr$bb0f  }
    lda memLo
    ldy memHi
    jsr $bb0f
    jmp __breturn
    // divMEMbyFAC::@return
  __breturn:
    // [77] return 
    rts
}
  // setFAC
// FAC = unsigned int
// Set the FAC (floating point accumulator) to the integer value of a 16bit unsigned int
// setFAC(word zp(7) w)
setFAC: {
    .label prepareMEM1_mem = 7
    .label w = 7
    jmp prepareMEM1
    // setFAC::prepareMEM1
  prepareMEM1:
    // [79] (byte~) setFAC::prepareMEM1_$0 ← < (word) setFAC::prepareMEM1_mem#0 -- vbuaa=_lo_vwuz1 
    lda.z prepareMEM1_mem
    // [80] *((const nomodify byte*) memLo) ← (byte~) setFAC::prepareMEM1_$0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // [81] (byte~) setFAC::prepareMEM1_$1 ← > (word) setFAC::prepareMEM1_mem#0 -- vbuaa=_hi_vwuz1 
    lda.z prepareMEM1_mem+1
    // [82] *((const nomodify byte*) memHi) ← (byte~) setFAC::prepareMEM1_$1 -- _deref_pbuc1=vbuaa 
    sta memHi
    jmp __b1
    // setFAC::@1
  __b1:
    // asm { ldymemLo ldamemHi jsr$b391  }
    // Load unsigned int register Y,A into FAC (floating point accumulator)
    ldy memLo
    lda memHi
    jsr $b391
    jmp __breturn
    // setFAC::@return
  __breturn:
    // [84] return 
    rts
}
  // setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 chars (means it is necessary to allocate 5 chars to avoid clobbering other data using eg. char[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zp(7) mem)
setMEMtoFAC: {
    .label mem = 7
    jmp prepareMEM1
    // setMEMtoFAC::prepareMEM1
  prepareMEM1:
    // [86] (byte~) setMEMtoFAC::prepareMEM1_$0 ← < (word)(byte*) setMEMtoFAC::mem#2 -- vbuaa=_lo_vwuz1 
    lda.z mem
    // [87] *((const nomodify byte*) memLo) ← (byte~) setMEMtoFAC::prepareMEM1_$0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // [88] (byte~) setMEMtoFAC::prepareMEM1_$1 ← > (word)(byte*) setMEMtoFAC::mem#2 -- vbuaa=_hi_vwuz1 
    lda.z mem+1
    // [89] *((const nomodify byte*) memHi) ← (byte~) setMEMtoFAC::prepareMEM1_$1 -- _deref_pbuc1=vbuaa 
    sta memHi
    jmp __b1
    // setMEMtoFAC::@1
  __b1:
    // asm { ldxmemLo ldymemHi jsr$bbd4  }
    ldx memLo
    ldy memHi
    jsr $bbd4
    jmp __breturn
    // setMEMtoFAC::@return
  __breturn:
    // [91] return 
    rts
}
  // divFACby10
// FAC = FAC/10
// Set FAC to FAC divided by 10
divFACby10: {
    // asm { jsr$bafe  }
    jsr $bafe
    jmp __breturn
    // divFACby10::@return
  __breturn:
    // [93] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp prepareMEM1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp prepareMEM1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp prepareMEM1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp prepareMEM1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp prepareMEM1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda memLo with TYA
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b2_from_main:
Removing instruction __b3_from___b2:
Removing instruction setMEMtoFAC_from___b3:
Removing instruction __b4_from___b1:
Removing instruction mulFACbyMEM_from___b4:
Removing instruction __b5_from___b4:
Removing instruction setMEMtoFAC_from___b5:
Removing instruction __b6_from___b5:
Removing instruction setFAC_from___b6:
Removing instruction __b7_from___b6:
Removing instruction divMEMbyFAC_from___b7:
Removing instruction __b8_from___b7:
Removing instruction __b9_from___b8:
Removing instruction mulFACbyMEM_from___b9:
Removing instruction __b10_from___b9:
Removing instruction addMEMtoFAC_from___b10:
Removing instruction __b11_from___b10:
Removing instruction __b13_from___b12:
Removing instruction print_ln_from___b13:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction setFAC_from_main:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction setFAC_from___b1:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __breturn:
Removing instruction __b1_from___b15:
Removing instruction __breturn:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction prepareMEM1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction prepareMEM1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction prepareMEM1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction prepareMEM1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction prepareMEM1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction lda memHi
Replacing instruction ldy memHi with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(label) addMEMtoFAC::@1
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(label) addMEMtoFAC::prepareMEM1
(word) addMEMtoFAC::prepareMEM1_mem
(const word) addMEMtoFAC::prepareMEM1_mem#0 prepareMEM1_mem = (word)(const byte*) main::f_127
(void()) divFACby10()
(label) divFACby10::@return
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(label) divMEMbyFAC::@1
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(label) divMEMbyFAC::prepareMEM1
(word) divMEMbyFAC::prepareMEM1_mem
(const word) divMEMbyFAC::prepareMEM1_mem#0 prepareMEM1_mem = (word)(const byte*) main::f_i
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::return#0 return zp[2]:7 37.33333333333333
(word) getFAC::return#2 return zp[2]:7 22.0
(word) getFAC::w
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(const byte*) main::f_127[]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const nomodify byte*) main::f_2pi = (byte*) 58085
(const byte*) main::f_i[]  = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte) main::i
(byte) main::i#1 i zp[1]:2 11.0
(byte) main::i#10 i zp[1]:2 0.9166666666666666
(const nomodify byte*) memHi = (byte*) 255
(const nomodify byte*) memLo = (byte*) 254
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(label) mulFACbyMEM::@1
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#2 mem zp[2]:7
(label) mulFACbyMEM::prepareMEM1
(byte~) mulFACbyMEM::prepareMEM1_$0 reg byte a 202.0
(byte~) mulFACbyMEM::prepareMEM1_$1 reg byte a 202.0
(word) mulFACbyMEM::prepareMEM1_mem
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 2002.0
(byte) print_char::ch#1 reg byte a 2002.0
(byte) print_char::ch#2 reg byte a 12003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#24 print_char_cursor zp[2]:5 11002.0
(byte*) print_char_cursor#25 print_char_cursor zp[2]:5 1241.4117647058824
(byte*) print_char_cursor#33 print_char_cursor zp[2]:5 401.0
(byte*) print_char_cursor#34 print_char_cursor zp[2]:5 5.090909090909091
(byte*) print_char_cursor#53 print_char_cursor zp[2]:5 22.0
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0 print_line_cursor zp[2]:3 4289.285714285714
(byte*) print_line_cursor#15 print_line_cursor zp[2]:3 4.666666666666666
(byte*) print_line_cursor#7 print_line_cursor zp[2]:3 20103.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 2002.0
(byte~) print_uchar::$2 reg byte x 2002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 202.0
(byte) print_uchar::b#1 reg byte x 202.0
(byte) print_uchar::b#2 reg byte x 551.0
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:7 71.0
(void()) setFAC((word) setFAC::w)
(label) setFAC::@1
(label) setFAC::@return
(label) setFAC::prepareMEM1
(byte~) setFAC::prepareMEM1_$0 reg byte a 202.0
(byte~) setFAC::prepareMEM1_$1 reg byte a 202.0
(word) setFAC::prepareMEM1_mem
(word) setFAC::prepareMEM1_mem#0 prepareMEM1_mem zp[2]:7 71.0
(word) setFAC::w
(word) setFAC::w#1 w zp[2]:7 22.0
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(label) setMEMtoFAC::@1
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#2 mem zp[2]:7
(label) setMEMtoFAC::prepareMEM1
(byte~) setMEMtoFAC::prepareMEM1_$0 reg byte a 202.0
(byte~) setMEMtoFAC::prepareMEM1_$1 reg byte a 202.0
(word) setMEMtoFAC::prepareMEM1_mem
(void()) sinFAC()
(label) sinFAC::@return

zp[1]:2 [ main::i#10 main::i#1 ]
zp[2]:3 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp[2]:5 [ print_char_cursor#24 print_char_cursor#33 print_char_cursor#34 print_char_cursor#53 print_char_cursor#25 ]
zp[2]:7 [ getFAC::return#2 print_uint::w#0 getFAC::return#0 setMEMtoFAC::mem#2 setFAC::prepareMEM1_mem#0 setFAC::w#1 mulFACbyMEM::mem#2 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ mulFACbyMEM::prepareMEM1_$0 ]
reg byte a [ mulFACbyMEM::prepareMEM1_$1 ]
reg byte a [ setFAC::prepareMEM1_$0 ]
reg byte a [ setFAC::prepareMEM1_$1 ]
reg byte a [ setMEMtoFAC::prepareMEM1_$0 ]
reg byte a [ setMEMtoFAC::prepareMEM1_$1 ]


FINAL ASSEMBLER
Score: 4961

  // File Comments
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .label print_screen = $400
  .label print_line_cursor = 3
  .label print_char_cursor = 5
  // main
main: {
    .label f_2pi = $e2e5
    .label i = 2
    // setFAC(1275)
    // [1] call setFAC 
    // [78] phi from main to setFAC [phi:main->setFAC]
    // [78] phi (word) setFAC::prepareMEM1_mem#0 = (word) $4fb [phi:main->setFAC#0] -- vwuz1=vwuc1 
    lda #<$4fb
    sta.z setFAC.prepareMEM1_mem
    lda #>$4fb
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [2] phi from main to main::@2 [phi:main->main::@2]
    // main::@2
    // divFACby10()
    // [3] call divFACby10 
    jsr divFACby10
    // [4] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // setMEMtoFAC(f_127)
    // [5] call setMEMtoFAC 
    // [85] phi from main::@3 to setMEMtoFAC [phi:main::@3->setMEMtoFAC]
    // [85] phi (byte*) setMEMtoFAC::mem#2 = (const byte*) main::f_127 [phi:main::@3->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z setMEMtoFAC.mem
    lda #>f_127
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [6] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [6] phi (byte*) print_line_cursor#15 = (const byte*) print_screen#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [6] phi (byte*) print_char_cursor#34 = (const byte*) print_screen#0 [phi:main::@3->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [6] phi (byte) main::i#10 = (byte) 1 [phi:main::@3->main::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    // main::@1
  __b1:
    // setFAC((word)i)
    // [7] (word) setFAC::w#1 ← (word)(byte) main::i#10 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z setFAC.w
    lda #0
    sta.z setFAC.w+1
    // [8] call setFAC 
    // [78] phi from main::@1 to setFAC [phi:main::@1->setFAC]
    // [78] phi (word) setFAC::prepareMEM1_mem#0 = (word) setFAC::w#1 [phi:main::@1->setFAC#0] -- register_copy 
    jsr setFAC
    // [9] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
    // main::@4
    // mulFACbyMEM(f_2pi)
    // [10] call mulFACbyMEM 
    // [64] phi from main::@4 to mulFACbyMEM [phi:main::@4->mulFACbyMEM]
    // [64] phi (byte*) mulFACbyMEM::mem#2 = (const nomodify byte*) main::f_2pi [phi:main::@4->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta.z mulFACbyMEM.mem
    lda #>f_2pi
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [11] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // setMEMtoFAC(f_i)
    // [12] call setMEMtoFAC 
    // [85] phi from main::@5 to setMEMtoFAC [phi:main::@5->setMEMtoFAC]
    // [85] phi (byte*) setMEMtoFAC::mem#2 = (const byte*) main::f_i [phi:main::@5->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta.z setMEMtoFAC.mem
    lda #>f_i
    sta.z setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [13] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // setFAC(25)
    // [14] call setFAC 
    // [78] phi from main::@6 to setFAC [phi:main::@6->setFAC]
    // [78] phi (word) setFAC::prepareMEM1_mem#0 = (byte) $19 [phi:main::@6->setFAC#0] -- vwuz1=vbuc1 
    lda #<$19
    sta.z setFAC.prepareMEM1_mem
    lda #>$19
    sta.z setFAC.prepareMEM1_mem+1
    jsr setFAC
    // [15] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // divMEMbyFAC(f_i)
    // [16] call divMEMbyFAC 
    // [73] phi from main::@7 to divMEMbyFAC [phi:main::@7->divMEMbyFAC]
    jsr divMEMbyFAC
    // [17] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
    // sinFAC()
    // [18] call sinFAC 
    jsr sinFAC
    // [19] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // mulFACbyMEM(f_127)
    // [20] call mulFACbyMEM 
    // [64] phi from main::@9 to mulFACbyMEM [phi:main::@9->mulFACbyMEM]
    // [64] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) main::f_127 [phi:main::@9->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta.z mulFACbyMEM.mem
    lda #>f_127
    sta.z mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [21] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // main::@10
    // addMEMtoFAC(f_127)
    // [22] call addMEMtoFAC 
    // [59] phi from main::@10 to addMEMtoFAC [phi:main::@10->addMEMtoFAC]
    jsr addMEMtoFAC
    // [23] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
    // main::@11
    // getFAC()
    // [24] call getFAC 
    jsr getFAC
    // [25] (word) getFAC::return#2 ← (word) getFAC::return#0
    // main::@12
    // print_uint(getFAC())
    // [26] (word) print_uint::w#0 ← (word) getFAC::return#2
    // [27] call print_uint 
    jsr print_uint
    // [28] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // print_ln()
    // [29] call print_ln 
    // [34] phi from main::@13 to print_ln [phi:main::@13->print_ln]
    jsr print_ln
    // main::@14
    // for(byte i : 1..25)
    // [30] (byte) main::i#1 ← ++ (byte) main::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [31] if((byte) main::i#1!=(byte) $1a) goto main::@15 -- vbuz1_neq_vbuc1_then_la1 
    lda #$1a
    cmp.z i
    bne __b15
    // main::@return
    // }
    // [32] return 
    rts
    // main::@15
  __b15:
    // [33] (byte*) print_char_cursor#53 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [6] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
    // [6] phi (byte*) print_line_cursor#15 = (byte*) print_line_cursor#0 [phi:main::@15->main::@1#0] -- register_copy 
    // [6] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#53 [phi:main::@15->main::@1#1] -- register_copy 
    // [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@15->main::@1#2] -- register_copy 
    jmp __b1
    f_i: .byte 0, 0, 0, 0, 0
    f_127: .byte 0, 0, 0, 0, 0
}
  // print_ln
// Print a newline
print_ln: {
    // [35] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [35] phi (byte*) print_line_cursor#7 = (byte*) print_line_cursor#15 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [36] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [37] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#25) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [38] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(7) w)
print_uint: {
    .label w = 7
    // print_uchar(>w)
    // [39] (byte) print_uchar::b#0 ← > (word) print_uint::w#0 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [40] call print_uchar 
    // [44] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [44] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#34 [phi:print_uint->print_uchar#0] -- register_copy 
    // [44] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(<w)
    // [41] (byte) print_uchar::b#1 ← < (word) print_uint::w#0 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [42] call print_uchar 
    // [44] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [44] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#25 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [44] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@return
    // }
    // [43] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [45] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [46] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [47] call print_char 
  // Table of hexadecimal digits
    // [52] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [52] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#33 [phi:print_uchar->print_char#0] -- register_copy 
    // [52] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [48] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [49] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [50] call print_char 
    // [52] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [52] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#25 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [52] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [51] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [53] *((byte*) print_char_cursor#24) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [54] (byte*) print_char_cursor#25 ← ++ (byte*) print_char_cursor#24 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [55] return 
    rts
}
  // getFAC
// unsigned int = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit unsigned int
// Destroys the value in the FAC in the process
getFAC: {
    .label return = 7
    // asm
    // asm { jsr$b1aa stymemLo stamemHi  }
    // Load FAC (floating point accumulator) integer part into unsigned int register Y,A
    jsr $b1aa
    sty memLo
    sta memHi
    // w = { *memHi, *memLo }
    // [57] (word) getFAC::return#0 ← *((const nomodify byte*) memHi) w= *((const nomodify byte*) memLo) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    tya
    sta.z return
    lda memHi
    sta.z return+1
    // getFAC::@return
    // }
    // [58] return 
    rts
}
  // addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 chars from memory
addMEMtoFAC: {
    .const prepareMEM1_mem = main.f_127
    // addMEMtoFAC::prepareMEM1
    // *memLo = <mem
    // [60] *((const nomodify byte*) memLo) ← <(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // *memHi = >mem
    // [61] *((const nomodify byte*) memHi) ← >(const word) addMEMtoFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    // addMEMtoFAC::@1
    // asm
    // asm { ldamemLo ldymemHi jsr$b867  }
    lda memLo
    ldy memHi
    jsr $b867
    // addMEMtoFAC::@return
    // }
    // [63] return 
    rts
}
  // mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 chars from memory
// mulFACbyMEM(byte* zp(7) mem)
mulFACbyMEM: {
    .label mem = 7
    // mulFACbyMEM::prepareMEM1
    // <mem
    // [65] (byte~) mulFACbyMEM::prepareMEM1_$0 ← < (word)(byte*) mulFACbyMEM::mem#2 -- vbuaa=_lo_vwuz1 
    lda.z mem
    // *memLo = <mem
    // [66] *((const nomodify byte*) memLo) ← (byte~) mulFACbyMEM::prepareMEM1_$0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // >mem
    // [67] (byte~) mulFACbyMEM::prepareMEM1_$1 ← > (word)(byte*) mulFACbyMEM::mem#2 -- vbuaa=_hi_vwuz1 
    lda.z mem+1
    // *memHi = >mem
    // [68] *((const nomodify byte*) memHi) ← (byte~) mulFACbyMEM::prepareMEM1_$1 -- _deref_pbuc1=vbuaa 
    sta memHi
    // mulFACbyMEM::@1
    // asm
    // asm { ldamemLo ldymemHi jsr$ba28  }
    lda memLo
    ldy memHi
    jsr $ba28
    // mulFACbyMEM::@return
    // }
    // [70] return 
    rts
}
  // sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
    // asm
    // asm { jsr$e26b  }
    jsr $e26b
    // sinFAC::@return
    // }
    // [72] return 
    rts
}
  // divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 chars from memory
divMEMbyFAC: {
    .const prepareMEM1_mem = main.f_i
    // divMEMbyFAC::prepareMEM1
    // *memLo = <mem
    // [74] *((const nomodify byte*) memLo) ← <(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #<prepareMEM1_mem
    sta memLo
    // *memHi = >mem
    // [75] *((const nomodify byte*) memHi) ← >(const word) divMEMbyFAC::prepareMEM1_mem#0 -- _deref_pbuc1=vbuc2 
    lda #>prepareMEM1_mem
    sta memHi
    // divMEMbyFAC::@1
    // asm
    // asm { ldamemLo ldymemHi jsr$bb0f  }
    lda memLo
    ldy memHi
    jsr $bb0f
    // divMEMbyFAC::@return
    // }
    // [77] return 
    rts
}
  // setFAC
// FAC = unsigned int
// Set the FAC (floating point accumulator) to the integer value of a 16bit unsigned int
// setFAC(word zp(7) w)
setFAC: {
    .label prepareMEM1_mem = 7
    .label w = 7
    // setFAC::prepareMEM1
    // <mem
    // [79] (byte~) setFAC::prepareMEM1_$0 ← < (word) setFAC::prepareMEM1_mem#0 -- vbuaa=_lo_vwuz1 
    lda.z prepareMEM1_mem
    // *memLo = <mem
    // [80] *((const nomodify byte*) memLo) ← (byte~) setFAC::prepareMEM1_$0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // >mem
    // [81] (byte~) setFAC::prepareMEM1_$1 ← > (word) setFAC::prepareMEM1_mem#0 -- vbuaa=_hi_vwuz1 
    lda.z prepareMEM1_mem+1
    // *memHi = >mem
    // [82] *((const nomodify byte*) memHi) ← (byte~) setFAC::prepareMEM1_$1 -- _deref_pbuc1=vbuaa 
    sta memHi
    // setFAC::@1
    // asm
    // asm { ldymemLo ldamemHi jsr$b391  }
    // Load unsigned int register Y,A into FAC (floating point accumulator)
    ldy memLo
    jsr $b391
    // setFAC::@return
    // }
    // [84] return 
    rts
}
  // setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 chars (means it is necessary to allocate 5 chars to avoid clobbering other data using eg. char[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zp(7) mem)
setMEMtoFAC: {
    .label mem = 7
    // setMEMtoFAC::prepareMEM1
    // <mem
    // [86] (byte~) setMEMtoFAC::prepareMEM1_$0 ← < (word)(byte*) setMEMtoFAC::mem#2 -- vbuaa=_lo_vwuz1 
    lda.z mem
    // *memLo = <mem
    // [87] *((const nomodify byte*) memLo) ← (byte~) setMEMtoFAC::prepareMEM1_$0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // >mem
    // [88] (byte~) setMEMtoFAC::prepareMEM1_$1 ← > (word)(byte*) setMEMtoFAC::mem#2 -- vbuaa=_hi_vwuz1 
    lda.z mem+1
    // *memHi = >mem
    // [89] *((const nomodify byte*) memHi) ← (byte~) setMEMtoFAC::prepareMEM1_$1 -- _deref_pbuc1=vbuaa 
    sta memHi
    // setMEMtoFAC::@1
    // asm
    // asm { ldxmemLo ldymemHi jsr$bbd4  }
    ldx memLo
    tay
    jsr $bbd4
    // setMEMtoFAC::@return
    // }
    // [91] return 
    rts
}
  // divFACby10
// FAC = FAC/10
// Set FAC to FAC divided by 10
divFACby10: {
    // asm
    // asm { jsr$bafe  }
    jsr $bafe
    // divFACby10::@return
    // }
    // [93] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

