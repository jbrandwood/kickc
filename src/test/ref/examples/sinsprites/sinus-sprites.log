Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $35
  (byte) PROCPORT_RAM_CHARROM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $31
  (byte) PROCPORT_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $36
  (byte) PROCPORT_BASIC_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $37
  (byte*) CHARGEN#0 ← ((byte*)) (word/dword/signed dword) $d000
  (word) SPRITE_PTRS#0 ← (word/signed word/dword/signed dword) $3f8
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) $d000
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) $d001
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (word/dword/signed dword) $d010
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) $d012
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d015
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (word/dword/signed dword) $d017
  (byte*) SPRITES_PRIORITY#0 ← ((byte*)) (word/dword/signed dword) $d01b
  (byte*) SPRITES_MC#0 ← ((byte*)) (word/dword/signed dword) $d01c
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (word/dword/signed dword) $d01d
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) $d020
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL1#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL2#0 ← ((byte*)) (word/dword/signed dword) $d022
  (byte*) BGCOL3#0 ← ((byte*)) (word/dword/signed dword) $d023
  (byte*) BGCOL4#0 ← ((byte*)) (word/dword/signed dword) $d024
  (byte*) SPRITES_MC1#0 ← ((byte*)) (word/dword/signed dword) $d025
  (byte*) SPRITES_MC2#0 ← ((byte*)) (word/dword/signed dword) $d026
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) $d027
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte*) D011#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte) VIC_RST8#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte) VIC_BMM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte*) D016#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte) VIC_MCM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) LIGHTPEN_X#0 ← ((byte*)) (word/dword/signed dword) $d013
  (byte*) LIGHTPEN_Y#0 ← ((byte*)) (word/dword/signed dword) $d014
  (byte*) IRQ_STATUS#0 ← ((byte*)) (word/dword/signed dword) $d019
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d01a
  (byte) IRQ_RASTER#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) IRQ_COLLISION_BG#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) IRQ_COLLISION_SPRITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) IRQ_LIGHTPEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) $d800
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dc00
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dc01
  (byte*) CIA1_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc02
  (byte*) CIA1_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc03
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dc0d
  (byte) CIA_INTERRUPT_CLEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dd00
  (byte*) CIA2_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dd01
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd02
  (byte*) CIA2_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd03
  (byte*) CIA2_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dd0d
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (word/signed word/dword/signed dword) $314
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (word/dword/signed dword) $fffe
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte) DARK_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $b
  (byte) GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $c
  (byte) LIGHT_GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $d
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $e
  (byte) LIGHT_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f
  to:@4
@4: scope:[]  from @begin
  (byte*) memLo#0 ← ((byte*)) (byte/word/signed word/dword/signed dword) $fe
  (byte*) memHi#0 ← ((byte*)) (byte/word/signed word/dword/signed dword) $ff
  to:@31
prepareMEM: scope:[prepareMEM]  from addMEMtoFAC divMEMbyFAC mulFACbyMEM setFAC setMEMtoFAC
  (byte*) prepareMEM::mem#5 ← phi( addMEMtoFAC/(byte*) prepareMEM::mem#2 divMEMbyFAC/(byte*) prepareMEM::mem#3 mulFACbyMEM/(byte*) prepareMEM::mem#4 setFAC/(byte*) prepareMEM::mem#0 setMEMtoFAC/(byte*) prepareMEM::mem#1 )
  (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5
  *((byte*) memLo#0) ← (byte~) prepareMEM::$0
  (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5
  *((byte*) memHi#0) ← (byte~) prepareMEM::$1
  to:prepareMEM::@return
prepareMEM::@return: scope:[prepareMEM]  from prepareMEM
  return 
  to:@return
setFAC: scope:[setFAC]  from gen_sintab gen_sintab::@1 gen_sintab::@16 gen_sintab::@4 gen_sintab::@8
  (word) setFAC::w#5 ← phi( gen_sintab/(word) setFAC::w#0 gen_sintab::@1/(word) setFAC::w#3 gen_sintab::@16/(word) setFAC::w#4 gen_sintab::@4/(word) setFAC::w#1 gen_sintab::@8/(word) setFAC::w#2 )
  (byte*~) setFAC::$0 ← ((byte*)) (word) setFAC::w#5
  (byte*) prepareMEM::mem#0 ← (byte*~) setFAC::$0
  call prepareMEM 
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC
  asm { ldy$fe lda$ff jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  return 
  to:@return
getFAC: scope:[getFAC]  from gen_sintab::@21
  asm { jsr$b1aa sty$fe sta$ff  }
  (word) getFAC::w#0 ← { *((byte*) memHi#0), *((byte*) memLo#0) }
  (word) getFAC::return#0 ← (word) getFAC::w#0
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  (word) getFAC::return#3 ← phi( getFAC/(word) getFAC::return#0 )
  (word) getFAC::return#1 ← (word) getFAC::return#3
  return 
  to:@return
setARGtoFAC: scope:[setARGtoFAC]  from gen_sintab::@3
  asm { jsr$bc0f  }
  to:setARGtoFAC::@return
setARGtoFAC::@return: scope:[setARGtoFAC]  from setARGtoFAC
  return 
  to:@return
setMEMtoFAC: scope:[setMEMtoFAC]  from gen_sintab::@10 gen_sintab::@12 gen_sintab::@15 gen_sintab::@5 gen_sintab::@7
  (byte*) setMEMtoFAC::mem#5 ← phi( gen_sintab::@10/(byte*) setMEMtoFAC::mem#2 gen_sintab::@12/(byte*) setMEMtoFAC::mem#3 gen_sintab::@15/(byte*) setMEMtoFAC::mem#4 gen_sintab::@5/(byte*) setMEMtoFAC::mem#0 gen_sintab::@7/(byte*) setMEMtoFAC::mem#1 )
  (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5
  call prepareMEM 
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC
  asm { ldx$fe ldy$ff jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  return 
  to:@return
addMEMtoFAC: scope:[addMEMtoFAC]  from gen_sintab::@11 gen_sintab::@20
  (byte*) addMEMtoFAC::mem#2 ← phi( gen_sintab::@11/(byte*) addMEMtoFAC::mem#0 gen_sintab::@20/(byte*) addMEMtoFAC::mem#1 )
  (byte*) prepareMEM::mem#2 ← (byte*) addMEMtoFAC::mem#2
  call prepareMEM 
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC
  asm { lda$fe ldy$ff jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  return 
  to:@return
subFACfromARG: scope:[subFACfromARG]  from gen_sintab::@6
  asm { jsr$b853  }
  to:subFACfromARG::@return
subFACfromARG::@return: scope:[subFACfromARG]  from subFACfromARG
  return 
  to:@return
divMEMbyFAC: scope:[divMEMbyFAC]  from gen_sintab::@17 gen_sintab::@9
  (byte*) divMEMbyFAC::mem#2 ← phi( gen_sintab::@17/(byte*) divMEMbyFAC::mem#1 gen_sintab::@9/(byte*) divMEMbyFAC::mem#0 )
  (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2
  call prepareMEM 
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC
  asm { lda$fe ldy$ff jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  return 
  to:@return
mulFACbyMEM: scope:[mulFACbyMEM]  from gen_sintab::@14 gen_sintab::@19
  (byte*) mulFACbyMEM::mem#2 ← phi( gen_sintab::@14/(byte*) mulFACbyMEM::mem#0 gen_sintab::@19/(byte*) mulFACbyMEM::mem#1 )
  (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
  call prepareMEM 
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM
  asm { lda$fe ldy$ff jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  return 
  to:@return
sinFAC: scope:[sinFAC]  from gen_sintab::@18
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  return 
  to:@return
@31: scope:[]  from @4
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@43
@43: scope:[]  from @31
  (byte[]) print_hextab#0 ← (const string) $0
  to:@50
@50: scope:[]  from @43
  (byte) sinlen_x#0 ← (byte/word/signed word/dword/signed dword) $dd
  (byte[$dd]) sintab_x#0 ← { fill( $dd, 0) }
  (byte) sinlen_y#0 ← (byte/word/signed word/dword/signed dword) $c5
  (byte[$c5]) sintab_y#0 ← { fill( $c5, 0) }
  (byte*) sprites#0 ← ((byte*)) (word/signed word/dword/signed dword) $2000
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  to:@53
main: scope:[main]  from @60
  (byte) sin_idx_y#24 ← phi( @60/(byte) sin_idx_y#17 )
  (byte) sin_idx_x#26 ← phi( @60/(byte) sin_idx_x#16 )
  (byte) progress_idx#30 ← phi( @60/(byte) progress_idx#35 )
  (byte*) progress_cursor#29 ← phi( @60/(byte*) progress_cursor#35 )
  call init 
  to:main::@5
main::@5: scope:[main]  from main
  (byte) sin_idx_y#21 ← phi( main/(byte) sin_idx_y#24 )
  (byte) sin_idx_x#23 ← phi( main/(byte) sin_idx_x#26 )
  (byte) progress_idx#16 ← phi( main/(byte) progress_idx#6 )
  (byte*) progress_cursor#15 ← phi( main/(byte*) progress_cursor#6 )
  (byte*) progress_cursor#0 ← (byte*) progress_cursor#15
  (byte) progress_idx#0 ← (byte) progress_idx#16
  to:main::@2
main::@1: scope:[main]  from main::@6
  (byte) progress_idx#43 ← phi( main::@6/(byte) progress_idx#31 )
  (byte*) progress_cursor#43 ← phi( main::@6/(byte*) progress_cursor#30 )
  (byte) sin_idx_y#20 ← phi( main::@6/(byte) sin_idx_y#0 )
  (byte) sin_idx_x#22 ← phi( main::@6/(byte) sin_idx_x#0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2 main::@5
  (byte) progress_idx#40 ← phi( main::@1/(byte) progress_idx#43 main::@2/(byte) progress_idx#40 main::@5/(byte) progress_idx#0 )
  (byte*) progress_cursor#40 ← phi( main::@1/(byte*) progress_cursor#43 main::@2/(byte*) progress_cursor#40 main::@5/(byte*) progress_cursor#0 )
  (byte) sin_idx_y#18 ← phi( main::@1/(byte) sin_idx_y#20 main::@2/(byte) sin_idx_y#18 main::@5/(byte) sin_idx_y#21 )
  (byte) sin_idx_x#17 ← phi( main::@1/(byte) sin_idx_x#22 main::@2/(byte) sin_idx_x#17 main::@5/(byte) sin_idx_x#23 )
  (bool~) main::$1 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) $ff
  if((bool~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) progress_idx#36 ← phi( main::@2/(byte) progress_idx#40 )
  (byte*) progress_cursor#36 ← phi( main::@2/(byte*) progress_cursor#40 )
  (byte) sin_idx_y#13 ← phi( main::@2/(byte) sin_idx_y#18 )
  (byte) sin_idx_x#13 ← phi( main::@2/(byte) sin_idx_x#17 )
  call anim 
  to:main::@6
main::@6: scope:[main]  from main::@3
  (byte) progress_idx#31 ← phi( main::@3/(byte) progress_idx#36 )
  (byte*) progress_cursor#30 ← phi( main::@3/(byte*) progress_cursor#36 )
  (byte) sin_idx_y#7 ← phi( main::@3/(byte) sin_idx_y#5 )
  (byte) sin_idx_x#7 ← phi( main::@3/(byte) sin_idx_x#5 )
  (byte) sin_idx_x#0 ← (byte) sin_idx_x#7
  (byte) sin_idx_y#0 ← (byte) sin_idx_y#7
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@6
  (byte) sin_idx_y#8 ← phi( main::@6/(byte) sin_idx_y#0 )
  (byte) sin_idx_x#8 ← phi( main::@6/(byte) sin_idx_x#0 )
  (byte) progress_idx#17 ← phi( main::@6/(byte) progress_idx#31 )
  (byte*) progress_cursor#16 ← phi( main::@6/(byte*) progress_cursor#30 )
  (byte*) progress_cursor#1 ← (byte*) progress_cursor#16
  (byte) progress_idx#1 ← (byte) progress_idx#17
  (byte) sin_idx_x#1 ← (byte) sin_idx_x#8
  (byte) sin_idx_y#1 ← (byte) sin_idx_y#8
  return 
  to:@return
init: scope:[init]  from main
  (byte) progress_idx#48 ← phi( main/(byte) progress_idx#30 )
  (byte*) progress_cursor#48 ← phi( main/(byte*) progress_cursor#29 )
  call clear_screen 
  to:init::@3
init::@3: scope:[init]  from init
  (byte) progress_idx#46 ← phi( init/(byte) progress_idx#48 )
  (byte*) progress_cursor#46 ← phi( init/(byte*) progress_cursor#48 )
  (byte) init::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@3
  (byte) progress_idx#44 ← phi( init::@1/(byte) progress_idx#44 init::@3/(byte) progress_idx#46 )
  (byte*) progress_cursor#44 ← phi( init::@1/(byte*) progress_cursor#44 init::@3/(byte*) progress_cursor#46 )
  (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init::@3/(byte) init::i#0 )
  *((byte*) COLS#0 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte/signed word/word/dword/signed dword~) init::$1 ← (byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) init::i#2
  *((byte*) COLS#0 + (byte/signed word/word/dword/signed dword~) init::$1) ← (byte/signed byte/word/signed word/dword/signed dword) $b
  (byte) init::i#1 ← (byte) init::i#2 + rangenext(0,$27)
  (bool~) init::$2 ← (byte) init::i#1 != rangelast(0,$27)
  if((bool~) init::$2) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  (byte) progress_idx#41 ← phi( init::@1/(byte) progress_idx#44 )
  (byte*) progress_cursor#41 ← phi( init::@1/(byte*) progress_cursor#44 )
  call place_sprites 
  to:init::@4
init::@4: scope:[init]  from init::@2
  (byte) progress_idx#37 ← phi( init::@2/(byte) progress_idx#41 )
  (byte*) progress_cursor#37 ← phi( init::@2/(byte*) progress_cursor#41 )
  call gen_sprites 
  to:init::@5
init::@5: scope:[init]  from init::@4
  (byte) progress_idx#32 ← phi( init::@4/(byte) progress_idx#37 )
  (byte*) progress_cursor#31 ← phi( init::@4/(byte*) progress_cursor#37 )
  (byte*) progress_init::line#0 ← (byte*) SCREEN#0
  call progress_init 
  to:init::@6
init::@6: scope:[init]  from init::@5
  (byte) progress_idx#18 ← phi( init::@5/(byte) progress_idx#9 )
  (byte*) progress_cursor#17 ← phi( init::@5/(byte*) progress_cursor#9 )
  (byte*) progress_cursor#2 ← (byte*) progress_cursor#17
  (byte) progress_idx#2 ← (byte) progress_idx#18
  (byte*) gen_sintab::sintab#0 ← (byte[$dd]) sintab_x#0
  (byte) gen_sintab::length#0 ← (byte) sinlen_x#0
  (byte) gen_sintab::min#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) gen_sintab::max#0 ← (byte/word/signed word/dword/signed dword) $ff
  call gen_sintab 
  to:init::@7
init::@7: scope:[init]  from init::@6
  (byte*) progress_cursor#18 ← phi( init::@6/(byte*) progress_cursor#13 )
  (byte) progress_idx#19 ← phi( init::@6/(byte) progress_idx#14 )
  (byte) progress_idx#3 ← (byte) progress_idx#19
  (byte*) progress_cursor#3 ← (byte*) progress_cursor#18
  (byte*~) init::$7 ← (byte*) SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*) progress_init::line#1 ← (byte*~) init::$7
  call progress_init 
  to:init::@8
init::@8: scope:[init]  from init::@7
  (byte) progress_idx#20 ← phi( init::@7/(byte) progress_idx#9 )
  (byte*) progress_cursor#19 ← phi( init::@7/(byte*) progress_cursor#9 )
  (byte*) progress_cursor#4 ← (byte*) progress_cursor#19
  (byte) progress_idx#4 ← (byte) progress_idx#20
  (byte*) gen_sintab::sintab#1 ← (byte[$c5]) sintab_y#0
  (byte) gen_sintab::length#1 ← (byte) sinlen_y#0
  (byte) gen_sintab::min#1 ← (byte/signed byte/word/signed word/dword/signed dword) $32
  (byte) gen_sintab::max#1 ← (byte/word/signed word/dword/signed dword) $d0
  call gen_sintab 
  to:init::@9
init::@9: scope:[init]  from init::@8
  (byte*) progress_cursor#20 ← phi( init::@8/(byte*) progress_cursor#13 )
  (byte) progress_idx#21 ← phi( init::@8/(byte) progress_idx#14 )
  (byte) progress_idx#5 ← (byte) progress_idx#21
  (byte*) progress_cursor#5 ← (byte*) progress_cursor#20
  call clear_screen 
  to:init::@10
init::@10: scope:[init]  from init::@9
  (byte) progress_idx#33 ← phi( init::@9/(byte) progress_idx#5 )
  (byte*) progress_cursor#32 ← phi( init::@9/(byte*) progress_cursor#5 )
  to:init::@return
init::@return: scope:[init]  from init::@10
  (byte) progress_idx#22 ← phi( init::@10/(byte) progress_idx#33 )
  (byte*) progress_cursor#21 ← phi( init::@10/(byte*) progress_cursor#32 )
  (byte*) progress_cursor#6 ← (byte*) progress_cursor#21
  (byte) progress_idx#6 ← (byte) progress_idx#22
  return 
  to:@return
clear_screen: scope:[clear_screen]  from init init::@9
  (byte*) clear_screen::sc#0 ← (byte*) SCREEN#0
  to:clear_screen::@1
clear_screen::@1: scope:[clear_screen]  from clear_screen clear_screen::@1
  (byte*) clear_screen::sc#2 ← phi( clear_screen/(byte*) clear_screen::sc#0 clear_screen::@1/(byte*) clear_screen::sc#1 )
  *((byte*) clear_screen::sc#2) ← (byte) ' '
  (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2
  (byte*~) clear_screen::$0 ← (byte*) SCREEN#0 + (word/signed word/dword/signed dword) $3e8
  (bool~) clear_screen::$1 ← (byte*) clear_screen::sc#1 < (byte*~) clear_screen::$0
  if((bool~) clear_screen::$1) goto clear_screen::@1
  to:clear_screen::@return
clear_screen::@return: scope:[clear_screen]  from clear_screen::@1
  return 
  to:@return
@53: scope:[]  from @50
  (byte*) progress_cursor#7 ← (byte*) SCREEN#0
  (byte) progress_idx#7 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@55
progress_init: scope:[progress_init]  from init::@5 init::@7
  (byte*) progress_init::line#2 ← phi( init::@5/(byte*) progress_init::line#0 init::@7/(byte*) progress_init::line#1 )
  (byte*) progress_cursor#8 ← (byte*) progress_init::line#2
  (byte) progress_idx#8 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:progress_init::@return
progress_init::@return: scope:[progress_init]  from progress_init
  (byte) progress_idx#23 ← phi( progress_init/(byte) progress_idx#8 )
  (byte*) progress_cursor#22 ← phi( progress_init/(byte*) progress_cursor#8 )
  (byte*) progress_cursor#9 ← (byte*) progress_cursor#22
  (byte) progress_idx#9 ← (byte) progress_idx#23
  return 
  to:@return
progress_inc: scope:[progress_inc]  from gen_sintab::@22
  (byte*) progress_cursor#33 ← phi( gen_sintab::@22/(byte*) progress_cursor#34 )
  (byte) progress_idx#24 ← phi( gen_sintab::@22/(byte) progress_idx#34 )
  (byte[]) progress_inc::progress_chars#0 ← { (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $65, (byte/signed byte/word/signed word/dword/signed dword) $74, (byte/signed byte/word/signed word/dword/signed dword) $75, (byte/signed byte/word/signed word/dword/signed dword) $61, (byte/word/signed word/dword/signed dword) $f6, (byte/word/signed word/dword/signed dword) $e7, (byte/word/signed word/dword/signed dword) $ea, (byte/word/signed word/dword/signed dword) $e0 }
  (byte) progress_idx#10 ← ++ (byte) progress_idx#24
  (bool~) progress_inc::$0 ← (byte) progress_idx#10 == (byte/signed byte/word/signed word/dword/signed dword) 8
  (bool~) progress_inc::$1 ← ! (bool~) progress_inc::$0
  if((bool~) progress_inc::$1) goto progress_inc::@1
  to:progress_inc::@2
progress_inc::@1: scope:[progress_inc]  from progress_inc progress_inc::@2
  (byte*) progress_cursor#23 ← phi( progress_inc/(byte*) progress_cursor#33 progress_inc::@2/(byte*) progress_cursor#10 )
  (byte) progress_idx#25 ← phi( progress_inc/(byte) progress_idx#10 progress_inc::@2/(byte) progress_idx#11 )
  *((byte*) progress_cursor#23) ← *((byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#25)
  to:progress_inc::@return
progress_inc::@2: scope:[progress_inc]  from progress_inc
  (byte*) progress_cursor#24 ← phi( progress_inc/(byte*) progress_cursor#33 )
  *((byte*) progress_cursor#24) ← *((byte[]) progress_inc::progress_chars#0 + (byte/signed byte/word/signed word/dword/signed dword) 8)
  (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#24
  (byte) progress_idx#11 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:progress_inc::@1
progress_inc::@return: scope:[progress_inc]  from progress_inc::@1
  (byte*) progress_cursor#25 ← phi( progress_inc::@1/(byte*) progress_cursor#23 )
  (byte) progress_idx#26 ← phi( progress_inc::@1/(byte) progress_idx#25 )
  (byte) progress_idx#12 ← (byte) progress_idx#26
  (byte*) progress_cursor#11 ← (byte*) progress_cursor#25
  return 
  to:@return
@55: scope:[]  from @53
  (byte) progress_idx#39 ← phi( @53/(byte) progress_idx#7 )
  (byte*) progress_cursor#39 ← phi( @53/(byte*) progress_cursor#7 )
  (byte) sin_idx_x#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) sin_idx_y#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@60
anim: scope:[anim]  from main::@3
  (byte) sin_idx_y#9 ← phi( main::@3/(byte) sin_idx_y#13 )
  (byte) sin_idx_x#9 ← phi( main::@3/(byte) sin_idx_x#13 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (byte) anim::xidx#0 ← (byte) sin_idx_x#9
  (byte) anim::yidx#0 ← (byte) sin_idx_y#9
  (byte) anim::j2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $c
  (byte) anim::x_msb#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) anim::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@3
  (byte) sin_idx_y#25 ← phi( anim/(byte) sin_idx_y#9 anim::@3/(byte) sin_idx_y#19 )
  (byte) sin_idx_x#24 ← phi( anim/(byte) sin_idx_x#9 anim::@3/(byte) sin_idx_x#14 )
  (byte) anim::j#5 ← phi( anim/(byte) anim::j#0 anim::@3/(byte) anim::j#1 )
  (byte) anim::yidx#3 ← phi( anim/(byte) anim::yidx#0 anim::@3/(byte) anim::yidx#6 )
  (byte) anim::j2#2 ← phi( anim/(byte) anim::j2#0 anim::@3/(byte) anim::j2#1 )
  (byte) anim::x_msb#2 ← phi( anim/(byte) anim::x_msb#0 anim::@3/(byte) anim::x_msb#4 )
  (byte) anim::xidx#3 ← phi( anim/(byte) anim::xidx#0 anim::@3/(byte) anim::xidx#5 )
  (byte/signed byte/word/signed word/dword/signed dword~) anim::$0 ← ((word)) (byte/signed byte/word/signed word/dword/signed dword) $1e
  (byte/signed word/word/dword/signed dword~) anim::$1 ← (byte/signed byte/word/signed word/dword/signed dword~) anim::$0 + *((byte[$dd]) sintab_x#0 + (byte) anim::xidx#3)
  (word) anim::x#0 ← (byte/signed word/word/dword/signed dword~) anim::$1
  (byte~) anim::$2 ← (byte) anim::x_msb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) anim::$3 ← > (word) anim::x#0
  (byte~) anim::$4 ← (byte~) anim::$2 | (byte~) anim::$3
  (byte) anim::x_msb#1 ← (byte~) anim::$4
  (byte~) anim::$5 ← < (word) anim::x#0
  *((byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$5
  *((byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((byte[$c5]) sintab_y#0 + (byte) anim::yidx#3)
  (byte/signed word/word/dword/signed dword~) anim::$6 ← (byte) anim::xidx#3 + (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte) anim::xidx#1 ← (byte/signed word/word/dword/signed dword~) anim::$6
  (bool~) anim::$7 ← (byte) anim::xidx#1 >= (byte) sinlen_x#0
  (bool~) anim::$8 ← ! (bool~) anim::$7
  if((bool~) anim::$8) goto anim::@2
  to:anim::@6
anim::@2: scope:[anim]  from anim::@1 anim::@6
  (byte) sin_idx_y#22 ← phi( anim::@1/(byte) sin_idx_y#25 anim::@6/(byte) sin_idx_y#26 )
  (byte) sin_idx_x#18 ← phi( anim::@1/(byte) sin_idx_x#24 anim::@6/(byte) sin_idx_x#25 )
  (byte) anim::x_msb#5 ← phi( anim::@1/(byte) anim::x_msb#1 anim::@6/(byte) anim::x_msb#7 )
  (byte) anim::xidx#6 ← phi( anim::@1/(byte) anim::xidx#1 anim::@6/(byte) anim::xidx#2 )
  (byte) anim::j#3 ← phi( anim::@1/(byte) anim::j#5 anim::@6/(byte) anim::j#6 )
  (byte) anim::j2#4 ← phi( anim::@1/(byte) anim::j2#2 anim::@6/(byte) anim::j2#6 )
  (byte) anim::yidx#4 ← phi( anim::@1/(byte) anim::yidx#3 anim::@6/(byte) anim::yidx#7 )
  (byte/signed word/word/dword/signed dword~) anim::$10 ← (byte) anim::yidx#4 + (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) anim::yidx#1 ← (byte/signed word/word/dword/signed dword~) anim::$10
  (bool~) anim::$11 ← (byte) anim::yidx#1 >= (byte) sinlen_y#0
  (bool~) anim::$12 ← ! (bool~) anim::$11
  if((bool~) anim::$12) goto anim::@3
  to:anim::@7
anim::@6: scope:[anim]  from anim::@1
  (byte) sin_idx_y#26 ← phi( anim::@1/(byte) sin_idx_y#25 )
  (byte) sin_idx_x#25 ← phi( anim::@1/(byte) sin_idx_x#24 )
  (byte) anim::x_msb#7 ← phi( anim::@1/(byte) anim::x_msb#1 )
  (byte) anim::j#6 ← phi( anim::@1/(byte) anim::j#5 )
  (byte) anim::j2#6 ← phi( anim::@1/(byte) anim::j2#2 )
  (byte) anim::yidx#7 ← phi( anim::@1/(byte) anim::yidx#3 )
  (byte) anim::xidx#4 ← phi( anim::@1/(byte) anim::xidx#1 )
  (byte~) anim::$9 ← (byte) anim::xidx#4 - (byte) sinlen_x#0
  (byte) anim::xidx#2 ← (byte~) anim::$9
  to:anim::@2
anim::@3: scope:[anim]  from anim::@2 anim::@7
  (byte) sin_idx_y#19 ← phi( anim::@2/(byte) sin_idx_y#22 anim::@7/(byte) sin_idx_y#23 )
  (byte) sin_idx_x#14 ← phi( anim::@2/(byte) sin_idx_x#18 anim::@7/(byte) sin_idx_x#19 )
  (byte) anim::yidx#6 ← phi( anim::@2/(byte) anim::yidx#1 anim::@7/(byte) anim::yidx#2 )
  (byte) anim::x_msb#4 ← phi( anim::@2/(byte) anim::x_msb#5 anim::@7/(byte) anim::x_msb#6 )
  (byte) anim::xidx#5 ← phi( anim::@2/(byte) anim::xidx#6 anim::@7/(byte) anim::xidx#7 )
  (byte) anim::j#2 ← phi( anim::@2/(byte) anim::j#3 anim::@7/(byte) anim::j#4 )
  (byte) anim::j2#3 ← phi( anim::@2/(byte) anim::j2#4 anim::@7/(byte) anim::j2#5 )
  (byte/signed word/word/dword/signed dword~) anim::$14 ← (byte) anim::j2#3 - (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) anim::j2#1 ← (byte/signed word/word/dword/signed dword~) anim::$14
  (byte) anim::j#1 ← (byte) anim::j#2 + rangenext(0,6)
  (bool~) anim::$15 ← (byte) anim::j#1 != rangelast(0,6)
  if((bool~) anim::$15) goto anim::@1
  to:anim::@8
anim::@7: scope:[anim]  from anim::@2
  (byte) sin_idx_y#23 ← phi( anim::@2/(byte) sin_idx_y#22 )
  (byte) sin_idx_x#19 ← phi( anim::@2/(byte) sin_idx_x#18 )
  (byte) anim::x_msb#6 ← phi( anim::@2/(byte) anim::x_msb#5 )
  (byte) anim::xidx#7 ← phi( anim::@2/(byte) anim::xidx#6 )
  (byte) anim::j#4 ← phi( anim::@2/(byte) anim::j#3 )
  (byte) anim::j2#5 ← phi( anim::@2/(byte) anim::j2#4 )
  (byte) anim::yidx#5 ← phi( anim::@2/(byte) anim::yidx#1 )
  (byte~) anim::$13 ← (byte) anim::yidx#5 - (byte) sinlen_y#0
  (byte) anim::yidx#2 ← (byte~) anim::$13
  to:anim::@3
anim::@8: scope:[anim]  from anim::@3
  (byte) sin_idx_y#14 ← phi( anim::@3/(byte) sin_idx_y#19 )
  (byte) sin_idx_x#10 ← phi( anim::@3/(byte) sin_idx_x#14 )
  (byte) anim::x_msb#3 ← phi( anim::@3/(byte) anim::x_msb#4 )
  *((byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#3
  (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#10
  (bool~) anim::$16 ← (byte) sin_idx_x#3 >= (byte) sinlen_x#0
  (bool~) anim::$17 ← ! (bool~) anim::$16
  if((bool~) anim::$17) goto anim::@4
  to:anim::@9
anim::@4: scope:[anim]  from anim::@8 anim::@9
  (byte) sin_idx_x#21 ← phi( anim::@8/(byte) sin_idx_x#3 anim::@9/(byte) sin_idx_x#4 )
  (byte) sin_idx_y#10 ← phi( anim::@8/(byte) sin_idx_y#14 anim::@9/(byte) sin_idx_y#15 )
  (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#10
  (bool~) anim::$18 ← (byte) sin_idx_y#3 >= (byte) sinlen_y#0
  (bool~) anim::$19 ← ! (bool~) anim::$18
  if((bool~) anim::$19) goto anim::@5
  to:anim::@10
anim::@9: scope:[anim]  from anim::@8
  (byte) sin_idx_y#15 ← phi( anim::@8/(byte) sin_idx_y#14 )
  (byte) sin_idx_x#4 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:anim::@4
anim::@5: scope:[anim]  from anim::@10 anim::@4
  (byte) sin_idx_y#16 ← phi( anim::@10/(byte) sin_idx_y#4 anim::@4/(byte) sin_idx_y#3 )
  (byte) sin_idx_x#15 ← phi( anim::@10/(byte) sin_idx_x#20 anim::@4/(byte) sin_idx_x#21 )
  *((byte*) BORDERCOL#0) ← -- *((byte*) BORDERCOL#0)
  to:anim::@return
anim::@10: scope:[anim]  from anim::@4
  (byte) sin_idx_x#20 ← phi( anim::@4/(byte) sin_idx_x#21 )
  (byte) sin_idx_y#4 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:anim::@5
anim::@return: scope:[anim]  from anim::@5
  (byte) sin_idx_y#11 ← phi( anim::@5/(byte) sin_idx_y#16 )
  (byte) sin_idx_x#11 ← phi( anim::@5/(byte) sin_idx_x#15 )
  (byte) sin_idx_x#5 ← (byte) sin_idx_x#11
  (byte) sin_idx_y#5 ← (byte) sin_idx_y#11
  return 
  to:@return
place_sprites: scope:[place_sprites]  from init::@2
  *((byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  *((byte*) SPRITES_EXPAND_X#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  *((byte*) SPRITES_EXPAND_Y#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  (byte*~) place_sprites::$0 ← (byte*) SCREEN#0 + (word/signed word/dword/signed dword) $3f8
  (byte*) place_sprites::sprites_ptr#0 ← (byte*~) place_sprites::$0
  (byte*~) place_sprites::$1 ← (byte*) sprites#0 / (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte~) place_sprites::$2 ← ((byte)) (byte*~) place_sprites::$1
  (byte) place_sprites::spr_id#0 ← (byte~) place_sprites::$2
  (byte) place_sprites::spr_x#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3c
  (byte) place_sprites::j2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) place_sprites::col#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) place_sprites::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:place_sprites::@1
place_sprites::@1: scope:[place_sprites]  from place_sprites place_sprites::@1
  (byte) place_sprites::col#2 ← phi( place_sprites/(byte) place_sprites::col#0 place_sprites::@1/(byte) place_sprites::col#1 )
  (byte) place_sprites::j2#3 ← phi( place_sprites/(byte) place_sprites::j2#0 place_sprites::@1/(byte) place_sprites::j2#2 )
  (byte) place_sprites::spr_x#2 ← phi( place_sprites/(byte) place_sprites::spr_x#0 place_sprites::@1/(byte) place_sprites::spr_x#1 )
  (byte) place_sprites::j#2 ← phi( place_sprites/(byte) place_sprites::j#0 place_sprites::@1/(byte) place_sprites::j#1 )
  (byte*) place_sprites::sprites_ptr#1 ← phi( place_sprites/(byte*) place_sprites::sprites_ptr#0 place_sprites::@1/(byte*) place_sprites::sprites_ptr#1 )
  (byte) place_sprites::spr_id#2 ← phi( place_sprites/(byte) place_sprites::spr_id#0 place_sprites::@1/(byte) place_sprites::spr_id#1 )
  *((byte*) place_sprites::sprites_ptr#1 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2
  (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2
  *((byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2
  *((byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte/signed byte/word/signed word/dword/signed dword) $50
  *((byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2
  (byte/signed word/word/dword/signed dword~) place_sprites::$3 ← (byte) place_sprites::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) place_sprites::spr_x#1 ← (byte/signed word/word/dword/signed dword~) place_sprites::$3
  (byte/signed byte/word/signed word/dword/signed dword~) place_sprites::$4 ← (byte/signed byte/word/signed word/dword/signed dword) 7 ^ (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte/word/dword~) place_sprites::$5 ← (byte) place_sprites::col#2 ^ (byte/signed byte/word/signed word/dword/signed dword~) place_sprites::$4
  (byte) place_sprites::col#1 ← (byte/word/dword~) place_sprites::$5
  (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3
  (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1
  (byte) place_sprites::j#1 ← (byte) place_sprites::j#2 + rangenext(0,6)
  (bool~) place_sprites::$6 ← (byte) place_sprites::j#1 != rangelast(0,6)
  if((bool~) place_sprites::$6) goto place_sprites::@1
  to:place_sprites::@return
place_sprites::@return: scope:[place_sprites]  from place_sprites::@1
  return 
  to:@return
gen_sprites: scope:[gen_sprites]  from init::@4
  (byte[]) gen_sprites::cml#0 ← (const string) gen_sprites::$3
  (byte*) gen_sprites::spr#0 ← (byte*) sprites#0
  (byte) gen_sprites::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gen_sprites::@1
gen_sprites::@1: scope:[gen_sprites]  from gen_sprites gen_sprites::@3
  (byte*) gen_sprites::spr#2 ← phi( gen_sprites/(byte*) gen_sprites::spr#0 gen_sprites::@3/(byte*) gen_sprites::spr#1 )
  (byte) gen_sprites::i#2 ← phi( gen_sprites/(byte) gen_sprites::i#0 gen_sprites::@3/(byte) gen_sprites::i#1 )
  (byte) gen_chargen_sprite::ch#0 ← *((byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2)
  (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2
  call gen_chargen_sprite 
  to:gen_sprites::@3
gen_sprites::@3: scope:[gen_sprites]  from gen_sprites::@1
  (byte) gen_sprites::i#3 ← phi( gen_sprites::@1/(byte) gen_sprites::i#2 )
  (byte*) gen_sprites::spr#3 ← phi( gen_sprites::@1/(byte*) gen_sprites::spr#2 )
  (byte*~) gen_sprites::$1 ← (byte*) gen_sprites::spr#3 + (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte*) gen_sprites::spr#1 ← (byte*~) gen_sprites::$1
  (byte) gen_sprites::i#1 ← (byte) gen_sprites::i#3 + rangenext(0,6)
  (bool~) gen_sprites::$2 ← (byte) gen_sprites::i#1 != rangelast(0,6)
  if((bool~) gen_sprites::$2) goto gen_sprites::@1
  to:gen_sprites::@return
gen_sprites::@return: scope:[gen_sprites]  from gen_sprites::@3
  return 
  to:@return
gen_chargen_sprite: scope:[gen_chargen_sprite]  from gen_sprites::@1
  (byte*) gen_chargen_sprite::sprite#12 ← phi( gen_sprites::@1/(byte*) gen_chargen_sprite::sprite#0 )
  (byte) gen_chargen_sprite::ch#1 ← phi( gen_sprites::@1/(byte) gen_chargen_sprite::ch#0 )
  (word~) gen_chargen_sprite::$0 ← ((word)) (byte) gen_chargen_sprite::ch#1
  (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte*~) gen_chargen_sprite::$2 ← (byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1
  (byte*) gen_chargen_sprite::chargen#0 ← (byte*~) gen_chargen_sprite::$2
  asm { sei  }
  *((byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32
  (byte) gen_chargen_sprite::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gen_chargen_sprite::@1
gen_chargen_sprite::@1: scope:[gen_chargen_sprite]  from gen_chargen_sprite gen_chargen_sprite::@9
  (byte*) gen_chargen_sprite::sprite#11 ← phi( gen_chargen_sprite/(byte*) gen_chargen_sprite::sprite#12 gen_chargen_sprite::@9/(byte*) gen_chargen_sprite::sprite#2 )
  (byte) gen_chargen_sprite::y#2 ← phi( gen_chargen_sprite/(byte) gen_chargen_sprite::y#0 gen_chargen_sprite::@9/(byte) gen_chargen_sprite::y#1 )
  (byte*) gen_chargen_sprite::chargen#1 ← phi( gen_chargen_sprite/(byte*) gen_chargen_sprite::chargen#0 gen_chargen_sprite::@9/(byte*) gen_chargen_sprite::chargen#2 )
  (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#1 + (byte) gen_chargen_sprite::y#2)
  (byte) gen_chargen_sprite::s_gen#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) gen_chargen_sprite::s_gen_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) gen_chargen_sprite::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gen_chargen_sprite::@2
gen_chargen_sprite::@2: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@1 gen_chargen_sprite::@8
  (byte*) gen_chargen_sprite::chargen#8 ← phi( gen_chargen_sprite::@1/(byte*) gen_chargen_sprite::chargen#1 gen_chargen_sprite::@8/(byte*) gen_chargen_sprite::chargen#3 )
  (byte) gen_chargen_sprite::y#9 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::y#2 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::y#4 )
  (byte) gen_chargen_sprite::x#7 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::x#0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::x#1 )
  (byte*) gen_chargen_sprite::sprite#9 ← phi( gen_chargen_sprite::@1/(byte*) gen_chargen_sprite::sprite#11 gen_chargen_sprite::@8/(byte*) gen_chargen_sprite::sprite#6 )
  (byte) gen_chargen_sprite::s_gen_cnt#6 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::s_gen_cnt#0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::s_gen_cnt#8 )
  (byte) gen_chargen_sprite::s_gen#7 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::s_gen#0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::s_gen#9 )
  (byte) gen_chargen_sprite::bits#2 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::bits#0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::bits#1 )
  (byte) gen_chargen_sprite::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte/word/signed word/dword/signed dword) $80
  (bool~) gen_chargen_sprite::$4 ← (byte~) gen_chargen_sprite::$3 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gen_chargen_sprite::$5 ← ! (bool~) gen_chargen_sprite::$4
  if((bool~) gen_chargen_sprite::$5) goto gen_chargen_sprite::@3
  to:gen_chargen_sprite::@6
gen_chargen_sprite::@3: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@2 gen_chargen_sprite::@6
  (byte*) gen_chargen_sprite::chargen#7 ← phi( gen_chargen_sprite::@2/(byte*) gen_chargen_sprite::chargen#8 gen_chargen_sprite::@6/(byte*) gen_chargen_sprite::chargen#9 )
  (byte) gen_chargen_sprite::y#8 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::y#9 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::y#10 )
  (byte) gen_chargen_sprite::x#6 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::x#7 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::x#8 )
  (byte) gen_chargen_sprite::bits#7 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::bits#2 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::bits#8 )
  (byte*) gen_chargen_sprite::sprite#7 ← phi( gen_chargen_sprite::@2/(byte*) gen_chargen_sprite::sprite#9 gen_chargen_sprite::@6/(byte*) gen_chargen_sprite::sprite#10 )
  (byte) gen_chargen_sprite::s_gen_cnt#4 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::s_gen_cnt#6 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::s_gen_cnt#7 )
  (byte) gen_chargen_sprite::c#3 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::c#0 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::c#1 )
  (byte) gen_chargen_sprite::s_gen#5 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::s_gen#7 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::s_gen#8 )
  (byte) gen_chargen_sprite::b#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gen_chargen_sprite::@4
gen_chargen_sprite::@6: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@2
  (byte*) gen_chargen_sprite::chargen#9 ← phi( gen_chargen_sprite::@2/(byte*) gen_chargen_sprite::chargen#8 )
  (byte) gen_chargen_sprite::y#10 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::y#9 )
  (byte) gen_chargen_sprite::x#8 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::x#7 )
  (byte) gen_chargen_sprite::bits#8 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::bits#2 )
  (byte*) gen_chargen_sprite::sprite#10 ← phi( gen_chargen_sprite::@2/(byte*) gen_chargen_sprite::sprite#9 )
  (byte) gen_chargen_sprite::s_gen_cnt#7 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::s_gen_cnt#6 )
  (byte) gen_chargen_sprite::s_gen#8 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::s_gen#7 )
  (byte) gen_chargen_sprite::c#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:gen_chargen_sprite::@3
gen_chargen_sprite::@4: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@3 gen_chargen_sprite::@5
  (byte*) gen_chargen_sprite::chargen#5 ← phi( gen_chargen_sprite::@3/(byte*) gen_chargen_sprite::chargen#7 gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::chargen#4 )
  (byte) gen_chargen_sprite::y#6 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::y#8 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::y#5 )
  (byte) gen_chargen_sprite::x#4 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::x#6 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::x#3 )
  (byte) gen_chargen_sprite::bits#5 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::bits#7 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::bits#4 )
  (byte*) gen_chargen_sprite::sprite#5 ← phi( gen_chargen_sprite::@3/(byte*) gen_chargen_sprite::sprite#7 gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::sprite#8 )
  (byte) gen_chargen_sprite::b#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::b#0 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::b#1 )
  (byte) gen_chargen_sprite::s_gen_cnt#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  (byte) gen_chargen_sprite::c#2 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::c#3 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::c#4 )
  (byte) gen_chargen_sprite::s_gen#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen#5 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen#6 )
  (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) gen_chargen_sprite::$7 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#2
  (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$7
  (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3
  (bool~) gen_chargen_sprite::$8 ← (byte) gen_chargen_sprite::s_gen_cnt#1 == (byte/signed byte/word/signed word/dword/signed dword) 8
  (bool~) gen_chargen_sprite::$9 ← ! (bool~) gen_chargen_sprite::$8
  if((bool~) gen_chargen_sprite::$9) goto gen_chargen_sprite::@5
  to:gen_chargen_sprite::@7
gen_chargen_sprite::@5: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4 gen_chargen_sprite::@7
  (byte*) gen_chargen_sprite::chargen#4 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::chargen#5 gen_chargen_sprite::@7/(byte*) gen_chargen_sprite::chargen#6 )
  (byte) gen_chargen_sprite::y#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::y#6 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::y#7 )
  (byte*) gen_chargen_sprite::sprite#8 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::sprite#5 gen_chargen_sprite::@7/(byte*) gen_chargen_sprite::sprite#1 )
  (byte) gen_chargen_sprite::x#3 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::x#4 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::x#5 )
  (byte) gen_chargen_sprite::bits#4 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::bits#5 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::bits#6 )
  (byte) gen_chargen_sprite::s_gen_cnt#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen_cnt#1 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::s_gen_cnt#2 )
  (byte) gen_chargen_sprite::c#4 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::c#2 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::c#5 )
  (byte) gen_chargen_sprite::s_gen#6 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen#1 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::s_gen#2 )
  (byte) gen_chargen_sprite::b#2 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::b#3 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::b#4 )
  (byte) gen_chargen_sprite::b#1 ← (byte) gen_chargen_sprite::b#2 + rangenext(0,2)
  (bool~) gen_chargen_sprite::$10 ← (byte) gen_chargen_sprite::b#1 != rangelast(0,2)
  if((bool~) gen_chargen_sprite::$10) goto gen_chargen_sprite::@4
  to:gen_chargen_sprite::@8
gen_chargen_sprite::@7: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4
  (byte*) gen_chargen_sprite::chargen#6 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::chargen#5 )
  (byte) gen_chargen_sprite::y#7 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::y#6 )
  (byte) gen_chargen_sprite::x#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::x#4 )
  (byte) gen_chargen_sprite::bits#6 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::bits#5 )
  (byte) gen_chargen_sprite::c#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::c#2 )
  (byte) gen_chargen_sprite::b#4 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::b#3 )
  (byte*) gen_chargen_sprite::sprite#3 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::sprite#5 )
  (byte) gen_chargen_sprite::s_gen#4 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen#1 )
  *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) gen_chargen_sprite::s_gen#4
  *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) gen_chargen_sprite::s_gen#4
  *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) gen_chargen_sprite::s_gen#4
  (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3
  (byte) gen_chargen_sprite::s_gen#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) gen_chargen_sprite::s_gen_cnt#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gen_chargen_sprite::@5
gen_chargen_sprite::@8: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@5
  (byte) gen_chargen_sprite::s_gen_cnt#8 ← phi( gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  (byte) gen_chargen_sprite::s_gen#9 ← phi( gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen#6 )
  (byte*) gen_chargen_sprite::chargen#3 ← phi( gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::chargen#4 )
  (byte) gen_chargen_sprite::y#4 ← phi( gen_chargen_sprite::@5/(byte) gen_chargen_sprite::y#5 )
  (byte*) gen_chargen_sprite::sprite#6 ← phi( gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::sprite#8 )
  (byte) gen_chargen_sprite::x#2 ← phi( gen_chargen_sprite::@5/(byte) gen_chargen_sprite::x#3 )
  (byte) gen_chargen_sprite::bits#3 ← phi( gen_chargen_sprite::@5/(byte) gen_chargen_sprite::bits#4 )
  (byte~) gen_chargen_sprite::$11 ← (byte) gen_chargen_sprite::bits#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) gen_chargen_sprite::bits#1 ← (byte~) gen_chargen_sprite::$11
  (byte) gen_chargen_sprite::x#1 ← (byte) gen_chargen_sprite::x#2 + rangenext(0,7)
  (bool~) gen_chargen_sprite::$12 ← (byte) gen_chargen_sprite::x#1 != rangelast(0,7)
  if((bool~) gen_chargen_sprite::$12) goto gen_chargen_sprite::@2
  to:gen_chargen_sprite::@9
gen_chargen_sprite::@9: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@8
  (byte*) gen_chargen_sprite::chargen#2 ← phi( gen_chargen_sprite::@8/(byte*) gen_chargen_sprite::chargen#3 )
  (byte) gen_chargen_sprite::y#3 ← phi( gen_chargen_sprite::@8/(byte) gen_chargen_sprite::y#4 )
  (byte*) gen_chargen_sprite::sprite#4 ← phi( gen_chargen_sprite::@8/(byte*) gen_chargen_sprite::sprite#6 )
  (byte*~) gen_chargen_sprite::$13 ← (byte*) gen_chargen_sprite::sprite#4 + (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte*) gen_chargen_sprite::sprite#2 ← (byte*~) gen_chargen_sprite::$13
  (byte) gen_chargen_sprite::y#1 ← (byte) gen_chargen_sprite::y#3 + rangenext(0,7)
  (bool~) gen_chargen_sprite::$14 ← (byte) gen_chargen_sprite::y#1 != rangelast(0,7)
  if((bool~) gen_chargen_sprite::$14) goto gen_chargen_sprite::@1
  to:gen_chargen_sprite::@10
gen_chargen_sprite::@10: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@9
  *((byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37
  asm { cli  }
  to:gen_chargen_sprite::@return
gen_chargen_sprite::@return: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@10
  return 
  to:@return
gen_sintab: scope:[gen_sintab]  from init::@6 init::@8
  (byte*) progress_cursor#65 ← phi( init::@6/(byte*) progress_cursor#2 init::@8/(byte*) progress_cursor#4 )
  (byte) progress_idx#65 ← phi( init::@6/(byte) progress_idx#2 init::@8/(byte) progress_idx#4 )
  (byte*) gen_sintab::sintab#24 ← phi( init::@6/(byte*) gen_sintab::sintab#0 init::@8/(byte*) gen_sintab::sintab#1 )
  (byte) gen_sintab::length#24 ← phi( init::@6/(byte) gen_sintab::length#0 init::@8/(byte) gen_sintab::length#1 )
  (byte) gen_sintab::min#4 ← phi( init::@6/(byte) gen_sintab::min#0 init::@8/(byte) gen_sintab::min#1 )
  (byte) gen_sintab::max#2 ← phi( init::@6/(byte) gen_sintab::max#0 init::@8/(byte) gen_sintab::max#1 )
  (byte[]) gen_sintab::f_i#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) gen_sintab::f_min#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) gen_sintab::f_amp#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte*) gen_sintab::f_2pi#0 ← ((byte*)) (word/dword/signed dword) $e2e5
  (word~) gen_sintab::$0 ← ((word)) (byte) gen_sintab::max#2
  (word) setFAC::w#0 ← (word~) gen_sintab::$0
  call setFAC 
  to:gen_sintab::@3
gen_sintab::@3: scope:[gen_sintab]  from gen_sintab
  (byte*) progress_cursor#64 ← phi( gen_sintab/(byte*) progress_cursor#65 )
  (byte) progress_idx#64 ← phi( gen_sintab/(byte) progress_idx#65 )
  (byte*) gen_sintab::sintab#23 ← phi( gen_sintab/(byte*) gen_sintab::sintab#24 )
  (byte) gen_sintab::length#23 ← phi( gen_sintab/(byte) gen_sintab::length#24 )
  (byte*) gen_sintab::f_2pi#22 ← phi( gen_sintab/(byte*) gen_sintab::f_2pi#0 )
  (byte) gen_sintab::min#3 ← phi( gen_sintab/(byte) gen_sintab::min#4 )
  call setARGtoFAC 
  to:gen_sintab::@4
gen_sintab::@4: scope:[gen_sintab]  from gen_sintab::@3
  (byte*) progress_cursor#63 ← phi( gen_sintab::@3/(byte*) progress_cursor#64 )
  (byte) progress_idx#63 ← phi( gen_sintab::@3/(byte) progress_idx#64 )
  (byte*) gen_sintab::sintab#22 ← phi( gen_sintab::@3/(byte*) gen_sintab::sintab#23 )
  (byte) gen_sintab::length#22 ← phi( gen_sintab::@3/(byte) gen_sintab::length#23 )
  (byte*) gen_sintab::f_2pi#21 ← phi( gen_sintab::@3/(byte*) gen_sintab::f_2pi#22 )
  (byte) gen_sintab::min#2 ← phi( gen_sintab::@3/(byte) gen_sintab::min#3 )
  asm { lda#0 ldx#0 ldy#0  }
  (word~) gen_sintab::$3 ← ((word)) (byte) gen_sintab::min#2
  (word) setFAC::w#1 ← (word~) gen_sintab::$3
  call setFAC 
  to:gen_sintab::@5
gen_sintab::@5: scope:[gen_sintab]  from gen_sintab::@4
  (byte*) progress_cursor#62 ← phi( gen_sintab::@4/(byte*) progress_cursor#63 )
  (byte) progress_idx#62 ← phi( gen_sintab::@4/(byte) progress_idx#63 )
  (byte*) gen_sintab::sintab#21 ← phi( gen_sintab::@4/(byte*) gen_sintab::sintab#22 )
  (byte) gen_sintab::length#21 ← phi( gen_sintab::@4/(byte) gen_sintab::length#22 )
  (byte*) gen_sintab::f_2pi#19 ← phi( gen_sintab::@4/(byte*) gen_sintab::f_2pi#21 )
  (byte*) setMEMtoFAC::mem#0 ← (byte[]) gen_sintab::f_min#0
  call setMEMtoFAC 
  to:gen_sintab::@6
gen_sintab::@6: scope:[gen_sintab]  from gen_sintab::@5
  (byte*) progress_cursor#61 ← phi( gen_sintab::@5/(byte*) progress_cursor#62 )
  (byte) progress_idx#61 ← phi( gen_sintab::@5/(byte) progress_idx#62 )
  (byte*) gen_sintab::sintab#20 ← phi( gen_sintab::@5/(byte*) gen_sintab::sintab#21 )
  (byte) gen_sintab::length#20 ← phi( gen_sintab::@5/(byte) gen_sintab::length#21 )
  (byte*) gen_sintab::f_2pi#17 ← phi( gen_sintab::@5/(byte*) gen_sintab::f_2pi#19 )
  call subFACfromARG 
  to:gen_sintab::@7
gen_sintab::@7: scope:[gen_sintab]  from gen_sintab::@6
  (byte*) progress_cursor#60 ← phi( gen_sintab::@6/(byte*) progress_cursor#61 )
  (byte) progress_idx#60 ← phi( gen_sintab::@6/(byte) progress_idx#61 )
  (byte*) gen_sintab::sintab#19 ← phi( gen_sintab::@6/(byte*) gen_sintab::sintab#20 )
  (byte) gen_sintab::length#19 ← phi( gen_sintab::@6/(byte) gen_sintab::length#20 )
  (byte*) gen_sintab::f_2pi#15 ← phi( gen_sintab::@6/(byte*) gen_sintab::f_2pi#17 )
  (byte*) setMEMtoFAC::mem#1 ← (byte[]) gen_sintab::f_amp#0
  call setMEMtoFAC 
  to:gen_sintab::@8
gen_sintab::@8: scope:[gen_sintab]  from gen_sintab::@7
  (byte*) progress_cursor#59 ← phi( gen_sintab::@7/(byte*) progress_cursor#60 )
  (byte) progress_idx#59 ← phi( gen_sintab::@7/(byte) progress_idx#60 )
  (byte*) gen_sintab::sintab#18 ← phi( gen_sintab::@7/(byte*) gen_sintab::sintab#19 )
  (byte) gen_sintab::length#18 ← phi( gen_sintab::@7/(byte) gen_sintab::length#19 )
  (byte*) gen_sintab::f_2pi#13 ← phi( gen_sintab::@7/(byte*) gen_sintab::f_2pi#15 )
  (word) setFAC::w#2 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  call setFAC 
  to:gen_sintab::@9
gen_sintab::@9: scope:[gen_sintab]  from gen_sintab::@8
  (byte*) progress_cursor#58 ← phi( gen_sintab::@8/(byte*) progress_cursor#59 )
  (byte) progress_idx#58 ← phi( gen_sintab::@8/(byte) progress_idx#59 )
  (byte*) gen_sintab::sintab#17 ← phi( gen_sintab::@8/(byte*) gen_sintab::sintab#18 )
  (byte) gen_sintab::length#17 ← phi( gen_sintab::@8/(byte) gen_sintab::length#18 )
  (byte*) gen_sintab::f_2pi#11 ← phi( gen_sintab::@8/(byte*) gen_sintab::f_2pi#13 )
  (byte*) divMEMbyFAC::mem#0 ← (byte[]) gen_sintab::f_amp#0
  call divMEMbyFAC 
  to:gen_sintab::@10
gen_sintab::@10: scope:[gen_sintab]  from gen_sintab::@9
  (byte*) progress_cursor#57 ← phi( gen_sintab::@9/(byte*) progress_cursor#58 )
  (byte) progress_idx#57 ← phi( gen_sintab::@9/(byte) progress_idx#58 )
  (byte*) gen_sintab::sintab#16 ← phi( gen_sintab::@9/(byte*) gen_sintab::sintab#17 )
  (byte) gen_sintab::length#16 ← phi( gen_sintab::@9/(byte) gen_sintab::length#17 )
  (byte*) gen_sintab::f_2pi#9 ← phi( gen_sintab::@9/(byte*) gen_sintab::f_2pi#11 )
  (byte*) setMEMtoFAC::mem#2 ← (byte[]) gen_sintab::f_amp#0
  call setMEMtoFAC 
  to:gen_sintab::@11
gen_sintab::@11: scope:[gen_sintab]  from gen_sintab::@10
  (byte*) progress_cursor#56 ← phi( gen_sintab::@10/(byte*) progress_cursor#57 )
  (byte) progress_idx#56 ← phi( gen_sintab::@10/(byte) progress_idx#57 )
  (byte*) gen_sintab::sintab#15 ← phi( gen_sintab::@10/(byte*) gen_sintab::sintab#16 )
  (byte) gen_sintab::length#14 ← phi( gen_sintab::@10/(byte) gen_sintab::length#16 )
  (byte*) gen_sintab::f_2pi#7 ← phi( gen_sintab::@10/(byte*) gen_sintab::f_2pi#9 )
  (byte*) addMEMtoFAC::mem#0 ← (byte[]) gen_sintab::f_min#0
  call addMEMtoFAC 
  to:gen_sintab::@12
gen_sintab::@12: scope:[gen_sintab]  from gen_sintab::@11
  (byte*) progress_cursor#55 ← phi( gen_sintab::@11/(byte*) progress_cursor#56 )
  (byte) progress_idx#55 ← phi( gen_sintab::@11/(byte) progress_idx#56 )
  (byte*) gen_sintab::sintab#14 ← phi( gen_sintab::@11/(byte*) gen_sintab::sintab#15 )
  (byte) gen_sintab::length#12 ← phi( gen_sintab::@11/(byte) gen_sintab::length#14 )
  (byte*) gen_sintab::f_2pi#5 ← phi( gen_sintab::@11/(byte*) gen_sintab::f_2pi#7 )
  (byte*) setMEMtoFAC::mem#3 ← (byte[]) gen_sintab::f_min#0
  call setMEMtoFAC 
  to:gen_sintab::@13
gen_sintab::@13: scope:[gen_sintab]  from gen_sintab::@12
  (byte*) progress_cursor#54 ← phi( gen_sintab::@12/(byte*) progress_cursor#55 )
  (byte) progress_idx#54 ← phi( gen_sintab::@12/(byte) progress_idx#55 )
  (byte*) gen_sintab::sintab#12 ← phi( gen_sintab::@12/(byte*) gen_sintab::sintab#14 )
  (byte) gen_sintab::length#10 ← phi( gen_sintab::@12/(byte) gen_sintab::length#12 )
  (byte*) gen_sintab::f_2pi#3 ← phi( gen_sintab::@12/(byte*) gen_sintab::f_2pi#5 )
  (byte) gen_sintab::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gen_sintab::@1
gen_sintab::@1: scope:[gen_sintab]  from gen_sintab::@13 gen_sintab::@23
  (byte*) progress_cursor#53 ← phi( gen_sintab::@13/(byte*) progress_cursor#54 gen_sintab::@23/(byte*) progress_cursor#12 )
  (byte) progress_idx#53 ← phi( gen_sintab::@13/(byte) progress_idx#54 gen_sintab::@23/(byte) progress_idx#13 )
  (byte*) gen_sintab::sintab#11 ← phi( gen_sintab::@13/(byte*) gen_sintab::sintab#12 gen_sintab::@23/(byte*) gen_sintab::sintab#13 )
  (byte) gen_sintab::length#8 ← phi( gen_sintab::@13/(byte) gen_sintab::length#10 gen_sintab::@23/(byte) gen_sintab::length#3 )
  (byte*) gen_sintab::f_2pi#2 ← phi( gen_sintab::@13/(byte*) gen_sintab::f_2pi#3 gen_sintab::@23/(byte*) gen_sintab::f_2pi#4 )
  (byte) gen_sintab::i#2 ← phi( gen_sintab::@13/(byte) gen_sintab::i#0 gen_sintab::@23/(byte) gen_sintab::i#1 )
  (word~) gen_sintab::$13 ← ((word)) (byte) gen_sintab::i#2
  (word) setFAC::w#3 ← (word~) gen_sintab::$13
  call setFAC 
  to:gen_sintab::@14
gen_sintab::@14: scope:[gen_sintab]  from gen_sintab::@1
  (byte*) progress_cursor#52 ← phi( gen_sintab::@1/(byte*) progress_cursor#53 )
  (byte) progress_idx#52 ← phi( gen_sintab::@1/(byte) progress_idx#53 )
  (byte) gen_sintab::i#12 ← phi( gen_sintab::@1/(byte) gen_sintab::i#2 )
  (byte*) gen_sintab::sintab#10 ← phi( gen_sintab::@1/(byte*) gen_sintab::sintab#11 )
  (byte) gen_sintab::length#6 ← phi( gen_sintab::@1/(byte) gen_sintab::length#8 )
  (byte*) gen_sintab::f_2pi#1 ← phi( gen_sintab::@1/(byte*) gen_sintab::f_2pi#2 )
  (byte*) mulFACbyMEM::mem#0 ← (byte*) gen_sintab::f_2pi#1
  call mulFACbyMEM 
  to:gen_sintab::@15
gen_sintab::@15: scope:[gen_sintab]  from gen_sintab::@14
  (byte*) gen_sintab::f_2pi#20 ← phi( gen_sintab::@14/(byte*) gen_sintab::f_2pi#1 )
  (byte*) progress_cursor#51 ← phi( gen_sintab::@14/(byte*) progress_cursor#52 )
  (byte) progress_idx#51 ← phi( gen_sintab::@14/(byte) progress_idx#52 )
  (byte) gen_sintab::i#11 ← phi( gen_sintab::@14/(byte) gen_sintab::i#12 )
  (byte*) gen_sintab::sintab#9 ← phi( gen_sintab::@14/(byte*) gen_sintab::sintab#10 )
  (byte) gen_sintab::length#4 ← phi( gen_sintab::@14/(byte) gen_sintab::length#6 )
  (byte*) setMEMtoFAC::mem#4 ← (byte[]) gen_sintab::f_i#0
  call setMEMtoFAC 
  to:gen_sintab::@16
gen_sintab::@16: scope:[gen_sintab]  from gen_sintab::@15
  (byte*) gen_sintab::f_2pi#18 ← phi( gen_sintab::@15/(byte*) gen_sintab::f_2pi#20 )
  (byte*) progress_cursor#50 ← phi( gen_sintab::@15/(byte*) progress_cursor#51 )
  (byte) progress_idx#50 ← phi( gen_sintab::@15/(byte) progress_idx#51 )
  (byte) gen_sintab::i#10 ← phi( gen_sintab::@15/(byte) gen_sintab::i#11 )
  (byte*) gen_sintab::sintab#8 ← phi( gen_sintab::@15/(byte*) gen_sintab::sintab#9 )
  (byte) gen_sintab::length#2 ← phi( gen_sintab::@15/(byte) gen_sintab::length#4 )
  (word~) gen_sintab::$17 ← ((word)) (byte) gen_sintab::length#2
  (word) setFAC::w#4 ← (word~) gen_sintab::$17
  call setFAC 
  to:gen_sintab::@17
gen_sintab::@17: scope:[gen_sintab]  from gen_sintab::@16
  (byte*) gen_sintab::f_2pi#16 ← phi( gen_sintab::@16/(byte*) gen_sintab::f_2pi#18 )
  (byte) gen_sintab::length#15 ← phi( gen_sintab::@16/(byte) gen_sintab::length#2 )
  (byte*) progress_cursor#49 ← phi( gen_sintab::@16/(byte*) progress_cursor#50 )
  (byte) progress_idx#49 ← phi( gen_sintab::@16/(byte) progress_idx#50 )
  (byte) gen_sintab::i#9 ← phi( gen_sintab::@16/(byte) gen_sintab::i#10 )
  (byte*) gen_sintab::sintab#7 ← phi( gen_sintab::@16/(byte*) gen_sintab::sintab#8 )
  (byte*) divMEMbyFAC::mem#1 ← (byte[]) gen_sintab::f_i#0
  call divMEMbyFAC 
  to:gen_sintab::@18
gen_sintab::@18: scope:[gen_sintab]  from gen_sintab::@17
  (byte*) gen_sintab::f_2pi#14 ← phi( gen_sintab::@17/(byte*) gen_sintab::f_2pi#16 )
  (byte) gen_sintab::length#13 ← phi( gen_sintab::@17/(byte) gen_sintab::length#15 )
  (byte*) progress_cursor#47 ← phi( gen_sintab::@17/(byte*) progress_cursor#49 )
  (byte) progress_idx#47 ← phi( gen_sintab::@17/(byte) progress_idx#49 )
  (byte) gen_sintab::i#8 ← phi( gen_sintab::@17/(byte) gen_sintab::i#9 )
  (byte*) gen_sintab::sintab#6 ← phi( gen_sintab::@17/(byte*) gen_sintab::sintab#7 )
  call sinFAC 
  to:gen_sintab::@19
gen_sintab::@19: scope:[gen_sintab]  from gen_sintab::@18
  (byte*) gen_sintab::f_2pi#12 ← phi( gen_sintab::@18/(byte*) gen_sintab::f_2pi#14 )
  (byte) gen_sintab::length#11 ← phi( gen_sintab::@18/(byte) gen_sintab::length#13 )
  (byte*) progress_cursor#45 ← phi( gen_sintab::@18/(byte*) progress_cursor#47 )
  (byte) progress_idx#45 ← phi( gen_sintab::@18/(byte) progress_idx#47 )
  (byte) gen_sintab::i#7 ← phi( gen_sintab::@18/(byte) gen_sintab::i#8 )
  (byte*) gen_sintab::sintab#5 ← phi( gen_sintab::@18/(byte*) gen_sintab::sintab#6 )
  (byte*) mulFACbyMEM::mem#1 ← (byte[]) gen_sintab::f_amp#0
  call mulFACbyMEM 
  to:gen_sintab::@20
gen_sintab::@20: scope:[gen_sintab]  from gen_sintab::@19
  (byte*) gen_sintab::f_2pi#10 ← phi( gen_sintab::@19/(byte*) gen_sintab::f_2pi#12 )
  (byte) gen_sintab::length#9 ← phi( gen_sintab::@19/(byte) gen_sintab::length#11 )
  (byte*) progress_cursor#42 ← phi( gen_sintab::@19/(byte*) progress_cursor#45 )
  (byte) progress_idx#42 ← phi( gen_sintab::@19/(byte) progress_idx#45 )
  (byte) gen_sintab::i#6 ← phi( gen_sintab::@19/(byte) gen_sintab::i#7 )
  (byte*) gen_sintab::sintab#4 ← phi( gen_sintab::@19/(byte*) gen_sintab::sintab#5 )
  (byte*) addMEMtoFAC::mem#1 ← (byte[]) gen_sintab::f_min#0
  call addMEMtoFAC 
  to:gen_sintab::@21
gen_sintab::@21: scope:[gen_sintab]  from gen_sintab::@20
  (byte*) gen_sintab::f_2pi#8 ← phi( gen_sintab::@20/(byte*) gen_sintab::f_2pi#10 )
  (byte) gen_sintab::length#7 ← phi( gen_sintab::@20/(byte) gen_sintab::length#9 )
  (byte*) progress_cursor#38 ← phi( gen_sintab::@20/(byte*) progress_cursor#42 )
  (byte) progress_idx#38 ← phi( gen_sintab::@20/(byte) progress_idx#42 )
  (byte) gen_sintab::i#5 ← phi( gen_sintab::@20/(byte) gen_sintab::i#6 )
  (byte*) gen_sintab::sintab#3 ← phi( gen_sintab::@20/(byte*) gen_sintab::sintab#4 )
  call getFAC 
  (word) getFAC::return#2 ← (word) getFAC::return#1
  to:gen_sintab::@22
gen_sintab::@22: scope:[gen_sintab]  from gen_sintab::@21
  (byte*) gen_sintab::f_2pi#6 ← phi( gen_sintab::@21/(byte*) gen_sintab::f_2pi#8 )
  (byte) gen_sintab::length#5 ← phi( gen_sintab::@21/(byte) gen_sintab::length#7 )
  (byte*) progress_cursor#34 ← phi( gen_sintab::@21/(byte*) progress_cursor#38 )
  (byte) progress_idx#34 ← phi( gen_sintab::@21/(byte) progress_idx#38 )
  (byte) gen_sintab::i#3 ← phi( gen_sintab::@21/(byte) gen_sintab::i#5 )
  (byte*) gen_sintab::sintab#2 ← phi( gen_sintab::@21/(byte*) gen_sintab::sintab#3 )
  (word) getFAC::return#4 ← phi( gen_sintab::@21/(word) getFAC::return#2 )
  (word~) gen_sintab::$23 ← (word) getFAC::return#4
  (byte~) gen_sintab::$24 ← ((byte)) (word~) gen_sintab::$23
  *((byte*) gen_sintab::sintab#2 + (byte) gen_sintab::i#3) ← (byte~) gen_sintab::$24
  call progress_inc 
  to:gen_sintab::@23
gen_sintab::@23: scope:[gen_sintab]  from gen_sintab::@22
  (byte*) gen_sintab::sintab#13 ← phi( gen_sintab::@22/(byte*) gen_sintab::sintab#2 )
  (byte*) gen_sintab::f_2pi#4 ← phi( gen_sintab::@22/(byte*) gen_sintab::f_2pi#6 )
  (byte) gen_sintab::length#3 ← phi( gen_sintab::@22/(byte) gen_sintab::length#5 )
  (byte) gen_sintab::i#4 ← phi( gen_sintab::@22/(byte) gen_sintab::i#3 )
  (byte*) progress_cursor#26 ← phi( gen_sintab::@22/(byte*) progress_cursor#11 )
  (byte) progress_idx#27 ← phi( gen_sintab::@22/(byte) progress_idx#12 )
  (byte) progress_idx#13 ← (byte) progress_idx#27
  (byte*) progress_cursor#12 ← (byte*) progress_cursor#26
  (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#4
  (bool~) gen_sintab::$26 ← (byte) gen_sintab::i#1 < (byte) gen_sintab::length#3
  if((bool~) gen_sintab::$26) goto gen_sintab::@1
  to:gen_sintab::@return
gen_sintab::@return: scope:[gen_sintab]  from gen_sintab::@23
  (byte*) progress_cursor#27 ← phi( gen_sintab::@23/(byte*) progress_cursor#12 )
  (byte) progress_idx#28 ← phi( gen_sintab::@23/(byte) progress_idx#13 )
  (byte) progress_idx#14 ← (byte) progress_idx#28
  (byte*) progress_cursor#13 ← (byte*) progress_cursor#27
  return 
  to:@return
@60: scope:[]  from @55
  (byte) sin_idx_y#17 ← phi( @55/(byte) sin_idx_y#2 )
  (byte) sin_idx_x#16 ← phi( @55/(byte) sin_idx_x#2 )
  (byte) progress_idx#35 ← phi( @55/(byte) progress_idx#39 )
  (byte*) progress_cursor#35 ← phi( @55/(byte*) progress_cursor#39 )
  call main 
  to:@61
@61: scope:[]  from @60
  (byte) sin_idx_y#12 ← phi( @60/(byte) sin_idx_y#1 )
  (byte) sin_idx_x#12 ← phi( @60/(byte) sin_idx_x#1 )
  (byte) progress_idx#29 ← phi( @60/(byte) progress_idx#1 )
  (byte*) progress_cursor#28 ← phi( @60/(byte*) progress_cursor#1 )
  (byte*) progress_cursor#14 ← (byte*) progress_cursor#28
  (byte) progress_idx#15 ← (byte) progress_idx#29
  (byte) sin_idx_x#6 ← (byte) sin_idx_x#12
  (byte) sin_idx_y#6 ← (byte) sin_idx_y#12
  to:@end
@end: scope:[]  from @61

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @31
(label) @4
(label) @43
(label) @50
(label) @53
(label) @55
(label) @60
(label) @61
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL1
(byte*) BGCOL1#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte*) BGCOL3
(byte*) BGCOL3#0
(byte*) BGCOL4
(byte*) BGCOL4#0
(byte) BLACK
(byte) BLACK#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte) BROWN
(byte) BROWN#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_A_DDR#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte*) CIA1_PORT_B_DDR
(byte*) CIA1_PORT_B_DDR#0
(byte*) CIA2_INTERRUPT
(byte*) CIA2_INTERRUPT#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B#0
(byte*) CIA2_PORT_B_DDR
(byte*) CIA2_PORT_B_DDR#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte*) COLS
(byte*) COLS#0
(byte) CYAN
(byte) CYAN#0
(byte*) D011
(byte*) D011#0
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) GREEN
(byte) GREEN#0
(byte) GREY
(byte) GREY#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_BG#0
(byte) IRQ_COLLISION_SPRITE
(byte) IRQ_COLLISION_SPRITE#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_LIGHTPEN
(byte) IRQ_LIGHTPEN#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_X#0
(byte*) LIGHTPEN_Y
(byte*) LIGHTPEN_Y#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) LIGHT_GREEN
(byte) LIGHT_GREEN#0
(byte) LIGHT_GREY
(byte) LIGHT_GREY#0
(byte) ORANGE
(byte) ORANGE#0
(byte) PINK
(byte) PINK#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte) PROCPORT_BASIC_KERNEL_IO
(byte) PROCPORT_BASIC_KERNEL_IO#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_KERNEL_IO#0
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_ALL#0
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_CHARROM#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte) PURPLE
(byte) PURPLE#0
(byte*) RASTER
(byte*) RASTER#0
(byte) RED
(byte) RED#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte*) SPRITES_MC
(byte*) SPRITES_MC#0
(byte*) SPRITES_MC1
(byte*) SPRITES_MC1#0
(byte*) SPRITES_MC2
(byte*) SPRITES_MC2#0
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_PRIORITY#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(word) SPRITE_PTRS
(word) SPRITE_PTRS#0
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte) VIC_RST8
(byte) VIC_RST8#0
(byte) WHITE
(byte) WHITE#0
(byte) YELLOW
(byte) YELLOW#0
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(label) addMEMtoFAC::@1
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(byte*) addMEMtoFAC::mem#0
(byte*) addMEMtoFAC::mem#1
(byte*) addMEMtoFAC::mem#2
(void()) anim()
(byte/signed byte/word/signed word/dword/signed dword~) anim::$0
(byte/signed word/word/dword/signed dword~) anim::$1
(byte/signed word/word/dword/signed dword~) anim::$10
(bool~) anim::$11
(bool~) anim::$12
(byte~) anim::$13
(byte/signed word/word/dword/signed dword~) anim::$14
(bool~) anim::$15
(bool~) anim::$16
(bool~) anim::$17
(bool~) anim::$18
(bool~) anim::$19
(byte~) anim::$2
(byte~) anim::$3
(byte~) anim::$4
(byte~) anim::$5
(byte/signed word/word/dword/signed dword~) anim::$6
(bool~) anim::$7
(bool~) anim::$8
(byte~) anim::$9
(label) anim::@1
(label) anim::@10
(label) anim::@2
(label) anim::@3
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@8
(label) anim::@9
(label) anim::@return
(byte) anim::j
(byte) anim::j#0
(byte) anim::j#1
(byte) anim::j#2
(byte) anim::j#3
(byte) anim::j#4
(byte) anim::j#5
(byte) anim::j#6
(byte) anim::j2
(byte) anim::j2#0
(byte) anim::j2#1
(byte) anim::j2#2
(byte) anim::j2#3
(byte) anim::j2#4
(byte) anim::j2#5
(byte) anim::j2#6
(word) anim::x
(word) anim::x#0
(byte) anim::x_msb
(byte) anim::x_msb#0
(byte) anim::x_msb#1
(byte) anim::x_msb#2
(byte) anim::x_msb#3
(byte) anim::x_msb#4
(byte) anim::x_msb#5
(byte) anim::x_msb#6
(byte) anim::x_msb#7
(byte) anim::xidx
(byte) anim::xidx#0
(byte) anim::xidx#1
(byte) anim::xidx#2
(byte) anim::xidx#3
(byte) anim::xidx#4
(byte) anim::xidx#5
(byte) anim::xidx#6
(byte) anim::xidx#7
(byte) anim::yidx
(byte) anim::yidx#0
(byte) anim::yidx#1
(byte) anim::yidx#2
(byte) anim::yidx#3
(byte) anim::yidx#4
(byte) anim::yidx#5
(byte) anim::yidx#6
(byte) anim::yidx#7
(void()) clear_screen()
(byte*~) clear_screen::$0
(bool~) clear_screen::$1
(label) clear_screen::@1
(label) clear_screen::@return
(byte*) clear_screen::sc
(byte*) clear_screen::sc#0
(byte*) clear_screen::sc#1
(byte*) clear_screen::sc#2
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(label) divMEMbyFAC::@1
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(byte*) divMEMbyFAC::mem#0
(byte*) divMEMbyFAC::mem#1
(byte*) divMEMbyFAC::mem#2
(void()) gen_chargen_sprite((byte) gen_chargen_sprite::ch , (byte*) gen_chargen_sprite::sprite)
(word~) gen_chargen_sprite::$0
(word~) gen_chargen_sprite::$1
(bool~) gen_chargen_sprite::$10
(byte~) gen_chargen_sprite::$11
(bool~) gen_chargen_sprite::$12
(byte*~) gen_chargen_sprite::$13
(bool~) gen_chargen_sprite::$14
(byte*~) gen_chargen_sprite::$2
(byte~) gen_chargen_sprite::$3
(bool~) gen_chargen_sprite::$4
(bool~) gen_chargen_sprite::$5
(byte~) gen_chargen_sprite::$6
(byte~) gen_chargen_sprite::$7
(bool~) gen_chargen_sprite::$8
(bool~) gen_chargen_sprite::$9
(label) gen_chargen_sprite::@1
(label) gen_chargen_sprite::@10
(label) gen_chargen_sprite::@2
(label) gen_chargen_sprite::@3
(label) gen_chargen_sprite::@4
(label) gen_chargen_sprite::@5
(label) gen_chargen_sprite::@6
(label) gen_chargen_sprite::@7
(label) gen_chargen_sprite::@8
(label) gen_chargen_sprite::@9
(label) gen_chargen_sprite::@return
(byte) gen_chargen_sprite::b
(byte) gen_chargen_sprite::b#0
(byte) gen_chargen_sprite::b#1
(byte) gen_chargen_sprite::b#2
(byte) gen_chargen_sprite::b#3
(byte) gen_chargen_sprite::b#4
(byte) gen_chargen_sprite::bits
(byte) gen_chargen_sprite::bits#0
(byte) gen_chargen_sprite::bits#1
(byte) gen_chargen_sprite::bits#2
(byte) gen_chargen_sprite::bits#3
(byte) gen_chargen_sprite::bits#4
(byte) gen_chargen_sprite::bits#5
(byte) gen_chargen_sprite::bits#6
(byte) gen_chargen_sprite::bits#7
(byte) gen_chargen_sprite::bits#8
(byte) gen_chargen_sprite::c
(byte) gen_chargen_sprite::c#0
(byte) gen_chargen_sprite::c#1
(byte) gen_chargen_sprite::c#2
(byte) gen_chargen_sprite::c#3
(byte) gen_chargen_sprite::c#4
(byte) gen_chargen_sprite::c#5
(byte) gen_chargen_sprite::ch
(byte) gen_chargen_sprite::ch#0
(byte) gen_chargen_sprite::ch#1
(byte*) gen_chargen_sprite::chargen
(byte*) gen_chargen_sprite::chargen#0
(byte*) gen_chargen_sprite::chargen#1
(byte*) gen_chargen_sprite::chargen#2
(byte*) gen_chargen_sprite::chargen#3
(byte*) gen_chargen_sprite::chargen#4
(byte*) gen_chargen_sprite::chargen#5
(byte*) gen_chargen_sprite::chargen#6
(byte*) gen_chargen_sprite::chargen#7
(byte*) gen_chargen_sprite::chargen#8
(byte*) gen_chargen_sprite::chargen#9
(byte) gen_chargen_sprite::s_gen
(byte) gen_chargen_sprite::s_gen#0
(byte) gen_chargen_sprite::s_gen#1
(byte) gen_chargen_sprite::s_gen#2
(byte) gen_chargen_sprite::s_gen#3
(byte) gen_chargen_sprite::s_gen#4
(byte) gen_chargen_sprite::s_gen#5
(byte) gen_chargen_sprite::s_gen#6
(byte) gen_chargen_sprite::s_gen#7
(byte) gen_chargen_sprite::s_gen#8
(byte) gen_chargen_sprite::s_gen#9
(byte) gen_chargen_sprite::s_gen_cnt
(byte) gen_chargen_sprite::s_gen_cnt#0
(byte) gen_chargen_sprite::s_gen_cnt#1
(byte) gen_chargen_sprite::s_gen_cnt#2
(byte) gen_chargen_sprite::s_gen_cnt#3
(byte) gen_chargen_sprite::s_gen_cnt#4
(byte) gen_chargen_sprite::s_gen_cnt#5
(byte) gen_chargen_sprite::s_gen_cnt#6
(byte) gen_chargen_sprite::s_gen_cnt#7
(byte) gen_chargen_sprite::s_gen_cnt#8
(byte*) gen_chargen_sprite::sprite
(byte*) gen_chargen_sprite::sprite#0
(byte*) gen_chargen_sprite::sprite#1
(byte*) gen_chargen_sprite::sprite#10
(byte*) gen_chargen_sprite::sprite#11
(byte*) gen_chargen_sprite::sprite#12
(byte*) gen_chargen_sprite::sprite#2
(byte*) gen_chargen_sprite::sprite#3
(byte*) gen_chargen_sprite::sprite#4
(byte*) gen_chargen_sprite::sprite#5
(byte*) gen_chargen_sprite::sprite#6
(byte*) gen_chargen_sprite::sprite#7
(byte*) gen_chargen_sprite::sprite#8
(byte*) gen_chargen_sprite::sprite#9
(byte) gen_chargen_sprite::x
(byte) gen_chargen_sprite::x#0
(byte) gen_chargen_sprite::x#1
(byte) gen_chargen_sprite::x#2
(byte) gen_chargen_sprite::x#3
(byte) gen_chargen_sprite::x#4
(byte) gen_chargen_sprite::x#5
(byte) gen_chargen_sprite::x#6
(byte) gen_chargen_sprite::x#7
(byte) gen_chargen_sprite::x#8
(byte) gen_chargen_sprite::y
(byte) gen_chargen_sprite::y#0
(byte) gen_chargen_sprite::y#1
(byte) gen_chargen_sprite::y#10
(byte) gen_chargen_sprite::y#2
(byte) gen_chargen_sprite::y#3
(byte) gen_chargen_sprite::y#4
(byte) gen_chargen_sprite::y#5
(byte) gen_chargen_sprite::y#6
(byte) gen_chargen_sprite::y#7
(byte) gen_chargen_sprite::y#8
(byte) gen_chargen_sprite::y#9
(void()) gen_sintab((byte*) gen_sintab::sintab , (byte) gen_sintab::length , (byte) gen_sintab::min , (byte) gen_sintab::max)
(word~) gen_sintab::$0
(word~) gen_sintab::$13
(word~) gen_sintab::$17
(word~) gen_sintab::$23
(byte~) gen_sintab::$24
(bool~) gen_sintab::$26
(word~) gen_sintab::$3
(label) gen_sintab::@1
(label) gen_sintab::@10
(label) gen_sintab::@11
(label) gen_sintab::@12
(label) gen_sintab::@13
(label) gen_sintab::@14
(label) gen_sintab::@15
(label) gen_sintab::@16
(label) gen_sintab::@17
(label) gen_sintab::@18
(label) gen_sintab::@19
(label) gen_sintab::@20
(label) gen_sintab::@21
(label) gen_sintab::@22
(label) gen_sintab::@23
(label) gen_sintab::@3
(label) gen_sintab::@4
(label) gen_sintab::@5
(label) gen_sintab::@6
(label) gen_sintab::@7
(label) gen_sintab::@8
(label) gen_sintab::@9
(label) gen_sintab::@return
(byte*) gen_sintab::f_2pi
(byte*) gen_sintab::f_2pi#0
(byte*) gen_sintab::f_2pi#1
(byte*) gen_sintab::f_2pi#10
(byte*) gen_sintab::f_2pi#11
(byte*) gen_sintab::f_2pi#12
(byte*) gen_sintab::f_2pi#13
(byte*) gen_sintab::f_2pi#14
(byte*) gen_sintab::f_2pi#15
(byte*) gen_sintab::f_2pi#16
(byte*) gen_sintab::f_2pi#17
(byte*) gen_sintab::f_2pi#18
(byte*) gen_sintab::f_2pi#19
(byte*) gen_sintab::f_2pi#2
(byte*) gen_sintab::f_2pi#20
(byte*) gen_sintab::f_2pi#21
(byte*) gen_sintab::f_2pi#22
(byte*) gen_sintab::f_2pi#3
(byte*) gen_sintab::f_2pi#4
(byte*) gen_sintab::f_2pi#5
(byte*) gen_sintab::f_2pi#6
(byte*) gen_sintab::f_2pi#7
(byte*) gen_sintab::f_2pi#8
(byte*) gen_sintab::f_2pi#9
(byte[]) gen_sintab::f_amp
(byte[]) gen_sintab::f_amp#0
(byte[]) gen_sintab::f_i
(byte[]) gen_sintab::f_i#0
(byte[]) gen_sintab::f_min
(byte[]) gen_sintab::f_min#0
(byte) gen_sintab::i
(byte) gen_sintab::i#0
(byte) gen_sintab::i#1
(byte) gen_sintab::i#10
(byte) gen_sintab::i#11
(byte) gen_sintab::i#12
(byte) gen_sintab::i#2
(byte) gen_sintab::i#3
(byte) gen_sintab::i#4
(byte) gen_sintab::i#5
(byte) gen_sintab::i#6
(byte) gen_sintab::i#7
(byte) gen_sintab::i#8
(byte) gen_sintab::i#9
(byte) gen_sintab::length
(byte) gen_sintab::length#0
(byte) gen_sintab::length#1
(byte) gen_sintab::length#10
(byte) gen_sintab::length#11
(byte) gen_sintab::length#12
(byte) gen_sintab::length#13
(byte) gen_sintab::length#14
(byte) gen_sintab::length#15
(byte) gen_sintab::length#16
(byte) gen_sintab::length#17
(byte) gen_sintab::length#18
(byte) gen_sintab::length#19
(byte) gen_sintab::length#2
(byte) gen_sintab::length#20
(byte) gen_sintab::length#21
(byte) gen_sintab::length#22
(byte) gen_sintab::length#23
(byte) gen_sintab::length#24
(byte) gen_sintab::length#3
(byte) gen_sintab::length#4
(byte) gen_sintab::length#5
(byte) gen_sintab::length#6
(byte) gen_sintab::length#7
(byte) gen_sintab::length#8
(byte) gen_sintab::length#9
(byte) gen_sintab::max
(byte) gen_sintab::max#0
(byte) gen_sintab::max#1
(byte) gen_sintab::max#2
(byte) gen_sintab::min
(byte) gen_sintab::min#0
(byte) gen_sintab::min#1
(byte) gen_sintab::min#2
(byte) gen_sintab::min#3
(byte) gen_sintab::min#4
(byte*) gen_sintab::sintab
(byte*) gen_sintab::sintab#0
(byte*) gen_sintab::sintab#1
(byte*) gen_sintab::sintab#10
(byte*) gen_sintab::sintab#11
(byte*) gen_sintab::sintab#12
(byte*) gen_sintab::sintab#13
(byte*) gen_sintab::sintab#14
(byte*) gen_sintab::sintab#15
(byte*) gen_sintab::sintab#16
(byte*) gen_sintab::sintab#17
(byte*) gen_sintab::sintab#18
(byte*) gen_sintab::sintab#19
(byte*) gen_sintab::sintab#2
(byte*) gen_sintab::sintab#20
(byte*) gen_sintab::sintab#21
(byte*) gen_sintab::sintab#22
(byte*) gen_sintab::sintab#23
(byte*) gen_sintab::sintab#24
(byte*) gen_sintab::sintab#3
(byte*) gen_sintab::sintab#4
(byte*) gen_sintab::sintab#5
(byte*) gen_sintab::sintab#6
(byte*) gen_sintab::sintab#7
(byte*) gen_sintab::sintab#8
(byte*) gen_sintab::sintab#9
(void()) gen_sprites()
(byte*~) gen_sprites::$1
(bool~) gen_sprites::$2
(const string) gen_sprites::$3 = (string) "camelot"
(label) gen_sprites::@1
(label) gen_sprites::@3
(label) gen_sprites::@return
(byte[]) gen_sprites::cml
(byte[]) gen_sprites::cml#0
(byte) gen_sprites::i
(byte) gen_sprites::i#0
(byte) gen_sprites::i#1
(byte) gen_sprites::i#2
(byte) gen_sprites::i#3
(byte*) gen_sprites::spr
(byte*) gen_sprites::spr#0
(byte*) gen_sprites::spr#1
(byte*) gen_sprites::spr#2
(byte*) gen_sprites::spr#3
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::return#0
(word) getFAC::return#1
(word) getFAC::return#2
(word) getFAC::return#3
(word) getFAC::return#4
(word) getFAC::w
(word) getFAC::w#0
(void()) init()
(byte/signed word/word/dword/signed dword~) init::$1
(bool~) init::$2
(byte*~) init::$7
(label) init::@1
(label) init::@10
(label) init::@2
(label) init::@3
(label) init::@4
(label) init::@5
(label) init::@6
(label) init::@7
(label) init::@8
(label) init::@9
(label) init::@return
(byte) init::i
(byte) init::i#0
(byte) init::i#1
(byte) init::i#2
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@6
(label) main::@return
(byte*) memHi
(byte*) memHi#0
(byte*) memLo
(byte*) memLo#0
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(label) mulFACbyMEM::@1
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#0
(byte*) mulFACbyMEM::mem#1
(byte*) mulFACbyMEM::mem#2
(void()) place_sprites()
(byte*~) place_sprites::$0
(byte*~) place_sprites::$1
(byte~) place_sprites::$2
(byte/signed word/word/dword/signed dword~) place_sprites::$3
(byte/signed byte/word/signed word/dword/signed dword~) place_sprites::$4
(byte/word/dword~) place_sprites::$5
(bool~) place_sprites::$6
(label) place_sprites::@1
(label) place_sprites::@return
(byte) place_sprites::col
(byte) place_sprites::col#0
(byte) place_sprites::col#1
(byte) place_sprites::col#2
(byte) place_sprites::j
(byte) place_sprites::j#0
(byte) place_sprites::j#1
(byte) place_sprites::j#2
(byte) place_sprites::j2
(byte) place_sprites::j2#0
(byte) place_sprites::j2#1
(byte) place_sprites::j2#2
(byte) place_sprites::j2#3
(byte) place_sprites::spr_id
(byte) place_sprites::spr_id#0
(byte) place_sprites::spr_id#1
(byte) place_sprites::spr_id#2
(byte) place_sprites::spr_x
(byte) place_sprites::spr_x#0
(byte) place_sprites::spr_x#1
(byte) place_sprites::spr_x#2
(byte*) place_sprites::sprites_ptr
(byte*) place_sprites::sprites_ptr#0
(byte*) place_sprites::sprites_ptr#1
(void()) prepareMEM((byte*) prepareMEM::mem)
(byte~) prepareMEM::$0
(byte~) prepareMEM::$1
(label) prepareMEM::@return
(byte*) prepareMEM::mem
(byte*) prepareMEM::mem#0
(byte*) prepareMEM::mem#1
(byte*) prepareMEM::mem#2
(byte*) prepareMEM::mem#3
(byte*) prepareMEM::mem#4
(byte*) prepareMEM::mem#5
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_screen
(byte*) print_screen#0
(byte*) progress_cursor
(byte*) progress_cursor#0
(byte*) progress_cursor#1
(byte*) progress_cursor#10
(byte*) progress_cursor#11
(byte*) progress_cursor#12
(byte*) progress_cursor#13
(byte*) progress_cursor#14
(byte*) progress_cursor#15
(byte*) progress_cursor#16
(byte*) progress_cursor#17
(byte*) progress_cursor#18
(byte*) progress_cursor#19
(byte*) progress_cursor#2
(byte*) progress_cursor#20
(byte*) progress_cursor#21
(byte*) progress_cursor#22
(byte*) progress_cursor#23
(byte*) progress_cursor#24
(byte*) progress_cursor#25
(byte*) progress_cursor#26
(byte*) progress_cursor#27
(byte*) progress_cursor#28
(byte*) progress_cursor#29
(byte*) progress_cursor#3
(byte*) progress_cursor#30
(byte*) progress_cursor#31
(byte*) progress_cursor#32
(byte*) progress_cursor#33
(byte*) progress_cursor#34
(byte*) progress_cursor#35
(byte*) progress_cursor#36
(byte*) progress_cursor#37
(byte*) progress_cursor#38
(byte*) progress_cursor#39
(byte*) progress_cursor#4
(byte*) progress_cursor#40
(byte*) progress_cursor#41
(byte*) progress_cursor#42
(byte*) progress_cursor#43
(byte*) progress_cursor#44
(byte*) progress_cursor#45
(byte*) progress_cursor#46
(byte*) progress_cursor#47
(byte*) progress_cursor#48
(byte*) progress_cursor#49
(byte*) progress_cursor#5
(byte*) progress_cursor#50
(byte*) progress_cursor#51
(byte*) progress_cursor#52
(byte*) progress_cursor#53
(byte*) progress_cursor#54
(byte*) progress_cursor#55
(byte*) progress_cursor#56
(byte*) progress_cursor#57
(byte*) progress_cursor#58
(byte*) progress_cursor#59
(byte*) progress_cursor#6
(byte*) progress_cursor#60
(byte*) progress_cursor#61
(byte*) progress_cursor#62
(byte*) progress_cursor#63
(byte*) progress_cursor#64
(byte*) progress_cursor#65
(byte*) progress_cursor#7
(byte*) progress_cursor#8
(byte*) progress_cursor#9
(byte) progress_idx
(byte) progress_idx#0
(byte) progress_idx#1
(byte) progress_idx#10
(byte) progress_idx#11
(byte) progress_idx#12
(byte) progress_idx#13
(byte) progress_idx#14
(byte) progress_idx#15
(byte) progress_idx#16
(byte) progress_idx#17
(byte) progress_idx#18
(byte) progress_idx#19
(byte) progress_idx#2
(byte) progress_idx#20
(byte) progress_idx#21
(byte) progress_idx#22
(byte) progress_idx#23
(byte) progress_idx#24
(byte) progress_idx#25
(byte) progress_idx#26
(byte) progress_idx#27
(byte) progress_idx#28
(byte) progress_idx#29
(byte) progress_idx#3
(byte) progress_idx#30
(byte) progress_idx#31
(byte) progress_idx#32
(byte) progress_idx#33
(byte) progress_idx#34
(byte) progress_idx#35
(byte) progress_idx#36
(byte) progress_idx#37
(byte) progress_idx#38
(byte) progress_idx#39
(byte) progress_idx#4
(byte) progress_idx#40
(byte) progress_idx#41
(byte) progress_idx#42
(byte) progress_idx#43
(byte) progress_idx#44
(byte) progress_idx#45
(byte) progress_idx#46
(byte) progress_idx#47
(byte) progress_idx#48
(byte) progress_idx#49
(byte) progress_idx#5
(byte) progress_idx#50
(byte) progress_idx#51
(byte) progress_idx#52
(byte) progress_idx#53
(byte) progress_idx#54
(byte) progress_idx#55
(byte) progress_idx#56
(byte) progress_idx#57
(byte) progress_idx#58
(byte) progress_idx#59
(byte) progress_idx#6
(byte) progress_idx#60
(byte) progress_idx#61
(byte) progress_idx#62
(byte) progress_idx#63
(byte) progress_idx#64
(byte) progress_idx#65
(byte) progress_idx#7
(byte) progress_idx#8
(byte) progress_idx#9
(void()) progress_inc()
(bool~) progress_inc::$0
(bool~) progress_inc::$1
(label) progress_inc::@1
(label) progress_inc::@2
(label) progress_inc::@return
(byte[]) progress_inc::progress_chars
(byte[]) progress_inc::progress_chars#0
(void()) progress_init((byte*) progress_init::line)
(label) progress_init::@return
(byte*) progress_init::line
(byte*) progress_init::line#0
(byte*) progress_init::line#1
(byte*) progress_init::line#2
(void()) setARGtoFAC()
(label) setARGtoFAC::@return
(void()) setFAC((word) setFAC::w)
(byte*~) setFAC::$0
(label) setFAC::@1
(label) setFAC::@return
(word) setFAC::w
(word) setFAC::w#0
(word) setFAC::w#1
(word) setFAC::w#2
(word) setFAC::w#3
(word) setFAC::w#4
(word) setFAC::w#5
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(label) setMEMtoFAC::@1
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#0
(byte*) setMEMtoFAC::mem#1
(byte*) setMEMtoFAC::mem#2
(byte*) setMEMtoFAC::mem#3
(byte*) setMEMtoFAC::mem#4
(byte*) setMEMtoFAC::mem#5
(void()) sinFAC()
(label) sinFAC::@return
(byte) sin_idx_x
(byte) sin_idx_x#0
(byte) sin_idx_x#1
(byte) sin_idx_x#10
(byte) sin_idx_x#11
(byte) sin_idx_x#12
(byte) sin_idx_x#13
(byte) sin_idx_x#14
(byte) sin_idx_x#15
(byte) sin_idx_x#16
(byte) sin_idx_x#17
(byte) sin_idx_x#18
(byte) sin_idx_x#19
(byte) sin_idx_x#2
(byte) sin_idx_x#20
(byte) sin_idx_x#21
(byte) sin_idx_x#22
(byte) sin_idx_x#23
(byte) sin_idx_x#24
(byte) sin_idx_x#25
(byte) sin_idx_x#26
(byte) sin_idx_x#3
(byte) sin_idx_x#4
(byte) sin_idx_x#5
(byte) sin_idx_x#6
(byte) sin_idx_x#7
(byte) sin_idx_x#8
(byte) sin_idx_x#9
(byte) sin_idx_y
(byte) sin_idx_y#0
(byte) sin_idx_y#1
(byte) sin_idx_y#10
(byte) sin_idx_y#11
(byte) sin_idx_y#12
(byte) sin_idx_y#13
(byte) sin_idx_y#14
(byte) sin_idx_y#15
(byte) sin_idx_y#16
(byte) sin_idx_y#17
(byte) sin_idx_y#18
(byte) sin_idx_y#19
(byte) sin_idx_y#2
(byte) sin_idx_y#20
(byte) sin_idx_y#21
(byte) sin_idx_y#22
(byte) sin_idx_y#23
(byte) sin_idx_y#24
(byte) sin_idx_y#25
(byte) sin_idx_y#26
(byte) sin_idx_y#3
(byte) sin_idx_y#4
(byte) sin_idx_y#5
(byte) sin_idx_y#6
(byte) sin_idx_y#7
(byte) sin_idx_y#8
(byte) sin_idx_y#9
(byte) sinlen_x
(byte) sinlen_x#0
(byte) sinlen_y
(byte) sinlen_y#0
(byte[$dd]) sintab_x
(byte[$dd]) sintab_x#0
(byte[$c5]) sintab_y
(byte[$c5]) sintab_y#0
(byte*) sprites
(byte*) sprites#0
(void()) subFACfromARG()
(label) subFACfromARG::@return

Inversing boolean not [226] (bool~) progress_inc::$1 ← (byte) progress_idx#10 != (byte/signed byte/word/signed word/dword/signed dword) 8 from [225] (bool~) progress_inc::$0 ← (byte) progress_idx#10 == (byte/signed byte/word/signed word/dword/signed dword) 8
Inversing boolean not [262] (bool~) anim::$8 ← (byte) anim::xidx#1 < (byte) sinlen_x#0 from [261] (bool~) anim::$7 ← (byte) anim::xidx#1 >= (byte) sinlen_x#0
Inversing boolean not [268] (bool~) anim::$12 ← (byte) anim::yidx#1 < (byte) sinlen_y#0 from [267] (bool~) anim::$11 ← (byte) anim::yidx#1 >= (byte) sinlen_y#0
Inversing boolean not [286] (bool~) anim::$17 ← (byte) sin_idx_x#3 < (byte) sinlen_x#0 from [285] (bool~) anim::$16 ← (byte) sin_idx_x#3 >= (byte) sinlen_x#0
Inversing boolean not [291] (bool~) anim::$19 ← (byte) sin_idx_y#3 < (byte) sinlen_y#0 from [290] (bool~) anim::$18 ← (byte) sin_idx_y#3 >= (byte) sinlen_y#0
Inversing boolean not [363] (bool~) gen_chargen_sprite::$5 ← (byte~) gen_chargen_sprite::$3 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [362] (bool~) gen_chargen_sprite::$4 ← (byte~) gen_chargen_sprite::$3 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [375] (bool~) gen_chargen_sprite::$9 ← (byte) gen_chargen_sprite::s_gen_cnt#1 != (byte/signed byte/word/signed word/dword/signed dword) 8 from [374] (bool~) gen_chargen_sprite::$8 ← (byte) gen_chargen_sprite::s_gen_cnt#1 == (byte/signed byte/word/signed word/dword/signed dword) 8
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) prepareMEM::mem#0 = (byte*~) setFAC::$0 
Alias (word) getFAC::return#0 = (word) getFAC::w#0 (word) getFAC::return#3 (word) getFAC::return#1 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 
Alias (byte) sin_idx_x#23 = (byte) sin_idx_x#26 
Alias (byte) sin_idx_y#21 = (byte) sin_idx_y#24 
Alias (byte*) progress_cursor#0 = (byte*) progress_cursor#15 
Alias (byte) progress_idx#0 = (byte) progress_idx#16 
Alias (byte) sin_idx_x#0 = (byte) sin_idx_x#22 (byte) sin_idx_x#7 (byte) sin_idx_x#8 (byte) sin_idx_x#1 
Alias (byte) sin_idx_y#0 = (byte) sin_idx_y#20 (byte) sin_idx_y#7 (byte) sin_idx_y#8 (byte) sin_idx_y#1 
Alias (byte*) progress_cursor#1 = (byte*) progress_cursor#43 (byte*) progress_cursor#30 (byte*) progress_cursor#36 (byte*) progress_cursor#40 (byte*) progress_cursor#16 
Alias (byte) progress_idx#1 = (byte) progress_idx#43 (byte) progress_idx#31 (byte) progress_idx#36 (byte) progress_idx#40 (byte) progress_idx#17 
Alias (byte) sin_idx_x#13 = (byte) sin_idx_x#17 
Alias (byte) sin_idx_y#13 = (byte) sin_idx_y#18 
Alias (byte*) progress_cursor#46 = (byte*) progress_cursor#48 
Alias (byte) progress_idx#46 = (byte) progress_idx#48 
Alias (byte*) progress_cursor#31 = (byte*) progress_cursor#41 (byte*) progress_cursor#44 (byte*) progress_cursor#37 
Alias (byte) progress_idx#32 = (byte) progress_idx#41 (byte) progress_idx#44 (byte) progress_idx#37 
Alias (byte*) progress_cursor#17 = (byte*) progress_cursor#2 
Alias (byte) progress_idx#18 = (byte) progress_idx#2 
Alias (byte) progress_idx#19 = (byte) progress_idx#3 
Alias (byte*) progress_cursor#18 = (byte*) progress_cursor#3 
Alias (byte*) progress_init::line#1 = (byte*~) init::$7 
Alias (byte*) progress_cursor#19 = (byte*) progress_cursor#4 
Alias (byte) progress_idx#20 = (byte) progress_idx#4 
Alias (byte) progress_idx#21 = (byte) progress_idx#5 (byte) progress_idx#33 (byte) progress_idx#22 (byte) progress_idx#6 
Alias (byte*) progress_cursor#20 = (byte*) progress_cursor#5 (byte*) progress_cursor#32 (byte*) progress_cursor#21 (byte*) progress_cursor#6 
Alias (byte*) SCREEN#0 = (byte*) progress_cursor#7 (byte*) progress_cursor#39 (byte*) progress_cursor#35 
Alias (byte*) progress_cursor#22 = (byte*) progress_cursor#8 (byte*) progress_cursor#9 
Alias (byte) progress_idx#23 = (byte) progress_idx#8 (byte) progress_idx#9 
Alias (byte*) progress_cursor#24 = (byte*) progress_cursor#33 
Alias (byte) progress_idx#12 = (byte) progress_idx#26 (byte) progress_idx#25 
Alias (byte*) progress_cursor#11 = (byte*) progress_cursor#25 (byte*) progress_cursor#23 
Alias (byte) progress_idx#35 = (byte) progress_idx#39 (byte) progress_idx#7 
Alias (word) anim::x#0 = (byte/signed word/word/dword/signed dword~) anim::$1 
Alias (byte) anim::x_msb#1 = (byte~) anim::$4 (byte) anim::x_msb#7 
Alias (byte) anim::xidx#1 = (byte/signed word/word/dword/signed dword~) anim::$6 (byte) anim::xidx#4 
Alias (byte) anim::yidx#1 = (byte/signed word/word/dword/signed dword~) anim::$10 (byte) anim::yidx#5 
Alias (byte) anim::yidx#3 = (byte) anim::yidx#7 
Alias (byte) anim::j2#2 = (byte) anim::j2#6 
Alias (byte) anim::j#5 = (byte) anim::j#6 
Alias (byte) sin_idx_x#24 = (byte) sin_idx_x#25 
Alias (byte) sin_idx_y#25 = (byte) sin_idx_y#26 
Alias (byte) anim::xidx#2 = (byte~) anim::$9 
Alias (byte) anim::j2#1 = (byte/signed word/word/dword/signed dword~) anim::$14 
Alias (byte) anim::j2#4 = (byte) anim::j2#5 
Alias (byte) anim::j#3 = (byte) anim::j#4 
Alias (byte) anim::xidx#6 = (byte) anim::xidx#7 
Alias (byte) anim::x_msb#5 = (byte) anim::x_msb#6 
Alias (byte) sin_idx_x#18 = (byte) sin_idx_x#19 
Alias (byte) sin_idx_y#22 = (byte) sin_idx_y#23 
Alias (byte) anim::yidx#2 = (byte~) anim::$13 
Alias (byte) anim::x_msb#3 = (byte) anim::x_msb#4 
Alias (byte) sin_idx_x#10 = (byte) sin_idx_x#14 
Alias (byte) sin_idx_y#14 = (byte) sin_idx_y#19 (byte) sin_idx_y#15 
Alias (byte) sin_idx_x#20 = (byte) sin_idx_x#21 
Alias (byte) sin_idx_x#11 = (byte) sin_idx_x#15 (byte) sin_idx_x#5 
Alias (byte) sin_idx_y#11 = (byte) sin_idx_y#16 (byte) sin_idx_y#5 
Alias (byte*) place_sprites::sprites_ptr#0 = (byte*~) place_sprites::$0 
Alias (byte) place_sprites::spr_id#0 = (byte~) place_sprites::$2 
Alias (byte) place_sprites::spr_x#1 = (byte/signed word/word/dword/signed dword~) place_sprites::$3 
Alias (byte) place_sprites::col#1 = (byte/word/dword~) place_sprites::$5 
Alias (byte*) gen_sprites::spr#2 = (byte*) gen_sprites::spr#3 
Alias (byte) gen_sprites::i#2 = (byte) gen_sprites::i#3 
Alias (byte*) gen_sprites::spr#1 = (byte*~) gen_sprites::$1 
Alias (byte*) gen_chargen_sprite::chargen#0 = (byte*~) gen_chargen_sprite::$2 
Alias (byte) gen_chargen_sprite::s_gen#7 = (byte) gen_chargen_sprite::s_gen#8 
Alias (byte) gen_chargen_sprite::s_gen_cnt#6 = (byte) gen_chargen_sprite::s_gen_cnt#7 
Alias (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#9 
Alias (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#8 
Alias (byte) gen_chargen_sprite::x#7 = (byte) gen_chargen_sprite::x#8 
Alias (byte) gen_chargen_sprite::y#10 = (byte) gen_chargen_sprite::y#9 
Alias (byte*) gen_chargen_sprite::chargen#8 = (byte*) gen_chargen_sprite::chargen#9 
Alias (byte) gen_chargen_sprite::s_gen#1 = (byte~) gen_chargen_sprite::$7 (byte) gen_chargen_sprite::s_gen#4 
Alias (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#5 
Alias (byte) gen_chargen_sprite::b#3 = (byte) gen_chargen_sprite::b#4 
Alias (byte) gen_chargen_sprite::c#2 = (byte) gen_chargen_sprite::c#5 
Alias (byte) gen_chargen_sprite::bits#5 = (byte) gen_chargen_sprite::bits#6 
Alias (byte) gen_chargen_sprite::x#4 = (byte) gen_chargen_sprite::x#5 
Alias (byte) gen_chargen_sprite::y#6 = (byte) gen_chargen_sprite::y#7 
Alias (byte*) gen_chargen_sprite::chargen#5 = (byte*) gen_chargen_sprite::chargen#6 
Alias (byte) gen_chargen_sprite::bits#3 = (byte) gen_chargen_sprite::bits#4 
Alias (byte) gen_chargen_sprite::x#2 = (byte) gen_chargen_sprite::x#3 
Alias (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#6 (byte*) gen_chargen_sprite::sprite#8 
Alias (byte) gen_chargen_sprite::y#3 = (byte) gen_chargen_sprite::y#4 (byte) gen_chargen_sprite::y#5 
Alias (byte*) gen_chargen_sprite::chargen#2 = (byte*) gen_chargen_sprite::chargen#3 (byte*) gen_chargen_sprite::chargen#4 
Alias (byte) gen_chargen_sprite::s_gen#6 = (byte) gen_chargen_sprite::s_gen#9 
Alias (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) gen_chargen_sprite::s_gen_cnt#8 
Alias (byte) gen_chargen_sprite::bits#1 = (byte~) gen_chargen_sprite::$11 
Alias (byte*) gen_chargen_sprite::sprite#2 = (byte*~) gen_chargen_sprite::$13 
Alias (word) setFAC::w#0 = (word~) gen_sintab::$0 
Alias (byte) gen_sintab::min#2 = (byte) gen_sintab::min#3 (byte) gen_sintab::min#4 
Alias (byte*) gen_sintab::f_2pi#0 = (byte*) gen_sintab::f_2pi#22 (byte*) gen_sintab::f_2pi#21 (byte*) gen_sintab::f_2pi#19 (byte*) gen_sintab::f_2pi#17 (byte*) gen_sintab::f_2pi#15 (byte*) gen_sintab::f_2pi#13 (byte*) gen_sintab::f_2pi#11 (byte*) gen_sintab::f_2pi#9 (byte*) gen_sintab::f_2pi#7 (byte*) gen_sintab::f_2pi#5 (byte*) gen_sintab::f_2pi#3 
Alias (byte) gen_sintab::length#10 = (byte) gen_sintab::length#23 (byte) gen_sintab::length#24 (byte) gen_sintab::length#22 (byte) gen_sintab::length#21 (byte) gen_sintab::length#20 (byte) gen_sintab::length#19 (byte) gen_sintab::length#18 (byte) gen_sintab::length#17 (byte) gen_sintab::length#16 (byte) gen_sintab::length#14 (byte) gen_sintab::length#12 
Alias (byte*) gen_sintab::sintab#12 = (byte*) gen_sintab::sintab#23 (byte*) gen_sintab::sintab#24 (byte*) gen_sintab::sintab#22 (byte*) gen_sintab::sintab#21 (byte*) gen_sintab::sintab#20 (byte*) gen_sintab::sintab#19 (byte*) gen_sintab::sintab#18 (byte*) gen_sintab::sintab#17 (byte*) gen_sintab::sintab#16 (byte*) gen_sintab::sintab#15 (byte*) gen_sintab::sintab#14 
Alias (byte) progress_idx#54 = (byte) progress_idx#64 (byte) progress_idx#65 (byte) progress_idx#63 (byte) progress_idx#62 (byte) progress_idx#61 (byte) progress_idx#60 (byte) progress_idx#59 (byte) progress_idx#58 (byte) progress_idx#57 (byte) progress_idx#56 (byte) progress_idx#55 
Alias (byte*) progress_cursor#54 = (byte*) progress_cursor#64 (byte*) progress_cursor#65 (byte*) progress_cursor#63 (byte*) progress_cursor#62 (byte*) progress_cursor#61 (byte*) progress_cursor#60 (byte*) progress_cursor#59 (byte*) progress_cursor#58 (byte*) progress_cursor#57 (byte*) progress_cursor#56 (byte*) progress_cursor#55 
Alias (word) setFAC::w#1 = (word~) gen_sintab::$3 
Alias (word) setFAC::w#3 = (word~) gen_sintab::$13 
Alias (byte*) gen_sintab::f_2pi#1 = (byte*) gen_sintab::f_2pi#2 (byte*) gen_sintab::f_2pi#20 (byte*) gen_sintab::f_2pi#18 (byte*) gen_sintab::f_2pi#16 (byte*) gen_sintab::f_2pi#14 (byte*) gen_sintab::f_2pi#12 (byte*) gen_sintab::f_2pi#10 (byte*) gen_sintab::f_2pi#8 (byte*) gen_sintab::f_2pi#6 (byte*) gen_sintab::f_2pi#4 
Alias (byte) gen_sintab::length#11 = (byte) gen_sintab::length#6 (byte) gen_sintab::length#8 (byte) gen_sintab::length#4 (byte) gen_sintab::length#2 (byte) gen_sintab::length#15 (byte) gen_sintab::length#13 (byte) gen_sintab::length#9 (byte) gen_sintab::length#7 (byte) gen_sintab::length#5 (byte) gen_sintab::length#3 
Alias (byte*) gen_sintab::sintab#10 = (byte*) gen_sintab::sintab#11 (byte*) gen_sintab::sintab#9 (byte*) gen_sintab::sintab#8 (byte*) gen_sintab::sintab#7 (byte*) gen_sintab::sintab#6 (byte*) gen_sintab::sintab#5 (byte*) gen_sintab::sintab#4 (byte*) gen_sintab::sintab#3 (byte*) gen_sintab::sintab#2 (byte*) gen_sintab::sintab#13 
Alias (byte) gen_sintab::i#10 = (byte) gen_sintab::i#12 (byte) gen_sintab::i#2 (byte) gen_sintab::i#11 (byte) gen_sintab::i#9 (byte) gen_sintab::i#8 (byte) gen_sintab::i#7 (byte) gen_sintab::i#6 (byte) gen_sintab::i#5 (byte) gen_sintab::i#3 (byte) gen_sintab::i#4 
Alias (byte) progress_idx#34 = (byte) progress_idx#52 (byte) progress_idx#53 (byte) progress_idx#51 (byte) progress_idx#50 (byte) progress_idx#49 (byte) progress_idx#47 (byte) progress_idx#45 (byte) progress_idx#42 (byte) progress_idx#38 
Alias (byte*) progress_cursor#34 = (byte*) progress_cursor#52 (byte*) progress_cursor#53 (byte*) progress_cursor#51 (byte*) progress_cursor#50 (byte*) progress_cursor#49 (byte*) progress_cursor#47 (byte*) progress_cursor#45 (byte*) progress_cursor#42 (byte*) progress_cursor#38 
Alias (word) setFAC::w#4 = (word~) gen_sintab::$17 
Alias (word) getFAC::return#2 = (word) getFAC::return#4 
Alias (byte) progress_idx#13 = (byte) progress_idx#27 (byte) progress_idx#28 (byte) progress_idx#14 
Alias (byte*) progress_cursor#12 = (byte*) progress_cursor#26 (byte*) progress_cursor#27 (byte*) progress_cursor#13 
Alias (byte) sin_idx_x#16 = (byte) sin_idx_x#2 
Alias (byte) sin_idx_y#17 = (byte) sin_idx_y#2 
Alias (byte*) progress_cursor#14 = (byte*) progress_cursor#28 
Alias (byte) progress_idx#15 = (byte) progress_idx#29 
Alias (byte) sin_idx_x#12 = (byte) sin_idx_x#6 
Alias (byte) sin_idx_y#12 = (byte) sin_idx_y#6 
Successful SSA optimization Pass2AliasElimination
Alias (byte) anim::yidx#3 = (byte) anim::yidx#4 
Alias (byte) anim::j2#2 = (byte) anim::j2#4 (byte) anim::j2#3 
Alias (byte) anim::j#2 = (byte) anim::j#3 (byte) anim::j#5 
Alias (byte) anim::x_msb#1 = (byte) anim::x_msb#5 (byte) anim::x_msb#3 
Alias (byte) sin_idx_x#10 = (byte) sin_idx_x#18 (byte) sin_idx_x#24 
Alias (byte) sin_idx_y#10 = (byte) sin_idx_y#22 (byte) sin_idx_y#25 (byte) sin_idx_y#14 
Alias (byte) anim::xidx#5 = (byte) anim::xidx#6 
Alias (byte) sin_idx_x#11 = (byte) sin_idx_x#20 
Alias (byte) gen_chargen_sprite::s_gen#5 = (byte) gen_chargen_sprite::s_gen#7 
Alias (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) gen_chargen_sprite::s_gen_cnt#6 
Alias (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#7 
Alias (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#7 
Alias (byte) gen_chargen_sprite::x#6 = (byte) gen_chargen_sprite::x#7 
Alias (byte) gen_chargen_sprite::y#10 = (byte) gen_chargen_sprite::y#8 
Alias (byte*) gen_chargen_sprite::chargen#7 = (byte*) gen_chargen_sprite::chargen#8 
Alias (byte) gen_chargen_sprite::b#2 = (byte) gen_chargen_sprite::b#3 
Alias (byte) gen_chargen_sprite::c#2 = (byte) gen_chargen_sprite::c#4 
Alias (byte) gen_chargen_sprite::bits#3 = (byte) gen_chargen_sprite::bits#5 
Alias (byte) gen_chargen_sprite::x#2 = (byte) gen_chargen_sprite::x#4 
Alias (byte) gen_chargen_sprite::y#3 = (byte) gen_chargen_sprite::y#6 
Alias (byte*) gen_chargen_sprite::chargen#2 = (byte*) gen_chargen_sprite::chargen#5 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) sin_idx_x#13
Self Phi Eliminated (byte) sin_idx_y#13
Self Phi Eliminated (byte*) progress_cursor#1
Self Phi Eliminated (byte*) progress_cursor#1
Self Phi Eliminated (byte) progress_idx#1
Self Phi Eliminated (byte) progress_idx#1
Self Phi Eliminated (byte*) progress_cursor#31
Self Phi Eliminated (byte) progress_idx#32
Self Phi Eliminated (byte) sin_idx_x#10
Self Phi Eliminated (byte) sin_idx_y#10
Self Phi Eliminated (byte*) place_sprites::sprites_ptr#1
Self Phi Eliminated (byte) gen_chargen_sprite::c#2
Self Phi Eliminated (byte) gen_chargen_sprite::bits#3
Self Phi Eliminated (byte) gen_chargen_sprite::x#2
Self Phi Eliminated (byte) gen_chargen_sprite::y#3
Self Phi Eliminated (byte*) gen_chargen_sprite::chargen#2
Self Phi Eliminated (byte*) gen_sintab::f_2pi#1
Self Phi Eliminated (byte) gen_sintab::length#11
Self Phi Eliminated (byte*) gen_sintab::sintab#10
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) progress_cursor#29 (byte*) SCREEN#0
Redundant Phi (byte) progress_idx#30 (byte) progress_idx#35
Redundant Phi (byte) sin_idx_x#23 (byte) sin_idx_x#16
Redundant Phi (byte) sin_idx_y#21 (byte) sin_idx_y#17
Redundant Phi (byte*) progress_cursor#0 (byte*) progress_cursor#20
Redundant Phi (byte) progress_idx#0 (byte) progress_idx#21
Redundant Phi (byte*) progress_cursor#1 (byte*) progress_cursor#0
Redundant Phi (byte) progress_idx#1 (byte) progress_idx#0
Redundant Phi (byte) sin_idx_x#0 (byte) sin_idx_x#11
Redundant Phi (byte) sin_idx_y#0 (byte) sin_idx_y#11
Redundant Phi (byte*) progress_cursor#46 (byte*) progress_cursor#29
Redundant Phi (byte) progress_idx#46 (byte) progress_idx#30
Redundant Phi (byte*) progress_cursor#31 (byte*) progress_cursor#46
Redundant Phi (byte) progress_idx#32 (byte) progress_idx#46
Redundant Phi (byte*) progress_cursor#17 (byte*) progress_cursor#22
Redundant Phi (byte) progress_idx#18 (byte) progress_idx#23
Redundant Phi (byte) progress_idx#19 (byte) progress_idx#13
Redundant Phi (byte*) progress_cursor#18 (byte*) progress_cursor#12
Redundant Phi (byte*) progress_cursor#19 (byte*) progress_cursor#22
Redundant Phi (byte) progress_idx#20 (byte) progress_idx#23
Redundant Phi (byte) progress_idx#21 (byte) progress_idx#13
Redundant Phi (byte*) progress_cursor#20 (byte*) progress_cursor#12
Redundant Phi (byte) progress_idx#24 (byte) progress_idx#34
Redundant Phi (byte*) progress_cursor#24 (byte*) progress_cursor#34
Redundant Phi (byte) sin_idx_x#9 (byte) sin_idx_x#13
Redundant Phi (byte) sin_idx_y#9 (byte) sin_idx_y#13
Redundant Phi (byte) sin_idx_x#10 (byte) sin_idx_x#9
Redundant Phi (byte) sin_idx_y#10 (byte) sin_idx_y#9
Redundant Phi (byte*) place_sprites::sprites_ptr#1 (byte*) place_sprites::sprites_ptr#0
Redundant Phi (byte) gen_chargen_sprite::ch#1 (byte) gen_chargen_sprite::ch#0
Redundant Phi (byte*) gen_chargen_sprite::sprite#12 (byte*) gen_chargen_sprite::sprite#0
Redundant Phi (byte) gen_chargen_sprite::c#2 (byte) gen_chargen_sprite::c#3
Redundant Phi (byte) gen_chargen_sprite::bits#3 (byte) gen_chargen_sprite::bits#2
Redundant Phi (byte) gen_chargen_sprite::x#2 (byte) gen_chargen_sprite::x#6
Redundant Phi (byte) gen_chargen_sprite::y#3 (byte) gen_chargen_sprite::y#10
Redundant Phi (byte*) gen_chargen_sprite::chargen#2 (byte*) gen_chargen_sprite::chargen#7
Redundant Phi (byte*) gen_sintab::f_2pi#1 (byte*) gen_sintab::f_2pi#0
Redundant Phi (byte) gen_sintab::length#11 (byte) gen_sintab::length#10
Redundant Phi (byte*) gen_sintab::sintab#10 (byte*) gen_sintab::sintab#12
Redundant Phi (byte) progress_idx#13 (byte) progress_idx#12
Redundant Phi (byte*) progress_cursor#12 (byte*) progress_cursor#11
Redundant Phi (byte*) progress_cursor#14 (byte*) progress_cursor#1
Redundant Phi (byte) progress_idx#15 (byte) progress_idx#1
Redundant Phi (byte) sin_idx_x#12 (byte) sin_idx_x#0
Redundant Phi (byte) sin_idx_y#12 (byte) sin_idx_y#0
Successful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte) progress_idx#54 (byte) progress_idx#23
Redundant Phi (byte*) progress_cursor#54 (byte*) progress_cursor#22
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) main::$1 [143] if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto main::@2
Simple Condition (bool~) init::$2 [166] if((byte) init::i#1!=rangelast(0,$27)) goto init::@1
Simple Condition (bool~) clear_screen::$1 [211] if((byte*) clear_screen::sc#1<(byte*~) clear_screen::$0) goto clear_screen::@1
Simple Condition (bool~) progress_inc::$1 [227] if((byte) progress_idx#10!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto progress_inc::@1
Simple Condition (bool~) anim::$8 [263] if((byte) anim::xidx#1<(byte) sinlen_x#0) goto anim::@2
Simple Condition (bool~) anim::$12 [269] if((byte) anim::yidx#1<(byte) sinlen_y#0) goto anim::@3
Simple Condition (bool~) anim::$15 [278] if((byte) anim::j#1!=rangelast(0,6)) goto anim::@1
Simple Condition (bool~) anim::$17 [287] if((byte) sin_idx_x#3<(byte) sinlen_x#0) goto anim::@4
Simple Condition (bool~) anim::$19 [292] if((byte) sin_idx_y#3<(byte) sinlen_y#0) goto anim::@5
Simple Condition (bool~) place_sprites::$6 [330] if((byte) place_sprites::j#1!=rangelast(0,6)) goto place_sprites::@1
Simple Condition (bool~) gen_sprites::$2 [344] if((byte) gen_sprites::i#1!=rangelast(0,6)) goto gen_sprites::@1
Simple Condition (bool~) gen_chargen_sprite::$5 [364] if((byte~) gen_chargen_sprite::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gen_chargen_sprite::@3
Simple Condition (bool~) gen_chargen_sprite::$9 [376] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@5
Simple Condition (bool~) gen_chargen_sprite::$10 [380] if((byte) gen_chargen_sprite::b#1!=rangelast(0,2)) goto gen_chargen_sprite::@4
Simple Condition (bool~) gen_chargen_sprite::$12 [393] if((byte) gen_chargen_sprite::x#1!=rangelast(0,7)) goto gen_chargen_sprite::@2
Simple Condition (bool~) gen_chargen_sprite::$14 [399] if((byte) gen_chargen_sprite::y#1!=rangelast(0,7)) goto gen_chargen_sprite::@1
Simple Condition (bool~) gen_sintab::$26 [481] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_ALL#0 = $30
Constant (const byte) PROCPORT_RAM_IO#0 = $35
Constant (const byte) PROCPORT_RAM_CHARROM#0 = $31
Constant (const byte) PROCPORT_KERNEL_IO#0 = $36
Constant (const byte) PROCPORT_BASIC_KERNEL_IO#0 = $37
Constant (const byte*) CHARGEN#0 = ((byte*))$d000
Constant (const word) SPRITE_PTRS#0 = $3f8
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))$d000
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))$d001
Constant (const byte*) SPRITES_XMSB#0 = ((byte*))$d010
Constant (const byte*) RASTER#0 = ((byte*))$d012
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))$d015
Constant (const byte*) SPRITES_EXPAND_Y#0 = ((byte*))$d017
Constant (const byte*) SPRITES_PRIORITY#0 = ((byte*))$d01b
Constant (const byte*) SPRITES_MC#0 = ((byte*))$d01c
Constant (const byte*) SPRITES_EXPAND_X#0 = ((byte*))$d01d
Constant (const byte*) BORDERCOL#0 = ((byte*))$d020
Constant (const byte*) BGCOL#0 = ((byte*))$d021
Constant (const byte*) BGCOL1#0 = ((byte*))$d021
Constant (const byte*) BGCOL2#0 = ((byte*))$d022
Constant (const byte*) BGCOL3#0 = ((byte*))$d023
Constant (const byte*) BGCOL4#0 = ((byte*))$d024
Constant (const byte*) SPRITES_MC1#0 = ((byte*))$d025
Constant (const byte*) SPRITES_MC2#0 = ((byte*))$d026
Constant (const byte*) SPRITES_COLS#0 = ((byte*))$d027
Constant (const byte*) VIC_CONTROL#0 = ((byte*))$d011
Constant (const byte*) D011#0 = ((byte*))$d011
Constant (const byte) VIC_RST8#0 = $80
Constant (const byte) VIC_ECM#0 = $40
Constant (const byte) VIC_BMM#0 = $20
Constant (const byte) VIC_DEN#0 = $10
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))$d016
Constant (const byte*) D016#0 = ((byte*))$d016
Constant (const byte) VIC_MCM#0 = $10
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) D018#0 = ((byte*))$d018
Constant (const byte*) VIC_MEMORY#0 = ((byte*))$d018
Constant (const byte*) LIGHTPEN_X#0 = ((byte*))$d013
Constant (const byte*) LIGHTPEN_Y#0 = ((byte*))$d014
Constant (const byte*) IRQ_STATUS#0 = ((byte*))$d019
Constant (const byte*) IRQ_ENABLE#0 = ((byte*))$d01a
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte) IRQ_COLLISION_BG#0 = 2
Constant (const byte) IRQ_COLLISION_SPRITE#0 = 4
Constant (const byte) IRQ_LIGHTPEN#0 = 8
Constant (const byte*) COLS#0 = ((byte*))$d800
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))$dc00
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))$dc01
Constant (const byte*) CIA1_PORT_A_DDR#0 = ((byte*))$dc02
Constant (const byte*) CIA1_PORT_B_DDR#0 = ((byte*))$dc03
Constant (const byte*) CIA1_INTERRUPT#0 = ((byte*))$dc0d
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = $7f
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))$dd00
Constant (const byte*) CIA2_PORT_B#0 = ((byte*))$dd01
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))$dd02
Constant (const byte*) CIA2_PORT_B_DDR#0 = ((byte*))$dd03
Constant (const byte*) CIA2_INTERRUPT#0 = ((byte*))$dd0d
Constant (const void()**) KERNEL_IRQ#0 = ((void()**))$314
Constant (const void()**) HARDWARE_IRQ#0 = ((void()**))$fffe
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const byte) RED#0 = 2
Constant (const byte) CYAN#0 = 3
Constant (const byte) PURPLE#0 = 4
Constant (const byte) GREEN#0 = 5
Constant (const byte) BLUE#0 = 6
Constant (const byte) YELLOW#0 = 7
Constant (const byte) ORANGE#0 = 8
Constant (const byte) BROWN#0 = 9
Constant (const byte) PINK#0 = $a
Constant (const byte) DARK_GREY#0 = $b
Constant (const byte) GREY#0 = $c
Constant (const byte) LIGHT_GREEN#0 = $d
Constant (const byte) LIGHT_BLUE#0 = $e
Constant (const byte) LIGHT_GREY#0 = $f
Constant (const byte*) memLo#0 = ((byte*))$fe
Constant (const byte*) memHi#0 = ((byte*))$ff
Constant (const byte*) print_line_cursor#0 = ((byte*))$400
Constant (const byte[]) print_hextab#0 = $0
Constant (const byte) sinlen_x#0 = $dd
Constant (const byte[$dd]) sintab_x#0 = { fill( $dd, 0) }
Constant (const byte) sinlen_y#0 = $c5
Constant (const byte[$c5]) sintab_y#0 = { fill( $c5, 0) }
Constant (const byte*) sprites#0 = ((byte*))$2000
Constant (const byte*) SCREEN#0 = ((byte*))$400
Constant (const byte) init::i#0 = 0
Constant (const byte) gen_sintab::min#0 = 0
Constant (const byte) gen_sintab::max#0 = $ff
Constant (const byte) gen_sintab::min#1 = $32
Constant (const byte) gen_sintab::max#1 = $d0
Constant (const byte) progress_idx#35 = 0
Constant (const byte) progress_idx#23 = 0
Constant (const byte[]) progress_inc::progress_chars#0 = { $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0 }
Constant (const byte) progress_idx#11 = 0
Constant (const byte) sin_idx_x#16 = 0
Constant (const byte) sin_idx_y#17 = 0
Constant (const byte) anim::j2#0 = $c
Constant (const byte) anim::x_msb#0 = 0
Constant (const byte) anim::j#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) anim::$0 = ((word))$1e
Constant (const byte) sin_idx_x#4 = 0
Constant (const byte) sin_idx_y#4 = 0
Constant (const byte) place_sprites::spr_x#0 = $3c
Constant (const byte) place_sprites::j2#0 = 0
Constant (const byte) place_sprites::col#0 = 5
Constant (const byte) place_sprites::j#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) place_sprites::$4 = 7^5
Constant (const byte[]) gen_sprites::cml#0 = gen_sprites::$3
Constant (const byte) gen_sprites::i#0 = 0
Constant (const byte) gen_chargen_sprite::y#0 = 0
Constant (const byte) gen_chargen_sprite::s_gen#0 = 0
Constant (const byte) gen_chargen_sprite::s_gen_cnt#0 = 0
Constant (const byte) gen_chargen_sprite::x#0 = 0
Constant (const byte) gen_chargen_sprite::c#0 = 0
Constant (const byte) gen_chargen_sprite::b#0 = 0
Constant (const byte) gen_chargen_sprite::c#1 = 1
Constant (const byte) gen_chargen_sprite::s_gen#2 = 0
Constant (const byte) gen_chargen_sprite::s_gen_cnt#2 = 0
Constant (const byte[]) gen_sintab::f_i#0 = { 0, 0, 0, 0, 0 }
Constant (const byte[]) gen_sintab::f_min#0 = { 0, 0, 0, 0, 0 }
Constant (const byte[]) gen_sintab::f_amp#0 = { 0, 0, 0, 0, 0 }
Constant (const byte*) gen_sintab::f_2pi#0 = ((byte*))$e2e5
Constant (const word) setFAC::w#2 = 2
Constant (const byte) gen_sintab::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) progress_init::line#0 = SCREEN#0
Constant (const byte*) gen_sintab::sintab#0 = sintab_x#0
Constant (const byte) gen_sintab::length#0 = sinlen_x#0
Constant (const byte*) progress_init::line#1 = SCREEN#0+$28
Constant (const byte*) gen_sintab::sintab#1 = sintab_y#0
Constant (const byte) gen_sintab::length#1 = sinlen_y#0
Constant (const byte*) clear_screen::sc#0 = SCREEN#0
Constant (const byte*) clear_screen::$0 = SCREEN#0+$3e8
Constant (const byte*) place_sprites::sprites_ptr#0 = SCREEN#0+$3f8
Constant (const byte*) place_sprites::$1 = sprites#0/$40
Constant (const byte*) gen_sprites::spr#0 = sprites#0
Constant (const byte*) setMEMtoFAC::mem#0 = gen_sintab::f_min#0
Constant (const byte*) setMEMtoFAC::mem#1 = gen_sintab::f_amp#0
Constant (const byte*) divMEMbyFAC::mem#0 = gen_sintab::f_amp#0
Constant (const byte*) setMEMtoFAC::mem#2 = gen_sintab::f_amp#0
Constant (const byte*) addMEMtoFAC::mem#0 = gen_sintab::f_min#0
Constant (const byte*) setMEMtoFAC::mem#3 = gen_sintab::f_min#0
Constant (const byte*) mulFACbyMEM::mem#0 = gen_sintab::f_2pi#0
Constant (const byte*) setMEMtoFAC::mem#4 = gen_sintab::f_i#0
Constant (const byte*) divMEMbyFAC::mem#1 = gen_sintab::f_i#0
Constant (const byte*) mulFACbyMEM::mem#1 = gen_sintab::f_amp#0
Constant (const byte*) addMEMtoFAC::mem#1 = gen_sintab::f_min#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) place_sprites::spr_id#0 = ((byte))place_sprites::$1
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in assignment *(COLS#0+$28 + init::$1)
Consolidated array index constant in *(progress_inc::progress_chars#0+8)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination [44] if(true) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Fixing inline constructor with getFAC::$0 ← *(memHi#0) w= *(memLo#0)
Successful SSA optimization Pass2FixInlineConstructors
Inferred type updated to byte in [49] (byte/signed word/word/dword/signed dword~) init::$1 ← (byte) init::i#2
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (byte*) prepareMEM::mem#0 ← ((byte*)) (word) setFAC::w#5
Successful SSA optimization Pass2NopCastElimination
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value init::i#1 ← ++ init::i#2 to ++
Resolved ranged comparison value if(init::i#1!=rangelast(0,$27)) goto init::@1 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value anim::j#1 ← ++ anim::j#2 to ++
Resolved ranged comparison value if(anim::j#1!=rangelast(0,6)) goto anim::@1 to (byte/signed byte/word/signed word/dword/signed dword) 7
Resolved ranged next value place_sprites::j#1 ← ++ place_sprites::j#2 to ++
Resolved ranged comparison value if(place_sprites::j#1!=rangelast(0,6)) goto place_sprites::@1 to (byte/signed byte/word/signed word/dword/signed dword) 7
Resolved ranged next value gen_sprites::i#1 ← ++ gen_sprites::i#2 to ++
Resolved ranged comparison value if(gen_sprites::i#1!=rangelast(0,6)) goto gen_sprites::@1 to (byte/signed byte/word/signed word/dword/signed dword) 7
Resolved ranged next value gen_chargen_sprite::b#1 ← ++ gen_chargen_sprite::b#2 to ++
Resolved ranged comparison value if(gen_chargen_sprite::b#1!=rangelast(0,2)) goto gen_chargen_sprite::@4 to (byte/signed byte/word/signed word/dword/signed dword) 3
Resolved ranged next value gen_chargen_sprite::x#1 ← ++ gen_chargen_sprite::x#6 to ++
Resolved ranged comparison value if(gen_chargen_sprite::x#1!=rangelast(0,7)) goto gen_chargen_sprite::@2 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value gen_chargen_sprite::y#1 ← ++ gen_chargen_sprite::y#10 to ++
Resolved ranged comparison value if(gen_chargen_sprite::y#1!=rangelast(0,7)) goto gen_chargen_sprite::@1 to (byte/signed byte/word/signed word/dword/signed dword) 8
Culled Empty Block (label) @4
Culled Empty Block (label) @31
Culled Empty Block (label) @43
Culled Empty Block (label) @50
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@1
Culled Empty Block (label) main::@6
Culled Empty Block (label) init::@3
Culled Empty Block (label) init::@10
Culled Empty Block (label) @53
Culled Empty Block (label) @55
Culled Empty Block (label) gen_sintab::@13
Culled Empty Block (label) @61
Successful SSA optimization Pass2CullEmptyBlocks
Alias (word) getFAC::return#0 = (word~) getFAC::$0 
Alias (byte) init::i#2 = (byte~) init::$1 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) gen_chargen_sprite::y#10
Self Phi Eliminated (byte*) gen_chargen_sprite::chargen#7
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) gen_chargen_sprite::y#10 (byte) gen_chargen_sprite::y#2
Redundant Phi (byte*) gen_chargen_sprite::chargen#7 (byte*) gen_chargen_sprite::chargen#1
Successful SSA optimization Pass2RedundantPhiElimination
Self Phi Eliminated (byte*) gen_chargen_sprite::chargen#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) gen_chargen_sprite::chargen#1 (byte*) gen_chargen_sprite::chargen#0
Successful SSA optimization Pass2RedundantPhiElimination
Inlining constant with var siblings (const word) setFAC::w#2
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#0
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#1
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#2
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#3
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#4
Inlining constant with var siblings (const byte*) addMEMtoFAC::mem#0
Inlining constant with var siblings (const byte*) addMEMtoFAC::mem#1
Inlining constant with var siblings (const byte*) divMEMbyFAC::mem#0
Inlining constant with var siblings (const byte*) divMEMbyFAC::mem#1
Inlining constant with var siblings (const byte*) mulFACbyMEM::mem#0
Inlining constant with var siblings (const byte*) mulFACbyMEM::mem#1
Inlining constant with var siblings (const byte) init::i#0
Inlining constant with var siblings (const byte*) clear_screen::sc#0
Inlining constant with var siblings (const byte*) progress_init::line#0
Inlining constant with var siblings (const byte*) progress_init::line#1
Inlining constant with var siblings (const byte) anim::j2#0
Inlining constant with var siblings (const byte) anim::x_msb#0
Inlining constant with var siblings (const byte) anim::j#0
Inlining constant with var siblings (const byte) place_sprites::spr_x#0
Inlining constant with var siblings (const byte) place_sprites::j2#0
Inlining constant with var siblings (const byte) place_sprites::col#0
Inlining constant with var siblings (const byte) place_sprites::j#0
Inlining constant with var siblings (const byte) place_sprites::spr_id#0
Inlining constant with var siblings (const byte) gen_sprites::i#0
Inlining constant with var siblings (const byte*) gen_sprites::spr#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::y#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::s_gen#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::s_gen_cnt#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::x#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::c#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::b#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::c#1
Inlining constant with var siblings (const byte) gen_chargen_sprite::s_gen#2
Inlining constant with var siblings (const byte) gen_chargen_sprite::s_gen_cnt#2
Inlining constant with var siblings (const byte) gen_sintab::min#0
Inlining constant with var siblings (const byte) gen_sintab::max#0
Inlining constant with var siblings (const byte) gen_sintab::min#1
Inlining constant with var siblings (const byte) gen_sintab::max#1
Inlining constant with var siblings (const byte) gen_sintab::i#0
Inlining constant with var siblings (const byte*) gen_sintab::sintab#0
Inlining constant with var siblings (const byte) gen_sintab::length#0
Inlining constant with var siblings (const byte*) gen_sintab::sintab#1
Inlining constant with var siblings (const byte) gen_sintab::length#1
Inlining constant with var siblings (const byte) progress_idx#23
Inlining constant with var siblings (const byte) progress_idx#11
Inlining constant with var siblings (const byte) sin_idx_x#16
Inlining constant with var siblings (const byte) sin_idx_y#17
Inlining constant with var siblings (const byte) sin_idx_x#4
Inlining constant with var siblings (const byte) sin_idx_y#4
Constant inlined setFAC::w#2 = (byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined place_sprites::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_sintab::length#1 = (const byte) sinlen_y#0
Constant inlined progress_idx#23 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_chargen_sprite::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined place_sprites::spr_id#0 = ((byte))(const byte*) sprites#0/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined divMEMbyFAC::mem#1 = (const byte[]) gen_sintab::f_i#0
Constant inlined divMEMbyFAC::mem#0 = (const byte[]) gen_sintab::f_amp#0
Constant inlined setMEMtoFAC::mem#3 = (const byte[]) gen_sintab::f_min#0
Constant inlined setMEMtoFAC::mem#2 = (const byte[]) gen_sintab::f_amp#0
Constant inlined setMEMtoFAC::mem#1 = (const byte[]) gen_sintab::f_amp#0
Constant inlined setMEMtoFAC::mem#0 = (const byte[]) gen_sintab::f_min#0
Constant inlined gen_chargen_sprite::c#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined setMEMtoFAC::mem#4 = (const byte[]) gen_sintab::f_i#0
Constant inlined addMEMtoFAC::mem#0 = (const byte[]) gen_sintab::f_min#0
Constant inlined addMEMtoFAC::mem#1 = (const byte[]) gen_sintab::f_min#0
Constant inlined gen_sprites::spr#0 = (const byte*) sprites#0
Constant inlined clear_screen::sc#0 = (const byte*) SCREEN#0
Constant inlined sin_idx_y#17 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_chargen_sprite::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_sintab::sintab#0 = (const byte[$dd]) sintab_x#0
Constant inlined place_sprites::j2#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_sintab::sintab#1 = (const byte[$c5]) sintab_y#0
Constant inlined sin_idx_x#4 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_sintab::length#0 = (const byte) sinlen_x#0
Constant inlined gen_sintab::max#0 = (byte/word/signed word/dword/signed dword) $ff
Constant inlined gen_sintab::max#1 = (byte/word/signed word/dword/signed dword) $d0
Constant inlined mulFACbyMEM::mem#0 = (const byte*) gen_sintab::f_2pi#0
Constant inlined mulFACbyMEM::mem#1 = (const byte[]) gen_sintab::f_amp#0
Constant inlined gen_sintab::min#1 = (byte/signed byte/word/signed word/dword/signed dword) $32
Constant inlined clear_screen::$0 = (const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8
Constant inlined init::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_sintab::min#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined place_sprites::$4 = (byte/signed byte/word/signed word/dword/signed dword) 7^(byte/signed byte/word/signed word/dword/signed dword) 5
Constant inlined sin_idx_x#16 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined progress_init::line#0 = (const byte*) SCREEN#0
Constant inlined gen_chargen_sprite::s_gen_cnt#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined place_sprites::$1 = (const byte*) sprites#0/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined gen_chargen_sprite::s_gen_cnt#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined progress_init::line#1 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined anim::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_chargen_sprite::b#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined anim::$0 = ((word))(byte/signed byte/word/signed word/dword/signed dword) $1e
Constant inlined gen_sintab::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_chargen_sprite::s_gen#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined place_sprites::spr_x#0 = (byte/signed byte/word/signed word/dword/signed dword) $3c
Constant inlined gen_chargen_sprite::s_gen#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined anim::x_msb#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_sprites::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined place_sprites::col#0 = (byte/signed byte/word/signed word/dword/signed dword) 5
Constant inlined gen_chargen_sprite::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin_idx_y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined progress_idx#11 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gen_sprites::$3 = (const byte[]) gen_sprites::cml#0
Constant inlined anim::j2#0 = (byte/signed byte/word/signed word/dword/signed dword) $c
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (byte*) addMEMtoFAC::mem#2 (const byte[]) gen_sintab::f_min#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte*) prepareMEM::mem#2 = gen_sintab::f_min#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte*) prepareMEM::mem#2
Constant inlined prepareMEM::mem#2 = (const byte[]) gen_sintab::f_min#0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting anim::@11(between anim::@3 and anim::@1)
Added new block during phi lifting anim::@12(between anim::@1 and anim::@2)
Added new block during phi lifting anim::@13(between anim::@2 and anim::@3)
Added new block during phi lifting anim::@14(between anim::@8 and anim::@4)
Added new block during phi lifting anim::@15(between anim::@4 and anim::@5)
Added new block during phi lifting init::@11(between init::@1 and init::@1)
Added new block during phi lifting clear_screen::@3(between clear_screen::@1 and clear_screen::@1)
Added new block during phi lifting gen_sintab::@24(between gen_sintab::@23 and gen_sintab::@1)
Added new block during phi lifting progress_inc::@3(between progress_inc and progress_inc::@1)
Added new block during phi lifting gen_sprites::@4(between gen_sprites::@3 and gen_sprites::@1)
Added new block during phi lifting gen_chargen_sprite::@11(between gen_chargen_sprite::@9 and gen_chargen_sprite::@1)
Added new block during phi lifting gen_chargen_sprite::@12(between gen_chargen_sprite::@8 and gen_chargen_sprite::@2)
Added new block during phi lifting gen_chargen_sprite::@13(between gen_chargen_sprite::@5 and gen_chargen_sprite::@4)
Added new block during phi lifting gen_chargen_sprite::@14(between gen_chargen_sprite::@4 and gen_chargen_sprite::@5)
Added new block during phi lifting place_sprites::@3(between place_sprites::@1 and place_sprites::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @60
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of anim::@9
Adding NOP phi() at start of anim::@10
Adding NOP phi() at start of init
Adding NOP phi() at start of init::@2
Adding NOP phi() at start of init::@4
Adding NOP phi() at start of init::@5
Adding NOP phi() at start of init::@6
Adding NOP phi() at start of init::@7
Adding NOP phi() at start of init::@8
Adding NOP phi() at start of init::@9
Adding NOP phi() at start of clear_screen
Adding NOP phi() at start of gen_sintab::@3
Adding NOP phi() at start of gen_sintab::@5
Adding NOP phi() at start of gen_sintab::@6
Adding NOP phi() at start of gen_sintab::@7
Adding NOP phi() at start of gen_sintab::@8
Adding NOP phi() at start of gen_sintab::@9
Adding NOP phi() at start of gen_sintab::@10
Adding NOP phi() at start of gen_sintab::@11
Adding NOP phi() at start of gen_sintab::@12
Adding NOP phi() at start of gen_sintab::@14
Adding NOP phi() at start of gen_sintab::@15
Adding NOP phi() at start of gen_sintab::@17
Adding NOP phi() at start of gen_sintab::@18
Adding NOP phi() at start of gen_sintab::@19
Adding NOP phi() at start of gen_sintab::@20
Adding NOP phi() at start of gen_sintab::@21
Adding NOP phi() at start of addMEMtoFAC
Adding NOP phi() at start of gen_sprites
Adding NOP phi() at start of gen_chargen_sprite::@6
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to init:5 anim:9 
Calls in [init] to clear_screen:59 place_sprites:66 gen_sprites:68 progress_init:70 gen_sintab:72 progress_init:74 gen_sintab:76 clear_screen:78 
Calls in [gen_sintab] to setFAC:91 setARGtoFAC:93 setFAC:97 setMEMtoFAC:99 subFACfromARG:101 setMEMtoFAC:103 setFAC:105 divMEMbyFAC:107 setMEMtoFAC:109 addMEMtoFAC:111 setMEMtoFAC:113 setFAC:118 mulFACbyMEM:120 setMEMtoFAC:122 setFAC:125 divMEMbyFAC:127 sinFAC:129 mulFACbyMEM:131 addMEMtoFAC:133 getFAC:135 progress_inc:140 
Calls in [addMEMtoFAC] to prepareMEM:161 
Calls in [mulFACbyMEM] to prepareMEM:173 
Calls in [divMEMbyFAC] to prepareMEM:181 
Calls in [setFAC] to prepareMEM:186 
Calls in [setMEMtoFAC] to prepareMEM:192 
Calls in [gen_sprites] to gen_chargen_sprite:206 

Created 50 initial phi equivalence classes
Coalesced [10] sin_idx_x#27 ← sin_idx_x#11
Coalesced [11] sin_idx_y#27 ← sin_idx_y#11
Coalesced [15] anim::xidx#8 ← anim::xidx#0
Coalesced [16] anim::yidx#8 ← anim::yidx#0
Coalesced [28] anim::xidx#11 ← anim::xidx#2
Coalesced [33] anim::yidx#11 ← anim::yidx#2
Coalesced [49] sin_idx_y#28 ← sin_idx_y#3
Coalesced [50] sin_idx_x#28 ← sin_idx_x#3
Coalesced [51] anim::xidx#9 ← anim::xidx#5
Coalesced [52] anim::x_msb#8 ← anim::x_msb#1
Coalesced [53] anim::j2#7 ← anim::j2#1
Coalesced [54] anim::yidx#9 ← anim::yidx#6
Coalesced [55] anim::j#7 ← anim::j#1
Coalesced [56] anim::yidx#10 ← anim::yidx#1
Coalesced [57] anim::xidx#10 ← anim::xidx#1
Coalesced [80] init::i#3 ← init::i#1
Coalesced [87] clear_screen::sc#3 ← clear_screen::sc#1
Coalesced [90] setFAC::w#6 ← setFAC::w#0
Coalesced [96] setFAC::w#9 ← setFAC::w#1
Coalesced [114] progress_cursor#66 ← progress_cursor#22
Coalesced [117] setFAC::w#7 ← setFAC::w#3
Coalesced [124] setFAC::w#8 ← setFAC::w#4
Coalesced [144] gen_sintab::i#13 ← gen_sintab::i#1
Coalesced [145] progress_idx#66 ← progress_idx#12
Coalesced [146] progress_cursor#67 ← progress_cursor#11
Coalesced [151] progress_cursor#69 ← progress_cursor#10
Coalesced [155] progress_idx#67 ← progress_idx#10
Coalesced (already) [156] progress_cursor#68 ← progress_cursor#34
Coalesced [172] prepareMEM::mem#7 ← prepareMEM::mem#4
Coalesced [180] prepareMEM::mem#6 ← prepareMEM::mem#3
Coalesced [191] prepareMEM::mem#9 ← prepareMEM::mem#1
Coalesced [200] progress_cursor#22 ← progress_init::line#2
Coalesced [211] gen_sprites::i#4 ← gen_sprites::i#1
Coalesced [212] gen_sprites::spr#4 ← gen_sprites::spr#1
Coalesced [218] gen_chargen_sprite::sprite#13 ← gen_chargen_sprite::sprite#0
Coalesced [221] gen_chargen_sprite::bits#9 ← gen_chargen_sprite::bits#0
Coalesced [222] gen_chargen_sprite::sprite#15 ← gen_chargen_sprite::sprite#11
Coalesced [228] gen_chargen_sprite::s_gen#11 ← gen_chargen_sprite::s_gen#5
Coalesced [229] gen_chargen_sprite::s_gen_cnt#10 ← gen_chargen_sprite::s_gen_cnt#4
Coalesced [230] gen_chargen_sprite::sprite#17 ← gen_chargen_sprite::sprite#10
Coalesced [240] gen_chargen_sprite::sprite#20 ← gen_chargen_sprite::sprite#1
Coalesced [253] gen_chargen_sprite::y#11 ← gen_chargen_sprite::y#1
Coalesced [254] gen_chargen_sprite::sprite#14 ← gen_chargen_sprite::sprite#2
Coalesced [255] gen_chargen_sprite::bits#10 ← gen_chargen_sprite::bits#1
Coalesced [256] gen_chargen_sprite::s_gen#10 ← gen_chargen_sprite::s_gen#6
Coalesced [257] gen_chargen_sprite::s_gen_cnt#9 ← gen_chargen_sprite::s_gen_cnt#5
Coalesced [258] gen_chargen_sprite::sprite#16 ← gen_chargen_sprite::sprite#4
Coalesced [259] gen_chargen_sprite::x#9 ← gen_chargen_sprite::x#1
Coalesced (already) [260] gen_chargen_sprite::s_gen#12 ← gen_chargen_sprite::s_gen#6
Coalesced (already) [261] gen_chargen_sprite::s_gen_cnt#11 ← gen_chargen_sprite::s_gen_cnt#5
Coalesced [262] gen_chargen_sprite::b#5 ← gen_chargen_sprite::b#1
Coalesced (already) [263] gen_chargen_sprite::sprite#18 ← gen_chargen_sprite::sprite#4
Coalesced [264] gen_chargen_sprite::s_gen#13 ← gen_chargen_sprite::s_gen#1
Coalesced [265] gen_chargen_sprite::s_gen_cnt#12 ← gen_chargen_sprite::s_gen_cnt#1
Coalesced (already) [266] gen_chargen_sprite::sprite#19 ← gen_chargen_sprite::sprite#3
Coalesced [283] place_sprites::spr_id#3 ← place_sprites::spr_id#1
Coalesced [284] place_sprites::j#3 ← place_sprites::j#1
Coalesced [285] place_sprites::spr_x#3 ← place_sprites::spr_x#1
Coalesced [286] place_sprites::j2#4 ← place_sprites::j2#2
Coalesced [287] place_sprites::col#3 ← place_sprites::col#1
Coalesced down to 36 phi equivalence classes
Culled Empty Block (label) anim::@9
Culled Empty Block (label) anim::@10
Culled Empty Block (label) anim::@11
Culled Empty Block (label) anim::@13
Culled Empty Block (label) anim::@12
Culled Empty Block (label) init::@11
Culled Empty Block (label) clear_screen::@3
Culled Empty Block (label) gen_sintab::@24
Culled Empty Block (label) progress_inc::@3
Culled Empty Block (label) gen_sprites::@4
Culled Empty Block (label) gen_chargen_sprite::@11
Culled Empty Block (label) gen_chargen_sprite::@12
Culled Empty Block (label) gen_chargen_sprite::@13
Culled Empty Block (label) gen_chargen_sprite::@14
Culled Empty Block (label) place_sprites::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @60
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of anim::@15
Adding NOP phi() at start of anim::@14
Adding NOP phi() at start of init
Adding NOP phi() at start of init::@2
Adding NOP phi() at start of init::@4
Adding NOP phi() at start of init::@5
Adding NOP phi() at start of init::@6
Adding NOP phi() at start of init::@7
Adding NOP phi() at start of init::@8
Adding NOP phi() at start of init::@9
Adding NOP phi() at start of clear_screen
Adding NOP phi() at start of gen_sintab::@3
Adding NOP phi() at start of gen_sintab::@5
Adding NOP phi() at start of gen_sintab::@6
Adding NOP phi() at start of gen_sintab::@7
Adding NOP phi() at start of gen_sintab::@8
Adding NOP phi() at start of gen_sintab::@9
Adding NOP phi() at start of gen_sintab::@10
Adding NOP phi() at start of gen_sintab::@11
Adding NOP phi() at start of gen_sintab::@12
Adding NOP phi() at start of gen_sintab::@14
Adding NOP phi() at start of gen_sintab::@15
Adding NOP phi() at start of gen_sintab::@17
Adding NOP phi() at start of gen_sintab::@18
Adding NOP phi() at start of gen_sintab::@19
Adding NOP phi() at start of gen_sintab::@20
Adding NOP phi() at start of gen_sintab::@21
Adding NOP phi() at start of addMEMtoFAC
Adding NOP phi() at start of gen_sprites
Adding NOP phi() at start of gen_chargen_sprite::@6

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@60
@60: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @60
  [3] phi()
main: scope:[main]  from @60
  [4] phi()
  [5] call init 
  to:main::@2
main::@2: scope:[main]  from main main::@2 main::@3
  [6] (byte) sin_idx_y#13 ← phi( main::@3/(byte) sin_idx_y#11 main/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [6] (byte) sin_idx_x#13 ← phi( main::@3/(byte) sin_idx_x#11 main/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [7] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] phi()
  [9] call anim 
  to:main::@2
anim: scope:[anim]  from main::@3
  [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  [11] (byte) anim::xidx#0 ← (byte) sin_idx_x#13
  [12] (byte) anim::yidx#0 ← (byte) sin_idx_y#13
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@3
  [13] (byte) anim::j#2 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@3/(byte) anim::j#1 )
  [13] (byte) anim::yidx#3 ← phi( anim/(byte) anim::yidx#0 anim::@3/(byte) anim::yidx#6 )
  [13] (byte) anim::j2#2 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) $c anim::@3/(byte) anim::j2#1 )
  [13] (byte) anim::x_msb#2 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@3/(byte) anim::x_msb#1 )
  [13] (byte) anim::xidx#3 ← phi( anim/(byte) anim::xidx#0 anim::@3/(byte) anim::xidx#5 )
  [14] (word) anim::x#0 ← ((word))(byte/signed byte/word/signed word/dword/signed dword) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3)
  [15] (byte~) anim::$2 ← (byte) anim::x_msb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [16] (byte~) anim::$3 ← > (word) anim::x#0
  [17] (byte) anim::x_msb#1 ← (byte~) anim::$2 | (byte~) anim::$3
  [18] (byte~) anim::$5 ← < (word) anim::x#0
  [19] *((const byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$5
  [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3)
  [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte/signed byte/word/signed word/dword/signed dword) $a
  [22] if((byte) anim::xidx#1<(const byte) sinlen_x#0) goto anim::@2
  to:anim::@6
anim::@6: scope:[anim]  from anim::@1
  [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0
  to:anim::@2
anim::@2: scope:[anim]  from anim::@1 anim::@6
  [24] (byte) anim::xidx#5 ← phi( anim::@1/(byte) anim::xidx#1 anim::@6/(byte) anim::xidx#2 )
  [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte/signed byte/word/signed word/dword/signed dword) 8
  [26] if((byte) anim::yidx#1<(const byte) sinlen_y#0) goto anim::@3
  to:anim::@7
anim::@7: scope:[anim]  from anim::@2
  [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0
  to:anim::@3
anim::@3: scope:[anim]  from anim::@2 anim::@7
  [28] (byte) anim::yidx#6 ← phi( anim::@2/(byte) anim::yidx#1 anim::@7/(byte) anim::yidx#2 )
  [29] (byte) anim::j2#1 ← (byte) anim::j2#2 - (byte/signed byte/word/signed word/dword/signed dword) 2
  [30] (byte) anim::j#1 ← ++ (byte) anim::j#2
  [31] if((byte) anim::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto anim::@1
  to:anim::@8
anim::@8: scope:[anim]  from anim::@3
  [32] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#1
  [33] (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#13
  [34] if((byte) sin_idx_x#3<(const byte) sinlen_x#0) goto anim::@14
  to:anim::@4
anim::@4: scope:[anim]  from anim::@14 anim::@8
  [35] (byte) sin_idx_x#11 ← phi( anim::@14/(byte) sin_idx_x#3 anim::@8/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [36] (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#13
  [37] if((byte) sin_idx_y#3<(const byte) sinlen_y#0) goto anim::@15
  to:anim::@5
anim::@5: scope:[anim]  from anim::@15 anim::@4
  [38] (byte) sin_idx_y#11 ← phi( anim::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@15/(byte) sin_idx_y#3 )
  [39] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0)
  to:anim::@return
anim::@return: scope:[anim]  from anim::@5
  [40] return 
  to:@return
anim::@15: scope:[anim]  from anim::@4
  [41] phi()
  to:anim::@5
anim::@14: scope:[anim]  from anim::@8
  [42] phi()
  to:anim::@4
init: scope:[init]  from main
  [43] phi()
  [44] call clear_screen 
  to:init::@1
init::@1: scope:[init]  from init init::@1
  [45] (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [47] *((const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) $b
  [48] (byte) init::i#1 ← ++ (byte) init::i#2
  [49] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  [50] phi()
  [51] call place_sprites 
  to:init::@4
init::@4: scope:[init]  from init::@2
  [52] phi()
  [53] call gen_sprites 
  to:init::@5
init::@5: scope:[init]  from init::@4
  [54] phi()
  [55] call progress_init 
  to:init::@6
init::@6: scope:[init]  from init::@5
  [56] phi()
  [57] call gen_sintab 
  to:init::@7
init::@7: scope:[init]  from init::@6
  [58] phi()
  [59] call progress_init 
  to:init::@8
init::@8: scope:[init]  from init::@7
  [60] phi()
  [61] call gen_sintab 
  to:init::@9
init::@9: scope:[init]  from init::@8
  [62] phi()
  [63] call clear_screen 
  to:init::@return
init::@return: scope:[init]  from init::@9
  [64] return 
  to:@return
clear_screen: scope:[clear_screen]  from init init::@9
  [65] phi()
  to:clear_screen::@1
clear_screen::@1: scope:[clear_screen]  from clear_screen clear_screen::@1
  [66] (byte*) clear_screen::sc#2 ← phi( clear_screen/(const byte*) SCREEN#0 clear_screen::@1/(byte*) clear_screen::sc#1 )
  [67] *((byte*) clear_screen::sc#2) ← (byte) ' '
  [68] (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2
  [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto clear_screen::@1
  to:clear_screen::@return
clear_screen::@return: scope:[clear_screen]  from clear_screen::@1
  [70] return 
  to:@return
gen_sintab: scope:[gen_sintab]  from init::@6 init::@8
  [71] (byte*) gen_sintab::sintab#12 ← phi( init::@6/(const byte[$dd]) sintab_x#0 init::@8/(const byte[$c5]) sintab_y#0 )
  [71] (byte) gen_sintab::length#10 ← phi( init::@6/(const byte) sinlen_x#0 init::@8/(const byte) sinlen_y#0 )
  [71] (byte) gen_sintab::min#2 ← phi( init::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 init::@8/(byte/signed byte/word/signed word/dword/signed dword) $32 )
  [71] (byte) gen_sintab::max#2 ← phi( init::@6/(byte/word/signed word/dword/signed dword) $ff init::@8/(byte/word/signed word/dword/signed dword) $d0 )
  [72] (word) setFAC::w#0 ← ((word)) (byte) gen_sintab::max#2
  [73] call setFAC 
  to:gen_sintab::@3
gen_sintab::@3: scope:[gen_sintab]  from gen_sintab
  [74] phi()
  [75] call setARGtoFAC 
  to:gen_sintab::@4
gen_sintab::@4: scope:[gen_sintab]  from gen_sintab::@3
  asm { lda#0 ldx#0 ldy#0  }
  [77] (word) setFAC::w#1 ← ((word)) (byte) gen_sintab::min#2
  [78] call setFAC 
  to:gen_sintab::@5
gen_sintab::@5: scope:[gen_sintab]  from gen_sintab::@4
  [79] phi()
  [80] call setMEMtoFAC 
  to:gen_sintab::@6
gen_sintab::@6: scope:[gen_sintab]  from gen_sintab::@5
  [81] phi()
  [82] call subFACfromARG 
  to:gen_sintab::@7
gen_sintab::@7: scope:[gen_sintab]  from gen_sintab::@6
  [83] phi()
  [84] call setMEMtoFAC 
  to:gen_sintab::@8
gen_sintab::@8: scope:[gen_sintab]  from gen_sintab::@7
  [85] phi()
  [86] call setFAC 
  to:gen_sintab::@9
gen_sintab::@9: scope:[gen_sintab]  from gen_sintab::@8
  [87] phi()
  [88] call divMEMbyFAC 
  to:gen_sintab::@10
gen_sintab::@10: scope:[gen_sintab]  from gen_sintab::@9
  [89] phi()
  [90] call setMEMtoFAC 
  to:gen_sintab::@11
gen_sintab::@11: scope:[gen_sintab]  from gen_sintab::@10
  [91] phi()
  [92] call addMEMtoFAC 
  to:gen_sintab::@12
gen_sintab::@12: scope:[gen_sintab]  from gen_sintab::@11
  [93] phi()
  [94] call setMEMtoFAC 
  to:gen_sintab::@1
gen_sintab::@1: scope:[gen_sintab]  from gen_sintab::@12 gen_sintab::@23
  [95] (byte*) progress_cursor#34 ← phi( gen_sintab::@12/(byte*) progress_init::line#2 gen_sintab::@23/(byte*) progress_cursor#11 )
  [95] (byte) progress_idx#34 ← phi( gen_sintab::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_sintab::@23/(byte) progress_idx#12 )
  [95] (byte) gen_sintab::i#10 ← phi( gen_sintab::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_sintab::@23/(byte) gen_sintab::i#1 )
  [96] (word) setFAC::w#3 ← ((word)) (byte) gen_sintab::i#10
  [97] call setFAC 
  to:gen_sintab::@14
gen_sintab::@14: scope:[gen_sintab]  from gen_sintab::@1
  [98] phi()
  [99] call mulFACbyMEM 
  to:gen_sintab::@15
gen_sintab::@15: scope:[gen_sintab]  from gen_sintab::@14
  [100] phi()
  [101] call setMEMtoFAC 
  to:gen_sintab::@16
gen_sintab::@16: scope:[gen_sintab]  from gen_sintab::@15
  [102] (word) setFAC::w#4 ← ((word)) (byte) gen_sintab::length#10
  [103] call setFAC 
  to:gen_sintab::@17
gen_sintab::@17: scope:[gen_sintab]  from gen_sintab::@16
  [104] phi()
  [105] call divMEMbyFAC 
  to:gen_sintab::@18
gen_sintab::@18: scope:[gen_sintab]  from gen_sintab::@17
  [106] phi()
  [107] call sinFAC 
  to:gen_sintab::@19
gen_sintab::@19: scope:[gen_sintab]  from gen_sintab::@18
  [108] phi()
  [109] call mulFACbyMEM 
  to:gen_sintab::@20
gen_sintab::@20: scope:[gen_sintab]  from gen_sintab::@19
  [110] phi()
  [111] call addMEMtoFAC 
  to:gen_sintab::@21
gen_sintab::@21: scope:[gen_sintab]  from gen_sintab::@20
  [112] phi()
  [113] call getFAC 
  [114] (word) getFAC::return#2 ← (word) getFAC::return#0
  to:gen_sintab::@22
gen_sintab::@22: scope:[gen_sintab]  from gen_sintab::@21
  [115] (word~) gen_sintab::$23 ← (word) getFAC::return#2
  [116] (byte~) gen_sintab::$24 ← ((byte)) (word~) gen_sintab::$23
  [117] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24
  [118] call progress_inc 
  to:gen_sintab::@23
gen_sintab::@23: scope:[gen_sintab]  from gen_sintab::@22
  [119] (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#10
  [120] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1
  to:gen_sintab::@return
gen_sintab::@return: scope:[gen_sintab]  from gen_sintab::@23
  [121] return 
  to:@return
progress_inc: scope:[progress_inc]  from gen_sintab::@22
  [122] (byte) progress_idx#10 ← ++ (byte) progress_idx#34
  [123] if((byte) progress_idx#10!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto progress_inc::@1
  to:progress_inc::@2
progress_inc::@2: scope:[progress_inc]  from progress_inc
  [124] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte/signed byte/word/signed word/dword/signed dword) 8)
  [125] (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#34
  to:progress_inc::@1
progress_inc::@1: scope:[progress_inc]  from progress_inc progress_inc::@2
  [126] (byte*) progress_cursor#11 ← phi( progress_inc/(byte*) progress_cursor#34 progress_inc::@2/(byte*) progress_cursor#10 )
  [126] (byte) progress_idx#12 ← phi( progress_inc/(byte) progress_idx#10 progress_inc::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [127] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12)
  to:progress_inc::@return
progress_inc::@return: scope:[progress_inc]  from progress_inc::@1
  [128] return 
  to:@return
getFAC: scope:[getFAC]  from gen_sintab::@21
  asm { jsr$b1aa sty$fe sta$ff  }
  [130] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0)
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  [131] return 
  to:@return
addMEMtoFAC: scope:[addMEMtoFAC]  from gen_sintab::@11 gen_sintab::@20
  [132] phi()
  [133] call prepareMEM 
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC
  asm { lda$fe ldy$ff jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  [135] return 
  to:@return
prepareMEM: scope:[prepareMEM]  from addMEMtoFAC divMEMbyFAC mulFACbyMEM setFAC setMEMtoFAC
  [136] (byte*) prepareMEM::mem#5 ← phi( addMEMtoFAC/(const byte[]) gen_sintab::f_min#0 divMEMbyFAC/(byte*) prepareMEM::mem#3 mulFACbyMEM/(byte*) prepareMEM::mem#4 setFAC/(byte*~) prepareMEM::mem#8 setMEMtoFAC/(byte*) prepareMEM::mem#1 )
  [137] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5
  [138] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0
  [139] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5
  [140] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1
  to:prepareMEM::@return
prepareMEM::@return: scope:[prepareMEM]  from prepareMEM
  [141] return 
  to:@return
mulFACbyMEM: scope:[mulFACbyMEM]  from gen_sintab::@14 gen_sintab::@19
  [142] (byte*) mulFACbyMEM::mem#2 ← phi( gen_sintab::@14/(const byte*) gen_sintab::f_2pi#0 gen_sintab::@19/(const byte[]) gen_sintab::f_amp#0 )
  [143] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
  [144] call prepareMEM 
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM
  asm { lda$fe ldy$ff jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  [146] return 
  to:@return
sinFAC: scope:[sinFAC]  from gen_sintab::@18
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  [148] return 
  to:@return
divMEMbyFAC: scope:[divMEMbyFAC]  from gen_sintab::@17 gen_sintab::@9
  [149] (byte*) divMEMbyFAC::mem#2 ← phi( gen_sintab::@17/(const byte[]) gen_sintab::f_i#0 gen_sintab::@9/(const byte[]) gen_sintab::f_amp#0 )
  [150] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2
  [151] call prepareMEM 
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC
  asm { lda$fe ldy$ff jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  [153] return 
  to:@return
setFAC: scope:[setFAC]  from gen_sintab gen_sintab::@1 gen_sintab::@16 gen_sintab::@4 gen_sintab::@8
  [154] (word) setFAC::w#5 ← phi( gen_sintab/(word) setFAC::w#0 gen_sintab::@1/(word) setFAC::w#3 gen_sintab::@16/(word) setFAC::w#4 gen_sintab::@4/(word) setFAC::w#1 gen_sintab::@8/(byte/signed byte/word/signed word/dword/signed dword) 2 )
  [155] (byte*~) prepareMEM::mem#8 ← (byte*)(word) setFAC::w#5
  [156] call prepareMEM 
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC
  asm { ldy$fe lda$ff jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  [158] return 
  to:@return
setMEMtoFAC: scope:[setMEMtoFAC]  from gen_sintab::@10 gen_sintab::@12 gen_sintab::@15 gen_sintab::@5 gen_sintab::@7
  [159] (byte*) setMEMtoFAC::mem#5 ← phi( gen_sintab::@10/(const byte[]) gen_sintab::f_amp#0 gen_sintab::@12/(const byte[]) gen_sintab::f_min#0 gen_sintab::@15/(const byte[]) gen_sintab::f_i#0 gen_sintab::@5/(const byte[]) gen_sintab::f_min#0 gen_sintab::@7/(const byte[]) gen_sintab::f_amp#0 )
  [160] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5
  [161] call prepareMEM 
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC
  asm { ldx$fe ldy$ff jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  [163] return 
  to:@return
subFACfromARG: scope:[subFACfromARG]  from gen_sintab::@6
  asm { jsr$b853  }
  to:subFACfromARG::@return
subFACfromARG::@return: scope:[subFACfromARG]  from subFACfromARG
  [165] return 
  to:@return
setARGtoFAC: scope:[setARGtoFAC]  from gen_sintab::@3
  asm { jsr$bc0f  }
  to:setARGtoFAC::@return
setARGtoFAC::@return: scope:[setARGtoFAC]  from setARGtoFAC
  [167] return 
  to:@return
progress_init: scope:[progress_init]  from init::@5 init::@7
  [168] (byte*) progress_init::line#2 ← phi( init::@5/(const byte*) SCREEN#0 init::@7/(const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28 )
  to:progress_init::@return
progress_init::@return: scope:[progress_init]  from progress_init
  [169] return 
  to:@return
gen_sprites: scope:[gen_sprites]  from init::@4
  [170] phi()
  to:gen_sprites::@1
gen_sprites::@1: scope:[gen_sprites]  from gen_sprites gen_sprites::@3
  [171] (byte*) gen_sprites::spr#2 ← phi( gen_sprites/(const byte*) sprites#0 gen_sprites::@3/(byte*) gen_sprites::spr#1 )
  [171] (byte) gen_sprites::i#2 ← phi( gen_sprites/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_sprites::@3/(byte) gen_sprites::i#1 )
  [172] (byte) gen_chargen_sprite::ch#0 ← *((const byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2)
  [173] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2
  [174] call gen_chargen_sprite 
  to:gen_sprites::@3
gen_sprites::@3: scope:[gen_sprites]  from gen_sprites::@1
  [175] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte/signed byte/word/signed word/dword/signed dword) $40
  [176] (byte) gen_sprites::i#1 ← ++ (byte) gen_sprites::i#2
  [177] if((byte) gen_sprites::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto gen_sprites::@1
  to:gen_sprites::@return
gen_sprites::@return: scope:[gen_sprites]  from gen_sprites::@3
  [178] return 
  to:@return
gen_chargen_sprite: scope:[gen_chargen_sprite]  from gen_sprites::@1
  [179] (word~) gen_chargen_sprite::$0 ← ((word)) (byte) gen_chargen_sprite::ch#0
  [180] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte/signed byte/word/signed word/dword/signed dword) 3
  [181] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1
  asm { sei  }
  [183] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32
  to:gen_chargen_sprite::@1
gen_chargen_sprite::@1: scope:[gen_chargen_sprite]  from gen_chargen_sprite gen_chargen_sprite::@9
  [184] (byte*) gen_chargen_sprite::sprite#11 ← phi( gen_chargen_sprite/(byte*) gen_chargen_sprite::sprite#0 gen_chargen_sprite::@9/(byte*) gen_chargen_sprite::sprite#2 )
  [184] (byte) gen_chargen_sprite::y#2 ← phi( gen_chargen_sprite/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@9/(byte) gen_chargen_sprite::y#1 )
  [185] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2)
  to:gen_chargen_sprite::@2
gen_chargen_sprite::@2: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@1 gen_chargen_sprite::@8
  [186] (byte) gen_chargen_sprite::x#6 ← phi( gen_chargen_sprite::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::x#1 )
  [186] (byte*) gen_chargen_sprite::sprite#10 ← phi( gen_chargen_sprite::@1/(byte*) gen_chargen_sprite::sprite#11 gen_chargen_sprite::@8/(byte*) gen_chargen_sprite::sprite#4 )
  [186] (byte) gen_chargen_sprite::s_gen_cnt#4 ← phi( gen_chargen_sprite::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  [186] (byte) gen_chargen_sprite::s_gen#5 ← phi( gen_chargen_sprite::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::s_gen#6 )
  [186] (byte) gen_chargen_sprite::bits#2 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::bits#0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::bits#1 )
  [187] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte/word/signed word/dword/signed dword) $80
  [188] if((byte~) gen_chargen_sprite::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gen_chargen_sprite::@3
  to:gen_chargen_sprite::@6
gen_chargen_sprite::@6: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@2
  [189] phi()
  to:gen_chargen_sprite::@3
gen_chargen_sprite::@3: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@2 gen_chargen_sprite::@6
  [190] (byte) gen_chargen_sprite::c#3 ← phi( gen_chargen_sprite::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@6/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  to:gen_chargen_sprite::@4
gen_chargen_sprite::@4: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@3 gen_chargen_sprite::@5
  [191] (byte*) gen_chargen_sprite::sprite#3 ← phi( gen_chargen_sprite::@3/(byte*) gen_chargen_sprite::sprite#10 gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::sprite#4 )
  [191] (byte) gen_chargen_sprite::b#2 ← phi( gen_chargen_sprite::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::b#1 )
  [191] (byte) gen_chargen_sprite::s_gen_cnt#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  [191] (byte) gen_chargen_sprite::s_gen#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen#5 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen#6 )
  [192] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [193] (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#3
  [194] (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3
  [195] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@5
  to:gen_chargen_sprite::@7
gen_chargen_sprite::@7: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4
  [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) gen_chargen_sprite::s_gen#1
  [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) gen_chargen_sprite::s_gen#1
  [198] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) gen_chargen_sprite::s_gen#1
  [199] (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3
  to:gen_chargen_sprite::@5
gen_chargen_sprite::@5: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4 gen_chargen_sprite::@7
  [200] (byte*) gen_chargen_sprite::sprite#4 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::sprite#3 gen_chargen_sprite::@7/(byte*) gen_chargen_sprite::sprite#1 )
  [200] (byte) gen_chargen_sprite::s_gen_cnt#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen_cnt#1 gen_chargen_sprite::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [200] (byte) gen_chargen_sprite::s_gen#6 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen#1 gen_chargen_sprite::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [201] (byte) gen_chargen_sprite::b#1 ← ++ (byte) gen_chargen_sprite::b#2
  [202] if((byte) gen_chargen_sprite::b#1!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto gen_chargen_sprite::@4
  to:gen_chargen_sprite::@8
gen_chargen_sprite::@8: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@5
  [203] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [204] (byte) gen_chargen_sprite::x#1 ← ++ (byte) gen_chargen_sprite::x#6
  [205] if((byte) gen_chargen_sprite::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@2
  to:gen_chargen_sprite::@9
gen_chargen_sprite::@9: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@8
  [206] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte/signed byte/word/signed word/dword/signed dword) 6
  [207] (byte) gen_chargen_sprite::y#1 ← ++ (byte) gen_chargen_sprite::y#2
  [208] if((byte) gen_chargen_sprite::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@1
  to:gen_chargen_sprite::@10
gen_chargen_sprite::@10: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@9
  [209] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37
  asm { cli  }
  to:gen_chargen_sprite::@return
gen_chargen_sprite::@return: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@10
  [211] return 
  to:@return
place_sprites: scope:[place_sprites]  from init::@2
  [212] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  [213] *((const byte*) SPRITES_EXPAND_X#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  [214] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  to:place_sprites::@1
place_sprites::@1: scope:[place_sprites]  from place_sprites place_sprites::@1
  [215] (byte) place_sprites::col#2 ← phi( place_sprites/(byte/signed byte/word/signed word/dword/signed dword) 5 place_sprites::@1/(byte) place_sprites::col#1 )
  [215] (byte) place_sprites::j2#3 ← phi( place_sprites/(byte/signed byte/word/signed word/dword/signed dword) 0 place_sprites::@1/(byte) place_sprites::j2#2 )
  [215] (byte) place_sprites::spr_x#2 ← phi( place_sprites/(byte/signed byte/word/signed word/dword/signed dword) $3c place_sprites::@1/(byte) place_sprites::spr_x#1 )
  [215] (byte) place_sprites::j#2 ← phi( place_sprites/(byte/signed byte/word/signed word/dword/signed dword) 0 place_sprites::@1/(byte) place_sprites::j#1 )
  [215] (byte) place_sprites::spr_id#2 ← phi( place_sprites/((byte))(const byte*) sprites#0/(byte/signed byte/word/signed word/dword/signed dword) $40 place_sprites::@1/(byte) place_sprites::spr_id#1 )
  [216] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2
  [217] (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2
  [218] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2
  [219] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte/signed byte/word/signed word/dword/signed dword) $50
  [220] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2
  [221] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) $20
  [222] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte/signed byte/word/signed word/dword/signed dword) 7^(byte/signed byte/word/signed word/dword/signed dword) 5
  [223] (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3
  [224] (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1
  [225] (byte) place_sprites::j#1 ← ++ (byte) place_sprites::j#2
  [226] if((byte) place_sprites::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto place_sprites::@1
  to:place_sprites::@return
place_sprites::@return: scope:[place_sprites]  from place_sprites::@1
  [227] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SCREEN
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(byte*) addMEMtoFAC::mem
(void()) anim()
(byte~) anim::$2 101.0
(byte~) anim::$3 202.0
(byte~) anim::$5 202.0
(byte) anim::j
(byte) anim::j#1 151.5
(byte) anim::j#2 11.882352941176471
(byte) anim::j2
(byte) anim::j2#1 67.33333333333333
(byte) anim::j2#2 25.25
(word) anim::x
(word) anim::x#0 75.75
(byte) anim::x_msb
(byte) anim::x_msb#1 13.6
(byte) anim::x_msb#2 101.0
(byte) anim::xidx
(byte) anim::xidx#0 2.0
(byte) anim::xidx#1 202.0
(byte) anim::xidx#2 202.0
(byte) anim::xidx#3 38.125
(byte) anim::xidx#5 37.875
(byte) anim::yidx
(byte) anim::yidx#0 4.0
(byte) anim::yidx#1 202.0
(byte) anim::yidx#2 202.0
(byte) anim::yidx#3 25.416666666666664
(byte) anim::yidx#6 75.75
(void()) clear_screen()
(byte*) clear_screen::sc
(byte*) clear_screen::sc#1 16.5
(byte*) clear_screen::sc#2 16.5
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(byte*) divMEMbyFAC::mem
(byte*) divMEMbyFAC::mem#2 2.0
(void()) gen_chargen_sprite((byte) gen_chargen_sprite::ch , (byte*) gen_chargen_sprite::sprite)
(word~) gen_chargen_sprite::$0 4.0
(word~) gen_chargen_sprite::$1 4.0
(byte~) gen_chargen_sprite::$3 2002.0
(byte~) gen_chargen_sprite::$6 20002.0
(byte) gen_chargen_sprite::b
(byte) gen_chargen_sprite::b#1 15001.5
(byte) gen_chargen_sprite::b#2 2000.2
(byte) gen_chargen_sprite::bits
(byte) gen_chargen_sprite::bits#0 202.0
(byte) gen_chargen_sprite::bits#1 667.3333333333334
(byte) gen_chargen_sprite::bits#2 182.58823529411765
(byte) gen_chargen_sprite::c
(byte) gen_chargen_sprite::c#3 769.3076923076923
(byte) gen_chargen_sprite::ch
(byte) gen_chargen_sprite::ch#0 6.5
(byte*) gen_chargen_sprite::chargen
(byte*) gen_chargen_sprite::chargen#0 3.678571428571429
(byte) gen_chargen_sprite::s_gen
(byte) gen_chargen_sprite::s_gen#1 10001.0
(byte) gen_chargen_sprite::s_gen#3 21003.0
(byte) gen_chargen_sprite::s_gen#5 400.4
(byte) gen_chargen_sprite::s_gen#6 3500.5
(byte) gen_chargen_sprite::s_gen_cnt
(byte) gen_chargen_sprite::s_gen_cnt#1 15001.5
(byte) gen_chargen_sprite::s_gen_cnt#3 7001.0
(byte) gen_chargen_sprite::s_gen_cnt#4 400.4
(byte) gen_chargen_sprite::s_gen_cnt#5 3500.5
(byte*) gen_chargen_sprite::sprite
(byte*) gen_chargen_sprite::sprite#0 2.1666666666666665
(byte*) gen_chargen_sprite::sprite#1 20002.0
(byte*) gen_chargen_sprite::sprite#10 420.59999999999997
(byte*) gen_chargen_sprite::sprite#11 102.0
(byte*) gen_chargen_sprite::sprite#2 67.33333333333333
(byte*) gen_chargen_sprite::sprite#3 7625.875
(byte*) gen_chargen_sprite::sprite#4 5184.166666666666
(byte) gen_chargen_sprite::x
(byte) gen_chargen_sprite::x#1 1501.5
(byte) gen_chargen_sprite::x#6 111.22222222222223
(byte) gen_chargen_sprite::y
(byte) gen_chargen_sprite::y#1 151.5
(byte) gen_chargen_sprite::y#2 13.173913043478262
(void()) gen_sintab((byte*) gen_sintab::sintab , (byte) gen_sintab::length , (byte) gen_sintab::min , (byte) gen_sintab::max)
(word~) gen_sintab::$23 22.0
(byte~) gen_sintab::$24 22.0
(byte*) gen_sintab::f_2pi
(byte[]) gen_sintab::f_amp
(byte[]) gen_sintab::f_i
(byte[]) gen_sintab::f_min
(byte) gen_sintab::i
(byte) gen_sintab::i#1 16.5
(byte) gen_sintab::i#10 1.8333333333333333
(byte) gen_sintab::length
(byte) gen_sintab::length#10 0.44
(byte) gen_sintab::max
(byte) gen_sintab::max#2 2.0
(byte) gen_sintab::min
(byte) gen_sintab::min#2 0.3333333333333333
(byte*) gen_sintab::sintab
(byte*) gen_sintab::sintab#12 0.22
(void()) gen_sprites()
(byte[]) gen_sprites::cml
(byte) gen_sprites::i
(byte) gen_sprites::i#1 16.5
(byte) gen_sprites::i#2 6.6000000000000005
(byte*) gen_sprites::spr
(byte*) gen_sprites::spr#1 7.333333333333333
(byte*) gen_sprites::spr#2 8.25
(word()) getFAC()
(word) getFAC::return
(word) getFAC::return#0 4.333333333333333
(word) getFAC::return#2 22.0
(word) getFAC::w
(void()) init()
(byte) init::i
(byte) init::i#1 16.5
(byte) init::i#2 14.666666666666666
(void()) main()
(byte*) memHi
(byte*) memLo
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#2 2.0
(void()) place_sprites()
(byte) place_sprites::col
(byte) place_sprites::col#1 4.4
(byte) place_sprites::col#2 4.714285714285714
(byte) place_sprites::j
(byte) place_sprites::j#1 16.5
(byte) place_sprites::j#2 4.4
(byte) place_sprites::j2
(byte) place_sprites::j2#1 22.0
(byte) place_sprites::j2#2 7.333333333333333
(byte) place_sprites::j2#3 5.5
(byte) place_sprites::spr_id
(byte) place_sprites::spr_id#1 2.2
(byte) place_sprites::spr_id#2 16.5
(byte) place_sprites::spr_x
(byte) place_sprites::spr_x#1 3.6666666666666665
(byte) place_sprites::spr_x#2 5.5
(byte*) place_sprites::sprites_ptr
(void()) prepareMEM((byte*) prepareMEM::mem)
(byte~) prepareMEM::$0 4.0
(byte~) prepareMEM::$1 4.0
(byte*) prepareMEM::mem
(byte*) prepareMEM::mem#1 4.0
(byte*) prepareMEM::mem#3 4.0
(byte*) prepareMEM::mem#4 4.0
(byte*) prepareMEM::mem#5 3.9999999999999996
(byte*~) prepareMEM::mem#8 4.0
(byte*) print_char_cursor
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_screen
(byte*) progress_cursor
(byte*) progress_cursor#10 4.0
(byte*) progress_cursor#11 2.8333333333333335
(byte*) progress_cursor#34 0.7307692307692306
(byte) progress_idx
(byte) progress_idx#10 3.0
(byte) progress_idx#12 2.5
(byte) progress_idx#34 0.5652173913043479
(void()) progress_inc()
(byte[]) progress_inc::progress_chars
(void()) progress_init((byte*) progress_init::line)
(byte*) progress_init::line
(byte*) progress_init::line#2 0.06666666666666667
(void()) setARGtoFAC()
(void()) setFAC((word) setFAC::w)
(word) setFAC::w
(word) setFAC::w#0 4.0
(word) setFAC::w#1 4.0
(word) setFAC::w#3 22.0
(word) setFAC::w#4 22.0
(word) setFAC::w#5 26.0
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#5 2.0
(void()) sinFAC()
(byte) sin_idx_x
(byte) sin_idx_x#11 1.625
(byte) sin_idx_x#13 0.5769230769230769
(byte) sin_idx_x#3 2.0
(byte) sin_idx_y
(byte) sin_idx_y#11 3.25
(byte) sin_idx_y#13 0.49999999999999994
(byte) sin_idx_y#3 2.0
(byte) sinlen_x
(byte) sinlen_y
(byte[$dd]) sintab_x
(byte[$c5]) sintab_y
(byte*) sprites
(void()) subFACfromARG()

Initial phi equivalence classes
[ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
[ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
[ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
[ anim::x_msb#2 anim::x_msb#1 ]
[ anim::j2#2 anim::j2#1 ]
[ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
[ anim::j#2 anim::j#1 ]
[ init::i#2 init::i#1 ]
[ clear_screen::sc#2 clear_screen::sc#1 ]
[ gen_sintab::max#2 ]
[ gen_sintab::min#2 ]
[ gen_sintab::length#10 ]
[ gen_sintab::sintab#12 ]
[ gen_sintab::i#10 gen_sintab::i#1 ]
[ progress_idx#34 progress_idx#12 progress_idx#10 ]
[ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ]
[ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 ]
[ mulFACbyMEM::mem#2 ]
[ divMEMbyFAC::mem#2 ]
[ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ]
[ setMEMtoFAC::mem#5 ]
[ gen_sprites::i#2 gen_sprites::i#1 ]
[ gen_sprites::spr#2 gen_sprites::spr#1 ]
[ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
[ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
[ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
[ gen_chargen_sprite::c#3 ]
[ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
[ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ]
[ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
[ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ]
[ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
[ place_sprites::j#2 place_sprites::j#1 ]
[ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
[ place_sprites::j2#3 place_sprites::j2#2 ]
[ place_sprites::col#2 place_sprites::col#1 ]
Added variable anim::x#0 to zero page equivalence class [ anim::x#0 ]
Added variable anim::$2 to zero page equivalence class [ anim::$2 ]
Added variable anim::$3 to zero page equivalence class [ anim::$3 ]
Added variable anim::$5 to zero page equivalence class [ anim::$5 ]
Added variable getFAC::return#2 to zero page equivalence class [ getFAC::return#2 ]
Added variable gen_sintab::$23 to zero page equivalence class [ gen_sintab::$23 ]
Added variable gen_sintab::$24 to zero page equivalence class [ gen_sintab::$24 ]
Added variable getFAC::return#0 to zero page equivalence class [ getFAC::return#0 ]
Added variable prepareMEM::$0 to zero page equivalence class [ prepareMEM::$0 ]
Added variable prepareMEM::$1 to zero page equivalence class [ prepareMEM::$1 ]
Added variable gen_chargen_sprite::ch#0 to zero page equivalence class [ gen_chargen_sprite::ch#0 ]
Added variable gen_chargen_sprite::$0 to zero page equivalence class [ gen_chargen_sprite::$0 ]
Added variable gen_chargen_sprite::$1 to zero page equivalence class [ gen_chargen_sprite::$1 ]
Added variable gen_chargen_sprite::chargen#0 to zero page equivalence class [ gen_chargen_sprite::chargen#0 ]
Added variable gen_chargen_sprite::$3 to zero page equivalence class [ gen_chargen_sprite::$3 ]
Added variable gen_chargen_sprite::$6 to zero page equivalence class [ gen_chargen_sprite::$6 ]
Added variable place_sprites::j2#1 to zero page equivalence class [ place_sprites::j2#1 ]
Complete equivalence classes
[ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
[ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
[ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
[ anim::x_msb#2 anim::x_msb#1 ]
[ anim::j2#2 anim::j2#1 ]
[ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
[ anim::j#2 anim::j#1 ]
[ init::i#2 init::i#1 ]
[ clear_screen::sc#2 clear_screen::sc#1 ]
[ gen_sintab::max#2 ]
[ gen_sintab::min#2 ]
[ gen_sintab::length#10 ]
[ gen_sintab::sintab#12 ]
[ gen_sintab::i#10 gen_sintab::i#1 ]
[ progress_idx#34 progress_idx#12 progress_idx#10 ]
[ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ]
[ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 ]
[ mulFACbyMEM::mem#2 ]
[ divMEMbyFAC::mem#2 ]
[ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ]
[ setMEMtoFAC::mem#5 ]
[ gen_sprites::i#2 gen_sprites::i#1 ]
[ gen_sprites::spr#2 gen_sprites::spr#1 ]
[ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
[ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
[ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
[ gen_chargen_sprite::c#3 ]
[ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
[ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ]
[ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
[ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ]
[ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
[ place_sprites::j#2 place_sprites::j#1 ]
[ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
[ place_sprites::j2#3 place_sprites::j2#2 ]
[ place_sprites::col#2 place_sprites::col#1 ]
[ anim::x#0 ]
[ anim::$2 ]
[ anim::$3 ]
[ anim::$5 ]
[ getFAC::return#2 ]
[ gen_sintab::$23 ]
[ gen_sintab::$24 ]
[ getFAC::return#0 ]
[ prepareMEM::$0 ]
[ prepareMEM::$1 ]
[ gen_chargen_sprite::ch#0 ]
[ gen_chargen_sprite::$0 ]
[ gen_chargen_sprite::$1 ]
[ gen_chargen_sprite::chargen#0 ]
[ gen_chargen_sprite::$3 ]
[ gen_chargen_sprite::$6 ]
[ place_sprites::j2#1 ]
Allocated zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
Allocated zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
Allocated zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
Allocated zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ]
Allocated zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ]
Allocated zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
Allocated zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ]
Allocated zp ZP_BYTE:9 [ init::i#2 init::i#1 ]
Allocated zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 ]
Allocated zp ZP_BYTE:12 [ gen_sintab::max#2 ]
Allocated zp ZP_BYTE:13 [ gen_sintab::min#2 ]
Allocated zp ZP_BYTE:14 [ gen_sintab::length#10 ]
Allocated zp ZP_WORD:15 [ gen_sintab::sintab#12 ]
Allocated zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ]
Allocated zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Allocated zp ZP_WORD:19 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ]
Allocated zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 ]
Allocated zp ZP_WORD:23 [ mulFACbyMEM::mem#2 ]
Allocated zp ZP_WORD:25 [ divMEMbyFAC::mem#2 ]
Allocated zp ZP_WORD:27 [ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ]
Allocated zp ZP_WORD:29 [ setMEMtoFAC::mem#5 ]
Allocated zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ]
Allocated zp ZP_WORD:32 [ gen_sprites::spr#2 gen_sprites::spr#1 ]
Allocated zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
Allocated zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
Allocated zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
Allocated zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ]
Allocated zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
Allocated zp ZP_BYTE:39 [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ]
Allocated zp ZP_BYTE:40 [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
Allocated zp ZP_WORD:41 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ]
Allocated zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
Allocated zp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ]
Allocated zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
Allocated zp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ]
Allocated zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ]
Allocated zp ZP_WORD:48 [ anim::x#0 ]
Allocated zp ZP_BYTE:50 [ anim::$2 ]
Allocated zp ZP_BYTE:51 [ anim::$3 ]
Allocated zp ZP_BYTE:52 [ anim::$5 ]
Allocated zp ZP_WORD:53 [ getFAC::return#2 ]
Allocated zp ZP_WORD:55 [ gen_sintab::$23 ]
Allocated zp ZP_BYTE:57 [ gen_sintab::$24 ]
Allocated zp ZP_WORD:58 [ getFAC::return#0 ]
Allocated zp ZP_BYTE:60 [ prepareMEM::$0 ]
Allocated zp ZP_BYTE:61 [ prepareMEM::$1 ]
Allocated zp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ]
Allocated zp ZP_WORD:63 [ gen_chargen_sprite::$0 ]
Allocated zp ZP_WORD:65 [ gen_chargen_sprite::$1 ]
Allocated zp ZP_WORD:67 [ gen_chargen_sprite::chargen#0 ]
Allocated zp ZP_BYTE:69 [ gen_chargen_sprite::$3 ]
Allocated zp ZP_BYTE:70 [ gen_chargen_sprite::$6 ]
Allocated zp ZP_BYTE:71 [ place_sprites::j2#1 ]

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  // Color Ram
  .label COLS = $d800
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .const sinlen_x = $dd
  .const sinlen_y = $c5
  .label sprites = $2000
  .label SCREEN = $400
  .label progress_idx = $12
  .label progress_cursor = $13
  .label sin_idx_x = 2
  .label sin_idx_y = 3
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @60 [phi:@begin->@60]
b60_from_bbegin:
  jmp b60
//SEG5 @60
b60:
//SEG6 [2] call main 
//SEG7 [4] phi from @60 to main [phi:@60->main]
main_from_b60:
  jsr main
//SEG8 [3] phi from @60 to @end [phi:@60->@end]
bend_from_b60:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call init 
  //SEG12 [43] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
  //SEG13 [6] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
  //SEG14 [6] phi (byte) sin_idx_y#13 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
  //SEG15 [6] phi (byte) sin_idx_x#13 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_x
    jmp b2
  //SEG16 [6] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  b2_from_b2:
    jmp b2
  //SEG17 main::@2
  b2:
  //SEG18 [7] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b2_from_b2
  //SEG19 [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG20 main::@3
  b3:
  //SEG21 [9] call anim 
    jsr anim
  //SEG22 [6] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  b2_from_b3:
  //SEG23 [6] phi (byte) sin_idx_y#13 = (byte) sin_idx_y#11 [phi:main::@3->main::@2#0] -- register_copy 
  //SEG24 [6] phi (byte) sin_idx_x#13 = (byte) sin_idx_x#11 [phi:main::@3->main::@2#1] -- register_copy 
    jmp b2
}
//SEG25 anim
anim: {
    .label _2 = $32
    .label _3 = $33
    .label _5 = $34
    .label xidx = 4
    .label yidx = 7
    .label x = $30
    .label x_msb = 5
    .label j2 = 6
    .label j = 8
  //SEG26 [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG27 [11] (byte) anim::xidx#0 ← (byte) sin_idx_x#13 -- vbuz1=vbuz2 
    lda sin_idx_x
    sta xidx
  //SEG28 [12] (byte) anim::yidx#0 ← (byte) sin_idx_y#13 -- vbuz1=vbuz2 
    lda sin_idx_y
    sta yidx
  //SEG29 [13] phi from anim to anim::@1 [phi:anim->anim::@1]
  b1_from_anim:
  //SEG30 [13] phi (byte) anim::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG31 [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#0 [phi:anim->anim::@1#1] -- register_copy 
  //SEG32 [13] phi (byte) anim::j2#2 = (byte/signed byte/word/signed word/dword/signed dword) $c [phi:anim->anim::@1#2] -- vbuz1=vbuc1 
    lda #$c
    sta j2
  //SEG33 [13] phi (byte) anim::x_msb#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta x_msb
  //SEG34 [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#0 [phi:anim->anim::@1#4] -- register_copy 
    jmp b1
  //SEG35 [13] phi from anim::@3 to anim::@1 [phi:anim::@3->anim::@1]
  b1_from_b3:
  //SEG36 [13] phi (byte) anim::j#2 = (byte) anim::j#1 [phi:anim::@3->anim::@1#0] -- register_copy 
  //SEG37 [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#6 [phi:anim::@3->anim::@1#1] -- register_copy 
  //SEG38 [13] phi (byte) anim::j2#2 = (byte) anim::j2#1 [phi:anim::@3->anim::@1#2] -- register_copy 
  //SEG39 [13] phi (byte) anim::x_msb#2 = (byte) anim::x_msb#1 [phi:anim::@3->anim::@1#3] -- register_copy 
  //SEG40 [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#5 [phi:anim::@3->anim::@1#4] -- register_copy 
    jmp b1
  //SEG41 anim::@1
  b1:
  //SEG42 [14] (word) anim::x#0 ← ((word))(byte/signed byte/word/signed word/dword/signed dword) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) -- vwuz1=vwuc1_plus_pbuc2_derefidx_vbuz2 
    ldy xidx
    lda sintab_x,y
    clc
    adc #<$1e
    sta x
    lda #>$1e
    adc #0
    sta x+1
  //SEG43 [15] (byte~) anim::$2 ← (byte) anim::x_msb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda x_msb
    asl
    sta _2
  //SEG44 [16] (byte~) anim::$3 ← > (word) anim::x#0 -- vbuz1=_hi_vwuz2 
    lda x+1
    sta _3
  //SEG45 [17] (byte) anim::x_msb#1 ← (byte~) anim::$2 | (byte~) anim::$3 -- vbuz1=vbuz2_bor_vbuz3 
    lda _2
    ora _3
    sta x_msb
  //SEG46 [18] (byte~) anim::$5 ← < (word) anim::x#0 -- vbuz1=_lo_vwuz2 
    lda x
    sta _5
  //SEG47 [19] *((const byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$5 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _5
    ldy j2
    sta SPRITES_XPOS,y
  //SEG48 [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy yidx
    lda sintab_y,y
    ldy j2
    sta SPRITES_YPOS,y
  //SEG49 [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte/signed byte/word/signed word/dword/signed dword) $a -- vbuz1=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc xidx
    sta xidx
  //SEG50 [22] if((byte) anim::xidx#1<(const byte) sinlen_x#0) goto anim::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda xidx
    cmp #sinlen_x
    bcc b2_from_b1
    jmp b6
  //SEG51 anim::@6
  b6:
  //SEG52 [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 -- vbuz1=vbuz1_minus_vbuc1 
    lda xidx
    sec
    sbc #sinlen_x
    sta xidx
  //SEG53 [24] phi from anim::@1 anim::@6 to anim::@2 [phi:anim::@1/anim::@6->anim::@2]
  b2_from_b1:
  b2_from_b6:
  //SEG54 [24] phi (byte) anim::xidx#5 = (byte) anim::xidx#1 [phi:anim::@1/anim::@6->anim::@2#0] -- register_copy 
    jmp b2
  //SEG55 anim::@2
  b2:
  //SEG56 [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lda #8
    clc
    adc yidx
    sta yidx
  //SEG57 [26] if((byte) anim::yidx#1<(const byte) sinlen_y#0) goto anim::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda yidx
    cmp #sinlen_y
    bcc b3_from_b2
    jmp b7
  //SEG58 anim::@7
  b7:
  //SEG59 [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 -- vbuz1=vbuz1_minus_vbuc1 
    lda yidx
    sec
    sbc #sinlen_y
    sta yidx
  //SEG60 [28] phi from anim::@2 anim::@7 to anim::@3 [phi:anim::@2/anim::@7->anim::@3]
  b3_from_b2:
  b3_from_b7:
  //SEG61 [28] phi (byte) anim::yidx#6 = (byte) anim::yidx#1 [phi:anim::@2/anim::@7->anim::@3#0] -- register_copy 
    jmp b3
  //SEG62 anim::@3
  b3:
  //SEG63 [29] (byte) anim::j2#1 ← (byte) anim::j2#2 - (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_minus_2 
    dec j2
    dec j2
  //SEG64 [30] (byte) anim::j#1 ← ++ (byte) anim::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG65 [31] if((byte) anim::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto anim::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #7
    bne b1_from_b3
    jmp b8
  //SEG66 anim::@8
  b8:
  //SEG67 [32] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#1 -- _deref_pbuc1=vbuz1 
    lda x_msb
    sta SPRITES_XMSB
  //SEG68 [33] (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_x
  //SEG69 [34] if((byte) sin_idx_x#3<(const byte) sinlen_x#0) goto anim::@14 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_x
    cmp #sinlen_x
    bcc b14_from_b8
  //SEG70 [35] phi from anim::@8 to anim::@4 [phi:anim::@8->anim::@4]
  b4_from_b8:
  //SEG71 [35] phi (byte) sin_idx_x#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@8->anim::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_x
    jmp b4
  //SEG72 anim::@4
  b4:
  //SEG73 [36] (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_y
  //SEG74 [37] if((byte) sin_idx_y#3<(const byte) sinlen_y#0) goto anim::@15 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_y
    cmp #sinlen_y
    bcc b15_from_b4
  //SEG75 [38] phi from anim::@4 to anim::@5 [phi:anim::@4->anim::@5]
  b5_from_b4:
  //SEG76 [38] phi (byte) sin_idx_y#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@4->anim::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
    jmp b5
  //SEG77 anim::@5
  b5:
  //SEG78 [39] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    jmp breturn
  //SEG79 anim::@return
  breturn:
  //SEG80 [40] return 
    rts
  //SEG81 [41] phi from anim::@4 to anim::@15 [phi:anim::@4->anim::@15]
  b15_from_b4:
    jmp b15
  //SEG82 anim::@15
  b15:
  //SEG83 [38] phi from anim::@15 to anim::@5 [phi:anim::@15->anim::@5]
  b5_from_b15:
  //SEG84 [38] phi (byte) sin_idx_y#11 = (byte) sin_idx_y#3 [phi:anim::@15->anim::@5#0] -- register_copy 
    jmp b5
  //SEG85 [42] phi from anim::@8 to anim::@14 [phi:anim::@8->anim::@14]
  b14_from_b8:
    jmp b14
  //SEG86 anim::@14
  b14:
  //SEG87 [35] phi from anim::@14 to anim::@4 [phi:anim::@14->anim::@4]
  b4_from_b14:
  //SEG88 [35] phi (byte) sin_idx_x#11 = (byte) sin_idx_x#3 [phi:anim::@14->anim::@4#0] -- register_copy 
    jmp b4
}
//SEG89 init
init: {
    .label i = 9
  //SEG90 [44] call clear_screen 
  //SEG91 [65] phi from init to clear_screen [phi:init->clear_screen]
  clear_screen_from_init:
    jsr clear_screen
  //SEG92 [45] phi from init to init::@1 [phi:init->init::@1]
  b1_from_init:
  //SEG93 [45] phi (byte) init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init->init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG94 [45] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
  //SEG95 [45] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
    jmp b1
  //SEG96 init::@1
  b1:
  //SEG97 [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #0
    sta COLS,y
  //SEG98 [47] *((const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) $b -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #$b
    sta COLS+$28,y
  //SEG99 [48] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG100 [49] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$28
    bne b1_from_b1
  //SEG101 [50] phi from init::@1 to init::@2 [phi:init::@1->init::@2]
  b2_from_b1:
    jmp b2
  //SEG102 init::@2
  b2:
  //SEG103 [51] call place_sprites 
    jsr place_sprites
  //SEG104 [52] phi from init::@2 to init::@4 [phi:init::@2->init::@4]
  b4_from_b2:
    jmp b4
  //SEG105 init::@4
  b4:
  //SEG106 [53] call gen_sprites 
  //SEG107 [170] phi from init::@4 to gen_sprites [phi:init::@4->gen_sprites]
  gen_sprites_from_b4:
    jsr gen_sprites
  //SEG108 [54] phi from init::@4 to init::@5 [phi:init::@4->init::@5]
  b5_from_b4:
    jmp b5
  //SEG109 init::@5
  b5:
  //SEG110 [55] call progress_init 
  //SEG111 [168] phi from init::@5 to progress_init [phi:init::@5->progress_init]
  progress_init_from_b5:
  //SEG112 [168] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0 [phi:init::@5->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta progress_init.line
    lda #>SCREEN
    sta progress_init.line+1
    jsr progress_init
  //SEG113 [56] phi from init::@5 to init::@6 [phi:init::@5->init::@6]
  b6_from_b5:
    jmp b6
  //SEG114 init::@6
  b6:
  //SEG115 [57] call gen_sintab 
  //SEG116 [71] phi from init::@6 to gen_sintab [phi:init::@6->gen_sintab]
  gen_sintab_from_b6:
  //SEG117 [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$dd]) sintab_x#0 [phi:init::@6->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_x
    sta gen_sintab.sintab
    lda #>sintab_x
    sta gen_sintab.sintab+1
  //SEG118 [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_x#0 [phi:init::@6->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_x
    sta gen_sintab.length
  //SEG119 [71] phi (byte) gen_sintab::min#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@6->gen_sintab#2] -- vbuz1=vbuc1 
    lda #0
    sta gen_sintab.min
  //SEG120 [71] phi (byte) gen_sintab::max#2 = (byte/word/signed word/dword/signed dword) $ff [phi:init::@6->gen_sintab#3] -- vbuz1=vbuc1 
    lda #$ff
    sta gen_sintab.max
    jsr gen_sintab
  //SEG121 [58] phi from init::@6 to init::@7 [phi:init::@6->init::@7]
  b7_from_b6:
    jmp b7
  //SEG122 init::@7
  b7:
  //SEG123 [59] call progress_init 
  //SEG124 [168] phi from init::@7 to progress_init [phi:init::@7->progress_init]
  progress_init_from_b7:
  //SEG125 [168] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28 [phi:init::@7->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28
    sta progress_init.line
    lda #>SCREEN+$28
    sta progress_init.line+1
    jsr progress_init
  //SEG126 [60] phi from init::@7 to init::@8 [phi:init::@7->init::@8]
  b8_from_b7:
    jmp b8
  //SEG127 init::@8
  b8:
  //SEG128 [61] call gen_sintab 
  //SEG129 [71] phi from init::@8 to gen_sintab [phi:init::@8->gen_sintab]
  gen_sintab_from_b8:
  //SEG130 [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$c5]) sintab_y#0 [phi:init::@8->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_y
    sta gen_sintab.sintab
    lda #>sintab_y
    sta gen_sintab.sintab+1
  //SEG131 [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_y#0 [phi:init::@8->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_y
    sta gen_sintab.length
  //SEG132 [71] phi (byte) gen_sintab::min#2 = (byte/signed byte/word/signed word/dword/signed dword) $32 [phi:init::@8->gen_sintab#2] -- vbuz1=vbuc1 
    lda #$32
    sta gen_sintab.min
  //SEG133 [71] phi (byte) gen_sintab::max#2 = (byte/word/signed word/dword/signed dword) $d0 [phi:init::@8->gen_sintab#3] -- vbuz1=vbuc1 
    lda #$d0
    sta gen_sintab.max
    jsr gen_sintab
  //SEG134 [62] phi from init::@8 to init::@9 [phi:init::@8->init::@9]
  b9_from_b8:
    jmp b9
  //SEG135 init::@9
  b9:
  //SEG136 [63] call clear_screen 
  //SEG137 [65] phi from init::@9 to clear_screen [phi:init::@9->clear_screen]
  clear_screen_from_b9:
    jsr clear_screen
    jmp breturn
  //SEG138 init::@return
  breturn:
  //SEG139 [64] return 
    rts
}
//SEG140 clear_screen
clear_screen: {
    .label sc = $a
  //SEG141 [66] phi from clear_screen to clear_screen::@1 [phi:clear_screen->clear_screen::@1]
  b1_from_clear_screen:
  //SEG142 [66] phi (byte*) clear_screen::sc#2 = (const byte*) SCREEN#0 [phi:clear_screen->clear_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    jmp b1
  //SEG143 [66] phi from clear_screen::@1 to clear_screen::@1 [phi:clear_screen::@1->clear_screen::@1]
  b1_from_b1:
  //SEG144 [66] phi (byte*) clear_screen::sc#2 = (byte*) clear_screen::sc#1 [phi:clear_screen::@1->clear_screen::@1#0] -- register_copy 
    jmp b1
  //SEG145 clear_screen::@1
  b1:
  //SEG146 [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG147 [68] (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG148 [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto clear_screen::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda sc
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG149 clear_screen::@return
  breturn:
  //SEG150 [70] return 
    rts
}
//SEG151 gen_sintab
// Generate a sinus table using BASIC floats
// - sintab is a pointer to the table to fill
// - length is the length of the sine table
// - min is the minimum value of the generated sinus
// - max is the maximum value of the generated sinus
// gen_sintab(byte* zeropage($f) sintab, byte zeropage($e) length, byte zeropage($d) min, byte zeropage($c) max)
gen_sintab: {
    // amplitude/2
    .label f_2pi = $e2e5
    .label _23 = $37
    .label _24 = $39
    .label i = $11
    .label max = $c
    .label min = $d
    .label length = $e
    .label sintab = $f
  //SEG152 [72] (word) setFAC::w#0 ← ((word)) (byte) gen_sintab::max#2 -- vwuz1=_word_vbuz2 
    lda max
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG153 [73] call setFAC 
  //SEG154 [154] phi from gen_sintab to setFAC [phi:gen_sintab->setFAC]
  setFAC_from_gen_sintab:
  //SEG155 [154] phi (word) setFAC::w#5 = (word) setFAC::w#0 [phi:gen_sintab->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG156 [74] phi from gen_sintab to gen_sintab::@3 [phi:gen_sintab->gen_sintab::@3]
  b3_from_gen_sintab:
    jmp b3
  //SEG157 gen_sintab::@3
  b3:
  //SEG158 [75] call setARGtoFAC 
    jsr setARGtoFAC
    jmp b4
  //SEG159 gen_sintab::@4
  b4:
  //SEG160 asm { lda#0 ldx#0 ldy#0  }
    // arg = max
    // TODO: Kernel JSR clobbers A,X,Y
    lda #0
    ldx #0
    ldy #0
  //SEG161 [77] (word) setFAC::w#1 ← ((word)) (byte) gen_sintab::min#2 -- vwuz1=_word_vbuz2 
    lda min
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG162 [78] call setFAC 
  //SEG163 [154] phi from gen_sintab::@4 to setFAC [phi:gen_sintab::@4->setFAC]
  setFAC_from_b4:
  //SEG164 [154] phi (word) setFAC::w#5 = (word) setFAC::w#1 [phi:gen_sintab::@4->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG165 [79] phi from gen_sintab::@4 to gen_sintab::@5 [phi:gen_sintab::@4->gen_sintab::@5]
  b5_from_b4:
    jmp b5
  //SEG166 gen_sintab::@5
  b5:
  //SEG167 [80] call setMEMtoFAC 
  //SEG168 [159] phi from gen_sintab::@5 to setMEMtoFAC [phi:gen_sintab::@5->setMEMtoFAC]
  setMEMtoFAC_from_b5:
  //SEG169 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@5->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG170 [81] phi from gen_sintab::@5 to gen_sintab::@6 [phi:gen_sintab::@5->gen_sintab::@6]
  b6_from_b5:
    jmp b6
  //SEG171 gen_sintab::@6
  b6:
  //SEG172 [82] call subFACfromARG 
    jsr subFACfromARG
  //SEG173 [83] phi from gen_sintab::@6 to gen_sintab::@7 [phi:gen_sintab::@6->gen_sintab::@7]
  b7_from_b6:
    jmp b7
  //SEG174 gen_sintab::@7
  b7:
  //SEG175 [84] call setMEMtoFAC 
  //SEG176 [159] phi from gen_sintab::@7 to setMEMtoFAC [phi:gen_sintab::@7->setMEMtoFAC]
  setMEMtoFAC_from_b7:
  //SEG177 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@7->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG178 [85] phi from gen_sintab::@7 to gen_sintab::@8 [phi:gen_sintab::@7->gen_sintab::@8]
  b8_from_b7:
    jmp b8
  //SEG179 gen_sintab::@8
  b8:
  //SEG180 [86] call setFAC 
  //SEG181 [154] phi from gen_sintab::@8 to setFAC [phi:gen_sintab::@8->setFAC]
  setFAC_from_b8:
  //SEG182 [154] phi (word) setFAC::w#5 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:gen_sintab::@8->setFAC#0] -- vwuz1=vbuc1 
    lda #2
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    jsr setFAC
  //SEG183 [87] phi from gen_sintab::@8 to gen_sintab::@9 [phi:gen_sintab::@8->gen_sintab::@9]
  b9_from_b8:
    jmp b9
  //SEG184 gen_sintab::@9
  b9:
  //SEG185 [88] call divMEMbyFAC 
  //SEG186 [149] phi from gen_sintab::@9 to divMEMbyFAC [phi:gen_sintab::@9->divMEMbyFAC]
  divMEMbyFAC_from_b9:
  //SEG187 [149] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@9->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta divMEMbyFAC.mem
    lda #>f_amp
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
  //SEG188 [89] phi from gen_sintab::@9 to gen_sintab::@10 [phi:gen_sintab::@9->gen_sintab::@10]
  b10_from_b9:
    jmp b10
  //SEG189 gen_sintab::@10
  b10:
  //SEG190 [90] call setMEMtoFAC 
  //SEG191 [159] phi from gen_sintab::@10 to setMEMtoFAC [phi:gen_sintab::@10->setMEMtoFAC]
  setMEMtoFAC_from_b10:
  //SEG192 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@10->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG193 [91] phi from gen_sintab::@10 to gen_sintab::@11 [phi:gen_sintab::@10->gen_sintab::@11]
  b11_from_b10:
    jmp b11
  //SEG194 gen_sintab::@11
  b11:
  //SEG195 [92] call addMEMtoFAC 
  //SEG196 [132] phi from gen_sintab::@11 to addMEMtoFAC [phi:gen_sintab::@11->addMEMtoFAC]
  addMEMtoFAC_from_b11:
    jsr addMEMtoFAC
  //SEG197 [93] phi from gen_sintab::@11 to gen_sintab::@12 [phi:gen_sintab::@11->gen_sintab::@12]
  b12_from_b11:
    jmp b12
  //SEG198 gen_sintab::@12
  b12:
  //SEG199 [94] call setMEMtoFAC 
  //SEG200 [159] phi from gen_sintab::@12 to setMEMtoFAC [phi:gen_sintab::@12->setMEMtoFAC]
  setMEMtoFAC_from_b12:
  //SEG201 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@12->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG202 [95] phi from gen_sintab::@12 to gen_sintab::@1 [phi:gen_sintab::@12->gen_sintab::@1]
  b1_from_b12:
  //SEG203 [95] phi (byte*) progress_cursor#34 = (byte*) progress_init::line#2 [phi:gen_sintab::@12->gen_sintab::@1#0] -- register_copy 
  //SEG204 [95] phi (byte) progress_idx#34 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_sintab::@12->gen_sintab::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
  //SEG205 [95] phi (byte) gen_sintab::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_sintab::@12->gen_sintab::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // f_min = min + (max - min) / 2
  //SEG206 [95] phi from gen_sintab::@23 to gen_sintab::@1 [phi:gen_sintab::@23->gen_sintab::@1]
  b1_from_b23:
  //SEG207 [95] phi (byte*) progress_cursor#34 = (byte*) progress_cursor#11 [phi:gen_sintab::@23->gen_sintab::@1#0] -- register_copy 
  //SEG208 [95] phi (byte) progress_idx#34 = (byte) progress_idx#12 [phi:gen_sintab::@23->gen_sintab::@1#1] -- register_copy 
  //SEG209 [95] phi (byte) gen_sintab::i#10 = (byte) gen_sintab::i#1 [phi:gen_sintab::@23->gen_sintab::@1#2] -- register_copy 
    jmp b1
  //SEG210 gen_sintab::@1
  b1:
  //SEG211 [96] (word) setFAC::w#3 ← ((word)) (byte) gen_sintab::i#10 -- vwuz1=_word_vbuz2 
    lda i
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG212 [97] call setFAC 
  //SEG213 [154] phi from gen_sintab::@1 to setFAC [phi:gen_sintab::@1->setFAC]
  setFAC_from_b1:
  //SEG214 [154] phi (word) setFAC::w#5 = (word) setFAC::w#3 [phi:gen_sintab::@1->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG215 [98] phi from gen_sintab::@1 to gen_sintab::@14 [phi:gen_sintab::@1->gen_sintab::@14]
  b14_from_b1:
    jmp b14
  //SEG216 gen_sintab::@14
  b14:
  //SEG217 [99] call mulFACbyMEM 
  //SEG218 [142] phi from gen_sintab::@14 to mulFACbyMEM [phi:gen_sintab::@14->mulFACbyMEM]
  mulFACbyMEM_from_b14:
  //SEG219 [142] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) gen_sintab::f_2pi#0 [phi:gen_sintab::@14->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta mulFACbyMEM.mem
    lda #>f_2pi
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG220 [100] phi from gen_sintab::@14 to gen_sintab::@15 [phi:gen_sintab::@14->gen_sintab::@15]
  b15_from_b14:
    jmp b15
  //SEG221 gen_sintab::@15
  b15:
  //SEG222 [101] call setMEMtoFAC 
  //SEG223 [159] phi from gen_sintab::@15 to setMEMtoFAC [phi:gen_sintab::@15->setMEMtoFAC]
  setMEMtoFAC_from_b15:
  //SEG224 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@15->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta setMEMtoFAC.mem
    lda #>f_i
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    jmp b16
  //SEG225 gen_sintab::@16
  b16:
  //SEG226 [102] (word) setFAC::w#4 ← ((word)) (byte) gen_sintab::length#10 -- vwuz1=_word_vbuz2 
    lda length
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG227 [103] call setFAC 
  //SEG228 [154] phi from gen_sintab::@16 to setFAC [phi:gen_sintab::@16->setFAC]
  setFAC_from_b16:
  //SEG229 [154] phi (word) setFAC::w#5 = (word) setFAC::w#4 [phi:gen_sintab::@16->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG230 [104] phi from gen_sintab::@16 to gen_sintab::@17 [phi:gen_sintab::@16->gen_sintab::@17]
  b17_from_b16:
    jmp b17
  //SEG231 gen_sintab::@17
  b17:
  //SEG232 [105] call divMEMbyFAC 
  //SEG233 [149] phi from gen_sintab::@17 to divMEMbyFAC [phi:gen_sintab::@17->divMEMbyFAC]
  divMEMbyFAC_from_b17:
  //SEG234 [149] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@17->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta divMEMbyFAC.mem
    lda #>f_i
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
  //SEG235 [106] phi from gen_sintab::@17 to gen_sintab::@18 [phi:gen_sintab::@17->gen_sintab::@18]
  b18_from_b17:
    jmp b18
  //SEG236 gen_sintab::@18
  b18:
  //SEG237 [107] call sinFAC 
    jsr sinFAC
  //SEG238 [108] phi from gen_sintab::@18 to gen_sintab::@19 [phi:gen_sintab::@18->gen_sintab::@19]
  b19_from_b18:
    jmp b19
  //SEG239 gen_sintab::@19
  b19:
  //SEG240 [109] call mulFACbyMEM 
  //SEG241 [142] phi from gen_sintab::@19 to mulFACbyMEM [phi:gen_sintab::@19->mulFACbyMEM]
  mulFACbyMEM_from_b19:
  //SEG242 [142] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@19->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta mulFACbyMEM.mem
    lda #>f_amp
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG243 [110] phi from gen_sintab::@19 to gen_sintab::@20 [phi:gen_sintab::@19->gen_sintab::@20]
  b20_from_b19:
    jmp b20
  //SEG244 gen_sintab::@20
  b20:
  //SEG245 [111] call addMEMtoFAC 
  //SEG246 [132] phi from gen_sintab::@20 to addMEMtoFAC [phi:gen_sintab::@20->addMEMtoFAC]
  addMEMtoFAC_from_b20:
    jsr addMEMtoFAC
  //SEG247 [112] phi from gen_sintab::@20 to gen_sintab::@21 [phi:gen_sintab::@20->gen_sintab::@21]
  b21_from_b20:
    jmp b21
  //SEG248 gen_sintab::@21
  b21:
  //SEG249 [113] call getFAC 
    jsr getFAC
  //SEG250 [114] (word) getFAC::return#2 ← (word) getFAC::return#0 -- vwuz1=vwuz2 
    lda getFAC.return
    sta getFAC.return_2
    lda getFAC.return+1
    sta getFAC.return_2+1
    jmp b22
  //SEG251 gen_sintab::@22
  b22:
  //SEG252 [115] (word~) gen_sintab::$23 ← (word) getFAC::return#2 -- vwuz1=vwuz2 
    lda getFAC.return_2
    sta _23
    lda getFAC.return_2+1
    sta _23+1
  //SEG253 [116] (byte~) gen_sintab::$24 ← ((byte)) (word~) gen_sintab::$23 -- vbuz1=_byte_vwuz2 
    lda _23
    sta _24
  //SEG254 [117] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24 -- pbuz1_derefidx_vbuz2=vbuz3 
    // fac =  sin( i * 2 * PI / length ) * (max - min) / 2 + min + (max - min) / 2
    lda _24
    ldy i
    sta (sintab),y
  //SEG255 [118] call progress_inc 
    jsr progress_inc
    jmp b23
  //SEG256 gen_sintab::@23
  b23:
  //SEG257 [119] (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG258 [120] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda i
    cmp length
    bcc b1_from_b23
    jmp breturn
  //SEG259 gen_sintab::@return
  breturn:
  //SEG260 [121] return 
    rts
    f_i: .byte 0, 0, 0, 0, 0
    // i * 2 * PI
    f_min: .byte 0, 0, 0, 0, 0
    // amplitude/2 + min
    f_amp: .byte 0, 0, 0, 0, 0
}
//SEG261 progress_inc
// Increase PETSCII progress one bit
// Done by increasing the character until the idx is 8 and then moving to the next char
progress_inc: {
  //SEG262 [122] (byte) progress_idx#10 ← ++ (byte) progress_idx#34 -- vbuz1=_inc_vbuz1 
    inc progress_idx
  //SEG263 [123] if((byte) progress_idx#10!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto progress_inc::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda progress_idx
    cmp #8
    bne b1_from_progress_inc
    jmp b2
  //SEG264 progress_inc::@2
  b2:
  //SEG265 [124] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte/signed byte/word/signed word/dword/signed dword) 8) -- _deref_pbuz1=_deref_pbuc1 
    lda progress_chars+8
    ldy #0
    sta (progress_cursor),y
  //SEG266 [125] (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#34 -- pbuz1=_inc_pbuz1 
    inc progress_cursor
    bne !+
    inc progress_cursor+1
  !:
  //SEG267 [126] phi from progress_inc::@2 to progress_inc::@1 [phi:progress_inc::@2->progress_inc::@1]
  b1_from_b2:
  //SEG268 [126] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#10 [phi:progress_inc::@2->progress_inc::@1#0] -- register_copy 
  //SEG269 [126] phi (byte) progress_idx#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:progress_inc::@2->progress_inc::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
    jmp b1
  //SEG270 [126] phi from progress_inc to progress_inc::@1 [phi:progress_inc->progress_inc::@1]
  b1_from_progress_inc:
  //SEG271 [126] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#34 [phi:progress_inc->progress_inc::@1#0] -- register_copy 
  //SEG272 [126] phi (byte) progress_idx#12 = (byte) progress_idx#10 [phi:progress_inc->progress_inc::@1#1] -- register_copy 
    jmp b1
  //SEG273 progress_inc::@1
  b1:
  //SEG274 [127] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy progress_idx
    lda progress_chars,y
    ldy #0
    sta (progress_cursor),y
    jmp breturn
  //SEG275 progress_inc::@return
  breturn:
  //SEG276 [128] return 
    rts
    // Progress characters
    progress_chars: .byte $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0
}
//SEG277 getFAC
// word = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit word
// Destroys the value in the FAC in the process
getFAC: {
    .label return = $3a
    .label return_2 = $35
  //SEG278 asm { jsr$b1aa sty$fe sta$ff  }
    // Load FAC (floating point accumulator) integer part into word register Y,A
    jsr $b1aa
    sty $fe
    sta $ff
  //SEG279 [130] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta return
    lda memHi
    sta return+1
    jmp breturn
  //SEG280 getFAC::@return
  breturn:
  //SEG281 [131] return 
    rts
}
//SEG282 addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 bytes from memory
addMEMtoFAC: {
  //SEG283 [133] call prepareMEM 
  //SEG284 [136] phi from addMEMtoFAC to prepareMEM [phi:addMEMtoFAC->prepareMEM]
  prepareMEM_from_addMEMtoFAC:
  //SEG285 [136] phi (byte*) prepareMEM::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:addMEMtoFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<gen_sintab.f_min
    sta prepareMEM.mem
    lda #>gen_sintab.f_min
    sta prepareMEM.mem+1
    jsr prepareMEM
    jmp b1
  //SEG286 addMEMtoFAC::@1
  b1:
  //SEG287 asm { lda$fe ldy$ff jsr$b867  }
    lda $fe
    ldy $ff
    jsr $b867
    jmp breturn
  //SEG288 addMEMtoFAC::@return
  breturn:
  //SEG289 [135] return 
    rts
}
//SEG290 prepareMEM
// Prepare MEM pointers for operations using MEM
// prepareMEM(byte* zeropage($15) mem)
prepareMEM: {
    .label _0 = $3c
    .label _1 = $3d
    .label mem = $15
  //SEG291 [137] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 -- vbuz1=_lo_pbuz2 
    lda mem
    sta _0
  //SEG292 [138] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0 -- _deref_pbuc1=vbuz1 
    lda _0
    sta memLo
  //SEG293 [139] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 -- vbuz1=_hi_pbuz2 
    lda mem+1
    sta _1
  //SEG294 [140] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1 -- _deref_pbuc1=vbuz1 
    lda _1
    sta memHi
    jmp breturn
  //SEG295 prepareMEM::@return
  breturn:
  //SEG296 [141] return 
    rts
}
//SEG297 mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 bytes from memory
// mulFACbyMEM(byte* zeropage($17) mem)
mulFACbyMEM: {
    .label mem = $17
  //SEG298 [143] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 -- pbuz1=pbuz2 
    lda mem
    sta prepareMEM.mem
    lda mem+1
    sta prepareMEM.mem+1
  //SEG299 [144] call prepareMEM 
  //SEG300 [136] phi from mulFACbyMEM to prepareMEM [phi:mulFACbyMEM->prepareMEM]
  prepareMEM_from_mulFACbyMEM:
  //SEG301 [136] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#4 [phi:mulFACbyMEM->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG302 mulFACbyMEM::@1
  b1:
  //SEG303 asm { lda$fe ldy$ff jsr$ba28  }
    lda $fe
    ldy $ff
    jsr $ba28
    jmp breturn
  //SEG304 mulFACbyMEM::@return
  breturn:
  //SEG305 [146] return 
    rts
}
//SEG306 sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
  //SEG307 asm { jsr$e26b  }
    jsr $e26b
    jmp breturn
  //SEG308 sinFAC::@return
  breturn:
  //SEG309 [148] return 
    rts
}
//SEG310 divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 bytes from memory
// divMEMbyFAC(byte* zeropage($19) mem)
divMEMbyFAC: {
    .label mem = $19
  //SEG311 [150] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2 -- pbuz1=pbuz2 
    lda mem
    sta prepareMEM.mem
    lda mem+1
    sta prepareMEM.mem+1
  //SEG312 [151] call prepareMEM 
  //SEG313 [136] phi from divMEMbyFAC to prepareMEM [phi:divMEMbyFAC->prepareMEM]
  prepareMEM_from_divMEMbyFAC:
  //SEG314 [136] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#3 [phi:divMEMbyFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG315 divMEMbyFAC::@1
  b1:
  //SEG316 asm { lda$fe ldy$ff jsr$bb0f  }
    lda $fe
    ldy $ff
    jsr $bb0f
    jmp breturn
  //SEG317 divMEMbyFAC::@return
  breturn:
  //SEG318 [153] return 
    rts
}
//SEG319 setFAC
// FAC = word
// Set the FAC (floating point accumulator) to the integer value of a 16bit word
// setFAC(word zeropage($1b) w)
setFAC: {
    .label w = $1b
  //SEG320 [155] (byte*~) prepareMEM::mem#8 ← (byte*)(word) setFAC::w#5 -- pbuz1=pbuz2 
    lda w
    sta prepareMEM.mem
    lda w+1
    sta prepareMEM.mem+1
  //SEG321 [156] call prepareMEM 
  //SEG322 [136] phi from setFAC to prepareMEM [phi:setFAC->prepareMEM]
  prepareMEM_from_setFAC:
  //SEG323 [136] phi (byte*) prepareMEM::mem#5 = (byte*~) prepareMEM::mem#8 [phi:setFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG324 setFAC::@1
  b1:
  //SEG325 asm { ldy$fe lda$ff jsr$b391  }
    // Load word register Y,A into FAC (floating point accumulator)
    ldy $fe
    lda $ff
    jsr $b391
    jmp breturn
  //SEG326 setFAC::@return
  breturn:
  //SEG327 [158] return 
    rts
}
//SEG328 setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 bytes (means it is necessary to allocate 5 bytes to avoid clobbering other data using eg. byte[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zeropage($1d) mem)
setMEMtoFAC: {
    .label mem = $1d
  //SEG329 [160] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5 -- pbuz1=pbuz2 
    lda mem
    sta prepareMEM.mem
    lda mem+1
    sta prepareMEM.mem+1
  //SEG330 [161] call prepareMEM 
  //SEG331 [136] phi from setMEMtoFAC to prepareMEM [phi:setMEMtoFAC->prepareMEM]
  prepareMEM_from_setMEMtoFAC:
  //SEG332 [136] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#1 [phi:setMEMtoFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG333 setMEMtoFAC::@1
  b1:
  //SEG334 asm { ldx$fe ldy$ff jsr$bbd4  }
    ldx $fe
    ldy $ff
    jsr $bbd4
    jmp breturn
  //SEG335 setMEMtoFAC::@return
  breturn:
  //SEG336 [163] return 
    rts
}
//SEG337 subFACfromARG
// FAC = ARG-FAC
// Set FAC to ARG minus FAC
subFACfromARG: {
  //SEG338 asm { jsr$b853  }
    jsr $b853
    jmp breturn
  //SEG339 subFACfromARG::@return
  breturn:
  //SEG340 [165] return 
    rts
}
//SEG341 setARGtoFAC
// ARG = FAC
// Set the ARG (floating point argument) to the value of the FAC (floating point accumulator)
setARGtoFAC: {
  //SEG342 asm { jsr$bc0f  }
    jsr $bc0f
    jmp breturn
  //SEG343 setARGtoFAC::@return
  breturn:
  //SEG344 [167] return 
    rts
}
//SEG345 progress_init
// Initialize the PETSCII progress bar
// progress_init(byte* zeropage($13) line)
progress_init: {
    .label line = $13
    jmp breturn
  //SEG346 progress_init::@return
  breturn:
  //SEG347 [169] return 
    rts
}
//SEG348 gen_sprites
gen_sprites: {
    .label spr = $20
    .label i = $1f
  //SEG349 [171] phi from gen_sprites to gen_sprites::@1 [phi:gen_sprites->gen_sprites::@1]
  b1_from_gen_sprites:
  //SEG350 [171] phi (byte*) gen_sprites::spr#2 = (const byte*) sprites#0 [phi:gen_sprites->gen_sprites::@1#0] -- pbuz1=pbuc1 
    lda #<sprites
    sta spr
    lda #>sprites
    sta spr+1
  //SEG351 [171] phi (byte) gen_sprites::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_sprites->gen_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG352 [171] phi from gen_sprites::@3 to gen_sprites::@1 [phi:gen_sprites::@3->gen_sprites::@1]
  b1_from_b3:
  //SEG353 [171] phi (byte*) gen_sprites::spr#2 = (byte*) gen_sprites::spr#1 [phi:gen_sprites::@3->gen_sprites::@1#0] -- register_copy 
  //SEG354 [171] phi (byte) gen_sprites::i#2 = (byte) gen_sprites::i#1 [phi:gen_sprites::@3->gen_sprites::@1#1] -- register_copy 
    jmp b1
  //SEG355 gen_sprites::@1
  b1:
  //SEG356 [172] (byte) gen_chargen_sprite::ch#0 ← *((const byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda cml,y
    sta gen_chargen_sprite.ch
  //SEG357 [173] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 -- pbuz1=pbuz2 
    lda spr
    sta gen_chargen_sprite.sprite
    lda spr+1
    sta gen_chargen_sprite.sprite+1
  //SEG358 [174] call gen_chargen_sprite 
    jsr gen_chargen_sprite
    jmp b3
  //SEG359 gen_sprites::@3
  b3:
  //SEG360 [175] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte/signed byte/word/signed word/dword/signed dword) $40 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$40
    clc
    adc spr
    sta spr
    bcc !+
    inc spr+1
  !:
  //SEG361 [176] (byte) gen_sprites::i#1 ← ++ (byte) gen_sprites::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG362 [177] if((byte) gen_sprites::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto gen_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #7
    bne b1_from_b3
    jmp breturn
  //SEG363 gen_sprites::@return
  breturn:
  //SEG364 [178] return 
    rts
    cml: .text "camelot"
}
//SEG365 gen_chargen_sprite
// Generate a sprite from a C64 CHARGEN character (by making each pixel 3x3 pixels large)
// - c is the character to generate
// - sprite is a pointer to the position of the sprite to generate
// gen_chargen_sprite(byte zeropage($3e) ch, byte* zeropage($29) sprite)
gen_chargen_sprite: {
    .label _0 = $3f
    .label _1 = $41
    .label _3 = $45
    .label _6 = $46
    .label ch = $3e
    .label sprite = $29
    .label chargen = $43
    .label bits = $23
    .label s_gen = $26
    .label s_gen_cnt = $27
    .label b = $28
    .label x = $24
    .label y = $22
    .label c = $25
  //SEG366 [179] (word~) gen_chargen_sprite::$0 ← ((word)) (byte) gen_chargen_sprite::ch#0 -- vwuz1=_word_vbuz2 
    lda ch
    sta _0
    lda #0
    sta _0+1
  //SEG367 [180] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vwuz1=vwuz2_rol_3 
    lda _0
    asl
    sta _1
    lda _0+1
    rol
    sta _1+1
    asl _1
    rol _1+1
    asl _1
    rol _1+1
  //SEG368 [181] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 -- pbuz1=pbuc1_plus_vwuz2 
    lda _1
    clc
    adc #<CHARGEN
    sta chargen
    lda _1+1
    adc #>CHARGEN
    sta chargen+1
  //SEG369 asm { sei  }
    sei
  //SEG370 [183] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
  //SEG371 [184] phi from gen_chargen_sprite to gen_chargen_sprite::@1 [phi:gen_chargen_sprite->gen_chargen_sprite::@1]
  b1_from_gen_chargen_sprite:
  //SEG372 [184] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#0] -- register_copy 
  //SEG373 [184] phi (byte) gen_chargen_sprite::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
  //SEG374 [184] phi from gen_chargen_sprite::@9 to gen_chargen_sprite::@1 [phi:gen_chargen_sprite::@9->gen_chargen_sprite::@1]
  b1_from_b9:
  //SEG375 [184] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#2 [phi:gen_chargen_sprite::@9->gen_chargen_sprite::@1#0] -- register_copy 
  //SEG376 [184] phi (byte) gen_chargen_sprite::y#2 = (byte) gen_chargen_sprite::y#1 [phi:gen_chargen_sprite::@9->gen_chargen_sprite::@1#1] -- register_copy 
    jmp b1
  //SEG377 gen_chargen_sprite::@1
  b1:
  //SEG378 [185] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    // current chargen line
    ldy y
    lda (chargen),y
    sta bits
  //SEG379 [186] phi from gen_chargen_sprite::@1 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2]
  b2_from_b1:
  //SEG380 [186] phi (byte) gen_chargen_sprite::x#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG381 [186] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#11 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#1] -- register_copy 
  //SEG382 [186] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta s_gen_cnt
  //SEG383 [186] phi (byte) gen_chargen_sprite::s_gen#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta s_gen
  //SEG384 [186] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#4] -- register_copy 
    jmp b2
  //SEG385 [186] phi from gen_chargen_sprite::@8 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2]
  b2_from_b8:
  //SEG386 [186] phi (byte) gen_chargen_sprite::x#6 = (byte) gen_chargen_sprite::x#1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#0] -- register_copy 
  //SEG387 [186] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#1] -- register_copy 
  //SEG388 [186] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#2] -- register_copy 
  //SEG389 [186] phi (byte) gen_chargen_sprite::s_gen#5 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#3] -- register_copy 
  //SEG390 [186] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#4] -- register_copy 
    jmp b2
  //SEG391 gen_chargen_sprite::@2
  b2:
  //SEG392 [187] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte/word/signed word/dword/signed dword) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and bits
    sta _3
  //SEG393 [188] if((byte~) gen_chargen_sprite::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gen_chargen_sprite::@3 -- vbuz1_eq_0_then_la1 
    lda _3
    cmp #0
    beq b3_from_b2
  //SEG394 [189] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@6 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@6]
  b6_from_b2:
    jmp b6
  //SEG395 gen_chargen_sprite::@6
  b6:
  //SEG396 [190] phi from gen_chargen_sprite::@6 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@3]
  b3_from_b6:
  //SEG397 [190] phi (byte) gen_chargen_sprite::c#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta c
    jmp b3
  //SEG398 [190] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3]
  b3_from_b2:
  //SEG399 [190] phi (byte) gen_chargen_sprite::c#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b3
  //SEG400 gen_chargen_sprite::@3
  b3:
  //SEG401 [191] phi from gen_chargen_sprite::@3 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4]
  b4_from_b3:
  //SEG402 [191] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#10 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#0] -- register_copy 
  //SEG403 [191] phi (byte) gen_chargen_sprite::b#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta b
  //SEG404 [191] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#2] -- register_copy 
  //SEG405 [191] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#5 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#3] -- register_copy 
    jmp b4
  // generate 3 pixels in the sprite byte (s_gen)
  //SEG406 [191] phi from gen_chargen_sprite::@5 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4]
  b4_from_b5:
  //SEG407 [191] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#0] -- register_copy 
  //SEG408 [191] phi (byte) gen_chargen_sprite::b#2 = (byte) gen_chargen_sprite::b#1 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#1] -- register_copy 
  //SEG409 [191] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#2] -- register_copy 
  //SEG410 [191] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#3] -- register_copy 
    jmp b4
  //SEG411 gen_chargen_sprite::@4
  b4:
  //SEG412 [192] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda s_gen
    asl
    sta _6
  //SEG413 [193] (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#3 -- vbuz1=vbuz2_bor_vbuz3 
    lda _6
    ora c
    sta s_gen
  //SEG414 [194] (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3 -- vbuz1=_inc_vbuz1 
    inc s_gen_cnt
  //SEG415 [195] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda s_gen_cnt
    cmp #8
    bne b5_from_b4
    jmp b7
  //SEG416 gen_chargen_sprite::@7
  b7:
  //SEG417 [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    // sprite byte filled - store and move to next byte
    lda s_gen
    ldy #0
    sta (sprite),y
  //SEG418 [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    lda s_gen
    ldy #3
    sta (sprite),y
  //SEG419 [198] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    lda s_gen
    ldy #6
    sta (sprite),y
  //SEG420 [199] (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3 -- pbuz1=_inc_pbuz1 
    inc sprite
    bne !+
    inc sprite+1
  !:
  //SEG421 [200] phi from gen_chargen_sprite::@7 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5]
  b5_from_b7:
  //SEG422 [200] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#1 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5#0] -- register_copy 
  //SEG423 [200] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta s_gen_cnt
  //SEG424 [200] phi (byte) gen_chargen_sprite::s_gen#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5#2] -- vbuz1=vbuc1 
    lda #0
    sta s_gen
    jmp b5
  //SEG425 [200] phi from gen_chargen_sprite::@4 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5]
  b5_from_b4:
  //SEG426 [200] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#3 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#0] -- register_copy 
  //SEG427 [200] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) gen_chargen_sprite::s_gen_cnt#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#1] -- register_copy 
  //SEG428 [200] phi (byte) gen_chargen_sprite::s_gen#6 = (byte) gen_chargen_sprite::s_gen#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#2] -- register_copy 
    jmp b5
  //SEG429 gen_chargen_sprite::@5
  b5:
  //SEG430 [201] (byte) gen_chargen_sprite::b#1 ← ++ (byte) gen_chargen_sprite::b#2 -- vbuz1=_inc_vbuz1 
    inc b
  //SEG431 [202] if((byte) gen_chargen_sprite::b#1!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto gen_chargen_sprite::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda b
    cmp #3
    bne b4_from_b5
    jmp b8
  //SEG432 gen_chargen_sprite::@8
  b8:
  //SEG433 [203] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG434 [204] (byte) gen_chargen_sprite::x#1 ← ++ (byte) gen_chargen_sprite::x#6 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG435 [205] if((byte) gen_chargen_sprite::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #8
    bne b2_from_b8
    jmp b9
  //SEG436 gen_chargen_sprite::@9
  b9:
  //SEG437 [206] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte/signed byte/word/signed word/dword/signed dword) 6 -- pbuz1=pbuz1_plus_vbuc1 
    lda #6
    clc
    adc sprite
    sta sprite
    bcc !+
    inc sprite+1
  !:
  //SEG438 [207] (byte) gen_chargen_sprite::y#1 ← ++ (byte) gen_chargen_sprite::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG439 [208] if((byte) gen_chargen_sprite::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #8
    bne b1_from_b9
    jmp b10
  //SEG440 gen_chargen_sprite::@10
  b10:
  //SEG441 [209] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
  //SEG442 asm { cli  }
    cli
    jmp breturn
  //SEG443 gen_chargen_sprite::@return
  breturn:
  //SEG444 [211] return 
    rts
}
//SEG445 place_sprites
place_sprites: {
    .label sprites_ptr = SCREEN+$3f8
    .label spr_id = $2b
    .label spr_x = $2d
    .label col = $2f
    .label j2 = $47
    .label j2_2 = $2e
    .label j = $2c
    .label j2_3 = $2e
  //SEG446 [212] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_ENABLE
  //SEG447 [213] *((const byte*) SPRITES_EXPAND_X#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_EXPAND_X
  //SEG448 [214] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_EXPAND_Y
  //SEG449 [215] phi from place_sprites to place_sprites::@1 [phi:place_sprites->place_sprites::@1]
  b1_from_place_sprites:
  //SEG450 [215] phi (byte) place_sprites::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 5 [phi:place_sprites->place_sprites::@1#0] -- vbuz1=vbuc1 
    lda #5
    sta col
  //SEG451 [215] phi (byte) place_sprites::j2#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:place_sprites->place_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta j2_3
  //SEG452 [215] phi (byte) place_sprites::spr_x#2 = (byte/signed byte/word/signed word/dword/signed dword) $3c [phi:place_sprites->place_sprites::@1#2] -- vbuz1=vbuc1 
    lda #$3c
    sta spr_x
  //SEG453 [215] phi (byte) place_sprites::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:place_sprites->place_sprites::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG454 [215] phi (byte) place_sprites::spr_id#2 = ((byte))(const byte*) sprites#0/(byte/signed byte/word/signed word/dword/signed dword) $40 [phi:place_sprites->place_sprites::@1#4] -- vbuz1=vbuc1 
    lda #$ff&sprites/$40
    sta spr_id
    jmp b1
  //SEG455 [215] phi from place_sprites::@1 to place_sprites::@1 [phi:place_sprites::@1->place_sprites::@1]
  b1_from_b1:
  //SEG456 [215] phi (byte) place_sprites::col#2 = (byte) place_sprites::col#1 [phi:place_sprites::@1->place_sprites::@1#0] -- register_copy 
  //SEG457 [215] phi (byte) place_sprites::j2#3 = (byte) place_sprites::j2#2 [phi:place_sprites::@1->place_sprites::@1#1] -- register_copy 
  //SEG458 [215] phi (byte) place_sprites::spr_x#2 = (byte) place_sprites::spr_x#1 [phi:place_sprites::@1->place_sprites::@1#2] -- register_copy 
  //SEG459 [215] phi (byte) place_sprites::j#2 = (byte) place_sprites::j#1 [phi:place_sprites::@1->place_sprites::@1#3] -- register_copy 
  //SEG460 [215] phi (byte) place_sprites::spr_id#2 = (byte) place_sprites::spr_id#1 [phi:place_sprites::@1->place_sprites::@1#4] -- register_copy 
    jmp b1
  //SEG461 place_sprites::@1
  b1:
  //SEG462 [216] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spr_id
    ldy j
    sta sprites_ptr,y
  //SEG463 [217] (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2 -- vbuz1=_inc_vbuz1 
    inc spr_id
  //SEG464 [218] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spr_x
    ldy j2_3
    sta SPRITES_XPOS,y
  //SEG465 [219] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte/signed byte/word/signed word/dword/signed dword) $50 -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy j2_3
    lda #$50
    sta SPRITES_YPOS,y
  //SEG466 [220] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda col
    ldy j
    sta SPRITES_COLS,y
  //SEG467 [221] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) $20 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$20
    clc
    adc spr_x
    sta spr_x
  //SEG468 [222] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte/signed byte/word/signed word/dword/signed dword) 7^(byte/signed byte/word/signed word/dword/signed dword) 5 -- vbuz1=vbuz1_bxor_vbuc1 
    lda col
    eor #7^5
    sta col
  //SEG469 [223] (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3 -- vbuz1=_inc_vbuz2 
    ldy j2_3
    iny
    sty j2
  //SEG470 [224] (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1 -- vbuz1=_inc_vbuz2 
    ldy j2
    iny
    sty j2_2
  //SEG471 [225] (byte) place_sprites::j#1 ← ++ (byte) place_sprites::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG472 [226] if((byte) place_sprites::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto place_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #7
    bne b1_from_b1
    jmp breturn
  //SEG473 place_sprites::@return
  breturn:
  //SEG474 [227] return 
    rts
}
  sintab_x: .fill $dd, 0
  sintab_y: .fill $c5, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:51 [ anim::$3 ] has ALU potential.
Statement [7] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto main::@2 [ sin_idx_x#13 sin_idx_y#13 ] ( main:2 [ sin_idx_x#13 sin_idx_y#13 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
Statement [14] (word) anim::x#0 ← ((word))(byte/signed byte/word/signed word/dword/signed dword) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::x_msb#2 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::x_msb#2 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ]
Statement [15] (byte~) anim::$2 ← (byte) anim::x_msb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 anim::$2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 anim::$2 ] ) always clobbers reg byte a 
Statement [18] (byte~) anim::$5 ← < (word) anim::x#0 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::$5 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::$5 ] ) always clobbers reg byte a 
Statement [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 ] ) always clobbers reg byte a 
Statement [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte/signed byte/word/signed word/dword/signed dword) $a [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#1 ] ) always clobbers reg byte a 
Statement [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#2 ] ) always clobbers reg byte a 
Statement [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte/signed byte/word/signed word/dword/signed dword) 8 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#1 ] ) always clobbers reg byte a 
Statement [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#2 ] ) always clobbers reg byte a 
Statement [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ init::i#2 init::i#1 ]
Statement [47] *((const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) $b [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' [ clear_screen::sc#2 ] ( main:2::init:5::clear_screen:44 [ clear_screen::sc#2 ] main:2::init:5::clear_screen:63 [ clear_screen::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto clear_screen::@1 [ clear_screen::sc#1 ] ( main:2::init:5::clear_screen:44 [ clear_screen::sc#1 ] main:2::init:5::clear_screen:63 [ clear_screen::sc#1 ] ) always clobbers reg byte a 
Statement [72] (word) setFAC::w#0 ← ((word)) (byte) gen_sintab::max#2 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ gen_sintab::min#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ gen_sintab::length#10 ]
Statement asm { lda#0 ldx#0 ldy#0  } always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:13 [ gen_sintab::min#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:13 [ gen_sintab::min#2 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:14 [ gen_sintab::length#10 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:14 [ gen_sintab::length#10 ]
Statement [77] (word) setFAC::w#1 ← ((word)) (byte) gen_sintab::min#2 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] ) always clobbers reg byte a 
Statement [96] (word) setFAC::w#3 ← ((word)) (byte) gen_sintab::i#10 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Statement [102] (word) setFAC::w#4 ← ((word)) (byte) gen_sintab::length#10 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] ) always clobbers reg byte a 
Statement [114] (word) getFAC::return#2 ← (word) getFAC::return#0 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] ) always clobbers reg byte a 
Statement [115] (word~) gen_sintab::$23 ← (word) getFAC::return#2 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] ) always clobbers reg byte a 
Statement [116] (byte~) gen_sintab::$24 ← ((byte)) (word~) gen_sintab::$23 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] ) always clobbers reg byte a 
Statement [124] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte/signed byte/word/signed word/dword/signed dword) 8) [ progress_cursor#34 ] ( main:2::init:5::gen_sintab:57::progress_inc:118 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 ] main:2::init:5::gen_sintab:61::progress_inc:118 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ]
Statement [127] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) [ progress_idx#12 progress_cursor#11 ] ( main:2::init:5::gen_sintab:57::progress_inc:118 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#12 progress_cursor#11 ] main:2::init:5::gen_sintab:61::progress_inc:118 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#12 progress_cursor#11 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Statement [130] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::init:5::gen_sintab:57::getFAC:113 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#0 ] main:2::init:5::gen_sintab:61::getFAC:113 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#0 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$b867  } always clobbers reg byte a reg byte y 
Statement [143] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::init:5::gen_sintab:57::mulFACbyMEM:99 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:61::mulFACbyMEM:99 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:57::mulFACbyMEM:109 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:61::mulFACbyMEM:109 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$ba28  } always clobbers reg byte a reg byte y 
Statement [150] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2 [ prepareMEM::mem#3 ] ( main:2::init:5::gen_sintab:57::divMEMbyFAC:88 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:61::divMEMbyFAC:88 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:57::divMEMbyFAC:105 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:61::divMEMbyFAC:105 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#3 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$bb0f  } always clobbers reg byte a reg byte y 
Statement [155] (byte*~) prepareMEM::mem#8 ← (byte*)(word) setFAC::w#5 [ prepareMEM::mem#8 ] ( main:2::init:5::gen_sintab:57::setFAC:73 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:61::setFAC:73 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:57::setFAC:78 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:61::setFAC:78 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:57::setFAC:86 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:61::setFAC:86 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:57::setFAC:97 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:61::setFAC:97 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:57::setFAC:103 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:61::setFAC:103 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#8 ] ) always clobbers reg byte a 
Statement asm { ldy$fe lda$ff jsr$b391  } always clobbers reg byte a reg byte y 
Statement [160] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5 [ prepareMEM::mem#1 ] ( main:2::init:5::gen_sintab:57::setMEMtoFAC:80 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:80 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:84 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:84 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:90 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:90 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:94 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:94 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:101 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:101 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#1 ] ) always clobbers reg byte a 
Statement asm { ldx$fe ldy$ff jsr$bbd4  } always clobbers reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Statement [173] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::ch#0 gen_chargen_sprite::sprite#0 ] ( main:2::init:5::gen_sprites:53 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::ch#0 gen_chargen_sprite::sprite#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ]
Statement [175] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte/signed byte/word/signed word/dword/signed dword) $40 [ gen_sprites::i#2 gen_sprites::spr#1 ] ( main:2::init:5::gen_sprites:53 [ gen_sprites::i#2 gen_sprites::spr#1 ] ) always clobbers reg byte a 
Statement [179] (word~) gen_chargen_sprite::$0 ← ((word)) (byte) gen_chargen_sprite::ch#0 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::$0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::$0 ] ) always clobbers reg byte a 
Statement [180] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::$1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::$1 ] ) always clobbers reg byte a 
Statement [181] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ) always clobbers reg byte a 
Statement [183] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ) always clobbers reg byte a 
Statement [185] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#11 gen_chargen_sprite::bits#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#11 gen_chargen_sprite::bits#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
Statement [187] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte/word/signed word/dword/signed dword) $80 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::sprite#10 gen_chargen_sprite::x#6 gen_chargen_sprite::$3 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::sprite#10 gen_chargen_sprite::x#6 gen_chargen_sprite::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:39 [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
Statement [192] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::$6 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
Statement [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:40 [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
Statement [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ) always clobbers reg byte a reg byte y 
Statement [198] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 ] ) always clobbers reg byte a reg byte y 
Statement [206] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte/signed byte/word/signed word/dword/signed dword) 6 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#2 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#2 ] ) always clobbers reg byte a 
Statement [209] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37 [ ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 ] ) always clobbers reg byte a 
Statement [212] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [213] *((const byte*) SPRITES_EXPAND_X#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [214] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [219] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte/signed byte/word/signed word/dword/signed dword) $50 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
Statement [220] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [221] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) $20 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 place_sprites::spr_x#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 place_sprites::spr_x#1 ] ) always clobbers reg byte a 
Statement [222] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte/signed byte/word/signed word/dword/signed dword) 7^(byte/signed byte/word/signed word/dword/signed dword) 5 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::spr_id#1 place_sprites::spr_x#1 place_sprites::col#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::spr_id#1 place_sprites::spr_x#1 place_sprites::col#1 ] ) always clobbers reg byte a 
Statement [7] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto main::@2 [ sin_idx_x#13 sin_idx_y#13 ] ( main:2 [ sin_idx_x#13 sin_idx_y#13 ] ) always clobbers reg byte a 
Statement [14] (word) anim::x#0 ← ((word))(byte/signed byte/word/signed word/dword/signed dword) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::x_msb#2 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::x_msb#2 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 ] ) always clobbers reg byte a 
Statement [15] (byte~) anim::$2 ← (byte) anim::x_msb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 anim::$2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 anim::$2 ] ) always clobbers reg byte a 
Statement [18] (byte~) anim::$5 ← < (word) anim::x#0 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::$5 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::$5 ] ) always clobbers reg byte a 
Statement [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 ] ) always clobbers reg byte a 
Statement [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte/signed byte/word/signed word/dword/signed dword) $a [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#1 ] ) always clobbers reg byte a 
Statement [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#2 ] ) always clobbers reg byte a 
Statement [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte/signed byte/word/signed word/dword/signed dword) 8 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#1 ] ) always clobbers reg byte a 
Statement [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#2 ] ) always clobbers reg byte a 
Statement [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) $b [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' [ clear_screen::sc#2 ] ( main:2::init:5::clear_screen:44 [ clear_screen::sc#2 ] main:2::init:5::clear_screen:63 [ clear_screen::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto clear_screen::@1 [ clear_screen::sc#1 ] ( main:2::init:5::clear_screen:44 [ clear_screen::sc#1 ] main:2::init:5::clear_screen:63 [ clear_screen::sc#1 ] ) always clobbers reg byte a 
Statement [72] (word) setFAC::w#0 ← ((word)) (byte) gen_sintab::max#2 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] ) always clobbers reg byte a 
Statement asm { lda#0 ldx#0 ldy#0  } always clobbers reg byte a reg byte x reg byte y 
Statement [77] (word) setFAC::w#1 ← ((word)) (byte) gen_sintab::min#2 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] ) always clobbers reg byte a 
Statement [96] (word) setFAC::w#3 ← ((word)) (byte) gen_sintab::i#10 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] ) always clobbers reg byte a 
Statement [102] (word) setFAC::w#4 ← ((word)) (byte) gen_sintab::length#10 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] ) always clobbers reg byte a 
Statement [114] (word) getFAC::return#2 ← (word) getFAC::return#0 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] ) always clobbers reg byte a 
Statement [115] (word~) gen_sintab::$23 ← (word) getFAC::return#2 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] ) always clobbers reg byte a 
Statement [116] (byte~) gen_sintab::$24 ← ((byte)) (word~) gen_sintab::$23 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] ) always clobbers reg byte a 
Statement [117] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 ] ) always clobbers reg byte y 
Statement [120] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#1 progress_idx#12 progress_cursor#11 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#1 progress_idx#12 progress_cursor#11 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#1 progress_idx#12 progress_cursor#11 ] ) always clobbers reg byte a 
Statement [123] if((byte) progress_idx#10!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto progress_inc::@1 [ progress_cursor#34 progress_idx#10 ] ( main:2::init:5::gen_sintab:57::progress_inc:118 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 progress_idx#10 ] main:2::init:5::gen_sintab:61::progress_inc:118 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 progress_idx#10 ] ) always clobbers reg byte a 
Statement [124] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte/signed byte/word/signed word/dword/signed dword) 8) [ progress_cursor#34 ] ( main:2::init:5::gen_sintab:57::progress_inc:118 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 ] main:2::init:5::gen_sintab:61::progress_inc:118 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 ] ) always clobbers reg byte a reg byte y 
Statement [127] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) [ progress_idx#12 progress_cursor#11 ] ( main:2::init:5::gen_sintab:57::progress_inc:118 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#12 progress_cursor#11 ] main:2::init:5::gen_sintab:61::progress_inc:118 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#12 progress_cursor#11 ] ) always clobbers reg byte a reg byte y 
Statement [130] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::init:5::gen_sintab:57::getFAC:113 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#0 ] main:2::init:5::gen_sintab:61::getFAC:113 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#0 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$b867  } always clobbers reg byte a reg byte y 
Statement [143] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::init:5::gen_sintab:57::mulFACbyMEM:99 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:61::mulFACbyMEM:99 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:57::mulFACbyMEM:109 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:61::mulFACbyMEM:109 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$ba28  } always clobbers reg byte a reg byte y 
Statement [150] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2 [ prepareMEM::mem#3 ] ( main:2::init:5::gen_sintab:57::divMEMbyFAC:88 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:61::divMEMbyFAC:88 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:57::divMEMbyFAC:105 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:61::divMEMbyFAC:105 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#3 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$bb0f  } always clobbers reg byte a reg byte y 
Statement [155] (byte*~) prepareMEM::mem#8 ← (byte*)(word) setFAC::w#5 [ prepareMEM::mem#8 ] ( main:2::init:5::gen_sintab:57::setFAC:73 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:61::setFAC:73 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:57::setFAC:78 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:61::setFAC:78 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:57::setFAC:86 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:61::setFAC:86 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:57::setFAC:97 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:61::setFAC:97 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:57::setFAC:103 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#8 ] main:2::init:5::gen_sintab:61::setFAC:103 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#8 ] ) always clobbers reg byte a 
Statement asm { ldy$fe lda$ff jsr$b391  } always clobbers reg byte a reg byte y 
Statement [160] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5 [ prepareMEM::mem#1 ] ( main:2::init:5::gen_sintab:57::setMEMtoFAC:80 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:80 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:84 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:84 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:90 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:90 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:94 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:94 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:101 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:101 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#1 ] ) always clobbers reg byte a 
Statement asm { ldx$fe ldy$ff jsr$bbd4  } always clobbers reg byte x reg byte y 
Statement [173] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::ch#0 gen_chargen_sprite::sprite#0 ] ( main:2::init:5::gen_sprites:53 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::ch#0 gen_chargen_sprite::sprite#0 ] ) always clobbers reg byte a 
Statement [175] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte/signed byte/word/signed word/dword/signed dword) $40 [ gen_sprites::i#2 gen_sprites::spr#1 ] ( main:2::init:5::gen_sprites:53 [ gen_sprites::i#2 gen_sprites::spr#1 ] ) always clobbers reg byte a 
Statement [179] (word~) gen_chargen_sprite::$0 ← ((word)) (byte) gen_chargen_sprite::ch#0 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::$0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::$0 ] ) always clobbers reg byte a 
Statement [180] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::$1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::$1 ] ) always clobbers reg byte a 
Statement [181] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ) always clobbers reg byte a 
Statement [183] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ) always clobbers reg byte a 
Statement [185] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#11 gen_chargen_sprite::bits#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#11 gen_chargen_sprite::bits#0 ] ) always clobbers reg byte a reg byte y 
Statement [187] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte/word/signed word/dword/signed dword) $80 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::sprite#10 gen_chargen_sprite::x#6 gen_chargen_sprite::$3 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::sprite#10 gen_chargen_sprite::x#6 gen_chargen_sprite::$3 ] ) always clobbers reg byte a 
Statement [192] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::$6 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::$6 ] ) always clobbers reg byte a 
Statement [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ) always clobbers reg byte a reg byte y 
Statement [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ) always clobbers reg byte a reg byte y 
Statement [198] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 ] ) always clobbers reg byte a reg byte y 
Statement [206] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte/signed byte/word/signed word/dword/signed dword) 6 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#2 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#2 ] ) always clobbers reg byte a 
Statement [209] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37 [ ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:174 [ gen_sprites::i#2 gen_sprites::spr#2 ] ) always clobbers reg byte a 
Statement [212] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [213] *((const byte*) SPRITES_EXPAND_X#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [214] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [216] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2 [ place_sprites::spr_id#2 place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 ] ( main:2::init:5::place_sprites:51 [ place_sprites::spr_id#2 place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 ] ) always clobbers reg byte a 
Statement [218] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [219] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte/signed byte/word/signed word/dword/signed dword) $50 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [220] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [221] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) $20 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 place_sprites::spr_x#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 place_sprites::spr_x#1 ] ) always clobbers reg byte a 
Statement [222] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte/signed byte/word/signed word/dword/signed dword) 7^(byte/signed byte/word/signed word/dword/signed dword) 5 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::spr_id#1 place_sprites::spr_x#1 place_sprites::col#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::spr_id#1 place_sprites::spr_x#1 place_sprites::col#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ init::i#2 init::i#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 ] : zp ZP_WORD:10 , 
Potential registers zp ZP_BYTE:12 [ gen_sintab::max#2 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ gen_sintab::min#2 ] : zp ZP_BYTE:13 , 
Potential registers zp ZP_BYTE:14 [ gen_sintab::length#10 ] : zp ZP_BYTE:14 , 
Potential registers zp ZP_WORD:15 [ gen_sintab::sintab#12 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ] : zp ZP_BYTE:17 , 
Potential registers zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ] : zp ZP_BYTE:18 , 
Potential registers zp ZP_WORD:19 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_WORD:23 [ mulFACbyMEM::mem#2 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_WORD:25 [ divMEMbyFAC::mem#2 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_WORD:27 [ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_WORD:29 [ setMEMtoFAC::mem#5 ] : zp ZP_WORD:29 , 
Potential registers zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ] : zp ZP_BYTE:31 , reg byte x , 
Potential registers zp ZP_WORD:32 [ gen_sprites::spr#2 gen_sprites::spr#1 ] : zp ZP_WORD:32 , 
Potential registers zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ] : zp ZP_BYTE:34 , reg byte x , 
Potential registers zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ] : zp ZP_BYTE:35 , reg byte x , 
Potential registers zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ] : zp ZP_BYTE:36 , reg byte x , 
Potential registers zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ] : zp ZP_BYTE:37 , reg byte x , 
Potential registers zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ] : zp ZP_BYTE:38 , reg byte x , 
Potential registers zp ZP_BYTE:39 [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ] : zp ZP_BYTE:39 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ] : zp ZP_BYTE:40 , reg byte x , 
Potential registers zp ZP_WORD:41 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ] : zp ZP_BYTE:43 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ] : zp ZP_BYTE:44 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ] : zp ZP_BYTE:45 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ] : zp ZP_BYTE:46 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ] : zp ZP_BYTE:47 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:48 [ anim::x#0 ] : zp ZP_WORD:48 , 
Potential registers zp ZP_BYTE:50 [ anim::$2 ] : zp ZP_BYTE:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ anim::$3 ] : zp ZP_BYTE:51 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:52 [ anim::$5 ] : zp ZP_BYTE:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:53 [ getFAC::return#2 ] : zp ZP_WORD:53 , 
Potential registers zp ZP_WORD:55 [ gen_sintab::$23 ] : zp ZP_WORD:55 , 
Potential registers zp ZP_BYTE:57 [ gen_sintab::$24 ] : zp ZP_BYTE:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:58 [ getFAC::return#0 ] : zp ZP_WORD:58 , 
Potential registers zp ZP_BYTE:60 [ prepareMEM::$0 ] : zp ZP_BYTE:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:61 [ prepareMEM::$1 ] : zp ZP_BYTE:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ] : zp ZP_BYTE:62 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:63 [ gen_chargen_sprite::$0 ] : zp ZP_WORD:63 , 
Potential registers zp ZP_WORD:65 [ gen_chargen_sprite::$1 ] : zp ZP_WORD:65 , 
Potential registers zp ZP_WORD:67 [ gen_chargen_sprite::chargen#0 ] : zp ZP_WORD:67 , 
Potential registers zp ZP_BYTE:69 [ gen_chargen_sprite::$3 ] : zp ZP_BYTE:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ gen_chargen_sprite::$6 ] : zp ZP_BYTE:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:71 [ place_sprites::j2#1 ] : zp ZP_BYTE:71 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [gen_chargen_sprite] 34,904.9: zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ] 33,404.14: zp ZP_WORD:41 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ] 25,903.4: zp ZP_BYTE:39 [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ] 20,002: zp ZP_BYTE:70 [ gen_chargen_sprite::$6 ] 17,001.7: zp ZP_BYTE:40 [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ] 2,002: zp ZP_BYTE:69 [ gen_chargen_sprite::$3 ] 1,612.72: zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ] 1,051.92: zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ] 769.31: zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ] 164.67: zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ] 6.5: zp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ] 4: zp ZP_WORD:63 [ gen_chargen_sprite::$0 ] 4: zp ZP_WORD:65 [ gen_chargen_sprite::$1 ] 3.68: zp ZP_WORD:67 [ gen_chargen_sprite::chargen#0 ] 
Uplift Scope [anim] 509.17: zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ] 482: zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ] 202: zp ZP_BYTE:51 [ anim::$3 ] 202: zp ZP_BYTE:52 [ anim::$5 ] 163.38: zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ] 114.6: zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ] 101: zp ZP_BYTE:50 [ anim::$2 ] 92.58: zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ] 75.75: zp ZP_WORD:48 [ anim::x#0 ] 
Uplift Scope [place_sprites] 22: zp ZP_BYTE:71 [ place_sprites::j2#1 ] 20.9: zp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ] 18.7: zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ] 12.83: zp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ] 9.17: zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ] 9.11: zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ] 
Uplift Scope [setFAC] 78: zp ZP_WORD:27 [ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ] 
Uplift Scope [gen_sintab] 22: zp ZP_WORD:55 [ gen_sintab::$23 ] 22: zp ZP_BYTE:57 [ gen_sintab::$24 ] 18.33: zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ] 2: zp ZP_BYTE:12 [ gen_sintab::max#2 ] 0.44: zp ZP_BYTE:14 [ gen_sintab::length#10 ] 0.33: zp ZP_BYTE:13 [ gen_sintab::min#2 ] 0.22: zp ZP_WORD:15 [ gen_sintab::sintab#12 ] 
Uplift Scope [gen_sprites] 23.1: zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ] 15.58: zp ZP_WORD:32 [ gen_sprites::spr#2 gen_sprites::spr#1 ] 
Uplift Scope [clear_screen] 33: zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 ] 
Uplift Scope [init] 31.17: zp ZP_BYTE:9 [ init::i#2 init::i#1 ] 
Uplift Scope [prepareMEM] 20: zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 ] 4: zp ZP_BYTE:60 [ prepareMEM::$0 ] 4: zp ZP_BYTE:61 [ prepareMEM::$1 ] 
Uplift Scope [getFAC] 22: zp ZP_WORD:53 [ getFAC::return#2 ] 4.33: zp ZP_WORD:58 [ getFAC::return#0 ] 
Uplift Scope [] 7.63: zp ZP_WORD:19 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ] 6.07: zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ] 5.75: zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ] 4.2: zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ] 
Uplift Scope [setMEMtoFAC] 2: zp ZP_WORD:29 [ setMEMtoFAC::mem#5 ] 
Uplift Scope [divMEMbyFAC] 2: zp ZP_WORD:25 [ divMEMbyFAC::mem#2 ] 
Uplift Scope [mulFACbyMEM] 2: zp ZP_WORD:23 [ mulFACbyMEM::mem#2 ] 
Uplift Scope [setARGtoFAC] 
Uplift Scope [addMEMtoFAC] 
Uplift Scope [subFACfromARG] 
Uplift Scope [sinFAC] 
Uplift Scope [main] 
Uplift Scope [progress_init] 
Uplift Scope [progress_inc] 

Uplifting [gen_chargen_sprite] best 1065112 combination zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ] zp ZP_WORD:41 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ] reg byte y [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ] reg byte a [ gen_chargen_sprite::$6 ] reg byte x [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ] reg byte a [ gen_chargen_sprite::$3 ] zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ] zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ] zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ] zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ] zp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ] zp ZP_WORD:63 [ gen_chargen_sprite::$0 ] zp ZP_WORD:65 [ gen_chargen_sprite::$1 ] zp ZP_WORD:67 [ gen_chargen_sprite::chargen#0 ] 
Limited combination testing to 100 combinations of 9216 possible.
Uplifting [anim] best 1062909 combination reg byte x [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ] zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ] reg byte a [ anim::$3 ] reg byte a [ anim::$5 ] zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ] zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ] zp ZP_BYTE:50 [ anim::$2 ] zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ] zp ZP_WORD:48 [ anim::x#0 ] 
Limited combination testing to 100 combinations of 19440 possible.
Uplifting [place_sprites] best 1062549 combination reg byte x [ place_sprites::j2#1 ] reg byte y [ place_sprites::j#2 place_sprites::j#1 ] zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ] reg byte x [ place_sprites::j2#3 place_sprites::j2#2 ] zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ] zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ] 
Limited combination testing to 100 combinations of 972 possible.
Uplifting [setFAC] best 1062549 combination zp ZP_WORD:27 [ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ] 
Uplifting [gen_sintab] best 1062482 combination zp ZP_WORD:55 [ gen_sintab::$23 ] reg byte a [ gen_sintab::$24 ] zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ] reg byte x [ gen_sintab::max#2 ] zp ZP_BYTE:14 [ gen_sintab::length#10 ] zp ZP_BYTE:13 [ gen_sintab::min#2 ] zp ZP_WORD:15 [ gen_sintab::sintab#12 ] 
Uplifting [gen_sprites] best 1062482 combination zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ] zp ZP_WORD:32 [ gen_sprites::spr#2 gen_sprites::spr#1 ] 
Uplifting [clear_screen] best 1062482 combination zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 ] 
Uplifting [init] best 1062332 combination reg byte x [ init::i#2 init::i#1 ] 
Uplifting [prepareMEM] best 1062320 combination zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 ] reg byte a [ prepareMEM::$0 ] reg byte a [ prepareMEM::$1 ] 
Uplifting [getFAC] best 1062320 combination zp ZP_WORD:53 [ getFAC::return#2 ] zp ZP_WORD:58 [ getFAC::return#0 ] 
Uplifting [] best 1062320 combination zp ZP_WORD:19 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ] zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ] zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ] zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ] 
Uplifting [setMEMtoFAC] best 1062320 combination zp ZP_WORD:29 [ setMEMtoFAC::mem#5 ] 
Uplifting [divMEMbyFAC] best 1062320 combination zp ZP_WORD:25 [ divMEMbyFAC::mem#2 ] 
Uplifting [mulFACbyMEM] best 1062320 combination zp ZP_WORD:23 [ mulFACbyMEM::mem#2 ] 
Uplifting [setARGtoFAC] best 1062320 combination 
Uplifting [addMEMtoFAC] best 1062320 combination 
Uplifting [subFACfromARG] best 1062320 combination 
Uplifting [sinFAC] best 1062320 combination 
Uplifting [main] best 1062320 combination 
Uplifting [progress_init] best 1062320 combination 
Uplifting [progress_inc] best 1062320 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
Uplifting [gen_chargen_sprite] best 1062320 combination zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
Uplifting [gen_chargen_sprite] best 1062320 combination zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
Uplifting [gen_chargen_sprite] best 1062320 combination zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ]
Uplifting [gen_chargen_sprite] best 1062320 combination zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
Uplifting [anim] best 1062320 combination zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
Uplifting [gen_chargen_sprite] best 1062320 combination zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ anim::j#2 anim::j#1 ]
Uplifting [anim] best 1062320 combination zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ]
Uplifting [anim] best 1062320 combination zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ anim::$2 ]
Uplifting [anim] best 1062320 combination zp ZP_BYTE:50 [ anim::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ]
Uplifting [anim] best 1062320 combination zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ]
Uplifting [gen_sprites] best 1062320 combination zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
Uplifting [place_sprites] best 1062320 combination zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ]
Uplifting [gen_sintab] best 1062320 combination zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
Uplifting [place_sprites] best 1062320 combination zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ]
Uplifting [place_sprites] best 1062320 combination zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ]
Uplifting [gen_chargen_sprite] best 1062289 combination reg byte x [ gen_chargen_sprite::ch#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Uplifting [] best 1062289 combination zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
Uplifting [] best 1062289 combination zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
Uplifting [] best 1062289 combination zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ gen_sintab::length#10 ]
Uplifting [gen_sintab] best 1062289 combination zp ZP_BYTE:14 [ gen_sintab::length#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ gen_sintab::min#2 ]
Uplifting [gen_sintab] best 1062289 combination zp ZP_BYTE:13 [ gen_sintab::min#2 ] 
Coalescing zero page register with common assignment [ zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ] ] with [ zp ZP_BYTE:50 [ anim::$2 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 ] ] with [ zp ZP_WORD:23 [ mulFACbyMEM::mem#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 mulFACbyMEM::mem#2 ] ] with [ zp ZP_WORD:25 [ divMEMbyFAC::mem#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 mulFACbyMEM::mem#2 divMEMbyFAC::mem#2 ] ] with [ zp ZP_WORD:27 [ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 mulFACbyMEM::mem#2 divMEMbyFAC::mem#2 setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ] ] with [ zp ZP_WORD:29 [ setMEMtoFAC::mem#5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:53 [ getFAC::return#2 ] ] with [ zp ZP_WORD:55 [ gen_sintab::$23 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:53 [ getFAC::return#2 gen_sintab::$23 ] ] with [ zp ZP_WORD:58 [ getFAC::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:63 [ gen_chargen_sprite::$0 ] ] with [ zp ZP_WORD:65 [ gen_chargen_sprite::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:63 [ gen_chargen_sprite::$0 gen_chargen_sprite::$1 ] ] with [ zp ZP_WORD:67 [ gen_chargen_sprite::chargen#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ] ] with [ zp ZP_BYTE:13 [ gen_sintab::min#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 gen_sintab::min#2 ] ] with [ zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 gen_sintab::min#2 gen_sintab::i#10 gen_sintab::i#1 ] ] with [ zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 gen_sintab::min#2 gen_sintab::i#10 gen_sintab::i#1 gen_sprites::i#2 gen_sprites::i#1 ] ] with [ zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ] ] with [ zp ZP_BYTE:14 [ gen_sintab::length#10 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 gen_sintab::length#10 ] ] with [ zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 gen_sintab::length#10 gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ] ] with [ zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ] ] with [ zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 progress_idx#34 progress_idx#12 progress_idx#10 ] ] with [ zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 progress_idx#34 progress_idx#12 progress_idx#10 gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ] ] with [ zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 anim::$2 ] ] with [ zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ] ] with [ zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ] ] with [ zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 ] ] with [ zp ZP_WORD:15 [ gen_sintab::sintab#12 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 gen_sintab::sintab#12 ] ] with [ zp ZP_WORD:32 [ gen_sprites::spr#2 gen_sprites::spr#1 ] ]
Coalescing zero page register [ zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 gen_sintab::sintab#12 gen_sprites::spr#2 gen_sprites::spr#1 ] ] with [ zp ZP_WORD:48 [ anim::x#0 ] ]
Coalescing zero page register [ zp ZP_WORD:19 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ] ] with [ zp ZP_WORD:41 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ] ]
Coalescing zero page register [ zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 mulFACbyMEM::mem#2 divMEMbyFAC::mem#2 setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 setMEMtoFAC::mem#5 ] ] with [ zp ZP_WORD:53 [ getFAC::return#2 gen_sintab::$23 getFAC::return#0 ] ]
Coalescing zero page register [ zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 mulFACbyMEM::mem#2 divMEMbyFAC::mem#2 setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 setMEMtoFAC::mem#5 getFAC::return#2 gen_sintab::$23 getFAC::return#0 ] ] with [ zp ZP_WORD:63 [ gen_chargen_sprite::$0 gen_chargen_sprite::$1 gen_chargen_sprite::chargen#0 ] ]
Allocated (was zp ZP_BYTE:8) zp ZP_BYTE:7 [ anim::j#2 anim::j#1 gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
Allocated (was zp ZP_WORD:10) zp ZP_WORD:8 [ clear_screen::sc#2 clear_screen::sc#1 gen_sintab::sintab#12 gen_sprites::spr#2 gen_sprites::spr#1 anim::x#0 ]
Allocated (was zp ZP_WORD:19) zp ZP_WORD:10 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ]
Allocated (was zp ZP_WORD:21) zp ZP_WORD:12 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 mulFACbyMEM::mem#2 divMEMbyFAC::mem#2 setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 setMEMtoFAC::mem#5 getFAC::return#2 gen_sintab::$23 getFAC::return#0 gen_chargen_sprite::$0 gen_chargen_sprite::$1 gen_chargen_sprite::chargen#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  // Color Ram
  .label COLS = $d800
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .const sinlen_x = $dd
  .const sinlen_y = $c5
  .label sprites = $2000
  .label SCREEN = $400
  .label progress_idx = 4
  .label progress_cursor = $a
  .label sin_idx_x = 2
  .label sin_idx_y = 3
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @60 [phi:@begin->@60]
b60_from_bbegin:
  jmp b60
//SEG5 @60
b60:
//SEG6 [2] call main 
//SEG7 [4] phi from @60 to main [phi:@60->main]
main_from_b60:
  jsr main
//SEG8 [3] phi from @60 to @end [phi:@60->@end]
bend_from_b60:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] call init 
  //SEG12 [43] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
  //SEG13 [6] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
  //SEG14 [6] phi (byte) sin_idx_y#13 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
  //SEG15 [6] phi (byte) sin_idx_x#13 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_x
    jmp b2
  //SEG16 [6] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  b2_from_b2:
    jmp b2
  //SEG17 main::@2
  b2:
  //SEG18 [7] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b2_from_b2
  //SEG19 [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG20 main::@3
  b3:
  //SEG21 [9] call anim 
    jsr anim
  //SEG22 [6] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  b2_from_b3:
  //SEG23 [6] phi (byte) sin_idx_y#13 = (byte) sin_idx_y#11 [phi:main::@3->main::@2#0] -- register_copy 
  //SEG24 [6] phi (byte) sin_idx_x#13 = (byte) sin_idx_x#11 [phi:main::@3->main::@2#1] -- register_copy 
    jmp b2
}
//SEG25 anim
anim: {
    .label _2 = 5
    .label xidx = 4
    .label x = 8
    .label x_msb = 5
    .label j2 = 6
    .label j = 7
  //SEG26 [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG27 [11] (byte) anim::xidx#0 ← (byte) sin_idx_x#13 -- vbuz1=vbuz2 
    lda sin_idx_x
    sta xidx
  //SEG28 [12] (byte) anim::yidx#0 ← (byte) sin_idx_y#13 -- vbuxx=vbuz1 
    ldx sin_idx_y
  //SEG29 [13] phi from anim to anim::@1 [phi:anim->anim::@1]
  b1_from_anim:
  //SEG30 [13] phi (byte) anim::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG31 [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#0 [phi:anim->anim::@1#1] -- register_copy 
  //SEG32 [13] phi (byte) anim::j2#2 = (byte/signed byte/word/signed word/dword/signed dword) $c [phi:anim->anim::@1#2] -- vbuz1=vbuc1 
    lda #$c
    sta j2
  //SEG33 [13] phi (byte) anim::x_msb#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta x_msb
  //SEG34 [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#0 [phi:anim->anim::@1#4] -- register_copy 
    jmp b1
  //SEG35 [13] phi from anim::@3 to anim::@1 [phi:anim::@3->anim::@1]
  b1_from_b3:
  //SEG36 [13] phi (byte) anim::j#2 = (byte) anim::j#1 [phi:anim::@3->anim::@1#0] -- register_copy 
  //SEG37 [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#6 [phi:anim::@3->anim::@1#1] -- register_copy 
  //SEG38 [13] phi (byte) anim::j2#2 = (byte) anim::j2#1 [phi:anim::@3->anim::@1#2] -- register_copy 
  //SEG39 [13] phi (byte) anim::x_msb#2 = (byte) anim::x_msb#1 [phi:anim::@3->anim::@1#3] -- register_copy 
  //SEG40 [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#5 [phi:anim::@3->anim::@1#4] -- register_copy 
    jmp b1
  //SEG41 anim::@1
  b1:
  //SEG42 [14] (word) anim::x#0 ← ((word))(byte/signed byte/word/signed word/dword/signed dword) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) -- vwuz1=vwuc1_plus_pbuc2_derefidx_vbuz2 
    ldy xidx
    lda sintab_x,y
    clc
    adc #<$1e
    sta x
    lda #>$1e
    adc #0
    sta x+1
  //SEG43 [15] (byte~) anim::$2 ← (byte) anim::x_msb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl _2
  //SEG44 [16] (byte~) anim::$3 ← > (word) anim::x#0 -- vbuaa=_hi_vwuz1 
    lda x+1
  //SEG45 [17] (byte) anim::x_msb#1 ← (byte~) anim::$2 | (byte~) anim::$3 -- vbuz1=vbuz1_bor_vbuaa 
    ora x_msb
    sta x_msb
  //SEG46 [18] (byte~) anim::$5 ← < (word) anim::x#0 -- vbuaa=_lo_vwuz1 
    lda x
  //SEG47 [19] *((const byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$5 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy j2
    sta SPRITES_XPOS,y
  //SEG48 [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuxx 
    lda sintab_y,x
    ldy j2
    sta SPRITES_YPOS,y
  //SEG49 [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte/signed byte/word/signed word/dword/signed dword) $a -- vbuz1=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc xidx
    sta xidx
  //SEG50 [22] if((byte) anim::xidx#1<(const byte) sinlen_x#0) goto anim::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda xidx
    cmp #sinlen_x
    bcc b2_from_b1
    jmp b6
  //SEG51 anim::@6
  b6:
  //SEG52 [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 -- vbuz1=vbuz1_minus_vbuc1 
    lda xidx
    sec
    sbc #sinlen_x
    sta xidx
  //SEG53 [24] phi from anim::@1 anim::@6 to anim::@2 [phi:anim::@1/anim::@6->anim::@2]
  b2_from_b1:
  b2_from_b6:
  //SEG54 [24] phi (byte) anim::xidx#5 = (byte) anim::xidx#1 [phi:anim::@1/anim::@6->anim::@2#0] -- register_copy 
    jmp b2
  //SEG55 anim::@2
  b2:
  //SEG56 [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    clc
    adc #8
    tax
  //SEG57 [26] if((byte) anim::yidx#1<(const byte) sinlen_y#0) goto anim::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #sinlen_y
    bcc b3_from_b2
    jmp b7
  //SEG58 anim::@7
  b7:
  //SEG59 [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 -- vbuxx=vbuxx_minus_vbuc1 
    txa
    sec
    sbc #sinlen_y
    tax
  //SEG60 [28] phi from anim::@2 anim::@7 to anim::@3 [phi:anim::@2/anim::@7->anim::@3]
  b3_from_b2:
  b3_from_b7:
  //SEG61 [28] phi (byte) anim::yidx#6 = (byte) anim::yidx#1 [phi:anim::@2/anim::@7->anim::@3#0] -- register_copy 
    jmp b3
  //SEG62 anim::@3
  b3:
  //SEG63 [29] (byte) anim::j2#1 ← (byte) anim::j2#2 - (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_minus_2 
    dec j2
    dec j2
  //SEG64 [30] (byte) anim::j#1 ← ++ (byte) anim::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG65 [31] if((byte) anim::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto anim::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #7
    bne b1_from_b3
    jmp b8
  //SEG66 anim::@8
  b8:
  //SEG67 [32] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#1 -- _deref_pbuc1=vbuz1 
    lda x_msb
    sta SPRITES_XMSB
  //SEG68 [33] (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_x
  //SEG69 [34] if((byte) sin_idx_x#3<(const byte) sinlen_x#0) goto anim::@14 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_x
    cmp #sinlen_x
    bcc b14_from_b8
  //SEG70 [35] phi from anim::@8 to anim::@4 [phi:anim::@8->anim::@4]
  b4_from_b8:
  //SEG71 [35] phi (byte) sin_idx_x#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@8->anim::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_x
    jmp b4
  //SEG72 anim::@4
  b4:
  //SEG73 [36] (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_y
  //SEG74 [37] if((byte) sin_idx_y#3<(const byte) sinlen_y#0) goto anim::@15 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_y
    cmp #sinlen_y
    bcc b15_from_b4
  //SEG75 [38] phi from anim::@4 to anim::@5 [phi:anim::@4->anim::@5]
  b5_from_b4:
  //SEG76 [38] phi (byte) sin_idx_y#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@4->anim::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
    jmp b5
  //SEG77 anim::@5
  b5:
  //SEG78 [39] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    jmp breturn
  //SEG79 anim::@return
  breturn:
  //SEG80 [40] return 
    rts
  //SEG81 [41] phi from anim::@4 to anim::@15 [phi:anim::@4->anim::@15]
  b15_from_b4:
    jmp b15
  //SEG82 anim::@15
  b15:
  //SEG83 [38] phi from anim::@15 to anim::@5 [phi:anim::@15->anim::@5]
  b5_from_b15:
  //SEG84 [38] phi (byte) sin_idx_y#11 = (byte) sin_idx_y#3 [phi:anim::@15->anim::@5#0] -- register_copy 
    jmp b5
  //SEG85 [42] phi from anim::@8 to anim::@14 [phi:anim::@8->anim::@14]
  b14_from_b8:
    jmp b14
  //SEG86 anim::@14
  b14:
  //SEG87 [35] phi from anim::@14 to anim::@4 [phi:anim::@14->anim::@4]
  b4_from_b14:
  //SEG88 [35] phi (byte) sin_idx_x#11 = (byte) sin_idx_x#3 [phi:anim::@14->anim::@4#0] -- register_copy 
    jmp b4
}
//SEG89 init
init: {
  //SEG90 [44] call clear_screen 
  //SEG91 [65] phi from init to clear_screen [phi:init->clear_screen]
  clear_screen_from_init:
    jsr clear_screen
  //SEG92 [45] phi from init to init::@1 [phi:init->init::@1]
  b1_from_init:
  //SEG93 [45] phi (byte) init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init->init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG94 [45] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
  //SEG95 [45] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
    jmp b1
  //SEG96 init::@1
  b1:
  //SEG97 [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta COLS,x
  //SEG98 [47] *((const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) $b -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$b
    sta COLS+$28,x
  //SEG99 [48] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG100 [49] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b1_from_b1
  //SEG101 [50] phi from init::@1 to init::@2 [phi:init::@1->init::@2]
  b2_from_b1:
    jmp b2
  //SEG102 init::@2
  b2:
  //SEG103 [51] call place_sprites 
    jsr place_sprites
  //SEG104 [52] phi from init::@2 to init::@4 [phi:init::@2->init::@4]
  b4_from_b2:
    jmp b4
  //SEG105 init::@4
  b4:
  //SEG106 [53] call gen_sprites 
  //SEG107 [170] phi from init::@4 to gen_sprites [phi:init::@4->gen_sprites]
  gen_sprites_from_b4:
    jsr gen_sprites
  //SEG108 [54] phi from init::@4 to init::@5 [phi:init::@4->init::@5]
  b5_from_b4:
    jmp b5
  //SEG109 init::@5
  b5:
  //SEG110 [55] call progress_init 
  //SEG111 [168] phi from init::@5 to progress_init [phi:init::@5->progress_init]
  progress_init_from_b5:
  //SEG112 [168] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0 [phi:init::@5->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta progress_init.line
    lda #>SCREEN
    sta progress_init.line+1
    jsr progress_init
  //SEG113 [56] phi from init::@5 to init::@6 [phi:init::@5->init::@6]
  b6_from_b5:
    jmp b6
  //SEG114 init::@6
  b6:
  //SEG115 [57] call gen_sintab 
  //SEG116 [71] phi from init::@6 to gen_sintab [phi:init::@6->gen_sintab]
  gen_sintab_from_b6:
  //SEG117 [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$dd]) sintab_x#0 [phi:init::@6->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_x
    sta gen_sintab.sintab
    lda #>sintab_x
    sta gen_sintab.sintab+1
  //SEG118 [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_x#0 [phi:init::@6->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_x
    sta gen_sintab.length
  //SEG119 [71] phi (byte) gen_sintab::min#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@6->gen_sintab#2] -- vbuz1=vbuc1 
    lda #0
    sta gen_sintab.min
  //SEG120 [71] phi (byte) gen_sintab::max#2 = (byte/word/signed word/dword/signed dword) $ff [phi:init::@6->gen_sintab#3] -- vbuxx=vbuc1 
    ldx #$ff
    jsr gen_sintab
  //SEG121 [58] phi from init::@6 to init::@7 [phi:init::@6->init::@7]
  b7_from_b6:
    jmp b7
  //SEG122 init::@7
  b7:
  //SEG123 [59] call progress_init 
  //SEG124 [168] phi from init::@7 to progress_init [phi:init::@7->progress_init]
  progress_init_from_b7:
  //SEG125 [168] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28 [phi:init::@7->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28
    sta progress_init.line
    lda #>SCREEN+$28
    sta progress_init.line+1
    jsr progress_init
  //SEG126 [60] phi from init::@7 to init::@8 [phi:init::@7->init::@8]
  b8_from_b7:
    jmp b8
  //SEG127 init::@8
  b8:
  //SEG128 [61] call gen_sintab 
  //SEG129 [71] phi from init::@8 to gen_sintab [phi:init::@8->gen_sintab]
  gen_sintab_from_b8:
  //SEG130 [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$c5]) sintab_y#0 [phi:init::@8->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_y
    sta gen_sintab.sintab
    lda #>sintab_y
    sta gen_sintab.sintab+1
  //SEG131 [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_y#0 [phi:init::@8->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_y
    sta gen_sintab.length
  //SEG132 [71] phi (byte) gen_sintab::min#2 = (byte/signed byte/word/signed word/dword/signed dword) $32 [phi:init::@8->gen_sintab#2] -- vbuz1=vbuc1 
    lda #$32
    sta gen_sintab.min
  //SEG133 [71] phi (byte) gen_sintab::max#2 = (byte/word/signed word/dword/signed dword) $d0 [phi:init::@8->gen_sintab#3] -- vbuxx=vbuc1 
    ldx #$d0
    jsr gen_sintab
  //SEG134 [62] phi from init::@8 to init::@9 [phi:init::@8->init::@9]
  b9_from_b8:
    jmp b9
  //SEG135 init::@9
  b9:
  //SEG136 [63] call clear_screen 
  //SEG137 [65] phi from init::@9 to clear_screen [phi:init::@9->clear_screen]
  clear_screen_from_b9:
    jsr clear_screen
    jmp breturn
  //SEG138 init::@return
  breturn:
  //SEG139 [64] return 
    rts
}
//SEG140 clear_screen
clear_screen: {
    .label sc = 8
  //SEG141 [66] phi from clear_screen to clear_screen::@1 [phi:clear_screen->clear_screen::@1]
  b1_from_clear_screen:
  //SEG142 [66] phi (byte*) clear_screen::sc#2 = (const byte*) SCREEN#0 [phi:clear_screen->clear_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    jmp b1
  //SEG143 [66] phi from clear_screen::@1 to clear_screen::@1 [phi:clear_screen::@1->clear_screen::@1]
  b1_from_b1:
  //SEG144 [66] phi (byte*) clear_screen::sc#2 = (byte*) clear_screen::sc#1 [phi:clear_screen::@1->clear_screen::@1#0] -- register_copy 
    jmp b1
  //SEG145 clear_screen::@1
  b1:
  //SEG146 [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG147 [68] (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG148 [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto clear_screen::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda sc
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG149 clear_screen::@return
  breturn:
  //SEG150 [70] return 
    rts
}
//SEG151 gen_sintab
// Generate a sinus table using BASIC floats
// - sintab is a pointer to the table to fill
// - length is the length of the sine table
// - min is the minimum value of the generated sinus
// - max is the maximum value of the generated sinus
// gen_sintab(byte* zeropage(8) sintab, byte zeropage(3) length, byte zeropage(2) min, byte register(X) max)
gen_sintab: {
    // amplitude/2
    .label f_2pi = $e2e5
    .label _23 = $c
    .label i = 2
    .label min = 2
    .label length = 3
    .label sintab = 8
  //SEG152 [72] (word) setFAC::w#0 ← ((word)) (byte) gen_sintab::max#2 -- vwuz1=_word_vbuxx 
    txa
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG153 [73] call setFAC 
  //SEG154 [154] phi from gen_sintab to setFAC [phi:gen_sintab->setFAC]
  setFAC_from_gen_sintab:
  //SEG155 [154] phi (word) setFAC::w#5 = (word) setFAC::w#0 [phi:gen_sintab->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG156 [74] phi from gen_sintab to gen_sintab::@3 [phi:gen_sintab->gen_sintab::@3]
  b3_from_gen_sintab:
    jmp b3
  //SEG157 gen_sintab::@3
  b3:
  //SEG158 [75] call setARGtoFAC 
    jsr setARGtoFAC
    jmp b4
  //SEG159 gen_sintab::@4
  b4:
  //SEG160 asm { lda#0 ldx#0 ldy#0  }
    // arg = max
    // TODO: Kernel JSR clobbers A,X,Y
    lda #0
    ldx #0
    ldy #0
  //SEG161 [77] (word) setFAC::w#1 ← ((word)) (byte) gen_sintab::min#2 -- vwuz1=_word_vbuz2 
    lda min
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG162 [78] call setFAC 
  //SEG163 [154] phi from gen_sintab::@4 to setFAC [phi:gen_sintab::@4->setFAC]
  setFAC_from_b4:
  //SEG164 [154] phi (word) setFAC::w#5 = (word) setFAC::w#1 [phi:gen_sintab::@4->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG165 [79] phi from gen_sintab::@4 to gen_sintab::@5 [phi:gen_sintab::@4->gen_sintab::@5]
  b5_from_b4:
    jmp b5
  //SEG166 gen_sintab::@5
  b5:
  //SEG167 [80] call setMEMtoFAC 
  //SEG168 [159] phi from gen_sintab::@5 to setMEMtoFAC [phi:gen_sintab::@5->setMEMtoFAC]
  setMEMtoFAC_from_b5:
  //SEG169 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@5->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG170 [81] phi from gen_sintab::@5 to gen_sintab::@6 [phi:gen_sintab::@5->gen_sintab::@6]
  b6_from_b5:
    jmp b6
  //SEG171 gen_sintab::@6
  b6:
  //SEG172 [82] call subFACfromARG 
    jsr subFACfromARG
  //SEG173 [83] phi from gen_sintab::@6 to gen_sintab::@7 [phi:gen_sintab::@6->gen_sintab::@7]
  b7_from_b6:
    jmp b7
  //SEG174 gen_sintab::@7
  b7:
  //SEG175 [84] call setMEMtoFAC 
  //SEG176 [159] phi from gen_sintab::@7 to setMEMtoFAC [phi:gen_sintab::@7->setMEMtoFAC]
  setMEMtoFAC_from_b7:
  //SEG177 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@7->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG178 [85] phi from gen_sintab::@7 to gen_sintab::@8 [phi:gen_sintab::@7->gen_sintab::@8]
  b8_from_b7:
    jmp b8
  //SEG179 gen_sintab::@8
  b8:
  //SEG180 [86] call setFAC 
  //SEG181 [154] phi from gen_sintab::@8 to setFAC [phi:gen_sintab::@8->setFAC]
  setFAC_from_b8:
  //SEG182 [154] phi (word) setFAC::w#5 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:gen_sintab::@8->setFAC#0] -- vwuz1=vbuc1 
    lda #2
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    jsr setFAC
  //SEG183 [87] phi from gen_sintab::@8 to gen_sintab::@9 [phi:gen_sintab::@8->gen_sintab::@9]
  b9_from_b8:
    jmp b9
  //SEG184 gen_sintab::@9
  b9:
  //SEG185 [88] call divMEMbyFAC 
  //SEG186 [149] phi from gen_sintab::@9 to divMEMbyFAC [phi:gen_sintab::@9->divMEMbyFAC]
  divMEMbyFAC_from_b9:
  //SEG187 [149] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@9->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta divMEMbyFAC.mem
    lda #>f_amp
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
  //SEG188 [89] phi from gen_sintab::@9 to gen_sintab::@10 [phi:gen_sintab::@9->gen_sintab::@10]
  b10_from_b9:
    jmp b10
  //SEG189 gen_sintab::@10
  b10:
  //SEG190 [90] call setMEMtoFAC 
  //SEG191 [159] phi from gen_sintab::@10 to setMEMtoFAC [phi:gen_sintab::@10->setMEMtoFAC]
  setMEMtoFAC_from_b10:
  //SEG192 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@10->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG193 [91] phi from gen_sintab::@10 to gen_sintab::@11 [phi:gen_sintab::@10->gen_sintab::@11]
  b11_from_b10:
    jmp b11
  //SEG194 gen_sintab::@11
  b11:
  //SEG195 [92] call addMEMtoFAC 
  //SEG196 [132] phi from gen_sintab::@11 to addMEMtoFAC [phi:gen_sintab::@11->addMEMtoFAC]
  addMEMtoFAC_from_b11:
    jsr addMEMtoFAC
  //SEG197 [93] phi from gen_sintab::@11 to gen_sintab::@12 [phi:gen_sintab::@11->gen_sintab::@12]
  b12_from_b11:
    jmp b12
  //SEG198 gen_sintab::@12
  b12:
  //SEG199 [94] call setMEMtoFAC 
  //SEG200 [159] phi from gen_sintab::@12 to setMEMtoFAC [phi:gen_sintab::@12->setMEMtoFAC]
  setMEMtoFAC_from_b12:
  //SEG201 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@12->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG202 [95] phi from gen_sintab::@12 to gen_sintab::@1 [phi:gen_sintab::@12->gen_sintab::@1]
  b1_from_b12:
  //SEG203 [95] phi (byte*) progress_cursor#34 = (byte*) progress_init::line#2 [phi:gen_sintab::@12->gen_sintab::@1#0] -- register_copy 
  //SEG204 [95] phi (byte) progress_idx#34 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_sintab::@12->gen_sintab::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
  //SEG205 [95] phi (byte) gen_sintab::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_sintab::@12->gen_sintab::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // f_min = min + (max - min) / 2
  //SEG206 [95] phi from gen_sintab::@23 to gen_sintab::@1 [phi:gen_sintab::@23->gen_sintab::@1]
  b1_from_b23:
  //SEG207 [95] phi (byte*) progress_cursor#34 = (byte*) progress_cursor#11 [phi:gen_sintab::@23->gen_sintab::@1#0] -- register_copy 
  //SEG208 [95] phi (byte) progress_idx#34 = (byte) progress_idx#12 [phi:gen_sintab::@23->gen_sintab::@1#1] -- register_copy 
  //SEG209 [95] phi (byte) gen_sintab::i#10 = (byte) gen_sintab::i#1 [phi:gen_sintab::@23->gen_sintab::@1#2] -- register_copy 
    jmp b1
  //SEG210 gen_sintab::@1
  b1:
  //SEG211 [96] (word) setFAC::w#3 ← ((word)) (byte) gen_sintab::i#10 -- vwuz1=_word_vbuz2 
    lda i
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG212 [97] call setFAC 
  //SEG213 [154] phi from gen_sintab::@1 to setFAC [phi:gen_sintab::@1->setFAC]
  setFAC_from_b1:
  //SEG214 [154] phi (word) setFAC::w#5 = (word) setFAC::w#3 [phi:gen_sintab::@1->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG215 [98] phi from gen_sintab::@1 to gen_sintab::@14 [phi:gen_sintab::@1->gen_sintab::@14]
  b14_from_b1:
    jmp b14
  //SEG216 gen_sintab::@14
  b14:
  //SEG217 [99] call mulFACbyMEM 
  //SEG218 [142] phi from gen_sintab::@14 to mulFACbyMEM [phi:gen_sintab::@14->mulFACbyMEM]
  mulFACbyMEM_from_b14:
  //SEG219 [142] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) gen_sintab::f_2pi#0 [phi:gen_sintab::@14->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta mulFACbyMEM.mem
    lda #>f_2pi
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG220 [100] phi from gen_sintab::@14 to gen_sintab::@15 [phi:gen_sintab::@14->gen_sintab::@15]
  b15_from_b14:
    jmp b15
  //SEG221 gen_sintab::@15
  b15:
  //SEG222 [101] call setMEMtoFAC 
  //SEG223 [159] phi from gen_sintab::@15 to setMEMtoFAC [phi:gen_sintab::@15->setMEMtoFAC]
  setMEMtoFAC_from_b15:
  //SEG224 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@15->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta setMEMtoFAC.mem
    lda #>f_i
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    jmp b16
  //SEG225 gen_sintab::@16
  b16:
  //SEG226 [102] (word) setFAC::w#4 ← ((word)) (byte) gen_sintab::length#10 -- vwuz1=_word_vbuz2 
    lda length
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG227 [103] call setFAC 
  //SEG228 [154] phi from gen_sintab::@16 to setFAC [phi:gen_sintab::@16->setFAC]
  setFAC_from_b16:
  //SEG229 [154] phi (word) setFAC::w#5 = (word) setFAC::w#4 [phi:gen_sintab::@16->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG230 [104] phi from gen_sintab::@16 to gen_sintab::@17 [phi:gen_sintab::@16->gen_sintab::@17]
  b17_from_b16:
    jmp b17
  //SEG231 gen_sintab::@17
  b17:
  //SEG232 [105] call divMEMbyFAC 
  //SEG233 [149] phi from gen_sintab::@17 to divMEMbyFAC [phi:gen_sintab::@17->divMEMbyFAC]
  divMEMbyFAC_from_b17:
  //SEG234 [149] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@17->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta divMEMbyFAC.mem
    lda #>f_i
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
  //SEG235 [106] phi from gen_sintab::@17 to gen_sintab::@18 [phi:gen_sintab::@17->gen_sintab::@18]
  b18_from_b17:
    jmp b18
  //SEG236 gen_sintab::@18
  b18:
  //SEG237 [107] call sinFAC 
    jsr sinFAC
  //SEG238 [108] phi from gen_sintab::@18 to gen_sintab::@19 [phi:gen_sintab::@18->gen_sintab::@19]
  b19_from_b18:
    jmp b19
  //SEG239 gen_sintab::@19
  b19:
  //SEG240 [109] call mulFACbyMEM 
  //SEG241 [142] phi from gen_sintab::@19 to mulFACbyMEM [phi:gen_sintab::@19->mulFACbyMEM]
  mulFACbyMEM_from_b19:
  //SEG242 [142] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@19->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta mulFACbyMEM.mem
    lda #>f_amp
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG243 [110] phi from gen_sintab::@19 to gen_sintab::@20 [phi:gen_sintab::@19->gen_sintab::@20]
  b20_from_b19:
    jmp b20
  //SEG244 gen_sintab::@20
  b20:
  //SEG245 [111] call addMEMtoFAC 
  //SEG246 [132] phi from gen_sintab::@20 to addMEMtoFAC [phi:gen_sintab::@20->addMEMtoFAC]
  addMEMtoFAC_from_b20:
    jsr addMEMtoFAC
  //SEG247 [112] phi from gen_sintab::@20 to gen_sintab::@21 [phi:gen_sintab::@20->gen_sintab::@21]
  b21_from_b20:
    jmp b21
  //SEG248 gen_sintab::@21
  b21:
  //SEG249 [113] call getFAC 
    jsr getFAC
  //SEG250 [114] (word) getFAC::return#2 ← (word) getFAC::return#0
    jmp b22
  //SEG251 gen_sintab::@22
  b22:
  //SEG252 [115] (word~) gen_sintab::$23 ← (word) getFAC::return#2
  //SEG253 [116] (byte~) gen_sintab::$24 ← ((byte)) (word~) gen_sintab::$23 -- vbuaa=_byte_vwuz1 
    lda _23
  //SEG254 [117] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24 -- pbuz1_derefidx_vbuz2=vbuaa 
    // fac =  sin( i * 2 * PI / length ) * (max - min) / 2 + min + (max - min) / 2
    ldy i
    sta (sintab),y
  //SEG255 [118] call progress_inc 
    jsr progress_inc
    jmp b23
  //SEG256 gen_sintab::@23
  b23:
  //SEG257 [119] (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG258 [120] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda i
    cmp length
    bcc b1_from_b23
    jmp breturn
  //SEG259 gen_sintab::@return
  breturn:
  //SEG260 [121] return 
    rts
    f_i: .byte 0, 0, 0, 0, 0
    // i * 2 * PI
    f_min: .byte 0, 0, 0, 0, 0
    // amplitude/2 + min
    f_amp: .byte 0, 0, 0, 0, 0
}
//SEG261 progress_inc
// Increase PETSCII progress one bit
// Done by increasing the character until the idx is 8 and then moving to the next char
progress_inc: {
  //SEG262 [122] (byte) progress_idx#10 ← ++ (byte) progress_idx#34 -- vbuz1=_inc_vbuz1 
    inc progress_idx
  //SEG263 [123] if((byte) progress_idx#10!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto progress_inc::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda progress_idx
    cmp #8
    bne b1_from_progress_inc
    jmp b2
  //SEG264 progress_inc::@2
  b2:
  //SEG265 [124] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte/signed byte/word/signed word/dword/signed dword) 8) -- _deref_pbuz1=_deref_pbuc1 
    lda progress_chars+8
    ldy #0
    sta (progress_cursor),y
  //SEG266 [125] (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#34 -- pbuz1=_inc_pbuz1 
    inc progress_cursor
    bne !+
    inc progress_cursor+1
  !:
  //SEG267 [126] phi from progress_inc::@2 to progress_inc::@1 [phi:progress_inc::@2->progress_inc::@1]
  b1_from_b2:
  //SEG268 [126] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#10 [phi:progress_inc::@2->progress_inc::@1#0] -- register_copy 
  //SEG269 [126] phi (byte) progress_idx#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:progress_inc::@2->progress_inc::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
    jmp b1
  //SEG270 [126] phi from progress_inc to progress_inc::@1 [phi:progress_inc->progress_inc::@1]
  b1_from_progress_inc:
  //SEG271 [126] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#34 [phi:progress_inc->progress_inc::@1#0] -- register_copy 
  //SEG272 [126] phi (byte) progress_idx#12 = (byte) progress_idx#10 [phi:progress_inc->progress_inc::@1#1] -- register_copy 
    jmp b1
  //SEG273 progress_inc::@1
  b1:
  //SEG274 [127] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy progress_idx
    lda progress_chars,y
    ldy #0
    sta (progress_cursor),y
    jmp breturn
  //SEG275 progress_inc::@return
  breturn:
  //SEG276 [128] return 
    rts
    // Progress characters
    progress_chars: .byte $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0
}
//SEG277 getFAC
// word = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit word
// Destroys the value in the FAC in the process
getFAC: {
    .label return = $c
  //SEG278 asm { jsr$b1aa sty$fe sta$ff  }
    // Load FAC (floating point accumulator) integer part into word register Y,A
    jsr $b1aa
    sty $fe
    sta $ff
  //SEG279 [130] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta return
    lda memHi
    sta return+1
    jmp breturn
  //SEG280 getFAC::@return
  breturn:
  //SEG281 [131] return 
    rts
}
//SEG282 addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 bytes from memory
addMEMtoFAC: {
  //SEG283 [133] call prepareMEM 
  //SEG284 [136] phi from addMEMtoFAC to prepareMEM [phi:addMEMtoFAC->prepareMEM]
  prepareMEM_from_addMEMtoFAC:
  //SEG285 [136] phi (byte*) prepareMEM::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:addMEMtoFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<gen_sintab.f_min
    sta prepareMEM.mem
    lda #>gen_sintab.f_min
    sta prepareMEM.mem+1
    jsr prepareMEM
    jmp b1
  //SEG286 addMEMtoFAC::@1
  b1:
  //SEG287 asm { lda$fe ldy$ff jsr$b867  }
    lda $fe
    ldy $ff
    jsr $b867
    jmp breturn
  //SEG288 addMEMtoFAC::@return
  breturn:
  //SEG289 [135] return 
    rts
}
//SEG290 prepareMEM
// Prepare MEM pointers for operations using MEM
// prepareMEM(byte* zeropage($c) mem)
prepareMEM: {
    .label mem = $c
  //SEG291 [137] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 -- vbuaa=_lo_pbuz1 
    lda mem
  //SEG292 [138] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0 -- _deref_pbuc1=vbuaa 
    sta memLo
  //SEG293 [139] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 -- vbuaa=_hi_pbuz1 
    lda mem+1
  //SEG294 [140] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1 -- _deref_pbuc1=vbuaa 
    sta memHi
    jmp breturn
  //SEG295 prepareMEM::@return
  breturn:
  //SEG296 [141] return 
    rts
}
//SEG297 mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 bytes from memory
// mulFACbyMEM(byte* zeropage($c) mem)
mulFACbyMEM: {
    .label mem = $c
  //SEG298 [143] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
  //SEG299 [144] call prepareMEM 
  //SEG300 [136] phi from mulFACbyMEM to prepareMEM [phi:mulFACbyMEM->prepareMEM]
  prepareMEM_from_mulFACbyMEM:
  //SEG301 [136] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#4 [phi:mulFACbyMEM->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG302 mulFACbyMEM::@1
  b1:
  //SEG303 asm { lda$fe ldy$ff jsr$ba28  }
    lda $fe
    ldy $ff
    jsr $ba28
    jmp breturn
  //SEG304 mulFACbyMEM::@return
  breturn:
  //SEG305 [146] return 
    rts
}
//SEG306 sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
  //SEG307 asm { jsr$e26b  }
    jsr $e26b
    jmp breturn
  //SEG308 sinFAC::@return
  breturn:
  //SEG309 [148] return 
    rts
}
//SEG310 divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 bytes from memory
// divMEMbyFAC(byte* zeropage($c) mem)
divMEMbyFAC: {
    .label mem = $c
  //SEG311 [150] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2
  //SEG312 [151] call prepareMEM 
  //SEG313 [136] phi from divMEMbyFAC to prepareMEM [phi:divMEMbyFAC->prepareMEM]
  prepareMEM_from_divMEMbyFAC:
  //SEG314 [136] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#3 [phi:divMEMbyFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG315 divMEMbyFAC::@1
  b1:
  //SEG316 asm { lda$fe ldy$ff jsr$bb0f  }
    lda $fe
    ldy $ff
    jsr $bb0f
    jmp breturn
  //SEG317 divMEMbyFAC::@return
  breturn:
  //SEG318 [153] return 
    rts
}
//SEG319 setFAC
// FAC = word
// Set the FAC (floating point accumulator) to the integer value of a 16bit word
// setFAC(word zeropage($c) w)
setFAC: {
    .label w = $c
  //SEG320 [155] (byte*~) prepareMEM::mem#8 ← (byte*)(word) setFAC::w#5
  //SEG321 [156] call prepareMEM 
  //SEG322 [136] phi from setFAC to prepareMEM [phi:setFAC->prepareMEM]
  prepareMEM_from_setFAC:
  //SEG323 [136] phi (byte*) prepareMEM::mem#5 = (byte*~) prepareMEM::mem#8 [phi:setFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG324 setFAC::@1
  b1:
  //SEG325 asm { ldy$fe lda$ff jsr$b391  }
    // Load word register Y,A into FAC (floating point accumulator)
    ldy $fe
    lda $ff
    jsr $b391
    jmp breturn
  //SEG326 setFAC::@return
  breturn:
  //SEG327 [158] return 
    rts
}
//SEG328 setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 bytes (means it is necessary to allocate 5 bytes to avoid clobbering other data using eg. byte[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zeropage($c) mem)
setMEMtoFAC: {
    .label mem = $c
  //SEG329 [160] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5
  //SEG330 [161] call prepareMEM 
  //SEG331 [136] phi from setMEMtoFAC to prepareMEM [phi:setMEMtoFAC->prepareMEM]
  prepareMEM_from_setMEMtoFAC:
  //SEG332 [136] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#1 [phi:setMEMtoFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG333 setMEMtoFAC::@1
  b1:
  //SEG334 asm { ldx$fe ldy$ff jsr$bbd4  }
    ldx $fe
    ldy $ff
    jsr $bbd4
    jmp breturn
  //SEG335 setMEMtoFAC::@return
  breturn:
  //SEG336 [163] return 
    rts
}
//SEG337 subFACfromARG
// FAC = ARG-FAC
// Set FAC to ARG minus FAC
subFACfromARG: {
  //SEG338 asm { jsr$b853  }
    jsr $b853
    jmp breturn
  //SEG339 subFACfromARG::@return
  breturn:
  //SEG340 [165] return 
    rts
}
//SEG341 setARGtoFAC
// ARG = FAC
// Set the ARG (floating point argument) to the value of the FAC (floating point accumulator)
setARGtoFAC: {
  //SEG342 asm { jsr$bc0f  }
    jsr $bc0f
    jmp breturn
  //SEG343 setARGtoFAC::@return
  breturn:
  //SEG344 [167] return 
    rts
}
//SEG345 progress_init
// Initialize the PETSCII progress bar
// progress_init(byte* zeropage($a) line)
progress_init: {
    .label line = $a
    jmp breturn
  //SEG346 progress_init::@return
  breturn:
  //SEG347 [169] return 
    rts
}
//SEG348 gen_sprites
gen_sprites: {
    .label spr = 8
    .label i = 2
  //SEG349 [171] phi from gen_sprites to gen_sprites::@1 [phi:gen_sprites->gen_sprites::@1]
  b1_from_gen_sprites:
  //SEG350 [171] phi (byte*) gen_sprites::spr#2 = (const byte*) sprites#0 [phi:gen_sprites->gen_sprites::@1#0] -- pbuz1=pbuc1 
    lda #<sprites
    sta spr
    lda #>sprites
    sta spr+1
  //SEG351 [171] phi (byte) gen_sprites::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_sprites->gen_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG352 [171] phi from gen_sprites::@3 to gen_sprites::@1 [phi:gen_sprites::@3->gen_sprites::@1]
  b1_from_b3:
  //SEG353 [171] phi (byte*) gen_sprites::spr#2 = (byte*) gen_sprites::spr#1 [phi:gen_sprites::@3->gen_sprites::@1#0] -- register_copy 
  //SEG354 [171] phi (byte) gen_sprites::i#2 = (byte) gen_sprites::i#1 [phi:gen_sprites::@3->gen_sprites::@1#1] -- register_copy 
    jmp b1
  //SEG355 gen_sprites::@1
  b1:
  //SEG356 [172] (byte) gen_chargen_sprite::ch#0 ← *((const byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy i
    ldx cml,y
  //SEG357 [173] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 -- pbuz1=pbuz2 
    lda spr
    sta gen_chargen_sprite.sprite
    lda spr+1
    sta gen_chargen_sprite.sprite+1
  //SEG358 [174] call gen_chargen_sprite 
    jsr gen_chargen_sprite
    jmp b3
  //SEG359 gen_sprites::@3
  b3:
  //SEG360 [175] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte/signed byte/word/signed word/dword/signed dword) $40 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$40
    clc
    adc spr
    sta spr
    bcc !+
    inc spr+1
  !:
  //SEG361 [176] (byte) gen_sprites::i#1 ← ++ (byte) gen_sprites::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG362 [177] if((byte) gen_sprites::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto gen_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #7
    bne b1_from_b3
    jmp breturn
  //SEG363 gen_sprites::@return
  breturn:
  //SEG364 [178] return 
    rts
    cml: .text "camelot"
}
//SEG365 gen_chargen_sprite
// Generate a sprite from a C64 CHARGEN character (by making each pixel 3x3 pixels large)
// - c is the character to generate
// - sprite is a pointer to the position of the sprite to generate
// gen_chargen_sprite(byte register(X) ch, byte* zeropage($a) sprite)
gen_chargen_sprite: {
    .label _0 = $c
    .label _1 = $c
    .label sprite = $a
    .label chargen = $c
    .label bits = 4
    .label s_gen = 7
    .label x = 5
    .label y = 3
    .label c = 6
  //SEG366 [179] (word~) gen_chargen_sprite::$0 ← ((word)) (byte) gen_chargen_sprite::ch#0 -- vwuz1=_word_vbuxx 
    txa
    sta _0
    lda #0
    sta _0+1
  //SEG367 [180] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vwuz1=vwuz1_rol_3 
    asl _1
    rol _1+1
    asl _1
    rol _1+1
    asl _1
    rol _1+1
  //SEG368 [181] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda chargen
    adc #<CHARGEN
    sta chargen
    lda chargen+1
    adc #>CHARGEN
    sta chargen+1
  //SEG369 asm { sei  }
    sei
  //SEG370 [183] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
  //SEG371 [184] phi from gen_chargen_sprite to gen_chargen_sprite::@1 [phi:gen_chargen_sprite->gen_chargen_sprite::@1]
  b1_from_gen_chargen_sprite:
  //SEG372 [184] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#0] -- register_copy 
  //SEG373 [184] phi (byte) gen_chargen_sprite::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
  //SEG374 [184] phi from gen_chargen_sprite::@9 to gen_chargen_sprite::@1 [phi:gen_chargen_sprite::@9->gen_chargen_sprite::@1]
  b1_from_b9:
  //SEG375 [184] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#2 [phi:gen_chargen_sprite::@9->gen_chargen_sprite::@1#0] -- register_copy 
  //SEG376 [184] phi (byte) gen_chargen_sprite::y#2 = (byte) gen_chargen_sprite::y#1 [phi:gen_chargen_sprite::@9->gen_chargen_sprite::@1#1] -- register_copy 
    jmp b1
  //SEG377 gen_chargen_sprite::@1
  b1:
  //SEG378 [185] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    // current chargen line
    ldy y
    lda (chargen),y
    sta bits
  //SEG379 [186] phi from gen_chargen_sprite::@1 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2]
  b2_from_b1:
  //SEG380 [186] phi (byte) gen_chargen_sprite::x#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG381 [186] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#11 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#1] -- register_copy 
  //SEG382 [186] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#2] -- vbuyy=vbuc1 
    ldy #0
  //SEG383 [186] phi (byte) gen_chargen_sprite::s_gen#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta s_gen
  //SEG384 [186] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#4] -- register_copy 
    jmp b2
  //SEG385 [186] phi from gen_chargen_sprite::@8 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2]
  b2_from_b8:
  //SEG386 [186] phi (byte) gen_chargen_sprite::x#6 = (byte) gen_chargen_sprite::x#1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#0] -- register_copy 
  //SEG387 [186] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#1] -- register_copy 
  //SEG388 [186] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#2] -- register_copy 
  //SEG389 [186] phi (byte) gen_chargen_sprite::s_gen#5 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#3] -- register_copy 
  //SEG390 [186] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#4] -- register_copy 
    jmp b2
  //SEG391 gen_chargen_sprite::@2
  b2:
  //SEG392 [187] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte/word/signed word/dword/signed dword) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and bits
  //SEG393 [188] if((byte~) gen_chargen_sprite::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gen_chargen_sprite::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3_from_b2
  //SEG394 [189] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@6 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@6]
  b6_from_b2:
    jmp b6
  //SEG395 gen_chargen_sprite::@6
  b6:
  //SEG396 [190] phi from gen_chargen_sprite::@6 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@3]
  b3_from_b6:
  //SEG397 [190] phi (byte) gen_chargen_sprite::c#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta c
    jmp b3
  //SEG398 [190] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3]
  b3_from_b2:
  //SEG399 [190] phi (byte) gen_chargen_sprite::c#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b3
  //SEG400 gen_chargen_sprite::@3
  b3:
  //SEG401 [191] phi from gen_chargen_sprite::@3 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4]
  b4_from_b3:
  //SEG402 [191] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#10 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#0] -- register_copy 
  //SEG403 [191] phi (byte) gen_chargen_sprite::b#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG404 [191] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#2] -- register_copy 
  //SEG405 [191] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#5 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#3] -- register_copy 
    jmp b4
  // generate 3 pixels in the sprite byte (s_gen)
  //SEG406 [191] phi from gen_chargen_sprite::@5 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4]
  b4_from_b5:
  //SEG407 [191] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#0] -- register_copy 
  //SEG408 [191] phi (byte) gen_chargen_sprite::b#2 = (byte) gen_chargen_sprite::b#1 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#1] -- register_copy 
  //SEG409 [191] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#2] -- register_copy 
  //SEG410 [191] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#3] -- register_copy 
    jmp b4
  //SEG411 gen_chargen_sprite::@4
  b4:
  //SEG412 [192] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_rol_1 
    lda s_gen
    asl
  //SEG413 [193] (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#3 -- vbuz1=vbuaa_bor_vbuz2 
    ora c
    sta s_gen
  //SEG414 [194] (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3 -- vbuyy=_inc_vbuyy 
    iny
  //SEG415 [195] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@5 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne b5_from_b4
    jmp b7
  //SEG416 gen_chargen_sprite::@7
  b7:
  //SEG417 [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    // sprite byte filled - store and move to next byte
    lda s_gen
    ldy #0
    sta (sprite),y
  //SEG418 [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    lda s_gen
    ldy #3
    sta (sprite),y
  //SEG419 [198] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    lda s_gen
    ldy #6
    sta (sprite),y
  //SEG420 [199] (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3 -- pbuz1=_inc_pbuz1 
    inc sprite
    bne !+
    inc sprite+1
  !:
  //SEG421 [200] phi from gen_chargen_sprite::@7 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5]
  b5_from_b7:
  //SEG422 [200] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#1 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5#0] -- register_copy 
  //SEG423 [200] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5#1] -- vbuyy=vbuc1 
    ldy #0
  //SEG424 [200] phi (byte) gen_chargen_sprite::s_gen#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5#2] -- vbuz1=vbuc1 
    lda #0
    sta s_gen
    jmp b5
  //SEG425 [200] phi from gen_chargen_sprite::@4 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5]
  b5_from_b4:
  //SEG426 [200] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#3 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#0] -- register_copy 
  //SEG427 [200] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) gen_chargen_sprite::s_gen_cnt#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#1] -- register_copy 
  //SEG428 [200] phi (byte) gen_chargen_sprite::s_gen#6 = (byte) gen_chargen_sprite::s_gen#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#2] -- register_copy 
    jmp b5
  //SEG429 gen_chargen_sprite::@5
  b5:
  //SEG430 [201] (byte) gen_chargen_sprite::b#1 ← ++ (byte) gen_chargen_sprite::b#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG431 [202] if((byte) gen_chargen_sprite::b#1!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto gen_chargen_sprite::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne b4_from_b5
    jmp b8
  //SEG432 gen_chargen_sprite::@8
  b8:
  //SEG433 [203] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG434 [204] (byte) gen_chargen_sprite::x#1 ← ++ (byte) gen_chargen_sprite::x#6 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG435 [205] if((byte) gen_chargen_sprite::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #8
    bne b2_from_b8
    jmp b9
  //SEG436 gen_chargen_sprite::@9
  b9:
  //SEG437 [206] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte/signed byte/word/signed word/dword/signed dword) 6 -- pbuz1=pbuz1_plus_vbuc1 
    lda #6
    clc
    adc sprite
    sta sprite
    bcc !+
    inc sprite+1
  !:
  //SEG438 [207] (byte) gen_chargen_sprite::y#1 ← ++ (byte) gen_chargen_sprite::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG439 [208] if((byte) gen_chargen_sprite::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #8
    bne b1_from_b9
    jmp b10
  //SEG440 gen_chargen_sprite::@10
  b10:
  //SEG441 [209] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
  //SEG442 asm { cli  }
    cli
    jmp breturn
  //SEG443 gen_chargen_sprite::@return
  breturn:
  //SEG444 [211] return 
    rts
}
//SEG445 place_sprites
place_sprites: {
    .label sprites_ptr = SCREEN+$3f8
    .label spr_id = 2
    .label spr_x = 3
    .label col = 4
  //SEG446 [212] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_ENABLE
  //SEG447 [213] *((const byte*) SPRITES_EXPAND_X#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_EXPAND_X
  //SEG448 [214] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_EXPAND_Y
  //SEG449 [215] phi from place_sprites to place_sprites::@1 [phi:place_sprites->place_sprites::@1]
  b1_from_place_sprites:
  //SEG450 [215] phi (byte) place_sprites::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 5 [phi:place_sprites->place_sprites::@1#0] -- vbuz1=vbuc1 
    lda #5
    sta col
  //SEG451 [215] phi (byte) place_sprites::j2#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:place_sprites->place_sprites::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG452 [215] phi (byte) place_sprites::spr_x#2 = (byte/signed byte/word/signed word/dword/signed dword) $3c [phi:place_sprites->place_sprites::@1#2] -- vbuz1=vbuc1 
    lda #$3c
    sta spr_x
  //SEG453 [215] phi (byte) place_sprites::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:place_sprites->place_sprites::@1#3] -- vbuyy=vbuc1 
    ldy #0
  //SEG454 [215] phi (byte) place_sprites::spr_id#2 = ((byte))(const byte*) sprites#0/(byte/signed byte/word/signed word/dword/signed dword) $40 [phi:place_sprites->place_sprites::@1#4] -- vbuz1=vbuc1 
    lda #$ff&sprites/$40
    sta spr_id
    jmp b1
  //SEG455 [215] phi from place_sprites::@1 to place_sprites::@1 [phi:place_sprites::@1->place_sprites::@1]
  b1_from_b1:
  //SEG456 [215] phi (byte) place_sprites::col#2 = (byte) place_sprites::col#1 [phi:place_sprites::@1->place_sprites::@1#0] -- register_copy 
  //SEG457 [215] phi (byte) place_sprites::j2#3 = (byte) place_sprites::j2#2 [phi:place_sprites::@1->place_sprites::@1#1] -- register_copy 
  //SEG458 [215] phi (byte) place_sprites::spr_x#2 = (byte) place_sprites::spr_x#1 [phi:place_sprites::@1->place_sprites::@1#2] -- register_copy 
  //SEG459 [215] phi (byte) place_sprites::j#2 = (byte) place_sprites::j#1 [phi:place_sprites::@1->place_sprites::@1#3] -- register_copy 
  //SEG460 [215] phi (byte) place_sprites::spr_id#2 = (byte) place_sprites::spr_id#1 [phi:place_sprites::@1->place_sprites::@1#4] -- register_copy 
    jmp b1
  //SEG461 place_sprites::@1
  b1:
  //SEG462 [216] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda spr_id
    sta sprites_ptr,y
  //SEG463 [217] (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2 -- vbuz1=_inc_vbuz1 
    inc spr_id
  //SEG464 [218] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda spr_x
    sta SPRITES_XPOS,x
  //SEG465 [219] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte/signed byte/word/signed word/dword/signed dword) $50 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$50
    sta SPRITES_YPOS,x
  //SEG466 [220] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda col
    sta SPRITES_COLS,y
  //SEG467 [221] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) $20 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$20
    clc
    adc spr_x
    sta spr_x
  //SEG468 [222] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte/signed byte/word/signed word/dword/signed dword) 7^(byte/signed byte/word/signed word/dword/signed dword) 5 -- vbuz1=vbuz1_bxor_vbuc1 
    lda col
    eor #7^5
    sta col
  //SEG469 [223] (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3 -- vbuxx=_inc_vbuxx 
    inx
  //SEG470 [224] (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1 -- vbuxx=_inc_vbuxx 
    inx
  //SEG471 [225] (byte) place_sprites::j#1 ← ++ (byte) place_sprites::j#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG472 [226] if((byte) place_sprites::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto place_sprites::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #7
    bne b1_from_b1
    jmp breturn
  //SEG473 place_sprites::@return
  breturn:
  //SEG474 [227] return 
    rts
}
  sintab_x: .fill $dd, 0
  sintab_y: .fill $c5, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b60
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b8
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b15
Removing instruction jmp b14
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b1
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b18
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b21
Removing instruction jmp b22
Removing instruction jmp b23
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b7
Removing instruction jmp b5
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda x+1
Removing instruction ldy j2
Removing instruction lda xidx
Replacing instruction ldx #0 with TAX
Replacing instruction ldy #0 with TAY
Replacing instruction lda #0 with TXA
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda s_gen
Removing instruction lda s_gen
Replacing instruction lda #0 with TYA
Removing instruction lda #$7f
Removing instruction lda #$7f
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b2_from_b2 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b14_from_b8 with b14
Replacing label b15_from_b4 with b15
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b23 with b1
Replacing label b1_from_progress_inc with b1
Replacing label b1_from_b3 with b1
Replacing label b5_from_b4 with b5
Replacing label b4_from_b5 with b4
Replacing label b2_from_b8 with b2
Replacing label b1_from_b9 with b1
Replacing label b1_from_b1 with b1
Removing instruction b60_from_bbegin:
Removing instruction b60:
Removing instruction main_from_b60:
Removing instruction bend_from_b60:
Removing instruction b2_from_b2:
Removing instruction b3_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b6:
Removing instruction b3_from_b2:
Removing instruction b3_from_b7:
Removing instruction b15_from_b4:
Removing instruction b5_from_b15:
Removing instruction b14_from_b8:
Removing instruction b4_from_b14:
Removing instruction b1_from_b1:
Removing instruction b2_from_b1:
Removing instruction b4_from_b2:
Removing instruction gen_sprites_from_b4:
Removing instruction b5_from_b4:
Removing instruction progress_init_from_b5:
Removing instruction b6_from_b5:
Removing instruction gen_sintab_from_b6:
Removing instruction b7_from_b6:
Removing instruction progress_init_from_b7:
Removing instruction b8_from_b7:
Removing instruction gen_sintab_from_b8:
Removing instruction b9_from_b8:
Removing instruction clear_screen_from_b9:
Removing instruction b1_from_b1:
Removing instruction b3_from_gen_sintab:
Removing instruction b5_from_b4:
Removing instruction setMEMtoFAC_from_b5:
Removing instruction b6_from_b5:
Removing instruction b7_from_b6:
Removing instruction setMEMtoFAC_from_b7:
Removing instruction b8_from_b7:
Removing instruction setFAC_from_b8:
Removing instruction b9_from_b8:
Removing instruction divMEMbyFAC_from_b9:
Removing instruction b10_from_b9:
Removing instruction setMEMtoFAC_from_b10:
Removing instruction b11_from_b10:
Removing instruction addMEMtoFAC_from_b11:
Removing instruction b12_from_b11:
Removing instruction setMEMtoFAC_from_b12:
Removing instruction b1_from_b23:
Removing instruction b14_from_b1:
Removing instruction mulFACbyMEM_from_b14:
Removing instruction b15_from_b14:
Removing instruction setMEMtoFAC_from_b15:
Removing instruction b17_from_b16:
Removing instruction divMEMbyFAC_from_b17:
Removing instruction b18_from_b17:
Removing instruction b19_from_b18:
Removing instruction mulFACbyMEM_from_b19:
Removing instruction b20_from_b19:
Removing instruction addMEMtoFAC_from_b20:
Removing instruction b21_from_b20:
Removing instruction b1_from_progress_inc:
Removing instruction b1_from_b3:
Removing instruction b1_from_b9:
Removing instruction b2_from_b8:
Removing instruction b6_from_b2:
Removing instruction b3_from_b6:
Removing instruction b4_from_b3:
Removing instruction b4_from_b5:
Removing instruction b5_from_b4:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction init_from_main:
Removing instruction b2_from_main:
Removing instruction b3:
Removing instruction b2_from_b3:
Removing instruction b1_from_anim:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b4_from_b8:
Removing instruction b5_from_b4:
Removing instruction breturn:
Removing instruction clear_screen_from_init:
Removing instruction b1_from_init:
Removing instruction b2:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction breturn:
Removing instruction b1_from_clear_screen:
Removing instruction breturn:
Removing instruction setFAC_from_gen_sintab:
Removing instruction b3:
Removing instruction b4:
Removing instruction setFAC_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b1_from_b12:
Removing instruction setFAC_from_b1:
Removing instruction b14:
Removing instruction b15:
Removing instruction b16:
Removing instruction setFAC_from_b16:
Removing instruction b17:
Removing instruction b18:
Removing instruction b19:
Removing instruction b20:
Removing instruction b21:
Removing instruction b22:
Removing instruction b23:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b1_from_b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM_from_addMEMtoFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM_from_mulFACbyMEM:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM_from_divMEMbyFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction prepareMEM_from_setFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction prepareMEM_from_setMEMtoFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_gen_sprites:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_gen_chargen_sprite:
Removing instruction b2_from_b1:
Removing instruction b6:
Removing instruction b7:
Removing instruction b5_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction breturn:
Removing instruction b1_from_place_sprites:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to b4 in bcc b14
Skipping double jump to b5 in bcc b15
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b3_from_b2 to b6
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda xidx
Removing instruction lda s_gen
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Removing instruction b15:
Removing instruction b14:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b5
Removing unreachable instruction jmp b4
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @60
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) $d020
(byte) BROWN
(byte*) CHARGEN
(const byte*) CHARGEN#0 CHARGEN = ((byte*))(word/dword/signed dword) $d000
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(const byte*) COLS#0 COLS = ((byte*))(word/dword/signed dword) $d800
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 1
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) $d012
(byte) RED
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = ((byte*))(word/dword/signed dword) $d027
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = ((byte*))(word/dword/signed dword) $d015
(byte*) SPRITES_EXPAND_X
(const byte*) SPRITES_EXPAND_X#0 SPRITES_EXPAND_X = ((byte*))(word/dword/signed dword) $d01d
(byte*) SPRITES_EXPAND_Y
(const byte*) SPRITES_EXPAND_Y#0 SPRITES_EXPAND_Y = ((byte*))(word/dword/signed dword) $d017
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(const byte*) SPRITES_XMSB#0 SPRITES_XMSB = ((byte*))(word/dword/signed dword) $d010
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = ((byte*))(word/dword/signed dword) $d000
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = ((byte*))(word/dword/signed dword) $d001
(word) SPRITE_PTRS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(label) addMEMtoFAC::@1
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(void()) anim()
(byte~) anim::$2 $2 zp ZP_BYTE:5 101.0
(byte~) anim::$3 reg byte a 202.0
(byte~) anim::$5 reg byte a 202.0
(label) anim::@1
(label) anim::@14
(label) anim::@15
(label) anim::@2
(label) anim::@3
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@8
(label) anim::@return
(byte) anim::j
(byte) anim::j#1 j zp ZP_BYTE:7 151.5
(byte) anim::j#2 j zp ZP_BYTE:7 11.882352941176471
(byte) anim::j2
(byte) anim::j2#1 j2 zp ZP_BYTE:6 67.33333333333333
(byte) anim::j2#2 j2 zp ZP_BYTE:6 25.25
(word) anim::x
(word) anim::x#0 x zp ZP_WORD:8 75.75
(byte) anim::x_msb
(byte) anim::x_msb#1 x_msb zp ZP_BYTE:5 13.6
(byte) anim::x_msb#2 x_msb zp ZP_BYTE:5 101.0
(byte) anim::xidx
(byte) anim::xidx#0 xidx zp ZP_BYTE:4 2.0
(byte) anim::xidx#1 xidx zp ZP_BYTE:4 202.0
(byte) anim::xidx#2 xidx zp ZP_BYTE:4 202.0
(byte) anim::xidx#3 xidx zp ZP_BYTE:4 38.125
(byte) anim::xidx#5 xidx zp ZP_BYTE:4 37.875
(byte) anim::yidx
(byte) anim::yidx#0 reg byte x 4.0
(byte) anim::yidx#1 reg byte x 202.0
(byte) anim::yidx#2 reg byte x 202.0
(byte) anim::yidx#3 reg byte x 25.416666666666664
(byte) anim::yidx#6 reg byte x 75.75
(void()) clear_screen()
(label) clear_screen::@1
(label) clear_screen::@return
(byte*) clear_screen::sc
(byte*) clear_screen::sc#1 sc zp ZP_WORD:8 16.5
(byte*) clear_screen::sc#2 sc zp ZP_WORD:8 16.5
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(label) divMEMbyFAC::@1
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(byte*) divMEMbyFAC::mem#2 mem zp ZP_WORD:12 2.0
(void()) gen_chargen_sprite((byte) gen_chargen_sprite::ch , (byte*) gen_chargen_sprite::sprite)
(word~) gen_chargen_sprite::$0 $0 zp ZP_WORD:12 4.0
(word~) gen_chargen_sprite::$1 $1 zp ZP_WORD:12 4.0
(byte~) gen_chargen_sprite::$3 reg byte a 2002.0
(byte~) gen_chargen_sprite::$6 reg byte a 20002.0
(label) gen_chargen_sprite::@1
(label) gen_chargen_sprite::@10
(label) gen_chargen_sprite::@2
(label) gen_chargen_sprite::@3
(label) gen_chargen_sprite::@4
(label) gen_chargen_sprite::@5
(label) gen_chargen_sprite::@6
(label) gen_chargen_sprite::@7
(label) gen_chargen_sprite::@8
(label) gen_chargen_sprite::@9
(label) gen_chargen_sprite::@return
(byte) gen_chargen_sprite::b
(byte) gen_chargen_sprite::b#1 reg byte x 15001.5
(byte) gen_chargen_sprite::b#2 reg byte x 2000.2
(byte) gen_chargen_sprite::bits
(byte) gen_chargen_sprite::bits#0 bits zp ZP_BYTE:4 202.0
(byte) gen_chargen_sprite::bits#1 bits zp ZP_BYTE:4 667.3333333333334
(byte) gen_chargen_sprite::bits#2 bits zp ZP_BYTE:4 182.58823529411765
(byte) gen_chargen_sprite::c
(byte) gen_chargen_sprite::c#3 c zp ZP_BYTE:6 769.3076923076923
(byte) gen_chargen_sprite::ch
(byte) gen_chargen_sprite::ch#0 reg byte x 6.5
(byte*) gen_chargen_sprite::chargen
(byte*) gen_chargen_sprite::chargen#0 chargen zp ZP_WORD:12 3.678571428571429
(byte) gen_chargen_sprite::s_gen
(byte) gen_chargen_sprite::s_gen#1 s_gen zp ZP_BYTE:7 10001.0
(byte) gen_chargen_sprite::s_gen#3 s_gen zp ZP_BYTE:7 21003.0
(byte) gen_chargen_sprite::s_gen#5 s_gen zp ZP_BYTE:7 400.4
(byte) gen_chargen_sprite::s_gen#6 s_gen zp ZP_BYTE:7 3500.5
(byte) gen_chargen_sprite::s_gen_cnt
(byte) gen_chargen_sprite::s_gen_cnt#1 reg byte y 15001.5
(byte) gen_chargen_sprite::s_gen_cnt#3 reg byte y 7001.0
(byte) gen_chargen_sprite::s_gen_cnt#4 reg byte y 400.4
(byte) gen_chargen_sprite::s_gen_cnt#5 reg byte y 3500.5
(byte*) gen_chargen_sprite::sprite
(byte*) gen_chargen_sprite::sprite#0 sprite zp ZP_WORD:10 2.1666666666666665
(byte*) gen_chargen_sprite::sprite#1 sprite zp ZP_WORD:10 20002.0
(byte*) gen_chargen_sprite::sprite#10 sprite zp ZP_WORD:10 420.59999999999997
(byte*) gen_chargen_sprite::sprite#11 sprite zp ZP_WORD:10 102.0
(byte*) gen_chargen_sprite::sprite#2 sprite zp ZP_WORD:10 67.33333333333333
(byte*) gen_chargen_sprite::sprite#3 sprite zp ZP_WORD:10 7625.875
(byte*) gen_chargen_sprite::sprite#4 sprite zp ZP_WORD:10 5184.166666666666
(byte) gen_chargen_sprite::x
(byte) gen_chargen_sprite::x#1 x zp ZP_BYTE:5 1501.5
(byte) gen_chargen_sprite::x#6 x zp ZP_BYTE:5 111.22222222222223
(byte) gen_chargen_sprite::y
(byte) gen_chargen_sprite::y#1 y zp ZP_BYTE:3 151.5
(byte) gen_chargen_sprite::y#2 y zp ZP_BYTE:3 13.173913043478262
(void()) gen_sintab((byte*) gen_sintab::sintab , (byte) gen_sintab::length , (byte) gen_sintab::min , (byte) gen_sintab::max)
(word~) gen_sintab::$23 $23 zp ZP_WORD:12 22.0
(byte~) gen_sintab::$24 reg byte a 22.0
(label) gen_sintab::@1
(label) gen_sintab::@10
(label) gen_sintab::@11
(label) gen_sintab::@12
(label) gen_sintab::@14
(label) gen_sintab::@15
(label) gen_sintab::@16
(label) gen_sintab::@17
(label) gen_sintab::@18
(label) gen_sintab::@19
(label) gen_sintab::@20
(label) gen_sintab::@21
(label) gen_sintab::@22
(label) gen_sintab::@23
(label) gen_sintab::@3
(label) gen_sintab::@4
(label) gen_sintab::@5
(label) gen_sintab::@6
(label) gen_sintab::@7
(label) gen_sintab::@8
(label) gen_sintab::@9
(label) gen_sintab::@return
(byte*) gen_sintab::f_2pi
(const byte*) gen_sintab::f_2pi#0 f_2pi = ((byte*))(word/dword/signed dword) $e2e5
(byte[]) gen_sintab::f_amp
(const byte[]) gen_sintab::f_amp#0 f_amp = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) gen_sintab::f_i
(const byte[]) gen_sintab::f_i#0 f_i = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) gen_sintab::f_min
(const byte[]) gen_sintab::f_min#0 f_min = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte) gen_sintab::i
(byte) gen_sintab::i#1 i zp ZP_BYTE:2 16.5
(byte) gen_sintab::i#10 i zp ZP_BYTE:2 1.8333333333333333
(byte) gen_sintab::length
(byte) gen_sintab::length#10 length zp ZP_BYTE:3 0.44
(byte) gen_sintab::max
(byte) gen_sintab::max#2 reg byte x 2.0
(byte) gen_sintab::min
(byte) gen_sintab::min#2 min zp ZP_BYTE:2 0.3333333333333333
(byte*) gen_sintab::sintab
(byte*) gen_sintab::sintab#12 sintab zp ZP_WORD:8 0.22
(void()) gen_sprites()
(label) gen_sprites::@1
(label) gen_sprites::@3
(label) gen_sprites::@return
(byte[]) gen_sprites::cml
(const byte[]) gen_sprites::cml#0 cml = (string) "camelot"
(byte) gen_sprites::i
(byte) gen_sprites::i#1 i zp ZP_BYTE:2 16.5
(byte) gen_sprites::i#2 i zp ZP_BYTE:2 6.6000000000000005
(byte*) gen_sprites::spr
(byte*) gen_sprites::spr#1 spr zp ZP_WORD:8 7.333333333333333
(byte*) gen_sprites::spr#2 spr zp ZP_WORD:8 8.25
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::return#0 return zp ZP_WORD:12 4.333333333333333
(word) getFAC::return#2 return zp ZP_WORD:12 22.0
(word) getFAC::w
(void()) init()
(label) init::@1
(label) init::@2
(label) init::@4
(label) init::@5
(label) init::@6
(label) init::@7
(label) init::@8
(label) init::@9
(label) init::@return
(byte) init::i
(byte) init::i#1 reg byte x 16.5
(byte) init::i#2 reg byte x 14.666666666666666
(void()) main()
(label) main::@2
(label) main::@3
(byte*) memHi
(const byte*) memHi#0 memHi = ((byte*))(byte/word/signed word/dword/signed dword) $ff
(byte*) memLo
(const byte*) memLo#0 memLo = ((byte*))(byte/word/signed word/dword/signed dword) $fe
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(label) mulFACbyMEM::@1
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#2 mem zp ZP_WORD:12 2.0
(void()) place_sprites()
(label) place_sprites::@1
(label) place_sprites::@return
(byte) place_sprites::col
(byte) place_sprites::col#1 col zp ZP_BYTE:4 4.4
(byte) place_sprites::col#2 col zp ZP_BYTE:4 4.714285714285714
(byte) place_sprites::j
(byte) place_sprites::j#1 reg byte y 16.5
(byte) place_sprites::j#2 reg byte y 4.4
(byte) place_sprites::j2
(byte) place_sprites::j2#1 reg byte x 22.0
(byte) place_sprites::j2#2 reg byte x 7.333333333333333
(byte) place_sprites::j2#3 reg byte x 5.5
(byte) place_sprites::spr_id
(byte) place_sprites::spr_id#1 spr_id zp ZP_BYTE:2 2.2
(byte) place_sprites::spr_id#2 spr_id zp ZP_BYTE:2 16.5
(byte) place_sprites::spr_x
(byte) place_sprites::spr_x#1 spr_x zp ZP_BYTE:3 3.6666666666666665
(byte) place_sprites::spr_x#2 spr_x zp ZP_BYTE:3 5.5
(byte*) place_sprites::sprites_ptr
(const byte*) place_sprites::sprites_ptr#0 sprites_ptr = (const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3f8
(void()) prepareMEM((byte*) prepareMEM::mem)
(byte~) prepareMEM::$0 reg byte a 4.0
(byte~) prepareMEM::$1 reg byte a 4.0
(label) prepareMEM::@return
(byte*) prepareMEM::mem
(byte*) prepareMEM::mem#1 mem zp ZP_WORD:12 4.0
(byte*) prepareMEM::mem#3 mem zp ZP_WORD:12 4.0
(byte*) prepareMEM::mem#4 mem zp ZP_WORD:12 4.0
(byte*) prepareMEM::mem#5 mem zp ZP_WORD:12 3.9999999999999996
(byte*~) prepareMEM::mem#8 mem zp ZP_WORD:12 4.0
(byte*) print_char_cursor
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_screen
(byte*) progress_cursor
(byte*) progress_cursor#10 progress_cursor zp ZP_WORD:10 4.0
(byte*) progress_cursor#11 progress_cursor zp ZP_WORD:10 2.8333333333333335
(byte*) progress_cursor#34 progress_cursor zp ZP_WORD:10 0.7307692307692306
(byte) progress_idx
(byte) progress_idx#10 progress_idx zp ZP_BYTE:4 3.0
(byte) progress_idx#12 progress_idx zp ZP_BYTE:4 2.5
(byte) progress_idx#34 progress_idx zp ZP_BYTE:4 0.5652173913043479
(void()) progress_inc()
(label) progress_inc::@1
(label) progress_inc::@2
(label) progress_inc::@return
(byte[]) progress_inc::progress_chars
(const byte[]) progress_inc::progress_chars#0 progress_chars = { (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $65, (byte/signed byte/word/signed word/dword/signed dword) $74, (byte/signed byte/word/signed word/dword/signed dword) $75, (byte/signed byte/word/signed word/dword/signed dword) $61, (byte/word/signed word/dword/signed dword) $f6, (byte/word/signed word/dword/signed dword) $e7, (byte/word/signed word/dword/signed dword) $ea, (byte/word/signed word/dword/signed dword) $e0 }
(void()) progress_init((byte*) progress_init::line)
(label) progress_init::@return
(byte*) progress_init::line
(byte*) progress_init::line#2 line zp ZP_WORD:10 0.06666666666666667
(void()) setARGtoFAC()
(label) setARGtoFAC::@return
(void()) setFAC((word) setFAC::w)
(label) setFAC::@1
(label) setFAC::@return
(word) setFAC::w
(word) setFAC::w#0 w zp ZP_WORD:12 4.0
(word) setFAC::w#1 w zp ZP_WORD:12 4.0
(word) setFAC::w#3 w zp ZP_WORD:12 22.0
(word) setFAC::w#4 w zp ZP_WORD:12 22.0
(word) setFAC::w#5 w zp ZP_WORD:12 26.0
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(label) setMEMtoFAC::@1
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#5 mem zp ZP_WORD:12 2.0
(void()) sinFAC()
(label) sinFAC::@return
(byte) sin_idx_x
(byte) sin_idx_x#11 sin_idx_x zp ZP_BYTE:2 1.625
(byte) sin_idx_x#13 sin_idx_x zp ZP_BYTE:2 0.5769230769230769
(byte) sin_idx_x#3 sin_idx_x zp ZP_BYTE:2 2.0
(byte) sin_idx_y
(byte) sin_idx_y#11 sin_idx_y zp ZP_BYTE:3 3.25
(byte) sin_idx_y#13 sin_idx_y zp ZP_BYTE:3 0.49999999999999994
(byte) sin_idx_y#3 sin_idx_y zp ZP_BYTE:3 2.0
(byte) sinlen_x
(const byte) sinlen_x#0 sinlen_x = (byte/word/signed word/dword/signed dword) $dd
(byte) sinlen_y
(const byte) sinlen_y#0 sinlen_y = (byte/word/signed word/dword/signed dword) $c5
(byte[$dd]) sintab_x
(const byte[$dd]) sintab_x#0 sintab_x = { fill( $dd, 0) }
(byte[$c5]) sintab_y
(const byte[$c5]) sintab_y#0 sintab_y = { fill( $c5, 0) }
(byte*) sprites
(const byte*) sprites#0 sprites = ((byte*))(word/signed word/dword/signed dword) $2000
(void()) subFACfromARG()
(label) subFACfromARG::@return

zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 gen_sintab::min#2 gen_sintab::i#10 gen_sintab::i#1 gen_sprites::i#2 gen_sprites::i#1 place_sprites::spr_id#2 place_sprites::spr_id#1 ]
zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 gen_sintab::length#10 gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 place_sprites::spr_x#2 place_sprites::spr_x#1 ]
zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 progress_idx#34 progress_idx#12 progress_idx#10 gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 place_sprites::col#2 place_sprites::col#1 ]
zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 anim::$2 gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 gen_chargen_sprite::c#3 ]
reg byte x [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
zp ZP_BYTE:7 [ anim::j#2 anim::j#1 gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
reg byte x [ init::i#2 init::i#1 ]
zp ZP_WORD:8 [ clear_screen::sc#2 clear_screen::sc#1 gen_sintab::sintab#12 gen_sprites::spr#2 gen_sprites::spr#1 anim::x#0 ]
reg byte x [ gen_sintab::max#2 ]
zp ZP_WORD:10 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ]
zp ZP_WORD:12 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#8 prepareMEM::mem#1 mulFACbyMEM::mem#2 divMEMbyFAC::mem#2 setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 setMEMtoFAC::mem#5 getFAC::return#2 gen_sintab::$23 getFAC::return#0 gen_chargen_sprite::$0 gen_chargen_sprite::$1 gen_chargen_sprite::chargen#0 ]
reg byte y [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ]
reg byte x [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
reg byte y [ place_sprites::j#2 place_sprites::j#1 ]
reg byte x [ place_sprites::j2#3 place_sprites::j2#2 ]
reg byte a [ anim::$3 ]
reg byte a [ anim::$5 ]
reg byte a [ gen_sintab::$24 ]
reg byte a [ prepareMEM::$0 ]
reg byte a [ prepareMEM::$1 ]
reg byte x [ gen_chargen_sprite::ch#0 ]
reg byte a [ gen_chargen_sprite::$3 ]
reg byte a [ gen_chargen_sprite::$6 ]
reg byte x [ place_sprites::j2#1 ]


FINAL ASSEMBLER
Score: 768741

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  // Color Ram
  .label COLS = $d800
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .const sinlen_x = $dd
  .const sinlen_y = $c5
  .label sprites = $2000
  .label SCREEN = $400
  .label progress_idx = 4
  .label progress_cursor = $a
  .label sin_idx_x = 2
  .label sin_idx_y = 3
//SEG3 @begin
//SEG4 [1] phi from @begin to @60 [phi:@begin->@60]
//SEG5 @60
//SEG6 [2] call main 
//SEG7 [4] phi from @60 to main [phi:@60->main]
//SEG8 [3] phi from @60 to @end [phi:@60->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] call init 
  //SEG12 [43] phi from main to init [phi:main->init]
    jsr init
  //SEG13 [6] phi from main to main::@2 [phi:main->main::@2]
  //SEG14 [6] phi (byte) sin_idx_y#13 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
  //SEG15 [6] phi (byte) sin_idx_x#13 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@2#1] -- vbuz1=vbuc1 
    sta sin_idx_x
  //SEG16 [6] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  //SEG17 main::@2
  b2:
  //SEG18 [7] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b2
  //SEG19 [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG20 main::@3
  //SEG21 [9] call anim 
    jsr anim
  //SEG22 [6] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  //SEG23 [6] phi (byte) sin_idx_y#13 = (byte) sin_idx_y#11 [phi:main::@3->main::@2#0] -- register_copy 
  //SEG24 [6] phi (byte) sin_idx_x#13 = (byte) sin_idx_x#11 [phi:main::@3->main::@2#1] -- register_copy 
    jmp b2
}
//SEG25 anim
anim: {
    .label _2 = 5
    .label xidx = 4
    .label x = 8
    .label x_msb = 5
    .label j2 = 6
    .label j = 7
  //SEG26 [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG27 [11] (byte) anim::xidx#0 ← (byte) sin_idx_x#13 -- vbuz1=vbuz2 
    lda sin_idx_x
    sta xidx
  //SEG28 [12] (byte) anim::yidx#0 ← (byte) sin_idx_y#13 -- vbuxx=vbuz1 
    ldx sin_idx_y
  //SEG29 [13] phi from anim to anim::@1 [phi:anim->anim::@1]
  //SEG30 [13] phi (byte) anim::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG31 [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#0 [phi:anim->anim::@1#1] -- register_copy 
  //SEG32 [13] phi (byte) anim::j2#2 = (byte/signed byte/word/signed word/dword/signed dword) $c [phi:anim->anim::@1#2] -- vbuz1=vbuc1 
    lda #$c
    sta j2
  //SEG33 [13] phi (byte) anim::x_msb#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta x_msb
  //SEG34 [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#0 [phi:anim->anim::@1#4] -- register_copy 
  //SEG35 [13] phi from anim::@3 to anim::@1 [phi:anim::@3->anim::@1]
  //SEG36 [13] phi (byte) anim::j#2 = (byte) anim::j#1 [phi:anim::@3->anim::@1#0] -- register_copy 
  //SEG37 [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#6 [phi:anim::@3->anim::@1#1] -- register_copy 
  //SEG38 [13] phi (byte) anim::j2#2 = (byte) anim::j2#1 [phi:anim::@3->anim::@1#2] -- register_copy 
  //SEG39 [13] phi (byte) anim::x_msb#2 = (byte) anim::x_msb#1 [phi:anim::@3->anim::@1#3] -- register_copy 
  //SEG40 [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#5 [phi:anim::@3->anim::@1#4] -- register_copy 
  //SEG41 anim::@1
  b1:
  //SEG42 [14] (word) anim::x#0 ← ((word))(byte/signed byte/word/signed word/dword/signed dword) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) -- vwuz1=vwuc1_plus_pbuc2_derefidx_vbuz2 
    ldy xidx
    lda sintab_x,y
    clc
    adc #<$1e
    sta x
    lda #>$1e
    adc #0
    sta x+1
  //SEG43 [15] (byte~) anim::$2 ← (byte) anim::x_msb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl _2
  //SEG44 [16] (byte~) anim::$3 ← > (word) anim::x#0 -- vbuaa=_hi_vwuz1 
  //SEG45 [17] (byte) anim::x_msb#1 ← (byte~) anim::$2 | (byte~) anim::$3 -- vbuz1=vbuz1_bor_vbuaa 
    ora x_msb
    sta x_msb
  //SEG46 [18] (byte~) anim::$5 ← < (word) anim::x#0 -- vbuaa=_lo_vwuz1 
    lda x
  //SEG47 [19] *((const byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$5 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy j2
    sta SPRITES_XPOS,y
  //SEG48 [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuxx 
    lda sintab_y,x
    sta SPRITES_YPOS,y
  //SEG49 [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte/signed byte/word/signed word/dword/signed dword) $a -- vbuz1=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc xidx
    sta xidx
  //SEG50 [22] if((byte) anim::xidx#1<(const byte) sinlen_x#0) goto anim::@2 -- vbuz1_lt_vbuc1_then_la1 
    cmp #sinlen_x
    bcc b2
  //SEG51 anim::@6
  //SEG52 [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 -- vbuz1=vbuz1_minus_vbuc1 
    sec
    sbc #sinlen_x
    sta xidx
  //SEG53 [24] phi from anim::@1 anim::@6 to anim::@2 [phi:anim::@1/anim::@6->anim::@2]
  //SEG54 [24] phi (byte) anim::xidx#5 = (byte) anim::xidx#1 [phi:anim::@1/anim::@6->anim::@2#0] -- register_copy 
  //SEG55 anim::@2
  b2:
  //SEG56 [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    clc
    adc #8
    tax
  //SEG57 [26] if((byte) anim::yidx#1<(const byte) sinlen_y#0) goto anim::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #sinlen_y
    bcc b3
  //SEG58 anim::@7
  //SEG59 [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 -- vbuxx=vbuxx_minus_vbuc1 
    txa
    sec
    sbc #sinlen_y
    tax
  //SEG60 [28] phi from anim::@2 anim::@7 to anim::@3 [phi:anim::@2/anim::@7->anim::@3]
  //SEG61 [28] phi (byte) anim::yidx#6 = (byte) anim::yidx#1 [phi:anim::@2/anim::@7->anim::@3#0] -- register_copy 
  //SEG62 anim::@3
  b3:
  //SEG63 [29] (byte) anim::j2#1 ← (byte) anim::j2#2 - (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_minus_2 
    dec j2
    dec j2
  //SEG64 [30] (byte) anim::j#1 ← ++ (byte) anim::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG65 [31] if((byte) anim::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto anim::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #7
    bne b1
  //SEG66 anim::@8
  //SEG67 [32] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#1 -- _deref_pbuc1=vbuz1 
    lda x_msb
    sta SPRITES_XMSB
  //SEG68 [33] (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_x
  //SEG69 [34] if((byte) sin_idx_x#3<(const byte) sinlen_x#0) goto anim::@14 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_x
    cmp #sinlen_x
    bcc b4
  //SEG70 [35] phi from anim::@8 to anim::@4 [phi:anim::@8->anim::@4]
  //SEG71 [35] phi (byte) sin_idx_x#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@8->anim::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_x
  //SEG72 anim::@4
  b4:
  //SEG73 [36] (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_y
  //SEG74 [37] if((byte) sin_idx_y#3<(const byte) sinlen_y#0) goto anim::@15 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_y
    cmp #sinlen_y
    bcc b5
  //SEG75 [38] phi from anim::@4 to anim::@5 [phi:anim::@4->anim::@5]
  //SEG76 [38] phi (byte) sin_idx_y#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@4->anim::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
  //SEG77 anim::@5
  b5:
  //SEG78 [39] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
  //SEG79 anim::@return
  //SEG80 [40] return 
    rts
  //SEG81 [41] phi from anim::@4 to anim::@15 [phi:anim::@4->anim::@15]
  //SEG82 anim::@15
  //SEG83 [38] phi from anim::@15 to anim::@5 [phi:anim::@15->anim::@5]
  //SEG84 [38] phi (byte) sin_idx_y#11 = (byte) sin_idx_y#3 [phi:anim::@15->anim::@5#0] -- register_copy 
  //SEG85 [42] phi from anim::@8 to anim::@14 [phi:anim::@8->anim::@14]
  //SEG86 anim::@14
  //SEG87 [35] phi from anim::@14 to anim::@4 [phi:anim::@14->anim::@4]
  //SEG88 [35] phi (byte) sin_idx_x#11 = (byte) sin_idx_x#3 [phi:anim::@14->anim::@4#0] -- register_copy 
}
//SEG89 init
init: {
  //SEG90 [44] call clear_screen 
  //SEG91 [65] phi from init to clear_screen [phi:init->clear_screen]
    jsr clear_screen
  //SEG92 [45] phi from init to init::@1 [phi:init->init::@1]
  //SEG93 [45] phi (byte) init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init->init::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG94 [45] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  //SEG95 [45] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
  //SEG96 init::@1
  b1:
  //SEG97 [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta COLS,x
  //SEG98 [47] *((const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) $b -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$b
    sta COLS+$28,x
  //SEG99 [48] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG100 [49] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b1
  //SEG101 [50] phi from init::@1 to init::@2 [phi:init::@1->init::@2]
  //SEG102 init::@2
  //SEG103 [51] call place_sprites 
    jsr place_sprites
  //SEG104 [52] phi from init::@2 to init::@4 [phi:init::@2->init::@4]
  //SEG105 init::@4
  //SEG106 [53] call gen_sprites 
  //SEG107 [170] phi from init::@4 to gen_sprites [phi:init::@4->gen_sprites]
    jsr gen_sprites
  //SEG108 [54] phi from init::@4 to init::@5 [phi:init::@4->init::@5]
  //SEG109 init::@5
  //SEG110 [55] call progress_init 
  //SEG111 [168] phi from init::@5 to progress_init [phi:init::@5->progress_init]
  //SEG112 [168] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0 [phi:init::@5->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta progress_init.line
    lda #>SCREEN
    sta progress_init.line+1
    jsr progress_init
  //SEG113 [56] phi from init::@5 to init::@6 [phi:init::@5->init::@6]
  //SEG114 init::@6
  //SEG115 [57] call gen_sintab 
  //SEG116 [71] phi from init::@6 to gen_sintab [phi:init::@6->gen_sintab]
  //SEG117 [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$dd]) sintab_x#0 [phi:init::@6->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_x
    sta gen_sintab.sintab
    lda #>sintab_x
    sta gen_sintab.sintab+1
  //SEG118 [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_x#0 [phi:init::@6->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_x
    sta gen_sintab.length
  //SEG119 [71] phi (byte) gen_sintab::min#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@6->gen_sintab#2] -- vbuz1=vbuc1 
    lda #0
    sta gen_sintab.min
  //SEG120 [71] phi (byte) gen_sintab::max#2 = (byte/word/signed word/dword/signed dword) $ff [phi:init::@6->gen_sintab#3] -- vbuxx=vbuc1 
    ldx #$ff
    jsr gen_sintab
  //SEG121 [58] phi from init::@6 to init::@7 [phi:init::@6->init::@7]
  //SEG122 init::@7
  //SEG123 [59] call progress_init 
  //SEG124 [168] phi from init::@7 to progress_init [phi:init::@7->progress_init]
  //SEG125 [168] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28 [phi:init::@7->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28
    sta progress_init.line
    lda #>SCREEN+$28
    sta progress_init.line+1
    jsr progress_init
  //SEG126 [60] phi from init::@7 to init::@8 [phi:init::@7->init::@8]
  //SEG127 init::@8
  //SEG128 [61] call gen_sintab 
  //SEG129 [71] phi from init::@8 to gen_sintab [phi:init::@8->gen_sintab]
  //SEG130 [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$c5]) sintab_y#0 [phi:init::@8->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_y
    sta gen_sintab.sintab
    lda #>sintab_y
    sta gen_sintab.sintab+1
  //SEG131 [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_y#0 [phi:init::@8->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_y
    sta gen_sintab.length
  //SEG132 [71] phi (byte) gen_sintab::min#2 = (byte/signed byte/word/signed word/dword/signed dword) $32 [phi:init::@8->gen_sintab#2] -- vbuz1=vbuc1 
    lda #$32
    sta gen_sintab.min
  //SEG133 [71] phi (byte) gen_sintab::max#2 = (byte/word/signed word/dword/signed dword) $d0 [phi:init::@8->gen_sintab#3] -- vbuxx=vbuc1 
    ldx #$d0
    jsr gen_sintab
  //SEG134 [62] phi from init::@8 to init::@9 [phi:init::@8->init::@9]
  //SEG135 init::@9
  //SEG136 [63] call clear_screen 
  //SEG137 [65] phi from init::@9 to clear_screen [phi:init::@9->clear_screen]
    jsr clear_screen
  //SEG138 init::@return
  //SEG139 [64] return 
    rts
}
//SEG140 clear_screen
clear_screen: {
    .label sc = 8
  //SEG141 [66] phi from clear_screen to clear_screen::@1 [phi:clear_screen->clear_screen::@1]
  //SEG142 [66] phi (byte*) clear_screen::sc#2 = (const byte*) SCREEN#0 [phi:clear_screen->clear_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
  //SEG143 [66] phi from clear_screen::@1 to clear_screen::@1 [phi:clear_screen::@1->clear_screen::@1]
  //SEG144 [66] phi (byte*) clear_screen::sc#2 = (byte*) clear_screen::sc#1 [phi:clear_screen::@1->clear_screen::@1#0] -- register_copy 
  //SEG145 clear_screen::@1
  b1:
  //SEG146 [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG147 [68] (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG148 [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e8) goto clear_screen::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda sc
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG149 clear_screen::@return
  //SEG150 [70] return 
    rts
}
//SEG151 gen_sintab
// Generate a sinus table using BASIC floats
// - sintab is a pointer to the table to fill
// - length is the length of the sine table
// - min is the minimum value of the generated sinus
// - max is the maximum value of the generated sinus
// gen_sintab(byte* zeropage(8) sintab, byte zeropage(3) length, byte zeropage(2) min, byte register(X) max)
gen_sintab: {
    // amplitude/2
    .label f_2pi = $e2e5
    .label _23 = $c
    .label i = 2
    .label min = 2
    .label length = 3
    .label sintab = 8
  //SEG152 [72] (word) setFAC::w#0 ← ((word)) (byte) gen_sintab::max#2 -- vwuz1=_word_vbuxx 
    txa
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG153 [73] call setFAC 
  //SEG154 [154] phi from gen_sintab to setFAC [phi:gen_sintab->setFAC]
  //SEG155 [154] phi (word) setFAC::w#5 = (word) setFAC::w#0 [phi:gen_sintab->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG156 [74] phi from gen_sintab to gen_sintab::@3 [phi:gen_sintab->gen_sintab::@3]
  //SEG157 gen_sintab::@3
  //SEG158 [75] call setARGtoFAC 
    jsr setARGtoFAC
  //SEG159 gen_sintab::@4
  //SEG160 asm { lda#0 ldx#0 ldy#0  }
    // arg = max
    // TODO: Kernel JSR clobbers A,X,Y
    lda #0
    tax
    tay
  //SEG161 [77] (word) setFAC::w#1 ← ((word)) (byte) gen_sintab::min#2 -- vwuz1=_word_vbuz2 
    lda min
    sta setFAC.w
    txa
    sta setFAC.w+1
  //SEG162 [78] call setFAC 
  //SEG163 [154] phi from gen_sintab::@4 to setFAC [phi:gen_sintab::@4->setFAC]
  //SEG164 [154] phi (word) setFAC::w#5 = (word) setFAC::w#1 [phi:gen_sintab::@4->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG165 [79] phi from gen_sintab::@4 to gen_sintab::@5 [phi:gen_sintab::@4->gen_sintab::@5]
  //SEG166 gen_sintab::@5
  //SEG167 [80] call setMEMtoFAC 
  //SEG168 [159] phi from gen_sintab::@5 to setMEMtoFAC [phi:gen_sintab::@5->setMEMtoFAC]
  //SEG169 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@5->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG170 [81] phi from gen_sintab::@5 to gen_sintab::@6 [phi:gen_sintab::@5->gen_sintab::@6]
  //SEG171 gen_sintab::@6
  //SEG172 [82] call subFACfromARG 
    jsr subFACfromARG
  //SEG173 [83] phi from gen_sintab::@6 to gen_sintab::@7 [phi:gen_sintab::@6->gen_sintab::@7]
  //SEG174 gen_sintab::@7
  //SEG175 [84] call setMEMtoFAC 
  //SEG176 [159] phi from gen_sintab::@7 to setMEMtoFAC [phi:gen_sintab::@7->setMEMtoFAC]
  //SEG177 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@7->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG178 [85] phi from gen_sintab::@7 to gen_sintab::@8 [phi:gen_sintab::@7->gen_sintab::@8]
  //SEG179 gen_sintab::@8
  //SEG180 [86] call setFAC 
  //SEG181 [154] phi from gen_sintab::@8 to setFAC [phi:gen_sintab::@8->setFAC]
  //SEG182 [154] phi (word) setFAC::w#5 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:gen_sintab::@8->setFAC#0] -- vwuz1=vbuc1 
    lda #2
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    jsr setFAC
  //SEG183 [87] phi from gen_sintab::@8 to gen_sintab::@9 [phi:gen_sintab::@8->gen_sintab::@9]
  //SEG184 gen_sintab::@9
  //SEG185 [88] call divMEMbyFAC 
  //SEG186 [149] phi from gen_sintab::@9 to divMEMbyFAC [phi:gen_sintab::@9->divMEMbyFAC]
  //SEG187 [149] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@9->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta divMEMbyFAC.mem
    lda #>f_amp
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
  //SEG188 [89] phi from gen_sintab::@9 to gen_sintab::@10 [phi:gen_sintab::@9->gen_sintab::@10]
  //SEG189 gen_sintab::@10
  //SEG190 [90] call setMEMtoFAC 
  //SEG191 [159] phi from gen_sintab::@10 to setMEMtoFAC [phi:gen_sintab::@10->setMEMtoFAC]
  //SEG192 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@10->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG193 [91] phi from gen_sintab::@10 to gen_sintab::@11 [phi:gen_sintab::@10->gen_sintab::@11]
  //SEG194 gen_sintab::@11
  //SEG195 [92] call addMEMtoFAC 
  //SEG196 [132] phi from gen_sintab::@11 to addMEMtoFAC [phi:gen_sintab::@11->addMEMtoFAC]
    jsr addMEMtoFAC
  //SEG197 [93] phi from gen_sintab::@11 to gen_sintab::@12 [phi:gen_sintab::@11->gen_sintab::@12]
  //SEG198 gen_sintab::@12
  //SEG199 [94] call setMEMtoFAC 
  //SEG200 [159] phi from gen_sintab::@12 to setMEMtoFAC [phi:gen_sintab::@12->setMEMtoFAC]
  //SEG201 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@12->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG202 [95] phi from gen_sintab::@12 to gen_sintab::@1 [phi:gen_sintab::@12->gen_sintab::@1]
  //SEG203 [95] phi (byte*) progress_cursor#34 = (byte*) progress_init::line#2 [phi:gen_sintab::@12->gen_sintab::@1#0] -- register_copy 
  //SEG204 [95] phi (byte) progress_idx#34 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_sintab::@12->gen_sintab::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
  //SEG205 [95] phi (byte) gen_sintab::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_sintab::@12->gen_sintab::@1#2] -- vbuz1=vbuc1 
    sta i
  // f_min = min + (max - min) / 2
  //SEG206 [95] phi from gen_sintab::@23 to gen_sintab::@1 [phi:gen_sintab::@23->gen_sintab::@1]
  //SEG207 [95] phi (byte*) progress_cursor#34 = (byte*) progress_cursor#11 [phi:gen_sintab::@23->gen_sintab::@1#0] -- register_copy 
  //SEG208 [95] phi (byte) progress_idx#34 = (byte) progress_idx#12 [phi:gen_sintab::@23->gen_sintab::@1#1] -- register_copy 
  //SEG209 [95] phi (byte) gen_sintab::i#10 = (byte) gen_sintab::i#1 [phi:gen_sintab::@23->gen_sintab::@1#2] -- register_copy 
  //SEG210 gen_sintab::@1
  b1:
  //SEG211 [96] (word) setFAC::w#3 ← ((word)) (byte) gen_sintab::i#10 -- vwuz1=_word_vbuz2 
    lda i
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG212 [97] call setFAC 
  //SEG213 [154] phi from gen_sintab::@1 to setFAC [phi:gen_sintab::@1->setFAC]
  //SEG214 [154] phi (word) setFAC::w#5 = (word) setFAC::w#3 [phi:gen_sintab::@1->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG215 [98] phi from gen_sintab::@1 to gen_sintab::@14 [phi:gen_sintab::@1->gen_sintab::@14]
  //SEG216 gen_sintab::@14
  //SEG217 [99] call mulFACbyMEM 
  //SEG218 [142] phi from gen_sintab::@14 to mulFACbyMEM [phi:gen_sintab::@14->mulFACbyMEM]
  //SEG219 [142] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) gen_sintab::f_2pi#0 [phi:gen_sintab::@14->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta mulFACbyMEM.mem
    lda #>f_2pi
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG220 [100] phi from gen_sintab::@14 to gen_sintab::@15 [phi:gen_sintab::@14->gen_sintab::@15]
  //SEG221 gen_sintab::@15
  //SEG222 [101] call setMEMtoFAC 
  //SEG223 [159] phi from gen_sintab::@15 to setMEMtoFAC [phi:gen_sintab::@15->setMEMtoFAC]
  //SEG224 [159] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@15->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta setMEMtoFAC.mem
    lda #>f_i
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG225 gen_sintab::@16
  //SEG226 [102] (word) setFAC::w#4 ← ((word)) (byte) gen_sintab::length#10 -- vwuz1=_word_vbuz2 
    lda length
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG227 [103] call setFAC 
  //SEG228 [154] phi from gen_sintab::@16 to setFAC [phi:gen_sintab::@16->setFAC]
  //SEG229 [154] phi (word) setFAC::w#5 = (word) setFAC::w#4 [phi:gen_sintab::@16->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG230 [104] phi from gen_sintab::@16 to gen_sintab::@17 [phi:gen_sintab::@16->gen_sintab::@17]
  //SEG231 gen_sintab::@17
  //SEG232 [105] call divMEMbyFAC 
  //SEG233 [149] phi from gen_sintab::@17 to divMEMbyFAC [phi:gen_sintab::@17->divMEMbyFAC]
  //SEG234 [149] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@17->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta divMEMbyFAC.mem
    lda #>f_i
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
  //SEG235 [106] phi from gen_sintab::@17 to gen_sintab::@18 [phi:gen_sintab::@17->gen_sintab::@18]
  //SEG236 gen_sintab::@18
  //SEG237 [107] call sinFAC 
    jsr sinFAC
  //SEG238 [108] phi from gen_sintab::@18 to gen_sintab::@19 [phi:gen_sintab::@18->gen_sintab::@19]
  //SEG239 gen_sintab::@19
  //SEG240 [109] call mulFACbyMEM 
  //SEG241 [142] phi from gen_sintab::@19 to mulFACbyMEM [phi:gen_sintab::@19->mulFACbyMEM]
  //SEG242 [142] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@19->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta mulFACbyMEM.mem
    lda #>f_amp
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG243 [110] phi from gen_sintab::@19 to gen_sintab::@20 [phi:gen_sintab::@19->gen_sintab::@20]
  //SEG244 gen_sintab::@20
  //SEG245 [111] call addMEMtoFAC 
  //SEG246 [132] phi from gen_sintab::@20 to addMEMtoFAC [phi:gen_sintab::@20->addMEMtoFAC]
    jsr addMEMtoFAC
  //SEG247 [112] phi from gen_sintab::@20 to gen_sintab::@21 [phi:gen_sintab::@20->gen_sintab::@21]
  //SEG248 gen_sintab::@21
  //SEG249 [113] call getFAC 
    jsr getFAC
  //SEG250 [114] (word) getFAC::return#2 ← (word) getFAC::return#0
  //SEG251 gen_sintab::@22
  //SEG252 [115] (word~) gen_sintab::$23 ← (word) getFAC::return#2
  //SEG253 [116] (byte~) gen_sintab::$24 ← ((byte)) (word~) gen_sintab::$23 -- vbuaa=_byte_vwuz1 
    lda _23
  //SEG254 [117] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24 -- pbuz1_derefidx_vbuz2=vbuaa 
    // fac =  sin( i * 2 * PI / length ) * (max - min) / 2 + min + (max - min) / 2
    ldy i
    sta (sintab),y
  //SEG255 [118] call progress_inc 
    jsr progress_inc
  //SEG256 gen_sintab::@23
  //SEG257 [119] (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG258 [120] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda i
    cmp length
    bcc b1
  //SEG259 gen_sintab::@return
  //SEG260 [121] return 
    rts
    f_i: .byte 0, 0, 0, 0, 0
    // i * 2 * PI
    f_min: .byte 0, 0, 0, 0, 0
    // amplitude/2 + min
    f_amp: .byte 0, 0, 0, 0, 0
}
//SEG261 progress_inc
// Increase PETSCII progress one bit
// Done by increasing the character until the idx is 8 and then moving to the next char
progress_inc: {
  //SEG262 [122] (byte) progress_idx#10 ← ++ (byte) progress_idx#34 -- vbuz1=_inc_vbuz1 
    inc progress_idx
  //SEG263 [123] if((byte) progress_idx#10!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto progress_inc::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda progress_idx
    cmp #8
    bne b1
  //SEG264 progress_inc::@2
  //SEG265 [124] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte/signed byte/word/signed word/dword/signed dword) 8) -- _deref_pbuz1=_deref_pbuc1 
    lda progress_chars+8
    ldy #0
    sta (progress_cursor),y
  //SEG266 [125] (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#34 -- pbuz1=_inc_pbuz1 
    inc progress_cursor
    bne !+
    inc progress_cursor+1
  !:
  //SEG267 [126] phi from progress_inc::@2 to progress_inc::@1 [phi:progress_inc::@2->progress_inc::@1]
  //SEG268 [126] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#10 [phi:progress_inc::@2->progress_inc::@1#0] -- register_copy 
  //SEG269 [126] phi (byte) progress_idx#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:progress_inc::@2->progress_inc::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
  //SEG270 [126] phi from progress_inc to progress_inc::@1 [phi:progress_inc->progress_inc::@1]
  //SEG271 [126] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#34 [phi:progress_inc->progress_inc::@1#0] -- register_copy 
  //SEG272 [126] phi (byte) progress_idx#12 = (byte) progress_idx#10 [phi:progress_inc->progress_inc::@1#1] -- register_copy 
  //SEG273 progress_inc::@1
  b1:
  //SEG274 [127] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy progress_idx
    lda progress_chars,y
    ldy #0
    sta (progress_cursor),y
  //SEG275 progress_inc::@return
  //SEG276 [128] return 
    rts
    // Progress characters
    progress_chars: .byte $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0
}
//SEG277 getFAC
// word = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit word
// Destroys the value in the FAC in the process
getFAC: {
    .label return = $c
  //SEG278 asm { jsr$b1aa sty$fe sta$ff  }
    // Load FAC (floating point accumulator) integer part into word register Y,A
    jsr $b1aa
    sty $fe
    sta $ff
  //SEG279 [130] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta return
    lda memHi
    sta return+1
  //SEG280 getFAC::@return
  //SEG281 [131] return 
    rts
}
//SEG282 addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 bytes from memory
addMEMtoFAC: {
  //SEG283 [133] call prepareMEM 
  //SEG284 [136] phi from addMEMtoFAC to prepareMEM [phi:addMEMtoFAC->prepareMEM]
  //SEG285 [136] phi (byte*) prepareMEM::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:addMEMtoFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<gen_sintab.f_min
    sta prepareMEM.mem
    lda #>gen_sintab.f_min
    sta prepareMEM.mem+1
    jsr prepareMEM
  //SEG286 addMEMtoFAC::@1
  //SEG287 asm { lda$fe ldy$ff jsr$b867  }
    lda $fe
    ldy $ff
    jsr $b867
  //SEG288 addMEMtoFAC::@return
  //SEG289 [135] return 
    rts
}
//SEG290 prepareMEM
// Prepare MEM pointers for operations using MEM
// prepareMEM(byte* zeropage($c) mem)
prepareMEM: {
    .label mem = $c
  //SEG291 [137] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 -- vbuaa=_lo_pbuz1 
    lda mem
  //SEG292 [138] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0 -- _deref_pbuc1=vbuaa 
    sta memLo
  //SEG293 [139] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 -- vbuaa=_hi_pbuz1 
    lda mem+1
  //SEG294 [140] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1 -- _deref_pbuc1=vbuaa 
    sta memHi
  //SEG295 prepareMEM::@return
  //SEG296 [141] return 
    rts
}
//SEG297 mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 bytes from memory
// mulFACbyMEM(byte* zeropage($c) mem)
mulFACbyMEM: {
    .label mem = $c
  //SEG298 [143] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
  //SEG299 [144] call prepareMEM 
  //SEG300 [136] phi from mulFACbyMEM to prepareMEM [phi:mulFACbyMEM->prepareMEM]
  //SEG301 [136] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#4 [phi:mulFACbyMEM->prepareMEM#0] -- register_copy 
    jsr prepareMEM
  //SEG302 mulFACbyMEM::@1
  //SEG303 asm { lda$fe ldy$ff jsr$ba28  }
    lda $fe
    ldy $ff
    jsr $ba28
  //SEG304 mulFACbyMEM::@return
  //SEG305 [146] return 
    rts
}
//SEG306 sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
  //SEG307 asm { jsr$e26b  }
    jsr $e26b
  //SEG308 sinFAC::@return
  //SEG309 [148] return 
    rts
}
//SEG310 divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 bytes from memory
// divMEMbyFAC(byte* zeropage($c) mem)
divMEMbyFAC: {
    .label mem = $c
  //SEG311 [150] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2
  //SEG312 [151] call prepareMEM 
  //SEG313 [136] phi from divMEMbyFAC to prepareMEM [phi:divMEMbyFAC->prepareMEM]
  //SEG314 [136] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#3 [phi:divMEMbyFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
  //SEG315 divMEMbyFAC::@1
  //SEG316 asm { lda$fe ldy$ff jsr$bb0f  }
    lda $fe
    ldy $ff
    jsr $bb0f
  //SEG317 divMEMbyFAC::@return
  //SEG318 [153] return 
    rts
}
//SEG319 setFAC
// FAC = word
// Set the FAC (floating point accumulator) to the integer value of a 16bit word
// setFAC(word zeropage($c) w)
setFAC: {
    .label w = $c
  //SEG320 [155] (byte*~) prepareMEM::mem#8 ← (byte*)(word) setFAC::w#5
  //SEG321 [156] call prepareMEM 
  //SEG322 [136] phi from setFAC to prepareMEM [phi:setFAC->prepareMEM]
  //SEG323 [136] phi (byte*) prepareMEM::mem#5 = (byte*~) prepareMEM::mem#8 [phi:setFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
  //SEG324 setFAC::@1
  //SEG325 asm { ldy$fe lda$ff jsr$b391  }
    // Load word register Y,A into FAC (floating point accumulator)
    ldy $fe
    lda $ff
    jsr $b391
  //SEG326 setFAC::@return
  //SEG327 [158] return 
    rts
}
//SEG328 setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 bytes (means it is necessary to allocate 5 bytes to avoid clobbering other data using eg. byte[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zeropage($c) mem)
setMEMtoFAC: {
    .label mem = $c
  //SEG329 [160] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5
  //SEG330 [161] call prepareMEM 
  //SEG331 [136] phi from setMEMtoFAC to prepareMEM [phi:setMEMtoFAC->prepareMEM]
  //SEG332 [136] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#1 [phi:setMEMtoFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
  //SEG333 setMEMtoFAC::@1
  //SEG334 asm { ldx$fe ldy$ff jsr$bbd4  }
    ldx $fe
    ldy $ff
    jsr $bbd4
  //SEG335 setMEMtoFAC::@return
  //SEG336 [163] return 
    rts
}
//SEG337 subFACfromARG
// FAC = ARG-FAC
// Set FAC to ARG minus FAC
subFACfromARG: {
  //SEG338 asm { jsr$b853  }
    jsr $b853
  //SEG339 subFACfromARG::@return
  //SEG340 [165] return 
    rts
}
//SEG341 setARGtoFAC
// ARG = FAC
// Set the ARG (floating point argument) to the value of the FAC (floating point accumulator)
setARGtoFAC: {
  //SEG342 asm { jsr$bc0f  }
    jsr $bc0f
  //SEG343 setARGtoFAC::@return
  //SEG344 [167] return 
    rts
}
//SEG345 progress_init
// Initialize the PETSCII progress bar
// progress_init(byte* zeropage($a) line)
progress_init: {
    .label line = $a
  //SEG346 progress_init::@return
  //SEG347 [169] return 
    rts
}
//SEG348 gen_sprites
gen_sprites: {
    .label spr = 8
    .label i = 2
  //SEG349 [171] phi from gen_sprites to gen_sprites::@1 [phi:gen_sprites->gen_sprites::@1]
  //SEG350 [171] phi (byte*) gen_sprites::spr#2 = (const byte*) sprites#0 [phi:gen_sprites->gen_sprites::@1#0] -- pbuz1=pbuc1 
    lda #<sprites
    sta spr
    lda #>sprites
    sta spr+1
  //SEG351 [171] phi (byte) gen_sprites::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_sprites->gen_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG352 [171] phi from gen_sprites::@3 to gen_sprites::@1 [phi:gen_sprites::@3->gen_sprites::@1]
  //SEG353 [171] phi (byte*) gen_sprites::spr#2 = (byte*) gen_sprites::spr#1 [phi:gen_sprites::@3->gen_sprites::@1#0] -- register_copy 
  //SEG354 [171] phi (byte) gen_sprites::i#2 = (byte) gen_sprites::i#1 [phi:gen_sprites::@3->gen_sprites::@1#1] -- register_copy 
  //SEG355 gen_sprites::@1
  b1:
  //SEG356 [172] (byte) gen_chargen_sprite::ch#0 ← *((const byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy i
    ldx cml,y
  //SEG357 [173] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 -- pbuz1=pbuz2 
    lda spr
    sta gen_chargen_sprite.sprite
    lda spr+1
    sta gen_chargen_sprite.sprite+1
  //SEG358 [174] call gen_chargen_sprite 
    jsr gen_chargen_sprite
  //SEG359 gen_sprites::@3
  //SEG360 [175] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte/signed byte/word/signed word/dword/signed dword) $40 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$40
    clc
    adc spr
    sta spr
    bcc !+
    inc spr+1
  !:
  //SEG361 [176] (byte) gen_sprites::i#1 ← ++ (byte) gen_sprites::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG362 [177] if((byte) gen_sprites::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto gen_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #7
    bne b1
  //SEG363 gen_sprites::@return
  //SEG364 [178] return 
    rts
    cml: .text "camelot"
}
//SEG365 gen_chargen_sprite
// Generate a sprite from a C64 CHARGEN character (by making each pixel 3x3 pixels large)
// - c is the character to generate
// - sprite is a pointer to the position of the sprite to generate
// gen_chargen_sprite(byte register(X) ch, byte* zeropage($a) sprite)
gen_chargen_sprite: {
    .label _0 = $c
    .label _1 = $c
    .label sprite = $a
    .label chargen = $c
    .label bits = 4
    .label s_gen = 7
    .label x = 5
    .label y = 3
    .label c = 6
  //SEG366 [179] (word~) gen_chargen_sprite::$0 ← ((word)) (byte) gen_chargen_sprite::ch#0 -- vwuz1=_word_vbuxx 
    txa
    sta _0
    lda #0
    sta _0+1
  //SEG367 [180] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vwuz1=vwuz1_rol_3 
    asl _1
    rol _1+1
    asl _1
    rol _1+1
    asl _1
    rol _1+1
  //SEG368 [181] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda chargen
    adc #<CHARGEN
    sta chargen
    lda chargen+1
    adc #>CHARGEN
    sta chargen+1
  //SEG369 asm { sei  }
    sei
  //SEG370 [183] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
  //SEG371 [184] phi from gen_chargen_sprite to gen_chargen_sprite::@1 [phi:gen_chargen_sprite->gen_chargen_sprite::@1]
  //SEG372 [184] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#0] -- register_copy 
  //SEG373 [184] phi (byte) gen_chargen_sprite::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG374 [184] phi from gen_chargen_sprite::@9 to gen_chargen_sprite::@1 [phi:gen_chargen_sprite::@9->gen_chargen_sprite::@1]
  //SEG375 [184] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#2 [phi:gen_chargen_sprite::@9->gen_chargen_sprite::@1#0] -- register_copy 
  //SEG376 [184] phi (byte) gen_chargen_sprite::y#2 = (byte) gen_chargen_sprite::y#1 [phi:gen_chargen_sprite::@9->gen_chargen_sprite::@1#1] -- register_copy 
  //SEG377 gen_chargen_sprite::@1
  b1:
  //SEG378 [185] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    // current chargen line
    ldy y
    lda (chargen),y
    sta bits
  //SEG379 [186] phi from gen_chargen_sprite::@1 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2]
  //SEG380 [186] phi (byte) gen_chargen_sprite::x#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG381 [186] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#11 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#1] -- register_copy 
  //SEG382 [186] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#2] -- vbuyy=vbuc1 
    tay
  //SEG383 [186] phi (byte) gen_chargen_sprite::s_gen#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#3] -- vbuz1=vbuc1 
    sta s_gen
  //SEG384 [186] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#4] -- register_copy 
  //SEG385 [186] phi from gen_chargen_sprite::@8 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2]
  //SEG386 [186] phi (byte) gen_chargen_sprite::x#6 = (byte) gen_chargen_sprite::x#1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#0] -- register_copy 
  //SEG387 [186] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#1] -- register_copy 
  //SEG388 [186] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#2] -- register_copy 
  //SEG389 [186] phi (byte) gen_chargen_sprite::s_gen#5 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#3] -- register_copy 
  //SEG390 [186] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@2#4] -- register_copy 
  //SEG391 gen_chargen_sprite::@2
  b2:
  //SEG392 [187] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte/word/signed word/dword/signed dword) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and bits
  //SEG393 [188] if((byte~) gen_chargen_sprite::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gen_chargen_sprite::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b6
  //SEG394 [189] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@6 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@6]
  //SEG395 gen_chargen_sprite::@6
  //SEG396 [190] phi from gen_chargen_sprite::@6 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@3]
  //SEG397 [190] phi (byte) gen_chargen_sprite::c#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta c
    jmp b3
  //SEG398 [190] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3]
  b6:
  //SEG399 [190] phi (byte) gen_chargen_sprite::c#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG400 gen_chargen_sprite::@3
  b3:
  //SEG401 [191] phi from gen_chargen_sprite::@3 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4]
  //SEG402 [191] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#10 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#0] -- register_copy 
  //SEG403 [191] phi (byte) gen_chargen_sprite::b#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG404 [191] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#2] -- register_copy 
  //SEG405 [191] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#5 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#3] -- register_copy 
  // generate 3 pixels in the sprite byte (s_gen)
  //SEG406 [191] phi from gen_chargen_sprite::@5 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4]
  //SEG407 [191] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#0] -- register_copy 
  //SEG408 [191] phi (byte) gen_chargen_sprite::b#2 = (byte) gen_chargen_sprite::b#1 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#1] -- register_copy 
  //SEG409 [191] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#2] -- register_copy 
  //SEG410 [191] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#3] -- register_copy 
  //SEG411 gen_chargen_sprite::@4
  b4:
  //SEG412 [192] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_rol_1 
    lda s_gen
    asl
  //SEG413 [193] (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#3 -- vbuz1=vbuaa_bor_vbuz2 
    ora c
    sta s_gen
  //SEG414 [194] (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3 -- vbuyy=_inc_vbuyy 
    iny
  //SEG415 [195] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@5 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne b5
  //SEG416 gen_chargen_sprite::@7
  //SEG417 [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    // sprite byte filled - store and move to next byte
    ldy #0
    sta (sprite),y
  //SEG418 [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    ldy #3
    sta (sprite),y
  //SEG419 [198] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    ldy #6
    sta (sprite),y
  //SEG420 [199] (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3 -- pbuz1=_inc_pbuz1 
    inc sprite
    bne !+
    inc sprite+1
  !:
  //SEG421 [200] phi from gen_chargen_sprite::@7 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5]
  //SEG422 [200] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#1 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5#0] -- register_copy 
  //SEG423 [200] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5#1] -- vbuyy=vbuc1 
    ldy #0
  //SEG424 [200] phi (byte) gen_chargen_sprite::s_gen#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@5#2] -- vbuz1=vbuc1 
    tya
    sta s_gen
  //SEG425 [200] phi from gen_chargen_sprite::@4 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5]
  //SEG426 [200] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#3 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#0] -- register_copy 
  //SEG427 [200] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) gen_chargen_sprite::s_gen_cnt#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#1] -- register_copy 
  //SEG428 [200] phi (byte) gen_chargen_sprite::s_gen#6 = (byte) gen_chargen_sprite::s_gen#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#2] -- register_copy 
  //SEG429 gen_chargen_sprite::@5
  b5:
  //SEG430 [201] (byte) gen_chargen_sprite::b#1 ← ++ (byte) gen_chargen_sprite::b#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG431 [202] if((byte) gen_chargen_sprite::b#1!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto gen_chargen_sprite::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne b4
  //SEG432 gen_chargen_sprite::@8
  //SEG433 [203] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG434 [204] (byte) gen_chargen_sprite::x#1 ← ++ (byte) gen_chargen_sprite::x#6 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG435 [205] if((byte) gen_chargen_sprite::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #8
    bne b2
  //SEG436 gen_chargen_sprite::@9
  //SEG437 [206] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte/signed byte/word/signed word/dword/signed dword) 6 -- pbuz1=pbuz1_plus_vbuc1 
    lda #6
    clc
    adc sprite
    sta sprite
    bcc !+
    inc sprite+1
  !:
  //SEG438 [207] (byte) gen_chargen_sprite::y#1 ← ++ (byte) gen_chargen_sprite::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG439 [208] if((byte) gen_chargen_sprite::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #8
    bne b1
  //SEG440 gen_chargen_sprite::@10
  //SEG441 [209] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
  //SEG442 asm { cli  }
    cli
  //SEG443 gen_chargen_sprite::@return
  //SEG444 [211] return 
    rts
}
//SEG445 place_sprites
place_sprites: {
    .label sprites_ptr = SCREEN+$3f8
    .label spr_id = 2
    .label spr_x = 3
    .label col = 4
  //SEG446 [212] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_ENABLE
  //SEG447 [213] *((const byte*) SPRITES_EXPAND_X#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=vbuc2 
    sta SPRITES_EXPAND_X
  //SEG448 [214] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte/signed byte/word/signed word/dword/signed dword) $7f -- _deref_pbuc1=vbuc2 
    sta SPRITES_EXPAND_Y
  //SEG449 [215] phi from place_sprites to place_sprites::@1 [phi:place_sprites->place_sprites::@1]
  //SEG450 [215] phi (byte) place_sprites::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 5 [phi:place_sprites->place_sprites::@1#0] -- vbuz1=vbuc1 
    lda #5
    sta col
  //SEG451 [215] phi (byte) place_sprites::j2#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:place_sprites->place_sprites::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG452 [215] phi (byte) place_sprites::spr_x#2 = (byte/signed byte/word/signed word/dword/signed dword) $3c [phi:place_sprites->place_sprites::@1#2] -- vbuz1=vbuc1 
    lda #$3c
    sta spr_x
  //SEG453 [215] phi (byte) place_sprites::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:place_sprites->place_sprites::@1#3] -- vbuyy=vbuc1 
    ldy #0
  //SEG454 [215] phi (byte) place_sprites::spr_id#2 = ((byte))(const byte*) sprites#0/(byte/signed byte/word/signed word/dword/signed dword) $40 [phi:place_sprites->place_sprites::@1#4] -- vbuz1=vbuc1 
    lda #$ff&sprites/$40
    sta spr_id
  //SEG455 [215] phi from place_sprites::@1 to place_sprites::@1 [phi:place_sprites::@1->place_sprites::@1]
  //SEG456 [215] phi (byte) place_sprites::col#2 = (byte) place_sprites::col#1 [phi:place_sprites::@1->place_sprites::@1#0] -- register_copy 
  //SEG457 [215] phi (byte) place_sprites::j2#3 = (byte) place_sprites::j2#2 [phi:place_sprites::@1->place_sprites::@1#1] -- register_copy 
  //SEG458 [215] phi (byte) place_sprites::spr_x#2 = (byte) place_sprites::spr_x#1 [phi:place_sprites::@1->place_sprites::@1#2] -- register_copy 
  //SEG459 [215] phi (byte) place_sprites::j#2 = (byte) place_sprites::j#1 [phi:place_sprites::@1->place_sprites::@1#3] -- register_copy 
  //SEG460 [215] phi (byte) place_sprites::spr_id#2 = (byte) place_sprites::spr_id#1 [phi:place_sprites::@1->place_sprites::@1#4] -- register_copy 
  //SEG461 place_sprites::@1
  b1:
  //SEG462 [216] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda spr_id
    sta sprites_ptr,y
  //SEG463 [217] (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2 -- vbuz1=_inc_vbuz1 
    inc spr_id
  //SEG464 [218] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda spr_x
    sta SPRITES_XPOS,x
  //SEG465 [219] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte/signed byte/word/signed word/dword/signed dword) $50 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$50
    sta SPRITES_YPOS,x
  //SEG466 [220] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda col
    sta SPRITES_COLS,y
  //SEG467 [221] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) $20 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$20
    clc
    adc spr_x
    sta spr_x
  //SEG468 [222] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte/signed byte/word/signed word/dword/signed dword) 7^(byte/signed byte/word/signed word/dword/signed dword) 5 -- vbuz1=vbuz1_bxor_vbuc1 
    lda col
    eor #7^5
    sta col
  //SEG469 [223] (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3 -- vbuxx=_inc_vbuxx 
    inx
  //SEG470 [224] (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1 -- vbuxx=_inc_vbuxx 
    inx
  //SEG471 [225] (byte) place_sprites::j#1 ← ++ (byte) place_sprites::j#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG472 [226] if((byte) place_sprites::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto place_sprites::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #7
    bne b1
  //SEG473 place_sprites::@return
  //SEG474 [227] return 
    rts
}
  sintab_x: .fill $dd, 0
  sintab_y: .fill $c5, 0

