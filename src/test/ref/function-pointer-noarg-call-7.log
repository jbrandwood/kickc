Inlined call call __init 

CONTROL FLOW GRAPH SSA

void do10(void()* do10::fn)
do10: scope:[do10]  from main
  do10::fn#2 = phi( main/do10::fn#0 )
  do10::i#0 = 0
  to:do10::@1
do10::@1: scope:[do10]  from do10 do10::@1
  do10::i#2 = phi( do10/do10::i#0, do10::@1/do10::i#1 )
  do10::fn#1 = phi( do10/do10::fn#2, do10::@1/do10::fn#1 )
  call *do10::fn#1 
  do10::i#1 = do10::i#2 + rangenext(0,9)
  do10::$1 = do10::i#1 != rangelast(0,9)
  if(do10::$1) goto do10::@1
  to:do10::@return
do10::@return: scope:[do10]  from do10::@1
  return 
  to:@return

void hello()
hello: scope:[hello]  from
  hello::i#0 = 0
  to:hello::@1
hello::@1: scope:[hello]  from hello hello::@1
  hello::i#2 = phi( hello/hello::i#0, hello::@1/hello::i#1 )
  SCREEN[idx] = msg[hello::i#2]
  idx = ++ idx
  hello::i#1 = ++ hello::i#2
  hello::$0 = 0 != msg[hello::i#1]
  if(hello::$0) goto hello::@1
  to:hello::@return
hello::@return: scope:[hello]  from hello::@1
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  do10::fn#0 = main::f
  call do10 
  to:main::@1
main::@1: scope:[main]  from main
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
void do10(void()* do10::fn)
bool~ do10::$1
void()* do10::fn
void()* do10::fn#0
void()* do10::fn#1
void()* do10::fn#2
byte do10::i
byte do10::i#0
byte do10::i#1
byte do10::i#2
void hello()
bool~ hello::$0
byte hello::i
byte hello::i#0
byte hello::i#1
byte hello::i#2
volatile byte idx loadstore
void main()
const void()* main::f = &hello
const to_nomodify byte* msg[]  = "hello "

Adding number conversion cast (unumber) 0 in hello::$0 = 0 != msg[hello::i#1]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identical Phi Values do10::fn#2 do10::fn#0
Identical Phi Values do10::fn#1 do10::fn#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition do10::$1 [6] if(do10::i#1!=rangelast(0,9)) goto do10::@1
Simple Condition hello::$0 [14] if(0!=msg[hello::i#1]) goto hello::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant do10::i#0 = 0
Constant hello::i#0 = 0
Constant do10::fn#0 = main::f
Successful SSA optimization Pass2ConstantIdentification
Replacing constant pointer function [3] call hello 
Successful SSA optimization Pass2ConstantCallPointerIdentification
Resolved ranged next value [4] do10::i#1 = ++ do10::i#2 to ++
Resolved ranged comparison value [6] if(do10::i#1!=rangelast(0,9)) goto do10::@1 to $a
Eliminating unused constant do10::fn#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant main::f
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) $a in if(do10::i#1!=$a) goto do10::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $a
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings do10::i#0
Inlining constant with var siblings hello::i#0
Constant inlined hello::i#0 = 0
Constant inlined do10::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting do10::@2(between do10::@1 and do10::@1)
Added new block during phi lifting hello::@2(between hello::@1 and hello::@1)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of hello
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of do10
CALL GRAPH
Calls in [__start] to main:3 
Calls in [main] to do10:15 
Calls in [do10] to hello:20 

Created 2 initial phi equivalence classes
Coalesced [13] hello::i#3 = hello::i#1
Coalesced [24] do10::i#3 = do10::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label hello::@2
Culled Empty Block label main::@1
Culled Empty Block label do10::@2
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of hello
Adding NOP phi() at start of main
Adding NOP phi() at start of do10

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

__stackcall void hello()
hello: scope:[hello]  from do10::@1
  [5] phi()
  to:hello::@1
hello::@1: scope:[hello]  from hello hello::@1
  [6] hello::i#2 = phi( hello/0, hello::@1/hello::i#1 )
  [7] SCREEN[idx] = msg[hello::i#2]
  [8] idx = ++ idx
  [9] hello::i#1 = ++ hello::i#2
  [10] if(0!=msg[hello::i#1]) goto hello::@1
  to:hello::@return
hello::@return: scope:[hello]  from hello::@1
  [11] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [12] phi()
  [13] call do10 
  to:main::@return
main::@return: scope:[main]  from main
  [14] return 
  to:@return

void do10(void()* do10::fn)
do10: scope:[do10]  from main
  [15] phi()
  to:do10::@1
do10::@1: scope:[do10]  from do10 do10::@1
  [16] do10::i#2 = phi( do10/0, do10::@1/do10::i#1 )
  [17] call hello 
  [18] do10::i#1 = ++ do10::i#2
  [19] if(do10::i#1!=$a) goto do10::@1
  to:do10::@return
do10::@return: scope:[do10]  from do10::@1
  [20] return 
  to:@return

null depth in calling loop Loop head: do10::@1 tails: do10::@1 blocks: do10::@1  in scope hello

VARIABLE REGISTER WEIGHTS
void __start()
void do10(void()* do10::fn)
void()* do10::fn
byte do10::i
byte do10::i#1 1501.5
byte do10::i#2 1001.0
__stackcall void hello()
byte hello::i
byte hello::i#1 150001.5
byte hello::i#2 100001.0
volatile byte idx loadstore 20000.333333333336
void main()

Initial phi equivalence classes
[ hello::i#2 hello::i#1 ]
[ do10::i#2 do10::i#1 ]
Added variable idx to live range equivalence class [ idx ]
Complete equivalence classes
[ hello::i#2 hello::i#1 ]
[ do10::i#2 do10::i#1 ]
[ idx ]
Allocated zp[1]:2 [ hello::i#2 hello::i#1 ]
Allocated zp[1]:3 [ do10::i#2 do10::i#1 ]
Allocated zp[1]:4 [ idx ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] idx = 0 [ idx ] (  [ idx ] { }  ) always clobbers reg byte a 
Statement [7] SCREEN[idx] = msg[hello::i#2] [ idx hello::i#2 ] ( main:3::do10:13::hello:17 [ do10::i#2 idx hello::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ do10::i#2 do10::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ do10::i#2 do10::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:2 [ hello::i#2 hello::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ hello::i#2 hello::i#1 ]
Statement [10] if(0!=msg[hello::i#1]) goto hello::@1 [ idx hello::i#1 ] ( main:3::do10:13::hello:17 [ do10::i#2 idx hello::i#1 ] { }  ) always clobbers reg byte a 
Statement [1] idx = 0 [ idx ] (  [ idx ] { }  ) always clobbers reg byte a 
Statement [7] SCREEN[idx] = msg[hello::i#2] [ idx hello::i#2 ] ( main:3::do10:13::hello:17 [ do10::i#2 idx hello::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [10] if(0!=msg[hello::i#1]) goto hello::@1 [ idx hello::i#1 ] ( main:3::do10:13::hello:17 [ do10::i#2 idx hello::i#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ hello::i#2 hello::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ do10::i#2 do10::i#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ idx ] : zp[1]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [hello] 250,002.5: zp[1]:2 [ hello::i#2 hello::i#1 ] 
Uplift Scope [] 20,000.33: zp[1]:4 [ idx ] 
Uplift Scope [do10] 2,502.5: zp[1]:3 [ do10::i#2 do10::i#1 ] 
Uplift Scope [main] 
Uplift Scope [__start] 

Uplifting [hello] best 800 combination reg byte x [ hello::i#2 hello::i#1 ] 
Uplifting [] best 800 combination zp[1]:4 [ idx ] 
Uplifting [do10] best 800 combination zp[1]:3 [ do10::i#2 do10::i#1 ] 
Uplifting [main] best 800 combination 
Uplifting [__start] best 800 combination 
Attempting to uplift remaining variables inzp[1]:4 [ idx ]
Uplifting [] best 800 combination zp[1]:4 [ idx ] 
Attempting to uplift remaining variables inzp[1]:3 [ do10::i#2 do10::i#1 ]
Uplifting [do10] best 800 combination zp[1]:3 [ do10::i#2 do10::i#1 ] 
Allocated (was zp[1]:3) zp[1]:2 [ do10::i#2 do10::i#1 ]
Allocated (was zp[1]:4) zp[1]:3 [ idx ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests calling into a function pointer with local variables
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 3
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main 
    // [12] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // hello
hello: {
    // [6] phi from hello to hello::@1 [phi:hello->hello::@1]
  __b1_from_hello:
    // [6] phi hello::i#2 = 0 [phi:hello->hello::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [6] phi from hello::@1 to hello::@1 [phi:hello::@1->hello::@1]
  __b1_from___b1:
    // [6] phi hello::i#2 = hello::i#1 [phi:hello::@1->hello::@1#0] -- register_copy 
    jmp __b1
    // hello::@1
  __b1:
    // [7] SCREEN[idx] = msg[hello::i#2] -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuxx 
    lda msg,x
    ldy.z idx
    sta SCREEN,y
    // [8] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [9] hello::i#1 = ++ hello::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if(0!=msg[hello::i#1]) goto hello::@1 -- 0_neq_pbuc1_derefidx_vbuxx_then_la1 
    lda msg,x
    cmp #0
    bne __b1_from___b1
    jmp __breturn
    // hello::@return
  __breturn:
    // [11] return 
    rts
}
  // main
main: {
    // [13] call do10 
    // [15] phi from main to do10 [phi:main->do10]
  do10_from_main:
    jsr do10
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // do10
do10: {
    .label i = 2
    // [16] phi from do10 to do10::@1 [phi:do10->do10::@1]
  __b1_from_do10:
    // [16] phi do10::i#2 = 0 [phi:do10->do10::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [16] phi from do10::@1 to do10::@1 [phi:do10::@1->do10::@1]
  __b1_from___b1:
    // [16] phi do10::i#2 = do10::i#1 [phi:do10::@1->do10::@1#0] -- register_copy 
    jmp __b1
    // do10::@1
  __b1:
    // [17] call hello 
    jsr hello
    // [18] do10::i#1 = ++ do10::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [19] if(do10::i#1!=$a) goto do10::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$a
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // do10::@return
  __breturn:
    // [20] return 
    rts
}
  // File Data
  msg: .text "hello "
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction __b1_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_hello:
Removing instruction __breturn:
Removing instruction do10_from_main:
Removing instruction __breturn:
Removing instruction __b1_from_do10:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void __start()
void do10(void()* do10::fn)
void()* do10::fn
byte do10::i
byte do10::i#1 i zp[1]:2 1501.5
byte do10::i#2 i zp[1]:2 1001.0
__stackcall void hello()
byte hello::i
byte hello::i#1 reg byte x 150001.5
byte hello::i#2 reg byte x 100001.0
volatile byte idx loadstore zp[1]:3 20000.333333333336
void main()
const to_nomodify byte* msg[]  = "hello "

reg byte x [ hello::i#2 hello::i#1 ]
zp[1]:2 [ do10::i#2 do10::i#1 ]
zp[1]:3 [ idx ]


FINAL ASSEMBLER
Score: 581

  // File Comments
// Tests calling into a function pointer with local variables
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 3
  // __start
__start: {
    // __start::__init1
    // idx = 0
    // [1] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main 
    // [12] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // hello
hello: {
    // [6] phi from hello to hello::@1 [phi:hello->hello::@1]
    // [6] phi hello::i#2 = 0 [phi:hello->hello::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [6] phi from hello::@1 to hello::@1 [phi:hello::@1->hello::@1]
    // [6] phi hello::i#2 = hello::i#1 [phi:hello::@1->hello::@1#0] -- register_copy 
    // hello::@1
  __b1:
    // SCREEN[idx++] = msg[i++]
    // [7] SCREEN[idx] = msg[hello::i#2] -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuxx 
    lda msg,x
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = msg[i++];
    // [8] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [9] hello::i#1 = ++ hello::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // while(msg[i])
    // [10] if(0!=msg[hello::i#1]) goto hello::@1 -- 0_neq_pbuc1_derefidx_vbuxx_then_la1 
    lda msg,x
    cmp #0
    bne __b1
    // hello::@return
    // }
    // [11] return 
    rts
}
  // main
main: {
    // do10(f)
    // [13] call do10 
    // [15] phi from main to do10 [phi:main->do10]
    jsr do10
    // main::@return
    // }
    // [14] return 
    rts
}
  // do10
do10: {
    .label i = 2
    // [16] phi from do10 to do10::@1 [phi:do10->do10::@1]
    // [16] phi do10::i#2 = 0 [phi:do10->do10::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [16] phi from do10::@1 to do10::@1 [phi:do10::@1->do10::@1]
    // [16] phi do10::i#2 = do10::i#1 [phi:do10::@1->do10::@1#0] -- register_copy 
    // do10::@1
  __b1:
    // (*fn)()
    // [17] call hello 
    jsr hello
    // for( byte i: 0..9)
    // [18] do10::i#1 = ++ do10::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [19] if(do10::i#1!=$a) goto do10::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$a
    cmp.z i
    bne __b1
    // do10::@return
    // }
    // [20] return 
    rts
}
  // File Data
  msg: .text "hello "
  .byte 0

