
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::$0 = main::b + 1
  main::c#0 = main::$0
  main::$1 = main::c#0 + 1
  main::d#0 = main::$1
  main::SCREEN[0] = main::b
  main::SCREEN[1] = main::c#0
  main::SCREEN[2] = main::d#0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
label __start::@1
label __start::@return
void main()
number~ main::$0
number~ main::$1
label main::@return
const nomodify byte* main::SCREEN = (byte*)$400
const byte main::b = 'c'
byte main::c
byte main::c#0
byte main::d
byte main::d#0

Adding number conversion cast (unumber) 1 in main::$0 = main::b + 1
Adding number conversion cast (unumber) main::$0 in main::$0 = main::b + (unumber)1
Adding number conversion cast (unumber) 1 in main::$1 = main::c#0 + 1
Adding number conversion cast (unumber) main::$1 in main::$1 = main::c#0 + (unumber)1
Adding number conversion cast (unumber) 0 in main::SCREEN[0] = main::b
Adding number conversion cast (unumber) 1 in main::SCREEN[1] = main::c#0
Adding number conversion cast (unumber) 2 in main::SCREEN[2] = main::d#0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = main::b + 1
Inferred type updated to byte in main::$1 = main::c#0 + 1
Alias main::c#0 = main::$0 
Alias main::d#0 = main::$1 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] main::c#0 = main::b + 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::c#0 = main::b+1
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN in [2] main::SCREEN[0] = main::b
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [0] main::d#0 = main::c#0 + 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::d#0 = main::c#0+1
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::SCREEN+2)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::SCREEN = main::b
  [1] *(main::SCREEN+1) = main::c#0
  [2] *(main::SCREEN+2) = main::d#0
  to:main::@return
main::@return: scope:[main]  from main
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::c
byte main::d

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::SCREEN = main::b [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(main::SCREEN+1) = main::c#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *(main::SCREEN+2) = main::d#0 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 27 combination 
Uplifting [] best 27 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests comma-separated declarations
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const b = 'c'
    .const c = b+1
    .const d = c+1
    .label SCREEN = $400
    // [0] *main::SCREEN = main::b -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // [1] *(main::SCREEN+1) = main::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // [2] *(main::SCREEN+2) = main::d#0 -- _deref_pbuc1=vbuc2 
    lda #d
    sta SCREEN+2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
label main::@return
const nomodify byte* main::SCREEN = (byte*) 1024
const byte main::b = 'c'
byte main::c
const byte main::c#0 c = main::b+1
byte main::d
const byte main::d#0 d = main::c#0+1



FINAL ASSEMBLER
Score: 24

  // File Comments
// Tests comma-separated declarations
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const b = 'c'
    .const c = b+1
    .const d = c+1
    .label SCREEN = $400
    // SCREEN[0] = b
    // [0] *main::SCREEN = main::b -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // SCREEN[1] = c
    // [1] *(main::SCREEN+1) = main::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // SCREEN[2] = d
    // [2] *(main::SCREEN+2) = main::d#0 -- _deref_pbuc1=vbuc2 
    lda #d
    sta SCREEN+2
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data

