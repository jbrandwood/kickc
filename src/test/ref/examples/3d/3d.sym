(const signed byte*) COSH = (const signed byte*) SINH+(byte) $40
(const signed byte*) COSQ = (const signed byte*) SINQ+(byte) $40
(const nomodify byte) GREEN = (byte) 5
(const nomodify byte) LIGHT_BLUE = (byte) $e
(const nomodify byte) LIGHT_GREY = (byte) $f
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = (byte) $20
(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER = (byte) $12
(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = (byte) $15
(const signed byte*) PERSP_Z[(number) $100]  = kickasm {{ {
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte*) SCREEN = (byte*) 1024
(const signed byte*) SINH[(number) $140]  = kickasm {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
(const signed byte*) SINQ[(number) $140]  = kickasm {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
(const byte*) SPRITE[]  = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
(const nomodify byte*) SPRITES_COLOR = (byte*) 53287
(const nomodify byte*) SPRITES_XPOS = (byte*) 53248
(const nomodify byte*) SPRITES_YPOS = (byte*) 53249
(const nomodify struct MOS6569_VICII*) VICII = (struct MOS6569_VICII*) 53248
(void()) anim()
(byte~) anim::$10 reg byte a 2002.0
(byte~) anim::$9 reg byte a 2002.0
(label) anim::@1
(label) anim::@10
(label) anim::@2
(label) anim::@3
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@8
(label) anim::@9
(byte) anim::i
(byte) anim::i#1 i zp[1]:4 1501.5
(byte) anim::i#2 i zp[1]:4 706.5882352941177
(byte) anim::i2
(byte) anim::i2#0 reg byte x 750.75
(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
(signed byte~) calculate_matrix::$10 reg byte a 2002.0
(signed byte~) calculate_matrix::$11 reg byte a 2002.0
(signed byte~) calculate_matrix::$12 reg byte a 2002.0
(signed byte~) calculate_matrix::$13 reg byte a 2002.0
(signed byte~) calculate_matrix::$14 reg byte a 2002.0
(signed byte~) calculate_matrix::$15 reg byte a 2002.0
(signed byte~) calculate_matrix::$16 reg byte a 2002.0
(signed byte~) calculate_matrix::$17 reg byte a 2002.0
(signed byte~) calculate_matrix::$18 reg byte a 2002.0
(signed byte~) calculate_matrix::$19 reg byte a 2002.0
(signed byte~) calculate_matrix::$20 reg byte a 2002.0
(signed byte~) calculate_matrix::$21 reg byte a 2002.0
(signed byte~) calculate_matrix::$22 reg byte a 2002.0
(signed byte~) calculate_matrix::$23 reg byte a 2002.0
(signed byte~) calculate_matrix::$24 reg byte a 2002.0
(signed byte~) calculate_matrix::$25 reg byte a 2002.0
(signed byte~) calculate_matrix::$26 reg byte a 2002.0
(signed byte~) calculate_matrix::$27 reg byte a 2002.0
(signed byte~) calculate_matrix::$28 reg byte a 2002.0
(signed byte~) calculate_matrix::$29 reg byte a 2002.0
(signed byte~) calculate_matrix::$30 reg byte a 2002.0
(signed byte~) calculate_matrix::$31 reg byte a 2002.0
(signed byte~) calculate_matrix::$32 reg byte a 2002.0
(signed byte~) calculate_matrix::$33 reg byte a 2002.0
(signed byte~) calculate_matrix::$34 reg byte a 2002.0
(label) calculate_matrix::@return
(signed byte) calculate_matrix::sx
(signed byte) calculate_matrix::sx#0 reg byte x 737.1818181818182
(signed byte) calculate_matrix::sy
(signed byte) calculate_matrix::sy#0 sy zp[1]:3 407.1333333333334
(signed byte) calculate_matrix::sz
(signed byte) calculate_matrix::t1
(signed byte) calculate_matrix::t1#0 t1 zp[1]:23 417.08333333333337
(signed byte) calculate_matrix::t10
(signed byte) calculate_matrix::t10#0 reg byte x 91.0
(signed byte) calculate_matrix::t2
(signed byte) calculate_matrix::t2#0 t2 zp[1]:24 455.0
(signed byte) calculate_matrix::t3
(signed byte) calculate_matrix::t3#0 t3 zp[1]:25 147.2058823529412
(signed byte) calculate_matrix::t4
(signed byte) calculate_matrix::t4#0 t4 zp[1]:26 151.66666666666666
(signed byte) calculate_matrix::t5
(signed byte) calculate_matrix::t5#0 t5 zp[1]:27 147.2058823529412
(signed byte) calculate_matrix::t6
(signed byte) calculate_matrix::t6#0 t6 zp[1]:28 156.40625
(signed byte) calculate_matrix::t7
(signed byte) calculate_matrix::t7#0 t7 zp[1]:29 151.66666666666666
(signed byte) calculate_matrix::t8
(signed byte) calculate_matrix::t8#0 t8 zp[1]:30 151.66666666666666
(signed byte) calculate_matrix::t9
(signed byte) calculate_matrix::t9#0 t9 zp[1]:31 88.32352941176471
(void()) debug_print()
(label) debug_print::@1
(label) debug_print::@10
(label) debug_print::@11
(label) debug_print::@12
(label) debug_print::@13
(label) debug_print::@14
(label) debug_print::@15
(label) debug_print::@16
(label) debug_print::@17
(label) debug_print::@2
(label) debug_print::@3
(label) debug_print::@4
(label) debug_print::@5
(label) debug_print::@6
(label) debug_print::@7
(label) debug_print::@8
(label) debug_print::@9
(label) debug_print::@return
(byte*) debug_print::at_line
(const byte*) debug_print::at_line#0 at_line = (const byte*) SCREEN+(word)(number) $13*(number) $28
(byte) debug_print::c
(byte) debug_print::c#1 c zp[1]:25 66667.33333333333
(byte) debug_print::c#2 c zp[1]:25 42105.68421052631
(byte) debug_print::i
(byte) debug_print::i#1 i zp[1]:23 150001.5
(byte) debug_print::i#2 i zp[1]:23 40000.4
(label) debug_print::print_schar_pos1
(label) debug_print::print_schar_pos10
(byte) debug_print::print_schar_pos10_col
(const byte) debug_print::print_schar_pos10_col#0 print_schar_pos10_col = (byte) $1d
(byte) debug_print::print_schar_pos10_row
(const byte) debug_print::print_schar_pos10_row#0 print_schar_pos10_row = (byte) 6
(signed byte) debug_print::print_schar_pos10_sb
(signed byte) debug_print::print_schar_pos10_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos11
(byte) debug_print::print_schar_pos11_col
(const byte) debug_print::print_schar_pos11_col#0 print_schar_pos11_col = (byte) $21
(byte) debug_print::print_schar_pos11_row
(const byte) debug_print::print_schar_pos11_row#0 print_schar_pos11_row = (byte) 6
(signed byte) debug_print::print_schar_pos11_sb
(signed byte) debug_print::print_schar_pos11_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos12
(byte) debug_print::print_schar_pos12_col
(const byte) debug_print::print_schar_pos12_col#0 print_schar_pos12_col = (byte) $25
(byte) debug_print::print_schar_pos12_row
(const byte) debug_print::print_schar_pos12_row#0 print_schar_pos12_row = (byte) 6
(signed byte) debug_print::print_schar_pos12_sb
(signed byte) debug_print::print_schar_pos12_sb#0 reg byte a 2002.0
(byte) debug_print::print_schar_pos1_col
(const byte) debug_print::print_schar_pos1_col#0 print_schar_pos1_col = (byte) $25
(byte) debug_print::print_schar_pos1_row
(signed byte) debug_print::print_schar_pos1_sb
(signed byte) debug_print::print_schar_pos1_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos2
(byte) debug_print::print_schar_pos2_col
(const byte) debug_print::print_schar_pos2_col#0 print_schar_pos2_col = (byte) $25
(byte) debug_print::print_schar_pos2_row
(const byte) debug_print::print_schar_pos2_row#0 print_schar_pos2_row = (byte) 1
(signed byte) debug_print::print_schar_pos2_sb
(signed byte) debug_print::print_schar_pos2_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos3
(byte) debug_print::print_schar_pos3_col
(const byte) debug_print::print_schar_pos3_col#0 print_schar_pos3_col = (byte) $25
(byte) debug_print::print_schar_pos3_row
(const byte) debug_print::print_schar_pos3_row#0 print_schar_pos3_row = (byte) 2
(signed byte) debug_print::print_schar_pos3_sb
(label) debug_print::print_schar_pos4
(byte) debug_print::print_schar_pos4_col
(const byte) debug_print::print_schar_pos4_col#0 print_schar_pos4_col = (byte) $1d
(byte) debug_print::print_schar_pos4_row
(const byte) debug_print::print_schar_pos4_row#0 print_schar_pos4_row = (byte) 4
(signed byte) debug_print::print_schar_pos4_sb
(signed byte) debug_print::print_schar_pos4_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos5
(byte) debug_print::print_schar_pos5_col
(const byte) debug_print::print_schar_pos5_col#0 print_schar_pos5_col = (byte) $21
(byte) debug_print::print_schar_pos5_row
(const byte) debug_print::print_schar_pos5_row#0 print_schar_pos5_row = (byte) 4
(signed byte) debug_print::print_schar_pos5_sb
(signed byte) debug_print::print_schar_pos5_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos6
(byte) debug_print::print_schar_pos6_col
(const byte) debug_print::print_schar_pos6_col#0 print_schar_pos6_col = (byte) $25
(byte) debug_print::print_schar_pos6_row
(const byte) debug_print::print_schar_pos6_row#0 print_schar_pos6_row = (byte) 4
(signed byte) debug_print::print_schar_pos6_sb
(signed byte) debug_print::print_schar_pos6_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos7
(byte) debug_print::print_schar_pos7_col
(const byte) debug_print::print_schar_pos7_col#0 print_schar_pos7_col = (byte) $1d
(byte) debug_print::print_schar_pos7_row
(const byte) debug_print::print_schar_pos7_row#0 print_schar_pos7_row = (byte) 5
(signed byte) debug_print::print_schar_pos7_sb
(signed byte) debug_print::print_schar_pos7_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos8
(byte) debug_print::print_schar_pos8_col
(const byte) debug_print::print_schar_pos8_col#0 print_schar_pos8_col = (byte) $21
(byte) debug_print::print_schar_pos8_row
(const byte) debug_print::print_schar_pos8_row#0 print_schar_pos8_row = (byte) 5
(signed byte) debug_print::print_schar_pos8_sb
(signed byte) debug_print::print_schar_pos8_sb#0 reg byte a 2002.0
(label) debug_print::print_schar_pos9
(byte) debug_print::print_schar_pos9_col
(const byte) debug_print::print_schar_pos9_col#0 print_schar_pos9_col = (byte) $25
(byte) debug_print::print_schar_pos9_row
(const byte) debug_print::print_schar_pos9_row#0 print_schar_pos9_row = (byte) 5
(signed byte) debug_print::print_schar_pos9_sb
(signed byte) debug_print::print_schar_pos9_sb#0 reg byte a 2002.0
(void()) debug_print_init()
(byte*~) debug_print_init::$41 zp[2]:5 2002.0
(byte*~) debug_print_init::$44 zp[2]:7 2002.0
(byte*~) debug_print_init::$47 zp[2]:9 2002.0
(byte*~) debug_print_init::$50 zp[2]:11 2002.0
(byte*~) debug_print_init::$53 zp[2]:13 2002.0
(byte*~) debug_print_init::$56 zp[2]:15 2002.0
(byte*~) debug_print_init::$59 zp[2]:17 2002.0
(byte*~) debug_print_init::$62 zp[2]:19 2002.0
(byte*~) debug_print_init::$65 zp[2]:21 2002.0
(label) debug_print_init::@1
(label) debug_print_init::@10
(label) debug_print_init::@11
(label) debug_print_init::@12
(label) debug_print_init::@13
(label) debug_print_init::@14
(label) debug_print_init::@15
(label) debug_print_init::@16
(label) debug_print_init::@17
(label) debug_print_init::@2
(label) debug_print_init::@3
(label) debug_print_init::@4
(label) debug_print_init::@5
(label) debug_print_init::@6
(label) debug_print_init::@7
(label) debug_print_init::@8
(label) debug_print_init::@9
(label) debug_print_init::@return
(const byte*) debug_print_init::COLS = (byte*) 55296
(byte*) debug_print_init::at_cols
(const byte*) debug_print_init::at_cols#0 at_cols = (const byte*) debug_print_init::COLS+(word)(number) $10*(number) $28
(byte*) debug_print_init::at_line
(const byte*) debug_print_init::at_line#0 at_line = (const byte*) SCREEN+(word)(number) $10*(number) $28
(byte) debug_print_init::c
(byte) debug_print_init::c#1 c zp[1]:2 67.33333333333333
(byte) debug_print_init::c#2 c zp[1]:2 297.3125
(byte) debug_print_init::col
(byte) debug_print_init::col#0 reg byte x 556.111111111111
(byte) debug_print_init::i
(byte) debug_print_init::i#1 i zp[1]:3 151.5
(byte) debug_print_init::i#2 i zp[1]:3 45.63636363636364
(byte) debug_print_init::j
(byte) debug_print_init::j#1 reg byte y 1501.5
(byte) debug_print_init::j#2 reg byte y 550.5500000000001
(const byte*) debug_print_init::str[(byte) 3]  = (byte*) "sx"
(const byte*) debug_print_init::str1[(byte) 3]  = (byte*) "sy"
(const byte*) debug_print_init::str10[(byte) 3]  = (byte*) "xp"
(const byte*) debug_print_init::str11[(byte) 3]  = (byte*) "yp"
(const byte*) debug_print_init::str2[(byte) 3]  = (byte*) "sz"
(const byte*) debug_print_init::str3[(byte) 2]  = (byte*) "x"
(const byte*) debug_print_init::str4[(byte) 2]  = (byte*) "y"
(const byte*) debug_print_init::str5[(byte) 2]  = (byte*) "z"
(const byte*) debug_print_init::str6[(byte) 3]  = (byte*) "xr"
(const byte*) debug_print_init::str7[(byte) 3]  = (byte*) "yr"
(const byte*) debug_print_init::str8[(byte) 3]  = (byte*) "zr"
(const byte*) debug_print_init::str9[(byte) 3]  = (byte*) "pp"
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:7 20002.0
(byte*) memset::dst#2 dst zp[2]:7 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_screen#0
(const byte*) mulf_sqr1[(number) $200]  = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
(const byte*) mulf_sqr2[(number) $200]  = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
(const signed byte*) pp = (signed byte*) 243
(const signed byte*) pps[(number) 8]  = { fill( 8, 0) }
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(label) print_char_at::@return
(byte*) print_char_at::at
(byte*) print_char_at::at#0 at zp[2]:5 2000002.0
(byte*) print_char_at::at#1 at zp[2]:5 2000002.0
(byte*) print_char_at::at#2 at zp[2]:5 2.0000002E7
(byte*) print_char_at::at#3 at zp[2]:5 1.0000001E7
(byte*) print_char_at::at#4 at zp[2]:5 1.22000005E8
(byte) print_char_at::ch
(byte) print_char_at::ch#2 reg byte x 1.0000001E7
(byte) print_char_at::ch#3 reg byte x 2.0000002E7
(byte) print_char_at::ch#4 reg byte x 1.20000003E8
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(void()) print_schar_at((signed byte) print_schar_at::b , (byte*) print_schar_at::at)
(label) print_schar_at::@1
(label) print_schar_at::@2
(label) print_schar_at::@3
(label) print_schar_at::@4
(label) print_schar_at::@return
(byte*) print_schar_at::at
(byte*) print_schar_at::at#0 at zp[2]:5 101.0
(byte*) print_schar_at::at#1 at zp[2]:5 101.0
(byte*) print_schar_at::at#15 at zp[2]:5 100001.0
(byte*) print_schar_at::at#16 at zp[2]:5 100001.0
(byte*) print_schar_at::at#17 at zp[2]:5 100001.0
(byte*) print_schar_at::at#18 at zp[2]:5 100001.0
(byte*) print_schar_at::at#19 at zp[2]:5 100001.0
(byte*) print_schar_at::at#2 at zp[2]:5 101.0
(byte*) print_schar_at::at#20 at zp[2]:5 100001.0
(byte*) print_schar_at::at#21 at zp[2]:5 450039.0
(signed byte) print_schar_at::b
(signed byte) print_schar_at::b#0 b zp[1]:24 2000002.0
(signed byte) print_schar_at::b#1 b zp[1]:24 202.0
(signed byte) print_schar_at::b#10 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#11 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#12 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#13 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#14 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#15 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#16 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#17 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#18 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#19 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#2 b zp[1]:24 202.0
(signed byte) print_schar_at::b#20 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#21 b zp[1]:24 200002.0
(signed byte) print_schar_at::b#22 b zp[1]:24 601887.1666666666
(signed byte) print_schar_at::b#24 b zp[1]:24 1000001.0
(signed byte) print_schar_at::b#3 b zp[1]:24 202.0
(signed byte) print_schar_at::b#4 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#5 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#7 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#8 b zp[1]:24 2002.0
(signed byte) print_schar_at::b#9 b zp[1]:24 2002.0
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::at#0 at zp[2]:7 1001.0
(byte*) print_str_at::at#13 at zp[2]:7 1034.6666666666667
(byte*) print_str_at::at#15 at zp[2]:7 101.0
(byte*) print_str_at::str
(byte*) print_str_at::str#0 str zp[2]:5 2002.0
(byte*) print_str_at::str#13 str zp[2]:5 1026.25
(byte*) print_str_at::str#15 str zp[2]:5 101.0
(void()) print_uchar_at((byte) print_uchar_at::b , (byte*) print_uchar_at::at)
(byte~) print_uchar_at::$0 reg byte a 2.0000002E7
(byte~) print_uchar_at::$2 reg byte y 1.0000001E7
(label) print_uchar_at::@1
(label) print_uchar_at::@return
(byte*) print_uchar_at::at
(byte*) print_uchar_at::at#0 at zp[2]:5 3000000.428571428
(byte) print_uchar_at::b
(byte) print_uchar_at::b#0 b zp[1]:24 4200000.6
(const word*) psp1 = (word*) 246
(const word*) psp2 = (word*) 248
(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
(label) rotate_matrix::@return
(signed byte) rotate_matrix::x
(signed byte) rotate_matrix::x#0 reg byte x 3667.333333333333
(signed byte) rotate_matrix::y
(signed byte) rotate_matrix::y#0 y zp[1]:24 3667.333333333333
(signed byte) rotate_matrix::z
(signed byte) rotate_matrix::z#0 z zp[1]:25 3667.333333333333
(const signed byte*) rotation_matrix[(number) 9]  = { fill( 9, 0) }
(void()) sprites_init()
(label) sprites_init::@1
(label) sprites_init::@return
(const byte*) sprites_init::SCREEN = (byte*) 1024
(byte) sprites_init::i
(byte) sprites_init::i#1 reg byte x 151.5
(byte) sprites_init::i#2 reg byte x 134.66666666666666
(byte*) sprites_init::sprites_ptr
(const byte*) sprites_init::sprites_ptr#0 sprites_ptr = (const byte*) sprites_init::SCREEN+(word) $3f8
(void()) store_matrix()
(label) store_matrix::@return
(signed byte) sx
(signed byte) sx#11 sx zp[1]:2 14.488888888888889
(signed byte) sx#2 sx zp[1]:2 101.0
(signed byte) sy
(signed byte) sy#11 sy zp[1]:3 14.32967032967033
(signed byte) sy#2 sy zp[1]:3 202.0
(const signed byte) sz = (signed byte) 0
(const signed byte*) xp = (signed byte*) 244
(const signed byte*) xps[(number) 8]  = { fill( 8, 0) }
(const signed byte*) xr = (signed byte*) 240
(const signed byte*) xrs[(number) 8]  = { fill( 8, 0) }
(const signed byte*) xs[(number) 8]  = { (signed byte) -$34, (signed byte) -$34, (signed byte) -$34, (signed byte) 0, (signed byte) 0, (signed byte) $34, (signed byte) $34, (signed byte) $34 }
(const signed byte*) yp = (signed byte*) 245
(const signed byte*) yps[(number) 8]  = { fill( 8, 0) }
(const signed byte*) yr = (signed byte*) 241
(const signed byte*) yrs[(number) 8]  = { fill( 8, 0) }
(const signed byte*) ys[(number) 8]  = { (signed byte) -$34, (signed byte) 0, (signed byte) $34, (signed byte) -$34, (signed byte) $34, (signed byte) -$34, (signed byte) 0, (signed byte) $34 }
(const signed byte*) zr = (signed byte*) 242
(const signed byte*) zrs[(number) 8]  = { fill( 8, 0) }
(const signed byte*) zs[(number) 8]  = { (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34, (signed byte) $34 }

reg byte x [ sprites_init::i#2 sprites_init::i#1 ]
reg byte y [ debug_print_init::j#2 debug_print_init::j#1 ]
zp[1]:2 [ sx#11 sx#2 debug_print_init::c#2 debug_print_init::c#1 ]
zp[1]:3 [ sy#11 sy#2 calculate_matrix::sy#0 debug_print_init::i#2 debug_print_init::i#1 ]
zp[1]:4 [ anim::i#2 anim::i#1 ]
reg byte x [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ]
reg byte x [ debug_print_init::col#0 ]
zp[2]:5 [ debug_print_init::$41 print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 print_uchar_at::at#0 print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ]
zp[2]:7 [ debug_print_init::$44 memset::dst#2 memset::dst#1 print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ]
zp[2]:9 [ debug_print_init::$47 ]
zp[2]:11 [ debug_print_init::$50 ]
zp[2]:13 [ debug_print_init::$53 ]
zp[2]:15 [ debug_print_init::$56 ]
zp[2]:17 [ debug_print_init::$59 ]
zp[2]:19 [ debug_print_init::$62 ]
zp[2]:21 [ debug_print_init::$65 ]
reg byte x [ calculate_matrix::sx#0 ]
reg byte x [ rotate_matrix::x#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$9 ]
reg byte a [ anim::$10 ]
zp[1]:23 [ calculate_matrix::t1#0 debug_print::i#2 debug_print::i#1 ]
zp[1]:24 [ calculate_matrix::t2#0 rotate_matrix::y#0 print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 print_uchar_at::b#0 ]
zp[1]:25 [ calculate_matrix::t3#0 rotate_matrix::z#0 debug_print::c#2 debug_print::c#1 ]
zp[1]:26 [ calculate_matrix::t4#0 ]
zp[1]:27 [ calculate_matrix::t5#0 ]
zp[1]:28 [ calculate_matrix::t6#0 ]
zp[1]:29 [ calculate_matrix::t7#0 ]
zp[1]:30 [ calculate_matrix::t8#0 ]
zp[1]:31 [ calculate_matrix::t9#0 ]
reg byte x [ calculate_matrix::t10#0 ]
reg byte a [ calculate_matrix::$10 ]
reg byte a [ calculate_matrix::$11 ]
reg byte a [ calculate_matrix::$12 ]
reg byte a [ calculate_matrix::$13 ]
reg byte a [ calculate_matrix::$14 ]
reg byte a [ calculate_matrix::$15 ]
reg byte a [ calculate_matrix::$16 ]
reg byte a [ calculate_matrix::$17 ]
reg byte a [ calculate_matrix::$18 ]
reg byte a [ calculate_matrix::$19 ]
reg byte a [ calculate_matrix::$20 ]
reg byte a [ calculate_matrix::$21 ]
reg byte a [ calculate_matrix::$22 ]
reg byte a [ calculate_matrix::$23 ]
reg byte a [ calculate_matrix::$24 ]
reg byte a [ calculate_matrix::$25 ]
reg byte a [ calculate_matrix::$26 ]
reg byte a [ calculate_matrix::$27 ]
reg byte a [ calculate_matrix::$28 ]
reg byte a [ calculate_matrix::$29 ]
reg byte a [ calculate_matrix::$30 ]
reg byte a [ calculate_matrix::$31 ]
reg byte a [ calculate_matrix::$32 ]
reg byte a [ calculate_matrix::$33 ]
reg byte a [ calculate_matrix::$34 ]
reg byte a [ debug_print::print_schar_pos1_sb#0 ]
reg byte a [ debug_print::print_schar_pos2_sb#0 ]
reg byte a [ debug_print::print_schar_pos4_sb#0 ]
reg byte a [ debug_print::print_schar_pos5_sb#0 ]
reg byte a [ debug_print::print_schar_pos6_sb#0 ]
reg byte a [ debug_print::print_schar_pos7_sb#0 ]
reg byte a [ debug_print::print_schar_pos8_sb#0 ]
reg byte a [ debug_print::print_schar_pos9_sb#0 ]
reg byte a [ debug_print::print_schar_pos10_sb#0 ]
reg byte a [ debug_print::print_schar_pos11_sb#0 ]
reg byte a [ debug_print::print_schar_pos12_sb#0 ]
reg byte a [ print_uchar_at::$0 ]
reg byte y [ print_uchar_at::$2 ]
