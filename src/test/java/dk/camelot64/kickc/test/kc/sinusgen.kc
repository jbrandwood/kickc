// Sinus Generator functions using only multiplication, addition and bit shifting
// USes a single division for converting the wavelength to a reciprocal.
// Generates sinus using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
// Uses the approximation sin(x) = x - x^/6 + x^/128
// Uses reciprocal
// Generates the sinus value over the interval 0-PI/2 and uses mirroring to get the remaining values

import "division.kc"
import "multiply.kc"
import "print.kc"

void main() {

    word[20] lintab;

    lin16u_gen(1000, 30000, lintab, 20);

    print_cls();
    for(byte i=0; i<20*2; i=i+2) {
        print_byte(i);
        print_str(" @");
        print_word(lintab[i]);
    }

}

// Generate signed word sinus table
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
void sin16s_gen(word* sintab, word wavelength) {



}

// Generate word linear table
// lintab - the table to generate into
// length - the number of points in a total sinus wavelength (the size of the table)
void lin16u_gen(word min, word max, word* lintab, word length) {
    word ampl = max-min;
    word dstep = div16u(ampl, length);

    dword val = min<<16;
    for(word i=0; i<length; i++) {
        *lintab = >val;
        val = val + step;
    }

}
